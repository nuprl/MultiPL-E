{
  "language": "ts",
  "name": "HumanEval_136_largest_smallest_integers",
  "results": [
    {
      "exit_code": 2,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let negative_max: number | undefined = undefined;\n    let positive_min: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (negative_max === undefined) {\n                negative_max = lst[i];\n            } else if (lst[i] > negative_max) {\n                negative_max = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (positive_min === undefined) {\n                positive_min = lst[i];\n            } else if (lst[i] < positive_min) {\n                positive_min = lst[i];\n            }\n        }\n    }\n    return [negative_max, positive_min];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5])); // [-5, undefined]\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5])); // [-1, 4]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 4, 5])); // [-5, 4]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 0])); // [-5, undefined]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 0, 1, 2, 3, 4, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0])); // [undefined, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5])); // [undefined, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3wgtazgn.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmp3wgtazgn.ts(36,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334262
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n  let largestNegative: number | undefined = undefined;\n  let smallestPositive: number | undefined = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largestNegative === undefined) {\n        largestNegative = lst[i];\n      } else if (lst[i] > largestNegative) {\n        largestNegative = lst[i];\n      }\n    } else if (lst[i] > 0) {\n      if (smallestPositive === undefined) {\n        smallestPositive = lst[i];\n      } else if (lst[i] < smallestPositive) {\n        smallestPositive = lst[i];\n      }\n    }\n  }\n  return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5])); // [-5, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5])); // [undefined, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334262
    },
    {
      "exit_code": 1,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let min = undefined;\n    let max = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (max === undefined || lst[i] > max) {\n                max = lst[i];\n            }\n        } else {\n            if (min === undefined || lst[i] < min) {\n                min = lst[i];\n            }\n        }\n    }\n    return [max, min];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, 2, -3, 4, -5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, -5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 0, 0, 0, 0, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmpjhhhrf2y.js:36:12)\n    at Object.<anonymous> (/tmp/tmpjhhhrf2y.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined, 0 ],\n  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 2 ]\n[ -1, 4 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n[ undefined, 0 ]\n[ -1, 0 ]\n[ undefined, 0 ]\n",
      "timestamp": 1660334262
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest_positive: number | undefined = undefined;\n    let largest_negative: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n            if (smallest_positive === undefined) {\n                smallest_positive = lst[i];\n            } else if (lst[i] < smallest_positive) {\n                smallest_positive = lst[i];\n            }\n        } else if (lst[i] < 0) {\n            if (largest_negative === undefined) {\n                largest_negative = lst[i];\n            } else if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334262
    },
    {
      "exit_code": 1,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let negatives: number[] = [];\n    let positives: number[] = [];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            negatives.push(lst[i]);\n        } else if (lst[i] > 0) {\n            positives.push(lst[i]);\n        }\n    }\n    if (negatives.length === 0) {\n        negatives.push(undefined);\n    }\n    if (positives.length === 0) {\n        positives.push(undefined);\n    }\n    return [Math.max(...negatives), Math.min(...positives)];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmpm2a59y6w.js:28:12)\n    at Object.<anonymous> (/tmp/tmpm2a59y6w.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN, 1 ],\n  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334262
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largestNegative: number | undefined;\n    let smallestPositive: number | undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined) {\n                largestNegative = lst[i];\n            } else if (lst[i] > largestNegative) {\n                largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined) {\n                smallestPositive = lst[i];\n            } else if (lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334262
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n  let largest_negative: number | undefined = undefined;\n  let smallest_positive: number | undefined = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largest_negative === undefined) {\n        largest_negative = lst[i];\n      } else if (lst[i] > largest_negative) {\n        largest_negative = lst[i];\n      }\n    } else if (lst[i] > 0) {\n      if (smallest_positive === undefined) {\n        smallest_positive = lst[i];\n      } else if (lst[i] < smallest_positive) {\n        smallest_positive = lst[i];\n      }\n    }\n  }\n  return [largest_negative, smallest_positive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, 2, -3, 4, -5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, 0]));\nconsole.log(largest_smallest_integers([]));\nconsole.log(largest_smallest_integers([0]));\nconsole.log(largest_smallest_integers([0, 0]));\nconsole.log(largest_smallest_integers([0, 0, 0]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 4 ]\n[ -1, 2 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334262
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largestNegative: number | undefined;\n    let smallestPositive: number | undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined) {\n                largestNegative = lst[i];\n            } else if (lst[i] > largestNegative) {\n                largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined) {\n                smallestPositive = lst[i];\n            } else if (lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5, 6]));\nconsole.log(largest_smallest_integers([-1, -2, -3]));\nconsole.log(largest_smallest_integers([4, 5, 6]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, 4 ]\n[ -1, undefined ]\n[ undefined, 4 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334262
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let neg = lst.filter(x => x < 0).sort((a, b) => b - a);\n    let pos = lst.filter(x => x > 0).sort((a, b) => a - b);\n    return [neg[0], pos[0]];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, 4 ]\n[ -1, undefined ]\n[ undefined, 1 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334262
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let negative_max: number | undefined = undefined;\n    let positive_min: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (negative_max === undefined) {\n                negative_max = lst[i];\n            } else if (lst[i] > negative_max) {\n                negative_max = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (positive_min === undefined) {\n                positive_min = lst[i];\n            } else if (lst[i] < positive_min) {\n                positive_min = lst[i];\n            }\n        }\n    }\n    return [negative_max, positive_min];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5])); // [-5, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5])); // [undefined, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5])); // [-1, 4]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 4 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334262
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest_positive: number | undefined = undefined;\n    let largest_negative: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n            if (smallest_positive === undefined) {\n                smallest_positive = lst[i];\n            } else if (lst[i] < smallest_positive) {\n                smallest_positive = lst[i];\n            }\n        } else if (lst[i] < 0) {\n            if (largest_negative === undefined) {\n                largest_negative = lst[i];\n            } else if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5])); // [-3, 4]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5])); // [-5, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5])); // [undefined, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, 0, 1, 2, 3, 4, 5])); // [-1, 1]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, 4 ]\n[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334262
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largest_negative: number | undefined = undefined;\n    let smallest_positive: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest_negative === undefined) {\n                largest_negative = lst[i];\n            } else if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallest_positive === undefined) {\n                smallest_positive = lst[i];\n            } else if (lst[i] < smallest_positive) {\n                smallest_positive = lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n}\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, 2, -3, 4, -5, 6, -7, 8, -9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 2 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334262
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let negative_max: number | undefined = undefined;\n    let positive_min: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (negative_max === undefined) {\n                negative_max = lst[i];\n            } else if (lst[i] > negative_max) {\n                negative_max = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (positive_min === undefined) {\n                positive_min = lst[i];\n            } else if (lst[i] < positive_min) {\n                positive_min = lst[i];\n            }\n        }\n    }\n    return [negative_max, positive_min];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ -1, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334262
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n            if (smallest === undefined) {\n                smallest = lst[i];\n            } else if (lst[i] < smallest) {\n                smallest = lst[i];\n            }\n        } else if (lst[i] < 0) {\n            if (largest === undefined) {\n                largest = lst[i];\n            } else if (lst[i] > largest) {\n                largest = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334262
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest_positive: number | undefined = undefined;\n    let largest_negative: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n            if (smallest_positive === undefined) {\n                smallest_positive = lst[i];\n            } else if (lst[i] < smallest_positive) {\n                smallest_positive = lst[i];\n            }\n        } else if (lst[i] < 0) {\n            if (largest_negative === undefined) {\n                largest_negative = lst[i];\n            } else if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, 4 ]\n[ -1, undefined ]\n[ undefined, 1 ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334262
    },
    {
      "exit_code": 1,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest === undefined || lst[i] > largest) {\n                largest = lst[i];\n            }\n        } else {\n            if (smallest === undefined || lst[i] < smallest) {\n                smallest = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, 10]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, -10]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmpcnoftr2e.js:34:12)\n    at Object.<anonymous> (/tmp/tmpcnoftr2e.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined, 0 ],\n  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 6 ]\n[ -1, 10 ]\n[ -10, 1 ]\n[ undefined, 0 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334262
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let negative_max = undefined;\n    let positive_min = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (negative_max === undefined) {\n                negative_max = lst[i];\n            } else if (lst[i] > negative_max) {\n                negative_max = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (positive_min === undefined) {\n                positive_min = lst[i];\n            } else if (lst[i] < positive_min) {\n                positive_min = lst[i];\n            }\n        }\n    }\n    return [negative_max, positive_min];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5])); // [-5, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5])); // [undefined, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, 0])); // [-5, 1]\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0])); // [undefined, undefined]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334262
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largestNegative: number | undefined = undefined;\n    let smallestPositive: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined) {\n                largestNegative = lst[i];\n            } else if (lst[i] > largestNegative) {\n                largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined) {\n                smallestPositive = lst[i];\n            } else if (lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5, 6])); // [-3, 4]\nconsole.log(largest_smallest_integers([-10, -8, -7, -5, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); // [-1, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3])); // [-3, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3])); // [undefined, 1]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, 4 ]\n[ -1, 1 ]\n[ -1, undefined ]\n[ undefined, 1 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334262
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largestNegative: number | undefined = undefined;\n    let smallestPositive: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined) {\n                largestNegative = lst[i];\n            } else if (lst[i] > largestNegative) {\n                largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined) {\n                smallestPositive = lst[i];\n            } else if (lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334262
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n            if (smallest === undefined) {\n                smallest = lst[i];\n            } else if (lst[i] < smallest) {\n                smallest = lst[i];\n            }\n        } else if (lst[i] < 0) {\n            if (largest === undefined) {\n                largest = lst[i];\n            } else if (lst[i] > largest) {\n                largest = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, -0]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334262
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n  let largestNegative: number | undefined = undefined;\n  let smallestPositive: number | undefined = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largestNegative === undefined) {\n        largestNegative = lst[i];\n      } else if (lst[i] > largestNegative) {\n        largestNegative = lst[i];\n      }\n    } else if (lst[i] > 0) {\n      if (smallestPositive === undefined) {\n        smallestPositive = lst[i];\n      } else if (lst[i] < smallestPositive) {\n        smallestPositive = lst[i];\n      }\n    }\n  }\n  return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5])); // [-5, undefined]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, 5])); // [-1, 5]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, 0])); // [-1, undefined]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -0.1])); // [-0.1, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5])); // [undefined, 1]\nconsole.log(largest_smallest_integers([0, 0.1, 0.2, 0.3, 0.4])); // [undefined, 0]\nconsole.log(largest_smallest_integers([-0.1, 0.1, 0.2, 0.3, 0.4])); // [-0.1, 0.1]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ -1, 5 ]\n[ -1, undefined ]\n[ -0.1, undefined ]\n[ undefined, 1 ]\n[ undefined, 0.1 ]\n[ -0.1, 0.1 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334262
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largestNegative: number | undefined;\n    let smallestPositive: number | undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined) {\n                largestNegative = lst[i];\n            } else if (lst[i] > largestNegative) {\n                largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined) {\n                smallestPositive = lst[i];\n            } else if (lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5]));\nconsole.log(largest_smallest_integers([1, 2, 3, -4, -5]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 4 ]\n[ -4, 1 ]\n[ undefined, undefined ]\n[ -1, 1 ]\n[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334262
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largestNegative: number | undefined = undefined;\n    let smallestPositive: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined) {\n                largestNegative = lst[i];\n            } else if (lst[i] > largestNegative) {\n                largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined) {\n                smallestPositive = lst[i];\n            } else if (lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, 4 ]\n",
      "timestamp": 1660334262
    },
    {
      "exit_code": 2,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largestNegative: number | undefined = undefined;\n    let smallestPositive: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined) {\n                largestNegative = lst[i];\n            } else if (lst[i] > largestNegative) {\n                largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined) {\n                smallestPositive = lst[i];\n            } else if (lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, -1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0, -1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, -1, -2,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplln_v39q.ts(36,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334265
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n  let smallest: number | undefined = undefined;\n  let largest: number | undefined = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      if (smallest === undefined || lst[i] < smallest) {\n        smallest = lst[i];\n      }\n    } else if (lst[i] < 0) {\n      if (largest === undefined || lst[i] > largest) {\n        largest = lst[i];\n      }\n    }\n  }\n  return [largest, smallest];\n}\n\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, -1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, 1 ]\n[ undefined, 1 ]\n[ -1, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334265
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n  let largestNegative: number | undefined = undefined;\n  let smallestPositive: number | undefined = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largestNegative === undefined) {\n        largestNegative = lst[i];\n      } else if (lst[i] > largestNegative) {\n        largestNegative = lst[i];\n      }\n    } else if (lst[i] > 0) {\n      if (smallestPositive === undefined) {\n        smallestPositive = lst[i];\n      } else if (lst[i] < smallestPositive) {\n        smallestPositive = lst[i];\n      }\n    }\n  }\n  return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5])); // [-5, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5])); // [undefined, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334262
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n  let largestNegative: number | undefined = undefined;\n  let smallestPositive: number | undefined = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largestNegative === undefined) {\n        largestNegative = lst[i];\n      } else if (lst[i] > largestNegative) {\n        largestNegative = lst[i];\n      }\n    } else if (lst[i] > 0) {\n      if (smallestPositive === undefined) {\n        smallestPositive = lst[i];\n      } else if (lst[i] < smallestPositive) {\n        smallestPositive = lst[i];\n      }\n    }\n  }\n  return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5])); // [-5, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5])); // [undefined, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0])); // [undefined, undefined]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334265
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let negative_max: number | undefined = undefined;\n    let positive_min: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (negative_max === undefined) {\n                negative_max = lst[i];\n            } else if (lst[i] > negative_max) {\n                negative_max = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (positive_min === undefined) {\n                positive_min = lst[i];\n            } else if (lst[i] < positive_min) {\n                positive_min = lst[i];\n            }\n        }\n    }\n    return [negative_max, positive_min];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3]));\nconsole.log(largest_smallest_integers([4, 5]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, 4 ]\n[ -1, undefined ]\n[ undefined, 4 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334265
    },
    {
      "exit_code": 2,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largestNegative: number | undefined = undefined;\n    let smallestPositive: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined) {\n                largestNegative = lst[i];\n            } else if (lst[i] > largestNegative) {\n                largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined) {\n                smallestPositive = lst[i];\n            } else if (lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5])); // [-5, undefined]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, 0])); // [-5, 1]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\nconsole.log(largest_smallest_integers([0])); // [undefined, undefined]\nconsole.log(largest_smallest_integers([0, 0])); // [undefined, undefined]\nconsole.log(largest_smallest_integers([0, 0, 0])); // [undefined, undefined]\nconsole.log(largest_smallest_integers([0, 0, 0, 0])); // [undefined, undefined]\nconsole.log(largest_smallest\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1aiu_avb.ts(37,1): error TS1005: ',' expected.\n../../../../tmp/tmp1aiu_avb.ts(37,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334266
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest_positive: number | undefined = undefined;\n    let largest_negative: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest_negative === undefined) {\n                largest_negative = lst[i];\n            } else if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallest_positive === undefined) {\n                smallest_positive = lst[i];\n            } else if (lst[i] < smallest_positive) {\n                smallest_positive = lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, -1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0, -1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5, 0, 0, 0, 0, 0]));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, 4 ]\n[ -1, undefined ]\n[ undefined, 1 ]\n[ undefined, undefined ]\n[ -1, 1 ]\n[ -1, undefined ]\n[ -1, 1 ]\n[ -1, undefined ]\n[ -1, 1 ]\n",
      "timestamp": 1660334266
    },
    {
      "exit_code": 1,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n  let smallest: number | undefined;\n  let largest: number | undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largest === undefined || lst[i] > largest) {\n        largest = lst[i];\n      }\n    } else {\n      if (smallest === undefined || lst[i] < smallest) {\n        smallest = lst[i];\n      }\n    }\n  }\n  return [largest, smallest];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5])); // [-5, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5])); // [undefined, 1]\nconsole.log(largest_smallest_integers([-1, -2, 3, 4, 5])); // [-1, 3]\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5])); // [-3, 4]\nconsole.log(largest_smallest_integers([-1, 2, -3, 4, 5])); // [-1, 2]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmp_uw2621x.js:34:12)\n    at Object.<anonymous> (/tmp/tmp_uw2621x.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined, 0 ],\n  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 3 ]\n[ -1, 4 ]\n[ -1, 2 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334266
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n  let largestNegative: number | undefined = undefined;\n  let smallestPositive: number | undefined = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largestNegative === undefined) {\n        largestNegative = lst[i];\n      } else if (lst[i] > largestNegative) {\n        largestNegative = lst[i];\n      }\n    } else if (lst[i] > 0) {\n      if (smallestPositive === undefined) {\n        smallestPositive = lst[i];\n      } else if (lst[i] < smallestPositive) {\n        smallestPositive = lst[i];\n      }\n    }\n  }\n  return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\nconsole.log(largest_smallest_integers([-1, 2, -3, 4, -5, 6, -7, 8, -9, 10]));\nconsole.log(largest_smallest_integers([1, -2, 3, -4, 5, -6, 7, -8, 9, -10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ undefined, 1 ]\n[ -1, undefined ]\n[ -1, 2 ]\n[ -2, 1 ]\n[ -1, undefined ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334266
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let a: number | undefined = undefined;\n    let b: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (a === undefined) {\n                a = lst[i];\n            } else if (lst[i] > a) {\n                a = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (b === undefined) {\n                b = lst[i];\n            } else if (lst[i] < b) {\n                b = lst[i];\n            }\n        }\n    }\n    return [a, b];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334266
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largestNegative: number | undefined = undefined;\n    let smallestPositive: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined) {\n                largestNegative = lst[i];\n            } else if (lst[i] > largestNegative) {\n                largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined) {\n                smallestPositive = lst[i];\n            } else if (lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334262
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largestNegative: number | undefined = undefined;\n    let smallestPositive: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined) {\n                largestNegative = lst[i];\n            } else if (lst[i] > largestNegative) {\n                largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined) {\n                smallestPositive = lst[i];\n            } else if (lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5])); // [-5, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5])); // [undefined, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5])); // [-1, 4]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0])); // [-5, undefined]\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0])); // [undefined, undefined]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 4 ]\n[ -1, 1 ]\n[ -1, undefined ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334266
    },
    {
      "exit_code": 2,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest_positive: number | undefined = undefined;\n    let largest_negative: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n            if (smallest_positive === undefined) {\n                smallest_positive = lst[i];\n            } else if (lst[i] < smallest_positive) {\n                smallest_positive = lst[i];\n            }\n        } else if (lst[i] < 0) {\n            if (largest_negative === undefined) {\n                largest_negative = lst[i];\n            } else if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, 1, -2, 2, -3, 3, -4, 4, -5, 5, -6, 6, -7, 7, -8, 8, -9, 9, -10, 10]));\nconsole.log(largest_smallest_integers([-1, 1, -2, 2, -3, 3, -4, 4, -5, 5, -6, 6, -7, 7, -8, 8, -9, 9, -10, 10, -11, 11, -12, 12, -13, 13, -14, 14, -15, 15, -16, 16, -17, 17, -18, 18, -19, 19, -20, 20]));\nconsole.log(largest_smallest_integers([-1, 1, -2, 2, -3, 3, -4, 4, -5, 5, -6, 6, -7, 7, -8, 8, -9\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyaad66yw.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmpyaad66yw.ts(32,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334265
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largestNegative: number | undefined;\n    let smallestPositive: number | undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined) {\n                largestNegative = lst[i];\n            } else if (lst[i] > largestNegative) {\n                largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined) {\n                smallestPositive = lst[i];\n            } else if (lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, 0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, 4 ]\n[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334266
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n  let a: number | undefined;\n  let b: number | undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (a === undefined) {\n        a = lst[i];\n      } else if (lst[i] > a) {\n        a = lst[i];\n      }\n    } else if (lst[i] > 0) {\n      if (b === undefined) {\n        b = lst[i];\n      } else if (lst[i] < b) {\n        b = lst[i];\n      }\n    }\n  }\n  return [a, b];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5, 6])); // [-3, 4]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6])); // [-1, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6])); // [undefined, 1]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, 4 ]\n[ -1, undefined ]\n[ undefined, 1 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334266
    },
    {
      "exit_code": 2,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest === undefined || lst[i] > largest) {\n                largest = lst[i];\n            }\n        } else {\n            if (smallest === undefined || lst[i] < smallest) {\n                smallest = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n}\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmppt917562.ts(27,1): error TS1005: ',' expected.\n../../../../tmp/tmppt917562.ts(27,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334266
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largest_negative: number | undefined = undefined;\n    let smallest_positive: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest_negative === undefined) {\n                largest_negative = lst[i];\n            } else if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallest_positive === undefined) {\n                smallest_positive = lst[i];\n            } else if (lst[i] < smallest_positive) {\n                smallest_positive = lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ -1, 1 ]\n[ undefined, 1 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334266
    },
    {
      "exit_code": 2,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest_positive: number | undefined = undefined;\n    let largest_negative: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n            if (smallest_positive === undefined) {\n                smallest_positive = lst[i];\n            } else if (lst[i] < smallest_positive) {\n                smallest_positive = lst[i];\n            }\n        } else if (lst[i] < 0) {\n            if (largest_negative === undefined) {\n                largest_negative = lst[i];\n            } else if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, -5]));\nconsole.log(largest_smallest_integers([-1, 2, -3, 4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, -5]));\nconsole.log(largest_smallest_integers([-1, 2, 3, 4, -5]));\nconsole.log(largest_smallest_integers([-1, -2, 3, 4, -5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, 5]));\nconsole.log(largest_smallest_integers([1,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpiemloitk.ts(39,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334266
    },
    {
      "exit_code": 1,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let negative: number[] = [];\n    let positive: number[] = [];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            negative.push(lst[i]);\n        } else if (lst[i] > 0) {\n            positive.push(lst[i]);\n        }\n    }\n    if (negative.length === 0) {\n        negative.push(undefined);\n    }\n    if (positive.length === 0) {\n        positive.push(undefined);\n    }\n    return [Math.max(...negative), Math.min(...positive)];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmpbeipz4zs.js:33:12)\n    at Object.<anonymous> (/tmp/tmpbeipz4zs.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN, 1 ],\n  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ -1, NaN ]\n[ NaN, 1 ]\n[ -1, 1 ]\n[ NaN, NaN ]\n[ NaN, NaN ]\n",
      "timestamp": 1660334266
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest_positive: number | undefined = undefined;\n    let largest_negative: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n            if (smallest_positive === undefined) {\n                smallest_positive = lst[i];\n            } else if (lst[i] < smallest_positive) {\n                smallest_positive = lst[i];\n            }\n        } else if (lst[i] < 0) {\n            if (largest_negative === undefined) {\n                largest_negative = lst[i];\n            } else if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, 1, -2, 2, -3, 3, -4, 4, -5, 5, -6, 6, -7, 7, -8, 8, -9, 9, -10, 10]));\nconsole.log(largest_smallest_integers([-1, 1, -2, 2, -3, 3, -4, 4, -5, 5, -6, 6, -7, 7, -8, 8, -9, 9, -10, 10, 0]));\nconsole.log(largest_smallest_integers([0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334266
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest_positive: number | undefined = undefined;\n    let largest_negative: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n            if (smallest_positive === undefined) {\n                smallest_positive = lst[i];\n            } else if (lst[i] < smallest_positive) {\n                smallest_positive = lst[i];\n            }\n        } else if (lst[i] < 0) {\n            if (largest_negative === undefined) {\n                largest_negative = lst[i];\n            } else if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, 4 ]\n[ -1, undefined ]\n[ undefined, 1 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334266
    },
    {
      "exit_code": 2,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largestNegative: number | undefined = undefined;\n    let smallestPositive: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined) {\n                largestNegative = lst[i];\n            } else if (lst[i] > largestNegative) {\n                largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined) {\n                smallestPositive = lst[i];\n            } else if (lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5])); // [-5, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5])); // [undefined, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, -1, -2, -3, -4, -5])); // [-5, -1]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\nconsole.log(largest_smallest_integers([0])); // [undefined, undefined]\nconsole.log(largest_smallest_integers([-1])); // [-1, undefined]\nconsole.log(largest_smallest_integers([1])); // [undefined, 1]\nconsole.log(largest_smallest\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv8572ehe.ts(37,1): error TS1005: ',' expected.\n../../../../tmp/tmpv8572ehe.ts(37,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334266
    },
    {
      "exit_code": 2,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n  let smallestPositive = undefined;\n  let largestNegative = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      if (smallestPositive === undefined || lst[i] < smallestPositive) {\n        smallestPositive = lst[i];\n      }\n    } else if (lst[i] < 0) {\n      if (largestNegative === undefined || lst[i] > largestNegative) {\n        largestNegative = lst[i];\n      }\n    }\n  }\n  return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5])); // [-5, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5])); // [undefined, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\nconsole.log(largest_smallest_integers([-1, 1])); // [-1, 1]\nconsole.log(largest_smallest_integers([-1, -2, 1, 2])); // [-2, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5, 0])); // [-5, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5, 0, -1])); // [-5, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5, 0, -1, -2])); // [-5, 1]\nconsole.log(largest_smallest_integers([-1, -\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpn6p4tci8.ts(33,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334266
    },
    {
      "exit_code": 2,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest: number | undefined;\n    let largest: number | undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n            if (smallest === undefined || lst[i] < smallest) {\n                smallest = lst[i];\n            }\n        } else {\n            if (largest === undefined || lst[i] > largest) {\n                largest = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, 1, -2, 2, -3, 3, -4, 4, -5, 5, -6, 6, -7, 7, -8, 8, -9, 9, -10, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsf14_4zr.ts(29,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334266
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let a: number | undefined = undefined;\n    let b: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (a === undefined) {\n                a = lst[i];\n            } else if (lst[i] > a) {\n                a = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (b === undefined) {\n                b = lst[i];\n            } else if (lst[i] < b) {\n                b = lst[i];\n            }\n        }\n    }\n    return [a, b];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ -1, undefined ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334266
    },
    {
      "exit_code": 2,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest_positive: number | undefined = undefined;\n    let largest_negative: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest_negative === undefined) {\n                largest_negative = lst[i];\n            } else if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallest_positive === undefined) {\n                smallest_positive = lst[i];\n            } else if (lst[i] < smallest_positive) {\n                smallest_positive = lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([-1, -2, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvc6t98bb.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmpvc6t98bb.ts(32,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334268
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n            if (smallest === undefined) {\n                smallest = lst[i];\n            } else if (lst[i] < smallest) {\n                smallest = lst[i];\n            }\n        } else if (lst[i] < 0) {\n            if (largest === undefined) {\n                largest = lst[i];\n            } else if (lst[i] > largest) {\n                largest = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ -1, undefined ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334269
    },
    {
      "exit_code": 1,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n  let largestNegative = undefined;\n  let smallestPositive = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largestNegative === undefined || lst[i] > largestNegative) {\n        largestNegative = lst[i];\n      }\n    } else {\n      if (smallestPositive === undefined || lst[i] < smallestPositive) {\n        smallestPositive = lst[i];\n      }\n    }\n  }\n  return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, 10]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, -10]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmpp652a3k7.js:32:12)\n    at Object.<anonymous> (/tmp/tmpp652a3k7.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined, 0 ],\n  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ undefined, 1 ]\n[ -1, undefined ]\n[ -1, 10 ]\n[ -10, 1 ]\n[ undefined, 0 ]\n",
      "timestamp": 1660334269
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let min: number | undefined = undefined;\n    let max: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n            if (min === undefined || lst[i] < min) {\n                min = lst[i];\n            }\n        } else if (lst[i] < 0) {\n            if (max === undefined || lst[i] > max) {\n                max = lst[i];\n            }\n        }\n    }\n    return [max, min];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3]));\nconsole.log(largest_smallest_integers([4, 5]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, 4 ]\n[ -1, undefined ]\n[ undefined, 4 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334269
    },
    {
      "exit_code": 2,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest === undefined || lst[i] > largest) {\n                largest = lst[i];\n            }\n        } else {\n            if (smallest === undefined || lst[i] < smallest) {\n                smallest = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5])); // [-5, undefined]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, -100, 100])); // [-100, 100]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, -100, 100, -200, 200])); // [-200, 200]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, -100, 100, -200, 200, -300, 300])); // [-300, 300]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, -100, 100, -200, 200, -300, 300, -400, 400])); // [-400, 400]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, -100, 100, -200, 200, -300, 300, -400\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpx4oeq7_f.ts(30,1): error TS1005: ',' expected.\n../../../../tmp/tmpx4oeq7_f.ts(30,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334268
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n  let largestNegative: number | undefined = undefined;\n  let smallestPositive: number | undefined = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largestNegative === undefined) {\n        largestNegative = lst[i];\n      } else if (lst[i] > largestNegative) {\n        largestNegative = lst[i];\n      }\n    } else if (lst[i] > 0) {\n      if (smallestPositive === undefined) {\n        smallestPositive = lst[i];\n      } else if (lst[i] < smallestPositive) {\n        smallestPositive = lst[i];\n      }\n    }\n  }\n  return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, 2, -3, 4, -5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 4 ]\n[ -1, 2 ]\n[ -1, 1 ]\n[ -1, undefined ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334269
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest_positive: number | undefined = undefined;\n    let largest_negative: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest_negative === undefined) {\n                largest_negative = lst[i];\n            } else if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallest_positive === undefined) {\n                smallest_positive = lst[i];\n            } else if (lst[i] < smallest_positive) {\n                smallest_positive = lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, 1, -2, 2, -3, 3, -4, 4, -5, 5, -6, 6, -7, 7, -8, 8, -9, 9, -10, 10]));\nconsole.log(largest_smallest_integers([-1, 1, -2, 2, -3, 3, -4, 4, -5, 5, -6, 6, -7, 7, -8, 8, -9, 9, -10, 10, 0]));\nconsole.log(largest_smallest_integers([0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334269
    },
    {
      "exit_code": 1,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largestNegative = undefined;\n    let smallestPositive = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined || lst[i] > largestNegative) {\n                largestNegative = lst[i];\n            }\n        } else {\n            if (smallestPositive === undefined || lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5])); // [-3, 4]\nconsole.log(largest_smallest_integers([-1, -2, -3])); // [-3, undefined]\nconsole.log(largest_smallest_integers([4, 5])); // [undefined, 4]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmps43gvx5c.js:31:12)\n    at Object.<anonymous> (/tmp/tmps43gvx5c.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined, 0 ],\n  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ -1, 4 ]\n[ -1, undefined ]\n[ undefined, 4 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334269
    },
    {
      "exit_code": 1,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n  let largestNegative = undefined;\n  let smallestPositive = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largestNegative === undefined || lst[i] > largestNegative) {\n        largestNegative = lst[i];\n      }\n    } else {\n      if (smallestPositive === undefined || lst[i] < smallestPositive) {\n        smallestPositive = lst[i];\n      }\n    }\n  }\n  return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5, 6]));\nconsole.log(largest_smallest_integers([-1, -2, -3]));\nconsole.log(largest_smallest_integers([4, 5, 6]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmpd64fsevd.js:31:12)\n    at Object.<anonymous> (/tmp/tmpd64fsevd.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined, 0 ],\n  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ -1, 4 ]\n[ -1, undefined ]\n[ undefined, 4 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334269
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largestNegative: number | undefined;\n    let smallestPositive: number | undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined) {\n                largestNegative = lst[i];\n            } else if (lst[i] > largestNegative) {\n                largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined) {\n                smallestPositive = lst[i];\n            } else if (lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, 2, -3, 4, -5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5, 0]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 4 ]\n[ -1, 2 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334269
    },
    {
      "exit_code": 2,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let neg: number[] = [];\n    let pos: number[] = [];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            neg.push(lst[i]);\n        } else if (lst[i] > 0) {\n            pos.push(lst[i]);\n        }\n    }\n    if (neg.length === 0) {\n        neg.push(undefined);\n    }\n    if (pos.length === 0) {\n        pos.push(undefined);\n    }\n    return [Math.max(...neg), Math.min(...pos)];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, 2, -3, 4, -5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpcteqebu5.ts(30,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334269
    },
    {
      "exit_code": 1,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest === undefined || lst[i] > largest) {\n                largest = lst[i];\n            }\n        } else {\n            if (smallest === undefined || lst[i] < smallest) {\n                smallest = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmpk895p7a5.js:27:12)\n    at Object.<anonymous> (/tmp/tmpk895p7a5.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined, 0 ],\n  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334269
    },
    {
      "exit_code": 1,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest === undefined || lst[i] > largest) {\n                largest = lst[i];\n            }\n        } else {\n            if (smallest === undefined || lst[i] < smallest) {\n                smallest = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5])); // [-3, 4]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5])); // [-5, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5])); // [undefined, 1]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmpbo8c9gc5.js:31:12)\n    at Object.<anonymous> (/tmp/tmpbo8c9gc5.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined, 0 ],\n  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ -1, 4 ]\n[ -1, undefined ]\n[ undefined, 1 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334270
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest_positive: number | undefined = undefined;\n    let largest_negative: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n            if (smallest_positive === undefined) {\n                smallest_positive = lst[i];\n            } else if (lst[i] < smallest_positive) {\n                smallest_positive = lst[i];\n            }\n        } else if (lst[i] < 0) {\n            if (largest_negative === undefined) {\n                largest_negative = lst[i];\n            } else if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5, 6])); // [-3, 4]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6])); // [-6, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6])); // [undefined, 1]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, 4 ]\n[ -1, undefined ]\n[ undefined, 1 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334270
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largestNegative: number | undefined;\n    let smallestPositive: number | undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined) {\n                largestNegative = lst[i];\n            } else if (lst[i] > largestNegative) {\n                largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined) {\n                smallestPositive = lst[i];\n            } else if (lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, 2, 3, -4, 5, -6]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, 2 ]\n",
      "timestamp": 1660334270
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (smallest === undefined) {\n                smallest = lst[i];\n            } else if (lst[i] > smallest) {\n                smallest = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (largest === undefined) {\n                largest = lst[i];\n            } else if (lst[i] < largest) {\n                largest = lst[i];\n            }\n        }\n    }\n    return [smallest, largest];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334270
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n  let smallest: number | undefined = undefined;\n  let largest: number | undefined = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      if (smallest === undefined || lst[i] < smallest) {\n        smallest = lst[i];\n      }\n    } else if (lst[i] < 0) {\n      if (largest === undefined || lst[i] > largest) {\n        largest = lst[i];\n      }\n    }\n  }\n  return [largest, smallest];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3]));\nconsole.log(largest_smallest_integers([4, 5]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, 4 ]\n[ -1, undefined ]\n[ undefined, 4 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334270
    },
    {
      "exit_code": 2,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largestNegative: number | undefined = undefined;\n    let smallestPositive: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined) {\n                largestNegative = lst[i];\n            } else if (lst[i] > largestNegative) {\n                largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined) {\n                smallestPositive = lst[i];\n            } else if (lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\nconsole.log(largest_smallest_integers([-1, 2, -3, 4, -5, 6, -7, 8, -9, 10]));\nconsole.log(largest_smallest_integers([1, -2, 3, -4, 5, -6, 7, -8, 9, -10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmfdjmyy4.ts(35,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334270
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n  let smallest_positive: number | undefined = undefined;\n  let largest_negative: number | undefined = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largest_negative === undefined) {\n        largest_negative = lst[i];\n      } else if (lst[i] > largest_negative) {\n        largest_negative = lst[i];\n      }\n    } else if (lst[i] > 0) {\n      if (smallest_positive === undefined) {\n        smallest_positive = lst[i];\n      } else if (lst[i] < smallest_positive) {\n        smallest_positive = lst[i];\n      }\n    }\n  }\n  return [largest_negative, smallest_positive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5, 0]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ undefined, 1 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334269
    },
    {
      "exit_code": 1,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let neg: number[] = [];\n    let pos: number[] = [];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            neg.push(lst[i]);\n        } else if (lst[i] > 0) {\n            pos.push(lst[i]);\n        }\n    }\n    if (neg.length === 0) {\n        neg.push(undefined);\n    }\n    if (pos.length === 0) {\n        pos.push(undefined);\n    }\n    return [Math.max(...neg), Math.min(...pos)];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5])); // [-1, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5])); // [undefined, 1]\nconsole.log(largest_smallest_integers([-1, -2, 3, 4, 5])); // [-1, 3]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5])); // [-1, 1]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0])); // [undefined, undefined]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0])); // [-1, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 0, 0, 0, 0, 0])); // [undefined, 1]\nconsole.log(largest_smallest_integers([-1, -2, 3, 4, 5, 0, 0, 0, 0, 0])); // [-1, 0]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmptq7g45c5.js:37:12)\n    at Object.<anonymous> (/tmp/tmptq7g45c5.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN, 1 ],\n  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ -1, NaN ]\n[ NaN, 1 ]\n[ -1, 3 ]\n[ -1, 1 ]\n[ NaN, NaN ]\n[ NaN, NaN ]\n[ -1, NaN ]\n[ NaN, 1 ]\n[ -1, 3 ]\n",
      "timestamp": 1660334270
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largestNegative: number | undefined = undefined;\n    let smallestPositive: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined) {\n                largestNegative = lst[i];\n            } else if (lst[i] > largestNegative) {\n                largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined) {\n                smallestPositive = lst[i];\n            } else if (lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5])); // [-5, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5])); // [undefined, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\nconsole.log(largest_smallest_integers([0])); // [undefined, undefined]\nconsole.log(largest_smallest_integers([-1])); // [-1, undefined]\nconsole.log(largest_smallest_integers([1])); // [undefined, 1]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n[ -1, undefined ]\n[ undefined, 1 ]\n",
      "timestamp": 1660334270
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let negative_max: number | undefined = undefined;\n    let positive_min: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (negative_max === undefined) {\n                negative_max = lst[i];\n            } else if (lst[i] > negative_max) {\n                negative_max = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (positive_min === undefined) {\n                positive_min = lst[i];\n            } else if (lst[i] < positive_min) {\n                positive_min = lst[i];\n            }\n        }\n    }\n    return [negative_max, positive_min];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ -1, undefined ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334270
    },
    {
      "exit_code": 2,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest_positive: number | undefined = undefined;\n    let largest_negative: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest_negative === undefined) {\n                largest_negative = lst[i];\n            } else if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallest_positive === undefined) {\n                smallest_positive = lst[i];\n            } else if (lst[i] < smallest_positive) {\n                smallest_positive = lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmph3mkuv6e.ts(33,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334269
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n  let smallest_positive: number | undefined = undefined;\n  let largest_negative: number | undefined = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      if (smallest_positive === undefined) {\n        smallest_positive = lst[i];\n      } else if (lst[i] < smallest_positive) {\n        smallest_positive = lst[i];\n      }\n    } else if (lst[i] < 0) {\n      if (largest_negative === undefined) {\n        largest_negative = lst[i];\n      } else if (lst[i] > largest_negative) {\n        largest_negative = lst[i];\n      }\n    }\n  }\n  return [largest_negative, smallest_positive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ -1, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334272
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n            if (smallest === undefined) {\n                smallest = lst[i];\n            } else if (lst[i] < smallest) {\n                smallest = lst[i];\n            }\n        } else if (lst[i] < 0) {\n            if (largest === undefined) {\n                largest = lst[i];\n            } else if (lst[i] > largest) {\n                largest = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334272
    },
    {
      "exit_code": 1,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest: number | undefined;\n    let largest: number | undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest === undefined || lst[i] > largest) {\n                largest = lst[i];\n            }\n        } else {\n            if (smallest === undefined || lst[i] < smallest) {\n                smallest = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5, 6])); // [-3, 6]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6])); // [-6, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6])); // [undefined, 1]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmp7l11anz2.js:31:12)\n    at Object.<anonymous> (/tmp/tmp7l11anz2.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined, 0 ],\n  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ -1, 4 ]\n[ -1, undefined ]\n[ undefined, 1 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334272
    },
    {
      "exit_code": 1,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largest: number | undefined = undefined;\n    let smallest: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest === undefined || lst[i] > largest) {\n                largest = lst[i];\n            }\n        } else {\n            if (smallest === undefined || lst[i] < smallest) {\n                smallest = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, 2, -3, 4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, -5]));\nconsole.log(largest_smallest_integers([-1, 2, 3, 4, -5]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmpzybzhgw2.js:34:12)\n    at Object.<anonymous> (/tmp/tmpzybzhgw2.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined, 0 ],\n  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 4 ]\n[ -1, 2 ]\n[ -5, 1 ]\n[ -1, 2 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334272
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largestNegative: number | undefined = undefined;\n    let smallestPositive: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined) {\n                largestNegative = lst[i];\n            } else if (lst[i] > largestNegative) {\n                largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined) {\n                smallestPositive = lst[i];\n            } else if (lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5, 0]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ -1, undefined ]\n[ undefined, 1 ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334272
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest_positive: number | undefined = undefined;\n    let largest_negative: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n            if (smallest_positive === undefined) {\n                smallest_positive = lst[i];\n            } else if (lst[i] < smallest_positive) {\n                smallest_positive = lst[i];\n            }\n        } else if (lst[i] < 0) {\n            if (largest_negative === undefined) {\n                largest_negative = lst[i];\n            } else if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, 4 ]\n[ -1, undefined ]\n[ undefined, 1 ]\n[ undefined, undefined ]\n[ -1, 1 ]\n",
      "timestamp": 1660334273
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largestNegative: number | undefined = undefined;\n    let smallestPositive: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined) {\n                largestNegative = lst[i];\n            } else if (lst[i] > largestNegative) {\n                largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined) {\n                smallestPositive = lst[i];\n            } else if (lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5, 6])); // [-3, 4]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6])); // [-6, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6])); // [undefined, 1]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\nconsole.log(largest_smallest_integers([-1, -2, -3, 0, 1, 2, 3])); // [-3, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, 0, -1, 2, 3])); // [-1, 1]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, 4 ]\n[ -1, undefined ]\n[ undefined, 1 ]\n[ undefined, undefined ]\n[ -1, 1 ]\n[ -1, 2 ]\n",
      "timestamp": 1660334273
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largestNegative: number | undefined = undefined;\n    let smallestPositive: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined) {\n                largestNegative = lst[i];\n            } else if (lst[i] > largestNegative) {\n                largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined) {\n                smallestPositive = lst[i];\n            } else if (lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5])); // [-5, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5])); // [undefined, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\nconsole.log(largest_smallest_integers([0])); // [undefined, undefined]\nconsole.log(largest_smallest_integers([-1])); // [-1, undefined]\nconsole.log(largest_smallest_integers([1])); // [undefined, 1]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n[ -1, undefined ]\n[ undefined, 1 ]\n",
      "timestamp": 1660334270
    },
    {
      "exit_code": 1,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest === undefined || lst[i] > largest) {\n                largest = lst[i];\n            }\n        } else {\n            if (smallest === undefined || lst[i] < smallest) {\n                smallest = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, 2, -3, 4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, -5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, 5]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmpgwhjy2fq.js:34:12)\n    at Object.<anonymous> (/tmp/tmpgwhjy2fq.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined, 0 ],\n  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 4 ]\n[ -1, 2 ]\n[ -5, 1 ]\n[ -1, 5 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334273
    },
    {
      "exit_code": 1,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest === undefined || lst[i] > largest) {\n                largest = lst[i];\n            }\n        } else {\n            if (smallest === undefined || lst[i] < smallest) {\n                smallest = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5])); // [-5, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5])); // [undefined, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5])); // [-1, 4]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, -1, -2, -3, -4, -5])); // [-5, 1]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmpuuylbc5h.js:33:12)\n    at Object.<anonymous> (/tmp/tmpuuylbc5h.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined, 0 ],\n  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 4 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334273
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largest_negative: number | undefined = undefined;\n    let smallest_positive: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest_negative === undefined) {\n                largest_negative = lst[i];\n            } else if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallest_positive === undefined) {\n                smallest_positive = lst[i];\n            } else if (lst[i] < smallest_positive) {\n                smallest_positive = lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5, 6]));\nconsole.log(largest_smallest_integers([-1, -2, -3]));\nconsole.log(largest_smallest_integers([4, 5, 6]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, 4 ]\n[ -1, undefined ]\n[ undefined, 4 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334273
    },
    {
      "exit_code": 1,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largestNegative = undefined;\n    let smallestPositive = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined || lst[i] > largestNegative) {\n                largestNegative = lst[i];\n            }\n        } else {\n            if (smallestPositive === undefined || lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmp11tdlzkp.js:27:12)\n    at Object.<anonymous> (/tmp/tmp11tdlzkp.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined, 0 ],\n  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334273
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n  let largestNegative: number | undefined = undefined;\n  let smallestPositive: number | undefined = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largestNegative === undefined) {\n        largestNegative = lst[i];\n      } else if (lst[i] > largestNegative) {\n        largestNegative = lst[i];\n      }\n    } else if (lst[i] > 0) {\n      if (smallestPositive === undefined) {\n        smallestPositive = lst[i];\n      } else if (lst[i] < smallestPositive) {\n        smallestPositive = lst[i];\n      }\n    }\n  }\n  return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5, 6])); // [-3, 4]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6])); // [-6, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6])); // [undefined, 1]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, 4 ]\n[ -1, undefined ]\n[ undefined, 1 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334273
    },
    {
      "exit_code": 1,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest: number | undefined;\n    let largest: number | undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest === undefined || lst[i] > largest) {\n                largest = lst[i];\n            }\n        } else {\n            if (smallest === undefined || lst[i] < smallest) {\n                smallest = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5, 6]));\nconsole.log(largest_smallest_integers([-1, -2, -3]));\nconsole.log(largest_smallest_integers([4, 5, 6]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmprgfvcb0q.js:31:12)\n    at Object.<anonymous> (/tmp/tmprgfvcb0q.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined, 0 ],\n  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ -1, 4 ]\n[ -1, undefined ]\n[ undefined, 4 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334273
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n  let smallest_positive: number | undefined = undefined;\n  let largest_negative: number | undefined = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      if (smallest_positive === undefined) {\n        smallest_positive = lst[i];\n      } else if (lst[i] < smallest_positive) {\n        smallest_positive = lst[i];\n      }\n    } else if (lst[i] < 0) {\n      if (largest_negative === undefined) {\n        largest_negative = lst[i];\n      } else if (lst[i] > largest_negative) {\n        largest_negative = lst[i];\n      }\n    }\n  }\n  return [largest_negative, smallest_positive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ -1, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334272
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n  let largestNegative: number | undefined = undefined;\n  let smallestPositive: number | undefined = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largestNegative === undefined) {\n        largestNegative = lst[i];\n      } else if (lst[i] > largestNegative) {\n        largestNegative = lst[i];\n      }\n    } else if (lst[i] > 0) {\n      if (smallestPositive === undefined) {\n        smallestPositive = lst[i];\n      } else if (lst[i] < smallestPositive) {\n        smallestPositive = lst[i];\n      }\n    }\n  }\n  return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5])); // [-5, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5])); // [undefined, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334262
    },
    {
      "exit_code": 1,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let neg: number[] = [];\n    let pos: number[] = [];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            neg.push(lst[i]);\n        } else if (lst[i] > 0) {\n            pos.push(lst[i]);\n        }\n    }\n    if (neg.length === 0) {\n        neg.push(undefined);\n    }\n    if (pos.length === 0) {\n        pos.push(undefined);\n    }\n    return [Math.max(...neg), Math.min(...pos)];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([-1, 2, -3, 4, -5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, -4, -5]));\nconsole.log(largest_smallest_integers([-1, 2, 3, 4, -5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmpas04er5l.js:39:12)\n    at Object.<anonymous> (/tmp/tmpas04er5l.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN, 1 ],\n  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ -1, NaN ]\n[ NaN, 1 ]\n[ NaN, NaN ]\n[ -1, 2 ]\n[ -1, 4 ]\n[ -4, 1 ]\n[ -1, 2 ]\n[ -1, 1 ]\n[ -1, NaN ]\n[ -1, 1 ]\n[ NaN, NaN ]\n",
      "timestamp": 1660334273
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largest_negative: number | undefined = undefined;\n    let smallest_positive: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest_negative === undefined) {\n                largest_negative = lst[i];\n            } else if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallest_positive === undefined) {\n                smallest_positive = lst[i];\n            } else if (lst[i] < smallest_positive) {\n                smallest_positive = lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5, 6]));\nconsole.log(largest_smallest_integers([-1, -2, -3]));\nconsole.log(largest_smallest_integers([4, 5, 6]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, 4 ]\n[ -1, undefined ]\n[ undefined, 4 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334273
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n            if (smallest === undefined) {\n                smallest = lst[i];\n            } else if (lst[i] < smallest) {\n                smallest = lst[i];\n            }\n        } else if (lst[i] < 0) {\n            if (largest === undefined) {\n                largest = lst[i];\n            } else if (lst[i] > largest) {\n                largest = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5])); // [-5, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5])); // [undefined, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5])); // [-3, 4]\nconsole.log(largest_smallest_integers([-1, 2, -3, 4, -5])); // [-5, 2]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5])); // [undefined, 1]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 4 ]\n[ -1, 2 ]\n[ undefined, 1 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334273
    },
    {
      "exit_code": 1,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n  let largest: number | undefined;\n  let smallest: number | undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largest === undefined || lst[i] > largest) {\n        largest = lst[i];\n      }\n    } else {\n      if (smallest === undefined || lst[i] < smallest) {\n        smallest = lst[i];\n      }\n    }\n  }\n  return [largest, smallest];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 0, 1, 2, 3]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmpwylxmmj7.js:28:12)\n    at Object.<anonymous> (/tmp/tmpwylxmmj7.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined, 0 ],\n  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ -1, 0 ]\n",
      "timestamp": 1660334273
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n  let largestNegative: number | undefined = undefined;\n  let smallestPositive: number | undefined = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largestNegative === undefined) {\n        largestNegative = lst[i];\n      } else if (lst[i] > largestNegative) {\n        largestNegative = lst[i];\n      }\n    } else if (lst[i] > 0) {\n      if (smallestPositive === undefined) {\n        smallestPositive = lst[i];\n      } else if (lst[i] < smallestPositive) {\n        smallestPositive = lst[i];\n      }\n    }\n  }\n  return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 2 ]\n[ -1, 3 ]\n[ -1, 4 ]\n[ -1, 5 ]\n[ -1, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334273
    },
    {
      "exit_code": 2,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largestNegative: number | undefined;\n    let smallestPositive: number | undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined) {\n                largestNegative = lst[i];\n            } else if (lst[i] > largestNegative) {\n                largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined) {\n                smallestPositive = lst[i];\n            } else if (lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([-1, 1, -2, 2, -3, 3, -4, 4, -5, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, -1, -2, -3, -4, -5]));\nconsole.log(largest_small\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpumms669a.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmpumms669a.ts(36,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334273
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest_positive: number | undefined = undefined;\n    let largest_negative: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n            if (smallest_positive === undefined) {\n                smallest_positive = lst[i];\n            } else if (lst[i] < smallest_positive) {\n                smallest_positive = lst[i];\n            }\n        } else if (lst[i] < 0) {\n            if (largest_negative === undefined) {\n                largest_negative = lst[i];\n            } else if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n}\n\nconsole.log(largest_smallest_integers([1, 2, -3, 4, -5, -6, 7, 8, 9]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -3, 1 ]\n",
      "timestamp": 1660334273
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let neg: number[] = [];\n    let pos: number[] = [];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            neg.push(lst[i]);\n        } else if (lst[i] > 0) {\n            pos.push(lst[i]);\n        }\n    }\n    neg.sort((a, b) => b - a);\n    pos.sort((a, b) => a - b);\n    return [neg[0], pos[0]];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, 1 ]\n[ -1, undefined ]\n[ undefined, 1 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334273
    },
    {
      "exit_code": 1,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let negs: number[] = [];\n    let poss: number[] = [];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            negs.push(lst[i]);\n        } else if (lst[i] > 0) {\n            poss.push(lst[i]);\n        }\n    }\n    if (negs.length === 0) {\n        negs.push(undefined);\n    }\n    if (poss.length === 0) {\n        poss.push(undefined);\n    }\n    return [Math.max(...negs), Math.min(...poss)];\n}\n\nconsole.log(largest_smallest_integers([-1, 2, -3, 4, -5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmpxdiey_oh.js:33:12)\n    at Object.<anonymous> (/tmp/tmpxdiey_oh.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN, 1 ],\n  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ -1, 2 ]\n[ -1, NaN ]\n[ NaN, 1 ]\n[ NaN, NaN ]\n[ NaN, NaN ]\n",
      "timestamp": 1660334273
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largest_negative: number | undefined = undefined;\n    let smallest_positive: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest_negative === undefined) {\n                largest_negative = lst[i];\n            } else if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallest_positive === undefined) {\n                smallest_positive = lst[i];\n            } else if (lst[i] < smallest_positive) {\n                smallest_positive = lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5, 0]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ undefined, 1 ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334273
    },
    {
      "exit_code": 2,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largestNegative: number | undefined = undefined;\n    let smallestPositive: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined) {\n                largestNegative = lst[i];\n            } else if (lst[i] > largestNegative) {\n                largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined) {\n                smallestPositive = lst[i];\n            } else if (lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([-1, 2, -3, 4, -5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, -5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, 5]));\nconsole.log(largest_smallest_integers([-1, 2, -3, 4, 5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, -5]));\nconsole.log(largest_smallest_integers([-1, 2, 3, 4, -5]));\nconsole.log(largest_smallest_integers([-1, -2, 3, 4, -5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, 2, 3,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwzlqhlhh.ts(39,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334274
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest_positive: number | undefined = undefined;\n    let largest_negative: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest_negative === undefined) {\n                largest_negative = lst[i];\n            } else if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallest_positive === undefined) {\n                smallest_positive = lst[i];\n            } else if (lst[i] < smallest_positive) {\n                smallest_positive = lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ -1, undefined ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334275
    },
    {
      "exit_code": 1,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let min = undefined;\n    let max = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (max === undefined || lst[i] > max) {\n                max = lst[i];\n            }\n        } else {\n            if (min === undefined || lst[i] < min) {\n                min = lst[i];\n            }\n        }\n    }\n    return [max, min];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3]));\nconsole.log(largest_smallest_integers([4, 5]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmpp2tzdsoc.js:31:12)\n    at Object.<anonymous> (/tmp/tmpp2tzdsoc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined, 0 ],\n  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ -1, 4 ]\n[ -1, undefined ]\n[ undefined, 4 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334275
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largestNegative: number | undefined = undefined;\n    let smallestPositive: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined) {\n                largestNegative = lst[i];\n            } else if (lst[i] > largestNegative) {\n                largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined) {\n                smallestPositive = lst[i];\n            } else if (lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-20, 34, 21, -87, 92133, -1]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, 21 ]\n",
      "timestamp": 1660334275
    },
    {
      "exit_code": 2,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let min = undefined;\n    let max = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (max === undefined || lst[i] > max) {\n                max = lst[i];\n            }\n        } else {\n            if (min === undefined || lst[i] < min) {\n                min = lst[i];\n            }\n        }\n    }\n    return [max, min];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, 1, -2, 2, -3, 3, -4, 4, -5, 5, -6, 6, -7, 7, -8, 8, -9, 9, -10, 10]));\nconsole.log(largest_smallest_integers([-1, 1, -2, 2, -3, 3, -4, 4, -5, 5, -6, 6, -7, 7, -8, 8, -9, 9, -10, 10, -11, 11, -12, 12, -13, 13, -14, 14, -15, 15, -16, 16, -17, 17, -18, 18, -19, 19, -20, 20]));\nconsole.log(largest_smallest_integers([-1, 1, -2, 2, -3, 3, -4, 4, -5, 5, -6, 6, -7, 7, -8, 8, -9, 9, -10, 10, -11, 11, -12, 12, -13, 13, -14, 14, -15, 15, -16, 16, -17, 17, -18, 18, -19, 19, -20, 20, -21, 21, -22, 22, -23, 23, -24\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpca76svjn.ts(28,1): error TS1005: ',' expected.\n../../../../tmp/tmpca76svjn.ts(28,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334276
    },
    {
      "exit_code": 2,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let negative_max: number | undefined = undefined;\n    let positive_min: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (negative_max === undefined) {\n                negative_max = lst[i];\n            } else if (lst[i] > negative_max) {\n                negative_max = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (positive_min === undefined) {\n                positive_min = lst[i];\n            } else if (lst[i] < positive_min) {\n                positive_min = lst[i];\n            }\n        }\n    }\n    return [negative_max, positive_min];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5])); // [-5, undefined]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, 0])); // [-5, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, 0, 0])); // [-5, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, 0, 0, 0])); // [-5, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp47ts169_.ts(34,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334276
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n            if (smallest === undefined) {\n                smallest = lst[i];\n            } else if (lst[i] < smallest) {\n                smallest = lst[i];\n            }\n        } else if (lst[i] < 0) {\n            if (largest === undefined) {\n                largest = lst[i];\n            } else if (lst[i] > largest) {\n                largest = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ -1, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334276
    },
    {
      "exit_code": 2,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let negative_largest: number | undefined = undefined;\n    let positive_smallest: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (negative_largest === undefined) {\n                negative_largest = lst[i];\n            } else if (lst[i] > negative_largest) {\n                negative_largest = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (positive_smallest === undefined) {\n                positive_smallest = lst[i];\n            } else if (lst[i] < positive_smallest) {\n                positive_smallest = lst[i];\n            }\n        }\n    }\n    return [negative_largest, positive_smallest];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, -1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, -1, -2, -3, -4, -5, 0, 1, 2, 3,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpi1cjs8rr.ts(34,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334276
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largestNegative: number | undefined = undefined;\n    let smallestPositive: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined) {\n                largestNegative = lst[i];\n            } else if (lst[i] > largestNegative) {\n                largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined) {\n                smallestPositive = lst[i];\n            } else if (lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, 2, -3, 4, -5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5, 0]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 4 ]\n[ -1, 2 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334276
    },
    {
      "exit_code": 2,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest === undefined || lst[i] > largest) {\n                largest = lst[i];\n            }\n        } else {\n            if (smallest === undefined || lst[i] < smallest) {\n                smallest = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmppuzuk3sp.ts(29,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334276
    },
    {
      "exit_code": 2,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest === undefined || lst[i] > largest) {\n                largest = lst[i];\n            }\n        } else {\n            if (smallest === undefined || lst[i] < smallest) {\n                smallest = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, 1, -2, 2, -3, 3, -4, 4, -5, 5, -6, 6, -7, 7, -8, 8, -9, 9, -10, 10]));\nconsole.log(largest_smallest_integers([-1, 1, -2, 2, -3, 3, -4, 4, -5, 5, -6, 6, -7, 7, -8, 8, -9, 9, -10, 10, -11, 11, -12, 12, -13, 13, -14, 14, -15, 15, -16, 16, -17, 17, -18, 18, -19, 19, -20, 20]));\nconsole.log(largest_smallest_integers([-1, 1, -2, 2, -3, 3, -4, 4, -5, 5, -6, 6, -7, 7, -8, 8, -9, 9, -10, 10, -11, 11, -12, 12, -13, 13, -14, 14, -15, 15, -16, 16, -17, 17, -18, 18, -19, 19, -20, 20, -21, 21, -22,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsr41e04d.ts(28,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334276
    },
    {
      "exit_code": 1,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest === undefined || lst[i] > largest) {\n                largest = lst[i];\n            }\n        } else {\n            if (smallest === undefined || lst[i] < smallest) {\n                smallest = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5, 6])); // [-3, 6]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6])); // [-6, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6])); // [undefined, 1]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, 1, 2, 3, 4, 5, 6])); // [-6, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, 1, 2, 3, 4, 5, 6, -1, -2, -3, -4, -5, -6, 1, 2, 3, 4, 5, 6])); // [-6, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, 1, 2, 3, 4, 5, 6, -1, -2, -3, -4, -5, -6, 1, 2, 3, 4, 5, 6, -1, -2, -3, -4, -5, -6, 1, 2, 3, 4, 5, 6])); // [-6, 1]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmpppijwps4.js:34:12)\n    at Object.<anonymous> (/tmp/tmpppijwps4.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined, 0 ],\n  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ -1, 4 ]\n[ -1, undefined ]\n[ undefined, 1 ]\n[ undefined, undefined ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ -1, 1 ]\n",
      "timestamp": 1660334277
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n  let largestNegative: number | undefined = undefined;\n  let smallestPositive: number | undefined = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largestNegative === undefined) {\n        largestNegative = lst[i];\n      } else if (lst[i] > largestNegative) {\n        largestNegative = lst[i];\n      }\n    } else if (lst[i] > 0) {\n      if (smallestPositive === undefined) {\n        smallestPositive = lst[i];\n      } else if (lst[i] < smallestPositive) {\n        smallestPositive = lst[i];\n      }\n    }\n  }\n  return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5])); // [-5, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5])); // [undefined, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\nconsole.log(largest_smallest_integers([-1.5, -2.5, -3.5, -4.5, -5.5])); // [-5.5, undefined]\nconsole.log(largest_smallest_integers([1.5, 2.5, 3.5, 4.5, 5.5])); // [undefined, 1.5]\nconsole.log(largest_smallest_integers([-1.5, -2.5, -3.5, -4.5, -5.5, 1.5, 2.5, 3.5, 4.5, 5.5])); // [-5.5, 1.5]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n[ -1.5, undefined ]\n[ undefined, 1.5 ]\n[ -1.5, 1.5 ]\n",
      "timestamp": 1660334277
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n  let smallest_positive: number | undefined = undefined;\n  let largest_negative: number | undefined = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largest_negative === undefined) {\n        largest_negative = lst[i];\n      } else if (lst[i] > largest_negative) {\n        largest_negative = lst[i];\n      }\n    } else if (lst[i] > 0) {\n      if (smallest_positive === undefined) {\n        smallest_positive = lst[i];\n      } else if (lst[i] < smallest_positive) {\n        smallest_positive = lst[i];\n      }\n    }\n  }\n  return [largest_negative, smallest_positive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5])); // [-5, None]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, -10, -20, -30])); // [-30, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, -10, -20, -30, 10, 20, 30])); // [-30, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, -10, -20, -30, 10, 20, 30, -40, -50])); // [-50,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ -1, 1 ]\n",
      "timestamp": 1660334277
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest_positive: number | undefined = undefined;\n    let largest_negative: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n            if (smallest_positive === undefined) {\n                smallest_positive = lst[i];\n            } else if (lst[i] < smallest_positive) {\n                smallest_positive = lst[i];\n            }\n        } else if (lst[i] < 0) {\n            if (largest_negative === undefined) {\n                largest_negative = lst[i];\n            } else if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, 4 ]\n[ -1, undefined ]\n[ undefined, 1 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334277
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largestNegative: number | undefined = undefined;\n    let smallestPositive: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined) {\n                largestNegative = lst[i];\n            } else if (lst[i] > largestNegative) {\n                largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined) {\n                smallestPositive = lst[i];\n            } else if (lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, -5, -4, -3, -2, -1]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, -5, -4, -3, -2, -1, 0]));\nconsole.log(largest_smallest_integers([0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([0, 1, 2, 3, 4, 5, -5, -4, -3, -2, -1]));\nconsole.log(largest_smallest_integers([0, 1, 2, 3, 4, 5, -5, -4, -3, -2, -1, 0]));\nconsole.log(largest_smallest_integers([0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334277
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let negative_max: number | undefined = undefined;\n    let positive_min: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (negative_max === undefined) {\n                negative_max = lst[i];\n            } else if (lst[i] > negative_max) {\n                negative_max = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (positive_min === undefined) {\n                positive_min = lst[i];\n            } else if (lst[i] < positive_min) {\n                positive_min = lst[i];\n            }\n        }\n    }\n    return [negative_max, positive_min];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, 2, -3, 4, -5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 4 ]\n[ -1, 2 ]\n[ -1, 1 ]\n[ -1, undefined ]\n[ undefined, 1 ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334277
    },
    {
      "exit_code": 1,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largestNegative = undefined;\n    let smallestPositive = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined || lst[i] > largestNegative) {\n                largestNegative = lst[i];\n            }\n        } else {\n            if (smallestPositive === undefined || lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3]));\nconsole.log(largest_smallest_integers([4, 5]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmpke6c7dch.js:31:12)\n    at Object.<anonymous> (/tmp/tmpke6c7dch.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined, 0 ],\n  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ -1, 4 ]\n[ -1, undefined ]\n[ undefined, 4 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334277
    },
    {
      "exit_code": 1,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest: number | undefined;\n    let largest: number | undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n            if (smallest === undefined || lst[i] < smallest) {\n                smallest = lst[i];\n            }\n        } else {\n            if (largest === undefined || lst[i] > largest) {\n                largest = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5])); // [-3, 5]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5])); // [-5, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5])); // [undefined, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, 0, 1, 2, 3, 4, 5])); // [-3, 1]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmpgzlfn2iv.js:32:12)\n    at Object.<anonymous> (/tmp/tmpgzlfn2iv.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1 ],\n  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ -1, 4 ]\n[ -1, undefined ]\n[ undefined, 1 ]\n[ 0, 1 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334277
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest_positive: number | undefined = undefined;\n    let largest_negative: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest_negative === undefined) {\n                largest_negative = lst[i];\n            } else if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallest_positive === undefined) {\n                smallest_positive = lst[i];\n            } else if (lst[i] < smallest_positive) {\n                smallest_positive = lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5])); // [-3, 4]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5])); // [-5, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5])); // [undefined, 1]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, 4 ]\n[ -1, undefined ]\n[ undefined, 1 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334277
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let negative_max: number | undefined = undefined;\n    let positive_min: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (negative_max === undefined) {\n                negative_max = lst[i];\n            } else if (lst[i] > negative_max) {\n                negative_max = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (positive_min === undefined) {\n                positive_min = lst[i];\n            } else if (lst[i] < positive_min) {\n                positive_min = lst[i];\n            }\n        }\n    }\n    return [negative_max, positive_min];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([0, 1, 2, 3, 4, 5, -1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([0, 1, 2, 3, 4, 5, -1, -2, -3, -4, -5, 0]));\nconsole.log(largest_smallest_integers([0]));\nconsole.log(largest_smallest_integers([-1]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n[ -1, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334277
    },
    {
      "exit_code": 1,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n  let largestNegative = undefined;\n  let smallestPositive = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largestNegative === undefined || lst[i] > largestNegative) {\n        largestNegative = lst[i];\n      }\n    } else {\n      if (smallestPositive === undefined || lst[i] < smallestPositive) {\n        smallestPositive = lst[i];\n      }\n    }\n  }\n  return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmpo81z4p6o.js:28:12)\n    at Object.<anonymous> (/tmp/tmpo81z4p6o.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined, 0 ],\n  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ -1, 4 ]\n",
      "timestamp": 1660334277
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n  let largestNegative: number | undefined = undefined;\n  let smallestPositive: number | undefined = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largestNegative === undefined) {\n        largestNegative = lst[i];\n      } else if (lst[i] > largestNegative) {\n        largestNegative = lst[i];\n      }\n    } else if (lst[i] > 0) {\n      if (smallestPositive === undefined) {\n        smallestPositive = lst[i];\n      } else if (lst[i] < smallestPositive) {\n        smallestPositive = lst[i];\n      }\n    }\n  }\n  return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, 2, -3, 4, -5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 4 ]\n[ -1, 2 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334277
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n  let smallest_positive: number | undefined = undefined;\n  let largest_negative: number | undefined = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      if (smallest_positive === undefined) {\n        smallest_positive = lst[i];\n      } else if (lst[i] < smallest_positive) {\n        smallest_positive = lst[i];\n      }\n    } else if (lst[i] < 0) {\n      if (largest_negative === undefined) {\n        largest_negative = lst[i];\n      } else if (lst[i] > largest_negative) {\n        largest_negative = lst[i];\n      }\n    }\n  }\n  return [largest_negative, smallest_positive];\n}\n\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, 1, -2, 2, -3, 3, -4, 4, -5, 5, -6, 6, -7, 7, -8, 8, -9, 9, -10, 10]));\nconsole.log(largest_smallest_integers([-1, 1, -2, 2, -3, 3, -4, 4, -5, 5, -6, 6, -7, 7, -8, 8, -9, 9, -10, 10, 0]));\nconsole.log(largest_smallest_integers([0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ undefined, 1 ]\n[ -1, undefined ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334277
    },
    {
      "exit_code": 2,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest_positive: number | undefined = undefined;\n    let largest_negative: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest_negative === undefined) {\n                largest_negative = lst[i];\n            } else if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallest_positive === undefined) {\n                smallest_positive = lst[i];\n            } else if (lst[i] < smallest_positive) {\n                smallest_positive = lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n}\n\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\nconsole.log(largest_smallest_integers([-1, 2, -3, 4, -5, 6, -7, 8, -9, 10]));\nconsole.log(largest_smallest_integers([1, -2, 3, -4, 5, -6, 7, -8, 9, -10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0, 0,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2ifdlsst.ts(34,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334279
    },
    {
      "exit_code": 1,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest === undefined || lst[i] > largest) {\n                largest = lst[i];\n            }\n        } else {\n            if (smallest === undefined || lst[i] < smallest) {\n                smallest = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, 2, -3, 4, -5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, -5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmpv9m203y4.js:33:12)\n    at Object.<anonymous> (/tmp/tmpv9m203y4.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined, 0 ],\n  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 2 ]\n[ -1, 4 ]\n[ -1, 0 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334279
    },
    {
      "exit_code": 1,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n  let smallest: number | undefined = undefined;\n  let largest: number | undefined = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largest === undefined || lst[i] > largest) {\n        largest = lst[i];\n      }\n    } else {\n      if (smallest === undefined || lst[i] < smallest) {\n        smallest = lst[i];\n      }\n    }\n  }\n  return [largest, smallest];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5])); // [-5, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5])); // [undefined, 1]\nconsole.log(largest_smallest_integers([-1, 1, -2, 2, -3, 3])); // [-1, 1]\nconsole.log(largest_smallest_integers([-1, 1, -2, 2, -3, 3, -4, 4])); // [-1, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmpy4wg0h8e.js:33:12)\n    at Object.<anonymous> (/tmp/tmpy4wg0h8e.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined, 0 ],\n  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334279
    },
    {
      "exit_code": 2,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest === undefined || lst[i] > largest) {\n                largest = lst[i];\n            }\n        } else {\n            if (smallest === undefined || lst[i] < smallest) {\n                smallest = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, 2, -3, 4, -5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5, -1, -2, -3, -4, -5, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5, -1, -2, -3, -4, -5, 1, 2, 3, 4, 5, -1, -2, -3, -4, -5, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5, -1, -2, -3, -4, -5, 1, 2, 3, 4, 5, -1, -2, -3, -4, -5,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpo0yy9z82.ts(31,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334279
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n  let smallest_positive: number | undefined = undefined;\n  let largest_negative: number | undefined = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largest_negative === undefined) {\n        largest_negative = lst[i];\n      } else if (lst[i] > largest_negative) {\n        largest_negative = lst[i];\n      }\n    } else if (lst[i] > 0) {\n      if (smallest_positive === undefined) {\n        smallest_positive = lst[i];\n      } else if (lst[i] < smallest_positive) {\n        smallest_positive = lst[i];\n      }\n    }\n  }\n  return [largest_negative, smallest_positive];\n}\n\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\nconsole.log(largest_smallest_integers([-1, 2, -3, 4, -5, 6, -7, 8, -9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ undefined, 1 ]\n[ -1, undefined ]\n[ -1, 2 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334279
    },
    {
      "exit_code": 2,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest_positive: number | undefined = undefined;\n    let largest_negative: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n            if (smallest_positive === undefined) {\n                smallest_positive = lst[i];\n            } else if (lst[i] < smallest_positive) {\n                smallest_positive = lst[i];\n            }\n        } else if (lst[i] < 0) {\n            if (largest_negative === undefined) {\n                largest_negative = lst[i];\n            } else if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, 1, -2, 2, -3, 3, -4, 4, -5, 5, -6, 6, -7, 7, -8, 8, -9, 9, -10, 10]));\nconsole.log(largest_smallest_integers([-1, 1, -2, 2, -3, 3, -4, 4, -5, 5, -6, 6, -7, 7, -8, 8, -9, 9, -10, 10, -11, 11, -12, 12, -13, 13, -14, 14, -15, 15, -16, 16, -17, 17, -18, 18, -19, 19, -20, 20]));\nconsole.log(largest_smallest_integers([-1, 1, -2, 2, -3, 3, -4, 4, -5, 5, -6, 6, -7, 7, -8, 8, -9\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyaad66yw.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmpyaad66yw.ts(32,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334265
    },
    {
      "exit_code": 2,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largest_negative: number | undefined = undefined;\n    let smallest_positive: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest_negative === undefined) {\n                largest_negative = lst[i];\n            } else if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallest_positive === undefined) {\n                smallest_positive = lst[i];\n            } else if (lst[i] < smallest_positive) {\n                smallest_positive = lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5])); // [-5, undefined]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, 5])); // [-1, 5]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 5])); // [-5, 5]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0])); // [-5, undefined]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, 6])); // [-5, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, 6, 7])); // [-5, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpi37jkkmm.ts(35,1): error TS1005: ',' expected.\n../../../../tmp/tmpi37jkkmm.ts(35,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334279
    },
    {
      "exit_code": 2,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largestNegative: number | undefined = undefined;\n    let smallestPositive: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined) {\n                largestNegative = lst[i];\n            } else if (lst[i] > largestNegative) {\n                largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined) {\n                smallestPositive = lst[i];\n            } else if (lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-2, -4, -6, -8, -10]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, -100, 100]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, -100, 100, -200, 200]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, -100, 100, -200, 200, -300, 300]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1uwlo5n3.ts(35,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334279
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest_positive: number | undefined = undefined;\n    let largest_negative: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n            if (smallest_positive === undefined) {\n                smallest_positive = lst[i];\n            } else if (lst[i] < smallest_positive) {\n                smallest_positive = lst[i];\n            }\n        } else if (lst[i] < 0) {\n            if (largest_negative === undefined) {\n                largest_negative = lst[i];\n            } else if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, -1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, 1 ]\n[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ undefined, 1 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334280
    },
    {
      "exit_code": 2,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largestNegative: number | undefined = undefined;\n    let smallestPositive: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined) {\n                largestNegative = lst[i];\n            } else if (lst[i] > largestNegative) {\n                largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined) {\n                smallestPositive = lst[i];\n            } else if (lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, 0]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, 0, 0]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, 0, 0, 0]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, 0, 0\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpd10y9q9v.ts(35,1): error TS1005: ',' expected.\n../../../../tmp/tmpd10y9q9v.ts(35,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334280
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallestPositive: number | undefined;\n    let largestNegative: number | undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n            if (smallestPositive === undefined) {\n                smallestPositive = lst[i];\n            } else if (lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n            }\n        } else if (lst[i] < 0) {\n            if (largestNegative === undefined) {\n                largestNegative = lst[i];\n            } else if (lst[i] > largestNegative) {\n                largestNegative = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 11, 12, 13, 14, 15]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -11, 1 ]\n[ -1, 11 ]\n[ -1, undefined ]\n[ -11, 1 ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334280
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let negative_max: number | undefined = undefined;\n    let positive_min: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (negative_max === undefined) {\n                negative_max = lst[i];\n            } else if (lst[i] > negative_max) {\n                negative_max = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (positive_min === undefined) {\n                positive_min = lst[i];\n            } else if (lst[i] < positive_min) {\n                positive_min = lst[i];\n            }\n        }\n    }\n    return [negative_max, positive_min];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, 2, -3, 4, -5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5, 0]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 4 ]\n[ -1, 2 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334280
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest_positive: number | undefined = undefined;\n    let largest_negative: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n            if (smallest_positive === undefined) {\n                smallest_positive = lst[i];\n            } else if (lst[i] < smallest_positive) {\n                smallest_positive = lst[i];\n            }\n        } else if (lst[i] < 0) {\n            if (largest_negative === undefined) {\n                largest_negative = lst[i];\n            } else if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5, 6]));\nconsole.log(largest_smallest_integers([-10, -8, -5, -3, 3, 4, 6, 7]));\nconsole.log(largest_smallest_integers([-1, -2, -3]));\nconsole.log(largest_smallest_integers([1, 2, 3]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, 4 ]\n[ -3, 3 ]\n[ -1, undefined ]\n[ undefined, 1 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334280
    },
    {
      "exit_code": 2,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest_positive: number | undefined = undefined;\n    let largest_negative: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest_negative === undefined) {\n                largest_negative = lst[i];\n            } else if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallest_positive === undefined) {\n                smallest_positive = lst[i];\n            } else if (lst[i] < smallest_positive) {\n                smallest_positive = lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5, 6])); // [-3, 4]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6])); // [-6, undefined]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, 0])); // [-6, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6])); // [undefined, 1]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\nconsole.log(largest_smallest_integers([0])); // [undefined, undefined]\nconsole.log(largest_smallest_integers([-1, -2, -3, 0, 1, 2, 3])); // [-3, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, 0, 1, 2, 3, -4, -5, -6])); // [-6, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, 0, 1, 2, 3, -4, -5, -\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1_rok16f.ts(36,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334280
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largestNegative: number | undefined = undefined;\n    let smallestPositive: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined) {\n                largestNegative = lst[i];\n            } else if (lst[i] > largestNegative) {\n                largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined) {\n                smallestPositive = lst[i];\n            } else if (lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([1, 2, 3, -4, -5])); // [-5, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5])); // [-1, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5])); // [undefined, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5])); // [-1, 4]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0])); // [-1, 0]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5])); // [-1, 1]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -4, 1 ]\n[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 4 ]\n[ -1, undefined ]\n[ -1, 1 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334280
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let a: number | undefined = undefined;\n    let b: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (a === undefined) {\n                a = lst[i];\n            } else if (lst[i] > a) {\n                a = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (b === undefined) {\n                b = lst[i];\n            } else if (lst[i] < b) {\n                b = lst[i];\n            }\n        }\n    }\n    return [a, b];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5])); // [-5, None]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5])); // [None, 5]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5])); // [-5, 5]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5])); // [-5, 5]\nconsole.log(largest_smallest_integers([])); // [None, None]\nconsole.log(largest_smallest_integers([0])); // [None, None]\nconsole.log(largest_smallest_integers([-1])); // [-1, None]\nconsole.log(largest_smallest_integers([1])); // [None, 1]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n[ -1, undefined ]\n[ undefined, 1 ]\n",
      "timestamp": 1660334280
    },
    {
      "exit_code": 2,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest: number | undefined;\n    let largest: number | undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest === undefined || lst[i] > largest) {\n                largest = lst[i];\n            }\n        } else {\n            if (smallest === undefined || lst[i] < smallest) {\n                smallest = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, 2, -3, 4, -5, 6, -7, 8, -9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, 10]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, -10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, -10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpf59jvy53.ts(31,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334280
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let a: number | undefined = undefined;\n    let b: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (a == undefined) {\n                a = lst[i];\n            } else if (lst[i] > a) {\n                a = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (b == undefined) {\n                b = lst[i];\n            } else if (lst[i] < b) {\n                b = lst[i];\n            }\n        }\n    }\n    return [a, b];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ -1, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334281
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let a: number | undefined = undefined;\n    let b: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (a === undefined) {\n                a = lst[i];\n            } else if (lst[i] > a) {\n                a = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (b === undefined) {\n                b = lst[i];\n            } else if (lst[i] < b) {\n                b = lst[i];\n            }\n        }\n    }\n    return [a, b];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5])); // [-5, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5])); // [undefined, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5])); // [-1, 4]\nconsole.log(largest_smallest_integers([-1, 2, -3, 4, -5])); // [-1, 2]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, -5])); // [-5, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5, -1, -2, -3, -4, -5, 1, 2, 3, 4, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0])); // [undefined, undefined]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 4 ]\n[ -1, 2 ]\n[ -5, 1 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334281
    },
    {
      "exit_code": 2,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest === undefined || lst[i] > largest) {\n                largest = lst[i];\n            }\n        } else {\n            if (smallest === undefined || lst[i] < smallest) {\n                smallest = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([-1, -2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, 2, -3, 4, -5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, 2, 3, -4, 5]));\nconsole.log(largest_smallest_integers([-1, 2, 3, 4, -5]));\nconsole.log(largest_smallest_integers([1, -2, 3, -4, 5]));\nconsole.log(largest_smallest_integers([1, -2, -3, 4, -5]));\nconsole.log(largest_smallest_integers([1, 2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp77jbzmmj.ts(38,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334281
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest_positive: number | undefined = undefined;\n    let largest_negative: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n            if (smallest_positive === undefined) {\n                smallest_positive = lst[i];\n            } else if (lst[i] < smallest_positive) {\n                smallest_positive = lst[i];\n            }\n        } else if (lst[i] < 0) {\n            if (largest_negative === undefined) {\n                largest_negative = lst[i];\n            } else if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, -1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, -1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, 1 ]\n[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ -1, 1 ]\n",
      "timestamp": 1660334281
    },
    {
      "exit_code": 2,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest_positive: number | undefined = undefined;\n    let largest_negative: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest_negative === undefined) {\n                largest_negative = lst[i];\n            } else if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallest_positive === undefined) {\n                smallest_positive = lst[i];\n            } else if (lst[i] < smallest_positive) {\n                smallest_positive = lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv3e1j2kc.ts(34,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334280
    },
    {
      "exit_code": 2,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest_positive: number | undefined = undefined;\n    let largest_negative: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n            if (smallest_positive === undefined) {\n                smallest_positive = lst[i];\n            } else if (lst[i] < smallest_positive) {\n                smallest_positive = lst[i];\n            }\n        } else if (lst[i] < 0) {\n            if (largest_negative === undefined) {\n                largest_negative = lst[i];\n            } else if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, 1, -2, 2, -3, 3, -4, 4, -5, 5, -6, 6, -7, 7, -8, 8, -9, 9, -10, 10]));\nconsole.log(largest_smallest_integers([-1, 1, -2, 2, -3, 3, -4, 4, -5, 5, -6, 6, -7, 7, -8, 8, -9, 9, -10, 10, -11, 11, -12, 12, -13, 13, -14, 14, -15, 15, -16, 16, -17, 17, -18, 18, -19, 19, -20, 20]));\nconsole.log(largest_smallest_integers([-1, 1, -2, 2, -3, 3, -4, 4, -5, 5, -6, 6, -7, 7, -8, 8, -9\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyaad66yw.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmpyaad66yw.ts(32,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334265
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let a: number | undefined = undefined;\n    let b: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (a === undefined) {\n                a = lst[i];\n            } else if (lst[i] > a) {\n                a = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (b === undefined) {\n                b = lst[i];\n            } else if (lst[i] < b) {\n                b = lst[i];\n            }\n        }\n    }\n    return [a, b];\n}\n\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([-1, 2, -3, 4, -5]));\nconsole.log(largest_smallest_integers([1, -2, 3, -4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ undefined, 1 ]\n[ -1, undefined ]\n[ -1, 2 ]\n[ -2, 1 ]\n[ -1, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334281
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest_positive: number | undefined = undefined;\n    let largest_negative: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n            if (smallest_positive === undefined) {\n                smallest_positive = lst[i];\n            } else if (lst[i] < smallest_positive) {\n                smallest_positive = lst[i];\n            }\n        } else if (lst[i] < 0) {\n            if (largest_negative === undefined) {\n                largest_negative = lst[i];\n            } else if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, 0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, 4 ]\n[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334281
    },
    {
      "exit_code": 1,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest === undefined || lst[i] > largest) {\n                largest = lst[i];\n            }\n        } else {\n            if (smallest === undefined || lst[i] < smallest) {\n                smallest = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, 1, -2, 2, -3, 3, -4, 4, -5, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([]));\nconsole.log(largest_smallest_integers([0]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmpzfbcafh4.js:34:12)\n    at Object.<anonymous> (/tmp/tmpzfbcafh4.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined, 0 ],\n  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n[ undefined, 0 ]\n[ -1, 0 ]\n",
      "timestamp": 1660334282
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largestNegative: number | undefined = undefined;\n    let smallestPositive: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined) {\n                largestNegative = lst[i];\n            } else if (lst[i] > largestNegative) {\n                largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined) {\n                smallestPositive = lst[i];\n            } else if (lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5, 6]));\nconsole.log(largest_smallest_integers([-1, -2, -3]));\nconsole.log(largest_smallest_integers([4, 5, 6]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, 4 ]\n[ -1, undefined ]\n[ undefined, 4 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334282
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let negative_max = undefined;\n    let positive_min = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (negative_max === undefined) {\n                negative_max = lst[i];\n            } else if (lst[i] > negative_max) {\n                negative_max = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (positive_min === undefined) {\n                positive_min = lst[i];\n            } else if (lst[i] < positive_min) {\n                positive_min = lst[i];\n            }\n        }\n    }\n    return [negative_max, positive_min];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5])); // [-5, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5])); // [undefined, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5])); // [-3, 4]\nconsole.log(largest_smallest_integers([-1, 2, -3, 4, 5])); // [-1, 2]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, -5])); // [-5, 1]\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0])); // [undefined, undefined]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 4 ]\n[ -1, 2 ]\n[ -5, 1 ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334282
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n  let smallest: number | undefined = undefined;\n  let largest: number | undefined = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      if (smallest === undefined || lst[i] < smallest) {\n        smallest = lst[i];\n      }\n    } else if (lst[i] < 0) {\n      if (largest === undefined || lst[i] > largest) {\n        largest = lst[i];\n      }\n    }\n  }\n  return [largest, smallest];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5])); // [-3, 4]\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0])); // [None, None]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5])); // [-5, None]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5])); // [None, 1]\nconsole.log(largest_smallest_integers([-1, 1, -2, 2, -3, 3])); // [-3, 3]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, 4 ]\n[ undefined, undefined ]\n[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n",
      "timestamp": 1660334282
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n  let largestNegative: number | undefined = undefined;\n  let smallestPositive: number | undefined = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largestNegative === undefined) {\n        largestNegative = lst[i];\n      } else if (lst[i] > largestNegative) {\n        largestNegative = lst[i];\n      }\n    } else if (lst[i] > 0) {\n      if (smallestPositive === undefined) {\n        smallestPositive = lst[i];\n      } else if (lst[i] < smallestPositive) {\n        smallestPositive = lst[i];\n      }\n    }\n  }\n  return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5])); // [-5, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5])); // [undefined, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, 0])); // [-5, 1]\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0])); // [undefined, undefined]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334283
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largest_negative: number | undefined = undefined;\n    let smallest_positive: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest_negative === undefined) {\n                largest_negative = lst[i];\n            } else if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallest_positive === undefined) {\n                smallest_positive = lst[i];\n            } else if (lst[i] < smallest_positive) {\n                smallest_positive = lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([0, 1, 2, 3, 4, 5, -1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([0, 1, 2, 3, 4, 5, -1, -2, -3, -4, -5, 0]));\nconsole.log(largest_smallest_integers([0]));\nconsole.log(largest_smallest_integers([-1]));\nconsole.log(largest_smallest_integers([1]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n[ -1, undefined ]\n[ undefined, 1 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334283
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largestNegative: number | undefined = undefined;\n    let smallestPositive: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined) {\n                largestNegative = lst[i];\n            } else if (lst[i] > largestNegative) {\n                largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined) {\n                smallestPositive = lst[i];\n            } else if (lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ undefined, undefined ]\n[ -1, 1 ]\n[ -1, undefined ]\n[ -1, 1 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334283
    },
    {
      "exit_code": 1,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largest: number | undefined = undefined;\n    let smallest: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest === undefined || lst[i] > largest) {\n                largest = lst[i];\n            }\n        } else {\n            if (smallest === undefined || lst[i] < smallest) {\n                smallest = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5])); // [-5, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5])); // [undefined, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10])); // [-1, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); // [undefined, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); // [-1, 1]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmpw8bijdrc.js:35:12)\n    at Object.<anonymous> (/tmp/tmpw8bijdrc.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined, 0 ],\n  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n[ -1, 0 ]\n[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n",
      "timestamp": 1660334283
    },
    {
      "exit_code": 1,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest === undefined || lst[i] > largest) {\n                largest = lst[i];\n            }\n        } else {\n            if (smallest === undefined || lst[i] < smallest) {\n                smallest = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmp2n2d6lmk.js:34:12)\n    at Object.<anonymous> (/tmp/tmp2n2d6lmk.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined, 0 ],\n  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ -1, 0 ]\n[ undefined, 0 ]\n[ undefined, 0 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334283
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n  let largestNegative: number | undefined = undefined;\n  let smallestPositive: number | undefined = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largestNegative === undefined) {\n        largestNegative = lst[i];\n      } else if (lst[i] > largestNegative) {\n        largestNegative = lst[i];\n      }\n    } else if (lst[i] > 0) {\n      if (smallestPositive === undefined) {\n        smallestPositive = lst[i];\n      } else if (lst[i] < smallestPositive) {\n        smallestPositive = lst[i];\n      }\n    }\n  }\n  return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5])); // [-5, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5])); // [undefined, 1]\nconsole.log(largest_smallest_integers([-1, 1, -2, 2, -3, 3])); // [-3, 1]\nconsole.log(largest_smallest_integers([-10, -20, -30, 40, 50])); // [-10, 40]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ -10, 40 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334284
    },
    {
      "exit_code": 2,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largestNegative: number | undefined = undefined;\n    let smallestPositive: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined) {\n                largestNegative = lst[i];\n            } else if (lst[i] > largestNegative) {\n                largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined) {\n                smallestPositive = lst[i];\n            } else if (lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([-1, -2, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpy746cu6d.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmpy746cu6d.ts(32,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334284
    },
    {
      "exit_code": 2,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n            if (smallest === undefined) {\n                smallest = lst[i];\n            } else if (lst[i] < smallest) {\n                smallest = lst[i];\n            }\n        } else if (lst[i] < 0) {\n            if (largest === undefined) {\n                largest = lst[i];\n            } else if (lst[i] > largest) {\n                largest = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, 1, -2, 2, -3, 3, -4, 4, -5, 5, -6, 6, -7, 7, -8, 8, -9, 9, -10, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7gk_kb9t.ts(33,1): error TS1005: ',' expected.\n../../../../tmp/tmp7gk_kb9t.ts(33,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334284
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (smallest === undefined) {\n                smallest = lst[i];\n            } else if (lst[i] > smallest) {\n                smallest = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (largest === undefined) {\n                largest = lst[i];\n            } else if (lst[i] < largest) {\n                largest = lst[i];\n            }\n        }\n    }\n    return [smallest, largest];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, 4 ]\n",
      "timestamp": 1660334284
    },
    {
      "exit_code": 1,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest === undefined || lst[i] > largest) {\n                largest = lst[i];\n            }\n        } else {\n            if (smallest === undefined || lst[i] < smallest) {\n                smallest = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmpt842s3q8.js:33:12)\n    at Object.<anonymous> (/tmp/tmpt842s3q8.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined, 0 ],\n  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ -1, 0 ]\n[ undefined, 0 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334284
    },
    {
      "exit_code": 1,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest === undefined || lst[i] > largest) {\n                largest = lst[i];\n            }\n        } else {\n            if (smallest === undefined || lst[i] < smallest) {\n                smallest = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmp2n2d6lmk.js:34:12)\n    at Object.<anonymous> (/tmp/tmp2n2d6lmk.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined, 0 ],\n  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ -1, 0 ]\n[ undefined, 0 ]\n[ undefined, 0 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334283
    },
    {
      "exit_code": 1,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n  let largestNegative = undefined;\n  let smallestPositive = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largestNegative === undefined || lst[i] > largestNegative) {\n        largestNegative = lst[i];\n      }\n    } else {\n      if (smallestPositive === undefined || lst[i] < smallestPositive) {\n        smallestPositive = lst[i];\n      }\n    }\n  }\n  return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-2, -1, 0, 1, 2]));\nconsole.log(largest_smallest_integers([-2, -1, 0, -1, -2]));\nconsole.log(largest_smallest_integers([-2, -1, 0, 1, -2]));\nconsole.log(largest_smallest_integers([-2, -1, 0, 1, -2]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmpkz5i_km2.js:34:12)\n    at Object.<anonymous> (/tmp/tmpkz5i_km2.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined, 0 ],\n  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ -1, 0 ]\n[ -1, 0 ]\n[ -1, 0 ]\n[ -1, 0 ]\n[ undefined, 1 ]\n[ -1, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334284
    },
    {
      "exit_code": 2,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largestNegative: number | undefined = undefined;\n    let smallestPositive: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined) {\n                largestNegative = lst[i];\n            } else if (lst[i] > largestNegative) {\n                largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined) {\n                smallestPositive = lst[i];\n            } else if (lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, -1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, -1, -2,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpki4uevib.ts(35,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334284
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest_positive: number | undefined = undefined;\n    let largest_negative: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest_negative === undefined) {\n                largest_negative = lst[i];\n            } else if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallest_positive === undefined) {\n                smallest_positive = lst[i];\n            } else if (lst[i] < smallest_positive) {\n                smallest_positive = lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ -1, undefined ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334275
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest_positive: number | undefined = undefined;\n    let largest_negative: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n            if (smallest_positive === undefined) {\n                smallest_positive = lst[i];\n            } else if (lst[i] < smallest_positive) {\n                smallest_positive = lst[i];\n            }\n        } else if (lst[i] < 0) {\n            if (largest_negative === undefined) {\n                largest_negative = lst[i];\n            } else if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334262
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largestNegative: number | undefined = undefined;\n    let smallestPositive: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined) {\n                largestNegative = lst[i];\n            } else if (lst[i] > largestNegative) {\n                largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined) {\n                smallestPositive = lst[i];\n            } else if (lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -2, -3, -4, -5, -6, -7, -8, -9]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, 1 ]\n",
      "timestamp": 1660334284
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n  let largestNegative: number | undefined = undefined;\n  let smallestPositive: number | undefined = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largestNegative === undefined) {\n        largestNegative = lst[i];\n      } else if (lst[i] > largestNegative) {\n        largestNegative = lst[i];\n      }\n    } else if (lst[i] > 0) {\n      if (smallestPositive === undefined) {\n        smallestPositive = lst[i];\n      } else if (lst[i] < smallestPositive) {\n        smallestPositive = lst[i];\n      }\n    }\n  }\n  return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5])); // [-5, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5])); // [undefined, 1]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -1, -2, -3, -4, -5])); // [-1, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 1, 2, 3, 4, 5])); // [undefined, 1]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5])); // [undefined\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ undefined, undefined ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ -1, undefined ]\n[ undefined, 1 ]\n[ undefined, 1 ]\n",
      "timestamp": 1660334284
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let negative_max: number | undefined = undefined;\n    let positive_min: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (negative_max === undefined) {\n                negative_max = lst[i];\n            } else if (lst[i] > negative_max) {\n                negative_max = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (positive_min === undefined) {\n                positive_min = lst[i];\n            } else if (lst[i] < positive_min) {\n                positive_min = lst[i];\n            }\n        }\n    }\n    return [negative_max, positive_min];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 0, 1, 2, 3]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, 1 ]\n",
      "timestamp": 1660334284
    },
    {
      "exit_code": 1,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largestNegative = undefined;\n    let smallestPositive = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined || lst[i] > largestNegative) {\n                largestNegative = lst[i];\n            }\n        } else {\n            if (smallestPositive === undefined || lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10])); // [-1, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); // [undefined, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); // [-1, 1]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmp9ufo3ge8.js:32:12)\n    at Object.<anonymous> (/tmp/tmp9ufo3ge8.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined, 0 ],\n  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ -1, 1 ]\n[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334285
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let negative_max: number | undefined = undefined;\n    let positive_min: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (negative_max === undefined) {\n                negative_max = lst[i];\n            } else if (lst[i] > negative_max) {\n                negative_max = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (positive_min === undefined) {\n                positive_min = lst[i];\n            } else if (lst[i] < positive_min) {\n                positive_min = lst[i];\n            }\n        }\n    }\n    return [negative_max, positive_min];\n}\n\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\nconsole.log(largest_smallest_integers([-1, 2, -3, 4, -5, 6, -7, 8, -9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ undefined, 1 ]\n[ -1, undefined ]\n[ -1, 2 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334284
    },
    {
      "exit_code": 1,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n  let largestNegative = undefined;\n  let smallestPositive = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largestNegative === undefined || lst[i] > largestNegative) {\n        largestNegative = lst[i];\n      }\n    } else {\n      if (smallestPositive === undefined || lst[i] < smallestPositive) {\n        smallestPositive = lst[i];\n      }\n    }\n  }\n  return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5])); // [-3, 4]\nconsole.log(largest_smallest_integers([-1, -2, -3])); // [-3, undefined]\nconsole.log(largest_smallest_integers([4, 5])); // [undefined, 4]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmp3d126bbd.js:31:12)\n    at Object.<anonymous> (/tmp/tmp3d126bbd.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined, 0 ],\n  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ -1, 4 ]\n[ -1, undefined ]\n[ undefined, 4 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334284
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largestNegative: number | undefined = undefined;\n    let smallestPositive: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined) {\n                largestNegative = lst[i];\n            } else if (lst[i] > largestNegative) {\n                largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined) {\n                smallestPositive = lst[i];\n            } else if (lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ -1, undefined ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334285
    },
    {
      "exit_code": 1,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n  let smallest: number | undefined = undefined;\n  let largest: number | undefined = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largest === undefined || lst[i] > largest) {\n        largest = lst[i];\n      }\n    } else {\n      if (smallest === undefined || lst[i] < smallest) {\n        smallest = lst[i];\n      }\n    }\n  }\n  return [largest, smallest];\n}\n\nconsole.log(largest_smallest_integers([-20, 34, 21, -87, 92]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmpppmwwh1m.js:28:12)\n    at Object.<anonymous> (/tmp/tmpppmwwh1m.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined, 0 ],\n  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ -20, 21 ]\n",
      "timestamp": 1660334286
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largestNegative: number | undefined = undefined;\n    let smallestPositive: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined) {\n                largestNegative = lst[i];\n            } else if (lst[i] > largestNegative) {\n                largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined) {\n                smallestPositive = lst[i];\n            } else if (lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5, 6])); // [-3, 4]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6])); // [-6, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6])); // [undefined, 1]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, 4 ]\n[ -1, undefined ]\n[ undefined, 1 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334286
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largestNegative: number | undefined = undefined;\n    let smallestPositive: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined) {\n                largestNegative = lst[i];\n            } else if (lst[i] > largestNegative) {\n                largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined) {\n                smallestPositive = lst[i];\n            } else if (lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5])); // [-5, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5])); // [undefined, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334286
    },
    {
      "exit_code": 1,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest === undefined || lst[i] > largest) {\n                largest = lst[i];\n            }\n        } else {\n            if (smallest === undefined || lst[i] < smallest) {\n                smallest = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmpp2xgnamv.js:31:12)\n    at Object.<anonymous> (/tmp/tmpp2xgnamv.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined, 0 ],\n  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ -1, 0 ]\n[ -1, undefined ]\n[ undefined, 0 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334286
    },
    {
      "exit_code": 1,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n  let smallest: number | undefined;\n  let largest: number | undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largest === undefined || lst[i] > largest) {\n        largest = lst[i];\n      }\n    } else {\n      if (smallest === undefined || lst[i] < smallest) {\n        smallest = lst[i];\n      }\n    }\n  }\n  return [largest, smallest];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5])); // [-5, undefined]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, 5])); // [-1, 5]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5])); // [undefined, 1]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmpjm76j_tg.js:31:12)\n    at Object.<anonymous> (/tmp/tmpjm76j_tg.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined, 0 ],\n  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ -1, undefined ]\n[ -1, 5 ]\n[ undefined, 1 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334286
    },
    {
      "exit_code": 2,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest_positive = undefined;\n    let largest_negative = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n            if (smallest_positive === undefined) {\n                smallest_positive = lst[i];\n            } else if (lst[i] < smallest_positive) {\n                smallest_positive = lst[i];\n            }\n        } else if (lst[i] < 0) {\n            if (largest_negative === undefined) {\n                largest_negative = lst[i];\n            } else if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp87acvyr4.ts(34,1): error TS1005: ',' expected.\n../../../../tmp/tmp87acvyr4.ts(34,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334286
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largest_negative: number | undefined = undefined;\n    let smallest_positive: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest_negative === undefined) {\n                largest_negative = lst[i];\n            } else if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallest_positive === undefined) {\n                smallest_positive = lst[i];\n            } else if (lst[i] < smallest_positive) {\n                smallest_positive = lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, 2, -3, 4, -5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5, 0]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 4 ]\n[ -1, 2 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334286
    },
    {
      "exit_code": 2,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest_positive: number | undefined = undefined;\n    let largest_negative: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest_negative === undefined) {\n                largest_negative = lst[i];\n            } else if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallest_positive === undefined) {\n                smallest_positive = lst[i];\n            } else if (lst[i] < smallest_positive) {\n                smallest_positive = lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([-1, -\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp24oh6spg.ts(34,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334286
    },
    {
      "exit_code": 1,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest === undefined || lst[i] > largest) {\n                largest = lst[i];\n            }\n        } else {\n            if (smallest === undefined || lst[i] < smallest) {\n                smallest = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0]));\nconsole.log(largest_smallest_integers([0, 1, 2, 3, 4, 5, 0]));\nconsole.log(largest_smallest_integers([0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmpx2guuctg.js:36:12)\n    at Object.<anonymous> (/tmp/tmpx2guuctg.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined, 0 ],\n  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ -1, 0 ]\n[ undefined, 0 ]\n[ -1, 0 ]\n[ undefined, 0 ]\n[ undefined, 0 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334287
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largest_negative: number | undefined = undefined;\n    let smallest_positive: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest_negative === undefined) {\n                largest_negative = lst[i];\n            } else if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallest_positive === undefined) {\n                smallest_positive = lst[i];\n            } else if (lst[i] < smallest_positive) {\n                smallest_positive = lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n}\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ -1, undefined ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334287
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largestNegative: number | undefined = undefined;\n    let smallestPositive: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined) {\n                largestNegative = lst[i];\n            } else if (lst[i] > largestNegative) {\n                largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined) {\n                smallestPositive = lst[i];\n            } else if (lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, 2, -3, 4, -5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5, 0]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 4 ]\n[ -1, 2 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334276
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest_positive: number | undefined = undefined;\n    let largest_negative: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest_negative === undefined) {\n                largest_negative = lst[i];\n            } else if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallest_positive === undefined) {\n                smallest_positive = lst[i];\n            } else if (lst[i] < smallest_positive) {\n                smallest_positive = lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5, 6]));\nconsole.log(largest_smallest_integers([-1, -2, -3]));\nconsole.log(largest_smallest_integers([4, 5, 6]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, 4 ]\n[ -1, undefined ]\n[ undefined, 4 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334287
    },
    {
      "exit_code": 1,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest === undefined || lst[i] > largest) {\n                largest = lst[i];\n            }\n        } else {\n            if (smallest === undefined || lst[i] < smallest) {\n                smallest = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmpk895p7a5.js:27:12)\n    at Object.<anonymous> (/tmp/tmpk895p7a5.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined, 0 ],\n  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334269
    },
    {
      "exit_code": 1,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest: number | undefined;\n    let largest: number | undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest === undefined || lst[i] > largest) {\n                largest = lst[i];\n            }\n        } else {\n            if (smallest === undefined || lst[i] < smallest) {\n                smallest = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n}\n\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, -1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmpc8amw4wb.js:31:12)\n    at Object.<anonymous> (/tmp/tmpc8amw4wb.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined, 0 ],\n  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ -1, 1 ]\n[ undefined, 1 ]\n[ -1, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334287
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n            if (smallest === undefined) {\n                smallest = lst[i];\n            } else if (lst[i] < smallest) {\n                smallest = lst[i];\n            }\n        } else if (lst[i] < 0) {\n            if (largest === undefined) {\n                largest = lst[i];\n            } else if (lst[i] > largest) {\n                largest = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, 0, 0, 0, 0, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n[ -1, 1 ]\n",
      "timestamp": 1660334287
    },
    {
      "exit_code": 1,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largestNegative = undefined;\n    let smallestPositive = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined || lst[i] > largestNegative) {\n                largestNegative = lst[i];\n            }\n        } else {\n            if (smallestPositive === undefined || lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmp11tdlzkp.js:27:12)\n    at Object.<anonymous> (/tmp/tmp11tdlzkp.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined, 0 ],\n  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334273
    },
    {
      "exit_code": 2,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n  let largestNegative: number | undefined = undefined;\n  let smallestPositive: number | undefined = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largestNegative === undefined) {\n        largestNegative = lst[i];\n      } else if (lst[i] > largestNegative) {\n        largestNegative = lst[i];\n      }\n    } else if (lst[i] > 0) {\n      if (smallestPositive === undefined) {\n        smallestPositive = lst[i];\n      } else if (lst[i] < smallestPositive) {\n        smallestPositive = lst[i];\n      }\n    }\n  }\n  return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5])); // [-5, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5])); // [undefined, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, -1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, -1, -2, -3, -4, -5, 0,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpijqv1rp9.ts(34,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334287
    },
    {
      "exit_code": 1,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largestNegative = undefined;\n    let smallestPositive = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined || lst[i] > largestNegative) {\n                largestNegative = lst[i];\n            }\n        } else {\n            if (smallestPositive === undefined || lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5, 6])); // [-3, 4]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6])); // [-6, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6])); // [undefined, 1]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\nconsole.log(largest_smallest_integers([-1, -2, -3, 0, 1, 2, 3])); // [-3, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, 0, 1, 2, 3, 4, 5, 6])); // [-6, 1]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmp1e6xgo7r.js:33:12)\n    at Object.<anonymous> (/tmp/tmp1e6xgo7r.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined, 0 ],\n  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ -1, 4 ]\n[ -1, undefined ]\n[ undefined, 1 ]\n[ undefined, undefined ]\n[ -1, 0 ]\n[ -1, 0 ]\n",
      "timestamp": 1660334287
    },
    {
      "exit_code": 2,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n            if (smallest === undefined) {\n                smallest = lst[i];\n            } else if (lst[i] < smallest) {\n                smallest = lst[i];\n            }\n        } else if (lst[i] < 0) {\n            if (largest === undefined) {\n                largest = lst[i];\n            } else if (lst[i] > largest) {\n                largest = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 0, 0, 0, 0, 0,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp5vf8kdt1.ts(33,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334287
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallestPositive: number | undefined = undefined;\n    let largestNegative: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n            if (smallestPositive === undefined) {\n                smallestPositive = lst[i];\n            } else if (lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n            }\n        } else if (lst[i] < 0) {\n            if (largestNegative === undefined) {\n                largestNegative = lst[i];\n            } else if (lst[i] > largestNegative) {\n                largestNegative = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334287
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largest_negative = undefined;\n    let smallest_positive = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest_negative === undefined) {\n                largest_negative = lst[i];\n            } else if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallest_positive === undefined) {\n                smallest_positive = lst[i];\n            } else if (lst[i] < smallest_positive) {\n                smallest_positive = lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5])); // [-5, None]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5])); // [None, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, 5])); // [-1, 5]\nconsole.log(largest_smallest_integers([-1, 2, -3, 4, -5])); // [-1, 2]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5, 0])); // [-5, 1]\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0])); // [None, None]\nconsole.log(largest_smallest_integers([])); // [None, None]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 5 ]\n[ -1, 2 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334288
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest: number | undefined;\n    let largest: number | undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n            if (smallest == undefined) {\n                smallest = lst[i];\n            } else if (lst[i] < smallest) {\n                smallest = lst[i];\n            }\n        } else if (lst[i] < 0) {\n            if (largest == undefined) {\n                largest = lst[i];\n            } else if (lst[i] > largest) {\n                largest = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, 4 ]\n[ -1, undefined ]\n[ undefined, 1 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334288
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let a: number | undefined = undefined;\n    let b: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (a === undefined) {\n                a = lst[i];\n            } else if (lst[i] > a) {\n                a = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (b === undefined) {\n                b = lst[i];\n            } else if (lst[i] < b) {\n                b = lst[i];\n            }\n        }\n    }\n    return [a, b];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5])); // [-5, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5])); // [undefined, 1]\nconsole.log(largest_smallest_integers([-1, 1, -2, 2, -3, 3, -4, 4, -5, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5])); // [-5, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5, 0])); // [-5, 1]\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0])); // [undefined, undefined]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334288
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let a: number | undefined = undefined;\n    let b: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (a === undefined) {\n                a = lst[i];\n            } else if (lst[i] > a) {\n                a = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (b === undefined) {\n                b = lst[i];\n            } else if (lst[i] < b) {\n                b = lst[i];\n            }\n        }\n    }\n    return [a, b];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5])); // [-3, 4]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5])); // [-1, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5])); // [undefined, 1]\nconsole.log(largest_smallest_integers([-1, -2, -3, 0, 1, 2, 3, 4, 5])); // [-1, 1]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, 4 ]\n[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334288
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n  const positives = lst.filter(x => x > 0);\n  const negatives = lst.filter(x => x < 0);\n  const largest_negative = negatives.length > 0 ? Math.max(...negatives) : undefined;\n  const smallest_positive = positives.length > 0 ? Math.min(...positives) : undefined;\n  return [largest_negative, smallest_positive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([0, 0, 0, 0, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, 1 ]\n[ -1, undefined ]\n[ undefined, 1 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334288
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest_positive: number | undefined = undefined;\n    let largest_negative: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest_negative === undefined) {\n                largest_negative = lst[i];\n            } else if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallest_positive === undefined) {\n                smallest_positive = lst[i];\n            } else if (lst[i] < smallest_positive) {\n                smallest_positive = lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, 2, -3, 4, -5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, 4 ]\n[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 2 ]\n[ -1, 1 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334288
    },
    {
      "exit_code": 1,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let smallest: number | undefined = undefined;\n    let largest: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest === undefined || lst[i] > largest) {\n                largest = lst[i];\n            }\n        } else {\n            if (smallest === undefined || lst[i] < smallest) {\n                smallest = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5]));\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, 0]));\nconsole.log(largest_smallest_integers([]));\nconsole.log(largest_smallest_integers([0]));\nconsole.log(largest_smallest_integers([-1]));\nconsole.log(largest_smallest_integers([1]));\nconsole.log(largest_smallest_integers([-1, 0, 1]));\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, 0, -1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  undefined,\n  1\n]\n    at test (/tmp/tmpwy9n5z3v.js:38:12)\n    at Object.<anonymous> (/tmp/tmpwy9n5z3v.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined, 0 ],\n  expected: [ undefined, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 1 ]\n[ -1, 0 ]\n[ -1, 0 ]\n[ undefined, undefined ]\n[ undefined, 0 ]\n[ -1, undefined ]\n[ undefined, 1 ]\n[ -1, 0 ]\n[ -1, 0 ]\n",
      "timestamp": 1660334288
    },
    {
      "exit_code": 0,
      "program": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    let largestNegative: number | undefined = undefined;\n    let smallestPositive: number | undefined = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined) {\n                largestNegative = lst[i];\n            } else if (lst[i] > largestNegative) {\n                largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined) {\n                smallestPositive = lst[i];\n            } else if (lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n\nconsole.log(largest_smallest_integers([-1, -2, -3, 4, 5, 6])); // [-3, 4]\nconsole.log(largest_smallest_integers([-1, -2, -3, -4, -5, -6])); // [-6, undefined]\nconsole.log(largest_smallest_integers([1, 2, 3, 4, 5, 6])); // [undefined, 1]\nconsole.log(largest_smallest_integers([])); // [undefined, undefined]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ -1, 4 ]\n[ -1, undefined ]\n[ undefined, 1 ]\n[ undefined, undefined ]\n",
      "timestamp": 1660334286
    }
  ]
}