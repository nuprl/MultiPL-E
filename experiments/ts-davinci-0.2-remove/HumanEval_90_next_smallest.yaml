name: HumanEval_90_next_smallest
language: ts
prompt: "//You are given a list of integers.\n// Write a function next_smallest()\
  \ that returns the 2nd smallest element of the list.\n// Return None if there is\
  \ no such element.\nfunction next_smallest(lst: number[]): number | undefined {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = next_smallest;\n  assert.deepEqual(candidate([1, 2,\
  \ 3, 4, 5]),2);\n  assert.deepEqual(candidate([5, 1, 4, 3, 2]),2);\n  assert.deepEqual(candidate([]),undefined);\n\
  \  assert.deepEqual(candidate([1, 1]),undefined);\n  assert.deepEqual(candidate([1,\
  \ 1, 1, 1, 0]),1);\n  assert.deepEqual(candidate([1, 1]),undefined);\n  assert.deepEqual(candidate([-35,\
  \ 34, 12, -45]),-35);\n}\n\ntest();"
completions: ["    if (lst.length < 2) {\n        return undefined;\n    }\n    let\
    \ smallest = lst[0];\n    let secondSmallest = lst[1];\n    for (let i = 1; i\
    \ < lst.length; i++) {\n        if (lst[i] < smallest) {\n            secondSmallest\
    \ = smallest;\n            smallest = lst[i];\n        } else if (lst[i] < secondSmallest)\
    \ {\n            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n\
    }\n", "    let min = lst[0];\n    let min2 = lst[0];\n    for (let i = 0; i <\
    \ lst.length; i++) {\n        if (lst[i] < min) {\n            min2 = min;\n \
    \           min = lst[i];\n        } else if (lst[i] < min2) {\n            min2\
    \ = lst[i];\n        }\n    }\n    return min2;\n}\n", "    if (lst.length < 2)\
    \ {\n        return undefined;\n    }\n    let smallest = lst[0];\n    let secondSmallest\
    \ = lst[1];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] <\
    \ smallest) {\n            secondSmallest = smallest;\n            smallest =\
    \ lst[i];\n        } else if (lst[i] < secondSmallest) {\n            secondSmallest\
    \ = lst[i];\n        }\n    }\n    return secondSmallest;\n}\n", "    let min\
    \ = lst[0];\n    let secondMin = lst[1];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < min) {\n            secondMin = min;\n        \
    \    min = lst[i];\n        } else if (lst[i] < secondMin) {\n            secondMin\
    \ = lst[i];\n        }\n    }\n    return secondMin;\n}\n\nconsole.log(next_smallest([1,\
    \ 2, 3, 4, 5]));\nconsole.log(next_smallest([5, 4, 3, 2, 1]));\nconsole.log(next_smallest([1,\
    \ 1, 1, 1, 1]));\nconsole.log(next_smallest([1, 2, 3, 4, 3]));\nconsole.log(next_smallest([1,\
    \ 2, 3, 4, 1]));\nconsole.log(next_smallest([1, 2, 3, 4, 2]));\nconsole.log(next_smallest([1,\
    \ 2, 3, 4, 4]));\nconsole.log(next_smallest([1, 2, 3, 4, 3]));\nconsole.log(next_smallest([1,\
    \ 2, 3, 4, 2]));\nconsole.log(next_smallest([1, 2, 3, 4, 1]));\nconsole.log(next_smallest([1,\
    \ 2, 3, 4, 0]));\nconsole.log(next_smallest([1, 2, 3, 4, -1]));\nconsole.log(next_smallest([1,\
    \ 2, 3, 4, -2]));\nconsole.log(next_smallest([1, 2, 3, 4, -3]));\nconsole.log(next_smallest([1,\
    \ 2, 3, 4, -4]));\nconsole.log(next_smallest([1, 2, 3, 4, -5]));\nconsole.log(next_smallest([1,\
    \ 2, 3, 4, -6]));\nconsole.log(next_smallest([1, 2, 3, 4, -7]));\nconsole.log(next_smallest([1,\
    \ 2, 3, 4", "    let smallest: number = lst[0];\n    let secondSmallest: number\
    \ = lst[0];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] <\
    \ smallest) {\n            secondSmallest = smallest;\n            smallest =\
    \ lst[i];\n        } else if (lst[i] < secondSmallest) {\n            secondSmallest\
    \ = lst[i];\n        }\n    }\n    return secondSmallest;\n}\n", "    let min\
    \ = Math.min(...lst);\n    let minIndex = lst.indexOf(min);\n    lst.splice(minIndex,\
    \ 1);\n    return Math.min(...lst);\n}\n\nconsole.log(next_smallest([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(next_smallest([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\nconsole.log(next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12]));\nconsole.log(next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\n\
    console.log(next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\n\
    console.log(next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\n\
    console.log(next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16]));\nconsole.log(next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16, 17]));\nconsole.log(next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(next_smallest([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\nconsole.log(next_smallest([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(next_",
  "    if (lst.length < 2) {\n        return undefined;\n    }\n    let smallest =\
    \ lst[0];\n    let secondSmallest = lst[1];\n    for (let i = 1; i < lst.length;\
    \ i++) {\n        if (lst[i] < smallest) {\n            secondSmallest = smallest;\n\
    \            smallest = lst[i];\n        } else if (lst[i] < secondSmallest) {\n\
    \            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n\
    }\n", "    let smallest = lst[0];\n    let secondSmallest = lst[1];\n    for (let\
    \ i = 1; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n          \
    \  secondSmallest = smallest;\n            smallest = lst[i];\n        } else\
    \ if (lst[i] < secondSmallest) {\n            secondSmallest = lst[i];\n     \
    \   }\n    }\n    return secondSmallest;\n}\n", "    let min = lst[0];\n    let\
    \ secondMin = lst[1];\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (lst[i] < min) {\n            secondMin = min;\n            min = lst[i];\n\
    \        } else if (lst[i] < secondMin) {\n            secondMin = lst[i];\n \
    \       }\n    }\n    return secondMin;\n}\n", "    let min = lst[0];\n    let\
    \ secondMin = lst[1];\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (lst[i] < min) {\n            secondMin = min;\n            min = lst[i];\n\
    \        } else if (lst[i] < secondMin) {\n            secondMin = lst[i];\n \
    \       }\n    }\n    return secondMin;\n}\n", "    if (lst.length < 2) {\n  \
    \      return undefined;\n    }\n    let min = lst[0];\n    let secondMin = lst[1];\n\
    \    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < min) {\n   \
    \         secondMin = min;\n            min = lst[i];\n        } else if (lst[i]\
    \ < secondMin) {\n            secondMin = lst[i];\n        }\n    }\n    return\
    \ secondMin;\n}\n", "    let min = lst[0];\n    let min2 = lst[0];\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (lst[i] < min) {\n            min2\
    \ = min;\n            min = lst[i];\n        } else if (lst[i] < min2) {\n   \
    \         min2 = lst[i];\n        }\n    }\n    return min2;\n}\n", "    if (lst.length\
    \ < 2) {\n        return undefined;\n    }\n    let smallest = lst[0];\n    let\
    \ nextSmallest = lst[1];\n    for (let i = 1; i < lst.length; i++) {\n       \
    \ if (lst[i] < smallest) {\n            nextSmallest = smallest;\n           \
    \ smallest = lst[i];\n        } else if (lst[i] < nextSmallest) {\n          \
    \  nextSmallest = lst[i];\n        }\n    }\n    return nextSmallest;\n}\n", " \
    \   if (lst.length < 2) {\n        return undefined;\n    }\n    let min = lst[0];\n\
    \    let min2 = lst[1];\n    for (let i = 1; i < lst.length; i++) {\n        if\
    \ (lst[i] < min) {\n            min2 = min;\n            min = lst[i];\n     \
    \   } else if (lst[i] < min2) {\n            min2 = lst[i];\n        }\n    }\n\
    \    return min2;\n}\n", "    let smallest: number = lst[0];\n    let secondSmallest:\
    \ number | undefined;\n    for (let i = 1; i < lst.length; i++) {\n        if\
    \ (lst[i] < smallest) {\n            secondSmallest = smallest;\n            smallest\
    \ = lst[i];\n        } else if (secondSmallest === undefined || lst[i] < secondSmallest)\
    \ {\n            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n\
    }\n", "    let smallest = lst[0];\n    let secondSmallest = lst[1];\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n          \
    \  secondSmallest = smallest;\n            smallest = lst[i];\n        } else\
    \ if (lst[i] < secondSmallest) {\n            secondSmallest = lst[i];\n     \
    \   }\n    }\n    return secondSmallest;\n}\n", "    let min = lst[0];\n    let\
    \ secondMin = lst[1];\n    for (let i = 1; i < lst.length; i++) {\n        if\
    \ (lst[i] < min) {\n            secondMin = min;\n            min = lst[i];\n\
    \        } else if (lst[i] < secondMin) {\n            secondMin = lst[i];\n \
    \       }\n    }\n    return secondMin;\n}\n", "    let smallest = lst[0];\n \
    \   let secondSmallest = lst[1];\n    for (let i = 1; i < lst.length; i++) {\n\
    \        if (lst[i] < smallest) {\n            secondSmallest = smallest;\n  \
    \          smallest = lst[i];\n        } else if (lst[i] < secondSmallest) {\n\
    \            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n\
    }\n\nconsole.log(next_smallest([1, 2, 3, 4, 5]));\nconsole.log(next_smallest([5,\
    \ 4, 3, 2, 1]));\nconsole.log(next_smallest([1, 1, 1, 1, 1]));\nconsole.log(next_smallest([1,\
    \ 2, 3, 4, 1]));\nconsole.log(next_smallest([1, 1, 3, 4, 1]));\nconsole.log(next_smallest([1,\
    \ 2, 3, 1, 1]));\nconsole.log(next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(next_smallest([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(next_smallest([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(next_smallest([11, 10, 9, 8,\
    \ 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(next_smallest([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12]));\nconsole.log(next_smallest([12, 11, 10, 9, 8, 7, 6, 5, 4,\
    \ 3, 2, 1]));\nconsole.log(next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13]));\nconsole.log(next_smallest([13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1])",
  "    let min = Math.min(...lst);\n    let minIndex = lst.indexOf(min);\n    lst.splice(minIndex,\
    \ 1);\n    let secondMin = Math.min(...lst);\n    return secondMin;\n}\n\nconsole.log(next_smallest([1,\
    \ 2, 3, 4, 5, 6, 7]));\nconsole.log(next_smallest([1, 2, 3, 4, 5, 6, 7, 8]));\n\
    console.log(next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(next_smallest([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(next_smallest([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]));\nconsole.log(next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12]));\nconsole.log(next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13]));\nconsole.log(next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14]));\nconsole.log(next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15]));\nconsole.log(next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16]));\nconsole.log(next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(next_smallest([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(next_smallest([1,\
    \ 2, 3, 4", "    let min = Math.min(...lst);\n    let minIndex = lst.indexOf(min);\n\
    \    lst.splice(minIndex, 1);\n    return Math.min(...lst);\n}\n", "    let smallest:\
    \ number | undefined = undefined;\n    let secondSmallest: number | undefined\
    \ = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (smallest\
    \ === undefined) {\n            smallest = lst[i];\n        } else if (lst[i]\
    \ < smallest) {\n            secondSmallest = smallest;\n            smallest\
    \ = lst[i];\n        } else if (secondSmallest === undefined) {\n            secondSmallest\
    \ = lst[i];\n        } else if (lst[i] < secondSmallest) {\n            secondSmallest\
    \ = lst[i];\n        }\n    }\n    return secondSmallest;\n}\n", "    let smallest\
    \ = lst[0];\n    let secondSmallest = lst[1];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < smallest) {\n            secondSmallest = smallest;\n\
    \            smallest = lst[i];\n        } else if (lst[i] < secondSmallest) {\n\
    \            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n\
    }\n", "    let min = Math.min(...lst);\n    let minIndex = lst.indexOf(min);\n\
    \    lst.splice(minIndex, 1);\n    return Math.min(...lst);\n}\n", "    let smallest\
    \ = lst[0];\n    let secondSmallest = lst[1];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < smallest) {\n            secondSmallest = smallest;\n\
    \            smallest = lst[i];\n        } else if (lst[i] < secondSmallest) {\n\
    \            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n\
    }\n", "    let min = lst[0];\n    let min2 = lst[0];\n    for (let i = 0; i <\
    \ lst.length; i++) {\n        if (lst[i] < min) {\n            min2 = min;\n \
    \           min = lst[i];\n        } else if (lst[i] < min2) {\n            min2\
    \ = lst[i];\n        }\n    }\n    return min2;\n}\n", "    let smallest = lst[0];\n\
    \    let secondSmallest = lst[1];\n    for (let i = 1; i < lst.length; i++) {\n\
    \        if (lst[i] < smallest) {\n            secondSmallest = smallest;\n  \
    \          smallest = lst[i];\n        } else if (lst[i] < secondSmallest) {\n\
    \            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n\
    }\n", "    let smallest = lst[0];\n    let secondSmallest = lst[1];\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n          \
    \  secondSmallest = smallest;\n            smallest = lst[i];\n        } else\
    \ if (lst[i] < secondSmallest) {\n            secondSmallest = lst[i];\n     \
    \   }\n    }\n    return secondSmallest;\n}\n", "    let min = lst[0];\n    let\
    \ min2 = lst[0];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ < min) {\n            min2 = min;\n            min = lst[i];\n        } else\
    \ if (lst[i] < min2) {\n            min2 = lst[i];\n        }\n    }\n    return\
    \ min2;\n}\n", "    if (lst.length < 2) {\n        return undefined;\n    }\n\
    \    let smallest = lst[0];\n    let secondSmallest = lst[1];\n    for (let i\
    \ = 1; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n            secondSmallest\
    \ = smallest;\n            smallest = lst[i];\n        } else if (lst[i] < secondSmallest)\
    \ {\n            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n\
    }\n", "    let min = lst[0];\n    let min2 = lst[0];\n    for (let i = 0; i <\
    \ lst.length; i++) {\n        if (lst[i] < min) {\n            min2 = min;\n \
    \           min = lst[i];\n        } else if (lst[i] < min2) {\n            min2\
    \ = lst[i];\n        }\n    }\n    return min2;\n}\n", "    let smallest = lst[0];\n\
    \    let secondSmallest = lst[1];\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (lst[i] < smallest) {\n            secondSmallest = smallest;\n  \
    \          smallest = lst[i];\n        } else if (lst[i] < secondSmallest) {\n\
    \            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n\
    }\n\nconsole.log(next_smallest([1, 2, 3, 4, 5]));\nconsole.log(next_smallest([5,\
    \ 4, 3, 2, 1]));\nconsole.log(next_smallest([1, 2, 3, 2, 1]));\nconsole.log(next_smallest([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(next_smallest([10, 9, 8, 7, 6, 5,\
    \ 4, 3, 2, 1]));\nconsole.log(next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\n\
    console.log(next_smallest([11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(next_smallest([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(next_smallest([12, 11, 10,\
    \ 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(next_smallest([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(next_smallest([13, 12, 11, 10, 9, 8,\
    \ 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(next_smallest([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14]));\nconsole.log(next_smallest([14, 13, 12, 11, 10, 9,\
    \ 8", "    let min = Math.min(...lst);\n    let minIndex = lst.indexOf(min);\n\
    \    lst.splice(minIndex, 1);\n    return Math.min(...lst);\n}\n", "    let min\
    \ = Math.min(...lst);\n    let minIndex = lst.indexOf(min);\n    lst.splice(minIndex,\
    \ 1);\n    return Math.min(...lst);\n}\n\nconsole.log(next_smallest([1, 2, 3,\
    \ 4, 5]));\nconsole.log(next_smallest([5, 4, 3, 2, 1]));\nconsole.log(next_smallest([4,\
    \ 3, 5, 1, 2]));\nconsole.log(next_smallest([1, 1, 1, 1, 1]));\nconsole.log(next_smallest([1]));\n\
    console.log(next_smallest([]));", "    if (lst.length < 2) {\n        return undefined;\n\
    \    }\n    let min = Math.min(...lst);\n    let minIndex = lst.indexOf(min);\n\
    \    lst.splice(minIndex, 1);\n    return Math.min(...lst);\n}\n", "    if (lst.length\
    \ < 2) {\n        return undefined;\n    }\n    let min = lst[0];\n    let secondMin\
    \ = lst[1];\n    if (min > secondMin) {\n        [min, secondMin] = [secondMin,\
    \ min];\n    }\n    for (let i = 2; i < lst.length; i++) {\n        if (lst[i]\
    \ < min) {\n            secondMin = min;\n            min = lst[i];\n        }\
    \ else if (lst[i] < secondMin) {\n            secondMin = lst[i];\n        }\n\
    \    }\n    return secondMin;\n}\n", "    let min = Math.min(...lst);\n    let\
    \ minIndex = lst.indexOf(min);\n    lst.splice(minIndex, 1);\n    let nextMin\
    \ = Math.min(...lst);\n    return nextMin;\n}\n", "    let smallest = lst[0];\n\
    \    let secondSmallest = lst[1];\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (lst[i] < smallest) {\n            secondSmallest = smallest;\n  \
    \          smallest = lst[i];\n        } else if (lst[i] < secondSmallest) {\n\
    \            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n\
    }\n", "    if (lst.length < 2) {\n        return undefined;\n    }\n    let smallest\
    \ = lst[0];\n    let secondSmallest = lst[1];\n    for (let i = 1; i < lst.length;\
    \ i++) {\n        if (lst[i] < smallest) {\n            secondSmallest = smallest;\n\
    \            smallest = lst[i];\n        } else if (lst[i] < secondSmallest) {\n\
    \            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n\
    }\n", "    let min = Math.min(...lst);\n    let minIndex = lst.indexOf(min);\n\
    \    lst.splice(minIndex, 1);\n    return Math.min(...lst);\n}\n", "    let min\
    \ = lst[0];\n    let min2 = lst[0];\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] < min) {\n            min2 = min;\n            min = lst[i];\n\
    \        } else if (lst[i] < min2) {\n            min2 = lst[i];\n        }\n\
    \    }\n    return min2;\n}\n", "    let smallest = lst[0];\n    let secondSmallest\
    \ = lst[1];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] <\
    \ smallest) {\n            secondSmallest = smallest;\n            smallest =\
    \ lst[i];\n        } else if (lst[i] < secondSmallest) {\n            secondSmallest\
    \ = lst[i];\n        }\n    }\n    return secondSmallest;\n}\n", "  if (lst.length\
    \ < 2) {\n    return undefined;\n  }\n  let min = Math.min(...lst);\n  let minIndex\
    \ = lst.indexOf(min);\n  lst.splice(minIndex, 1);\n  return Math.min(...lst);\n\
    }\n", "    let min = lst[0];\n    let min2 = lst[0];\n    for (let i = 0; i <\
    \ lst.length; i++) {\n        if (lst[i] < min) {\n            min2 = min;\n \
    \           min = lst[i];\n        } else if (lst[i] < min2) {\n            min2\
    \ = lst[i];\n        }\n    }\n    return min2;\n}\n", "    if (lst.length < 2)\
    \ {\n        return undefined;\n    }\n    let smallest = lst[0];\n    let secondSmallest\
    \ = lst[1];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] <\
    \ smallest) {\n            secondSmallest = smallest;\n            smallest =\
    \ lst[i];\n        } else if (lst[i] < secondSmallest) {\n            secondSmallest\
    \ = lst[i];\n        }\n    }\n    return secondSmallest;\n}\n", "    if (lst.length\
    \ < 2) {\n        return undefined;\n    }\n    let smallest = lst[0];\n    let\
    \ secondSmallest = lst[1];\n    for (let i = 1; i < lst.length; i++) {\n     \
    \   if (lst[i] < smallest) {\n            secondSmallest = smallest;\n       \
    \     smallest = lst[i];\n        } else if (lst[i] < secondSmallest) {\n    \
    \        secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n\
    }\n", "    let min: number = lst[0];\n    let min2: number = lst[0];\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        if (lst[i] < min) {\n          \
    \  min2 = min;\n            min = lst[i];\n        } else if (lst[i] < min2) {\n\
    \            min2 = lst[i];\n        }\n    }\n    return min2;\n}\n", "    let\
    \ min = lst[0];\n    let min2 = lst[0];\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] < min) {\n            min2 = min;\n            min = lst[i];\n\
    \        } else if (lst[i] < min2) {\n            min2 = lst[i];\n        }\n\
    \    }\n    return min2;\n}\n", "    let min = lst[0];\n    let min2 = lst[0];\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < min) {\n   \
    \         min2 = min;\n            min = lst[i];\n        } else if (lst[i] <\
    \ min2) {\n            min2 = lst[i];\n        }\n    }\n    return min2;\n}\n",
  "    if (lst.length < 2) {\n        return undefined;\n    }\n    let smallest =\
    \ lst[0];\n    let secondSmallest = lst[1];\n    for (let i = 1; i < lst.length;\
    \ i++) {\n        if (lst[i] < smallest) {\n            secondSmallest = smallest;\n\
    \            smallest = lst[i];\n        } else if (lst[i] < secondSmallest) {\n\
    \            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n\
    }\n", "    let smallest = lst[0];\n    let secondSmallest = lst[1];\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n          \
    \  secondSmallest = smallest;\n            smallest = lst[i];\n        } else\
    \ if (lst[i] < secondSmallest) {\n            secondSmallest = lst[i];\n     \
    \   }\n    }\n    return secondSmallest;\n}\n", "    let smallest = lst[0];\n\
    \    let secondSmallest = Number.MAX_VALUE;\n    for (let i = 1; i < lst.length;\
    \ i++) {\n        if (lst[i] < smallest) {\n            secondSmallest = smallest;\n\
    \            smallest = lst[i];\n        } else if (lst[i] < secondSmallest) {\n\
    \            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest\
    \ === Number.MAX_VALUE ? undefined : secondSmallest;\n}\n", "    let min = Math.min(...lst);\n\
    \    let minIndex = lst.indexOf(min);\n    lst.splice(minIndex, 1);\n    let min2\
    \ = Math.min(...lst);\n    return min2;\n}\n", "    let min = lst[0];\n    let\
    \ min2 = lst[0];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ < min) {\n            min2 = min;\n            min = lst[i];\n        } else\
    \ if (lst[i] < min2) {\n            min2 = lst[i];\n        }\n    }\n    return\
    \ min2;\n}\n", "    let smallest = lst[0];\n    let secondSmallest = lst[1];\n\
    \    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n\
    \            secondSmallest = smallest;\n            smallest = lst[i];\n    \
    \    } else if (lst[i] < secondSmallest) {\n            secondSmallest = lst[i];\n\
    \        }\n    }\n    return secondSmallest;\n}\n", "    let smallest = lst[0];\n\
    \    let secondSmallest = lst[1];\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (lst[i] < smallest) {\n            secondSmallest = smallest;\n  \
    \          smallest = lst[i];\n        } else if (lst[i] < secondSmallest) {\n\
    \            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n\
    }\n", "    let min = lst[0];\n    let min2 = lst[0];\n    for (let i = 0; i <\
    \ lst.length; i++) {\n        if (lst[i] < min) {\n            min2 = min;\n \
    \           min = lst[i];\n        } else if (lst[i] < min2) {\n            min2\
    \ = lst[i];\n        }\n    }\n    return min2;\n}\n", "    let smallest = lst[0];\n\
    \    let secondSmallest = undefined;\n    for (let i = 1; i < lst.length; i++)\
    \ {\n        if (lst[i] < smallest) {\n            secondSmallest = smallest;\n\
    \            smallest = lst[i];\n        } else if (lst[i] < secondSmallest ||\
    \ secondSmallest === undefined) {\n            secondSmallest = lst[i];\n    \
    \    }\n    }\n    return secondSmallest;\n}\n", "    let smallest = lst[0];\n\
    \    let secondSmallest = lst[1];\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (lst[i] < smallest) {\n            secondSmallest = smallest;\n  \
    \          smallest = lst[i];\n        } else if (lst[i] < secondSmallest) {\n\
    \            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n\
    }\n", "    let min: number = lst[0];\n    let secondMin: number = lst[0];\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < min) {\n     \
    \       secondMin = min;\n            min = lst[i];\n        } else if (lst[i]\
    \ < secondMin) {\n            secondMin = lst[i];\n        }\n    }\n    return\
    \ secondMin;\n}\n", "    let min = Math.min(...lst);\n    let minIndex = lst.indexOf(min);\n\
    \    lst.splice(minIndex, 1);\n    return Math.min(...lst);\n}\n", "    let min\
    \ = Math.min(...lst);\n    let minIndex = lst.indexOf(min);\n    lst.splice(minIndex,\
    \ 1);\n    return Math.min(...lst);\n}\n", "    if (lst.length < 2) {\n      \
    \  return undefined;\n    }\n    let min = lst[0];\n    let secondMin = lst[1];\n\
    \    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < min) {\n   \
    \         secondMin = min;\n            min = lst[i];\n        } else if (lst[i]\
    \ < secondMin) {\n            secondMin = lst[i];\n        }\n    }\n    return\
    \ secondMin;\n}\n", "    let smallest = lst[0];\n    let secondSmallest = lst[1];\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n\
    \            secondSmallest = smallest;\n            smallest = lst[i];\n    \
    \    } else if (lst[i] < secondSmallest) {\n            secondSmallest = lst[i];\n\
    \        }\n    }\n    return secondSmallest;\n}\n", "    let min = lst[0];\n\
    \    let secondMin = lst[1];\n    for (let i = 0; i < lst.length; i++) {\n   \
    \     if (lst[i] < min) {\n            secondMin = min;\n            min = lst[i];\n\
    \        } else if (lst[i] < secondMin) {\n            secondMin = lst[i];\n \
    \       }\n    }\n    return secondMin;\n}\n", "    let min = Math.min(...lst);\n\
    \    let minIndex = lst.indexOf(min);\n    lst.splice(minIndex, 1);\n    return\
    \ Math.min(...lst);\n}\n", "    let min = Math.min(...lst);\n    let minIndex\
    \ = lst.indexOf(min);\n    lst.splice(minIndex, 1);\n    return Math.min(...lst);\n\
    }\n\nconsole.log(next_smallest([1, 2, 3, 4, 5])); // 2\nconsole.log(next_smallest([5,\
    \ 4, 3, 2, 1])); // 4\nconsole.log(next_smallest([2, 2, 1])); // 1\nconsole.log(next_smallest([2,\
    \ 2])); // undefined\nconsole.log(next_smallest([42])); // undefined\n", "   \
    \ let smallest = lst[0];\n    let secondSmallest = lst[1];\n    for (let i = 0;\
    \ i < lst.length; i++) {\n        if (lst[i] < smallest) {\n            secondSmallest\
    \ = smallest;\n            smallest = lst[i];\n        } else if (lst[i] < secondSmallest)\
    \ {\n            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n\
    }\n", "    if (lst.length < 2) {\n        return undefined;\n    }\n    let smallest\
    \ = lst[0];\n    let secondSmallest = lst[1];\n    for (let i = 1; i < lst.length;\
    \ i++) {\n        if (lst[i] < smallest) {\n            secondSmallest = smallest;\n\
    \            smallest = lst[i];\n        } else if (lst[i] < secondSmallest) {\n\
    \            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n\
    }\n", "    if (lst.length < 2) {\n        return undefined;\n    }\n    let min\
    \ = lst[0];\n    let min2 = lst[1];\n    for (let i = 1; i < lst.length; i++)\
    \ {\n        if (lst[i] < min) {\n            min2 = min;\n            min = lst[i];\n\
    \        } else if (lst[i] < min2) {\n            min2 = lst[i];\n        }\n\
    \    }\n    return min2;\n}\n", "    if (lst.length < 2) {\n        return undefined;\n\
    \    }\n    let min = Math.min(...lst);\n    let minIndex = lst.indexOf(min);\n\
    \    lst.splice(minIndex, 1);\n    return Math.min(...lst);\n}\n", "    let min\
    \ = lst[0];\n    let min2 = lst[0];\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] < min) {\n            min2 = min;\n            min = lst[i];\n\
    \        } else if (lst[i] < min2) {\n            min2 = lst[i];\n        }\n\
    \    }\n    return min2;\n}\n", "    let min = lst[0];\n    let min2 = lst[0];\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < min) {\n   \
    \         min2 = min;\n            min = lst[i];\n        } else if (lst[i] <\
    \ min2) {\n            min2 = lst[i];\n        }\n    }\n    return min2;\n}\n",
  "    let min = Math.min(...lst);\n    let minIndex = lst.indexOf(min);\n    lst.splice(minIndex,\
    \ 1);\n    return Math.min(...lst);\n}\n", "    let min = Math.min(...lst);\n\
    \    let minIndex = lst.indexOf(min);\n    lst.splice(minIndex, 1);\n    return\
    \ Math.min(...lst);\n}\n", "    let min = lst[0];\n    let min2 = lst[0];\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < min) {\n     \
    \       min2 = min;\n            min = lst[i];\n        } else if (lst[i] < min2)\
    \ {\n            min2 = lst[i];\n        }\n    }\n    return min2;\n}\n", " \
    \   let min = lst[0];\n    let secondMin = lst[1];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < min) {\n            secondMin = min;\n        \
    \    min = lst[i];\n        } else if (lst[i] < secondMin) {\n            secondMin\
    \ = lst[i];\n        }\n    }\n    return secondMin;\n}\n", "    let smallest\
    \ = lst[0];\n    let secondSmallest = lst[1];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < smallest) {\n            secondSmallest = smallest;\n\
    \            smallest = lst[i];\n        } else if (lst[i] < secondSmallest) {\n\
    \            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n\
    }\n", "    let smallest = lst[0];\n    let secondSmallest = lst[1];\n    for (let\
    \ i = 1; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n          \
    \  secondSmallest = smallest;\n            smallest = lst[i];\n        } else\
    \ if (lst[i] < secondSmallest) {\n            secondSmallest = lst[i];\n     \
    \   }\n    }\n    return secondSmallest;\n}\n\nconsole.log(next_smallest([1, 2,\
    \ 3, 4, 5]));\nconsole.log(next_smallest([1, 2, 3, 4, 5, 6]));\nconsole.log(next_smallest([1,\
    \ 2, 3, 4, 5, 6, 7]));\nconsole.log(next_smallest([1, 2, 3, 4, 5, 6, 7, 8]));\n\
    console.log(next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(next_smallest([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(next_smallest([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]));\nconsole.log(next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12]));\nconsole.log(next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13]));\nconsole.log(next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14]));\nconsole.log(next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15]));\nconsole.log(next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16]));\nconsole.log(next_smallest([1, 2", "    let smallest = Number.MAX_VALUE;\n\
    \    let secondSmallest = Number.MAX_VALUE;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < smallest) {\n            secondSmallest = smallest;\n\
    \            smallest = lst[i];\n        } else if (lst[i] < secondSmallest) {\n\
    \            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest\
    \ === Number.MAX_VALUE ? undefined : secondSmallest;\n}\n", "    let smallest\
    \ = lst[0];\n    let secondSmallest = undefined;\n    for (let i = 1; i < lst.length;\
    \ i++) {\n        if (lst[i] < smallest) {\n            secondSmallest = smallest;\n\
    \            smallest = lst[i];\n        } else if (lst[i] < secondSmallest ||\
    \ secondSmallest === undefined) {\n            secondSmallest = lst[i];\n    \
    \    }\n    }\n    return secondSmallest;\n}\n", "    let min = lst[0];\n    let\
    \ min2 = lst[0];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ < min) {\n            min2 = min;\n            min = lst[i];\n        } else\
    \ if (lst[i] < min2) {\n            min2 = lst[i];\n        }\n    }\n    return\
    \ min2;\n}\n\nconsole.log(next_smallest([1, 2, 3, 4, 5]));\nconsole.log(next_smallest([5,\
    \ 4, 3, 2, 1]));\nconsole.log(next_smallest([1, 2, 3, 1, 5]));\nconsole.log(next_smallest([1,\
    \ 2, 3, 4, 1]));\nconsole.log(next_smallest([1, 1, 1, 1, 1]));\nconsole.log(next_smallest([1,\
    \ 1, 3, 1, 1]));\nconsole.log(next_smallest([1, 1, 3, 4, 1]));\nconsole.log(next_smallest([1]));\n\
    console.log(next_smallest([]));", "    if (lst.length < 2) {\n        return undefined;\n\
    \    }\n    let min = lst[0];\n    let secondMin = lst[1];\n    for (let i = 1;\
    \ i < lst.length; i++) {\n        if (lst[i] < min) {\n            secondMin =\
    \ min;\n            min = lst[i];\n        } else if (lst[i] < secondMin) {\n\
    \            secondMin = lst[i];\n        }\n    }\n    return secondMin;\n}\n",
  "    if (lst.length < 2) {\n        return undefined;\n    }\n    let min = lst[0];\n\
    \    let secondMin = lst[1];\n    for (let i = 1; i < lst.length; i++) {\n   \
    \     if (lst[i] < min) {\n            secondMin = min;\n            min = lst[i];\n\
    \        } else if (lst[i] < secondMin) {\n            secondMin = lst[i];\n \
    \       }\n    }\n    return secondMin;\n}\n", "    let smallest: number = lst[0];\n\
    \    let secondSmallest: number = lst[0];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < smallest) {\n            secondSmallest = smallest;\n\
    \            smallest = lst[i];\n        } else if (lst[i] < secondSmallest) {\n\
    \            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n\
    }\n\nconsole.log(next_smallest([1, 2, 3, 4, 5]));\nconsole.log(next_smallest([5,\
    \ 4, 3, 2, 1]));\nconsole.log(next_smallest([1, 1, 1, 1, 1]));\nconsole.log(next_smallest([1,\
    \ 2, 3, 4, 0]));\nconsole.log(next_smallest([7, 7, 7]));", "    if (lst.length\
    \ < 2) {\n        return undefined;\n    }\n    let smallest = lst[0];\n    let\
    \ secondSmallest = lst[1];\n    for (let i = 1; i < lst.length; i++) {\n     \
    \   if (lst[i] < smallest) {\n            secondSmallest = smallest;\n       \
    \     smallest = lst[i];\n        } else if (lst[i] < secondSmallest) {\n    \
    \        secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n\
    }\n", "    if (lst.length < 2) {\n        return undefined;\n    }\n    let min\
    \ = lst[0];\n    let min2 = lst[1];\n    for (let i = 1; i < lst.length; i++)\
    \ {\n        if (lst[i] < min) {\n            min2 = min;\n            min = lst[i];\n\
    \        } else if (lst[i] < min2) {\n            min2 = lst[i];\n        }\n\
    \    }\n    return min2;\n}\n", "    let smallest = lst[0];\n    let secondSmallest\
    \ = lst[1];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] <\
    \ smallest) {\n            secondSmallest = smallest;\n            smallest =\
    \ lst[i];\n        } else if (lst[i] < secondSmallest) {\n            secondSmallest\
    \ = lst[i];\n        }\n    }\n    return secondSmallest;\n}\n", "    if (lst.length\
    \ < 2) {\n        return undefined;\n    }\n    let min = lst[0];\n    let secondMin\
    \ = lst[1];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] <\
    \ min) {\n            secondMin = min;\n            min = lst[i];\n        } else\
    \ if (lst[i] < secondMin) {\n            secondMin = lst[i];\n        }\n    }\n\
    \    return secondMin;\n}\n", "    if (lst.length < 2) {\n        return undefined;\n\
    \    }\n    let smallest = lst[0];\n    let secondSmallest = lst[1];\n    for\
    \ (let i = 1; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n     \
    \       secondSmallest = smallest;\n            smallest = lst[i];\n        }\
    \ else if (lst[i] < secondSmallest) {\n            secondSmallest = lst[i];\n\
    \        }\n    }\n    return secondSmallest;\n}\n", "    let smallest = lst[0];\n\
    \    let secondSmallest = lst[1];\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (lst[i] < smallest) {\n            secondSmallest = smallest;\n  \
    \          smallest = lst[i];\n        } else if (lst[i] < secondSmallest) {\n\
    \            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n\
    }\n", "    let smallest = lst[0];\n    let secondSmallest = lst[1];\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n          \
    \  secondSmallest = smallest;\n            smallest = lst[i];\n        } else\
    \ if (lst[i] < secondSmallest) {\n            secondSmallest = lst[i];\n     \
    \   }\n    }\n    return secondSmallest;\n}\n", "    let min = Math.min(...lst);\n\
    \    let minIndex = lst.indexOf(min);\n    lst.splice(minIndex, 1);\n    return\
    \ Math.min(...lst);\n}\n\nconsole.log(next_smallest([1, 2, -8, -2, 0]));\nconsole.log(next_smallest([1,\
    \ 2, -8, -2]));\nconsole.log(next_smallest([1, 2, -8, -2, 0, -1]));", "    let\
    \ min = Math.min(...lst);\n    let minIndex = lst.indexOf(min);\n    lst.splice(minIndex,\
    \ 1);\n    return Math.min(...lst);\n}\n", "    let smallest = lst[0];\n    let\
    \ secondSmallest = lst[1];\n    for (let i = 0; i < lst.length; i++) {\n     \
    \   if (lst[i] < smallest) {\n            secondSmallest = smallest;\n       \
    \     smallest = lst[i];\n        } else if (lst[i] < secondSmallest) {\n    \
    \        secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n\
    }\n", "    let smallest = lst[0];\n    let secondSmallest = lst[1];\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n          \
    \  secondSmallest = smallest;\n            smallest = lst[i];\n        } else\
    \ if (lst[i] < secondSmallest) {\n            secondSmallest = lst[i];\n     \
    \   }\n    }\n    return secondSmallest;\n}\n\nconsole.log(next_smallest([1, 2,\
    \ -8, -2]));\nconsole.log(next_smallest([1, 1, 0, -1, -2]));\nconsole.log(next_smallest([1,\
    \ 1, 1, 0, -1, -2]));\nconsole.log(next_smallest([2, 2, 2]));\nconsole.log(next_smallest([2]));\n\
    console.log(next_smallest([]));", "    let min = Math.min(...lst);\n    let minIndex\
    \ = lst.indexOf(min);\n    lst.splice(minIndex, 1);\n    let nextMin = Math.min(...lst);\n\
    \    return nextMin;\n}\n\nconsole.log(next_smallest([1, 2, -8, -2, 0]));\nconsole.log(next_smallest([1,\
    \ 1, 0, -1, -2]));\nconsole.log(next_smallest([1, 1, 1, 0, -1, -2]));\nconsole.log(next_smallest([2,\
    \ 2, 2]));\nconsole.log(next_smallest([]));", "    let min = lst[0];\n    let\
    \ min2 = lst[0];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ < min) {\n            min2 = min;\n            min = lst[i];\n        } else\
    \ if (lst[i] < min2) {\n            min2 = lst[i];\n        }\n    }\n    return\
    \ min2;\n}\n\nconsole.log(next_smallest([1, 2, -8, -2, 0]));\nconsole.log(next_smallest([1,\
    \ 1, 0, 0, -2, -2]));\nconsole.log(next_smallest([1, 1, 1, 0, 0, 0, -2, -2, -2]));\n\
    console.log(next_smallest([2, 2]));\nconsole.log(next_smallest([2]));\nconsole.log(next_smallest([]));",
  "    let min = lst[0];\n    let min2 = lst[0];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < min) {\n            min2 = min;\n            min\
    \ = lst[i];\n        } else if (lst[i] < min2) {\n            min2 = lst[i];\n\
    \        }\n    }\n    return min2;\n}\n", "    let min = Math.min(...lst);\n\
    \    let minIndex = lst.indexOf(min);\n    lst.splice(minIndex, 1);\n    let nextMin\
    \ = Math.min(...lst);\n    return nextMin;\n}\n", "    let min: number = Math.min(...lst);\n\
    \    let min2: number = Math.max(...lst);\n    for (let i: number = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > min && lst[i] < min2) {\n            min2 = lst[i];\n\
    \        }\n    }\n    if (min2 === Math.max(...lst)) {\n        return undefined;\n\
    \    }\n    return min2;\n}\n", "    let min = Math.min(...lst);\n    let min2\
    \ = Math.max(...lst);\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (lst[i] > min && lst[i] < min2) {\n            min2 = lst[i];\n        }\n \
    \   }\n    return min2 === Math.max(...lst) ? undefined : min2;\n}\n", "    if\
    \ (lst.length < 2) {\n        return undefined;\n    }\n    let smallest = lst[0];\n\
    \    let secondSmallest = lst[1];\n    for (let i = 1; i < lst.length; i++) {\n\
    \        if (lst[i] < smallest) {\n            secondSmallest = smallest;\n  \
    \          smallest = lst[i];\n        } else if (lst[i] < secondSmallest) {\n\
    \            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n\
    }\n", "    let smallest = lst[0];\n    let secondSmallest = lst[1];\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n          \
    \  secondSmallest = smallest;\n            smallest = lst[i];\n        } else\
    \ if (lst[i] < secondSmallest) {\n            secondSmallest = lst[i];\n     \
    \   }\n    }\n    return secondSmallest;\n}\n", "    let smallest = lst[0];\n\
    \    let secondSmallest = lst[1];\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (lst[i] < smallest) {\n            secondSmallest = smallest;\n  \
    \          smallest = lst[i];\n        } else if (lst[i] < secondSmallest) {\n\
    \            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n\
    }\n", "    let min = Math.min(...lst);\n    let minIndex = lst.indexOf(min);\n\
    \    lst.splice(minIndex, 1);\n    return Math.min(...lst);\n}\n", "    if (lst.length\
    \ < 2) {\n        return undefined;\n    }\n    let min = lst[0];\n    let secondMin\
    \ = lst[1];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] <\
    \ min) {\n            secondMin = min;\n            min = lst[i];\n        } else\
    \ if (lst[i] < secondMin) {\n            secondMin = lst[i];\n        }\n    }\n\
    \    return secondMin;\n}\n", "    let smallest = lst[0];\n    let secondSmallest\
    \ = lst[1];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] <\
    \ smallest) {\n            secondSmallest = smallest;\n            smallest =\
    \ lst[i];\n        } else if (lst[i] < secondSmallest) {\n            secondSmallest\
    \ = lst[i];\n        }\n    }\n    return secondSmallest;\n}\n", "    let smallest\
    \ = lst[0];\n    let secondSmallest = lst[1];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < smallest) {\n            secondSmallest = smallest;\n\
    \            smallest = lst[i];\n        } else if (lst[i] < secondSmallest) {\n\
    \            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n\
    }\n", "    let min = lst[0];\n    let min2 = lst[0];\n    for (let i = 0; i <\
    \ lst.length; i++) {\n        if (lst[i] < min) {\n            min2 = min;\n \
    \           min = lst[i];\n        } else if (lst[i] < min2) {\n            min2\
    \ = lst[i];\n        }\n    }\n    return min2;\n}\n", "    let smallest = lst[0];\n\
    \    let secondSmallest = lst[1];\n    for (let i = 1; i < lst.length; i++) {\n\
    \        if (lst[i] < smallest) {\n            secondSmallest = smallest;\n  \
    \          smallest = lst[i];\n        } else if (lst[i] < secondSmallest) {\n\
    \            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n\
    }\n", "    let min = Math.min(...lst);\n    let min2 = Math.max(...lst);\n   \
    \ for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < min2 && lst[i]\
    \ > min) {\n            min2 = lst[i];\n        }\n    }\n    return min2 ===\
    \ Math.max(...lst) ? undefined : min2;\n}\n\nconsole.log(next_smallest([1, 2,\
    \ -8, -2, 0]));\nconsole.log(next_smallest([1, 1, 0, -1, -2]));\n", "    let min\
    \ = lst[0];\n    let secondMin = lst[1];\n    for (let i = 1; i < lst.length;\
    \ i++) {\n        if (lst[i] < min) {\n            secondMin = min;\n        \
    \    min = lst[i];\n        } else if (lst[i] < secondMin) {\n            secondMin\
    \ = lst[i];\n        }\n    }\n    return secondMin;\n}\n", "    let smallest\
    \ = lst[0];\n    let secondSmallest = lst[1];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < smallest) {\n            secondSmallest = smallest;\n\
    \            smallest = lst[i];\n        } else if (lst[i] < secondSmallest) {\n\
    \            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n\
    }\n", "    let min: number = lst[0];\n    let min2: number = lst[0];\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        if (lst[i] < min) {\n          \
    \  min2 = min;\n            min = lst[i];\n        } else if (lst[i] < min2) {\n\
    \            min2 = lst[i];\n        }\n    }\n    return min2;\n}\n", "  let\
    \ min = lst[0];\n  let min2 = lst[0];\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (lst[i] < min) {\n      min2 = min;\n      min = lst[i];\n    } else\
    \ if (lst[i] < min2) {\n      min2 = lst[i];\n    }\n  }\n  return min2;\n}\n",
  "    let min = Math.min(...lst);\n    let minIndex = lst.indexOf(min);\n    lst.splice(minIndex,\
    \ 1);\n    return Math.min(...lst);\n}\n", "    if (lst.length < 2) {\n      \
    \  return undefined;\n    }\n    let min = lst[0];\n    let min2 = lst[1];\n \
    \   for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < min) {\n    \
    \        min2 = min;\n            min = lst[i];\n        } else if (lst[i] < min2)\
    \ {\n            min2 = lst[i];\n        }\n    }\n    return min2;\n}\n", " \
    \   let smallest = lst[0];\n    let secondSmallest = lst[1];\n    for (let i =\
    \ 1; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n            secondSmallest\
    \ = smallest;\n            smallest = lst[i];\n        } else if (lst[i] < secondSmallest)\
    \ {\n            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n\
    }\n", "    let smallest = lst[0];\n    let secondSmallest = lst[1];\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n          \
    \  secondSmallest = smallest;\n            smallest = lst[i];\n        } else\
    \ if (lst[i] < secondSmallest) {\n            secondSmallest = lst[i];\n     \
    \   }\n    }\n    return secondSmallest;\n}\n", "    let smallest = lst[0];\n\
    \    let secondSmallest = lst[1];\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (lst[i] < smallest) {\n            secondSmallest = smallest;\n  \
    \          smallest = lst[i];\n        } else if (lst[i] < secondSmallest) {\n\
    \            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n\
    }\n", "    let min = lst[0];\n    let min2 = lst[0];\n    for (let i = 0; i <\
    \ lst.length; i++) {\n        if (lst[i] < min) {\n            min2 = min;\n \
    \           min = lst[i];\n        } else if (lst[i] < min2) {\n            min2\
    \ = lst[i];\n        }\n    }\n    return min2;\n}\n", "    let smallest = lst[0];\n\
    \    let secondSmallest = undefined;\n    for (let i = 1; i < lst.length; i++)\
    \ {\n        if (lst[i] < smallest) {\n            secondSmallest = smallest;\n\
    \            smallest = lst[i];\n        } else if (lst[i] < secondSmallest ||\
    \ secondSmallest === undefined) {\n            secondSmallest = lst[i];\n    \
    \    }\n    }\n    return secondSmallest;\n}\n", "    if (lst.length < 2) {\n\
    \        return undefined;\n    }\n    let min = lst[0];\n    let secondMin =\
    \ lst[1];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < min)\
    \ {\n            secondMin = min;\n            min = lst[i];\n        } else if\
    \ (lst[i] < secondMin) {\n            secondMin = lst[i];\n        }\n    }\n\
    \    return secondMin;\n}\n", "    let min = Math.min(...lst);\n    let minIndex\
    \ = lst.indexOf(min);\n    lst.splice(minIndex, 1);\n    return Math.min(...lst);\n\
    }\n", "    if (lst.length < 2) {\n        return undefined;\n    }\n    let min\
    \ = lst[0];\n    let secondMin = lst[1];\n    for (let i = 1; i < lst.length;\
    \ i++) {\n        if (lst[i] < min) {\n            secondMin = min;\n        \
    \    min = lst[i];\n        } else if (lst[i] < secondMin) {\n            secondMin\
    \ = lst[i];\n        }\n    }\n    return secondMin;\n}\n", "    let min = Math.min(...lst);\n\
    \    let minIndex = lst.indexOf(min);\n    lst.splice(minIndex, 1);\n    return\
    \ Math.min(...lst);\n}\n\nconsole.log(next_smallest([1, 2, -8, -2, 0]));\nconsole.log(next_smallest([1,\
    \ 1, 0, -1, -2]));\nconsole.log(next_smallest([1, 1, 1, 0, -1, -2]));\nconsole.log(next_smallest([2,\
    \ 2, 2]));\nconsole.log(next_smallest([]));", "    let min = lst[0];\n    let\
    \ secondMin = lst[1];\n    for (let i = 1; i < lst.length; i++) {\n        if\
    \ (lst[i] < min) {\n            secondMin = min;\n            min = lst[i];\n\
    \        } else if (lst[i] < secondMin) {\n            secondMin = lst[i];\n \
    \       }\n    }\n    return secondMin;\n}\n", "    let min = lst[0];\n    let\
    \ min2 = lst[0];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ < min) {\n            min2 = min;\n            min = lst[i];\n        } else\
    \ if (lst[i] < min2) {\n            min2 = lst[i];\n        }\n    }\n    return\
    \ min2;\n}\n", "    let smallest = lst[0];\n    let secondSmallest = lst[1];\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n\
    \            secondSmallest = smallest;\n            smallest = lst[i];\n    \
    \    } else if (lst[i] < secondSmallest) {\n            secondSmallest = lst[i];\n\
    \        }\n    }\n    return secondSmallest;\n}\n", "    let smallest = lst[0];\n\
    \    let secondSmallest = lst[1];\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (lst[i] < smallest) {\n            secondSmallest = smallest;\n  \
    \          smallest = lst[i];\n        } else if (lst[i] < secondSmallest) {\n\
    \            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n\
    }\n\nconsole.log(next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(next_smallest([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(next_smallest([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(next_smallest([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13]));\nconsole.log(next_smallest([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14]));\nconsole.log(next_smallest([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(next_smallest([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(next_smallest([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(next_smallest([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(next_smallest([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,", "    let min =\
    \ Math.min(...lst);\n    let minIndex = lst.indexOf(min);\n    lst.splice(minIndex,\
    \ 1);\n    return Math.min(...lst);\n}\n", "    let smallest = lst[0];\n    let\
    \ secondSmallest = lst[1];\n    for (let i = 1; i < lst.length; i++) {\n     \
    \   if (lst[i] < smallest) {\n            secondSmallest = smallest;\n       \
    \     smallest = lst[i];\n        } else if (lst[i] < secondSmallest) {\n    \
    \        secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n\
    }\n", "    let smallest = lst[0];\n    let secondSmallest = lst[1];\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n          \
    \  secondSmallest = smallest;\n            smallest = lst[i];\n        } else\
    \ if (lst[i] < secondSmallest) {\n            secondSmallest = lst[i];\n     \
    \   }\n    }\n    return secondSmallest;\n}\n", "    let smallest = lst[0];\n\
    \    let secondSmallest = lst[1];\n    for (let i = 1; i < lst.length; i++) {\n\
    \        if (lst[i] < smallest) {\n            secondSmallest = smallest;\n  \
    \          smallest = lst[i];\n        } else if (lst[i] < secondSmallest) {\n\
    \            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n\
    }\n", "    let min = Math.min(...lst);\n    let minIndex = lst.indexOf(min);\n\
    \    lst.splice(minIndex, 1);\n    return Math.min(...lst);\n}\n", "    if (lst.length\
    \ < 2) {\n        return undefined;\n    }\n    let min = Math.min(...lst);\n\
    \    let minIndex = lst.indexOf(min);\n    lst.splice(minIndex, 1);\n    return\
    \ Math.min(...lst);\n}\n", "    let min = Number.MAX_VALUE;\n    let secondMin\
    \ = Number.MAX_VALUE;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (lst[i] < min) {\n            secondMin = min;\n            min = lst[i];\n\
    \        } else if (lst[i] < secondMin) {\n            secondMin = lst[i];\n \
    \       }\n    }\n    return secondMin === Number.MAX_VALUE ? undefined : secondMin;\n\
    }\n", "    if (lst.length < 2) {\n        return undefined;\n    }\n    let min\
    \ = lst[0];\n    let secondMin = lst[1];\n    for (let i = 1; i < lst.length;\
    \ i++) {\n        if (lst[i] < min) {\n            secondMin = min;\n        \
    \    min = lst[i];\n        } else if (lst[i] < secondMin) {\n            secondMin\
    \ = lst[i];\n        }\n    }\n    return secondMin;\n}\n", "    let min: number\
    \ = lst[0];\n    let secondMin: number = lst[0];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < min) {\n            secondMin = min;\n        \
    \    min = lst[i];\n        } else if (lst[i] < secondMin) {\n            secondMin\
    \ = lst[i];\n        }\n    }\n    return secondMin;\n}\n", "    let smallest\
    \ = lst[0];\n    let secondSmallest = undefined;\n    for (let i = 1; i < lst.length;\
    \ i++) {\n        if (lst[i] < smallest) {\n            secondSmallest = smallest;\n\
    \            smallest = lst[i];\n        } else if (secondSmallest === undefined\
    \ || lst[i] < secondSmallest) {\n            secondSmallest = lst[i];\n      \
    \  }\n    }\n    return secondSmallest;\n}\n", "    let min = Math.min(...lst);\n\
    \    let minIndex = lst.indexOf(min);\n    lst.splice(minIndex, 1);\n    return\
    \ Math.min(...lst);\n}\n", "    let smallest = lst[0];\n    let secondSmallest\
    \ = lst[1];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] <\
    \ smallest) {\n            secondSmallest = smallest;\n            smallest =\
    \ lst[i];\n        } else if (lst[i] < secondSmallest) {\n            secondSmallest\
    \ = lst[i];\n        }\n    }\n    return secondSmallest;\n}\n", "    const sorted\
    \ = lst.sort((a, b) => a - b);\n    return sorted[1];\n}\n", "    let smallest\
    \ = lst[0];\n    let secondSmallest = lst[1];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < smallest) {\n            secondSmallest = smallest;\n\
    \            smallest = lst[i];\n        } else if (lst[i] < secondSmallest) {\n\
    \            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n\
    }\n", "    let smallest = lst[0];\n    let secondSmallest = lst[1];\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n          \
    \  secondSmallest = smallest;\n            smallest = lst[i];\n        } else\
    \ if (lst[i] < secondSmallest) {\n            secondSmallest = lst[i];\n     \
    \   }\n    }\n    return secondSmallest;\n}\n", "    if (lst.length < 2) {\n \
    \       return undefined;\n    }\n    let smallest = lst[0];\n    let secondSmallest\
    \ = lst[1];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] <\
    \ smallest) {\n            secondSmallest = smallest;\n            smallest =\
    \ lst[i];\n        } else if (lst[i] < secondSmallest) {\n            secondSmallest\
    \ = lst[i];\n        }\n    }\n    return secondSmallest;\n}\n", "    let smallest\
    \ = lst[0];\n    let secondSmallest = lst[1];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < smallest) {\n            secondSmallest = smallest;\n\
    \            smallest = lst[i];\n        } else if (lst[i] < secondSmallest) {\n\
    \            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n\
    }\n", "    let smallest = lst[0];\n    let secondSmallest = undefined;\n    for\
    \ (let i = 1; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n     \
    \       secondSmallest = smallest;\n            smallest = lst[i];\n        }\
    \ else if (lst[i] < secondSmallest || secondSmallest === undefined) {\n      \
    \      secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n\
    }\n", "    let min = lst[0];\n    let min2 = lst[0];\n    for (let i = 0; i <\
    \ lst.length; i++) {\n        if (lst[i] < min) {\n            min2 = min;\n \
    \           min = lst[i];\n        } else if (lst[i] < min2) {\n            min2\
    \ = lst[i];\n        }\n    }\n    return min2;\n}\n", "    let smallest = lst[0];\n\
    \    let secondSmallest = lst[1];\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (lst[i] < smallest) {\n            secondSmallest = smallest;\n  \
    \          smallest = lst[i];\n        } else if (lst[i] < secondSmallest) {\n\
    \            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n\
    }\n\nconsole.log(next_smallest([1, 2, 3, 4, 5]));\nconsole.log(next_smallest([5,\
    \ 4, 3, 2, 1]));\nconsole.log(next_smallest([1, 1, 1, 1, 1]));\nconsole.log(next_smallest([1,\
    \ 2, 1, 1, 1]));\nconsole.log(next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(next_smallest([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));", "    let smallest\
    \ = lst[0];\n    let secondSmallest = lst[1];\n    for (let i = 1; i < lst.length;\
    \ i++) {\n        if (lst[i] < smallest) {\n            secondSmallest = smallest;\n\
    \            smallest = lst[i];\n        } else if (lst[i] < secondSmallest) {\n\
    \            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n\
    }\n", "    if (lst.length < 2) {\n        return undefined;\n    }\n    let smallest\
    \ = lst[0];\n    let secondSmallest = lst[1];\n    for (let i = 1; i < lst.length;\
    \ i++) {\n        if (lst[i] < smallest) {\n            secondSmallest = smallest;\n\
    \            smallest = lst[i];\n        } else if (lst[i] < secondSmallest) {\n\
    \            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n\
    }\n", "    let min = Math.min(...lst);\n    let minIndex = lst.indexOf(min);\n\
    \    lst.splice(minIndex, 1);\n    return Math.min(...lst);\n}\n\nconsole.log(next_smallest([1,\
    \ 2, -8, -2, 0]));\nconsole.log(next_smallest([1, 2, 0]));\nconsole.log(next_smallest([2,\
    \ 2, 2]));\nconsole.log(next_smallest([2]));\nconsole.log(next_smallest([]));",
  "    if (lst.length < 2) {\n        return undefined;\n    }\n    let smallest =\
    \ lst[0];\n    let secondSmallest = lst[1];\n    for (let i = 1; i < lst.length;\
    \ i++) {\n        if (lst[i] < smallest) {\n            secondSmallest = smallest;\n\
    \            smallest = lst[i];\n        } else if (lst[i] < secondSmallest) {\n\
    \            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n\
    }\n", "    if (lst.length < 2) {\n        return undefined;\n    }\n    let min\
    \ = lst[0];\n    let nextMin = lst[1];\n    for (let i = 1; i < lst.length; i++)\
    \ {\n        if (lst[i] < min) {\n            nextMin = min;\n            min\
    \ = lst[i];\n        } else if (lst[i] < nextMin) {\n            nextMin = lst[i];\n\
    \        }\n    }\n    return nextMin;\n}\n", "    let min = Math.min(...lst);\n\
    \    let minIndex = lst.indexOf(min);\n    lst.splice(minIndex, 1);\n    return\
    \ Math.min(...lst);\n}\n", "    let smallest = lst[0];\n    let secondSmallest\
    \ = undefined;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i]\
    \ < smallest) {\n            secondSmallest = smallest;\n            smallest\
    \ = lst[i];\n        } else if (lst[i] < secondSmallest || secondSmallest ===\
    \ undefined) {\n            secondSmallest = lst[i];\n        }\n    }\n    return\
    \ secondSmallest;\n}\n", "    let smallest = lst[0];\n    let secondSmallest =\
    \ lst[1];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < smallest)\
    \ {\n            secondSmallest = smallest;\n            smallest = lst[i];\n\
    \        } else if (lst[i] < secondSmallest) {\n            secondSmallest = lst[i];\n\
    \        }\n    }\n    return secondSmallest;\n}\n", "    let smallest = lst[0];\n\
    \    let smallest2 = lst[0];\n    for (let i = 0; i < lst.length; i++) {\n   \
    \     if (lst[i] < smallest) {\n            smallest2 = smallest;\n          \
    \  smallest = lst[i];\n        }\n        else if (lst[i] < smallest2) {\n   \
    \         smallest2 = lst[i];\n        }\n    }\n    return smallest2;\n}\n",
  "    let min = Math.min(...lst);\n    let minIndex = lst.indexOf(min);\n    lst.splice(minIndex,\
    \ 1);\n    return Math.min(...lst);\n}\n\nconsole.log(next_smallest([1, 2, -8,\
    \ -2, 0]));\nconsole.log(next_smallest([1, 2, -8, -2]));\nconsole.log(next_smallest([1,\
    \ 2, -8, -2, 0, -1]));\nconsole.log(next_smallest([1, 2, -8, -2, 0, -1, -3]));\n\
    console.log(next_smallest([1, 2, -8, -2, 0, -1, -3, -4]));\nconsole.log(next_smallest([1,\
    \ 2, -8, -2, 0, -1, -3, -4, -5]));\nconsole.log(next_smallest([1, 2, -8, -2, 0,\
    \ -1, -3, -4, -5, -6]));\nconsole.log(next_smallest([1, 2, -8, -2, 0, -1, -3,\
    \ -4, -5, -6, -7]));\nconsole.log(next_smallest([1, 2, -8, -2, 0, -1, -3, -4,\
    \ -5, -6, -7, -8]));\nconsole.log(next_smallest([1, 2, -8, -2, 0, -1, -3, -4,\
    \ -5, -6, -7, -8, -9]));\nconsole.log(next_smallest([1, 2, -8, -2, 0, -1, -3,\
    \ -4, -5, -6, -7, -8, -9, -10]));\nconsole.log(next_smallest([1, 2, -8, -2, 0,\
    \ -1, -3, -4, -5, -6, -7, -8, -9, -10, -11]));\nconsole.log(next_smallest([1,\
    \ 2, -8, -2", "    if (lst.length < 2) {\n        return undefined;\n    }\n \
    \   let min = lst[0];\n    let min2 = lst[1];\n    if (min > min2) {\n       \
    \ min = lst[1];\n        min2 = lst[0];\n    }\n    for (let i = 2; i < lst.length;\
    \ i++) {\n        if (lst[i] < min) {\n            min2 = min;\n            min\
    \ = lst[i];\n        } else if (lst[i] < min2) {\n            min2 = lst[i];\n\
    \        }\n    }\n    return min2;\n}\n", "    let smallest = lst[0];\n    let\
    \ secondSmallest = lst[1];\n    for (let i = 0; i < lst.length; i++) {\n     \
    \   if (lst[i] < smallest) {\n            secondSmallest = smallest;\n       \
    \     smallest = lst[i];\n        } else if (lst[i] < secondSmallest) {\n    \
    \        secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n\
    }\n", "    let smallest = lst[0];\n    let secondSmallest = lst[1];\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n          \
    \  secondSmallest = smallest;\n            smallest = lst[i];\n        } else\
    \ if (lst[i] < secondSmallest) {\n            secondSmallest = lst[i];\n     \
    \   }\n    }\n    return secondSmallest;\n}\n", "    let min = Math.min(...lst);\n\
    \    let minIndex = lst.indexOf(min);\n    lst.splice(minIndex, 1);\n    return\
    \ Math.min(...lst);\n}\n\nconsole.log(next_smallest([1, 2, -8, -2, 0]));\nconsole.log(next_smallest([1,\
    \ 2, -8, -2]));\nconsole.log(next_smallest([1, 2, -8, -2, 0, -2]));\nconsole.log(next_smallest([1,\
    \ 2, -8, -2, 0, -2, -2]));\n", "    if (lst.length < 2) {\n        return undefined;\n\
    \    }\n    let smallest = lst[0];\n    let secondSmallest = lst[1];\n    for\
    \ (let i = 1; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n     \
    \       secondSmallest = smallest;\n            smallest = lst[i];\n        }\
    \ else if (lst[i] < secondSmallest) {\n            secondSmallest = lst[i];\n\
    \        }\n    }\n    return secondSmallest;\n}\n", "    if (lst.length < 2)\
    \ {\n        return undefined;\n    }\n    let smallest = lst[0];\n    let secondSmallest\
    \ = lst[1];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] <\
    \ smallest) {\n            secondSmallest = smallest;\n            smallest =\
    \ lst[i];\n        } else if (lst[i] < secondSmallest) {\n            secondSmallest\
    \ = lst[i];\n        }\n    }\n    return secondSmallest;\n}\n", "    if (lst.length\
    \ < 2) {\n        return undefined;\n    }\n    let smallest = lst[0];\n    let\
    \ secondSmallest = lst[1];\n    for (let i = 1; i < lst.length; i++) {\n     \
    \   if (lst[i] < smallest) {\n            secondSmallest = smallest;\n       \
    \     smallest = lst[i];\n        } else if (lst[i] < secondSmallest) {\n    \
    \        secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n\
    }\n", "    let min: number = lst[0];\n    let min2: number = lst[0];\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        if (lst[i] < min) {\n          \
    \  min2 = min;\n            min = lst[i];\n        } else if (lst[i] < min2) {\n\
    \            min2 = lst[i];\n        }\n    }\n    return min2;\n}\n", "    let\
    \ min = Math.min(...lst);\n    let minIndex = lst.indexOf(min);\n    lst.splice(minIndex,\
    \ 1);\n    return Math.min(...lst);\n}\n\nconsole.log(next_smallest([1, 2, -8,\
    \ -2, 0]));\nconsole.log(next_smallest([1, 2, -8, -2]));\nconsole.log(next_smallest([1,\
    \ 2, -8, -2, 0, -2]));\nconsole.log(next_smallest([1, 1, 0, 0, 2, -2, -2]));\n\
    console.log(next_smallest([2, 2, 2]));\nconsole.log(next_smallest([]));", "  \
    \  let min = Math.min(...lst);\n    let minIndex = lst.indexOf(min);\n    lst.splice(minIndex,\
    \ 1);\n    return Math.min(...lst);\n}\n", "    let min = lst[0];\n    let min2\
    \ = lst[0];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] <\
    \ min) {\n            min2 = min;\n            min = lst[i];\n        } else if\
    \ (lst[i] < min2) {\n            min2 = lst[i];\n        }\n    }\n    return\
    \ min2;\n}\n", "    let min = lst[0];\n    let secondMin = lst[1];\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (lst[i] < min) {\n            secondMin\
    \ = min;\n            min = lst[i];\n        } else if (lst[i] < secondMin) {\n\
    \            secondMin = lst[i];\n        }\n    }\n    return secondMin;\n}\n",
  "    let min = Math.min(...lst);\n    let minIndex = lst.indexOf(min);\n    lst.splice(minIndex,\
    \ 1);\n    return Math.min(...lst);\n}\n", "    if (lst.length < 2) {\n      \
    \  return undefined;\n    }\n    let min = lst[0];\n    let nextMin = lst[1];\n\
    \    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < min) {\n   \
    \         nextMin = min;\n            min = lst[i];\n        } else if (lst[i]\
    \ < nextMin) {\n            nextMin = lst[i];\n        }\n    }\n    return nextMin;\n\
    }\n", "    let min = lst[0];\n    let secondMin = lst[1];\n    for (let i = 0;\
    \ i < lst.length; i++) {\n        if (lst[i] < min) {\n            secondMin =\
    \ min;\n            min = lst[i];\n        } else if (lst[i] < secondMin) {\n\
    \            secondMin = lst[i];\n        }\n    }\n    return secondMin;\n}\n",
  "    let smallest = lst[0];\n    let secondSmallest = undefined;\n    for (let i\
    \ = 1; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n            secondSmallest\
    \ = smallest;\n            smallest = lst[i];\n        } else if (lst[i] < secondSmallest\
    \ || secondSmallest === undefined) {\n            secondSmallest = lst[i];\n \
    \       }\n    }\n    return secondSmallest;\n}\n", "    const sorted = lst.sort((a,\
    \ b) => a - b);\n    return sorted[1];\n}\n", "    let min = Math.min(...lst);\n\
    \    let minIndex = lst.indexOf(min);\n    lst.splice(minIndex, 1);\n    return\
    \ Math.min(...lst);\n}\n", "    let smallest = lst[0];\n    let secondSmallest\
    \ = lst[1];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] <\
    \ smallest) {\n            secondSmallest = smallest;\n            smallest =\
    \ lst[i];\n        } else if (lst[i] < secondSmallest) {\n            secondSmallest\
    \ = lst[i];\n        }\n    }\n    return secondSmallest;\n}\n", "    let smallest\
    \ = lst[0];\n    let secondSmallest = lst[1];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < smallest) {\n            secondSmallest = smallest;\n\
    \            smallest = lst[i];\n        } else if (lst[i] < secondSmallest) {\n\
    \            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n\
    }\n", "    let smallest = lst[0];\n    let secondSmallest = lst[1];\n    for (let\
    \ i = 1; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n          \
    \  secondSmallest = smallest;\n            smallest = lst[i];\n        } else\
    \ if (lst[i] < secondSmallest) {\n            secondSmallest = lst[i];\n     \
    \   }\n    }\n    return secondSmallest;\n}\n", "    let smallest = lst[0];\n\
    \    let secondSmallest = lst[1];\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (lst[i] < smallest) {\n            secondSmallest = smallest;\n  \
    \          smallest = lst[i];\n        } else if (lst[i] < secondSmallest) {\n\
    \            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n\
    }\n", "    let min = lst[0];\n    let min2 = lst[0];\n    for (let i = 0; i <\
    \ lst.length; i++) {\n        if (lst[i] < min) {\n            min2 = min;\n \
    \           min = lst[i];\n        } else if (lst[i] < min2) {\n            min2\
    \ = lst[i];\n        }\n    }\n    return min2;\n}\n", "    let min = lst[0];\n\
    \    let min2 = lst[0];\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (lst[i] < min) {\n            min2 = min;\n            min = lst[i];\n     \
    \   } else if (lst[i] < min2) {\n            min2 = lst[i];\n        }\n    }\n\
    \    return min2;\n}\n", "    let min = lst[0];\n    let min2 = lst[0];\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        if (lst[i] < min) {\n          \
    \  min2 = min;\n            min = lst[i];\n        } else if (lst[i] < min2) {\n\
    \            min2 = lst[i];\n        }\n    }\n    return min2;\n}\n", "    if\
    \ (lst.length < 2) {\n        return undefined;\n    }\n    let min = lst[0];\n\
    \    let min2 = lst[1];\n    if (min > min2) {\n        min = lst[1];\n      \
    \  min2 = lst[0];\n    }\n    for (let i = 2; i < lst.length; i++) {\n       \
    \ if (lst[i] < min) {\n            min2 = min;\n            min = lst[i];\n  \
    \      } else if (lst[i] < min2) {\n            min2 = lst[i];\n        }\n  \
    \  }\n    return min2;\n}\n", "    let smallest = lst[0];\n    let secondSmallest\
    \ = lst[1];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] <\
    \ smallest) {\n            secondSmallest = smallest;\n            smallest =\
    \ lst[i];\n        } else if (lst[i] < secondSmallest) {\n            secondSmallest\
    \ = lst[i];\n        }\n    }\n    return secondSmallest;\n}\n", "    let smallest\
    \ = lst[0];\n    let secondSmallest = lst[1];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < smallest) {\n            secondSmallest = smallest;\n\
    \            smallest = lst[i];\n        } else if (lst[i] < secondSmallest) {\n\
    \            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n\
    }\n", "    let smallest = lst[0];\n    let secondSmallest = lst[1];\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n          \
    \  secondSmallest = smallest;\n            smallest = lst[i];\n        } else\
    \ if (lst[i] < secondSmallest) {\n            secondSmallest = lst[i];\n     \
    \   }\n    }\n    return secondSmallest;\n}\n", "    let min = lst[0];\n    let\
    \ min2 = lst[0];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ < min) {\n            min2 = min;\n            min = lst[i];\n        } else\
    \ if (lst[i] < min2) {\n            min2 = lst[i];\n        }\n    }\n    return\
    \ min2;\n}\n", "    let smallest = lst[0];\n    let secondSmallest = lst[1];\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n\
    \            secondSmallest = smallest;\n            smallest = lst[i];\n    \
    \    } else if (lst[i] < secondSmallest) {\n            secondSmallest = lst[i];\n\
    \        }\n    }\n    return secondSmallest;\n}\n", "    let smallest = lst[0];\n\
    \    let secondSmallest = lst[1];\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (lst[i] < smallest) {\n            secondSmallest = smallest;\n  \
    \          smallest = lst[i];\n        } else if (lst[i] < secondSmallest) {\n\
    \            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n\
    }\n", "    if (lst.length < 2) {\n        return undefined;\n    }\n    let smallest\
    \ = lst[0];\n    let nextSmallest = lst[1];\n    for (let i = 1; i < lst.length;\
    \ i++) {\n        if (lst[i] < smallest) {\n            nextSmallest = smallest;\n\
    \            smallest = lst[i];\n        } else if (lst[i] < nextSmallest) {\n\
    \            nextSmallest = lst[i];\n        }\n    }\n    return nextSmallest;\n\
    }\n", "    if (lst.length < 2) {\n        return undefined;\n    }\n    let min\
    \ = lst[0];\n    let secondMin = lst[1];\n    for (let i = 1; i < lst.length;\
    \ i++) {\n        if (lst[i] < min) {\n            secondMin = min;\n        \
    \    min = lst[i];\n        } else if (lst[i] < secondMin) {\n            secondMin\
    \ = lst[i];\n        }\n    }\n    return secondMin;\n}\n", "    if (lst.length\
    \ < 2) {\n        return undefined;\n    }\n\n    let min = lst[0];\n    let min2\
    \ = lst[1];\n\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i]\
    \ < min) {\n            min2 = min;\n            min = lst[i];\n        } else\
    \ if (lst[i] < min2) {\n            min2 = lst[i];\n        }\n    }\n\n    return\
    \ min2;\n}\n", "    let min = lst[0];\n    let min2 = lst[0];\n    for (let i\
    \ = 0; i < lst.length; i++) {\n        if (lst[i] < min) {\n            min2 =\
    \ min;\n            min = lst[i];\n        } else if (lst[i] < min2) {\n     \
    \       min2 = lst[i];\n        }\n    }\n    return min2;\n}\n", "    if (lst.length\
    \ < 2) {\n        return undefined;\n    }\n    let min = lst[0];\n    let secondMin\
    \ = lst[1];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] <\
    \ min) {\n            secondMin = min;\n            min = lst[i];\n        } else\
    \ if (lst[i] < secondMin) {\n            secondMin = lst[i];\n        }\n    }\n\
    \    return secondMin;\n}\n", "    let smallest = lst[0];\n    let secondSmallest\
    \ = lst[1];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] <\
    \ smallest) {\n            secondSmallest = smallest;\n            smallest =\
    \ lst[i];\n        } else if (lst[i] < secondSmallest) {\n            secondSmallest\
    \ = lst[i];\n        }\n    }\n    return secondSmallest;\n}\n", "    let smallest\
    \ = lst[0];\n    let secondSmallest = lst[1];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < smallest) {\n            secondSmallest = smallest;\n\
    \            smallest = lst[i];\n        } else if (lst[i] < secondSmallest) {\n\
    \            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n\
    }\n", "    let min = Math.min(...lst);\n    let minIndex = lst.indexOf(min);\n\
    \    lst.splice(minIndex, 1);\n    return Math.min(...lst);\n}\n\nconsole.log(next_smallest([1,\
    \ 2, -8, -2, 0]));\nconsole.log(next_smallest([1, 2, -8, -2]));\nconsole.log(next_smallest([1,\
    \ 2, -8, -2, 0, -2]));\nconsole.log(next_smallest([1, 1, 0, 0, 2, -2, -2]));\n\
    console.log(next_smallest([2, 2, 2]));\nconsole.log(next_smallest([]));\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
