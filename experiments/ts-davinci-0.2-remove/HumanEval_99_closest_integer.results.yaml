language: ts
name: HumanEval_99_closest_integer
results:
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0\
    \ ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.4\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    14.0\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    14

    -14

    15

    -15

    14

    -14

    15

    -15

    15

    -15

    15

    -15

    15

    -15

    15

    -15

    15

    -15

    15

    -15

    15

    -15

    '
  timestamp: 1660003993
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  if (num - floor < ceil - num) {\n    return floor;\n  }\
    \ else {\n    return ceil;\n  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\n\
    console.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmp9x1bhtet.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9x1bhtet.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660003993
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0\
    \ ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"14.0\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    -14

    -15

    -14

    14

    '
  timestamp: 1660003993
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let num = Number(value);\n  let floor = Math.floor(num);\n  let ceil = Math.ceil(num);\n\
    \  let diffFloor = Math.abs(num - floor);\n  let diffCeil = Math.abs(num - ceil);\n\
    \  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmp_jlkrwbb.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_jlkrwbb.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660003993
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpzmqdok9q.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpzmqdok9q.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    -14

    -15

    -14

    -14

    -15

    '
  timestamp: 1660003993
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const decimal = num - Math.floor(num);\n  if\
    \ (decimal < 0.5) {\n    return Math.floor(num);\n  } else {\n    return Math.ceil(num);\n\
    \  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmphkq7citr.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphkq7citr.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660003993
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let num = parseFloat(value);\n  let num1 = Math.ceil(num);\n  let num2 = Math.floor(num);\n\
    \  if (num - num2 < num1 - num) {\n    return num2;\n  } else {\n    return num1;\n\
    \  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpk4pzuvgx.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpk4pzuvgx.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660003993
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diff1 = Math.abs(num - floor);\n  const diff2 = Math.abs(num\
    \ - ceil);\n  return diff1 < diff2 ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"\
    -14.9\"));\nconsole.log(closest_integer(\"-14.99\"));\nconsole.log(closest_integer(\"\
    -14.9999\"));\nconsole.log(closest_integer(\"-14.999999\"));\nconsole.log(closest_integer(\"\
    -14.99999999\"));\nconsole.log(closest_integer(\"-14.9999999999\"));\nconsole.log(closest_integer(\"\
    -14.999999999999\"));\nconsole.log(closest_integer(\"-14.99999999999999\"));\n\
    console.log(closest_integer(\"-14.9999999999999999\"));\nconsole.log(closest_integer(\"\
    -14.999999999999999999\"));\nconsole.log(closest_integer(\"-14.99999999999999999999\"\
    ));\nconsole.log(closest_integer(\"-14.9999999999999999999999\"));\nconsole.log(closest_integer(\"\
    -14.999999999999999999999999\"));\nconsole.log(closest_integer(\"-14.99999999999999999999999999\"\
    ));\nconsole.log(closest_integer(\"-14.9999999999999999999999999999\"));\nconsole.log(closest_integer(\"\
    -14.999999999999999999999999999999\"));\nconsole.log(closest_integer(\"\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpomhz4c8u.ts(41,30): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpomhz4c8u.ts(42,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpomhz4c8u.ts(42,9): error TS1005: '','' expected.

    '
  timestamp: 1660003993
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diff1 = Math.abs(num - floor);\n  const diff2 = Math.abs(num\
    \ - ceil);\n  return diff1 < diff2 ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmp5zxx59mc.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp5zxx59mc.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    -14

    -15

    '
  timestamp: 1660003993
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const ceil = Math.ceil(num);\n  const floor =\
    \ Math.floor(num);\n  const diffCeil = ceil - num;\n  const diffFloor = num -\
    \ floor;\n  return diffCeil < diffFloor ? ceil : floor;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"\
    -14.9\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"\
    14.1\"));\nconsole.log(closest_integer(\"14.9\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmpc4cgwxs0.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpc4cgwxs0.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '14

    -15

    -14

    -15

    -14

    -14

    -15

    14

    14

    15

    '
  timestamp: 1660003993
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const numFloor = Math.floor(num);\n  const numCeil\
    \ = Math.ceil(num);\n  const numFloorDiff = Math.abs(num - numFloor);\n  const\
    \ numCeilDiff = Math.abs(num - numCeil);\n  return numFloorDiff > numCeilDiff\
    \ ? numCeil : numFloor;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"\
    -14.1\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"\
    -14.99\"));\nconsole.log(closest_integer(\"-14.99999\"));\nconsole.log(closest_integer(\"\
    -14.999999\"));\nconsole.log(closest_integer(\"-14.9999999\"));\nconsole.log(closest_integer(\"\
    -14.99999999\"));\nconsole.log(closest_integer(\"-14.999999999\"));\nconsole.log(closest_integer(\"\
    -14.9999999999\"));\nconsole.log(closest_integer(\"-14.99999999999\"));\nconsole.log(closest_integer(\"\
    -14.999999999999\"));\nconsole.log(closest_integer(\"-14.9999999999999\"));\n\
    console.log(closest_integer(\"-14.99999999999999\"));\nconsole.log(closest_integer(\"\
    -14.999999999999999\"));\nconsole.log(closest_integer(\"-14.9999999999999999\"\
    ));\nconsole.log(closest_integer(\"-14.99999999999999999\"));\nconsole.log(closest_integer(\"\
    -14.999999999999999999\"));\nconsole.log(cl\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjwjgw34d.ts(42,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpjwjgw34d.ts(42,9): error TS1005: '','' expected.

    '
  timestamp: 1660003993
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  return Math.round(parseFloat(value));\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmphwzo4v0u.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphwzo4v0u.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660003993
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"\
    14.0\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmplhqu4u2m.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplhqu4u2m.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    -14

    -15

    -14

    14

    '
  timestamp: 1660003993
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diff = num - floor;\n  if (diff === 0.5) {\n    return\
    \ num > 0 ? ceil : floor;\n  }\n  return diff > 0.5 ? ceil : floor;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"14.0\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    -14

    -15

    -14

    14

    '
  timestamp: 1660003993
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor < diffCeil) {\n    return floor;\n\
    \  } else if (diffFloor > diffCeil) {\n    return ceil;\n  } else {\n    return\
    \ num < 0 ? floor : ceil;\n  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\n\
    console.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"\
    ));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"\
    -14.9\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"\
    14.1\"));\nconsole.log(closest_integer(\"14.9\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphxzl09sr.ts(47,33): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmphxzl09sr.ts(48,1): error TS1005: '','' expected.

    ../../../../../tmp/tmphxzl09sr.ts(48,9): error TS1005: '','' expected.

    '
  timestamp: 1660003993
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0\
    \ ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"\
    -14.2\"));\nconsole.log(closest_integer(\"-14.3\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.7\"));\nconsole.log(closest_integer(\"\
    -14.8\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"\
    14.0\"));\nconsole.log(closest_integer(\"14.1\"));\nconsole.log(closest_integer(\"\
    14.2\"));\nconsole.log(closest_integer(\"14.3\"));\nconsole.log(closest_integer(\"\
    14.4\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"\
    14.6\"));\nconsole.log(closest_integer(\"14.7\"));\nconsole.log(closest_integer(\"\
    14.8\"));\nconsole.log(closest_integer(\"14.9\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    -14

    -15

    -14

    -14

    -14

    -14

    -14

    -15

    -15

    -15

    -15

    -15

    14

    14

    14

    14

    14

    15

    15

    15

    15

    15

    '
  timestamp: 1660003993
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let num = Number(value);\n  let floor = Math.floor(num);\n  let ceil = Math.ceil(num);\n\
    \  if (num - floor < ceil - num) {\n    return floor;\n  } else {\n    return\
    \ ceil;\n  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmp32zrk_x6.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp32zrk_x6.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660003993
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0\
    \ ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"\
    -14.2\"));\nconsole.log(closest_integer(\"-14.3\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.7\"));\nconsole.log(closest_integer(\"\
    -14.8\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"\
    14.0\"));\nconsole.log(closest_integer(\"14.1\"));\nconsole.log(closest_integer(\"\
    14.2\"));\nconsole.log(closest_integer(\"14.3\"));\nconsole.log(closest_integer(\"\
    14.4\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"\
    14.6\"));\nconsole.log(closest_integer(\"14.7\"));\nconsole.log(closest_integer(\"\
    14.8\"));\nconsole.log(closest_integer(\"14.9\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    -15

    -14

    -14

    -14

    -14

    -14

    -14

    -15

    -15

    -15

    -15

    -15

    14

    14

    14

    14

    14

    15

    15

    15

    15

    15

    '
  timestamp: 1660003993
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpr7rn1lj9.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpr7rn1lj9.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660003993
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0\
    \ ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"\
    -14.2\"));\nconsole.log(closest_integer(\"-14.3\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.7\"));\nconsole.log(closest_integer(\"\
    -14.8\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"\
    -14.10\"));\nconsole.log(closest_integer(\"-14.11\"));\nconsole.log(closest_integer(\"\
    -14.12\"));\nconsole.log(closest_integer(\"-14.13\"));\nconsole.log(closest_integer(\"\
    -14.14\"));\nconsole.log(closest_integer(\"-14.15\"));\nconsole.log(closest_integer(\"\
    -14.16\"));\nconsole.log(closest_integer(\"-14.17\"));\nconsole.log(closest_integer(\"\
    -14.18\"));\nconsole.log(clos\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6e_nb1v2.ts(46,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp6e_nb1v2.ts(46,9): error TS1005: '','' expected.

    '
  timestamp: 1660003993
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const num1 = Math.ceil(num);\n  const num2\
    \ = Math.floor(num);\n  if (num1 - num === 0.5) {\n    return num1;\n  } else\
    \ if (num - num2 === 0.5) {\n    return num2;\n  } else if (num1 - num < 0.5)\
    \ {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpmg1nb98f.js:38:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmg1nb98f.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    -14

    -15

    -14

    -14

    '
  timestamp: 1660003993
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"\
    -14.1\"));\nconsole.log(closest_integer(\"-14.2\"));\nconsole.log(closest_integer(\"\
    -14.3\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.7\"));\nconsole.log(closest_integer(\"-14.8\"));\nconsole.log(closest_integer(\"\
    -14.9\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"\
    -14.9\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"\
    -14.9\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"\
    -14.9\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"\
    -14.9\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"\
    -14.9\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpbxx5rzh_.js:49:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbxx5rzh_.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    -14

    -15

    -14

    -14

    -14

    -14

    -14

    -14

    -15

    -15

    -15

    -15

    -15

    -15

    -15

    -15

    -15

    -15

    -15

    -15

    -15

    -15

    -15

    '
  timestamp: 1660003993
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"14.6\"));\nconsole.log(closest_integer(\"-14.6\"\
    ));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"-14.4\"\
    ));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpabbfcxio.js:49:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpabbfcxio.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    15

    -15

    14

    -14

    -15

    -14

    -14

    -14

    -14

    -14

    -14

    -14

    -14

    -14

    -14

    -14

    -14

    -14

    -14

    -14

    -14

    -14

    -14

    '
  timestamp: 1660003993
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0\
    \ ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"\
    -14.2\"));\nconsole.log(closest_integer(\"-14.3\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.7\"));\nconsole.log(closest_integer(\"\
    -14.8\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"\
    14.0\"));\nconsole.log(closest_integer(\"14.1\"));\nconsole.log(closest_integer(\"\
    14.2\"));\nconsole.log(closest_integer(\"14.3\"));\nconsole.log(closest_integer(\"\
    14.4\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"\
    14.6\"));\nconsole.log(closest_integer(\"14.7\"));\nconsole.log(closest_integer(\"\
    14.8\"));\nconsole.log(closest_integer(\"14.9\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    -14

    -15

    -14

    -14

    -14

    -14

    -14

    -15

    -15

    -15

    -15

    -15

    14

    14

    14

    14

    14

    15

    15

    15

    15

    15

    '
  timestamp: 1660003993
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  return Math.round(num);\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpncrdrcdw.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpncrdrcdw.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660003995
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let num = parseFloat(value);\n  let num1 = Math.ceil(num);\n  let num2 = Math.floor(num);\n\
    \  if (num - num2 > num1 - num) {\n    return num1;\n  } else {\n    return num2;\n\
    \  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmppaljrkot.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppaljrkot.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '14

    -15

    '
  timestamp: 1660003995
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  if (num - floor === 0.5) {\n    return num > 0 ? ceil :\
    \ floor;\n  }\n  return num - floor < ceil - num ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"14.0\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    -14

    -15

    -14

    14

    '
  timestamp: 1660003995
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const decimal = num - Math.floor(num);\n\
    \  if (decimal === 0.5) {\n    return num > 0 ? Math.ceil(num) : Math.floor(num);\n\
    \  }\n  return Math.round(num);\n}\n\nconsole.log(closest_integer(\"14.5\"));\n\
    console.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.6\"\
    ));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"\
    14.4\"));\nconsole.log(closest_integer(\"14.6\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    -15

    -14

    -14

    14

    14

    15

    '
  timestamp: 1660003996
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  return Math.round(parseFloat(value));\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmphwzo4v0u.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphwzo4v0u.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660003993
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpsa7ooye5.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpsa7ooye5.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660003996
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0\
    \ ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"\
    -14.2\"));\nconsole.log(closest_integer(\"-14.3\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.7\"));\nconsole.log(closest_integer(\"\
    -14.8\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"\
    -14.9\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"\
    -14.9\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"\
    -14.9\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"\
    -14.9\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"\
    -14.9\"));\nconsole.log(closest\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplqv1xmdy.ts(46,1): error TS1005: '','' expected.

    ../../../../../tmp/tmplqv1xmdy.ts(46,9): error TS1005: '','' expected.

    '
  timestamp: 1660003995
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  if (num - floor < ceil - num) {\n    return floor;\n  }\
    \ else {\n    return ceil;\n  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\n\
    console.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.4\"\
    ));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.5\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu4d61mcs.ts(47,34): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpu4d61mcs.ts(48,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpu4d61mcs.ts(48,9): error TS1005: '','' expected.

    '
  timestamp: 1660003995
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  if (num - floor === 0.5) {\n    return num > 0 ? ceil :\
    \ floor;\n  }\n  return num - floor < ceil - num ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"14.0\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    -14

    -15

    -14

    14

    '
  timestamp: 1660003995
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  return Math.round(parseFloat(value));\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmphwzo4v0u.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphwzo4v0u.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660003993
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpr7rn1lj9.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpr7rn1lj9.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660003993
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num < 0\
    \ ? floor : ceil;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    '
  timestamp: 1660003995
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"\
    -14.1\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"\
    14.0\"));\nconsole.log(closest_integer(\"14.1\"));\nconsole.log(closest_integer(\"\
    14.9\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpftklpici.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpftklpici.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    -14

    -15

    -14

    -14

    -15

    14

    14

    15

    '
  timestamp: 1660003996
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num < 0\
    \ ? floor : ceil;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"\
    14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkljtsk4e.ts(46,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpkljtsk4e.ts(46,9): error TS1005: '','' expected.

    '
  timestamp: 1660003996
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0\
    \ ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"14.0\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    -14

    -15

    -14

    14

    '
  timestamp: 1660003996
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \    let num = parseFloat(value);\n    let num1 = Math.ceil(num);\n    let num2\
    \ = Math.floor(num);\n    if (num1 - num > 0.5) {\n        return num2;\n    }\
    \ else {\n        return num1;\n    }\n}\n\nconsole.log(closest_integer(\"14.5\"\
    ));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpkwai7up8.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpkwai7up8.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660003996
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0\
    \ ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwwdxsmmu.ts(46,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpwwdxsmmu.ts(46,9): error TS1005: '','' expected.

    '
  timestamp: 1660003996
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let num = Number(value);\n  let floor = Math.floor(num);\n  let ceil = Math.ceil(num);\n\
    \  let diff1 = Math.abs(num - floor);\n  let diff2 = Math.abs(num - ceil);\n \
    \ return diff1 > diff2 ? ceil : floor;\n}\n\nconsole.log(closest_integer(\"14.5\"\
    ));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"14.6\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmpw0323o4_.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpw0323o4_.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '14

    -15

    -14

    15

    '
  timestamp: 1660003996
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0\
    \ ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"14.6\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"\
    -14.1\"));\nconsole.log(closest_integer(\"14.1\"));\nconsole.log(closest_integer(\"\
    -14.2\"));\nconsole.log(closest_integer(\"14.2\"));\nconsole.log(closest_integer(\"\
    -14.3\"));\nconsole.log(closest_integer(\"14.3\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"14.6\"));\nconsole.log(closest_integer(\"\
    -14.7\"));\nconsole.log(closest_integer(\"14.7\"));\nconsole.log(closest_integer(\"\
    -14.8\"));\nconsole.log(closest_integer(\"14.8\"));\nconsole.log(closest_integer(\"\
    -14.9\"));\nconsole.log(closest_integer(\"14.9\"));\nconsole\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    -15

    15

    -14

    14

    -14

    14

    -14

    14

    -14

    14

    -14

    14

    -15

    15

    -15

    15

    -15

    15

    -15

    15

    -15

    15

    '
  timestamp: 1660003996
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let num = parseFloat(value);\n  if (num - Math.floor(num) === 0.5) {\n    return\
    \ num > 0 ? Math.ceil(num) : Math.floor(num);\n  }\n  return Math.round(num);\n\
    }\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    14.4\"));\nconsole.log(closest_integer(\"14.6\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    -14

    14

    15

    -15

    '
  timestamp: 1660003996
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpr7rn1lj9.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpr7rn1lj9.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660003993
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let num = parseFloat(value);\n  let num1 = Math.ceil(num);\n  let num2 = Math.floor(num);\n\
    \  if (num - num2 > num1 - num) {\n    return num1;\n  } else {\n    return num2;\n\
    \  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmppaljrkot.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppaljrkot.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '14

    -15

    '
  timestamp: 1660003995
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diff1 = Math.abs(num - floor);\n  const diff2 = Math.abs(num\
    \ - ceil);\n  if (diff1 === diff2) {\n    return num > 0 ? ceil : floor;\n  }\n\
    \  return diff1 < diff2 ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"\
    ));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    '
  timestamp: 1660003996
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  return diffFloor > diffCeil ? ceil : floor;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"\
    14.0\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmpgbhoosdf.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgbhoosdf.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '14

    -15

    -14

    -15

    -14

    14

    '
  timestamp: 1660003996
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diff = num - floor;\n  return diff < 0.5 ? floor\
    \ : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"\
    -14.1\"));\nconsole.log(closest_integer(\"-14.9\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmppx34qwnx.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppx34qwnx.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    -14

    -15

    -14

    -14

    -15

    '
  timestamp: 1660003996
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  return Math.round(num);\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmp0be3yt0y.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0be3yt0y.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660003996
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"\
    14.0\"));\nconsole.log(closest_integer(\"-15.0\"));\nconsole.log(closest_integer(\"\
    15.0\"));\nconsole.log(closest_integer(\"-15.1\"));\nconsole.log(closest_integer(\"\
    15.1\"));\nconsole.log(closest_integer(\"-15.5\"));\nconsole.log(closest_integer(\"\
    15.5\"));\nconsole.log(closest_integer(\"-15.9\"));\nconsole.log(closest_integer(\"\
    15.9\"));\nconsole.log(closest_integer(\"-16.0\"));\nconsole.log(closest_integer(\"\
    16.0\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpv1uhsv3o.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpv1uhsv3o.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    -14

    14

    -15

    15

    -14

    14

    -15

    15

    -15

    15

    -15

    16

    -16

    16

    -16

    16

    '
  timestamp: 1660003996
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmp9uck_vpf.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9uck_vpf.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    -14

    -15

    -14

    -14

    -15

    '
  timestamp: 1660003996
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpr7rn1lj9.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpr7rn1lj9.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660003993
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const floorDiff = Math.abs(num - floor);\n  const ceilDiff\
    \ = Math.abs(num - ceil);\n  return floorDiff < ceilDiff ? floor : ceil;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(cl\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwhf91esg.ts(45,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpwhf91esg.ts(45,9): error TS1005: '','' expected.

    '
  timestamp: 1660003997
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"-14.4\"\
    ));\nconsole.log(closest_integer(\"14.6\"));\nconsole.log(closest_integer(\"-14.6\"\
    ));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptrvp_iz1.ts(44,35): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmptrvp_iz1.ts(45,1): error TS1005: '','' expected.

    ../../../../../tmp/tmptrvp_iz1.ts(45,9): error TS1005: '','' expected.

    '
  timestamp: 1660003998
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diff1 = Math.abs(num - floor);\n  const diff2 = Math.abs(num\
    \ - ceil);\n  return diff1 > diff2 ? ceil : floor;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmpo9nn_ye5.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpo9nn_ye5.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '14

    -15

    '
  timestamp: 1660003998
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  return num - floor >= ceil - num ? ceil : floor;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpj7msg51i.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpj7msg51i.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660003998
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  if (num - floor === 0.5) {\n    return num > 0 ? ceil :\
    \ floor;\n  }\n  return num - floor < ceil - num ? floor : ceil;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003998
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"\
    -14.1\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"\
    -14.8\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"\
    14.1\"));\nconsole.log(closest_integer(\"14.9\"));\nconsole.log(closest_integer(\"\
    14.8\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpl167fh8h.js:35:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpl167fh8h.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    -14

    -15

    -14

    -14

    -15

    -15

    14

    14

    15

    15

    '
  timestamp: 1660003998
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diff1 = Math.abs(num - floor);\n  const diff2 = Math.abs(num\
    \ - ceil);\n  if (diff1 === diff2) {\n    return num > 0 ? ceil : floor;\n  }\n\
    \  return diff1 < diff2 ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"\
    ));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"\
    -14.2\"));\nconsole.log(closest_integer(\"-14.3\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.7\"));\nconsole.log(closest_integer(\"\
    -14.8\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"\
    -14.2\"));\nconsole.log(closest_integer(\"-14.3\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.7\"));\nconsole.log(closest_integer(\"\
    -14.8\"));\nconsole.log(closest_integer(\"-14.9\")\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4wltprah.ts(46,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp4wltprah.ts(46,9): error TS1005: '','' expected.

    '
  timestamp: 1660003998
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0\
    \ ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.4\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    14

    -14

    15

    -15

    -15

    -14

    -15

    -15

    -14

    -15

    '
  timestamp: 1660003998
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpr7rn1lj9.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpr7rn1lj9.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660003993
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0\
    \ ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"14.0\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    -14

    -15

    -14

    14

    '
  timestamp: 1660003993
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let num = parseFloat(value);\n  let floor = Math.floor(num);\n  let ceil =\
    \ Math.ceil(num);\n  let diff1 = Math.abs(num - floor);\n  let diff2 = Math.abs(num\
    \ - ceil);\n  return diff1 < diff2 ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpjja5jpds.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpjja5jpds.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660003998
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0\
    \ ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"\
    -14.2\"));\nconsole.log(closest_integer(\"-14.3\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.7\"));\nconsole.log(closest_integer(\"\
    -14.8\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"\
    14.0\"));\nconsole.log(closest_integer(\"14.1\"));\nconsole.log(closest_integer(\"\
    14.2\"));\nconsole.log(closest_integer(\"14.3\"));\nconsole.log(closest_integer(\"\
    14.4\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"\
    14.6\"));\nconsole.log(closest_integer(\"14.7\"));\nconsole.log(closest_integer(\"\
    14.8\"));\nconsole.log(closest_integer(\"14.9\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    -14

    -15

    -14

    -14

    -14

    -14

    -14

    -15

    -15

    -15

    -15

    -15

    14

    14

    14

    14

    14

    15

    15

    15

    15

    15

    '
  timestamp: 1660003993
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"-14.4\"\
    ));\nconsole.log(closest_integer(\"14.6\"));\nconsole.log(closest_integer(\"-14.6\"\
    ));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"-14.0\"\
    ));\nconsole.log(closest_integer(\"14.1\"));\nconsole.log(closest_integer(\"-14.1\"\
    ));\nconsole.log(closest_integer(\"14.9\"));\nconsole.log(closest_integer(\"-14.9\"\
    ));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_e1aa_ez.ts(44,35): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmp_e1aa_ez.ts(45,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp_e1aa_ez.ts(45,9): error TS1005: '','' expected.

    '
  timestamp: 1660003998
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  return num - floor > ceil - num ? ceil : floor;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmp1s7q86sa.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1s7q86sa.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '14

    -15

    '
  timestamp: 1660003998
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let num = parseFloat(value);\n  let floor = Math.floor(num);\n  let ceil =\
    \ Math.ceil(num);\n  let diffFloor = Math.abs(num - floor);\n  let diffCeil =\
    \ Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    14.6\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmp7h6i8pay.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7h6i8pay.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    -14

    14

    -15

    15

    '
  timestamp: 1660003998
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmptgj5711s.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmptgj5711s.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    -14

    -15

    '
  timestamp: 1660003998
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  return Math.round(parseFloat(value));\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmphwzo4v0u.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphwzo4v0u.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660003993
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0\
    \ ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    '
  timestamp: 1660003998
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpdd5f2fv8.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdd5f2fv8.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    -14

    -15

    '
  timestamp: 1660003998
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0\
    \ ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.4\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    14

    -14

    15

    -15

    15

    -15

    15

    -15

    15

    -15

    15

    -15

    15

    -15

    15

    -15

    15

    -15

    15

    -15

    15

    -15

    '
  timestamp: 1660003998
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let num = parseFloat(value);\n  let floor = Math.floor(num);\n  let ceil =\
    \ Math.ceil(num);\n  let diff1 = Math.abs(num - floor);\n  let diff2 = Math.abs(num\
    \ - ceil);\n  if (diff1 === diff2) {\n    return num > 0 ? ceil : floor;\n  }\
    \ else {\n    return diff1 < diff2 ? floor : ceil;\n  }\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.4\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpi0ybya8a.ts(48,9): error TS1005: '','' expected.

    '
  timestamp: 1660003998
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0\
    \ ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"14.0\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    -14

    -15

    -14

    14

    '
  timestamp: 1660003993
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diff = num - floor;\n  if (diff === 0.5) {\n    return\
    \ num > 0 ? ceil : floor;\n  }\n  return diff > 0.5 ? ceil : floor;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"\
    -14.9\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"\
    14.1\"));\nconsole.log(closest_integer(\"14.9\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    -14

    -15

    -14

    -14

    -15

    14

    14

    15

    '
  timestamp: 1660003998
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  return Math.round(parseFloat(value));\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmphwzo4v0u.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphwzo4v0u.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660003993
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let num = parseFloat(value);\n  let num1 = Math.ceil(num);\n  let num2 = Math.floor(num);\n\
    \  if (num - num2 > num1 - num) {\n    return num1;\n  } else {\n    return num2;\n\
    \  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmppaljrkot.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppaljrkot.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '14

    -15

    '
  timestamp: 1660003995
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let num = Number(value);\n  let floor = Math.floor(num);\n  let ceil = Math.ceil(num);\n\
    \  if (num - floor === 0.5) {\n    if (floor < 0) {\n      return floor;\n   \
    \ } else {\n      return ceil;\n    }\n  } else {\n    return Math.round(num);\n\
    \  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"\
    14.0\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    -14

    -15

    -14

    14

    '
  timestamp: 1660003998
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  if (num - floor < ceil - num) {\n    return floor;\n  }\
    \ else {\n    return ceil;\n  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\n\
    console.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmp9x1bhtet.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9x1bhtet.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660003993
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let num: number = Number(value);\n  let floor: number = Math.floor(num);\n\
    \  let ceil: number = Math.ceil(num);\n  let diffFloor: number = Math.abs(num\
    \ - floor);\n  let diffCeil: number = Math.abs(num - ceil);\n  if (diffFloor ===\
    \ diffCeil) {\n    return num > 0 ? ceil : floor;\n  } else {\n    return diffFloor\
    \ < diffCeil ? floor : ceil;\n  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\n\
    console.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"\
    ));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"-14.6\"\
    ));\nconsole.log(closest_integer(\"14.6\"));\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    -14

    14

    -15

    15

    '
  timestamp: 1660003998
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let num = parseFloat(value);\n  return Math.round(num);\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpo67x6qnn.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpo67x6qnn.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660003998
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpr7rn1lj9.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpr7rn1lj9.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660003993
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0\
    \ ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.4\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    14

    -14

    15

    -15

    15

    -15

    15

    -15

    15

    -15

    15

    -15

    15

    -15

    15

    -15

    15

    -15

    15

    -15

    15

    -15

    '
  timestamp: 1660003998
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let num = parseFloat(value);\n  let int = Math.round(num);\n  if (num - int\
    \ === 0.5) {\n    return int + 1;\n  } else {\n    return int;\n  }\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpci405e2h.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpci405e2h.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660003998
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0\
    \ ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"\
    -14.9\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"\
    14.1\"));\nconsole.log(closest_integer(\"14.9\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    -14

    -15

    -14

    -14

    -15

    14

    14

    15

    '
  timestamp: 1660004000
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  if (num - floor === 0.5) {\n    return num > 0 ? ceil :\
    \ floor;\n  }\n  return num - floor < ceil - num ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    -14

    -15

    '
  timestamp: 1660004000
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let num = parseFloat(value);\n  let num1 = Math.floor(num);\n  let num2 = Math.ceil(num);\n\
    \  if (num - num1 < num2 - num) {\n    return num1;\n  } else {\n    return num2;\n\
    \  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmphg1qmtqe.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphg1qmtqe.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660004000
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpdd5f2fv8.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdd5f2fv8.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    -14

    -15

    '
  timestamp: 1660003998
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0\
    \ ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"\
    -14.2\"));\nconsole.log(closest_integer(\"-14.3\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.7\"));\nconsole.log(closest_integer(\"\
    -14.8\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"\
    -14.2\"));\nconsole.log(closest_integer(\"-14.3\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.7\"));\nconsole.log(closest_integer(\"\
    -14.8\"));\nconsole.log(closest\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0s8j500u.ts(46,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp0s8j500u.ts(46,9): error TS1005: '','' expected.

    '
  timestamp: 1660004000
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    14.6\"));\nconsole.log(closest_integer(\"-14.7\"));\nconsole.log(closest_integer(\"\
    14.7\"));\nconsole.log(closest_integer(\"-14.8\"));\nconsole.log(closest_integer(\"\
    14.8\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"\
    14.9\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"\
    14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"\
    14.1\"));\nconsole.log(closest_integer(\"-14.2\"));\nconsole.log(closest_integer(\"\
    14.2\"));\nconsole.log(closest_integer(\"-14.3\"));\nconsole.log(closest_integer(\"\
    14.3\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmplk4pkpn6.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplk4pkpn6.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    -14

    14

    -15

    15

    -15

    15

    -15

    15

    -15

    15

    -14

    14

    -14

    14

    -14

    14

    -14

    14

    '
  timestamp: 1660004000
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diff1 = Math.abs(num - floor);\n  const diff2 = Math.abs(num\
    \ - ceil);\n  return diff1 < diff2 ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpm0fvca91.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpm0fvca91.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    -14

    '
  timestamp: 1660004000
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0\
    \ ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"14.0\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    -14

    -15

    -14

    14

    '
  timestamp: 1660003993
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmp9uck_vpf.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9uck_vpf.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    -14

    -15

    -14

    -14

    -15

    '
  timestamp: 1660003996
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num < 0\
    \ ? floor : ceil;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    -14

    -15

    '
  timestamp: 1660004001
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpr7rn1lj9.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpr7rn1lj9.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660003993
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  return Math.round(parseFloat(value));\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmphwzo4v0u.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphwzo4v0u.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660003993
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  return num - floor > ceil - num ? ceil : floor;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmp1s7q86sa.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1s7q86sa.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '14

    -15

    '
  timestamp: 1660003998
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0\
    \ ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"14.0\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    -14

    -15

    -14

    14

    '
  timestamp: 1660004001
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  return num - floor >= ceil - num ? ceil : floor;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpj7msg51i.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpj7msg51i.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660003998
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpr7rn1lj9.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpr7rn1lj9.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660003993
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let num = parseFloat(value);\n  let num1 = Math.ceil(num);\n  let num2 = Math.floor(num);\n\
    \  if (num - num2 > num1 - num) {\n    return num1;\n  } else {\n    return num2;\n\
    \  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmppaljrkot.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppaljrkot.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '14

    -15

    '
  timestamp: 1660003995
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const number = Number(value);\n  const floor = Math.floor(number);\n  const\
    \ ceil = Math.ceil(number);\n  if (number - floor < ceil - number) {\n    return\
    \ floor;\n  } else {\n    return ceil;\n  }\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmps7rjb_es.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmps7rjb_es.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660004001
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  return diffFloor > diffCeil ? ceil : floor;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmp8h_ssfsu.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8h_ssfsu.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '14

    -15

    '
  timestamp: 1660004001
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0\
    \ ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    '
  timestamp: 1660004001
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diff1 = Math.abs(num - floor);\n  const diff2 = Math.abs(num\
    \ - ceil);\n  return diff1 < diff2 ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpp0e29p61.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpp0e29p61.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660004001
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0\
    \ ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(clos\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfarukst2.ts(46,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpfarukst2.ts(46,9): error TS1005: '','' expected.

    '
  timestamp: 1660004001
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"\
    -14.1\"));\nconsole.log(closest_integer(\"-14.2\"));\nconsole.log(closest_integer(\"\
    -14.3\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.7\"));\nconsole.log(closest_integer(\"-14.8\"));\nconsole.log(closest_integer(\"\
    -14.9\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"\
    -14.1\"));\nconsole.log(closest_integer(\"-14.2\"));\nconsole.log(closest_integer(\"\
    -14.3\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.7\"));\nconsole.log(closest_integer(\"-14.8\"));\nconsole.log(closest_integer(\"\
    -14.9\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmzyjw4dw.ts(44,9): error TS1003: Identifier expected.

    '
  timestamp: 1660004001
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diff = num - floor;\n  return diff < 0.5 ? floor\
    \ : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpzach4s_e.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpzach4s_e.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660004001
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diff = num - floor;\n  if (diff === 0.5) {\n    return\
    \ num > 0 ? ceil : floor;\n  }\n  return diff > 0.5 ? ceil : floor;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.49\"));\nconsole.log(closest_integer(\"-14.49\"));\nconsole.log(closest_integer(\"\
    14.51\"));\nconsole.log(closest_integer(\"-14.51\"));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    14

    -14

    15

    -15

    '
  timestamp: 1660004001
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpsa7ooye5.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpsa7ooye5.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660003996
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diff = num - floor;\n  return diff < 0.5 ? floor\
    \ : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"\
    14.6\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpimi3u6jh.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpimi3u6jh.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    -14

    -15

    14

    15

    '
  timestamp: 1660004001
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  if (num - floor === 0.5) {\n    return num > 0 ? ceil :\
    \ floor;\n  }\n  return num - floor < ceil - num ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"14.6\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    -14

    14

    -15

    15

    '
  timestamp: 1660004001
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const numFloor = Math.floor(num);\n  const\
    \ numCeil = Math.ceil(num);\n  const numFloorDiff = Math.abs(num - numFloor);\n\
    \  const numCeilDiff = Math.abs(num - numCeil);\n  if (numFloorDiff === numCeilDiff)\
    \ {\n    return num > 0 ? numCeil : numFloor;\n  }\n  return numFloorDiff < numCeilDiff\
    \ ? numFloor : numCeil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    '
  timestamp: 1660004001
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  if (num - floor === 0.5) {\n    return num > 0 ? ceil :\
    \ floor;\n  }\n  return num - floor < ceil - num ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"14.0\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    -14

    -15

    -14

    14

    '
  timestamp: 1660003995
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diff1 = Math.abs(num - floor);\n  const diff2 = Math.abs(num\
    \ - ceil);\n  if (diff1 === diff2) {\n    return num > 0 ? ceil : floor;\n  }\n\
    \  return diff1 < diff2 ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"\
    ));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"14.6\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    -14

    14

    -15

    15

    '
  timestamp: 1660004001
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let num = Number(value);\n  let floor = Math.floor(num);\n  let ceil = Math.ceil(num);\n\
    \  let diff1 = Math.abs(num - floor);\n  let diff2 = Math.abs(num - ceil);\n \
    \ if (diff1 === diff2) {\n    return num > 0 ? ceil : floor;\n  } else {\n   \
    \ return diff1 < diff2 ? floor : ceil;\n  }\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    -14

    -15

    '
  timestamp: 1660004001
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpr7rn1lj9.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpr7rn1lj9.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660003993
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  if (num - floor > ceil - num) {\n    return ceil;\n  }\
    \ else {\n    return floor;\n  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\n\
    console.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmpsp5j8uum.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpsp5j8uum.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '14

    -15

    '
  timestamp: 1660004001
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let num = parseFloat(value);\n  let floor = Math.floor(num);\n  let ceil =\
    \ Math.ceil(num);\n  if (num - floor > ceil - num) {\n    return ceil;\n  } else\
    \ {\n    return floor;\n  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmpolm94m8r.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpolm94m8r.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '14

    -15

    '
  timestamp: 1660004001
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num < 0\
    \ ? floor : ceil;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"\
    -14.2\"));\nconsole.log(closest_integer(\"-14.3\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.7\"));\nconsole.log(closest_integer(\"\
    -14.8\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"\
    -14.9\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"\
    -14.9\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"\
    -14.9\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"\
    -14.9\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"\
    -14.9\"));\nconsole.log(closest\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmim7p3bd.ts(46,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpmim7p3bd.ts(46,9): error TS1005: '','' expected.

    '
  timestamp: 1660004002
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let num = parseFloat(value);\n  let num1 = Math.ceil(num);\n  let num2 = Math.floor(num);\n\
    \  if (num1 - num === 0.5) {\n    return num1;\n  } else if (num - num2 === 0.5)\
    \ {\n    return num2;\n  } else if (num1 - num < 0.5) {\n    return num1;\n  }\
    \ else {\n    return num2;\n  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\n\
    console.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"\
    ));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"14.0\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpjzbugh0w.js:38:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpjzbugh0w.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    -14

    -15

    -14

    14

    '
  timestamp: 1660004003
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  return Math.round(parseFloat(value));\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmphwzo4v0u.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphwzo4v0u.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660003993
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let num = parseFloat(value);\n  let floor = Math.floor(num);\n  let ceil =\
    \ Math.ceil(num);\n  let diff1 = Math.abs(num - floor);\n  let diff2 = Math.abs(num\
    \ - ceil);\n  if (diff1 < diff2) {\n    return floor;\n  } else {\n    return\
    \ ceil;\n  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    14.6\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmp_d51syfb.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_d51syfb.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    -14

    14

    -15

    15

    '
  timestamp: 1660004003
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diff1 = Math.abs(num - floor);\n  const diff2 = Math.abs(num\
    \ - ceil);\n  return diff1 < diff2 ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmp6zs7ci4o.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6zs7ci4o.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660004003
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diff = num - floor;\n  if (diff === 0.5) {\n    return\
    \ floor < 0 ? floor : ceil;\n  }\n  return diff < 0.5 ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"14.0\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    -14

    -15

    -14

    14

    '
  timestamp: 1660004003
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  return Math.round(parseFloat(value));\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmphwzo4v0u.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphwzo4v0u.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660003993
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"\
    -14.1\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"\
    -14.99\"));\nconsole.log(closest_integer(\"-14.01\"));\nconsole.log(closest_integer(\"\
    -14.001\"));\nconsole.log(closest_integer(\"-14.0001\"));\nconsole.log(closest_integer(\"\
    -14.00001\"));\nconsole.log(closest_integer(\"-14.000001\"));\nconsole.log(closest_integer(\"\
    -14.0000001\"));\nconsole.log(closest_integer(\"-14.00000001\"));\nconsole.log(closest_integer(\"\
    -14.000000001\"));\nconsole.log(closest_integer(\"-14.0000000001\"));\nconsole.log(closest_integer(\"\
    -14.00000000001\"));\nconsole.log(closest_integer(\"-14.000000000001\"));\nconsole.log(closest_integer(\"\
    -14.0000000000001\"));\nconsole.log(closest_integer(\"-14.00000000000001\"));\n\
    console.log(closest_integer(\"-14.000000000000001\"));\nconsole.log(closest_integer(\"\
    -14.0000000000000001\"));\nconsole.log(closest_integer(\"-14.00000000000000001\"\
    ));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprh6n723r.ts(43,9): error TS1003: Identifier expected.

    '
  timestamp: 1660004003
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  if (num - floor > ceil - num) {\n    return ceil;\n  }\
    \ else {\n    return floor;\n  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\n\
    console.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmpsp5j8uum.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpsp5j8uum.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '14

    -15

    '
  timestamp: 1660004001
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"\
    14.0\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmplhqu4u2m.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplhqu4u2m.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    -14

    -15

    -14

    14

    '
  timestamp: 1660003993
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  return num - floor > ceil - num ? ceil : floor;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmp1s7q86sa.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1s7q86sa.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '14

    -15

    '
  timestamp: 1660003998
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  return num - floor > ceil - num ? ceil : floor;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmp1s7q86sa.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1s7q86sa.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '14

    -15

    '
  timestamp: 1660003998
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmptgj5711s.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmptgj5711s.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    -14

    -15

    '
  timestamp: 1660003998
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const numFloor = Math.floor(num);\n  const numCeil\
    \ = Math.ceil(num);\n  const numFloorDiff = Math.abs(num - numFloor);\n  const\
    \ numCeilDiff = Math.abs(num - numCeil);\n  return numFloorDiff < numCeilDiff\
    \ ? numFloor : numCeil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpx6h9qazq.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpx6h9qazq.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    -14

    -15

    '
  timestamp: 1660004003
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let num = parseFloat(value);\n  return Math.round(num);\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpo67x6qnn.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpo67x6qnn.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660003998
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diff1 = Math.abs(num - floor);\n  const diff2 = Math.abs(num\
    \ - ceil);\n  return diff1 < diff2 ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"\
    -14.9\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"\
    14.1\"));\nconsole.log(closest_integer(\"14.9\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpr6vvv_o5.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpr6vvv_o5.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    -14

    -15

    -14

    -14

    -15

    14

    14

    15

    '
  timestamp: 1660004003
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diff1 = Math.abs(num - floor);\n  const diff2 = Math.abs(num\
    \ - ceil);\n  if (diff1 === diff2) {\n    return num > 0 ? ceil : floor;\n  }\n\
    \  return diff1 < diff2 ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"\
    ));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    -14

    -15

    -15

    -14

    -15

    '
  timestamp: 1660004003
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let num = Number(value);\n  let floor = Math.floor(num);\n  let ceil = Math.ceil(num);\n\
    \  let diffFloor = Math.abs(num - floor);\n  let diffCeil = Math.abs(num - ceil);\n\
    \  if (diffFloor < diffCeil) {\n    return floor;\n  } else {\n    return ceil;\n\
    \  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmp46cx6id9.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp46cx6id9.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660004003
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num < 0\
    \ ? floor : ceil;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkb5qpfnw.ts(46,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpkb5qpfnw.ts(46,9): error TS1005: '','' expected.

    '
  timestamp: 1660004003
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"-14.4\"\
    ));\nconsole.log(closest_integer(\"14.6\"));\nconsole.log(closest_integer(\"-14.6\"\
    ));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"-14.0\"\
    ));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpett3otip.ts(44,34): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpett3otip.ts(45,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpett3otip.ts(45,9): error TS1005: '','' expected.

    '
  timestamp: 1660004003
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0\
    \ ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"\
    -14.9\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"\
    14.1\"));\nconsole.log(closest_integer(\"14.9\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    -14

    -15

    -14

    -14

    -15

    14

    14

    15

    '
  timestamp: 1660004000
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num < 0\
    \ ? floor : ceil;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"\
    14.4\"));\nconsole.log(closest_integer(\"14.6\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    -14

    -15

    -14

    14

    14

    15

    '
  timestamp: 1660004003
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  return diffFloor > diffCeil ? ceil : floor;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"\
    -14.1\"));\nconsole.log(closest_integer(\"-14.2\"));\nconsole.log(closest_integer(\"\
    -14.3\"));\nconsole.log(closest_integer(\"-14.7\"));\nconsole.log(closest_integer(\"\
    -14.8\"));\nconsole.log(closest_integer(\"-14.9\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmp3l2lrj_1.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp3l2lrj_1.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '14

    -15

    -15

    -14

    -14

    -14

    -14

    -14

    -15

    -15

    -15

    '
  timestamp: 1660004003
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diff = num - floor;\n  return diff < 0.5 ? floor\
    \ : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"\
    -14.1\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"\
    -14.99\"));\nconsole.log(closest_integer(\"-14.999\"));\nconsole.log(closest_integer(\"\
    -14.9999\"));\nconsole.log(closest_integer(\"-14.99999\"));\nconsole.log(closest_integer(\"\
    -14.999999\"));\nconsole.log(closest_integer(\"-14.9999999\"));\nconsole.log(closest_integer(\"\
    -14.99999999\"));\nconsole.log(closest_integer(\"-14.999999999\"));\nconsole.log(closest_integer(\"\
    -14.9999999999\"));\nconsole.log(closest_integer(\"-14.99999999999\"));\nconsole.log(closest_integer(\"\
    -14.999999999999\"));\nconsole.log(closest_integer(\"-14.9999999999999\"));\n\
    console.log(closest_integer(\"-14.99999999999999\"));\nconsole.log(closest_integer(\"\
    -14.999999999999999\"));\nconsole.log(closest_integer(\"-14.9999999999999999\"\
    ));\nconsole.log(closest_integer(\"-14.99999999999999999\"));\nconsole.log(closest_integer(\"\
    -14.999999999999999999\"));\nconsole.log(closest_integer(\"-14\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplr9jmr5k.ts(42,33): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmplr9jmr5k.ts(43,1): error TS1005: '','' expected.

    ../../../../../tmp/tmplr9jmr5k.ts(43,9): error TS1005: '','' expected.

    '
  timestamp: 1660004003
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0\
    \ ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    14.4\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    14.0\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    14.4\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    14.0\"));\nconsole.log(closest_integer(\"-14.0\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    15

    -15

    14

    -14

    14

    -14

    15

    -15

    15

    -15

    14

    -14

    14

    -14

    '
  timestamp: 1660004003
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diff1 = Math.abs(num - floor);\n  const diff2 = Math.abs(num\
    \ - ceil);\n  return diff1 < diff2 ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpp0e29p61.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpp0e29p61.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660004001
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const number = Number(value);\n  const floor = Math.floor(number);\n  const\
    \ ceil = Math.ceil(number);\n  const diffFloor = Math.abs(number - floor);\n \
    \ const diffCeil = Math.abs(number - ceil);\n  return diffFloor < diffCeil ? floor\
    \ : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmptjzg16s1.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmptjzg16s1.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660004003
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diff = num - floor;\n  return diff > 0.5 ? ceil :\
    \ floor;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"\
    14.6\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"\
    14.6\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmp2oncb0xh.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp2oncb0xh.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '14

    -15

    -14

    -15

    14

    15

    14

    -15

    -14

    -15

    14

    15

    '
  timestamp: 1660004003
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0\
    \ ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    14.4\"));\nconsole.log(closest_integer(\"14.6\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    -14

    -15

    14

    15

    '
  timestamp: 1660004003
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  if (num - floor === 0.5) {\n    return num > 0 ? ceil :\
    \ floor;\n  }\n  return num - floor < ceil - num ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"14.0\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    -14

    -15

    -14

    14

    '
  timestamp: 1660003995
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diff = num - floor;\n  return diff < 0.5 ? floor\
    \ : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpzach4s_e.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpzach4s_e.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660004001
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  return diffFloor > diffCeil ? ceil : floor;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"\
    -14.1\"));\nconsole.log(closest_integer(\"-14.9\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmpmxob6iov.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmxob6iov.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '14

    -15

    -14

    -15

    -14

    -14

    -15

    '
  timestamp: 1660004004
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num < 0\
    \ ? floor : ceil;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2f9ie260.ts(46,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp2f9ie260.ts(46,9): error TS1005: '','' expected.

    '
  timestamp: 1660004003
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let num = parseFloat(value);\n  return Math.round(num);\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpo67x6qnn.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpo67x6qnn.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660003998
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"14.6\"));\nconsole.log(closest_integer(\"-14.6\"\
    ));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"-14.4\"\
    ));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"-14.0\"\
    ));\nconsole.log(closest_integer(\"14.1\"));\nconsole.log(closest_integer(\"-14.1\"\
    ));\nconsole.log(closest_integer(\"14.2\"));\nconsole.log(closest_integer(\"-14.2\"\
    ));\nconsole.log(closest_integer(\"14.3\"));\nconsole.log(closest_integer(\"-14.3\"\
    ));\nconsole.log(closest_integer(\"14.7\"));\nconsole.log(closest_integer(\"-14.7\"\
    ));\nconsole.log(closest_integer(\"14.8\"));\nconsole.log(closest_integer(\"-14.8\"\
    ));\nconsole.log(closest_integer(\"14.9\"));\nconsole.log(closest_integer(\"-14.9\"\
    ));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpympmp1vw.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpympmp1vw.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    15

    -15

    14

    -14

    14

    -14

    14

    -14

    14

    -14

    14

    -14

    15

    -15

    15

    -15

    15

    -15

    '
  timestamp: 1660004004
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diff1 = Math.abs(num - floor);\n  const diff2 = Math.abs(num\
    \ - ceil);\n  if (diff1 === diff2) {\n    return num > 0 ? ceil : floor;\n  }\n\
    \  return diff1 < diff2 ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"\
    ));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"14.0\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    -14

    -15

    -14

    14

    '
  timestamp: 1660004003
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num < 0\
    \ ? floor : ceil;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    '
  timestamp: 1660003995
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpmc2_7rrs.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmc2_7rrs.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    -14

    -15

    -14

    '
  timestamp: 1660004005
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let num = Number(value);\n  return Math.round(num);\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmp44nr_na1.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp44nr_na1.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660004005
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor < diffCeil) {\n    return floor;\n\
    \  } else if (diffFloor > diffCeil) {\n    return ceil;\n  } else {\n    return\
    \ num > 0 ? ceil : floor;\n  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\n\
    console.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"\
    ));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"14.0\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    -14

    -15

    -14

    14

    '
  timestamp: 1660004005
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  if (floor === ceil) return floor;\n  return num - floor\
    \ < ceil - num ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\n\
    console.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"\
    ));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"0.0\"));\nconsole.log(closest_integer(\"\
    0.1\"));\nconsole.log(closest_integer(\"0.5\"));\nconsole.log(closest_integer(\"\
    0.9\"));\nconsole.log(closest_integer(\"1.0\"));\nconsole.log(closest_integer(\"\
    1.1\"));\nconsole.log(closest_integer(\"1.5\"));\nconsole.log(closest_integer(\"\
    1.9\"));\nconsole.log(closest_integer(\"2.0\"));\nconsole.log(closest_integer(\"\
    2.1\"));\nconsole.log(closest_integer(\"2.5\"));\nconsole.log(closest_integer(\"\
    2.9\"));\nconsole.log(closest_integer(\"3.0\"));\nconsole.log(closest_integer(\"\
    3.1\"));\nconsole.log(closest_integer(\"3.5\"));\nconsole.log(closest_integer(\"\
    3.9\"));\nconsole.log(closest_integer(\"4.0\"));\nconsole.log(closest_integer(\"\
    4.1\"));\nconsole.log(closest_integer(\"4.5\"));\nconsole.log(closest_integer(\"\
    4.9\"));\nconsole.log(closest_integer(\"5.0\"));\nconsole.log(closest_integer(\"\
    5.1\"));\nconsole.log(closest_integer(\"\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1ya3n0oc.ts(45,30): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmp1ya3n0oc.ts(46,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp1ya3n0oc.ts(46,9): error TS1005: '','' expected.

    '
  timestamp: 1660004005
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let num = Number(value);\n  let floor = Math.floor(num);\n  let ceil = Math.ceil(num);\n\
    \  let diff = num - floor;\n  if (diff === 0.5) {\n    return num > 0 ? ceil :\
    \ floor;\n  }\n  return diff > 0.5 ? ceil : floor;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    '
  timestamp: 1660004006
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num: number = Number(value);\n  const floor: number = Math.floor(num);\n\
    \  const ceil: number = Math.ceil(num);\n  const diffFloor: number = Math.abs(num\
    \ - floor);\n  const diffCeil: number = Math.abs(num - ceil);\n  if (diffFloor\
    \ === diffCeil) {\n    return num > 0 ? ceil : floor;\n  }\n  return diffFloor\
    \ < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.4\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprb6scht3.ts(44,35): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmprb6scht3.ts(45,1): error TS1005: '','' expected.

    ../../../../../tmp/tmprb6scht3.ts(45,9): error TS1005: '','' expected.

    '
  timestamp: 1660004005
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfa9scyir.ts(44,9): error TS1003: Identifier expected.

    '
  timestamp: 1660004005
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let num = Number(value);\n  let floor = Math.floor(num);\n  let ceil = Math.ceil(num);\n\
    \  let diff1 = num - floor;\n  let diff2 = ceil - num;\n  if (diff1 === diff2)\
    \ {\n    return num > 0 ? ceil : floor;\n  } else {\n    return diff1 < diff2\
    \ ? floor : ceil;\n  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"\
    14.0\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"\
    14.6\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    -14

    -15

    -14

    14

    14

    15

    '
  timestamp: 1660004005
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  return Math.round(parseFloat(value));\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmphwzo4v0u.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphwzo4v0u.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660003993
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  return Math.round(parseFloat(value));\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmphwzo4v0u.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphwzo4v0u.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660003993
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0\
    \ ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"\
    14.4\"));\nconsole.log(closest_integer(\"14.6\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    -15

    -14

    -14

    14

    14

    15

    '
  timestamp: 1660004006
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diff1 = Math.abs(num - floor);\n  const diff2 = Math.abs(num\
    \ - ceil);\n  return diff1 < diff2 ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpe8a9igh5.ts(45,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpe8a9igh5.ts(45,9): error TS1005: '','' expected.

    '
  timestamp: 1660004005
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0\
    \ ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"14.0\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    -14

    -15

    -14

    14

    '
  timestamp: 1660003993
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"\
    14.0\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"\
    14.6\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpm50drmc_.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpm50drmc_.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    -14

    -15

    -14

    14

    14

    15

    '
  timestamp: 1660004006
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0\
    \ ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwwdxsmmu.ts(46,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpwwdxsmmu.ts(46,9): error TS1005: '','' expected.

    '
  timestamp: 1660003996
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0\
    \ ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"\
    -14.2\"));\nconsole.log(closest_integer(\"-14.3\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.7\"));\nconsole.log(closest_integer(\"\
    -14.8\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"\
    -14.10\"));\nconsole.log(closest_integer(\"-14.11\"));\nconsole.log(closest_integer(\"\
    -14.12\"));\nconsole.log(closest_integer(\"-14.13\"));\nconsole.log(closest_integer(\"\
    -14.14\"));\nconsole.log(closest_integer(\"-14.15\"));\nconsole.log(closest_integer(\"\
    -14.16\"));\nconsole.log(closest_integer(\"-14.17\"));\nconsole.log(closest_integer(\"\
    -14.18\"));\nconsole.log(closest\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjx35dni6.ts(46,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpjx35dni6.ts(46,9): error TS1005: '','' expected.

    '
  timestamp: 1660004005
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \    const num = Number(value);\n    const floor = Math.floor(num);\n    const\
    \ ceil = Math.ceil(num);\n    const diffFloor = Math.abs(num - floor);\n    const\
    \ diffCeil = Math.abs(num - ceil);\n    return diffFloor < diffCeil ? floor :\
    \ ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"\
    -14.1\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"\
    -14.99\"));\nconsole.log(closest_integer(\"-14.999\"));\nconsole.log(closest_integer(\"\
    -14.9999\"));\nconsole.log(closest_integer(\"-14.99999\"));\nconsole.log(closest_integer(\"\
    -14.999999\"));\nconsole.log(closest_integer(\"-14.9999999\"));\nconsole.log(closest_integer(\"\
    -14.99999999\"));\nconsole.log(closest_integer(\"-14.999999999\"));\nconsole.log(closest_integer(\"\
    -14.9999999999\"));\nconsole.log(closest_integer(\"-14.99999999999\"));\nconsole.log(closest_integer(\"\
    -14.999999999999\"));\nconsole.log(closest_integer(\"-14.9999999999999\"));\n\
    console.log(closest_integer(\"-14.99999999999999\"));\nconsole.log(closest_integer(\"\
    -14.999999999999999\"));\nconsole.log(closest_integer(\"-14.9999999999999999\"\
    ));\nconsole.log(closest_integer(\"-14.99999999999999999\"));\nconsole.log(closest_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsrhr_8_7.ts(43,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpsrhr_8_7.ts(43,9): error TS1005: '','' expected.

    '
  timestamp: 1660004006
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  return Math.round(num);\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmp0be3yt0y.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0be3yt0y.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660003996
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num < 0\
    \ ? floor : ceil;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004006
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpr7rn1lj9.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpr7rn1lj9.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660003993
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpr7rn1lj9.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpr7rn1lj9.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660003993
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"\
    14.0\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"\
    14.0\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmp2lri6yvv.js:39:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp2lri6yvv.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    -14

    14

    -15

    15

    -14

    14

    -14

    15

    -14

    14

    -15

    15

    -14

    14

    '
  timestamp: 1660004006
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  return Math.round(num);\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmp0be3yt0y.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0be3yt0y.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660003996
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let num = Number(value);\n  let floor = Math.floor(num);\n  let ceil = Math.ceil(num);\n\
    \  let diff1 = Math.abs(num - floor);\n  let diff2 = Math.abs(num - ceil);\n \
    \ if (diff1 === diff2) {\n    return num > 0 ? ceil : floor;\n  } else {\n   \
    \ return diff1 < diff2 ? floor : ceil;\n  }\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    -14

    -15

    '
  timestamp: 1660004001
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num < 0\
    \ ? floor : ceil;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    14.4\"));\nconsole.log(closest_integer(\"14.6\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    -14

    -15

    14

    15

    '
  timestamp: 1660004006
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0\
    \ ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"\
    14.4\"));\nconsole.log(closest_integer(\"14.6\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    -14

    -15

    -14

    14

    14

    15

    '
  timestamp: 1660004006
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0\
    \ ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"\
    -14.9\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"\
    14.1\"));\nconsole.log(closest_integer(\"14.9\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    -14

    -15

    -14

    -14

    -15

    14

    14

    15

    '
  timestamp: 1660004006
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  if (num - floor === 0.5) {\n    return num > 0 ? ceil :\
    \ floor;\n  }\n  return num - floor < ceil - num ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"\
    14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    -14

    14

    15

    -15

    '
  timestamp: 1660004006
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let num = Number(value);\n  let floor = Math.floor(num);\n  let ceil = Math.ceil(num);\n\
    \  let diffFloor = Math.abs(num - floor);\n  let diffCeil = Math.abs(num - ceil);\n\
    \  if (diffFloor === diffCeil) {\n    return num > 0 ? ceil : floor;\n  } else\
    \ {\n    return diffFloor < diffCeil ? floor : ceil;\n  }\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"14.0\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    -14

    -15

    -14

    14

    '
  timestamp: 1660004006
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num < 0\
    \ ? floor : ceil;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"\
    -14.2\"));\nconsole.log(closest_integer(\"-14.3\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.7\"));\nconsole.log(closest_integer(\"\
    -14.8\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"\
    -14.10\"));\nconsole.log(closest_integer(\"-14.11\"));\nconsole.log(closest_integer(\"\
    -14.12\"));\nconsole.log(closest_integer(\"-14.13\"));\nconsole.log(closest_integer(\"\
    -14.14\"));\nconsole.log(closest_integer(\"-14.15\"));\nconsole.log(closest_integer(\"\
    -14.16\"));\nconsole.log(closest_integer(\"-14.17\"));\nconsole.log(closest_integer(\"\
    -14.18\"));\nconsole.log(clos\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpa30bgxcz.ts(46,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpa30bgxcz.ts(46,9): error TS1005: '','' expected.

    '
  timestamp: 1660004006
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diff1 = Math.abs(num - floor);\n  const diff2 = Math.abs(num\
    \ - ceil);\n  return diff1 < diff2 ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmp6zs7ci4o.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6zs7ci4o.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660004003
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num < 0\
    \ ? floor : ceil;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"\
    -14.2\"));\nconsole.log(closest_integer(\"-14.3\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.7\"));\nconsole.log(closest_integer(\"\
    -14.8\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"\
    -14.10\"));\nconsole.log(closest_integer(\"-14.11\"));\nconsole.log(closest_integer(\"\
    -14.12\"));\nconsole.log(closest_integer(\"-14.13\"));\nconsole.log(closest_integer(\"\
    -14.14\"));\nconsole.log(closest_integer(\"-14.15\"));\nconsole.log(closest_integer(\"\
    -14.16\"));\nconsole.log(closest_integer(\"-14.17\"));\nconsole.log(closest_integer(\"\
    -14.18\"));\nconsole.log(closest\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq2e6mba9.ts(46,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpq2e6mba9.ts(46,9): error TS1005: '','' expected.

    '
  timestamp: 1660004006
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const number = parseFloat(value);\n  const floor = Math.floor(number);\n  const\
    \ ceil = Math.ceil(number);\n  if (number - floor < ceil - number) {\n    return\
    \ floor;\n  } else {\n    return ceil;\n  }\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmppu29gy02.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppu29gy02.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660004006
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let num: number = parseFloat(value);\n  let numFloor: number = Math.floor(num);\n\
    \  let numCeil: number = Math.ceil(num);\n  let numFloorDiff: number = Math.abs(num\
    \ - numFloor);\n  let numCeilDiff: number = Math.abs(num - numCeil);\n  if (numFloorDiff\
    \ === numCeilDiff) {\n    return num > 0 ? numCeil : numFloor;\n  } else {\n \
    \   return numFloorDiff < numCeilDiff ? numFloor : numCeil;\n  }\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"-15.0\"));\nconsole.log(closest_integer(\"\
    -15.1\"));\nconsole.log(closest_integer(\"-15.5\"));\nconsole.log(closest_integer(\"\
    -15.6\"));\nconsole.log(closest_integer(\"-15.9\"));\nconsole.log(closest_integer(\"\
    -16.0\"));\nconsole.log(closest_integer(\"-16.1\"));\nconsole.log(closest_integer(\"\
    -16.5\"));\nconsole.log(closest_integer(\"-16.6\"));\nconsole.log(closest_integer(\"\
    -16.9\"));\nconsole.log(closest_integer(\"-17.0\"));\nconsole.log(closest_integer(\"\
    -17.1\"));\nconsole.log(closest_integer(\"-17.5\"));\nconsole.log(closest_integer(\"\
    -17.6\"));\nconsole.log(closest_integer(\"-17.9\"));\nconsole.log(closest_integer(\"\
    -18.0\"));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    -14

    -15

    -14

    -15

    -15

    -16

    -16

    -16

    -16

    -16

    -17

    -17

    -17

    -17

    -17

    -18

    -18

    -18

    -18

    '
  timestamp: 1660004007
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"\
    -14.1\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"\
    14.0\"));\nconsole.log(closest_integer(\"14.1\"));\nconsole.log(closest_integer(\"\
    14.9\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpx_tv_2js.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpx_tv_2js.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    -14

    -15

    -14

    -14

    -15

    14

    14

    15

    '
  timestamp: 1660004007
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  return Math.round(num);\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmp0be3yt0y.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0be3yt0y.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    '
  timestamp: 1660003996
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0\
    \ ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"14.0\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    -14

    -15

    -14

    14

    '
  timestamp: 1660003993
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0\
    \ ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    14.4\"));\nconsole.log(closest_integer(\"14.6\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.5\"));\nconsole.log(closest_\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnroupg07.ts(46,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpnroupg07.ts(46,9): error TS1005: '','' expected.

    '
  timestamp: 1660004007
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  return diffFloor > diffCeil ? ceil : floor;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmpyi0x2oke.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpyi0x2oke.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '14

    -15

    '
  timestamp: 1660004007
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const decimal = num - Math.floor(num);\n\
    \  return decimal < 0.5 ? Math.floor(num) : Math.ceil(num);\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"\
    -14.9\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"\
    14.1\"));\nconsole.log(closest_integer(\"14.9\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmp0xu3b_kv.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0xu3b_kv.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    -14

    -15

    -14

    -14

    -15

    14

    14

    15

    '
  timestamp: 1660004007
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0\
    \ ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    -14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"\
    -14.9\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"\
    14.1\"));\nconsole.log(closest_integer(\"14.9\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '15

    -15

    -14

    -15

    -14

    -14

    -15

    14

    14

    15

    '
  timestamp: 1660004000
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"\
    -14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    -14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"\
    14.6\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"\
    14.4\"));\nconsole.log(closest_integer(\"14.6\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmps1mdhzaw.js:36:12)\n    at Object.<anonymous>\
    \ (/tmp/tmps1mdhzaw.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    -14

    -15

    -14

    -14

    -15

    15

    14

    15

    15

    14

    15

    '
  timestamp: 1660004007
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil\
    \ = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil\
    \ = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\n\
    console.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"14.6\"));\nconsole.log(closest_integer(\"-14.6\"\
    ));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"-14.4\"\
    ));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"-14.0\"\
    ));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\nconsole.log(closest_integer(\"14.6\"));\nconsole.log(closest_integer(\"-14.6\"\
    ));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"-14.4\"\
    ));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"-14.0\"\
    ));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmp5zr9ks07.js:39:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp5zr9ks07.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '15

    -14

    15

    -15

    14

    -14

    14

    -14

    15

    -14

    15

    -15

    14

    -14

    14

    -14

    '
  timestamp: 1660004007
