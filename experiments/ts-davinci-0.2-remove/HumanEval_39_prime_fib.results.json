{
  "language": "ts",
  "name": "HumanEval_39_prime_fib",
  "results": [
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let i = 0;\n    let fib = 0;\n    let prime = 0;\n    while (i < n) {\n        fib = fibonacci(i);\n        if (isPrime(fib)) {\n            prime = fib;\n            i++;\n        }\n    }\n    return prime;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4l3b5f0f.ts(7,15): error TS2304: Cannot find name 'fibonacci'.\n../../../../tmp/tmp4l3b5f0f.ts(8,13): error TS2552: Cannot find name 'isPrime'. Did you mean 'prime'?\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib = fibonacci(n);\n    let prime = prime_nth(n);\n    let i = 0;\n    while (fib != prime) {\n        fib = fibonacci(n + i);\n        prime = prime_nth(n + i);\n        i++;\n    }\n    return fib;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfxzgjykr.ts(3,15): error TS2304: Cannot find name 'fibonacci'.\n../../../../tmp/tmpfxzgjykr.ts(4,17): error TS2304: Cannot find name 'prime_nth'.\n../../../../tmp/tmpfxzgjykr.ts(7,15): error TS2304: Cannot find name 'fibonacci'.\n../../../../tmp/tmpfxzgjykr.ts(8,17): error TS2304: Cannot find name 'prime_nth'.\n",
      "timestamp": 1660333620
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib: number = 0;\n    let i: number = 0;\n    let j: number = 1;\n    let count: number = 0;\n    while (count < n) {\n        let temp: number = i + j;\n        i = j;\n        j = temp;\n        if (isPrime(j)) {\n            count++;\n            fib = j;\n        }\n    }\n    return fib;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmptfsn4d0m.ts(11,13): error TS2304: Cannot find name 'isPrime'.\n",
      "timestamp": 1660333620
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 1];\n    let i: number = 2;\n    while (i < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        i++;\n    }\n    return fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmptuje8q1y.js:14:12)\n    at Object.<anonymous> (/tmp/tmptuje8q1y.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333620
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let i = 1;\n    let j = 1;\n    let k = 1;\n    let count = 1;\n    while (count < n) {\n        k = i + j;\n        i = j;\n        j = k;\n        if (isPrime(k)) {\n            count++;\n        }\n    }\n    return k;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp597gu095.ts(11,13): error TS2304: Cannot find name 'isPrime'.\n",
      "timestamp": 1660333620
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 1];\n    let i: number = 2;\n    while (i < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        i++;\n    }\n    return fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmptuje8q1y.js:14:12)\n    at Object.<anonymous> (/tmp/tmptuje8q1y.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333620
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let a: number = 0;\n    let b: number = 1;\n    let c: number = 0;\n    let i: number = 0;\n    while (i < n) {\n        c = a + b;\n        a = b;\n        b = c;\n        if (is_prime(c)) {\n            i++;\n        }\n    }\n    return c;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmptzxunk7r.ts(11,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333620
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_arr: number[] = [1, 1];\n    let i: number = 2;\n    while (i < n) {\n        fib_arr.push(fib_arr[i - 1] + fib_arr[i - 2]);\n        i++;\n    }\n    let prime_arr: number[] = prime_numbers(fib_arr[n - 1]);\n    return prime_arr[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpowvr5fz2.ts(9,31): error TS2304: Cannot find name 'prime_numbers'.\n",
      "timestamp": 1660333620
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib: number[] = [1, 1];\n    let i: number = 2;\n    let result: number = 0;\n    while (i < n) {\n        fib.push(fib[i - 1] + fib[i - 2]);\n        i++;\n    }\n    for (let j: number = 0; j < fib.length; j++) {\n        if (isPrime(fib[j])) {\n            result = fib[j];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpa5ksb7fe.ts(11,13): error TS2304: Cannot find name 'isPrime'.\n",
      "timestamp": 1660333620
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let a: number = 0;\n    let b: number = 1;\n    let c: number = 0;\n    let i: number = 0;\n    while (i < n) {\n        c = a + b;\n        a = b;\n        b = c;\n        if (is_prime(c)) {\n            i++;\n        }\n    }\n    return c;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmptzxunk7r.ts(11,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333620
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let i = 0;\n    let fib = 0;\n    while (i < n) {\n        fib = fibonacci(i);\n        if (is_prime(fib)) {\n            i++;\n        }\n    }\n    return fib;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmppy5kfwgx.ts(6,15): error TS2304: Cannot find name 'fibonacci'.\n../../../../tmp/tmppy5kfwgx.ts(7,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333620
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib = fibonacci(n);\n    while (!isPrime(fib)) {\n        fib = fibonacci(++n);\n    }\n    return fib;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpm2bhug5_.ts(3,15): error TS2304: Cannot find name 'fibonacci'.\n../../../../tmp/tmpm2bhug5_.ts(4,13): error TS2304: Cannot find name 'isPrime'.\n../../../../tmp/tmpm2bhug5_.ts(5,15): error TS2304: Cannot find name 'fibonacci'.\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 1];\n    let i: number = 2;\n    while (i < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        i++;\n    }\n    return fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmptuje8q1y.js:14:12)\n    at Object.<anonymous> (/tmp/tmptuje8q1y.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333620
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib = fibonacci(n);\n    let prime = is_prime(fib);\n    if (prime) {\n        return fib;\n    } else {\n        return prime_fib(n + 1);\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpcwox6ar_.ts(3,15): error TS2304: Cannot find name 'fibonacci'.\n../../../../tmp/tmpcwox6ar_.ts(4,17): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333620
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_num: number = 0;\n    let fib_num_prev: number = 0;\n    let fib_num_prev_prev: number = 0;\n    let i: number = 0;\n    while (i < n) {\n        if (i === 0) {\n            fib_num = 1;\n        } else if (i === 1) {\n            fib_num = 2;\n        } else {\n            fib_num = fib_num_prev + fib_num_prev_prev;\n        }\n        if (is_prime(fib_num)) {\n            i++;\n        }\n        fib_num_prev_prev = fib_num_prev;\n        fib_num_prev = fib_num;\n    }\n    return fib_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjv_eb217.ts(15,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333620
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_num = fib(n);\n    if (is_prime(fib_num)) {\n        return fib_num;\n    } else {\n        return prime_fib(n + 1);\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp90p6d638.ts(3,19): error TS2304: Cannot find name 'fib'.\n../../../../tmp/tmp90p6d638.ts(4,9): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333620
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib = fibonacci(n);\n    let prime = prime_numbers(n);\n    let i = 0;\n    let j = 0;\n    let result = 0;\n    while (i < fib.length && j < prime.length) {\n        if (fib[i] === prime[j]) {\n            result = fib[i];\n            i++;\n            j++;\n        } else if (fib[i] < prime[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv5aob4vq.ts(3,15): error TS2304: Cannot find name 'fibonacci'.\n../../../../tmp/tmpv5aob4vq.ts(4,17): error TS2304: Cannot find name 'prime_numbers'.\n",
      "timestamp": 1660333620
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 1];\n    let i: number = 2;\n    let fib_number: number = 0;\n    while (i <= n) {\n        fib_number = fib_numbers[i - 1] + fib_numbers[i - 2];\n        if (is_prime(fib_number)) {\n            fib_numbers.push(fib_number);\n            i++;\n        }\n    }\n    return fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpj3oevd04.ts(8,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333620
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib: number[] = [1, 1];\n    let i: number = 2;\n    while (i < n) {\n        fib.push(fib[i - 1] + fib[i - 2]);\n        i++;\n    }\n    let j: number = 0;\n    while (j < fib.length) {\n        if (isPrime(fib[j])) {\n            return fib[j];\n        }\n        j++;\n    }\n    return 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2q5mn9y0.ts(11,13): error TS2304: Cannot find name 'isPrime'.\n",
      "timestamp": 1660333620
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib = fibonacci(n);\n    let i = 0;\n    while (!isPrime(fib)) {\n        fib = fibonacci(n + ++i);\n    }\n    return fib;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpy8ij5xee.ts(3,15): error TS2304: Cannot find name 'fibonacci'.\n../../../../tmp/tmpy8ij5xee.ts(5,13): error TS2304: Cannot find name 'isPrime'.\n../../../../tmp/tmpy8ij5xee.ts(6,15): error TS2304: Cannot find name 'fibonacci'.\n",
      "timestamp": 1660333620
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_nums: number[] = [1, 1];\n    let i: number = 2;\n    let prime_fib_nums: number[] = [];\n    while (prime_fib_nums.length < n) {\n        fib_nums.push(fib_nums[i - 1] + fib_nums[i - 2]);\n        if (is_prime(fib_nums[i])) {\n            prime_fib_nums.push(fib_nums[i]);\n        }\n        i++;\n    }\n    return prime_fib_nums[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2uqagrpk.ts(8,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333620
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_arr: number[] = [1, 1];\n    let i: number = 2;\n    let fib_num: number = 0;\n    while (i <= n) {\n        fib_num = fib_arr[i - 1] + fib_arr[i - 2];\n        fib_arr.push(fib_num);\n        i++;\n    }\n    return fib_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpr_afa5fm.js:16:12)\n    at Object.<anonymous> (/tmp/tmpr_afa5fm.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333620
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib = [1, 1];\n    let i = 2;\n    while (fib.length < n) {\n        fib.push(fib[i - 1] + fib[i - 2]);\n        i++;\n    }\n    return fib[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpk903sf09.js:14:12)\n    at Object.<anonymous> (/tmp/tmpk903sf09.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333620
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib = fibonacci(n);\n    while (!isPrime(fib)) {\n        fib = fibonacci(++n);\n    }\n    return fib;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpm2bhug5_.ts(3,15): error TS2304: Cannot find name 'fibonacci'.\n../../../../tmp/tmpm2bhug5_.ts(4,13): error TS2304: Cannot find name 'isPrime'.\n../../../../tmp/tmpm2bhug5_.ts(5,15): error TS2304: Cannot find name 'fibonacci'.\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib: number[] = [1, 1];\n    let i: number = 2;\n    while (i < n) {\n        fib.push(fib[i - 1] + fib[i - 2]);\n        i++;\n    }\n    return fib[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp1b_py7ng.js:14:12)\n    at Object.<anonymous> (/tmp/tmp1b_py7ng.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333620
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 1];\n    let i: number = 2;\n    while (i < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        i++;\n    }\n    return fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmptuje8q1y.js:14:12)\n    at Object.<anonymous> (/tmp/tmptuje8q1y.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333620
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let a = 0;\n    let b = 1;\n    let c = 0;\n    let i = 0;\n    while (i < n) {\n        c = a + b;\n        a = b;\n        b = c;\n        if (isPrime(c)) {\n            i++;\n        }\n    }\n    return c;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplow17xmo.ts(11,13): error TS2304: Cannot find name 'isPrime'.\n",
      "timestamp": 1660333620
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let a = 1;\n    let b = 1;\n    let c = 2;\n    let i = 3;\n    while (i < n) {\n        a = b;\n        b = c;\n        c = a + b;\n        if (is_prime(c)) {\n            i++;\n        }\n    }\n    return c;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbb59scgk.ts(11,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333620
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fibonacci_numbers: number[] = [1, 2];\n    let i: number = 0;\n    let prime_fibonacci_numbers: number[] = [];\n    while (prime_fibonacci_numbers.length < n) {\n        if (is_prime(fibonacci_numbers[i])) {\n            prime_fibonacci_numbers.push(fibonacci_numbers[i]);\n        }\n        fibonacci_numbers.push(fibonacci_numbers[i] + fibonacci_numbers[i + 1]);\n        i++;\n    }\n    return prime_fibonacci_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpj85pvqmz.ts(7,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333623
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_num = fib(n);\n    while (!is_prime(fib_num)) {\n        fib_num = fib(++n);\n    }\n    return fib_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpudlqvlss.ts(3,19): error TS2304: Cannot find name 'fib'.\n../../../../tmp/tmpudlqvlss.ts(4,13): error TS2304: Cannot find name 'is_prime'.\n../../../../tmp/tmpudlqvlss.ts(5,19): error TS2304: Cannot find name 'fib'.\n",
      "timestamp": 1660333623
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 1];\n    let i: number = 2;\n    while (i < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        i++;\n    }\n    let prime_fib_numbers: number[] = [];\n    for (let i = 0; i < fib_numbers.length; i++) {\n        if (is_prime(fib_numbers[i])) {\n            prime_fib_numbers.push(fib_numbers[i]);\n        }\n    }\n    return prime_fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpp_9ccn04.ts(11,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333623
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let i: number = 0;\n    let fib: number = 0;\n    while (i < n) {\n        fib = fibonacci(i);\n        if (is_prime(fib)) {\n            i++;\n        }\n    }\n    return fib;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplqoh7or5.ts(6,15): error TS2304: Cannot find name 'fibonacci'.\n../../../../tmp/tmplqoh7or5.ts(7,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333623
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let i = 0;\n    let fib = 0;\n    while (i < n) {\n        fib = fibonacci(i);\n        if (is_prime(fib)) {\n            i++;\n        }\n    }\n    return fib;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmppy5kfwgx.ts(6,15): error TS2304: Cannot find name 'fibonacci'.\n../../../../tmp/tmppy5kfwgx.ts(7,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333620
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_num: number = fib(n);\n    while (!is_prime(fib_num)) {\n        fib_num = fib(++n);\n    }\n    return fib_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfv_x3v0h.ts(3,27): error TS2304: Cannot find name 'fib'.\n../../../../tmp/tmpfv_x3v0h.ts(4,13): error TS2304: Cannot find name 'is_prime'.\n../../../../tmp/tmpfv_x3v0h.ts(5,19): error TS2304: Cannot find name 'fib'.\n",
      "timestamp": 1660333623
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_num: number = 0;\n    let fib_num_prev: number = 0;\n    let fib_num_prev_prev: number = 0;\n    let i: number = 0;\n    let prime_count: number = 0;\n    while (prime_count < n) {\n        if (i == 0) {\n            fib_num = 1;\n            fib_num_prev = 0;\n            fib_num_prev_prev = 0;\n        } else if (i == 1) {\n            fib_num = 1;\n            fib_num_prev = 1;\n            fib_num_prev_prev = 0;\n        } else {\n            fib_num = fib_num_prev + fib_num_prev_prev;\n            fib_num_prev_prev = fib_num_prev;\n            fib_num_prev = fib_num;\n        }\n        if (is_prime(fib_num)) {\n            prime_count++;\n        }\n        i++;\n    }\n    return fib_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp5rmpbinu.ts(22,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333623
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 1];\n    let fib_prime_numbers: number[] = [1, 1];\n    let i: number = 2;\n    while (fib_prime_numbers.length < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        if (is_prime(fib_numbers[i])) {\n            fib_prime_numbers.push(fib_numbers[i]);\n        }\n        i++;\n    }\n    return fib_prime_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpn3skortq.ts(8,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333623
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_num = fib(n);\n    while (!is_prime(fib_num)) {\n        fib_num = fib(++n);\n    }\n    return fib_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpudlqvlss.ts(3,19): error TS2304: Cannot find name 'fib'.\n../../../../tmp/tmpudlqvlss.ts(4,13): error TS2304: Cannot find name 'is_prime'.\n../../../../tmp/tmpudlqvlss.ts(5,19): error TS2304: Cannot find name 'fib'.\n",
      "timestamp": 1660333623
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib = fibonacci(n);\n    let prime = prime_numbers(fib);\n    return prime[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7jrti0r9.ts(3,15): error TS2304: Cannot find name 'fibonacci'.\n../../../../tmp/tmp7jrti0r9.ts(4,17): error TS2304: Cannot find name 'prime_numbers'.\n",
      "timestamp": 1660333623
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 1];\n    let i: number = 2;\n    while (i < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        i++;\n    }\n    return fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmptuje8q1y.js:14:12)\n    at Object.<anonymous> (/tmp/tmptuje8q1y.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333620
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 1];\n    let i: number = 2;\n    while (i < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        i++;\n    }\n    return fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmptuje8q1y.js:14:12)\n    at Object.<anonymous> (/tmp/tmptuje8q1y.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333620
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 1];\n    let i: number = 2;\n    let current_fib: number = 0;\n    while (i < n) {\n        current_fib = fib_numbers[i - 1] + fib_numbers[i - 2];\n        if (is_prime(current_fib)) {\n            fib_numbers.push(current_fib);\n            i++;\n        }\n    }\n    return fib_numbers[fib_numbers.length - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0seuouze.ts(8,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333623
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib = [1, 1];\n    let i = 2;\n    while (i < n) {\n        fib.push(fib[i - 1] + fib[i - 2]);\n        i++;\n    }\n    return fib[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp77hs5usx.js:14:12)\n    at Object.<anonymous> (/tmp/tmp77hs5usx.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333623
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_nums: number[] = [1, 1];\n    let i: number = 2;\n    while (fib_nums.length < n) {\n        fib_nums.push(fib_nums[i - 1] + fib_nums[i - 2]);\n        i++;\n    }\n    return fib_nums[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp9zk46pvg.js:14:12)\n    at Object.<anonymous> (/tmp/tmp9zk46pvg.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333623
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 1];\n    let i: number = 1;\n    while (i < n) {\n        fib_numbers.push(fib_numbers[i] + fib_numbers[i - 1]);\n        i++;\n    }\n    return fib_numbers.filter(isPrime)[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpe8s36h4r.ts(9,31): error TS2304: Cannot find name 'isPrime'.\n",
      "timestamp": 1660333623
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let i = 1;\n    let fib = 1;\n    let prime_fib = 0;\n    while (i <= n) {\n        if (is_prime(fib)) {\n            prime_fib = fib;\n            i++;\n        }\n        fib++;\n    }\n    return prime_fib;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8e25gntw.ts(7,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333623
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib: number = 0;\n    let i: number = 0;\n    let j: number = 1;\n    let k: number = 0;\n    let count: number = 0;\n    while (count < n) {\n        k = i + j;\n        i = j;\n        j = k;\n        if (isPrime(k)) {\n            fib = k;\n            count++;\n        }\n    }\n    return fib;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpc82ckn6v.ts(12,13): error TS2304: Cannot find name 'isPrime'.\n",
      "timestamp": 1660333623
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let i = 0;\n    let fib = 0;\n    let prime = 0;\n    while (i < n) {\n        fib = fibonacci(prime);\n        if (isPrime(fib)) {\n            i++;\n        }\n        prime++;\n    }\n    return fib;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpi_mp6rv_.ts(7,15): error TS2304: Cannot find name 'fibonacci'.\n../../../../tmp/tmpi_mp6rv_.ts(8,13): error TS2552: Cannot find name 'isPrime'. Did you mean 'prime'?\n",
      "timestamp": 1660333623
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 1];\n    let i: number = 2;\n    while (i < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        i++;\n    }\n    return fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmptuje8q1y.js:14:12)\n    at Object.<anonymous> (/tmp/tmptuje8q1y.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333620
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let i: number = 0;\n    let fib: number = 0;\n    let fib_prev: number = 0;\n    let fib_prev2: number = 0;\n    let prime: boolean = false;\n    while (i < n) {\n        if (i == 0) {\n            fib = 1;\n            fib_prev = 0;\n            fib_prev2 = 0;\n        } else if (i == 1) {\n            fib = 1;\n            fib_prev = 1;\n            fib_prev2 = 0;\n        } else {\n            fib = fib_prev + fib_prev2;\n            fib_prev2 = fib_prev;\n            fib_prev = fib;\n        }\n        prime = true;\n        for (let j: number = 2; j < fib; j++) {\n            if (fib % j == 0) {\n                prime = false;\n                break;\n            }\n        }\n        if (prime) {\n            i++;\n        }\n    }\n    return fib;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpwo2tf_b3.js:40:12)\n    at Object.<anonymous> (/tmp/tmpwo2tf_b3.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333623
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib: number = 0;\n    let i: number = 0;\n    let j: number = 1;\n    let k: number = 0;\n    let count: number = 0;\n    while (count < n) {\n        k = i + j;\n        i = j;\n        j = k;\n        if (isPrime(k)) {\n            fib = k;\n            count++;\n        }\n    }\n    return fib;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpc82ckn6v.ts(12,13): error TS2304: Cannot find name 'isPrime'.\n",
      "timestamp": 1660333623
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n  let i = 0;\n  let fib = 0;\n  while (i < n) {\n    fib = fibonacci(i);\n    if (isPrime(fib)) {\n      i++;\n    }\n  }\n  return fib;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpknp8c6xd.ts(6,11): error TS2304: Cannot find name 'fibonacci'.\n../../../../tmp/tmpknp8c6xd.ts(7,9): error TS2304: Cannot find name 'isPrime'.\n",
      "timestamp": 1660333623
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib: number = 1;\n    let count: number = 1;\n    let i: number = 1;\n    while (count < n) {\n        i++;\n        fib = fibonacci(i);\n        if (isPrime(fib)) {\n            count++;\n        }\n    }\n    return fib;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp5cqoyvg3.ts(8,15): error TS2304: Cannot find name 'fibonacci'.\n../../../../tmp/tmp5cqoyvg3.ts(9,13): error TS2304: Cannot find name 'isPrime'.\n",
      "timestamp": 1660333623
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let i = 1;\n    let fib = 1;\n    let prime_fib = 0;\n    while (i <= n) {\n        if (is_prime(fib)) {\n            prime_fib = fib;\n            i++;\n        }\n        fib++;\n    }\n    return prime_fib;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8e25gntw.ts(7,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333623
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 2];\n    let i: number = 2;\n    while (i < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        i++;\n    }\n    return fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpbzu4oarz.js:14:12)\n    at Object.<anonymous> (/tmp/tmpbzu4oarz.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333623
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib: number[] = [1, 1];\n    let i: number = 2;\n    while (i < n) {\n        fib.push(fib[i - 1] + fib[i - 2]);\n        i++;\n    }\n    return fib[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp1b_py7ng.js:14:12)\n    at Object.<anonymous> (/tmp/tmp1b_py7ng.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333620
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_num = fib(n);\n    let i = 1;\n    while (!is_prime(fib_num)) {\n        fib_num = fib(n + i);\n        i++;\n    }\n    return fib_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9978ncqn.ts(3,19): error TS2304: Cannot find name 'fib'.\n../../../../tmp/tmp9978ncqn.ts(5,13): error TS2304: Cannot find name 'is_prime'.\n../../../../tmp/tmp9978ncqn.ts(6,19): error TS2304: Cannot find name 'fib'.\n",
      "timestamp": 1660333623
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let i = 0;\n    let fib = 0;\n    let prime_fib = 0;\n    while (i < n) {\n        fib = fibonacci(i);\n        if (is_prime(fib)) {\n            prime_fib = fib;\n            i++;\n        }\n    }\n    return prime_fib;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpkgp4j4a7.ts(7,15): error TS2304: Cannot find name 'fibonacci'.\n../../../../tmp/tmpkgp4j4a7.ts(8,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333623
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let i = 0;\n    let j = 1;\n    let k = 0;\n    let count = 0;\n    while (count < n) {\n        k = i + j;\n        i = j;\n        j = k;\n        if (isPrime(k)) {\n            count++;\n        }\n    }\n    return k;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpb5oxf451.ts(11,13): error TS2304: Cannot find name 'isPrime'.\n",
      "timestamp": 1660333624
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 2];\n    let i: number = 2;\n    let fib_number: number = 0;\n    while (i < n) {\n        fib_number = fib_numbers[i - 1] + fib_numbers[i - 2];\n        if (is_prime(fib_number)) {\n            fib_numbers.push(fib_number);\n            i++;\n        }\n    }\n    return fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8nya26gr.ts(8,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333623
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 2];\n    let i: number = 2;\n    while (i < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        i++;\n    }\n    return fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpbzu4oarz.js:14:12)\n    at Object.<anonymous> (/tmp/tmpbzu4oarz.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333623
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let a: number = 1;\n    let b: number = 1;\n    let c: number = 0;\n    let i: number = 0;\n    while (i < n) {\n        c = a + b;\n        if (isPrime(c)) {\n            i++;\n        }\n        a = b;\n        b = c;\n    }\n    return c;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdodxj6uf.ts(9,13): error TS2304: Cannot find name 'isPrime'.\n",
      "timestamp": 1660333626
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib: number[] = [1, 1];\n    let i: number = 2;\n    while (i < n) {\n        fib.push(fib[i - 1] + fib[i - 2]);\n        i++;\n    }\n    return fib[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp1b_py7ng.js:14:12)\n    at Object.<anonymous> (/tmp/tmp1b_py7ng.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333620
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let i = 0;\n    let fib = 0;\n    let prime = 0;\n    while (i < n) {\n        fib = fibonacci(i);\n        if (isPrime(fib)) {\n            prime = fib;\n            i++;\n        }\n    }\n    return prime;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4l3b5f0f.ts(7,15): error TS2304: Cannot find name 'fibonacci'.\n../../../../tmp/tmp4l3b5f0f.ts(8,13): error TS2552: Cannot find name 'isPrime'. Did you mean 'prime'?\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib: number = 1;\n    let fib_prev: number = 1;\n    let i: number = 2;\n    while (i < n) {\n        let temp: number = fib;\n        fib += fib_prev;\n        fib_prev = temp;\n        i++;\n    }\n    return fib;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmppo9q9ur5.js:17:12)\n    at Object.<anonymous> (/tmp/tmppo9q9ur5.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333626
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 1];\n    let i: number = 2;\n    let prime_fib_number: number = 0;\n    while (i <= n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        if (is_prime(fib_numbers[i])) {\n            prime_fib_number = fib_numbers[i];\n            i++;\n        }\n    }\n    return prime_fib_number;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1psah8rq.ts(8,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333626
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib = fibonacci(n);\n    let prime = prime_number(n);\n    let i = 0;\n    let j = 0;\n    let result = 0;\n    while (i < n && j < n) {\n        if (fib[i] < prime[j]) {\n            i++;\n        } else if (fib[i] > prime[j]) {\n            j++;\n        } else {\n            result = fib[i];\n            i++;\n            j++;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpquxhjfyb.ts(3,15): error TS2304: Cannot find name 'fibonacci'.\n../../../../tmp/tmpquxhjfyb.ts(4,17): error TS2304: Cannot find name 'prime_number'.\n",
      "timestamp": 1660333626
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 2];\n    let i: number = 2;\n    let fib_number: number = 0;\n    while (i <= n) {\n        fib_number = fib_numbers[i - 1] + fib_numbers[i - 2];\n        if (is_prime(fib_number)) {\n            fib_numbers.push(fib_number);\n            i++;\n        }\n    }\n    return fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1zytya7g.ts(8,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333627
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 2];\n    let prime_fib_numbers: number[] = [2];\n    let i: number = 2;\n    while (prime_fib_numbers.length < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        if (is_prime(fib_numbers[i])) {\n            prime_fib_numbers.push(fib_numbers[i]);\n        }\n        i++;\n    }\n    return prime_fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxyimhc3g.ts(8,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333627
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_num = fib(n);\n    while (!is_prime(fib_num)) {\n        fib_num = fib(++n);\n    }\n    return fib_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpudlqvlss.ts(3,19): error TS2304: Cannot find name 'fib'.\n../../../../tmp/tmpudlqvlss.ts(4,13): error TS2304: Cannot find name 'is_prime'.\n../../../../tmp/tmpudlqvlss.ts(5,19): error TS2304: Cannot find name 'fib'.\n",
      "timestamp": 1660333623
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib: number[] = [1, 2];\n    let i: number = 2;\n    while (i < n) {\n        fib.push(fib[i - 1] + fib[i - 2]);\n        i++;\n    }\n    return fib[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpl2lq_mp6.js:14:12)\n    at Object.<anonymous> (/tmp/tmpl2lq_mp6.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333626
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let a = 0, b = 1, c = 0;\n    let i = 0;\n    while (i < n) {\n        c = a + b;\n        a = b;\n        b = c;\n        if (isPrime(c)) {\n            i++;\n        }\n    }\n    return c;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfkneouty.ts(9,13): error TS2304: Cannot find name 'isPrime'.\n",
      "timestamp": 1660333626
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_num: number = 0;\n    let fib_num_prev: number = 0;\n    let fib_num_prev_prev: number = 0;\n    let prime_fib_num: number = 0;\n    let prime_fib_num_prev: number = 0;\n    let prime_fib_num_prev_prev: number = 0;\n    let prime_fib_num_prev_prev_prev: number = 0;\n    let prime_fib_num_prev_prev_prev_prev: number = 0;\n    let prime_fib_num_prev_prev_prev_prev_prev: number = 0;\n    let prime_fib_num_prev_prev_prev_prev_prev_prev: number = 0;\n    let prime_fib_num_prev_prev_prev_prev_prev_prev_prev: number = 0;\n    let prime_fib_num_prev_prev_prev_prev_prev_prev_prev_prev: number = 0;\n    let prime_fib_num_prev_prev_prev_prev_prev_prev_prev_prev_prev: number = 0;\n    let prime_fib_num_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev: number = 0;\n    let prime_fib_num_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev: number = 0;\n    let prime_fib_num_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev: number = 0;\n    let prime_fib_num_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev: number = 0;\n    let prime_fib_num_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev: number = 0;\n    let prime_fib_num_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev: number = 0;\n    let prime_fib_num\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpq1fymanj.ts(41,8): error TS1005: '}' expected.\n",
      "timestamp": 1660333627
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib: number = 0;\n    let i: number = 0;\n    while (i < n) {\n        fib = fibonacci(i);\n        if (is_prime(fib)) {\n            i++;\n        }\n    }\n    return fib;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpslaxjg49.ts(6,15): error TS2304: Cannot find name 'fibonacci'.\n../../../../tmp/tmpslaxjg49.ts(7,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333627
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let a: number = 0;\n    let b: number = 1;\n    let c: number = 0;\n    let i: number = 0;\n    while (i < n) {\n        c = a + b;\n        a = b;\n        b = c;\n        if (is_prime(c)) {\n            i++;\n        }\n    }\n    return c;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmptzxunk7r.ts(11,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333620
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let a = 1;\n    let b = 1;\n    let c = 0;\n    let i = 0;\n    while (i < n) {\n        if (isPrime(b)) {\n            i++;\n        }\n        c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4cqo3591.ts(8,13): error TS2304: Cannot find name 'isPrime'.\n",
      "timestamp": 1660333627
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib: number = 0;\n    let i: number = 0;\n    let fib_prime: number = 0;\n    let prime_count: number = 0;\n    while (prime_count < n) {\n        fib = fibonacci(i);\n        if (is_prime(fib)) {\n            fib_prime = fib;\n            prime_count++;\n        }\n        i++;\n    }\n    return fib_prime;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpu5wogzie.ts(8,15): error TS2304: Cannot find name 'fibonacci'.\n../../../../tmp/tmpu5wogzie.ts(9,13): error TS2552: Cannot find name 'is_prime'. Did you mean 'fib_prime'?\n",
      "timestamp": 1660333627
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib: number[] = [1, 2];\n    let i: number = 2;\n    while (i < n) {\n        fib.push(fib[i - 1] + fib[i - 2]);\n        i++;\n    }\n    return fib[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpl2lq_mp6.js:14:12)\n    at Object.<anonymous> (/tmp/tmpl2lq_mp6.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333626
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 1];\n    let i: number = 1;\n    while (fib_numbers.length < n) {\n        fib_numbers.push(fib_numbers[i] + fib_numbers[i - 1]);\n        i++;\n    }\n    return fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpx2ob5ial.js:14:12)\n    at Object.<anonymous> (/tmp/tmpx2ob5ial.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333627
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 1];\n    let i: number = 2;\n    while (i < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        i++;\n    }\n    let prime_fib_numbers: number[] = [];\n    for (let j = 0; j < fib_numbers.length; j++) {\n        if (is_prime(fib_numbers[j])) {\n            prime_fib_numbers.push(fib_numbers[j]);\n        }\n    }\n    return prime_fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpihcf68q4.ts(11,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333626
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib = fibonacci(n);\n    if (isPrime(fib)) {\n        return fib;\n    } else {\n        return prime_fib(n + 1);\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpiajh4z7c.ts(3,15): error TS2304: Cannot find name 'fibonacci'.\n../../../../tmp/tmpiajh4z7c.ts(4,9): error TS2304: Cannot find name 'isPrime'.\n",
      "timestamp": 1660333627
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let a: number = 1;\n    let b: number = 1;\n    let c: number = 1;\n    let i: number = 2;\n    while (i < n) {\n        c = a + b;\n        a = b;\n        b = c;\n        if (is_prime(c)) {\n            i++;\n        }\n    }\n    return c;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpb15e7_tb.ts(11,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333627
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 1];\n    let prime_fib_numbers: number[] = [1, 1];\n    let i: number = 2;\n    while (prime_fib_numbers.length < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        if (is_prime(fib_numbers[i])) {\n            prime_fib_numbers.push(fib_numbers[i]);\n        }\n        i++;\n    }\n    return prime_fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpx_xkxhrb.ts(8,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333627
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib: number[] = [];\n    let i: number = 0;\n    let j: number = 1;\n    let k: number = 0;\n    while (k < n) {\n        if (isPrime(j)) {\n            fib.push(j);\n            k++;\n        }\n        j = i + j;\n        i = j - i;\n    }\n    return fib[fib.length - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgo2zl3t.ts(8,13): error TS2304: Cannot find name 'isPrime'.\n",
      "timestamp": 1660333627
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 1];\n    let i: number = 2;\n    while (i <= n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        i++;\n    }\n    let prime_fib_numbers: number[] = [];\n    for (let j: number = 0; j < fib_numbers.length; j++) {\n        if (is_prime(fib_numbers[j])) {\n            prime_fib_numbers.push(fib_numbers[j]);\n        }\n    }\n    return prime_fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpntgrykik.ts(11,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333627
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let i = 0;\n    let fib = 0;\n    while (i < n) {\n        fib = fibonacci(i);\n        if (is_prime(fib)) {\n            i++;\n        }\n    }\n    return fib;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmppy5kfwgx.ts(6,15): error TS2304: Cannot find name 'fibonacci'.\n../../../../tmp/tmppy5kfwgx.ts(7,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333620
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let a = 0;\n    let b = 1;\n    let c = 1;\n    let i = 0;\n    while (i < n) {\n        if (isPrime(c)) {\n            i++;\n        }\n        a = b;\n        b = c;\n        c = a + b;\n    }\n    return c;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpzay6mf9e.ts(8,13): error TS2304: Cannot find name 'isPrime'.\n",
      "timestamp": 1660333627
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let a = 0;\n    let b = 1;\n    let c = 0;\n    let i = 0;\n    while (i < n) {\n        c = a + b;\n        if (isPrime(c)) {\n            i++;\n        }\n        a = b;\n        b = c;\n    }\n    return c;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp44i3xv4g.ts(9,13): error TS2304: Cannot find name 'isPrime'.\n",
      "timestamp": 1660333627
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 2];\n    let i: number = 2;\n    while (i < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        i++;\n    }\n    return fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpbzu4oarz.js:14:12)\n    at Object.<anonymous> (/tmp/tmpbzu4oarz.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333623
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 1];\n    let i: number = 1;\n    while (i < n) {\n        fib_numbers.push(fib_numbers[i] + fib_numbers[i - 1]);\n        i++;\n    }\n    return fib_numbers.filter(isPrime)[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpe8s36h4r.ts(9,31): error TS2304: Cannot find name 'isPrime'.\n",
      "timestamp": 1660333623
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 1];\n    let prime_fib_numbers: number[] = [1, 1];\n    let i: number = 2;\n    while (prime_fib_numbers.length < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        if (is_prime(fib_numbers[i])) {\n            prime_fib_numbers.push(fib_numbers[i]);\n        }\n        i++;\n    }\n    return prime_fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpx_xkxhrb.ts(8,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333627
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib: number = 1;\n    let fib_prev: number = 1;\n    let i: number = 2;\n    while (i <= n) {\n        let temp: number = fib;\n        fib += fib_prev;\n        fib_prev = temp;\n        if (is_prime(fib)) {\n            i++;\n        }\n    }\n    return fib;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_27nvko6.ts(10,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333627
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_prime: number = 0;\n    let i: number = 0;\n    let j: number = 1;\n    let k: number = 0;\n    let count: number = 0;\n    while (count < n) {\n        k = i + j;\n        i = j;\n        j = k;\n        if (is_prime(k)) {\n            fib_prime = k;\n            count++;\n        }\n    }\n    return fib_prime;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsew_cwnh.ts(12,13): error TS2552: Cannot find name 'is_prime'. Did you mean 'fib_prime'?\n",
      "timestamp": 1660333627
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 1];\n    let i: number = 2;\n    while (i < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        i++;\n    }\n    return fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmptuje8q1y.js:14:12)\n    at Object.<anonymous> (/tmp/tmptuje8q1y.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333620
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib = fibonacci(n);\n    let prime = prime_number(n);\n    let i = 0;\n    let j = 0;\n    while (i < n && j < n) {\n        if (fib[i] === prime[j]) {\n            return fib[i];\n        } else if (fib[i] < prime[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbb7yg5yq.ts(3,15): error TS2304: Cannot find name 'fibonacci'.\n../../../../tmp/tmpbb7yg5yq.ts(4,17): error TS2304: Cannot find name 'prime_number'.\n",
      "timestamp": 1660333629
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 1];\n    let i: number = 2;\n    while (i < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        i++;\n    }\n    return fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmptuje8q1y.js:14:12)\n    at Object.<anonymous> (/tmp/tmptuje8q1y.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333620
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 1];\n    let i: number = 2;\n    while (i < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        i++;\n    }\n    return fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmptuje8q1y.js:14:12)\n    at Object.<anonymous> (/tmp/tmptuje8q1y.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333620
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 1];\n    let i: number = 2;\n    while (i < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        i++;\n    }\n    return fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmptuje8q1y.js:14:12)\n    at Object.<anonymous> (/tmp/tmptuje8q1y.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333620
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib = fibonacci(n);\n    let prime = prime_numbers(n);\n    let i = 0;\n    let j = 0;\n    let result = 0;\n    while (i < fib.length && j < prime.length) {\n        if (fib[i] === prime[j]) {\n            result = fib[i];\n            i++;\n            j++;\n        } else if (fib[i] < prime[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv5aob4vq.ts(3,15): error TS2304: Cannot find name 'fibonacci'.\n../../../../tmp/tmpv5aob4vq.ts(4,17): error TS2304: Cannot find name 'prime_numbers'.\n",
      "timestamp": 1660333620
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let a: number = 0;\n    let b: number = 1;\n    let c: number = 0;\n    let i: number = 0;\n    while (i < n) {\n        c = a + b;\n        a = b;\n        b = c;\n        if (is_prime(c)) {\n            i++;\n        }\n    }\n    return c;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmptzxunk7r.ts(11,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333620
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let i = 0;\n    let j = 1;\n    let k = 1;\n    let count = 0;\n    while (count < n) {\n        k = i + j;\n        i = j;\n        j = k;\n        if (isPrime(k)) {\n            count++;\n        }\n    }\n    return k;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpemsa6w5r.ts(11,13): error TS2304: Cannot find name 'isPrime'.\n",
      "timestamp": 1660333630
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let i = 1;\n    let fib = 1;\n    let prime = false;\n    while (i < n) {\n        fib = fibonacci(i);\n        prime = isPrime(fib);\n        if (prime) {\n            i++;\n        }\n    }\n    return fib;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp39169fwn.ts(7,15): error TS2304: Cannot find name 'fibonacci'.\n../../../../tmp/tmp39169fwn.ts(8,17): error TS2552: Cannot find name 'isPrime'. Did you mean 'prime'?\n",
      "timestamp": 1660333630
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib = fibonacci(n);\n    let prime = prime_number(n);\n    let i = 0;\n    let j = 0;\n    let result = 0;\n    while (i < n) {\n        if (fib[i] === prime[j]) {\n            result = fib[i];\n            i++;\n            j++;\n        } else if (fib[i] < prime[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpoxqkdk6z.ts(3,15): error TS2304: Cannot find name 'fibonacci'.\n../../../../tmp/tmpoxqkdk6z.ts(4,17): error TS2304: Cannot find name 'prime_number'.\n",
      "timestamp": 1660333630
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 1];\n    let i: number = 2;\n    while (i < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        i++;\n    }\n    let prime_fib_numbers: number[] = [];\n    for (let number of fib_numbers) {\n        if (is_prime(number)) {\n            prime_fib_numbers.push(number);\n        }\n    }\n    return prime_fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4r8kpn09.ts(11,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333630
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 1];\n    let i: number = 2;\n    while (i < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        i++;\n    }\n    let prime_fib_numbers: number[] = fib_numbers.filter(isPrime);\n    return prime_fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2zonkgtj.ts(9,58): error TS2304: Cannot find name 'isPrime'.\n",
      "timestamp": 1660333630
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_nums: number[] = [1, 1];\n    let i: number = 2;\n    while (i < n) {\n        fib_nums.push(fib_nums[i - 1] + fib_nums[i - 2]);\n        i++;\n    }\n    return fib_nums[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp6cuifr3l.js:14:12)\n    at Object.<anonymous> (/tmp/tmp6cuifr3l.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333631
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let i = 0;\n    let fib = 0;\n    while (i < n) {\n        fib = fibonacci(i);\n        if (is_prime(fib)) {\n            i++;\n        }\n    }\n    return fib;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmppy5kfwgx.ts(6,15): error TS2304: Cannot find name 'fibonacci'.\n../../../../tmp/tmppy5kfwgx.ts(7,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333620
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_arr: number[] = [1, 1];\n    let i: number = 2;\n    while (i < n) {\n        fib_arr.push(fib_arr[i - 1] + fib_arr[i - 2]);\n        i++;\n    }\n    return fib_arr[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpcmbyjlkt.js:14:12)\n    at Object.<anonymous> (/tmp/tmpcmbyjlkt.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333630
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 1];\n    let i: number = 2;\n    while (i < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        i++;\n    }\n    return fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmptuje8q1y.js:14:12)\n    at Object.<anonymous> (/tmp/tmptuje8q1y.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333620
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 1];\n    let i: number = 2;\n    while (fib_numbers.length < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        i++;\n    }\n    let prime_fib_numbers: number[] = [];\n    for (let i: number = 0; i < fib_numbers.length; i++) {\n        if (is_prime(fib_numbers[i])) {\n            prime_fib_numbers.push(fib_numbers[i]);\n        }\n    }\n    return prime_fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpa_ri5ngm.ts(11,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333630
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib: number[] = [1, 1];\n    let i: number = 2;\n    while (i < n) {\n        fib.push(fib[i - 1] + fib[i - 2]);\n        i++;\n    }\n    return fib[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp1b_py7ng.js:14:12)\n    at Object.<anonymous> (/tmp/tmp1b_py7ng.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333620
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_num = fib(n);\n    let i = 1;\n    while (i < fib_num) {\n        if (is_prime(i) && is_fib(i)) {\n            n--;\n        }\n        i++;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpt2oc309u.ts(3,19): error TS2304: Cannot find name 'fib'.\n../../../../tmp/tmpt2oc309u.ts(6,13): error TS2304: Cannot find name 'is_prime'.\n../../../../tmp/tmpt2oc309u.ts(6,28): error TS2304: Cannot find name 'is_fib'.\n",
      "timestamp": 1660333630
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let i = 0;\n    let fib = 0;\n    while (i < n) {\n        fib = fibonacci(i);\n        if (is_prime(fib)) {\n            i++;\n        }\n    }\n    return fib;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmppy5kfwgx.ts(6,15): error TS2304: Cannot find name 'fibonacci'.\n../../../../tmp/tmppy5kfwgx.ts(7,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333620
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let i = 0;\n    let fib = 0;\n    while (i < n) {\n        fib = fibonacci(i);\n        if (is_prime(fib)) {\n            i++;\n        }\n    }\n    return fib;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmppy5kfwgx.ts(6,15): error TS2304: Cannot find name 'fibonacci'.\n../../../../tmp/tmppy5kfwgx.ts(7,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333620
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_arr: number[] = [1, 1];\n    let i: number = 2;\n    while (i < n) {\n        fib_arr.push(fib_arr[i - 1] + fib_arr[i - 2]);\n        i++;\n    }\n    let prime_arr: number[] = [];\n    for (let j: number = 0; j < fib_arr.length; j++) {\n        if (is_prime(fib_arr[j])) {\n            prime_arr.push(fib_arr[j]);\n        }\n    }\n    return prime_arr[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpkwnjs473.ts(11,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333630
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let i = 0;\n    let j = 1;\n    let fib = 0;\n    let count = 0;\n    while (count < n) {\n        fib = i + j;\n        i = j;\n        j = fib;\n        if (isPrime(fib)) {\n            count++;\n        }\n    }\n    return fib;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0ee3x7g2.ts(11,13): error TS2304: Cannot find name 'isPrime'.\n",
      "timestamp": 1660333630
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 1];\n    let i: number = 2;\n    while (i < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        i++;\n    }\n    return fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmptuje8q1y.js:14:12)\n    at Object.<anonymous> (/tmp/tmptuje8q1y.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333620
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 1];\n    let i: number = 2;\n    while (i < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        i++;\n    }\n    return fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmptuje8q1y.js:14:12)\n    at Object.<anonymous> (/tmp/tmptuje8q1y.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333620
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib = fibonacci(n);\n    while (!isPrime(fib)) {\n        fib = fibonacci(n);\n        n++;\n    }\n    return fib;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxc3jaawe.ts(3,15): error TS2304: Cannot find name 'fibonacci'.\n../../../../tmp/tmpxc3jaawe.ts(4,13): error TS2304: Cannot find name 'isPrime'.\n../../../../tmp/tmpxc3jaawe.ts(5,15): error TS2304: Cannot find name 'fibonacci'.\n",
      "timestamp": 1660333630
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib = fibonacci(n);\n    let i = 0;\n    while (!isPrime(fib)) {\n        fib = fibonacci(n + i);\n        i++;\n    }\n    return fib;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp02b5_caw.ts(3,15): error TS2304: Cannot find name 'fibonacci'.\n../../../../tmp/tmp02b5_caw.ts(5,13): error TS2304: Cannot find name 'isPrime'.\n../../../../tmp/tmp02b5_caw.ts(6,15): error TS2304: Cannot find name 'fibonacci'.\n",
      "timestamp": 1660333630
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 1];\n    let i: number = 2;\n    while (i < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        i++;\n    }\n    return fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmptuje8q1y.js:14:12)\n    at Object.<anonymous> (/tmp/tmptuje8q1y.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333620
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 2];\n    let i: number = 2;\n    while (i < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        i++;\n    }\n    return fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpbzu4oarz.js:14:12)\n    at Object.<anonymous> (/tmp/tmpbzu4oarz.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333623
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib: number = 0;\n    let i: number = 0;\n    let j: number = 1;\n    let count: number = 0;\n    while (count < n) {\n        let temp: number = i + j;\n        i = j;\n        j = temp;\n        if (isPrime(j)) {\n            count++;\n            fib = j;\n        }\n    }\n    return fib;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmptfsn4d0m.ts(11,13): error TS2304: Cannot find name 'isPrime'.\n",
      "timestamp": 1660333620
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let a = 1;\n    let b = 1;\n    let c = 0;\n    let i = 0;\n    while (i < n) {\n        c = a + b;\n        a = b;\n        b = c;\n        if (isPrime(c)) {\n            i++;\n        }\n    }\n    return c;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4shqzrov.ts(11,13): error TS2304: Cannot find name 'isPrime'.\n",
      "timestamp": 1660333630
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib = fibonacci(n);\n    let prime = prime_number(n);\n    while (fib != prime) {\n        if (fib > prime) {\n            prime = prime_number(++n);\n        } else {\n            fib = fibonacci(++n);\n        }\n    }\n    return fib;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdtjig8qj.ts(3,15): error TS2304: Cannot find name 'fibonacci'.\n../../../../tmp/tmpdtjig8qj.ts(4,17): error TS2304: Cannot find name 'prime_number'.\n../../../../tmp/tmpdtjig8qj.ts(7,21): error TS2304: Cannot find name 'prime_number'.\n../../../../tmp/tmpdtjig8qj.ts(9,19): error TS2304: Cannot find name 'fibonacci'.\n",
      "timestamp": 1660333630
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fibs = [1, 1];\n    let i = 2;\n    while (i < n) {\n        fibs.push(fibs[i - 1] + fibs[i - 2]);\n        i++;\n    }\n    return fibs[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpftv3_x_e.js:14:12)\n    at Object.<anonymous> (/tmp/tmpftv3_x_e.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333630
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 1];\n    let i: number = 2;\n    while (i < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        i++;\n    }\n    return fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmptuje8q1y.js:14:12)\n    at Object.<anonymous> (/tmp/tmptuje8q1y.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333620
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let i = 0;\n    let fib = 0;\n    while (i < n) {\n        fib = fibonacci(i);\n        if (is_prime(fib)) {\n            i++;\n        }\n    }\n    return fib;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmppy5kfwgx.ts(6,15): error TS2304: Cannot find name 'fibonacci'.\n../../../../tmp/tmppy5kfwgx.ts(7,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333620
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let a = 0;\n    let b = 1;\n    let c = 0;\n    let i = 0;\n    while (i < n) {\n        c = a + b;\n        if (isPrime(c)) {\n            i++;\n        }\n        a = b;\n        b = c;\n    }\n    return c;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp44i3xv4g.ts(9,13): error TS2304: Cannot find name 'isPrime'.\n",
      "timestamp": 1660333627
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 2];\n    let i: number = 2;\n    while (i < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        i++;\n    }\n    return fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpbzu4oarz.js:14:12)\n    at Object.<anonymous> (/tmp/tmpbzu4oarz.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333623
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 1];\n    let i: number = 1;\n    while (fib_numbers.length < n) {\n        fib_numbers.push(fib_numbers[i] + fib_numbers[i - 1]);\n        i++;\n    }\n    return fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpx2ob5ial.js:14:12)\n    at Object.<anonymous> (/tmp/tmpx2ob5ial.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333627
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 1];\n    let prime_fib_numbers: number[] = [1, 1];\n    let i: number = 2;\n    while (prime_fib_numbers.length < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        if (is_prime(fib_numbers[i])) {\n            prime_fib_numbers.push(fib_numbers[i]);\n        }\n        i++;\n    }\n    return prime_fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpx_xkxhrb.ts(8,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333627
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let a = 1;\n    let b = 1;\n    let c = 0;\n    let i = 1;\n    while (i < n) {\n        c = a + b;\n        a = b;\n        b = c;\n        if (is_prime(c)) {\n            i++;\n        }\n    }\n    return c;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9ow2617n.ts(11,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333631
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let f1 = 1;\n    let f2 = 1;\n    let f3 = 2;\n    let count = 2;\n    while (count < n) {\n        f1 = f2;\n        f2 = f3;\n        f3 = f1 + f2;\n        if (isPrime(f3)) {\n            count++;\n        }\n    }\n    return f3;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpzkqguvvd.ts(11,13): error TS2304: Cannot find name 'isPrime'.\n",
      "timestamp": 1660333630
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib: number[] = [1, 1];\n    let i: number = 2;\n    let prime_fib: number = 0;\n    while (i <= n) {\n        fib.push(fib[i - 1] + fib[i - 2]);\n        if (is_prime(fib[i])) {\n            prime_fib = fib[i];\n            i++;\n        }\n    }\n    return prime_fib;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpj3j2oay6.ts(8,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333630
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_num = fib(n);\n    while (!is_prime(fib_num)) {\n        n++;\n        fib_num = fib(n);\n    }\n    return fib_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp41co6gyd.ts(3,19): error TS2304: Cannot find name 'fib'.\n../../../../tmp/tmp41co6gyd.ts(4,13): error TS2304: Cannot find name 'is_prime'.\n../../../../tmp/tmp41co6gyd.ts(6,19): error TS2304: Cannot find name 'fib'.\n",
      "timestamp": 1660333630
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 2];\n    let i: number = 2;\n    while (i < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        i++;\n    }\n    return fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpbzu4oarz.js:14:12)\n    at Object.<anonymous> (/tmp/tmpbzu4oarz.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333623
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let i = 1;\n    let f = 1;\n    let f1 = 1;\n    let f2 = 1;\n    while (i < n) {\n        f = f1 + f2;\n        f1 = f2;\n        f2 = f;\n        if (is_prime(f)) {\n            i++;\n        }\n    }\n    return f;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwou22l6p.ts(11,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333630
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib = fibonacci(n);\n    while (!isPrime(fib)) {\n        fib = fibonacci(++n);\n    }\n    return fib;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpm2bhug5_.ts(3,15): error TS2304: Cannot find name 'fibonacci'.\n../../../../tmp/tmpm2bhug5_.ts(4,13): error TS2304: Cannot find name 'isPrime'.\n../../../../tmp/tmpm2bhug5_.ts(5,15): error TS2304: Cannot find name 'fibonacci'.\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 2];\n    let i: number = 2;\n    while (i < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        i++;\n    }\n    return fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpbzu4oarz.js:14:12)\n    at Object.<anonymous> (/tmp/tmpbzu4oarz.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333623
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let i = 0;\n    let j = 1;\n    let k = 0;\n    let count = 0;\n    while (count < n) {\n        k = i + j;\n        i = j;\n        j = k;\n        if (isPrime(k)) {\n            count++;\n        }\n    }\n    return k;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpb5oxf451.ts(11,13): error TS2304: Cannot find name 'isPrime'.\n",
      "timestamp": 1660333624
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 1];\n    let i: number = 2;\n    while (i < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        i++;\n    }\n    return fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmptuje8q1y.js:14:12)\n    at Object.<anonymous> (/tmp/tmptuje8q1y.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333620
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let i = 0;\n    let fib = 0;\n    let prime = 0;\n    while (i < n) {\n        fib = fibonacci(i);\n        if (isPrime(fib)) {\n            prime = fib;\n            i++;\n        }\n    }\n    return prime;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4l3b5f0f.ts(7,15): error TS2304: Cannot find name 'fibonacci'.\n../../../../tmp/tmp4l3b5f0f.ts(8,13): error TS2552: Cannot find name 'isPrime'. Did you mean 'prime'?\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 2];\n    let i: number = 2;\n    while (i < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        i++;\n    }\n    return fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpbzu4oarz.js:14:12)\n    at Object.<anonymous> (/tmp/tmpbzu4oarz.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333623
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_num = fib(n);\n    let prime_num = prime(n);\n    let i = 0;\n    let j = 0;\n    let prime_fib_num = 0;\n    while (i < n) {\n        if (fib_num[i] == prime_num[j]) {\n            prime_fib_num = fib_num[i];\n            i++;\n            j++;\n        }\n        else if (fib_num[i] < prime_num[j]) {\n            i++;\n        }\n        else {\n            j++;\n        }\n    }\n    return prime_fib_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpaibzy6bu.ts(3,19): error TS2304: Cannot find name 'fib'.\n../../../../tmp/tmpaibzy6bu.ts(4,21): error TS2304: Cannot find name 'prime'.\n",
      "timestamp": 1660333630
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let i = 0;\n    let fib = 0;\n    let prime = 0;\n    let fib_prime = 0;\n    while (i < n) {\n        fib = fibonacci(i);\n        prime = is_prime(fib);\n        if (prime == 1) {\n            fib_prime = fib;\n            i++;\n        }\n    }\n    return fib_prime;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6y8ulqi2.ts(8,15): error TS2304: Cannot find name 'fibonacci'.\n../../../../tmp/tmp6y8ulqi2.ts(9,17): error TS2552: Cannot find name 'is_prime'. Did you mean 'fib_prime'?\n",
      "timestamp": 1660333633
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib: number[] = [1, 2];\n    let i: number = 2;\n    while (i < n) {\n        fib.push(fib[i - 1] + fib[i - 2]);\n        i++;\n    }\n    return fib[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpl2lq_mp6.js:14:12)\n    at Object.<anonymous> (/tmp/tmpl2lq_mp6.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333626
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 1];\n    let i: number = 2;\n    let fib_number: number = 1;\n    while (i < n) {\n        fib_number = fib_numbers[i - 1] + fib_numbers[i - 2];\n        fib_numbers.push(fib_number);\n        i++;\n    }\n    return fib_number;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpgmuzrsyd.js:16:12)\n    at Object.<anonymous> (/tmp/tmpgmuzrsyd.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333633
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib: number[] = [1, 1];\n    let i: number = 2;\n    while (i < n) {\n        fib.push(fib[i - 1] + fib[i - 2]);\n        i++;\n    }\n    return fib[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp1b_py7ng.js:14:12)\n    at Object.<anonymous> (/tmp/tmp1b_py7ng.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333620
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 1];\n    let i: number = 2;\n    while (i < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        i++;\n    }\n    return fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmptuje8q1y.js:14:12)\n    at Object.<anonymous> (/tmp/tmptuje8q1y.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333620
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let i = 0;\n    let fib = 0;\n    while (i < n) {\n        fib = fibonacci(i);\n        if (is_prime(fib)) {\n            i++;\n        }\n    }\n    return fib;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmppy5kfwgx.ts(6,15): error TS2304: Cannot find name 'fibonacci'.\n../../../../tmp/tmppy5kfwgx.ts(7,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333620
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 1];\n    let i: number = 2;\n    let prime_fib_number: number = 0;\n    let counter: number = 0;\n    while (counter < n) {\n        fib_numbers[i] = fib_numbers[i - 1] + fib_numbers[i - 2];\n        if (is_prime(fib_numbers[i])) {\n            counter++;\n            prime_fib_number = fib_numbers[i];\n        }\n        i++;\n    }\n    return prime_fib_number;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpw67xwb15.ts(9,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333633
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib: number[] = [1, 2];\n    let i: number = 2;\n    while (i < n) {\n        fib.push(fib[i - 1] + fib[i - 2]);\n        i++;\n    }\n    return fib[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpl2lq_mp6.js:14:12)\n    at Object.<anonymous> (/tmp/tmpl2lq_mp6.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333626
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib = [1, 1];\n    let i = 2;\n    while (i < n) {\n        fib.push(fib[i - 1] + fib[i - 2]);\n        i++;\n    }\n    return fib[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp77hs5usx.js:14:12)\n    at Object.<anonymous> (/tmp/tmp77hs5usx.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333623
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 2];\n    let i: number = 2;\n    while (i < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        i++;\n    }\n    return fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpbzu4oarz.js:14:12)\n    at Object.<anonymous> (/tmp/tmpbzu4oarz.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333623
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n  let fib = [1, 1];\n  let i = 2;\n  while (i < n) {\n    fib.push(fib[i - 1] + fib[i - 2]);\n    i++;\n  }\n  return fib[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp63o2qrbm.js:14:12)\n    at Object.<anonymous> (/tmp/tmp63o2qrbm.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333633
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 2];\n    let i: number = 2;\n    let fib_number: number = 0;\n    while (i <= n) {\n        fib_number = fib_numbers[i - 1] + fib_numbers[i - 2];\n        fib_numbers.push(fib_number);\n        i++;\n    }\n    return fib_number;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp89ngd16p.js:16:12)\n    at Object.<anonymous> (/tmp/tmp89ngd16p.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333633
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 2];\n    let i: number = 2;\n    let fib_number: number = 0;\n    while (i <= n) {\n        fib_number = fib_numbers[i - 1] + fib_numbers[i - 2];\n        if (is_prime(fib_number)) {\n            fib_numbers.push(fib_number);\n            i++;\n        }\n    }\n    return fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1zytya7g.ts(8,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333627
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 2];\n    let prime_fib_numbers: number[] = [2];\n    let i: number = 2;\n    while (prime_fib_numbers.length < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        if (is_prime(fib_numbers[i])) {\n            prime_fib_numbers.push(fib_numbers[i]);\n        }\n        i++;\n    }\n    return prime_fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxyimhc3g.ts(8,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333627
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib: number[] = [1, 2];\n    let i: number = 2;\n    while (i < n) {\n        fib.push(fib[i - 1] + fib[i - 2]);\n        i++;\n    }\n    return fib[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpl2lq_mp6.js:14:12)\n    at Object.<anonymous> (/tmp/tmpl2lq_mp6.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333626
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 2];\n    let i: number = 2;\n    while (i < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        i++;\n    }\n    return fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpbzu4oarz.js:14:12)\n    at Object.<anonymous> (/tmp/tmpbzu4oarz.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333623
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let a = 0;\n    let b = 1;\n    let c = 1;\n    let i = 1;\n    while (i < n) {\n        c = a + b;\n        a = b;\n        b = c;\n        if (is_prime(c)) {\n            i++;\n        }\n    }\n    return c;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpl7v4n3vw.ts(11,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333633
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let i = 0;\n    let fib = 0;\n    while (i < n) {\n        fib = fibonacci(i);\n        if (is_prime(fib)) {\n            i++;\n        }\n    }\n    return fib;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmppy5kfwgx.ts(6,15): error TS2304: Cannot find name 'fibonacci'.\n../../../../tmp/tmppy5kfwgx.ts(7,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333620
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib = [1, 1];\n    let i = 2;\n    while (i < n) {\n        fib.push(fib[i - 1] + fib[i - 2]);\n        i++;\n    }\n    return fib[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp77hs5usx.js:14:12)\n    at Object.<anonymous> (/tmp/tmp77hs5usx.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333623
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 2];\n    let i: number = 2;\n    while (i < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        i++;\n    }\n    return fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpbzu4oarz.js:14:12)\n    at Object.<anonymous> (/tmp/tmpbzu4oarz.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333623
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 1];\n    let i: number = 2;\n    while (i < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        i++;\n    }\n    return fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmptuje8q1y.js:14:12)\n    at Object.<anonymous> (/tmp/tmptuje8q1y.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333620
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let i = 0;\n    let fib = 0;\n    while (i < n) {\n        fib = fibonacci(i);\n        if (is_prime(fib)) {\n            i++;\n        }\n    }\n    return fib;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmppy5kfwgx.ts(6,15): error TS2304: Cannot find name 'fibonacci'.\n../../../../tmp/tmppy5kfwgx.ts(7,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333620
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 2];\n    let i: number = 2;\n    while (i < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        i++;\n    }\n    return fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpbzu4oarz.js:14:12)\n    at Object.<anonymous> (/tmp/tmpbzu4oarz.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333623
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_nums: number[] = [1, 2];\n    let i: number = 2;\n    while (i < n) {\n        fib_nums.push(fib_nums[i - 1] + fib_nums[i - 2]);\n        i++;\n    }\n    return fib_nums[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp4ss0wqta.js:14:12)\n    at Object.<anonymous> (/tmp/tmp4ss0wqta.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333634
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let i = 1;\n    let j = 1;\n    let k = 1;\n    while (k < n) {\n        let t = i + j;\n        i = j;\n        j = t;\n        if (is_prime(j)) {\n            k++;\n        }\n    }\n    return j;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpzjd588hx.ts(10,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333634
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 2];\n    let i: number = 2;\n    let fib_number: number = 0;\n    while (i <= n) {\n        fib_number = fib_numbers[i - 1] + fib_numbers[i - 2];\n        if (is_prime(fib_number)) {\n            fib_numbers.push(fib_number);\n            i++;\n        }\n    }\n    return fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1zytya7g.ts(8,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333627
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib: number = 0;\n    let i: number = 0;\n    let j: number = 1;\n    let k: number = 0;\n    let count: number = 0;\n    while (count < n) {\n        k = i + j;\n        i = j;\n        j = k;\n        if (isPrime(k)) {\n            fib = k;\n            count++;\n        }\n    }\n    return fib;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpc82ckn6v.ts(12,13): error TS2304: Cannot find name 'isPrime'.\n",
      "timestamp": 1660333623
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 2];\n    let i: number = 2;\n    while (i < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        i++;\n    }\n    return fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpbzu4oarz.js:14:12)\n    at Object.<anonymous> (/tmp/tmpbzu4oarz.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333623
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let i = 0;\n    let fib = 0;\n    while (i < n) {\n        fib = fibonacci(i);\n        if (is_prime(fib)) {\n            i++;\n        }\n    }\n    return fib;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmppy5kfwgx.ts(6,15): error TS2304: Cannot find name 'fibonacci'.\n../../../../tmp/tmppy5kfwgx.ts(7,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333620
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib: number[] = [1, 1];\n    let i: number = 0;\n    while (i < n) {\n        fib.push(fib[fib.length - 1] + fib[fib.length - 2]);\n        if (is_prime(fib[fib.length - 1])) {\n            i++;\n        }\n    }\n    return fib[fib.length - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpijsg2ryg.ts(7,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333633
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let f1 = 1;\n    let f2 = 1;\n    let f3 = 1;\n    let i = 2;\n    while (i < n) {\n        f3 = f1 + f2;\n        f1 = f2;\n        f2 = f3;\n        if (is_prime(f3)) {\n            i++;\n        }\n    }\n    return f3;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfzqqek91.ts(11,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333634
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 2];\n    let i: number = 2;\n    while (i < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        i++;\n    }\n    return fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpbzu4oarz.js:14:12)\n    at Object.<anonymous> (/tmp/tmpbzu4oarz.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333623
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 2];\n    let i: number = 2;\n    let fib_number: number = 0;\n    while (i <= n) {\n        fib_number = fib_numbers[i - 1] + fib_numbers[i - 2];\n        fib_numbers.push(fib_number);\n        if (is_prime(fib_number)) {\n            i++;\n        }\n    }\n    return fib_number;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpk0b4c8qj.ts(9,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333634
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib = fibonacci(n);\n    if (isPrime(fib)) {\n        return fib;\n    } else {\n        return prime_fib(n + 1);\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpiajh4z7c.ts(3,15): error TS2304: Cannot find name 'fibonacci'.\n../../../../tmp/tmpiajh4z7c.ts(4,9): error TS2304: Cannot find name 'isPrime'.\n",
      "timestamp": 1660333627
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 2];\n    let i: number = 2;\n    while (i < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        i++;\n    }\n    return fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpbzu4oarz.js:14:12)\n    at Object.<anonymous> (/tmp/tmpbzu4oarz.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333623
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib = fibonacci(n);\n    let prime = prime_numbers(n);\n    let i = 0;\n    let j = 0;\n    while (i < fib.length && j < prime.length) {\n        if (fib[i] === prime[j]) {\n            return fib[i];\n        }\n        if (fib[i] < prime[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprbkq73vi.ts(3,15): error TS2304: Cannot find name 'fibonacci'.\n../../../../tmp/tmprbkq73vi.ts(4,17): error TS2304: Cannot find name 'prime_numbers'.\n",
      "timestamp": 1660333633
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 1];\n    let i: number = 2;\n    while (fib_numbers.length < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        i++;\n    }\n    return fib_numbers[fib_numbers.length - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpn8k4hjen.js:14:12)\n    at Object.<anonymous> (/tmp/tmpn8k4hjen.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333634
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib: number[] = [1, 1];\n    let i: number = 0;\n    let j: number = 0;\n    while (i < n) {\n        fib.push(fib[j] + fib[j + 1]);\n        if (is_prime(fib[j + 2])) {\n            i++;\n        }\n        j++;\n    }\n    return fib[j + 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpe6fhgvog.ts(8,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333634
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let a = 0;\n    let b = 1;\n    let c = 0;\n    let i = 0;\n    while (i < n) {\n        c = a + b;\n        a = b;\n        b = c;\n        if (isPrime(c)) {\n            i++;\n        }\n    }\n    return c;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplow17xmo.ts(11,13): error TS2304: Cannot find name 'isPrime'.\n",
      "timestamp": 1660333620
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib: number[] = [1, 1];\n    let i: number = 2;\n    while (i < n) {\n        fib.push(fib[i - 1] + fib[i - 2]);\n        i++;\n    }\n    return fib[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp1b_py7ng.js:14:12)\n    at Object.<anonymous> (/tmp/tmp1b_py7ng.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333620
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let i = 0;\n    let fib = 0;\n    let prime = 0;\n    while (i < n) {\n        fib = fibonacci(i);\n        if (isPrime(fib)) {\n            prime = fib;\n            i++;\n        }\n    }\n    return prime;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4l3b5f0f.ts(7,15): error TS2304: Cannot find name 'fibonacci'.\n../../../../tmp/tmp4l3b5f0f.ts(8,13): error TS2552: Cannot find name 'isPrime'. Did you mean 'prime'?\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 2];\n    let i: number = 2;\n    while (i < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        i++;\n    }\n    return fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpbzu4oarz.js:14:12)\n    at Object.<anonymous> (/tmp/tmpbzu4oarz.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333623
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let a: number = 1;\n    let b: number = 1;\n    let c: number = 0;\n    let i: number = 2;\n    while (i < n) {\n        c = a + b;\n        a = b;\n        b = c;\n        if (is_prime(c)) {\n            i++;\n        }\n    }\n    return c;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpcngfzt3g.ts(11,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333634
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 2];\n    let i: number = 0;\n    while (fib_numbers.length < n) {\n        fib_numbers.push(fib_numbers[i] + fib_numbers[i + 1]);\n        i++;\n    }\n    let is_prime: boolean = false;\n    let prime_fib_numbers: number[] = [];\n    for (let i: number = 0; i < fib_numbers.length; i++) {\n        is_prime = true;\n        for (let j: number = 2; j < fib_numbers[i]; j++) {\n            if (fib_numbers[i] % j === 0) {\n                is_prime = false;\n            }\n        }\n        if (is_prime) {\n            prime_fib_numbers.push(fib_numbers[i]);\n        }\n    }\n    return prime_fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp0lrjb9b5.js:27:12)\n    at Object.<anonymous> (/tmp/tmp0lrjb9b5.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333634
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib: number[] = [1, 1];\n    let i: number = 1;\n    while (i < n) {\n        fib.push(fib[i] + fib[i - 1]);\n        i++;\n    }\n    return fib[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpwuwzmck0.js:14:12)\n    at Object.<anonymous> (/tmp/tmpwuwzmck0.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333634
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let i = 1;\n    let fib = 1;\n    while (i < n) {\n        fib = fibonacci(i);\n        if (is_prime(fib)) {\n            i++;\n        }\n    }\n    return fib;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp67ctb9d7.ts(6,15): error TS2304: Cannot find name 'fibonacci'.\n../../../../tmp/tmp67ctb9d7.ts(7,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333634
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let i = 0;\n    let fib = 0;\n    while (i < n) {\n        fib = fibonacci(i);\n        if (is_prime(fib)) {\n            i++;\n        }\n    }\n    return fib;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmppy5kfwgx.ts(6,15): error TS2304: Cannot find name 'fibonacci'.\n../../../../tmp/tmppy5kfwgx.ts(7,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333620
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let a = 0;\n    let b = 1;\n    let c = 0;\n    let i = 0;\n    while (i < n) {\n        c = a + b;\n        a = b;\n        b = c;\n        if (isPrime(c)) {\n            i++;\n        }\n    }\n    return c;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplow17xmo.ts(11,13): error TS2304: Cannot find name 'isPrime'.\n",
      "timestamp": 1660333620
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 1];\n    let i: number = 0;\n    while (i < n) {\n        fib_numbers.push(fib_numbers[i] + fib_numbers[i + 1]);\n        if (is_prime(fib_numbers[i + 2])) {\n            i++;\n        }\n    }\n    return fib_numbers[n];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpl00vo90t.ts(7,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333634
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let i = 0;\n    let j = 1;\n    let k = 0;\n    let count = 0;\n    while (count < n) {\n        k = i + j;\n        i = j;\n        j = k;\n        if (isPrime(k)) {\n            count++;\n        }\n    }\n    return k;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpb5oxf451.ts(11,13): error TS2304: Cannot find name 'isPrime'.\n",
      "timestamp": 1660333624
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 1];\n    let i: number = 2;\n    let prime_fib_numbers: number[] = [];\n    while (prime_fib_numbers.length < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        if (is_prime(fib_numbers[i])) {\n            prime_fib_numbers.push(fib_numbers[i]);\n        }\n        i++;\n    }\n    return prime_fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpufs4mtvc.ts(8,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333634
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let a = 1;\n    let b = 1;\n    let c = 0;\n    let i = 2;\n    while (i < n) {\n        c = a + b;\n        a = b;\n        b = c;\n        if (is_prime(c)) {\n            i++;\n        }\n    }\n    return c;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdoordgbw.ts(11,13): error TS2304: Cannot find name 'is_prime'.\n",
      "timestamp": 1660333634
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib = fibonacci(n);\n    while (!isPrime(fib)) {\n        fib = fibonacci(++n);\n    }\n    return fib;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpm2bhug5_.ts(3,15): error TS2304: Cannot find name 'fibonacci'.\n../../../../tmp/tmpm2bhug5_.ts(4,13): error TS2304: Cannot find name 'isPrime'.\n../../../../tmp/tmpm2bhug5_.ts(5,15): error TS2304: Cannot find name 'fibonacci'.\n",
      "timestamp": 1660333619
    },
    {
      "exit_code": 2,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib = fibonacci(n);\n    if (isPrime(fib)) {\n        return fib;\n    } else {\n        return prime_fib(n + 1);\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpiajh4z7c.ts(3,15): error TS2304: Cannot find name 'fibonacci'.\n../../../../tmp/tmpiajh4z7c.ts(4,9): error TS2304: Cannot find name 'isPrime'.\n",
      "timestamp": 1660333627
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_numbers: number[] = [1, 1];\n    let i: number = 2;\n    while (i < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n        i++;\n    }\n    return fib_numbers[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmptuje8q1y.js:14:12)\n    at Object.<anonymous> (/tmp/tmptuje8q1y.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333620
    },
    {
      "exit_code": 1,
      "program": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\nfunction prime_fib(n: number): number {\n    let fib_num: number = 0;\n    let fib_numbers: number[] = [1, 1];\n    let i: number = 2;\n    while (i < n) {\n        fib_num = fib_numbers[i - 1] + fib_numbers[i - 2];\n        fib_numbers.push(fib_num);\n        i++;\n    }\n    return fib_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmplekp7u1a.js:16:12)\n    at Object.<anonymous> (/tmp/tmplekp7u1a.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333634
    }
  ]
}