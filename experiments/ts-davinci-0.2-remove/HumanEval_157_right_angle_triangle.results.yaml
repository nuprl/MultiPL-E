language: ts
name: HumanEval_157_right_angle_triangle
results:
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return Math.pow(arr[0],\
    \ 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(5,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(3,\
    \ 6, 4));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 6));\nconsole.log(right_angle_triangle(3, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(4,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 4, 4));\nconsole.log(right_angle_triangle(4,\
    \ 5, 6));\nconsole.log(right_angle_triangle(6, 5, 4));\nconsole.log(right_angle_triangle(5,\
    \ 6, 4));\nconsole.log(right_angle_triangle(4, 6, 5));\nconsole.log(right_angle_triangle(6,\
    \ 4, 5));\nconsole.log(right_angle_triangle(5, 4, 6));\nconsole.log(right_angle_triangle(\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpeh7_urpy.ts(37,9): error TS1005: '','' expected.

    '
  timestamp: 1659978342
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let sides = [a, b, c].sort((a, b) => a - b);\n    return sides[0] **\
    \ 2 + sides[1] ** 2 === sides[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6,\
    \ 4, 3));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 6, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(4,\
    \ 3, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978342
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return (a * a + b * b === c * c) || (a * a + c * c === b * b) || (b *\
    \ b + c * c === a * a);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(6,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(4,\
    \ 5, 6));\nconsole.log(right_angle_triangle(5, 6, 4));\nconsole.log(right_angle_triangle(6,\
    \ 4, 5));\nconsole.log(right_angle_triangle(4, 6, 5));\nconsole.log(right_angle_triangle(6,\
    \ 5, 4));\nconsole.log(right_angle_triangle(5, 4, 6));\nconsole.log(right_angle_triangle(5,\
    \ 6, 7));\nconsole.log(right_angle_triangle(6, 7, 5));\nconsole.log(right_angle_triangle(7,\
    \ 5, 6));\nconsole.log(right_angle_triangle(5, 7, 6));\nconsole.log(right_angle_triangle(7,\
    \ 6, 5));\nconsole.log(right_angle_triangle(6, 5, 7));\nconsole.log(right_angle_triangle(6,\
    \ 7, 8));\nconsole.log(right_angle_triangle(7, 8, 6));\nconsole.log(right_angle_triangle(8,\
    \ 6, 7));\nconsole.log(right_angle_triangle(6, 8, 7));\nconsole.log(right_angle_triangle(8,\
    \ 7\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpt4wc5rh_.ts(36,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpt4wc5rh_.ts(36,9): error TS1005: '','' expected.

    '
  timestamp: 1659978342
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 +\
    \ arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    '
  timestamp: 1659978342
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return Math.pow(a, 2) + Math.pow(b, 2) === Math.pow(c, 2)\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(3,\
    \ 4, 7));\nconsole.log(right_angle_triangle(3, 4, 8));\nconsole.log(right_angle_triangle(3,\
    \ 4, 9));\nconsole.log(right_angle_triangle(3, 4, 10));\nconsole.log(right_angle_triangle(3,\
    \ 4, 11));\nconsole.log(right_angle_triangle(3, 4, 12));\nconsole.log(right_angle_triangle(3,\
    \ 4, 13));\nconsole.log(right_angle_triangle(3, 4, 14));\nconsole.log(right_angle_triangle(3,\
    \ 4, 15));\nconsole.log(right_angle_triangle(3, 4, 16));\nconsole.log(right_angle_triangle(3,\
    \ 4, 17));\nconsole.log(right_angle_triangle(3, 4, 18));\nconsole.log(right_angle_triangle(3,\
    \ 4, 19));\nconsole.log(right_angle_triangle(3, 4, 20));\nconsole.log(right_angle_triangle(3,\
    \ 4, 21));\nconsole.log(right_angle_triangle(3, 4, 22));\nconsole.log(right_angle_triangle(3,\
    \ 4, 23));\nconsole.log(right_angle_triangle(3, 4, 24));\nconsole.log(right_angle_triangle(3,\
    \ 4, 25));\nconsole.log(right_angle_triangle(3, 4, 26));\nconsole.log(right_angle_triangle(3,\
    \ 4, 27));\nconsole.log(right_angle_triangle(3, 4, 28));\nconsole.log(right_angle_triangle(3,\
    \ 4, 29));\nconsole.log(right_angle_triangle(3, 4, 30));\nconsole.log(right_angle_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp11m0e2jq.ts(37,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp11m0e2jq.ts(37,9): error TS1005: '','' expected.

    '
  timestamp: 1659978342
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    if (a > b && a > c) {\n        return a * a === b * b + c * c;\n    }\
    \ else if (b > a && b > c) {\n        return b * b === a * a + c * c;\n    } else\
    \ {\n        return c * c === a * a + b * b;\n    }\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 6));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6,\
    \ 3, 4));\nconsole.log(right_angle_triangle(6, 6, 6));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978342
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 +\
    \ arr[1] ** 2 === arr[2] ** 2;\n}\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(1, 2, 3));\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n\
    \  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    '
  timestamp: 1659978342
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0]\
    \ ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    '
  timestamp: 1659978342
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 +\
    \ arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(4,\
    \ 6, 3));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 6));\nconsole.log(right_angle_triangle(5, 12, 13));\nconsole.log(right_angle_triangle(12,\
    \ 5, 13));\nconsole.log(right_angle_triangle(13, 5, 12));\nconsole.log(right_angle_triangle(5,\
    \ 13, 12));\nconsole.log(right_angle_triangle(12, 13, 5));\nconsole.log(right_angle_triangle(13,\
    \ 12, 5));\nconsole.log(right_angle_triangle(5, 5, 5));\nconsole.log(right_angle_triangle(5,\
    \ 12, 14));\nconsole.log(right_angle_triangle(14, 5, 12));\nconsole.log(right_angle_triangle(5,\
    \ 14, 12));\nconsole.log(right_angle_triangle(12, 14, 5));\nconsole.log(right_angle_triangle(14,\
    \ 12, 5));\nconsole.log(right_angle_triangle(\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n\
    \  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1cvl4y9y.ts(37,9): error TS1005: '','' expected.

    '
  timestamp: 1659978342
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0]\
    \ ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(4,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 3, 4));\nconsole.log(right_angle_triangle(5,\
    \ 3, 5));\nconsole.log(right_angle_triangle(5, 5, 3));\nconsole.log(right_angle_triangle(3,\
    \ 5, 5));\nconsole.log(right_angle_triangle(1, 1, 1));\nconsole.log(right_angle_triangle(1,\
    \ 2, 3));\nconsole.log(right_angle_triangle(1, 3, 2));\nconsole.log(right_angle_triangle(2,\
    \ 1, 3));\nconsole.log(right_angle_triangle(2, 3, 1));\nconsole.log(right_angle_triangle(3,\
    \ 1, 2));\nconsole.log(right_angle_triangle(3, 2, 1));\nconsole.log(right_angle_triangle(1,\
    \ 1, 2));\nconsole.log(right_angle_triangle(1, 2, 1));\nconsole.log(right_angle_triangle(2,\
    \ 1, 1));\nconsole.log(right_angle_triangle(1, 1, 3));\nconsole.log(right_angle_triangle(1,\
    \ 3, 1));\nconsole.log(right_angle\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n\
    \  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgtos9lt0.ts(38,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpgtos9lt0.ts(38,9): error TS1005: '','' expected.

    '
  timestamp: 1659978342
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return (a ** 2 + b ** 2 === c ** 2) || (a ** 2 + c ** 2 === b ** 2) ||\
    \ (b ** 2 + c ** 2 === a ** 2);\n}\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(5, 12, 13));\nconsole.log(right_angle_triangle(5,\
    \ 12, 14));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    false

    '
  timestamp: 1659978342
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return (a ** 2 + b ** 2 === c ** 2) || (a ** 2 + c ** 2 === b ** 2) ||\
    \ (b ** 2 + c ** 2 === a ** 2);\n}\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(10,\
    \ 24, 26));\nconsole.log(right_angle_triangle(26, 10, 24));\nconsole.log(right_angle_triangle(24,\
    \ 26, 10));\nconsole.log(right_angle_triangle(24, 10, 26));\nconsole.log(right_angle_triangle(10,\
    \ 26, 24));\nconsole.log(right_angle_triangle(26, 24, 10));\nconsole.log(right_angle_triangle(5,\
    \ 4, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(3,\
    \ 5, 4));\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(10,\
    \ 24, 26));\nconsole.log(right_angle_triangle(26, 10, 24));\nconsole.log(right_angle_triangle(24,\
    \ 26, 10));\nconsole.log(right_angle_triangle(24, 10,\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsm6i398s.ts(35,9): error TS1005: '','' expected.

    '
  timestamp: 1659978341
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(arr[0],\
    \ 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(3,\
    \ 6, 4));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978342
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return Math.pow(arr[0],\
    \ 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    '
  timestamp: 1659978342
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let sides = [a, b, c].sort((a, b) => a - b);\n    return sides[0] **\
    \ 2 + sides[1] ** 2 === sides[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(4,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 6, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6,\
    \ 3, 4));\nconsole.log(right_angle_triangle(4, 3, 6));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978342
- exit_code: 1
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return a ** 2 + b ** 2 === c ** 2;\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6,\
    \ 3, 4));\nconsole.log(right_angle_triangle(6, 4, 3));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp36y5_taj.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp36y5_taj.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978342
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 +\
    \ arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(5, 12, 13));\nconsole.log(right_angle_triangle(1,\
    \ 2, 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    false

    '
  timestamp: 1659978342
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0]\
    \ ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    '
  timestamp: 1659978342
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 +\
    \ arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(1, 2, 3));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n\
    \  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    '
  timestamp: 1659978342
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n\
    }\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 6));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6,\
    \ 3, 4));\nconsole.log(right_angle_triangle(6, 4, 3));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978342
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 +\
    \ arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(3, 4, 6));\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n\
    \  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    '
  timestamp: 1659978342
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(arr[0],\
    \ 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(5, 12, 13));\nconsole.log(right_angle_triangle(12,\
    \ 5, 13));\nconsole.log(right_angle_triangle(13, 5, 12));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 6, 3));\nconsole.log(right_angle_triangle(5, 12, 14));\nconsole.log(right_angle_triangle(12,\
    \ 5, 14));\nconsole.log(right_angle_triangle(14, 5, 12));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978342
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return Math.pow(arr[0],\
    \ 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    '
  timestamp: 1659978342
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 +\
    \ arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n\
    \  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    '
  timestamp: 1659978344
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b\
    \ + c * c == a * a);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 5, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 6, 3));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4,\
    \ 3, 6));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(3,\
    \ 3, 4));\nconsole.log(right_angle_triangle(4, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 4));\nconsole.log(right_angle_triangle(4, 4, 3));\nconsole.log(right_angle_triangle(4,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(4,\
    \ 4, 4));\nconsole.log(right_angle_triangle(4, 4, 5));\nconsole.log(right_angle_triangle(5,\
    \ 4, 4));\nconsole.log(right_angle_triangle(4, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 4, 5));\nconsole.log(right_angle_triangle(4, 5, 5));\nconsole.log(right_angle_triangle(5,\
    \ 4\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5t6at1j3.ts(36,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp5t6at1j3.ts(36,9): error TS1005: '','' expected.

    '
  timestamp: 1659978344
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return (a ** 2 + b ** 2 === c ** 2) || (a ** 2 + c ** 2 === b ** 2) ||\
    \ (b ** 2 + c ** 2 === a ** 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 4));\nconsole.log(right_angle_triangle(4, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 4, 3));\nconsole.log(right_angle_triangle(4,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 5, 6));\nconsole.log(right_angle_triangle(5,\
    \ 3, 6));\nconsole.log(right_angle_triangle(5, 6, 3));\nconsole.log(right_angle_triangle(3,\
    \ 6, 5));\nconsole.log(right_angle_triangle(6, 3, 5));\nconsole.log(right_angle_triangle(6,\
    \ 5, 3));\nconsole.log(right_angle_triangle(3, 5, 7));\nconsole.log(right_angle_triangle(5,\
    \ 3, 7));\nconsole.log(right_angle_triangle(5, 7, 3));\nconsole.log(right_angle_triangle(3,\
    \ 7, 5));\nconsole.log(right_angle_triangle(7, 3, 5));\nconsole.log(right_angle_triangle(7,\
    \ 5, 3));\nconsole.log(right_angle_triangle(3, 6\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnqbglgx9.ts(36,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpnqbglgx9.ts(36,9): error TS1005: '','' expected.

    '
  timestamp: 1659978344
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(arr[0],\
    \ 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(3,\
    \ 4, 4));\nconsole.log(right_angle_triangle(3, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 2));\nconsole.log(right_angle_triangle(3, 4, 1));\nconsole.log(right_angle_triangle(3,\
    \ 4, 0));\nconsole.log(right_angle_triangle(3, 4, -1));\nconsole.log(right_angle_triangle(3,\
    \ 4, -2));\nconsole.log(right_angle_triangle(3, 4, -3));\nconsole.log(right_angle_triangle(3,\
    \ 4, -4));\nconsole.log(right_angle_triangle(3, 4, -5));\nconsole.log(right_angle_triangle(3,\
    \ 4, -6));\nconsole.log(right_angle_triangle(3, 4, -7));\nconsole.log(right_angle_triangle(3,\
    \ 4, -8));\nconsole.log(right_angle_triangle(3, 4, -9));\nconsole.log(right_angle_triangle(3,\
    \ 4, -10));\nconsole.log(right_angle_triangle(3, 4, -11));\nconsole.log(right_angle_triangle(3,\
    \ 4, -12));\nconsole.log(right_angle_triangle(3, 4, -13));\nconsole.log(right_angle_triangle(3,\
    \ 4, -14));\nconsole.log(right_angle_triangle(3, 4, -15));\nconsole.log(right_angle_triangle(3,\
    \ 4, -16));\nconsole.log(right_angle_triangle(3, 4, -17\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp46d1ro0.ts(35,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpp46d1ro0.ts(35,9): error TS1005: '','' expected.

    '
  timestamp: 1659978344
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b\
    \ + c * c == a * a);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(3,\
    \ 4, 4));\nconsole.log(right_angle_triangle(3, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 2));\nconsole.log(right_angle_triangle(3, 4, 1));\nconsole.log(right_angle_triangle(3,\
    \ 4, 0));\nconsole.log(right_angle_triangle(3, 4, -1));\nconsole.log(right_angle_triangle(3,\
    \ 4, -2));\nconsole.log(right_angle_triangle(3, 4, -3));\nconsole.log(right_angle_triangle(3,\
    \ 4, -4));\nconsole.log(right_angle_triangle(3, 4, -5));\nconsole.log(right_angle_triangle(3,\
    \ 4, -6));\nconsole.log(right_angle_triangle(3, 4, -7));\nconsole.log(right_angle_triangle(3,\
    \ 4, -8));\nconsole.log(right_angle_triangle(3, 4, -9));\nconsole.log(right_angle_triangle(3,\
    \ 4, -10));\nconsole.log(right_angle_triangle(3, 4, -11));\nconsole.log(right_angle_triangle(3,\
    \ 4, -12));\nconsole.log(right_angle_triangle(3, 4, -13));\nconsole.log(right_angle_triangle(3,\
    \ 4, -14));\nconsole.log(right_angle_triangle(3, 4, -15));\nconsole.log(right_angle_triangle(3,\
    \ 4, -16));\nconsole.log(right_angle_triangle(3, 4, -\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpovh62dr0.ts(35,9): error TS1005: '','' expected.

    '
  timestamp: 1659978344
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0]\
    \ ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(0,\
    \ 0, 0));\nconsole.log(right_angle_triangle(3, 4, -5));\nconsole.log(right_angle_triangle(-3,\
    \ -4, -5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    true

    false

    false

    '
  timestamp: 1659978344
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return Math.pow(a, 2) + Math.pow(b, 2) === Math.pow(c, 2) || Math.pow(a,\
    \ 2) + Math.pow(c, 2) === Math.pow(b, 2) || Math.pow(b, 2) + Math.pow(c, 2) ===\
    \ Math.pow(a, 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 5, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(6,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(4,\
    \ 6, 3));\nconsole.log(right_angle_triangle(4, 3, 6));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978345
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0]\
    \ ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    '
  timestamp: 1659978345
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b\
    \ + c * c == a * a);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\nconsole.log(right_angle_triangle(3, 4, 7));\nconsole.log(right_angle_triangle(3,\
    \ 4, 8));\nconsole.log(right_angle_triangle(3, 4, 9));\nconsole.log(right_angle_triangle(3,\
    \ 4, 10));\nconsole.log(right_angle_triangle(3, 4, 11));\nconsole.log(right_angle_triangle(3,\
    \ 4, 12));\nconsole.log(right_angle_triangle(3, 4, 13));\nconsole.log(right_angle_triangle(3,\
    \ 4, 14));\nconsole.log(right_angle_triangle(3, 4, 15));\nconsole.log(right_angle_triangle(3,\
    \ 4, 16));\nconsole.log(right_angle_triangle(3, 4, 17));\nconsole.log(right_angle_triangle(3,\
    \ 4, 18));\nconsole.log(right_angle_triangle(3, 4, 19));\nconsole.log(right_angle_triangle(3,\
    \ 4, 20));\nconsole.log(right_angle_triangle(3, 4, 21));\nconsole.log(right_angle_triangle(3,\
    \ 4, 22));\nconsole.log(right_angle_triangle(3, 4, 23));\nconsole.log(right_angle_triangle(3,\
    \ 4, 24));\nconsole.log(right_angle_triangle(3, 4, 25));\nconsole.log(right_angle_triangle(3,\
    \ 4, 26));\nconsole.log(right_angle_triangle(3, 4, 27));\nconsole.log(right_angle_triangle(3,\
    \ 4, 28));\nconsole.log(right_angle_triangle(3, 4, 29));\nconsole.log(right_angle_triangle(3,\
    \ 4\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpag9f04vg.ts(36,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpag9f04vg.ts(36,9): error TS1005: '','' expected.

    '
  timestamp: 1659978344
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 +\
    \ arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 4, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    '
  timestamp: 1659978344
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0]\
    \ ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(5, 12, 13));\nconsole.log(right_angle_triangle(5,\
    \ 15, 20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    false

    '
  timestamp: 1659978344
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] * arr[0]\
    \ + arr[1] * arr[1] === arr[2] * arr[2];\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(3,\
    \ 4, 7));\nconsole.log(right_angle_triangle(3, 4, 8));\nconsole.log(right_angle_triangle(3,\
    \ 4, 9));\nconsole.log(right_angle_triangle(3, 4, 10));\nconsole.log(right_angle_triangle(3,\
    \ 4, 11));\nconsole.log(right_angle_triangle(3, 4, 12));\nconsole.log(right_angle_triangle(3,\
    \ 4, 13));\nconsole.log(right_angle_triangle(3, 4, 14));\nconsole.log(right_angle_triangle(3,\
    \ 4, 15));\nconsole.log(right_angle_triangle(3, 4, 16));\nconsole.log(right_angle_triangle(3,\
    \ 4, 17));\nconsole.log(right_angle_triangle(3, 4, 18));\nconsole.log(right_angle_triangle(3,\
    \ 4, 19));\nconsole.log(right_angle_triangle(3, 4, 20));\nconsole.log(right_angle_triangle(3,\
    \ 4, 21));\nconsole.log(right_angle_triangle(3, 4, 22));\nconsole.log(right_angle_triangle(3,\
    \ 4, 23));\nconsole.log(right_angle_triangle(3, 4, 24));\nconsole.log(right_angle_triangle(3,\
    \ 4, 25));\nconsole.log(right_angle_triangle(3, 4, 26));\nconsole.log(right_angle_triangle(3,\
    \ 4, 27));\nconsole.log(right_angle_triangle(3, 4, 28));\nconsole.log(right_angle_triangle(3,\
    \ 4, 29));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978344
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    if (a > b && a > c) {\n        return Math.pow(a, 2) === Math.pow(b,\
    \ 2) + Math.pow(c, 2);\n    } else if (b > a && b > c) {\n        return Math.pow(b,\
    \ 2) === Math.pow(a, 2) + Math.pow(c, 2);\n    } else {\n        return Math.pow(c,\
    \ 2) === Math.pow(a, 2) + Math.pow(b, 2);\n    }\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    '
  timestamp: 1659978345
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return (a ** 2 + b ** 2 === c ** 2) || (a ** 2 + c ** 2 === b ** 2) ||\
    \ (b ** 2 + c ** 2 === a ** 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    '
  timestamp: 1659978345
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0]\
    \ ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6,\
    \ 3, 4));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4,\
    \ 6, 3));\nconsole.log(right_angle_triangle(4, 3, 6));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978345
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0]\
    \ ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(4,\
    \ 3, 6));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 6, 3));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 6, 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978345
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return (a**2 + b**2 === c**2) || (a**2 + c**2 === b**2) || (b**2 + c**2\
    \ === a**2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 6, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6,\
    \ 3, 4));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(3,\
    \ 3, 4));\nconsole.log(right_angle_triangle(4, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 4));\nconsole.log(right_angle_triangle(4, 4, 3));\nconsole.log(right_angle_triangle(4,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 5));\nconsole.log(right_angle_triangle(5, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 5, 3));\nconsole.log(right_angle_triangle(3, 3, 6));\nconsole.log(right_angle_triangle(6,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 6, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9afwjsgw.ts(36,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp9afwjsgw.ts(36,9): error TS1005: '','' expected.

    '
  timestamp: 1659978344
- exit_code: 1
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let max = Math.max(a, b, c);\n    let sum = a + b + c;\n    return sum\
    \ - max === max * 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpn6d9b82c.js:16:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpn6d9b82c.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'false

    false

    '
  timestamp: 1659978345
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 +\
    \ arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(5,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    '
  timestamp: 1659978344
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0]\
    \ ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    false

    false

    '
  timestamp: 1659978344
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 +\
    \ arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(3, 4, 6));\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n\
    \  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    '
  timestamp: 1659978342
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return Math.pow(a, 2) + Math.pow(b, 2) === Math.pow(c, 2) ||\n      \
    \  Math.pow(a, 2) + Math.pow(c, 2) === Math.pow(b, 2) ||\n        Math.pow(b,\
    \ 2) + Math.pow(c, 2) === Math.pow(a, 2);\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6,\
    \ 3, 4));\nconsole.log(right_angle_triangle(6, 4, 3));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    false

    false

    '
  timestamp: 1659978344
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 +\
    \ arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(5,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6,\
    \ 3, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(3,\
    \ 6, 4));\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(3,\
    \ 5, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 6, 3));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4,\
    \ 3, 6));\nconsole.log(right_angle_triangle(\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n\
    \  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_k4zjxd4.ts(37,9): error TS1005: '','' expected.

    '
  timestamp: 1659978345
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return Math.pow(arr[0],\
    \ 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(0,\
    \ 0, 0));\nconsole.log(right_angle_triangle(3, 4, -5));\nconsole.log(right_angle_triangle(-3,\
    \ -4, -5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    true

    false

    false

    '
  timestamp: 1659978345
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return (a * a + b * b == c * c || a * a + c * c == b * b || b * b + c\
    \ * c == a * a);\n}\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(5,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(3,\
    \ 5, 4));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(6,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(4,\
    \ 6, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978346
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return Math.pow(arr[0],\
    \ 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(4,\
    \ 3, 6));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 6, 4));\nconsole.log(right_angle_triangle(3, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 3, 5));\nconsole.log(right_angle_triangle(5,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 5, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 4));\nconsole.log(right_angle_triangle(4, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 4, 4));\nconsole.log(right_angle_triangle(4,\
    \ 5, 6));\nconsole.log(right_angle_triangle(6, 5, 4));\nconsole.log(right_angle_triangle(\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_85p7mi3.ts(37,9): error TS1005: '','' expected.

    '
  timestamp: 1659978346
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    if (a > b && a > c) {\n        return a * a === b * b + c * c;\n    }\
    \ else if (b > a && b > c) {\n        return b * b === a * a + c * c;\n    } else\
    \ {\n        return c * c === a * a + b * b;\n    }\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 6));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 5));\nconsole.log(right_angle_triangle(3, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 3, 6));\nconsole.log(right_angle_triangle(3,\
    \ 6, 3));\nconsole.log(right_angle_triangle(6, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 4));\nconsole.log(right_angle_triangle(4,\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n\
    \  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4outjifa.ts(40,9): error TS1005: '','' expected.

    '
  timestamp: 1659978346
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return Math.pow(a, 2) + Math.pow(b, 2) === Math.pow(c, 2) ||\n      \
    \  Math.pow(a, 2) + Math.pow(c, 2) === Math.pow(b, 2) ||\n        Math.pow(b,\
    \ 2) + Math.pow(c, 2) === Math.pow(a, 2);\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6,\
    \ 3, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978347
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0]\
    \ ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    '
  timestamp: 1659978347
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0]\
    \ ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(3,\
    \ 5, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6,\
    \ 3, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(4,\
    \ 3, 6));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(6,\
    \ 4, 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978347
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 +\
    \ arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    '
  timestamp: 1659978347
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 +\
    \ arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(3,\
    \ 5, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6,\
    \ 3, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(4,\
    \ 3, 6));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(6,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(4,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 4, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 5, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n\
    \  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp15pvmlf_.ts(37,9): error TS1005: '','' expected.

    '
  timestamp: 1659978347
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let sides = [a, b, c];\n    sides.sort((a, b) => a - b);\n    return\
    \ Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}\n\
    \nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    '
  timestamp: 1659978347
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(arr[0],\
    \ 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(3,\
    \ 4, 7));\nconsole.log(right_angle_triangle(3, 4, 8));\nconsole.log(right_angle_triangle(3,\
    \ 4, 9));\nconsole.log(right_angle_triangle(3, 4, 10));\nconsole.log(right_angle_triangle(3,\
    \ 4, 11));\nconsole.log(right_angle_triangle(3, 4, 12));\nconsole.log(right_angle_triangle(3,\
    \ 4, 13));\nconsole.log(right_angle_triangle(3, 4, 14));\nconsole.log(right_angle_triangle(3,\
    \ 4, 15));\nconsole.log(right_angle_triangle(3, 4, 16));\nconsole.log(right_angle_triangle(3,\
    \ 4, 17));\nconsole.log(right_angle_triangle(3, 4, 18));\nconsole.log(right_angle_triangle(3,\
    \ 4, 19));\nconsole.log(right_angle_triangle(3, 4, 20));\nconsole.log(right_angle_triangle(3,\
    \ 4, 21));\nconsole.log(right_angle_triangle(3, 4, 22));\nconsole.log(right_angle_triangle(3,\
    \ 4, 23));\nconsole.log(right_angle_triangle(3, 4, 24));\nconsole.log(right_angle_triangle(3,\
    \ 4, 25));\nconsole.log(right_angle_triangle(3, 4, 26));\nconsole.log(right_angle_triangle(3,\
    \ 4, 27));\nconsole.log(right_angle_triangle(3, 4, 28));\nconsole.log(right_angle_triangle(3,\
    \ 4,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp27b7yqhu.ts(36,9): error TS1005: '','' expected.

    '
  timestamp: 1659978347
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 +\
    \ arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    '
  timestamp: 1659978342
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0]\
    \ ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(6,\
    \ 3, 4));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4,\
    \ 6, 3));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(3,\
    \ 6, 5));\nconsole.log(right_angle_triangle(3, 5, 6));\nconsole.log(right_angle_triangle(5,\
    \ 3, 6));\nconsole.log(right_angle_triangle(5, 6, 3));\nconsole.log(right_angle_triangle(6,\
    \ 5, 3));\nconsole.log(right_angle_triangle(6, 3, 5));\nconsole.log(right_angle_triangle(3,\
    \ 4, 7));\nconsole.log(right_angle_triangle(3, 7, 4));\nconsole.log(right_angle_triangle(7,\
    \ 3, 4));\nconsole.log(right_angle_triangle(7, 4, 3));\nconsole.log(right_angle_triangle(4,\
    \ 7, 3));\nconsole.log(right_angle_triangle(4, 3, 7));\nconsole.log(right_angle_triangle(3,\
    \ 5, 7));\nconsole.log(right_angle\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n\
    \  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpukxmsao6.ts(38,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpukxmsao6.ts(38,9): error TS1005: '','' expected.

    '
  timestamp: 1659978347
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0]\
    \ ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    '
  timestamp: 1659978345
- exit_code: 1
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return a ** 2 + b ** 2 === c ** 2;\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpuxtr4was.js:16:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpuxtr4was.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    '
  timestamp: 1659978347
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(arr[0],\
    \ 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(5,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    '
  timestamp: 1659978347
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return (a ** 2 + b ** 2 === c ** 2) || (a ** 2 + c ** 2 === b ** 2) ||\
    \ (b ** 2 + c ** 2 === a ** 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(3, 4, 6));\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n\
    \  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    '
  timestamp: 1659978347
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    if (a > b && a > c) {\n        return a * a === b * b + c * c;\n    }\
    \ else if (b > a && b > c) {\n        return b * b === a * a + c * c;\n    } else\
    \ {\n        return c * c === a * a + b * b;\n    }\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(4,\
    \ 6, 3));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 5, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    false

    false

    false

    true

    true

    true

    '
  timestamp: 1659978347
- exit_code: 1
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return Math.pow(a, 2) + Math.pow(b, 2) === Math.pow(c, 2)\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpf67cwvev.js:16:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf67cwvev.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    '
  timestamp: 1659978347
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return (a ** 2 + b ** 2 === c ** 2) || (a ** 2 + c ** 2 === b ** 2) ||\
    \ (b ** 2 + c ** 2 === a ** 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(3,\
    \ 6, 4));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978347
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0]\
    \ ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    '
  timestamp: 1659978347
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return Math.pow(a, 2) + Math.pow(b, 2) === Math.pow(c, 2) ||\n      \
    \  Math.pow(a, 2) + Math.pow(c, 2) === Math.pow(b, 2) ||\n        Math.pow(b,\
    \ 2) + Math.pow(c, 2) === Math.pow(a, 2);\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    false

    false

    '
  timestamp: 1659978347
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 +\
    \ arr[1] ** 2 === arr[2] ** 2;\n}\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(4,\
    \ 6, 3));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 6));\nconsole.log(right_angle_triangle(3, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(4,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 4, 4));\nconsole.log(right_angle_triangle(4, 5, 6));\nconsole.log(right_angle_triangle(6,\
    \ 5, 4));\nconsole.log(right_angle_triangle(4, 6, 5));\nconsole.log(right_angle_triangle(5,\
    \ 6, 4));\nconsole.log(right_angle_triangle(6, 4, 5));\nconsole.log(right_angle_triangle(5,\
    \ 4, 6));\nconsole.log(right_angle_triangle(4\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n\
    \  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplhlj98x5.ts(36,1): error TS1005: '','' expected.

    ../../../../../tmp/tmplhlj98x5.ts(36,9): error TS1005: '','' expected.

    '
  timestamp: 1659978347
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let sides = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(sides[0],\
    \ 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(6,\
    \ 3, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(4,\
    \ 5, 7));\nconsole.log(right_angle_triangle(4, 7, 5));\nconsole.log(right_angle_triangle(7,\
    \ 4, 5));\nconsole.log(right_angle_triangle(5, 4, 7));\nconsole.log(right_angle_triangle(5,\
    \ 7, 4));\nconsole.log(right_angle_triangle(7, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 5, 8));\nconsole.log(right_angle_triangle(4, 8, 5));\nconsole.log(right_angle_triangle(8,\
    \ 4, 5));\nconsole.log(right_angle_triangle(5, 4, 8));\nconsole.log(right_angle_triangle(5,\
    \ 8, 4));\nconsole.log(right_angle_triangle(8, 5, 4));\nconsole.log(right_angle_triangle(4\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprx6olp4r.ts(36,1): error TS1005: '','' expected.

    ../../../../../tmp/tmprx6olp4r.ts(36,9): error TS1005: '','' expected.

    '
  timestamp: 1659978347
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0]\
    \ ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    false

    false

    '
  timestamp: 1659978347
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(arr[0],\
    \ 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    '
  timestamp: 1659978347
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0]\
    \ ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    '
  timestamp: 1659978347
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let sides = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(sides[0],\
    \ 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    '
  timestamp: 1659978347
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 +\
    \ arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(3,\
    \ 6, 4));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978349
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0]\
    \ ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(3,\
    \ 6, 4));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 6));\nconsole.log(right_angle_triangle(3, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(4,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 3, 5));\nconsole.log(right_angle_triangle(5,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 5, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 6));\nconsole.log(right_angle_triangle(6, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 6, 3));\nconsole.log(right_angle\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n\
    \  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqd3av69g.ts(38,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpqd3av69g.ts(38,9): error TS1005: '','' expected.

    '
  timestamp: 1659978349
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return Math.pow(arr[0],\
    \ 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(6,\
    \ 8, 10));\nconsole.log(right_angle_triangle(8, 6, 10));\nconsole.log(right_angle_triangle(10,\
    \ 6, 8));\nconsole.log(right_angle_triangle(6, 10, 8));\nconsole.log(right_angle_triangle(8,\
    \ 10, 6));\nconsole.log(right_angle_triangle(10, 8, 6));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(6,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(4,\
    \ 6, 3));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 7));\nconsole.log(right_angle_triangle(4, 3, 7));\nconsole.log(right_angle_triangle(7,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 7, 4));\nconsole.log(right_angle_triangle(4,\
    \ 7, 3));\nconsole.log(right_angle_triangle(7, 4, 3));\nconsole.log(right_angle_triangle(\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbju9suse.ts(37,9): error TS1005: '','' expected.

    '
  timestamp: 1659978349
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return (a ** 2 + b ** 2 === c ** 2) || (a ** 2 + c ** 2 === b ** 2) ||\
    \ (b ** 2 + c ** 2 === a ** 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(3,\
    \ 4, 7));\nconsole.log(right_angle_triangle(3, 4, 8));\nconsole.log(right_angle_triangle(3,\
    \ 4, 9));\nconsole.log(right_angle_triangle(3, 4, 10));\nconsole.log(right_angle_triangle(3,\
    \ 4, 11));\nconsole.log(right_angle_triangle(3, 4, 12));\nconsole.log(right_angle_triangle(3,\
    \ 4, 13));\nconsole.log(right_angle_triangle(3, 4, 14));\nconsole.log(right_angle_triangle(3,\
    \ 4, 15));\nconsole.log(right_angle_triangle(3, 4, 16));\nconsole.log(right_angle_triangle(3,\
    \ 4, 17));\nconsole.log(right_angle_triangle(3, 4, 18));\nconsole.log(right_angle_triangle(3,\
    \ 4, 19));\nconsole.log(right_angle_triangle(3, 4, 20));\nconsole.log(right_angle_triangle(3,\
    \ 4, 21));\nconsole.log(right_angle_triangle(3, 4, 22));\nconsole.log(right_angle_triangle(3,\
    \ 4, 23));\nconsole.log(right_angle_triangle(3, 4, 24));\nconsole.log(right_angle_triangle(3,\
    \ 4, 25));\nconsole.log(right_angle_triangle(3, 4, 26));\nconsole.log(right_angle_triangle(3,\
    \ 4, 27));\nconsole.log(right_angle_triangle(3, 4, 28));\nconsole.log(right_angle_triangle(3,\
    \ 4, 29));\nconsole.log(right_angle_triangle(3, 4\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqqkb87yd.ts(36,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpqqkb87yd.ts(36,9): error TS1005: '','' expected.

    '
  timestamp: 1659978349
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    if (a === 0 || b === 0 || c === 0) {\n        return false;\n    }\n\
    \    const arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1]\
    \ ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5,\
    \ 4, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(0, 0, 0));\nconsole.log(right_angle_triangle(0,\
    \ 0, 1));\nconsole.log(right_angle_triangle(0, 1, 0));\nconsole.log(right_angle_triangle(1,\
    \ 0, 0));\nconsole.log(right_angle_triangle(0, 1, 1));\nconsole.log(right_angle_triangle(1,\
    \ 0, 1));\nconsole.log(right_angle_triangle(1, 1, 0));\nconsole.log(right_angle_triangle(1,\
    \ 1, 1));\nconsole.log(right_angle_triangle(1, 1, 2));\nconsole.log(right_angle_triangle(1,\
    \ 2, 1));\nconsole.log(right_angle_triangle(2, 1, 1));\nconsole.log(right_angle_triangle(2,\
    \ 2, 2));\nconsole.log(right_angle_triangle(2, 2, 3));\nconsole.log(right_angle_triangle(2,\
    \ 3, 2));\nconsole.log(right_angle_triangle(3, 2, 2));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 4, 3));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbuq573td.ts(39,9): error TS1005: '','' expected.

    '
  timestamp: 1659978349
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return (a ** 2 + b ** 2 === c ** 2) || (a ** 2 + c ** 2 === b ** 2) ||\
    \ (b ** 2 + c ** 2 === a ** 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 4));\nconsole.log(right_angle_triangle(4, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 4, 3));\nconsole.log(right_angle_triangle(4,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 5, 6));\nconsole.log(right_angle_triangle(5,\
    \ 3, 6));\nconsole.log(right_angle_triangle(5, 6, 3));\nconsole.log(right_angle_triangle(3,\
    \ 6, 5));\nconsole.log(right_angle_triangle(6, 3, 5));\nconsole.log(right_angle_triangle(6,\
    \ 5, 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978349
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    if (a > b && a > c) {\n        return a * a === b * b + c * c;\n    }\
    \ else if (b > a && b > c) {\n        return b * b === a * a + c * c;\n    } else\
    \ {\n        return c * c === a * a + b * b;\n    }\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(3,\
    \ 6, 4));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(6,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(4,\
    \ 3, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978349
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return (a * a + b * b === c * c) || (a * a + c * c === b * b) || (b *\
    \ b + c * c === a * a);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3,\
    \ 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(5,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 4));\nconsole.log(right_angle_triangle(4, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 5, 6));\nconsole.log(right_angle_triangle(5, 3, 6));\nconsole.log(right_angle_triangle(5,\
    \ 6, 3));\nconsole.log(right_angle_triangle(3, 6, 5));\nconsole.log(right_angle_triangle(6,\
    \ 3, 5));\nconsole.log(right_angle_triangle(6, 5, 3));\nconsole.log(right_angle_triangle(3,\
    \ 6, 7));\nconsole.log(right_angle_triangle(6, 3, 7));\nconsole.log(right_angle_triangle(6,\
    \ 7, 3));\nconsole.log(right_angle_triangle(3, 7, 6));\nconsole.log(right_angle_triangle(7,\
    \ 3, 6));\nconsole.log(right_angle_triangle(7, 6, 3));\nconsole.log(right_angle_triangle(3,\
    \ 7\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_wh7n0bs.ts(36,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp_wh7n0bs.ts(36,9): error TS1005: '','' expected.

    '
  timestamp: 1659978349
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 +\
    \ arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    false

    false

    '
  timestamp: 1659978349
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    if (a > b && a > c) {\n        return a * a === b * b + c * c;\n    }\
    \ else if (b > a && b > c) {\n        return b * b === a * a + c * c;\n    } else\
    \ {\n        return c * c === a * a + b * b;\n    }\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    false

    false

    '
  timestamp: 1659978349
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 +\
    \ arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(3,\
    \ 4, 7));\nconsole.log(right_angle_triangle(3, 4, 8));\nconsole.log(right_angle_triangle(3,\
    \ 4, 9));\nconsole.log(right_angle_triangle(3, 4, 10));\nconsole.log(right_angle_triangle(3,\
    \ 4, 11));\nconsole.log(right_angle_triangle(3, 4, 12));\nconsole.log(right_angle_triangle(3,\
    \ 4, 13));\nconsole.log(right_angle_triangle(3, 4, 14));\nconsole.log(right_angle_triangle(3,\
    \ 4, 15));\nconsole.log(right_angle_triangle(3, 4, 16));\nconsole.log(right_angle_triangle(3,\
    \ 4, 17));\nconsole.log(right_angle_triangle(3, 4, 18));\nconsole.log(right_angle_triangle(3,\
    \ 4, 19));\nconsole.log(right_angle_triangle(3, 4, 20));\nconsole.log(right_angle_triangle(3,\
    \ 4, 21));\nconsole.log(right_angle_triangle(3, 4, 22));\nconsole.log(right_angle_triangle(3,\
    \ 4, 23));\nconsole.log(right_angle_triangle(3, 4, 24));\nconsole.log(right_angle_triangle(3,\
    \ 4, 25));\nconsole.log(right_angle_triangle(3, 4, 26));\nconsole.log(right_angle_triangle(3,\
    \ 4, 27));\nconsole.log(right_angle_triangle(3, 4, 28));\nconsole.log(right_angle_triangle(3,\
    \ 4, 29));\nconsole.log(right_angle_triangle(\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n\
    \  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1adqehet.ts(37,9): error TS1005: '','' expected.

    '
  timestamp: 1659978350
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 +\
    \ arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(3,\
    \ 6, 4));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978350
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(arr[0],\
    \ 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    '
  timestamp: 1659978347
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0]\
    \ ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 6, 3));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(6,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978349
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return (a ** 2 + b ** 2 === c ** 2) || (a ** 2 + c ** 2 === b ** 2) ||\
    \ (b ** 2 + c ** 2 === a ** 2);\n}\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6,\
    \ 3, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 6));\nconsole.log(right_angle_triangle(3, 4, 7));\nconsole.log(right_angle_triangle(7,\
    \ 3, 4));\nconsole.log(right_angle_triangle(4, 7, 3));\nconsole.log(right_angle_triangle(7,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 7, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 7));\nconsole.log(right_angle_triangle(3, 4, 8));\nconsole.log(right_angle_triangle(8,\
    \ 3, 4));\nconsole.log(right_angle_triangle(4, 8, 3));\nconsole.log(right_angle_triangle(8,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 8, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 8));\nconsole.log(right_angle_triangle(3, 4,\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwtdj1m1y.ts(35,9): error TS1005: '','' expected.

    '
  timestamp: 1659978350
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return Math.pow(arr[0],\
    \ 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(4,\
    \ 3, 6));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 6, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(3,\
    \ 6, 5));\nconsole.log(right_angle_triangle(6, 3, 5));\nconsole.log(right_angle_triangle(5,\
    \ 3, 6));\nconsole.log(right_angle_triangle(3, 5, 6));\nconsole.log(right_angle_triangle(6,\
    \ 5, 3));\nconsole.log(right_angle_triangle(5, 6, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 7));\nconsole.log(right_angle_triangle(7, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 7));\nconsole.log(right_angle_triangle(3, 7, 4));\nconsole.log(right_angle_triangle(7,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 7, 3));\nconsole.log(right_angle_triangle(\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu6ugp43s.ts(37,9): error TS1005: '','' expected.

    '
  timestamp: 1659978350
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return (a * a + b * b === c * c) || (a * a + c * c === b * b) || (b *\
    \ b + c * c === a * a);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    '
  timestamp: 1659978350
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(arr[0],\
    \ 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(6,\
    \ 3, 4));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    false

    false

    false

    false

    '
  timestamp: 1659978350
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(arr[0],\
    \ 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(1, 2, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(1, 1, 1));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    false

    false

    '
  timestamp: 1659978350
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0]\
    \ ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(5, 12, 13));\nconsole.log(right_angle_triangle(5,\
    \ 15, 20));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    false

    '
  timestamp: 1659978350
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let result: boolean = false;\n    let sides: number[] = [a, b, c];\n\
    \    sides.sort((a, b) => a - b);\n    if (sides[0] ** 2 + sides[1] ** 2 === sides[2]\
    \ ** 2) {\n        result = true;\n    }\n    return result;\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(5, 12, 13));\nconsole.log(right_angle_triangle(5,\
    \ 15, 20));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    false

    '
  timestamp: 1659978350
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0]\
    \ * arr[0] + arr[1] * arr[1] === arr[2] * arr[2];\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    '
  timestamp: 1659978350
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0]\
    \ ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 5, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6,\
    \ 4, 3));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 6, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978350
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    if (a > b && a > c) {\n        return a * a === b * b + c * c;\n    }\
    \ else if (b > a && b > c) {\n        return b * b === a * a + c * c;\n    } else\
    \ {\n        return c * c === a * a + b * b;\n    }\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 5, 4));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(5, 5, 5));\nconsole.log(right_angle_triangle(5,\
    \ 5, 6));\nconsole.log(right_angle_triangle(5, 6, 5));\nconsole.log(right_angle_triangle(6,\
    \ 5, 5));\nconsole.log(right_angle_triangle(5, 6, 7));\nconsole.log(right_angle_triangle(6,\
    \ 7, 5));\nconsole.log(right_angle_triangle(7, 5, 6));\nconsole.log(right_angle_triangle(7,\
    \ 6, 5));\nconsole.log(right_angle_triangle(6, 5, 7));\nconsole.log(right_angle_triangle(5,\
    \ 7, 6));\nconsole.log(right_angle_triangle(6, 7, 8));\nconsole.log(right_angle_triangle(7,\
    \ 8, 6));\nconsole.log(right_angle_triangle(8, 6, 7));\nconsole.log(right_angle_triangle(8,\
    \ 7, 6));\nconsole.log(right_angle_triangle(7, 6, 8));\nconsole.log(right_angle_triangle(6,\
    \ 8, 7));\nconsole.log(right_angle_triangle(7,\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n\
    \  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpx0yl93ik.ts(40,9): error TS1005: '','' expected.

    '
  timestamp: 1659978350
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let sides = [a, b, c];\n    sides.sort((a, b) => a - b);\n    return\
    \ Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}\n\
    \nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\nconsole.log(right_angle_triangle(3, 4, 7));\nconsole.log(right_angle_triangle(3,\
    \ 4, 8));\nconsole.log(right_angle_triangle(3, 4, 9));\nconsole.log(right_angle_triangle(3,\
    \ 4, 10));\nconsole.log(right_angle_triangle(3, 4, 11));\nconsole.log(right_angle_triangle(3,\
    \ 4, 12));\nconsole.log(right_angle_triangle(3, 4, 13));\nconsole.log(right_angle_triangle(3,\
    \ 4, 14));\nconsole.log(right_angle_triangle(3, 4, 15));\nconsole.log(right_angle_triangle(3,\
    \ 4, 16));\nconsole.log(right_angle_triangle(3, 4, 17));\nconsole.log(right_angle_triangle(3,\
    \ 4, 18));\nconsole.log(right_angle_triangle(3, 4, 19));\nconsole.log(right_angle_triangle(3,\
    \ 4, 20));\nconsole.log(right_angle_triangle(3, 4, 21));\nconsole.log(right_angle_triangle(3,\
    \ 4, 22));\nconsole.log(right_angle_triangle(3, 4, 23));\nconsole.log(right_angle_triangle(3,\
    \ 4, 24));\nconsole.log(right_angle_triangle(3, 4, 25));\nconsole.log(right_angle_triangle(3,\
    \ 4, 26));\nconsole.log(right_angle_triangle(3, 4, 27));\nconsole.log(right_angle_triangle(3,\
    \ 4, 28));\nconsole.log(right_angle_\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n\
    \  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_90nl0ks.ts(37,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp_90nl0ks.ts(37,9): error TS1005: '','' expected.

    '
  timestamp: 1659978351
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return (a * a + b * b === c * c) || (a * a + c * c === b * b) || (b *\
    \ b + c * c === a * a);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4,\
    \ 6, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(6,\
    \ 3, 4));\nconsole.log(right_angle_triangle(4, 3, 6));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978351
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 +\
    \ arr[1] ** 2 === arr[2] ** 2;\n}\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(3,\
    \ 6, 4));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978351
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0]\
    \ ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6,\
    \ 3, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(3,\
    \ 6, 4));\nconsole.log(right_angle_triangle(3, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(4,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 4, 4));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978352
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 +\
    \ arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(3,\
    \ 6, 4));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978349
- exit_code: 1
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let max = Math.max(a, b, c);\n    let sum = a + b + c;\n    let diff\
    \ = sum - max;\n    if (max * max === diff * diff) {\n        return true;\n \
    \   }\n    return false;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 6, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6,\
    \ 3, 4));\nconsole.log(right_angle_triangle(4, 3, 6));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmptk_x61ci.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptk_x61ci.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978352
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return Math.pow(arr[0],\
    \ 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    false

    false

    '
  timestamp: 1659978352
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return (a ** 2 + b ** 2 === c ** 2) || (a ** 2 + c ** 2 === b ** 2) ||\
    \ (b ** 2 + c ** 2 === a ** 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(5,\
    \ 6, 7));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    false

    false

    '
  timestamp: 1659978352
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return (a**2 + b**2 === c**2) || (a**2 + c**2 === b**2) || (b**2 + c**2\
    \ === a**2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3,\
    \ 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(5,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    '
  timestamp: 1659978352
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0]\
    \ ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(6,\
    \ 3, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(3,\
    \ 6, 4));\nconsole.log(right_angle_triangle(3, 4, 7));\nconsole.log(right_angle_triangle(7,\
    \ 4, 3));\nconsole.log(right_angle_triangle(7, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 7, 3));\nconsole.log(right_angle_triangle(3, 7, 4));\nconsole.log(right_angle_triangle(3,\
    \ 4, 8));\nconsole.log(right_angle_triangle(8, 4, 3));\nconsole.log(right_angle_triangle(8,\
    \ 3, 4));\nconsole.log(right_angle_triangle(4, 8, 3));\nconsole.log(right_angle_triangle(3,\
    \ 8, 4));\nconsole.log(right_angle_triangle(3, 4, 9));\nconsole.log(right_angle_triangle(9,\
    \ 4, 3));\nconsole.log(right_angle_triangle(9, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 9, 3));\nconsole.log(right_angle\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n\
    \  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjce95c5t.ts(38,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpjce95c5t.ts(38,9): error TS1005: '','' expected.

    '
  timestamp: 1659978352
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0]\
    \ ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(6,\
    \ 3, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(4,\
    \ 3, 6));\nconsole.log(right_angle_triangle(6, 4, 5));\nconsole.log(right_angle_triangle(6,\
    \ 5, 4));\nconsole.log(right_angle_triangle(5, 6, 4));\nconsole.log(right_angle_triangle(5,\
    \ 4, 6));\nconsole.log(right_angle_triangle(4, 6, 5));\nconsole.log(right_angle_triangle(4,\
    \ 5, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978352
- exit_code: 1
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return a ** 2 + b ** 2 === c ** 2;\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4,\
    \ 4, 4));\nconsole.log(right_angle_triangle(4, 4, 5));\nconsole.log(right_angle_triangle(4,\
    \ 5, 4));\nconsole.log(right_angle_triangle(5, 4, 4));\nconsole.log(right_angle_triangle(5,\
    \ 5, 4));\nconsole.log(right_angle_triangle(5, 4, 5));\nconsole.log(right_angle_triangle(4,\
    \ 5, 5));\nconsole.log(right_angle_triangle(5, 5, 5));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp62gq1vnl.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp62gq1vnl.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    false

    false

    false

    true

    false

    false

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978352
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return (a**2 + b**2 === c**2) || (a**2 + c**2 === b**2) || (b**2 + c**2\
    \ === a**2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\nconsole.log(right_angle_triangle(3, 4, 7));\nconsole.log(right_angle_triangle(3,\
    \ 4, 8));\nconsole.log(right_angle_triangle(3, 4, 9));\nconsole.log(right_angle_triangle(3,\
    \ 4, 10));\nconsole.log(right_angle_triangle(3, 4, 11));\nconsole.log(right_angle_triangle(3,\
    \ 4, 12));\nconsole.log(right_angle_triangle(3, 4, 13));\nconsole.log(right_angle_triangle(3,\
    \ 4, 14));\nconsole.log(right_angle_triangle(3, 4, 15));\nconsole.log(right_angle_triangle(3,\
    \ 4, 16));\nconsole.log(right_angle_triangle(3, 4, 17));\nconsole.log(right_angle_triangle(3,\
    \ 4, 18));\nconsole.log(right_angle_triangle(3, 4, 19));\nconsole.log(right_angle_triangle(3,\
    \ 4, 20));\nconsole.log(right_angle_triangle(3, 4, 21));\nconsole.log(right_angle_triangle(3,\
    \ 4, 22));\nconsole.log(right_angle_triangle(3, 4, 23));\nconsole.log(right_angle_triangle(3,\
    \ 4, 24));\nconsole.log(right_angle_triangle(3, 4, 25));\nconsole.log(right_angle_triangle(3,\
    \ 4, 26));\nconsole.log(right_angle_triangle(3, 4, 27));\nconsole.log(right_angle_triangle(3,\
    \ 4, 28));\nconsole.log(right_angle_triangle(3, 4, 29));\nconsole.log(right_angle_triangle(3,\
    \ 4\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpn55m89mr.ts(36,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpn55m89mr.ts(36,9): error TS1005: '','' expected.

    '
  timestamp: 1659978352
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let sides = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(sides[0],\
    \ 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(5,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    '
  timestamp: 1659978352
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] * arr[0]\
    \ + arr[1] * arr[1] === arr[2] * arr[2];\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6,\
    \ 3, 4));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4,\
    \ 6, 3));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(3,\
    \ 6, 4));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 4));\nconsole.log(right_angle_triangle(4, 4, 3));\nconsole.log(right_angle_triangle(4,\
    \ 4, 4));\nconsole.log(right_angle_triangle(4, 5, 6));\nconsole.log(right_angle_triangle(6,\
    \ 4, 5));\nconsole.log(right_angle_triangle(6, 5, 4));\nconsole.log(right_angle_triangle(5,\
    \ 6, 4));\nconsole.log(right_angle_triangle(5, 4, 6));\nconsole.log(right_angle_triangle(4,\
    \ 6, 5));\nconsole.log(right_angle_triangle(4, 5, 6));\nconsole.log(right_angle_triangle(5,\
    \ 4, 6));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978352
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 +\
    \ arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    false

    false

    '
  timestamp: 1659978352
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0]\
    \ ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    '
  timestamp: 1659978347
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0]\
    \ ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(3,\
    \ 4, 7));\nconsole.log(right_angle_triangle(3, 4, 8));\nconsole.log(right_angle_triangle(3,\
    \ 4, 9));\nconsole.log(right_angle_triangle(3, 4, 10));\nconsole.log(right_angle_triangle(3,\
    \ 4, 11));\nconsole.log(right_angle_triangle(3, 4, 12));\nconsole.log(right_angle_triangle(3,\
    \ 4, 13));\nconsole.log(right_angle_triangle(3, 4, 14));\nconsole.log(right_angle_triangle(3,\
    \ 4, 15));\nconsole.log(right_angle_triangle(3, 4, 16));\nconsole.log(right_angle_triangle(3,\
    \ 4, 17));\nconsole.log(right_angle_triangle(3, 4, 18));\nconsole.log(right_angle_triangle(3,\
    \ 4, 19));\nconsole.log(right_angle_triangle(3, 4, 20));\nconsole.log(right_angle_triangle(3,\
    \ 4, 21));\nconsole.log(right_angle_triangle(3, 4, 22));\nconsole.log(right_angle_triangle(3,\
    \ 4, 23));\nconsole.log(right_angle_triangle(3, 4, 24));\nconsole.log(right_angle_triangle(3,\
    \ 4, 25));\nconsole.log(right_angle_triangle(3, 4, 26));\nconsole.log(right_angle_triangle(3,\
    \ 4, 27));\nconsole.log(right_angle\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n\
    \  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp5n_9_hh.ts(38,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpp5n_9_hh.ts(38,9): error TS1005: '','' expected.

    '
  timestamp: 1659978352
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0]\
    \ ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    false

    '
  timestamp: 1659978353
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let sides = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(sides[0],\
    \ 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978352
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return (a ** 2 + b ** 2 === c ** 2) || (a ** 2 + c ** 2 === b ** 2) ||\
    \ (b ** 2 + c ** 2 === a ** 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6,\
    \ 3, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(3,\
    \ 6, 4));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4,\
    \ 3, 6));\nconsole.log(right_angle_triangle(3, 6, 5));\nconsole.log(right_angle_triangle(6,\
    \ 3, 5));\nconsole.log(right_angle_triangle(5, 6, 3));\nconsole.log(right_angle_triangle(3,\
    \ 5, 6));\nconsole.log(right_angle_triangle(5, 3, 6));\nconsole.log(right_angle_triangle(6,\
    \ 5, 3));\nconsole.log(right_angle_triangle(5, 6, 4));\nconsole.log(right_angle_triangle(6,\
    \ 5, 4));\nconsole.log(right_angle_triangle(4, 6, 5));\nconsole.log(right_angle_triangle(5,\
    \ 4, 6));\nconsole.log(right_angle_triangle(4, 5, 6));\nconsole.log(right_angle_triangle(6,\
    \ 4, 5));\nconsole.log(right_angle_triangle(4, 6, 7));\nconsole.log(right_angle_triangle(6,\
    \ 4, 7));\nconsole.log(right_angle_triangle(7, 6, 4));\nconsole.log(right_angle_triangle(4,\
    \ 7, 6));\nconsole.log(right_angle_triangle(7, 4\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpn6np_7wn.ts(36,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpn6np_7wn.ts(36,9): error TS1005: '','' expected.

    '
  timestamp: 1659978352
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return Math.pow(arr[0],\
    \ 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    '
  timestamp: 1659978353
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b\
    \ + c * c == a * a);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5,\
    \ 4, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(6,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(4,\
    \ 6, 3));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(3,\
    \ 3, 4));\nconsole.log(right_angle_triangle(4, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 4));\nconsole.log(right_angle_triangle(4, 4, 3));\nconsole.log(right_angle_triangle(4,\
    \ 4, 4));\nconsole.log(right_angle_triangle(3, 3, 5));\nconsole.log(right_angle_triangle(5,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 5, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 6));\nconsole.log(right_angle_triangle(6, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 6, 3));\nconsole.log(right_angle_triangle(3, 3, 7));\nconsole.log(right_angle_triangle(7,\
    \ 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdjjhzf8p.ts(36,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpdjjhzf8p.ts(36,9): error TS1005: '','' expected.

    '
  timestamp: 1659978352
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return (a * a + b * b == c * c || a * a + c * c == b * b || b * b + c\
    \ * c == a * a);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(6,\
    \ 3, 4));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(4,\
    \ 6, 3));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 6, 8));\nconsole.log(right_angle_triangle(3, 8, 6));\nconsole.log(right_angle_triangle(8,\
    \ 3, 6));\nconsole.log(right_angle_triangle(6, 3, 8));\nconsole.log(right_angle_triangle(6,\
    \ 8, 3));\nconsole.log(right_angle_triangle(8, 6, 3));\nconsole.log(right_angle_triangle(6,\
    \ 8, 10));\nconsole.log(right_angle_triangle(6, 10, 8));\nconsole.log(right_angle_triangle(10,\
    \ 6, 8));\nconsole.log(right_angle_triangle(8, 6, 10));\nconsole.log(right_angle_triangle(8,\
    \ 10, 6));\nconsole.log(right_angle_triangle(10, 8, 6));\nconsole.log(right_angle_triangle(8,\
    \ 10, 12));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    true

    true

    true

    true

    true

    true

    false

    '
  timestamp: 1659978353
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 +\
    \ arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    false

    false

    '
  timestamp: 1659978352
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0]\
    \ ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6,\
    \ 4, 3));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 6, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(4,\
    \ 3, 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978353
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    if (a > b && a > c) {\n        return a * a === b * b + c * c;\n    }\
    \ else if (b > a && b > c) {\n        return b * b === a * a + c * c;\n    } else\
    \ {\n        return c * c === a * a + b * b;\n    }\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(4,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 3, 4));\nconsole.log(right_angle_triangle(5,\
    \ 3, 5));\nconsole.log(right_angle_triangle(3, 5, 5));\nconsole.log(right_angle_triangle(5,\
    \ 5, 3));\nconsole.log(right_angle_triangle(10, 24, 26));\nconsole.log(right_angle_triangle(24,\
    \ 26, 10));\nconsole.log(right_angle_triangle(26, 10, 24));\nconsole.log(right_angle_triangle(10,\
    \ 26, 24));\nconsole.log(right_angle_triangle(24, 10, 26));\nconsole.log(right_angle_triangle(26,\
    \ 24, 10));\nconsole.log(right_angle_triangle(30, 36, 42));\nconsole.log(right_angle_triangle(36,\
    \ 42, 30));\nconsole.log(right_angle_triangle(42, 30, 36));\nconsole.log(right_angle_triangle(30,\
    \ 42, 36));\nconsole.log(right_angle_triangle(36,\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1_4fj40e.ts(40,9): error TS1005: '','' expected.

    '
  timestamp: 1659978353
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return (a ** 2 + b ** 2 == c ** 2) || (a ** 2 + c ** 2 == b ** 2) ||\
    \ (b ** 2 + c ** 2 == a ** 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 6));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 3, 3));\nconsole.log(right_angle_triangle(4,\
    \ 4, 4));\nconsole.log(right_angle_triangle(4, 4, 5));\nconsole.log(right_angle_triangle(5,\
    \ 4, 4));\nconsole.log(right_angle_triangle(4, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 4, 6));\nconsole.log(right_angle_triangle(6, 4, 4));\nconsole.log(right_angle_triangle(4,\
    \ 6, 4));\nconsole.log(right_angle_triangle(4, 4, 7));\nconsole.log(right_angle_triangle(7,\
    \ 4, 4));\nconsole.log(right_angle_triangle(4, 7\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpivkjzhjc.ts(36,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpivkjzhjc.ts(36,9): error TS1005: '','' expected.

    '
  timestamp: 1659978353
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0]\
    \ ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(1, 2, 3));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    '
  timestamp: 1659978354
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let sides = [a, b, c];\n    sides.sort((a, b) => a - b);\n    return\
    \ Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}\n\
    \nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\nconsole.log(right_angle_triangle(3, 4, 7));\nconsole.log(right_angle_triangle(3,\
    \ 4, 8));\nconsole.log(right_angle_triangle(3, 4, 9));\nconsole.log(right_angle_triangle(3,\
    \ 4, 10));\nconsole.log(right_angle_triangle(3, 4, 11));\nconsole.log(right_angle_triangle(3,\
    \ 4, 12));\nconsole.log(right_angle_triangle(3, 4, 13));\nconsole.log(right_angle_triangle(3,\
    \ 4, 14));\nconsole.log(right_angle_triangle(3, 4, 15));\nconsole.log(right_angle_triangle(3,\
    \ 4, 16));\nconsole.log(right_angle_triangle(3, 4, 17));\nconsole.log(right_angle_triangle(3,\
    \ 4, 18));\nconsole.log(right_angle_triangle(3, 4, 19));\nconsole.log(right_angle_triangle(3,\
    \ 4, 20));\nconsole.log(right_angle_triangle(3, 4, 21));\nconsole.log(right_angle_triangle(3,\
    \ 4, 22));\nconsole.log(right_angle_triangle(3, 4, 23));\nconsole.log(right_angle_triangle(3,\
    \ 4, 24));\nconsole.log(right_angle_triangle(3, 4, 25));\nconsole.log(right_angle_triangle(3,\
    \ 4, 26));\nconsole.log(right_angle_triangle(3, 4, 27));\nconsole.log(right_angle_triangle(3,\
    \ 4, 28));\nconsole.log(right_angle_\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n\
    \  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_90nl0ks.ts(37,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp_90nl0ks.ts(37,9): error TS1005: '','' expected.

    '
  timestamp: 1659978351
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0]\
    \ ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(5,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    '
  timestamp: 1659978354
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return (a ** 2 + b ** 2 === c ** 2 || a ** 2 + c ** 2 === b ** 2 || b\
    \ ** 2 + c ** 2 === a ** 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(4,\
    \ 6, 3));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 6));\nconsole.log(right_angle_triangle(3, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(4,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 3, 5));\nconsole.log(right_angle_triangle(5,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 5, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 6));\nconsole.log(right_angle_triangle(6, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 6, 3));\nconsole.log(right_angle_triangle(3, 3, 7));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978354
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return Math.pow(arr[0],\
    \ 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    '
  timestamp: 1659978342
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return (a * a + b * b === c * c) || (a * a + c * c === b * b) || (b *\
    \ b + c * c === a * a);\n}\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 6, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(6,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(3,\
    \ 5, 5));\nconsole.log(right_angle_triangle(5, 3, 5));\nconsole.log(right_angle_triangle(5,\
    \ 5, 3));\nconsole.log(right_angle_triangle(5, 5, 5));\nconsole.log(right_angle_triangle(5,\
    \ 6, 7));\nconsole.log(right_angle_triangle(7, 5, 6));\nconsole.log(right_angle_triangle(6,\
    \ 7, 5));\nconsole.log(right_angle_triangle(5, 7, 6));\nconsole.log(right_angle_triangle(7,\
    \ 6, 5));\nconsole.log(right_angle_triangle(6, 5, 7));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978355
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0]\
    \ ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(4,\
    \ 3, 6));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(3,\
    \ 4, 4));\nconsole.log(right_angle_triangle(4, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 4, 4));\nconsole.log(right_angle_triangle(4,\
    \ 4, 5));\nconsole.log(right_angle_triangle(5, 4, 4));\nconsole.log(right_angle_triangle(4,\
    \ 5, 4));\nconsole.log(right_angle_triangle(4, 4, 6));\nconsole.log(right_angle_triangle(6,\
    \ 4, 4));\nconsole.log(right_angle_triangle(4, 6, 4));\nconsole.log(right_angle_triangle(4,\
    \ 4, 7));\nconsole.log(right_angle_triangle(7, 4, 4));\nconsole.log(right_angle_triangle(4,\
    \ 7, 4));\nconsole.log(right_angle\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n\
    \  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4rsx32d9.ts(38,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp4rsx32d9.ts(38,9): error TS1005: '','' expected.

    '
  timestamp: 1659978354
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 +\
    \ arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    '
  timestamp: 1659978347
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0]\
    \ ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    '
  timestamp: 1659978342
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return (a * a + b * b === c * c) || (a * a + c * c === b * b) || (b *\
    \ b + c * c === a * a);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4,\
    \ 6, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(6,\
    \ 3, 4));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(3,\
    \ 5, 5));\nconsole.log(right_angle_triangle(5, 3, 5));\nconsole.log(right_angle_triangle(5,\
    \ 5, 3));\nconsole.log(right_angle_triangle(5, 5, 5));\nconsole.log(right_angle_triangle(5,\
    \ 5, 7));\nconsole.log(right_angle_triangle(7, 5, 5));\nconsole.log(right_angle_triangle(5,\
    \ 7, 5));\nconsole.log(right_angle_triangle(5, 5, 8));\nconsole.log(right_angle_triangle(8,\
    \ 5, 5));\nconsole.log(right_angle_triangle(5, 8, 5));\nconsole.log(right_angle_triangle(5,\
    \ 5, 12));\nconsole.log(right_angle_triangle(12, 5, 5));\nconsole.log(right_angle_triangle(5,\
    \ 12\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplwygqf3n.ts(36,1): error TS1005: '','' expected.

    ../../../../../tmp/tmplwygqf3n.ts(36,9): error TS1005: '','' expected.

    '
  timestamp: 1659978354
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] * arr[0]\
    \ + arr[1] * arr[1] === arr[2] * arr[2];\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    '
  timestamp: 1659978355
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    if (a > b && a > c) {\n        return a * a === b * b + c * c;\n    }\
    \ else if (b > a && b > c) {\n        return b * b === a * a + c * c;\n    } else\
    \ {\n        return c * c === a * a + b * b;\n    }\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(3,\
    \ 6, 4));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 6));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 5));\nconsole.log(right_angle_triangle(3, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 3, 6));\nconsole.log(right_angle_triangle(3,\
    \ 6, 3));\nconsole.log(right_angle_triangle(6, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 4));\nconsole.log(right_angle_triangle(4,\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n\
    \  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplcr30p1o.ts(40,9): error TS1005: '','' expected.

    '
  timestamp: 1659978354
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b\
    \ + c * c == a * a);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4,\
    \ 6, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(6,\
    \ 3, 4));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(3,\
    \ 3, 4));\nconsole.log(right_angle_triangle(4, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 4));\nconsole.log(right_angle_triangle(4, 4, 3));\nconsole.log(right_angle_triangle(4,\
    \ 3, 4));\nconsole.log(right_angle_triangle(4, 4, 4));\nconsole.log(right_angle_triangle(4,\
    \ 4, 5));\nconsole.log(right_angle_triangle(5, 4, 4));\nconsole.log(right_angle_triangle(4,\
    \ 5, 4));\nconsole.log(right_angle_triangle(4, 4, 6));\nconsole.log(right_angle_triangle(6,\
    \ 4, 4));\nconsole.log(right_angle_triangle(4, 6, 4));\nconsole.log(right_angle_triangle(4,\
    \ 4\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfhfhay59.ts(36,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpfhfhay59.ts(36,9): error TS1005: '','' expected.

    '
  timestamp: 1659978354
- exit_code: 1
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return a**2 + b**2 === c**2;\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpf_km7io9.js:16:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf_km7io9.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    '
  timestamp: 1659978355
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let sides = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(sides[0],\
    \ 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    '
  timestamp: 1659978347
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 +\
    \ arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(1, 2, 3));\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n\
    \  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    '
  timestamp: 1659978355
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0]\
    \ ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    '
  timestamp: 1659978342
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return (a ** 2 + b ** 2 === c ** 2) || (a ** 2 + c ** 2 === b ** 2) ||\
    \ (b ** 2 + c ** 2 === a ** 2);\n}\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(10,\
    \ 24, 26));\nconsole.log(right_angle_triangle(26, 10, 24));\nconsole.log(right_angle_triangle(24,\
    \ 26, 10));\nconsole.log(right_angle_triangle(24, 10, 26));\nconsole.log(right_angle_triangle(10,\
    \ 26, 24));\nconsole.log(right_angle_triangle(26, 24, 10));\nconsole.log(right_angle_triangle(5,\
    \ 4, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(3,\
    \ 5, 4));\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(10,\
    \ 24, 26));\nconsole.log(right_angle_triangle(26, 10, 24));\nconsole.log(right_angle_triangle(24,\
    \ 26, 10));\nconsole.log(right_angle_triangle(24, 10,\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsm6i398s.ts(35,9): error TS1005: '','' expected.

    '
  timestamp: 1659978341
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(arr[0],\
    \ 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(3,\
    \ 6, 4));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978342
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    if (a > b && a > c) {\n        return a * a === b * b + c * c;\n    }\
    \ else if (b > a && b > c) {\n        return b * b === a * a + c * c;\n    } else\
    \ {\n        return c * c === a * a + b * b;\n    }\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    true

    true

    true

    '
  timestamp: 1659978355
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let sides = [a, b, c].sort((a, b) => a - b);\n    return sides[0] **\
    \ 2 + sides[1] ** 2 === sides[2] ** 2;\n}\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(1, 2, 3));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    '
  timestamp: 1659978355
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return Math.pow(arr[0],\
    \ 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(13,\
    \ 12, 5));\nconsole.log(right_angle_triangle(12, 13, 5));\nconsole.log(right_angle_triangle(5,\
    \ 12, 13));\nconsole.log(right_angle_triangle(13, 5, 12));\nconsole.log(right_angle_triangle(12,\
    \ 5, 13));\nconsole.log(right_angle_triangle(5, 13, 12));\nconsole.log(right_angle_triangle(12,\
    \ 5, 13));\nconsole.log(right_angle_triangle(13, 12, 5));\nconsole.log(right_angle_triangle(5,\
    \ 13, 12));\nconsole.log(right_angle_triangle(12, 13, 5));\nconsole.log(right_angle_triangle(5,\
    \ 12, 13));\nconsole.log(right_angle_triangle(13, 5, 12));\nconsole.log(right_angle_triangle(12,\
    \ 5, 13));\nconsole.log(right_angle_triangle(5, 12, 13));\nconsole.log(right_angle_triangle(13,\
    \ 12, 5));\nconsole.log(right_angle_triangle(5, 13, 12));\nconsole.log(right_angle_triangle(12,\
    \ 13, 5));\nconsole.log(right_angle_triangle(5, 12, 13));\nconsole.log(right_angle_triangle(\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmply7isi7o.ts(37,9): error TS1005: '','' expected.

    '
  timestamp: 1659978355
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 +\
    \ arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    '
  timestamp: 1659978347
- exit_code: 1
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let max = Math.max(a, b, c);\n    let sum = a + b + c;\n    let rest\
    \ = sum - max;\n    return max * max === rest * rest;\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpx3u52twa.js:17:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpx3u52twa.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'false

    false

    '
  timestamp: 1659978355
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let sides = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(sides[0],\
    \ 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    false

    false

    '
  timestamp: 1659978355
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return a ** 2 + b ** 2 === c ** 2;\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(4,\
    \ 3, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 6, 4));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 6, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6,\
    \ 3, 5));\nconsole.log(right_angle_triangle(5, 6, 3));\nconsole.log(right_angle_triangle(3,\
    \ 5, 6));\nconsole.log(right_angle_triangle(5, 3, 6));\nconsole.log(right_angle_triangle(6,\
    \ 5, 3));\nconsole.log(right_angle_triangle(3, 6, 5));\nconsole.log(right_angle_triangle(5,\
    \ 4, 6));\nconsole.log(right_angle_triangle(6, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 6, 5));\nconsole.log(right_angle_triangle(5, 6, 4));\nconsole.log(right_angle_triangle(6,\
    \ 4, 5));\nconsole.log(right_angle_triangle(4, 5, 6));\nconsole.log(right_angle_triangle(5,\
    \ 4, 7));\nconsole.log(right_angle_triangle(7, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 7, 5));\nconsole.log(right_angle\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n\
    \  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpihlct4a8.ts(38,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpihlct4a8.ts(38,9): error TS1005: '','' expected.

    '
  timestamp: 1659978355
- exit_code: 1
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return a ** 2 + b ** 2 === c ** 2;\n}\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(5, 12, 13));\nconsole.log(right_angle_triangle(5,\
    \ 15, 20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0ejkcvwm.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0ejkcvwm.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    false

    true

    false

    '
  timestamp: 1659978355
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(arr[0],\
    \ 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(1, 2, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    false

    '
  timestamp: 1659978355
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 +\
    \ arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    false

    false

    '
  timestamp: 1659978356
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(arr[0],\
    \ 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(3,\
    \ 4, 7));\nconsole.log(right_angle_triangle(3, 4, 8));\nconsole.log(right_angle_triangle(3,\
    \ 4, 9));\nconsole.log(right_angle_triangle(3, 4, 10));\nconsole.log(right_angle_triangle(3,\
    \ 4, 11));\nconsole.log(right_angle_triangle(3, 4, 12));\nconsole.log(right_angle_triangle(3,\
    \ 4, 13));\nconsole.log(right_angle_triangle(3, 4, 14));\nconsole.log(right_angle_triangle(3,\
    \ 4, 15));\nconsole.log(right_angle_triangle(3, 4, 16));\nconsole.log(right_angle_triangle(3,\
    \ 4, 17));\nconsole.log(right_angle_triangle(3, 4, 18));\nconsole.log(right_angle_triangle(3,\
    \ 4, 19));\nconsole.log(right_angle_triangle(3, 4, 20));\nconsole.log(right_angle_triangle(3,\
    \ 4, 21));\nconsole.log(right_angle_triangle(3, 4, 22));\nconsole.log(right_angle_triangle(3,\
    \ 4, 23));\nconsole.log(right_angle_triangle(3, 4, 24));\nconsole.log(right_angle_triangle(3,\
    \ 4, 25));\nconsole.log(right_angle_triangle(3, 4, 26));\nconsole.log(right_angle_triangle(3,\
    \ 4, 27));\nconsole.log(right_angle_triangle(3, 4, 28));\nconsole.log(right_angle_triangle(3,\
    \ 4,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp27b7yqhu.ts(36,9): error TS1005: '','' expected.

    '
  timestamp: 1659978347
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return (a * a + b * b == c * c || a * a + c * c == b * b || b * b + c\
    \ * c == a * a);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 4));\nconsole.log(right_angle_triangle(4, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 4, 5));\nconsole.log(right_angle_triangle(4,\
    \ 5, 4));\nconsole.log(right_angle_triangle(5, 4, 4));\nconsole.log(right_angle_triangle(3,\
    \ 5, 5));\nconsole.log(right_angle_triangle(5, 3, 5));\nconsole.log(right_angle_triangle(5,\
    \ 5, 3));\nconsole.log(right_angle_triangle(3, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 5));\nconsole.log(right_angle_triangle(3, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(3,\
    \ 6, 4));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(4,\
    \ 6, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978355
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return (a ** 2 + b ** 2 === c ** 2) || (a ** 2 + c ** 2 === b ** 2) ||\
    \ (b ** 2 + c ** 2 === a ** 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    false

    false

    '
  timestamp: 1659978356
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return a * a + b * b === c * c || a * a + c * c === b * b || b * b +\
    \ c * c === a * a;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(3,\
    \ 6, 4));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 6, 3));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4,\
    \ 3, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978356
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(arr[0],\
    \ 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(2, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\nconsole.log(right_angle_triangle(3, 4, 7));\nconsole.log(right_angle_triangle(3,\
    \ 4, 8));\nconsole.log(right_angle_triangle(3, 4, 9));\nconsole.log(right_angle_triangle(3,\
    \ 4, 10));\nconsole.log(right_angle_triangle(3, 4, 11));\nconsole.log(right_angle_triangle(3,\
    \ 4, 12));\nconsole.log(right_angle_triangle(3, 4, 13));\nconsole.log(right_angle_triangle(3,\
    \ 4, 14));\nconsole.log(right_angle_triangle(3, 4, 15));\nconsole.log(right_angle_triangle(3,\
    \ 4, 16));\nconsole.log(right_angle_triangle(3, 4, 17));\nconsole.log(right_angle_triangle(3,\
    \ 4, 18));\nconsole.log(right_angle_triangle(3, 4, 19));\nconsole.log(right_angle_triangle(3,\
    \ 4, 20));\nconsole.log(right_angle_triangle(3, 4, 21));\nconsole.log(right_angle_triangle(3,\
    \ 4, 22));\nconsole.log(right_angle_triangle(3, 4, 23));\nconsole.log(right_angle_triangle(3,\
    \ 4, 24));\nconsole.log(right_angle_triangle(3, 4, 25));\nconsole.log(right_angle_triangle(3,\
    \ 4, 26));\nconsole.log(right_angle_triangle(3, 4, 27));\nconsole.log(right_angle_triangle(3,\
    \ 4,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmph1z9e_pm.ts(36,9): error TS1005: '','' expected.

    '
  timestamp: 1659978356
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0]\
    \ ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(3,\
    \ 6, 4));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 6));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 4));\nconsole.log(right_angle_triangle(4, 4, 3));\nconsole.log(right_angle_triangle(4,\
    \ 4, 4));\nconsole.log(right_angle_triangle(4, 4, 5));\nconsole.log(right_angle_triangle(5,\
    \ 4, 4));\nconsole.log(right_angle_triangle(4, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 4, 6));\nconsole.log(right_angle_triangle(6, 4, 4));\nconsole.log(right_angle_triangle(4,\
    \ 6, 4));\nconsole.log(right_angle_triangle(4, 4, 7));\nconsole.log(right_angle_triangle(7,\
    \ 4, 4));\nconsole.log(right_angle_\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n\
    \  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprkbyzrpw.ts(37,1): error TS1005: '','' expected.

    ../../../../../tmp/tmprkbyzrpw.ts(37,9): error TS1005: '','' expected.

    '
  timestamp: 1659978357
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(arr[0],\
    \ 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(5, 12, 13));\nconsole.log(right_angle_triangle(5,\
    \ 15, 20));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    false

    '
  timestamp: 1659978357
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0]\
    \ ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(4,\
    \ 6, 3));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 6, 4));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4,\
    \ 3, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978357
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return (a ** 2 + b ** 2 === c ** 2) || (a ** 2 + c ** 2 === b ** 2) ||\
    \ (b ** 2 + c ** 2 === a ** 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 4));\nconsole.log(right_angle_triangle(4, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 4, 3));\nconsole.log(right_angle_triangle(4,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 3, 5));\nconsole.log(right_angle_triangle(3,\
    \ 5, 3));\nconsole.log(right_angle_triangle(5, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 6));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6,\
    \ 3, 4));\nconsole.log(right_angle_triangle(6, 4, 3));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978357
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let sides = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(sides[0],\
    \ 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(3,\
    \ 6, 4));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(4,\
    \ 6, 3));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(6,\
    \ 4, 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978357
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return Math.pow(arr[0],\
    \ 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    '
  timestamp: 1659978353
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    if (a * a + b * b == c * c) {\n        return true;\n    } else if (a\
    \ * a + c * c == b * b) {\n        return true;\n    } else if (b * b + c * c\
    \ == a * a) {\n        return true;\n    } else {\n        return false;\n   \
    \ }\n}\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4,\
    \ 6, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(6,\
    \ 3, 4));\nconsole.log(right_angle_triangle(4, 3, 6));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978357
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return (a * a + b * b == c * c || a * a + c * c == b * b || b * b + c\
    \ * c == a * a);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3,\
    \ 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(5,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 4));\nconsole.log(right_angle_triangle(4, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 5, 6));\nconsole.log(right_angle_triangle(5, 3, 6));\nconsole.log(right_angle_triangle(5,\
    \ 6, 3));\nconsole.log(right_angle_triangle(3, 6, 5));\nconsole.log(right_angle_triangle(6,\
    \ 3, 5));\nconsole.log(right_angle_triangle(6, 5, 3));\nconsole.log(right_angle_triangle(3,\
    \ 7, 8));\nconsole.log(right_angle_triangle(7, 3, 8));\nconsole.log(right_angle_triangle(7,\
    \ 8, 3));\nconsole.log(right_angle_triangle(3, 8, 7));\nconsole.log(right_angle_triangle(8,\
    \ 3, 7));\nconsole.log(right_angle_triangle(8, 7, 3));\nconsole.log(right_angle_triangle(4,\
    \ 5, 7));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978357
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return (a ** 2 + b ** 2 === c ** 2) || (a ** 2 + c ** 2 === b ** 2) ||\
    \ (b ** 2 + c ** 2 === a ** 2);\n}\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 6));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6,\
    \ 3, 4));\nconsole.log(right_angle_triangle(6, 6, 6));\nconsole.log(right_angle_triangle(3,\
    \ 4, 7));\nconsole.log(right_angle_triangle(7, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 7, 4));\nconsole.log(right_angle_triangle(4, 3, 7));\nconsole.log(right_angle_triangle(4,\
    \ 7, 3));\nconsole.log(right_angle_triangle(7, 3, 4));\nconsole.log(right_angle_triangle(7,\
    \ 7, 7));\nconsole.log(right_angle_triangle(3, 4, 8));\nconsole.log(right_angle_triangle(8,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 8, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 8));\nconsole.log(right_angle_triangle(4, 8,\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplery0acl.ts(35,9): error TS1005: '','' expected.

    '
  timestamp: 1659978357
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b\
    \ + c * c == a * a);\n}\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 6, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6,\
    \ 3, 4));\nconsole.log(right_angle_triangle(4, 3, 6));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978357
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0]\
    \ ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    '
  timestamp: 1659978342
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 +\
    \ arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(4,\
    \ 6, 3));\nconsole.log(right_angle_triangle(6, 3, 4));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978357
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 +\
    \ arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(3,\
    \ 5, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(4,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 4, 4));\nconsole.log(right_angle_triangle(4, 4, 5));\nconsole.log(right_angle_triangle(4,\
    \ 5, 4));\nconsole.log(right_angle_triangle(5, 4, 4));\nconsole.log(right_angle_triangle(5,\
    \ 5, 5));\nconsole.log(right_angle_triangle(5, 5, 6));\nconsole.log(right_angle_triangle(5,\
    \ 6, 5));\nconsole.log(right_angle_triangle(6, 5, 5));\nconsole.log(right_angle_triangle(6,\
    \ 6, 6));\nconsole.log(right_angle_triangle(6, 6, 7));\nconsole.log(right_angle_triangle(6,\
    \ 7, 6));\nconsole.log(right_angle_triangle(7, 6, 6));\nconsole.log(right_angle_triangle(7,\
    \ 7, 7));\nconsole.log(right_angle_triangle(7, 7, 8));\nconsole.log(right_angle_triangle(7,\
    \ 8, 7));\nconsole.log(right_angle_triangle(\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n\
    \  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpo66myw9l.ts(37,9): error TS1005: '','' expected.

    '
  timestamp: 1659978357
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(arr[0],\
    \ 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    '
  timestamp: 1659978347
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let sides = [a, b, c].sort((a, b) => a - b);\n    return sides[0] **\
    \ 2 + sides[1] ** 2 === sides[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(3,\
    \ 6, 4));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 6));\nconsole.log(right_angle_triangle(3, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(4,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 3, 5));\nconsole.log(right_angle_triangle(5,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 5, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 6));\nconsole.log(right_angle_triangle(6, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 6, 3));\nconsole.log(right_angle_triangle(\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n\
    \  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwk3chk8v.ts(37,9): error TS1005: '','' expected.

    '
  timestamp: 1659978357
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return a * a + b * b === c * c || a * a + c * c === b * b || b * b +\
    \ c * c === a * a;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    '
  timestamp: 1659978357
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    if (a > b && a > c) {\n        return Math.pow(a, 2) === Math.pow(b,\
    \ 2) + Math.pow(c, 2);\n    } else if (b > a && b > c) {\n        return Math.pow(b,\
    \ 2) === Math.pow(a, 2) + Math.pow(c, 2);\n    } else {\n        return Math.pow(c,\
    \ 2) === Math.pow(a, 2) + Math.pow(b, 2);\n    }\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(10,\
    \ 24, 26));\nconsole.log(right_angle_triangle(24, 10, 26));\nconsole.log(right_angle_triangle(26,\
    \ 24, 10));\nconsole.log(right_angle_triangle(26, 10, 24));\nconsole.log(right_angle_triangle(10,\
    \ 26, 24));\nconsole.log(right_angle_triangle(24, 26, 10));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    true

    true

    true

    true

    true

    true

    '
  timestamp: 1659978358
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return Math.pow(a, 2) + Math.pow(b, 2) === Math.pow(c, 2) ||\n      \
    \  Math.pow(a, 2) + Math.pow(c, 2) === Math.pow(b, 2) ||\n        Math.pow(b,\
    \ 2) + Math.pow(c, 2) === Math.pow(a, 2);\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(3,\
    \ 4, 7));\nconsole.log(right_angle_triangle(3, 4, 8));\nconsole.log(right_angle_triangle(3,\
    \ 4, 9));\nconsole.log(right_angle_triangle(3, 4, 10));\nconsole.log(right_angle_triangle(3,\
    \ 4, 11));\nconsole.log(right_angle_triangle(3, 4, 12));\nconsole.log(right_angle_triangle(3,\
    \ 4, 13));\nconsole.log(right_angle_triangle(3, 4, 14));\nconsole.log(right_angle_triangle(3,\
    \ 4, 15));\nconsole.log(right_angle_triangle(3, 4, 16));\nconsole.log(right_angle_triangle(3,\
    \ 4, 17));\nconsole.log(right_angle_triangle(3, 4, 18));\nconsole.log(right_angle_triangle(3,\
    \ 4, 19));\nconsole.log(right_angle_triangle(3, 4, 20));\nconsole.log(right_angle_triangle(3,\
    \ 4, 21));\nconsole.log(right_angle_triangle(3, 4, 22));\nconsole.log(right_angle_triangle(3,\
    \ 4, 23));\nconsole.log(right_angle_triangle(3, 4, 24));\nconsole.log(right_angle_triangle(3,\
    \ 4, 25));\nconsole.log(right_angle_triangle(3, 4, 26));\nconsole.log(right_angle_triangle(3,\
    \ 4, 27\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphuqwc_90.ts(35,1): error TS1005: '','' expected.

    ../../../../../tmp/tmphuqwc_90.ts(35,9): error TS1005: '','' expected.

    '
  timestamp: 1659978357
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0]\
    \ ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    '
  timestamp: 1659978342
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    if (a > b && a > c) {\n        return Math.pow(a, 2) === Math.pow(b,\
    \ 2) + Math.pow(c, 2);\n    } else if (b > a && b > c) {\n        return Math.pow(b,\
    \ 2) === Math.pow(a, 2) + Math.pow(c, 2);\n    } else {\n        return Math.pow(c,\
    \ 2) === Math.pow(a, 2) + Math.pow(b, 2);\n    }\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4,\
    \ 6, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    false

    false

    false

    false

    '
  timestamp: 1659978358
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0]\
    \ ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    '
  timestamp: 1659978345
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return Math.pow(arr[0],\
    \ 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6,\
    \ 4, 3));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 6, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(4,\
    \ 3, 6));\nconsole.log(right_angle_triangle(3, 4, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 4));\nconsole.log(right_angle_triangle(4, 4, 3));\nconsole.log(right_angle_triangle(4,\
    \ 4, 4));\nconsole.log(right_angle_triangle(1, 1, 1));\nconsole.log(right_angle_triangle(1,\
    \ 1, 2));\nconsole.log(right_angle_triangle(1, 2, 1));\nconsole.log(right_angle_triangle(2,\
    \ 1, 1));\nconsole.log(right_angle_triangle(1, 2, 2));\nconsole.log(right_angle_triangle(2,\
    \ 1, 2));\nconsole.log(right_angle_triangle(2, 2, 1));\nconsole.log(right_angle_triangle(\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpixfcuv49.ts(37,9): error TS1005: '','' expected.

    '
  timestamp: 1659978358
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b\
    \ + c * c == a * a);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 5, 4));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    '
  timestamp: 1659978358
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0]\
    \ ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(6,\
    \ 3, 4));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4,\
    \ 6, 3));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(3,\
    \ 6, 5));\nconsole.log(right_angle_triangle(3, 5, 6));\nconsole.log(right_angle_triangle(5,\
    \ 3, 6));\nconsole.log(right_angle_triangle(5, 6, 3));\nconsole.log(right_angle_triangle(6,\
    \ 5, 3));\nconsole.log(right_angle_triangle(6, 3, 5));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978358
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return a * a + b * b === c * c || a * a + c * c === b * b || b * b +\
    \ c * c === a * a;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 12, 13));\nconsole.log(right_angle_triangle(9, 40, 41));\nconsole.log(right_angle_triangle(8,\
    \ 15, 17));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(120,\
    \ 209, 241));\nconsole.log(right_angle_triangle(3, 5, 7));\nconsole.log(right_angle_triangle(5,\
    \ 3, 7));\nconsole.log(right_angle_triangle(7, 5, 3));\nconsole.log(right_angle_triangle(7,\
    \ 3, 5));\nconsole.log(right_angle_triangle(3, 7, 5));\nconsole.log(right_angle_triangle(5,\
    \ 7, 3));\nconsole.log(right_angle_triangle(7, 5, 12));\nconsole.log(right_angle_triangle(7,\
    \ 12, 5));\nconsole.log(right_angle_triangle(12, 7, 5));\nconsole.log(right_angle_triangle(12,\
    \ 5, 7));\nconsole.log(right_angle_triangle(5, 12, 7));\nconsole.log(right_angle_triangle(5,\
    \ 7, 12));\nconsole.log(right_angle_triangle(7, 5, 12));\nconsole.log(right_angle_triangle(7,\
    \ 12, 5));\nconsole.log(right_angle_triangle(12, 7, 5));\nconsole.log(right_angle_triangle(12,\
    \ 5, 7));\nconsole.log(right_angle_triangle(5, 12, 7));\nconsole.log(right_angle_triangle(5,\
    \ 7, 12));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    true

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978358
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return a * a + b * b === c * c || a * a + c * c === b * b || b * b +\
    \ c * c === a * a;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(3,\
    \ 4, 7));\nconsole.log(right_angle_triangle(3, 4, 8));\nconsole.log(right_angle_triangle(3,\
    \ 4, 9));\nconsole.log(right_angle_triangle(3, 4, 10));\nconsole.log(right_angle_triangle(3,\
    \ 4, 11));\nconsole.log(right_angle_triangle(3, 4, 12));\nconsole.log(right_angle_triangle(3,\
    \ 4, 13));\nconsole.log(right_angle_triangle(3, 4, 14));\nconsole.log(right_angle_triangle(3,\
    \ 4, 15));\nconsole.log(right_angle_triangle(3, 4, 16));\nconsole.log(right_angle_triangle(3,\
    \ 4, 17));\nconsole.log(right_angle_triangle(3, 4, 18));\nconsole.log(right_angle_triangle(3,\
    \ 4, 19));\nconsole.log(right_angle_triangle(3, 4, 20));\nconsole.log(right_angle_triangle(3,\
    \ 4, 21));\nconsole.log(right_angle_triangle(3, 4, 22));\nconsole.log(right_angle_triangle(3,\
    \ 4, 23));\nconsole.log(right_angle_triangle(3, 4, 24));\nconsole.log(right_angle_triangle(3,\
    \ 4, 25));\nconsole.log(right_angle_triangle(3, 4, 26));\nconsole.log(right_angle_triangle(3,\
    \ 4, 27));\nconsole.log(right_angle_triangle(3, 4, 28));\nconsole.log(right_angle_triangle(3,\
    \ 4, 29));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978358
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return Math.pow(arr[0],\
    \ 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6,\
    \ 3, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(6,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(3,\
    \ 6, 4));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4,\
    \ 6, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(6,\
    \ 3, 4));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4,\
    \ 6, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(6\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcnugz8cd.ts(36,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpcnugz8cd.ts(36,9): error TS1005: '','' expected.

    '
  timestamp: 1659978358
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    if (a === 0 || b === 0 || c === 0) {\n        return false;\n    }\n\
    \    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] **\
    \ 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4,\
    \ 5));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(0,\
    \ 4, 6));\nconsole.log(right_angle_triangle(3, 0, 6));\nconsole.log(right_angle_triangle(3,\
    \ 4, 0));\nconsole.log(right_angle_triangle(0, 0, 0));\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(0,\
    \ 4, 6));\nconsole.log(right_angle_triangle(3, 0, 6));\nconsole.log(right_angle_triangle(3,\
    \ 4, 0));\nconsole.log(right_angle_triangle(0, 0, 0));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    false

    false

    false

    false

    true

    false

    false

    false

    false

    false

    '
  timestamp: 1659978359
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0]\
    \ ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    '
  timestamp: 1659978347
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 +\
    \ arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\nconsole.log(right_angle_triangle(4,\
    \ 6, 3));\nconsole.log(right_angle_triangle(6, 3, 4));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978357
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 +\
    \ arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 6));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6,\
    \ 4, 3));\nconsole.log(right_angle_triangle(6, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 6, 4));\nconsole.log(right_angle_triangle(4, 6, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 7));\nconsole.log(right_angle_triangle(3, 7, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 7));\nconsole.log(right_angle_triangle(4, 7, 3));\nconsole.log(right_angle_triangle(7,\
    \ 3, 4));\nconsole.log(right_angle_triangle(7, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 8));\nconsole.log(right_angle_triangle(3, 8, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 8));\nconsole.log(right_angle_triangle(4, 8, 3));\nconsole.log(right_angle_triangle(8,\
    \ 3, 4));\nconsole.log(right_angle_triangle(8, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 9));\nconsole.log(right_angle_triangle(\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n\
    \  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphfvgf1_n.ts(37,9): error TS1005: '','' expected.

    '
  timestamp: 1659978359
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return (a ** 2 + b ** 2 === c ** 2) || (a ** 2 + c ** 2 === b ** 2) ||\
    \ (b ** 2 + c ** 2 === a ** 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(3,\
    \ 4, 7));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    false

    '
  timestamp: 1659978359
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] ** 2 +\
    \ arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\nconsole.log(right_angle_triangle(6,\
    \ 3, 4));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4,\
    \ 6, 3));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(3,\
    \ 6, 4));\nconsole.log(right_angle_triangle(3, 3, 4));\nconsole.log(right_angle_triangle(3,\
    \ 4, 3));\nconsole.log(right_angle_triangle(4, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 5));\nconsole.log(right_angle_triangle(3, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 3));\nconsole.log(right_angle_triangle(5, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 5));\nconsole.log(right_angle_triangle(3, 5, 5));\nconsole.log(right_angle_triangle(5,\
    \ 5, 5));\nconsole.log(right_angle_triangle(5, 5, 6));\nconsole.log(right_angle_triangle(5,\
    \ 6, 5));\nconsole.log(right_angle_triangle(\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n\
    \  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvjrd786o.ts(37,9): error TS1005: '','' expected.

    '
  timestamp: 1659978359
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0]\
    \ ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    false

    false

    '
  timestamp: 1659978344
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b\
    \ + c * c == a * a);\n}\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(4,\
    \ 5, 3));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(5,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(3, 3, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\nconsole.log(right_angle_triangle(4, 3, 6));\nconsole.log(right_angle_triangle(6,\
    \ 3, 4));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(4,\
    \ 6, 3));\nconsole.log(right_angle_triangle(3, 6, 4));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    false

    false

    false

    false

    false

    '
  timestamp: 1659978359
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let sides = [a, b, c].sort((a, b) => a - b);\n    return sides[0] **\
    \ 2 + sides[1] ** 2 === sides[2] ** 2;\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(5, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(5, 12, 13));\nconsole.log(right_angle_triangle(5,\
    \ 15, 20));\nconsole.log(right_angle_triangle(5, 15, 6));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    false

    false

    '
  timestamp: 1659978359
- exit_code: 0
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let arr = [a, b, c].sort((a, b) => a - b);\n    return arr[0] * arr[0]\
    \ + arr[1] * arr[1] === arr[2] * arr[2];\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(4, 3, 5));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));\nconsole.log(right_angle_triangle(5, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 5, 4));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(3,\
    \ 3, 3));\nconsole.log(right_angle_triangle(3, 4, 6));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    true

    true

    true

    false

    false

    '
  timestamp: 1659978359
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b\
    \ + c * c == a * a);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(5,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\nconsole.log(right_angle_triangle(6, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 6, 4));\nconsole.log(right_angle_triangle(3, 4, 7));\nconsole.log(right_angle_triangle(7,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 7, 4));\nconsole.log(right_angle_triangle(3,\
    \ 4, 8));\nconsole.log(right_angle_triangle(8, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 8, 4));\nconsole.log(right_angle_triangle(3, 4, 9));\nconsole.log(right_angle_triangle(9,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 9, 4));\nconsole.log(right_angle_triangle(3,\
    \ 4, 10));\nconsole.log(right_angle_triangle(10, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 10, 4));\nconsole.log(right_angle_triangle(3, 4, 11));\nconsole.log(right_angle_triangle(11,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 11, 4));\nconsole.log(right_angle_triangle(3,\
    \ 4, 12));\nconsole.log(right_angle_triangle(12, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 12, 4));\nconsole.log(right_angle_triangle(3, 4, 13));\nconsole.log(right_angle_triangle(13,\
    \ 4\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzs542kz_.ts(36,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpzs542kz_.ts(36,9): error TS1005: '','' expected.

    '
  timestamp: 1659978359
- exit_code: 1
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let result: boolean = false;\n    if (a * a + b * b == c * c) {\n   \
    \     result = true;\n    }\n    return result;\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(3, 4, 6));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmptod4jjoy.js:20:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptod4jjoy.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    '
  timestamp: 1659978359
- exit_code: 2
  program: "//Given the lengths of the three sides of a triangle. Return True if the\
    \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
    // Example:\nfunction right_angle_triangle(a: number, b: number, c: number): boolean\
    \ {\n    let sides = [a, b, c];\n    sides.sort((a, b) => a - b);\n    let [a,\
    \ b, c] = sides;\n    return Math.pow(a, 2) + Math.pow(b, 2) === Math.pow(c, 2);\n\
    }\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(3,\
    \ 4, 6));\nconsole.log(right_angle_triangle(3, 4, 7));\nconsole.log(right_angle_triangle(3,\
    \ 4, 8));\nconsole.log(right_angle_triangle(3, 4, 9));\nconsole.log(right_angle_triangle(3,\
    \ 4, 10));\nconsole.log(right_angle_triangle(3, 4, 11));\nconsole.log(right_angle_triangle(3,\
    \ 4, 12));\nconsole.log(right_angle_triangle(3, 4, 13));\nconsole.log(right_angle_triangle(3,\
    \ 4, 14));\nconsole.log(right_angle_triangle(3, 4, 15));\nconsole.log(right_angle_triangle(3,\
    \ 4, 16));\nconsole.log(right_angle_triangle(3, 4, 17));\nconsole.log(right_angle_triangle(3,\
    \ 4, 18));\nconsole.log(right_angle_triangle(3, 4, 19));\nconsole.log(right_angle_triangle(3,\
    \ 4, 20));\nconsole.log(right_angle_triangle(3, 4, 21));\nconsole.log(right_angle_triangle(3,\
    \ 4, 22));\nconsole.log(right_angle_triangle(3, 4, 23));\nconsole.log(right_angle_triangle(3,\
    \ 4, 24));\nconsole.log(right_angle_triangle(3, 4, 25));\nconsole.log(right_angle_triangle(3,\
    \ 4, 26));\nconsole.log(right_angle_triangle(3, 4, 27));\nconsole.log(right_angle_triangle(3,\
    \ 4, 28));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpm006a44l.ts(38,9): error TS1005: '','' expected.

    '
  timestamp: 1659978359
