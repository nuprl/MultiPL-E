name: HumanEval_58_common
language: ts
prompt: "//Return sorted unique common elements for two lists.\nfunction common(l1:\
  \ number[], l2: number[]): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = common;\n  assert.deepEqual(candidate([1, 4, 3, 34,\
  \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]),[1, 5, 653]);\n  assert.deepEqual(candidate([5,\
  \ 3, 2, 8], [3, 2]),[2, 3]);\n  assert.deepEqual(candidate([4, 3, 2, 8], [3, 2,\
  \ 4]),[2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 8], []),[]);\n}\n\ntest();"
completions: ["    return Array.from(new Set(l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b)));\n}\n", "    return Array.from(new Set(l1.filter(x => l2.includes(x)))).sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) =>\
    \ a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a -\
    \ b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n\
    }\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n}\n",
  "    return l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return\
    \ l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return l1.filter(function\
    \ (n) {\n        return l2.indexOf(n) !== -1;\n    }).sort(function (a, b) {\n\
    \        return a - b;\n    });\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) =>\
    \ a - b);\n}\n", "    let result: number[] = [];\n    for (let i = 0; i < l1.length;\
    \ i++) {\n        for (let j = 0; j < l2.length; j++) {\n            if (l1[i]\
    \ === l2[j]) {\n                result.push(l1[i]);\n            }\n        }\n\
    \    }\n    return result.sort((a, b) => a - b);\n}\n", "    return l1.filter(x\
    \ => l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return l1.filter(x =>\
    \ l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b).filter((x, i, a) => !i || x != a[i - 1]);\n}\n", "    return [...new\
    \ Set(l1.filter(x => l2.includes(x)))].sort((a, b) => a - b);\n}\n", "    return\
    \ l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return l1.filter(x\
    \ => l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return [...new Set(l1.filter(x\
    \ => l2.includes(x)))].sort((a, b) => a - b);\n}\n", "    return l1.filter(x =>\
    \ l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "    return l1.filter(i => l2.includes(i)).sort((a, b) =>\
    \ a - b).filter((item, pos, ary) => !pos || item != ary[pos - 1]);\n}\n", "  \
    \  return l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return\
    \ l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return l1.filter(x\
    \ => l2.includes(x)).sort((a, b) => a - b);\n}\n", "  return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(e => l2.includes(e)).sort((a, b)\
    \ => a - b);\n}\n", "    let l3: number[] = [];\n    l1.forEach(function (item)\
    \ {\n        if (l2.indexOf(item) > -1) {\n            l3.push(item);\n      \
    \  }\n    });\n    return l3.sort(function (a, b) { return a - b });\n}\n", " \
    \   return l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return\
    \ l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return l1.filter(x\
    \ => l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return l1.filter(x =>\
    \ l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b).filter((x, i, a) => !i || x != a[i - 1]);\n}\n", "    return l1.filter(x\
    \ => l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return l1.filter(e =>\
    \ l2.includes(e)).sort((a, b) => a - b);\n}\n", "  return [...new Set(l1.filter(x\
    \ => l2.includes(x)))].sort((a, b) => a - b);\n}\n", "    return l1.filter(x =>\
    \ l2.includes(x)).sort((a, b) => a - b).filter((x, i, a) => !i || x != a[i - 1]);\n\
    }\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n}\n",
  "    return l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return\
    \ l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return l1.filter(x\
    \ => l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return Array.from(new\
    \ Set(l1.filter(x => l2.includes(x)))).sort((a, b) => a - b);\n}\n", "    return\
    \ l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return l1.filter(x\
    \ => l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return l1.filter(x =>\
    \ l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "    return l1.filter(e => l2.includes(e)).sort((a, b) =>\
    \ a - b);\n}\n", "    return Array.from(new Set(l1.filter(x => l2.includes(x)))).sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(e => l2.includes(e)).sort((a, b)\
    \ => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) =>\
    \ a - b);\n}\n", "    return l1.filter(function (n) {\n        return l2.indexOf(n)\
    \ !== -1;\n    }).sort(function (a, b) {\n        return a - b;\n    });\n}\n",
  "    return l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return\
    \ l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return l1.filter(x\
    \ => l2.includes(x)).sort((a, b) => a - b).filter((x, i, a) => !i || x != a[i\
    \ - 1]);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a -\
    \ b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n\
    }\n", "  return [...new Set(l1.filter(x => l2.includes(x)))].sort((a, b) => a\
    \ - b);\n}\n", "    const s1 = new Set(l1);\n    const s2 = new Set(l2);\n   \
    \ const s3 = new Set([...s1].filter(x => s2.has(x)));\n    return [...s3].sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) =>\
    \ a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a -\
    \ b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n\
    }\n", "    return l1.filter(e => l2.includes(e)).sort((a, b) => a - b);\n}\n",
  "    return l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return\
    \ l1.filter(e => l2.includes(e)).sort((a, b) => a - b);\n}\n", "    return l1.filter(e\
    \ => l2.includes(e)).sort((a, b) => a - b);\n}\n", "    return l1.filter(x =>\
    \ l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) =>\
    \ a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return Array.from(new Set(l1.filter(x => l2.includes(x)))).sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "    return Array.from(new Set(l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b)));\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) =>\
    \ a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a -\
    \ b);\n}\n", "    return l1.filter(e => l2.includes(e)).sort((a, b) => a - b).filter((e,\
    \ i, a) => i === 0 || e !== a[i - 1]);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "    return l1.filter(e => l2.includes(e)).sort((a, b) =>\
    \ a - b);\n}\n", "    let result: number[] = [];\n    for (let i = 0; i < l1.length;\
    \ i++) {\n        if (l2.indexOf(l1[i]) > -1) {\n            result.push(l1[i]);\n\
    \        }\n    }\n    return result.sort();\n}\n", "    return l1.filter(x =>\
    \ l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) =>\
    \ a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a -\
    \ b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n\
    }\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n}\n",
  "    return l1.filter(x => l2.includes(x)).sort((a, b) => a - b).filter((x, i, a)\
    \ => !i || x != a[i - 1]);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b);\n}\n", "    return _.sortBy(_.uniq(_.intersection(l1, l2)));\n\
    }\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n}\n",
  "    return unique(l1.filter(x => l2.includes(x)));\n}\n", "    return l1.filter(x\
    \ => l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return l1.filter(x =>\
    \ l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) =>\
    \ a - b);\n}\n", "    let c: number[] = [];\n    for (let i = 0; i < l1.length;\
    \ i++) {\n        for (let j = 0; j < l2.length; j++) {\n            if (l1[i]\
    \ === l2[j]) {\n                c.push(l1[i]);\n            }\n        }\n   \
    \ }\n    return c.sort().filter((item, pos, ary) => {\n        return !pos ||\
    \ item != ary[pos - 1];\n    });\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) =>\
    \ a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a -\
    \ b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n\
    }\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n}\n",
  "    return l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return\
    \ l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return l1.filter(x\
    \ => l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return l1.filter(x =>\
    \ l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return [...new Set(l1.filter(x\
    \ => l2.includes(x)))].sort((a, b) => a - b);\n}\n", "    return l1.filter(x =>\
    \ l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) =>\
    \ a - b);\n}\n", "    return Array.from(new Set(l1.filter(x => l2.includes(x))));\n\
    }\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n}\n",
  "    let result: number[] = [];\n    let i = 0;\n    let j = 0;\n    while (i <\
    \ l1.length && j < l2.length) {\n        if (l1[i] < l2[j]) {\n            i++;\n\
    \        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n   \
    \         result.push(l1[i]);\n            i++;\n            j++;\n        }\n\
    \    }\n    return result;\n}\n", "    return l1.filter(e => l2.includes(e)).sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) =>\
    \ a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a -\
    \ b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) =>\
    \ a - b);\n}\n", "    let l3: number[] = [];\n    for (let i = 0; i < l1.length;\
    \ i++) {\n        for (let j = 0; j < l2.length; j++) {\n            if (l1[i]\
    \ === l2[j]) {\n                l3.push(l1[i]);\n            }\n        }\n  \
    \  }\n    return l3.sort((a, b) => a - b).filter((item, pos, ary) => {\n     \
    \   return !pos || item != ary[pos - 1];\n    });\n}\n", "    return l1.filter(x\
    \ => l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return l1.filter(x =>\
    \ l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    var result: number[] = [];\n    for (var i = 0; i\
    \ < l1.length; i++) {\n        if (l2.indexOf(l1[i]) != -1) {\n            result.push(l1[i]);\n\
    \        }\n    }\n    return result.sort(function (a, b) { return a - b });\n\
    }\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n}\n",
  "    return l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n}\n", "    const\
    \ s1 = new Set(l1);\n    const s2 = new Set(l2);\n    const s = new Set();\n \
    \   for (const e of s1) {\n        if (s2.has(e)) {\n            s.add(e);\n \
    \       }\n    }\n    return Array.from(s);\n}\n", "    return l1.filter(x =>\
    \ l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) =>\
    \ a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a -\
    \ b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n\
    }\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n}\n",
  "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a, b) => a - b);\n\
    }\n", "    return _.sortBy(_.uniq(_.intersection(l1, l2)));\n}\n", "    return\
    \ Array.from(new Set(l1.filter(x => l2.includes(x))));\n}\n", "    return l1.filter(x\
    \ => l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return l1.filter(x =>\
    \ l2.includes(x)).sort((a, b) => a - b);\n}\n", "  return l1.filter(e => l2.includes(e)).sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(e => l2.includes(e)).sort((a, b)\
    \ => a - b);\n}\n", "  return l1.filter(x => l2.includes(x)).sort((a, b) => a\
    \ - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) =>\
    \ a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a -\
    \ b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n\
    }\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n}\n",
  "    return l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return\
    \ l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return unique(l1.filter(x\
    \ => l2.includes(x)));\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) =>\
    \ a - b);\n}\n", "    return l1.filter(e => l2.includes(e)).sort((a, b) => a -\
    \ b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a - b).filter((x,\
    \ i, a) => !i || x != a[i - 1]);\n}\n", "    return [...new Set(l1.filter(x =>\
    \ l2.includes(x)))].sort((a, b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "    let l3: number[] = [];\n    for (let i = 0; i < l1.length;\
    \ i++) {\n        for (let j = 0; j < l2.length; j++) {\n            if (l1[i]\
    \ === l2[j]) {\n                l3.push(l1[i]);\n            }\n        }\n  \
    \  }\n    return l3.sort().filter((v, i, a) => a.indexOf(v) === i);\n}\n", " \
    \   return l1.filter(x => l2.includes(x)).sort((a, b) => a - b).filter((x, i,\
    \ a) => !i || x != a[i - 1]);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b).filter((x, i, a) => !i || x != a[i - 1]);\n}\n", "    return l1.filter(n\
    \ => l2.includes(n)).sort((a, b) => a - b);\n}\n", "    return Array.from(new\
    \ Set(l1.filter(x => l2.includes(x))));\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) =>\
    \ a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a -\
    \ b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n\
    }\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n}\n",
  "    return l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return\
    \ l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return l1.filter(x\
    \ => l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return l1.filter(x =>\
    \ l2.includes(x)).sort((a, b) => a - b);\n}\n", "    let l3: number[] = [];\n\
    \    for (let i = 0; i < l1.length; i++) {\n        if (l2.indexOf(l1[i]) > -1)\
    \ {\n            l3.push(l1[i]);\n        }\n    }\n    return l3.sort((a, b)\
    \ => a - b);\n}\n", "    return l1.filter(e => l2.includes(e)).sort((a, b) =>\
    \ a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a -\
    \ b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    let l3: number[] = [];\n    for (let i = 0; i < l1.length;\
    \ i++) {\n        for (let j = 0; j < l2.length; j++) {\n            if (l1[i]\
    \ === l2[j]) {\n                l3.push(l1[i]);\n            }\n        }\n  \
    \  }\n    return l3.sort().filter((item, index, array) => {\n        return !index\
    \ || item !== array[index - 1];\n    });\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) =>\
    \ a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a -\
    \ b).filter((x, i, a) => !i || x != a[i - 1]);\n}\n", "    return Array.from(new\
    \ Set(l1.filter(x => l2.includes(x)))).sort((a, b) => a - b);\n}\n", "    return\
    \ l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return l1.filter(x\
    \ => l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return l1.filter(x =>\
    \ l2.includes(x)).sort((a, b) => a - b);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
