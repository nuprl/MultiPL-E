language: ts
name: HumanEval_70_strange_sort_list
results:
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    while (sorted.length > 0) {\n        result.push(sorted.shift());\n\
    \        result.push(sorted.pop());\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  9,\n\
    \  6,\n  8,\n  7,\n  undefined\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  9,\n\
    \  6,\n  8,\n  7\n]\n    at test (/tmp/tmpdggf4km6.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdggf4km6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 9, 6,\
    \ 8, 7, undefined ],\n  expected: [ 5, 9, 6, 8, 7 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: '[ 1, 9, 2, 8, 3, 7, 4, 6, 5, undefined ]

    '
  timestamp: 1660014653
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <\
    \ j) {\n        result.push(sorted[i]);\n        result.push(sorted[j]);\n   \
    \     i++;\n        j--;\n    }\n    if (i === j) {\n        result.push(sorted[i]);\n\
    \    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2, 1]));\n\
    console.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(strange_sort_list([10,\
    \ 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9, 8, 7, 6, 5,\
    \ 4, 3, 2, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n\
    ]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7, 5, 6\n]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7,\
    \ 5, 6\n]\n[\n  1, 11, 2, 10, 3,\n  9,  4, 8,  5, 7,\n  6\n]\n[\n  1, 11, 2, 10,\
    \ 3,\n  9,  4, 8,  5, 7,\n  6\n]\n"
  timestamp: 1660014653
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        if (i !== j) {\n            result.push(sorted[j]);\n\
    \        }\n        i++;\n        j--;\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014653
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 3, 2, 4, 5, 7, 6, 8, 9]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\nconsole.log(strange_sort_list([10, 9, 8, 7, 6, 5, 4, 3, 2,\
    \ 1]));\nconsole.log(strange_sort_list([1, 3, 2, 4, 5, 7, 6, 8, 9, 10]));\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n\
    ]\n[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7, 5,\
    \ 6\n]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7, 5, 6\n]\n[\n  1, 10, 2, 9, 3,\n  8,\
    \  4, 7, 5, 6\n]\n"
  timestamp: 1660014653
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let sorted = lst.sort((a,\
    \ b) => a - b);\n    let left = 0;\n    let right = sorted.length - 1;\n    while\
    \ (left <= right) {\n        result.push(sorted[left]);\n        left++;\n   \
    \     if (left <= right) {\n            result.push(sorted[right]);\n        \
    \    right--;\n        }\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4,\
    \ 3, 2, 1]));\nconsole.log(strange_sort_list([1, 3, 2, 4, 5, 7, 6, 8, 9]));\n\
    console.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(strange_sort_list([10,\
    \ 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 3, 2, 4, 5,\
    \ 7, 6, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n\
    ]\n[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7, 5,\
    \ 6\n]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7, 5, 6\n]\n[\n  1, 10, 2, 9, 3,\n  8,\
    \  4, 7, 5, 6\n]\n"
  timestamp: 1660014653
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let res: number[] = [];\n    let min: number = Math.min(...lst);\n\
    \    let max: number = Math.max(...lst);\n    let min_index: number = lst.indexOf(min);\n\
    \    let max_index: number = lst.indexOf(max);\n    let min_max: number[] = [min,\
    \ max];\n    let max_min: number[] = [max, min];\n    let min_max_index: number[]\
    \ = [min_index, max_index];\n    let max_min_index: number[] = [max_index, min_index];\n\
    \    let min_max_index_sorted: number[] = min_max_index.sort();\n    let max_min_index_sorted:\
    \ number[] = max_min_index.sort();\n    let min_max_sorted: number[] = min_max.sort();\n\
    \    let max_min_sorted: number[] = max_min.sort();\n    let min_max_index_sorted_reverse:\
    \ number[] = min_max_index_sorted.reverse();\n    let max_min_index_sorted_reverse:\
    \ number[] = max_min_index_sorted.reverse();\n    let min_max_sorted_reverse:\
    \ number[] = min_max_sorted.reverse();\n    let max_min_sorted_reverse: number[]\
    \ = max_min_sorted.reverse();\n    let min_max_index_sorted_reverse_string: string\
    \ = min_max_index_sorted_reverse.toString();\n    let max_min_index_sorted_reverse_string:\
    \ string = max_min_index_sorted_reverse.toString();\n    let min_max_sorted_reverse_string:\
    \ string = min_max_sorted_reverse.toString();\n    let max_min_sorted_reverse_string:\
    \ string = max_min_sorted_reverse.toString();\n    let min_max_index_sorted_string:\
    \ string = min_max_index_sorted.toString();\n    let max_min_index_sorted_string:\
    \ string = max_min_index_sorted.toString();\n    let\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyokijktm.ts(30,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpyokijktm.ts(47,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014653
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        if (i !== j) {\n            result.push(sorted[j]);\n\
    \        }\n        i++;\n        j--;\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6]));\nconsole.log(strange_sort_list([1, 3, 2, 4, 6, 5]));\nconsole.log(strange_sort_list([6,\
    \ 5, 4, 3, 2, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 1, 6, 2, 5, 3, 4 ]

    [ 1, 6, 2, 5, 3, 4 ]

    [ 1, 6, 2, 5, 3, 4 ]

    '
  timestamp: 1660014653
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    while (sorted.length > 0) {\n        result.push(sorted.shift());\n\
    \        result.push(sorted.pop());\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  9,\n\
    \  6,\n  8,\n  7,\n  undefined\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  9,\n\
    \  6,\n  8,\n  7\n]\n    at test (/tmp/tmpxvr2q4yl.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxvr2q4yl.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 9, 6,\
    \ 8, 7, undefined ],\n  expected: [ 5, 9, 6, 8, 7 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: '[ 1, 9, 2, 8, 3, 7, 4, 6, 5, undefined ]

    [ 2, 9, 3, 7, 4, undefined ]

    '
  timestamp: 1660014653
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ res: number[] = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while\
    \ (i <= j) {\n        res.push(sorted[i]);\n        i++;\n        if (i <= j)\
    \ {\n            res.push(sorted[j]);\n            j--;\n        }\n    }\n  \
    \  return res;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\
    console.log(strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 3, 2, 4, 5, 7, 6, 8, 9]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\nconsole.log(strange_sort_list([10, 9, 8, 7, 6, 5, 4, 3, 2,\
    \ 1]));\nconsole.log(strange_sort_list([1, 3, 2, 4, 5, 7, 6, 8, 9, 10]));\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n\
    ]\n[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7, 5,\
    \ 6\n]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7, 5, 6\n]\n[\n  1, 10, 2, 9, 3,\n  8,\
    \  4, 7, 5, 6\n]\n"
  timestamp: 1660014653
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(strange_sort_list([10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9, 8, 7, 6, 5, 4, 3, 2,\
    \ 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\n\
    console.log(strange_sort_list([12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(strange_sort_list([13,\
    \ 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(strange_sort_list([14,\
    \ 13\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphp5hxa9w.ts(33,1): error TS1005: '','' expected.

    ../../../../../tmp/tmphp5hxa9w.ts(33,9): error TS1005: '','' expected.

    '
  timestamp: 1660014653
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        if (i !== j) {\n            result.push(sorted[j]);\n\
    \        }\n        i++;\n        j--;\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014653
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014653
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(strange_sort_list([10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9, 8, 7, 6, 5, 4, 3, 2,\
    \ 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\n\
    console.log(strange_sort_list([12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(strange_sort_list([13,\
    \ 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(strange_sort_list([14,\
    \ 13\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphp5hxa9w.ts(33,1): error TS1005: '','' expected.

    ../../../../../tmp/tmphp5hxa9w.ts(33,9): error TS1005: '','' expected.

    '
  timestamp: 1660014653
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let sorted: number[]\
    \ = lst.sort((a, b) => a - b);\n    let i: number = 0;\n    let j: number = sorted.length\
    \ - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push(sorted[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4,\
    \ 3, 2, 1]));\nconsole.log(strange_sort_list([1, 9, 2, 8, 3, 7, 4, 6, 5]));\n\
    console.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(strange_sort_list([10,\
    \ 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 10, 2, 9, 3,\
    \ 8, 4, 7, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n\
    ]\n[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7, 5,\
    \ 6\n]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7, 5, 6\n]\n[\n  1, 10, 2, 9, 3,\n  8,\
    \  4, 7, 5, 6\n]\n"
  timestamp: 1660014653
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([23,\
    \ 90, -34, -56, 67, -78, 12, 0, -1, 34]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n\
    ]\n[\n  -78, 90, -56, 67, -34,\n   34, -1,  23,  0,  12\n]\n"
  timestamp: 1660014653
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014653
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014653
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    while (sorted.length > 0) {\n        result.push(sorted.shift());\n\
    \        result.push(sorted.pop());\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4,\
    \ 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(strange_sort_list([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6,\
    \ 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n \
    \ assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  9,\n\
    \  6,\n  8,\n  7,\n  undefined\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  9,\n\
    \  6,\n  8,\n  7\n]\n    at test (/tmp/tmpc7l6z6dk.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpc7l6z6dk.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 9, 6,\
    \ 8, 7, undefined ],\n  expected: [ 5, 9, 6, 8, 7 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: "[ 1, 9, 2, 8, 3, 7, 4, 6, 5, undefined ]\n[ 1, 9, 2, 8, 3, 7, 4, 6, 5,\
    \ undefined ]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7, 5, 6\n]\n[\n  1, 10, 2, 9, 3,\n\
    \  8,  4, 7, 5, 6\n]\n"
  timestamp: 1660014653
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let result: number[] = [];\n  let sorted: number[]\
    \ = lst.sort((a, b) => a - b);\n  let min: number = sorted[0];\n  let max: number\
    \ = sorted[sorted.length - 1];\n  let minIndex: number = 0;\n  let maxIndex: number\
    \ = sorted.length - 1;\n  let count: number = 0;\n  while (count < sorted.length)\
    \ {\n    if (count % 2 === 0) {\n      result.push(min);\n      minIndex++;\n\
    \      min = sorted[minIndex];\n    } else {\n      result.push(max);\n      maxIndex--;\n\
    \      max = sorted[maxIndex];\n    }\n    count++;\n  }\n  return result;\n}\n\
    \nconsole.log(strange_sort_list([5, 3, 1, 8, 0]));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 0, 8, 1, 5, 3 ]

    '
  timestamp: 1660014653
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    while (sorted.length > 0) {\n        result.push(sorted.shift());\n\
    \        result.push(sorted.pop());\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  9,\n\
    \  6,\n  8,\n  7,\n  undefined\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  9,\n\
    \  6,\n  8,\n  7\n]\n    at test (/tmp/tmpxvr2q4yl.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxvr2q4yl.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 9, 6,\
    \ 8, 7, undefined ],\n  expected: [ 5, 9, 6, 8, 7 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: '[ 1, 9, 2, 8, 3, 7, 4, 6, 5, undefined ]

    [ 2, 9, 3, 7, 4, undefined ]

    '
  timestamp: 1660014653
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let min: number =\
    \ Math.min(...lst);\n    let max: number = Math.max(...lst);\n    let min_index:\
    \ number = lst.indexOf(min);\n    let max_index: number = lst.indexOf(max);\n\
    \    let min_count: number = 0;\n    let max_count: number = 0;\n    let min_max_count:\
    \ number = 0;\n    let max_min_count: number = 0;\n    let min_max_index: number\
    \ = 0;\n    let max_min_index: number = 0;\n    let min_max: number = 0;\n   \
    \ let max_min: number = 0;\n    let min_max_lst: number[] = [];\n    let max_min_lst:\
    \ number[] = [];\n    let min_max_lst_index: number[] = [];\n    let max_min_lst_index:\
    \ number[] = [];\n    let min_max_lst_index_count: number = 0;\n    let max_min_lst_index_count:\
    \ number = 0;\n    let min_max_lst_index_count_2: number = 0;\n    let max_min_lst_index_count_2:\
    \ number = 0;\n    let min_max_lst_index_count_3: number = 0;\n    let max_min_lst_index_count_3:\
    \ number = 0;\n    let min_max_lst_index_count_4: number = 0;\n    let max_min_lst_index_count_4:\
    \ number = 0;\n    let min_max_lst_index_count_5: number = 0;\n    let max_min_lst_index_count_5:\
    \ number = 0;\n    let min_max_lst_index_count_6: number = 0;\n    let max_min_lst_index_count_6:\
    \ number = 0;\n    let min_max_lst_index_count_7: number = 0;\n    let max_min_lst_index_count_7:\
    \ number = 0;\n    let min_max_\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4uymz6a1.ts(55,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014653
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let min: number =\
    \ Math.min(...lst);\n    let max: number = Math.max(...lst);\n    let min_index:\
    \ number = lst.indexOf(min);\n    let max_index: number = lst.indexOf(max);\n\
    \    let min_max_index: number = Math.max(min_index, max_index);\n    let max_min_index:\
    \ number = Math.min(min_index, max_index);\n    let min_max_lst: number[] = lst.slice(min_max_index,\
    \ lst.length);\n    let max_min_lst: number[] = lst.slice(max_min_index, min_max_index);\n\
    \    let min_max_lst_sorted: number[] = min_max_lst.sort((a, b) => b - a);\n \
    \   let max_min_lst_sorted: number[] = max_min_lst.sort((a, b) => a - b);\n  \
    \  let min_max_lst_sorted_reversed: number[] = min_max_lst_sorted.reverse();\n\
    \    let max_min_lst_sorted_reversed: number[] = max_min_lst_sorted.reverse();\n\
    \    let min_max_lst_sorted_reversed_min: number = Math.min(...min_max_lst_sorted_reversed);\n\
    \    let max_min_lst_sorted_reversed_max: number = Math.max(...max_min_lst_sorted_reversed);\n\
    \    let min_max_lst_sorted_reversed_min_index: number = min_max_lst_sorted_reversed.indexOf(min_max_lst_sorted_reversed_min);\n\
    \    let max_min_lst_sorted_reversed_max_index: number = max_min_lst_sorted_reversed.indexOf(max_min_lst_sorted_reversed_max);\n\
    \    let min_max_lst_\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpg2nye845.ts(41,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014653
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let sorted_lst: number[]\
    \ = lst.sort((a, b) => a - b);\n    let min_max: number[] = [];\n    let min_max_index:\
    \ number = 0;\n    for (let i: number = 0; i < sorted_lst.length; i++) {\n   \
    \     if (i % 2 === 0) {\n            min_max.push(sorted_lst[i]);\n        }\
    \ else {\n            min_max.push(sorted_lst[sorted_lst.length - 1 - i]);\n \
    \       }\n    }\n    for (let i: number = 0; i < lst.length; i++) {\n       \
    \ result.push(min_max[min_max_index]);\n        min_max_index++;\n    }\n    return\
    \ result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\
    console.log(strange_sort_list([9, 2, 4, 7, 5]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  3,\n\
    \  3,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp92vwt5u8.js:29:12)\n    at Object.<anonymous> (/tmp/tmp92vwt5u8.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 3, 3,\
    \ 1 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: "[\n  1, 8, 3, 6, 5,\n  4, 7, 2, 9\n]\n[ 2, 7, 5, 4, 9 ]\n"
  timestamp: 1660014653
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let sorted: number[]\
    \ = lst.sort((a, b) => a - b);\n    let i: number = 0;\n    let j: number = sorted.length\
    \ - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n        if (i !==\
    \ j) {\n            result.push(sorted[j]);\n        }\n        i++;\n       \
    \ j--;\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014653
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        if (i !== j) {\n            result.push(sorted[j]);\n\
    \        }\n        i++;\n        j--;\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4,\
    \ 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(strange_sort_list([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9,\
    \ 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\nconsole.log(strange_sort_list([12, 11, 10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13]));\nconsole.log(strange_sort_list([13, 12, 11, 10, 9, 8,\
    \ 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(strange_sort_list([14,\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6,\
    \ 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n \
    \ assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1wfj_89k.ts(33,9): error TS1005: '','' expected.

    '
  timestamp: 1660014653
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        if (i !== j) {\n            result.push(sorted[j]);\n\
    \        }\n        i++;\n        j--;\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014653
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let res: number[] = [];\n    let min: number = Math.min(...lst);\n\
    \    let max: number = Math.max(...lst);\n    let minIndex: number = lst.indexOf(min);\n\
    \    let maxIndex: number = lst.indexOf(max);\n    let minMax: number[] = [min,\
    \ max];\n    let minMaxIndex: number[] = [minIndex, maxIndex];\n    let minMaxIndexSorted:\
    \ number[] = minMaxIndex.sort((a, b) => a - b);\n    let minMaxSorted: number[]\
    \ = minMaxIndexSorted.map(i => minMax[i]);\n    let lstSorted: number[] = lst.sort((a,\
    \ b) => a - b);\n    let lstSortedMinMax: number[] = lstSorted.filter(i => !minMaxSorted.includes(i));\n\
    \    let lstSortedMinMaxSorted: number[] = lstSortedMinMax.sort((a, b) => b -\
    \ a);\n    let lstSortedMinMaxSortedMinMax: number[] = lstSortedMinMaxSorted.concat(minMaxSorted);\n\
    \    let lstSortedMinMaxSortedMinMaxSorted: number[] = lstSortedMinMaxSortedMinMax.sort((a,\
    \ b) => a - b);\n    let lstSortedMinMaxSortedMinMaxSortedMinMax: number[] = lstSortedMinMaxSortedMinMaxSorted.filter(i\
    \ => !minMaxSorted.includes(i));\n    let lstSortedMinMaxSortedMinMaxSortedMinMaxSorted:\
    \ number[] = lstSortedMinMaxSortedMinMaxSortedMinMax.sort((a, b) => b - a);\n\
    \    let lstSortedMinMaxSortedMinMaxSortedMinMaxSortedMinMax: number[] = lstSortedMinMaxSortedMinMaxSortedMinMaxSorted.concat(minMaxSorted);\n\
    \    let lstSortedMinMaxSortedMinMaxSortedMinMaxSortedMinMaxSorted: number[] =\
    \ lstSortedMinMaxSortedMinMaxSortedMinMaxSortedMinMax\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprm_dtz4_.ts(41,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014653
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let sorted: number[]\
    \ = lst.sort((a, b) => a - b);\n    let max: number = sorted.length - 1;\n   \
    \ let min: number = 0;\n    while (min <= max) {\n        result.push(sorted[max]);\n\
    \        max--;\n        if (min <= max) {\n            result.push(sorted[min]);\n\
    \            min++;\n        }\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4,\
    \ 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(strange_sort_list([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9,\
    \ 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\nconsole.log(strange_sort_list([12, 11, 10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13]));\nconsole.log(strange_sort_list([13, 12, 11, 10, 9, 8,\
    \ 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfb7vsy37.ts(33,9): error TS1005: '','' expected.

    '
  timestamp: 1660014653
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 9, 2, 8, 3, 7, 4, 6, 5]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\nconsole.log(strange_sort_list([10, 9, 8, 7, 6, 5, 4, 3, 2,\
    \ 1]));\nconsole.log(strange_sort_list([1, 10, 2, 9, 3, 8, 4, 7, 5, 6]));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n\
    ]\n[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7, 5,\
    \ 6\n]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7, 5, 6\n]\n[\n  1, 10, 2, 9, 3,\n  8,\
    \  4, 7, 5, 6\n]\n"
  timestamp: 1660014655
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let odd: number[] = [];\n    let even: number[] =\
    \ [];\n    let result: number[] = [];\n    lst.forEach(function (item, index)\
    \ {\n        if (index % 2 === 0) {\n            even.push(item);\n        } else\
    \ {\n            odd.push(item);\n        }\n    });\n    odd.sort(function (a,\
    \ b) {\n        return a - b;\n    });\n    even.sort(function (a, b) {\n    \
    \    return b - a;\n    });\n    for (let i = 0; i < odd.length; i++) {\n    \
    \    result.push(even[i]);\n        result.push(odd[i]);\n    }\n    if (even.length\
    \ > odd.length) {\n        result.push(even[even.length - 1]);\n    }\n    return\
    \ result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\
    console.log(strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(strange_sort_list([10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9, 8, 7, 6, 5, 4, 3, 2,\
    \ 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n\
    \  1,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpptf0fvcc.js:41:12)\n    at Object.<anonymous> (/tmp/tmpptf0fvcc.js:51:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: "[\n  9, 2, 7, 4, 5,\n  6, 3, 8, 1\n]\n[\n  9, 2, 7, 4, 5,\n  6, 3, 8, 1\n\
    ]\n[\n  9, 2, 7, 4,  5,\n  6, 3, 8, 1, 10\n]\n[\n  10, 1, 8, 3, 6,\n   5, 4, 7,\
    \ 2, 9\n]\n[\n  11, 2, 9, 4,  7,\n   6, 5, 8, 3, 10,\n   1\n]\n[\n  11, 2, 9,\
    \ 4,  7,\n   6, 5, 8, 3, 10,\n   1\n]\n"
  timestamp: 1660014655
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let res: number[] = [];\n    let min: number = Math.min(...lst);\n\
    \    let max: number = Math.max(...lst);\n    let min_index: number = lst.indexOf(min);\n\
    \    let max_index: number = lst.indexOf(max);\n    let i: number = 0;\n    while\
    \ (i < lst.length) {\n        if (i % 2 == 0) {\n            res.push(min);\n\
    \            lst.splice(min_index, 1);\n            min = Math.min(...lst);\n\
    \            min_index = lst.indexOf(min);\n        } else {\n            res.push(max);\n\
    \            lst.splice(max_index, 1);\n            max = Math.max(...lst);\n\
    \            max_index = lst.indexOf(max);\n        }\n        i++;\n    }\n \
    \   return res;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\
    console.log(strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(strange_sort_list([10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9, 8, 7, 6, 5, 4, 3, 2,\
    \ 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\n\
    console.log(strange_sort_list([12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5qy_n3rm.ts(38,9): error TS1005: '','' expected.

    '
  timestamp: 1660014655
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014653
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014653
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014653
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let min = Math.min(...lst);\n    let max = Math.max(...lst);\n\
    \    let result: number[] = [];\n    let i = 0;\n    while (lst.length > 0) {\n\
    \        if (i % 2 === 0) {\n            result.push(min);\n            lst.splice(lst.indexOf(min),\
    \ 1);\n            min = Math.min(...lst);\n        } else {\n            result.push(max);\n\
    \            lst.splice(lst.indexOf(max), 1);\n            max = Math.max(...lst);\n\
    \        }\n        i++;\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n"
  timestamp: 1660014656
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let max: number = Math.max(...lst);\n    let min:\
    \ number = Math.min(...lst);\n    let result: number[] = [];\n    let i: number\
    \ = 0;\n    while (lst.length > 0) {\n        if (i % 2 === 0) {\n           \
    \ result.push(min);\n            lst.splice(lst.indexOf(min), 1);\n          \
    \  min = Math.min(...lst);\n        } else {\n            result.push(max);\n\
    \            lst.splice(lst.indexOf(max), 1);\n            max = Math.max(...lst);\n\
    \        }\n        i++;\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([5,\
    \ 3, 1, 8, 0]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5]));\nconsole.log(strange_sort_list([5,\
    \ 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 3, 5, 2, 4]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(strange_sort_list([10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 3, 5, 7, 9, 2, 4, 6,\
    \ 8, 10]));\nconsole.log(strange_sort_list([10, 8, 6, 4, 2, 9, 7, 5, 3, 1]));\n\
    console.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20]));\nconsole.log(strange_sort_list([20, 19, 18, 17, 16,\
    \ 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8gmm0k0r.ts(36,9): error TS1005: '','' expected.

    '
  timestamp: 1660014656
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014653
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let sorted: number[]\
    \ = lst.sort((a, b) => a - b);\n    let min: number = 0;\n    let max: number\
    \ = sorted.length - 1;\n    while (min <= max) {\n        result.push(sorted[min]);\n\
    \        min++;\n        if (min <= max) {\n            result.push(sorted[max]);\n\
    \            max--;\n        }\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4,\
    \ 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(strange_sort_list([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9,\
    \ 8, 7, 6, 5, 4, 3, 2, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n\
    ]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7, 5, 6\n]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7,\
    \ 5, 6\n]\n[\n  1, 11, 2, 10, 3,\n  9,  4, 8,  5, 7,\n  6\n]\n[\n  1, 11, 2, 10,\
    \ 3,\n  9,  4, 8,  5, 7,\n  6\n]\n"
  timestamp: 1660014656
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let sorted: number[]\
    \ = lst.sort((a, b) => a - b);\n    let min: number = sorted[0];\n    let max:\
    \ number = sorted[sorted.length - 1];\n    let i: number = 0;\n    while (sorted.length\
    \ > 0) {\n        if (i % 2 === 0) {\n            result.push(min);\n        \
    \    sorted.splice(sorted.indexOf(min), 1);\n            min = sorted[0];\n  \
    \      } else {\n            result.push(max);\n            sorted.splice(sorted.indexOf(max),\
    \ 1);\n            max = sorted[sorted.length - 1];\n        }\n        i++;\n\
    \    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014656
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let min: number = Math.min(...lst);\n    let max:\
    \ number = Math.max(...lst);\n    let result: number[] = [];\n    let i: number\
    \ = 0;\n    while (lst.length > 0) {\n        if (i % 2 == 0) {\n            result.push(min);\n\
    \            lst.splice(lst.indexOf(min), 1);\n            min = Math.min(...lst);\n\
    \        } else {\n            result.push(max);\n            lst.splice(lst.indexOf(max),\
    \ 1);\n            max = Math.max(...lst);\n        }\n        i++;\n    }\n \
    \   return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n"
  timestamp: 1660014656
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        if (i !== j) {\n            result.push(sorted[j]);\n\
    \        }\n        i++;\n        j--;\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014653
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let min: number =\
    \ Math.min(...lst);\n    let max: number = Math.max(...lst);\n    let minIndex:\
    \ number = lst.indexOf(min);\n    let maxIndex: number = lst.indexOf(max);\n \
    \   let minMax: number[] = [min, max];\n    let minMaxIndex: number[] = [minIndex,\
    \ maxIndex];\n    let minMaxIndexSorted: number[] = minMaxIndex.sort((a, b) =>\
    \ a - b);\n    let minMaxSorted: number[] = minMaxIndexSorted.map(i => minMax[i]);\n\
    \    let lstSorted: number[] = lst.sort((a, b) => a - b);\n    let lstSortedMinMax:\
    \ number[] = lstSorted.filter(n => n !== min && n !== max);\n    let lstSortedMinMaxIndex:\
    \ number[] = lstSortedMinMax.map(n => lst.indexOf(n));\n    let lstSortedMinMaxIndexSorted:\
    \ number[] = lstSortedMinMaxIndex.sort((a, b) => a - b);\n    let lstSortedMinMaxSorted:\
    \ number[] = lstSortedMinMaxIndexSorted.map(i => lstSortedMinMax[i]);\n    let\
    \ lstSortedMinMaxSortedMinMax: number[] = [...minMaxSorted, ...lstSortedMinMaxSorted];\n\
    \    let lstSortedMinMaxSortedMinMaxIndex: number[] = lstSortedMinMaxSortedMinMax.map(n\
    \ => lst.indexOf(n));\n    let lstSortedMinMaxSortedMinMaxIndexSorted: number[]\
    \ = lstSortedMinMaxSortedMinMaxIndex.sort((a, b) => a - b);\n    let lstSortedMinMaxSortedMinMaxSorted:\
    \ number[] = lstSortedMinMaxSortedMinMaxIndexSorted.map(i => lstSortedMinMaxSortedMinMax[i]);\n\
    \    let lstSortedMinMaxSortedMinMaxSortedMinMax: number[] = [...minMaxS\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvzwday75.ts(25,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpvzwday75.ts(25,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpvzwday75.ts(42,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014655
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let sorted: number[]\
    \ = lst.sort((a, b) => a - b);\n    let min: number = sorted[0];\n    let max:\
    \ number = sorted[sorted.length - 1];\n    let i: number = 0;\n    let j: number\
    \ = sorted.length - 1;\n    while (i < j) {\n        result.push(min);\n     \
    \   result.push(max);\n        min = sorted[++i];\n        max = sorted[--j];\n\
    \    }\n    if (i === j) {\n        result.push(min);\n    }\n    return result;\n\
    }\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9,\
    \ 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\nconsole.log(strange_sort_list([10, 9, 8, 7, 6, 5, 4, 3, 2,\
    \ 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\n\
    console.log(strange_sort_list([11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n\
    ]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7, 5, 6\n]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7,\
    \ 5, 6\n]\n[\n  1, 11, 2, 10, 3,\n  9,  4, 8,  5, 7,\n  6\n]\n[\n  1, 11, 2, 10,\
    \ 3,\n  9,  4, 8,  5, 7,\n  6\n]\n"
  timestamp: 1660014656
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let min: number =\
    \ Math.min(...lst);\n    let max: number = Math.max(...lst);\n    let min_index:\
    \ number = lst.indexOf(min);\n    let max_index: number = lst.indexOf(max);\n\
    \    lst.splice(min_index, 1);\n    lst.splice(max_index, 1);\n    result.push(min);\n\
    \    result.push(max);\n    while (lst.length > 0) {\n        min = Math.min(...lst);\n\
    \        max = Math.max(...lst);\n        min_index = lst.indexOf(min);\n    \
    \    max_index = lst.indexOf(max);\n        lst.splice(min_index, 1);\n      \
    \  lst.splice(max_index, 1);\n        result.unshift(min);\n        result.push(max);\n\
    \    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1,\n  4,\n  4,\n  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n\
    \  4,\n  2,\n  3\n]\n    at test (/tmp/tmpiq3oslav.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpiq3oslav.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    4,\
    \ 3, 2, 1,\n    4, 4, 4, 4\n  ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: "[\n  9, 8, 7, 6, 5, 4, 3,\n  2, 1, 9, 9, 9, 9, 9,\n  9, 9, 9, 9\n]\n[ 4,\
    \ 3, 2, 9, 7, 4 ]\n"
  timestamp: 1660014656
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        if (i !== j) {\n            result.push(sorted[j]);\n\
    \        }\n        i++;\n        j--;\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014653
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    if (lst.length === 0) {\n        return [];\n   \
    \ }\n    let min = lst[0];\n    let max = lst[0];\n    let min_index = 0;\n  \
    \  let max_index = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (lst[i] < min) {\n            min = lst[i];\n            min_index = i;\n  \
    \      }\n        if (lst[i] > max) {\n            max = lst[i];\n           \
    \ max_index = i;\n        }\n    }\n    let result = [min];\n    let lst_copy\
    \ = lst.slice();\n    lst_copy.splice(min_index, 1);\n    let i = 0;\n    while\
    \ (lst_copy.length > 0) {\n        if (i % 2 === 0) {\n            let min = lst_copy[0];\n\
    \            let min_index = 0;\n            for (let j = 0; j < lst_copy.length;\
    \ j++) {\n                if (lst_copy[j] < min) {\n                    min =\
    \ lst_copy[j];\n                    min_index = j;\n                }\n      \
    \      }\n            result.push(min);\n            lst_copy.splice(min_index,\
    \ 1);\n        } else {\n            let max = lst_copy[0];\n            let max_index\
    \ = 0;\n            for (let j = 0; j < lst_copy.length; j++) {\n            \
    \    if (lst_copy[j] > max) {\n                    max = lst_copy[j];\n      \
    \              max_index = j;\n                }\n            }\n            result.push(max);\n\
    \            lst_copy.splice(max_index, 1);\n        }\n        i++;\n    }\n\
    \    return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2, 1]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  4,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmppr4z0oh3.js:61:12)\n    at Object.<anonymous> (/tmp/tmppr4z0oh3.js:71:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 4,\
    \ 3 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: "[\n  1, 2, 9, 3, 8,\n  4, 7, 5, 6\n]\n[\n  1, 2, 9, 3, 8,\n  4, 7, 5, 6\n\
    ]\n"
  timestamp: 1660014656
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let min: number =\
    \ Math.min(...lst);\n    let max: number = Math.max(...lst);\n    let minIndex:\
    \ number = lst.indexOf(min);\n    let maxIndex: number = lst.indexOf(max);\n \
    \   let minMax: number[] = [min, max];\n    let minMaxIndex: number[] = [minIndex,\
    \ maxIndex];\n    let minMaxIndexSorted: number[] = minMaxIndex.sort((a, b) =>\
    \ a - b);\n    let minMaxSorted: number[] = minMaxIndexSorted.map(i => minMax[i]);\n\
    \    let minMaxSortedIndex: number[] = minMaxSorted.map(i => lst.indexOf(i));\n\
    \    let minMaxSortedIndexSorted: number[] = minMaxSortedIndex.sort((a, b) =>\
    \ a - b);\n    let minMaxSortedSorted: number[] = minMaxSortedIndexSorted.map(i\
    \ => minMaxSorted[i]);\n    let minMaxSortedSortedIndex: number[] = minMaxSortedSorted.map(i\
    \ => lst.indexOf(i));\n    let minMaxSortedSortedIndexSorted: number[] = minMaxSortedSortedIndex.sort((a,\
    \ b) => a - b);\n    let minMaxSortedSortedSorted: number[] = minMaxSortedSortedIndexSorted.map(i\
    \ => minMaxSortedSorted[i]);\n    let minMaxSortedSortedSortedIndex: number[]\
    \ = minMaxSortedSortedSorted.map(i => lst.indexOf(i));\n    let minMaxSortedSortedSortedIndexSorted:\
    \ number[] = minMaxSortedSortedSortedIndex.sort((a, b) => a - b);\n    let minMaxSortedSortedSortedSorted:\
    \ number[] = minMaxSortedSortedSortedIndexSorted.map(i => minMaxSortedSortedSorted[i]);\n\
    \    let minMaxSortedSortedSortedSortedIndex: number[] = minMaxSortedSortedSortedSorted.map(i\
    \ => lst.indexOf(\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_25epp7s.ts(25,9): error TS1005: '','' expected.

    ../../../../../tmp/tmp_25epp7s.ts(42,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014656
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let sorted: number[]\
    \ = lst.sort((a, b) => a - b);\n    let i: number = 0;\n    let j: number = sorted.length\
    \ - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push(sorted[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4,\
    \ 3, 2, 1]));\nconsole.log(strange_sort_list([1, 3, 5, 7, 9, 8, 6, 4, 2]));\n\
    console.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(strange_sort_list([10,\
    \ 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 3, 5, 7, 9,\
    \ 10, 8, 6, 4, 2]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n\
    ]\n[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7, 5,\
    \ 6\n]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7, 5, 6\n]\n[\n  1, 10, 2, 9, 3,\n  8,\
    \  4, 7, 5, 6\n]\n"
  timestamp: 1660014656
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014653
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sortedList = lst.sort((a, b) => a - b);\n   \
    \ let result = [];\n    let i = 0;\n    let j = sortedList.length - 1;\n    while\
    \ (i <= j) {\n        result.push(sortedList[i]);\n        i++;\n        if (i\
    \ <= j) {\n            result.push(sortedList[j]);\n            j--;\n       \
    \ }\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n"
  timestamp: 1660014656
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let min: number =\
    \ Math.min(...lst);\n    let max: number = Math.max(...lst);\n    let minIndex:\
    \ number = lst.indexOf(min);\n    let maxIndex: number = lst.indexOf(max);\n \
    \   let minMax: number[] = [];\n    let maxMin: number[] = [];\n    let minMaxIndex:\
    \ number[] = [];\n    let maxMinIndex: number[] = [];\n    let minMaxIndex2: number[]\
    \ = [];\n    let maxMinIndex2: number[] = [];\n    let minMax2: number[] = [];\n\
    \    let maxMin2: number[] = [];\n    let minMaxIndex3: number[] = [];\n    let\
    \ maxMinIndex3: number[] = [];\n    let minMax3: number[] = [];\n    let maxMin3:\
    \ number[] = [];\n    let minMaxIndex4: number[] = [];\n    let maxMinIndex4:\
    \ number[] = [];\n    let minMax4: number[] = [];\n    let maxMin4: number[] =\
    \ [];\n    let minMaxIndex5: number[] = [];\n    let maxMinIndex5: number[] =\
    \ [];\n    let minMax5: number[] = [];\n    let maxMin5: number[] = [];\n    let\
    \ minMaxIndex6: number[] = [];\n    let maxMinIndex6: number[] = [];\n    let\
    \ minMax6: number[] = [];\n    let maxMin6: number[] = [];\n    let minMaxIndex7:\
    \ number[] = [];\n    let maxMinIndex7: number[] = [];\n    let minMax7: number[]\
    \ = [];\n    let maxMin7: number[] = [];\n    let minMaxIndex8: number[] = [];\n\
    \    let maxMinIndex8: number[] = [];\n    let minMax8: number[] = [];\n    let\
    \ maxMin8: number[] = [];\n    let minMaxIndex9: number[] = [];\n    let maxMinIndex9:\
    \ number[] = [];\n    let minMax9: number[] = [];\n    let maxMin9: number[] =\
    \ [];\n    let minMaxIndex10: number[] = [];\n    let maxMinIndex10: number[]\
    \ = [];\n    let minMax10:\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp528o2hp8.ts(50,9): error TS1005: '','' expected.

    ../../../../../tmp/tmp528o2hp8.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014656
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 3, 5, 7, 9, 8, 6, 4, 2]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n\
    ]\n[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n"
  timestamp: 1660014656
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014653
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted: number[] = [];\n    let min: number =\
    \ Math.min(...lst);\n    let max: number = Math.max(...lst);\n    let minIndex:\
    \ number = lst.indexOf(min);\n    let maxIndex: number = lst.indexOf(max);\n \
    \   sorted.push(min);\n    sorted.push(max);\n    lst.splice(minIndex, 1);\n \
    \   lst.splice(maxIndex, 1);\n    while (lst.length > 0) {\n        min = Math.min(...lst);\n\
    \        max = Math.max(...lst);\n        minIndex = lst.indexOf(min);\n     \
    \   maxIndex = lst.indexOf(max);\n        sorted.push(min);\n        sorted.push(max);\n\
    \        lst.splice(minIndex, 1);\n        lst.splice(maxIndex, 1);\n    }\n \
    \   return sorted;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(strange_sort_list([10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9, 8, 7, 6, 5, 4, 3, 2,\
    \ 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\n\
    console.log(strange_sort_list([12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4kwmxh06.ts(37,9): error TS1005: '','' expected.

    '
  timestamp: 1660014656
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014653
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let res: number[] = [];\n    let sorted = lst.sort((a,\
    \ b) => a - b);\n    let min = sorted.shift();\n    let max = sorted.pop();\n\
    \    while (sorted.length > 0) {\n        res.push(min);\n        res.push(max);\n\
    \        min = sorted.shift();\n        max = sorted.pop();\n    }\n    if (min)\
    \ {\n        res.push(min);\n    }\n    if (max) {\n        res.push(max);\n \
    \   }\n    return res;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\nconsole.log(strange_sort_list([9,\
    \ 2, 4, 7, 3, 1]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3, 1, 8]));\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n[ 1, 9, 2, 7,\
    \ 3, 4 ]\n[\n  1, 9, 2, 8,\n  3, 7, 4\n]\n"
  timestamp: 1660014656
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let sortedList: number[]\
    \ = lst.sort((a, b) => a - b);\n    let min: number = 0;\n    let max: number\
    \ = sortedList.length - 1;\n    let isMin: boolean = true;\n    while (min <=\
    \ max) {\n        if (isMin) {\n            result.push(sortedList[min]);\n  \
    \          min++;\n        } else {\n            result.push(sortedList[max]);\n\
    \            max--;\n        }\n        isMin = !isMin;\n    }\n    return result;\n\
    }\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9,\
    \ 2, 4, 7, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014656
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result = [];\n    let sorted = lst.sort((a, b)\
    \ => a - b);\n    let min = 0;\n    let max = sorted.length - 1;\n    while (min\
    \ <= max) {\n        result.push(sorted[min]);\n        min++;\n        if (min\
    \ <= max) {\n            result.push(sorted[max]);\n            max--;\n     \
    \   }\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014656
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let min: number =\
    \ Math.min(...lst);\n    let max: number = Math.max(...lst);\n    let min_index:\
    \ number = lst.indexOf(min);\n    let max_index: number = lst.indexOf(max);\n\
    \    let min_max_index: number = Math.max(min_index, max_index);\n    let max_min_index:\
    \ number = Math.min(min_index, max_index);\n    let min_max_lst: number[] = lst.slice(min_max_index,\
    \ lst.length);\n    let max_min_lst: number[] = lst.slice(max_min_index, min_max_index);\n\
    \    let min_max_lst_sorted: number[] = min_max_lst.sort((a, b) => a - b);\n \
    \   let max_min_lst_sorted: number[] = max_min_lst.sort((a, b) => b - a);\n  \
    \  let max_min_lst_sorted_reversed: number[] = max_min_lst_sorted.reverse();\n\
    \    let min_max_lst_sorted_reversed: number[] = min_max_lst_sorted.reverse();\n\
    \    let min_max_lst_sorted_reversed_concat: number[] = min_max_lst_sorted_reversed.concat(max_min_lst_sorted_reversed);\n\
    \    let min_max_lst_sorted_concat: number[] = min_max_lst_sorted.concat(max_min_lst_sorted);\n\
    \    let min_max_lst_sorted_concat_reversed: number[] = min_max_lst_sorted_concat.reverse();\n\
    \    let min_max_lst_sorted_reversed_concat_reversed: number[] = min_max_lst_sorted_reversed_concat.reverse();\n\
    \    let min_max_lst_sorted_reversed_concat_revers\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpv12b67bf.ts(41,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014656
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(strange_sort_list([10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9, 8, 7, 6, 5, 4, 3, 2,\
    \ 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\n\
    console.log(strange_sort_list([12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(strange_sort_list([13,\
    \ 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(strange_sort_list([14,\
    \ 13\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphp5hxa9w.ts(33,1): error TS1005: '','' expected.

    ../../../../../tmp/tmphp5hxa9w.ts(33,9): error TS1005: '','' expected.

    '
  timestamp: 1660014653
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        if (i !== j) {\n            result.push(sorted[j]);\n\
    \        }\n        i++;\n        j--;\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014653
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let sorted_lst: number[]\
    \ = lst.sort((a, b) => a - b);\n    let min_max: number[] = [];\n    let i: number\
    \ = 0;\n    let j: number = sorted_lst.length - 1;\n    while (i <= j) {\n   \
    \     min_max.push(sorted_lst[i]);\n        i++;\n        if (i <= j) {\n    \
    \        min_max.push(sorted_lst[j]);\n            j--;\n        }\n    }\n  \
    \  return min_max;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(strange_sort_list([10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9, 8, 7, 6, 5, 4, 3, 2,\
    \ 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n\
    ]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7, 5, 6\n]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7,\
    \ 5, 6\n]\n[\n  1, 11, 2, 10, 3,\n  9,  4, 8,  5, 7,\n  6\n]\n[\n  1, 11, 2, 10,\
    \ 3,\n  9,  4, 8,  5, 7,\n  6\n]\n"
  timestamp: 1660014656
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result = [];\n    let min = Math.min(...lst);\n\
    \    let max = Math.max(...lst);\n    let min_index = lst.indexOf(min);\n    let\
    \ max_index = lst.indexOf(max);\n    let min_removed = lst.splice(min_index, 1);\n\
    \    let max_removed = lst.splice(max_index, 1);\n    result.push(min_removed[0]);\n\
    \    result.push(max_removed[0]);\n    while (lst.length > 0) {\n        min =\
    \ Math.min(...lst);\n        max = Math.max(...lst);\n        min_index = lst.indexOf(min);\n\
    \        max_index = lst.indexOf(max);\n        min_removed = lst.splice(min_index,\
    \ 1);\n        max_removed = lst.splice(max_index, 1);\n        result.push(max_removed[0]);\n\
    \        result.push(min_removed[0]);\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  undefined,\n\
    \  undefined,\n  2,\n  undefined,\n  3,\n  undefined,\n  4\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpi3s02b6n.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmpi3s02b6n.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \         undefined,\n    undefined, 2,\n    undefined, 3,\n    undefined, 4\n\
    \  ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: "[\n  1,         undefined, undefined,\n  2,         undefined, 3,\n  undefined,\
    \ 4,         undefined,\n  5,         undefined, 6,\n  undefined, 7,         undefined,\n\
    \  8,         undefined, 9\n]\n"
  timestamp: 1660014658
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(strange_sort_list([10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9, 8, 7, 6, 5, 4, 3, 2,\
    \ 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\n\
    console.log(strange_sort_list([12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(strange_sort_list([13,\
    \ 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(strange_sort_list([14,\
    \ 13\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphp5hxa9w.ts(33,1): error TS1005: '','' expected.

    ../../../../../tmp/tmphp5hxa9w.ts(33,9): error TS1005: '','' expected.

    '
  timestamp: 1660014653
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ res: number[] = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while\
    \ (i <= j) {\n        res.push(sorted[i]);\n        i++;\n        if (i <= j)\
    \ {\n            res.push(sorted[j]);\n            j--;\n        }\n    }\n  \
    \  return res;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\
    console.log(strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(strange_sort_list([10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9, 8, 7, 6, 5, 4, 3, 2,\
    \ 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\n\
    console.log(strange_sort_list([12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(strange_sort_list([13,\
    \ 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(strange_sort_list([\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmps2rs_8mc.ts(33,9): error TS1005: '','' expected.

    '
  timestamp: 1660014658
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let sorted: number[]\
    \ = lst.sort((a, b) => a - b);\n    let i: number = 0;\n    let j: number = sorted.length\
    \ - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n        if (i !==\
    \ j) {\n            result.push(sorted[j]);\n        }\n        i++;\n       \
    \ j--;\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014653
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let sorted = lst.sort((a,\
    \ b) => a - b);\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i\
    \ <= j) {\n        result.push(sorted[i]);\n        if (i !== j) {\n         \
    \   result.push(sorted[j]);\n        }\n        i++;\n        j--;\n    }\n  \
    \  return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(strange_sort_list([10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9, 8, 7, 6, 5, 4, 3, 2,\
    \ 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\n\
    console.log(strange_sort_list([12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(strange_sort_list([13,\
    \ 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(strange_sort_list\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpr20cxksv.ts(33,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpr20cxksv.ts(33,9): error TS1005: '','' expected.

    '
  timestamp: 1660014658
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014653
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let min: number =\
    \ Math.min(...lst);\n    let max: number = Math.max(...lst);\n    let index: number\
    \ = lst.indexOf(min);\n    lst.splice(index, 1);\n    result.push(min);\n    while\
    \ (lst.length > 0) {\n        let min: number = Math.min(...lst);\n        let\
    \ max: number = Math.max(...lst);\n        let index: number = lst.indexOf(max);\n\
    \        lst.splice(index, 1);\n        result.push(max);\n        if (lst.length\
    \ > 0) {\n            let index: number = lst.indexOf(min);\n            lst.splice(index,\
    \ 1);\n            result.push(min);\n        }\n    }\n    return result;\n}\n\
    \nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9,\
    \ 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\nconsole.log(strange_sort_list([10, 9, 8, 7, 6, 5, 4, 3, 2,\
    \ 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\n\
    console.log(strange_sort_list([11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(strange_sort_list([12, 11,\
    \ 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  Infinity\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmptoe1g84q.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmptoe1g84q.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ Infinity\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n\
    ]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7, 5, 6\n]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7,\
    \ 5, 6\n]\n[\n  1, 11, 2, 10, 3,\n  9,  4, 8,  5, 7,\n  6\n]\n[\n  1, 11, 2, 10,\
    \ 3,\n  9,  4, 8,  5, 7,\n  6\n]\n[\n   1, 12, 2, 11, 3,\n  10,  4, 9,  5, 8,\n\
    \   6,  7\n]\n[\n   1, 12, 2, 11, 3,\n  10,  4, 9,  5, 8,\n   6,  7\n]\n"
  timestamp: 1660014658
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 9, 2, 8, 3, 7, 4, 6, 5]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\nconsole.log(strange_sort_list([10, 9, 8, 7, 6, 5, 4, 3, 2,\
    \ 1]));\nconsole.log(strange_sort_list([1, 9, 2, 8, 3, 7, 4, 6, 5, 10]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9,\
    \ 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 11, 2, 10, 3,\
    \ 9, 4, 8, 5, 7, 6]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12]));\nconsole.log(strange_sort_list([12, 11, 10, 9, 8, 7, 6, 5,\
    \ 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 12, 2, 11, 3, 10, 4, 9, 5,\
    \ 8, 6, 7\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpev6h2qr9.ts(33,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpev6h2qr9.ts(33,9): error TS1005: '','' expected.

    '
  timestamp: 1660014658
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        if (i !== j) {\n            result.push(sorted[j]);\n\
    \        }\n        i++;\n        j--;\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014653
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let sorted: number[]\
    \ = lst.sort((a, b) => a - b);\n    let left: number = 0;\n    let right: number\
    \ = sorted.length - 1;\n    while (left <= right) {\n        result.push(sorted[left]);\n\
    \        left++;\n        if (left <= right) {\n            result.push(sorted[right]);\n\
    \            right--;\n        }\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4,\
    \ 3, 2, 1]));\nconsole.log(strange_sort_list([1, 3, 5, 7, 9, 8, 6, 4, 2]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n\
    ]\n[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n"
  timestamp: 1660014658
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let sorted: number[]\
    \ = lst.sort((a, b) => a - b);\n    let i: number = 0;\n    let j: number = sorted.length\
    \ - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n        if (i !==\
    \ j) {\n            result.push(sorted[j]);\n        }\n        i++;\n       \
    \ j--;\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2,\
    \ 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(strange_sort_list([10,\
    \ 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9, 8, 7, 6, 5,\
    \ 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12]));\nconsole.log(strange_sort_list([12, 11, 10, 9, 8, 7, 6, 5, 4, 3,\
    \ 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13]));\nconsole.log(strange_sort_list([13, 12, 11, 10, 9, 8, 7, 6, 5, 4,\
    \ 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14]));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n\
    ]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7, 5, 6\n]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7,\
    \ 5, 6\n]\n[\n  1, 11, 2, 10, 3,\n  9,  4, 8,  5, 7,\n  6\n]\n[\n  1, 11, 2, 10,\
    \ 3,\n  9,  4, 8,  5, 7,\n  6\n]\n[\n   1, 12, 2, 11, 3,\n  10,  4, 9,  5, 8,\n\
    \   6,  7\n]\n[\n   1, 12, 2, 11, 3,\n  10,  4, 9,  5, 8,\n   6,  7\n]\n[\n  1,\
    \ 13, 2, 12, 3, 11,\n  4, 10, 5,  9, 6,  8,\n  7\n]\n[\n  1, 13, 2, 12, 3, 11,\n\
    \  4, 10, 5,  9, 6,  8,\n  7\n]\n[\n  1, 14, 2, 13, 3, 12,\n  4, 11, 5, 10, 6,\
    \  9,\n  7,  8\n]\n"
  timestamp: 1660014658
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        if (i !== j) {\n            result.push(sorted[j]);\n\
    \        }\n        i++;\n        j--;\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\
    console.log(strange_sort_list([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n[ 1, 5, 2, 4,\
    \ 3 ]\n"
  timestamp: 1660014658
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let sortedList: number[]\
    \ = lst.sort((a, b) => a - b);\n    let left: number = 0;\n    let right: number\
    \ = sortedList.length - 1;\n    while (left <= right) {\n        result.push(sortedList[left]);\n\
    \        left++;\n        if (left <= right) {\n            result.push(sortedList[right]);\n\
    \            right--;\n        }\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n"
  timestamp: 1660014658
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let res: number[] = [];\n    let min: number = Math.min(...lst);\n\
    \    let max: number = Math.max(...lst);\n    let min_index: number = lst.indexOf(min);\n\
    \    let max_index: number = lst.indexOf(max);\n    let i: number = 0;\n    while\
    \ (i < lst.length) {\n        if (i % 2 === 0) {\n            res.push(min);\n\
    \            lst.splice(min_index, 1);\n            min = Math.min(...lst);\n\
    \            min_index = lst.indexOf(min);\n        } else {\n            res.push(max);\n\
    \            lst.splice(max_index, 1);\n            max = Math.max(...lst);\n\
    \            max_index = lst.indexOf(max);\n        }\n        i++;\n    }\n \
    \   return res;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\
    console.log(strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([23,\
    \ 90, -34, -56, 67, -78, 12, 0, 6]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  4,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test\
    \ (/tmp/tmp8nses7t7.js:35:12)\n    at Object.<anonymous> (/tmp/tmp8nses7t7.js:45:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 4, 2\
    \ ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 1, 9, 2, 9, 3, 9 ]

    [ 1, 9, 2, 8, 2, 7 ]

    [ -78, 90, -56, 67, -56 ]

    '
  timestamp: 1660014659
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let res: number[] = [];\n    let min: number = Math.min(...lst);\n\
    \    let max: number = Math.max(...lst);\n    let i: number = 0;\n    while (res.length\
    \ < lst.length) {\n        if (i % 2 === 0) {\n            res.push(min);\n  \
    \          lst.splice(lst.indexOf(min), 1);\n            min = Math.min(...lst);\n\
    \        } else {\n            res.push(max);\n            lst.splice(lst.indexOf(max),\
    \ 1);\n            max = Math.max(...lst);\n        }\n        i++;\n    }\n \
    \   return res;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\
    console.log(strange_sort_list([9, 2, 4, 7, 3]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpvww8jth1.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpvww8jth1.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 4 ],\n\
    \  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 1, 9, 2, 8, 3 ]

    [ 2, 9, 3 ]

    '
  timestamp: 1660014658
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let sorted = lst.sort((a,\
    \ b) => a - b);\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i\
    \ <= j) {\n        result.push(sorted[i]);\n        if (i !== j) {\n         \
    \   result.push(sorted[j]);\n        }\n        i++;\n        j--;\n    }\n  \
    \  return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 3, 5, 7, 9, 8, 6, 4, 2]));\nconsole.log(strange_sort_list([2, 4, 6, 8, 1, 3,\
    \ 5, 7, 9]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(strange_sort_list([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 3, 5, 7, 9, 8, 6, 4, 2, 10]));\nconsole.log(strange_sort_list([2, 4, 6, 8, 1,\
    \ 3, 5, 7, 9, 10]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\n\
    console.log(strange_sort_list([1, 3, 5, 7, 9, 8, 6, 4, 2, 10, 11]));\nconsole.log(strange_sort_list([2,\
    \ 4, 6, 8, 1, 3, 5, 7, 9, 10, 11]));\nconsole.log(str\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3eprn10u.ts(34,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp3eprn10u.ts(34,9): error TS1005: '','' expected.

    '
  timestamp: 1660014658
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        if (i !== j) {\n            result.push(sorted[j]);\n\
    \        }\n        i++;\n        j--;\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014653
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let sorted = lst.sort((a, b) => a - b);\n  let result\
    \ = [];\n  let i = 0;\n  let j = sorted.length - 1;\n  while (i <= j) {\n    result.push(sorted[i]);\n\
    \    if (i !== j) {\n      result.push(sorted[j]);\n    }\n    i++;\n    j--;\n\
    \  }\n  return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n"
  timestamp: 1660014658
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted: number[] = [];\n    let min: number =\
    \ Math.min(...lst);\n    let max: number = Math.max(...lst);\n    let minIndex:\
    \ number = lst.indexOf(min);\n    let maxIndex: number = lst.indexOf(max);\n \
    \   let minRemaining: number[] = lst.slice(0, minIndex).concat(lst.slice(minIndex\
    \ + 1));\n    let maxRemaining: number[] = lst.slice(0, maxIndex).concat(lst.slice(maxIndex\
    \ + 1));\n    let minRemainingMin: number = Math.min(...minRemaining);\n    let\
    \ minRemainingMax: number = Math.max(...minRemaining);\n    let maxRemainingMin:\
    \ number = Math.min(...maxRemaining);\n    let maxRemainingMax: number = Math.max(...maxRemaining);\n\
    \    let minRemainingMinIndex: number = minRemaining.indexOf(minRemainingMin);\n\
    \    let minRemainingMaxIndex: number = minRemaining.indexOf(minRemainingMax);\n\
    \    let maxRemainingMinIndex: number = maxRemaining.indexOf(maxRemainingMin);\n\
    \    let maxRemainingMaxIndex: number = maxRemaining.indexOf(maxRemainingMax);\n\
    \    let minRemainingMinRemaining: number[] = minRemaining.slice(0, minRemainingMinIndex).concat(minRemaining.slice(minRemainingMinIndex\
    \ + 1));\n    let minRemainingMaxRemaining: number[] = minRemaining.slice(0, minRemainingMaxIndex).concat(minRemaining.slice(minRemainingMaxIndex\
    \ + 1));\n    let maxRemainingMinRemaining: number[] = maxRemaining.slice(0, maxRemainingMinIndex).concat(maxRemaining.slice(maxRemainingMinIndex\
    \ + 1));\n    let maxRemainingMaxRemaining: number[] = maxRemaining.slice(0, maxRemainingMaxIndex).concat(maxRemaining.slice(maxRemainingMaxIndex\
    \ + 1));\n    sorted.push(min);\n    sorted.push(max);\n    sorted.push(minRemainingMin);\n\
    \    sorted.\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgv6dmfy6.ts(28,12): error TS1003: Identifier expected.

    ../../../../../tmp/tmpgv6dmfy6.ts(46,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014658
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let sortedList: number[]\
    \ = lst.sort((a, b) => a - b);\n    let left: number = 0;\n    let right: number\
    \ = sortedList.length - 1;\n    while (left <= right) {\n        result.push(sortedList[left]);\n\
    \        left++;\n        if (left <= right) {\n            result.push(sortedList[right]);\n\
    \            right--;\n        }\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n"
  timestamp: 1660014658
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(strange_sort_list([10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n\
    ]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7, 5, 6\n]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7,\
    \ 5, 6\n]\n"
  timestamp: 1660014658
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let lst2 = lst.slice();\n    lst2.sort((a, b) =>\
    \ a - b);\n    let lst3 = [];\n    while (lst2.length > 0) {\n        lst3.push(lst2.shift());\n\
    \        lst3.push(lst2.pop());\n    }\n    return lst3;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  9,\n\
    \  6,\n  8,\n  7,\n  undefined\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  9,\n\
    \  6,\n  8,\n  7\n]\n    at test (/tmp/tmpzwnyuis_.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpzwnyuis_.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 9, 6,\
    \ 8, 7, undefined ],\n  expected: [ 5, 9, 6, 8, 7 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: '[ 1, 9, 2, 8, 3, 7, 4, 6, 5, undefined ]

    '
  timestamp: 1660014658
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014653
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let sortedList = lst.sort((a, b) => a - b);\n  let\
    \ result = [];\n  let i = 0;\n  let j = sortedList.length - 1;\n  while (i <=\
    \ j) {\n    result.push(sortedList[i]);\n    if (i !== j) {\n      result.push(sortedList[j]);\n\
    \    }\n    i++;\n    j--;\n  }\n  return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n"
  timestamp: 1660014658
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let lst_sorted = lst.sort((a, b) => a - b);\n   \
    \ let lst_result = [];\n    let i = 0;\n    let j = lst_sorted.length - 1;\n \
    \   while (i <= j) {\n        lst_result.push(lst_sorted[i]);\n        i++;\n\
    \        if (i <= j) {\n            lst_result.push(lst_sorted[j]);\n        \
    \    j--;\n        }\n    }\n    return lst_result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4,\
    \ 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(strange_sort_list([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9,\
    \ 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\nconsole.log(strange_sort_list([12, 11, 10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13]));\nconsole.log(strange_sort_list([13, 12, 11, 10, 9, 8,\
    \ 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyky2ieo4.ts(32,9): error TS1005: '','' expected.

    '
  timestamp: 1660014658
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let min: number =\
    \ Math.min(...lst);\n    let max: number = Math.max(...lst);\n    let min_index:\
    \ number = lst.indexOf(min);\n    let max_index: number = lst.indexOf(max);\n\
    \    let i: number = 0;\n    while (result.length < lst.length) {\n        if\
    \ (i % 2 == 0) {\n            result.push(min);\n            lst.splice(min_index,\
    \ 1);\n            min = Math.min(...lst);\n            min_index = lst.indexOf(min);\n\
    \        } else {\n            result.push(max);\n            lst.splice(max_index,\
    \ 1);\n            max = Math.max(...lst);\n            max_index = lst.indexOf(max);\n\
    \        }\n        i++;\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4,\
    \ 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(strange_sort_list([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9,\
    \ 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\nconsole.log(strange_sort_list([12, 11, 10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpr3sy68jo.ts(38,9): error TS1005: '','' expected.

    '
  timestamp: 1660014658
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 9, 2, 8, 3, 7, 4, 6, 5]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\nconsole.log(strange_sort_list([10, 9, 8, 7, 6, 5, 4, 3, 2,\
    \ 1]));\nconsole.log(strange_sort_list([1, 10, 2, 9, 3, 8, 4, 7, 5, 6]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9,\
    \ 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 11, 2, 10, 3,\
    \ 9, 4, 8, 5, 7, 6]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12]));\nconsole.log(strange_sort_list([12, 11, 10, 9, 8, 7, 6, 5,\
    \ 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 12, 2, 11, 3, 10, 4, 9, 5,\
    \ 8, 6, 7\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvi73mkl8.ts(33,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpvi73mkl8.ts(33,9): error TS1005: '','' expected.

    '
  timestamp: 1660014658
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let sorted_lst: number[]\
    \ = lst.sort((a, b) => a - b);\n    let min_max: number[] = [];\n    let min_max_index:\
    \ number = 0;\n    let min_max_index_increment: number = 1;\n    while (sorted_lst.length\
    \ > 0) {\n        min_max[min_max_index] = sorted_lst.shift();\n        min_max_index\
    \ += min_max_index_increment;\n        if (min_max_index === sorted_lst.length)\
    \ {\n            min_max_index_increment = -1;\n            min_max_index = sorted_lst.length\
    \ - 1;\n        } else if (min_max_index === -1) {\n            min_max_index_increment\
    \ = 1;\n            min_max_index = 0;\n        }\n    }\n    return min_max;\n\
    }\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9]));\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6,\
    \ 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n \
    \ assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3\n\
    ]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpqf8qjopc.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmpqf8qjopc.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3 ],\n\
    \  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: "[\n  1, 2, 3, 4, 5,\n  6, 7, 8, 9\n]\n"
  timestamp: 1660014659
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let sorted: number[]\
    \ = lst.sort((a, b) => a - b);\n    let i: number = 0;\n    let j: number = sorted.length\
    \ - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n        if (i !==\
    \ j) {\n            result.push(sorted[j]);\n        }\n        i++;\n       \
    \ j--;\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2,\
    \ 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(strange_sort_list([10,\
    \ 9, 8, 7, 6, 5, 4, 3, 2, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n\
    ]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7, 5, 6\n]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7,\
    \ 5, 6\n]\n"
  timestamp: 1660014659
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014653
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let min: number =\
    \ Math.min(...lst);\n    let max: number = Math.max(...lst);\n    let minIndex:\
    \ number = lst.indexOf(min);\n    let maxIndex: number = lst.indexOf(max);\n \
    \   let minIndex2: number = lst.indexOf(min, minIndex + 1);\n    let maxIndex2:\
    \ number = lst.indexOf(max, maxIndex + 1);\n    let minIndex3: number = lst.indexOf(min,\
    \ minIndex2 + 1);\n    let maxIndex3: number = lst.indexOf(max, maxIndex2 + 1);\n\
    \    let minIndex4: number = lst.indexOf(min, minIndex3 + 1);\n    let maxIndex4:\
    \ number = lst.indexOf(max, maxIndex3 + 1);\n    let minIndex5: number = lst.indexOf(min,\
    \ minIndex4 + 1);\n    let maxIndex5: number = lst.indexOf(max, maxIndex4 + 1);\n\
    \    let minIndex6: number = lst.indexOf(min, minIndex5 + 1);\n    let maxIndex6:\
    \ number = lst.indexOf(max, maxIndex5 + 1);\n    let minIndex7: number = lst.indexOf(min,\
    \ minIndex6 + 1);\n    let maxIndex7: number = lst.indexOf(max, maxIndex6 + 1);\n\
    \    let minIndex8: number = lst.indexOf(min, minIndex7 + 1);\n    let maxIndex8:\
    \ number = lst.indexOf(max, maxIndex7 + 1);\n    let minIndex9: number = lst.indexOf(min,\
    \ minIndex8 + 1);\n    let maxIndex9: number = lst.indexOf(max, maxIndex8 + 1);\n\
    \    let minIndex10: number = lst.indexOf(min, minIndex9 + 1);\n    let maxIndex10:\
    \ number = lst.indexOf(max, maxIndex9 + 1);\n    let minIndex11: number = lst.indexOf(min,\
    \ minIndex10 + 1);\n    let maxIndex11\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphqjuiyut.ts(48,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014658
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014653
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        if (i !== j) {\n            result.push(sorted[j]);\n\
    \        }\n        i++;\n        j--;\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8]));\n\
    console.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[ 1, 5, 2, 4, 3 ]\n[ 1, 6, 2, 5, 3, 4 ]\n[\n  1, 7, 2, 6,\n  3, 5, 4\n\
    ]\n[\n  1, 8, 2, 7,\n  3, 6, 4, 5\n]\n[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n"
  timestamp: 1660014660
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let min = 0;\n    let max = sorted.length - 1;\n    while\
    \ (min <= max) {\n        result.push(sorted[min]);\n        min++;\n        if\
    \ (min <= max) {\n            result.push(sorted[max]);\n            max--;\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014660
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        if (i !== j) {\n            result.push(sorted[j]);\n\
    \        }\n        i++;\n        j--;\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014653
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014653
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        if (i !== j) {\n            result.push(sorted[j]);\n\
    \        }\n        i++;\n        j--;\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014653
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        if (i !== j) {\n            result.push(sorted[j]);\n\
    \        }\n        i++;\n        j--;\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014653
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted_lst = lst.sort((a, b) => a - b);\n   \
    \ let result = [];\n    let i = 0;\n    let j = sorted_lst.length - 1;\n    while\
    \ (i <= j) {\n        result.push(sorted_lst[i]);\n        if (i !== j) {\n  \
    \          result.push(sorted_lst[j]);\n        }\n        i++;\n        j--;\n\
    \    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5]));\n\
    console.log(strange_sort_list([5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6]));\nconsole.log(strange_sort_list([6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7]));\nconsole.log(strange_sort_list([7, 6, 5, 4, 3, 2, 1]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[ 1, 5, 2, 4, 3 ]\n[ 1, 5, 2, 4, 3 ]\n[ 1, 6, 2, 5, 3, 4 ]\n[ 1, 6, 2,\
    \ 5, 3, 4 ]\n[\n  1, 7, 2, 6,\n  3, 5, 4\n]\n[\n  1, 7, 2, 6,\n  3, 5, 4\n]\n"
  timestamp: 1660014660
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <\
    \ j) {\n        result.push(sorted[i]);\n        result.push(sorted[j]);\n   \
    \     i++;\n        j--;\n    }\n    if (i === j) {\n        result.push(sorted[i]);\n\
    \    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2, 1]));\n\
    console.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(strange_sort_list([10,\
    \ 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9, 8, 7, 6, 5,\
    \ 4, 3, 2, 1]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n\
    ]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7, 5, 6\n]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7,\
    \ 5, 6\n]\n[\n  1, 11, 2, 10, 3,\n  9,  4, 8,  5, 7,\n  6\n]\n[\n  1, 11, 2, 10,\
    \ 3,\n  9,  4, 8,  5, 7,\n  6\n]\n"
  timestamp: 1660014661
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let sorted: number[]\
    \ = lst.sort((a, b) => a - b);\n    let left: number = 0;\n    let right: number\
    \ = sorted.length - 1;\n    while (left <= right) {\n        result.push(sorted[left]);\n\
    \        left++;\n        if (left <= right) {\n            result.push(sorted[right]);\n\
    \            right--;\n        }\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4,\
    \ 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(strange_sort_list([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9,\
    \ 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\nconsole.log(strange_sort_list([12, 11, 10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13]));\nconsole.log(strange_sort_list([13, 12, 11, 10, 9, 8,\
    \ 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3e4a0x1u.ts(33,9): error TS1005: '','' expected.

    '
  timestamp: 1660014660
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014653
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        if (i !== j) {\n            result.push(sorted[j]);\n\
    \        }\n        i++;\n        j--;\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014653
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(strange_sort_list([10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9, 8, 7, 6, 5, 4, 3, 2,\
    \ 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\n\
    console.log(strange_sort_list([12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(strange_sort_list([13,\
    \ 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(strange_sort_list([14,\
    \ 13\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphp5hxa9w.ts(33,1): error TS1005: '','' expected.

    ../../../../../tmp/tmphp5hxa9w.ts(33,9): error TS1005: '','' expected.

    '
  timestamp: 1660014653
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014653
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted_lst = lst.sort((a, b) => a - b);\n   \
    \ let result: number[] = [];\n    let i = 0;\n    let j = sorted_lst.length -\
    \ 1;\n    while (i <= j) {\n        result.push(sorted_lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push(sorted_lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5]));\nconsole.log(strange_sort_list([5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6]));\nconsole.log(strange_sort_list([5, 4, 3, 2, 1, 0]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7]));\nconsole.log(strange_sort_list([5, 4, 3, 2, 1, 0, -1]));\n\
    console.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(strange_sort_list([5,\
    \ 4, 3, 2, 1, 0, -1, -2]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[ 1, 5, 2, 4, 3 ]\n[ 1, 5, 2, 4, 3 ]\n[ 1, 6, 2, 5, 3, 4 ]\n[ 0, 5, 1,\
    \ 4, 2, 3 ]\n[\n  1, 7, 2, 6,\n  3, 5, 4\n]\n[\n  -1, 5, 0, 4,\n   1, 3, 2\n]\n\
    [\n  1, 8, 2, 7,\n  3, 6, 4, 5\n]\n[\n  -2, 5, -1, 4,\n   0, 3,  1, 2\n]\n"
  timestamp: 1660014661
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let sorted: number[]\
    \ = lst.sort((a, b) => a - b);\n    let i: number = 0;\n    let j: number = sorted.length\
    \ - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push(sorted[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4,\
    \ 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(strange_sort_list([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9,\
    \ 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\nconsole.log(strange_sort_list([12, 11, 10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13]));\nconsole.log(strange_sort_list([13, 12, 11, 10, 9, 8,\
    \ 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsyvmv6e1.ts(33,9): error TS1005: '','' expected.

    '
  timestamp: 1660014661
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sortedList = lst.sort((a, b) => a - b);\n   \
    \ let result = [];\n    let i = 0;\n    let j = sortedList.length - 1;\n    while\
    \ (i < j) {\n        result.push(sortedList[i]);\n        result.push(sortedList[j]);\n\
    \        i++;\n        j--;\n    }\n    if (i === j) {\n        result.push(sortedList[i]);\n\
    \    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014661
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let sorted = lst.sort((a,\
    \ b) => a - b);\n    let min = sorted.shift();\n    let max = sorted.pop();\n\
    \    while (sorted.length > 0) {\n        result.push(min);\n        min = sorted.shift();\n\
    \        result.push(max);\n        max = sorted.pop();\n    }\n    result.push(min);\n\
    \    result.push(max);\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  9,\n\
    \  6,\n  8,\n  7,\n  undefined\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  9,\n\
    \  6,\n  8,\n  7\n]\n    at test (/tmp/tmpop3km26m.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpop3km26m.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 9, 6,\
    \ 8, 7, undefined ],\n  expected: [ 5, 9, 6, 8, 7 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: '[ 1, 9, 2, 8, 3, 7, 4, 6, 5, undefined ]

    '
  timestamp: 1660014661
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let sorted = lst.sort((a, b) => a - b);\n  let result\
    \ = [];\n  while (sorted.length > 0) {\n    result.push(sorted.shift());\n   \
    \ result.push(sorted.pop());\n  }\n  return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  9,\n\
    \  6,\n  8,\n  7,\n  undefined\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  9,\n\
    \  6,\n  8,\n  7\n]\n    at test (/tmp/tmpxqcgurij.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxqcgurij.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 9, 6,\
    \ 8, 7, undefined ],\n  expected: [ 5, 9, 6, 8, 7 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: '[ 1, 9, 2, 8, 3, 7, 4, 6, 5, undefined ]

    '
  timestamp: 1660014661
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(strange_sort_list([10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9, 8, 7, 6, 5, 4, 3, 2,\
    \ 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\n\
    console.log(strange_sort_list([12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(strange_sort_list([13,\
    \ 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(strange_sort_list([14,\
    \ 13\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphp5hxa9w.ts(33,1): error TS1005: '','' expected.

    ../../../../../tmp/tmphp5hxa9w.ts(33,9): error TS1005: '','' expected.

    '
  timestamp: 1660014653
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014653
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sortedList = lst.sort((a, b) => a - b);\n   \
    \ let result = [];\n    let i = 0;\n    let j = sortedList.length - 1;\n    while\
    \ (i <= j) {\n        result.push(sortedList[i]);\n        i++;\n        if (i\
    \ <= j) {\n            result.push(sortedList[j]);\n            j--;\n       \
    \ }\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4,\
    \ 5]));\nconsole.log(strange_sort_list([5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6]));\nconsole.log(strange_sort_list([6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7]));\nconsole.log(strange_sort_list([7, 6, 5, 4, 3, 2, 1]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[ 1, 5, 2, 4, 3 ]\n[ 1, 5, 2, 4, 3 ]\n[ 1, 6, 2, 5, 3, 4 ]\n[ 1, 6, 2,\
    \ 5, 3, 4 ]\n[\n  1, 7, 2, 6,\n  3, 5, 4\n]\n[\n  1, 7, 2, 6,\n  3, 5, 4\n]\n"
  timestamp: 1660014661
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted_lst = lst.sort((a, b) => a - b);\n   \
    \ let result: number[] = [];\n    let i = 0;\n    let j = sorted_lst.length -\
    \ 1;\n    while (i <= j) {\n        result.push(sorted_lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push(sorted_lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4,\
    \ 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(strange_sort_list([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6,\
    \ 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n \
    \ assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n\
    ]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7, 5, 6\n]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7,\
    \ 5, 6\n]\n"
  timestamp: 1660014661
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 3, 5, 7, 9, 8, 6, 4, 2]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n\
    ]\n[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n"
  timestamp: 1660014661
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let sorted_lst: number[]\
    \ = lst.sort((a, b) => a - b);\n    let i: number = 0;\n    let j: number = sorted_lst.length\
    \ - 1;\n    while (i <= j) {\n        result.push(sorted_lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push(sorted_lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4,\
    \ 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(strange_sort_list([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6,\
    \ 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n \
    \ assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n\
    ]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7, 5, 6\n]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7,\
    \ 5, 6\n]\n"
  timestamp: 1660014661
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let min: number =\
    \ lst[0];\n    let max: number = lst[0];\n    for (let i: number = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n        }\n\
    \        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n  \
    \  let min_index: number = lst.indexOf(min);\n    let max_index: number = lst.indexOf(max);\n\
    \    let min_max: number[] = [min, max];\n    let min_max_index: number[] = [min_index,\
    \ max_index];\n    let min_max_index_sorted: number[] = [];\n    let min_max_sorted:\
    \ number[] = [];\n    for (let i: number = 0; i < min_max_index.length; i++) {\n\
    \        let min_index: number = min_max_index.indexOf(Math.min(...min_max_index));\n\
    \        min_max_index_sorted.push(min_max_index[min_index]);\n        min_max_sorted.push(min_max[min_index]);\n\
    \        min_max_index.splice(min_index, 1);\n        min_max.splice(min_index,\
    \ 1);\n    }\n    for (let i: number = 0; i < min_max_sorted.length; i++) {\n\
    \        result.push(min_max_sorted[i]);\n        lst.splice(min_max_index_sorted[i],\
    \ 1);\n    }\n    for (let i: number = 0; i < lst.length; i++) {\n        result.push(lst[i]);\n\
    \    }\n    return result;\n}\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2, 1]));\n\
    console.log(strange\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpshrqui21.ts(42,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpshrqui21.ts(42,9): error TS1005: '','' expected.

    '
  timestamp: 1660014661
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let sorted: number[]\
    \ = lst.sort((a, b) => a - b);\n    let i: number = 0;\n    let j: number = sorted.length\
    \ - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push(sorted[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4,\
    \ 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(strange_sort_list([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9,\
    \ 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\nconsole.log(strange_sort_list([12, 11, 10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13]));\nconsole.log(strange_sort_list([13, 12, 11, 10, 9, 8,\
    \ 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsyvmv6e1.ts(33,9): error TS1005: '','' expected.

    '
  timestamp: 1660014661
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let res: number[] = [];\n    let min: number = Math.min(...lst);\n\
    \    let max: number = Math.max(...lst);\n    let i: number = 0;\n    while (lst.length\
    \ > 0) {\n        if (i % 2 === 0) {\n            res.push(min);\n           \
    \ lst.splice(lst.indexOf(min), 1);\n            min = Math.min(...lst);\n    \
    \    } else {\n            res.push(max);\n            lst.splice(lst.indexOf(max),\
    \ 1);\n            max = Math.max(...lst);\n        }\n        i++;\n    }\n \
    \   return res;\n}\n\nconsole.log(strange_sort_list([5, 3, 1, 8, 0]));\nconsole.log(strange_sort_list([5,\
    \ 3, 1, 8, 0, 9, 7, 6, 4, 2]));\nconsole.log(strange_sort_list([5, 3, 1, 8, 0,\
    \ 9, 7, 6, 4, 2, -1, -2, -3, -4, -5]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[ 0, 8, 1, 5, 3 ]\n[\n  0, 9, 1, 8, 2,\n  7, 3, 6, 4, 5\n]\n[\n  -5, 9,\
    \ -4, 8, -3, 7,\n  -2, 6, -1, 5,  0, 4,\n   1, 3,  2\n]\n"
  timestamp: 1660014661
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014653
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let min: number = Math.min(...lst);\n    let max:\
    \ number = Math.max(...lst);\n    let result: number[] = [];\n    let i: number\
    \ = 0;\n    while (lst.length > 0) {\n        if (i % 2 === 0) {\n           \
    \ result.push(min);\n            lst.splice(lst.indexOf(min), 1);\n          \
    \  min = Math.min(...lst);\n        } else {\n            result.push(max);\n\
    \            lst.splice(lst.indexOf(max), 1);\n            max = Math.max(...lst);\n\
    \        }\n        i++;\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([5,\
    \ 3, 1, 8, 0]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5]));\nconsole.log(strange_sort_list([2,\
    \ 3, 4, 5, 6]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8]));\n\
    console.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13]));\nconsole.log(strange_sort_list([1, 2, 3\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9n01tlt4.ts(37,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp9n01tlt4.ts(37,9): error TS1005: '','' expected.

    '
  timestamp: 1660014661
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    for (let i = 0; i < sorted.length; i++) {\n        if (i %\
    \ 2 === 0) {\n            result.push(sorted[i / 2]);\n        } else {\n    \
    \        result.push(sorted[sorted.length - Math.floor(i / 2) - 1]);\n       \
    \ }\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n"
  timestamp: 1660014661
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let min: number =\
    \ Math.min(...lst);\n    let max: number = Math.max(...lst);\n    let i: number\
    \ = 0;\n    while (lst.length > 0) {\n        if (i % 2 === 0) {\n           \
    \ result.push(min);\n            lst.splice(lst.indexOf(min), 1);\n          \
    \  min = Math.min(...lst);\n        } else {\n            result.push(max);\n\
    \            lst.splice(lst.indexOf(max), 1);\n            max = Math.max(...lst);\n\
    \        }\n        i++;\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4,\
    \ 3, 2, 1]));\nconsole.log(strange_sort_list([1, 9, 2, 8, 3, 7, 4, 6, 5]));\n\
    console.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(strange_sort_list([10,\
    \ 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 10, 2, 9, 3,\
    \ 8, 4, 7, 5, 6]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\n\
    console.log(strange_sort_list([1, 11, 2, 10, 3, 9, 4, 8, 5, 7, 6]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(strange_\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5arpk3_o.ts(36,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp5arpk3_o.ts(36,9): error TS1005: '','' expected.

    '
  timestamp: 1660014661
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let sorted: number[]\
    \ = lst.sort((a, b) => a - b);\n    let min: number = sorted[0];\n    let max:\
    \ number = sorted[sorted.length - 1];\n    let min_index: number = 0;\n    let\
    \ max_index: number = sorted.length - 1;\n    let i: number = 0;\n    while (i\
    \ < sorted.length) {\n        if (i % 2 == 0) {\n            result.push(min);\n\
    \            min_index++;\n            min = sorted[min_index];\n        } else\
    \ {\n            result.push(max);\n            max_index--;\n            max\
    \ = sorted[max_index];\n        }\n        i++;\n    }\n    return result;\n}\n\
    \nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n"
  timestamp: 1660014661
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let sorted_lst: number[]\
    \ = lst.sort((a, b) => a - b);\n    let is_min: boolean = true;\n    while (sorted_lst.length\
    \ > 0) {\n        if (is_min) {\n            result.push(sorted_lst.shift());\n\
    \        } else {\n            result.push(sorted_lst.pop());\n        }\n   \
    \     is_min = !is_min;\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014661
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let min = Math.min(...lst);\n    let max = Math.max(...lst);\n\
    \    let result = [];\n    while (lst.length > 0) {\n        result.push(min);\n\
    \        lst.splice(lst.indexOf(min), 1);\n        if (lst.length > 0) {\n   \
    \         result.push(max);\n            lst.splice(lst.indexOf(max), 1);\n  \
    \      }\n        min = Math.min(...lst);\n        max = Math.max(...lst);\n \
    \   }\n    return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014661
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result = [];\n    let max = Math.max(...lst);\n\
    \    let min = Math.min(...lst);\n    let maxIndex = lst.indexOf(max);\n    let\
    \ minIndex = lst.indexOf(min);\n    let i = 0;\n    while (i < lst.length) {\n\
    \        result.push(min);\n        result.push(max);\n        lst.splice(maxIndex,\
    \ 1);\n        lst.splice(minIndex, 1);\n        max = Math.max(...lst);\n   \
    \     min = Math.min(...lst);\n        maxIndex = lst.indexOf(max);\n        minIndex\
    \ = lst.indexOf(min);\n        i += 2;\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4,\
    \ 3, 2, 1]));\nconsole.log(strange_sort_list([23, 90, -34, -56, 67, -78, 12, 0,\
    \ -23, 4]));\nconsole.log(strange_sort_list([-23, 4, -3, 2, -1, 0, 1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, -88, -100]));\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpa3ym0xo_.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmpa3ym0xo_.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 4 ],\n\
    \  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: "[ 1, 9, 2, 8, 3, 7 ]\n[ 1, 9, 1, 8, 1, 7 ]\n[ -78, 90, -78, 67, -78, 23\
    \ ]\n[\n  -100, 10, -100, 9,\n  -100,  8, -100, 7,\n  -100,  6, -100, 5\n]\n"
  timestamp: 1660014661
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sortedList = lst.sort((a, b) => a - b);\n   \
    \ let result = [];\n    let i = 0;\n    let j = sortedList.length - 1;\n    while\
    \ (i <= j) {\n        result.push(sortedList[i]);\n        if (i !== j) {\n  \
    \          result.push(sortedList[j]);\n        }\n        i++;\n        j--;\n\
    \    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2, 1]));\n\
    console.log(strange_sort_list([23, 54, 12, 3, 4, 56, 23, 12, 5, 324]));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n\
    ]\n[\n   3, 324,  4, 56,  5,\n  54,  12, 23, 12, 23\n]\n"
  timestamp: 1660014663
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(strange_sort_list([10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n\
    ]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7, 5, 6\n]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7,\
    \ 5, 6\n]\n"
  timestamp: 1660014663
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let min: number =\
    \ Math.min(...lst);\n    let max: number = Math.max(...lst);\n    let min_index:\
    \ number = lst.indexOf(min);\n    let max_index: number = lst.indexOf(max);\n\
    \    let min_max_index: number = Math.max(min_index, max_index);\n    let max_min_index:\
    \ number = Math.min(min_index, max_index);\n    let min_max_lst: number[] = lst.slice(min_max_index);\n\
    \    let max_min_lst: number[] = lst.slice(max_min_index, min_max_index);\n  \
    \  let min_max_lst_sorted: number[] = min_max_lst.sort((a, b) => b - a);\n   \
    \ let max_min_lst_sorted: number[] = max_min_lst.sort((a, b) => a - b);\n    let\
    \ min_max_lst_sorted_reversed: number[] = min_max_lst_sorted.reverse();\n    let\
    \ max_min_lst_sorted_reversed: number[] = max_min_lst_sorted.reverse();\n    let\
    \ min_max_lst_sorted_reversed_sorted: number[] = min_max_lst_sorted_reversed.sort((a,\
    \ b) => a - b);\n    let max_min_lst_sorted_reversed_sorted: number[] = max_min_lst_sorted_reversed.sort((a,\
    \ b) => b - a);\n    let min_max_lst_sorted_reversed_sorted_reversed: number[]\
    \ = min_max_lst_sorted_reversed_sorted.reverse();\n    let max_min_lst_sorted_reversed_sorted_reversed:\
    \ number[] = max_min_lst_sorted_reversed_sorted.reverse();\n    let min_max_lst_sorted_reversed_sorted\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp90y8j4db.ts(41,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014663
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted: number[] = [];\n    let min: number =\
    \ Math.min(...lst);\n    let max: number = Math.max(...lst);\n    let minIndex:\
    \ number = lst.indexOf(min);\n    let maxIndex: number = lst.indexOf(max);\n \
    \   lst.splice(minIndex, 1);\n    lst.splice(maxIndex, 1);\n    sorted.push(min);\n\
    \    sorted.push(max);\n    while (lst.length > 0) {\n        min = Math.min(...lst);\n\
    \        max = Math.max(...lst);\n        minIndex = lst.indexOf(min);\n     \
    \   maxIndex = lst.indexOf(max);\n        lst.splice(minIndex, 1);\n        lst.splice(maxIndex,\
    \ 1);\n        sorted.unshift(min);\n        sorted.push(max);\n    }\n    return\
    \ sorted;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\
    console.log(strange_sort_list([9, 2, 4, 7, 3]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1,\n  4,\n  4,\n  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n\
    \  4,\n  2,\n  3\n]\n    at test (/tmp/tmpw_q4ai4e.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpw_q4ai4e.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    4,\
    \ 3, 2, 1,\n    4, 4, 4, 4\n  ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: "[\n  9, 8, 7, 6, 5, 4, 3,\n  2, 1, 9, 9, 9, 9, 9,\n  9, 9, 9, 9\n]\n[ 4,\
    \ 3, 2, 9, 7, 4 ]\n"
  timestamp: 1660014663
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014653
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let min: number =\
    \ Math.min(...lst);\n    let max: number = Math.max(...lst);\n    let min_index:\
    \ number = lst.indexOf(min);\n    let max_index: number = lst.indexOf(max);\n\
    \    result.push(min);\n    result.push(max);\n    lst.splice(min_index, 1);\n\
    \    lst.splice(max_index, 1);\n    while (lst.length > 0) {\n        min = Math.min(...lst);\n\
    \        max = Math.max(...lst);\n        min_index = lst.indexOf(min);\n    \
    \    max_index = lst.indexOf(max);\n        result.push(min);\n        result.push(max);\n\
    \        lst.splice(min_index, 1);\n        lst.splice(max_index, 1);\n    }\n\
    \    return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(strange_sort_list([10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9, 8, 7, 6, 5, 4, 3, 2,\
    \ 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\n\
    console.log(strange_sort_list([12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  4,\n\
    \  2,\n  4,\n  3,\n  4,\n  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n\
    \  4,\n  2,\n  3\n]\n    at test (/tmp/tmp256z1qsb.js:39:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp256z1qsb.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 4, 2, 4,\n    3, 4, 4, 4\n  ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: "[\n  1, 9, 2, 9, 3, 9, 4,\n  9, 5, 9, 6, 9, 7, 9,\n  8, 9, 9, 9\n]\n[\n\
    \  1, 9, 2, 8, 3,\n  7, 4, 6, 5, 5\n]\n[\n   1, 10,  2, 10,  3, 10,  4,\n  10,\
    \  5, 10,  6, 10,  7, 10,\n   8, 10,  9, 10, 10, 10\n]\n[\n  1, 10, 2, 9, 3,\n\
    \  8,  4, 7, 5, 6\n]\n[\n   1, 11,  2, 11,  3, 11,  4,\n  11,  5, 11,  6, 11,\
    \  7, 11,\n   8, 11,  9, 11, 10, 11, 11,\n  11\n]\n[\n  1, 11, 2, 10, 3,\n  9,\
    \  4, 8,  5, 7,\n  6,  6\n]\n[\n  1, 12,  2, 12,  3, 12,  4, 12,\n  5, 12,  6,\
    \ 12,  7, 12,  8, 12,\n  9, 12, 10, 12, 11, 12, 12, 12\n]\n[\n   1, 12, 2, 11,\
    \ 3,\n  10,  4, 9,  5, 8,\n   6,  7\n]\n"
  timestamp: 1660014663
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted: number[] = [];\n    let sorted_lst: number[]\
    \ = lst.sort((a, b) => a - b);\n    let min: number = sorted_lst[0];\n    let\
    \ max: number = sorted_lst[sorted_lst.length - 1];\n    let min_index: number\
    \ = 0;\n    let max_index: number = sorted_lst.length - 1;\n    let i: number\
    \ = 0;\n    while (i < sorted_lst.length) {\n        if (i % 2 == 0) {\n     \
    \       sorted.push(min);\n            min_index++;\n            min = sorted_lst[min_index];\n\
    \        } else {\n            sorted.push(max);\n            max_index--;\n \
    \           max = sorted_lst[max_index];\n        }\n        i++;\n    }\n   \
    \ return sorted;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n"
  timestamp: 1660014663
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(strange_sort_list([10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9, 8, 7, 6, 5, 4, 3, 2,\
    \ 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\n\
    console.log(strange_sort_list([12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(strange_sort_list([13,\
    \ 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(strange_sort_list([14,\
    \ 13\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphp5hxa9w.ts(33,1): error TS1005: '','' expected.

    ../../../../../tmp/tmphp5hxa9w.ts(33,9): error TS1005: '','' expected.

    '
  timestamp: 1660014653
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted_list = [];\n    let min = Math.min(...lst);\n\
    \    let max = Math.max(...lst);\n    let min_index = lst.indexOf(min);\n    let\
    \ max_index = lst.indexOf(max);\n    let temp = lst[min_index];\n    lst[min_index]\
    \ = lst[max_index];\n    lst[max_index] = temp;\n    sorted_list.push(min);\n\
    \    sorted_list.push(max);\n    for (let i = 0; i < lst.length; i++) {\n    \
    \    if (lst[i] !== min && lst[i] !== max) {\n            sorted_list.push(lst[i]);\n\
    \        }\n    }\n    return sorted_list;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  9,\n\
    \  6,\n  7,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  9,\n  6,\n  8,\n\
    \  7\n]\n    at test (/tmp/tmp55rnu1wl.js:29:12)\n    at Object.<anonymous> (/tmp/tmp55rnu1wl.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 9, 6,\
    \ 7, 8 ],\n  expected: [ 5, 9, 6, 8, 7 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: "[\n  1, 9, 2, 3, 4,\n  5, 6, 7, 8\n]\n[ 2, 9, 4, 7, 3 ]\n"
  timestamp: 1660014663
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014653
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        if (i !== j) {\n            result.push(sorted[j]);\n\
    \        }\n        i++;\n        j--;\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4,\
    \ 3, 2, 1]));\nconsole.log(strange_sort_list([1, 1, 1, 1, 1, 1, 1, 1, 1]));\n\
    console.log(strange_sort_list([1, 2, 1, 2, 1, 2, 1, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(strange_sort_list([10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9, 8, 7, 6, 5, 4, 3, 2,\
    \ 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\n\
    console.log(strange_sort_list([12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(strange_sort_list([13,\
    \ 12, 11, 10, 9, 8, 7, 6, 5, 4,\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbgfhkaaj.ts(33,9): error TS1005: '','' expected.

    '
  timestamp: 1660014663
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let sorted_lst: number[]\
    \ = lst.sort((a, b) => a - b);\n    let min_max: boolean = true;\n    while (sorted_lst.length\
    \ > 0) {\n        if (min_max) {\n            result.push(sorted_lst.shift());\n\
    \        } else {\n            result.push(sorted_lst.pop());\n        }\n   \
    \     min_max = !min_max;\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4,\
    \ 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(strange_sort_list([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9,\
    \ 8, 7, 6, 5, 4, 3, 2, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n\
    ]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7, 5, 6\n]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7,\
    \ 5, 6\n]\n[\n  1, 11, 2, 10, 3,\n  9,  4, 8,  5, 7,\n  6\n]\n[\n  1, 11, 2, 10,\
    \ 3,\n  9,  4, 8,  5, 7,\n  6\n]\n"
  timestamp: 1660014663
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(strange_sort_list([10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9, 8, 7, 6, 5, 4, 3, 2,\
    \ 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\n\
    console.log(strange_sort_list([12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(strange_sort_list([13,\
    \ 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(strange_sort_list([14,\
    \ 13\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphp5hxa9w.ts(33,1): error TS1005: '','' expected.

    ../../../../../tmp/tmphp5hxa9w.ts(33,9): error TS1005: '','' expected.

    '
  timestamp: 1660014653
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let sorted: number[]\
    \ = lst.sort((a, b) => a - b);\n    let min: number = sorted[0];\n    let max:\
    \ number = sorted[sorted.length - 1];\n    let i: number = 0;\n    let j: number\
    \ = sorted.length - 1;\n    while (i < j) {\n        result.push(min);\n     \
    \   result.push(max);\n        min = sorted[++i];\n        max = sorted[--j];\n\
    \    }\n    if (i === j) {\n        result.push(min);\n    }\n    return result;\n\
    }\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9,\
    \ 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\nconsole.log(strange_sort_list([10, 9, 8, 7, 6, 5, 4, 3, 2,\
    \ 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n\
    ]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7, 5, 6\n]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7,\
    \ 5, 6\n]\n"
  timestamp: 1660014663
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let sorted: number[]\
    \ = lst.sort((a, b) => a - b);\n    let i: number = 0;\n    let j: number = sorted.length\
    \ - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push(sorted[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4,\
    \ 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(strange_sort_list([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9,\
    \ 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\nconsole.log(strange_sort_list([12, 11, 10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13]));\nconsole.log(strange_sort_list([13, 12, 11, 10, 9, 8,\
    \ 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsyvmv6e1.ts(33,9): error TS1005: '','' expected.

    '
  timestamp: 1660014661
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014653
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let min: number = Math.min(...lst);\n    let max:\
    \ number = Math.max(...lst);\n    let result: number[] = [];\n    let i: number\
    \ = 0;\n    while (lst.length > 0) {\n        if (i % 2 === 0) {\n           \
    \ result.push(min);\n            lst.splice(lst.indexOf(min), 1);\n          \
    \  min = Math.min(...lst);\n        } else {\n            result.push(max);\n\
    \            lst.splice(lst.indexOf(max), 1);\n            max = Math.max(...lst);\n\
    \        }\n        i++;\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4,\
    \ 3, 2, 1]));\nconsole.log(strange_sort_list([2, 3, 4, 5, 6, 7, 8, 9, 1]));\n\
    console.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(strange_sort_list([10,\
    \ 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 1]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n\
    ]\n[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7, 5,\
    \ 6\n]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7, 5, 6\n]\n[\n  1, 10, 2, 9, 3,\n  8,\
    \  4, 7, 5, 6\n]\n"
  timestamp: 1660014664
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        if (i !== j) {\n            result.push(sorted[j]);\n\
    \        }\n        i++;\n        j--;\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4,\
    \ 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(strange_sort_list([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6,\
    \ 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n \
    \ assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n\
    ]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7, 5, 6\n]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7,\
    \ 5, 6\n]\n"
  timestamp: 1660014664
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let sorted_lst: number[]\
    \ = lst.sort((a, b) => a - b);\n    let i: number = 0;\n    let j: number = sorted_lst.length\
    \ - 1;\n    while (i <= j) {\n        result.push(sorted_lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push(sorted_lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4,\
    \ 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(strange_sort_list([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9,\
    \ 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\nconsole.log(strange_sort_list([12, 11, 10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13]));\nconsole.log(strange_sort_list([13, 12, 11, 10, 9, 8,\
    \ 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11,\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpidj4l6rr.ts(32,9): error TS1005: '','' expected.

    '
  timestamp: 1660014663
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n\
    \  let newArr = [];\n  let i = 0;\n  while (lst.length > 0) {\n    if (i % 2 ===\
    \ 0) {\n      newArr.push(min);\n      lst.splice(lst.indexOf(min), 1);\n    \
    \  min = Math.min(...lst);\n    } else {\n      newArr.push(max);\n      lst.splice(lst.indexOf(max),\
    \ 1);\n      max = Math.max(...lst);\n    }\n    i++;\n  }\n  return newArr;\n\
    }\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9]));\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6,\
    \ 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n \
    \ assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n"
  timestamp: 1660014663
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max: number =\
    \ Math.max(...lst);\n    let min: number = Math.min(...lst);\n    let max_index:\
    \ number = lst.indexOf(max);\n    let min_index: number = lst.indexOf(min);\n\
    \    let max_removed: number[] = lst.slice(0, max_index).concat(lst.slice(max_index\
    \ + 1));\n    let min_removed: number[] = lst.slice(0, min_index).concat(lst.slice(min_index\
    \ + 1));\n    let max_min_removed: number[] = max_removed.slice(0, min_index).concat(max_removed.slice(min_index\
    \ + 1));\n    let min_max_removed: number[] = min_removed.slice(0, max_index).concat(min_removed.slice(max_index\
    \ + 1));\n    let max_min_max_removed: number[] = max_min_removed.slice(0, max_index).concat(max_min_removed.slice(max_index\
    \ + 1));\n    let min_max_min_removed: number[] = min_max_removed.slice(0, min_index).concat(min_max_removed.slice(min_index\
    \ + 1));\n    if (lst.length % 2 == 0) {\n        result = [min, max, ...strange_sort_list(min_max_max_removed)];\n\
    \    } else {\n        result = [min, max, ...strange_sort_list(min_max_min_removed)];\n\
    \    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8]));\n\
    console.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(strange_sort_list([1,\
    \ 2,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2v0puk44.ts(29,9): error TS1005: '','' expected.

    '
  timestamp: 1660014664
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        if (i !== j) {\n            result.push(sorted[j]);\n\
    \        }\n        i++;\n        j--;\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014653
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(strange_sort_list([10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9, 8, 7, 6, 5, 4, 3, 2,\
    \ 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\n\
    console.log(strange_sort_list([12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(strange_sort_list([13,\
    \ 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(strange_sort_list([14,\
    \ 13\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphp5hxa9w.ts(33,1): error TS1005: '','' expected.

    ../../../../../tmp/tmphp5hxa9w.ts(33,9): error TS1005: '','' expected.

    '
  timestamp: 1660014653
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014653
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let sorted: number[]\
    \ = lst.sort((a, b) => a - b);\n    let i: number = 0;\n    let j: number = sorted.length\
    \ - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push(sorted[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4,\
    \ 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(strange_sort_list([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9,\
    \ 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\nconsole.log(strange_sort_list([12, 11, 10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13]));\nconsole.log(strange_sort_list([13, 12, 11, 10, 9, 8,\
    \ 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsyvmv6e1.ts(33,9): error TS1005: '','' expected.

    '
  timestamp: 1660014661
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let min: number =\
    \ Math.min(...lst);\n    let max: number = Math.max(...lst);\n    let min_index:\
    \ number = lst.indexOf(min);\n    let max_index: number = lst.indexOf(max);\n\
    \    let min_max_index: number[] = [min_index, max_index];\n    let min_max_index_sorted:\
    \ number[] = min_max_index.sort();\n    let min_max_index_sorted_length: number\
    \ = min_max_index_sorted.length;\n    let min_max_index_sorted_length_half: number\
    \ = Math.floor(min_max_index_sorted_length / 2);\n    let min_max_index_sorted_length_half_minus_one:\
    \ number = min_max_index_sorted_length_half - 1;\n    let min_max_index_sorted_length_half_plus_one:\
    \ number = min_max_index_sorted_length_half + 1;\n    let min_max_index_sorted_length_half_plus_one_minus_one:\
    \ number = min_max_index_sorted_length_half_plus_one - 1;\n    let min_max_index_sorted_length_half_plus_one_minus_one_plus_one:\
    \ number = min_max_index_sorted_length_half_plus_one_minus_one + 1;\n    let min_max_index_sorted_length_half_plus_one_minus_one_plus_one_plus_one:\
    \ number = min_max_index_sorted_length_half_plus_one_minus_one_plus_one + 1;\n\
    \    let min_max_index_sorted_length_half_plus_one_minus_one_plus_one_plus_one_plus_one:\
    \ number = min_max_index_sorted_length_half_plus_one_minus_one_plus_one_plus_one\
    \ + 1;\n    let min_max_index_sorted_length_half_plus_one_minus_one_plus_one_plus_one\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq8p8n_vd.ts(39,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014663
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let min: number =\
    \ Math.min(...lst);\n    let max: number = Math.max(...lst);\n    let minIndex:\
    \ number = lst.indexOf(min);\n    let maxIndex: number = lst.indexOf(max);\n \
    \   let newList: number[] = lst.slice(0);\n    newList.splice(minIndex, 1);\n\
    \    newList.splice(maxIndex - 1, 1);\n    result.push(min);\n    result.push(max);\n\
    \    while (newList.length > 0) {\n        min = Math.min(...newList);\n     \
    \   max = Math.max(...newList);\n        minIndex = newList.indexOf(min);\n  \
    \      maxIndex = newList.indexOf(max);\n        newList.splice(minIndex, 1);\n\
    \        newList.splice(maxIndex - 1, 1);\n        result.push(min);\n       \
    \ result.push(max);\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\
    console.log(strange_sort_list([12, 13, 14]));\nconsole.log(strange_sort_list([42]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  9,\n\
    \  6,\n  8,\n  7,\n  7\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  9,\n  6,\n\
    \  8,\n  7\n]\n    at test (/tmp/tmp4qkodh3z.js:36:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4qkodh3z.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 9, 6,\
    \ 8, 7, 7 ],\n  expected: [ 5, 9, 6, 8, 7 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5, 5\n]\n[ 2, 9, 4, 9, 9, 9 ]\n[ 12, 14,\
    \ 13, 13 ]\n[ 42, 42 ]\n"
  timestamp: 1660014664
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let sorted_lst: number[]\
    \ = lst.sort((a, b) => a - b);\n    let i: number = 0;\n    let j: number = sorted_lst.length\
    \ - 1;\n    while (i <= j) {\n        result.push(sorted_lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push(sorted_lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4,\
    \ 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(strange_sort_list([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9,\
    \ 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\nconsole.log(strange_sort_list([12, 11, 10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n\
    ]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7, 5, 6\n]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7,\
    \ 5, 6\n]\n[\n  1, 11, 2, 10, 3,\n  9,  4, 8,  5, 7,\n  6\n]\n[\n  1, 11, 2, 10,\
    \ 3,\n  9,  4, 8,  5, 7,\n  6\n]\n[\n   1, 12, 2, 11, 3,\n  10,  4, 9,  5, 8,\n\
    \   6,  7\n]\n[\n   1, 12, 2, 11, 3,\n  10,  4, 9,  5, 8,\n   6,  7\n]\n"
  timestamp: 1660014664
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let min: number =\
    \ Math.min(...lst);\n    let max: number = Math.max(...lst);\n    let index: number\
    \ = lst.indexOf(min);\n    lst.splice(index, 1);\n    result.push(min);\n    while\
    \ (lst.length > 0) {\n        min = Math.min(...lst);\n        index = lst.indexOf(min);\n\
    \        lst.splice(index, 1);\n        result.push(min);\n        if (lst.length\
    \ > 0) {\n            max = Math.max(...lst);\n            index = lst.indexOf(max);\n\
    \            lst.splice(index, 1);\n            result.push(max);\n        }\n\
    \    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2, 1]));\n\
    console.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(strange_sort_list([10,\
    \ 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9, 8, 7, 6, 5,\
    \ 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12]));\nconsole.log(strange_sort_list([12, 11, 10, 9, 8, 7, 6, 5, 4, 3,\
    \ 2, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  4,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmphk0ou92a.js:37:12)\n    at Object.<anonymous> (/tmp/tmphk0ou92a.js:47:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 4,\
    \ 3 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: "[\n  1, 2, 9, 3, 8,\n  4, 7, 5, 6\n]\n[\n  1, 2, 9, 3, 8,\n  4, 7, 5, 6\n\
    ]\n[\n  1, 2, 10, 3, 9,\n  4, 8,  5, 7, 6\n]\n[\n  1, 2, 10, 3, 9,\n  4, 8,  5,\
    \ 7, 6\n]\n[\n  1, 2, 11, 3, 10,\n  4, 9,  5, 8,  6,\n  7\n]\n[\n  1, 2, 11, 3,\
    \ 10,\n  4, 9,  5, 8,  6,\n  7\n]\n[\n  1,  2, 12, 3, 11,\n  4, 10,  5, 9,  6,\n\
    \  8,  7\n]\n[\n  1,  2, 12, 3, 11,\n  4, 10,  5, 9,  6,\n  8,  7\n]\n"
  timestamp: 1660014664
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let min: number =\
    \ Math.min(...lst);\n    let max: number = Math.max(...lst);\n    let minIndex:\
    \ number = lst.indexOf(min);\n    let maxIndex: number = lst.indexOf(max);\n \
    \   result.push(min);\n    result.push(max);\n    lst.splice(minIndex, 1);\n \
    \   lst.splice(maxIndex, 1);\n    while (lst.length > 0) {\n        min = Math.min(...lst);\n\
    \        max = Math.max(...lst);\n        minIndex = lst.indexOf(min);\n     \
    \   maxIndex = lst.indexOf(max);\n        result.unshift(min);\n        result.push(max);\n\
    \        lst.splice(minIndex, 1);\n        lst.splice(maxIndex, 1);\n    }\n \
    \   return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(strange_sort_list([10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9, 8, 7, 6, 5, 4, 3, 2,\
    \ 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\n\
    console.log(strange_sort_list([12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5o9xfsv8.ts(37,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp5o9xfsv8.ts(37,9): error TS1005: '','' expected.

    '
  timestamp: 1660014664
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let min: number =\
    \ Math.min(...lst);\n    let max: number = Math.max(...lst);\n    let min_index:\
    \ number = lst.indexOf(min);\n    let max_index: number = lst.indexOf(max);\n\
    \    let lst_copy: number[] = lst.slice();\n    lst_copy.splice(min_index, 1);\n\
    \    lst_copy.splice(max_index - 1, 1);\n    result.push(min);\n    result.push(max);\n\
    \    while (lst_copy.length > 0) {\n        min = Math.min(...lst_copy);\n   \
    \     max = Math.max(...lst_copy);\n        min_index = lst_copy.indexOf(min);\n\
    \        max_index = lst_copy.indexOf(max);\n        lst_copy.splice(min_index,\
    \ 1);\n        lst_copy.splice(max_index - 1, 1);\n        result.push(min);\n\
    \        result.push(max);\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4,\
    \ 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(strange_sort_list([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6,\
    \ 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n \
    \ assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  9,\n\
    \  6,\n  8,\n  7,\n  7\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  9,\n  6,\n\
    \  8,\n  7\n]\n    at test (/tmp/tmpysmx9a1j.js:36:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpysmx9a1j.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 9, 6,\
    \ 8, 7, 7 ],\n  expected: [ 5, 9, 6, 8, 7 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5, 5\n]\n[\n  1, 9, 3, 9, 5,\n  9, 7, 9,\
    \ 9, 9\n]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7, 5, 6\n]\n[\n   1, 10,  3, 10,  5,\n\
    \  10,  7, 10,  9, 10\n]\n"
  timestamp: 1660014664
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([23,\
    \ 54, 12, 3, 4, 56, 23, 12, 5, 324]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n\
    ]\n[\n   3, 324,  4, 56,  5,\n  54,  12, 23, 12, 23\n]\n"
  timestamp: 1660014664
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        if (i !== j) {\n            result.push(sorted[j]);\n\
    \        }\n        i++;\n        j--;\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4,\
    \ 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(strange_sort_list([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9,\
    \ 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\nconsole.log(strange_sort_list([12, 11, 10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13]));\nconsole.log(strange_sort_list([13, 12, 11, 10, 9, 8,\
    \ 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(strange_sort_list([14,\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6,\
    \ 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n \
    \ assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1wfj_89k.ts(33,9): error TS1005: '','' expected.

    '
  timestamp: 1660014653
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        if (i !== j) {\n            result.push(sorted[j]);\n\
    \        }\n        i++;\n        j--;\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014653
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014653
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let min = 0;\n    let max = sorted.length - 1;\n    while\
    \ (min <= max) {\n        result.push(sorted[min]);\n        min++;\n        if\
    \ (min <= max) {\n            result.push(sorted[max]);\n            max--;\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4,\
    \ 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(strange_sort_list([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9,\
    \ 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\nconsole.log(strange_sort_list([12, 11, 10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13]));\nconsole.log(strange_sort_list([13, 12, 11, 10, 9, 8,\
    \ 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(strange_sort_list([14, 13\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpaisqfsz9.ts(33,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpaisqfsz9.ts(33,9): error TS1005: '','' expected.

    '
  timestamp: 1660014664
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 9, 2, 8, 3, 7, 4, 6, 5]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\nconsole.log(strange_sort_list([10, 9, 8, 7, 6, 5, 4, 3, 2,\
    \ 1]));\nconsole.log(strange_sort_list([1, 10, 2, 9, 3, 8, 4, 7, 5, 6]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9,\
    \ 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 11, 2, 10, 3,\
    \ 9, 4, 8, 5, 7, 6]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12]));\nconsole.log(strange_sort_list([12, 11, 10, 9, 8, 7, 6, 5,\
    \ 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 12, 2, 11, 3, 10, 4, 9, 5,\
    \ 8, 6, 7\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvi73mkl8.ts(33,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpvi73mkl8.ts(33,9): error TS1005: '','' expected.

    '
  timestamp: 1660014658
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted_list = lst.sort((a, b) => a - b);\n  \
    \  let result = [];\n    let i = 0;\n    let j = sorted_list.length - 1;\n   \
    \ while (i <= j) {\n        result.push(sorted_list[i]);\n        i++;\n     \
    \   if (i <= j) {\n            result.push(sorted_list[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4,\
    \ 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(strange_sort_list([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9,\
    \ 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\nconsole.log(strange_sort_list([12, 11, 10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13]));\nconsole.log(strange_sort_list([13, 12, 11, 10, 9, 8,\
    \ 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(strange\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpj5yvm3pu.ts(33,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpj5yvm3pu.ts(33,9): error TS1005: '','' expected.

    '
  timestamp: 1660014665
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        if (i !== j) {\n            result.push(sorted[j]);\n\
    \        }\n        i++;\n        j--;\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014653
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted_lst = lst.sort((a, b) => a - b);\n   \
    \ let result = [];\n    let i = 0;\n    let j = sorted_lst.length - 1;\n    while\
    \ (i <= j) {\n        result.push(sorted_lst[i]);\n        i++;\n        if (i\
    \ <= j) {\n            result.push(sorted_lst[j]);\n            j--;\n       \
    \ }\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2, 1]));\n\
    console.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(strange_sort_list([10,\
    \ 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9, 8, 7, 6, 5,\
    \ 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12]));\nconsole.log(strange_sort_list([12, 11, 10, 9, 8, 7, 6, 5, 4, 3,\
    \ 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13]));\nconsole.log(strange_sort_list([13, 12, 11, 10, 9, 8, 7, 6, 5, 4,\
    \ 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14]));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1oz_4ch_.ts(32,9): error TS1003: Identifier expected.

    '
  timestamp: 1660014665
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let min: number =\
    \ Math.min(...lst);\n    let max: number = Math.max(...lst);\n    let min_index:\
    \ number = lst.indexOf(min);\n    let max_index: number = lst.indexOf(max);\n\
    \    let lst_copy: number[] = lst.slice();\n    lst_copy.splice(min_index, 1);\n\
    \    lst_copy.splice(max_index - 1, 1);\n    result.push(min);\n    result.push(max);\n\
    \    while (lst_copy.length > 0) {\n        min = Math.min(...lst_copy);\n   \
    \     max = Math.max(...lst_copy);\n        min_index = lst_copy.indexOf(min);\n\
    \        max_index = lst_copy.indexOf(max);\n        lst_copy.splice(min_index,\
    \ 1);\n        lst_copy.splice(max_index - 1, 1);\n        result.push(min);\n\
    \        result.push(max);\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4,\
    \ 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(strange_sort_list([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6,\
    \ 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n \
    \ assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  9,\n\
    \  6,\n  8,\n  7,\n  7\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  9,\n  6,\n\
    \  8,\n  7\n]\n    at test (/tmp/tmpysmx9a1j.js:36:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpysmx9a1j.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 9, 6,\
    \ 8, 7, 7 ],\n  expected: [ 5, 9, 6, 8, 7 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5, 5\n]\n[\n  1, 9, 3, 9, 5,\n  9, 7, 9,\
    \ 9, 9\n]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7, 5, 6\n]\n[\n   1, 10,  3, 10,  5,\n\
    \  10,  7, 10,  9, 10\n]\n"
  timestamp: 1660014664
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014653
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let min: number =\
    \ Math.min(...lst);\n    let max: number = Math.max(...lst);\n    let minIndex:\
    \ number = lst.indexOf(min);\n    let maxIndex: number = lst.indexOf(max);\n \
    \   let minMax: number[] = [min, max];\n    let maxMin: number[] = [max, min];\n\
    \    let minMaxIndex: number[] = [minIndex, maxIndex];\n    let maxMinIndex: number[]\
    \ = [maxIndex, minIndex];\n    let minMaxIndexSorted: number[] = minMaxIndex.sort();\n\
    \    let maxMinIndexSorted: number[] = maxMinIndex.sort();\n    let minMaxSorted:\
    \ number[] = minMax.sort();\n    let maxMinSorted: number[] = maxMin.sort();\n\
    \    let minMaxSortedIndex: number[] = [minMaxSorted[0], minMaxSorted[1]];\n \
    \   let maxMinSortedIndex: number[] = [maxMinSorted[0], maxMinSorted[1]];\n  \
    \  let minMaxSortedIndexSorted: number[] = minMaxSortedIndex.sort();\n    let\
    \ maxMinSortedIndexSorted: number[] = maxMinSortedIndex.sort();\n    let minMaxSortedIndexSortedIndex:\
    \ number[] = [minMaxSortedIndexSorted[0], minMaxSortedIndexSorted[1]];\n    let\
    \ maxMinSortedIndexSortedIndex: number[] = [maxMinSortedIndexSorted[0], maxMinSortedIndexSorted[1]];\n\
    \    let minMaxSortedIndexSortedIndexSorted: number[] = minMaxSortedIndexSortedIndex.sort();\n\
    \    let maxMinSortedIndexSortedIndexSorted: number[] = maxMinSortedIndexSortedIndex.sort();\n\
    \    let minMaxSortedIndexSortedIndexSortedIndex: number[] = [minMaxSortedIndexSortedIndexSorted[0],\
    \ minMaxSortedIndexSortedIndexSorted[1]];\n    let maxMinSortedIndexSortedIndexSortedIndex:\
    \ number[] = [maxMinSortedIndexSortedIndexSorted[0], maxMinS\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3l8e68yw.ts(29,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp3l8e68yw.ts(29,9): error TS1005: '','' expected.

    ../../../../../tmp/tmp3l8e68yw.ts(46,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014665
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let sorted: number[]\
    \ = lst.sort((a, b) => a - b);\n    let min: number = 0;\n    let max: number\
    \ = sorted.length - 1;\n    while (min <= max) {\n        result.push(sorted[min]);\n\
    \        min++;\n        if (min <= max) {\n            result.push(sorted[max]);\n\
    \            max--;\n        }\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5]));\nconsole.log(strange_sort_list([5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7]));\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[ 1, 5, 2, 4, 3 ]\n[ 1, 5, 2, 4, 3 ]\n[ 1, 6, 2, 5, 3, 4 ]\n[\n  1, 7,\
    \ 2, 6,\n  3, 5, 4\n]\n"
  timestamp: 1660014666
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted_list = lst.sort((a, b) => a - b);\n  \
    \  let result = [];\n    let i = 0;\n    let j = sorted_list.length - 1;\n   \
    \ while (i <= j) {\n        result.push(sorted_list[i]);\n        if (i !== j)\
    \ {\n            result.push(sorted_list[j]);\n        }\n        i++;\n     \
    \   j--;\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4, 3,\
    \ 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(strange_sort_list([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9,\
    \ 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\nconsole.log(strange_sort_list([12, 11, 10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13]));\nconsole.log(strange_sort_list([13, 12, 11, 10, 9, 8,\
    \ 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(str\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvwq_933l.ts(33,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpvwq_933l.ts(33,9): error TS1005: '','' expected.

    '
  timestamp: 1660014665
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let min: number =\
    \ Math.min(...lst);\n    let max: number = Math.max(...lst);\n    let minIndex:\
    \ number = lst.indexOf(min);\n    let maxIndex: number = lst.indexOf(max);\n \
    \   let minMax: number[] = [min, max];\n    let minMaxIndex: number[] = [minIndex,\
    \ maxIndex];\n    let minMaxIndexSorted: number[] = minMaxIndex.sort((a, b) =>\
    \ a - b);\n    let minMaxSorted: number[] = minMaxIndexSorted.map(i => minMax[i]);\n\
    \    let minMaxSortedIndex: number[] = minMaxSorted.map(i => lst.indexOf(i));\n\
    \    let minMaxSortedIndexSorted: number[] = minMaxSortedIndex.sort((a, b) =>\
    \ a - b);\n    let minMaxSortedSorted: number[] = minMaxSortedIndexSorted.map(i\
    \ => minMaxSorted[i]);\n    let minMaxSortedSortedIndex: number[] = minMaxSortedSorted.map(i\
    \ => lst.indexOf(i));\n    let minMaxSortedSortedIndexSorted: number[] = minMaxSortedSortedIndex.sort((a,\
    \ b) => a - b);\n    let minMaxSortedSortedSorted: number[] = minMaxSortedSortedIndexSorted.map(i\
    \ => minMaxSortedSorted[i]);\n    let minMaxSortedSortedSortedIndex: number[]\
    \ = minMaxSortedSortedSorted.map(i => lst.indexOf(i));\n    let minMaxSortedSortedSortedIndexSorted:\
    \ number[] = minMaxSortedSortedSortedIndex.sort((a, b) => a - b);\n    let minMaxSortedSortedSortedSorted:\
    \ number[] = minMaxSortedSortedSortedIndexSorted.map(i => minMaxSortedSortedSorted[i]);\n\
    \    let minMaxSortedSortedSortedSortedIndex: number[] = minMaxSortedSortedSortedSorted.map(i\
    \ => lst.indexOf(\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_25epp7s.ts(25,9): error TS1005: '','' expected.

    ../../../../../tmp/tmp_25epp7s.ts(42,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014656
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let sortedList: number[]\
    \ = lst.sort((a, b) => a - b);\n    let i: number = 0;\n    let j: number = sortedList.length\
    \ - 1;\n    while (i <= j) {\n        result.push(sortedList[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push(sortedList[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4,\
    \ 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(strange_sort_list([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9,\
    \ 8, 7, 6, 5, 4, 3, 2, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n\
    ]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7, 5, 6\n]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7,\
    \ 5, 6\n]\n[\n  1, 11, 2, 10, 3,\n  9,  4, 8,  5, 7,\n  6\n]\n[\n  1, 11, 2, 10,\
    \ 3,\n  9,  4, 8,  5, 7,\n  6\n]\n"
  timestamp: 1660014666
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let max: number =\
    \ Math.max(...lst);\n    let min: number = Math.min(...lst);\n    let index: number\
    \ = 0;\n    let i: number = 0;\n    while (i < lst.length) {\n        if (i %\
    \ 2 === 0) {\n            result[index] = min;\n            lst.splice(lst.indexOf(min),\
    \ 1);\n            min = Math.min(...lst);\n        } else {\n            result[index]\
    \ = max;\n            lst.splice(lst.indexOf(max), 1);\n            max = Math.max(...lst);\n\
    \        }\n        index++;\n        i++;\n    }\n    return result;\n}\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4,\
    \ 3, 2, 1]));\nconsole.log(strange_sort_list([23, 90, -34, -56, 67, -78, 12, 0,\
    \ -1, 34]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpsyf1cnh8.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpsyf1cnh8.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 4 ],\n\
    \  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 1, 9, 2, 8, 3 ]

    [ 1, 9, 2, 8, 3 ]

    [ -78, 90, -56, 67, -34 ]

    '
  timestamp: 1660014666
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let lst_sorted = lst.sort((a, b) => a - b);\n   \
    \ let lst_sorted_reverse = lst_sorted.slice().reverse();\n    let lst_strange\
    \ = [];\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 0)\
    \ {\n            lst_strange.push(lst_sorted.shift());\n        } else {\n   \
    \         lst_strange.push(lst_sorted_reverse.shift());\n        }\n    }\n  \
    \  return lst_strange;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  4,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test\
    \ (/tmp/tmp3b8rfh8s.js:23:12)\n    at Object.<anonymous> (/tmp/tmp3b8rfh8s.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 4, 2\
    \ ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 1, 9, 2, 8, 3, 7 ]

    '
  timestamp: 1660014666
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted: number[] = [];\n    let min: number =\
    \ Math.min(...lst);\n    let max: number = Math.max(...lst);\n    let min_index:\
    \ number = lst.indexOf(min);\n    let max_index: number = lst.indexOf(max);\n\
    \    let min_max: number[] = [min, max];\n    let max_min: number[] = [max, min];\n\
    \    let min_max_index: number[] = [min_index, max_index];\n    let max_min_index:\
    \ number[] = [max_index, min_index];\n    let min_max_index_sorted: number[] =\
    \ min_max_index.sort();\n    let max_min_index_sorted: number[] = max_min_index.sort();\n\
    \    let min_max_sorted: number[] = min_max.sort();\n    let max_min_sorted: number[]\
    \ = max_min.sort();\n    let min_max_sorted_reverse: number[] = min_max_sorted.reverse();\n\
    \    let max_min_sorted_reverse: number[] = max_min_sorted.reverse();\n    let\
    \ min_max_index_sorted_reverse: number[] = min_max_index_sorted.reverse();\n \
    \   let max_min_index_sorted_reverse: number[] = max_min_index_sorted.reverse();\n\
    \    let min_max_index_sorted_reverse_string: string = min_max_index_sorted_reverse.toString();\n\
    \    let max_min_index_sorted_reverse_string: string = max_min_index_sorted_reverse.toString();\n\
    \    let min_max_index_sorted_string: string = min_max_index_sorted.toString();\n\
    \    let max_min_index_sorted_string: string = max_min_index_sorted.toString();\n\
    \    let min_max_index_string: string = min_max_index.toString();\n    let max_min_index_string:\
    \ string = max_min_index.toString();\n    let min_max_sorted_reverse_string: string\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptjf0722u.ts(47,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014666
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let lst_sorted = lst.sort((a, b) => a - b);\n   \
    \ let lst_sorted_reversed = lst_sorted.reverse();\n    let lst_sorted_reversed_sorted\
    \ = lst_sorted_reversed.sort((a, b) => a - b);\n    let lst_sorted_reversed_sorted_reversed\
    \ = lst_sorted_reversed_sorted.reverse();\n    let lst_sorted_reversed_sorted_reversed_sorted\
    \ = lst_sorted_reversed_sorted_reversed.sort((a, b) => a - b);\n    let lst_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = lst_sorted_reversed_sorted_reversed_sorted.reverse();\n    let lst_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = lst_sorted_reversed_sorted_reversed_sorted_reversed.sort((a, b) => a - b);\n\
    \    let lst_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed =\
    \ lst_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse();\n    let\
    \ lst_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted =\
    \ lst_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed.sort((a,\
    \ b) => a - b);\n    let lst_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = lst_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse();\n\
    \    let lst_sorted_reversed\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp90g4b8lv.ts(34,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014666
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        if (i !== j) {\n            result.push(sorted[j]);\n\
    \        }\n        i++;\n        j--;\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014653
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let sorted: number[]\
    \ = lst.sort((a, b) => a - b);\n    let min: number = sorted[0];\n    let max:\
    \ number = sorted[sorted.length - 1];\n    let i: number = 1;\n    while (sorted.length\
    \ > 0) {\n        if (i % 2 === 0) {\n            result.push(sorted.pop());\n\
    \        } else {\n            result.push(sorted.shift());\n        }\n     \
    \   i++;\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014666
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014653
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let min: number =\
    \ Math.min(...lst);\n    let max: number = Math.max(...lst);\n    let minIndex:\
    \ number = lst.indexOf(min);\n    let maxIndex: number = lst.indexOf(max);\n \
    \   let minRemaining: number[] = lst.slice(0, minIndex).concat(lst.slice(minIndex\
    \ + 1));\n    let maxRemaining: number[] = lst.slice(0, maxIndex).concat(lst.slice(maxIndex\
    \ + 1));\n    let minRemainingMin: number = Math.min(...minRemaining);\n    let\
    \ minRemainingMax: number = Math.max(...minRemaining);\n    let maxRemainingMin:\
    \ number = Math.min(...maxRemaining);\n    let maxRemainingMax: number = Math.max(...maxRemaining);\n\
    \    let minRemainingMinIndex: number = minRemaining.indexOf(minRemainingMin);\n\
    \    let minRemainingMaxIndex: number = minRemaining.indexOf(minRemainingMax);\n\
    \    let maxRemainingMinIndex: number = maxRemaining.indexOf(maxRemainingMin);\n\
    \    let maxRemainingMaxIndex: number = maxRemaining.indexOf(maxRemainingMax);\n\
    \    let minRemainingMinRemaining: number[] = minRemaining.slice(0, minRemainingMinIndex).concat(minRemaining.slice(minRemainingMinIndex\
    \ + 1));\n    let minRemainingMaxRemaining: number[] = minRemaining.slice(0, minRemainingMaxIndex).concat(minRemaining.slice(minRemainingMaxIndex\
    \ + 1));\n    let maxRemainingMinRemaining: number[] = maxRemaining.slice(0, maxRemainingMinIndex).concat(maxRemaining.slice(maxRemainingMinIndex\
    \ + 1));\n    let maxRemainingMaxRemaining: number[] = maxRemaining.slice(0, maxRemainingMaxIndex).concat(maxRemaining.slice(maxRemainingMaxIndex\
    \ + 1));\n    let minRemainingMinRemainingMin: number = Math.min(...minRemainingMinRemaining);\n\
    \    let minRemaining\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8lmrppw8.ts(44,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014666
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let min: number =\
    \ Math.min(...lst);\n    let max: number = Math.max(...lst);\n    let minIndex:\
    \ number = lst.indexOf(min);\n    let maxIndex: number = lst.indexOf(max);\n \
    \   let minValue: number = min;\n    let maxValue: number = max;\n    let minValueIndex:\
    \ number = minIndex;\n    let maxValueIndex: number = maxIndex;\n    let minValueIndexes:\
    \ number[] = [];\n    let maxValueIndexes: number[] = [];\n    let minValueIndexesCount:\
    \ number = 0;\n    let maxValueIndexesCount: number = 0;\n    let minValueIndexesCountIndex:\
    \ number = 0;\n    let maxValueIndexesCountIndex: number = 0;\n    let minValueIndexesCountIndexes:\
    \ number[] = [];\n    let maxValueIndexesCountIndexes: number[] = [];\n    let\
    \ minValueIndexesCountIndexesCount: number = 0;\n    let maxValueIndexesCountIndexesCount:\
    \ number = 0;\n    let minValueIndexesCountIndexesCountIndex: number = 0;\n  \
    \  let maxValueIndexesCountIndexesCountIndex: number = 0;\n    let minValueIndexesCountIndexesCountIndexes:\
    \ number[] = [];\n    let maxValueIndexesCountIndexesCountIndexes: number[] =\
    \ [];\n    let minValueIndexesCountIndexesCountIndexesCount: number = 0;\n   \
    \ let maxValueIndexesCountIndexesCountIndexesCount: number = 0;\n    let minValueIndexesCountIndexesCountIndexesCountIndex:\
    \ number = 0;\n    let maxValueIndexesCountIndexesCountIndexesCountIndex: number\
    \ = 0;\n    let minValueIndexesCountIndexesCountIndexesCountIndexes: number[]\
    \ = [];\n    let maxValueIndexesCountIndexesCountIndexesCountIndexes: number[]\
    \ = [];\n    let minValueIndexesCountIndexesCountIndexesCountIndexesCount: number\
    \ = 0;\n    let maxValueIndexesCountIndexesCountIndexesCountIndexesCount: number\
    \ = 0;\n    let minValueIndexesCountIndexesCountIndexesCountIndexesCountIndex:\
    \ number = 0;\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpos87jfg_.ts(55,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014666
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let sorted: number[]\
    \ = lst.sort((a, b) => a - b);\n    while (sorted.length > 0) {\n        result.push(sorted.shift());\n\
    \        result.push(sorted.pop());\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4,\
    \ 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(strange_sort_list([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6,\
    \ 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n \
    \ assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  9,\n\
    \  6,\n  8,\n  7,\n  undefined\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  9,\n\
    \  6,\n  8,\n  7\n]\n    at test (/tmp/tmpwry_azd2.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpwry_azd2.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 9, 6,\
    \ 8, 7, undefined ],\n  expected: [ 5, 9, 6, 8, 7 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: "[ 1, 9, 2, 8, 3, 7, 4, 6, 5, undefined ]\n[ 1, 9, 2, 8, 3, 7, 4, 6, 5,\
    \ undefined ]\n[\n  1, 10, 2, 9, 3,\n  8,  4, 7, 5, 6\n]\n[\n  1, 10, 2, 9, 3,\n\
    \  8,  4, 7, 5, 6\n]\n"
  timestamp: 1660014666
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let min: number =\
    \ Math.min(...lst);\n    let max: number = Math.max(...lst);\n    let minIndex:\
    \ number = lst.indexOf(min);\n    let maxIndex: number = lst.indexOf(max);\n \
    \   let i: number = 0;\n    while (result.length < lst.length) {\n        if (i\
    \ % 2 === 0) {\n            result.push(min);\n            lst.splice(minIndex,\
    \ 1);\n            min = Math.min(...lst);\n            minIndex = lst.indexOf(min);\n\
    \        } else {\n            result.push(max);\n            lst.splice(maxIndex,\
    \ 1);\n            max = Math.max(...lst);\n            maxIndex = lst.indexOf(max);\n\
    \        }\n        i++;\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  4,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test\
    \ (/tmp/tmpzdchwc0o.js:33:12)\n    at Object.<anonymous> (/tmp/tmpzdchwc0o.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 4, 2\
    \ ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 1, 9, 2, 9, 3, 9 ]

    '
  timestamp: 1660014666
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n  let sorted = lst.sort((a, b) => a - b);\n  let result\
    \ = [];\n  while (sorted.length > 0) {\n    result.push(sorted.shift());\n   \
    \ result.push(sorted.pop());\n  }\n  return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  9,\n\
    \  6,\n  8,\n  7,\n  undefined\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  9,\n\
    \  6,\n  8,\n  7\n]\n    at test (/tmp/tmpxqcgurij.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxqcgurij.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 9, 6,\
    \ 8, 7, undefined ],\n  expected: [ 5, 9, 6, 8, 7 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: '[ 1, 9, 2, 8, 3, 7, 4, 6, 5, undefined ]

    '
  timestamp: 1660014661
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        if (i !== j) {\n            result.push(sorted[j]);\n\
    \        }\n        i++;\n        j--;\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[ 2, 9, 3, 7, 4 ]\n"
  timestamp: 1660014653
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let sorted: number[]\
    \ = lst.sort((a, b) => a - b);\n    let i: number = 0;\n    let j: number = sorted.length\
    \ - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push(sorted[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4,\
    \ 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(strange_sort_list([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9,\
    \ 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]));\nconsole.log(strange_sort_list([12, 11, 10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13]));\nconsole.log(strange_sort_list([13, 12, 11, 10, 9, 8,\
    \ 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsyvmv6e1.ts(33,9): error TS1005: '','' expected.

    '
  timestamp: 1660014661
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let min: number =\
    \ Math.min(...lst);\n    let max: number = Math.max(...lst);\n    let min_index:\
    \ number = lst.indexOf(min);\n    let max_index: number = lst.indexOf(max);\n\
    \    let min_removed: number[] = lst.slice(0, min_index).concat(lst.slice(min_index\
    \ + 1));\n    let max_removed: number[] = min_removed.slice(0, max_index).concat(min_removed.slice(max_index\
    \ + 1));\n    let min_removed_2: number[] = [];\n    let max_removed_2: number[]\
    \ = [];\n    let min_removed_3: number[] = [];\n    let max_removed_3: number[]\
    \ = [];\n    let min_removed_4: number[] = [];\n    let max_removed_4: number[]\
    \ = [];\n    let min_removed_5: number[] = [];\n    let max_removed_5: number[]\
    \ = [];\n    let min_removed_6: number[] = [];\n    let max_removed_6: number[]\
    \ = [];\n    let min_removed_7: number[] = [];\n    let max_removed_7: number[]\
    \ = [];\n    let min_removed_8: number[] = [];\n    let max_removed_8: number[]\
    \ = [];\n    let min_removed_9: number[] = [];\n    let max_removed_9: number[]\
    \ = [];\n    let min_removed_10: number[] = [];\n    let max_removed_10: number[]\
    \ = [];\n    let min_removed_11: number[] = [];\n    let max_removed_11: number[]\
    \ = [];\n    let min_removed_12: number[] = [];\n    let max_removed_12: number[]\
    \ = [];\n    let min_removed_13: number[] = [];\n    let max_removed_13: number[]\
    \ = [];\n    let min_removed_14: number[] = [];\n    let max_removed_14: number[]\
    \ =\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpt923n8e3.ts(39,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpt923n8e3.ts(56,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014666
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let sorted: number[]\
    \ = lst.sort((a, b) => a - b);\n    let min: number = sorted[0];\n    let max:\
    \ number = sorted[sorted.length - 1];\n    let i: number = 0;\n    let j: number\
    \ = sorted.length - 1;\n    while (i < j) {\n        result.push(min);\n     \
    \   result.push(max);\n        min = sorted[++i];\n        max = sorted[--j];\n\
    \    }\n    if (min === max) {\n        result.push(min);\n    }\n    return result;\n\
    }\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9,\
    \ 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2, 1, 1]));\n\
    console.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9]));\nconsole.log(strange_sort_list([9,\
    \ 8, 7, 6, 5, 4, 3, 2, 1, 1, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 9, 9, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4,\
    \ 3, 2, 1, 1, 1, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 9, 9, 9, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2, 1,\
    \ 1, 1, 1, 1]));\nconsole.log(strange_\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpw49p0w7t.ts(35,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpw49p0w7t.ts(35,9): error TS1005: '','' expected.

    '
  timestamp: 1660014666
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 9, 2, 8, 3, 7, 4, 6, 5]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]));\nconsole.log(strange_sort_list([10, 9, 8, 7, 6, 5, 4, 3, 2,\
    \ 1]));\nconsole.log(strange_sort_list([1, 10, 2, 9, 3, 8, 4, 7, 5, 6]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9,\
    \ 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 11, 2, 10, 3,\
    \ 9, 4, 8, 5, 7, 6]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12]));\nconsole.log(strange_sort_list([12, 11, 10, 9, 8, 7, 6, 5,\
    \ 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 12, 2, 11, 3, 10, 4, 9, 5,\
    \ 8, 6, 7\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvi73mkl8.ts(33,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpvi73mkl8.ts(33,9): error TS1005: '','' expected.

    '
  timestamp: 1660014658
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted = lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i <=\
    \ j) {\n        result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push(sorted[j]);\n            j--;\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(strange_sort_list([10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9, 8, 7, 6, 5, 4, 3, 2,\
    \ 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\n\
    console.log(strange_sort_list([12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(strange_sort_list([13,\
    \ 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(strange_sort_list([14,\
    \ 13\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphp5hxa9w.ts(33,1): error TS1005: '','' expected.

    ../../../../../tmp/tmphp5hxa9w.ts(33,9): error TS1005: '','' expected.

    '
  timestamp: 1660014653
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let min: number =\
    \ Math.min(...lst);\n    let max: number = Math.max(...lst);\n    let min_index:\
    \ number = lst.indexOf(min);\n    let max_index: number = lst.indexOf(max);\n\
    \    let min_max_index: number = Math.min(min_index, max_index);\n    let max_min_index:\
    \ number = Math.max(min_index, max_index);\n    let min_max_lst: number[] = lst.slice(min_max_index,\
    \ max_min_index + 1);\n    let max_min_lst: number[] = lst.slice(max_min_index\
    \ + 1).concat(lst.slice(0, min_max_index));\n    if (min_max_lst.length > 1) {\n\
    \        result = result.concat(strange_sort_list(min_max_lst));\n    } else {\n\
    \        result = result.concat(min_max_lst);\n    }\n    if (max_min_lst.length\
    \ > 1) {\n        result = result.concat(strange_sort_list(max_min_lst));\n  \
    \  } else {\n        result = result.concat(max_min_lst);\n    }\n    return result;\n\
    }\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9]));\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6,\
    \ 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n \
    \ assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpxjt6gzua.js:7\n    var min = Math.min.apply(Math, lst);\n     \
    \                  ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmpxjt6gzua.js:7:24)\n    at strange_sort_list (/tmp/tmpxjt6gzua.js:16:32)\n\
    \    at strange_sort_list (/tmp/tmpxjt6gzua.js:16:32)\n    at strange_sort_list\
    \ (/tmp/tmpxjt6gzua.js:16:32)\n    at strange_sort_list (/tmp/tmpxjt6gzua.js:16:32)\n\
    \    at strange_sort_list (/tmp/tmpxjt6gzua.js:16:32)\n    at strange_sort_list\
    \ (/tmp/tmpxjt6gzua.js:16:32)\n    at strange_sort_list (/tmp/tmpxjt6gzua.js:16:32)\n\
    \    at strange_sort_list (/tmp/tmpxjt6gzua.js:16:32)\n    at strange_sort_list\
    \ (/tmp/tmpxjt6gzua.js:16:32)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014666
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let sorted_lst: number[]\
    \ = lst.sort((a, b) => a - b);\n    let min_max: number[] = [];\n    let i: number\
    \ = 0;\n    let j: number = sorted_lst.length - 1;\n    while (i <= j) {\n   \
    \     min_max.push(sorted_lst[i]);\n        i++;\n        if (i <= j) {\n    \
    \        min_max.push(sorted_lst[j]);\n            j--;\n        }\n    }\n  \
    \  return min_max;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(strange_sort_list([10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\nconsole.log(strange_sort_list([11, 10, 9, 8, 7, 6, 5, 4, 3, 2,\
    \ 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\n\
    console.log(strange_sort_list([12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(strange_sort_list([13,\
    \ 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4bf12ob_.ts(33,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp4bf12ob_.ts(33,9): error TS1005: '','' expected.

    '
  timestamp: 1660014666
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let sorted_list:\
    \ number[] = lst.sort((a, b) => a - b);\n    let min_max: number[] = [];\n   \
    \ let min_max_index: number = 0;\n    let min_max_index_count: number = 0;\n \
    \   let min_max_index_count_max: number = Math.ceil(sorted_list.length / 2);\n\
    \    let min_max_index_count_min: number = Math.floor(sorted_list.length / 2);\n\
    \    let min_max_index_count_max_min: number = Math.ceil(sorted_list.length /\
    \ 2);\n    let min_max_index_count_min_max: number = Math.floor(sorted_list.length\
    \ / 2);\n    let min_max_index_count_max_min_max: number = Math.ceil(sorted_list.length\
    \ / 2);\n    let min_max_index_count_min_max_min: number = Math.floor(sorted_list.length\
    \ / 2);\n    let min_max_index_count_max_min_max_min: number = Math.ceil(sorted_list.length\
    \ / 2);\n    let min_max_index_count_min_max_min_max: number = Math.floor(sorted_list.length\
    \ / 2);\n    let min_max_index_count_max_min_max_min_max: number = Math.ceil(sorted_list.length\
    \ / 2);\n    let min_max_index_count_min_max_min_max_min: number = Math.floor(sorted_list.length\
    \ / 2);\n    let min_max_index_count_max_min_max_min_max_min: number = Math.ceil(sorted_list.length\
    \ / 2);\n    let min_max_index_count_min_max_min_max_min_max: number = Math.floor(sorted_list.length\
    \ / 2);\n    let min_max_index_count_max_min_max_min_max_min_max: number = Math.ceil(sorted_list.length\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7uhoq5ec.ts(24,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp7uhoq5ec.ts(24,9): error TS1005: '','' expected.

    ../../../../../tmp/tmp7uhoq5ec.ts(41,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014666
- exit_code: 0
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let sorted_list = lst.sort((a, b) => a - b);\n  \
    \  let result = [];\n    let i = 0;\n    let j = sorted_list.length - 1;\n   \
    \ while (i <= j) {\n        result.push(sorted_list[i]);\n        i++;\n     \
    \   if (i <= j) {\n            result.push(sorted_list[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(strange_sort_list([9, 8, 7, 6, 5, 4,\
    \ 3, 2, 1]));\nconsole.log(strange_sort_list([1, 3, 5, 7, 9, 8, 6, 4, 2]));\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n\
    ]\n[\n  1, 9, 2, 8, 3,\n  7, 4, 6, 5\n]\n"
  timestamp: 1660014666
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let lst_sorted = lst.sort((a, b) => a - b);\n   \
    \ let lst_sorted_reverse = lst_sorted.reverse();\n    let lst_sorted_result =\
    \ [];\n    while (lst_sorted.length > 0) {\n        lst_sorted_result.push(lst_sorted.shift());\n\
    \        lst_sorted_result.push(lst_sorted_reverse.shift());\n    }\n    return\
    \ lst_sorted_result;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9]));\nconsole.log(strange_sort_list([9, 2, 4, 7, 3]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpa7hcaxs8.js:20:12)\n    at Object.<anonymous> (/tmp/tmpa7hcaxs8.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 9, 8, 7, 6, 5, 4, 3, 2, 1, undefined ]

    [ 9, 7, 4, 3, 2, undefined ]

    '
  timestamp: 1660014666
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\nfunction strange_sort_list(lst:\
    \ number[]): number[] {\n    let min: number = Math.min(...lst);\n    let max:\
    \ number = Math.max(...lst);\n    let result: number[] = [];\n    let i: number\
    \ = 0;\n    while (lst.length > 0) {\n        if (i % 2 === 0) {\n           \
    \ result.push(min);\n            lst.splice(lst.indexOf(min), 1);\n          \
    \  min = Math.min(...lst);\n        } else {\n            result.push(max);\n\
    \            lst.splice(lst.indexOf(max), 1);\n            max = Math.max(...lst);\n\
    \        }\n        i++;\n    }\n    return result;\n}\n\nconsole.log(strange_sort_list([5,\
    \ 3, 1, 8, 0]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5]));\nconsole.log(strange_sort_list([5,\
    \ 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    console.log(strange_sort_list([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1]));\nconsole.log(strange_sort_list([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(strange_sort_list([20,\
    \ 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28,\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3gduoz9e.ts(34,9): error TS1005: '','' expected.

    '
  timestamp: 1660014666
