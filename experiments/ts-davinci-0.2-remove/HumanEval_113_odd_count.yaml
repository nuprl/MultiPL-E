name: HumanEval_113_odd_count
language: ts
prompt: "//Given a list of strings, where each string consists of only digits, return\
  \ a list.\n// Each element i of the output should be \"the number of odd elements\
  \ in the\n// string i of the input.\" where all the i's should be replaced by the\
  \ number\n// of odd digits in the i'th string of the input.\nfunction odd_count(lst:\
  \ string[]): string[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = odd_count;\n  assert.deepEqual(candidate([\"1234567\"\
  ]),[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]);\n  assert.deepEqual(candidate([\"\
  3\", \"11111111\"]),[\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
  , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]);\n  assert.deepEqual(candidate([\"\
  271\", \"137\", \"314\"]),[\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
  , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
  \ odd elements 2n the str2ng 2 of the 2nput.\"]);\n}\n\ntest();"
completions: ["  return lst.map(str => str.split('').filter(num => num % 2 !== 0).length);\n\
    }\n", "  return lst.map(str => str.split('').filter(char => parseInt(char) % 2\
    \ !== 0).length.toString());\n}\n", "    return lst.map(str => str.split('').filter(num\
    \ => num % 2 === 1).length.toString());\n}\n", "  return lst.map(x => x.split('').filter(y\
    \ => y % 2).length.toString());\n}\n", "  return lst.map(str => {\n    let count\
    \ = 0;\n    for (let i = 0; i < str.length; i++) {\n      if (parseInt(str[i])\
    \ % 2 === 1) {\n        count++;\n      }\n    }\n    return count.toString();\n\
    \  });\n}\n", "  return lst.map(str => {\n    let count = 0;\n    for (let i =\
    \ 0; i < str.length; i++) {\n      if (parseInt(str[i]) % 2 !== 0) {\n       \
    \ count++;\n      }\n    }\n    return count.toString();\n  });\n}\n", "    return\
    \ lst.map(s => s.split('').filter(c => parseInt(c) % 2 === 1).length.toString());\n\
    }\n", "  return lst.map(s => s.split('').filter(c => parseInt(c) % 2 === 1).length);\n\
    }\n", "  return lst.map(str => str.split('').filter(num => num % 2 !== 0).length);\n\
    }\n\nconsole.log(odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"\
    8\", \"9\", \"10\"]));", "  return lst.map(str => {\n    let count = 0;\n    for\
    \ (let i = 0; i < str.length; i++) {\n      if (Number(str[i]) % 2 === 1) {\n\
    \        count++;\n      }\n    }\n    return count.toString();\n  });\n}\n\n\
    console.log(odd_count([\"12\", \"55\", \"77\", \"34\", \"44\"]));\n", "  return\
    \ lst.map(str => {\n    let count = 0;\n    for (let i = 0; i < str.length; i++)\
    \ {\n      if (parseInt(str[i]) % 2 !== 0) {\n        count++;\n      }\n    }\n\
    \    return count.toString();\n  });\n}\n\nconsole.log(odd_count([\"123\", \"\
    1234\", \"1235\"]));", "  return lst.map(num => {\n    let count = 0;\n    for\
    \ (let i = 0; i < num.length; i++) {\n      if (num[i] % 2 !== 0) {\n        count++;\n\
    \      }\n    }\n    return count;\n  });\n}\n", "  return lst.map(x => x.split('').reduce((acc,\
    \ cur) => acc + (cur % 2), 0).toString());\n}\n", "    return lst.map(x => x.split('').filter(y\
    \ => y % 2 != 0).length.toString());\n}\n", "    return lst.map(x => x.split('').filter(y\
    \ => parseInt(y) % 2 === 1).length.toString());\n}\n", "  return lst.map(x =>\
    \ x.split('').filter(y => parseInt(y) % 2 !== 0).length.toString());\n}\n\nconsole.log(odd_count([\"\
    1234\", \"5678\", \"9012\"])); // [\"1\", \"2\", \"1\"]\nconsole.log(odd_count([\"\
    12\", \"5\", \"9\"])); // [\"1\", \"1\", \"1\"]\nconsole.log(odd_count([\"12\"\
    , \"5\", \"9\", \"0\"])); // [\"1\", \"1\", \"1\", \"0\"]\nconsole.log(odd_count([\"\
    12\", \"5\", \"9\", \"0\", \"1\"])); // [\"1\", \"1\", \"1\", \"0\", \"1\"]\n\
    console.log(odd_count([\"12\", \"5\", \"9\", \"0\", \"1\", \"2\"])); // [\"1\"\
    , \"1\", \"1\", \"0\", \"1\", \"0\"]\nconsole.log(odd_count([\"12\", \"5\", \"\
    9\", \"0\", \"1\", \"2\", \"3\"])); // [\"1\", \"1\", \"1\", \"0\", \"1\", \"\
    0\", \"1\"]\nconsole.log(odd_count([\"12\", \"5\", \"9\", \"0\", \"1\", \"2\"\
    , \"3\", \"4\"])); // [\"1\", \"1\", \"1\", \"0\", \"1\", \"0\", \"1\", \"0\"\
    ]\nconsole.log(odd_count([\"12\", \"5\", \"9\", \"0\", \"1\", \"2\", \"3\", \"\
    4\", \"5\"])); // [\"1\", \"1\", \"1\", \"0\", \"1\", \"0\", \"1\", \"0\", \"\
    1\"]\nconsole.log(odd_count([\"12\", \"5\", \"9\", \"0\", \"1\", \"2\", \"3\"\
    , \"4\", \"5\", \"6\"])); // [\"1\", \"1\", \"1\", \"0\", \"1\", \"0\", \"1\"\
    , \"0\", \"1\", \"0\"]\nconsole.log(odd_count([\"12\", \"5\", \"9\", \"0\", \"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7", "  return lst.map(s => s.split('').filter(c\
    \ => parseInt(c) % 2 === 1).length);\n}\n", "  return lst.map(x => x.split('').filter(y\
    \ => Number(y) % 2 === 1).length);\n}\n", "  return lst.map(str => {\n    let\
    \ count = 0;\n    for (let i = 0; i < str.length; i++) {\n      if (parseInt(str[i])\
    \ % 2 !== 0) {\n        count++;\n      }\n    }\n    return count.toString();\n\
    \  });\n}\n\nconsole.log(odd_count([\"1234\", \"1235\", \"1236\"]));\n", "  return\
    \ lst.map(s => s.split('').filter(c => parseInt(c) % 2 === 1).length.toString());\n\
    }\n", "  return lst.map(x => x.split('').filter(y => parseInt(y) % 2 !== 0).length.toString());\n\
    }\n", "    return lst.map(x => x.split('').filter(y => y % 2 !== 0).length.toString());\n\
    }\n\nconsole.log(odd_count([\"123\", \"1234\", \"1235\"]));\nconsole.log(odd_count([\"\
    1234\", \"1235\", \"1236\"]));\nconsole.log(odd_count([\"1234\", \"1235\", \"\
    1236\", \"1237\"]));\nconsole.log(odd_count([\"1234\", \"1235\", \"1236\", \"\
    1237\", \"1238\"]));\nconsole.log(odd_count([\"1234\", \"1235\", \"1236\", \"\
    1237\", \"1238\", \"1239\"]));\nconsole.log(odd_count([\"1234\", \"1235\", \"\
    1236\", \"1237\", \"1238\", \"1239\", \"1240\"]));\nconsole.log(odd_count([\"\
    1234\", \"1235\", \"1236\", \"1237\", \"1238\", \"1239\", \"1240\", \"1241\"]));\n\
    console.log(odd_count([\"1234\", \"1235\", \"1236\", \"1237\", \"1238\", \"1239\"\
    , \"1240\", \"1241\", \"1242\"]));\nconsole.log(odd_count([\"1234\", \"1235\"\
    , \"1236\", \"1237\", \"1238\", \"1239\", \"1240\", \"1241\", \"1242\", \"1243\"\
    ]));\nconsole.log(odd_count([\"1234\", \"1235\", \"1236\", \"1237\", \"1238\"\
    , \"1239\", \"1240\", \"1241\", \"1242\", \"1243\", \"1244\"]));\nconsole.log(odd_count([\"\
    1234\", \"1235\", \"1236\", \"1237\", \"1238\", \"1239\", \"1240\", \"1241\",\
    \ \"1242\", \"1243\", \"1244\", \"1245\"]));\nconsole.log(odd_count([\"1234\"\
    , \"1235\", \"1236\", \"1237\", \"1238\", \"1239\", \"1240\", \"1241\", \"1242\"\
    , \"1243\", \"1244\", \"1245", "  return lst.map(x => x.split('').filter(y =>\
    \ Number(y) % 2 === 1).length.toString());\n}\n", "    return lst.map(x => x.split('').filter(y\
    \ => y % 2 !== 0).length.toString());\n}\n", "  return lst.map(x => x.split('').filter(y\
    \ => y % 2).length);\n}\n", "  return lst.map(x => x.split('').filter(y => y %\
    \ 2 === 1).length.toString());\n}\n", "  return lst.map(x => x.split('').filter(y\
    \ => y % 2 !== 0).length.toString());\n}\n\nconsole.log(odd_count([\"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]));", "  return lst.map(x\
    \ => x.split('').filter(y => y % 2 !== 0).length.toString());\n}\n", "  return\
    \ lst.map(x => x.split('').filter(y => y % 2).length);\n}\n", "    return lst.map(s\
    \ => s.split('').filter(c => parseInt(c) % 2 === 1).length.toString());\n}\n",
  "    return lst.map(x => x.split('').filter(y => y % 2 !== 0).length.toString());\n\
    }\n\nconsole.log(odd_count([\"123\", \"123456789\", \"1234567890123456789\"]));",
  "  return lst.map(str => str.split('').filter(num => num % 2 !== 0).length);\n}\n\
    \nconsole.log(odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"\
    , \"9\", \"10\"]));", "  return lst.map(str => {\n    let count = 0;\n    for\
    \ (let i = 0; i < str.length; i++) {\n      if (Number(str[i]) % 2 === 1) {\n\
    \        count++;\n      }\n    }\n    return count.toString();\n  });\n}\n",
  "  return lst.map(x => x.split('').filter(y => y % 2 != 0).length.toString());\n\
    }\n\nconsole.log(odd_count([\"123\", \"12345\", \"1234567\"]));", "  return lst.map(x\
    \ => x.split('').filter(y => y % 2).length);\n}\n", "  return lst.map(x => x.split('').filter(y\
    \ => parseInt(y) % 2 !== 0).length.toString());\n}\n", "    return lst.map(x =>\
    \ x.split('').filter(y => parseInt(y) % 2 != 0).length.toString());\n}\n", " \
    \   return lst.map(str => str.split('').filter(num => num % 2 !== 0).length.toString());\n\
    }\n\nconsole.log(odd_count([\"123\", \"1234\", \"1235\", \"1236\", \"1237\"]));",
  "  return lst.map(x => x.split('').filter(y => y % 2 === 1).length.toString());\n\
    }\n", "  return lst.map(x => x.split('').filter(y => Number(y) % 2).length);\n\
    }\n", "  return lst.map(x => x.split('').filter(y => parseInt(y) % 2 !== 0).length);\n\
    }\n\nconsole.log(odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"\
    8\", \"9\", \"10\"]));", "  return lst.map(s => s.split('').filter(c => parseInt(c)\
    \ % 2 === 1).length.toString());\n}\n", "  return lst.map(str => {\n    let count\
    \ = 0;\n    for (let i = 0; i < str.length; i++) {\n      if (parseInt(str[i])\
    \ % 2 !== 0) {\n        count++;\n      }\n    }\n    return count.toString();\n\
    \  });\n}\n\nconsole.log(odd_count([\"123\", \"12\", \"1234\"]));\n", "  return\
    \ lst.map(x => x.split('').filter(y => parseInt(y) % 2 !== 0).length.toString());\n\
    }\n", "    return lst.map(x => x.split('').filter(y => parseInt(y) % 2 !== 0).length.toString());\n\
    }\n", "    return lst.map(x => x.split('').filter(y => parseInt(y) % 2 === 1).length.toString());\n\
    }\n", "  return lst.map(str => {\n    let count = 0;\n    for (let i = 0; i <\
    \ str.length; i++) {\n      if (parseInt(str[i]) % 2 === 1) {\n        count++;\n\
    \      }\n    }\n    return count.toString();\n  });\n}\n", "    return lst.map(x\
    \ => x.split('').filter(y => parseInt(y) % 2 === 1).length.toString());\n}\n",
  "  return lst.map(str => str.split('').filter(char => parseInt(char) % 2 !== 0).length);\n\
    }\n\nconsole.log(odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"\
    8\", \"9\", \"10\"]));", "  return lst.map(x => x.split('').filter(y => y % 2\
    \ !== 0).length.toString());\n}\n\nconsole.log(odd_count([\"123\", \"1234\", \"\
    1235\"]));", "  let result: string[] = [];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n\
    \      if (lst[i][j] % 2 !== 0) {\n        count++;\n      }\n    }\n    result.push(count.toString());\n\
    \  }\n  return result;\n}\n\nconsole.log(odd_count([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]));", "  return lst.map(x => x.split('').filter(y\
    \ => parseInt(y) % 2 === 1).length);\n}\n", "  return lst.map(str =>\n    str.split(\"\
    \").reduce((acc, curr) => (Number(curr) % 2 === 1 ? acc + 1 : acc), 0).toString()\n\
    \  );\n}\n", "  let result: string[] = [];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n\
    \      if (parseInt(lst[i][j]) % 2 === 1) {\n        count++;\n      }\n    }\n\
    \    result.push(count.toString());\n  }\n  return result;\n}\n\nconsole.log(odd_count([\"\
    123\", \"1234\", \"1235\", \"1236\"]));", "  return lst.map(x => x.split('').filter(y\
    \ => +y % 2).length);\n}\n", "  return lst.map(s => s.split('').filter(c => c\
    \ % 2).length.toString());\n}\n\nconsole.log(odd_count([\"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]));", "    return lst.map(x =>\
    \ x.split('').filter(y => y % 2 !== 0).length.toString());\n}\n", "  return lst.map(s\
    \ => s.split('').filter(c => parseInt(c) % 2 === 1).length);\n}\n", "    return\
    \ lst.map(x => x.split('').filter(y => parseInt(y) % 2 === 1).length);\n}\n",
  "  return lst.map(str => {\n    let count = 0;\n    for (let i = 0; i < str.length;\
    \ i++) {\n      if (parseInt(str[i]) % 2 === 1) {\n        count++;\n      }\n\
    \    }\n    return count.toString();\n  });\n}\n", "  return lst.map(x => x.split('').filter(y\
    \ => y % 2 != 0).length);\n}\n", "  return lst.map(str => {\n    let count = 0;\n\
    \    for (let i = 0; i < str.length; i++) {\n      if (parseInt(str[i]) % 2 !==\
    \ 0) {\n        count++;\n      }\n    }\n    return count.toString();\n  });\n\
    }\n\nconsole.log(odd_count([\"123\", \"1234\", \"1235\", \"1236\"]));\n", "  \
    \  return lst.map(x => x.split('').filter(y => y % 2 !== 0).length.toString());\n\
    }\n", "    let result: string[] = [];\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        let count = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n\
    \            if (parseInt(lst[i][j]) % 2 !== 0) {\n                count++;\n\
    \            }\n        }\n        result.push(count.toString());\n    }\n   \
    \ return result;\n}\n\nconsole.log(odd_count([\"123\", \"1234\", \"1235\"]));\n\
    console.log(odd_count([\"123\", \"1234\", \"1235\"]));\nconsole.log(odd_count([\"\
    123\", \"1234\", \"1235\"]));\nconsole.log(odd_count([\"123\", \"1234\", \"1235\"\
    ]));\nconsole.log(odd_count([\"123\", \"1234\", \"1235\"]));\nconsole.log(odd_count([\"\
    123\", \"1234\", \"1235\"]));\nconsole.log(odd_count([\"123\", \"1234\", \"1235\"\
    ]));\nconsole.log(odd_count([\"123\", \"1234\", \"1235\"]));\nconsole.log(odd_count([\"\
    123\", \"1234\", \"1235\"]));\nconsole.log(odd_count([\"123\", \"1234\", \"1235\"\
    ]));\nconsole.log(odd_count([\"123\", \"1234\", \"1235\"]));\nconsole.log(odd_count([\"\
    123\", \"1234\", \"1235\"]));\nconsole.log(odd_count([\"123\", \"1234\", \"1235\"\
    ]));\nconsole.log(odd_count([\"123\", \"1234\", \"1235\"]));\nconsole.log(odd_count([\"\
    123\", \"1234\", \"1235\"]));\nconsole.log(odd_count([\"123\", \"1234\", \"1235\"\
    ]));\nconsole.log(odd_count([\"123\", \"1234\", \"1235\"]));\nconsole.log(odd_count([\"\
    123\", \"1234\", \"1235\"]));\nconsole.log(odd_count([\"123\", \"1234\", \"1235\"\
    ]));\nconsole.log", "  return lst.map(s => s.split('').filter(c => c % 2 === 1).length);\n\
    }\n", "  return lst.map(x => x.split('').filter(y => y % 2 !== 0).length);\n}\n",
  "  return lst.map(str => {\n    let count = 0;\n    for (let i = 0; i < str.length;\
    \ i++) {\n      if (Number(str[i]) % 2 === 1) {\n        count++;\n      }\n \
    \   }\n    return String(count);\n  });\n}\n\nconsole.log(odd_count([\"1\", \"\
    2\", \"3\", \"4\", \"5\"]));", "  return lst.map(e => e.split('').filter(e =>\
    \ e % 2 !== 0).length);\n}\n\nconsole.log(odd_count([\"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]));", "  return lst.map(str => {\n\
    \    let count = 0;\n    for (let i = 0; i < str.length; i++) {\n      if (parseInt(str[i])\
    \ % 2 !== 0) {\n        count++;\n      }\n    }\n    return count.toString();\n\
    \  });\n}\n\nconsole.log(odd_count([\"123\", \"1234\", \"1235\"]));", "  return\
    \ lst.map(x => x.split('').filter(y => y % 2 !== 0).length);\n}\n\nconsole.log(odd_count([\"\
    123\", \"1234\", \"1235\"])); // [1, 2, 3]\nconsole.log(odd_count([\"0011\", \"\
    0101\", \"0110\"])); // [2, 2, 2]\nconsole.log(odd_count([\"000\", \"111\", \"\
    010\", \"101\"])); // [0, 3, 1, 2]", "  return lst.map(x => x.split('').filter(y\
    \ => y % 2 !== 0).length.toString());\n}\n\nconsole.log(odd_count([\"123\", \"\
    1234\", \"1235\"]));", "    return lst.map(s => s.split('').filter(c => parseInt(c)\
    \ % 2 === 1).length.toString());\n}\n", "    return lst.map(s => s.split('').filter(c\
    \ => parseInt(c) % 2 == 1).length.toString());\n}\n", "  return lst.map(x => x.split('').filter(y\
    \ => parseInt(y) % 2 !== 0).length);\n}\n", "  return lst.map(str => {\n    let\
    \ count = 0;\n    for (let i = 0; i < str.length; i++) {\n      if (parseInt(str[i])\
    \ % 2 !== 0) {\n        count++;\n      }\n    }\n    return count.toString();\n\
    \  });\n}\n\nconsole.log(odd_count([\"123\", \"12\", \"1234\"]));", "    return\
    \ lst.map(x => x.split('').filter(y => parseInt(y) % 2 === 1).length.toString());\n\
    }\n", "  return lst.map(x => x.split('').filter(y => y % 2 === 1).length.toString());\n\
    }\n", "  return lst.map(str => {\n    let count = 0;\n    for (let i = 0; i <\
    \ str.length; i++) {\n      if (parseInt(str[i]) % 2 !== 0) {\n        count++;\n\
    \      }\n    }\n    return count.toString();\n  });\n}\n\nconsole.log(odd_count([\"\
    123\", \"1234\", \"1235\"]));\n", "    let result: string[] = [];\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        let count = 0;\n        for (let j =\
    \ 0; j < lst[i].length; j++) {\n            if (lst[i][j] % 2 !== 0) {\n     \
    \           count++;\n            }\n        }\n        result.push(count.toString());\n\
    \    }\n    return result;\n}\n", "  return lst.map(x => x.split('').filter(y\
    \ => y % 2 === 1).length.toString());\n}\n", "  return lst.map(str => str.split('').filter(digit\
    \ => Number(digit) % 2 !== 0).length.toString());\n}\n", "  return lst.map(str\
    \ => {\n    return str.split('').filter(num => {\n      return parseInt(num) %\
    \ 2 !== 0;\n    }).length.toString();\n  });\n}\n\nconsole.log(odd_count([\"123\"\
    , \"234\", \"345\", \"456\", \"567\", \"678\", \"789\"]));", "    return lst.map(x\
    \ => x.split('').filter(y => y % 2 === 1).length.toString());\n}\n", "  return\
    \ lst.map(x => x.split('').filter(y => parseInt(y) % 2 === 1).length);\n}\n",
  "    return lst.map(x => x.split('').filter(y => y % 2 !== 0).length.toString());\n\
    }\n", "  return lst.map(x => x.split('').filter(y => parseInt(y) % 2 === 1).length.toString());\n\
    }\n\nconsole.log(odd_count([\"12\", \"34\", \"56\", \"78\"]));\n", "  return lst.map(e\
    \ => e.split('').filter(e => e % 2 !== 0).length);\n}\n", "    return lst.map(x\
    \ => {\n        let count = 0;\n        for (let i = 0; i < x.length; i++) {\n\
    \            if (parseInt(x[i]) % 2 == 1) {\n                count++;\n      \
    \      }\n        }\n        return count.toString();\n    });\n}\n\nconsole.log(odd_count([\"\
    123\", \"1234\", \"1235\"]));\nconsole.log(odd_count([\"1\", \"2\", \"3\", \"\
    4\", \"5\"]));\nconsole.log(odd_count([\"123\", \"1234\", \"1235\", \"1236\",\
    \ \"1237\"]));\n", "    return lst.map(x => x.split('').filter(y => parseInt(y)\
    \ % 2).length.toString());\n}\n", "  return lst.map(x => x.split('').filter(y\
    \ => parseInt(y) % 2 !== 0).length.toString());\n}\n", "  return lst.map(str =>\
    \ {\n    let count = 0;\n    for (let i = 0; i < str.length; i++) {\n      if\
    \ (parseInt(str[i]) % 2 !== 0) {\n        count++;\n      }\n    }\n    return\
    \ count.toString();\n  });\n}\n", "    return lst.map(x => x.split('').filter(y\
    \ => parseInt(y) % 2 !== 0).length.toString());\n}\n", "    return lst.map(x =>\
    \ x.split('').filter(y => parseInt(y) % 2 !== 0).length.toString());\n}\n\nconsole.log(odd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]));", "  return\
    \ lst.map(s => s.split('').filter(n => +n % 2).length);\n}\n", "  return lst.map(x\
    \ => x.split('').filter(y => parseInt(y) % 2 !== 0).length.toString());\n}\n",
  "    return lst.map(x => x.split('').filter(y => parseInt(y) % 2 !== 0).length);\n\
    }\n\nconsole.log(odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"\
    8\", \"9\", \"10\"]));\nconsole.log(odd_count([\"1\", \"2\", \"3\", \"4\", \"\
    5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"]));\nconsole.log(odd_count([\"\
    0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]));\n\
    console.log(odd_count([\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"\
    , \"8\", \"9\", \"10\", \"11\"]));\nconsole.log(odd_count([\"0\", \"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"]));\n\
    console.log(odd_count([\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"\
    , \"8\", \"9\", \"10\", \"11\", \"12\", \"13\"]));\nconsole.log(odd_count([\"\
    0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"\
    11\", \"12\", \"13\", \"14\"]));\nconsole.log(odd_count([\"0\", \"1\", \"2\",\
    \ \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"\
    13\", \"14\", \"15\"]));\nconsole.log(odd_count([\"0\", \"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"\
    , \"15\", \"16\"]));\nconsole.log(odd_count([\"0\", \"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6", "    return lst.map(x => x.split('').filter(y => parseInt(y) %\
    \ 2 === 1).length.toString());\n}\n", "    return lst.map(str => str.split('').filter(num\
    \ => num % 2 !== 0).length.toString());\n}\n\nconsole.log(odd_count([\"1234\"\
    , \"5678\", \"9012\"]));\nconsole.log(odd_count([\"1234\", \"5678\", \"9012\"\
    , \"1234\", \"5678\", \"9012\"]));\nconsole.log(odd_count([\"1234\", \"5678\"\
    , \"9012\", \"1234\", \"5678\", \"9012\", \"1234\", \"5678\", \"9012\"]));\nconsole.log(odd_count([\"\
    1234\", \"5678\", \"9012\", \"1234\", \"5678\", \"9012\", \"1234\", \"5678\",\
    \ \"9012\", \"1234\", \"5678\", \"9012\"]));\nconsole.log(odd_count([\"1234\"\
    , \"5678\", \"9012\", \"1234\", \"5678\", \"9012\", \"1234\", \"5678\", \"9012\"\
    , \"1234\", \"5678\", \"9012\", \"1234\", \"5678\", \"9012\"]));\nconsole.log(odd_count([\"\
    1234\", \"5678\", \"9012\", \"1234\", \"5678\", \"9012\", \"1234\", \"5678\",\
    \ \"9012\", \"1234\", \"5678\", \"9012\", \"1234\", \"5678\", \"9012\", \"1234\"\
    , \"5678\", \"9012\"]));\nconsole.log(odd_count([\"1234\", \"5678\", \"9012\"\
    , \"1234\", \"5678\", \"9012\", \"1234\", \"5678\", \"9012\", \"1234\", \"5678\"\
    , \"9012\", \"1234\", \"5678\", \"9012\", \"1234\", \"5678\", \"9012\", \"1234\"\
    , \"5678\", \"9012\"]));\nconsole.log(odd_count([\"1234\", \"5678\", \"9012\"\
    , \"1234\", \"5678\", \"9012\", \"1234\", \"5678\", \"9012\", \"1234\", \"5678\"\
    , \"9012\", \"1234\", \"5678\", \"9012\", \"12", "  return lst.map(str => {\n\
    \    let count = 0;\n    for (let i = 0; i < str.length; i++) {\n      if (parseInt(str[i])\
    \ % 2 === 1) {\n        count++;\n      }\n    }\n    return count.toString();\n\
    \  });\n}\n\nconsole.log(odd_count([\"123\", \"1234\", \"1235\"]));", "  return\
    \ lst.map(str => {\n    let count = 0;\n    for (let i = 0; i < str.length; i++)\
    \ {\n      if (parseInt(str[i]) % 2 !== 0) {\n        count++;\n      }\n    }\n\
    \    return count.toString();\n  });\n}\n", "    return lst.map(x => x.split('').filter(y\
    \ => parseInt(y) % 2 == 1).length.toString());\n}\n", "  return lst.map(str =>\
    \ str.split('').filter(char => char % 2 === 1).length);\n}\n", "  return lst.map(x\
    \ => x.split('').filter(y => Number(y) % 2 === 1).length);\n}\n", "  return lst.map(str\
    \ => {\n    let count = 0;\n    for (let i = 0; i < str.length; i++) {\n     \
    \ if (parseInt(str[i]) % 2 === 1) {\n        count++;\n      }\n    }\n    return\
    \ count.toString();\n  });\n}\n\nconsole.log(odd_count([\"123\", \"1234\", \"\
    1235\"]));", "    return lst.map(x => x.split('').filter(y => parseInt(y) % 2\
    \ != 0).length.toString());\n}\n", "  return lst.map(x => x.split('').filter(y\
    \ => parseInt(y) % 2).length.toString());\n}\n", "    return lst.map(x => x.split('').filter(y\
    \ => parseInt(y) % 2 !== 0).length.toString());\n}\n", "    return lst.map(x =>\
    \ x.split('').filter(y => y % 2 === 1).length.toString());\n}\n\nconsole.log(odd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]));", "  return\
    \ lst.map(e => e.split('').filter(e => Number(e) % 2 !== 0).length.toString());\n\
    }\n", "  return lst.map(s => s.split('').filter(c => c % 2 !== 0).length.toString());\n\
    }\n", "    return lst.map(x => (x.split('').filter(y => parseInt(y) % 2 !== 0).length).toString());\n\
    }\n", "    return lst.map(x => x.split('').filter(y => parseInt(y) % 2 === 1).length.toString());\n\
    }\n\nconsole.log(odd_count([\"1234\", \"1235\", \"1236\"]));\nconsole.log(odd_count([\"\
    1234\", \"1235\", \"1236\"]));\nconsole.log(odd_count([\"1234\", \"1235\", \"\
    1236\"]));\nconsole.log(odd_count([\"1234\", \"1235\", \"1236\"]));\nconsole.log(odd_count([\"\
    1234\", \"1235\", \"1236\"]));\nconsole.log(odd_count([\"1234\", \"1235\", \"\
    1236\"]));\nconsole.log(odd_count([\"1234\", \"1235\", \"1236\"]));\nconsole.log(odd_count([\"\
    1234\", \"1235\", \"1236\"]));\nconsole.log(odd_count([\"1234\", \"1235\", \"\
    1236\"]));\nconsole.log(odd_count([\"1234\", \"1235\", \"1236\"]));\nconsole.log(odd_count([\"\
    1234\", \"1235\", \"1236\"]));\nconsole.log(odd_count([\"1234\", \"1235\", \"\
    1236\"]));\nconsole.log(odd_count([\"1234\", \"1235\", \"1236\"]));\nconsole.log(odd_count([\"\
    1234\", \"1235\", \"1236\"]));\nconsole.log(odd_count([\"1234\", \"1235\", \"\
    1236\"]));\nconsole.log(odd_count([\"1234\", \"1235\", \"1236\"]));\nconsole.log(odd_count([\"\
    1234\", \"1235\", \"1236\"]));\nconsole.log(odd_count([\"1234\", \"1235\", \"\
    1236\"]));\nconsole.log(odd_count([\"1234\", \"1235\", \"1236\"]));\nconsole.log(odd_count([\"\
    1234\", \"1235\", \"1236\"]));\nconsole.log(odd_count([\"1234\", \"1235\", \"\
    1236\"]));\nconsole.log(odd_count([\"1234", "    return lst.map(x => x.split('').filter(y\
    \ => parseInt(y) % 2 == 1).length.toString());\n}\n", "  return lst.map(x => x.split('').filter(y\
    \ => y % 2 === 1).length);\n}\n", "    let result: string[] = [];\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        let count = 0;\n        for (let j =\
    \ 0; j < lst[i].length; j++) {\n            if (parseInt(lst[i][j]) % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n        result.push(count.toString());\n\
    \    }\n    return result;\n}\n", "  return lst.map(x => x.split('').filter(y\
    \ => parseInt(y) % 2 === 1).length);\n}\n", "  return lst.map(str => str.split('').filter(num\
    \ => num % 2 !== 0).length.toString());\n}\n\nconsole.log(odd_count([\"1\", \"\
    2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]));", "    let result:\
    \ string[] = [];\n    for (let i = 0; i < lst.length; i++) {\n        let count\
    \ = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (parseInt(lst[i][j])\
    \ % 2 === 1) {\n                count++;\n            }\n        }\n        result.push(count.toString());\n\
    \    }\n    return result;\n}\n\nconsole.log(odd_count([\"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]));", "  return lst.map(s => s.split('').filter(c\
    \ => parseInt(c) % 2 === 1).length.toString());\n}\n", "  return lst.map(str =>\
    \ {\n    let count = 0;\n    for (let i = 0; i < str.length; i++) {\n      if\
    \ (parseInt(str[i]) % 2 !== 0) {\n        count++;\n      }\n    }\n    return\
    \ count.toString();\n  });\n}\n\nconsole.log(odd_count([\"123\", \"1234\", \"\
    1235\", \"1236\"]));", "  return lst.map(e => e.split('').filter(e => Number(e)\
    \ % 2 !== 0).length);\n}\n", "  return lst.map(str => {\n    let count = 0;\n\
    \    for (let i = 0; i < str.length; i++) {\n      if (Number(str[i]) % 2 ===\
    \ 1) {\n        count++;\n      }\n    }\n    return count.toString();\n  });\n\
    }\n", "  return lst.map(x => x.split('').filter(y => parseInt(y) % 2 === 1).length);\n\
    }\n", "  return lst.map(x => x.split('').filter(y => +y % 2 === 1).length);\n\
    }\n", "    return lst.map(x => x.split('').filter(y => parseInt(y) % 2 !== 0).length.toString());\n\
    }\n", "  return lst.map(x => x.split('').filter(y => parseInt(y) % 2).length.toString());\n\
    }\n", "    return lst.map(s => s.split('').filter(c => parseInt(c) % 2 == 1).length.toString());\n\
    }\n", "    return lst.map(x => x.split('').filter(y => y % 2 !== 0).length.toString());\n\
    }\n\nconsole.log(odd_count([\"12\", \"34\", \"56\", \"78\"]));\n", "  return lst.map(x\
    \ => x.split('').filter(y => y % 2 !== 0).length);\n}\n\nconsole.log(odd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]));", "  return\
    \ lst.map(x => x.split('').filter(y => parseInt(y) % 2).length);\n}\n", "  return\
    \ lst.map(s => s.split('').filter(c => parseInt(c) % 2 === 1).length);\n}\n",
  "    return lst.map(str => str.split('').filter(char => Number(char) % 2 !== 0).length.toString());\n\
    }\n", "    return lst.map(x => x.split('').filter(y => y % 2 == 1).length);\n\
    }\n", "    return lst.map(x => x.split('').filter(y => parseInt(y) % 2 === 1).length.toString());\n\
    }\n", "    return lst.map(x => x.split('').filter(y => y % 2 == 1).length.toString());\n\
    }\n", "  return lst.map(x => x.split('').filter(y => y % 2).length);\n}\n", " \
    \ return lst.map(str => {\n    let count = 0;\n    for (let i = 0; i < str.length;\
    \ i++) {\n      if (parseInt(str[i]) % 2 !== 0) {\n        count++;\n      }\n\
    \    }\n    return count.toString();\n  });\n}\n\nconsole.log(odd_count([\"01\"\
    , \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\"]));",
  "  return lst.map(s => s.split('').filter(c => c % 2).length);\n}\n", "  return\
    \ lst.map(x => x.split('').filter(y => y % 2 !== 0).length);\n}\n\nconsole.log(odd_count([\"\
    12\", \"13\", \"14\"]));", "    return lst.map(x => x.split('').filter(y => y\
    \ % 2 != 0).length.toString());\n}\n", "  return lst.map(str => {\n    let count\
    \ = 0;\n    for (let i = 0; i < str.length; i++) {\n      if (parseInt(str[i])\
    \ % 2 !== 0) {\n        count++;\n      }\n    }\n    return count.toString();\n\
    \  });\n}\n\nconsole.log(odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\",\
    \ \"7\", \"8\", \"9\", \"10\"]));", "  return lst.map(x => x.split('').filter(y\
    \ => y % 2 !== 0).length);\n}\n", "  return lst.map(str => {\n    return str.split('').filter(char\
    \ => {\n      return Number(char) % 2 !== 0;\n    }).length;\n  });\n}\n\nconsole.log(odd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]));", "  \
    \  return lst.map(x => x.split('').filter(y => parseInt(y) % 2 !== 0).length.toString());\n\
    }\n\nconsole.log(odd_count([\"123\", \"1234\", \"1235\"]));\n", "    return lst.map(s\
    \ => s.split('').filter(c => parseInt(c) % 2).length);\n}\n", "    return lst.map(str\
    \ => str.split('').filter(char => parseInt(char) % 2 !== 0).length.toString());\n\
    }\n\nconsole.log(odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"\
    8\", \"9\", \"10\"]));", "    return lst.map(str => str.split('').filter(digit\
    \ => digit % 2 === 1).length);\n}\n", "    return lst.map(x => x.split('').filter(y\
    \ => y % 2 !== 0).length.toString());\n}\n", "  return lst.map(x => x.split('').filter(y\
    \ => y % 2 === 1).length);\n}\n", "  return lst.map(x => x.split('').filter(y\
    \ => y % 2 !== 0).length);\n}\n", "    return lst.map(s => s.split('').filter(c\
    \ => parseInt(c) % 2 === 1).length.toString());\n}\n", "    let res: string[]\
    \ = [];\n    for (let i = 0; i < lst.length; i++) {\n        let count = 0;\n\
    \        for (let j = 0; j < lst[i].length; j++) {\n            if (parseInt(lst[i][j])\
    \ % 2 == 1) {\n                count++;\n            }\n        }\n        res.push(count.toString());\n\
    \    }\n    return res;\n}\n", "  return lst.map(x => x.split('').filter(y =>\
    \ y % 2).length);\n}\n", "  return lst.map(x => x.split('').filter(y => Number(y)\
    \ % 2 === 1).length);\n}\n", "    return lst.map(str => str.split('').filter(char\
    \ => parseInt(char) % 2 !== 0).length.toString());\n}\n", "    return lst.map(x\
    \ => x.split('').filter(y => parseInt(y) % 2 === 1).length.toString());\n}\n",
  "  return lst.map(x => x.split('').filter(y => y % 2 !== 0).length.toString());\n\
    }\n\nconsole.log(odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"\
    8\", \"9\", \"10\"]));", "  return lst.map(s => s.split('').filter(c => parseInt(c)\
    \ % 2 === 1).length);\n}\n", "  return lst.map(s => s.split('').filter(c => parseInt(c)\
    \ % 2 === 1).length);\n}\n", "  return lst.map(x => x.split('').filter(y => parseInt(y)\
    \ % 2).length.toString());\n}\n", "  return lst.map(x => x.split('').filter(y\
    \ => y % 2 !== 0).length.toString());\n}\n\nconsole.log(odd_count([\"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]));", "  return lst.map(str\
    \ => str.split('').filter(num => num % 2 !== 0).length);\n}\n", "    return lst.map(x\
    \ => x.split('').filter(y => y % 2 !== 0).length.toString());\n}\n", "  return\
    \ lst.map(str => str.split('').filter(char => Number(char) % 2).length);\n}\n",
  "    return lst.map(x => x.split('').filter(y => parseInt(y) % 2 != 0).length);\n\
    }\n", "  return lst.map(x => x.split('').filter(y => y % 2 !== 0).length.toString());\n\
    }\n\nconsole.log(odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"\
    8\", \"9\", \"10\"]));", "    return lst.map(str => str.split('').filter(num =>\
    \ num % 2 !== 0).length.toString());\n}\n", "  return lst.map(x => x.split('').filter(y\
    \ => y % 2).length);\n}\n", "    return lst.map(x => x.split('').filter(y => parseInt(y)\
    \ % 2 === 1).length.toString());\n}\n", "  return lst.map(str => str.split('').filter(char\
    \ => char % 2 !== 0).length);\n}\n\nconsole.log(odd_count([\"1234\", \"1235\"\
    , \"1236\"]));\n", "    return lst.map(str => str.split('').filter(char => parseInt(char)\
    \ % 2 === 1).length.toString());\n}\n\nconsole.log(odd_count([\"1\", \"2\", \"\
    3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]));\nconsole.log(odd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"]));\n\
    console.log(odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"\
    , \"9\", \"10\", \"11\", \"12\"]));\nconsole.log(odd_count([\"1\", \"2\", \"3\"\
    , \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\"]));\n\
    console.log(odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"\
    , \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"]));\nconsole.log(odd_count([\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\"]));\nconsole.log(odd_count([\"1\", \"2\", \"3\",\
    \ \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"\
    14\", \"15\", \"16\"]));\nconsole.log(odd_count([\"1\", \"2\", \"3\", \"4\", \"\
    5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\"\
    , \"16\", \"17\"]));\nconsole.log(odd_count([\"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\",\
    \ \"16\", \"17\", \"18\"]));\nconsole.log(odd", "  return lst.map(str => {\n \
    \   let count = 0;\n    for (let i = 0; i < str.length; i++) {\n      if (parseInt(str[i])\
    \ % 2 !== 0) {\n        count++;\n      }\n    }\n    return count.toString();\n\
    \  });\n}\n\nconsole.log(odd_count([\"123\", \"1234\", \"1235\"]));", "  return\
    \ lst.map(x => x.split('').filter(y => y % 2 != 0).length.toString());\n}\n",
  "  let result: string[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    let\
    \ count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (parseInt(lst[i][j])\
    \ % 2 !== 0) {\n        count++;\n      }\n    }\n    result.push(count.toString());\n\
    \  }\n  return result;\n}\n", "    return lst.map(x => x.split('').filter(y =>\
    \ parseInt(y) % 2 === 1).length.toString());\n}\n", "    let result: string[]\
    \ = [];\n    for (let i = 0; i < lst.length; i++) {\n        let count = 0;\n\
    \        for (let j = 0; j < lst[i].length; j++) {\n            if (parseInt(lst[i][j])\
    \ % 2 != 0) {\n                count++;\n            }\n        }\n        result.push(count.toString());\n\
    \    }\n    return result;\n}\n", "    return lst.map(x => x.split('').filter(y\
    \ => y % 2 !== 0).length.toString());\n}\n\nconsole.log(odd_count([\"12\", \"\
    34\", \"56\", \"78\"]));\nconsole.log(odd_count([\"12\", \"34\", \"56\", \"78\"\
    ]));\nconsole.log(odd_count([\"12\", \"34\", \"56\", \"78\"]));\nconsole.log(odd_count([\"\
    12\", \"34\", \"56\", \"78\"]));\nconsole.log(odd_count([\"12\", \"34\", \"56\"\
    , \"78\"]));\nconsole.log(odd_count([\"12\", \"34\", \"56\", \"78\"]));\nconsole.log(odd_count([\"\
    12\", \"34\", \"56\", \"78\"]));\nconsole.log(odd_count([\"12\", \"34\", \"56\"\
    , \"78\"]));\nconsole.log(odd_count([\"12\", \"34\", \"56\", \"78\"]));\nconsole.log(odd_count([\"\
    12\", \"34\", \"56\", \"78\"]));\nconsole.log(odd_count([\"12\", \"34\", \"56\"\
    , \"78\"]));\nconsole.log(odd_count([\"12\", \"34\", \"56\", \"78\"]));\nconsole.log(odd_count([\"\
    12\", \"34\", \"56\", \"78\"]));\nconsole.log(odd_count([\"12\", \"34\", \"56\"\
    , \"78\"]));\nconsole.log(odd_count([\"12\", \"34\", \"56\", \"78\"]));\nconsole.log(odd_count([\"\
    12\", \"34\", \"56\", \"78\"]));\nconsole.log(odd_count([\"12\", \"34\", \"56\"\
    , \"78\"]));\nconsole.log(odd_count([\"12\", \"34\", \"56\", \"78\"]));\nconsole.log(odd_count([\"\
    12\", \"34\", \"56\", \"78\"]));\nconsole.log(odd_count([\"12\", \"34\", \"56\"\
    , \"78\"]));\nconsole.log(odd_count([\"12\", \"34\", \"56\", \"78\"]));\nconsole.log(odd_count([\"\
    12\", \"34\",", "  return lst.map(x => x.split('').filter(y => y % 2 !== 0).length.toString());\n\
    }\n\nconsole.log(odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"\
    8\", \"9\", \"10\"]));", "  return lst.map(x => x.split('').filter(y => y % 2\
    \ !== 0).length.toString());\n}\n\nconsole.log(odd_count([\"1\", \"2\", \"3\"\
    , \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]));", "  return lst.map(str\
    \ => {\n    return str.split('').filter(char => parseInt(char) % 2 !== 0).length;\n\
    \  });\n}\n\nconsole.log(odd_count([\"123\", \"1234\", \"1235\"]));\n", "  return\
    \ lst.map(str => str.split('').filter(char => parseInt(char) % 2 !== 0).length.toString());\n\
    }\n", "  return lst.map(str => str.split('').filter(num => num % 2 !== 0).length);\n\
    }\n\nconsole.log(odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"\
    8\", \"9\", \"10\"]));", "  return lst.map(str => str.split('').filter(char =>\
    \ Number(char) % 2 === 1).length);\n}\n", "  return lst.map(x => x.split('').filter(y\
    \ => +y % 2).length);\n}\n", "    return lst.map(s => s.split('').filter(c =>\
    \ parseInt(c) % 2 == 1).length.toString());\n}\n", "  return lst.map(x => x.split('').filter(y\
    \ => y % 2 !== 0).length.toString());\n}\n", "  return lst.map(x => x.split('').filter(y\
    \ => y % 2 !== 0).length);\n}\n\nconsole.log(odd_count([\"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]));", "    return lst.map(x =>\
    \ x.split('').filter(y => +y % 2).length.toString());\n}\n", "  return lst.map(str\
    \ => str.split('').filter(char => parseInt(char) % 2 !== 0).length.toString());\n\
    }\n", "  return lst.map(x => x.split('').filter(y => parseInt(y) % 2 !== 0).length.toString());\n\
    }\n\nconsole.log(odd_count([\"12\", \"01\", \"02\"])); // [\"1\", \"1\", \"1\"\
    ]\nconsole.log(odd_count([\"123\", \"12\", \"1234\"])); // [\"2\", \"1\", \"2\"\
    ]\nconsole.log(odd_count([\"123\", \"12\", \"1234\", \"12345\"])); // [\"2\",\
    \ \"1\", \"2\", \"3\"]\nconsole.log(odd_count([\"123\", \"12\", \"1234\", \"12345\"\
    , \"123456\"])); // [\"2\", \"1\", \"2\", \"3\", \"4\"]\nconsole.log(odd_count([\"\
    123\", \"12\", \"1234\", \"12345\", \"123456\", \"1234567\"])); // [\"2\", \"\
    1\", \"2\", \"3\", \"4\", \"5\"]\nconsole.log(odd_count([\"123\", \"12\", \"1234\"\
    , \"12345\", \"123456\", \"1234567\", \"12345678\"])); // [\"2\", \"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\"]\nconsole.log(odd_count([\"123\", \"12\", \"1234\"\
    , \"12345\", \"123456\", \"1234567\", \"12345678\", \"123456789\"])); // [\"2\"\
    , \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]\nconsole.log(odd_count([\"\
    123\", \"12\", \"1234\", \"12345\", \"123456\", \"1234567\", \"12345678\", \"\
    123456789\", \"1234567890\"])); // [\"2\", \"1\", \"2\", \"3\", \"4\", \"5\",\
    \ \"6\", \"7\", \"8\"]\nconsole.log(odd_count([\"123\", \"12\", \"1234\", \"12345\"\
    , \"123456\", \"1234567\", \"12345678\", \"123456789\", \"1234567890\", \"12345678901\"\
    ])); // [\"2\", \"1\", \"2\", \"3\", \"4\", \"", "    return lst.map(x => x.split('').filter(y\
    \ => parseInt(y) % 2 !== 0).length.toString());\n}\n\nconsole.log(odd_count([\"\
    12\", \"13\", \"14\"]));\nconsole.log(odd_count([\"123\", \"123\", \"123\"]));\n\
    console.log(odd_count([\"123\", \"123\", \"123\", \"123\"]));\nconsole.log(odd_count([\"\
    123\", \"123\", \"123\", \"123\", \"123\"]));\nconsole.log(odd_count([\"123\"\
    , \"123\", \"123\", \"123\", \"123\", \"123\"]));\nconsole.log(odd_count([\"123\"\
    , \"123\", \"123\", \"123\", \"123\", \"123\", \"123\"]));\nconsole.log(odd_count([\"\
    123\", \"123\", \"123\", \"123\", \"123\", \"123\", \"123\", \"123\"]));\nconsole.log(odd_count([\"\
    123\", \"123\", \"123\", \"123\", \"123\", \"123\", \"123\", \"123\", \"123\"\
    ]));\nconsole.log(odd_count([\"123\", \"123\", \"123\", \"123\", \"123\", \"123\"\
    , \"123\", \"123\", \"123\", \"123\"]));\nconsole.log(odd_count([\"123\", \"123\"\
    , \"123\", \"123\", \"123\", \"123\", \"123\", \"123\", \"123\", \"123\", \"123\"\
    ]));\nconsole.log(odd_count([\"123\", \"123\", \"123\", \"123\", \"123\", \"123\"\
    , \"123\", \"123\", \"123\", \"123\", \"123\", \"123\"]));\nconsole.log(odd_count([\"\
    123\", \"123\", \"123\", \"123\", \"123\", \"123\", \"123\", \"123\", \"123\"\
    , \"123\", \"123\", \"123\", \"123\"]));\nconsole.log(odd_count([\"123\", \"123\"\
    , \"123\", \"123\", \"123\", \"123\", \"123\", \"123\", \"123\", \"123\", \"123\"\
    , \"123\", \"123\", \"123\"]));\nconsole.log(odd_count([\"123\", \"123\", \"123\"\
    , \"123\", \"123\", \"123\", \"", "  return lst.map(s => s.split('').filter(c\
    \ => c % 2).length.toString());\n}\n", "    return lst.map(e => e.split('').filter(e\
    \ => parseInt(e) % 2 === 1).length.toString());\n}\n", "  return lst.map(x =>\
    \ x.split('').filter(y => y % 2 !== 0).length.toString());\n}\n\nconsole.log(odd_count([\"\
    123\", \"1234\", \"1235\"]));", "  return lst.map(str => str.split('').filter(char\
    \ => char % 2 !== 0).length.toString());\n}\n\nconsole.log(odd_count([\"123\"\
    , \"12345\", \"1234567\"]));", "  return lst.map(str => str.split('').filter(char\
    \ => char % 2 === 1).length);\n}\n\nconsole.log(odd_count([\"1\", \"2\", \"3\"\
    , \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]));", "  return lst.map(x =>\
    \ x.split('').filter(y => parseInt(y) % 2 !== 0).length.toString());\n}\n", " \
    \ return lst.map(x => x.split('').filter(y => parseInt(y) % 2 !== 0).length);\n\
    }\n", "  return lst.map(s => s.split('').filter(c => parseInt(c) % 2 === 1).length.toString());\n\
    }\n", "    let result: string[] = [];\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        let count = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n\
    \            if (lst[i][j] % 2 !== 0) {\n                count++;\n          \
    \  }\n        }\n        result.push(count.toString());\n    }\n    return result;\n\
    }\n\nconsole.log(odd_count([\"123\", \"12345\", \"1234567\"]));\nconsole.log(odd_count([\"\
    123\", \"12345\", \"1234567\", \"123456789\"]));\nconsole.log(odd_count([\"123\"\
    , \"12345\", \"1234567\", \"123456789\", \"12345678910\"]));\nconsole.log(odd_count([\"\
    123\", \"12345\", \"1234567\", \"123456789\", \"12345678910\", \"1234567891011\"\
    ]));\nconsole.log(odd_count([\"123\", \"12345\", \"1234567\", \"123456789\", \"\
    12345678910\", \"1234567891011\", \"123456789101112\"]));\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
