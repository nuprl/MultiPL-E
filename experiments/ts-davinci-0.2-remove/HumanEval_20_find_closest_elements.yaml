name: HumanEval_20_find_closest_elements
language: ts
prompt: "//From a supplied list of numbers (of length at least two) select and return\
  \ two that are the closest to each\n// other and return them in order (smaller number,\
  \ larger number).\nfunction find_closest_elements(numbers: number[]): [number, number]\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0,\
  \ 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0,\
  \ 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0,\
  \ 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
  \ 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2,\
  \ 3.1]);\n}\n\ntest();"
completions: ["    let min = Number.MAX_VALUE;\n    let min_pair: [number, number]\
    \ = [0, 0];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
    \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min) {\n                min = diff;\n\
    \                min_pair = [numbers[i], numbers[j]];\n            }\n       \
    \ }\n    }\n    return min_pair;\n}\n", "    let min = Math.abs(numbers[0] - numbers[1]);\n\
    \    let min_pair = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ let diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < min) {\n\
    \                min = diff;\n                min_pair = [numbers[i], numbers[j]];\n\
    \            }\n        }\n    }\n    return min_pair;\n}\n", "    let min = Number.MAX_VALUE;\n\
    \    let result: [number, number] = [0, 0];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < min) {\n                min = Math.abs(numbers[i]\
    \ - numbers[j]);\n                result = [numbers[i], numbers[j]];\n       \
    \     }\n        }\n    }\n    return result;\n}\n", "  let closest = [numbers[0],\
    \ numbers[1]];\n  let closest_diff = Math.abs(numbers[0] - numbers[1]);\n  for\
    \ (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length;\
    \ j++) {\n      const diff = Math.abs(numbers[i] - numbers[j]);\n      if (diff\
    \ < closest_diff) {\n        closest = [numbers[i], numbers[j]];\n        closest_diff\
    \ = diff;\n      }\n    }\n  }\n  return closest;\n}\n", "    let min = Number.MAX_VALUE;\n\
    \    let result: [number, number] = [0, 0];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < min) {\n                min = Math.abs(numbers[i]\
    \ - numbers[j]);\n                result = [numbers[i], numbers[j]];\n       \
    \     }\n        }\n    }\n    return result;\n}\n", "    let min = Number.MAX_VALUE;\n\
    \    let result: [number, number] = [0, 0];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < min) {\n                min = Math.abs(numbers[i]\
    \ - numbers[j]);\n                result = [numbers[i], numbers[j]];\n       \
    \     }\n        }\n    }\n    return result;\n}\n", "    let closest_pair: [number,\
    \ number] = [numbers[0], numbers[1]];\n    let closest_distance = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for\
    \ (let j = i + 1; j < numbers.length; j++) {\n            let distance = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (distance < closest_distance) {\n           \
    \     closest_distance = distance;\n                closest_pair = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n}\n",
  "    let min = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
    \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
    \ j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] -\
    \ numbers[j]) < min) {\n                min = Math.abs(numbers[i] - numbers[j]);\n\
    \                min_pair = [numbers[i], numbers[j]];\n            }\n       \
    \ }\n    }\n    return min_pair;\n}\n", "    let min = numbers[0] - numbers[1];\n\
    \    let min_index = 0;\n    for (let i = 0; i < numbers.length - 1; i++) {\n\
    \        if (Math.abs(numbers[i] - numbers[i + 1]) < min) {\n            min =\
    \ Math.abs(numbers[i] - numbers[i + 1]);\n            min_index = i;\n       \
    \ }\n    }\n    return [numbers[min_index], numbers[min_index + 1]];\n}\n", " \
    \   let closest: [number, number] = [numbers[0], numbers[1]];\n    let closest_difference\
    \ = Math.abs(closest[0] - closest[1]);\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ let difference = Math.abs(numbers[i] - numbers[j]);\n            if (difference\
    \ < closest_difference) {\n                closest = [numbers[i], numbers[j]];\n\
    \                closest_difference = difference;\n            }\n        }\n\
    \    }\n    return closest;\n}\n", "    let min = Math.abs(numbers[0] - numbers[1]);\n\
    \    let min_pair = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < min) {\n                min = Math.abs(numbers[i]\
    \ - numbers[j]);\n                min_pair = [numbers[i], numbers[j]];\n     \
    \       }\n        }\n    }\n    return min_pair;\n}\n", "    let min = Number.MAX_VALUE;\n\
    \    let min_pair: [number, number] = [0, 0];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ let diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < min) {\n\
    \                min = diff;\n                min_pair = [numbers[i], numbers[j]];\n\
    \            }\n        }\n    }\n    return min_pair;\n}\n", "    let closest:\
    \ [number, number] = [numbers[0], numbers[1]];\n    let smallestDifference = Math.abs(closest[0]\
    \ - closest[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for\
    \ (let j = i + 1; j < numbers.length; j++) {\n            let difference = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (difference < smallestDifference) {\n       \
    \         closest = [numbers[i], numbers[j]];\n                smallestDifference\
    \ = difference;\n            }\n        }\n    }\n    return closest;\n}\n", " \
    \   let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
    \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
    \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff\
    \ = diff;\n                min_pair = [numbers[i], numbers[j]];\n            }\n\
    \        }\n    }\n    return min_pair;\n}\n", "    let min = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let min_pair = [numbers[0], numbers[1]];\n    for (let i\
    \ = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < min) {\n       \
    \         min = Math.abs(numbers[i] - numbers[j]);\n                min_pair =\
    \ [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return min_pair;\n\
    }\n", "    let closest = [numbers[0], numbers[1]];\n    let closest_distance =\
    \ Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ let distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance\
    \ < closest_distance) {\n                closest = [numbers[i], numbers[j]];\n\
    \                closest_distance = distance;\n            }\n        }\n    }\n\
    \    return closest;\n}\n", "    let minDiff = Math.abs(numbers[0] - numbers[1]);\n\
    \    let minPair = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ let diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < minDiff)\
    \ {\n                minDiff = diff;\n                minPair = [numbers[i], numbers[j]];\n\
    \            }\n        }\n    }\n    return minPair;\n}\n", "    let min = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let min_index = [0, 1];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < min) {\n                min = Math.abs(numbers[i]\
    \ - numbers[j]);\n                min_index = [i, j];\n            }\n       \
    \ }\n    }\n    return [numbers[min_index[0]], numbers[min_index[1]]];\n}\n",
  "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
    \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
    \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff\
    \ = diff;\n                min_pair = [numbers[i], numbers[j]];\n            }\n\
    \        }\n    }\n    return min_pair;\n}\n", "    let min = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let result = [numbers[0], numbers[1]];\n    for (let i =\
    \ 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < min) {\n       \
    \         min = Math.abs(numbers[i] - numbers[j]);\n                result = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return result;\n}\n", " \
    \   let min = Math.abs(numbers[0] - numbers[1]);\n    let closest = [numbers[0],\
    \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
    \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min) {\n                min = diff;\n\
    \                closest = [numbers[i], numbers[j]];\n            }\n        }\n\
    \    }\n    return closest;\n}\n", "    let min = numbers[0] + numbers[1];\n \
    \   let min_pair = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] + numbers[j]) < min) {\n                min = Math.abs(numbers[i]\
    \ + numbers[j]);\n                min_pair = [numbers[i], numbers[j]];\n     \
    \       }\n        }\n    }\n    return min_pair;\n}\n", "    let closest = [numbers[0],\
    \ numbers[1]];\n    let closest_diff = Math.abs(numbers[0] - numbers[1]);\n  \
    \  for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j <\
    \ numbers.length; j++) {\n            let diff = Math.abs(numbers[i] - numbers[j]);\n\
    \            if (diff < closest_diff) {\n                closest = [numbers[i],\
    \ numbers[j]];\n                closest_diff = diff;\n            }\n        }\n\
    \    }\n    return closest;\n}\n", "    let closest: [number, number] = [numbers[0],\
    \ numbers[1]];\n    let closest_distance = Math.abs(numbers[0] - numbers[1]);\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j\
    \ < numbers.length; j++) {\n            let distance = Math.abs(numbers[i] - numbers[j]);\n\
    \            if (distance < closest_distance) {\n                closest = [numbers[i],\
    \ numbers[j]];\n                closest_distance = distance;\n            }\n\
    \        }\n    }\n    return closest;\n}\n", "    let min = Number.MAX_VALUE;\n\
    \    let min_pair: [number, number] = [0, 0];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ let diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < min) {\n\
    \                min = diff;\n                min_pair = [numbers[i], numbers[j]];\n\
    \            }\n        }\n    }\n    return min_pair;\n}\n", "    let min_diff\
    \ = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0], numbers[1]];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j\
    \ < numbers.length; j++) {\n            let diff = Math.abs(numbers[i] - numbers[j]);\n\
    \            if (diff < min_diff) {\n                min_diff = diff;\n      \
    \          min_pair = [numbers[i], numbers[j]];\n            }\n        }\n  \
    \  }\n    return min_pair;\n}\n", "    let closest_pair: [number, number] = [numbers[0],\
    \ numbers[1]];\n    let closest_distance = Math.abs(numbers[0] - numbers[1]);\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j\
    \ < numbers.length; j++) {\n            let distance = Math.abs(numbers[i] - numbers[j]);\n\
    \            if (distance < closest_distance) {\n                closest_distance\
    \ = distance;\n                closest_pair = [numbers[i], numbers[j]];\n    \
    \        }\n        }\n    }\n    return closest_pair;\n}\n", "    let min = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let result = [numbers[0], numbers[1]];\n    for (let i =\
    \ 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < min) {\n       \
    \         min = Math.abs(numbers[i] - numbers[j]);\n                result = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return result;\n}\n", " \
    \   let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
    \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
    \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff\
    \ = diff;\n                min_pair = [numbers[i], numbers[j]];\n            }\n\
    \        }\n    }\n    return min_pair;\n}\n", "    let closest = [numbers[0],\
    \ numbers[1]];\n    let distance = Math.abs(numbers[0] - numbers[1]);\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            let newDistance = Math.abs(numbers[i] - numbers[j]);\n \
    \           if (newDistance < distance) {\n                distance = newDistance;\n\
    \                closest = [numbers[i], numbers[j]];\n            }\n        }\n\
    \    }\n    return closest;\n}\n", "    let min = Math.abs(numbers[0] - numbers[1]);\n\
    \    let min_pair = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < min) {\n                min = Math.abs(numbers[i]\
    \ - numbers[j]);\n                min_pair = [numbers[i], numbers[j]];\n     \
    \       }\n        }\n    }\n    return min_pair;\n}\n", "    let closest_pair:\
    \ [number, number] = [numbers[0], numbers[1]];\n    let closest_distance = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for\
    \ (let j = i + 1; j < numbers.length; j++) {\n            let distance = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (distance < closest_distance) {\n           \
    \     closest_distance = distance;\n                closest_pair = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n}\n",
  "    let min = Number.MAX_VALUE;\n    let result: [number, number] = [0, 0];\n \
    \   for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j\
    \ < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
    \ < min) {\n                min = Math.abs(numbers[i] - numbers[j]);\n       \
    \         result = [numbers[i], numbers[j]];\n            }\n        }\n    }\n\
    \    return result;\n}\n", "    let closest = [numbers[0], numbers[1]];\n    let\
    \ closestDistance = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i\
    \ < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++)\
    \ {\n            const distance = Math.abs(numbers[i] - numbers[j]);\n       \
    \     if (distance < closestDistance) {\n                closestDistance = distance;\n\
    \                closest = [numbers[i], numbers[j]];\n            }\n        }\n\
    \    }\n    return closest;\n}\n", "    let min = Number.MAX_VALUE;\n    let min_pair:\
    \ [number, number] = [0, 0];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        for (let j = i + 1; j < numbers.length; j++) {\n            let diff\
    \ = Math.abs(numbers[i] - numbers[j]);\n            if (diff < min) {\n      \
    \          min = diff;\n                min_pair = [numbers[i], numbers[j]];\n\
    \            }\n        }\n    }\n    return min_pair;\n}\n", "    let minDiff\
    \ = Math.abs(numbers[0] - numbers[1]);\n    let minPair = [numbers[0], numbers[1]];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j\
    \ < numbers.length; j++) {\n            let diff = Math.abs(numbers[i] - numbers[j]);\n\
    \            if (diff < minDiff) {\n                minDiff = diff;\n        \
    \        minPair = [numbers[i], numbers[j]];\n            }\n        }\n    }\n\
    \    return minPair;\n}\n", "    let min = Math.abs(numbers[0] - numbers[1]);\n\
    \    let min_index = [0, 1];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        for (let j = i + 1; j < numbers.length; j++) {\n            let diff\
    \ = Math.abs(numbers[i] - numbers[j]);\n            if (diff < min) {\n      \
    \          min = diff;\n                min_index = [i, j];\n            }\n \
    \       }\n    }\n    return [numbers[min_index[0]], numbers[min_index[1]]];\n\
    }\n", "    let minDiff = Number.MAX_VALUE;\n    let minDiffPair: [number, number]\
    \ = [0, 0];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
    \ j = i + 1; j < numbers.length; j++) {\n            const diff = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < minDiff) {\n                minDiff =\
    \ diff;\n                minDiffPair = [numbers[i], numbers[j]];\n           \
    \ }\n        }\n    }\n    return minDiffPair;\n}\n", "    let min = Number.MAX_VALUE;\n\
    \    let min_pair: [number, number] = [0, 0];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ let diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < min) {\n\
    \                min = diff;\n                min_pair = [numbers[i], numbers[j]];\n\
    \            }\n        }\n    }\n    return min_pair;\n}\n", "    let min = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let result = [numbers[0], numbers[1]];\n    for (let i =\
    \ 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < min) {\n       \
    \         min = Math.abs(numbers[i] - numbers[j]);\n                result = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return result;\n}\n", " \
    \   let closest = [numbers[0], numbers[1]];\n    let closestDistance = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for\
    \ (let j = i + 1; j < numbers.length; j++) {\n            let distance = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (distance < closestDistance) {\n            \
    \    closestDistance = distance;\n                closest = [numbers[i], numbers[j]];\n\
    \            }\n        }\n    }\n    return closest;\n}\n", "    let min = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let min_numbers = [numbers[0], numbers[1]];\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < min) {\n       \
    \         min = Math.abs(numbers[i] - numbers[j]);\n                min_numbers\
    \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return min_numbers;\n\
    }\n", "    let closest_pair: [number, number] = [numbers[0], numbers[1]];\n  \
    \  let closest_distance = Math.abs(numbers[0] - numbers[1]);\n    for (let i =\
    \ 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            let distance = Math.abs(numbers[i] - numbers[j]);\n    \
    \        if (distance < closest_distance) {\n                closest_distance\
    \ = distance;\n                closest_pair = [numbers[i], numbers[j]];\n    \
    \        }\n        }\n    }\n    return closest_pair;\n}\n", "    let closest\
    \ = [numbers[0], numbers[1]];\n    let closestDistance = Math.abs(numbers[0] -\
    \ numbers[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
    \ j = i + 1; j < numbers.length; j++) {\n            const distance = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (distance < closestDistance) {\n            \
    \    closestDistance = distance;\n                closest = [numbers[i], numbers[j]];\n\
    \            }\n        }\n    }\n    return closest;\n}\n", "    let closest_elements:\
    \ [number, number] = [numbers[0], numbers[1]];\n    let closest_distance: number\
    \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ let distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance\
    \ < closest_distance) {\n                closest_elements = [numbers[i], numbers[j]];\n\
    \                closest_distance = distance;\n            }\n        }\n    }\n\
    \    return closest_elements;\n}\n", "    if (numbers.length < 2) {\n        throw\
    \ new Error(\"The list must contain at least two numbers\");\n    }\n\n    let\
    \ minDiff = Math.abs(numbers[0] - numbers[1]);\n    let minDiffIndex = 0;\n\n\
    \    for (let i = 1; i < numbers.length - 1; i++) {\n        const diff = Math.abs(numbers[i]\
    \ - numbers[i + 1]);\n        if (diff < minDiff) {\n            minDiff = diff;\n\
    \            minDiffIndex = i;\n        }\n    }\n\n    return [numbers[minDiffIndex],\
    \ numbers[minDiffIndex + 1]];\n}\n", "    let closest: [number, number] = [numbers[0],\
    \ numbers[1]];\n    let closest_distance = Math.abs(closest[0] - closest[1]);\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j\
    \ < numbers.length; j++) {\n            let distance = Math.abs(numbers[i] - numbers[j]);\n\
    \            if (distance < closest_distance) {\n                closest = [numbers[i],\
    \ numbers[j]];\n                closest_distance = distance;\n            }\n\
    \        }\n    }\n    return closest;\n}\n", "    let min_diff = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let min_diff_pair = [numbers[0], numbers[1]];\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < min_diff) {\n  \
    \              min_diff = Math.abs(numbers[i] - numbers[j]);\n               \
    \ min_diff_pair = [numbers[i], numbers[j]];\n            }\n        }\n    }\n\
    \    return min_diff_pair;\n}\n", "    let minDiff = Math.abs(numbers[0] - numbers[1]);\n\
    \    let minPair = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ let diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < minDiff)\
    \ {\n                minDiff = diff;\n                minPair = [numbers[i], numbers[j]];\n\
    \            }\n        }\n    }\n    return minPair;\n}\n", "    let min = Number.MAX_VALUE;\n\
    \    let result: [number, number] = [0, 0];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < min) {\n                min = Math.abs(numbers[i]\
    \ - numbers[j]);\n                result = [numbers[i], numbers[j]];\n       \
    \     }\n        }\n    }\n    return result;\n}\n", "    let min = Number.MAX_VALUE;\n\
    \    let min_pair: [number, number] = [0, 0];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < min) {\n                min = Math.abs(numbers[i]\
    \ - numbers[j]);\n                min_pair = [numbers[i], numbers[j]];\n     \
    \       }\n        }\n    }\n    return min_pair;\n}\n", "    let min = Infinity;\n\
    \    let min_pair: [number, number] = [0, 0];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < min) {\n                min = Math.abs(numbers[i]\
    \ - numbers[j]);\n                min_pair = [numbers[i], numbers[j]];\n     \
    \       }\n        }\n    }\n    return min_pair;\n}\n", "    let closest_pair:\
    \ [number, number] = [numbers[0], numbers[1]];\n    let closest_distance = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for\
    \ (let j = i + 1; j < numbers.length; j++) {\n            let distance = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (distance < closest_distance) {\n           \
    \     closest_distance = distance;\n                closest_pair = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n}\n",
  "    let minDiff = Number.MAX_VALUE;\n    let minDiffPair: [number, number] = [0,\
    \ 0];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i\
    \ + 1; j < numbers.length; j++) {\n            const diff = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < minDiff) {\n                minDiff =\
    \ diff;\n                minDiffPair = [numbers[i], numbers[j]];\n           \
    \ }\n        }\n    }\n    return minDiffPair;\n}\n", "    let min = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let min_index = [0, 1];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < min) {\n                min = Math.abs(numbers[i]\
    \ - numbers[j]);\n                min_index = [i, j];\n            }\n       \
    \ }\n    }\n    return [numbers[min_index[0]], numbers[min_index[1]]];\n}\n",
  "    let min = numbers[0] + numbers[1];\n    let min_pair = [numbers[0], numbers[1]];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j\
    \ < numbers.length; j++) {\n            if (Math.abs(numbers[i] + numbers[j])\
    \ < min) {\n                min = Math.abs(numbers[i] + numbers[j]);\n       \
    \         min_pair = [numbers[i], numbers[j]];\n            }\n        }\n   \
    \ }\n    return min_pair;\n}\n", "    let closest: [number, number] = [numbers[0],\
    \ numbers[1]];\n    let min_difference = Math.abs(closest[0] - closest[1]);\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j\
    \ < numbers.length; j++) {\n            let difference = Math.abs(numbers[i] -\
    \ numbers[j]);\n            if (difference < min_difference) {\n             \
    \   closest = [numbers[i], numbers[j]];\n                min_difference = difference;\n\
    \            }\n        }\n    }\n    return closest;\n}\n", "    let min = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let result = [numbers[0], numbers[1]];\n    for (let i =\
    \ 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < min) {\n       \
    \         min = Math.abs(numbers[i] - numbers[j]);\n                result = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return result;\n}\n", " \
    \   let min = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
    \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
    \ j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] -\
    \ numbers[j]) < min) {\n                min = Math.abs(numbers[i] - numbers[j]);\n\
    \                min_pair = [numbers[i], numbers[j]];\n            }\n       \
    \ }\n    }\n    return min_pair;\n}\n", "    let min = Math.abs(numbers[0] - numbers[1]);\n\
    \    let min_pair = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ let diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < min) {\n\
    \                min = diff;\n                min_pair = [numbers[i], numbers[j]];\n\
    \            }\n        }\n    }\n    return min_pair;\n}\n", "    let min = Infinity;\n\
    \    let result: [number, number] = [0, 0];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < min) {\n                min = Math.abs(numbers[i]\
    \ - numbers[j]);\n                result = [numbers[i], numbers[j]];\n       \
    \     }\n        }\n    }\n    return result;\n}\n", "    let min = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let min_pair = [numbers[0], numbers[1]];\n    for (let i\
    \ = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < min) {\n       \
    \         min = Math.abs(numbers[i] - numbers[j]);\n                min_pair =\
    \ [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return min_pair;\n\
    }\n", "    let closest_pair: [number, number] = [numbers[0], numbers[1]];\n  \
    \  let closest_distance = Math.abs(numbers[0] - numbers[1]);\n    for (let i =\
    \ 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            let distance = Math.abs(numbers[i] - numbers[j]);\n    \
    \        if (distance < closest_distance) {\n                closest_distance\
    \ = distance;\n                closest_pair = [numbers[i], numbers[j]];\n    \
    \        }\n        }\n    }\n    return closest_pair;\n}\n", "    let min_diff\
    \ = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0], numbers[1]];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j\
    \ < numbers.length; j++) {\n            let diff = Math.abs(numbers[i] - numbers[j]);\n\
    \            if (diff < min_diff) {\n                min_diff = diff;\n      \
    \          min_pair = [numbers[i], numbers[j]];\n            }\n        }\n  \
    \  }\n    return min_pair;\n}\n", "    let min = numbers[0] - numbers[1];\n  \
    \  let min_index = 0;\n    for (let i = 0; i < numbers.length - 1; i++) {\n  \
    \      if (Math.abs(numbers[i] - numbers[i + 1]) < min) {\n            min = Math.abs(numbers[i]\
    \ - numbers[i + 1]);\n            min_index = i;\n        }\n    }\n    return\
    \ [numbers[min_index], numbers[min_index + 1]];\n}\n\nconsole.log(find_closest_elements([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(find_closest_elements([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(find_closest_elements([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30]));\n", "    let min = Number.MAX_VALUE;\n  \
    \  let result: [number, number] = [0, 0];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < min) {\n                min = Math.abs(numbers[i]\
    \ - numbers[j]);\n                result = [numbers[i], numbers[j]];\n       \
    \     }\n        }\n    }\n    return result;\n}\n", "    let closest_pair: [number,\
    \ number] = [numbers[0], numbers[1]];\n    let closest_distance = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for\
    \ (let j = i + 1; j < numbers.length; j++) {\n            let distance = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (distance < closest_distance) {\n           \
    \     closest_distance = distance;\n                closest_pair = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n}\n",
  "    let minDistance = Number.MAX_VALUE;\n    let closestElements: [number, number]\
    \ = [0, 0];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
    \ j = i + 1; j < numbers.length; j++) {\n            let distance = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (distance < minDistance) {\n                minDistance\
    \ = distance;\n                closestElements = [numbers[i], numbers[j]];\n \
    \           }\n        }\n    }\n    return closestElements;\n}\n", "    let min\
    \ = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0], numbers[1]];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j\
    \ < numbers.length; j++) {\n            let diff = Math.abs(numbers[i] - numbers[j]);\n\
    \            if (diff < min) {\n                min = diff;\n                min_pair\
    \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return min_pair;\n\
    }\n", "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair\
    \ = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        for (let j = i + 1; j < numbers.length; j++) {\n            let diff\
    \ = Math.abs(numbers[i] - numbers[j]);\n            if (diff < min_diff) {\n \
    \               min_diff = diff;\n                min_pair = [numbers[i], numbers[j]];\n\
    \            }\n        }\n    }\n    return min_pair;\n}\n", "    let closest:\
    \ [number, number] = [numbers[0], numbers[1]];\n    let closest_distance = Math.abs(closest[0]\
    \ - closest[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for\
    \ (let j = i + 1; j < numbers.length; j++) {\n            let distance = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (distance < closest_distance) {\n           \
    \     closest = [numbers[i], numbers[j]];\n                closest_distance =\
    \ distance;\n            }\n        }\n    }\n    return closest;\n}\n", "   \
    \ let min = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
    \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
    \ j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] -\
    \ numbers[j]) < min) {\n                min = Math.abs(numbers[i] - numbers[j]);\n\
    \                min_pair = [numbers[i], numbers[j]];\n            }\n       \
    \ }\n    }\n    return min_pair;\n}\n", "    let min = Math.abs(numbers[0] - numbers[1]);\n\
    \    let min_pair = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < min) {\n                min = Math.abs(numbers[i]\
    \ - numbers[j]);\n                min_pair = [numbers[i], numbers[j]];\n     \
    \       }\n        }\n    }\n    return min_pair;\n}\n", "    let closest = [numbers[0],\
    \ numbers[1]];\n    let diff = Math.abs(numbers[0] - numbers[1]);\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < diff) {\n      \
    \          closest = [numbers[i], numbers[j]];\n                diff = Math.abs(numbers[i]\
    \ - numbers[j]);\n            }\n        }\n    }\n    return closest;\n}\n",
  "    let min = Number.MAX_VALUE;\n    let min_pair = [0, 0];\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            let diff = Math.abs(numbers[i] - numbers[j]);\n        \
    \    if (diff < min) {\n                min = diff;\n                min_pair\
    \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return min_pair;\n\
    }\n", "    let minDiff = Number.MAX_VALUE;\n    let minDiffIndex = 0;\n    for\
    \ (let i = 0; i < numbers.length - 1; i++) {\n        const diff = Math.abs(numbers[i]\
    \ - numbers[i + 1]);\n        if (diff < minDiff) {\n            minDiff = diff;\n\
    \            minDiffIndex = i;\n        }\n    }\n    return [numbers[minDiffIndex],\
    \ numbers[minDiffIndex + 1]];\n}\n", "    let min = Number.MAX_VALUE;\n    let\
    \ result: [number, number] = [0, 0];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < min) {\n                min = Math.abs(numbers[i]\
    \ - numbers[j]);\n                result = [numbers[i], numbers[j]];\n       \
    \     }\n        }\n    }\n    return result;\n}\n", "    let min = Number.MAX_VALUE;\n\
    \    let result: [number, number] = [0, 0];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < min) {\n                min = Math.abs(numbers[i]\
    \ - numbers[j]);\n                result = [numbers[i], numbers[j]];\n       \
    \     }\n        }\n    }\n    return result;\n}\n", "    let closest = [numbers[0],\
    \ numbers[1]];\n    let diff = Math.abs(numbers[0] - numbers[1]);\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < diff) {\n      \
    \          closest = [numbers[i], numbers[j]];\n                diff = Math.abs(numbers[i]\
    \ - numbers[j]);\n            }\n        }\n    }\n    return closest;\n}\n",
  "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
    \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
    \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff\
    \ = diff;\n                min_pair = [numbers[i], numbers[j]];\n            }\n\
    \        }\n    }\n    return min_pair;\n}\n", "    let min = Number.MAX_VALUE;\n\
    \    let result: [number, number] = [0, 0];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ let diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < min) {\n\
    \                min = diff;\n                result = [numbers[i], numbers[j]];\n\
    \            }\n        }\n    }\n    return result;\n}\n", "    let closest =\
    \ [numbers[0], numbers[1]];\n    let closestDistance = Math.abs(numbers[0] - numbers[1]);\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j\
    \ < numbers.length; j++) {\n            let distance = Math.abs(numbers[i] - numbers[j]);\n\
    \            if (distance < closestDistance) {\n                closestDistance\
    \ = distance;\n                closest = [numbers[i], numbers[j]];\n         \
    \   }\n        }\n    }\n    return closest;\n}\n", "    let closest = [numbers[0],\
    \ numbers[1]];\n    let minDiff = Math.abs(numbers[0] - numbers[1]);\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < minDiff) {\n   \
    \             minDiff = Math.abs(numbers[i] - numbers[j]);\n                closest\
    \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest;\n\
    }\n", "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_diff_pair\
    \ = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        for (let j = i + 1; j < numbers.length; j++) {\n            let diff\
    \ = Math.abs(numbers[i] - numbers[j]);\n            if (diff < min_diff) {\n \
    \               min_diff = diff;\n                min_diff_pair = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return min_diff_pair;\n}\n",
  "    let closest_pair: [number, number] = [numbers[0], numbers[1]];\n    let closest_distance\
    \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ let distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance\
    \ < closest_distance) {\n                closest_distance = distance;\n      \
    \          closest_pair = [numbers[i], numbers[j]];\n            }\n        }\n\
    \    }\n    return closest_pair;\n}\n", "    let min = Number.MAX_VALUE;\n   \
    \ let result: [number, number] = [0, 0];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < min) {\n                min = Math.abs(numbers[i]\
    \ - numbers[j]);\n                result = [numbers[i], numbers[j]];\n       \
    \     }\n        }\n    }\n    return result;\n}\n", "    let min = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let min_pair = [numbers[0], numbers[1]];\n    for (let i\
    \ = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            let diff = Math.abs(numbers[i] - numbers[j]);\n        \
    \    if (diff < min) {\n                min = diff;\n                min_pair\
    \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return min_pair;\n\
    }\n", "    let min = Math.abs(numbers[0] - numbers[1]);\n    let min_index = [0,\
    \ 1];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i\
    \ + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
    \ < min) {\n                min = Math.abs(numbers[i] - numbers[j]);\n       \
    \         min_index = [i, j];\n            }\n        }\n    }\n    return [numbers[min_index[0]],\
    \ numbers[min_index[1]]];\n}\n", "    let closest_pair: [number, number] = [numbers[0],\
    \ numbers[1]];\n    let closest_distance = Math.abs(numbers[0] - numbers[1]);\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j\
    \ < numbers.length; j++) {\n            let distance = Math.abs(numbers[i] - numbers[j]);\n\
    \            if (distance < closest_distance) {\n                closest_distance\
    \ = distance;\n                closest_pair = [numbers[i], numbers[j]];\n    \
    \        }\n        }\n    }\n    return closest_pair;\n}\n", "    let closest_pair:\
    \ [number, number] = [numbers[0], numbers[1]];\n    let closest_distance = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for\
    \ (let j = i + 1; j < numbers.length; j++) {\n            let distance = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (distance < closest_distance) {\n           \
    \     closest_distance = distance;\n                closest_pair = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n}\n",
  "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
    \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
    \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff\
    \ = diff;\n                min_pair = [numbers[i], numbers[j]];\n            }\n\
    \        }\n    }\n    return min_pair;\n}\n", "    let min = Number.MAX_VALUE;\n\
    \    let result: [number, number] = [0, 0];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < min) {\n                min = Math.abs(numbers[i]\
    \ - numbers[j]);\n                result = [numbers[i], numbers[j]];\n       \
    \     }\n        }\n    }\n    return result;\n}\n", "    let min_diff = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let min_pair = [numbers[0], numbers[1]];\n    for (let i\
    \ = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            let diff = Math.abs(numbers[i] - numbers[j]);\n        \
    \    if (diff < min_diff) {\n                min_diff = diff;\n              \
    \  min_pair = [numbers[i], numbers[j]];\n            }\n        }\n    }\n   \
    \ return min_pair;\n}\n", "    let min = Number.MAX_VALUE;\n    let result: [number,\
    \ number] = [0, 0];\n    for (let i = 0; i < numbers.length; i++) {\n        for\
    \ (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i]\
    \ - numbers[j]) < min) {\n                min = Math.abs(numbers[i] - numbers[j]);\n\
    \                result = [numbers[i], numbers[j]];\n            }\n        }\n\
    \    }\n    return result;\n}\n", "    let closest = [numbers[0], numbers[1]];\n\
    \    let closest_distance = Math.abs(numbers[0] - numbers[1]);\n    for (let i\
    \ = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            let distance = Math.abs(numbers[i] - numbers[j]);\n    \
    \        if (distance < closest_distance) {\n                closest = [numbers[i],\
    \ numbers[j]];\n                closest_distance = distance;\n            }\n\
    \        }\n    }\n    return closest;\n}\n", "    let closest_elements: [number,\
    \ number] = [numbers[0], numbers[1]];\n    let closest_difference: number = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for\
    \ (let j = i + 1; j < numbers.length; j++) {\n            let difference = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (difference < closest_difference) {\n       \
    \         closest_difference = difference;\n                closest_elements =\
    \ [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_elements;\n\
    }\n", "    let minDiff = Math.abs(numbers[0] - numbers[1]);\n    let minPair =\
    \ [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        for (let j = i + 1; j < numbers.length; j++) {\n            let diff\
    \ = Math.abs(numbers[i] - numbers[j]);\n            if (diff < minDiff) {\n  \
    \              minDiff = diff;\n                minPair = [numbers[i], numbers[j]];\n\
    \            }\n        }\n    }\n    return minPair;\n}\n", "  let closest =\
    \ [numbers[0], numbers[1]];\n  let closestDiff = Math.abs(numbers[0] - numbers[1]);\n\
    \  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length;\
    \ j++) {\n      const diff = Math.abs(numbers[i] - numbers[j]);\n      if (diff\
    \ < closestDiff) {\n        closestDiff = diff;\n        closest = [numbers[i],\
    \ numbers[j]];\n      }\n    }\n  }\n  return closest;\n}\n", "    let closest\
    \ = [numbers[0], numbers[1]];\n    let closest_diff = Math.abs(numbers[0] - numbers[1]);\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j\
    \ < numbers.length; j++) {\n            let diff = Math.abs(numbers[i] - numbers[j]);\n\
    \            if (diff < closest_diff) {\n                closest = [numbers[i],\
    \ numbers[j]];\n                closest_diff = diff;\n            }\n        }\n\
    \    }\n    return closest;\n}\n", "    let min = Math.abs(numbers[0] - numbers[1]);\n\
    \    let min_pair = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < min) {\n                min = Math.abs(numbers[i]\
    \ - numbers[j]);\n                min_pair = [numbers[i], numbers[j]];\n     \
    \       }\n        }\n    }\n    return min_pair;\n}\n", "    let closest_numbers:\
    \ [number, number] = [numbers[0], numbers[1]];\n    let closest_distance: number\
    \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ let distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance\
    \ < closest_distance) {\n                closest_numbers = [numbers[i], numbers[j]];\n\
    \                closest_distance = distance;\n            }\n        }\n    }\n\
    \    return closest_numbers;\n}\n", "    let min_diff = Number.MAX_VALUE;\n  \
    \  let min_pair: [number, number] = [0, 0];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ const diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\
    \ {\n                min_diff = diff;\n                min_pair = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return min_pair;\n}\n", " \
    \   let closest: [number, number] = [numbers[0], numbers[1]];\n    let closestDistance\
    \ = Math.abs(closest[0] - closest[1]);\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ let distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance\
    \ < closestDistance) {\n                closest = [numbers[i], numbers[j]];\n\
    \                closestDistance = distance;\n            }\n        }\n    }\n\
    \    return closest;\n}\n", "    let closest: [number, number] = [numbers[0],\
    \ numbers[1]];\n    let closest_distance = Math.abs(numbers[0] - numbers[1]);\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j\
    \ < numbers.length; j++) {\n            let distance = Math.abs(numbers[i] - numbers[j]);\n\
    \            if (distance < closest_distance) {\n                closest = [numbers[i],\
    \ numbers[j]];\n                closest_distance = distance;\n            }\n\
    \        }\n    }\n    return closest;\n}\n", "    let min = Number.MAX_VALUE;\n\
    \    let result = [0, 0];\n    for (let i = 0; i < numbers.length; i++) {\n  \
    \      for (let j = i + 1; j < numbers.length; j++) {\n            let diff =\
    \ Math.abs(numbers[i] - numbers[j]);\n            if (diff < min) {\n        \
    \        min = diff;\n                result = [numbers[i], numbers[j]];\n   \
    \         }\n        }\n    }\n    return result;\n}\n", "    if (numbers.length\
    \ < 2) {\n        throw new Error(\"List must have at least two elements\");\n\
    \    }\n    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair\
    \ = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        for (let j = i + 1; j < numbers.length; j++) {\n            let diff\
    \ = Math.abs(numbers[i] - numbers[j]);\n            if (diff < min_diff) {\n \
    \               min_diff = diff;\n                min_pair = [numbers[i], numbers[j]];\n\
    \            }\n        }\n    }\n    return min_pair;\n}\n", "    let min = Number.MAX_VALUE;\n\
    \    let result: [number, number] = [0, 0];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < min) {\n                min = Math.abs(numbers[i]\
    \ - numbers[j]);\n                result = [numbers[i], numbers[j]];\n       \
    \     }\n        }\n    }\n    return result;\n}\n", "    let min = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let min_pair = [numbers[0], numbers[1]];\n    for (let i\
    \ = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            let diff = Math.abs(numbers[i] - numbers[j]);\n        \
    \    if (diff < min) {\n                min = diff;\n                min_pair\
    \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return min_pair;\n\
    }\n", "    let closest: [number, number] = [numbers[0], numbers[1]];\n    let\
    \ closest_distance = Math.abs(closest[0] - closest[1]);\n    for (let i = 0; i\
    \ < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++)\
    \ {\n            let distance = Math.abs(numbers[i] - numbers[j]);\n         \
    \   if (distance < closest_distance) {\n                closest = [numbers[i],\
    \ numbers[j]];\n                closest_distance = distance;\n            }\n\
    \        }\n    }\n    return closest;\n}\n", "    if (numbers.length < 2) {\n\
    \        throw new Error(\"The list must have at least two elements\");\n    }\n\
    \    let closest_pair: [number, number] = [numbers[0], numbers[1]];\n    let closest_distance\
    \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ let distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance\
    \ < closest_distance) {\n                closest_distance = distance;\n      \
    \          closest_pair = [numbers[i], numbers[j]];\n            }\n        }\n\
    \    }\n    return closest_pair;\n}\n", "    let closest_pair: [number, number]\
    \ = [numbers[0], numbers[1]];\n    let closest_distance = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for\
    \ (let j = i + 1; j < numbers.length; j++) {\n            let distance = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (distance < closest_distance) {\n           \
    \     closest_distance = distance;\n                closest_pair = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n}\n",
  "    let closest: [number, number] = [numbers[0], numbers[1]];\n    let closest_distance\
    \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ let distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance\
    \ < closest_distance) {\n                closest = [numbers[i], numbers[j]];\n\
    \                closest_distance = distance;\n            }\n        }\n    }\n\
    \    return closest;\n}\n", "    let closest_distance = Math.abs(numbers[0] -\
    \ numbers[1]);\n    let closest_pair = [numbers[0], numbers[1]];\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            let distance = Math.abs(numbers[i] - numbers[j]);\n    \
    \        if (distance < closest_distance) {\n                closest_distance\
    \ = distance;\n                closest_pair = [numbers[i], numbers[j]];\n    \
    \        }\n        }\n    }\n    return closest_pair;\n}\n", "    let closest\
    \ = [numbers[0], numbers[1]];\n    let closest_distance = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for\
    \ (let j = i + 1; j < numbers.length; j++) {\n            let distance = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (distance < closest_distance) {\n           \
    \     closest = [numbers[i], numbers[j]];\n                closest_distance =\
    \ distance;\n            }\n        }\n    }\n    return closest;\n}\n", "   \
    \ let minDiff = Number.MAX_VALUE;\n    let result: [number, number] = [0, 0];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j\
    \ < numbers.length; j++) {\n            let diff = Math.abs(numbers[i] - numbers[j]);\n\
    \            if (diff < minDiff) {\n                minDiff = diff;\n        \
    \        result = [numbers[i], numbers[j]];\n            }\n        }\n    }\n\
    \    return result;\n}\n", "    let min = Math.abs(numbers[0] - numbers[1]);\n\
    \    let min_pair = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < min) {\n                min = Math.abs(numbers[i]\
    \ - numbers[j]);\n                min_pair = [numbers[i], numbers[j]];\n     \
    \       }\n        }\n    }\n    return min_pair;\n}\n", "    let closest: [number,\
    \ number] = [numbers[0], numbers[1]];\n    let closest_distance = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for\
    \ (let j = i + 1; j < numbers.length; j++) {\n            const distance = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (distance < closest_distance) {\n           \
    \     closest = [numbers[i], numbers[j]];\n                closest_distance =\
    \ distance;\n            }\n        }\n    }\n    return closest;\n}\n", "   \
    \ let min = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
    \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
    \ j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] -\
    \ numbers[j]) < min) {\n                min = Math.abs(numbers[i] - numbers[j]);\n\
    \                min_pair = [numbers[i], numbers[j]];\n            }\n       \
    \ }\n    }\n    return min_pair;\n}\n", "    let min_diff = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let closest_elements = [numbers[0], numbers[1]];\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            let diff = Math.abs(numbers[i] - numbers[j]);\n        \
    \    if (diff < min_diff) {\n                min_diff = diff;\n              \
    \  closest_elements = [numbers[i], numbers[j]];\n            }\n        }\n  \
    \  }\n    return closest_elements;\n}\n", "    let min = Number.MAX_VALUE;\n \
    \   let result: [number, number] = [0, 0];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < min) {\n                min = Math.abs(numbers[i]\
    \ - numbers[j]);\n                result = [numbers[i], numbers[j]];\n       \
    \     }\n        }\n    }\n    return result;\n}\n", "    let min = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let min_pair = [numbers[0], numbers[1]];\n    for (let i\
    \ = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < min) {\n       \
    \         min = Math.abs(numbers[i] - numbers[j]);\n                min_pair =\
    \ [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return min_pair;\n\
    }\n", "    let min = Math.abs(numbers[0] - numbers[1]);\n    let min_index = 0;\n\
    \    for (let i = 0; i < numbers.length - 1; i++) {\n        if (Math.abs(numbers[i]\
    \ - numbers[i + 1]) < min) {\n            min = Math.abs(numbers[i] - numbers[i\
    \ + 1]);\n            min_index = i;\n        }\n    }\n    return [numbers[min_index],\
    \ numbers[min_index + 1]];\n}\n", "    let min = Number.MAX_VALUE;\n    let result:\
    \ [number, number] = [0, 0];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        for (let j = i + 1; j < numbers.length; j++) {\n            let diff\
    \ = Math.abs(numbers[i] - numbers[j]);\n            if (diff < min) {\n      \
    \          min = diff;\n                result = [numbers[i], numbers[j]];\n \
    \           }\n        }\n    }\n    return result;\n}\n", "    let min = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let min_pair = [numbers[0], numbers[1]];\n    for (let i\
    \ = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < min) {\n       \
    \         min = Math.abs(numbers[i] - numbers[j]);\n                min_pair =\
    \ [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return min_pair;\n\
    }\n", "    const sorted = numbers.sort((a, b) => a - b);\n    let minDiff = Number.MAX_VALUE;\n\
    \    let minPair: [number, number] = [0, 0];\n    for (let i = 0; i < sorted.length\
    \ - 1; i++) {\n        const diff = sorted[i + 1] - sorted[i];\n        if (diff\
    \ < minDiff) {\n            minDiff = diff;\n            minPair = [sorted[i],\
    \ sorted[i + 1]];\n        }\n    }\n    return minPair;\n}\n", "    let closest\
    \ = [numbers[0], numbers[1]];\n    let closest_distance = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for\
    \ (let j = i + 1; j < numbers.length; j++) {\n            let distance = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (distance < closest_distance) {\n           \
    \     closest = [numbers[i], numbers[j]];\n                closest_distance =\
    \ distance;\n            }\n        }\n    }\n    return closest;\n}\n", "   \
    \ let min = Math.abs(numbers[0] - numbers[1]);\n    let result = [numbers[0],\
    \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
    \ j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] -\
    \ numbers[j]) < min) {\n                min = Math.abs(numbers[i] - numbers[j]);\n\
    \                result = [numbers[i], numbers[j]];\n            }\n        }\n\
    \    }\n    return result;\n}\n", "    let min = Number.MAX_VALUE;\n    let result:\
    \ [number, number] = [0, 0];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i]\
    \ - numbers[j]) < min) {\n                min = Math.abs(numbers[i] - numbers[j]);\n\
    \                result = [numbers[i], numbers[j]];\n            }\n        }\n\
    \    }\n    return result;\n}\n", "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n\
    \    let min_pair = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ let diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\
    \ {\n                min_diff = diff;\n                min_pair = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return min_pair;\n}\n", " \
    \   let min = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
    \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
    \ j = i + 1; j < numbers.length; j++) {\n            let curr = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (curr < min) {\n                min = curr;\n\
    \                min_pair = [numbers[i], numbers[j]];\n            }\n       \
    \ }\n    }\n    return min_pair;\n}\n", "    let min = numbers[0];\n    let max\
    \ = numbers[0];\n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i]\
    \ < min) {\n            min = numbers[i];\n        }\n        if (numbers[i] >\
    \ max) {\n            max = numbers[i];\n        }\n    }\n    return [min, max];\n\
    }\n", "    let closest: [number, number] = [numbers[0], numbers[1]];\n    let\
    \ closest_diff = Math.abs(closest[0] - closest[1]);\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ const diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < closest_diff)\
    \ {\n                closest = [numbers[i], numbers[j]];\n                closest_diff\
    \ = diff;\n            }\n        }\n    }\n    return closest;\n}\n", "    let\
    \ closest_distance = Math.abs(numbers[0] - numbers[1]);\n    let closest_numbers\
    \ = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        for (let j = i + 1; j < numbers.length; j++) {\n            let distance\
    \ = Math.abs(numbers[i] - numbers[j]);\n            if (distance < closest_distance)\
    \ {\n                closest_distance = distance;\n                closest_numbers\
    \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_numbers;\n\
    }\n", "    let closest_pair: [number, number] = [numbers[0], numbers[1]];\n  \
    \  let closest_distance = Math.abs(numbers[0] - numbers[1]);\n    for (let i =\
    \ 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            let distance = Math.abs(numbers[i] - numbers[j]);\n    \
    \        if (distance < closest_distance) {\n                closest_distance\
    \ = distance;\n                closest_pair = [numbers[i], numbers[j]];\n    \
    \        }\n        }\n    }\n    return closest_pair;\n}\n", "    let min = Infinity;\n\
    \    let min_pair: [number, number] = [0, 0];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ let diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < min) {\n\
    \                min = diff;\n                min_pair = [numbers[i], numbers[j]];\n\
    \            }\n        }\n    }\n    return min_pair;\n}\n", "    let min = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let min_pair = [numbers[0], numbers[1]];\n    for (let i\
    \ = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            let diff = Math.abs(numbers[i] - numbers[j]);\n        \
    \    if (diff < min) {\n                min = diff;\n                min_pair\
    \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return min_pair;\n\
    }\n", "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair\
    \ = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        for (let j = i + 1; j < numbers.length; j++) {\n            let diff\
    \ = Math.abs(numbers[i] - numbers[j]);\n            if (diff < min_diff) {\n \
    \               min_diff = diff;\n                min_pair = [numbers[i], numbers[j]];\n\
    \            }\n        }\n    }\n    return min_pair;\n}\n", "    let minDiff\
    \ = Math.abs(numbers[0] - numbers[1]);\n    let minPair = [numbers[0], numbers[1]];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j\
    \ < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
    \ < minDiff) {\n                minDiff = Math.abs(numbers[i] - numbers[j]);\n\
    \                minPair = [numbers[i], numbers[j]];\n            }\n        }\n\
    \    }\n    return minPair;\n}\n", "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n\
    \    let min_pair = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ let diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\
    \ {\n                min_diff = diff;\n                min_pair = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return min_pair;\n}\n", " \
    \   let min = Number.MAX_VALUE;\n    let min_pair = [0, 0];\n    for (let i =\
    \ 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            let diff = Math.abs(numbers[i] - numbers[j]);\n        \
    \    if (diff < min) {\n                min = diff;\n                min_pair\
    \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return min_pair;\n\
    }\n", "    let min = numbers[0] + numbers[1];\n    let result = [numbers[0], numbers[1]];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j\
    \ < numbers.length; j++) {\n            if (Math.abs(numbers[i] + numbers[j])\
    \ < min) {\n                min = Math.abs(numbers[i] + numbers[j]);\n       \
    \         result = [numbers[i], numbers[j]];\n            }\n        }\n    }\n\
    \    return result;\n}\n", "    let min = numbers[0] - numbers[1];\n    let min_index\
    \ = [0, 1];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
    \ j = i + 1; j < numbers.length; j++) {\n            let diff = numbers[i] - numbers[j];\n\
    \            if (Math.abs(diff) < Math.abs(min)) {\n                min = diff;\n\
    \                min_index = [i, j];\n            }\n        }\n    }\n    return\
    \ [numbers[min_index[0]], numbers[min_index[1]]];\n}\n", "    let min_diff = numbers[1]\
    \ - numbers[0];\n    let min_pair = [numbers[0], numbers[1]];\n    for (let i\
    \ = 0; i < numbers.length - 1; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            let diff = numbers[j] - numbers[i];\n            if (diff\
    \ < min_diff) {\n                min_diff = diff;\n                min_pair =\
    \ [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return min_pair;\n\
    }\n", "    let min = Math.abs(numbers[0] - numbers[1]);\n    let result = [numbers[0],\
    \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
    \ j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] -\
    \ numbers[j]) < min) {\n                min = Math.abs(numbers[i] - numbers[j]);\n\
    \                result = [numbers[i], numbers[j]];\n            }\n        }\n\
    \    }\n    return result;\n}\n", "    let min = Number.MAX_VALUE;\n    let min_pair:\
    \ [number, number] = [0, 0];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        for (let j = i + 1; j < numbers.length; j++) {\n            let diff\
    \ = Math.abs(numbers[i] - numbers[j]);\n            if (diff < min) {\n      \
    \          min = diff;\n                min_pair = [numbers[i], numbers[j]];\n\
    \            }\n        }\n    }\n    return min_pair;\n}\n", "    let min_diff\
    \ = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0], numbers[1]];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j\
    \ < numbers.length; j++) {\n            let diff = Math.abs(numbers[i] - numbers[j]);\n\
    \            if (diff < min_diff) {\n                min_diff = diff;\n      \
    \          min_pair = [numbers[i], numbers[j]];\n            }\n        }\n  \
    \  }\n    return min_pair;\n}\n", "    let closest_pair: [number, number] = [numbers[0],\
    \ numbers[1]];\n    let closest_distance = Math.abs(numbers[0] - numbers[1]);\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j\
    \ < numbers.length; j++) {\n            let distance = Math.abs(numbers[i] - numbers[j]);\n\
    \            if (distance < closest_distance) {\n                closest_distance\
    \ = distance;\n                closest_pair = [numbers[i], numbers[j]];\n    \
    \        }\n        }\n    }\n    return closest_pair;\n}\n", "    let min_diff\
    \ = numbers[1] - numbers[0];\n    let min_pair = [numbers[0], numbers[1]];\n \
    \   for (let i = 0; i < numbers.length - 1; i++) {\n        for (let j = i + 1;\
    \ j < numbers.length; j++) {\n            let diff = numbers[j] - numbers[i];\n\
    \            if (diff < min_diff) {\n                min_diff = diff;\n      \
    \          min_pair = [numbers[i], numbers[j]];\n            }\n        }\n  \
    \  }\n    return min_pair;\n}\n", "    let minDiff = Math.abs(numbers[0] - numbers[1]);\n\
    \    let minPair = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ let diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < minDiff)\
    \ {\n                minDiff = diff;\n                minPair = [numbers[i], numbers[j]];\n\
    \            }\n        }\n    }\n    return minPair;\n}\n", "    let min = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let min_pair = [numbers[0], numbers[1]];\n    for (let i\
    \ = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < min) {\n       \
    \         min = Math.abs(numbers[i] - numbers[j]);\n                min_pair =\
    \ [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return min_pair;\n\
    }\n", "    let minDiff = Math.abs(numbers[0] - numbers[1]);\n    let minPair =\
    \ [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        for (let j = i + 1; j < numbers.length; j++) {\n            let diff\
    \ = Math.abs(numbers[i] - numbers[j]);\n            if (diff < minDiff) {\n  \
    \              minDiff = diff;\n                minPair = [numbers[i], numbers[j]];\n\
    \            }\n        }\n    }\n    return minPair;\n}\n", "    let min = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let min_pair = [numbers[0], numbers[1]];\n    for (let i\
    \ = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            let diff = Math.abs(numbers[i] - numbers[j]);\n        \
    \    if (diff < min) {\n                min = diff;\n                min_pair\
    \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return min_pair;\n\
    }\n", "    let closest = [numbers[0], numbers[1]];\n    let closest_diff = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for\
    \ (let j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < closest_diff) {\n                closest\
    \ = [numbers[i], numbers[j]];\n                closest_diff = diff;\n        \
    \    }\n        }\n    }\n    return closest;\n}\n", "    if (numbers.length <\
    \ 2) {\n        throw new Error(\"The list must contain at least two numbers\"\
    );\n    }\n    let closest = [numbers[0], numbers[1]];\n    let closest_distance\
    \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ let distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance\
    \ < closest_distance) {\n                closest = [numbers[i], numbers[j]];\n\
    \                closest_distance = distance;\n            }\n        }\n    }\n\
    \    return closest;\n}\n", "    let closest = [numbers[0], numbers[1]];\n   \
    \ let closestDistance = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            let distance = Math.abs(numbers[i] - numbers[j]);\n    \
    \        if (distance < closestDistance) {\n                closestDistance =\
    \ distance;\n                closest = [numbers[i], numbers[j]];\n           \
    \ }\n        }\n    }\n    return closest;\n}\n", "    let closest = [numbers[0],\
    \ numbers[1]];\n    let closest_diff = Math.abs(numbers[0] - numbers[1]);\n  \
    \  for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j <\
    \ numbers.length; j++) {\n            let diff = Math.abs(numbers[i] - numbers[j]);\n\
    \            if (diff < closest_diff) {\n                closest = [numbers[i],\
    \ numbers[j]];\n                closest_diff = diff;\n            }\n        }\n\
    \    }\n    return closest;\n}\n", "    let min = Number.MAX_VALUE;\n    let result:\
    \ [number, number] = [0, 0];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i]\
    \ - numbers[j]) < min) {\n                min = Math.abs(numbers[i] - numbers[j]);\n\
    \                result = [numbers[i], numbers[j]];\n            }\n        }\n\
    \    }\n    return result;\n}\n", "    let min_diff = Number.MAX_VALUE;\n    let\
    \ min_pair: [number, number] = [0, 0];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ const diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\
    \ {\n                min_diff = diff;\n                min_pair = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return min_pair;\n}\n", " \
    \   let closest_pair: [number, number] = [numbers[0], numbers[1]];\n    let closest_distance\
    \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ let distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance\
    \ < closest_distance) {\n                closest_distance = distance;\n      \
    \          closest_pair = [numbers[i], numbers[j]];\n            }\n        }\n\
    \    }\n    return closest_pair;\n}\n", "    let closest_pair: [number, number]\
    \ = [numbers[0], numbers[1]];\n    let closest_distance = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for\
    \ (let j = i + 1; j < numbers.length; j++) {\n            let distance = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (distance < closest_distance) {\n           \
    \     closest_distance = distance;\n                closest_pair = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n}\n",
  "    let closest = [numbers[0], numbers[1]];\n    let closest_distance = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for\
    \ (let j = i + 1; j < numbers.length; j++) {\n            let distance = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (distance < closest_distance) {\n           \
    \     closest = [numbers[i], numbers[j]];\n                closest_distance =\
    \ distance;\n            }\n        }\n    }\n    return closest;\n}\n", "   \
    \ let min = Number.MAX_VALUE;\n    let res: [number, number] = [0, 0];\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < min) {\n       \
    \         min = Math.abs(numbers[i] - numbers[j]);\n                res = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return res;\n}\n", "    let\
    \ closest_pair: [number, number] = [numbers[0], numbers[1]];\n    let closest_distance\
    \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ const distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance\
    \ < closest_distance) {\n                closest_distance = distance;\n      \
    \          closest_pair = [numbers[i], numbers[j]];\n            }\n        }\n\
    \    }\n    return closest_pair;\n}\n", "    let min = Math.abs(numbers[0] - numbers[1]);\n\
    \    let min_pair = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ let diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < min) {\n\
    \                min = diff;\n                min_pair = [numbers[i], numbers[j]];\n\
    \            }\n        }\n    }\n    return min_pair;\n}\n", "    let closest_pair:\
    \ [number, number] = [numbers[0], numbers[1]];\n    let closest_distance = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for\
    \ (let j = i + 1; j < numbers.length; j++) {\n            let distance = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (distance < closest_distance) {\n           \
    \     closest_distance = distance;\n                closest_pair = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n}\n",
  "    let min = Number.MAX_VALUE;\n    let result: [number, number] = [0, 0];\n \
    \   for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j\
    \ < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
    \ < min) {\n                min = Math.abs(numbers[i] - numbers[j]);\n       \
    \         result = [numbers[i], numbers[j]];\n            }\n        }\n    }\n\
    \    return result;\n}\n", "    let closest = [numbers[0], numbers[1]];\n    let\
    \ closest_distance = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i\
    \ < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++)\
    \ {\n            let distance = Math.abs(numbers[i] - numbers[j]);\n         \
    \   if (distance < closest_distance) {\n                closest = [numbers[i],\
    \ numbers[j]];\n                closest_distance = distance;\n            }\n\
    \        }\n    }\n    return closest;\n}\n", "    let min = Number.MAX_VALUE;\n\
    \    let result = [0, 0];\n    for (let i = 0; i < numbers.length; i++) {\n  \
    \      for (let j = i + 1; j < numbers.length; j++) {\n            let diff =\
    \ Math.abs(numbers[i] - numbers[j]);\n            if (diff < min) {\n        \
    \        min = diff;\n                result = [numbers[i], numbers[j]];\n   \
    \         }\n        }\n    }\n    return result;\n}\n", "    let min_distance\
    \ = numbers[1] - numbers[0];\n    let min_distance_numbers = [numbers[0], numbers[1]];\n\
    \    for (let i = 0; i < numbers.length - 1; i++) {\n        for (let j = i +\
    \ 1; j < numbers.length; j++) {\n            let distance = numbers[j] - numbers[i];\n\
    \            if (distance < min_distance) {\n                min_distance = distance;\n\
    \                min_distance_numbers = [numbers[i], numbers[j]];\n          \
    \  }\n        }\n    }\n    return min_distance_numbers;\n}\n", "    let closest\
    \ = [numbers[0], numbers[1]];\n    let closestDistance = Math.abs(numbers[0] -\
    \ numbers[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
    \ j = i + 1; j < numbers.length; j++) {\n            let distance = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (distance < closestDistance) {\n            \
    \    closestDistance = distance;\n                closest = [numbers[i], numbers[j]];\n\
    \            }\n        }\n    }\n    return closest;\n}\n", "    let min = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let result = [numbers[0], numbers[1]];\n    for (let i =\
    \ 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < min) {\n       \
    \         min = Math.abs(numbers[i] - numbers[j]);\n                result = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return result;\n}\n", " \
    \   let closest_pair: [number, number] = [numbers[0], numbers[1]];\n    let closest_distance\
    \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ let distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance\
    \ < closest_distance) {\n                closest_distance = distance;\n      \
    \          closest_pair = [numbers[i], numbers[j]];\n            }\n        }\n\
    \    }\n    return closest_pair;\n}\n", "    let closest = [numbers[0], numbers[1]];\n\
    \    let closestDistance = Math.abs(numbers[0] - numbers[1]);\n    for (let i\
    \ = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            let distance = Math.abs(numbers[i] - numbers[j]);\n    \
    \        if (distance < closestDistance) {\n                closestDistance =\
    \ distance;\n                closest = [numbers[i], numbers[j]];\n           \
    \ }\n        }\n    }\n    return closest;\n}\n", "    let min = Number.MAX_VALUE;\n\
    \    let result: [number, number] = [0, 0];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < min) {\n                min = Math.abs(numbers[i]\
    \ - numbers[j]);\n                result = [numbers[i], numbers[j]];\n       \
    \     }\n        }\n    }\n    return result;\n}\n", "    let min = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let min_numbers = [numbers[0], numbers[1]];\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < min) {\n       \
    \         min = Math.abs(numbers[i] - numbers[j]);\n                min_numbers\
    \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return min_numbers;\n\
    }\n", "    let closest: [number, number] = [numbers[0], numbers[1]];\n    let\
    \ min_diff = Math.abs(closest[0] - closest[1]);\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ let diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\
    \ {\n                min_diff = diff;\n                closest = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return closest;\n}\n", " \
    \   let closest = [numbers[0], numbers[1]];\n    let closest_diff = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for\
    \ (let j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < closest_diff) {\n                closest\
    \ = [numbers[i], numbers[j]];\n                closest_diff = diff;\n        \
    \    }\n        }\n    }\n    return closest;\n}\n", "    let min = Number.MAX_VALUE;\n\
    \    let result: [number, number] = [0, 0];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ let diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < min) {\n\
    \                min = diff;\n                result = [numbers[i], numbers[j]];\n\
    \            }\n        }\n    }\n    return result;\n}\n", "    let min = Number.MAX_VALUE;\n\
    \    let result: [number, number] = [0, 0];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ let diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < min) {\n\
    \                min = diff;\n                result = [numbers[i], numbers[j]];\n\
    \            }\n        }\n    }\n    return result;\n}\n", "    let closest_pair:\
    \ [number, number] = [numbers[0], numbers[1]];\n    let closest_distance = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for\
    \ (let j = i + 1; j < numbers.length; j++) {\n            let distance = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (distance < closest_distance) {\n           \
    \     closest_distance = distance;\n                closest_pair = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n}\n",
  "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
    \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
    \ j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) {\n                min_diff\
    \ = diff;\n                min_pair = [numbers[i], numbers[j]];\n            }\n\
    \        }\n    }\n    return min_pair;\n}\n", "    let min = Number.MAX_VALUE;\n\
    \    let result: [number, number] = [0, 0];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < min) {\n                min = Math.abs(numbers[i]\
    \ - numbers[j]);\n                result = numbers[i] < numbers[j] ? [numbers[i],\
    \ numbers[j]] : [numbers[j], numbers[i]];\n            }\n        }\n    }\n \
    \   return result;\n}\n", "    let min = Infinity;\n    let result: [number, number]\
    \ = [0, 0];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
    \ j = i + 1; j < numbers.length; j++) {\n            const diff = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min) {\n                min = diff;\n\
    \                result = [numbers[i], numbers[j]];\n            }\n        }\n\
    \    }\n    return result;\n}\n", "    let closest: [number, number] = [numbers[0],\
    \ numbers[1]];\n    let closest_distance = Math.abs(numbers[0] - numbers[1]);\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j\
    \ < numbers.length; j++) {\n            let distance = Math.abs(numbers[i] - numbers[j]);\n\
    \            if (distance < closest_distance) {\n                closest = [numbers[i],\
    \ numbers[j]];\n                closest_distance = distance;\n            }\n\
    \        }\n    }\n    return closest;\n}\n", "    let closest_pair: [number,\
    \ number] = [numbers[0], numbers[1]];\n    let min_difference = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for\
    \ (let j = i + 1; j < numbers.length; j++) {\n            let difference = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (difference < min_difference) {\n           \
    \     min_difference = difference;\n                closest_pair = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n}\n",
  "    let closest = [numbers[0], numbers[1]];\n    let closestDistance = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for\
    \ (let j = i + 1; j < numbers.length; j++) {\n            let distance = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (distance < closestDistance) {\n            \
    \    closestDistance = distance;\n                closest = [numbers[i], numbers[j]];\n\
    \            }\n        }\n    }\n    return closest;\n}\n", "    let min_diff\
    \ = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0], numbers[1]];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j\
    \ < numbers.length; j++) {\n            let diff = Math.abs(numbers[i] - numbers[j]);\n\
    \            if (diff < min_diff) {\n                min_diff = diff;\n      \
    \          min_pair = [numbers[i], numbers[j]];\n            }\n        }\n  \
    \  }\n    return min_pair;\n}\n", "  let min = Math.abs(numbers[0] - numbers[1]);\n\
    \  let result = [numbers[0], numbers[1]];\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i]\
    \ - numbers[j]) < min) {\n        min = Math.abs(numbers[i] - numbers[j]);\n \
    \       result = [numbers[i], numbers[j]];\n      }\n    }\n  }\n  return result;\n\
    }\n", "    let min = Number.MAX_VALUE;\n    let result: [number, number] = [0,\
    \ 0];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i\
    \ + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min) {\n                min = diff;\n\
    \                result = [numbers[i], numbers[j]];\n            }\n        }\n\
    \    }\n    return result;\n}\n", "    let closest: [number, number] = [numbers[0],\
    \ numbers[1]];\n    let closest_distance = Math.abs(closest[0] - closest[1]);\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j\
    \ < numbers.length; j++) {\n            const distance = Math.abs(numbers[i] -\
    \ numbers[j]);\n            if (distance < closest_distance) {\n             \
    \   closest = [numbers[i], numbers[j]];\n                closest_distance = distance;\n\
    \            }\n        }\n    }\n    return closest;\n}\n", "    let min = Number.MAX_VALUE;\n\
    \    let min_pair: [number, number] = [0, 0];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < min) {\n                min = Math.abs(numbers[i]\
    \ - numbers[j]);\n                min_pair = [numbers[i], numbers[j]];\n     \
    \       }\n        }\n    }\n    return min_pair;\n}\n", "    let closest = [numbers[0],\
    \ numbers[1]];\n    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            let diff = Math.abs(numbers[i] - numbers[j]);\n        \
    \    if (diff < min_diff) {\n                min_diff = diff;\n              \
    \  closest = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return\
    \ closest;\n}\n", "    let min = Math.abs(numbers[0] - numbers[1]);\n    let min_index\
    \ = [0, 1];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
    \ j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] -\
    \ numbers[j]) < min) {\n                min = Math.abs(numbers[i] - numbers[j]);\n\
    \                min_index = [i, j];\n            }\n        }\n    }\n    return\
    \ [numbers[min_index[0]], numbers[min_index[1]]];\n}\n", "    let min = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let min_pair = [numbers[0], numbers[1]];\n    for (let i\
    \ = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < min) {\n       \
    \         min = Math.abs(numbers[i] - numbers[j]);\n                min_pair =\
    \ [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return min_pair;\n\
    }\n", "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let min_pair\
    \ = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        for (let j = i + 1; j < numbers.length; j++) {\n            let diff\
    \ = Math.abs(numbers[i] - numbers[j]);\n            if (diff < min_diff) {\n \
    \               min_diff = diff;\n                min_pair = [numbers[i], numbers[j]];\n\
    \            }\n        }\n    }\n    return min_pair;\n}\n", "    let closest\
    \ = [numbers[0], numbers[1]];\n    let closest_diff = Math.abs(numbers[0] - numbers[1]);\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j\
    \ < numbers.length; j++) {\n            let diff = Math.abs(numbers[i] - numbers[j]);\n\
    \            if (diff < closest_diff) {\n                closest = [numbers[i],\
    \ numbers[j]];\n                closest_diff = diff;\n            }\n        }\n\
    \    }\n    return closest;\n}\n", "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n\
    \    let min_pair = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ let diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\
    \ {\n                min_diff = diff;\n                min_pair = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return min_pair;\n}\n", " \
    \   let closest = [numbers[0], numbers[1]];\n    let closest_distance = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for\
    \ (let j = i + 1; j < numbers.length; j++) {\n            let distance = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (distance < closest_distance) {\n           \
    \     closest = [numbers[i], numbers[j]];\n                closest_distance =\
    \ distance;\n            }\n        }\n    }\n    return closest;\n}\n", "   \
    \ let min = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0],\
    \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
    \ j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] -\
    \ numbers[j]) < min) {\n                min = Math.abs(numbers[i] - numbers[j]);\n\
    \                min_pair = [numbers[i], numbers[j]];\n            }\n       \
    \ }\n    }\n    return min_pair;\n}\n", "    let closest: [number, number] = [numbers[0],\
    \ numbers[1]];\n    let closest_diff = Math.abs(closest[0] - closest[1]);\n  \
    \  for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j <\
    \ numbers.length; j++) {\n            let diff = Math.abs(numbers[i] - numbers[j]);\n\
    \            if (diff < closest_diff) {\n                closest = [numbers[i],\
    \ numbers[j]];\n                closest_diff = diff;\n            }\n        }\n\
    \    }\n    return closest;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
