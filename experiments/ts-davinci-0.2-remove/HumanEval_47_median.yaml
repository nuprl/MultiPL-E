name: HumanEval_47_median
language: ts
prompt: "//Return median of elements in the list l.\nfunction median(l: number[]):\
  \ number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4,\
  \ 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
  \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1,\
  \ 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
completions: ["    return l[Math.floor(l.length / 2)];\n}\n", "    let m = l.length\
    \ / 2;\n    if (l.length % 2 == 0) {\n        return (l[m - 1] + l[m]) / 2;\n\
    \    } else {\n        return l[Math.floor(m)];\n    }\n}\n", "    var m = l.length\
    \ / 2;\n    return l.length % 2 == 0 ? (l[m - 1] + l[m]) / 2 : l[m];\n}\n", " \
    \   if (l.length == 0) {\n        return 0;\n    }\n    l.sort(function (a, b)\
    \ { return a - b });\n    var half = Math.floor(l.length / 2);\n    if (l.length\
    \ % 2) {\n        return l[half];\n    }\n    else {\n        return (l[half -\
    \ 1] + l[half]) / 2.0;\n    }\n}\n", "    let n = l.length;\n    if (n === 0)\
    \ {\n        return 0;\n    }\n    if (n % 2 === 0) {\n        return (l[n / 2\
    \ - 1] + l[n / 2]) / 2;\n    }\n    return l[(n - 1) / 2];\n}\n", "    let n =\
    \ l.length;\n    let m = Math.floor(n / 2);\n    if (n % 2 == 0) {\n        return\
    \ (l[m - 1] + l[m]) / 2;\n    } else {\n        return l[m];\n    }\n}\n", " \
    \   return l[Math.floor(l.length / 2)];\n}\n", "    let n = l.length;\n    if\
    \ (n === 0) {\n        return 0;\n    }\n    if (n % 2 === 0) {\n        return\
    \ (l[n / 2 - 1] + l[n / 2]) / 2;\n    }\n    return l[(n - 1) / 2];\n}\n", " \
    \   return l[Math.floor(l.length / 2)];\n}\n", "  let l2 = l.slice();\n  l2.sort((a,\
    \ b) => a - b);\n  let len = l2.length;\n  if (len % 2 === 0) {\n    return (l2[len\
    \ / 2 - 1] + l2[len / 2]) / 2;\n  } else {\n    return l2[(len - 1) / 2];\n  }\n\
    }\n", "    if (l.length === 0) {\n        return 0;\n    }\n    l.sort(function\
    \ (a, b) { return a - b; });\n    var half = Math.floor(l.length / 2);\n    if\
    \ (l.length % 2) {\n        return l[half];\n    } else {\n        return (l[half\
    \ - 1] + l[half]) / 2.0;\n    }\n}\n", "    return l[Math.floor(l.length / 2)];\n\
    }\n", "    let sorted = l.sort((a, b) => a - b);\n    let mid = Math.floor(sorted.length\
    \ / 2);\n    return sorted.length % 2 === 0 ? (sorted[mid] + sorted[mid - 1])\
    \ / 2 : sorted[mid];\n}\n", "    if (l.length == 0) {\n        return 0;\n   \
    \ }\n    l.sort((a, b) => a - b);\n    let mid = Math.floor(l.length / 2);\n \
    \   if (l.length % 2 == 0) {\n        return (l[mid - 1] + l[mid]) / 2;\n    }\
    \ else {\n        return l[mid];\n    }\n}\n", "    let n = l.length;\n    let\
    \ m = n / 2;\n    if (n % 2 === 0) {\n        return (l[m - 1] + l[m]) / 2;\n\
    \    } else {\n        return l[Math.floor(m)];\n    }\n}\n", "    let n = l.length;\n\
    \    if (n === 0) {\n        return 0;\n    }\n    l.sort((a, b) => a - b);\n\
    \    if (n % 2 === 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    }\
    \ else {\n        return l[Math.floor(n / 2)];\n    }\n}\n", "    return l[Math.floor(l.length\
    \ / 2)];\n}\n", "  const sorted = l.sort((a, b) => a - b);\n  const mid = Math.floor(sorted.length\
    \ / 2);\n  return sorted.length % 2 === 0 ? (sorted[mid - 1] + sorted[mid]) /\
    \ 2 : sorted[mid];\n}\n", "    let m = l.length / 2;\n    return l.length % 2\
    \ === 0 ? (l[m - 1] + l[m]) / 2 : l[Math.floor(m)];\n}\n", "    if (l.length ===\
    \ 0) {\n        return 0;\n    }\n    l.sort(function (a, b) { return a - b; });\n\
    \    if (l.length % 2 === 0) {\n        return (l[l.length / 2 - 1] + l[l.length\
    \ / 2]) / 2;\n    } else {\n        return l[(l.length - 1) / 2];\n    }\n}\n",
  "    l.sort(function (a, b) { return a - b; });\n    var half = Math.floor(l.length\
    \ / 2);\n    if (l.length % 2) {\n        return l[half];\n    } else {\n    \
    \    return (l[half - 1] + l[half]) / 2.0;\n    }\n}\n", "    let n = l.length;\n\
    \    if (n === 0) {\n        return 0;\n    }\n    if (n % 2 === 0) {\n      \
    \  return (l[n / 2 - 1] + l[n / 2]) / 2;\n    }\n    return l[(n - 1) / 2];\n\
    }\n", "    let n = l.length;\n    if (n % 2 == 0) {\n        return (l[n / 2 -\
    \ 1] + l[n / 2]) / 2;\n    } else {\n        return l[(n - 1) / 2];\n    }\n}\n",
  "    let n = l.length;\n    if (n === 0) {\n        return 0;\n    }\n    if (n\
    \ % 2 === 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    }\n    return\
    \ l[(n - 1) / 2];\n}\n", "    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 == 0) {\n      \
    \  return (sorted[mid - 1] + sorted[mid]) / 2;\n    } else {\n        return sorted[mid];\n\
    \    }\n}\n", "    let n = l.length;\n    let m = Math.floor(n / 2);\n    if (n\
    \ % 2 == 0) {\n        return (l[m - 1] + l[m]) / 2;\n    } else {\n        return\
    \ l[m];\n    }\n}\n", "    if (l.length == 0) {\n        return 0;\n    }\n  \
    \  l.sort((a, b) => a - b);\n    var mid = Math.floor(l.length / 2);\n    if (l.length\
    \ % 2 == 0) {\n        return (l[mid - 1] + l[mid]) / 2;\n    } else {\n     \
    \   return l[mid];\n    }\n}\n", "    let n = l.length;\n    if (n === 0) {\n\
    \        return 0;\n    }\n    l.sort((a, b) => a - b);\n    if (n % 2 === 0)\
    \ {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else {\n        return\
    \ l[Math.floor(n / 2)];\n    }\n}\n", "    return l[Math.floor(l.length / 2)];\n\
    }\n", "    l.sort(function (a, b) { return a - b; });\n    var half = Math.floor(l.length\
    \ / 2);\n    if (l.length % 2) {\n        return l[half];\n    } else {\n    \
    \    return (l[half - 1] + l[half]) / 2.0;\n    }\n}\n", "    let n = l.length;\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else\
    \ {\n        return l[(n - 1) / 2];\n    }\n}\n", "    let m = l.length / 2;\n\
    \    return l.length % 2 === 0 ? (l[m - 1] + l[m]) / 2 : l[Math.floor(m)];\n}\n",
  "    if (l.length === 0) {\n        return 0;\n    }\n    l.sort(function (a, b)\
    \ { return a - b; });\n    var half = Math.floor(l.length / 2);\n    if (l.length\
    \ % 2) {\n        return l[half];\n    } else {\n        return (l[half - 1] +\
    \ l[half]) / 2.0;\n    }\n}\n", "    let n = l.length;\n    if (n % 2 == 0) {\n\
    \        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else {\n        return l[(n\
    \ - 1) / 2];\n    }\n}\n", "    let n = l.length;\n    if (n === 0) {\n      \
    \  return 0;\n    }\n    if (n % 2 === 0) {\n        return (l[n / 2 - 1] + l[n\
    \ / 2]) / 2;\n    }\n    return l[Math.floor(n / 2)];\n}\n", "    let n = l.length;\n\
    \    if (n === 0) {\n        return 0;\n    }\n    if (n % 2 === 0) {\n      \
    \  return (l[n / 2 - 1] + l[n / 2]) / 2;\n    }\n    return l[Math.floor(n / 2)];\n\
    }\n", "    if (l.length === 0) {\n        return 0;\n    }\n    l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(l.length / 2);\n    if (l.length % 2 ===\
    \ 0) {\n        return (l[mid - 1] + l[mid]) / 2;\n    } else {\n        return\
    \ l[mid];\n    }\n}\n", "    if (l.length == 0) {\n        return 0;\n    }\n\
    \    l.sort(function (a, b) { return a - b });\n    var mid = Math.floor(l.length\
    \ / 2);\n    if (l.length % 2 == 0) {\n        return (l[mid - 1] + l[mid]) /\
    \ 2;\n    } else {\n        return l[mid];\n    }\n}\n", "    let n = l.length;\n\
    \    if (n === 0) {\n        return 0;\n    }\n    let m = Math.floor(n / 2);\n\
    \    if (n % 2 === 0) {\n        return (l[m - 1] + l[m]) / 2;\n    } else {\n\
    \        return l[m];\n    }\n}\n", "  const sorted = l.sort((a, b) => a - b);\n\
    \  const mid = Math.floor(sorted.length / 2);\n  if (sorted.length % 2 === 0)\
    \ {\n    return (sorted[mid - 1] + sorted[mid]) / 2;\n  } else {\n    return sorted[mid];\n\
    \  }\n}\n", "    let sorted = l.sort((a, b) => a - b);\n    let mid = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 == 0) {\n        return (sorted[mid - 1] +\
    \ sorted[mid]) / 2;\n    } else {\n        return sorted[mid];\n    }\n}\n", " \
    \   let m = l.length / 2;\n    if (l.length % 2 === 0) {\n        return (l[m\
    \ - 1] + l[m]) / 2;\n    } else {\n        return l[Math.floor(m)];\n    }\n}\n",
  "    let n = l.length;\n    if (n === 0) {\n        return 0;\n    }\n    if (n\
    \ % 2 === 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    }\n    return\
    \ l[Math.floor(n / 2)];\n}\n", "    let n = l.length;\n    if (n === 0) {\n  \
    \      return 0;\n    }\n    if (n % 2 === 0) {\n        return (l[n / 2 - 1]\
    \ + l[n / 2]) / 2;\n    }\n    return l[(n - 1) / 2];\n}\n", "    let n = l.length;\n\
    \    if (n === 0) {\n        return 0;\n    }\n    l.sort((a, b) => a - b);\n\
    \    if (n % 2 === 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    }\
    \ else {\n        return l[(n - 1) / 2];\n    }\n}\n", "    let n = l.length;\n\
    \    let m = Math.floor(n / 2);\n    if (n % 2 == 0) {\n        return (l[m -\
    \ 1] + l[m]) / 2;\n    } else {\n        return l[m];\n    }\n}\n", "    return\
    \ l[Math.floor(l.length / 2)];\n}\n", "    if (l.length === 0) {\n        return\
    \ 0;\n    }\n    l.sort((a, b) => a - b);\n    if (l.length % 2 === 0) {\n   \
    \     return (l[l.length / 2 - 1] + l[l.length / 2]) / 2;\n    } else {\n    \
    \    return l[Math.floor(l.length / 2)];\n    }\n}\n", "    let l2 = l.slice();\n\
    \    l2.sort(function (a, b) { return a - b });\n    let mid = Math.floor(l2.length\
    \ / 2);\n    if (l2.length % 2 == 0) {\n        return (l2[mid - 1] + l2[mid])\
    \ / 2;\n    } else {\n        return l2[mid];\n    }\n}\n", "    let l2 = l.sort((a,\
    \ b) => a - b);\n    let n = l2.length;\n    if (n % 2 == 0) {\n        return\
    \ (l2[n / 2 - 1] + l2[n / 2]) / 2;\n    } else {\n        return l2[(n - 1) /\
    \ 2];\n    }\n}\n", "    let n = l.length;\n    let m = n / 2;\n    if (n % 2\
    \ == 0) {\n        return (l[m - 1] + l[m]) / 2;\n    } else {\n        return\
    \ l[m];\n    }\n}\n", "    l.sort(function (a, b) { return a - b; });\n    var\
    \ half = Math.floor(l.length / 2);\n    if (l.length % 2)\n        return l[half];\n\
    \    else\n        return (l[half - 1] + l[half]) / 2.0;\n}\n", "    let n = l.length;\n\
    \    if (n === 0) {\n        return 0;\n    }\n    l.sort((a, b) => a - b);\n\
    \    if (n % 2 === 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    }\
    \ else {\n        return l[(n - 1) / 2];\n    }\n}\n", "    let n = l.length;\n\
    \    if (n === 0) {\n        return 0;\n    }\n    let m = Math.floor(n / 2);\n\
    \    if (n % 2 === 0) {\n        return (l[m - 1] + l[m]) / 2;\n    } else {\n\
    \        return l[m];\n    }\n}\n", "    let n = l.length;\n    if (n === 0) {\n\
    \        return 0;\n    }\n    let m = Math.floor(n / 2);\n    if (n % 2 === 0)\
    \ {\n        return (l[m - 1] + l[m]) / 2;\n    } else {\n        return l[m];\n\
    \    }\n}\n", "    let n = l.length;\n    if (n === 0) {\n        return 0;\n\
    \    }\n    if (n === 1) {\n        return l[0];\n    }\n    let m = Math.floor(n\
    \ / 2);\n    if (n % 2 === 0) {\n        return (l[m - 1] + l[m]) / 2;\n    }\n\
    \    return l[m];\n}\n", "  let l2 = l.slice();\n  l2.sort((a, b) => a - b);\n\
    \  let mid = Math.floor(l2.length / 2);\n  if (l2.length % 2 == 0) {\n    return\
    \ (l2[mid - 1] + l2[mid]) / 2;\n  } else {\n    return l2[mid];\n  }\n}\n", " \
    \   let sorted = l.sort((a, b) => a - b);\n    let mid = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 == 0) {\n        return (sorted[mid - 1] +\
    \ sorted[mid]) / 2;\n    } else {\n        return sorted[mid];\n    }\n}\n", " \
    \   return l[Math.floor(l.length / 2)];\n}\n", "  let s = l.slice();\n  s.sort();\n\
    \  let mid = Math.floor(s.length / 2);\n  if (s.length % 2 == 0) {\n    return\
    \ (s[mid - 1] + s[mid]) / 2;\n  } else {\n    return s[mid];\n  }\n}\n", "   \
    \ let n = l.length;\n    let m = n / 2;\n    if (n % 2 == 0) {\n        return\
    \ (l[m - 1] + l[m]) / 2;\n    } else {\n        return l[m];\n    }\n}\n", " \
    \   let n = l.length;\n    if (n === 0) {\n        return 0;\n    }\n    let m\
    \ = Math.floor(n / 2);\n    if (n % 2 === 0) {\n        return (l[m - 1] + l[m])\
    \ / 2;\n    } else {\n        return l[m];\n    }\n}\n", "    let l2 = l.slice();\n\
    \    l2.sort(function (a, b) { return a - b });\n    let n = l2.length;\n    if\
    \ (n % 2 == 0) {\n        return (l2[n / 2 - 1] + l2[n / 2]) / 2;\n    } else\
    \ {\n        return l2[(n - 1) / 2];\n    }\n}\n", "    let n = l.length;\n  \
    \  if (n === 0) {\n        return 0;\n    }\n    if (n % 2 === 0) {\n        return\
    \ (l[n / 2 - 1] + l[n / 2]) / 2;\n    }\n    return l[Math.floor(n / 2)];\n}\n",
  "    let n = l.length;\n    if (n % 2 == 0) {\n        return (l[n / 2 - 1] + l[n\
    \ / 2]) / 2;\n    } else {\n        return l[(n - 1) / 2];\n    }\n}\n", "  return\
    \ l[Math.floor(l.length / 2)];\n}\n", "    l.sort(function (a, b) { return a -\
    \ b; });\n    var half = Math.floor(l.length / 2);\n    if (l.length % 2)\n  \
    \      return l[half];\n    else\n        return (l[half - 1] + l[half]) / 2.0;\n\
    }\n", "    let n = l.length;\n    let m = n / 2;\n    if (n % 2 == 0) {\n    \
    \    return (l[m] + l[m - 1]) / 2;\n    } else {\n        return l[Math.floor(m)];\n\
    \    }\n}\n", "  let sorted = l.sort((a, b) => a - b);\n  let mid = Math.floor(sorted.length\
    \ / 2);\n  if (sorted.length % 2 == 0) {\n    return (sorted[mid - 1] + sorted[mid])\
    \ / 2;\n  } else {\n    return sorted[mid];\n  }\n}\n", "    let n = l.length;\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else\
    \ {\n        return l[(n - 1) / 2];\n    }\n}\n", "    let n = l.length;\n   \
    \ if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return l[0];\n\
    \    }\n    let m = Math.floor(n / 2);\n    if (n % 2 == 0) {\n        return\
    \ (l[m - 1] + l[m]) / 2;\n    } else {\n        return l[m];\n    }\n}\n", " \
    \   return l[Math.floor(l.length / 2)];\n}\n", "    let n = l.length;\n    if\
    \ (n % 2 == 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else {\n\
    \        return l[(n - 1) / 2];\n    }\n}\n", "    let n = l.length;\n    let\
    \ m = n / 2;\n    if (n % 2 === 0) {\n        return (l[m - 1] + l[m]) / 2;\n\
    \    } else {\n        return l[Math.floor(m)];\n    }\n}\n", "    let n = l.length;\n\
    \    let m = Math.floor(n / 2);\n    if (n % 2 == 0) {\n        return (l[m -\
    \ 1] + l[m]) / 2;\n    } else {\n        return l[m];\n    }\n}\n", "    let n\
    \ = l.length;\n    if (n === 0) {\n        return 0;\n    }\n    l.sort(function\
    \ (a, b) { return a - b; });\n    if (n % 2 === 0) {\n        return (l[n / 2\
    \ - 1] + l[n / 2]) / 2;\n    } else {\n        return l[Math.floor(n / 2)];\n\
    \    }\n}\n", "    let sorted = l.sort((a, b) => a - b);\n    let len = sorted.length;\n\
    \    if (len % 2 == 0) {\n        return (sorted[len / 2 - 1] + sorted[len / 2])\
    \ / 2;\n    } else {\n        return sorted[(len - 1) / 2];\n    }\n}\n", "  if\
    \ (l.length === 0) {\n    return 0;\n  }\n  l.sort((a, b) => a - b);\n  if (l.length\
    \ % 2 === 0) {\n    return (l[l.length / 2 - 1] + l[l.length / 2]) / 2;\n  } else\
    \ {\n    return l[Math.floor(l.length / 2)];\n  }\n}\n", "    let n = l.length;\n\
    \    if (n === 0) {\n        return 0;\n    }\n    l.sort(function (a, b) { return\
    \ a - b; });\n    if (n % 2 === 0) {\n        return (l[n / 2 - 1] + l[n / 2])\
    \ / 2;\n    } else {\n        return l[(n - 1) / 2];\n    }\n}\n", "    let n\
    \ = l.length;\n    if (n === 0) {\n        return 0;\n    }\n    let m = Math.floor(n\
    \ / 2);\n    if (n % 2 === 0) {\n        return (l[m - 1] + l[m]) / 2;\n    }\
    \ else {\n        return l[m];\n    }\n}\n", "    let m = l.length / 2;\n    return\
    \ (l.length % 2) ? l[m] : (l[m - 1] + l[m]) / 2;\n}\n", "    l.sort(function (a,\
    \ b) { return a - b; });\n    var half = Math.floor(l.length / 2);\n    if (l.length\
    \ % 2) {\n        return l[half];\n    } else {\n        return (l[half - 1] +\
    \ l[half]) / 2.0;\n    }\n}\n", "    if (l.length == 0) {\n        return 0;\n\
    \    }\n    l.sort(function (a, b) { return a - b });\n    var half = Math.floor(l.length\
    \ / 2);\n    if (l.length % 2) {\n        return l[half];\n    }\n    else {\n\
    \        return (l[half - 1] + l[half]) / 2.0;\n    }\n}\n", "    if (l.length\
    \ == 0) {\n        return 0;\n    }\n    else {\n        l.sort(function (a, b)\
    \ { return a - b });\n        var mid = Math.floor(l.length / 2);\n        if\
    \ (l.length % 2 == 0) {\n            return (l[mid - 1] + l[mid]) / 2;\n     \
    \   }\n        else {\n            return l[mid];\n        }\n    }\n}\n", " \
    \   return l[Math.floor(l.length / 2)];\n}\n", "    let n = l.length;\n    if\
    \ (n === 0) {\n        return 0;\n    }\n    if (n % 2 === 0) {\n        return\
    \ (l[n / 2 - 1] + l[n / 2]) / 2;\n    }\n    return l[(n - 1) / 2];\n}\n", " \
    \   let n = l.length;\n    if (n == 0) {\n        return 0;\n    }\n    if (n\
    \ % 2 == 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    }\n    return\
    \ l[(n - 1) / 2];\n}\n", "    let n = l.length;\n    if (n == 0) {\n        return\
    \ 0;\n    }\n    if (n == 1) {\n        return l[0];\n    }\n    let m = Math.floor(n\
    \ / 2);\n    if (n % 2 == 0) {\n        return (l[m - 1] + l[m]) / 2;\n    }\n\
    \    return l[m];\n}\n", "    let n = l.length;\n    if (n === 0) {\n        return\
    \ 0;\n    }\n    let m = Math.floor(n / 2);\n    if (n % 2 === 0) {\n        return\
    \ (l[m - 1] + l[m]) / 2;\n    } else {\n        return l[m];\n    }\n}\n", " \
    \   let n = l.length;\n    if (n === 0) {\n        return 0;\n    }\n    l.sort((a,\
    \ b) => a - b);\n    if (n % 2 === 0) {\n        return (l[n / 2 - 1] + l[n /\
    \ 2]) / 2;\n    } else {\n        return l[(n - 1) / 2];\n    }\n}\n", "    let\
    \ n = l.length;\n    let m = Math.floor(n / 2);\n    if (n % 2 == 0) {\n     \
    \   return (l[m - 1] + l[m]) / 2;\n    } else {\n        return l[m];\n    }\n\
    }\n", "    let n = l.length;\n    if (n === 0) {\n        return 0;\n    }\n \
    \   if (n % 2 === 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    }\n\
    \    return l[Math.floor(n / 2)];\n}\n", "    l.sort();\n    let mid = Math.floor(l.length\
    \ / 2);\n    if (l.length % 2 == 0) {\n        return (l[mid - 1] + l[mid]) /\
    \ 2;\n    } else {\n        return l[mid];\n    }\n}\n", "    l.sort(function\
    \ (a, b) { return a - b; });\n    var half = Math.floor(l.length / 2);\n    if\
    \ (l.length % 2)\n        return l[half];\n    else\n        return (l[half -\
    \ 1] + l[half]) / 2.0;\n}\n", "    let sorted = l.sort((a, b) => a - b);\n   \
    \ let len = sorted.length;\n    if (len % 2 === 0) {\n        return (sorted[len\
    \ / 2 - 1] + sorted[len / 2]) / 2;\n    } else {\n        return sorted[(len -\
    \ 1) / 2];\n    }\n}\n", "    return l[Math.floor(l.length / 2)];\n}\n", "   \
    \ let l2 = l.sort();\n    let n = l2.length;\n    if (n % 2 == 0) {\n        return\
    \ (l2[n / 2 - 1] + l2[n / 2]) / 2;\n    } else {\n        return l2[(n - 1) /\
    \ 2];\n    }\n}\n", "    let n = l.length;\n    if (n === 0) {\n        return\
    \ 0;\n    }\n    l.sort(function (a, b) { return a - b; });\n    if (n % 2 ===\
    \ 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else {\n        return\
    \ l[(n - 1) / 2];\n    }\n}\n", "    let l2 = l.sort();\n    let n = l2.length;\n\
    \    if (n % 2 == 0) {\n        return (l2[n / 2 - 1] + l2[n / 2]) / 2;\n    }\
    \ else {\n        return l2[Math.floor(n / 2)];\n    }\n}\n", "  let l2 = l.slice();\n\
    \  l2.sort(function(a, b) {\n    return a - b;\n  });\n  let mid = Math.floor(l2.length\
    \ / 2);\n  if (l2.length % 2 == 0) {\n    return (l2[mid - 1] + l2[mid]) / 2;\n\
    \  } else {\n    return l2[mid];\n  }\n}\n", "    let n = l.length;\n    if (n\
    \ == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return l[0];\n\
    \    }\n    let sorted = l.sort((a, b) => a - b);\n    if (n % 2 == 0) {\n   \
    \     return (sorted[n / 2 - 1] + sorted[n / 2]) / 2;\n    } else {\n        return\
    \ sorted[(n - 1) / 2];\n    }\n}\n", "    return l[Math.floor(l.length / 2)];\n\
    }\n", "    let n = l.length;\n    let m = Math.floor(n / 2);\n    if (n % 2 ==\
    \ 0) {\n        return (l[m - 1] + l[m]) / 2;\n    } else {\n        return l[m];\n\
    \    }\n}\n", "    if (l.length === 0) {\n        return 0;\n    }\n    l.sort(function\
    \ (a, b) { return a - b; });\n    var half = Math.floor(l.length / 2);\n    if\
    \ (l.length % 2) {\n        return l[half];\n    } else {\n        return (l[half\
    \ - 1] + l[half]) / 2.0;\n    }\n}\n", "    let m = l.length / 2;\n    return\
    \ l.length % 2 === 0 ? (l[m - 1] + l[m]) / 2 : l[Math.floor(m)];\n}\n", "    let\
    \ n = l.length;\n    if (n === 0) {\n        return 0;\n    }\n    l.sort((a,\
    \ b) => a - b);\n    if (n % 2 === 0) {\n        return (l[n / 2 - 1] + l[n /\
    \ 2]) / 2;\n    } else {\n        return l[(n - 1) / 2];\n    }\n}\n", "    let\
    \ sorted = l.sort((a, b) => a - b);\n    let len = sorted.length;\n    if (len\
    \ % 2 === 0) {\n        return (sorted[len / 2 - 1] + sorted[len / 2]) / 2;\n\
    \    } else {\n        return sorted[(len - 1) / 2];\n    }\n}\n", "  let l2 =\
    \ l.slice(0);\n  l2.sort((a, b) => a - b);\n  let mid = Math.floor(l2.length /\
    \ 2);\n  if (l2.length % 2 == 0) {\n    return (l2[mid - 1] + l2[mid]) / 2;\n\
    \  } else {\n    return l2[mid];\n  }\n}\n", "    l.sort(function (a, b) { return\
    \ a - b; });\n    var half = Math.floor(l.length / 2);\n    if (l.length % 2)\n\
    \        return l[half];\n    else\n        return (l[half - 1] + l[half]) / 2.0;\n\
    }\n", "    if (l.length == 0) {\n        return 0;\n    }\n    l.sort(function\
    \ (a, b) { return a - b });\n    var half = Math.floor(l.length / 2);\n    if\
    \ (l.length % 2) {\n        return l[half];\n    }\n    else {\n        return\
    \ (l[half - 1] + l[half]) / 2.0;\n    }\n}\n", "    if (l.length === 0) {\n  \
    \      return 0;\n    }\n    l.sort(function (a, b) { return a - b; });\n    var\
    \ half = Math.floor(l.length / 2);\n    if (l.length % 2) {\n        return l[half];\n\
    \    } else {\n        return (l[half - 1] + l[half]) / 2.0;\n    }\n}\n", " \
    \   let n = l.length;\n    if (n === 0) {\n        return 0;\n    }\n    if (n\
    \ === 1) {\n        return l[0];\n    }\n    let sorted = l.sort();\n    if (n\
    \ % 2 === 0) {\n        return (sorted[n / 2 - 1] + sorted[n / 2]) / 2;\n    }\
    \ else {\n        return sorted[(n - 1) / 2];\n    }\n}\n", "    let sorted =\
    \ l.sort((a, b) => a - b);\n    let mid = Math.floor(sorted.length / 2);\n   \
    \ if (sorted.length % 2 == 0) {\n        return (sorted[mid - 1] + sorted[mid])\
    \ / 2;\n    } else {\n        return sorted[mid];\n    }\n}\n", "    let n = l.length;\n\
    \    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return\
    \ l[0];\n    }\n    let m = Math.floor(n / 2);\n    if (n % 2 === 0) {\n     \
    \   return (l[m - 1] + l[m]) / 2;\n    }\n    return l[m];\n}\n", "    l.sort();\n\
    \    let mid = Math.floor(l.length / 2);\n    if (l.length % 2 == 0) {\n     \
    \   return (l[mid - 1] + l[mid]) / 2;\n    } else {\n        return l[mid];\n\
    \    }\n}\n", "    let l2 = l.slice();\n    l2.sort((a, b) => a - b);\n    let\
    \ m = l2.length / 2;\n    return l2.length % 2 === 0 ? (l2[m - 1] + l2[m]) / 2\
    \ : l2[Math.floor(m)];\n}\n", "  let m = Math.floor(l.length / 2);\n  if (l.length\
    \ % 2 === 0) {\n    return (l[m - 1] + l[m]) / 2;\n  } else {\n    return l[m];\n\
    \  }\n}\n", "    let n = l.length;\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2 - 1] + l[n / 2]) / 2;\n    } else {\n        return l[(n - 1) / 2];\n  \
    \  }\n}\n", "    let n = l.length;\n    let m = n / 2;\n    if (n % 2 == 0) {\n\
    \        return (l[m - 1] + l[m]) / 2;\n    } else {\n        return l[m];\n \
    \   }\n}\n", "    let n = l.length;\n    if (n === 0) {\n        return 0;\n \
    \   }\n    l.sort(function (a, b) { return a - b; });\n    if (n % 2 === 0) {\n\
    \        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else {\n        return l[(n\
    \ - 1) / 2];\n    }\n}\n", "    let n = l.length;\n    if (n === 0) {\n      \
    \  return 0;\n    }\n    if (n === 1) {\n        return l[0];\n    }\n    let\
    \ m = Math.floor(n / 2);\n    if (n % 2 === 0) {\n        return (l[m - 1] + l[m])\
    \ / 2;\n    }\n    return l[m];\n}\n", "    let n = l.length;\n    if (n === 0)\
    \ {\n        return 0;\n    }\n    let m = Math.floor(n / 2);\n    if (n % 2 ===\
    \ 0) {\n        return (l[m - 1] + l[m]) / 2;\n    } else {\n        return l[m];\n\
    \    }\n}\n", "    let n = l.length;\n    if (n === 0) {\n        return 0;\n\
    \    }\n    if (n % 2 === 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n\
    \    }\n    return l[(n - 1) / 2];\n}\n", "    let l2 = l.slice();\n    l2.sort(function\
    \ (a, b) { return a - b });\n    let mid = Math.floor(l2.length / 2);\n    if\
    \ (l2.length % 2 == 0) {\n        return (l2[mid - 1] + l2[mid]) / 2;\n    } else\
    \ {\n        return l2[mid];\n    }\n}\n", "    l.sort(function (a, b) { return\
    \ a - b; });\n    var half = Math.floor(l.length / 2);\n    if (l.length % 2)\n\
    \        return l[half];\n    else\n        return (l[half - 1] + l[half]) / 2.0;\n\
    }\n", "    let n = l.length;\n    let m = Math.floor(n / 2);\n    if (n % 2 ==\
    \ 0) {\n        return (l[m - 1] + l[m]) / 2;\n    } else {\n        return l[m];\n\
    \    }\n}\n", "    if (l.length === 0) {\n        return 0;\n    }\n    l.sort(function\
    \ (a, b) { return a - b; });\n    var half = Math.floor(l.length / 2);\n    if\
    \ (l.length % 2) {\n        return l[half];\n    } else {\n        return (l[half\
    \ - 1] + l[half]) / 2.0;\n    }\n}\n", "    if (l.length == 0) {\n        return\
    \ 0;\n    }\n    l.sort(function (a, b) { return a - b });\n    var half = Math.floor(l.length\
    \ / 2);\n    if (l.length % 2) {\n        return l[half];\n    }\n    else {\n\
    \        return (l[half - 1] + l[half]) / 2.0;\n    }\n}\n", "    let n = l.length;\n\
    \    if (n === 0) {\n        return 0;\n    }\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    if (n % 2 === 0) {\n        return (sorted[n / 2 - 1] + sorted[n\
    \ / 2]) / 2;\n    } else {\n        return sorted[(n - 1) / 2];\n    }\n}\n",
  "    var n = l.length;\n    var m = n / 2;\n    if (n % 2 == 0) {\n        return\
    \ (l[m - 1] + l[m]) / 2;\n    } else {\n        return l[m];\n    }\n}\n", " \
    \   return l[Math.floor(l.length / 2)];\n}\n", "    if (l.length == 0) {\n   \
    \     return 0;\n    }\n    var sorted = l.sort(function (a, b) { return a - b;\
    \ });\n    if (sorted.length % 2 == 0) {\n        return (sorted[sorted.length\
    \ / 2 - 1] + sorted[sorted.length / 2]) / 2;\n    }\n    else {\n        return\
    \ sorted[Math.floor(sorted.length / 2)];\n    }\n}\n", "    let n = l.length;\n\
    \    if (n === 0) {\n        return 0;\n    }\n    l.sort(function (a, b) { return\
    \ a - b; });\n    if (n % 2 === 0) {\n        return (l[n / 2 - 1] + l[n / 2])\
    \ / 2;\n    } else {\n        return l[(n - 1) / 2];\n    }\n}\n", "    if (l.length\
    \ == 0) {\n        return 0;\n    }\n    l.sort(function (a, b) { return a - b\
    \ });\n    if (l.length % 2 == 0) {\n        return (l[l.length / 2 - 1] + l[l.length\
    \ / 2]) / 2;\n    }\n    else {\n        return l[(l.length - 1) / 2];\n    }\n\
    }\n", "    let n = l.length;\n    if (n % 2 == 0) {\n        return (l[n / 2 -\
    \ 1] + l[n / 2]) / 2;\n    } else {\n        return l[(n - 1) / 2];\n    }\n}\n",
  "    let n = l.length;\n    if (n == 0) {\n        return 0;\n    }\n    if (n ==\
    \ 1) {\n        return l[0];\n    }\n    let s = l.slice();\n    s.sort();\n \
    \   if (n % 2 == 0) {\n        return (s[n / 2 - 1] + s[n / 2]) / 2;\n    } else\
    \ {\n        return s[(n - 1) / 2];\n    }\n}\n", "  return l[Math.floor(l.length\
    \ / 2)];\n}\n", "    let n = l.length;\n    if (n === 0) {\n        return 0;\n\
    \    }\n    let m = Math.floor(n / 2);\n    if (n % 2 === 0) {\n        return\
    \ (l[m - 1] + l[m]) / 2;\n    } else {\n        return l[m];\n    }\n}\n", " \
    \   let n = l.length;\n    let m = n / 2;\n    if (n % 2 == 0) {\n        return\
    \ (l[m - 1] + l[m]) / 2;\n    } else {\n        return l[m];\n    }\n}\n", " \
    \   l.sort(function (a, b) { return a - b; });\n    var half = Math.floor(l.length\
    \ / 2);\n    if (l.length % 2) {\n        return l[half];\n    } else {\n    \
    \    return (l[half - 1] + l[half]) / 2.0;\n    }\n}\n", "    return l[Math.floor(l.length\
    \ / 2)];\n}\n", "    let n = l.length;\n    if (n === 0) {\n        return 0;\n\
    \    }\n    if (n % 2 === 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n\
    \    }\n    return l[Math.floor(n / 2)];\n}\n", "    if (l.length === 0) {\n \
    \       return 0;\n    }\n    else {\n        l.sort(function (a, b) { return\
    \ a - b; });\n        var half = Math.floor(l.length / 2);\n        if (l.length\
    \ % 2) {\n            return l[half];\n        }\n        else {\n           \
    \ return (l[half - 1] + l[half]) / 2.0;\n        }\n    }\n}\n", "    let n =\
    \ l.length;\n    let m = n / 2;\n    if (n % 2 == 0) {\n        return (l[m -\
    \ 1] + l[m]) / 2;\n    } else {\n        return l[m];\n    }\n}\n", "    if (l.length\
    \ == 0) {\n        return 0;\n    }\n    l.sort((a, b) => a - b);\n    if (l.length\
    \ % 2 == 0) {\n        return (l[l.length / 2 - 1] + l[l.length / 2]) / 2;\n \
    \   } else {\n        return l[(l.length - 1) / 2];\n    }\n}\n", "    if (l.length\
    \ === 0) {\n        return 0;\n    }\n    l.sort((a, b) => a - b);\n    const\
    \ mid = Math.floor(l.length / 2);\n    if (l.length % 2 === 0) {\n        return\
    \ (l[mid - 1] + l[mid]) / 2;\n    } else {\n        return l[mid];\n    }\n}\n",
  "    let n = l.length;\n    if (n === 0) {\n        return 0;\n    }\n    let m\
    \ = Math.floor(n / 2);\n    if (n % 2 === 0) {\n        return (l[m - 1] + l[m])\
    \ / 2;\n    } else {\n        return l[m];\n    }\n}\n", "    let m = l.length\
    \ / 2;\n    return l.length % 2 == 0 ? (l[m - 1] + l[m]) / 2 : l[m];\n}\n", " \
    \   if (l.length == 0) {\n        return 0;\n    }\n    l.sort(function (a, b)\
    \ { return a - b });\n    var half = Math.floor(l.length / 2);\n    if (l.length\
    \ % 2) {\n        return l[half];\n    }\n    else {\n        return (l[half -\
    \ 1] + l[half]) / 2.0;\n    }\n}\n", "    if (l.length == 0) {\n        return\
    \ 0;\n    }\n    l.sort(function (a, b) { return a - b });\n    var half = Math.floor(l.length\
    \ / 2);\n    if (l.length % 2) {\n        return l[half];\n    }\n    else {\n\
    \        return (l[half - 1] + l[half]) / 2.0;\n    }\n}\n", "    let n = l.length;\n\
    \    let m = Math.floor(n / 2);\n    if (n % 2 == 0) {\n        return (l[m -\
    \ 1] + l[m]) / 2;\n    } else {\n        return l[m];\n    }\n}\n", "    let n\
    \ = l.length;\n    if (n === 0) {\n        return 0;\n    }\n    l.sort(function\
    \ (a, b) { return a - b; });\n    if (n % 2 === 0) {\n        return (l[n / 2\
    \ - 1] + l[n / 2]) / 2;\n    } else {\n        return l[(n - 1) / 2];\n    }\n\
    }\n", "    let n = l.length;\n    if (n === 0) {\n        return 0;\n    }\n \
    \   if (n === 1) {\n        return l[0];\n    }\n    let sorted = l.sort();\n\
    \    if (n % 2 === 0) {\n        return (sorted[n / 2 - 1] + sorted[n / 2]) /\
    \ 2;\n    } else {\n        return sorted[(n - 1) / 2];\n    }\n}\n", "    let\
    \ l2 = l.slice();\n    l2.sort(function (a, b) { return a - b });\n    let n =\
    \ l2.length;\n    if (n % 2 == 0) {\n        return (l2[n / 2 - 1] + l2[n / 2])\
    \ / 2;\n    } else {\n        return l2[(n - 1) / 2];\n    }\n}\n", "    let n\
    \ = l.length;\n    if (n === 0) {\n        return 0;\n    }\n    let m = Math.floor(n\
    \ / 2);\n    if (n % 2 === 0) {\n        return (l[m - 1] + l[m]) / 2;\n    }\
    \ else {\n        return l[m];\n    }\n}\n", "    var n = l.length;\n    if (n\
    \ == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return l[0];\n\
    \    }\n    l.sort(function (a, b) { return a - b; });\n    if (n % 2 == 0) {\n\
    \        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    }\n    else {\n        return\
    \ l[Math.floor(n / 2)];\n    }\n}\n", "    return l[Math.floor(l.length / 2)];\n\
    }\n", "    return l[Math.floor(l.length / 2)];\n}\n", "    let n = l.length;\n\
    \    if (n === 0) {\n        return 0;\n    }\n    l.sort((a, b) => a - b);\n\
    \    if (n % 2 === 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    }\
    \ else {\n        return l[(n - 1) / 2];\n    }\n}\n", "    if (l.length == 0)\
    \ {\n        return 0;\n    }\n    l.sort((a, b) => a - b);\n    let mid = Math.floor(l.length\
    \ / 2);\n    if (l.length % 2 == 0) {\n        return (l[mid - 1] + l[mid]) /\
    \ 2;\n    } else {\n        return l[mid];\n    }\n}\n", "    let n = l.length;\n\
    \    if (n === 0) {\n        return 0;\n    }\n    l.sort(function (a, b) { return\
    \ a - b; });\n    if (n % 2 === 0) {\n        return (l[n / 2 - 1] + l[n / 2])\
    \ / 2;\n    } else {\n        return l[Math.floor(n / 2)];\n    }\n}\n", "   \
    \ if (l.length == 0) {\n        return 0;\n    }\n    l.sort(function (a, b) {\
    \ return a - b });\n    var half = Math.floor(l.length / 2);\n    if (l.length\
    \ % 2) {\n        return l[half];\n    }\n    else {\n        return (l[half -\
    \ 1] + l[half]) / 2.0;\n    }\n}\n", "  let n = l.length;\n  let m = Math.floor(n\
    \ / 2);\n  if (n % 2 == 0) {\n    return (l[m - 1] + l[m]) / 2;\n  } else {\n\
    \    return l[m];\n  }\n}\n", "    l.sort();\n    if (l.length % 2 == 0) {\n \
    \       return (l[l.length / 2 - 1] + l[l.length / 2]) / 2;\n    } else {\n  \
    \      return l[Math.floor(l.length / 2)];\n    }\n}\n", "    let n = l.length;\n\
    \    if (n === 0) {\n        return 0;\n    }\n    if (n % 2 === 0) {\n      \
    \  return (l[n / 2 - 1] + l[n / 2]) / 2;\n    }\n    return l[Math.floor(n / 2)];\n\
    }\n", "    if (l.length == 0) {\n        return 0;\n    }\n    l.sort(function\
    \ (a, b) { return a - b });\n    var half = Math.floor(l.length / 2);\n    if\
    \ (l.length % 2) {\n        return l[half];\n    }\n    else {\n        return\
    \ (l[half - 1] + l[half]) / 2.0;\n    }\n}\n", "  let m = l.length / 2;\n  if\
    \ (l.length % 2 === 0) {\n    return (l[m - 1] + l[m]) / 2;\n  } else {\n    return\
    \ l[Math.floor(m)];\n  }\n}\n", "    return l[Math.floor(l.length / 2)];\n}\n",
  "  let n = l.length;\n  if (n === 0) {\n    return 0;\n  }\n  l.sort((a, b) => a\
    \ - b);\n  if (n % 2 === 0) {\n    return (l[n / 2 - 1] + l[n / 2]) / 2;\n  }\
    \ else {\n    return l[(n - 1) / 2];\n  }\n}\n", "    let l2 = l.slice();\n  \
    \  l2.sort((a, b) => a - b);\n    let mid = Math.floor(l2.length / 2);\n    if\
    \ (l2.length % 2 == 0) {\n        return (l2[mid - 1] + l2[mid]) / 2;\n    } else\
    \ {\n        return l2[mid];\n    }\n}\n", "    let n = l.length;\n    if (n ===\
    \ 0) {\n        return 0;\n    }\n    let m = Math.floor(n / 2);\n    if (n %\
    \ 2 === 0) {\n        return (l[m - 1] + l[m]) / 2;\n    } else {\n        return\
    \ l[m];\n    }\n}\n", "    l.sort();\n    var mid = Math.floor(l.length / 2);\n\
    \    if (l.length % 2 == 0) {\n        return (l[mid - 1] + l[mid]) / 2;\n   \
    \ } else {\n        return l[mid];\n    }\n}\n", "    let n = l.length;\n    let\
    \ m = n / 2;\n    if (n % 2 == 0) {\n        return (l[m - 1] + l[m]) / 2;\n \
    \   } else {\n        return l[m];\n    }\n}\n", "    let n = l.length;\n    let\
    \ m = n / 2;\n    if (n % 2 == 0) {\n        return (l[m - 1] + l[m]) / 2;\n \
    \   } else {\n        return l[m];\n    }\n}\n", "    let n = l.length;\n    if\
    \ (n % 2 == 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else {\n\
    \        return l[(n - 1) / 2];\n    }\n}\n", "    let n = l.length;\n    if (n\
    \ === 0) {\n        return 0;\n    }\n    l.sort(function (a, b) { return a -\
    \ b; });\n    if (n % 2 === 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n\
    \    } else {\n        return l[Math.floor(n / 2)];\n    }\n}\n", "    if (l.length\
    \ === 0) {\n        return 0;\n    }\n    l.sort(function (a, b) { return a -\
    \ b; });\n    var half = Math.floor(l.length / 2);\n    if (l.length % 2) {\n\
    \        return l[half];\n    } else {\n        return (l[half - 1] + l[half])\
    \ / 2.0;\n    }\n}\n", "    if (l.length == 0) {\n        return 0;\n    }\n \
    \   l.sort(function (a, b) { return a - b });\n    var half = Math.floor(l.length\
    \ / 2);\n    if (l.length % 2) {\n        return l[half];\n    }\n    else {\n\
    \        return (l[half - 1] + l[half]) / 2.0;\n    }\n}\n", "    let n = l.length;\n\
    \    let m = Math.floor(n / 2);\n    if (n % 2 == 0) {\n        return (l[m -\
    \ 1] + l[m]) / 2;\n    } else {\n        return l[m];\n    }\n}\n", "    let sorted\
    \ = l.sort((a, b) => a - b);\n    if (sorted.length % 2 == 0) {\n        return\
    \ (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) / 2;\n    } else\
    \ {\n        return sorted[Math.floor(sorted.length / 2)];\n    }\n}\n", "   \
    \ let n = l.length;\n    if (n == 0) {\n        return 0;\n    }\n    let m =\
    \ Math.floor(n / 2);\n    if (n % 2 == 0) {\n        return (l[m - 1] + l[m])\
    \ / 2;\n    } else {\n        return l[m];\n    }\n}\n", "    let l2 = l.slice();\n\
    \    l2.sort(function (a, b) { return a - b });\n    let n = l2.length;\n    if\
    \ (n % 2 == 0) {\n        return (l2[n / 2 - 1] + l2[n / 2]) / 2;\n    } else\
    \ {\n        return l2[Math.floor(n / 2)];\n    }\n}\n", "    let n = l.length;\n\
    \    if (n == 0) {\n        return 0;\n    }\n    let m = Math.floor(n / 2);\n\
    \    if (n % 2 == 0) {\n        return (l[m - 1] + l[m]) / 2;\n    } else {\n\
    \        return l[m];\n    }\n}\n", "    let n = l.length;\n    let m = Math.floor(n\
    \ / 2);\n    if (n % 2 == 0) {\n        return (l[m - 1] + l[m]) / 2;\n    } else\
    \ {\n        return l[m];\n    }\n}\n", "    if (l.length == 0) {\n        return\
    \ 0;\n    }\n    l.sort(function (a, b) { return a - b });\n    var half = Math.floor(l.length\
    \ / 2);\n    if (l.length % 2) {\n        return l[half];\n    }\n    else {\n\
    \        return (l[half - 1] + l[half]) / 2.0;\n    }\n}\n", "  let sorted = l.sort((a,\
    \ b) => a - b);\n  let mid = Math.floor(sorted.length / 2);\n  if (sorted.length\
    \ % 2 == 0) {\n    return (sorted[mid - 1] + sorted[mid]) / 2;\n  } else {\n \
    \   return sorted[mid];\n  }\n}\n", "    return l[Math.floor(l.length / 2)];\n\
    }\n", "    return l[Math.floor(l.length / 2)];\n}\n", "    let l2 = l.slice();\n\
    \    l2.sort(function (a, b) { return a - b });\n    let n = l2.length;\n    if\
    \ (n % 2 == 0) {\n        return (l2[n / 2 - 1] + l2[n / 2]) / 2;\n    } else\
    \ {\n        return l2[(n - 1) / 2];\n    }\n}\n", "    let n = l.length;\n  \
    \  if (n % 2 == 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else\
    \ {\n        return l[(n - 1) / 2];\n    }\n}\n", "    let n = l.length;\n   \
    \ if (n % 2 == 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else\
    \ {\n        return l[Math.floor(n / 2)];\n    }\n}\n", "    if (l.length ===\
    \ 0) {\n        return 0;\n    }\n    l.sort(function (a, b) { return a - b; });\n\
    \    let mid = Math.floor(l.length / 2);\n    if (l.length % 2 === 0) {\n    \
    \    return (l[mid - 1] + l[mid]) / 2;\n    } else {\n        return l[mid];\n\
    \    }\n}\n", "    let n = l.length;\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2 - 1] + l[n / 2]) / 2;\n    } else {\n        return l[(n - 1) / 2];\n  \
    \  }\n}\n", "    l.sort();\n    let n = l.length;\n    if (n % 2 == 0) {\n   \
    \     return (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else {\n        return l[(n\
    \ - 1) / 2];\n    }\n}\n", "    let sorted = l.sort((a, b) => a - b);\n    let\
    \ mid = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 == 0) {\n  \
    \      return (sorted[mid - 1] + sorted[mid]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n", "    let n = l.length;\n    if (n === 0) {\n    \
    \    return 0;\n    }\n    l.sort((a, b) => a - b);\n    if (n % 2 === 0) {\n\
    \        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else {\n        return l[(n\
    \ - 1) / 2];\n    }\n}\n", "    let sorted = l.sort();\n    let length = sorted.length;\n\
    \    if (length % 2 === 0) {\n        return (sorted[length / 2 - 1] + sorted[length\
    \ / 2]) / 2;\n    } else {\n        return sorted[Math.floor(length / 2)];\n \
    \   }\n}\n", "  if (l.length === 0) {\n    return 0;\n  }\n  l.sort((a, b) =>\
    \ a - b);\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0)\
    \ {\n    return (l[mid - 1] + l[mid]) / 2;\n  } else {\n    return l[mid];\n \
    \ }\n}\n", "    return (l[Math.floor(l.length / 2)] + l[Math.ceil(l.length / 2)])\
    \ / 2;\n}\n", "    return l[Math.floor(l.length / 2)];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
