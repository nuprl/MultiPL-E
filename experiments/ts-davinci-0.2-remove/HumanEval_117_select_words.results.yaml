language: ts
name: HumanEval_117_select_words
results:
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let cons = 0;\n        for (let\
    \ j = 0; j < word.length; j++) {\n            if (!isVowel(word[j])) {\n     \
    \           cons++;\n            }\n        }\n        if (cons === n) {\n   \
    \         result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1hzw6j9s.ts(14,18): error TS2304: Cannot find name
    ''isVowel''.

    '
  timestamp: 1660003991
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words: string[] = s.split(\" \");\n    let result: string[] = [];\n    for (let\
    \ word of words) {\n        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk2epxuye.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let count = 0;\n        for (let\
    \ j = 0; j < word.length; j++) {\n            let letter = word[j];\n        \
    \    if (letter.match(/[^aeiou]/i)) {\n                count++;\n            }\n\
    \        }\n        if (count === n) {\n            result.push(word);\n     \
    \   }\n    }\n    return result;\n}\n\nconsole.log(select_words('', 1));\nconsole.log(select_words('bcd',\
    \ 1));\nconsole.log(select_words('bcd', 2));\nconsole.log(select_words('bcd',\
    \ 3));\nconsole.log(select_words('bcd', 4));\nconsole.log(select_words('bcd',\
    \ 5));\nconsole.log(select_words('bcd', 6));\nconsole.log(select_words('bcd',\
    \ 7));\nconsole.log(select_words('bcd', 8));\nconsole.log(select_words('bcd',\
    \ 9));\nconsole.log(select_words('bcd', 10));\nconsole.log(select_words('bcd',\
    \ 11));\nconsole.log(select_words('bcd', 12));\nconsole.log(select_words('bcd',\
    \ 13));\nconsole.log(select_words('bcd', 14));\nconsole.log(select_words('bcd',\
    \ 15));\nconsole.log(select_words('bcd', 16));\nconsole.log(select_words('bcd',\
    \ 17));\nconsole.log(select_words('bcd', 18));\nconsole.log(select_words('bcd',\
    \ 19));\nconsole.log(select_words('bcd', 20));\nconsole.log(select_words('bcd',\
    \ 21));\nconsole.log(select_words('bcd', 22));\nconsole.log(select_words('bcd',\
    \ 23));\nconsole.log(select_words('bcd', 24));\nconsole.log(select_words('bcd',\
    \ 25));\nconsole.log(select_words('bcd',\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfuz9t1fz.ts(53,9): error TS1005: '','' expected.

    '
  timestamp: 1660003991
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            if (isConsonant(word[j])) {\n\
    \                consonants++;\n            }\n        }\n        if (consonants\
    \ === n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpeisbowcj.ts(14,17): error TS2552: Cannot find name
    ''isConsonant''. Did you mean ''consonants''?

    '
  timestamp: 1660003991
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4qhhkkwd.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n\
    \        if (countConsonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpa0ob8v8t.ts(11,13): error TS2304: Cannot find name
    ''countConsonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let count = 0;\n        for (let j = 0; j < words[i].length;\
    \ j++) {\n            if (words[i][j] != \"a\" && words[i][j] != \"e\" && words[i][j]\
    \ != \"i\" && words[i][j] != \"o\" && words[i][j] != \"u\") {\n              \
    \  count++;\n            }\n        }\n        if (count == n) {\n           \
    \ result.push(words[i]);\n        }\n    }\n    return result;\n}\nconsole.log(select_words(\"\
    \", 0));\nconsole.log(select_words(\"\", 1));\nconsole.log(select_words(\"\",\
    \ 2));\nconsole.log(select_words(\"\", 3));\nconsole.log(select_words(\"\", 4));\n\
    console.log(select_words(\"\", 5));\nconsole.log(select_words(\"\", 6));\nconsole.log(select_words(\"\
    \", 7));\nconsole.log(select_words(\"\", 8));\nconsole.log(select_words(\"\",\
    \ 9));\nconsole.log(select_words(\"\", 10));\nconsole.log(select_words(\"\", 11));\n\
    console.log(select_words(\"\", 12));\nconsole.log(select_words(\"\", 13));\nconsole.log(select_words(\"\
    \", 14));\nconsole.log(select_words(\"\", 15));\nconsole.log(select_words(\"\"\
    , 16));\nconsole.log(select_words(\"\", 17));\nconsole.log(select_words(\"\",\
    \ 18));\nconsole.log(select_words(\"\", 19));\nconsole.log(select_words(\"\",\
    \ 20));\nconsole.log(select_words(\"\", 21));\nconsole.log(select_words(\"\",\
    \ 22));\nconsole.log(select_words(\"\", 23));\nconsole.log(select_words(\"\",\
    \ 24));\nconsole.log(select_words(\"\", 25));\nconsole.log(select_words(\"\",\
    \ 26));\nconsole.log(select_words(\"\", 27));\nconsole.log(select_words(\"\",\
    \ 28));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpwgl9gh0n.js:59:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpwgl9gh0n.js:63:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ '''' ]

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            let letter = word[j];\n   \
    \         if (letter !== \"a\" && letter !== \"e\" && letter !== \"i\" && letter\
    \ !== \"o\" && letter !== \"u\") {\n                consonants++;\n          \
    \  }\n        }\n        if (consonants === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(select_words(\"\", 0));\n\
    console.log(select_words(\"\", 1));\nconsole.log(select_words(\"\", 2));\nconsole.log(select_words(\"\
    \", 3));\nconsole.log(select_words(\"\", 4));\nconsole.log(select_words(\"\",\
    \ 5));\nconsole.log(select_words(\"\", 6));\nconsole.log(select_words(\"\", 7));\n\
    console.log(select_words(\"\", 8));\nconsole.log(select_words(\"\", 9));\nconsole.log(select_words(\"\
    \", 10));\nconsole.log(select_words(\"\", 11));\nconsole.log(select_words(\"\"\
    , 12));\nconsole.log(select_words(\"\", 13));\nconsole.log(select_words(\"\",\
    \ 14));\nconsole.log(select_words(\"\", 15));\nconsole.log(select_words(\"\",\
    \ 16));\nconsole.log(select_words(\"\", 17));\nconsole.log(select_words(\"\",\
    \ 18));\nconsole.log(select_words(\"\", 19));\nconsole.log(select_words(\"\",\
    \ 20));\nconsole.log(select_words(\"\", 21));\nconsole.log(select_words(\"\",\
    \ 22));\nconsole.log(select_words(\"\", 23));\nconsole.log(select_words(\"\",\
    \ 24));\nconsole.log(select_words(\"\", 25));\nconsole.log(select_words(\"\",\
    \ 26));\nconsole.log(select_words(\"\", 27));\nconsole.log(select_words(\"\",\
    \ 28));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp0uhkg5u2.js:62:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp0uhkg5u2.js:66:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ '''' ]

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (word.length >= n) {\n            let count = 0;\n            for\
    \ (let letter of word) {\n                if (!isVowel(letter)) {\n          \
    \          count++;\n                }\n            }\n            if (count ===\
    \ n) {\n                result.push(word);\n            }\n        }\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_ekczd00.ts(13,32): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    ../../../../../tmp/tmp_ekczd00.ts(14,22): error TS2304: Cannot find name ''isVowel''.

    '
  timestamp: 1660003991
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (word.match(/[^aeiou]/gi).length === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(select_words('', 1));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpvnav7unm.js:12\n        if (word.match(/[^aeiou]/gi).length ===\
    \ n) {\n                                    ^\n\nTypeError: Cannot read properties\
    \ of null (reading 'length')\n    at select_words (/tmp/tmpvnav7unm.js:12:37)\n\
    \    at Object.<anonymous> (/tmp/tmpvnav7unm.js:18:13)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            let letter = word[j];\n   \
    \         if (letter != \"a\" && letter != \"e\" && letter != \"i\" && letter\
    \ != \"o\" && letter != \"u\") {\n                consonants++;\n            }\n\
    \        }\n        if (consonants == n) {\n            result.push(word);\n \
    \       }\n    }\n    return result;\n}\n\nconsole.log(select_words(\"\", 0));\n\
    console.log(select_words(\"\", 1));\nconsole.log(select_words(\"\", 2));\nconsole.log(select_words(\"\
    \", 3));\nconsole.log(select_words(\"\", 4));\nconsole.log(select_words(\"\",\
    \ 5));\nconsole.log(select_words(\"\", 6));\nconsole.log(select_words(\"\", 7));\n\
    console.log(select_words(\"\", 8));\nconsole.log(select_words(\"\", 9));\nconsole.log(select_words(\"\
    \", 10));\nconsole.log(select_words(\"\", 11));\nconsole.log(select_words(\"\"\
    , 12));\nconsole.log(select_words(\"\", 13));\nconsole.log(select_words(\"\",\
    \ 14));\nconsole.log(select_words(\"\", 15));\nconsole.log(select_words(\"\",\
    \ 16));\nconsole.log(select_words(\"\", 17));\nconsole.log(select_words(\"\",\
    \ 18));\nconsole.log(select_words(\"\", 19));\nconsole.log(select_words(\"\",\
    \ 20));\nconsole.log(select_words(\"\", 21));\nconsole.log(select_words(\"\",\
    \ 22));\nconsole.log(select_words(\"\", 23));\nconsole.log(select_words(\"\",\
    \ 24));\nconsole.log(select_words(\"\", 25));\nconsole.log(select_words(\"\",\
    \ 26));\nconsole.log(select_words(\"\", 27));\nconsole.log(select_words(\"\",\
    \ 28));\nconsole.log(select_\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmps6qbdls5.ts(56,1): error TS1005: '','' expected.

    ../../../../../tmp/tmps6qbdls5.ts(56,9): error TS1005: '','' expected.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    const\
    \ words = s.split(' ');\n    const result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1glu4sty.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003991
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    let words: string[] = s.split(' ');\n    for (let\
    \ word of words) {\n        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_ctgvs3_.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (word.length > 0 && count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6oes7tdi.ts(11,32): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (countConsonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp15vjszuk.ts(11,13): error TS2304: Cannot find name
    ''countConsonants''.

    '
  timestamp: 1660003991
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let count = 0;\n        for (let\
    \ j = 0; j < word.length; j++) {\n            if (!isVowel(word[j])) {\n     \
    \           count++;\n            }\n        }\n        if (count === n) {\n \
    \           result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp40340o61.ts(14,18): error TS2304: Cannot find name
    ''isVowel''.

    '
  timestamp: 1660003991
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (count_consonants(words[i]) === n) {\n            result.push(words[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpshlz5c_v.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4qhhkkwd.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (word.match(/[bcdfghjklmnpqrstvwxyz]/gi).length === n) {\n       \
    \     result.push(word);\n        }\n    }\n    return result;\n}\n\nconsole.log(select_words('',\
    \ 0));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpctnru8fk.js:12\n        if (word.match(/[bcdfghjklmnpqrstvwxyz]/gi).length\
    \ === n) {\n                                                   ^\n\nTypeError:\
    \ Cannot read properties of null (reading 'length')\n    at select_words (/tmp/tmpctnru8fk.js:12:52)\n\
    \    at Object.<anonymous> (/tmp/tmpctnru8fk.js:18:13)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (words[i].match(/[^aeiou]/g) && words[i].match(/[^aeiou]/g).length\
    \ === n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(select_words('', 0));\nconsole.log(select_words('', 1));\nconsole.log(select_words('',\
    \ 2));\nconsole.log(select_words('', 3));\nconsole.log(select_words('', 4));\n\
    console.log(select_words('', 5));\nconsole.log(select_words('', 6));\nconsole.log(select_words('',\
    \ 7));\nconsole.log(select_words('', 8));\nconsole.log(select_words('', 9));\n\
    console.log(select_words('', 10));\nconsole.log(select_words('', 11));\nconsole.log(select_words('',\
    \ 12));\nconsole.log(select_words('', 13));\nconsole.log(select_words('', 14));\n\
    console.log(select_words('', 15));\nconsole.log(select_words('', 16));\nconsole.log(select_words('',\
    \ 17));\nconsole.log(select_words('', 18));\nconsole.log(select_words('', 19));\n\
    console.log(select_words('', 20));\nconsole.log(select_words('', 21));\nconsole.log(select_words('',\
    \ 22));\nconsole.log(select_words('', 23));\nconsole.log(select_words('', 24));\n\
    console.log(select_words('', 25));\nconsole.log(select_words('', 26));\nconsole.log(select_words('',\
    \ 27));\nconsole.log(select_words('', 28));\nconsole.log(select_words('', 29));\n\
    console.log(select_words('', 30));\nconsole.log(select_words('', 31));\nconsole.log(select_words('',\
    \ 32));\nconsole.log(select_words('', 33));\nconsole.\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbbk10r2k.ts(52,9): error TS1003: Identifier expected.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            if (isConsonant(word[j])) {\n\
    \                consonants++;\n            }\n        }\n        if (consonants\
    \ === n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpeisbowcj.ts(14,17): error TS2552: Cannot find name
    ''isConsonant''. Did you mean ''consonants''?

    '
  timestamp: 1660003991
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words: string[] = s.split(' ');\n    let result: string[] = [];\n    for (let\
    \ i = 0; i < words.length; i++) {\n        if (count_consonants(words[i]) ===\
    \ n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmt9kd0_h.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4qhhkkwd.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            if (isConsonant(word[j])) {\n\
    \                consonants++;\n            }\n        }\n        if (consonants\
    \ === n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphjyk60ew.ts(14,17): error TS2552: Cannot find name
    ''isConsonant''. Did you mean ''consonants''?

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            if (isConsonant(word[j])) {\n\
    \                consonants++;\n            }\n        }\n        if (consonants\
    \ === n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpeisbowcj.ts(14,17): error TS2552: Cannot find name
    ''isConsonant''. Did you mean ''consonants''?

    '
  timestamp: 1660003991
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let count = 0;\n        for (let\
    \ j = 0; j < word.length; j++) {\n            if (isConsonant(word[j])) {\n  \
    \              count++;\n            }\n        }\n        if (count === n) {\n\
    \            result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzk9jid53.ts(14,17): error TS2304: Cannot find name
    ''isConsonant''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    const\
    \ words = s.split(' ');\n    const result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (count_consonants(words[i]) === n) {\n            result.push(words[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsi1zk894.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003996
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4qhhkkwd.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n  let words\
    \ = s.split(\" \");\n  let result = [];\n  for (let word of words) {\n    let\
    \ consonants = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (\n \
    \       word[i] != \"a\" &&\n        word[i] != \"e\" &&\n        word[i] != \"\
    i\" &&\n        word[i] != \"o\" &&\n        word[i] != \"u\"\n      ) {\n   \
    \     consonants++;\n      }\n    }\n    if (consonants == n) {\n      result.push(word);\n\
    \    }\n  }\n  return result;\n}\n\nconsole.log(select_words(\"\", 0));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpnyuq1hws.js:36:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpnyuq1hws.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ '''' ]

    '
  timestamp: 1660003996
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4qhhkkwd.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n\
    \        let cons = 0;\n        for (let letter of word) {\n            if (isConsonant(letter))\
    \ {\n                cons++;\n            }\n        }\n        if (cons === n)\
    \ {\n            result.push(word);\n        }\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp407thjo5.ts(12,28): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    ../../../../../tmp/tmp407thjo5.ts(13,17): error TS2304: Cannot find name ''isConsonant''.

    '
  timestamp: 1660003996
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (word.length > 0 && count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6oes7tdi.ts(11,32): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            let letter = word[j];\n   \
    \         if (letter != \"a\" && letter != \"e\" && letter != \"i\" && letter\
    \ != \"o\" && letter != \"u\") {\n                consonants++;\n            }\n\
    \        }\n        if (consonants == n) {\n            result.push(word);\n \
    \       }\n    }\n    return result;\n}\n\nconsole.log(select_words(\"\", 0));\n\
    console.log(select_words(\"\", 1));\nconsole.log(select_words(\"\", 2));\nconsole.log(select_words(\"\
    \", 3));\nconsole.log(select_words(\"\", 4));\nconsole.log(select_words(\"\",\
    \ 5));\nconsole.log(select_words(\"\", 6));\nconsole.log(select_words(\"\", 7));\n\
    console.log(select_words(\"\", 8));\nconsole.log(select_words(\"\", 9));\nconsole.log(select_words(\"\
    \", 10));\nconsole.log(select_words(\"\", 11));\nconsole.log(select_words(\"\"\
    , 12));\nconsole.log(select_words(\"\", 13));\nconsole.log(select_words(\"\",\
    \ 14));\nconsole.log(select_words(\"\", 15));\nconsole.log(select_words(\"\",\
    \ 16));\nconsole.log(select_words(\"\", 17));\nconsole.log(select_words(\"\",\
    \ 18));\nconsole.log(select_words(\"\", 19));\nconsole.log(select_words(\"\",\
    \ 20));\nconsole.log(select_words(\"\", 21));\nconsole.log(select_words(\"\",\
    \ 22));\nconsole.log(select_words(\"\", 23));\nconsole.log(select_words(\"\",\
    \ 24));\nconsole.log(select_words(\"\", 25));\nconsole.log(select_words(\"\",\
    \ 26));\nconsole.log(select_words(\"\", 27));\nconsole.log(select_words(\"\",\
    \ 28));\nconsole.log(select_\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmps6qbdls5.ts(56,1): error TS1005: '','' expected.

    ../../../../../tmp/tmps6qbdls5.ts(56,9): error TS1005: '','' expected.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            if (isConsonant(word[j])) {\n\
    \                consonants++;\n            }\n        }\n        if (consonants\
    \ === n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphjyk60ew.ts(14,17): error TS2552: Cannot find name
    ''isConsonant''. Did you mean ''consonants''?

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            let letter = word[j];\n   \
    \         if (letter != 'a' && letter != 'e' && letter != 'i' && letter != 'o'\
    \ && letter != 'u') {\n                consonants++;\n            }\n        }\n\
    \        if (consonants == n) {\n            result.push(word);\n        }\n \
    \   }\n    return result;\n}\nconsole.log(select_words('', 0));\nconsole.log(select_words('',\
    \ 1));\nconsole.log(select_words('', 2));\nconsole.log(select_words('', 3));\n\
    console.log(select_words('', 4));\nconsole.log(select_words('', 5));\nconsole.log(select_words('',\
    \ 6));\nconsole.log(select_words('', 7));\nconsole.log(select_words('', 8));\n\
    console.log(select_words('', 9));\nconsole.log(select_words('', 10));\nconsole.log(select_words('',\
    \ 11));\nconsole.log(select_words('', 12));\nconsole.log(select_words('', 13));\n\
    console.log(select_words('', 14));\nconsole.log(select_words('', 15));\nconsole.log(select_words('',\
    \ 16));\nconsole.log(select_words('', 17));\nconsole.log(select_words('', 18));\n\
    console.log(select_words('', 19));\nconsole.log(select_words('', 20));\nconsole.log(select_words('',\
    \ 21));\nconsole.log(select_words('', 22));\nconsole.log(select_words('', 23));\n\
    console.log(select_words('', 24));\nconsole.log(select_words('', 25));\nconsole.log(select_words('',\
    \ 26));\nconsole.log(select_words('', 27));\nconsole.log(select_words('', 28));\n\
    console.log(select_words\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5v3omsh8.ts(55,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp5v3omsh8.ts(55,9): error TS1005: '','' expected.

    '
  timestamp: 1660003996
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            if (word[j] !== \"a\" && word[j]\
    \ !== \"e\" && word[j] !== \"i\" && word[j] !== \"o\" && word[j] !== \"u\") {\n\
    \                consonants++;\n            }\n        }\n        if (consonants\
    \ === n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(select_words(\"hello world\", 2));\nconsole.log(select_words(\"\
    hello world\", 3));\nconsole.log(select_words(\"hello world\", 4));\nconsole.log(select_words(\"\
    hello world\", 5));\nconsole.log(select_words(\"hello world\", 6));\nconsole.log(select_words(\"\
    hello world\", 7));\nconsole.log(select_words(\"hello world\", 8));\nconsole.log(select_words(\"\
    hello world\", 9));\nconsole.log(select_words(\"hello world\", 10));\nconsole.log(select_words(\"\
    hello world\", 11));\nconsole.log(select_words(\"hello world\", 12));\nconsole.log(select_words(\"\
    hello world\", 13));\nconsole.log(select_words(\"hello world\", 14));\nconsole.log(select_words(\"\
    hello world\", 15));\nconsole.log(select_words(\"hello world\", 16));\nconsole.log(select_words(\"\
    hello world\", 17));\nconsole.log(select_words(\"hello world\", 18));\nconsole.log(select_words(\"\
    hello world\", 19));\nconsole.log(select_words(\"hello world\", 20));\nconsole.log(select_words(\"\
    hello world\", 21));\nconsole.log(select_words(\"hello world\", 22));\nconsole.log(select_words(\"\
    hello world\", 23));\nconsole.log(select_words(\"hello world\", 24));\nconsole.log(select_words(\"\
    hello world\", 25));\nconsole.log(select_words\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpo3h0i78c.ts(50,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpo3h0i78c.ts(50,9): error TS1005: '','' expected.

    '
  timestamp: 1660003996
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (count_consonants(words[i]) === n) {\n            result.push(words[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpshlz5c_v.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            let letter = word[j];\n   \
    \         if (letter !== 'a' && letter !== 'e' && letter !== 'i' && letter !==\
    \ 'o' && letter !== 'u') {\n                consonants++;\n            }\n   \
    \     }\n        if (consonants === n) {\n            result.push(word);\n   \
    \     }\n    }\n    return result;\n}\n\nconsole.log(select_words('', 0));\nconsole.log(select_words('',\
    \ 1));\nconsole.log(select_words('', 2));\nconsole.log(select_words('', 3));\n\
    console.log(select_words('', 4));\nconsole.log(select_words('', 5));\nconsole.log(select_words('',\
    \ 6));\nconsole.log(select_words('', 7));\nconsole.log(select_words('', 8));\n\
    console.log(select_words('', 9));\nconsole.log(select_words('', 10));\nconsole.log(select_words('',\
    \ 11));\nconsole.log(select_words('', 12));\nconsole.log(select_words('', 13));\n\
    console.log(select_words('', 14));\nconsole.log(select_words('', 15));\nconsole.log(select_words('',\
    \ 16));\nconsole.log(select_words('', 17));\nconsole.log(select_words('', 18));\n\
    console.log(select_words('', 19));\nconsole.log(select_words('', 20));\nconsole.log(select_words('',\
    \ 21));\nconsole.log(select_words('', 22));\nconsole.log(select_words('', 23));\n\
    console.log(select_words('', 24));\nconsole.log(select_words('', 25));\nconsole.log(select_words('',\
    \ 26));\nconsole.log(select_words('', 27));\nconsole.log(select_words('', 28));\n\
    console\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpnmw52957.js:62:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpnmw52957.js:66:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ '''' ]

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    '
  timestamp: 1660003997
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    let words: string[] = s.split(\" \");\n    for (let\
    \ word of words) {\n        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp79npimwh.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003996
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4qhhkkwd.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4qhhkkwd.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            if (isConsonant(word[j])) {\n\
    \                consonants++;\n            }\n        }\n        if (consonants\
    \ === n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphjyk60ew.ts(14,17): error TS2552: Cannot find name
    ''isConsonant''. Did you mean ''consonants''?

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4qhhkkwd.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    const\
    \ words = s.split(' ');\n    const result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        const word = words[i];\n        if (count_consonants(word) ===\
    \ n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppf475j4k.ts(12,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003996
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n\
    \        if (countConsonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpa0ob8v8t.ts(11,13): error TS2304: Cannot find name
    ''countConsonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n  let words\
    \ = s.split(\" \");\n  let result = [];\n  for (let word of words) {\n    let\
    \ count = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word[i] !=\
    \ \"a\" && word[i] != \"e\" && word[i] != \"i\" && word[i] != \"o\" && word[i]\
    \ != \"u\") {\n        count++;\n      }\n    }\n    if (count == n) {\n     \
    \ result.push(word);\n    }\n  }\n  return result;\n}\n\nconsole.log(select_words(\"\
    \", 0));\nconsole.log(select_words(\"\", 1));\nconsole.log(select_words(\"\",\
    \ 2));\nconsole.log(select_words(\"\", 3));\nconsole.log(select_words(\"\", 4));\n\
    console.log(select_words(\"\", 5));\nconsole.log(select_words(\"\", 6));\nconsole.log(select_words(\"\
    \", 7));\nconsole.log(select_words(\"\", 8));\nconsole.log(select_words(\"\",\
    \ 9));\nconsole.log(select_words(\"\", 10));\nconsole.log(select_words(\"\", 11));\n\
    console.log(select_words(\"\", 12));\nconsole.log(select_words(\"\", 13));\nconsole.log(select_words(\"\
    \", 14));\nconsole.log(select_words(\"\", 15));\nconsole.log(select_words(\"\"\
    , 16));\nconsole.log(select_words(\"\", 17));\nconsole.log(select_words(\"\",\
    \ 18));\nconsole.log(select_words(\"\", 19));\nconsole.log(select_words(\"\",\
    \ 20));\nconsole.log(select_words(\"\", 21));\nconsole.log(select_words(\"\",\
    \ 22));\nconsole.log(select_words(\"\", 23));\nconsole.log(select_words(\"\",\
    \ 24));\nconsole.log(select_words(\"\", 25));\nconsole.log(select_words(\"\",\
    \ 26));\nconsole.log(select_words(\"\", 27));\nconsole.log(select_words(\"\",\
    \ 28));\nconsole.log(select_words(\"\", 29));\nconsole.log(select_words(\"\",\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsa43gvc6.ts(55,9): error TS1005: '','' expected.

    '
  timestamp: 1660003996
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    const\
    \ words = s.split(' ');\n    const result = [];\n    for (let word of words) {\n\
    \        if (countConsonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpei9xx6t8.ts(11,13): error TS2304: Cannot find name
    ''countConsonants''.

    '
  timestamp: 1660003996
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (word.length > 0 && count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6oes7tdi.ts(11,32): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (word.match(/[^aeiou]/g).length === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(select_words('', 1));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp6a76lgrj.js:12\n        if (word.match(/[^aeiou]/g).length ===\
    \ n) {\n                                   ^\n\nTypeError: Cannot read properties\
    \ of null (reading 'length')\n    at select_words (/tmp/tmp6a76lgrj.js:12:36)\n\
    \    at Object.<anonymous> (/tmp/tmp6a76lgrj.js:18:13)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003997
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words: string[] = s.split(' ');\n    let result: string[] = [];\n    for (let\
    \ i = 0; i < words.length; i++) {\n        let word: string = words[i];\n    \
    \    let consonants: number = 0;\n        for (let j = 0; j < word.length; j++)\
    \ {\n            let letter: string = word[j];\n            if (letter != 'a'\
    \ && letter != 'e' && letter != 'i' && letter != 'o' && letter != 'u') {\n   \
    \             consonants++;\n            }\n        }\n        if (consonants\
    \ == n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(select_words('', 0));\nconsole.log(select_words('', 1));\nconsole.log(select_words('',\
    \ 2));\nconsole.log(select_words('', 3));\nconsole.log(select_words('', 4));\n\
    console.log(select_words('', 5));\nconsole.log(select_words('', 6));\nconsole.log(select_words('',\
    \ 7));\nconsole.log(select_words('', 8));\nconsole.log(select_words('', 9));\n\
    console.log(select_words('', 10));\nconsole.log(select_words('', 11));\nconsole.log(select_words('',\
    \ 12));\nconsole.log(select_words('', 13));\nconsole.log(select_words('', 14));\n\
    console.log(select_words('', 15));\nconsole.log(select_words('', 16));\nconsole.log(select_words('',\
    \ 17));\nconsole.log(select_words('', 18));\nconsole.log(select_words('', 19));\n\
    console.log(select_words('', 20));\nconsole.log(select_words('', 21));\nconsole.log(select_words('',\
    \ 22));\nconsole.log(select_words('', 23));\nconsole.log(select_words('', 24));\n\
    console.log(select_words('', 25));\nconsole.log(select_words('', 26));\nconsole.log(select_words('',\
    \ 27));\nconsole.log(select_\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpv0y03qx6.ts(55,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpv0y03qx6.ts(55,9): error TS1005: '','' expected.

    '
  timestamp: 1660003996
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4qhhkkwd.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            let letter = word[j];\n   \
    \         if (letter !== 'a' && letter !== 'e' && letter !== 'i' && letter !==\
    \ 'o' && letter !== 'u') {\n                consonants++;\n            }\n   \
    \     }\n        if (consonants === n) {\n            result.push(word);\n   \
    \     }\n    }\n    return result;\n}\n\nconsole.log(select_words('', 0));\nconsole.log(select_words('',\
    \ 1));\nconsole.log(select_words('', 2));\nconsole.log(select_words('', 3));\n\
    console.log(select_words('', 4));\nconsole.log(select_words('', 5));\nconsole.log(select_words('',\
    \ 6));\nconsole.log(select_words('', 7));\nconsole.log(select_words('', 8));\n\
    console.log(select_words('', 9));\nconsole.log(select_words('', 10));\nconsole.log(select_words('',\
    \ 11));\nconsole.log(select_words('', 12));\nconsole.log(select_words('', 13));\n\
    console.log(select_words('', 14));\nconsole.log(select_words('', 15));\nconsole.log(select_words('',\
    \ 16));\nconsole.log(select_words('', 17));\nconsole.log(select_words('', 18));\n\
    console.log(select_words('', 19));\nconsole.log(select_words('', 20));\nconsole.log(select_words('',\
    \ 21));\nconsole.log(select_words('', 22));\nconsole.log(select_words('', 23));\n\
    console.log(select_words('', 24));\nconsole.log(select_words('', 25));\nconsole.log(select_words('',\
    \ 26));\nconsole.log(select_words('', 27));\nconsole.log(select_words('', 28));\n\
    console\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpnmw52957.js:62:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpnmw52957.js:66:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ '''' ]

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    '
  timestamp: 1660003997
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n\
    \        let consonants = 0;\n        for (let i = 0; i < word.length; i++) {\n\
    \            if (word[i] !== \"a\" && word[i] !== \"e\" && word[i] !== \"i\" &&\
    \ word[i] !== \"o\" && word[i] !== \"u\") {\n                consonants++;\n \
    \           }\n        }\n        if (consonants === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(select_words(\"\", 1));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpr2sgj11m.js:32:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpr2sgj11m.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[]

    '
  timestamp: 1660003997
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            if (word[j] !== 'a' && word[j]\
    \ !== 'e' && word[j] !== 'i' && word[j] !== 'o' && word[j] !== 'u') {\n      \
    \          consonants++;\n            }\n        }\n        if (consonants ===\
    \ n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\nconsole.log(select_words('', 0));\nconsole.log(select_words('hello world',\
    \ 1));\nconsole.log(select_words('hello world', 2));\nconsole.log(select_words('hello\
    \ world', 3));\nconsole.log(select_words('hello world', 4));\nconsole.log(select_words('hello\
    \ world', 5));\nconsole.log(select_words('hello world', 6));\nconsole.log(select_words('hello\
    \ world', 7));\nconsole.log(select_words('hello world', 8));\nconsole.log(select_words('hello\
    \ world', 9));\nconsole.log(select_words('hello world', 10));\nconsole.log(select_words('hello\
    \ world', 11));\nconsole.log(select_words('hello world', 12));\nconsole.log(select_words('hello\
    \ world', 13));\nconsole.log(select_words('hello world', 14));\nconsole.log(select_words('hello\
    \ world', 15));\nconsole.log(select_words('hello world', 16));\nconsole.log(select_words('hello\
    \ world', 17));\nconsole.log(select_words('hello world', 18));\nconsole.log(select_words('hello\
    \ world', 19));\nconsole.log(select_words('hello world', 20));\nconsole.log(select_words('hello\
    \ world', 21));\nconsole.log(select_words('hello world', 22));\nconsole.log(select_words('hello\
    \ world', 23));\nconsole.log(select_words('hello world\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp03h0mej6.ts(48,38): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmp03h0mej6.ts(49,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp03h0mej6.ts(49,9): error TS1005: '','' expected.

    '
  timestamp: 1660003996
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    words.forEach(word => {\n\
    \        let consonants = word.match(/[^aeiou]/g);\n        if (consonants &&\
    \ consonants.length === n) {\n            result.push(word);\n        }\n    });\n\
    \    return result;\n}\n\nconsole.log(select_words(\"\", 0));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpfcpdhvvc.js:26:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpfcpdhvvc.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[]

    '
  timestamp: 1660003997
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words: string[] = s.split(' ');\n    let result: string[] = [];\n    for (let\
    \ word of words) {\n        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4qmn7dpy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003996
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n  let words\
    \ = s.split(\" \");\n  let result = [];\n  for (let word of words) {\n    if (word.match(/[^aeiou]/g)\
    \ && word.match(/[^aeiou]/g).length === n) {\n      result.push(word);\n    }\n\
    \  }\n  return result;\n}\n\nconsole.log(select_words(\"\", 1)); // []\nconsole.log(select_words(\"\
    hello world\", 1)); // [\"hello\"]\nconsole.log(select_words(\"hello world\",\
    \ 2)); // [\"world\"]\nconsole.log(select_words(\"hello world\", 3)); // []\n\
    console.log(select_words(\"hello world\", 4)); // []\nconsole.log(select_words(\"\
    hello world\", 5)); // []\nconsole.log(select_words(\"hello world\", 6)); // []\n\
    console.log(select_words(\"hello world\", 7)); // []\nconsole.log(select_words(\"\
    hello world\", 8)); // []\nconsole.log(select_words(\"hello world\", 9)); // []\n\
    console.log(select_words(\"hello world\", 10)); // []\nconsole.log(select_words(\"\
    hello world\", 11)); // []\nconsole.log(select_words(\"hello world\", 12)); //\
    \ []\nconsole.log(select_words(\"hello world\", 13)); // []\nconsole.log(select_words(\"\
    hello world\", 14)); // []\nconsole.log(select_words(\"hello world\", 15)); //\
    \ []\nconsole.log(select_words(\"hello world\", 16)); // []\nconsole.log(select_words(\"\
    hello world\", 17)); // []\nconsole.log(select_words(\"hello world\", 18)); //\
    \ []\nconsole.log(select_words(\"hello world\", 19)); // []\nconsole.log(select_words(\"\
    hello world\", 20)); // []\nconsole.log(select_words(\"hello world\", 21)); //\
    \ []\nconsole.log(select_words(\"hello world\", 22)); // []\nconsole.log(select_words(\"\
    hello world\", 23)); // []\nconsole.log(select_words(\"hello world\", 24)); //\
    \ []\nconsole.log(select_words(\"hello world\", 25)); // []\nconsole.log(select_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp48iq6id2.ts(45,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp48iq6id2.ts(45,9): error TS1005: '','' expected.

    '
  timestamp: 1660003996
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let count = 0;\n        for (let\
    \ j = 0; j < word.length; j++) {\n            if (isConsonant(word[j])) {\n  \
    \              count++;\n            }\n        }\n        if (count === n) {\n\
    \            result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzk9jid53.ts(14,17): error TS2304: Cannot find name
    ''isConsonant''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let count = 0;\n        for (let\
    \ j = 0; j < word.length; j++) {\n            if (isConsonant(word[j])) {\n  \
    \              count++;\n            }\n        }\n        if (count === n) {\n\
    \            result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyploode0.ts(14,17): error TS2304: Cannot find name
    ''isConsonant''.

    '
  timestamp: 1660003996
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (count_consonants(words[i]) === n) {\n            result.push(words[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpshlz5c_v.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let count = 0;\n        for (let\
    \ j = 0; j < word.length; j++) {\n            let letter = word[j];\n        \
    \    if (letter != \"a\" && letter != \"e\" && letter != \"i\" && letter != \"\
    o\" && letter != \"u\") {\n                count++;\n            }\n        }\n\
    \        if (count == n) {\n            result.push(word);\n        }\n    }\n\
    \    return result;\n}\n\nconsole.log(select_words(\"\", 1));\nconsole.log(select_words(\"\
    \", 0));\nconsole.log(select_words(\"\", 2));\nconsole.log(select_words(\"\",\
    \ 3));\nconsole.log(select_words(\"\", 4));\nconsole.log(select_words(\"\", 5));\n\
    console.log(select_words(\"\", 6));\nconsole.log(select_words(\"\", 7));\nconsole.log(select_words(\"\
    \", 8));\nconsole.log(select_words(\"\", 9));\nconsole.log(select_words(\"\",\
    \ 10));\nconsole.log(select_words(\"\", 11));\nconsole.log(select_words(\"\",\
    \ 12));\nconsole.log(select_words(\"\", 13));\nconsole.log(select_words(\"\",\
    \ 14));\nconsole.log(select_words(\"\", 15));\nconsole.log(select_words(\"\",\
    \ 16));\nconsole.log(select_words(\"\", 17));\nconsole.log(select_words(\"\",\
    \ 18));\nconsole.log(select_words(\"\", 19));\nconsole.log(select_words(\"\",\
    \ 20));\nconsole.log(select_words(\"\", 21));\nconsole.log(select_words(\"\",\
    \ 22));\nconsole.log(select_words(\"\", 23));\nconsole.log(select_words(\"\",\
    \ 24));\nconsole.log(select_words(\"\", 25));\nconsole.log(select_words(\"\",\
    \ 26));\nconsole.log(select_words(\"\", 27));\nconsole.log(select_words(\"\",\
    \ 28));\nconsole.log(select_words(\"\", 29\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqwvc5dum.ts(56,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpqwvc5dum.ts(56,9): error TS1005: '','' expected.

    '
  timestamp: 1660003996
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            let char = word[j];\n     \
    \       if (char !== 'a' && char !== 'e' && char !== 'i' && char !== 'o' && char\
    \ !== 'u') {\n                consonants++;\n            }\n        }\n      \
    \  if (consonants === n) {\n            result.push(word);\n        }\n    }\n\
    \    return result;\n}\n\nconsole.log(select_words('', 0));\nconsole.log(select_words('',\
    \ 1));\nconsole.log(select_words('', 2));\nconsole.log(select_words('', 3));\n\
    console.log(select_words('', 4));\nconsole.log(select_words('', 5));\nconsole.log(select_words('',\
    \ 6));\nconsole.log(select_words('', 7));\nconsole.log(select_words('', 8));\n\
    console.log(select_words('', 9));\nconsole.log(select_words('', 10));\nconsole.log(select_words('',\
    \ 11));\nconsole.log(select_words('', 12));\nconsole.log(select_words('', 13));\n\
    console.log(select_words('', 14));\nconsole.log(select_words('', 15));\nconsole.log(select_words('',\
    \ 16));\nconsole.log(select_words('', 17));\nconsole.log(select_words('', 18));\n\
    console.log(select_words('', 19));\nconsole.log(select_words('', 20));\nconsole.log(select_words('',\
    \ 21));\nconsole.log(select_words('', 22));\nconsole.log(select_words('', 23));\n\
    console.log(select_words('', 24));\nconsole.log(select_words('', 25));\nconsole.log(select_words('',\
    \ 26));\nconsole.log(select_words('', 27));\nconsole.log(select_words('', 28));\n\
    console\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpk5dhfnpp.js:62:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpk5dhfnpp.js:66:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ '''' ]

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    '
  timestamp: 1660003997
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    let words: string[] = s.split(\" \");\n    for (let\
    \ word of words) {\n        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp79npimwh.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003996
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4qhhkkwd.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words: string[] = s.split(' ');\n    let result: string[] = [];\n    for (let\
    \ i = 0; i < words.length; i++) {\n        if (count_consonants(words[i]) ===\
    \ n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmt9kd0_h.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (countConsonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp15vjszuk.ts(11,13): error TS2304: Cannot find name
    ''countConsonants''.

    '
  timestamp: 1660003991
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let count = 0;\n        for (let\
    \ j = 0; j < word.length; j++) {\n            if (is_consonant(word[j])) {\n \
    \               count++;\n            }\n        }\n        if (count === n) {\n\
    \            result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmjn2glq9.ts(14,17): error TS2304: Cannot find name
    ''is_consonant''.

    '
  timestamp: 1660003996
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words: string[] = s.split(\" \");\n    let result: string[] = [];\n    for (let\
    \ word of words) {\n        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk2epxuye.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4qhhkkwd.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (word.length > 0 && count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6oes7tdi.ts(11,32): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            if (is_consonant(word[j]))\
    \ {\n                consonants++;\n            }\n        }\n        if (consonants\
    \ === n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpynzfvhrh.ts(14,17): error TS2552: Cannot find name
    ''is_consonant''. Did you mean ''consonants''?

    '
  timestamp: 1660003997
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    const\
    \ words = s.split(\" \");\n    const result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        const word = words[i];\n        const consonants = word.match(/[^aeiou]/g);\n\
    \        if (consonants && consonants.length === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(select_words(\"\", 0));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpd69qzp5m.js:27:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpd69qzp5m.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[]

    '
  timestamp: 1660003997
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            let char = word[j];\n     \
    \       if (char != 'a' && char != 'e' && char != 'i' && char != 'o' && char !=\
    \ 'u') {\n                consonants++;\n            }\n        }\n        if\
    \ (consonants == n) {\n            result.push(word);\n        }\n    }\n    return\
    \ result;\n}\n\nconsole.log(select_words('', 0));\nconsole.log(select_words('',\
    \ 1));\nconsole.log(select_words('', 2));\nconsole.log(select_words('', 3));\n\
    console.log(select_words('', 4));\nconsole.log(select_words('', 5));\nconsole.log(select_words('',\
    \ 6));\nconsole.log(select_words('', 7));\nconsole.log(select_words('', 8));\n\
    console.log(select_words('', 9));\nconsole.log(select_words('', 10));\nconsole.log(select_words('',\
    \ 11));\nconsole.log(select_words('', 12));\nconsole.log(select_words('', 13));\n\
    console.log(select_words('', 14));\nconsole.log(select_words('', 15));\nconsole.log(select_words('',\
    \ 16));\nconsole.log(select_words('', 17));\nconsole.log(select_words('', 18));\n\
    console.log(select_words('', 19));\nconsole.log(select_words('', 20));\nconsole.log(select_words('',\
    \ 21));\nconsole.log(select_words('', 22));\nconsole.log(select_words('', 23));\n\
    console.log(select_words('', 24));\nconsole.log(select_words('', 25));\nconsole.log(select_words('',\
    \ 26));\nconsole.log(select_words('', 27));\nconsole.log(select_words('', 28));\n\
    console.log(select_\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpacldh1w3.ts(56,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpacldh1w3.ts(56,9): error TS1005: '','' expected.

    '
  timestamp: 1660004000
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let count = 0;\n        for (let\
    \ j = 0; j < word.length; j++) {\n            if (isConsonant(word[j])) {\n  \
    \              count++;\n            }\n        }\n        if (count === n) {\n\
    \            result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyploode0.ts(14,17): error TS2304: Cannot find name
    ''isConsonant''.

    '
  timestamp: 1660003996
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            let letter = word[j];\n   \
    \         if (letter !== \"a\" && letter !== \"e\" && letter !== \"i\" && letter\
    \ !== \"o\" && letter !== \"u\") {\n                consonants++;\n          \
    \  }\n        }\n        if (consonants === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(select_words(\"\", 0));\n\
    console.log(select_words(\"\", 1));\nconsole.log(select_words(\"\", 2));\nconsole.log(select_words(\"\
    \", 3));\nconsole.log(select_words(\"\", 4));\nconsole.log(select_words(\"\",\
    \ 5));\nconsole.log(select_words(\"\", 6));\nconsole.log(select_words(\"\", 7));\n\
    console.log(select_words(\"\", 8));\nconsole.log(select_words(\"\", 9));\nconsole.log(select_words(\"\
    \", 10));\nconsole.log(select_words(\"\", 11));\nconsole.log(select_words(\"\"\
    , 12));\nconsole.log(select_words(\"\", 13));\nconsole.log(select_words(\"\",\
    \ 14));\nconsole.log(select_words(\"\", 15));\nconsole.log(select_words(\"\",\
    \ 16));\nconsole.log(select_words(\"\", 17));\nconsole.log(select_words(\"\",\
    \ 18));\nconsole.log(select_words(\"\", 19));\nconsole.log(select_words(\"\",\
    \ 20));\nconsole.log(select_words(\"\", 21));\nconsole.log(select_words(\"\",\
    \ 22));\nconsole.log(select_words(\"\", 23));\nconsole.log(select_words(\"\",\
    \ 24));\nconsole.log(select_words(\"\", 25));\nconsole.log(select_words(\"\",\
    \ 26));\nconsole.log(select_words(\"\", 27));\nconsole.log(select_words(\"\",\
    \ 28));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp0uhkg5u2.js:62:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp0uhkg5u2.js:66:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ '''' ]

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    '
  timestamp: 1660003992
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (word.match(/[^aeiou]/g) && word.match(/[^aeiou]/g).length === n)\
    \ {\n            result.push(word);\n        }\n    }\n    return result;\n}\n\
    \nconsole.log(select_words(\"\", 0));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp8f3521d6.js:26:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp8f3521d6.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[]

    '
  timestamp: 1660004001
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            let letter = word[j];\n   \
    \         if (letter !== \"a\" && letter !== \"e\" && letter !== \"i\" && letter\
    \ !== \"o\" && letter !== \"u\") {\n                consonants++;\n          \
    \  }\n        }\n        if (consonants === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(select_words(\"\", 0));\n\
    console.log(select_words(\"\", 1));\nconsole.log(select_words(\"\", 2));\nconsole.log(select_words(\"\
    \", 3));\nconsole.log(select_words(\"\", 4));\nconsole.log(select_words(\"\",\
    \ 5));\nconsole.log(select_words(\"\", 6));\nconsole.log(select_words(\"\", 7));\n\
    console.log(select_words(\"\", 8));\nconsole.log(select_words(\"\", 9));\nconsole.log(select_words(\"\
    \", 10));\nconsole.log(select_words(\"\", 11));\nconsole.log(select_words(\"\"\
    , 12));\nconsole.log(select_words(\"\", 13));\nconsole.log(select_words(\"\",\
    \ 14));\nconsole.log(select_words(\"\", 15));\nconsole.log(select_words(\"\",\
    \ 16));\nconsole.log(select_words(\"\", 17));\nconsole.log(select_words(\"\",\
    \ 18));\nconsole.log(select_words(\"\", 19));\nconsole.log(select_words(\"\",\
    \ 20));\nconsole.log(select_words(\"\", 21));\nconsole.log(select_words(\"\",\
    \ 22));\nconsole.log(select_words(\"\", 23));\nconsole.log(select_words(\"\",\
    \ 24));\nconsole.log(select_words(\"\", 25));\nconsole.log(select_words(\"\",\
    \ 26));\nconsole.log(select_words(\"\", 27));\nconsole.log(select_words(\"\",\
    \ 28));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp0uhkg5u2.js:62:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp0uhkg5u2.js:66:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ '''' ]

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            let char = word[j];\n     \
    \       if (char != 'a' && char != 'e' && char != 'i' && char != 'o' && char !=\
    \ 'u') {\n                consonants++;\n            }\n        }\n        if\
    \ (consonants == n) {\n            result.push(word);\n        }\n    }\n    return\
    \ result;\n}\n\nconsole.log(select_words('', 0));\nconsole.log(select_words('',\
    \ 1));\nconsole.log(select_words('', 2));\nconsole.log(select_words('', 3));\n\
    console.log(select_words('', 4));\nconsole.log(select_words('', 5));\nconsole.log(select_words('',\
    \ 6));\nconsole.log(select_words('', 7));\nconsole.log(select_words('', 8));\n\
    console.log(select_words('', 9));\nconsole.log(select_words('', 10));\nconsole.log(select_words('',\
    \ 11));\nconsole.log(select_words('', 12));\nconsole.log(select_words('', 13));\n\
    console.log(select_words('', 14));\nconsole.log(select_words('', 15));\nconsole.log(select_words('',\
    \ 16));\nconsole.log(select_words('', 17));\nconsole.log(select_words('', 18));\n\
    console.log(select_words('', 19));\nconsole.log(select_words('', 20));\nconsole.log(select_words('',\
    \ 21));\nconsole.log(select_words('', 22));\nconsole.log(select_words('', 23));\n\
    console.log(select_words('', 24));\nconsole.log(select_words('', 25));\nconsole.log(select_words('',\
    \ 26));\nconsole.log(select_words('', 27));\nconsole.log(select_words('', 28));\n\
    console.log(select_\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpacldh1w3.ts(56,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpacldh1w3.ts(56,9): error TS1005: '','' expected.

    '
  timestamp: 1660004000
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4qhhkkwd.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n\
    \        let count = 0;\n        for (let i = 0; i < word.length; i++) {\n   \
    \         if (isConsonant(word[i])) {\n                count++;\n            }\n\
    \        }\n        if (count === n) {\n            result.push(word);\n     \
    \   }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdoowha1h.ts(13,17): error TS2304: Cannot find name
    ''isConsonant''.

    '
  timestamp: 1660004000
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4qhhkkwd.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (count_consonants(words[i]) === n) {\n            result.push(words[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpshlz5c_v.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words: string[] = s.split(\" \");\n    let result: string[] = [];\n    for (let\
    \ i: number = 0; i < words.length; i++) {\n        if (count_consonants(words[i])\
    \ === n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprrra4qkz.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660004001
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    const\
    \ words = s.split(' ');\n    const result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (countConsonants(words[i]) === n) {\n            result.push(words[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpubad0fm5.ts(11,13): error TS2304: Cannot find name
    ''countConsonants''.

    '
  timestamp: 1660004001
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let count = 0;\n        for (let\
    \ j = 0; j < word.length; j++) {\n            let char = word[j];\n          \
    \  if (char != \"a\" && char != \"e\" && char != \"i\" && char != \"o\" && char\
    \ != \"u\") {\n                count++;\n            }\n        }\n        if\
    \ (count == n) {\n            result.push(word);\n        }\n    }\n    return\
    \ result;\n}\n\nconsole.log(select_words(\"hello world\", 2));\nconsole.log(select_words(\"\
    hello world\", 3));\nconsole.log(select_words(\"hello world\", 4));\nconsole.log(select_words(\"\
    hello world\", 5));\nconsole.log(select_words(\"hello world\", 6));\nconsole.log(select_words(\"\
    hello world\", 7));\nconsole.log(select_words(\"hello world\", 8));\nconsole.log(select_words(\"\
    hello world\", 9));\nconsole.log(select_words(\"hello world\", 10));\nconsole.log(select_words(\"\
    hello world\", 11));\nconsole.log(select_words(\"hello world\", 12));\nconsole.log(select_words(\"\
    hello world\", 13));\nconsole.log(select_words(\"hello world\", 14));\nconsole.log(select_words(\"\
    hello world\", 15));\nconsole.log(select_words(\"hello world\", 16));\nconsole.log(select_words(\"\
    hello world\", 17));\nconsole.log(select_words(\"hello world\", 18));\nconsole.log(select_words(\"\
    hello world\", 19));\nconsole.log(select_words(\"hello world\", 20));\nconsole.log(select_words(\"\
    hello world\", 21));\nconsole.log(select_words(\"hello world\", 22));\nconsole.log(select_words(\"\
    hello world\", 23));\nconsole.log(select_words(\"hello world\", 24));\nconsole.log(select_words(\"\
    hello world\", 25));\nconsole.log(select_words(\"hello world\", 26));\nconsole.log(select_words(\"\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuz__lsyj.ts(51,27): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpuz__lsyj.ts(52,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpuz__lsyj.ts(52,9): error TS1005: '','' expected.

    '
  timestamp: 1660004001
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (word.match(/[^aeiou]/g).length === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\nconsole.log(select_words('', 0));\n\
    console.log(select_words('', 1));\nconsole.log(select_words('', 2));\nconsole.log(select_words('',\
    \ 3));\nconsole.log(select_words('', 4));\nconsole.log(select_words('', 5));\n\
    console.log(select_words('', 6));\nconsole.log(select_words('', 7));\nconsole.log(select_words('',\
    \ 8));\nconsole.log(select_words('', 9));\nconsole.log(select_words('', 10));\n\
    console.log(select_words('', 11));\nconsole.log(select_words('', 12));\nconsole.log(select_words('',\
    \ 13));\nconsole.log(select_words('', 14));\nconsole.log(select_words('', 15));\n\
    console.log(select_words('', 16));\nconsole.log(select_words('', 17));\nconsole.log(select_words('',\
    \ 18));\nconsole.log(select_words('', 19));\nconsole.log(select_words('', 20));\n\
    console.log(select_words('', 21));\nconsole.log(select_words('', 22));\nconsole.log(select_words('',\
    \ 23));\nconsole.log(select_words('', 24));\nconsole.log(select_words('', 25));\n\
    console.log(select_words('', 26));\nconsole.log(select_words('', 27));\nconsole.log(select_words('',\
    \ 28));\nconsole.log(select_words('', 29));\nconsole.log(select_words('', 30));\n\
    console.log(select_words('', 31));\nconsole.log(select_words('', 32));\nconsole.log(select_words('',\
    \ 33));\nconsole.log(select_words('', 34));\nconsole.log(select_words('', 35));\n\
    console.log(select_words('\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp54cl39jh.ts(53,27): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmp54cl39jh.ts(54,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp54cl39jh.ts(54,9): error TS1005: '','' expected.

    '
  timestamp: 1660004001
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4qhhkkwd.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            if (word[j] !== 'a' && word[j]\
    \ !== 'e' && word[j] !== 'i' && word[j] !== 'o' && word[j] !== 'u') {\n      \
    \          consonants++;\n            }\n        }\n        if (consonants ===\
    \ n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\nconsole.log(select_words('', 0));\nconsole.log(select_words('', 1));\nconsole.log(select_words('',\
    \ 2));\nconsole.log(select_words('', 3));\nconsole.log(select_words('', 4));\n\
    console.log(select_words('', 5));\nconsole.log(select_words('', 6));\nconsole.log(select_words('',\
    \ 7));\nconsole.log(select_words('', 8));\nconsole.log(select_words('', 9));\n\
    console.log(select_words('', 10));\nconsole.log(select_words('', 11));\nconsole.log(select_words('',\
    \ 12));\nconsole.log(select_words('', 13));\nconsole.log(select_words('', 14));\n\
    console.log(select_words('', 15));\nconsole.log(select_words('', 16));\nconsole.log(select_words('',\
    \ 17));\nconsole.log(select_words('', 18));\nconsole.log(select_words('', 19));\n\
    console.log(select_words('', 20));\nconsole.log(select_words('', 21));\nconsole.log(select_words('',\
    \ 22));\nconsole.log(select_words('', 23));\nconsole.log(select_words('', 24));\n\
    console.log(select_words('', 25));\nconsole.log(select_words('', 26));\nconsole.log(select_words('',\
    \ 27));\nconsole.log(select_words('\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1iez4osa.ts(52,27): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmp1iez4osa.ts(53,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp1iez4osa.ts(53,9): error TS1005: '','' expected.

    '
  timestamp: 1660004001
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let count = 0;\n        for (let\
    \ j = 0; j < word.length; j++) {\n            let char = word[j];\n          \
    \  if (char != 'a' && char != 'e' && char != 'i' && char != 'o' && char != 'u')\
    \ {\n                count++;\n            }\n        }\n        if (count ==\
    \ n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(select_words('', 0));\nconsole.log(select_words('', 1));\nconsole.log(select_words('',\
    \ 2));\nconsole.log(select_words('', 3));\nconsole.log(select_words('', 4));\n\
    console.log(select_words('', 5));\nconsole.log(select_words('', 6));\nconsole.log(select_words('',\
    \ 7));\nconsole.log(select_words('', 8));\nconsole.log(select_words('', 9));\n\
    console.log(select_words('', 10));\nconsole.log(select_words('', 11));\nconsole.log(select_words('',\
    \ 12));\nconsole.log(select_words('', 13));\nconsole.log(select_words('', 14));\n\
    console.log(select_words('', 15));\nconsole.log(select_words('', 16));\nconsole.log(select_words('',\
    \ 17));\nconsole.log(select_words('', 18));\nconsole.log(select_words('', 19));\n\
    console.log(select_words('', 20));\nconsole.log(select_words('', 21));\nconsole.log(select_words('',\
    \ 22));\nconsole.log(select_words('', 23));\nconsole.log(select_words('', 24));\n\
    console.log(select_words('', 25));\nconsole.log(select_words('', 26));\nconsole.log(select_words('',\
    \ 27));\nconsole.log(select_words('', 28));\nconsole.log(select_words('', 29\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7qgbkwl2.ts(56,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp7qgbkwl2.ts(56,9): error TS1005: '','' expected.

    '
  timestamp: 1660004001
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words: string[] = s.split(' ');\n    let result: string[] = [];\n    words.forEach(word\
    \ => {\n        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyy3f3u79.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660004001
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (count_consonants(words[i]) === n) {\n            result.push(words[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptv4dr9qi.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660004001
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            let char = word[j];\n     \
    \       if (char !== 'a' && char !== 'e' && char !== 'i' && char !== 'o' && char\
    \ !== 'u') {\n                consonants++;\n            }\n        }\n      \
    \  if (consonants === n) {\n            result.push(word);\n        }\n    }\n\
    \    return result;\n}\n\nconsole.log(select_words('', 0));\nconsole.log(select_words('',\
    \ 1));\nconsole.log(select_words('', 2));\nconsole.log(select_words('', 3));\n\
    console.log(select_words('', 4));\nconsole.log(select_words('', 5));\nconsole.log(select_words('',\
    \ 6));\nconsole.log(select_words('', 7));\nconsole.log(select_words('', 8));\n\
    console.log(select_words('', 9));\nconsole.log(select_words('', 10));\nconsole.log(select_words('',\
    \ 11));\nconsole.log(select_words('', 12));\nconsole.log(select_words('', 13));\n\
    console.log(select_words('', 14));\nconsole.log(select_words('', 15));\nconsole.log(select_words('',\
    \ 16));\nconsole.log(select_words('', 17));\nconsole.log(select_words('', 18));\n\
    console.log(select_words('', 19));\nconsole.log(select_words('', 20));\nconsole.log(select_words('',\
    \ 21));\nconsole.log(select_words('', 22));\nconsole.log(select_words('', 23));\n\
    console.log(select_words('', 24));\nconsole.log(select_words('', 25));\nconsole.log(select_words('',\
    \ 26));\nconsole.log(select_words('', 27));\nconsole.log(select_words('', 28));\n\
    console\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpk5dhfnpp.js:62:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpk5dhfnpp.js:66:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ '''' ]

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    '
  timestamp: 1660003997
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4qhhkkwd.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (count_consonants(words[i]) === n) {\n            result.push(words[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptv4dr9qi.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660004001
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n\
    \        if (word.length >= n) {\n            let count = 0;\n            for\
    \ (let i = 0; i < word.length; i++) {\n                if (word[i] !== \"a\" &&\
    \ word[i] !== \"e\" && word[i] !== \"i\" && word[i] !== \"o\" && word[i] !== \"\
    u\") {\n                    count++;\n                }\n            }\n     \
    \       if (count === n) {\n                result.push(word);\n            }\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(select_words(\"hello world\"\
    , 2));\nconsole.log(select_words(\"hello world\", 3));\nconsole.log(select_words(\"\
    hello world\", 4));\nconsole.log(select_words(\"hello world\", 5));\nconsole.log(select_words(\"\
    hello world\", 6));\nconsole.log(select_words(\"hello world\", 7));\nconsole.log(select_words(\"\
    hello world\", 8));\nconsole.log(select_words(\"hello world\", 9));\nconsole.log(select_words(\"\
    hello world\", 10));\nconsole.log(select_words(\"hello world\", 11));\nconsole.log(select_words(\"\
    hello world\", 12));\nconsole.log(select_words(\"hello world\", 13));\nconsole.log(select_words(\"\
    hello world\", 14));\nconsole.log(select_words(\"hello world\", 15));\nconsole.log(select_words(\"\
    hello world\", 16));\nconsole.log(select_words(\"hello world\", 17));\nconsole.log(select_words(\"\
    hello world\", 18));\nconsole.log(select_words(\"hello world\", 19));\nconsole.log(select_words(\"\
    hello world\", 20));\nconsole.log(select_words(\"hello world\", 21));\nconsole.log(select_words(\"\
    hello world\", 22));\nconsole.log(select_words(\"hello world\", 23));\nconsole.log(select_words(\"\
    hello world\", 24));\nconsole.log(select_words(\"hello world\", 25));\nconsole.log(select_words(\"\
    hello world\", 26));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmplczmuhu4.js:58:12)\n   \
    \ at Object.<anonymous> (/tmp/tmplczmuhu4.js:62:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[]

    [ ''hello'' ]

    [ ''world'' ]

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    '
  timestamp: 1660004001
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            let letter = word[j];\n   \
    \         if (letter.toLowerCase() != 'a' && letter.toLowerCase() != 'e' && letter.toLowerCase()\
    \ != 'i' && letter.toLowerCase() != 'o' && letter.toLowerCase() != 'u') {\n  \
    \              consonants++;\n            }\n        }\n        if (consonants\
    \ == n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(select_words(\"The quick brown fox jumps over the lazy dog\"\
    , 4));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ ''brown'', ''jumps'' ]

    '
  timestamp: 1660004001
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    let words: string[] = s.split(' ');\n    for (let\
    \ word of words) {\n        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_ctgvs3_.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4qhhkkwd.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (words[i].match(/[^aeiou]/g).length === n) {\n          \
    \  result.push(words[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(select_words(\"\
    hello world\", 2));\nconsole.log(select_words(\"hello world\", 3));\nconsole.log(select_words(\"\
    \", 3));\nconsole.log(select_words(\"hello world\", 0));\nconsole.log(select_words(\"\
    hello world\", 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmphc5wpmgy.js:11\n        if (words[i].match(/[^aeiou]/g).length\
    \ === n) {\n                                       ^\n\nTypeError: Cannot read\
    \ properties of null (reading 'length')\n    at select_words (/tmp/tmphc5wpmgy.js:11:40)\n\
    \    at Object.<anonymous> (/tmp/tmphc5wpmgy.js:19:13)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: '[]

    [ ''hello'' ]

    '
  timestamp: 1660004001
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4qhhkkwd.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (word.length > 0 && count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6oes7tdi.ts(11,32): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n\
    \        if (word.match(/[^aeiou]/g) && word.match(/[^aeiou]/g).length === n)\
    \ {\n            result.push(word);\n        }\n    }\n    return result;\n}\n\
    \nconsole.log(select_words(\"\", 0));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp3cxr9cbh.js:26:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp3cxr9cbh.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[]

    '
  timestamp: 1660004001
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4qhhkkwd.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n\
    \        let count = 0;\n        for (let i = 0; i < word.length; i++) {\n   \
    \         if (word[i] != \"a\" && word[i] != \"e\" && word[i] != \"i\" && word[i]\
    \ != \"o\" && word[i] != \"u\") {\n                count++;\n            }\n \
    \       }\n        if (count == n) {\n            result.push(word);\n       \
    \ }\n    }\n    return result;\n}\n\nconsole.log(select_words(\"\", 0));\nconsole.log(select_words(\"\
    \", 1));\nconsole.log(select_words(\"\", 2));\nconsole.log(select_words(\"\",\
    \ 3));\nconsole.log(select_words(\"\", 4));\nconsole.log(select_words(\"\", 5));\n\
    console.log(select_words(\"\", 6));\nconsole.log(select_words(\"\", 7));\nconsole.log(select_words(\"\
    \", 8));\nconsole.log(select_words(\"\", 9));\nconsole.log(select_words(\"\",\
    \ 10));\nconsole.log(select_words(\"\", 11));\nconsole.log(select_words(\"\",\
    \ 12));\nconsole.log(select_words(\"\", 13));\nconsole.log(select_words(\"\",\
    \ 14));\nconsole.log(select_words(\"\", 15));\nconsole.log(select_words(\"\",\
    \ 16));\nconsole.log(select_words(\"\", 17));\nconsole.log(select_words(\"\",\
    \ 18));\nconsole.log(select_words(\"\", 19));\nconsole.log(select_words(\"\",\
    \ 20));\nconsole.log(select_words(\"\", 21));\nconsole.log(select_words(\"\",\
    \ 22));\nconsole.log(select_words(\"\", 23));\nconsole.log(select_words(\"\",\
    \ 24));\nconsole.log(select_words(\"\", 25));\nconsole.log(select_words(\"\",\
    \ 26));\nconsole.log(select_words(\"\", 27));\nconsole.log(select_words(\"\",\
    \ 28));\nconsole.log(select_words(\"\", 29));\nconsole.log(select_words(\"\",\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_cue543n.ts(55,9): error TS1005: '','' expected.

    '
  timestamp: 1660004001
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4qhhkkwd.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            if (is_consonant(word[j]))\
    \ {\n                consonants++;\n            }\n        }\n        if (consonants\
    \ === n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpynzfvhrh.ts(14,17): error TS2552: Cannot find name
    ''is_consonant''. Did you mean ''consonants''?

    '
  timestamp: 1660003997
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            if (isConsonant(word[j])) {\n\
    \                consonants++;\n            }\n        }\n        if (consonants\
    \ === n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphjyk60ew.ts(14,17): error TS2552: Cannot find name
    ''isConsonant''. Did you mean ''consonants''?

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    let words: string[] = s.split(\" \");\n    for (let\
    \ word of words) {\n        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp79npimwh.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003996
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    let words: string[] = s.split(\" \");\n    for (let\
    \ i: number = 0; i < words.length; i++) {\n        if (count_consonants(words[i])\
    \ === n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdec69orw.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660004001
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4qhhkkwd.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    let words: string[] = s.split(' ');\n    for (let\
    \ word of words) {\n        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_ctgvs3_.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4qhhkkwd.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4qhhkkwd.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (word.length > 0 && count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6oes7tdi.ts(11,32): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let count = 0;\n        for (let\
    \ j = 0; j < word.length; j++) {\n            if (isConsonant(word[j])) {\n  \
    \              count++;\n            }\n        }\n        if (count === n) {\n\
    \            result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyploode0.ts(14,17): error TS2304: Cannot find name
    ''isConsonant''.

    '
  timestamp: 1660003996
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (count_consonants(words[i]) === n) {\n            result.push(words[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptv4dr9qi.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660004001
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    const\
    \ words: string[] = s.split(' ');\n    const result: string[] = [];\n    for (let\
    \ word of words) {\n        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_rp2ulw_.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660004001
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4qhhkkwd.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            if (word[j] != 'a' && word[j]\
    \ != 'e' && word[j] != 'i' && word[j] != 'o' && word[j] != 'u') {\n          \
    \      consonants++;\n            }\n        }\n        if (consonants == n) {\n\
    \            result.push(word);\n        }\n    }\n    return result;\n}\n\nconsole.log(select_words('',\
    \ 0));\nconsole.log(select_words('', 1));\nconsole.log(select_words('', 2));\n\
    console.log(select_words('', 3));\nconsole.log(select_words('', 4));\nconsole.log(select_words('',\
    \ 5));\nconsole.log(select_words('', 6));\nconsole.log(select_words('', 7));\n\
    console.log(select_words('', 8));\nconsole.log(select_words('', 9));\nconsole.log(select_words('',\
    \ 10));\nconsole.log(select_words('', 11));\nconsole.log(select_words('', 12));\n\
    console.log(select_words('', 13));\nconsole.log(select_words('', 14));\nconsole.log(select_words('',\
    \ 15));\nconsole.log(select_words('', 16));\nconsole.log(select_words('', 17));\n\
    console.log(select_words('', 18));\nconsole.log(select_words('', 19));\nconsole.log(select_words('',\
    \ 20));\nconsole.log(select_words('', 21));\nconsole.log(select_words('', 22));\n\
    console.log(select_words('', 23));\nconsole.log(select_words('', 24));\nconsole.log(select_words('',\
    \ 25));\nconsole.log(select_words('', 26));\nconsole.log(select_words('', 27));\n\
    console.log(select_words('', 28));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpy8e3hk7j.js:60:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpy8e3hk7j.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ '''' ]

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    '
  timestamp: 1660004001
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    const\
    \ result: string[] = [];\n    const words = s.split(' ');\n    for (let word of\
    \ words) {\n        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjn8fy3ua.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660004001
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4qhhkkwd.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n  let result:\
    \ string[] = [];\n  let words: string[] = s.split(\" \");\n  for (let i = 0; i\
    \ < words.length; i++) {\n    if (countConsonants(words[i]) === n) {\n      result.push(words[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5gy4uew4.ts(11,9): error TS2304: Cannot find name
    ''countConsonants''.

    '
  timestamp: 1660004001
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    words.forEach(word => {\n \
    \       let consonants = word.match(/[bcdfghjklmnpqrstvwxyz]/gi);\n        if\
    \ (consonants && consonants.length === n) {\n            result.push(word);\n\
    \        }\n    });\n    return result;\n}\n\nconsole.log(select_words('', 1));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[]

    '
  timestamp: 1660004002
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4qhhkkwd.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n  let words\
    \ = s.split(\" \");\n  let result = [];\n  for (let i = 0; i < words.length; i++)\
    \ {\n    let word = words[i];\n    let count = 0;\n    for (let j = 0; j < word.length;\
    \ j++) {\n      let char = word[j];\n      if (char !== \"a\" && char !== \"e\"\
    \ && char !== \"i\" && char !== \"o\" && char !== \"u\") {\n        count++;\n\
    \      }\n    }\n    if (count === n) {\n      result.push(word);\n    }\n  }\n\
    \  return result;\n}\nconsole.log(select_words(\"\", 1));\nconsole.log(select_words(\"\
    a\", 1));\nconsole.log(select_words(\"a a\", 1));\nconsole.log(select_words(\"\
    a a\", 2));\nconsole.log(select_words(\"a a\", 3));\nconsole.log(select_words(\"\
    a a a\", 1));\nconsole.log(select_words(\"a a a\", 2));\nconsole.log(select_words(\"\
    a a a\", 3));\nconsole.log(select_words(\"a a a\", 4));\nconsole.log(select_words(\"\
    a a a a\", 1));\nconsole.log(select_words(\"a a a a\", 2));\nconsole.log(select_words(\"\
    a a a a\", 3));\nconsole.log(select_words(\"a a a a\", 4));\nconsole.log(select_words(\"\
    a a a a\", 5));\nconsole.log(select_words(\"a a a a a\", 1));\nconsole.log(select_words(\"\
    a a a a a\", 2));\nconsole.log(select_words(\"a a a a a\", 3));\nconsole.log(select_words(\"\
    a a a a a\", 4));\nconsole.log(select_words(\"a a a a a\", 5));\nconsole.log(select_words(\"\
    a a a a a\", 6));\nconsole.log(select_words(\"a a a a a a\", 1));\nconsole.log(select_words(\"\
    a a a a a a\", 2));\nconsole.log(select_words(\"a\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpi8hedgz4.ts(47,28): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpi8hedgz4.ts(48,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpi8hedgz4.ts(48,9): error TS1005: '','' expected.

    '
  timestamp: 1660004002
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (word.match(/[bcdfghjklmnpqrstvwxyz]/gi).length === n) {\n       \
    \     result.push(word);\n        }\n    }\n    return result;\n}\n\nconsole.log(select_words('',\
    \ 0));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpctnru8fk.js:12\n        if (word.match(/[bcdfghjklmnpqrstvwxyz]/gi).length\
    \ === n) {\n                                                   ^\n\nTypeError:\
    \ Cannot read properties of null (reading 'length')\n    at select_words (/tmp/tmpctnru8fk.js:12:52)\n\
    \    at Object.<anonymous> (/tmp/tmpctnru8fk.js:18:13)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n\
    \        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqth28dy.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n\
    \        let consonants = 0;\n        for (let i = 0; i < word.length; i++) {\n\
    \            if (word[i] != \"a\" && word[i] != \"e\" && word[i] != \"i\" && word[i]\
    \ != \"o\" && word[i] != \"u\") {\n                consonants++;\n           \
    \ }\n        }\n        if (consonants == n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(select_words(\"\", 0));\n\
    console.log(select_words(\"\", 1));\nconsole.log(select_words(\"\", 2));\nconsole.log(select_words(\"\
    \", 3));\nconsole.log(select_words(\"\", 4));\nconsole.log(select_words(\"\",\
    \ 5));\nconsole.log(select_words(\"\", 6));\nconsole.log(select_words(\"\", 7));\n\
    console.log(select_words(\"\", 8));\nconsole.log(select_words(\"\", 9));\nconsole.log(select_words(\"\
    \", 10));\nconsole.log(select_words(\"\", 11));\nconsole.log(select_words(\"\"\
    , 12));\nconsole.log(select_words(\"\", 13));\nconsole.log(select_words(\"\",\
    \ 14));\nconsole.log(select_words(\"\", 15));\nconsole.log(select_words(\"\",\
    \ 16));\nconsole.log(select_words(\"\", 17));\nconsole.log(select_words(\"\",\
    \ 18));\nconsole.log(select_words(\"\", 19));\nconsole.log(select_words(\"\",\
    \ 20));\nconsole.log(select_words(\"\", 21));\nconsole.log(select_words(\"\",\
    \ 22));\nconsole.log(select_words(\"\", 23));\nconsole.log(select_words(\"\",\
    \ 24));\nconsole.log(select_words(\"\", 25));\nconsole.log(select_words(\"\",\
    \ 26));\nconsole.log(select_words(\"\", 27));\nconsole.log(select_words(\"\",\
    \ 28));\nconsole.log(select_words(\"\", 29));\nconsole.log(select\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_rcbunef.ts(55,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp_rcbunef.ts(55,9): error TS1005: '','' expected.

    '
  timestamp: 1660004002
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ result: string[] = [];\n    let words: string[] = s.split(' ');\n    for (let\
    \ i = 0; i < words.length; i++) {\n        if (count_consonants(words[i]) ===\
    \ n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptucdhbt_.ts(11,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660004002
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let count = 0;\n        for (let\
    \ j = 0; j < word.length; j++) {\n            if (isConsonant(word[j])) {\n  \
    \              count++;\n            }\n        }\n        if (count === n) {\n\
    \            result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzk9jid53.ts(14,17): error TS2304: Cannot find name
    ''isConsonant''.

    '
  timestamp: 1660003992
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s: string, n: number): string[] {\n    let\
    \ words = s.split(' ');\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (words[i].match(/[bcdfghjklmnpqrstvwxyz]/gi).length === n)\
    \ {\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(select_words('', 0));\nconsole.log(select_words('', 1));\nconsole.log(select_words('',\
    \ 2));\nconsole.log(select_words('', 3));\nconsole.log(select_words('', 4));\n\
    console.log(select_words('', 5));\nconsole.log(select_words('', 6));\nconsole.log(select_words('',\
    \ 7));\nconsole.log(select_words('', 8));\nconsole.log(select_words('', 9));\n\
    console.log(select_words('', 10));\nconsole.log(select_words('', 11));\nconsole.log(select_words('',\
    \ 12));\nconsole.log(select_words('', 13));\nconsole.log(select_words('', 14));\n\
    console.log(select_words('', 15));\nconsole.log(select_words('', 16));\nconsole.log(select_words('',\
    \ 17));\nconsole.log(select_words('', 18));\nconsole.log(select_words('', 19));\n\
    console.log(select_words('', 20));\nconsole.log(select_words('', 21));\nconsole.log(select_words('',\
    \ 22));\nconsole.log(select_words('', 23));\nconsole.log(select_words('', 24));\n\
    console.log(select_words('', 25));\nconsole.log(select_words('', 26));\nconsole.log(select_words('',\
    \ 27));\nconsole.log(select_words('', 28));\nconsole.log(select_words('', 29));\n\
    console.log(select_words('', 30));\nconsole.log(select_words('', 31));\nconsole.log(select_words('',\
    \ 32));\nconsole.log(select_words('', 33));\nconsole.log(select_words('',\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgvk24l3j.ts(53,9): error TS1005: '','' expected.

    '
  timestamp: 1660004002
