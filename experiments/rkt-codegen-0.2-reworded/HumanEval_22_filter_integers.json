{
  "name": "HumanEval_22_filter_integers",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers values)\n",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)",
  "completions": [
    "  (if (null? values)\n    values\n    (let ((result ()))\n      (for-each (lambda (x)\n                  (if (integer? x)\n                    (result (cons x result))\n                    (result ()))\n                values))\n      (reverse result))))\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" 3.14 5))\n;; (list \"a\" \"3.14\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"1\" \"2\" \"3\")",
    "  (if (null? values)\n    values\n    (let ((result ()))\n      (for-each (lambda (value)\n                  (if (integer? value)\n                    (result (cons value result))\n                    ()))\n        values)))\n)\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (let* ((values (list-seq values))\n         (result (list)))\n    (while (not (null? values))\n      (let ((value (car values)))\n        (if (integer? value)\n            (append result value)\n            (values (cdr values))))\n      (values (cdr values))))\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" 3.14 5))\n;; (list \"a\" \"3.14\" \"5\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"1\" \"2\" \"3\")",
    "  (if (null? values)\n    values\n    (if (integer? (car values))\n      (cdr values)\n      (filter_integers (cdr values))))\n)\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (let* ((values (list-to-vector values)))\n    (vector-map (lambda (x) (integer? x)) values)))\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (cond\n    ((null? values) #t)\n    ((null? (car values)) #f)\n    (else\n      (let ((value (car values)))\n        (if (integer? value)\n            (car values)\n            (filter_integers (cdr values)))))))\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 3.14)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (if (null? values)\n    values\n    (let ((result (list)))\n      (for-each (lambda (x)\n                  (if (integer? x)\n                    (result (append result x))\n                    ()))\n        values)))\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" 3.14 5))\n;; (list \"a\" \"3.14\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"1\" \"2\" \"3\")",
    "  (if (null? values)\n    values\n    (let ((result (list)))\n      (for-each (lambda (value)\n                  (if (integer? value)\n                    (list value)\n                    (result (append result (list value))))\n                values))\n      (return result))))\n",
    "  (cond ((null? values) #t)\n        ((null? (car values)) #f)\n        ((integer? (car values)) (car values))\n        (else (filter_integers (cdr values))))\n)\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (if (null? values)\n    values\n    (let ((i 0))\n      (while (< i (length values))\n        (if (integer? (car values i))\n          (setf values (cdr values))\n          (setf i (1+ i)))))))\n",
    "  (if (null? values)\n    values\n    (let ((result (list)))\n      (for-each (lambda (x)\n                  (if (integer? x)\n                    (result (cons x result))\n                    ()))\n        values)))\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" 3.14 5))\n;; (list \"a\" \"3.14\" \"5\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"1\" \"2\" \"3\")",
    "  (let* ((values (list-seq values))\n         (result (list)))\n    (while (not (null? values))\n      (let ((value (car values)))\n        (if (integer? value)\n            (result (append result value))\n            (values (cdr values))))))\n  result)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" \"b\" \"c\"))\n;; (list \"a\" \"b\" \"c\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"1\" \"2\" \"3\")",
    "  (if (null? values)\n    values\n    (let ((result (list)))\n      (for-each (lambda (x)\n                  (if (integer? x)\n                    (result (cons x result))\n                    (result (cons x x))))\n        values)))\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" 3.14 5))\n;; (list \"a\" \"3.14\" \"5\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"1\" \"2\" \"3\")",
    "  (cond\n    ((null? values) \"\")\n    ((null? (car values)) \"\")\n    (else\n      (if (integer? (car values))\n        (cons (car values) (filter_integers (cdr values)))\n      (else\n        (filter_integers (cdr values))))))\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" \"b\" \"c\"))\n;; (list \"a\" \"b\" \"c\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (cond\n    ((null? values) #f)\n    ((null? (car values)) #f)\n    (else\n      (cond\n        ((integer? (car values)) #t)\n        ((integer? (car (cdr values))) #t)\n        (else #f)\n      )\n    )\n  )\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" 3.14 5))\n;; (list \"a\" \"3.14\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"1\" \"2\" \"3\")",
    "  (if (null? values)\n    values\n    (if (integer? (car values))\n      (cdr (filter_integers (cdr values)))\n      (cons (car values) (filter_integers (cdr values))))))\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" \"b\" \"c\"))\n;; (list \"a\" \"b\" \"c\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (if (null? values)\n    values\n    (let* ([i (0)])\n      (while (< i (length values))\n        (if (integer? (car values i))\n          (set! i (+ i 1))\n          (else\n            (values (cdr values) i)))))))\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\"",
    "  (let ((values (list values)))\n    (if (null? values)\n      values\n      (let ((values (list values)))\n        (if (null? values)\n          values\n          (let ((values (list values)))\n            (if (null? values)\n              values\n              (let ((values (list values)))\n                (if (null? values)\n                  values\n                  (let ((values (list values)))\n                    (if (null? values)\n                      values\n                      (let ((values (list values)))\n                        (if (null? values)\n                          values\n                          (let ((values (list values)))\n                            (if (null? values)\n                              values\n                              (let ((values (list values)))\n                                (if (null? values)\n                                  values\n                                  (let ((values (list values)))\n                                    (if (null? values)\n                                      values\n                                      (let ((values (list values)))\n                                        (if (null? values)\n                                          values\n                                          (let ((values (list values)))\n                                            (if (null? values)\n                                              values\n                                              (let ((values (list values)))\n                                                (if (null? values)\n                                                  values\n                                                  (let ((values (list values)))\n                                                    (if (null? values)\n                                                      values\n                                                      (let ((values (list values)))\n                                                        (if (null? values)\n                                                          values\n                                                          (let ((values (list values)))\n                                                            (if (null? values)\n                                                              values\n                                                              (let ((values (list values)))\n                                                                (if (null? values)\n                                                                  values\n                                                                  (let ((values (list values)))\n                                                                    (if (null? values)\n                                                                      values\n                                                                      (let ((values (list values)))\n                                                                        (if (null? values)\n                                                                          values\n                               ",
    "  (let* ((values (seq values))\n         (result ()))\n    (while (not (null? values))\n      (if (integer? (car values))\n        (result (cdr values))\n        (values (cdr values))))\n    result))\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" \"b\" \"c\"))\n;; (list \"a\" \"b\" \"c\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"1\" \"2\" \"3\")",
    "  (if (null? values)\n    values\n    (if (integer? (car values))\n      (cons (car values) (filter_integers (cdr values)))\n      (filter_integers (cdr values))))\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" \"b\" \"c\"))\n;; (list \"a\" \"b\" \"c\")\n;; >>> (filter_strings (list 1 2 3 \"abc\"))\n;; (list \"abc\")",
    "  (let* ((values (list-seq values))\n         (result (list)))\n    (while (not (null? values))\n      (let ((value (car values)))\n        (if (integer? value)\n            (append result value)\n            (values (cdr values))))\n      (values (cdr values))))\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" 3.14 5))\n;; (list \"a\" \"3.14\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"1\" \"2\" \"3\")",
    "  (if (null? values)\n    values\n    (let ((result ()))\n      (for-each (lambda (value)\n                  (if (integer? value)\n                    (result (cons value result))\n                    ()))\n        values)))\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" 3.14 5))\n;; (list \"a\" \"3.14\" \"5\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"1\" \"2\" \"3\")",
    "  (let* ((values (list-to-vector values))\n         (result (make-vector 0 (length values))))\n    (for-each\n      (lambda (value)\n        (if (integer? value)\n            (vector-set! result (vector-ref result) value)\n            (values)))\n      values))\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" 3.14 5))\n;; (list \"a\" \"3.14\" \"5\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"1\" \"2\" \"3\")",
    "  (cond\n    [(null? values) (values)]\n    [(integer? (car values)) (cons (car values) (filter_integers (cdr values)))]\n    [else (filter_integers (cdr values))]\n  )\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" \"abc\" \"123\"))\n;; (list \"abc\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"abc\")",
    "  (if (null? values)\n    values\n    (if (integer? (car values))\n      (cdr (filter_integers (cdr values)))\n      (cons (car values) (filter_integers (cdr values))))))\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (if (null? values)\n    values\n    (let* ([p (first values)]\n           [n (length values)])\n      (if (null? n)\n        values\n        (let* ([i 0]\n                [result (make-vector n 0)])\n          (while (< i n)\n            (if (integer? (car values[i]))\n              (set! result (vector-set! result i (car values[i])))\n              (set! i (1+ i)))\n            (set! i (1+ i)))\n          result)))\n  ))\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (cond\n    ((null? values) #f)\n    (else\n      (let ((result (make-vector 0 (length values))))\n        (for-each\n          (lambda (value)\n            (if (integer? value)\n              (vector-set! result (vector-ref result) value)\n              #f))\n          values))\n      (vector-length result)))\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" \"b\" \"c\"))\n;; (list \"a\" \"b\" \"c\")\n;; >>> (filter_strings (list 1 2 3 \"abc\"))\n;; (list \"1\" \"2\" \"3\")",
    "  (if (null? values)\n    values\n    (let ((result ()))\n      (for-each (lambda (x)\n                  (if (integer? x)\n                    (result (cons x result))\n                    ()))\n        values)))\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" \"abc\" 3.14 5))\n;; (list \"abc\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"abc\")",
    "  (if (null? values)\n    values\n    (let ((result ()))\n      (for-each (lambda (x)\n                  (if (integer? x)\n                    (result (cons x result))\n                    ()))\n        values)))\n)\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (if (null? values)\n    values\n    (let ((result ()))\n      (for-each (lambda (x)\n                  (if (integer? x)\n                    (result (cons x result))\n                    ()))\n        values)))\n)\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (let* ((values (list-map (lambda (x) (if (integer? x) x #f)) values))\n         (result (list)))\n    (for-each result (lambda (x) (if (integer? x) (list x) #f))))\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" 3.14 5))\n;; (list \"a\" \"3.14\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"1\" \"2\" \"3\")",
    "  (cond\n    ((null? values) #f)\n    ((null? (car values)) #f)\n    (else\n      (if (integer? (car values))\n        (car values)\n        (filter_integers (cdr values))))))\n",
    "  (if (null? values)\n    values\n    (let ((result ()))\n      (for-each (lambda (x)\n                  (if (integer? x)\n                    (result (cons x result))\n                    ()))\n        values)))\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" \"abc\"))\n;; (list \"abc\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"abc\")",
    "  (let* ((values (list-seq values))\n         (result (list)))\n    (while (not (null? values))\n      (let ((value (car values)))\n        (if (integer? value)\n            (append result value)\n            (values (cdr values))))\n      (values (cdr values))))\n)\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (if (null? values)\n    values\n    (let ((i 0))\n      (while (< i (length values))\n        (if (integer? (car values i))\n          (setf values (cdr values))\n          (setf i (1+ i)))))))\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (let* ((values (list-seq values))\n         (result (list)))\n    (while (not (null? values))\n      (let ((value (car values)))\n        (if (integer? value)\n            (list value)\n            (result (append result (cdr values))))))\n    result))\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" \"b\" \"c\"))\n;; (list \"a\" \"b\" \"c\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"1\" \"2\" \"3\")",
    "  (if (null? values)\n    values\n    (let* ([integers (filter (lambda (x) (integer? x)) values)])\n      (if (null? integers)\n        integers\n        (let* ([non_integers (filter (lambda (x) (not (integer? x))) integers)])\n          (if (null? non_integers)\n            non_integers\n            (let* ([non_integers_2 (filter (lambda (x) (not (integer? x))) non_integers)])\n              (if (null? non_integers_2)\n                non_integers_2\n                (let* ([non_integers_3 (filter (lambda (x) (not (integer? x))) non_integers_2)])\n                  (if (null? non_integers_3)\n                    non_integers_3\n                    (let* ([non_integers_4 (filter (lambda (x) (not (integer? x))) non_integers_3)])\n                      (if (null? non_integers_4)\n                        non_integers_4\n                        (let* ([non_integers_5 (filter (lambda (x) (not (integer? x))) non_integers_4)])\n                          (if (null? non_integers_5)\n                            non_integers_5\n                            (let* ([non_integers_6 (filter (lambda (x) (not (integer? x))) non_integers_5)])\n                              (if (null? non_integers_6)\n                                non_integers_6\n                                (let* ([non_integers_7 (filter (lambda (x) (not (integer? x))) non_integers_6)])\n                                  (if (null? non_integers_7)\n                                    non_integers_7\n                                    (let* ([non_integers_8 (filter (lambda (x) (not (integer? x))) non_integers_7)])\n                                      (if (null? non_integers_8)\n                                        non_integers_8\n                                        (let* ([non_integers_9 (filter (lambda (",
    "  (cond\n    ((null? values) \"\")\n    ((integer? (car values)))\n    (else (filter_integers (cdr values))))\n)\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (cond\n    ((null? values) #t)\n    ((null? (car values)) #f)\n    ((integer? (car values)) (car values))\n    (else (filter_integers (cdr values))))\n)\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (if (null? values)\n    values\n    (let* ([n (length values)])\n      (if (> n 0)\n        (let* ([i 0])\n          (while (< i n)\n            (if (integer? (car values[i]))\n              (values[i])\n              (values[i] (cdr values[i]))\n              (set! i (i + 1))\n            )\n          )\n        )\n      )\n    )\n  )\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" \"abc\" 3.14 5))\n;; (list \"abc\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"abc\")",
    "  (if (null? values)\n    values\n    (let ((result ()))\n      (for-each (lambda (x)\n                  (if (integer? x)\n                    (result (cons x result))\n                    ()))\n        values)))\n)\n",
    "  (if (null? values)\n    values\n    (let* ([i (1)] (while (not (null? values))\n               (if (integer? (car values))\n                 (values (cdr values))\n                 (values (cdr values) i)\n               )\n               i))))\n",
    "  (if (null? values)\n    values\n    (let ((result ()))\n      (for-each (lambda (x)\n                  (if (integer? x)\n                    (result (cons x result))\n                    (result ()))\n                values))\n      result)))\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" 3.14 5))\n;; (list \"a\" \"3.14\" \"5\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"1\" \"2\" \"3\")",
    "  (if (null? values)\n    values\n    (let ((result ()))\n      (for-each (lambda (x)\n                  (if (integer? x)\n                    (result (cons x result))\n                    ()))\n        values)))\n)\n",
    "  (cond\n    ((null? values) #f)\n    ((null? (car values)) #f)\n    (else\n      (if (integer? (car values))\n        (cons (car values) (filter_integers (cdr values)))\n      (else\n        (filter_integers (cdr values))))))\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" 3.14 5))\n;; (list \"a\" \"3.14\" \"5\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"1\" \"2\" \"3\")",
    "  (cond\n    ((null? values) \"\")\n    ((integer? (car values)) (car values))\n    (else (filter_integers (cdr values))))\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" \"b\" \"c\"))\n;; (list \"a\" \"b\" \"c\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"1\" \"2\" \"3\")",
    "  (cond\n    ((null? values) \"\")\n    ((integer? (car values)) (car values))\n    (else (filter_integers (cdr values))))\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" 3.14 5))\n;; (list \"a\" \"3.14\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"1\" \"2\" \"3\")",
    "  (if (null? values)\n    values\n    (let* ([(first (car values)) (rest (cdr values))]\n           [(first-int (first first)) (rest-int (rest first))]\n           [(first-int-2 (first first-int)) (rest-int-2 (rest first-int))]\n           [(first-int-3 (first first-int-2)) (rest-int-3 (rest first-int-2))]\n           [(first-int-4 (first first-int-3)) (rest-int-4 (rest first-int-3))]\n           [(first-int-5 (first first-int-4)) (rest-int-5 (rest first-int-4))]\n           [(first-int-6 (first first-int-5)) (rest-int-6 (rest first-int-5))]\n           [(first-int-7 (first first-int-6)) (rest-int-7 (rest first-int-6))]\n           [(first-int-8 (first first-int-7)) (rest-int-8 (rest first-int-7))]\n           [(first-int-9 (first first-int-8)) (rest-int-9 (rest first-int-8))]\n           [(first-int-10 (first first-int-9)) (rest-int-10 (rest first-int-9))]\n           [(first-int-11 (first first-int-10)) (rest-int-11 (rest first-int-10))]\n           [(first-int-12 (first first-int-11)) (rest-int-12 (rest first-int-11))]\n           [(first-int-13 (first first-int-12)) (rest-int-13 (rest first-int-12))]\n           [(first-int-14 (first first-int-13)) (rest-int-14 (rest first-int-13))]\n           [(first-int-15 (first first-int-14)) (rest-int-15 (rest first-int-14))]\n           [(first-int-16 (first first-int-15))",
    "  (if (null? values)\n    values\n    (let ((result ()))\n      (for-each (lambda (x)\n                  (if (integer? x)\n                    (result (cons x result))\n                    ()))\n        values)))\n)\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (if (null? values)\n    values\n    (let ((values (cons (car values) values)))\n      (if (integer? (car values))\n        values\n        (filter_integers (cdr values))))))\n",
    "  (if (null? values)\n    values\n    (let ((result (list)))\n      (for-each (lambda (x)\n                  (if (integer? x)\n                    (result (append result x))\n                    ()))\n        values)))\n)\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (if (null? values)\n    values\n    (let ((result (make-vector 0 (length values))))\n      (for-each (lambda (value)\n                  (if (integer? value)\n                    (vector-set! result (vector-ref result) value)\n                    ()))\n        values)))\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" 3.14 5))\n;; (list \"a\" \"3.14\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"1\" \"2\" \"3\")",
    "  (if (null? values)\n    values\n    (let ((values (cons (car values) values)))\n      (if (integer? (car values))\n        values\n        (filter_integers (cdr values))))))\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" 3.14 5))\n;; (list \"a\" 3.14 5)\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"abc\")",
    "  (if (null? values)\n    values\n    (let ((result (make-vector 0 (length values))))\n      (for-each (lambda (x) (vector-set! result x)) values)\n      result)))\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (if (null? values)\n    values\n    (let ((values (list values)))\n      (if (null? values)\n        values\n        (let ((values (list values)))\n          (if (null? values)\n            values\n            (let ((values (list values)))\n              (if (null? values)\n                values\n                (let ((values (list values)))\n                  (if (null? values)\n                    values\n                    (let ((values (list values)))\n                      (if (null? values)\n                        values\n                        (let ((values (list values)))\n                          (if (null? values)\n                            values\n                            (let ((values (list values)))\n                              (if (null? values)\n                                values\n                                (let ((values (list values)))\n                                  (if (null? values)\n                                    values\n                                    (let ((values (list values)))\n                                      (if (null? values)\n                                        values\n                                        (let ((values (list values)))\n                                          (if (null? values)\n                                            values\n                                            (let ((values (list values)))\n                                              (if (null? values)\n                                                values\n                                                (let ((values (list values)))\n                                                  (if (null? values)\n                                                    values\n                                                    (let ((values (list values)))\n                                                      (if (null? values)\n                                                        values\n                                                        (let ((values (list values)))\n                                                         (if (null? values)\n                                                           values\n                                                           (let ((values (list values)))\n                                                            (if (null? values)\n                                                              values\n                                                              (let ((values (list values)))\n                                                                (if (null? values)\n                                                                  values\n                                                                  (let ((values (list values)))\n                                                                    (if (null? values)\n                                                                      values\n                                                                      (let ((values (list values)))",
    "  (cond\n    ((null? values) #f)\n    ((null? (car values)) #f)\n    (else\n      (if (integer? (car values))\n          values\n          (filter_integers (cdr values))))))\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (if (null? values)\n    values\n    (let ((result (list)))\n      (for-each (lambda (x)\n                  (if (integer? x)\n                    (result (cons x result))\n                    (result (cons x x))))\n        values)))\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" \"b\" \"c\"))\n;; (list \"a\" \"b\" \"c\")\n;; >>> (filter_strings (list 1 2 3 \"abc\"))\n;; (list \"abc\")",
    "  (if (null? values)\n    values\n    (let ((result (list)))\n      (for-each (lambda (value)\n                  (if (integer? value)\n                    (result (append result value))\n                    ()))\n        values)))\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" 3.14 5))\n;; (list \"a\" \"3.14\" \"5\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"1\" \"2\" \"3\")",
    "  (cond\n    ((null? values) #f)\n    ((null? (car values)) #f)\n    (else\n      (if (integer? (car values))\n          (car values)\n          (filter_integers (cdr values))))))\n",
    "  (if (null? values)\n    values\n    (if (integer? (car values))\n      (cdr values)\n      (filter_integers (cdr values))))\n)\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (if (null? values)\n    values\n    (let ((result (make-vector 0 (length values))))\n      (for-each (lambda (value)\n                  (if (integer? value)\n                    (vector-set! result (vector-ref result) value)\n                    ()))\n        values)))\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" 3.14 5))\n;; (list \"a\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"a\" \"b\" \"c\")",
    "  (if (null? values)\n    values\n    (if (integer? (car values))\n      (cdr (filter_integers (cdr values)))\n      (cons (car values) (filter_integers (cdr values))))))\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (let* ((values (list-to-vector values))\n         (result (make-vector 0 (length values))))\n    (for-each (lambda (value)\n                (if (integer? value)\n                    (vector-set! result (vector-ref result) value)))\n      values))\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" 3.14 5))\n;; (list \"a\" \"3.14\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"1\" \"2\" \"3\")",
    "  (if (null? values)\n    values\n    (let ((values (list values)))\n      (if (null? values)\n        values\n        (let ((values (list values)))\n          (if (null? values)\n            values\n            (let ((values (list values)))\n              (if (null? values)\n                values\n                (let ((values (list values)))\n                  (if (null? values)\n                    values\n                    (let ((values (list values)))\n                      (if (null? values)\n                        values\n                        (let ((values (list values)))\n                          (if (null? values)\n                            values\n                            (let ((values (list values)))\n                              (if (null? values)\n                                values\n                                (let ((values (list values)))\n                                  (if (null? values)\n                                    values\n                                    (let ((values (list values)))\n                                      (if (null? values)\n                                        values\n                                        (let ((values (list values)))\n                                          (if (null? values)\n                                            values\n                                            (let ((values (list values)))\n                                              (if (null? values)\n                                                values\n                                                (let ((values (list values)))\n                                                  (if (null? values)\n                                                    values\n                                                    (let ((values (list values)))\n                                                      (if (null? values)\n                                                        values\n                                                        (let ((values (list values)))\n                                                         (if (null? values)\n                                                           values\n                                                           (let ((values (list values)))\n                                                            (if (null? values)\n                                                              values\n                                                              (let ((values (list values)))\n                                                                (if (null? values)\n                                                                  values\n                                                                  (let ((values (list values)))\n                                                                    (if (null? values)\n                                                                      values\n                                                                      (let ((values (list values)))",
    "  (if (null? values)\n    values\n    (if (integer? (car values))\n      (cdr values)\n      (filter_integers (cdr values))))\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" 3.14 5))\n;; (list \"a\" \"3.14\" \"5\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"1\" \"2\" \"3\")",
    "  (cond\n    ((null? values) #f)\n    ((null? (car values)) #f)\n    ((integer? (car values)) (car values))\n    (else (filter_integers (cdr values)))))\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (if (null? values)\n    values\n    (let ((i 0))\n      (while (< i (length values))\n        (if (integer? (car values i))\n          (set! i (+ i 1))\n          (values (cdr values)))))))\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" \"abc\" \"abc\" \"abc\"))\n;; (list \"abc\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"abc\")",
    "  (cond\n    ((null? values) #f)\n    (else\n      (let ((result ()))\n        (for-each (lambda (x)\n                    (if (integer? x)\n                        (result (cons x result))\n                        #f))\n                  values))\n      (reverse result))))\n",
    "  (let* ((values (seq values))\n         (result ()))\n    (while (not (null? values))\n      (if (integer? (car values))\n        (result (car values))\n        (values (cdr values))))\n    result))\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (if (null? values)\n    values\n    (let ((result (make-vector 0 (length values))))\n      (for-each (lambda (x) (vector-set! result x x)) values)\n      result)))\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (if (null? values)\n    values\n    (let ((result ()))\n      (for-each (lambda (x)\n                  (if (integer? x)\n                    (result (cons x result))\n                    (result ()))\n                 values)\n        result)))\n)\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (if (null? values)\n    values\n    (let ((values (list values)))\n      (if (null? values)\n        values\n        (let ((values (list values)))\n          (if (null? values)\n            values\n            (let ((values (list values)))\n              (if (null? values)\n                values\n                (let ((values (list values)))\n                  (if (null? values)\n                    values\n                    (let ((values (list values)))\n                      (if (null? values)\n                        values\n                        (let ((values (list values)))\n                          (if (null? values)\n                            values\n                            (let ((values (list values)))\n                              (if (null? values)\n                                values\n                                (let ((values (list values)))\n                                  (if (null? values)\n                                    values\n                                    (let ((values (list values)))\n                                      (if (null? values)\n                                        values\n                                        (let ((values (list values)))\n                                          (if (null? values)\n                                            values\n                                            (let ((values (list values)))\n                                              (if (null? values)\n                                                values\n                                                (let ((values (list values)))\n                                                  (if (null? values)\n                                                    values\n                                                    (let ((values (list values)))\n                                                      (if (null? values)\n                                                        values\n                                                        (let ((values (list values)))\n                                                         (if (null? values)\n                                                           values\n                                                           (let ((values (list values)))\n                                                            (if (null? values)\n                                                              values\n                                                              (let ((values (list values)))\n                                                                (if (null? values)\n                                                                  values\n                                                                  (let ((values (list values)))\n                                                                    (if (null? values)\n                                                                      values\n                                                                      (let ((values (list values)))",
    "  (let* ((values (list-to-vector values))\n         (result (make-vector 0 (vector-length values))))\n    (for-each\n      (lambda (x)\n        (if (integer? x)\n            (vector-set! result (vector-ref result) x)\n            (vector-set! result (vector-ref result) #f)))\n      values))\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" \"abc\" 3.14 5))\n;; (list \"abc\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"abc\")",
    "  (let ((values (list-to-vector values)))\n    (vector-map (lambda (x) (integer? x)) values)))\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (if (null? values)\n    values\n    (let ((i 0))\n      (while (< i (length values))\n        (if (integer? (car values i))\n          (setf values (cdr values))\n          (setf i (1+ i)))))))\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" \"b\" \"c\"))\n;; (list \"a\" \"b\" \"c\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"1\" \"2\" \"3\")",
    "  (if (null? values)\n    values\n    (let ((result (list)))\n      (for-each (lambda (x)\n                  (if (integer? x)\n                    (result (append result x))\n                    (result (append result (list x))))\n                values))\n      (return (reverse result))))\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" 3.14 5))\n;; (list \"a\" \"3.14\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"1\" \"2\" \"3\")",
    "  (if (null? values)\n    values\n    (let ((values (list values)))\n      (if (null? values)\n        values\n        (let ((values (list values)))\n          (if (null? values)\n            values\n            (let ((values (list values)))\n              (if (null? values)\n                values\n                (let ((values (list values)))\n                  (if (null? values)\n                    values\n                    (let ((values (list values)))\n                      (if (null? values)\n                        values\n                        (let ((values (list values)))\n                          (if (null? values)\n                            values\n                            (let ((values (list values)))\n                              (if (null? values)\n                                values\n                                (let ((values (list values)))\n                                  (if (null? values)\n                                    values\n                                    (let ((values (list values)))\n                                      (if (null? values)\n                                        values\n                                        (let ((values (list values)))\n                                          (if (null? values)\n                                            values\n                                            (let ((values (list values)))\n                                              (if (null? values)\n                                                values\n                                                (let ((values (list values)))\n                                                  (if (null? values)\n                                                    values\n                                                    (let ((values (list values)))\n                                                      (if (null? values)\n                                                        values\n                                                        (let ((values (list values)))\n                                                         (if (null? values)\n                                                           values\n                                                           (let ((values (list values)))\n                                                            (if (null? values)\n                                                              values\n                                                              (let ((values (list values)))\n                                                                (if (null? values)\n                                                                  values\n                                                                  (let ((values (list values)))\n                                                                    (if (null? values)\n                                                                      values\n                                                                      (let ((values (list values)))",
    "  (cond\n    ((null? values) #f)\n    ((null? (car values)) #f)\n    ((integer? (car values)) (car values))\n    (else (filter_integers (cdr values)))))\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (if (null? values)\n    values\n    (let ((result (list)))\n      (for-each (lambda (x)\n                  (if (integer? x)\n                    (result (append result x))\n                    (else\n                      (if (null? result)\n                        (result (append result x))\n                        (else\n                          (if (null? result)\n                            (result (append result x))\n                            (else\n                              (if (null? result)\n                                (result (append result x))\n                                (else\n                                  (if (null? result)\n                                    (result (append result x))\n                                    (else\n                                      (if (null? result)\n                                        (result (append result x))\n                                        (else\n                                          (if (null? result)\n                                            (result (append result x))\n                                            (else\n                                              (if (null? result)\n                                                (result (append result x))\n                                                (else\n                                                  (if (null? result)\n                                                    (result (append result x))\n                                                    (else\n                                                      (if (null? result)\n                                                        (result (append result x))\n                                                        (else\n                                                          (if (null? result)\n                                                            (result (append result x))\n                                                           (else\n                                                            (if (null? result)\n                                                              (result (append result x))\n                                                              (else\n                                                                (if (null? result)\n                                                                  (result (append result x))\n                                                                  (else\n                                                                    (if (null? result)\n                                                                      (result (append result x))\n                                                                      (else\n                                                                        (if (null? result)\n                                                                          (result (append result x))\n                                                                          (else\n                                                                            (if (null? result)\n                                                                              (result (",
    "  (if (null? values)\n    values\n    (let* ([(first (car values)) (rest (cdr values))]\n           [(first-int (first first)) (rest-int (rest first))]\n           [(rest-int-2 (rest rest))])\n      (if (null? rest-int-2)\n        (list first-int)\n        (let* ([(first (car rest-int-2)) (rest (cdr rest-int-2))]\n                [(first-int (first first)) (rest-int (rest first))]\n                [(rest-int-3 (rest rest))])\n          (if (null? rest-int-3)\n            (list first-int first-int-2)\n            (let* ([(first (car rest-int-3)) (rest (cdr rest-int-3))]\n                    [(first-int-2 (first first)) (rest-int (rest first))]\n                    [(rest-int-4 (rest rest))])\n              (if (null? rest-int-4)\n                (list first-int first-int-2 first-int-2-1)\n                (let* ([(first (car rest-int-4)) (rest (cdr rest-int-4))]\n                        [(first-int-2-1 (first first-int-2))\n                         (rest-int (rest first-int-2))]\n                        [(rest-int-5 (rest rest))])\n                  (if (null? rest-int-5)\n                    (list first-int first-int-2 first-int-2-1\n                                      first-int-2-1-1)\n                    (let* ([(first (car rest-int-5)) (rest (cdr rest-int-5))]\n                            [(first-int-2-1-1 (first first-int-2-1))\n                             (rest-int (rest first-int-2-1))]\n                            [(rest-int-6 (rest rest))])\n                      (if (null? rest-int-6)\n                        (list first-int first-int-2 first-int-2-1\n                                    ",
    "  (if (null? values)\n    values\n    (filter (lambda (x) (integer? x)) values)))\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (if (null? values)\n    values\n    (let* ([(first (car values)) (rest (cdr values))]\n           [(is_int (first first)) (is_int rest)])\n      (if (is_int first)\n        (filter_integers rest)\n        (cons first rest))))\n)\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (if (null? values)\n    values\n    (if (integer? (car values))\n      (cons (car values) (filter_integers (cdr values)))\n      (filter_integers (cdr values))))\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" \"b\" \"c\"))\n;; (list \"a\" \"b\" \"c\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"a\" \"b\" \"c\")",
    "  (if (null? values)\n    values\n    (let ((result (make-vector 0 (length values))))\n      (for-each (lambda (x)\n                  (if (integer? x)\n                    (vector-set! result x (vector-ref values x))))\n        values)))\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" 3.14 5))\n;; (list \"a\" \"3.14\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"1\" \"2\" \"3\")",
    "  (if (null? values)\n    values\n    (let ((values (list values)))\n      (if (null? values)\n        values\n        (let ((values (list values)))\n          (if (null? values)\n            values\n            (let ((values (list values)))\n              (if (null? values)\n                values\n                (let ((values (list values)))\n                  (if (null? values)\n                    values\n                    (let ((values (list values)))\n                      (if (null? values)\n                        values\n                        (let ((values (list values)))\n                          (if (null? values)\n                            values\n                            (let ((values (list values)))\n                              (if (null? values)\n                                values\n                                (let ((values (list values)))\n                                  (if (null? values)\n                                    values\n                                    (let ((values (list values)))\n                                      (if (null? values)\n                                        values\n                                        (let ((values (list values)))\n                                          (if (null? values)\n                                            values\n                                            (let ((values (list values)))\n                                              (if (null? values)\n                                                values\n                                                (let ((values (list values)))\n                                                  (if (null? values)\n                                                    values\n                                                    (let ((values (list values)))\n                                                      (if (null? values)\n                                                        values\n                                                        (let ((values (list values)))\n                                                         (if (null? values)\n                                                           values\n                                                           (let ((values (list values)))\n                                                            (if (null? values)\n                                                              values\n                                                              (let ((values (list values)))\n                                                                (if (null? values)\n                                                                  values\n                                                                  (let ((values (list values)))\n                                                                    (if (null? values)\n                                                                      values\n                                                                      (let ((values (list values)))",
    "  (if (null? values)\n    values\n    (let* ((i (1)))\n      (while (< i (length values))\n        (if (integer? (car values i))\n          (values (cdr values))\n          (set! i (+ i 1)))))\n    (values)))\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" \"b\" \"c\"))\n;; (list \"a\" \"b\" \"c\")\n;; >>> (filter_strings (list 1 2 3 \"abc\"))\n;; (list \"1\" \"2\" \"3\")",
    "  (if (null? values)\n    values\n    (let* ([integers (filter (lambda (x) (integer? x)) values)])\n      (if (null? integers)\n        integers\n        (let* ([non_integers (filter (lambda (x) (not (integer? x))) integers)])\n          (if (null? non_integers)\n            non_integers\n            (let* ([non_integers_again (filter (lambda (x) (not (integer? x))) non_integers)])\n              (if (null? non_integers_again)\n                non_integers_again\n                values))))))))\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (let* ((values (seq values))\n         (result (make-vector 0 (length values))))\n    (for ([i (in-range 0 (length values))])\n      (if (integer? (first values))\n        (set-car! result i)\n        (values (cdr values))))\n    result))\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" \"abc\"))\n;; (list \"abc\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"abc\")",
    "  (cond\n    ((null? values) \"\")\n    ((null? (car values)) \"\")\n    (else\n      (let ((result (list)))\n        (for-each\n          (lambda (x)\n            (if (integer? x)\n              (result (cons x result))\n              (else\n                (return \"\"))))\n          (car values)))\n      (car (cdr values))))\n",
    "  (cond\n    ((null? values) \"\")\n    ((integer? (car values)) (car values))\n    (else (filter_integers (cdr values))))\n)\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (cond\n    ((null? values) \"\")\n    ((null? (car values)) \"\")\n    (else\n      (if (integer? (car values))\n          (car values)\n          (filter_integers (cdr values))))))\n",
    "  (if (null? values)\n    values\n    (let ((i 0))\n      (while (< i (length values))\n        (if (integer? (car values i))\n          (set! i (+ i 1))\n          (else\n            (set! i (+ i 2))))\n        values))))\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" \"b\" \"c\"))\n;; (list \"a\" \"b\" \"c\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"1\" \"2\" \"3\")",
    "  (if (null? values)\n    values\n    (let ((result ()))\n      (for-each (lambda (x)\n                  (if (integer? x)\n                    (result (cons x result))\n                    ()))\n        values)))\n)\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (if (null? values)\n    values\n    (let ((result ()))\n      (for-each (lambda (x)\n                  (if (integer? x)\n                    (result (cons x result))\n                    ()))\n        values)))\n)\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (cond\n    ((null? values) #f)\n    ((null? (car values)) #f)\n    (else\n      (let ((value (car values)))\n        (cond\n          ((integer? value) value)\n          (else (filter_integers (cdr values)))))))))\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" 3.14 5))\n;; (list \"a\" \"3.14\" \"5\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"1\" \"2\" \"3\")",
    "  (if (null? values)\n    values\n    (let ((result ()))\n      (for-each (lambda (x)\n                  (if (integer? x)\n                    (result (cons x result))\n                    ()))\n        values)))\n)\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (let* ((values (seq values))\n         (result (make-vector 0 (length values))))\n    (for ([i (in-range 0 (length values))])\n      (if (integer? (first values))\n        (set-car! result i)\n        (values (cdr values))))\n    result))\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" \"b\" \"c\"))\n;; (list \"a\" \"b\" \"c\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (let* ((values (seq values))\n         (result (make-vector 0 (length values))))\n    (for ([i (in-range 0 (length values))])\n      (if (integer? (first values))\n        (set-vector-set! result i (first values))\n        (values (cdr values))))\n    result))\n",
    "  (cond\n    ((null? values) #f)\n    ((null? (car values)) #f)\n    (else\n      (if (integer? (car values))\n          (car values)\n          (filter_integers (cdr values))))))\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (cond\n    ((null? values) #f)\n    ((null? (car values)) #f)\n    ((integer? (car values)) (car values))\n    (else (filter_integers (cdr values))))\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" \"b\" \"c\"))\n;; (list \"a\" \"b\" \"c\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"a\" \"b\" \"c\")",
    "  (if (null? values)\n    values\n    (let ((result (make-vector 0 (length values))))\n      (for-each (lambda (value)\n                  (if (integer? value)\n                    (vector-set! result (vector-ref result) value)\n                    (vector-set! result (vector-ref result) #f)))\n        values)))\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" \"abc\" \"123\"))\n;; (list \"abc\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"abc\")",
    "  (if (null? values)\n    values\n    (let ((result ()))\n      (for-each (lambda (x)\n                  (if (integer? x)\n                    (result (cons x result))\n                    (result ()))\n                values)\n        (result))))\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" 3.14 5))\n;; (list \"a\" \"3.14\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"1\" \"2\" \"3\")",
    "  (let* ((values (list-to-vector values))\n         (result (make-vector 0 (length values))))\n    (for-each (lambda (x) (vector-set! result x)) values)\n    result))\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" \"b\" \"c\"))\n;; (list \"a\" \"b\" \"c\")\n;; >>> (filter_strings (list 1 2 3 \"abc\"))\n;; (list \"abc\")",
    "  (if (null? values)\n    values\n    (let ((i (1)))\n      (while (< i (length values))\n        (if (integer? (car values i))\n          (values (cdr values))\n          (set! i (+ i 1))))))))\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (if (null? values)\n    values\n    (let ((result (list)))\n      (for-each (lambda (x)\n                  (if (integer? x)\n                    (result (cons x result))\n                    (result (cons x x))))\n        values)))\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" \"b\" \"c\"))\n;; (list \"a\" \"b\" \"c\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (let* ((values (list-seq values))\n         (result (list)))\n    (while (not (null? values))\n      (let ((value (car values)))\n        (if (integer? value)\n            (result (append result value))\n            (values (cdr values))))))\n  result)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" 3.14 5))\n;; (list \"a\" \"3.14\" \"5\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"1\" \"2\" \"3\")",
    "  (cond\n    ((null? values) #f)\n    ((null? (car values)) #f)\n    ((integer? (car values)) (car values))\n    (else (filter_integers (cdr values))))\n)\n",
    "  (if (null? values)\n    values\n    (let* ([n (length values)])\n      (if (> n 0)\n        (let* ([i 0])\n          (while (< i n)\n            (if (integer? (values i))\n              (values (values i))\n              (values (values (values i) (values (values i) + 1))))\n            (set! i (+ i 1)))))))\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" \"abc\" 3.14 5))\n;; (list \"abc\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"abc\")",
    "  (if (null? values)\n    values\n    (let ((result ()))\n      (for-each (lambda (x)\n                  (if (integer? x)\n                    (result (cons x result))\n                    ()))\n        values)))\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" 3.14 5))\n;; (list \"a\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"a\" \"b\" \"c\")",
    "  (cond\n    ((null? values) #f)\n    ((null? (car values)) #f)\n    (else\n      (if (integer? (car values))\n        (cons (car values) (filter_integers (cdr values)))\n        (filter_integers (cdr values))))))\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (if (null? values)\n    values\n    (let ((result ()))\n      (for-each (lambda (value)\n                  (if (integer? value)\n                    (result (cons value result))\n                    (result value))))\n      (result values))))\n",
    "  (if (null? values)\n    values\n    (let* ([p (first values)]\n           [q (cdr values)])\n      (if (null? q)\n        p\n        (filter_integers (cons p q))))))\n",
    "  (cond\n    ((null? values) #f)\n    ((null? (car values)) #f)\n    (else\n      (if (integer? (car values))\n          (car values)\n          (filter_integers (cdr values))))))\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (let* ((values (list-seq values))\n         (result (list)))\n    (while (not (null? values))\n      (let* ((value (car values))\n             (result (append result (if (integer? value) value #f))))\n        (values (cdr values))))\n    result))\n",
    "  (if (null? values)\n    values\n    (let ((i 0))\n      (while (< i (length values))\n        (if (integer? (car values i))\n          (setf values (cdr values) (cdr values))\n          (setf i (1+ i)))))))\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" 3.14 5))\n;; (list \"a\" \"3.14\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"1\" \"2\" \"3\")",
    "  (if (null? values)\n    values\n    (let ((i 0))\n      (while (< i (length values))\n        (if (integer? (car values i))\n          (setf values (cdr values))\n          (setf i (1+ i)))))))\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (if (null? values)\n    values\n    (let ((result (list)))\n      (for-each (lambda (value)\n                  (if (integer? value)\n                    (result (append result value))\n                    ()))\n        values)))\n)\n",
    "  (cond ((null? values) \"\")\n         ((null? (car values)) \"\")\n         (integer? (car (car values)))\n         (integer? (car (cdr values)))\n         (true)\n         (false)))\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (if (null? values)\n    values\n    (let ((i 0))\n      (while (< i (length values))\n        (if (integer? (car values))\n          (set! i (+ i 1))\n          (values (cdr values)))))))\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" \"b\" \"c\"))\n;; (list \"a\" \"b\" \"c\")\n;; >>> (filter_strings (list 1 2 3 \"abc\"))\n;; (list \"1\" \"2\" \"3\")",
    "  (let* ((values (seq values))\n         (result ()))\n    (while (not (null? values))\n      (let ((value (car values)))\n        (if (integer? value)\n          (result (cons value result))\n          (values (cdr values))))))\n  result)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" 3.14 5))\n;; (list \"a\" \"3.14\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"1\" \"2\" \"3\")",
    "  (if (null? values)\n    values\n    (if (integer? (car values))\n      (cdr values)\n      (filter_integers (cdr values))))\n)\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (cond\n    ((null? values) #f)\n    ((null? (car values)) #f)\n    ((integer? (car values)) (car values))\n    (else (filter_integers (cdr values))))\n)\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (if (null? values)\n    values\n    (let ((values (list values)))\n      (if (null? values)\n        values\n        (let ((values (list values)))\n          (if (null? values)\n            values\n            (let ((values (list values)))\n              (if (null? values)\n                values\n                (let ((values (list values)))\n                  (if (null? values)\n                    values\n                    (let ((values (list values)))\n                      (if (null? values)\n                        values\n                        (let ((values (list values)))\n                          (if (null? values)\n                            values\n                            (let ((values (list values)))\n                              (if (null? values)\n                                values\n                                (let ((values (list values)))\n                                  (if (null? values)\n                                    values\n                                    (let ((values (list values)))\n                                      (if (null? values)\n                                        values\n                                        (let ((values (list values)))\n                                          (if (null? values)\n                                            values\n                                            (let ((values (list values)))\n                                              (if (null? values)\n                                                values\n                                                (let ((values (list values)))\n                                                  (if (null? values)\n                                                    values\n                                                    (let ((values (list values)))\n                                                      (if (null? values)\n                                                        values\n                                                        (let ((values (list values)))\n                                                         (if (null? values)\n                                                           values\n                                                           (let ((values (list values)))\n                                                            (if (null? values)\n                                                              values\n                                                              (let ((values (list values)))\n                                                                (if (null? values)\n                                                                  values\n                                                                  (let ((values (list values)))\n                                                                    (if (null? values)\n                                                                      values\n                                                                      (let ((values (list values)))",
    "  (if (null? values)\n    values\n    (let ((result (make-vector 0 (length values))))\n      (for-each (lambda (value)\n                  (if (integer? value)\n                    (vector-set! result value)\n                    ()))\n        values)))\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" 3.14 5))\n;; (list \"a\" \"3.14\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"1\" \"2\" \"3\")",
    "  (let* ((values (list-to-vector values))\n         (result (make-vector 0 (vector-length values))))\n    (for-each\n      (lambda (value)\n        (if (integer? value)\n            (vector-set! result (vector-ref result) value)\n            (vector-set! result (vector-ref result) #f)))\n      values))\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" \"b\" \"c\"))\n;; (list \"a\" \"b\" \"c\")\n;; >>> (filter_strings (list 1 2 3 \"abc\"))\n;; (list \"1\" \"2\" \"3\")",
    "  (if (null? values)\n    values\n    (let* ([p (first values)]\n           [q (rest values)])\n      (if (null? q)\n        p\n        (filter_integers (cons p q))))))\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (if (null? values)\n    values\n    (let ((result (list)))\n      (for-each (lambda (x)\n                  (if (integer? x)\n                    (result (cons x result))\n                    ()))\n        values)))\n)\n",
    "  (if (null? values)\n    values\n    (if (integer? (car values))\n      (cdr values)\n      (filter_integers (cdr values))))\n)\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (if (null? values)\n    values\n    (let ((result (list)))\n      (for-each (lambda (x)\n                  (if (integer? x)\n                    (result (append result x))\n                    (result (append result (list x))))\n                values))\n      (return (reverse result))))\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" 3.14 5))\n;; (list \"a\" \"3.14\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"1\" \"2\" \"3\")",
    "  (cond\n    ((null? values) #f)\n    ((null? (car values)) #f)\n    ((integer? (car values)) (car values))\n    (else (filter_integers (cdr values))))\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" \"b\" \"c\"))\n;; (list \"a\" \"b\" \"c\")\n;; >>> (filter_strings (list 1 2 3 \"abc\"))\n;; (list \"abc\")",
    "  (if (null? values)\n    values\n    (let* ([integers (map (lambda (x) (if (integer? x) x #f)) values)])\n      (if (null? integers)\n        integers\n        (let* ([integers (filter integers)])\n          (if (null? integers)\n            integers\n            (let* ([integers (filter integers)])\n              (if (null? integers)\n                integers\n                (let* ([integers (filter integers)])\n                  (if (null? integers)\n                    integers\n                    values))))))))))\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" 3.14 5))\n;; (list \"a\" \"3.14\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"1\" \"2\" \"3\")",
    "  (if (null? values)\n    values\n    (let ((values (list values)))\n      (if (null? (first values))\n        (second values)\n        (filter_integers (rest values))))))\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (if (null? values)\n    values\n    (let ((result (make-vector 0 (length values))))\n      (for-each (lambda (x)\n                  (if (integer? x)\n                    (vector-set! result x (vector-ref values x))))\n        values)))\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" 3.14 5))\n;; (list \"a\" \"3.14\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"1\" \"2\" \"3\")",
    "  (if (null? values)\n    values\n    (let ((result (list)))\n      (for-each (lambda (value)\n                  (if (integer? value)\n                    (result (cons value result))\n                    (result (cons value))))\n        values)))\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" 3.14 5))\n;; (list \"a\" \"3.14\" \"5\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"1\" \"2\" \"3\")",
    "  (cond\n    ((null? values) #f)\n    ((null? (car values)) #f)\n    ((integer? (car values)) (car values))\n    (else (filter_integers (cdr values))))\n)\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (if (null? values)\n    values\n    (let* ([result (list)])\n      (for-each (lambda (x)\n                  (if (integer? x)\n                    (result (append result x))\n                    (result (append result (list x))))\n                values)\n        result)))\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" \"abc\" 3.14 5))\n;; (list \"abc\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"abc\")",
    "  (cond\n    ((null? values) #f)\n    ((null? (car values)) #f)\n    ((integer? (car values)) (car values))\n    (else (filter_integers (cdr values))))\n)\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (let* ([values (list-to-vector values)])\n    (vector-map (lambda (x) (integer? x)) values)))\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (if (null? values)\n    values\n    (let ((result ()))\n      (for-each (lambda (x)\n                  (if (integer? x)\n                    (result (cons x result))\n                    ()))\n        values)))\n)\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (let* ((values (list-seq values))\n         (result (list)))\n    (while (not (null? values))\n      (let ((value (car values)))\n        (if (integer? value)\n            (result (append result value))\n            (values (cdr values))))))\n  result)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" \"abc\"))\n;; (list \"abc\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"abc\")",
    "  (cond\n    ((null? values) #t)\n    ((null? (car values)) #f)\n    (else\n      (let ((result (make-vector 0 (length values))))\n        (for-each (lambda (value)\n                    (if (integer? value)\n                        (vector-set! result (vector-ref result) value)\n                        #f))\n          values))\n      (vector-length result))))\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" \"b\" \"c\"))\n;; (list \"a\" \"b\" \"c\")\n;; >>> (filter_strings (list 1 2 3 \"abc\"))\n;; (list \"abc\")",
    "  (if (null? values)\n    values\n    (let ((values (list values)))\n      (if (null? values)\n        values\n        (let ((values (list values)))\n          (if (null? values)\n            values\n            (let ((values (list values)))\n              (if (null? values)\n                values\n                (let ((values (list values)))\n                  (if (null? values)\n                    values\n                    (let ((values (list values)))\n                      (if (null? values)\n                        values\n                        (let ((values (list values)))\n                          (if (null? values)\n                            values\n                            (let ((values (list values)))\n                              (if (null? values)\n                                values\n                                (let ((values (list values)))\n                                  (if (null? values)\n                                    values\n                                    (let ((values (list values)))\n                                      (if (null? values)\n                                        values\n                                        (let ((values (list values)))\n                                          (if (null? values)\n                                            values\n                                            (let ((values (list values)))\n                                              (if (null? values)\n                                                values\n                                                (let ((values (list values)))\n                                                  (if (null? values)\n                                                    values\n                                                    (let ((values (list values)))\n                                                      (if (null? values)\n                                                        values\n                                                        (let ((values (list values)))\n                                                         (if (null? values)\n                                                           values\n                                                           (let ((values (list values)))\n                                                            (if (null? values)\n                                                              values\n                                                              (let ((values (list values)))\n                                                                (if (null? values)\n                                                                  values\n                                                                  (let ((values (list values)))\n                                                                    (if (null? values)\n                                                                      values\n                                                                      (let ((values (list values)))",
    "  (cond\n    ((null? values) #f)\n    ((null? (car values)) #f)\n    (else\n      (if (integer? (car values))\n          (car values)\n          (filter_integers (cdr values))))))\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (let ((values-list (list values)))\n    (if (null? values-list)\n      values-list\n      (let ((values-list-length (length values-list)))\n        (if (>= values-list-length 1)\n          (let ((first-value (car values-list)))\n            (if (integer? first-value)\n              (cons first-value (filter_integers (cdr values-list)))\n              (filter_integers (cdr values-list))))\n          (filter_integers (cdr values-list)))))))\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" \"b\" \"c\"))\n;; (list \"a\" \"b\" \"c\")\n;; >>> (filter_strings (list 1 2 3 \"abc\"))\n;; (list 1 2 3)",
    "  (let ((values (list values)))\n    (if (null? values)\n      values\n      (let ((values (list values)))\n        (if (null? values)\n          values\n          (let ((values (list values)))\n            (if (null? values)\n              values\n              (let ((values (list values)))\n                (if (null? values)\n                  values\n                  (let ((values (list values)))\n                    (if (null? values)\n                      values\n                      (let ((values (list values)))\n                        (if (null? values)\n                          values\n                          (let ((values (list values)))\n                            (if (null? values)\n                              values\n                              (let ((values (list values)))\n                                (if (null? values)\n                                  values\n                                  (let ((values (list values)))\n                                    (if (null? values)\n                                      values\n                                      (let ((values (list values)))\n                                        (if (null? values)\n                                          values\n                                          (let ((values (list values)))\n                                            (if (null? values)\n                                              values\n                                              (let ((values (list values)))\n                                                (if (null? values)\n                                                  values\n                                                  (let ((values (list values)))\n                                                    (if (null? values)\n                                                      values\n                                                      (let ((values (list values)))\n                                                        (if (null? values)\n                                                          values\n                                                          (let ((values (list values)))\n                                                            (if (null? values)\n                                                              values\n                                                              (let ((values (list values)))\n                                                                (if (null? values)\n                                                                  values\n                                                                  (let ((values (list values)))\n                                                                    (if (null? values)\n                                                                      values\n                                                                      (let ((values (list values)))\n                                                                        (if (null? values)\n                                                                          values\n                               ",
    "  (if (null? values)\n    values\n    (let ((result ()))\n      (for-each (lambda (x)\n                  (if (integer? x)\n                    (result (cons x result))\n                    (result ()))\n                values))\n      (reverse result))))\n",
    "  (if (null? values)\n    values\n    (let ((result (make-vector 0 (length values))))\n      (for-each (lambda (value)\n                  (if (integer? value)\n                    (vector-set! result value)\n                    ()))\n        values)))\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" 3.14 5))\n;; (list \"a\" \"3.14\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"1\" \"2\" \"3\")",
    "  (if (null? values)\n    values\n    (let ((result ()))\n      (for-each (lambda (x)\n                  (if (integer? x)\n                    (result (cons x result))\n                    ()))\n        values)))\n)\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (if (null? values)\n    values\n    (let ((values (list values)))\n      (if (null? (first values))\n        (second values)\n        (let ((values (cdr values)))\n          (if (null? (first values))\n            (second values)\n            (let ((values (cdr values)))\n              (if (null? (first values))\n                (second values)\n                (let ((values (cdr values)))\n                  (if (null? (first values))\n                    (second values)\n                    (let ((values (cdr values)))\n                      (if (null? (first values))\n                        (second values)\n                        (let ((values (cdr values)))\n                          (if (null? (first values))\n                            (second values)\n                            (let ((values (cdr values)))\n                              (if (null? (first values))\n                                (second values)\n                                (let ((values (cdr values)))\n                                  (if (null? (first values))\n                                    (second values)\n                                    (let ((values (cdr values)))\n                                      (if (null? (first values))\n                                        (second values)\n                                        (let ((values (cdr values)))\n                                          (if (null? (first values))\n                                            (second values)\n                                            (let ((values (cdr values)))\n                                              (if (null? (first values))\n                                                (second values)\n                                                (let ((values (cdr values)))\n                                                  (if (null? (first values))\n                                                    (second values)\n                                                    (let ((values (cdr values)))\n                                                      (if (null? (first values))\n                                                        (second values)\n                                                        (let ((values (cdr values)))\n                                                         (if (null? (first values))\n                                                           (second values)\n                                                           (let ((values (cdr values)))\n                                                            ",
    "  (if (null? values)\n    values\n    (let ((result ()))\n      (for-each (lambda (x)\n                  (if (integer? x)\n                    (result (cons x result))\n                    ()))\n        values)))\n)\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (if (null? values)\n    values\n    (let ((result ()))\n      (for-each (lambda (x)\n                  (if (integer? x)\n                    (result (cons x result))\n                    ()))\n        values)))\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" 3.14 5))\n;; (list \"a\" \"3.14\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"1\" \"2\" \"3\")",
    "  (if (null? values)\n    values\n    (let ((result ()))\n      (for-each (lambda (x)\n                  (if (integer? x)\n                    (result (cons x result))\n                    ()))\n        values)))\n)\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (if (null? values)\n    values\n    (let ((i 0))\n      (while (< i (length values))\n        (if (integer? (car values i))\n          (setf values (cdr values))\n          (setf i (1+ i)))))))\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (let* ((values (list-to-vector values))\n         (result (make-vector 0 (length values))))\n    (for-each\n      (lambda (x)\n        (if (integer? x)\n            (vector-set! result (vector-ref result) x)))\n      values))\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" 3.14 5))\n;; (list \"a\" \"3.14\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"1\" \"2\" \"3\")",
    "  (if (null? values)\n    values\n    (if (null? (first values))\n      (second values)\n      (filter_integers (rest values))))\n)\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (if (null? values)\n    values\n    (if (integer? (car values))\n      (cons (car values) (filter_integers (cdr values)))\n      (filter_integers (cdr values))))\n)\n",
    "  (if (null? values)\n    values\n    (let ((result (make-vector 0 (length values))))\n      (for-each (lambda (value)\n                  (if (integer? value)\n                    (vector-set! result (vector-ref result) value)\n                    (vector-set! result (vector-ref result) #f)))\n        values)))))\n",
    "  (if (null? values)\n    values\n    (let ((i 0))\n      (while (< i (length values))\n        (if (integer? (car values i))\n          (set! i (+ i 1))\n          (else\n            (values (cdr values)))))\n      (values))))\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" \"abc\" 3.14 5))\n;; (list \"abc\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"abc\")",
    "  (if (null? values)\n    values\n    (let* ([(first (car values)) (rest (cdr values))]\n           [(is_integer (first first)) (is_integer (first rest))])\n      (if (is_integer (first first))\n        (cons first rest)\n        (filter_integers rest))))))\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (if (null? values)\n    values\n    (let ((values (cons (car values) values)))\n      (if (null? (cdr values))\n        values\n        (filter_integers (cdr values))))))\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (if (null? values)\n    values\n    (let ((result ()))\n      (for-each (lambda (x)\n                  (if (integer? x)\n                    (result (cons x result))\n                    ()))\n        values)))\n)\n",
    "  (if (null? values)\n    values\n    (let ((i 0))\n      (while (< i (length values))\n        (if (integer? (car values i))\n          (setf values (cdr values))\n          (setf i (1+ i)))))))\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" \"abc\"))\n;; (list \"abc\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"abc\")",
    "  (if (null? values)\n    values\n    (let* ([result (list)])\n      (for-each (lambda (x)\n                  (if (integer? x)\n                    (result (append result x))\n                    (else ()))\n                 values)\n        result)))\n",
    "  (cond\n    ((null? values) #f)\n    ((null? (car values)) #f)\n    (else\n      (if (integer? (car values))\n          (car values)\n          (filter_integers (cdr values))))))\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" 3.14 5))\n;; (list \"a\" \"3.14\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"1\" \"2\" \"3\")",
    "  (if (null? values)\n    values\n    (let ((result ()))\n      (for-each (lambda (x)\n                  (if (integer? x)\n                    (result (cons x result))\n                    ()))\n        values)))\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" 3.14 5))\n;; (list \"a\" \"3.14\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"1\" \"2\" \"3\")",
    "  (if (null? values)\n    values\n    (let ((i 0))\n      (while (< i (length values))\n        (if (integer? (car values i))\n          (setf (aref values i) (car values i))\n          (setf i (1+ i)))))))\n",
    "  (if (null? values)\n    values\n    (let ((i 0))\n      (while (< i (length values))\n        (if (integer? (car values))\n          (set! i (+ i 1))\n          (values (cdr values)))))))\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (if (null? values)\n    values\n    (let ((result (make-vector 0 (length values))))\n      (for-each (lambda (x)\n                  (if (integer? x)\n                    (vector-set! result x (vector-ref values x))))\n        values)))\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc\" \"abc",
    "  (if (null? values)\n    values\n    (let ((result ()))\n      (for-each (lambda (x)\n                  (if (integer? x)\n                    (result (cons x result))\n                    ()))\n        values)))\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" \"abc\"))\n;; (list \"abc\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"abc\")",
    "  (let ((values (list values)))\n    (if (null? values)\n      values\n      (let ((values (list values)))\n        (if (null? values)\n          values\n          (let ((values (list values)))\n            (if (null? values)\n              values\n              (let ((values (list values)))\n                (if (null? values)\n                  values\n                  (let ((values (list values)))\n                    (if (null? values)\n                      values\n                      (let ((values (list values)))\n                        (if (null? values)\n                          values\n                          (let ((values (list values)))\n                            (if (null? values)\n                              values\n                              (let ((values (list values)))\n                                (if (null? values)\n                                  values\n                                  (let ((values (list values)))\n                                    (if (null? values)\n                                      values\n                                      (let ((values (list values)))\n                                        (if (null? values)\n                                          values\n                                          (let ((values (list values)))\n                                            (if (null? values)\n                                              values\n                                              (let ((values (list values)))\n                                                (if (null? values)\n                                                  values\n                                                  (let ((values (list values)))\n                                                    (if (null? values)\n                                                      values\n                                                      (let ((values (list values)))\n                                                        (if (null? values)\n                                                          values\n                                                          (let ((values (list values)))\n                                                            (if (null? values)\n                                                              values\n                                                              (let ((values (list values)))\n                                                                (if (null? values)\n                                                                  values\n                                                                  (let ((values (list values)))\n                                                                    (if (null? values)\n                                                                      values\n                                                                      (let ((values (list values)))\n                                                                        (if (null? values)\n                                                                          values\n                               ",
    "  (if (null? values)\n    values\n    (let ((result ()))\n      (for-each (lambda (x)\n                  (if (integer? x)\n                    (result (cons x result))\n                    ()))\n        values)))\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" 3.14 5))\n;; (list \"a\" \"3.14\" \"5\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"1\" \"2\" \"3\")",
    "  (if (null? values)\n    values\n    (let* ([integers (filter (lambda (x) (integer? x)) values)])\n      (if (null? integers)\n        integers\n        (let* ([integers (filter (lambda (x) (integer? x)) integers)])\n          (if (null? integers)\n            integers\n            (let* ([integers (filter (lambda (x) (integer? x)) integers)])\n              (if (null? integers)\n                integers\n                (let* ([integers (filter (lambda (x) (integer? x)) integers)])\n                  (if (null? integers)\n                    integers\n                    (let* ([integers (filter (lambda (x) (integer? x)) integers)])\n                      (if (null? integers)\n                        integers\n                        (let* ([integers (filter (lambda (x) (integer? x)) integers)])\n                          (if (null? integers)\n                            integers\n                            (let* ([integers (filter (lambda (x) (integer? x)) integers)])\n                              (if (null? integers)\n                                integers\n                                (let* ([integers (filter (lambda (x) (integer? x)) integers)])\n                                  (if (null? integers)\n                                    integers\n                                    (let* ([integers (filter (lambda (x) (integer? x)) integers)])\n                                      (if (null? integers)\n                                        integers\n                                        (let* ([integers (filter (lambda (x) (integer? x)) integers)])\n                                          (if (null? integers)\n                                            integers\n                                            (let* ([integers (filter (lambda (x) (integer? x)) integers)])\n                                              (if (null? integers)\n                                                integers\n                                                (let* ([integers (filter (lambda (x) (integer? x)) integers)])\n                                                  (if (null? integers)\n                                                    integers\n                                                    (let* ([integers (filter (lambda (x) (integer? x)) integers)])\n                                    ",
    "  (if (null? values)\n    values\n    (filter (lambda (x) (integer? x)) values)))\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 3.14)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (if (null? values)\n    values\n    (let ((result (list)))\n      (for-each (lambda (x)\n                  (if (integer? x)\n                    (result (append result x))\n                    ()))\n        values)))\n)\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (if (null? values)\n    values\n    (let ((result (list)))\n      (for-each\n        (lambda (value)\n          (if (integer? value)\n            (result (cons value result))\n            (result (cons value))))\n        values)))\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" 3.14 5))\n;; (list \"a\" \"3.14\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"1\" \"2\" \"3\")",
    "  (if (null? values)\n    values\n    (let ((result (make-vector 0 (length values))))\n      (for-each\n        (lambda (value)\n          (if (integer? value)\n            (vector-set! result (vector-ref result) value)\n            (vector-set! result (vector-ref result) #f)))\n        values)))\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" \"abc\"))\n;; (list \"abc\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"abc\")",
    "  (if (null? values)\n    values\n    (let* ([integers (map (lambda (x) (if (integer? x) x #f)) values)])\n      (if (null? integers)\n        integers\n        (let* ([integers (filter integers)])\n          (if (null? integers)\n            integers\n            (let* ([integers (filter integers)])\n              (if (null? integers)\n                integers\n                (let* ([integers (filter integers)])\n                  (if (null? integers)\n                    integers\n                    (let* ([integers (filter integers)])\n                      (if (null? integers)\n                        integers\n                        values))))))))))))\n",
    "  (let* ((values (list-seq values))\n         (result (list)))\n    (while (not (null? values))\n      (let* ((value (car values))\n             (values (cdr values)))\n        (if (integer? value)\n            (result (append result value))\n            (values (cdr values))))\n      (result (append result value))))\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" 3.14 5))\n;; (list \"a\" \"3.14\" \"5\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"1\" \"2\" \"3\")",
    "  (if (null? values)\n    values\n    (let ((values (cons (car values) values)))\n      (if (null? (cdr values))\n        values\n        (filter_integers (cdr values))))))\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (if (null? values)\n    values\n    (let ((result (list)))\n      (for-each (lambda (x)\n                  (if (integer? x)\n                    (result (append result x))\n                    ()))\n        values)))\n)\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (if (null? values)\n    values\n    (filter (lambda (x) (integer? x)) values)))\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (cond\n    ((null? values) #t)\n    ((null? (car values)) #f)\n    (else\n      (let ((result (make-vector 0 (length values))))\n        (for-each\n          (lambda (value)\n            (if (integer? value)\n              (vector-set! result (vector-ref result) value)\n              #f))\n          values))\n      (vector-length result))))\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" 3.14 5))\n;; (list \"a\" \"3.14\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"1\" \"2\" \"3\")",
    "  (cond\n    ((null? values) #t)\n    ((null? (car values)) #f)\n    ((integer? (car values)) (car values))\n    (else (filter_integers (cdr values))))\n)\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (if (null? values)\n    values\n    (let ((values (list values)))\n      (if (null? values)\n        values\n        (let ((values (list values)))\n          (if (null? values)\n            values\n            (let ((values (list values)))\n              (if (null? values)\n                values\n                (let ((values (list values)))\n                  (if (null? values)\n                    values\n                    (let ((values (list values)))\n                      (if (null? values)\n                        values\n                        (let ((values (list values)))\n                          (if (null? values)\n                            values\n                            (let ((values (list values)))\n                              (if (null? values)\n                                values\n                                (let ((values (list values)))\n                                  (if (null? values)\n                                    values\n                                    (let ((values (list values)))\n                                      (if (null? values)\n                                        values\n                                        (let ((values (list values)))\n                                          (if (null? values)\n                                            values\n                                            (let ((values (list values)))\n                                              (if (null? values)\n                                                values\n                                                (let ((values (list values)))\n                                                  (if (null? values)\n                                                    values\n                                                    (let ((values (list values)))\n                                                      (if (null? values)\n                                                        values\n                                                        (let ((values (list values)))\n                                                         (if (null? values)\n                                                           values\n                                                           (let ((values (list values)))\n                                                            (if (null? values)\n                                                              values\n                                                              (let ((values (list values)))\n                                                                (if (null? values)\n                                                                  values\n                                                                  (let ((values (list values)))\n                                                                    (if (null? values)\n                                                                      values\n                                                                      (let ((values (list values)))",
    "  (if (null? values)\n    values\n    (let ((result ()))\n      (for-each (lambda (x)\n                  (if (integer? x)\n                    (result (cons x result))\n                    ()))\n        values)))\n)\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (let* ([values (list-to-vector values)])\n    (if (null? values)\n      values\n      (let* ([values (list-to-vector values)])\n        (if (null? values)\n          values\n          (let* ([values (list-to-vector values)])\n            (if (null? values)\n              values\n              (let* ([values (list-to-vector values)])\n                (if (null? values)\n                  values\n                  (let* ([values (list-to-vector values)])\n                    (if (null? values)\n                      values\n                      (let* ([values (list-to-vector values)])\n                        (if (null? values)\n                          values\n                          (let* ([values (list-to-vector values)])\n                            (if (null? values)\n                              values\n                              (let* ([values (list-to-vector values)])\n                                (if (null? values)\n                                  values\n                                  (let* ([values (list-to-vector values)])\n                                    (if (null? values)\n                                      values\n                                      (let* ([values (list-to-vector values)])\n                                        (if (null? values)\n                                          values\n                                          (let* ([values (list-to-vector values)])\n                                            (if (null? values)\n                                              values\n                                              (let* ([values (list-to-vector values)])\n                                                (if (null? values)\n                                                  values\n                                                  (let* ([values (list-to-vector values)])\n                                                    (if (null? values)\n                                                      values\n                                                      (let* ([values (list-to-vector values)])\n                                                        (if (null? values)\n                                                          values\n                                                          (let* ([values (list-to-vector values)])\n                                                            (if (null? values)\n                                                              values\n                                                              (",
    "  (cond\n    ((null? values) #f)\n    ((null? (car values)) #f)\n    ((integer? (car values)) (car values))\n    (else (filter_integers (cdr values)))))\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (if (null? values)\n    values\n    (let* ([(first (car values)) (rest (cdr values))]\n           [(is_int (first first)) (is_int (first rest))])\n      (if (is_int first)\n        (filter_integers rest)\n        (cons first rest))))\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" 3.14 5))\n;; (list \"a\" \"3.14\" \"5\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"1\" \"2\" \"3\")",
    "  (if (null? values)\n    values\n    (let ((i 0))\n      (while (< i (length values))\n        (if (integer? (car values i))\n          (set! i (+ i 1))\n          (values (cdr values)))))))\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" \"b\" \"c\"))\n;; (list \"a\" \"b\" \"c\")\n;; >>> (filter_strings (list 1 2 3 \"abc\"))\n;; (list \"abc\")",
    "  (cond\n    ((null? values) #f)\n    ((null? (car values)) #f)\n    ((integer? (car values)) (car values))\n    (else (filter_integers (cdr values))))\n)\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (if (null? values)\n    values\n    (let ((result (make-vector 0 (length values))))\n      (for-each (lambda (value)\n                  (if (integer? value)\n                    (vector-set! result (vector-ref result) value)\n                    (vector-set! result (vector-ref result) #f)))\n        values)))))\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (if (null? values)\n    values\n    (let ((i 0))\n      (while (< i (length values))\n        (if (integer? (car values i))\n          (setf values (cdr values))\n          (setf i (1+ i)))))))\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" \"b\" \"c\"))\n;; (list \"a\" \"b\" \"c\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"1\" \"2\" \"3\")",
    "  (cond\n    ((null? values) #t)\n    ((null? (car values)) #f)\n    ((integer? (car values)) (car values))\n    (else (filter_integers (cdr values))))\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" \"b\" \"c\"))\n;; (list \"a\" \"b\" \"c\")\n;; >>> (filter_strings (list 1 2 3 \"abc\"))\n;; (list \"abc\")",
    "  (let* ((values (list-seq values))\n         (result (list)))\n    (while (not (null? values))\n      (let ((value (car values)))\n        (if (integer? value)\n            (append result value)\n            (values (cdr values))))\n      (values (cdr values))))\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" 3.14 5))\n;; (list \"a\" \"3.14\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"1\" \"2\" \"3\")",
    "  (let ((values-list (list values)))\n    (if (null? values-list)\n      values-list\n      (let ((values-list-head (car values-list)))\n        (if (integer? values-list-head)\n          (cons values-list-head (filter_integers (cdr values-list)))\n          values-list))))))\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" 3.14 5))\n;; (list \"a\" 3.14 5)\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (cond\n    ((null? values) \"\")\n    ((null? (car values)) \"\")\n    (else\n      (if (integer? (car values))\n        (car values)\n        (filter_integers (cdr values))))))\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)",
    "  (if (null? values)\n    values\n    (let ((values (list values)))\n      (if (null? values)\n        values\n        (let ((values (list values)))\n          (if (null? values)\n            values\n            (let ((values (list values)))\n              (if (null? values)\n                values\n                (let ((values (list values)))\n                  (if (null? values)\n                    values\n                    (let ((values (list values)))\n                      (if (null? values)\n                        values\n                        (let ((values (list values)))\n                          (if (null? values)\n                            values\n                            (let ((values (list values)))\n                              (if (null? values)\n                                values\n                                (let ((values (list values)))\n                                  (if (null? values)\n                                    values\n                                    (let ((values (list values)))\n                                      (if (null? values)\n                                        values\n                                        (let ((values (list values)))\n                                          (if (null? values)\n                                            values\n                                            (let ((values (list values)))\n                                              (if (null? values)\n                                                values\n                                                (let ((values (list values)))\n                                                  (if (null? values)\n                                                    values\n                                                    (let ((values (list values)))\n                                                      (if (null? values)\n                                                        values\n                                                        (let ((values (list values)))\n                                                         (if (null? values)\n                                                           values\n                                                           (let ((values (list values)))\n                                                            (if (null? values)\n                                                              values\n                                                              (let ((values (list values)))\n                                                                (if (null? values)\n                                                                  values\n                                                                  (let ((values (list values)))\n                                                                    (if (null? values)\n                                                                      values\n                                                                      (let ((values (list values)))",
    "  (if (null? values)\n    values\n    (let* ([i (1)])\n      (while (< i (length values))\n        (if (integer? (car values i))\n          (values (cdr values))\n          (set! i (+ i 1)))))\n    (values)))\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" \"abc\"))\n;; (list \"abc\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"abc\")",
    "  (if (null? values)\n    values\n    (let ((result (make-vector 0 (length values))))\n      (for-each (lambda (value)\n                  (if (integer? value)\n                    (vector-set! result (vector-ref result) value)\n                    (void)))\n        values)))\n)\n\n;; Filter given list of any rktthon values only for strings\n;; >>> (filter_strings (list \"a\" 3.14 5))\n;; (list \"a\" \"3.14\")\n;; >>> (filter_strings (list 1 2 3 \"abc\" #hash() (list )))\n;; (list \"1\" \"2\" \"3\")",
    "  (if (null? values)\n    values\n    (let ((result ()))\n      (for-each (lambda (x)\n                  (if (integer? x)\n                    (result (cons x result))\n                    ()))\n        values)))\n)\n\n;; Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)"
  ],
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ]
}