name: HumanEval_6_parse_nested_parens
language: rkt
prompt: "#lang racket\n\n;; Input to this function is a string represented multiple\
  \ groups for nested parentheses separated by spaces.\n;; For each of the group,\
  \ output the deepest level of nesting of parentheses.\n;; E.g. (()()) has maximum\
  \ two levels of nesting while ((())) has three.\n;; >>> (parse_nested_parens \"\
  (()()) ((())) () ((())()())\")\n;; (list 2 3 1 3)\n(define (parse_nested_parens\
  \ paren_string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parse_nested_parens))\n\
  \    (check-equal? (candidate \"(()()) ((())) () ((())()())\") (list 2 3 1 3))\n\
  \    (check-equal? (candidate \"() (()) ((())) (((())))\") (list 1 2 3 4))\n   \
  \ (check-equal? (candidate \"(()(())((())))\") (list 4))\n))\n\n(test-humaneval)"
completions: ["  (define (parse_nested_parens_helper paren_string)\n    (if (null?\
    \ paren_string)\n      (list 0)\n      (let ((nesting_level (car paren_string)))\n\
    \        (if (null? (cdr paren_string))\n          (list nesting_level)\n    \
    \      (parse_nested_parens_helper (cdr paren_string)))))\n    (parse_nested_parens_helper\
    \ paren_string)))\n", "  (define (parse_nested_parens_helper paren_string)\n \
    \   (if (null? paren_string)\n      (list 0)\n      (if (null? paren_string)\n\
    \        (list 0)\n        (if (null? paren_string)\n          (list 0)\n    \
    \      (if (null? paren_string)\n            (list 0)\n            (if (null?\
    \ paren_string)\n              (list 0)\n              (if (null? paren_string)\n\
    \                (list 0)\n                (if (null? paren_string)\n        \
    \          (list 0)\n                  (if (null? paren_string)\n            \
    \        (list 0)\n                    (if (null? paren_string)\n            \
    \          (list 0)\n                      (if (null? paren_string)\n        \
    \                (list 0)\n                        (if (null? paren_string)\n\
    \                          (list 0)\n                          (if (null? paren_string)\n\
    \                            (list 0)\n                            (if (null?\
    \ paren_string)\n                              (list 0)\n                    \
    \          (if (null? paren_string)\n                                (list 0)\n\
    \                                (if (null? paren_string)\n                  \
    \                (list 0)\n                                  (if (null? paren_string)\n\
    \                                    (list 0)\n                              \
    \      (if (null? paren_string)\n                                      (list 0)\n\
    \                                      (if (null? paren_string)\n            \
    \                            (list 0)\n                                      \
    \  (if (null? paren_string)\n                                          (list 0)\n\
    \                                          (if (null? paren_string)\n        \
    \                                    (list 0)\n                              \
    \              (if (null? paren_string)\n                                    \
    \          (list 0)\n                                              (if (null?\
    \ paren_string)\n                                                (list 0)\n  \
    \                                              (if (null? paren_string)\n    \
    \                                              (list 0)\n                    \
    \                              (if (null? paren_string)\n                    \
    \                                (list 0)\n                                  \
    \                  (if (", "  (define (parse_parens paren_string)\n    (if (null?\
    \ paren_string)\n      (list 0)\n      (if (null? (cdr paren_string))\n      \
    \  (list (car paren_string) 1)\n        (parse_parens (cdr paren_string)))))\n\
    \  (parse_parens paren_string))\n", "  (let ((result (list)))\n    (let ((parsed_parens\
    \ (string-split paren_string \" \")))\n      (for-each (lambda (parsed_paren)\n\
    \                 (if (null? (cdr parsed_paren))\n                     (append\
    \ result (car parsed_paren))))\n           parsed_parens))))\n", "  (define (parse_nested_parens_helper\
    \ paren_string)\n    (if (null? paren_string)\n      (list 0)\n      (if (null?\
    \ (cdr paren_string))\n        (list (car paren_string) (parse_nested_parens_helper\
    \ (car paren_string)))\n        (parse_nested_parens_helper (car paren_string)))))\n\
    \  (parse_nested_parens_helper paren_string))\n", "  (define (parse_nested_parens_helper\
    \ paren_string)\n    (if (null? paren_string)\n      (list 0)\n      (if (null?\
    \ (cdr paren_string))\n        (list (car paren_string) (parse_nested_parens_helper\
    \ (car paren_string)))\n        (list (car paren_string) (parse_nested_parens_helper\
    \ (car (cdr paren_string)))))))\n  (parse_nested_parens_helper paren_string))\n",
  "  (define (parse_nested_parens_helper paren_string)\n    (if (null? paren_string)\n\
    \      (list 0)\n      (let ((nesting_level (car paren_string))\n            (result\
    \ (cons nesting_level (parse_nested_parens_helper (cdr paren_string)))))))))\n",
  "  (let ((parsed_parens ()))\n    (for-each (lambda (paren)\n      (if (null? (cdr\
    \ paren))\n        (append parsed_parens (car paren))))\n      (string-split \"\
    \ \" paren_string))))\n", "  (let ((paren_count 0))\n    (let ((paren_stack (list)))\n\
    \      (while (not (null? paren_stack))\n        (if (null? (cdr paren_stack))\n\
    \          (if (null? (cdr (car paren_stack)))\n            (set! paren_count\
    \ (paren_count + 1))\n            (print paren_count))\n          (set! paren_count\
    \ (paren_count - 1))\n          (print paren_count))\n        (set! paren_stack\
    \ (cdr paren_stack)))))\n", "  (define (parse_nested_parens_helper paren_string)\n\
    \    (if (null? paren_string)\n      (list 0)\n      (if (null? (cdr paren_string))\n\
    \        (list (car paren_string))\n        (parse_nested_parens_helper (cdr paren_string)))))\n\
    \  (parse_nested_parens_helper paren_string))\n", "  (let ((paren_count (make-vector\
    \ (length paren_string) #f)))\n    (let ((depth (make-vector (length paren_string)\
    \ 0)))\n      (let ((depth_count (make-vector (length paren_string) 0)))\n   \
    \     (for-each (lambda (index)\n                   (if (string=? paren_string\
    \ (substring paren_string index (1+index)))\n                       (set-vector-element!\
    \ paren_count index)\n                       (set-vector-element! depth index)\n\
    \                       (set-vector-element! depth_count 1)))\n              \
    \    (range 1 (length paren_string))))\n      (if (empty? depth_count)\n     \
    \     (list 0)\n          (let ((max_depth (max (map (lambda (x) (vector-element\
    \ x)) depth))))\n            (list max_depth depth_count)))\n      (if (empty?\
    \ paren_count)\n          (list 0)\n          (let ((max_paren_count (max (map\
    \ (lambda (x) (vector-element x)) paren_count))))\n            (list max_paren_count\
    \ paren_count)))\n      (if (empty? depth_count)\n          (list 0)\n       \
    \   (let ((max_depth_count (max (map (lambda (x) (vector-element x)) depth_count))))\n\
    \            (list max_depth_count depth_count))))))\n", "  (define (parse paren_string)\n\
    \    (define (parse_inner paren_string)\n      (if (null? paren_string)\n    \
    \    (list)\n        (if (null? (cdr paren_string))\n          (car paren_string)\n\
    \          (parse_inner (cdr paren_string))))))\n  (parse paren_string))\n", " \
    \ (let ((result (list)))\n    (let ((parsed_parens (list)))\n      (let ((depth\
    \ (0)))\n        (while (not (null? parsed_parens))\n          (if (null? (cdr\
    \ parsed_parens))\n            (if (null? (cdr (cdr parsed_parens)))\n       \
    \       (set! depth (depth + 1))\n              (set! result (cons depth result))\n\
    \              (set! parsed_parens (cdr parsed_parens)))\n            (set! parsed_parens\
    \ (cdr parsed_parens)))\n          (set! parsed_parens (cdr parsed_parens))))\n\
    \    (result)))\n", "  (define (parse_nested_parens_helper paren_string)\n   \
    \ (if (null? paren_string)\n      (list 0)\n      (if (null? (cdr paren_string))\n\
    \        (list (car paren_string) (parse_nested_parens_helper (car paren_string)))\n\
    \        (list (car paren_string) (parse_nested_parens_helper (car (cdr paren_string)))))))\n\
    \  (parse_nested_parens_helper paren_string))\n", "  (define (parse_nested_parens_helper\
    \ paren_string)\n    (if (null? paren_string)\n      (list 0)\n      (if (null?\
    \ (cdr paren_string))\n        (list (car paren_string) (parse_nested_parens_helper\
    \ (car paren_string)))\n        (parse_nested_parens_helper (car paren_string)))))\n\
    \  (parse_nested_parens_helper paren_string))\n", "  (let ((paren_count 0))\n\
    \    (define (parse_parens)\n      (if (eq? paren_count 0)\n        (return (list\
    \ 1))\n      (let ((new_paren_count (paren_count - 1)))\n        (parse_parens))))\n\
    \    (parse_parens)))\n", "  (define (parse_nested_parens_helper paren_string)\n\
    \    (if (null? paren_string)\n      (list 0)\n      (list (parse_nested_parens_helper\
    \ (cdr paren_string)))\n    )))", "  (let ((depth 0))\n    (let ((result ()))\n\
    \      (for-each (lambda (s)\n                  (if (string=? s \" \")\n     \
    \                 (if (string=? s \")\")\n                          (if (string=?\
    \ s \"(\"))\n                          (if (string=? s \")\")\n              \
    \                (if (string=? s \"(\"))\n                              (if (string=?\
    \ s \")\")\n                                  (if (string=? s \"(\"))\n      \
    \                            (if (string=? s \")\")\n                        \
    \              (if (string=? s \"(\"))\n                                     \
    \ (if (string=? s \")\")\n                                          (if (string=?\
    \ s \"(\"))\n                                          (if (string=? s \")\")\n\
    \                                              (if (string=? s \"(\"))\n     \
    \                                         (if (string=? s \")\")\n           \
    \                                       (if (string=? s \"(\"))\n            \
    \                                      (if (string=? s \")\")\n              \
    \                                        (if (string=? s \"(\"))\n           \
    \                                           (if (string=? s \")\")\n         \
    \                                                 (if (string=? s \"(\"))\n  \
    \                                                        (if (string=? s \")\"\
    )\n                                                              (if (string=?\
    \ s \"(\"))\n                                                              (if\
    \ (string=? s \")\")\n                                                       \
    \           (if (string=? s \"(\"))\n                                        \
    \                          (if (string=? s \")\")\n                          \
    \                                            (if (string=? s \"(\"))\n       \
    \                                                               (if (string=?\
    \ s \")\")\n                                                                 \
    \         (if (string=? s \"(\"))\n                                          \
    \                                (if (string=? s \")\")\n                    \
    \                                                          (if (string=? s \"\
    (\"))\n                                                                      \
    \        (if (string=? s \")\")\n                                            \
    \                                      (if (string=? s \"(\"))\n             \
    \                                                                     (if (string=?\
    \ s \")\")\n                                                                 \
    \                    (", "  (let ((paren_count 0))\n    (while (string-length\
    \ paren_string)\n      (if (string-equal? paren_string \" \")\n        (setq paren_count\
    \ 0)\n        (else\n          (setq paren_count (1+ (string-count/any paren_string\
    \ \"(\")))\n          (if (string-equal? paren_string \")\")\n            (setq\
    \ paren_count 0)\n          ))))\n    (if (paren_count > 0)\n      (list paren_count))\n\
    \    (if (paren_count > 0)\n      (list paren_count))\n    (if (paren_count >\
    \ 0)\n      (list paren_count))\n    (if (paren_count > 0)\n      (list paren_count))\n\
    \    (if (paren_count > 0)\n      (list paren_count))\n    (if (paren_count >\
    \ 0)\n      (list paren_count))\n    (if (paren_count > 0)\n      (list paren_count))\n\
    \    (if (paren_count > 0)\n      (list paren_count))\n    (if (paren_count >\
    \ 0)\n      (list paren_count))\n    (if (paren_count > 0)\n      (list paren_count))\n\
    \    (if (paren_count > 0)\n      (list paren_count))\n    (if (paren_count >\
    \ 0)\n      (list paren_count))\n    (if (paren_count > 0)\n      (list paren_count))\n\
    \    (if (paren_count > 0)\n      (list paren_count))\n    (if (paren_count >\
    \ 0)\n      (list paren_count))\n    (if (paren_count > 0)\n      (list paren_count))\n\
    \    (if (paren_count > 0)\n      (list paren_count))\n    (if (paren_count >\
    \ 0)\n      (list paren_count))\n    (if (paren_count > 0)\n      (list paren_count))\n\
    \    (if (paren_count > 0)\n      (list paren_count))\n    (if", "  (define (parse_nested_parens_helper\
    \ paren_string)\n    (if (null? paren_string)\n      (list 0)\n      (let ((nesting_level\
    \ (car paren_string)))\n        (if (null? (cdr paren_string))\n          (list\
    \ nesting_level)\n          (parse_nested_parens_helper (cdr paren_string)))))))\n",
  "  (define (parse_nested_parens_helper paren_string)\n    (if (null? paren_string)\n\
    \      (list 0)\n      (let ((nesting_level (car paren_string)))\n        (if\
    \ (null? (cdr paren_string))\n          (list nesting_level)\n          (parse_nested_parens_helper\
    \ (cdr paren_string)))))\n    (parse_nested_parens_helper paren_string)))\n",
  "  (let ((paren_count (make-vector 1 1)))\n    (let ((paren_stack (make-vector 1\
    \ 1)))\n      (let ((result (make-vector 1 1)))\n        (let ((i (0)))\n    \
    \      (while (and (string-length paren_string) (string-ref paren_string i) (string-ref\
    \ paren_string (1+i)))\n            (setq i (1+i))\n            (if (string-ref\
    \ paren_string i)\n              (setq paren_count (vector-set! paren_count (vector-ref\
    \ paren_stack paren_count)))\n              (setq paren_stack (vector-set! paren_stack\
    \ (vector-ref paren_stack paren_count)))\n              (setq result (vector-set!\
    \ result paren_count)))\n            (setq paren_count (vector-ref paren_count\
    \ 1)))\n          (vector-set! paren_stack (vector-ref paren_stack 1))))\n   \
    \ (vector-set! result paren_count))))\n", "  (define (parse_nested_parens_helper\
    \ paren_string)\n    (if (null? paren_string)\n      (list 0)\n      (if (null?\
    \ paren_string)\n        (list 0)\n        (if (null? paren_string)\n        \
    \  (list 0)\n          (if (null? paren_string)\n            (list 0)\n      \
    \      (if (null? paren_string)\n              (list 0)\n              (if (null?\
    \ paren_string)\n                (list 0)\n                (if (null? paren_string)\n\
    \                  (list 0)\n                  (if (null? paren_string)\n    \
    \                (list 0)\n                    (if (null? paren_string)\n    \
    \                  (list 0)\n                      (if (null? paren_string)\n\
    \                        (list 0)\n                        (if (null? paren_string)\n\
    \                          (list 0)\n                          (if (null? paren_string)\n\
    \                            (list 0)\n                            (if (null?\
    \ paren_string)\n                              (list 0)\n                    \
    \          (if (null? paren_string)\n                                (list 0)\n\
    \                                (if (null? paren_string)\n                  \
    \                (list 0)\n                                  (if (null? paren_string)\n\
    \                                    (list 0)\n                              \
    \      (if (null? paren_string)\n                                      (list 0)\n\
    \                                      (if (null? paren_string)\n            \
    \                            (list 0)\n                                      \
    \  (if (null? paren_string)\n                                          (list 0)\n\
    \                                          (if (null? paren_string)\n        \
    \                                    (list 0)\n                              \
    \              (if (null? paren_string)\n                                    \
    \          (list 0)\n                                              (if (null?\
    \ paren_string)\n                                                (list 0)\n  \
    \                                              (if (null? paren_string)\n    \
    \                                              (list 0)\n                    \
    \                              (if (null? paren_string)\n                    \
    \                                (list 0)\n                                  \
    \                  (if (", "  (define (parse_nested_parens_helper paren_string\
    \ depth)\n    (if (null? paren_string)\n      (list depth)\n      (if (null? paren_string)\n\
    \        (list depth)\n        (if (null? paren_string)\n          (list depth)\n\
    \          (if (null? paren_string)\n            (list depth)\n            (if\
    \ (null? paren_string)\n              (list depth)\n              (if (null? paren_string)\n\
    \                (list depth)\n                (if (null? paren_string)\n    \
    \              (list depth)\n                  (if (null? paren_string)\n    \
    \                (list depth)\n                    (if (null? paren_string)\n\
    \                      (list depth)\n                      (if (null? paren_string)\n\
    \                        (list depth)\n                        (if (null? paren_string)\n\
    \                          (list depth)\n                          (if (null?\
    \ paren_string)\n                            (list depth)\n                  \
    \          (if (null? paren_string)\n                              (list depth)\n\
    \                              (if (null? paren_string)\n                    \
    \            (list depth)\n                                (if (null? paren_string)\n\
    \                                  (list depth)\n                            \
    \      (if (null? paren_string)\n                                    (list depth)\n\
    \                                    (if (null? paren_string)\n              \
    \                        (list depth)\n                                      (if\
    \ (null? paren_string)\n                                        (list depth)\n\
    \                                        (if (null? paren_string)\n          \
    \                                (list depth)\n                              \
    \            (if (null? paren_string)\n                                      \
    \      (list depth)\n                                            (if (null? paren_string)\n\
    \                                              (list depth)\n                \
    \                              (if (null? paren_string)\n                    \
    \                            (list depth)\n                                  \
    \              (if (null? paren_string)\n                                    \
    \              (list depth)\n                                                \
    \  (if (null? paren_string)\n                                                \
    \    (list depth)\n                                                    (if", " \
    \ (define (parse_nested_parens_helper paren_string)\n    (if (null? paren_string)\n\
    \      (list 0)\n      (if (null? (cdr paren_string))\n        (list (car paren_string)\
    \ (parse_nested_parens_helper (car paren_string)))\n        (list (car paren_string)\
    \ (parse_nested_parens_helper (car (cdr paren_string)))))))\n  (parse_nested_parens_helper\
    \ paren_string))\n", "  (let ((paren_count (make-vector (length paren_string)\
    \ #f)))\n    (let ((paren_stack (make-vector (length paren_string) #f)))\n   \
    \   (let ((depth (0)))\n        (let ((depth_stack (make-vector (length paren_string)\
    \ #f)))\n          (let ((depth_stack_index (0)))\n            (while (not (null?\
    \ paren_stack))\n              (if (not (null? paren_count))\n               \
    \ (if (paren_stack_index = (length paren_stack))\n                  (return (reverse\
    \ (vector-ref paren_stack_index paren_count)))\n                  (let ((depth_stack_index\
    \ (depth_stack_index + 1)))\n                    (vector-set! paren_stack_index\
    \ depth_stack_index (vector-ref paren_stack_index depth_stack_index))\n      \
    \              (vector-set! depth_stack_index depth_stack (vector-ref paren_stack_index\
    \ depth_stack_index))\n                    (vector-set! depth_stack depth_stack_index\
    \ (vector-ref paren_stack_index depth_stack_index)))\n                  (vector-set!\
    \ depth_stack depth_stack_index (depth_stack_index + 1)))\n                (vector-set!\
    \ paren_stack_index depth_stack_index (vector-ref paren_stack_index depth_stack_index))\n\
    \                (vector-set! depth_stack_index depth_stack (vector-ref paren_stack_index\
    \ depth_stack_index))\n                (vector-set! depth_stack depth_stack_index\
    \ (depth_stack_index + 1)))\n              (vector-set! depth_stack_index depth_stack\
    \ (vector-ref paren_stack_index depth_stack_index))\n              (vector-set!\
    \ depth_stack depth_stack_index (depth_stack_index + 1))))))))))))))\n", "  (define\
    \ (parse_nested_parens_helper paren_string)\n    (if (null? paren_string)\n  \
    \    (list 0)\n      (let (((paren_string_length (length paren_string))))\n  \
    \      (if (>= paren_string_length 0)\n          (let (((paren_string_index (0))))\n\
    \            (parse_nested_parens_helper (paren_string_index + 1) (paren_string_index\
    \ + paren_string_length)))\n          (parse_nested_parens_helper (paren_string_index\
    \ + 1) (paren_string_index + paren_string_length)))))))", "  (define (parse_nested_parens_helper\
    \ paren_string)\n    (if (null? paren_string)\n      (list 0)\n      (if (null?\
    \ (cdr paren_string))\n        (list (car paren_string))\n        (parse_nested_parens_helper\
    \ (car paren_string)))))\n  (parse_nested_parens_helper paren_string))\n", " \
    \ (define (parse_nested_parens_helper group)\n    (if (null? group)\n      (list\
    \ 0)\n      (if (null? (cdr group))\n        (list (car group))\n        (parse_nested_parens_helper\
    \ (car group)))))\n  (parse_nested_parens_helper paren_string))\n", "  (define\
    \ (parse_nested_parens_helper paren_string)\n    (if (null? paren_string)\n  \
    \    (list 0)\n      (let ((nesting_level (car paren_string)))\n        (if (null?\
    \ (cdr paren_string))\n          (list nesting_level)\n          (parse_nested_parens_helper\
    \ (cdr paren_string)))))))\n", "  (define (parse_nested_parens_helper paren_string)\n\
    \    (if (null? paren_string)\n      (list 0)\n      (let ((depth (car paren_string)))\n\
    \        (if (null? (cdr paren_string))\n          (list depth)\n          (parse_nested_parens_helper\
    \ (cdr paren_string)))))\n    (parse_nested_parens_helper paren_string)))\n",
  "  (define (parse_nested_parens_helper paren_string)\n    (if (null? paren_string)\n\
    \      (list 0)\n      (let ((nesting_level (car paren_string)))\n        (if\
    \ (null? (cdr paren_string))\n          (list nesting_level)\n          (parse_nested_parens_helper\
    \ (cdr paren_string)))))\n    (parse_nested_parens_helper paren_string)))\n",
  "  (define (parse_nested_parens_helper paren_string)\n    (if (null? paren_string)\n\
    \      (list 0)\n      (let ((nesting_level (car paren_string)))\n        (if\
    \ (null? (cdr paren_string))\n          (list nesting_level)\n          (parse_nested_parens_helper\
    \ (cdr paren_string))))))\n  (parse_nested_parens_helper paren_string))\n", " \
    \ (define (parse_nested_parens_helper paren_string)\n    (if (null? paren_string)\n\
    \      (list 0)\n      (if (null? paren_string)\n        (list 0)\n        (if\
    \ (null? paren_string)\n          (list 0)\n          (if (null? paren_string)\n\
    \            (list 0)\n            (if (null? paren_string)\n              (list\
    \ 0)\n              (if (null? paren_string)\n                (list 0)\n     \
    \           (if (null? paren_string)\n                  (list 0)\n           \
    \       (if (null? paren_string)\n                    (list 0)\n             \
    \       (if (null? paren_string)\n                      (list 0)\n           \
    \           (if (null? paren_string)\n                        (list 0)\n     \
    \                   (if (null? paren_string)\n                          (list\
    \ 0)\n                          (if (null? paren_string)\n                   \
    \         (list 0)\n                            (if (null? paren_string)\n   \
    \                           (list 0)\n                              (if (null?\
    \ paren_string)\n                                (list 0)\n                  \
    \              (if (null? paren_string)\n                                  (list\
    \ 0)\n                                  (if (null? paren_string)\n           \
    \                         (list 0)\n                                    (if (null?\
    \ paren_string)\n                                      (list 0)\n            \
    \                          (if (null? paren_string)\n                        \
    \                (list 0)\n                                        (if (null?\
    \ paren_string)\n                                          (list 0)\n        \
    \                                  (if (null? paren_string)\n                \
    \                            (list 0)\n                                      \
    \      (if (null? paren_string)\n                                            \
    \  (list 0)\n                                              (if (null? paren_string)\n\
    \                                                (list 0)\n                  \
    \                              (if (null? paren_string)\n                    \
    \                              (list 0)\n                                    \
    \              (if (null? paren_string)\n                                    \
    \                (list 0)\n                                                  \
    \  (if (", "  (let ((depth (0)))\n    (let ((result (list)))\n      (while (string=?\
    \ paren_string (string-upcase paren_string))\n        (if (string=? paren_string\
    \ \")\")\n          (set! depth (depth - 1))\n        (else\n          (if (string=?\
    \ paren_string \"(\")\n            (set! depth (depth + 1))\n          (else\n\
    \            (if (depth > 0)\n              (set! result (cons depth result))\n\
    \            (else\n              (set! result (cons 0 result))))))))\n    result))\n",
  "  (define (parse_nested_parens_helper paren_string)\n    (if (null? paren_string)\n\
    \      (list 0)\n      (if (null? paren_string)\n        (list 0)\n        (if\
    \ (null? paren_string)\n          (list 0)\n          (if (null? paren_string)\n\
    \            (list 0)\n            (if (null? paren_string)\n              (list\
    \ 0)\n              (if (null? paren_string)\n                (list 0)\n     \
    \           (if (null? paren_string)\n                  (list 0)\n           \
    \       (if (null? paren_string)\n                    (list 0)\n             \
    \       (if (null? paren_string)\n                      (list 0)\n           \
    \           (if (null? paren_string)\n                        (list 0)\n     \
    \                   (if (null? paren_string)\n                          (list\
    \ 0)\n                          (if (null? paren_string)\n                   \
    \         (list 0)\n                            (if (null? paren_string)\n   \
    \                           (list 0)\n                              (if (null?\
    \ paren_string)\n                                (list 0)\n                  \
    \              (if (null? paren_string)\n                                  (list\
    \ 0)\n                                  (if (null? paren_string)\n           \
    \                         (list 0)\n                                    (if (null?\
    \ paren_string)\n                                      (list 0)\n            \
    \                          (if (null? paren_string)\n                        \
    \                (list 0)\n                                        (if (null?\
    \ paren_string)\n                                          (list 0)\n        \
    \                                  (if (null? paren_string)\n                \
    \                            (list 0)\n                                      \
    \      (if (null? paren_string)\n                                            \
    \  (list 0)\n                                              (if (null? paren_string)\n\
    \                                                (list 0)\n                  \
    \                              (if (null? paren_string)\n                    \
    \                              (list 0)\n                                    \
    \              (if (null? paren_string)\n                                    \
    \                (list 0)\n                                                  \
    \  (if (", "  (define (parse_nested_parens_helper paren_string)\n    (cond\n \
    \     [(string=? paren_string \"\") (return (list))]\n      [(string=? paren_string\
    \ \"()\") (return (list 1))]\n      [(string=? paren_string \"()()\") (return\
    \ (list 2))]\n      [(string=? paren_string \"()()()\") (return (list 3))]\n \
    \     [(string=? paren_string \"()()()()\") (return (list 4))]\n      [(string=?\
    \ paren_string \"()()()()()\") (return (list 5))]\n      [(string=? paren_string\
    \ \"()()()()()()\") (return (list 6))]\n      [(string=? paren_string \"()()()()()()()\"\
    ) (return (list 7))]\n      [(string=? paren_string \"()()()()()()()()\") (return\
    \ (list 8))]\n      [(string=? paren_string \"()()()()()()()()()\") (return (list\
    \ 9))]\n      [(string=? paren_string \"()()()()()()()()()()\") (return (list\
    \ 10))]\n      [(string=? paren_string \"()()()()()()()()()()()\") (return (list\
    \ 11))]\n      [(string=? paren_string \"()()()()()()()()()()()()\") (return (list\
    \ 12))]\n      [(string=? paren_string \"()()()()()()()()()()()()()\") (return\
    \ (list 13))]\n      [(string=? paren_string \"()()()()()()()()()()()()()()\"\
    ) (return (list 14))]\n      [(string=? paren_string \"()()()()()()()()()()()()()()()\"\
    ) (return (list 15))]\n      [(string=? paren_string \"()()()()()()()()()()()()()()()()\"\
    ) (return (list 16))]\n      [(string=? paren_string \"()()", "  (let ((result\
    \ (list)))\n    (let ((parsed_parens (list)))\n      (while (not (null? paren_string))\n\
    \        (if (not (null? (cdr parsed_parens)))\n            (let ((new_parsed_parens\
    \ (list)))\n              (while (not (null? (cdr new_parsed_parens)))\n     \
    \           (if (not (null? (cdr (cdr new_parsed_parens))))\n                \
    \    (let ((new_new_parsed_parens (list)))\n                      (while (not\
    \ (null? (cdr new_new_parsed_parens)))\n                        (if (not (null?\
    \ (cdr (cdr new_new_parsed_parens))))\n                            (let ((new_new_new_parsed_parens\
    \ (list)))\n                              (while (not (null? (cdr new_new_new_parsed_parens)))\n\
    \                                (if (not (null? (cdr (cdr new_new_new_parsed_parens))))\n\
    \                                    (let ((new_new_new_new_parsed_parens (list)))\n\
    \                                      (while (not (null? (cdr new_new_new_new_parsed_parens)))\n\
    \                                        (if (not (null? (cdr (cdr new_new_new_new_parsed_parens))))\n\
    \                                            (let ((new_new_new_new_new_parsed_parens\
    \ (list)))\n                                              (while (not (null? (cdr\
    \ new_new_new_new_new_parsed_parens))))\n                                    \
    \          (if (not (null? (cdr (cdr new_new_new_new_new_parsed_parens))))\n \
    \                                               (let ((new_new_new_new_new_new_parsed_parens\
    \ (list)))\n                                                  (while (not (null?\
    \ (cdr new_new_new_new_new_new_parsed_parens))))\n                           \
    \                       (if (not (null? (c", "  (define (parse_nested_parens_helper\
    \ paren_string)\n    (if (null? paren_string)\n      (list 0)\n      (if (null?\
    \ (cdr paren_string))\n        (list (car paren_string))\n        (parse_nested_parens_helper\
    \ (car paren_string)))))\n  (parse_nested_parens_helper paren_string))\n", " \
    \ (define (parse_nested_parens_helper paren_string)\n    (if (null? paren_string)\n\
    \      (list 0)\n      (if (null? paren_string)\n        (list 1)\n        (if\
    \ (null? paren_string)\n          (list 2)\n          (if (null? paren_string)\n\
    \            (list 3)\n            (if (null? paren_string)\n              (list\
    \ 4)\n              (if (null? paren_string)\n                (list 5)\n     \
    \           (if (null? paren_string)\n                  (list 6)\n           \
    \       (if (null? paren_string)\n                    (list 7)\n             \
    \       (if (null? paren_string)\n                      (list 8)\n           \
    \           (if (null? paren_string)\n                        (list 9)\n     \
    \                   (if (null? paren_string)\n                          (list\
    \ 10)\n                          (if (null? paren_string)\n                  \
    \          (list 11)\n                            (if (null? paren_string)\n \
    \                             (list 12)\n                              (if (null?\
    \ paren_string)\n                                (list 13)\n                 \
    \               (if (null? paren_string)\n                                  (list\
    \ 14)\n                                  (if (null? paren_string)\n          \
    \                          (list 15)\n                                    (if\
    \ (null? paren_string)\n                                      (list 16)\n    \
    \                                  (if (null? paren_string)\n                \
    \                        (list 17)\n                                        (if\
    \ (null? paren_string)\n                                          (list 18)\n\
    \                                          (if (null? paren_string)\n        \
    \                                    (list 19)\n                             \
    \               (if (null? paren_string)\n                                   \
    \           (list 20)\n                                              (if (null?\
    \ paren_string)\n                                                (list 21)\n \
    \                                               (if (null? paren_string)\n   \
    \                                               (list 22)\n                  \
    \                                (if (null? paren_string)\n                  \
    \                                  (list 23)\n                               \
    \                     (if (", "  (define (parse_nested_parens_helper paren_string)\n\
    \    (if (null? paren_string)\n      (list 0)\n      (if (null? (cdr paren_string))\n\
    \        (list (car paren_string) (parse_nested_parens_helper (car paren_string)))\n\
    \        (list (car paren_string) (parse_nested_parens_helper (car (cdr paren_string)))))))\n\
    \  (parse_nested_parens_helper paren_string))\n", "  (let ((parsed_parens ()))\n\
    \    (let ((parsed_paren_level 0))\n      (while (not (null? paren_string))\n\
    \        (if (string=? paren_string \" \")\n          (set! parsed_paren_level\
    \ 0)\n          (else\n            (if (string=? paren_string \")\")\n       \
    \       (set! parsed_paren_level 0)\n            (else\n              (if (string=?\
    \ paren_string \"(\")\n                (set! parsed_paren_level (+ 1 parsed_paren_level))\n\
    \              (else\n                (if (string=? paren_string \")\")\n    \
    \              (set! parsed_paren_level 0)\n                (else\n          \
    \        (if (string=? paren_string \"(\")\n                    (set! parsed_paren_level\
    \ (+ 1 parsed_paren_level))\n                  (else\n                    (if\
    \ (string=? paren_string \")\")\n                      (set! parsed_paren_level\
    \ 0)\n                    (else\n                      (if (string=? paren_string\
    \ \"(\")\n                        (set! parsed_paren_level (+ 1 parsed_paren_level))\n\
    \                      (else\n                        (if (string=? paren_string\
    \ \")\")\n                          (set! parsed_paren_level 0)\n            \
    \            (else\n                          (if (string=? paren_string \"(\"\
    )\n                            (set! parsed_paren_level (+ 1 parsed_paren_level))\n\
    \                          (else\n                            (if (string=? paren_string\
    \ \")\")\n                              (set! parsed_paren_level 0)\n        \
    \                    (else\n                              (if (string=? paren_string\
    \ \"(\")\n                                (set! parsed_paren_level (+ 1 parsed_paren_level))\n\
    \                              (else\n                                (if (string=?\
    \ paren_string \")\")\n                                  (set! parsed_paren_level\
    \ 0)\n                                (else\n                                \
    \  (if (string=? paren_string \"(\")\n                                    (set!\
    \ parsed_paren_level (+ 1 parsed_paren_level))\n                             \
    \     (else\n                                    (if (string=? paren_string \"\
    )\")\n                                      (set! parsed_paren_level 0", "  (define\
    \ (parse_nested_parens_helper paren_string)\n    (if (null? paren_string)\n  \
    \    (list 0)\n      (if (null? (cdr paren_string))\n        (list (car paren_string))\n\
    \        (parse_nested_parens_helper (car paren_string)))))\n  (parse_nested_parens_helper\
    \ paren_string))\n", "  (define (parse_nested_parens_helper paren_string)\n  \
    \  (if (null? paren_string)\n      (list 0)\n      (if (null? (cdr paren_string))\n\
    \        (list (car paren_string) (parse_nested_parens_helper (car paren_string)))\n\
    \        (parse_nested_parens_helper (car paren_string)))))\n  (parse_nested_parens_helper\
    \ paren_string))\n", "  (define (parse_nested_parens_helper paren_string)\n  \
    \  (if (null? paren_string)\n      (list 0)\n      (list (parse_nested_parens_helper\
    \ (cdr paren_string))\n        (parse_nested_parens_helper (car paren_string))))))",
  "  (let ((parsed_parens ()))\n    (let ((parsed_parens_count 0))\n      (let ((parsed_parens_depth\
    \ 0))\n        (while (not (null? paren_string))\n          (if (string=? paren_string\
    \ \" \")\n            (setq parsed_parens_count (1+parsed_parens_count))\n   \
    \         (setq parsed_parens_depth (1+parsed_parens_depth)))\n          (setq\
    \ paren_string (cdr paren_string)))\n        (cond\n          ((>= parsed_parens_depth\
    \ 2) (return (list parsed_parens_count)))\n          ((= parsed_parens_depth 1)\
    \ (return (list parsed_parens_count)))\n          ((< parsed_parens_depth 0) (return\
    \ ()))\n          (else (return ()))\n        )\n      )\n    )\n  )\n)\n", " \
    \ (define (parse_nested_parens_helper paren_string)\n    (cond\n      [(string=?\
    \ paren_string \"\") (return (list))]\n      [(string=? paren_string \"()\") (return\
    \ (list 1))]\n      [(string=? paren_string \"()()\") (return (list 2))]\n   \
    \   [(string=? paren_string \"()()()\") (return (list 3))]\n      [(string=? paren_string\
    \ \"()()()()\") (return (list 4))]\n      [(string=? paren_string \"()()()()()\"\
    ) (return (list 5))]\n      [(string=? paren_string \"()()()()()()\") (return\
    \ (list 6))]\n      [(string=? paren_string \"()()()()()()()\") (return (list\
    \ 7))]\n      [(string=? paren_string \"()()()()()()()()\") (return (list 8))]\n\
    \      [(string=? paren_string \"()()()()()()()()()\") (return (list 9))]\n  \
    \    [(string=? paren_string \"()()()()()()()()()()\") (return (list 10))]\n \
    \     [(string=? paren_string \"()()()()()()()()()()()\") (return (list 11))]\n\
    \      [(string=? paren_string \"()()()()()()()()()()()()\") (return (list 12))]\n\
    \      [(string=? paren_string \"()()()()()()()()()()()()()\") (return (list 13))]\n\
    \      [(string=? paren_string \"()()()()()()()()()()()()()()\") (return (list\
    \ 14))]\n      [(string=? paren_string \"()()()()()()()()()()()()()()()\") (return\
    \ (list 15))]\n      [(string=? paren_string \"()()()()()()()()()()()()()()()()\"\
    ) (return (list 16))]\n      [(string=? paren_string \"()()", "  (let ((paren_count\
    \ 0))\n    (let ((paren_stack (list)))\n      (let ((result (list)))\n       \
    \ (while (not (null? paren_stack))\n          (if (null? (cdr paren_stack))\n\
    \            (if (null? (cdr (car paren_stack)))\n              (set! result (car\
    \ paren_stack))\n              (set! paren_stack (cdr paren_stack)))\n       \
    \     (set! paren_stack (car paren_stack)))\n          (set! paren_count (paren_count\
    \ + 1))\n          (set! paren_stack (cons (car paren_stack) paren_stack)))\n\
    \        (set! paren_stack (cons (car paren_stack) paren_stack)))\n      (return\
    \ result))))\n", "  (define (parse_nested_parens_helper paren_string)\n    (if\
    \ (null? paren_string)\n      (list 0)\n      (if (null? (cdr paren_string))\n\
    \        (list (car paren_string))\n        (parse_nested_parens_helper (car paren_string)))))\n\
    \  (parse_nested_parens_helper paren_string))\n", "  (let* ([paren_stack (list)])\n\
    \    (while (not (empty? paren_stack))\n      (let ([top (car paren_stack)])\n\
    \        (if (null? (cdr top))\n          (if (null? (cdr (cdr top)))\n      \
    \      (if (null? (cdr (cdr (cdr top))))\n              (if (null? (cdr (cdr (cdr\
    \ (cdr top))))))\n                (if (null? (cdr (cdr (cdr (cdr (cdr top))))))\n\
    \                  (if (null? (cdr (cdr (cdr (cdr (cdr (cdr top))))))))\n    \
    \                (if (null? (cdr (cdr (cdr (cdr (cdr (cdr (cdr top))))))))))\n\
    \                  (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr top))))))))))\n   \
    \         (cdr (cdr (cdr (cdr (cdr top))))))\n          (paren_stack (cons top\
    \ (cdr paren_stack)))\n        (paren_stack (cons top (cdr top))))))\n    (cdr\
    \ paren_stack))))\n", "  (define (parse_nested_parens_helper paren_string)\n \
    \   (cond\n      [(string=? paren_string \"\") (return (list))]\n      [(string=?\
    \ paren_string \"(\") (return (parse_nested_parens_helper paren_string))]\n  \
    \    [(string=? paren_string \")\") (return (parse_nested_parens_helper paren_string))]\n\
    \      [(string=? paren_string \"(\" (return (parse_nested_parens_helper paren_string)))]\n\
    \      [(string=? paren_string \")\") (return (parse_nested_parens_helper paren_string))]\n\
    \      [(string=? paren_string \"(\" (return (parse_nested_parens_helper paren_string)))]\n\
    \      [(string=? paren_string \")\") (return (parse_nested_parens_helper paren_string))]\n\
    \      [(string=? paren_string \"(\" (return (parse_nested_parens_helper paren_string)))]\n\
    \      [(string=? paren_string \")\") (return (parse_nested_parens_helper paren_string))]\n\
    \      [(string=? paren_string \"(\" (return (parse_nested_parens_helper paren_string)))]\n\
    \      [(string=? paren_string \")\") (return (parse_nested_parens_helper paren_string))]\n\
    \      [(string=? paren_string \"(\" (return (parse_nested_parens_helper paren_string)))]\n\
    \      [(string=? paren_string \")\") (return (parse_nested_parens_helper paren_string))]\n\
    \      [(string=? paren_string \"(\" (return (parse_nested_parens_helper paren_string)))]\n\
    \      [(string=? paren_string \")\") (return (parse_nested_parens_helper paren_string))]\n\
    \      [(string=? paren_string \"(\" (return", "  (define (parse_nested_parens_helper\
    \ paren_string)\n    (if (null? paren_string)\n      (list 0)\n      (if (null?\
    \ (cdr paren_string))\n        (list (car paren_string) (parse_nested_parens_helper\
    \ (car paren_string)))\n        (parse_nested_parens_helper (car paren_string)))))\n\
    \  (parse_nested_parens_helper paren_string))\n", "  (define (parse_nested_parens_helper\
    \ paren_string)\n    (if (null? paren_string)\n      (list 0)\n      (list (parse_nested_parens_helper\
    \ (cdr paren_string))))))\n", "  (let ((paren_count (make-vector 1 1)))\n    (let\
    \ ((paren_stack (make-vector 1 1)))\n      (let ((result (make-vector 1 1)))\n\
    \        (let ((depth (make-vector 1 1)))\n          (let ((depth_stack (make-vector\
    \ 1 1)))\n            (let ((depth_count (make-vector 1 1)))\n              (let\
    \ ((depth_stack_count (make-vector 1 1)))\n                (let ((depth_stack_count_count\
    \ (make-vector 1 1)))\n                  (let ((depth_stack_count_count_count\
    \ (make-vector 1 1)))\n                    (let ((depth_stack_count_count_count_count\
    \ (make-vector 1 1)))\n                      (let ((depth_stack_count_count_count_count_count\
    \ (make-vector 1 1)))\n                        (let ((depth_stack_count_count_count_count_count_count\
    \ (make-vector 1 1)))\n                          (let ((depth_stack_count_count_count_count_count_count_count\
    \ (make-vector 1 1)))\n                            (let ((depth_stack_count_count_count_count_count_count_count_count\
    \ (make-vector 1 1)))\n                              (let ((depth_stack_count_count_count_count_count_count_count_count_count\
    \ (make-vector 1 1)))\n                                (let ((depth_stack_count_count_count_count_count_count_count_count_count_count\
    \ (make-vector 1 1)))\n                                  (let ((depth_stack_count_count_count_count_count_count_count_count_count_count_count\
    \ (make-vector 1 1)))\n                                    (let ((depth_stack_count_count_count_count_count_count_count_count_count_count_count_count\
    \ (make-vector 1 1)))\n                                      (let ((depth_stack_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ (make-vector 1 1)))\n                                        (let ((depth_stack_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ (make-vector 1", "  (define (parse_nested_parens_helper paren_string)\n    (if\
    \ (null? paren_string)\n      (list 0)\n      (list (parse_nested_parens_helper\
    \ (cdr paren_string))\n         (parse_nested_parens_helper (car paren_string))))))\n",
  "  (let ((paren_stack (make-vector 10 paren_string)))\n    (let ((result (make-vector\
    \ 10)))\n      (let ((depth (0)))\n        (while (not (null? paren_stack))\n\
    \          (if (null? (cdr paren_stack))\n            (set! depth (depth + 1))\n\
    \            (set! result (cons depth (car paren_stack)))\n            (set! paren_stack\
    \ (cdr paren_stack)))\n          (set! paren_stack (car paren_stack))))\n    (reverse\
    \ result)))\n", "  (define (parse_nested_parens_helper paren_string)\n    (if\
    \ (null? paren_string)\n      (list 0)\n      (if (null? (cdr paren_string))\n\
    \        (list (car paren_string))\n        (parse_nested_parens_helper (car paren_string)))))\n\
    \  (parse_nested_parens_helper paren_string))\n", "  (define (parse_nested_parens_helper\
    \ paren_string)\n    (if (null? paren_string)\n      (list 0)\n      (if (null?\
    \ (cdr paren_string))\n        (list (car paren_string) (parse_nested_parens_helper\
    \ (car paren_string)))\n        (parse_nested_parens_helper (car paren_string))))))\n",
  "  (define (parse_nested_parens_helper paren_string)\n    (if (null? paren_string)\n\
    \      (list 0)\n      (if (null? paren_string)\n        (list 0)\n        (if\
    \ (null? paren_string)\n          (list 0)\n          (if (null? paren_string)\n\
    \            (list 0)\n            (if (null? paren_string)\n              (list\
    \ 0)\n              (if (null? paren_string)\n                (list 0)\n     \
    \           (if (null? paren_string)\n                  (list 0)\n           \
    \       (if (null? paren_string)\n                    (list 0)\n             \
    \       (if (null? paren_string)\n                      (list 0)\n           \
    \           (if (null? paren_string)\n                        (list 0)\n     \
    \                   (if (null? paren_string)\n                          (list\
    \ 0)\n                          (if (null? paren_string)\n                   \
    \         (list 0)\n                            (if (null? paren_string)\n   \
    \                           (list 0)\n                              (if (null?\
    \ paren_string)\n                                (list 0)\n                  \
    \              (if (null? paren_string)\n                                  (list\
    \ 0)\n                                  (if (null? paren_string)\n           \
    \                         (list 0)\n                                    (if (null?\
    \ paren_string)\n                                      (list 0)\n            \
    \                          (if (null? paren_string)\n                        \
    \                (list 0)\n                                        (if (null?\
    \ paren_string)\n                                          (list 0)\n        \
    \                                  (if (null? paren_string)\n                \
    \                            (list 0)\n                                      \
    \      (if (null? paren_string)\n                                            \
    \  (list 0)\n                                              (if (null? paren_string)\n\
    \                                                (list 0)\n                  \
    \                              (if (null? paren_string)\n                    \
    \                              (list 0)\n                                    \
    \              (if (null? paren_string)\n                                    \
    \                (list 0)\n                                                  \
    \  (if (", "  (define (parse_nested_parens_helper paren_string)\n    (if (null?\
    \ paren_string)\n      (list 0)\n      (if (null? (cdr paren_string))\n      \
    \  (list (car paren_string))\n        (parse_nested_parens_helper (cdr paren_string))))))\n",
  "  (define (parse_nested_parens_helper paren_string depth)\n    (if (null? paren_string)\n\
    \      (list depth)\n      (if (null? paren_string)\n        (list depth)\n  \
    \      (if (null? paren_string)\n          (list depth)\n          (if (null?\
    \ paren_string)\n            (list depth)\n            (if (null? paren_string)\n\
    \              (list depth)\n              (if (null? paren_string)\n        \
    \        (list depth)\n                (if (null? paren_string)\n            \
    \      (list depth)\n                  (if (null? paren_string)\n            \
    \        (list depth)\n                    (if (null? paren_string)\n        \
    \              (list depth)\n                      (if (null? paren_string)\n\
    \                        (list depth)\n                        (if (null? paren_string)\n\
    \                          (list depth)\n                          (if (null?\
    \ paren_string)\n                            (list depth)\n                  \
    \          (if (null? paren_string)\n                              (list depth)\n\
    \                              (if (null? paren_string)\n                    \
    \            (list depth)\n                                (if (null? paren_string)\n\
    \                                  (list depth)\n                            \
    \      (if (null? paren_string)\n                                    (list depth)\n\
    \                                    (if (null? paren_string)\n              \
    \                        (list depth)\n                                      (if\
    \ (null? paren_string)\n                                        (list depth)\n\
    \                                        (if (null? paren_string)\n          \
    \                                (list depth)\n                              \
    \            (if (null? paren_string)\n                                      \
    \      (list depth)\n                                            (if (null? paren_string)\n\
    \                                              (list depth)\n                \
    \                              (if (null? paren_string)\n                    \
    \                            (list depth)\n                                  \
    \              (if (null? paren_string)\n                                    \
    \              (list depth)\n                                                \
    \  (if (null? paren_string)\n                                                \
    \    (list depth)\n                                                    (if", " \
    \ (define (parse_nested_parens_helper paren_string)\n    (if (null? paren_string)\n\
    \      (list 0)\n      (if (null? (cdr paren_string))\n        (list (car paren_string)\
    \ (parse_nested_parens_helper (car paren_string)))\n        (list (car paren_string)\
    \ (parse_nested_parens_helper (car (cdr paren_string)))))))\n  (parse_nested_parens_helper\
    \ paren_string))\n", "  (define (parse_parens paren_string)\n    (if (null? paren_string)\n\
    \      (list 0)\n      (if (null? (cdr paren_string))\n        (list (car paren_string)\
    \ 1)\n        (parse_parens (cdr paren_string))))))\n", "  (let ((parsed_parens\
    \ (parse-group paren_string)))\n    (if (null? parsed_parens)\n      (list 0)\n\
    \      (let ((nested_parens (parse-nested-parens parsed_parens)))\n        (if\
    \ (null? nested_parens)\n          (list 0)\n          (list (car nested_parens)\
    \ (cdr nested_parens))))))))\n", "  (let ((parsed_parens ()))\n    (let ((parsed_parens\
    \ ()))\n      (let ((parsed_parens ()))\n        (let ((parsed_parens ()))\n \
    \         (let ((parsed_parens ()))\n            (let ((parsed_parens ()))\n \
    \             (let ((parsed_parens ()))\n                (let ((parsed_parens\
    \ ()))\n                  (let ((parsed_parens ()))\n                    (let\
    \ ((parsed_parens ()))\n                      (let ((parsed_parens ()))\n    \
    \                    (let ((parsed_parens ()))\n                          (let\
    \ ((parsed_parens ()))\n                            (let ((parsed_parens ()))\n\
    \                              (let ((parsed_parens ()))\n                   \
    \             (let ((parsed_parens ()))\n                                  (let\
    \ ((parsed_parens ()))\n                                    (let ((parsed_parens\
    \ ()))\n                                      (let ((parsed_parens ()))\n    \
    \                                    (let ((parsed_parens ()))\n             \
    \                             (let ((parsed_parens ()))\n                    \
    \                        (let ((parsed_parens ()))\n                         \
    \                     (let ((parsed_parens ()))\n                            \
    \                    (let ((parsed_parens ()))\n                             \
    \                     (let ((parsed_parens ()))\n                            \
    \                        (let ((parsed_parens ()))\n                         \
    \                             (let ((parsed_parens ()))\n                    \
    \                                    (let ((parsed_parens ()))\n             \
    \                                             (let ((parsed_parens ()))\n    \
    \                                                        (let ((parsed_parens\
    \ ()))\n                                                              (let ((parsed_parens\
    \ ()))\n                                                                (let ((parsed_parens\
    \ ()))\n                                                                  (let\
    \ ((parsed_parens ()))\n                                                     \
    \               (let ((parsed_parens ()))\n                               ", " \
    \ (let ((parsed_parens ()))\n    (for-each (lambda (paren)\n                (if\
    \ (null? paren)\n                    (append parsed_parens ()))\n            \
    \    (if (null? (cdr paren))\n                    (append parsed_parens (car paren))))\n\
    \      paren_string)))\n", "  (define (parse_nested_parens_helper paren_string)\n\
    \    (cond\n      [(string-equal? paren_string \"\") (return (list))]\n      [(string-equal?\
    \ paren_string \"(\") (return (parse_nested_parens_helper paren_string))]\n  \
    \    [(string-equal? paren_string \")\") (return (parse_nested_parens_helper paren_string))]\n\
    \      [(string-equal? paren_string \"(\" (return (parse_nested_parens_helper\
    \ paren_string)))]\n      [(string-equal? paren_string \")\") (return (parse_nested_parens_helper\
    \ paren_string))]\n      [(string-equal? paren_string \"(\" (return (parse_nested_parens_helper\
    \ paren_string)))]\n      [(string-equal? paren_string \")\") (return (parse_nested_parens_helper\
    \ paren_string))]\n      [(string-equal? paren_string \"(\" (return (parse_nested_parens_helper\
    \ paren_string)))]\n      [(string-equal? paren_string \")\") (return (parse_nested_parens_helper\
    \ paren_string))]\n      [(string-equal? paren_string \"(\" (return (parse_nested_parens_helper\
    \ paren_string)))]\n      [(string-equal? paren_string \")\") (return (parse_nested_parens_helper\
    \ paren_string))]\n      [(string-equal? paren_string \"(\" (return (parse_nested_parens_helper\
    \ paren_string)))]\n      [(string-equal? paren_string \")\") (return (parse_nested_parens_helper\
    \ paren_string))]\n      [(string-equal? paren_string \"(\" (return (parse_nested_parens_helper\
    \ paren_string)))]\n      [(string-equal? paren_string \")\") (return (parse_nested_parens_helper\
    \ paren_string))]", "  (let ((paren_count (make-vector 1 1)))\n    (let ((paren_stack\
    \ (make-vector 1 1)))\n      (let ((result (make-vector 1 1)))\n        (let ((depth\
    \ (make-vector 1 1)))\n          (let ((depth_count (make-vector 1 1)))\n    \
    \        (let ((depth_stack (make-vector 1 1)))\n              (let ((result (make-vector\
    \ 1 1)))\n                (let ((depth_stack (make-vector 1 1)))\n           \
    \       (let ((result (make-vector 1 1)))\n                    (let ((depth_stack\
    \ (make-vector 1 1)))\n                      (let ((result (make-vector 1 1)))\n\
    \                        (let ((depth_stack (make-vector 1 1)))\n            \
    \              (let ((result (make-vector 1 1)))\n                           \
    \ (let ((depth_stack (make-vector 1 1)))\n                              (let ((result\
    \ (make-vector 1 1)))\n                                (let ((depth_stack (make-vector\
    \ 1 1)))\n                                  (let ((result (make-vector 1 1)))\n\
    \                                    (let ((depth_stack (make-vector 1 1)))\n\
    \                                      (let ((result (make-vector 1 1)))\n   \
    \                                     (let ((depth_stack (make-vector 1 1)))\n\
    \                                          (let ((result (make-vector 1 1)))\n\
    \                                            (let ((depth_stack (make-vector 1\
    \ 1)))\n                                              (let ((result (make-vector\
    \ 1 1)))\n                                                (let ((depth_stack (make-vector\
    \ 1 1)))\n                                                  (let ((result (make-vector\
    \ 1 1)))\n                                                    (let ((depth_stack\
    \ (make-vector 1 1)))\n                                                      (let\
    \ ((result (make-vector 1 1)))\n                                             \
    \           (let ((depth_stack (make-vector 1 1)))\n                         \
    \                                 (let ((result (make-vector 1 1)))\n        \
    \                                                    (let ((depth_stack (make-vector\
    \ 1 1)))\n                                                              (let ((result\
    \ (make-vector 1 1)))\n                                                      \
    \          (let ((depth_stack (make-vector 1 1)))\n", "  (define (parse_nested_parens_helper\
    \ paren_string)\n    (if (null? paren_string)\n      (list 0)\n      (let ((nesting_level\
    \ (car paren_string)))\n        (if (null? (cdr paren_string))\n          (list\
    \ nesting_level)\n          (parse_nested_parens_helper (cdr paren_string))))))\n\
    \  (parse_nested_parens_helper paren_string))\n", "  (let ((result (list)))\n\
    \    (let ((parsed_parens (list)))\n      (let ((depth (0)))\n        (while (not\
    \ (null? parsed_parens))\n          (if (null? (cdr parsed_parens))\n        \
    \    (if (null? (cdr (cdr parsed_parens)))\n              (set! depth (depth +\
    \ 1))\n              (set! result (append result (list depth))))\n           \
    \ (set! depth (depth + 1))\n            (set! parsed_parens (cdr parsed_parens)))\n\
    \          (set! parsed_parens (cdr parsed_parens))))\n    (return result)))\n",
  "  (define (parse_nested_parens_helper paren_string)\n    (if (null? paren_string)\n\
    \      (list 0)\n      (let ((nesting_level (car paren_string)))\n        (if\
    \ (null? (cdr paren_string))\n          (list nesting_level)\n          (parse_nested_parens_helper\
    \ (cdr paren_string)))))))", "  (define (parse_nested_parens_helper paren_string)\n\
    \    (if (null? paren_string)\n      (list 0)\n      (let ((parsed_paren_string\
    \ (string-split paren_string \" \")))\n        (if (null? parsed_paren_string)\n\
    \          (list 0)\n          (let ((parsed_paren_string_helper (string-split\
    \ parsed_paren_string \" \")))\n            (if (null? parsed_paren_string_helper)\n\
    \              (list 0)\n              (let ((parsed_paren_string_helper_helper\
    \ (string-split parsed_paren_string_helper \" \")))\n                (if (null?\
    \ parsed_paren_string_helper_helper)\n                  (list 0)\n           \
    \       (list (car parsed_paren_string_helper_helper)\n                    (parse_nested_parens_helper\
    \ (cdr parsed_paren_string_helper_helper))))))))))))))\n  (parse_nested_parens_helper\
    \ paren_string))\n", "  (define (parse_nested_parens_helper paren_string)\n  \
    \  (if (null? paren_string)\n      (list 0)\n      (let (((paren_string_length\
    \ (length paren_string))))\n        (if (= paren_string_length 0)\n          (list\
    \ 0)\n          (let (((paren_string_index (0))))\n            (let (((paren_string_index_max\
    \ (paren_string_length))))\n              (while (< paren_string_index paren_string_index_max)\n\
    \                (let (((paren_string_index_max (paren_string_index_max))))\n\
    \                  (if (null? (parse_nested_parens_helper (paren_string (string-ref\
    \ paren_string paren_string_index))))\n                    (list (paren_string_index)\
    \ (paren_string_index_max))\n                    (paren_string_index (+ 1))))))))))))))\n",
  "  (let ((result (list)))\n    (let ((parsed_parens (list)))\n      (let ((depth\
    \ (0)))\n        (while (not (null? paren_string))\n          (if (null? (cdr\
    \ parsed_parens))\n            (error \"Unbalanced parentheses\"))\n         \
    \   (if (null? (car parsed_parens))\n              (error \"Unbalanced parentheses\"\
    ))\n              (if (null? (car (car parsed_parens)))\n                (error\
    \ \"Unbalanced parentheses\"))\n                (if (null? (car (car (car parsed_parens))))\n\
    \                  (error \"Unbalanced parentheses\"))\n                  (if\
    \ (null? (car (car (car (car parsed_parens))))))\n                    (error \"\
    Unbalanced parentheses\"))\n                    (if (null? (car (car (car (car\
    \ (car parsed_parens))))))\n                      (error \"Unbalanced parentheses\"\
    ))\n                      (if (null? (car (car (car (car (car (car parsed_parens))))))))\n\
    \                        (error \"Unbalanced parentheses\"))\n               \
    \         (if (null? (car (car (car (car (car (car (car parsed_parens))))))))))\n\
    \                        (error \"Unbalanced parentheses\"))\n               \
    \         (if (null? (car (car (car (car (car (car (car (car parsed_parens))))))))))\n\
    \                          (error \"Unbalanced parentheses\"))\n             \
    \             (if (null? (car (car (car (car (car (car (car (car (car parsed_parens)))))))))))))\n\
    \                          (error \"Unbalanced parentheses\"))\n             \
    \             (if (null? (car (car (car (car (car (car (car (car (car (car parsed_parens)))))))))))))))))\n\
    \                          (error \"Unbalanced parentheses\"))\n             \
    \             (if (null? (car (car (car (car (car (car (car (car (car (car (car\
    \ parsed_parens)))))))))))))))))\n                          (error \"Unbalanced\
    \ parentheses\"))\n                          (if (null? (car (car (car (car (car\
    \ (car (car (car (car (car (car (car parsed_parens)))))))))))))))))\n        \
    \                  (error \"Unbalanced parentheses\"))\n                     \
    \     (if (null? (car (car (car", "  (define (parse_nested_parens_helper paren_string)\n\
    \    (if (null? paren_string)\n      (list 0)\n      (if (null? paren_string)\n\
    \        (list 0)\n        (if (null? paren_string)\n          (list 0)\n    \
    \      (if (null? paren_string)\n            (list 0)\n            (if (null?\
    \ paren_string)\n              (list 0)\n              (if (null? paren_string)\n\
    \                (list 0)\n                (if (null? paren_string)\n        \
    \          (list 0)\n                  (if (null? paren_string)\n            \
    \        (list 0)\n                    (if (null? paren_string)\n            \
    \          (list 0)\n                      (if (null? paren_string)\n        \
    \                (list 0)\n                        (if (null? paren_string)\n\
    \                          (list 0)\n                          (if (null? paren_string)\n\
    \                            (list 0)\n                            (if (null?\
    \ paren_string)\n                              (list 0)\n                    \
    \          (if (null? paren_string)\n                                (list 0)\n\
    \                                (if (null? paren_string)\n                  \
    \                (list 0)\n                                  (if (null? paren_string)\n\
    \                                    (list 0)\n                              \
    \      (if (null? paren_string)\n                                      (list 0)\n\
    \                                      (if (null? paren_string)\n            \
    \                            (list 0)\n                                      \
    \  (if (null? paren_string)\n                                          (list 0)\n\
    \                                          (if (null? paren_string)\n        \
    \                                    (list 0)\n                              \
    \              (if (null? paren_string)\n                                    \
    \          (list 0)\n                                              (if (null?\
    \ paren_string)\n                                                (list 0)\n  \
    \                                              (if (null? paren_string)\n    \
    \                                              (list 0)\n                    \
    \                              (if (null? paren_string)\n                    \
    \                                (list 0)\n                                  \
    \                  (if (", "  (let ((paren_count 0))\n    (let ((paren_stack (list)))\n\
    \      (while (not (null? paren_stack))\n        (if (null? (cdr paren_stack))\n\
    \          (if (null? (cdr (car paren_stack)))\n            (set! paren_count\
    \ (paren_count + 1))\n            (print paren_count))\n          (set! paren_stack\
    \ (cdr paren_stack)))))\n    (print paren_count)))\n", "  (define (parse_nested_parens_helper\
    \ paren_string)\n    (if (null? paren_string)\n      (list 0)\n      (if (null?\
    \ paren_string)\n        (list 0)\n        (if (null? paren_string)\n        \
    \  (list 0)\n          (if (null? paren_string)\n            (list 0)\n      \
    \      (if (null? paren_string)\n              (list 0)\n              (if (null?\
    \ paren_string)\n                (list 0)\n                (if (null? paren_string)\n\
    \                  (list 0)\n                  (if (null? paren_string)\n    \
    \                (list 0)\n                    (if (null? paren_string)\n    \
    \                  (list 0)\n                      (if (null? paren_string)\n\
    \                        (list 0)\n                        (if (null? paren_string)\n\
    \                          (list 0)\n                          (if (null? paren_string)\n\
    \                            (list 0)\n                            (if (null?\
    \ paren_string)\n                              (list 0)\n                    \
    \          (if (null? paren_string)\n                                (list 0)\n\
    \                                (if (null? paren_string)\n                  \
    \                (list 0)\n                                  (if (null? paren_string)\n\
    \                                    (list 0)\n                              \
    \      (if (null? paren_string)\n                                      (list 0)\n\
    \                                      (if (null? paren_string)\n            \
    \                            (list 0)\n                                      \
    \  (if (null? paren_string)\n                                          (list 0)\n\
    \                                          (if (null? paren_string)\n        \
    \                                    (list 0)\n                              \
    \              (if (null? paren_string)\n                                    \
    \          (list 0)\n                                              (if (null?\
    \ paren_string)\n                                                (list 0)\n  \
    \                                              (if (null? paren_string)\n    \
    \                                              (list 0)\n                    \
    \                              (if (null? paren_string)\n                    \
    \                                (list 0)\n                                  \
    \                  (if (", "  (let ((parsed_parens ()))\n    (let ((parsed_paren_level\
    \ 0))\n      (let ((parsed_paren_string ()))\n        (while (not (null? paren_string))\n\
    \          (if (not (null? (cdr parsed_paren_string)))\n            (if (not (null?\
    \ (cdr (cdr parsed_paren_string))))\n              (setq parsed_paren_level (parsed_paren_level\
    \ + 1))\n              (setq parsed_paren_string (cdr (cdr parsed_paren_string))))\n\
    \            (setq parsed_paren_string (cdr parsed_paren_string)))\n         \
    \ (setq parsed_paren_string (car parsed_paren_string)))\n        (if (not (null?\
    \ parsed_paren_string))\n          (setq parsed_paren_level (parsed_paren_level\
    \ + 1))\n          (setq parsed_paren_string ()))\n        (if (not (null? parsed_paren_string))\n\
    \          (setq parsed_paren_level (parsed_paren_level + 1))\n          (setq\
    \ parsed_paren_string ()))\n        (if (not (null? parsed_paren_string))\n  \
    \        (setq parsed_paren_level (parsed_paren_level + 1))\n          (setq parsed_paren_string\
    \ ()))\n        (if (not (null? parsed_paren_string))\n          (setq parsed_paren_level\
    \ (parsed_paren_level + 1))\n          (setq parsed_paren_string ()))\n      \
    \  (if (not (null? parsed_paren_string))\n          (setq parsed_paren_level (parsed_paren_level\
    \ + 1))\n          (setq parsed_paren_string ()))\n        (if (not (null? parsed_paren_string))\n\
    \          (setq parsed_paren_level (parsed_paren_level + 1))\n          (setq\
    \ parsed_paren_string ()))\n        (if (not (null? parsed_paren_string))\n  \
    \        (setq parsed_paren_level (parsed_paren_level + 1))\n          (setq parsed_paren_string\
    \ ()))\n        (", "  (let ((paren_count (make-vector 1 1)))\n    (let ((paren_stack\
    \ (make-vector 1 1)))\n      (let ((depth (make-vector 1 1)))\n        (let ((depth_stack\
    \ (make-vector 1 1)))\n          (let ((result (make-vector 1 1)))\n         \
    \   (let ((result_stack (make-vector 1 1)))\n              (let ((result_count\
    \ (make-vector 1 1)))\n                (let ((result_index (make-vector 1 1)))\n\
    \                  (let ((result_count_stack (make-vector 1 1)))\n           \
    \         (let ((result_count_index (make-vector 1 1)))\n                    \
    \  (let ((result_count_stack_index (make-vector 1 1)))\n                     \
    \   (let ((result_count_stack_count (make-vector 1 1)))\n                    \
    \      (let ((result_count_stack_count_index (make-vector 1 1)))\n           \
    \                 (let ((result_count_stack_count_count (make-vector 1 1)))\n\
    \                              (let ((result_count_stack_count_count_index (make-vector\
    \ 1 1)))\n                                (let ((result_count_stack_count_count_count\
    \ (make-vector 1 1)))\n                                  (let ((result_count_stack_count_count_count_index\
    \ (make-vector 1 1)))\n                                    (let ((result_count_stack_count_count_count_count\
    \ (make-vector 1 1)))\n                                      (let ((result_count_stack_count_count_count_count_index\
    \ (make-vector 1 1))))\n                                      (let ((result_count_stack_count_count_count_count_count\
    \ (make-vector
  "  (define (parse_nested_parens_helper paren_string)\n    (if (null? paren_string)\n\
    \      (list 0)\n      (let ((parsed_paren_string (string-split \" \" paren_string)))\n\
    \        (if (null? parsed_paren_string)\n          (list 0)\n          (let ((parsed_paren_string_length\
    \ (length parsed_paren_string))\n                (max_nesting_level (0)))\n  \
    \          (for-each (lambda (paren_string)\n                       (if (null?\
    \ paren_string)\n                         (list 0)\n                         (if\
    \ (null? (cdr paren_string))\n                           (list max_nesting_level)\n\
    \                           (let ((nesting_level (car paren_string)))\n      \
    \                       (if (null? nesting_level)\n                          \
    \     (list 0)\n                               (if (null? (cdr nesting_level))\n\
    \                                 (list max_nesting_level)\n                 \
    \                (parse_nested_parens_helper (cdr nesting_level))))))))\n    \
    \          parsed_paren_string)))\n    (parse_nested_parens_helper paren_string)))\n",
  "  (define (parse_parens paren_string)\n    (if (null? paren_string)\n      (list\
    \ 0)\n      (if (null? (cdr paren_string))\n        (list (car paren_string))\n\
    \        (parse_parens (cdr paren_string))))))\n", "  (let ((paren_count 0))\n\
    \    (let ((paren_stack (list)))\n      (let ((result (list)))\n        (while\
    \ (not (null? paren_stack))\n          (let ((curr_paren (car paren_stack)))\n\
    \            (if (null? (cdr curr_paren))\n              (if (null? (cdr (cdr\
    \ curr_paren)))\n                (set! paren_count (paren_count + 1))\n      \
    \          (set! result (cons paren_count result))\n                (set! paren_stack\
    \ (cdr paren_stack)))\n              (set! paren_stack (cdr curr_paren)))\n  \
    \          (set! paren_stack (cdr paren_stack))))\n      (return result))))\n",
  "  (define (parse_nested_parens_helper paren_string)\n    (if (null? paren_string)\n\
    \      (list 0)\n      (if (null? (cdr paren_string))\n        (list (car paren_string)\
    \ (parse_nested_parens_helper (car paren_string)))\n        (parse_nested_parens_helper\
    \ (car paren_string)))))\n  (parse_nested_parens_helper paren_string))\n", " \
    \ (define (parse_nested_parens_helper paren_string)\n    (if (null? paren_string)\n\
    \      (list 0)\n      (let ((nesting_level (car paren_string)))\n        (if\
    \ (null? (cdr paren_string))\n          (list nesting_level)\n          (parse_nested_parens_helper\
    \ (cdr paren_string)))))\n    (parse_nested_parens_helper paren_string)))\n",
  "  (define (parse_nested_parens_helper paren_string)\n    (if (null? paren_string)\n\
    \      (list 0)\n      (if (null? (cdr paren_string))\n        (list (car paren_string)\
    \ (parse_nested_parens_helper (car paren_string)))\n        (list (car paren_string)\
    \ (parse_nested_parens_helper (car (cdr paren_string)))))))\n  (parse_nested_parens_helper\
    \ paren_string))\n", "  (define (parse_nested_parens_helper paren_string)\n  \
    \  (if (null? paren_string)\n      (list 0)\n      (if (null? (cdr paren_string))\n\
    \        (list (car paren_string) (parse_nested_parens_helper (car paren_string)))\n\
    \        (parse_nested_parens_helper (car paren_string)))))\n  (parse_nested_parens_helper\
    \ paren_string))\n", "  (define (parse_nested_parens_helper paren_string)\n  \
    \  (if (null? paren_string)\n      (list 0)\n      (if (null? paren_string)\n\
    \        (list 0)\n        (if (null? paren_string)\n          (list 0)\n    \
    \      (if (null? paren_string)\n            (list 0)\n            (if (null?\
    \ paren_string)\n              (list 0)\n              (if (null? paren_string)\n\
    \                (list 0)\n                (if (null? paren_string)\n        \
    \          (list 0)\n                  (if (null? paren_string)\n            \
    \        (list 0)\n                    (if (null? paren_string)\n            \
    \          (list 0)\n                      (if (null? paren_string)\n        \
    \                (list 0)\n                        (if (null? paren_string)\n\
    \                          (list 0)\n                          (if (null? paren_string)\n\
    \                            (list 0)\n                            (if (null?\
    \ paren_string)\n                              (list 0)\n                    \
    \          (if (null? paren_string)\n                                (list 0)\n\
    \                                (if (null? paren_string)\n                  \
    \                (list 0)\n                                  (if (null? paren_string)\n\
    \                                    (list 0)\n                              \
    \      (if (null? paren_string)\n                                      (list 0)\n\
    \                                      (if (null? paren_string)\n            \
    \                            (list 0)\n                                      \
    \  (if (null? paren_string)\n                                          (list 0)\n\
    \                                          (if (null? paren_string)\n        \
    \                                    (list 0)\n                              \
    \              (if (null? paren_string)\n                                    \
    \          (list 0)\n                                              (if (null?\
    \ paren_string)\n                                                (list 0)\n  \
    \                                              (if (null? paren_string)\n    \
    \                                              (list 0)\n                    \
    \                              (if (null? paren_string)\n                    \
    \                                (list 0)\n                                  \
    \                  (if (", "  (define (parse_nested_parens_helper paren_string)\n\
    \    (if (null? paren_string)\n      (list 0)\n      (if (null? paren_string)\n\
    \        (list 0)\n        (if (null? paren_string)\n          (list 0)\n    \
    \      (if (null? paren_string)\n            (list 0)\n            (if (null?\
    \ paren_string)\n              (list 0)\n              (if (null? paren_string)\n\
    \                (list 0)\n                (if (null? paren_string)\n        \
    \          (list 0)\n                  (if (null? paren_string)\n            \
    \        (list 0)\n                    (if (null? paren_string)\n            \
    \          (list 0)\n                      (if (null? paren_string)\n        \
    \                (list 0)\n                        (if (null? paren_string)\n\
    \                          (list 0)\n                          (if (null? paren_string)\n\
    \                            (list 0)\n                            (if (null?\
    \ paren_string)\n                              (list 0)\n                    \
    \          (if (null? paren_string)\n                                (list 0)\n\
    \                                (if (null? paren_string)\n                  \
    \                (list 0)\n                                  (if (null? paren_string)\n\
    \                                    (list 0)\n                              \
    \      (if (null? paren_string)\n                                      (list 0)\n\
    \                                      (if (null? paren_string)\n            \
    \                            (list 0)\n                                      \
    \  (if (null? paren_string)\n                                          (list 0)\n\
    \                                          (if (null? paren_string)\n        \
    \                                    (list 0)\n                              \
    \              (if (null? paren_string)\n                                    \
    \          (list 0)\n                                              (if (null?\
    \ paren_string)\n                                                (list 0)\n  \
    \                                              (if (null? paren_string)\n    \
    \                                              (list 0)\n                    \
    \                              (if (null? paren_string)\n                    \
    \                                (list 0)\n                                  \
    \                  (if (", "  (let ((result (list)))\n    (let ((parsed_parens\
    \ (string-split paren_string \" \")))\n      (for-each (lambda (paren)\n     \
    \            (if (null? (cdr paren))\n                     (append result (car\
    \ paren)))\n                 (if (null? (cdr (cdr paren)))\n                 \
    \    (append result (car (cdr paren))))))\n      (if (null? (cdr parsed_parens))\n\
    \          (append result (car parsed_parens))))))\n", "  (let ((paren_count 0))\n\
    \    (let ((paren_stack (list)))\n      (let ((result (list)))\n        (while\
    \ (not (null? paren_stack))\n          (if (null? (cdr paren_stack))\n       \
    \     (if (null? (cdr (car paren_stack)))\n              (set! result (car paren_stack))\n\
    \              (set! paren_stack (cdr paren_stack)))\n            (set! paren_stack\
    \ (car paren_stack)))\n          (set! paren_count (paren_count + 1))\n      \
    \    (set! paren_stack (cons (car paren_stack) paren_stack)))\n        (set! paren_count\
    \ (paren_count - 1))))\n    (if (null? paren_stack)\n      (list 0)\n      (list\
    \ (car paren_stack) (paren_count))))\n", "  (let ((result (list)))\n    (let ((parsed_parens\
    \ (list)))\n      (let ((depth (0)))\n        (while (not (null? parsed_parens))\n\
    \          (if (null? (cdr parsed_parens))\n            (if (null? (cdr (cdr parsed_parens)))\n\
    \              (set! depth (depth + 1))\n              (set! result (cons depth\
    \ result)))\n            (set! depth (depth + 1))\n            (set! parsed_parens\
    \ (cdr parsed_parens)))\n          (set! parsed_parens (cdr parsed_parens))))\n\
    \    (result)))\n", "  (define (parse_nested_parens_helper paren_string)\n   \
    \ (if (null? paren_string)\n      (list 0)\n      (let ((parsed_parens (parse_nested_parens_helper\
    \ (cdr paren_string))))\n        (if (null? parsed_parens)\n          (list 0)\n\
    \          (let ((nested_parens (parse_nested_parens_helper (car parsed_parens))))\n\
    \            (if (null? nested_parens)\n              (list 0)\n             \
    \ (let ((max_nesting (car (car nested_parens))))\n                (list max_nesting))))))))))\n",
  "  (define (parse_nested_parens_helper paren_string)\n    (if (null? paren_string)\n\
    \      (list 0)\n      (let ((nesting_level (car paren_string)))\n        (if\
    \ (null? (cdr paren_string))\n          (list nesting_level)\n          (parse_nested_parens_helper\
    \ (cdr paren_string)))))\n    (parse_nested_parens_helper paren_string)))\n",
  "  (let ((depth 0))\n    (while (string=? paren_string #\" \")\n      (string-set!\
    \ paren_string #\" \")\n      (if (string=? paren_string #\" \")\n        (set!\
    \ depth (depth + 1))\n        (if (string=? paren_string #\" \")\n          (set!\
    \ depth (depth + 1))\n          (if (string=? paren_string #\" \")\n         \
    \   (set! depth (depth + 1))\n            (if (string=? paren_string #\" \")\n\
    \              (set! depth (depth + 1))\n              (if (string=? paren_string\
    \ #\" \")\n                (set! depth (depth + 1))\n                (if (string=?\
    \ paren_string #\" \")\n                  (set! depth (depth + 1))\n         \
    \         (if (string=? paren_string #\" \")\n                    (set! depth\
    \ (depth + 1))\n                    (if (string=? paren_string #\" \")\n     \
    \                 (set! depth (depth + 1))\n                      (if (string=?\
    \ paren_string #\" \")\n                        (set! depth (depth + 1))\n   \
    \                     (if (string=? paren_string #\" \")\n                   \
    \       (set! depth (depth + 1))\n                          (if (string=? paren_string\
    \ #\" \")\n                            (set! depth (depth + 1))\n            \
    \                (if (string=? paren_string #\" \")\n                        \
    \      (set! depth (depth + 1))\n                              (if (string=? paren_string\
    \ #\" \")\n                                (set! depth (depth + 1))\n        \
    \                        (if (string=? paren_string #\" \")\n                \
    \                  (set! depth (depth + 1))\n                                \
    \  (if (string=? paren_string #\" \")\n                                    (set!\
    \ depth (depth + 1))\n                                    (if (string=? paren_string\
    \ #\" \")\n                                      (set! depth (depth + 1))\n  \
    \                                    (if (string=? paren_string #\" \")\n    \
    \                                    (set! depth (depth + 1", "  (define (parse_nested_parens_helper\
    \ paren_string)\n    (if (null? paren_string)\n      (list 0)\n      (if (null?\
    \ (cdr paren_string))\n        (list (car paren_string))\n        (parse_nested_parens_helper\
    \ (car paren_string))))))\n", "  (let ((paren_count (make-vector 0 (length paren_string))))\n\
    \    (let ((paren_stack (make-vector 0 (length paren_string))))\n      (let ((depth\
    \ (make-vector 0 (length paren_string))))\n        (let ((depth_count (make-vector\
    \ 0 (length paren_string))))\n          (let ((depth_stack (make-vector 0 (length\
    \ paren_string))))\n            (let ((result (make-vector 0 (length paren_string))))\n\
    \              (let ((i 0))\n                (while (not (eq? i (length paren_string)))\n\
    \                  (if (eq? (car paren_string i) '(')\n                    (set!\
    \ depth_stack (append depth_stack (append i paren_count)))\n                 \
    \   (set! depth_count (append depth_count 1))\n                    (set! depth\
    \ (append depth 1))\n                    (set! paren_stack (append paren_stack\
    \ (append i paren_count)))\n                    (set! paren_count (append paren_count\
    \ 1))\n                    (set! i (append i 1))))\n                (set! result\
    \ (append result depth))))))))))))))))\n", "  (define (parse_nested_parens_helper\
    \ paren_string)\n    (if (null? paren_string)\n      (list 0)\n    (if (null?\
    \ (cdr paren_string))\n      (list (car paren_string) (parse_nested_parens_helper\
    \ (car paren_string)))\n    (parse_nested_parens_helper (car paren_string))))\n\
    \  (parse_nested_parens_helper paren_string))\n", "  (let ((paren_count 0))\n\
    \    (let ((paren_stack (list)))\n      (let ((result (list)))\n        (while\
    \ (not (null? paren_stack))\n          (if (null? (cdr paren_stack))\n       \
    \     (if (null? (car paren_stack))\n              (set! result (car result))\n\
    \              (set! paren_count (car paren_count))\n              (set! paren_stack\
    \ (cdr paren_stack)))\n            (if (null? (car paren_stack))\n           \
    \   (set! paren_stack (cdr paren_stack)))\n            (set! paren_count (car\
    \ paren_count)))\n          (set! paren_stack (cdr paren_stack))))\n      (if\
    \ (null? paren_stack)\n        (set! result (list 1))\n        (set! paren_stack\
    \ (list)))\n      (if (null? (car paren_stack))\n        (set! paren_stack (cdr\
    \ paren_stack)))\n      (if (null? (car paren_stack))\n        (set! paren_stack\
    \ (cdr paren_stack)))\n      (set! paren_count (car paren_count))))\n  (if (null?\
    \ paren_stack)\n    (set! result (list 1)))\n  (if (null? (car paren_stack))\n\
    \    (set! paren_stack (cdr paren_stack)))\n  (if (null? (car paren_stack))\n\
    \    (set! paren_stack (cdr paren_stack)))\n  (if (null? (car paren_stack))\n\
    \    (set! paren_stack (cdr paren_stack)))\n  (if (null? (car paren_stack))\n\
    \    (set! paren_stack (cdr paren_stack)))\n  (if (null? (car paren_stack))\n\
    \    (set! paren_stack (cdr paren_stack)))\n  (if (null? (car paren_stack))\n\
    \    (set! paren_stack (cdr paren_stack)))\n  (if (null? (car paren_stack", " \
    \ (define (parse_nested_parens_helper paren_string)\n    (if (null? paren_string)\n\
    \      (list 0)\n      (if (null? paren_string)\n        (list 0)\n        (if\
    \ (null? paren_string)\n          (list 0)\n          (if (null? paren_string)\n\
    \            (list 0)\n            (if (null? paren_string)\n              (list\
    \ 0)\n              (if (null? paren_string)\n                (list 0)\n     \
    \           (if (null? paren_string)\n                  (list 0)\n           \
    \       (if (null? paren_string)\n                    (list 0)\n             \
    \       (if (null? paren_string)\n                      (list 0)\n           \
    \           (if (null? paren_string)\n                        (list 0)\n     \
    \                   (if (null? paren_string)\n                          (list\
    \ 0)\n                          (if (null? paren_string)\n                   \
    \         (list 0)\n                            (if (null? paren_string)\n   \
    \                           (list 0)\n                              (if (null?\
    \ paren_string)\n                                (list 0)\n                  \
    \              (if (null? paren_string)\n                                  (list\
    \ 0)\n                                  (if (null? paren_string)\n           \
    \                         (list 0)\n                                    (if (null?\
    \ paren_string)\n                                      (list 0)\n            \
    \                          (if (null? paren_string)\n                        \
    \                (list 0)\n                                        (if (null?\
    \ paren_string)\n                                          (list 0)\n        \
    \                                  (if (null? paren_string)\n                \
    \                            (list 0)\n                                      \
    \      (if (null? paren_string)\n                                            \
    \  (list 0)\n                                              (if (null? paren_string)\n\
    \                                                (list 0)\n                  \
    \                              (if (null? paren_string)\n                    \
    \                              (list 0)\n                                    \
    \              (if (null? paren_string)\n                                    \
    \                (list 0)\n                                                  \
    \  (if (", "  (define (parse_nested_parens_helper paren_string)\n    (if (null?\
    \ paren_string)\n      (list 0)\n      (let ((p (car paren_string)))\n       \
    \ (if (null? p)\n          (list 0)\n          (let ((q (car p)))\n          \
    \  (if (null? q)\n              (list 0)\n              (parse_nested_parens_helper\
    \ (cdr q)))))\n        (parse_nested_parens_helper (cdr p))))\n  (parse_nested_parens_helper\
    \ paren_string)))\n", "  (define (parse_nested_parens_helper paren_string)\n \
    \   (if (null? paren_string)\n      (list 0)\n      (if (null? (cdr paren_string))\n\
    \        (list (car paren_string) (parse_nested_parens_helper (car paren_string)))\n\
    \        (parse_nested_parens_helper (car paren_string)))))\n  (parse_nested_parens_helper\
    \ paren_string))\n", "  (define (parse_nested_parens_helper paren_string)\n  \
    \  (if (null? paren_string)\n      (list 0)\n    (if (null? (cdr paren_string))\n\
    \      (list (car paren_string) (parse_nested_parens_helper (car paren_string)))\n\
    \    (parse_nested_parens_helper (car paren_string))))\n  (parse_nested_parens_helper\
    \ paren_string))\n", "  (define (parse_nested_parens_helper paren_string)\n  \
    \  (if (null? paren_string)\n      (list 0)\n      (if (null? (cdr paren_string))\n\
    \        (list (car paren_string))\n        (parse_nested_parens_helper (car paren_string)))))\n\
    \  (parse_nested_parens_helper paren_string))\n", "  (define (parse_nested_parens_helper\
    \ paren_string)\n    (if (null? paren_string)\n      (list 0)\n      (if (null?\
    \ (cdr paren_string))\n        (list (car paren_string) (parse_nested_parens_helper\
    \ (car paren_string)))\n        (parse_nested_parens_helper (car paren_string)))))\n\
    \  (parse_nested_parens_helper paren_string))\n", "  (define (parse_nested_parens_helper\
    \ paren_string)\n    (if (null? paren_string)\n      (list 0)\n      (if (null?\
    \ paren_string)\n        (list 0)\n        (if (null? paren_string)\n        \
    \  (list 0)\n          (if (null? paren_string)\n            (list 0)\n      \
    \      (if (null? paren_string)\n              (list 0)\n              (if (null?\
    \ paren_string)\n                (list 0)\n                (if (null? paren_string)\n\
    \                  (list 0)\n                  (if (null? paren_string)\n    \
    \                (list 0)\n                    (if (null? paren_string)\n    \
    \                  (list 0)\n                      (if (null? paren_string)\n\
    \                        (list 0)\n                        (if (null? paren_string)\n\
    \                          (list 0)\n                          (if (null? paren_string)\n\
    \                            (list 0)\n                            (if (null?\
    \ paren_string)\n                              (list 0)\n                    \
    \          (if (null? paren_string)\n                                (list 0)\n\
    \                                (if (null? paren_string)\n                  \
    \                (list 0)\n                                  (if (null? paren_string)\n\
    \                                    (list 0)\n                              \
    \      (if (null? paren_string)\n                                      (list 0)\n\
    \                                      (if (null? paren_string)\n            \
    \                            (list 0)\n                                      \
    \  (if (null? paren_string)\n                                          (list 0)\n\
    \                                          (if (null? paren_string)\n        \
    \                                    (list 0)\n                              \
    \              (if (null? paren_string)\n                                    \
    \          (list 0)\n                                              (if (null?\
    \ paren_string)\n                                                (list 0)\n  \
    \                                              (if (null? paren_string)\n    \
    \                                              (list 0)\n                    \
    \                              (if (null? paren_string)\n                    \
    \                                (list 0)\n                                  \
    \                  (if (", "  (let ((parsed_parens (parse-string paren_string\
    \ \"()\"))))\n  (let ((parsed_parens_list (parse-list parsed_parens))\n      \
    \   (nested_parens_list (parse-list parsed_parens_list))))\n  (let ((nested_parens\
    \ (parse-list nested_parens_list))\n         (nested_parens_list (parse-list nested_parens_list)))\n\
    \    (let ((nested_parens_list (parse-list nested_parens_list))\n           (nested_parens_list_list\
    \ (parse-list nested_parens_list_list))))\n    (let ((nested_parens_list_list\
    \ (parse-list nested_parens_list_list))\n           (nested_parens_list_list_list\
    \ (parse-list nested_parens_list_list_list))))\n    (let ((nested_parens_list_list_list\
    \ (parse-list nested_parens_list_list_list))\n           (nested_parens_list_list_list_list\
    \ (parse-list nested_parens_list_list_list_list))))\n    (let ((nested_parens_list_list_list_list\
    \ (parse-list nested_parens_list_list_list_list))\n           (nested_parens_list_list_list_list_list\
    \ (parse-list nested_parens_list_list_list_list_list))))\n    (let ((nested_parens_list_list_list_list_list\
    \ (parse-list nested_parens_list_list_list_list_list_list))))\n    (let ((nested_parens_list_list_list_list_list_list\
    \ (parse-list nested_parens_list_list_list_list_list_list_list))))\n    (let ((nested_parens_list_list_list_list_list_list_list\
    \ (parse-list nested_parens_list_list_list_list_list_list_list_list))))\n    (let\
    \ ((nested_parens_list_list_list_list_list_list_list_list (parse-list", "  (define\
    \ (parse_nested_parens_helper paren_string)\n    (if (null? paren_string)\n  \
    \    (list 0)\n      (if (null? (cdr paren_string))\n        (list (car paren_string)\
    \ (parse_nested_parens_helper (car paren_string)))\n        (list (car paren_string)\
    \ (parse_nested_parens_helper (car (cdr paren_string)))))))\n  (parse_nested_parens_helper\
    \ paren_string))\n", "  (let ((result (list)))\n    (let ((parsed_parens (list)))\n\
    \      (let ((depth (0)))\n        (while (not (null? paren_string))\n       \
    \   (if (not (null? (cdr parsed_parens)))\n            (if (not (null? (cdr (cdr\
    \ parsed_parens))))\n              (setq depth (1))\n              (setq result\
    \ (append result (list depth))))\n            (setq depth (0))\n            (setq\
    \ parsed_parens (cdr parsed_parens)))\n          (if (not (null? (car parsed_parens)))\n\
    \            (setq depth (1))\n            (setq parsed_parens (car parsed_parens)))\n\
    \          (setq paren_string (cdr paren_string)))\n        (if (not (null? result))\n\
    \          (setq result (append result (list depth))))\n        (setq depth (0))))\n\
    \    (if (not (null? result))\n      (setq result (append result (list depth))))\n\
    \    (if (not (null? result))\n      (setq result (append result (list depth))))\n\
    \    (if (not (null? result))\n      (setq result (append result (list depth))))\n\
    \    (if (not (null? result))\n      (setq result (append result (list depth))))\n\
    \    (if (not (null? result))\n      (setq result (append result (list depth))))\n\
    \    (if (not (null? result))\n      (setq result (append result (list depth))))\n\
    \    (if (not (null? result))\n      (setq result (append result (list depth))))\n\
    \    (if (not (null? result))\n      (setq result (append result (list depth))))\n\
    \    (if (not (null? result))\n      (setq result (append result (list depth))))\n\
    \    (if (not (null? result))\n      (setq result (append result (list depth))))\n\
    \    (if (not (null? result))\n      (setq result (append result (list depth))))\n\
    \    (if (not (null? result))\n      (setq result (append result (list depth))))\n\
    \    (", "  (define (parse_nested_parens_helper paren_string)\n    (if (null?\
    \ paren_string)\n      (list 0)\n      (if (null? (cdr paren_string))\n      \
    \  (list (car paren_string) (parse_nested_parens_helper (car paren_string)))\n\
    \        (parse_nested_parens_helper (car paren_string)))))\n  (parse_nested_parens_helper\
    \ paren_string))\n", "  (define (parse_parens paren_string)\n    (if (null? paren_string)\n\
    \      (list 0)\n      (list (parse_parens (cdr paren_string))))\n    (if (null?\
    \ paren_string)\n      (list 0)\n      (parse_parens (car paren_string))))\n",
  "  (let ((result (list)))\n    (let ((parsed_parens (string-split paren_string \"\
    \ \")))\n      (for-each (lambda (p) (if (null? (cdr p)) (result (car p)))) parsed_parens))\n\
    \    (if (null? result) (list 0))\n    (car result)))\n", "  (define (parse_parens\
    \ paren_string)\n    (if (null? paren_string)\n      (list 0)\n      (if (null?\
    \ (cdr paren_string))\n        (list (car paren_string) 0)\n        (parse_parens\
    \ (cdr paren_string))))))\n", "  (define (parse_nested_parens_helper paren_string)\n\
    \    (if (null? paren_string)\n      (list 0)\n      (if (null? (cdr paren_string))\n\
    \        (list (car paren_string))\n        (parse_nested_parens_helper (car paren_string)))))\n\
    \  (parse_nested_parens_helper paren_string))\n", "  (let ((paren_count (make-vector\
    \ (length paren_string) #f)))\n    (let ((depth (make-vector (length paren_string)\
    \ 0)))\n      (let ((depth_count (make-vector (length paren_string) 0)))\n   \
    \     (for-each (lambda (i) (set! depth_count (vector-set! depth_count i)))\n\
    \          (lambda (i)\n            (for-each (lambda (j) (set! paren_count (vector-set!\
    \ paren_count j)))\n              (lambda (j)\n                (for-each (lambda\
    \ (k) (set! depth (vector-set! depth k)))\n                  (lambda (k)\n   \
    \                 (if (vector-ref paren_count k)\n                      (vector-set!\
    \ depth_count (vector-set! depth_count k) 1)\n                      (vector-set!\
    \ depth_count (vector-set! depth_count k) (vector-ref depth_count k) + 1))))))))))))\n\
    \    (if (vector-ref paren_count depth)\n      (vector-ref depth_count depth)\n\
    \      (vector-ref paren_count depth)))))\n", "  (let ((parsed_parens ()))\n \
    \   (let ((parsed_parens ()))\n      (let ((parsed_parens ()))\n        (let ((parsed_parens\
    \ ()))\n          (let ((parsed_parens ()))\n            (let ((parsed_parens\
    \ ()))\n              (let ((parsed_parens ()))\n                (let ((parsed_parens\
    \ ()))\n                  (let ((parsed_parens ()))\n                    (let\
    \ ((parsed_parens ()))\n                      (let ((parsed_parens ()))\n    \
    \                    (let ((parsed_parens ()))\n                          (let\
    \ ((parsed_parens ()))\n                            (let ((parsed_parens ()))\n\
    \                              (let ((parsed_parens ()))\n                   \
    \             (let ((parsed_parens ()))\n                                  (let\
    \ ((parsed_parens ()))\n                                    (let ((parsed_parens\
    \ ()))\n                                      (let ((parsed_parens ()))\n    \
    \                                    (let ((parsed_parens ()))\n             \
    \                             (let ((parsed_parens ()))\n                    \
    \                        (let ((parsed_parens ()))\n                         \
    \                     (let ((parsed_parens ()))\n                            \
    \                    (let ((parsed_parens ()))\n                             \
    \                     (let ((parsed_parens ()))\n                            \
    \                        (let ((parsed_parens ()))\n                         \
    \                             (let ((parsed_parens ()))\n                    \
    \                                    (let ((parsed_parens ()))\n             \
    \                                             (let ((parsed_parens ()))\n    \
    \                                                        (let ((parsed_parens\
    \ ()))\n                                                              (let ((parsed_parens\
    \ ()))\n                                                                (let ((parsed_parens\
    \ ()))\n                                                                  (let\
    \ ((parsed_parens ()))\n                                                     \
    \               (let ((parsed_parens ()))\n                               ", " \
    \ (define (parse_nested_parens_helper paren_string)\n    (if (null? paren_string)\n\
    \      (list 0)\n      (let ((nesting_level (car paren_string)))\n        (if\
    \ (null? (cdr paren_string))\n          (list nesting_level)\n          (parse_nested_parens_helper\
    \ (cdr paren_string)))))\n    (parse_nested_parens_helper paren_string)))\n",
  "  (define (parse_nested_parens_helper paren_string)\n    (if (null? paren_string)\n\
    \      (list 0)\n      (if (null? (cdr paren_string))\n        (list (car paren_string)\
    \ (parse_nested_parens_helper (car paren_string)))\n        (list (car paren_string)\
    \ (parse_nested_parens_helper (car (cdr paren_string)))))))\n  (parse_nested_parens_helper\
    \ paren_string))\n", "  (let ((result (list)))\n    (let ((parsed_parens (list)))\n\
    \      (let ((depth (0)))\n        (while (not (null? parsed_parens))\n      \
    \    (if (null? (cdr parsed_parens))\n            (if (null? (cdr (cdr parsed_parens)))\n\
    \              (set! depth (depth + 1))\n              (set! result (cons depth\
    \ result)))\n            (set! depth (depth + 1))\n            (set! parsed_parens\
    \ (cdr parsed_parens)))\n          (set! parsed_parens (cdr parsed_parens))))\n\
    \    (result)))\n", "  (define (parse_parens paren_string)\n    (if (null? paren_string)\n\
    \      (list 0)\n      (if (null? (cdr paren_string))\n        (list (car paren_string)\
    \ (parse_parens (car paren_string)))\n        (parse_parens (car paren_string))))))",
  "  (let ((paren_count 0))\n    (let ((paren_stack (list)))\n      (let ((result\
    \ (list)))\n        (while (not (null? paren_stack))\n          (let ((current\
    \ (car paren_stack)))\n            (if (null? (cdr current))\n              (if\
    \ (null? (cdr (cdr current)))\n                (set! paren_count (paren_count\
    \ + 1))\n                (set! result (cons (car current) result))\n         \
    \     )\n              (set! paren_stack (cdr current))\n            )\n     \
    \     )\n        )\n      )\n    )\n  )\n)\n", "  (define (parse_nested_parens_helper\
    \ paren_string)\n    (if (null? paren_string)\n      (list 0)\n      (if (null?\
    \ paren_string)\n        (list 0)\n        (if (null? paren_string)\n        \
    \  (list 0)\n          (if (null? paren_string)\n            (list 0)\n      \
    \      (if (null? paren_string)\n              (list 0)\n              (if (null?\
    \ paren_string)\n                (list 0)\n                (if (null? paren_string)\n\
    \                  (list 0)\n                  (if (null? paren_string)\n    \
    \                (list 0)\n                    (if (null? paren_string)\n    \
    \                  (list 0)\n                      (if (null? paren_string)\n\
    \                        (list 0)\n                        (if (null? paren_string)\n\
    \                          (list 0)\n                          (if (null? paren_string)\n\
    \                            (list 0)\n                            (if (null?\
    \ paren_string)\n                              (list 0)\n                    \
    \          (if (null? paren_string)\n                                (list 0)\n\
    \                                (if (null? paren_string)\n                  \
    \                (list 0)\n                                  (if (null? paren_string)\n\
    \                                    (list 0)\n                              \
    \      (if (null? paren_string)\n                                      (list 0)\n\
    \                                      (if (null? paren_string)\n            \
    \                            (list 0)\n                                      \
    \  (if (null? paren_string)\n                                          (list 0)\n\
    \                                          (if (null? paren_string)\n        \
    \                                    (list 0)\n                              \
    \              (if (null? paren_string)\n                                    \
    \          (list 0)\n                                              (if (null?\
    \ paren_string)\n                                                (list 0)\n  \
    \                                              (if (null? paren_string)\n    \
    \                                              (list 0)\n                    \
    \                              (if (null? paren_string)\n                    \
    \                                (list 0)\n                                  \
    \                  (if (", "  (let ((result (list)))\n    (let ((parsed_parens\
    \ (string-split paren_string \" \")))\n      (for-each (lambda (p)\n         \
    \        (if (null? (cdr p))\n                     (if (null? (cdr (cdr p)))\n\
    \                         (result (append result 1))\n                       \
    \  (result (append result 2))))\n                 (if (null? (cdr p))\n      \
    \               (if (null? (cdr (cdr p)))\n                         (result (append\
    \ result 3))\n                         (result (append result 4))))\n        \
    \         (if (null? (cdr p))\n                     (if (null? (cdr (cdr p)))\n\
    \                         (result (append result 5))))\n                 (if (null?\
    \ (cdr p))\n                     (if (null? (cdr (cdr p)))\n                 \
    \        (result (append result 6))))\n                 (if (null? (cdr p))\n\
    \                     (if (null? (cdr (cdr p)))\n                         (result\
    \ (append result 7))))\n                 (if (null? (cdr p))\n               \
    \      (if (null? (cdr (cdr p)))\n                         (result (append result\
    \ 8))))\n                 (if (null? (cdr p))\n                     (if (null?\
    \ (cdr (cdr p)))\n                         (result (append result 9))))\n    \
    \             (if (null? (cdr p))\n                     (if (null? (cdr (cdr p)))\n\
    \                         (result (append result 10))))\n                 (if\
    \ (null? (cdr p))\n                     (if (null? (cdr (cdr p)))\n          \
    \               (result (append result 11))))\n                 (if (null? (cdr\
    \ p))\n                     (if (null? (cdr (cdr p)))\n                      \
    \   (result (append result 12))))\n                 (if (null? (cdr p))\n    \
    \                 (if (null? (cdr (cdr p)))\n                         (result\
    \ (append result 13))))\n                 (if (null? (cdr p))\n              \
    \       (if (null? (cdr (cdr p)))\n                         (result (append result\
    \ 14))))\n                 (if (null? (cdr p))\n                     (if (null?\
    \ (c", "  (let ((result (list)))\n    (let ((parsed_parens (list)))\n      (let\
    \ ((depth 0))\n        (while (not (null? parsed_parens))\n          (if (null?\
    \ (cdr parsed_parens))\n            (set! depth (1 + depth))\n            (set!\
    \ result (append result (list depth)))))\n        (set! result (append result\
    \ (list depth))))))\n  (parse_nested_parens paren_string))\n", "  (let ((parsed_parens\
    \ (parse-list paren_string)))\n    (let ((max_nesting (max-nesting parsed_parens)))\n\
    \      (if (null? max_nesting)\n        (list 0)\n        (list (car max_nesting)\
    \ (cdr max_nesting)))))\n)\n", "  (let ((paren_count 0))\n    (while (string-length\
    \ paren_string)\n      (if (string-char paren_string #\\()\n          (set! paren_count\
    \ (+ 1 paren_count))\n        (if (paren_count = 0)\n          (return (list 0))\n\
    \          (return (list paren_count))))\n        (set! paren_count (- 1 paren_count))))\n\
    \  (return (list paren_count))))\n", "  (define (parse_nested_parens_helper paren_string)\n\
    \    (if (null? paren_string)\n      (list 0)\n      (if (null? (cdr paren_string))\n\
    \        (list (car paren_string) (parse_nested_parens_helper (car paren_string)))\n\
    \        (list (car paren_string) (parse_nested_parens_helper (car (cdr paren_string)))))))\n\
    \  (parse_nested_parens_helper paren_string))\n", "  (let ((paren_count (string-length\
    \ paren_string)))\n    (if (eq? paren_count 0)\n      (list 0)\n      (let ((depth\
    \ (0)))\n        (while (< depth paren_count)\n          (let ((next_char (string-ref\
    \ paren_string depth)))\n            (if (eq? next_char '(')\n              (let\
    \ ((next_depth (1)))\n                (while (< next_depth depth)\n          \
    \        (let ((next_char (string-ref paren_string next_depth)))\n           \
    \         (if (eq? next_char '(')\n                      (let ((next_depth (1)))\n\
    \                        (while (< next_depth depth)\n                       \
    \   (let ((next_char (string-ref paren_string next_depth)))\n                \
    \            (if (eq? next_char '(')\n                              (let ((next_depth\
    \ (1)))\n                                (while (< next_depth depth)\n       \
    \                           (let ((next_char (string-ref paren_string next_depth)))\n\
    \                                    (if (eq? next_char '(')\n               \
    \                       (let ((next_depth (1)))\n                            \
    \            (while (< next_depth depth)\n                                   \
    \       (let ((next_char (string-ref paren_string next_depth)))\n            \
    \                                (if (eq? next_char '(')\n                   \
    \                           (let ((next_depth (1)))\n                        \
    \                        (while (< next_depth depth)\n                       \
    \                           (let ((next_char (string-ref paren_string next_depth)))\n\
    \                                                    (if (eq? next_char '(')\n\
    \                                                      (let ((next_depth (1)))\n\
    \                                                        (while (< next_depth\
    \ depth)\n                                                          (let ((next_char\
    \ (string-ref paren_string next_depth)))\n                                   \
    \                        (if (eq? next_char '(')\n                           \
    \                                 (let ((next_depth (1)))\n                  \
    \                                            (while (< next_depth depth)\n   \
    \                                                             (let ((next_char\
    \ (string", "  (define (parse_nested_parens_helper paren_string depth)\n    (if\
    \ (null? paren_string)\n      (list depth)\n      (if (null? paren_string)\n \
    \       (list depth)\n        (if (null? paren_string)\n          (list depth)\n\
    \          (if (null? paren_string)\n            (list depth)\n            (if\
    \ (null? paren_string)\n              (list depth)\n              (if (null? paren_string)\n\
    \                (list depth)\n                (if (null? paren_string)\n    \
    \              (list depth)\n                  (if (null? paren_string)\n    \
    \                (list depth)\n                    (if (null? paren_string)\n\
    \                      (list depth)\n                      (if (null? paren_string)\n\
    \                        (list depth)\n                        (if (null? paren_string)\n\
    \                          (list depth)\n                          (if (null?\
    \ paren_string)\n                            (list depth)\n                  \
    \          (if (null? paren_string)\n                              (list depth)\n\
    \                              (if (null? paren_string)\n                    \
    \            (list depth)\n                                (if (null? paren_string)\n\
    \                                  (list depth)\n                            \
    \      (if (null? paren_string)\n                                    (list depth)\n\
    \                                    (if (null? paren_string)\n              \
    \                        (list depth)\n                                      (if\
    \ (null? paren_string)\n                                        (list depth)\n\
    \                                        (if (null? paren_string)\n          \
    \                                (list depth)\n                              \
    \            (if (null? paren_string)\n                                      \
    \      (list depth)\n                                            (if (null? paren_string)\n\
    \                                              (list depth)\n                \
    \                              (if (null? paren_string)\n                    \
    \                            (list depth)\n                                  \
    \              (if (null? paren_string)\n                                    \
    \              (list depth)\n                                                \
    \  (if (null? paren_string)\n                                                \
    \    (list depth)\n                                                    (if", " \
    \ (let ((result (list)))\n    (let ((parsed_parens (string-split paren_string\
    \ \" \")))\n      (for-each (lambda (paren)\n                 (if (null? (cdr\
    \ paren))\n                     (if (null? (cdr (cdr paren)))\n              \
    \           (append result (car paren))))\n                 (append result (car\
    \ paren))))\n      (append result (car parsed_parens))))\n  (if (null? result)\n\
    \      (list 0)\n      (list (car result) (parse_nested_parens (car (cdr result)))))\n\
    )\n", "  (let ((parsed_parens ()))\n    (let ((parsed_parens ()))\n      (let\
    \ ((parsed_parens ()))\n        (let ((parsed_parens ()))\n          (let ((parsed_parens\
    \ ()))\n            (let ((parsed_parens ()))\n              (let ((parsed_parens\
    \ ()))\n                (let ((parsed_parens ()))\n                  (let ((parsed_parens\
    \ ()))\n                    (let ((parsed_parens ()))\n                      (let\
    \ ((parsed_parens ()))\n                        (let ((parsed_parens ()))\n  \
    \                        (let ((parsed_parens ()))\n                         \
    \   (let ((parsed_parens ()))\n                              (let ((parsed_parens\
    \ ()))\n                                (let ((parsed_parens ()))\n          \
    \                        (let ((parsed_parens ()))\n                         \
    \           (let ((parsed_parens ()))\n                                      (let\
    \ ((parsed_parens ()))\n                                        (let ((parsed_parens\
    \ ()))\n                                          (let ((parsed_parens ()))\n\
    \                                            (let ((parsed_parens ()))\n     \
    \                                         (let ((parsed_parens ()))\n        \
    \                                        (let ((parsed_parens ()))\n         \
    \                                         (let ((parsed_parens ()))\n        \
    \                                            (let ((parsed_parens ()))\n     \
    \                                                 (let ((parsed_parens ()))\n\
    \                                                        (let ((parsed_parens\
    \ ()))\n                                                          (let ((parsed_parens\
    \ ()))\n                                                            (let ((parsed_parens\
    \ ()))\n                                                              (let ((parsed_parens\
    \ ()))\n                                                                (let ((parsed_parens\
    \ ()))\n                                                                  (let\
    \ ((parsed_parens ()))\n                                                     \
    \               (let ((parsed_parens ()))\n                               ", " \
    \ (define (parse_nested_parens_helper paren_string)\n    (if (null? paren_string)\n\
    \      (list 0)\n      (let ((nesting_level (car paren_string)))\n        (if\
    \ (null? (cdr paren_string))\n          (list nesting_level)\n          (parse_nested_parens_helper\
    \ (cdr paren_string)))))))\n", "  (define (parse_nested_parens_helper paren_string)\n\
    \    (if (null? paren_string)\n      (list 0)\n      (if (null? paren_string)\n\
    \        (list 0)\n        (if (null? paren_string)\n          (list 0)\n    \
    \      (if (null? paren_string)\n            (list 0)\n            (if (null?\
    \ paren_string)\n              (list 0)\n              (if (null? paren_string)\n\
    \                (list 0)\n                (if (null? paren_string)\n        \
    \          (list 0)\n                  (if (null? paren_string)\n            \
    \        (list 0)\n                    (if (null? paren_string)\n            \
    \          (list 0)\n                      (if (null? paren_string)\n        \
    \                (list 0)\n                        (if (null? paren_string)\n\
    \                          (list 0)\n                          (if (null? paren_string)\n\
    \                            (list 0)\n                            (if (null?\
    \ paren_string)\n                              (list 0)\n                    \
    \          (if (null? paren_string)\n                                (list 0)\n\
    \                                (if (null? paren_string)\n                  \
    \                (list 0)\n                                  (if (null? paren_string)\n\
    \                                    (list 0)\n                              \
    \      (if (null? paren_string)\n                                      (list 0)\n\
    \                                      (if (null? paren_string)\n            \
    \                            (list 0)\n                                      \
    \  (if (null? paren_string)\n                                          (list 0)\n\
    \                                          (if (null? paren_string)\n        \
    \                                    (list 0)\n                              \
    \              (if (null? paren_string)\n                                    \
    \          (list 0)\n                                              (if (null?\
    \ paren_string)\n                                                (list 0)\n  \
    \                                              (if (null? paren_string)\n    \
    \                                              (list 0)\n                    \
    \                              (if (null? paren_string)\n                    \
    \                                (list 0)\n                                  \
    \                  (if (", "  (let ((parsed_parens ()))\n    (let ((parsed_parens\
    \ ()))\n      (let ((parsed_parens ()))\n        (let ((parsed_parens ()))\n \
    \         (let ((parsed_parens ()))\n            (let ((parsed_parens ()))\n \
    \             (let ((parsed_parens ()))\n                (let ((parsed_parens\
    \ ()))\n                  (let ((parsed_parens ()))\n                    (let\
    \ ((parsed_parens ()))\n                      (let ((parsed_parens ()))\n    \
    \                    (let ((parsed_parens ()))\n                          (let\
    \ ((parsed_parens ()))\n                            (let ((parsed_parens ()))\n\
    \                              (let ((parsed_parens ()))\n                   \
    \             (let ((parsed_parens ()))\n                                  (let\
    \ ((parsed_parens ()))\n                                    (let ((parsed_parens\
    \ ()))\n                                      (let ((parsed_parens ()))\n    \
    \                                    (let ((parsed_parens ()))\n             \
    \                             (let ((parsed_parens ()))\n                    \
    \                        (let ((parsed_parens ()))\n                         \
    \                     (let ((parsed_parens ()))\n                            \
    \                    (let ((parsed_parens ()))\n                             \
    \                     (let ((parsed_parens ()))\n                            \
    \                        (let ((parsed_parens ()))\n                         \
    \                             (let ((parsed_parens ()))\n                    \
    \                                    (let ((parsed_parens ()))\n             \
    \                                             (let ((parsed_parens ()))\n    \
    \                                                        (let ((parsed_parens\
    \ ()))\n                                                              (let ((parsed_parens\
    \ ()))\n                                                                (let ((parsed_parens\
    \ ()))\n                                                                  (let\
    \ ((parsed_parens ()))\n                                                     \
    \               (let ((parsed_parens ()))\n                               ", " \
    \ (let ((paren_count 0))\n    (while (string-length paren_string)\n      (if (string-equal?\
    \ paren_string \" \")\n        (return (list paren_count))\n      (if (string-equal?\
    \ paren_string \")\")\n        (paren_count (- paren_count 1)))\n      (paren_string\
    \ = (string-append paren_string \" \")))\n    (paren_count)))\n", "  (define (parse_nested_parens_helper\
    \ paren_string)\n    (if (null? paren_string)\n      (list 0)\n      (if (null?\
    \ (cdr paren_string))\n        (list (car paren_string))\n        (parse_nested_parens_helper\
    \ (cdr paren_string)))))\n  (parse_nested_parens_helper paren_string))\n", " \
    \ (define (parse_nested_parens_helper paren_string)\n    (if (null? paren_string)\n\
    \      (list 0)\n      (let ((depth (car paren_string)))\n        (if (null? (cdr\
    \ paren_string))\n          (list depth)\n          (parse_nested_parens_helper\
    \ (cdr paren_string)))))\n    (parse_nested_parens_helper paren_string)))\n",
  "  (define (parse_nested_parens_helper paren_string)\n    (if (null? paren_string)\n\
    \      (list 0)\n      (let ((nesting_level (car paren_string)))\n        (if\
    \ (null? (cdr paren_string))\n          (list nesting_level)\n          (parse_nested_parens_helper\
    \ (cdr paren_string))))))\n  (parse_nested_parens_helper paren_string))\n", " \
    \ (define (parse_parens paren_string)\n    (if (null? paren_string)\n      (list\
    \ 0)\n      (if (null? (cdr paren_string))\n        (list (car paren_string) 1)\n\
    \        (parse_parens (cdr paren_string)))))\n  (parse_parens paren_string))\n",
  "  (define (parse_nested_parens_helper paren_string)\n    (if (null? paren_string)\n\
    \      (list 0)\n      (if (null? (cdr paren_string))\n        (list (car paren_string))\n\
    \        (parse_nested_parens_helper (car paren_string))))))\n", "  (define (parse_nested_parens_helper\
    \ paren_string)\n    (if (null? paren_string)\n      (list 0)\n      (if (null?\
    \ (cdr paren_string))\n        (list (car paren_string) (parse_nested_parens_helper\
    \ (car paren_string)))\n        (list (car paren_string) (parse_nested_parens_helper\
    \ (car (cdr paren_string)))))))\n  (parse_nested_parens_helper paren_string))\n",
  "  (define (parse_nested_parens_helper paren_string)\n    (if (null? paren_string)\n\
    \      (list 0)\n      (if (null? paren_string)\n        (list 0)\n        (if\
    \ (null? paren_string)\n          (list 0)\n          (if (null? paren_string)\n\
    \            (list 0)\n            (if (null? paren_string)\n              (list\
    \ 0)\n              (if (null? paren_string)\n                (list 0)\n     \
    \           (if (null? paren_string)\n                  (list 0)\n           \
    \       (if (null? paren_string)\n                    (list 0)\n             \
    \       (if (null? paren_string)\n                      (list 0)\n           \
    \           (if (null? paren_string)\n                        (list 0)\n     \
    \                   (if (null? paren_string)\n                          (list\
    \ 0)\n                          (if (null? paren_string)\n                   \
    \         (list 0)\n                            (if (null? paren_string)\n   \
    \                           (list 0)\n                              (if (null?\
    \ paren_string)\n                                (list 0)\n                  \
    \              (if (null? paren_string)\n                                  (list\
    \ 0)\n                                  (if (null? paren_string)\n           \
    \                         (list 0)\n                                    (if (null?\
    \ paren_string)\n                                      (list 0)\n            \
    \                          (if (null? paren_string)\n                        \
    \                (list 0)\n                                        (if (null?\
    \ paren_string)\n                                          (list 0)\n        \
    \                                  (if (null? paren_string)\n                \
    \                            (list 0)\n                                      \
    \      (if (null? paren_string)\n                                            \
    \  (list 0)\n                                              (if (null? paren_string)\n\
    \                                                (list 0)\n                  \
    \                              (if (null? paren_string)\n                    \
    \                              (list 0)\n                                    \
    \              (if (null? paren_string)\n                                    \
    \                (list 0)\n                                                  \
    \  (if (", "  (define (parse_nested_parens_helper paren_string)\n    (if (null?\
    \ paren_string)\n      (list 0)\n      (let ((parsed_parens (parse_nested_parens_helper\
    \ (cdr paren_string))))\n        (if (null? parsed_parens)\n          (list 0)\n\
    \          (let ((nested_parens (parse_nested_parens_helper (car parsed_parens))))\n\
    \            (if (null? nested_parens)\n              (list 0)\n             \
    \ (list (car nested_parens) + (cdr nested_parens))))))))))\n", "  (define (parse_nested_parens_helper\
    \ paren_string)\n    (if (null? paren_string)\n      (list 0)\n      (if (null?\
    \ paren_string)\n        (list 0)\n        (if (null? paren_string)\n        \
    \  (list 0)\n          (if (null? paren_string)\n            (list 0)\n      \
    \      (if (null? paren_string)\n              (list 0)\n              (if (null?\
    \ paren_string)\n                (list 0)\n                (if (null? paren_string)\n\
    \                  (list 0)\n                  (if (null? paren_string)\n    \
    \                (list 0)\n                    (if (null? paren_string)\n    \
    \                  (list 0)\n                      (if (null? paren_string)\n\
    \                        (list 0)\n                        (if (null? paren_string)\n\
    \                          (list 0)\n                          (if (null? paren_string)\n\
    \                            (list 0)\n                            (if (null?\
    \ paren_string)\n                              (list 0)\n                    \
    \          (if (null? paren_string)\n                                (list 0)\n\
    \                                (if (null? paren_string)\n                  \
    \                (list 0)\n                                  (if (null? paren_string)\n\
    \                                    (list 0)\n                              \
    \      (if (null? paren_string)\n                                      (list 0)\n\
    \                                      (if (null? paren_string)\n            \
    \                            (list 0)\n                                      \
    \  (if (null? paren_string)\n                                          (list 0)\n\
    \                                          (if (null? paren_string)\n        \
    \                                    (list 0)\n                              \
    \              (if (null? paren_string)\n                                    \
    \          (list 0)\n                                              (if (null?\
    \ paren_string)\n                                                (list 0)\n  \
    \                                              (if (null? paren_string)\n    \
    \                                              (list 0)\n                    \
    \                              (if (null? paren_string)\n                    \
    \                                (list 0)\n                                  \
    \                  (if (", "  (define (parse_nested_parens_helper paren_string)\n\
    \    (if (null? paren_string)\n      (list 0)\n      (if (null? paren_string)\n\
    \        (list 1)\n        (if (null? paren_string)\n          (list 2)\n    \
    \      (if (null? paren_string)\n            (list 3)\n            (if (null?\
    \ paren_string)\n              (list 4)\n              (if (null? paren_string)\n\
    \                (list 5)\n                (if (null? paren_string)\n        \
    \          (list 6)\n                  (if (null? paren_string)\n            \
    \        (list 7)\n                    (if (null? paren_string)\n            \
    \          (list 8)\n                      (if (null? paren_string)\n        \
    \                (list 9)\n                        (if (null? paren_string)\n\
    \                          (list 10)\n                          (if (null? paren_string)\n\
    \                            (list 11)\n                            (if (null?\
    \ paren_string)\n                              (list 12)\n                   \
    \           (if (null? paren_string)\n                                (list 13)\n\
    \                                (if (null? paren_string)\n                  \
    \                (list 14)\n                                  (if (null? paren_string)\n\
    \                                    (list 15)\n                             \
    \       (if (null? paren_string)\n                                      (list\
    \ 16)\n                                      (if (null? paren_string)\n      \
    \                                  (list 17)\n                               \
    \         (if (null? paren_string)\n                                         \
    \ (list 18)\n                                          (if (null? paren_string)\n\
    \                                            (list 19)\n                     \
    \                       (if (null? paren_string)\n                           \
    \                   (list 20)\n                                              (if\
    \ (null? paren_string)\n                                                (list\
    \ 21)\n                                                (if (null? paren_string)\n\
    \                                                  (list 22)\n               \
    \                                   (if (null? paren_string)\n               \
    \                                     (list 23)\n                            \
    \                        (if (", "  (let ((parsed_parens (parse-list paren_string)))\n\
    \    (let ((nested_parens (mapcar (lambda (p) (count-nested-parens p)) parsed_parens))))\n\
    \    (reduce (lambda (a b) (max a b)) nested_parens))))\n", "  (define (parse_nested_parens_helper\
    \ group)\n    (if (null? group)\n      (list 0)\n      (if (null? (cdr group))\n\
    \        (list (car group))\n        (parse_nested_parens_helper (car group)))))\n\
    \  (parse_nested_parens_helper paren_string))\n", "  (define (parse_nested_parens_helper\
    \ paren_string)\n    (if (null? paren_string)\n      (list 0)\n      (let ((p\
    \ (car paren_string)))\n        (if (null? p)\n          (list 0)\n          (parse_nested_parens_helper\
    \ (cdr paren_string)))))\n    (parse_nested_parens_helper paren_string)))\n",
  "  (define (parse_nested_parens_helper paren_string)\n    (if (null? paren_string)\n\
    \      (list 0)\n    (if (null? (cdr paren_string))\n      (list (car paren_string)\
    \ (parse_nested_parens_helper (car paren_string)))\n    (parse_nested_parens_helper\
    \ (car paren_string))))\n  (parse_nested_parens_helper paren_string))\n", "  (define\
    \ (parse_nested_parens_helper paren_string)\n    (if (null? paren_string)\n  \
    \    (list 0)\n      (if (null? paren_string)\n        (list 0)\n        (if (null?\
    \ paren_string)\n          (list 0)\n          (if (null? paren_string)\n    \
    \        (list 0)\n            (if (null? paren_string)\n              (list 0)\n\
    \              (if (null? paren_string)\n                (list 0)\n          \
    \      (if (null? paren_string)\n                  (list 0)\n                \
    \  (if (null? paren_string)\n                    (list 0)\n                  \
    \  (if (null? paren_string)\n                      (list 0)\n                \
    \      (if (null? paren_string)\n                        (list 0)\n          \
    \              (if (null? paren_string)\n                          (list 0)\n\
    \                          (if (null? paren_string)\n                        \
    \    (list 0)\n                            (if (null? paren_string)\n        \
    \                      (list 0)\n                              (if (null? paren_string)\n\
    \                                (list 0)\n                                (if\
    \ (null? paren_string)\n                                  (list 0)\n         \
    \                         (if (null? paren_string)\n                         \
    \           (list 0)\n                                    (if (null? paren_string)\n\
    \                                      (list 0)\n                            \
    \          (if (null? paren_string)\n                                        (list\
    \ 0)\n                                        (if (null? paren_string)\n     \
    \                                     (list 0)\n                             \
    \             (if (null? paren_string)\n                                     \
    \       (list 0)\n                                            (if (null? paren_string)\n\
    \                                              (list 0)\n                    \
    \                          (if (null? paren_string)\n                        \
    \                        (list 0)\n                                          \
    \      (if (null? paren_string)\n                                            \
    \      (list 0)\n                                                  (if (null?\
    \ paren_string)\n                                                    (list 0)\n\
    \                                                    (if (", "  (define (parse_parens\
    \ paren_string)\n    (if (null? paren_string)\n      (list 0)\n      (list (parse_parens\
    \ (cdr paren_string))))\n    (if (null? paren_string)\n      (list 0)\n      (list\
    \ (parse_parens (car paren_string))))))\n", "  (define (parse_nested_parens_helper\
    \ paren_string)\n    (if (null? paren_string)\n      (list 0)\n      (if (null?\
    \ (cdr paren_string))\n        (list (car paren_string) (parse_nested_parens_helper\
    \ (car paren_string)))\n        (parse_nested_parens_helper (car paren_string)))))\n\
    \  (parse_nested_parens_helper paren_string))\n", "  (let ((nesting_level (make-vector\
    \ 1 1)))\n    (let ((parsed_parens (make-vector 1 1)))\n      (let ((parsed_parens_count\
    \ (make-vector 1 1)))\n        (let ((parsed_parens_count_count (make-vector 1\
    \ 1)))\n          (let ((parsed_parens_count_count_count (make-vector 1 1)))\n\
    \            (let ((parsed_parens_count_count_count_count (make-vector 1 1)))\n\
    \              (let ((parsed_parens_count_count_count_count_count (make-vector\
    \ 1 1)))\n                (let ((parsed_parens_count_count_count_count_count_count\
    \ (make-vector 1 1)))\n                  (let ((parsed_parens_count_count_count_count_count_count_count\
    \ (make-vector 1 1)))\n                    (let ((parsed_parens_count_count_count_count_count_count_count_count\
    \ (make-vector 1 1)))\n                      (let ((parsed_parens_count_count_count_count_count_count_count_count_count\
    \ (make-vector 1 1)))\n                        (let ((parsed_parens_count_count_count_count_count_count_count_count_count_count\
    \ (make-vector 1 1)))\n                          (let ((parsed_parens_count_count_count_count_count_count_count_count_count_count_count\
    \ (make-vector 1 1)))\n                            (let ((parsed_parens_count_count_count_count_count_count_count_count_count_count_count_count\
    \ (make-vector 1 1)))\n                              (let ((parsed_parens_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ (make-vector 1 1)))\n                                (let ((parsed_parens_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ (make-vector 1 1)))\n                                  (let ((parsed_parens_count_count",
  "  (define (parse_nested_parens_helper paren_string)\n    (if (null? paren_string)\n\
    \      (list 0)\n      (let ((nesting_level (car paren_string)))\n        (if\
    \ (null? (cdr paren_string))\n          (list nesting_level)\n          (parse_nested_parens_helper\
    \ (cdr paren_string)))))))", "  (let ((paren_count (make-vector (length paren_string)\
    \ #f)))\n    (let ((depth (make-vector (length paren_string) 0)))\n      (let\
    \ ((depth_count (make-vector (length paren_string) 0)))\n        (for-each (lambda\
    \ (i) (set! depth_count (vector-ref depth_count i)))\n          (lambda (i)\n\
    \            (for-each (lambda (j) (set! depth (vector-ref depth j)))\n      \
    \        (lambda (j)\n                (for-each (lambda (k) (set! paren_count\
    \ (vector-ref paren_count k)))\n                  (lambda (k)\n              \
    \      (if (vector-ref paren_count k)\n                        (vector-set! paren_count\
    \ k (vector-ref paren_count k) - 1)\n                        (vector-set! paren_count\
    \ k (vector-ref paren_count k) + 1))))))))))))\n    (if (null? paren_count)\n\
    \      (list 0)\n      (list (vector-ref paren_count depth_count)))\n  ))\n",
  "  (define (parse_nested_parens_helper paren_string)\n    (if (null? paren_string)\n\
    \      (list 0)\n      (let ((nested_parens (parse_nested_parens_helper (cdr paren_string))))\n\
    \        (if (null? nested_parens)\n          (list 0)\n          (let ((max_nesting\
    \ (car nested_parens)))\n            (list max_nesting))))))))\n", "  (let ((depth\
    \ 0))\n    (let ((result (list)))\n      (for-each (lambda (s)\n             \
    \     (if (string=? s \" \")\n                      (if (string=? s \")\")\n \
    \                         (if (string=? s \"(\"))\n                          (if\
    \ (string=? s \")\")\n                          (if (string=? s \"(\"))\n    \
    \                      (if (string=? s \")\")\n                          (if (string=?\
    \ s \"(\"))\n                          (if (string=? s \")\")\n              \
    \            (if (string=? s \"(\"))\n                          (if (string=?\
    \ s \")\")\n                          (if (string=? s \"(\"))\n              \
    \            (if (string=? s \")\")\n                          (if (string=? s\
    \ \"(\"))\n                          (if (string=? s \")\")\n                \
    \          (if (string=? s \"(\"))\n                          (if (string=? s\
    \ \")\")\n                          (if (string=? s \"(\"))\n                \
    \          (if (string=? s \")\")\n                          (if (string=? s \"\
    (\"))\n                          (if (string=? s \")\")\n                    \
    \      (if (string=? s \"(\"))\n                          (if (string=? s \")\"\
    )\n                          (if (string=? s \"(\"))\n                       \
    \   (if (string=? s \")\")\n                          (if (string=? s \"(\"))\n\
    \                          (if (string=? s \")\")\n                          (if\
    \ (string=? s \"(\"))\n                          (if (string=? s \")\")\n    \
    \                      (if (string=? s \"(\"))\n                          (if\
    \ (string=? s \")\")\n                          (if (string=? s \"(\"))\n    \
    \                      (if (string=? s \")\")\n                          (if (string=?\
    \ s \"(\"))\n                          (if (string=? s \")\")\n              \
    \            (if (string=? s \"(\"))\n                          (if (string=?\
    \ s \")\")\n                          (if (string=? s \"(\"))\n              \
    \            (if (string=? s \")\")\n                          (if (string=? s\
    \ \"(\"))\n                          (if (string=? s \")\")\n                \
    \          (if (", "  (define (parse_nested_parens_helper paren_string)\n    (if\
    \ (null? paren_string)\n      (list 0)\n      (if (null? (cdr paren_string))\n\
    \        (list (car paren_string) (parse_nested_parens_helper (car paren_string)))\n\
    \        (list (car paren_string) (parse_nested_parens_helper (car (cdr paren_string)))))))\n\
    \  (parse_nested_parens_helper paren_string))\n", "  (define (parse_nested_parens_helper\
    \ paren_string)\n    (if (null? paren_string)\n      (list 0)\n      (if (null?\
    \ (cdr paren_string))\n        (list (car paren_string) (parse_nested_parens_helper\
    \ (car paren_string)))\n        (parse_nested_parens_helper (car paren_string))))))\n",
  "  (let ((parsed_parens ()))\n    (let ((parsed_parens_count 0))\n      (let ((parsed_parens_depth\
    \ 0))\n        (let ((parsed_parens_nested_count 0))\n          (let ((parsed_parens_nested_depth\
    \ 0))\n            (let ((parsed_parens_nested_parens ()))\n              (let\
    \ ((parsed_parens_nested_parens_count 0))\n                (let ((parsed_parens_nested_parens_depth\
    \ 0))\n                  (let ((parsed_parens_nested_parens_parens ()))\n    \
    \                (let ((parsed_parens_nested_parens_parens_count 0))\n       \
    \               (let ((parsed_parens_nested_parens_parens_depth 0))\n        \
    \                (let ((parsed_parens_nested_parens_parens_parens ()))\n     \
    \                     (let ((parsed_parens_nested_parens_parens_parens_count 0))\n\
    \                            (let ((parsed_parens_nested_parens_parens_parens_depth\
    \ 0))\n                              (let ((parsed_parens_nested_parens_parens_parens_parens\
    \ ()))\n                                (let ((parsed_parens_nested_parens_parens_parens_parens_count\
    \ 0))\n                                  (let ((parsed_parens_nested_parens_parens_parens_parens_depth\
    \ 0))\n                                    (let ((parsed_parens_nested_parens_parens_parens_parens_parens\
    \ ()))\n                                      (let ((parsed_parens_nested_parens_parens_parens_parens_parens_count\
    \ 0))\n                                        (let ((parsed_parens_nested_parens_parens_parens_parens_parens_depth\
    \ 0))\n                                          (let ((parsed_parens_nested_parens_parens_parens_parens_",
  "  (let ((parsed_parens ()))\n    (for-each (lambda (paren)\n      (if (null? (cdr\
    \ paren))\n        (append parsed_parens (car paren)))\n      (cdr paren))\n \
    \     paren_string))\n  (car (parse_nested_parens paren_string)))\n", "  (let\
    \ ((depth 0))\n    (let ((result (list)))\n      (while (string=? paren_string\
    \ \" \")\n        (string-set! paren_string (string-trim paren_string))\n    \
    \    (if (string=? paren_string \" \")\n          (if (string=? paren_string \"\
    )\")\n            (if (string=? paren_string \") \")\n              (string-set!\
    \ paren_string (string-trim paren_string)))\n          (if (string=? paren_string\
    \ \"(\")\n            (string-set! paren_string (string-trim paren_string))\n\
    \            (if (string=? paren_string \"(\")\n              (string-set! paren_string\
    \ (string-trim paren_string))\n              (if (string=? paren_string \")\"\
    )\n                (string-set! paren_string (string-trim paren_string))\n   \
    \             (if (string=? paren_string \") \")\n                  (string-set!\
    \ paren_string (string-trim paren_string))\n                (if (string=? paren_string\
    \ \"(\")\n                  (string-set! paren_string (string-trim paren_string))\n\
    \                  (if (string=? paren_string \")\")\n                    (string-set!\
    \ paren_string (string-trim paren_string))\n                    (if (string=?\
    \ paren_string \") \")\n                      (string-set! paren_string (string-trim\
    \ paren_string))\n                    (if (string=? paren_string \"(\")\n    \
    \                  (string-set! paren_string (string-trim paren_string))\n   \
    \                   (if (string=? paren_string \")\")\n                      \
    \  (string-set! paren_string (string-trim paren_string))\n                   \
    \   (if (string=? paren_string \") \")\n                        (string-set! paren_string\
    \ (string-trim paren_string))\n                      (if (string=? paren_string\
    \ \"(\")\n                        (string-set! paren_string (string-trim paren_string",
  "  (define (parse_nested_parens_helper paren_string)\n    (if (null? paren_string)\n\
    \      (list 0)\n      (let ((p (car paren_string)))\n        (if (null? p)\n\
    \          (list 0)\n          (let ((n (parse_nested_parens_helper (cdr paren_string))))\n\
    \            (list (car p) (n))))))))", "  (let ((paren_count (string-length paren_string)))\n\
    \    (let ((paren_stack (make-vector paren_count #f)))\n      (let ((depth 0))\n\
    \        (let ((next_char (string-ref paren_string depth)))\n          (if (eq?\
    \ next_char '(')\n            (begin\n              (set! depth (+ 1))\n     \
    \         (paren_stack!=? depth paren_stack))\n            (if (eq? next_char\
    \ ')')\n              (begin\n                (set! depth (- 1))\n           \
    \     (paren_stack!=? depth paren_stack))\n              (if (eq? next_char ')')\n\
    \                (begin\n                  (set! depth (- 1))\n              \
    \    (paren_stack!=? depth paren_stack))\n                (if (eq? next_char '(')\n\
    \                  (begin\n                    (set! depth (+ 1))\n          \
    \          (paren_stack!=? depth paren_stack))))))))))))))\n", "  (define (parse_nested_parens_helper\
    \ paren_string)\n    (cond\n      [(string=? paren_string \"\") (return (list))]\n\
    \      [(string=? paren_string \"#\") (return (list))]\n      [(string=? paren_string\
    \ \"()\") (return (parse_nested_parens_helper paren_string))]\n      [(string=?\
    \ paren_string \"()()\") (return (parse_nested_parens_helper paren_string))]\n\
    \      [(string=? paren_string \"()()()\") (return (parse_nested_parens_helper\
    \ paren_string))]\n      [(string=? paren_string \"()()()()\") (return (parse_nested_parens_helper\
    \ paren_string))]\n      [(string=? paren_string \"()()()()\") (return (parse_nested_parens_helper\
    \ paren_string))]\n      [(string=? paren_string \"()()()()()\") (return (parse_nested_parens_helper\
    \ paren_string))]\n      [(string=? paren_string \"()()()()()\") (return (parse_nested_parens_helper\
    \ paren_string))]\n      [(string=? paren_string \"()()()()()\") (return (parse_nested_parens_helper\
    \ paren_string))]\n      [(string=? paren_string \"()()()()()\") (return (parse_nested_parens_helper\
    \ paren_string))]\n      [(string=? paren_string \"()()()()()\") (return (parse_nested_parens_helper\
    \ paren_string))]\n      [(string=? paren_string \"()()()()()\") (return (parse_nested_parens_helper\
    \ paren_string))]\n      [(string=? paren_string \"()()()()()\") (return (parse_nested_parens_helper\
    \ paren_string))]\n      [(string=? paren_string \"()()()()()\")", "  (define\
    \ (parse_nested_parens_helper paren_string)\n    (if (null? paren_string)\n  \
    \    (list 0)\n      (if (null? paren_string)\n        (list 1)\n        (if (null?\
    \ paren_string)\n          (list 2)\n          (if (null? paren_string)\n    \
    \        (list 3)\n            (if (null? paren_string)\n              (list 4)\n\
    \              (if (null? paren_string)\n                (list 5)\n          \
    \      (if (null? paren_string)\n                  (list 6)\n                \
    \  (if (null? paren_string)\n                    (list 7)\n                  \
    \  (if (null? paren_string)\n                      (list 8)\n                \
    \      (if (null? paren_string)\n                        (list 9)\n          \
    \              (if (null? paren_string)\n                          (list 10)\n\
    \                          (if (null? paren_string)\n                        \
    \    (list 11)\n                            (if (null? paren_string)\n       \
    \                       (list 12)\n                              (if (null? paren_string)\n\
    \                                (list 13)\n                                (if\
    \ (null? paren_string)\n                                  (list 14)\n        \
    \                          (if (null? paren_string)\n                        \
    \            (list 15)\n                                    (if (null? paren_string)\n\
    \                                      (list 16)\n                           \
    \           (if (null? paren_string)\n                                       \
    \ (list 17)\n                                        (if (null? paren_string)\n\
    \                                          (list 18)\n                       \
    \                   (if (null? paren_string)\n                               \
    \             (list 19)\n                                            (if (null?\
    \ paren_string)\n                                              (list 20)\n   \
    \                                           (if (null? paren_string)\n       \
    \                                         (list 21)\n                        \
    \                        (if (null? paren_string)\n                          \
    \                        (list 22)\n                                         \
    \         (if (null? paren_string)\n                                         \
    \           (list 23)\n                                                    (if\
    \ (", "  (define (parse_nested_parens_helper paren_string)\n    (if (null? paren_string)\n\
    \      (list 0)\n      (let ((depth (parse_nested_parens_helper (cdr paren_string))))\n\
    \        (if (null? depth)\n          (list 0)\n          (list (car depth) (car\
    \ paren_string) (car (car depth))))))))", "  (let ((paren_count 0))\n    (while\
    \ (string-length paren_string)\n      (if (string-equal? paren_string \" \")\n\
    \        (setq paren_count 0)\n        (else\n          (setq paren_count (1+\
    \ (string-length paren_string))))\n      (setq paren_string (string-trim (substring\
    \ paren_string paren_count))))\n    (if (zero? paren_count)\n      (list 0)\n\
    \      (else\n        (let ((nested_parens (parse_nested_parens (substring paren_string\
    \ (1+paren_count)))))\n          (list (1+paren_count) (length nested_parens)))))))\n",
  "  (let ((depth 0))\n    (let ((result (list)))\n      (let ((p (parse_parens paren_string)))\n\
    \        (while (not (null? p))\n          (if (null? (cdr p))\n            (if\
    \ (null? (cdr (cdr p)))\n              (set! depth 0)\n              (set! result\
    \ (append result depth)))\n            (set! depth (1 + depth)))\n          (set!\
    \ p (cdr p))))\n      (reverse result))))\n", "  (define (parse_nested_parens_helper\
    \ paren_string)\n    (if (null? paren_string)\n      (list 0)\n      (let ((nesting_level\
    \ (car paren_string))\n            (new_paren_string (cdr paren_string)))\n  \
    \      (if (null? new_paren_string)\n          (list nesting_level)\n        \
    \  (parse_nested_parens_helper new_paren_string))))))\n", "  (define (parse_nested_parens_helper\
    \ paren_string)\n    (if (null? paren_string)\n      (list 0)\n      (let ((parsed_paren_string\
    \ (string-split \" \" paren_string)))\n        (if (null? parsed_paren_string)\n\
    \          (list 0)\n          (let ((nested_paren_count (length (first parsed_paren_string))))\n\
    \            (if (null? (cdr parsed_paren_string))\n              (list nested_paren_count)\n\
    \              (parse_nested_parens_helper (cdr parsed_paren_string))))))))\n\
    \  (parse_nested_parens_helper paren_string)))\n", "  (let ((paren_count 0))\n\
    \    (let ((paren_stack (list)))\n      (while (not (null? paren_stack))\n   \
    \     (if (null? (cdr paren_stack))\n          (if (null? (cdr (car paren_stack)))\n\
    \            (set! paren_count (paren_count + 1))\n            (set! paren_stack\
    \ (cdr paren_stack)))\n          (set! paren_stack (car paren_stack)))\n     \
    \   (set! paren_stack (cdr paren_stack))))\n    (paren_count)))\n", "  (define\
    \ (parse_nested_parens_helper paren_string)\n    (if (null? paren_string)\n  \
    \    (list 0)\n      (if (null? (cdr paren_string))\n        (list (car paren_string)\
    \ (parse_nested_parens_helper (car paren_string)))\n        (list (car paren_string)\
    \ (parse_nested_parens_helper (car (cdr paren_string)))))))\n  (parse_nested_parens_helper\
    \ paren_string))\n", "  (define (parse_nested_parens_helper paren_string)\n  \
    \  (if (null? paren_string)\n      (list 0)\n      (if (null? paren_string)\n\
    \        (list 0)\n        (if (null? paren_string)\n          (list 0)\n    \
    \      (if (null? paren_string)\n            (list 0)\n            (if (null?\
    \ paren_string)\n              (list 0)\n              (if (null? paren_string)\n\
    \                (list 0)\n                (if (null? paren_string)\n        \
    \          (list 0)\n                  (if (null? paren_string)\n            \
    \        (list 0)\n                    (if (null? paren_string)\n            \
    \          (list 0)\n                      (if (null? paren_string)\n        \
    \                (list 0)\n                        (if (null? paren_string)\n\
    \                          (list 0)\n                          (if (null? paren_string)\n\
    \                            (list 0)\n                            (if (null?\
    \ paren_string)\n                              (list 0)\n                    \
    \          (if (null? paren_string)\n                                (list 0)\n\
    \                                (if (null? paren_string)\n                  \
    \                (list 0)\n                                  (if (null? paren_string)\n\
    \                                    (list 0)\n                              \
    \      (if (null? paren_string)\n                                      (list 0)\n\
    \                                      (if (null? paren_string)\n            \
    \                            (list 0)\n                                      \
    \  (if (null? paren_string)\n                                          (list 0)\n\
    \                                          (if (null? paren_string)\n        \
    \                                    (list 0)\n                              \
    \              (if (null? paren_string)\n                                    \
    \          (list 0)\n                                              (if (null?\
    \ paren_string)\n                                                (list 0)\n  \
    \                                              (if (null? paren_string)\n    \
    \                                              (list 0)\n                    \
    \                              (if (null? paren_string)\n                    \
    \                                (list 0)\n                                  \
    \                  (if (", "  (define (parse_nested_parens_helper paren_string)\n\
    \    (if (null? paren_string)\n      (list 0)\n      (if (null? (cdr paren_string))\n\
    \        (list (car paren_string))\n        (parse_nested_parens_helper (car paren_string)))))\n\
    \  (parse_nested_parens_helper paren_string))\n", "  (let ((paren_stack (make-vector\
    \ 1 1)))\n    (let ((result (make-vector 1 1)))\n      (let ((depth 0))\n    \
    \    (while (not (null? paren_stack))\n          (if (not (null? (cdr paren_stack)))\n\
    \            (if (not (null? (cdr (cdr paren_stack))))\n              (setq depth\
    \ (1 + depth))\n              (setq result (list depth result)))\n           \
    \ (setq depth (1 + depth))\n            (setq result (list depth (car paren_stack))))\n\
    \          (setq paren_stack (cdr paren_stack))))\n    (if (null? result)\n  \
    \    (list 0)\n      (list (car paren_stack))))\n)", "  (let ((paren_count 0))\n\
    \    (let ((paren_stack (list)))\n      (while (not (null? paren_stack))\n   \
    \     (if (null? (cdr paren_stack))\n          (if (null? (cdr (car paren_stack)))\n\
    \            (set! paren_count (paren_count + 1))\n            (set! paren_stack\
    \ (cdr paren_stack)))\n          (set! paren_stack (car paren_stack)))\n     \
    \   (set! paren_stack (cdr paren_stack))))\n    (paren_count)))\n", "  (define\
    \ (parse_nested_parens_helper paren_string)\n    (if (null? paren_string)\n  \
    \    (list 0)\n      (let ((parsed_parens (parse_nested_parens_helper (cdr paren_string))))\n\
    \        (if (null? parsed_parens)\n          (list 0)\n          (let ((nested_parens\
    \ (car parsed_parens)))\n            (if (null? nested_parens)\n             \
    \ (list 0)\n              (let ((max_nested_parens (car nested_parens)))\n   \
    \             (list max_nested_parens))))))))))", "  (define (parse_nested_parens_helper\
    \ paren_string)\n    (if (null? paren_string)\n      (list 0)\n      (let ((depth\
    \ (parse_nested_parens_helper paren_string)))\n        (if (null? paren_string)\n\
    \          (list depth)\n          (list (car depth) (cdr depth)))))\n    (parse_nested_parens_helper\
    \ paren_string)))\n", "  (let ((parsed_parens ()))\n    (let ((parsed_parens ()))\n\
    \      (let ((parsed_parens ()))\n        (let ((parsed_parens ()))\n        \
    \  (let ((parsed_parens ()))\n            (let ((parsed_parens ()))\n        \
    \      (let ((parsed_parens ()))\n                (let ((parsed_parens ()))\n\
    \                  (let ((parsed_parens ()))\n                    (let ((parsed_parens\
    \ ()))\n                      (let ((parsed_parens ()))\n                    \
    \    (let ((parsed_parens ()))\n                          (let ((parsed_parens\
    \ ()))\n                            (let ((parsed_parens ()))\n              \
    \                (let ((parsed_parens ()))\n                                (let\
    \ ((parsed_parens ()))\n                                  (let ((parsed_parens\
    \ ()))\n                                    (let ((parsed_parens ()))\n      \
    \                                (let ((parsed_parens ()))\n                 \
    \                       (let ((parsed_parens ()))\n                          \
    \                (let ((parsed_parens ()))\n                                 \
    \           (let ((parsed_parens ()))\n                                      \
    \        (let ((parsed_parens ()))\n                                         \
    \       (let ((parsed_parens ()))\n                                          \
    \        (let ((parsed_parens ()))\n                                         \
    \           (let ((parsed_parens ()))\n                                      \
    \                (let ((parsed_parens ()))\n                                 \
    \                       (let ((parsed_parens ()))\n                          \
    \                                (let ((parsed_parens ()))\n                 \
    \                                           (let ((parsed_parens ()))\n      \
    \                                                        (let ((parsed_parens\
    \ ()))\n                                                                (let ((parsed_parens\
    \ ()))\n                                                                  (let\
    \ ((parsed_parens ()))\n                                                     \
    \               (let ((parsed_parens ()))\n                               ", " \
    \ (define (parse_nested_parens_helper paren_string)\n    (if (null? paren_string)\n\
    \      (list 0)\n      (if (null? (cdr paren_string))\n        (list (car paren_string)\
    \ (parse_nested_parens_helper (car paren_string)))\n        (list (car paren_string)\
    \ (parse_nested_parens_helper (car (cdr paren_string)))))))\n  (parse_nested_parens_helper\
    \ paren_string))\n", "  (let ((result (list)))\n    (let ((parsed_parens (string-split\
    \ paren_string \" \"))))\n    (for-each (lambda (p) (if (null? (cdr p)) (result\
    \ (car p)))) parsed_parens)\n    (if (null? result) (result (car parsed_parens))))\n\
    )\n", "  (define (parse_nested_parens_helper paren_string)\n    (if (null? paren_string)\n\
    \      (list 0)\n      (if (null? paren_string)\n        (list 0)\n        (if\
    \ (null? paren_string)\n          (list 0)\n          (if (null? paren_string)\n\
    \            (list 0)\n            (if (null? paren_string)\n              (list\
    \ 0)\n              (if (null? paren_string)\n                (list 0)\n     \
    \           (if (null? paren_string)\n                  (list 0)\n           \
    \       (if (null? paren_string)\n                    (list 0)\n             \
    \       (if (null? paren_string)\n                      (list 0)\n           \
    \           (if (null? paren_string)\n                        (list 0)\n     \
    \                   (if (null? paren_string)\n                          (list\
    \ 0)\n                          (if (null? paren_string)\n                   \
    \         (list 0)\n                            (if (null? paren_string)\n   \
    \                           (list 0)\n                              (if (null?\
    \ paren_string)\n                                (list 0)\n                  \
    \              (if (null? paren_string)\n                                  (list\
    \ 0)\n                                  (if (null? paren_string)\n           \
    \                         (list 0)\n                                    (if (null?\
    \ paren_string)\n                                      (list 0)\n            \
    \                          (if (null? paren_string)\n                        \
    \                (list 0)\n                                        (if (null?\
    \ paren_string)\n                                          (list 0)\n        \
    \                                  (if (null? paren_string)\n                \
    \                            (list 0)\n                                      \
    \      (if (null? paren_string)\n                                            \
    \  (list 0)\n                                              (if (null? paren_string)\n\
    \                                                (list 0)\n                  \
    \                              (if (null? paren_string)\n                    \
    \                              (list 0)\n                                    \
    \              (if (null? paren_string)\n                                    \
    \                (list 0)\n                                                  \
    \  (if (", "  (define (parse_nested_parens_helper paren_string)\n    (if (null?\
    \ paren_string)\n      (list 0)\n      (if (null? paren_string)\n        (list\
    \ 0)\n        (if (null? paren_string)\n          (list 0)\n          (if (null?\
    \ paren_string)\n            (list 0)\n            (if (null? paren_string)\n\
    \              (list 0)\n              (if (null? paren_string)\n            \
    \    (list 0)\n                (if (null? paren_string)\n                  (list\
    \ 0)\n                  (if (null? paren_string)\n                    (list 0)\n\
    \                    (if (null? paren_string)\n                      (list 0)\n\
    \                      (if (null? paren_string)\n                        (list\
    \ 0)\n                        (if (null? paren_string)\n                     \
    \     (list 0)\n                          (if (null? paren_string)\n         \
    \                   (list 0)\n                            (if (null? paren_string)\n\
    \                              (list 0)\n                              (if (null?\
    \ paren_string)\n                                (list 0)\n                  \
    \              (if (null? paren_string)\n                                  (list\
    \ 0)\n                                  (if (null? paren_string)\n           \
    \                         (list 0)\n                                    (if (null?\
    \ paren_string)\n                                      (list 0)\n            \
    \                          (if (null? paren_string)\n                        \
    \                (list 0)\n                                        (if (null?\
    \ paren_string)\n                                          (list 0)\n        \
    \                                  (if (null? paren_string)\n                \
    \                            (list 0)\n                                      \
    \      (if (null? paren_string)\n                                            \
    \  (list 0)\n                                              (if (null? paren_string)\n\
    \                                                (list 0)\n                  \
    \                              (if (null? paren_string)\n                    \
    \                              (list 0)\n                                    \
    \              (if (null? paren_string)\n                                    \
    \                (list 0)\n                                                  \
    \  (if (", "  (define (parse_nested_parens_helper paren_string)\n    (if (null?\
    \ paren_string)\n      (list 0)\n      (let ((nesting_level (car paren_string)))\n\
    \        (if (null? (cdr paren_string))\n          (list nesting_level)\n    \
    \      (parse_nested_parens_helper (cdr paren_string)))))\n    (parse_nested_parens_helper\
    \ paren_string)))\n", "  (define (parse_parens paren_string)\n    (if (null? paren_string)\n\
    \      (list 0)\n      (list (parse_parens (cdr paren_string))))\n    (if (null?\
    \ paren_string)\n      (list 0)\n      (list (parse_parens (car paren_string))))))\n",
  "  (define (parse_nested_parens_helper paren_string)\n    (if (null? paren_string)\n\
    \      (list 0)\n      (list (parse_nested_parens_helper (cdr paren_string))))))\n",
  "  (let ((paren_count 0))\n    (while (string-length paren_string)\n      (if (string-equal?\
    \ paren_string \" \")\n        (return (list paren_count))\n      (if (string-equal?\
    \ paren_string \")\")\n        (paren_count = paren_count - 1)\n      (if (string-equal?\
    \ paren_string \"(\")\n        (paren_count = paren_count + 1)\n      (if (paren_count\
    \ = 0)\n        (return (list paren_count))\n      (paren_string = (string-replace\
    \ paren_string \" \" \"\"))))))))\n", "  (let ((parsed_parens (parse-string paren_string\
    \ \"()\"))))\n  (let ((parsed_parens_list (parse-list parsed_parens))\n      \
    \   (nested_parens_list (parse-list parsed_parens_list))))\n  (if (null? nested_parens_list)\n\
    \    (list 0)\n    (let ((nested_parens_list (parse-list parsed_parens_list))\n\
    \          (nested_parens_list_length (length nested_parens_list))))\n    (list\
    \ nested_parens_list_length))))\n", "  (define (parse_nested_parens_helper paren_string)\n\
    \    (if (null? paren_string)\n      (list 0)\n    (if (null? (cdr paren_string))\n\
    \      (list (car paren_string) (parse_nested_parens_helper (car paren_string)))\n\
    \    (parse_nested_parens_helper (car paren_string))))\n  (parse_nested_parens_helper\
    \ paren_string))\n", "  (let ((paren_count 0))\n    (let ((paren_stack (list)))\n\
    \      (let ((result (list)))\n        (while (not (null? paren_stack))\n    \
    \      (if (null? (cdr paren_stack))\n            (if (null? (cdr (car paren_stack)))\n\
    \              (set! result (car paren_stack))\n              (set! paren_stack\
    \ (cdr paren_stack)))\n            (set! paren_stack (car paren_stack)))\n   \
    \       (set! paren_count (paren_count + 1))\n          (set! paren_stack (cons\
    \ (car paren_stack) paren_stack)))\n        (set! paren_stack (cons (car paren_stack)\
    \ paren_stack)))\n      (set! paren_count (paren_count - 1))\n      (set! result\
    \ (car paren_stack))))\n  (if (null? paren_stack)\n    (list 0)\n    (parse_nested_parens\
    \ paren_string)))\n", "  (define (parse_parens paren_string)\n    (if (null? paren_string)\n\
    \      (list 0)\n      (if (null? (cdr paren_string))\n        (list (car paren_string))\n\
    \        (parse_parens (cdr paren_string))))))\n", "  (define (parse_parens paren_string)\n\
    \    (if (null? paren_string)\n      (list 0)\n      (if (null? (cdr paren_string))\n\
    \        (list (car paren_string) (parse_parens (car paren_string)))\n       \
    \ (list (car paren_string) (parse_parens (car paren_string)) (parse_parens (cdr\
    \ paren_string)))))))\n", "  (define (parse_nested_parens_helper paren_string)\n\
    \    (if (null? paren_string)\n      (list 0)\n      (if (null? (cdr paren_string))\n\
    \        (list (car paren_string) (parse_nested_parens_helper (car paren_string)))\n\
    \        (list (car paren_string)\n          (parse_nested_parens_helper (car\
    \ (cdr paren_string)))\n          (parse_nested_parens_helper (cdr (cdr paren_string)))))))\n\
    \  (parse_nested_parens_helper paren_string))\n", "  (define (parse_nested_parens_helper\
    \ paren_string)\n    (if (null? paren_string)\n      (list 0)\n      (let ((p\
    \ (car paren_string)))\n        (if (null? p)\n          (list 0)\n          (let\
    \ ((n (parse_nested_parens_helper (cdr paren_string))))\n            (list (car\
    \ p) n))))))\n  (parse_nested_parens_helper paren_string)))\n", "  (let ((paren_stack\
    \ (list)))\n    (let ((paren_count 0))\n      (let ((paren_depth 0))\n       \
    \ (while (not (null? paren_stack))\n          (if (null? (cdr paren_stack))\n\
    \            (if (null? (cdr (car paren_stack)))\n              (if (null? (cdr\
    \ (car (car paren_stack))))\n                (set! paren_count (+ 1 paren_count))\n\
    \                (set! paren_depth (max paren_depth paren_count))\n          \
    \      (set! paren_stack (cdr paren_stack)))\n              (set! paren_stack\
    \ (car paren_stack)))\n            (set! paren_stack (cdr paren_stack)))\n   \
    \       (set! paren_stack (car paren_stack))))\n      (paren_depth))))\n", " \
    \ (define (parse_nested_parens_helper paren_string)\n    (if (null? paren_string)\n\
    \      (list 0)\n      (if (null? (cdr paren_string))\n        (list (car paren_string)\
    \ (parse_nested_parens_helper (car paren_string)))\n        (parse_nested_parens_helper\
    \ (car paren_string)))))\n  (parse_nested_parens_helper paren_string))\n", " \
    \ (let ((parsed_parens ()))\n    (let ((parsed_parens ()))\n      (let ((parsed_parens\
    \ ()))\n        (let ((parsed_parens ()))\n          (let ((parsed_parens ()))\n\
    \            (let ((parsed_parens ()))\n              (let ((parsed_parens ()))\n\
    \                (let ((parsed_parens ()))\n                  (let ((parsed_parens\
    \ ()))\n                    (let ((parsed_parens ()))\n                      (let\
    \ ((parsed_parens ()))\n                        (let ((parsed_parens ()))\n  \
    \                        (let ((parsed_parens ()))\n                         \
    \   (let ((parsed_parens ()))\n                              (let ((parsed_parens\
    \ ()))\n                                (let ((parsed_parens ()))\n          \
    \                        (let ((parsed_parens ()))\n                         \
    \           (let ((parsed_parens ()))\n                                      (let\
    \ ((parsed_parens ()))\n                                        (let ((parsed_parens\
    \ ()))\n                                          (let ((parsed_parens ()))\n\
    \                                            (let ((parsed_parens ()))\n     \
    \                                         (let ((parsed_parens ()))\n        \
    \                                        (let ((parsed_parens ()))\n         \
    \                                         (let ((parsed_parens ()))\n        \
    \                                            (let ((parsed_parens ()))\n     \
    \                                                 (let ((parsed_parens ()))\n\
    \                                                        (let ((parsed_parens\
    \ ()))\n                                                          (let ((parsed_parens\
    \ ()))\n                                                            (let ((parsed_parens\
    \ ()))\n                                                              (let ((parsed_parens\
    \ ()))\n                                                                (let ((parsed_parens\
    \ ()))\n                                                                  (let\
    \ ((parsed_parens ()))\n                                                     \
    \               (let ((parsed_parens ()))\n                               ", " \
    \ (define (parse_nested_parens_helper paren_string)\n    (if (null? paren_string)\n\
    \      (list 0)\n      (let ((count (car paren_string)))\n        (if (null? (cdr\
    \ paren_string))\n          (list count)\n          (parse_nested_parens_helper\
    \ (cdr paren_string)))))\n    (parse_nested_parens_helper paren_string)))\n",
  "  (define (parse_nested_parens_helper paren_string)\n    (if (null? paren_string)\n\
    \      (list 0)\n      (if (null? paren_string)\n        (list 0)\n        (if\
    \ (null? paren_string)\n          (list 0)\n          (if (null? paren_string)\n\
    \            (list 0)\n            (if (null? paren_string)\n              (list\
    \ 0)\n              (if (null? paren_string)\n                (list 0)\n     \
    \           (if (null? paren_string)\n                  (list 0)\n           \
    \       (if (null? paren_string)\n                    (list 0)\n             \
    \       (if (null? paren_string)\n                      (list 0)\n           \
    \           (if (null? paren_string)\n                        (list 0)\n     \
    \                   (if (null? paren_string)\n                          (list\
    \ 0)\n                          (if (null? paren_string)\n                   \
    \         (list 0)\n                            (if (null? paren_string)\n   \
    \                           (list 0)\n                              (if (null?\
    \ paren_string)\n                                (list 0)\n                  \
    \              (if (null? paren_string)\n                                  (list\
    \ 0)\n                                  (if (null? paren_string)\n           \
    \                         (list 0)\n                                    (if (null?\
    \ paren_string)\n                                      (list 0)\n            \
    \                          (if (null? paren_string)\n                        \
    \                (list 0)\n                                        (if (null?\
    \ paren_string)\n                                          (list 0)\n        \
    \                                  (if (null? paren_string)\n                \
    \                            (list 0)\n                                      \
    \      (if (null? paren_string)\n                                            \
    \  (list 0)\n                                              (if (null? paren_string)\n\
    \                                                (list 0)\n                  \
    \                              (if (null? paren_string)\n                    \
    \                              (list 0)\n                                    \
    \              (if (null? paren_string)\n                                    \
    \                (list 0)\n                                                  \
    \  (if (", "  (let ((result (list)))\n    (let ((parsed_parens (list)))\n    \
    \  (while (not (null? paren_string))\n        (if (not (null? (cdr parsed_parens)))\n\
    \            (let ((nested_parens (cdr (cdr parsed_parens))))\n              (if\
    \ (null? nested_parens)\n                  (append result (car parsed_parens))\n\
    \                  (append result (car nested_parens))\n                (append\
    \ result (car (car parsed_parens)))\n                (append result (car (car\
    \ nested_parens)))\n              )\n            )\n          (append result (car\
    \ parsed_parens))\n          (append result (car (car parsed_parens)))\n     \
    \     (append result (car (car (car parsed_parens))))\n          (append result\
    \ (car (car (car (car parsed_parens))))))\n        (append parsed_parens (car\
    \ (car paren_string)))\n        (paren_string = (cdr paren_string)))\n      (if\
    \ (null? result)\n          (result (list))\n        (result (cons (car result)\
    \ (car (car result))))))\n    (if (null? result)\n        (result (list))\n  \
    \    (result (cons (car result) (car (car result))))))\n  ))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
