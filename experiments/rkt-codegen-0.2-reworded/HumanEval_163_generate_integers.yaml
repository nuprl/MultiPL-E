name: HumanEval_163_generate_integers
language: rkt
prompt: "#lang racket\n\n;; Given two positive integers a and b, return the even digits\
  \ between a\n;; and b, in ascending order.\n;; For example:\n;; >>> (generate_integers\
  \ 2 8)\n;; (list 2 4 6 8)\n;; >>> (generate_integers 8 2)\n;; (list 2 4 6 8)\n;;\
  \ >>> (generate_integers 10 14)\n;; (list )\n(define (generate_integers a b)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate generate_integers))\n\
  \    (check-equal? (candidate 2 10) (list 2 4 6 8))\n    (check-equal? (candidate\
  \ 10 2) (list 2 4 6 8))\n    (check-equal? (candidate 132 2) (list 2 4 6 8))\n \
  \   (check-equal? (candidate 17 89) (list ))\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(<= a b) (list)]\n    [(<= a 0) (list 0)]\n    [(<= b\
    \ 0) (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(< a b) (cons a)]\n\
    \    [(< a 0) (cons 0)]\n    [(< b 0) (cons)]\n    [(= a b) (cons)]\n    [(= b\
    \ 0) (cons)]\n    [else (cons)]\n  )\n)\n", "  (let ((n (div a b)))\n    (if (<=\
    \ n 0)\n      (list)\n      (let ((i 0))\n        (while (<= i n)\n          (let\
    \ ((digit (modulo (remainder (remainder i n) b) 10)))\n            (if (= digit\
    \ 0)\n              (list digit)\n              (append (list digit) (generate_integers\
    \ (remainder i n) (remainder (remainder i n) b))))\n            (setq i (add1\
    \ i)))\n          (setq i (add1 i)))))))\n", "  (let ((result (list)))\n    (while\
    \ (< a b)\n      (let ((digit (modulo a 10)))\n        (if (= digit 0)\n     \
    \     (append result digit)\n          (append result (modulo a digit))))))\n\
    \  result)\n\n;; Given a positive integer n, return the sum of the digits of n.\n\
    ;; For example:\n;; >>> (sum_digits 5)\n;; 5\n;; >>> (sum_digits 10)\n;; 10\n\
    ;; >>> (sum_digits 100)\n;; 100\n;; >>> (sum_digits 1000)\n;; 1000\n;; >>> (sum_digits\
    \ 100000)\n;; 100000\n;; >>> (sum_digits 1000000)\n;; 1000000\n;; >>> (sum_digits\
    \ 10000000)\n;; 10000000\n;; >>> (sum_digits 100000000)\n;; 100000000\n;; >>>\
    \ (sum_digits 1000000000)\n;; 1000000000\n;; >>> (sum_digits 10000000000)\n;;\
    \ 10000000000\n;; >>> (sum_digits 100000000000)\n;; 100000000000\n;; >>> (sum_digits\
    \ 1000000000000)\n;; 1000000000000\n;; >>> (sum_digits 10000000000000)\n;; 10000000000000\n\
    ;; >>> (sum_digits 100000000000000)\n;; 100000000000000\n;; >>> (sum_digits 1000000000000000)\n\
    ;; 1000000000000000\n;; >>> (sum_digits 10000000000000000)\n;; 10000000000000000\n\
    ;; >>> (sum_digits 100000000000000000)\n;; 100000000000000000\n;; >>> (sum_digits\
    \ 1000000000000000000)\n;; 1000000000000000000\n;; >>> (sum_digits 10000000000000000000)\n\
    ;; 10000000000000000000\n;; >>> (sum_digits 100000000000000000000)\n;; 100000000000000000000\n\
    ;; >>> (sum_digits 1000000000000000000000)\n;; 1000000000000000000000\n;; >>>\
    \ (sum_digits 10000000000000000000000)\n;; 10000000000000000000000\n;; >>> (sum_digits\
    \ 100000000000000000000000)\n;; 100000000000000000000000\n;; >>> (sum_digits 1000000000000000000000000)\n\
    ;; 1000000000000000000000000\n;; >>> (sum_digits 10000000000000000000000000)\n\
    ;; 10000000000000000000000000\n;; >>> (sum_digits 100000000000000000000000000)\n\
    ;; 100000000000000000000000000\n;; >>> (sum_digits 1000000000000000000000000000)\n\
    ;; 100", "  (define (gen-evens a b)\n    (define (gen-evens-rec a b)\n      (if\
    \ (<= a b)\n        (list a)\n        (gen-evens-rec (+ a 1)))))\n  (gen-evens-rec\
    \ a b))\n\n;; >>> (generate_integers 2 8)\n;; (list 2 4 6 8)\n;; >>> (generate_integers\
    \ 8 2)\n;; (list 2 4 6 8)\n;; >>> (generate_integers 10 14)\n;; (list )\n\n;;\
    \ >>> (generate_integers 2 8)\n;; (list 2 4 6 8)\n;; >>> (generate_integers 8\
    \ 2)\n;; (list 2 4 6 8)\n;; >>> (generate_integers 10 14)\n;; (list )\n\n;; >>>\
    \ (generate_integers 2 8)\n;; (list 2 4 6 8)\n;; >>> (generate_integers 8 2)\n\
    ;; (list 2 4 6 8)\n;; >>> (generate_integers 10 14)\n;; (list )\n\n;; >>> (generate_integers\
    \ 2 8)\n;; (list 2 4 6 8)\n;; >>> (generate_integers 8 2)\n;; (list 2 4 6 8)\n\
    ;; >>> (generate_integers 10 14)\n;; (list )\n\n;; >>> (generate_integers 2 8)\n\
    ;; (list 2 4 6 8)\n;; >>> (generate_integers 8 2)\n;; (list 2 4 6 8)\n;; >>> (generate_integers\
    \ 10 14)\n;; (list )\n\n;; >>> (generate_integers 2 8)\n;; (list 2 4 6 8)\n;;\
    \ >>> (generate_integers 8 2)\n;; (list 2 4 6 8)\n;; >>> (generate_integers 10\
    \ 14)\n;; (list )\n\n;; >>> (generate_integers 2 8)\n;; (list 2 4 6 8)\n;; >>>\
    \ (generate_integers 8 2)\n;; (list 2 4 6 8)\n;; >>> (generate_integers 10 14)\n\
    ;; (list )\n\n;; >>> (generate_integers 2 8)\n;; (list 2 4 6 8)\n;; >>> (", " \
    \ (define (gen-range a b)\n    (if (<= a b)\n      (list a)\n      (gen-range\
    \ (+ a 1) b)))\n  (gen-range a b))\n\n;; Given a positive integer n, return the\
    \ number of ways to write n as a\n;; sum of two positive integers.\n;; For example:\n\
    ;; >>> (number_of_ways 2)\n;; 2\n;; >>> (number_of_ways 3)\n;; 3\n;; >>> (number_of_ways\
    \ 4)\n;; 5\n;; >>> (number_of_ways 5)\n;; 10\n;; >>> (number_of_ways 6)\n;; 15\n\
    ;; >>> (number_of_ways 7)\n;; 21\n;; >>> (number_of_ways 8)\n;; 28\n;; >>> (number_of_ways\
    \ 9)\n;; 36\n;; >>> (number_of_ways 10)\n;; 45\n;; >>> (number_of_ways 11)\n;;\
    \ 55\n;; >>> (number_of_ways 12)\n;; 66\n;; >>> (number_of_ways 13)\n;; 78\n;;\
    \ >>> (number_of_ways 14)\n;; 91\n;; >>> (number_of_ways 15)\n;; 105\n;; >>> (number_of_ways\
    \ 16)\n;; 120\n;; >>> (number_of_ways 17)\n;; 136\n;; >>> (number_of_ways 18)\n\
    ;; 153\n;; >>> (number_of_ways 19)\n;; 171\n;; >>> (number_of_ways 20)\n;; 190\n\
    ;; >>> (number_of_ways 21)\n;; 210\n;; >>> (number_of_ways 22)\n;; 231\n;; >>>\
    \ (number_of_ways 23)\n;; 253\n;; >>> (number_of_ways 24)\n;; 276\n;; >>> (number_of_ways\
    \ 25)\n;; 300\n;; >>> (number_of_ways 26)\n;; 325\n;; >>> (number_of_ways 27)\n\
    ;; 351\n;; >>> (number_of_ways 28)\n;; 378\n;; >>> (number_of_ways 29)\n;; 404\n\
    ;; >>> (number_of_ways 30)\n;; 430\n;; >>> (number_of_ways 31)\n;; 456\n;; >>>\
    \ (number_of_ways 32)\n;;", "  (let ((n (abs a)))\n    (if (<= n b)\n      (list\
    \ n)\n      (let ((i (0)))\n        (while (<= i n)\n          (let ((digit (modulo\
    \ n i)))\n            (if (= digit 0)\n              (list digit)\n          \
    \    (let ((next (modulo n (1 + i))))\n                (let ((next_digit (modulo\
    \ n next)))\n                  (if (= next_digit 0)\n                    (list\
    \ digit)\n                    (let ((next_next (modulo n (1 + i))))\n        \
    \              (let ((next_next_digit (modulo n next_next)))\n               \
    \         (if (= next_next_digit 0)\n                          (list digit)\n\
    \                          (let ((next_next_next (modulo n (1 + i))))\n      \
    \                      (let ((next_next_next_digit (modulo n next_next_next)))\n\
    \                              (if (= next_next_next_digit 0)\n              \
    \                  (list digit)\n                                (let ((next_next_next_next\
    \ (modulo n (1 + i))))\n                                  (let ((next_next_next_next_digit\
    \ (modulo n next_next_next_next)))\n                                    (if (=\
    \ next_next_next_next_digit 0)\n                                      (list digit)\n\
    \                                      (let ((next_next_next_next_next (modulo\
    \ n (1 + i))))\n                                        (let ((next_next_next_next_next_digit\
    \ (modulo n next_next_next_next_next)))\n                                    \
    \      (if (= next_next_next_next_next_digit 0)\n                            \
    \                (list digit)\n                                            (let\
    \ ((next_next_next_next_next_next_digit (modulo n next_next_next_next_next_next)))\n\
    \                                              (if (= next_next_next_next_next_next_digit\
    \ 0)\n                                                (list digit)\n         \
    \                                       (let ((next_next_next_next_next_next_next_digit\
    \ (modulo n next_next_next_next_next_next_next))))))))))))))))))))))))))))))))))))))))))))))))))))",
  "  (cond\n    [(<= a b) (list)]\n    [(<= a 0) (list 0)]\n    [(<= b 0) (list)]\n\
    \    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(< a b) (cons a)]\n    [(< a\
    \ 0) (cons 0)]\n    [(< b 0) (cons)]\n    [(= a b) (cons)]\n    [(= b 0) (cons)]\n\
    \    [(> a b) (cons)]\n    [(> a 0) (cons 0)]\n    [(> b 0) (cons)]\n    [(<=\
    \ a b) (cons)]\n    [(<= a 0) (cons 0)]\n    [(<= b 0) (cons)]\n    [(= a b) (cons)]\n\
    \    [(= b 0) (cons)]\n    [(> a b) (cons)]\n    [(> a 0) (cons 0)]\n    [(> b\
    \ 0) (cons)]\n    [(<= a b) (cons)]\n    [(<= a 0) (cons 0)]\n    [(<= b 0) (cons)]\n\
    \    [(= a b) (cons)]\n    [(= b 0) (cons)]\n    [(> a b) (cons)]\n    [(> a 0)\
    \ (cons 0)]\n    [(> b 0) (cons)]\n    [(<= a b) (cons)]\n    [(<= a 0) (cons\
    \ 0)]\n    [(<= b 0) (cons)]\n    [(= a b) (cons)]\n    [(= b 0) (cons)]\n   \
    \ [(> a b) (cons)]\n    [(> a 0) (cons 0)]\n    [(> b 0) (cons)]\n    [(<= a b)\
    \ (cons)]\n    [(<= a 0) (cons 0)]\n    [(<= b 0) (cons)]\n    [(= a b) (cons)]\n\
    \    [(= b 0) (cons)]\n    [(> a b) (cons)]\n    [(> a 0) (cons", "  (define (gen-range\
    \ a b)\n    (if (<= a b)\n      (list a)\n      (gen-range (+ a 1) b)))\n  (gen-range\
    \ a b))\n\n;; Given a positive integer n, return the sum of the even digits between\n\
    ;; 1 and n, in ascending order.\n;; For example:\n;; >>> (sum-even-digits 1 10)\n\
    ;; (list 2 4 6 8 10)\n;; >>> (sum-even-digits 10)\n;; (list 2 4 6 8 10)\n;; >>>\
    \ (sum-even-digits 100)\n;; (list )", "  (define (generate-integers a b)\n   \
    \ (define (generate-digit d)\n      (if (< d a)\n        (list d)\n        (generate-digit\
    \ (+ d 1)))))\n    (generate-integers a b))\n\n;; Given a positive integer n,\
    \ return the sum of the even digits between\n;; 1 and n, in ascending order.\n\
    ;; For example:\n;; >>> (sum-even-digits 10)\n;; (list 6)\n;; >>> (sum-even-digits\
    \ 100)\n;; (list 6 16)\n;; >>> (sum-even-digits 1000)\n;; (list 6 16 26 36)\n\
    ;; >>> (sum-even-digits 1000000)\n;; (list 6 16 26 36 5056)\n;; >>> (sum-even-digits\
    \ 1000000000)\n;; (list 6 16 26 36 5056 73074)\n;; >>> (sum-even-digits 1000000000000)\n\
    ;; (list 6 16 26 36 5056 73074 84416 109022)\n;; >>> (sum-even-digits 1000000000000000)\n\
    ;; (list 6 16 26 36 5056 73074 84416 109022 122434 145036)\n;; >>> (sum-even-digits\
    \ 10000000000000000)\n;; (list 6 16 26 36 5056 73074 84416 109022 122434 145036\
    \ 167848)\n;; >>> (sum-even-digits 100000000000000000)\n;; (list 6 16 26 36 5056\
    \ 73074 84416 109022 122434 145036 167848 189214)\n;; >>> (sum-even-digits 1000000000000000000)\n\
    ;; (list 6 16 26 36 5056 73074 84416 109022 122434 145036 167848 189214 206734)\n\
    ;; >>> (sum-even-digits 10000000000000000000)\n;; (list 6 16 26 36 5056 73074\
    \ 84416 109022 122434 145036 167848 189214 206734 2147483648)\n;; >>> (sum-even-digits\
    \ 100000000000000000000)\n;; (list 6 16 26 36 5056 73074 84416 109022 122434 145036\
    \ 167848 189214", "  (cond ((<= a b) (list))\n        ((= a 0) (list))\n     \
    \   ((<= a b)\n          (let ((n (modulo a 10)))\n            (if (<= n 0) (list)\
    \ (cons n (generate_integers (add1 a) (sub1 b)))))))\n)\n\n;; Given a positive\
    \ integer n, return the sum of the digits of n, in\n;; ascending order. For example:\n\
    ;; >>> (sum_digits 5)\n;; 5\n;; >>> (sum_digits 10)\n;; 10\n;; >>> (sum_digits\
    \ 100)\n;; 100\n;; >>> (sum_digits 1000)\n;; 1000\n;; >>> (sum_digits 100000)\n\
    ;; 100000\n;; >>> (sum_digits 1000000)\n;; 1000000\n;; >>> (sum_digits 10000000)\n\
    ;; 10000000\n;; >>> (sum_digits 100000000)\n;; 100000000\n;; >>> (sum_digits 1000000000)\n\
    ;; 1000000000\n;; >>> (sum_digits 10000000000)\n;; 10000000000\n;; >>> (sum_digits\
    \ 100000000000)\n;; 100000000000\n;; >>> (sum_digits 1000000000000)\n;; 1000000000000\n\
    ;; >>> (sum_digits 10000000000000)\n;; 10000000000000\n;; >>> (sum_digits 100000000000000)\n\
    ;; 100000000000000\n;; >>> (sum_digits 1000000000000000)\n;; 1000000000000000\n\
    ;; >>> (sum_digits 10000000000000000)\n;; 10000000000000000\n;; >>> (sum_digits\
    \ 100000000000000000)\n;; 100000000000000000\n;; >>> (sum_digits 1000000000000000000)\n\
    ;; 1000000000000000000\n;; >>> (sum_digits 10000000000000000000)\n;; 10000000000000000000\n\
    ;; >>> (sum_digits 100000000000000000000)\n;; 100000000000000000000\n;; >>> (sum_digits\
    \ 1000000000000000000000)\n;; 1000000000000000000000\n;; >>> (sum_digits 10000000000000000000000)\n\
    ;; 10000000000000000000000\n;; >>> (sum_digits 100000000000000000000000)\n;; 100000000000000000000000\n\
    ;; >>> (sum_digits 1000000000000000000000000)\n;; 1000000000000000000000000\n\
    ;; >>> (sum_digits 10000000000000000000000000)\n;; 10000000000000000000000000\n\
    ;; >>> (sum_digits 100000000000000000000000000)", "  (let ((result (list)))\n\
    \    (for-each (lambda (x) (result (cons x (car x))))\n      (range a b)))\n \
    \ result)\n\n;; Given a positive integer n, return the sum of the digits of n.\n\
    ;; For example:\n;; >>> (sum_digits 5)\n;; 10\n;; >>> (sum_digits 10)\n;; 10\n\
    ;; >>> (sum_digits 100)\n;; 100\n;; >>> (sum_digits 1000)\n;; 1000\n;; >>> (sum_digits\
    \ 100000)\n;; 100000\n;; >>> (sum_digits 1000000)\n;; 1000000\n;; >>> (sum_digits\
    \ 10000000)\n;; 10000000\n;; >>> (sum_digits 100000000)\n;; 100000000\n;; >>>\
    \ (sum_digits 1000000000)\n;; 1000000000\n;; >>> (sum_digits 10000000000)\n;;\
    \ 10000000000\n;; >>> (sum_digits 100000000000)\n;; 100000000000\n;; >>> (sum_digits\
    \ 1000000000000)\n;; 1000000000000\n;; >>> (sum_digits 10000000000000)\n;; 10000000000000\n\
    ;; >>> (sum_digits 100000000000000)\n;; 100000000000000\n;; >>> (sum_digits 1000000000000000)\n\
    ;; 1000000000000000\n;; >>> (sum_digits 10000000000000000)\n;; 10000000000000000\n\
    ;; >>> (sum_digits 100000000000000000)\n;; 100000000000000000\n;; >>> (sum_digits\
    \ 1000000000000000000)\n;; 1000000000000000000\n;; >>> (sum_digits 10000000000000000000)\n\
    ;; 10000000000000000000\n;; >>> (sum_digits 100000000000000000000)\n;; 100000000000000000000\n\
    ;; >>> (sum_digits 1000000000000000000000)\n;; 1000000000000000000000\n;; >>>\
    \ (sum_digits 10000000000000000000000)\n;; 10000000000000000000000\n;; >>> (sum_digits\
    \ 100000000000000000000000)\n;; 100000000000000000000000\n;; >>> (sum_digits 1000000000000000000000000)\n\
    ;; 1000000000000000000000000\n;; >>> (sum_digits 10000000000000000000000000)\n\
    ;; 10000000000000000000000000\n;; >>> (sum_digits 100000000000000000000000000)\n\
    ;; 100000000000000000000000000\n;; >>> (sum_digits 1000000000000000000000000000)\n\
    ;; 1000000000000000000000000000\n;; >>> (sum_digits 10000000000000000000000000000)\n\
    ;; 1000000000000000000", "  (define (gen-evens a b)\n    (define (gen-evens-rec\
    \ a b)\n      (if (<= a b)\n        (list a)\n        (gen-evens-rec (+ a 1)))))\n\
    \  (gen-evens a b))\n\n;; #lang scheme", "  (let ((i a))\n    (while (< i b)\n\
    \      (let ((j (modulo i 10)))\n        (if (= j 0)\n            (list j)\n \
    \           (append (list j) (generate_integers (i (+ 1 j)) (i (+ 2 j))))))))\n\
    \  (generate_integers a b))\n\n;; Given a positive integer n, return the sum of\
    \ the digits of n.\n;; For example:\n;; >>> (sum_digits 5)\n;; 5\n;; >>> (sum_digits\
    \ 10)\n;; 10\n;; >>> (sum_digits 100)\n;; 100\n;; >>> (sum_digits 1000)\n;; 1000\n\
    ;; >>> (sum_digits 100000)\n;; 100000\n;; >>> (sum_digits 1000000)\n;; 1000000\n\
    ;; >>> (sum_digits 10000000)\n;; 10000000\n;; >>> (sum_digits 100000000)\n;; 100000000\n\
    ;; >>> (sum_digits 1000000000)\n;; 1000000000\n;; >>> (sum_digits 10000000000)\n\
    ;; 10000000000\n;; >>> (sum_digits 100000000000)\n;; 100000000000\n;; >>> (sum_digits\
    \ 1000000000000)\n;; 1000000000000\n;; >>> (sum_digits 10000000000000)\n;; 10000000000000\n\
    ;; >>> (sum_digits 100000000000000)\n;; 100000000000000\n;; >>> (sum_digits 1000000000000000)\n\
    ;; 1000000000000000\n;; >>> (sum_digits 10000000000000000)\n;; 10000000000000000\n\
    ;; >>> (sum_digits 100000000000000000)\n;; 100000000000000000\n;; >>> (sum_digits\
    \ 1000000000000000000)\n;; 1000000000000000000\n;; >>> (sum_digits 10000000000000000000)\n\
    ;; 10000000000000000000\n;; >>> (sum_digits 100000000000000000000)\n;; 100000000000000000000\n\
    ;; >>> (sum_digits 1000000000000000000000)\n;; 1000000000000000000000\n;; >>>\
    \ (sum_digits 10000000000000000000000)\n;; 10000000000000000000000\n;; >>> (sum_digits\
    \ 100000000000000000000000)\n;; 100000000000000000000000\n;; >>> (sum_digits 1000000000000000000000000)\n\
    ;; 1000000000000000000000000\n;; >>> (sum_digits 10000000000000000000000000)\n\
    ;; 10000000000000000000000000\n;; >>> (sum_digits 100000000000000000000000000)\n",
  "  (cond ((<= a b) (list))\n        ((= a 0) (list))\n        ((<= a b)\n      \
    \    (let ((n (modulo a 10)))\n            (if (zero? n)\n                (list)\n\
    \                (cons (modulo (add n 10) 10)\n                     (generate_integers\
    \ (sub n 10) (sub b 10)))))))\n)\n\n;; Given a positive integer n, return the\
    \ sum of the even digits between\n;; 1 and n, in ascending order.\n;; For example:\n\
    ;; >>> (sum_even_digits 10)\n;; (list 2 4 6 8 10)\n;; >>> (sum_even_digits 0)\n\
    ;; (list )", "  (define (gen-evens a b)\n    (define (gen-evens-rec a b)\n   \
    \   (if (<= a b)\n        (list a)\n        (gen-evens-rec (+ a 1)))))\n  (gen-evens\
    \ a b))\n\n;; >>> (generate_integers 2 8)\n;; (list 2 4 6 8)\n;; >>> (generate_integers\
    \ 8 2)\n;; (list 2 4 6 8)\n;; >>> (generate_integers 10 14)\n;; (list )\n\n;;\
    \ >>> (generate_integers 2 8)\n;; (list 2 4 6 8)\n;; >>> (generate_integers 8\
    \ 2)\n;; (list 2 4 6 8)\n;; >>> (generate_integers 10 14)\n;; (list )\n\n;; >>>\
    \ (generate_integers 2 8)\n;; (list 2 4 6 8)\n;; >>> (generate_integers 8 2)\n\
    ;; (list 2 4 6 8)\n;; >>> (generate_integers 10 14)\n;; (list )\n\n;; >>> (generate_integers\
    \ 2 8)\n;; (list 2 4 6 8)\n;; >>> (generate_integers 8 2)\n;; (list 2 4 6 8)\n\
    ;; >>> (generate_integers 10 14)\n;; (list )\n\n;; >>> (generate_integers 2 8)\n\
    ;; (list 2 4 6 8)\n;; >>> (generate_integers 8 2)\n;; (list 2 4 6 8)\n;; >>> (generate_integers\
    \ 10 14)\n;; (list )\n\n;; >>> (generate_integers 2 8)\n;; (list 2 4 6 8)\n;;\
    \ >>> (generate_integers 8 2)\n;; (list 2 4 6 8)\n;; >>> (generate_integers 10\
    \ 14)\n;; (list )\n\n;; >>> (generate_integers 2 8)\n;; (list 2 4 6 8)\n;; >>>\
    \ (generate_integers 8 2)\n;; (list 2 4 6 8)\n;; >>> (generate_integers 10 14)\n\
    ;; (list )\n\n;; >>> (generate_integers 2 8)\n;; (list 2 4 6 8)\n;; >>> (generate",
  "  (if (<= a b)\n    (list)\n    (let ((i (0)))\n      (while (<= i a)\n       \
    \ (let ((j (0)))\n          (while (<= j b)\n            (if (modulo (i + j) 2)\n\
    \              (list (modulo (i + j) 2) (i + j))\n              (j (+ 1 j)))\n\
    \            (setq j (+ 1 j)))\n          (setq i (+ 1 i)))))))\n\n;; Given a\
    \ positive integer n, return the sum of the first n even\n;; digits of the Fibonacci\
    \ sequence.\n;; For example:\n;; >>> (sum_of_first_n_fibonacci_digits 10)\n;;\
    \ (list 2)\n;; >>> (sum_of_first_n_fibonacci_digits 20)\n;; (list 2 4)\n;; >>>\
    \ (sum_of_first_n_fibonacci_digits 30)\n;; (list 2 4 8)\n;; >>> (sum_of_first_n_fibonacci_digits\
    \ 40)\n;; (list 2 4 8 12)\n;; >>> (sum_of_first_n_fibonacci_digits 50)\n;; (list\
    \ 2 4 8 12 16)\n;; >>> (sum_of_first_n_fibonacci_digits 60)\n;; (list 2 4 8 12\
    \ 16 24)\n;; >>> (sum_of_first_n_fibonacci_digits 70)\n;; (list 2 4 8 12 16 24\
    \ 32)\n;; >>> (sum_of_first_n_fibonacci_digits 80)\n;; (list 2 4 8 12 16 24 32\
    \ 40)\n;; >>> (sum_of_first_n_fibonacci_digits 90)\n;; (list 2 4 8 12 16 24 32\
    \ 40 48)\n;; >>> (sum_of_first_n_fibonacci_digits 100)\n;; (list 2 4 8 12 16 24\
    \ 32 40 48 56)\n;; >>> (sum_of_first_n_fibonacci_digits 110)\n;; (list 2 4 8 12\
    \ 16 24 32 40 48 56 72)\n;; >>> (sum_of_first_n_fibonacci_", "  (cond\n    [(<=\
    \ a b) (list)]\n    [(<= a 0) (list 0)]\n    [(<= b 0) (list)]\n    [(<= a b)\n\
    \      (let ((n (modulo a 10)))\n        (if (zero? n)\n            (list)\n \
    \           (cons (modulo (remainder a 10) 10)\n                 (generate_integers\
    \ (remainder a 10) (modulo b 10)))))]))\n", "  (cond\n    [(<= a b) (list)]\n\
    \    [(<= a 0) (list 0)]\n    [(<= b 0) (list)]\n    [(>= a b) (list)]\n    [(>=\
    \ a 0) (list)]\n    [(>= b 0) (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n\
    \    [(= a b) (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b)\
    \ (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n\
    \    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0)\
    \ (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0) (list)]\n\
    \    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0) (list)]\n    [(= b 0)\
    \ (list)]\n    [(= a b) (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n\
    \    [(= a b) (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b)\
    \ (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n\
    \    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0)\
    \ (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0) (list)]\n\
    \    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0", "  (let ((n (div a\
    \ b)))\n    (if (< n 0)\n      (list)\n      (let ((i 0))\n        (while (<=\
    \ i n)\n          (let ((digit (modulo (remainder (quotient i n) 10) 10)))\n \
    \           (list digit))\n            (set! i (+ i 1))))))))\n", "  (let ((i\
    \ a))\n    (while (< i b)\n      (let ((digit (modulo i 10)))\n        (if (=\
    \ digit 0)\n            (list digit)\n            (append (list digit) (generate_integers\
    \ (i (+ i 1)) (i (+ i 1))))))))\n  (generate_integers a b))\n\n;; Given a positive\
    \ integer n, return the sum of the digits of n, in\n;; ascending order. For example:\n\
    ;; >>> (sum_digits 5)\n;; 5\n;; >>> (sum_digits 10)\n;; 10\n;; >>> (sum_digits\
    \ 100)\n;; 100\n;; >>> (sum_digits 1000)\n;; 1000\n;; >>> (sum_digits 100000)\n\
    ;; 100000\n;; >>> (sum_digits 1000000)\n;; 1000000\n;; >>> (sum_digits 10000000)\n\
    ;; 10000000\n;; >>> (sum_digits 100000000)\n;; 100000000\n;; >>> (sum_digits 1000000000)\n\
    ;; 1000000000\n;; >>> (sum_digits 10000000000)\n;; 10000000000\n;; >>> (sum_digits\
    \ 100000000000)\n;; 100000000000\n;; >>> (sum_digits 1000000000000)\n;; 1000000000000\n\
    ;; >>> (sum_digits 10000000000000)\n;; 10000000000000\n;; >>> (sum_digits 100000000000000)\n\
    ;; 100000000000000\n;; >>> (sum_digits 1000000000000000)\n;; 1000000000000000\n\
    ;; >>> (sum_digits 10000000000000000)\n;; 10000000000000000\n;; >>> (sum_digits\
    \ 100000000000000000)\n;; 100000000000000000\n;; >>> (sum_digits 1000000000000000000)\n\
    ;; 1000000000000000000\n;; >>> (sum_digits 10000000000000000000)\n;; 10000000000000000000\n\
    ;; >>> (sum_digits 100000000000000000000)\n;; 100000000000000000000\n;; >>> (sum_digits\
    \ 1000000000000000000000)\n;; 1000000000000000000000\n;; >>> (sum_digits 10000000000000000000000)\n\
    ;; 10000000000000000000000\n;; >>> (sum_digits 100000000000000000000000)\n;; 100000000000000000000000\n\
    ;; >>> (sum_digits 1000000000000000000000000)\n;; 1000000000000000000000000\n\
    ;; >>> (sum_digits 10000000000000000000000000)\n;; 10000000000000000000000000\n\
    ;; >>> (sum_digits 100", "  (define (gen-evens a b)\n    (define (gen-evens-helper\
    \ a b)\n      (cond\n        [(<= a b) (list a)]\n        [(<= a (modulo b 2))\
    \ (gen-evens-helper (modulo a 2) (modulo b 2))]\n        [else (gen-evens-helper\
    \ (modulo a 2) (modulo b 2))]))\n    (gen-evens-helper a b))\n  (gen-evens a b))\n\
    \n;; Given a positive integer n, return the sum of the even digits between\n;;\
    \ 1 and n, in ascending order.\n;; For example:\n;; >>> (sum-even-digits 5)\n\
    ;; (list 2)\n;; >>> (sum-even-digits 10)\n;; (list 2 4 6 8 10)\n;; >>> (sum-even-digits\
    \ 100)\n;; (list 2 4 6 8 10 18 26 34 38 42 46 50 54 58 62 66 70 74 78 82 86 90\
    \ 94 98)\n;; >>> (sum-even-digits 1000)\n;; (list 2 4 6 8 10 18 26 34 38 42 46\
    \ 50 54 58 62 66 70 74 78 82 86 90 94 98\n;;   1002 1004 1006 1008 1010 1012 1014\
    \ 1016 1018 1020 1022 1024 1026 1028 1030\n;;   1032 1034 1036 1038 1040 1042\
    \ 1044 1046 1050 1052 1054 1056 1058 1060 1062\n;;   1064 1066 1070 1072 1074\
    \ 1076 1078 1080 1082 1084 1086 1088 1090 1092 1094\n;;   1096 1098 1100 1102\
    \ 1104 1106 1108 1110 1112 1114 1116 1118 1120 1122 1130\n;;   1132 1134 1136\
    \ 1138 1140 1142 1144 1146 1148 1150 1152 1154 1156 1158 1160\n;;   1162 1164\
    \ 1166 1168 1170 1172 1174 1176 1178 1180 1182 1184 1186 1190 1192\n;;   1194\
    \ 1196 1198 1200 1202 1204 1206 1208 1210 1212 1214 1216 1218 1220 1222\n;;  \
    \ 1224 1226", "  (define (gen-evens a b)\n    (define (gen-evens-rec a b)\n  \
    \    (if (<= a b)\n\t(list a)\n\t(gen-evens-rec (+ a 1)))))\n  (gen-evens-rec\
    \ a b))\n", "  (let ((result (list)))\n    (for-each (lambda (i)\n           \
    \     (if (even? i)\n                    (append result (list i)))\n         \
    \       )\n              (range a b))\n    result))\n\n;; Given a positive integer\
    \ n, return the sum of the digits of n.\n;; For example:\n;; >>> (sum_digits 5)\n\
    ;; 10\n;; >>> (sum_digits 10)\n;; 10\n;; >>> (sum_digits 100)\n;; 100\n;; >>>\
    \ (sum_digits 1000)\n;; 1000\n;; >>> (sum_digits 100000)\n;; 100000\n;; >>> (sum_digits\
    \ 1000000)\n;; 1000000\n;; >>> (sum_digits 10000000)\n;; 10000000\n;; >>> (sum_digits\
    \ 100000000)\n;; 100000000\n;; >>> (sum_digits 1000000000)\n;; 1000000000\n;;\
    \ >>> (sum_digits 10000000000)\n;; 10000000000\n;; >>> (sum_digits 100000000000)\n\
    ;; 100000000000\n;; >>> (sum_digits 1000000000000)\n;; 1000000000000\n;; >>> (sum_digits\
    \ 10000000000000)\n;; 10000000000000\n;; >>> (sum_digits 100000000000000)\n;;\
    \ 100000000000000\n;; >>> (sum_digits 1000000000000000)\n;; 1000000000000000\n\
    ;; >>> (sum_digits 10000000000000000)\n;; 10000000000000000\n;; >>> (sum_digits\
    \ 100000000000000000)\n;; 100000000000000000\n;; >>> (sum_digits 1000000000000000000)\n\
    ;; 1000000000000000000\n;; >>> (sum_digits 10000000000000000000)\n;; 10000000000000000000\n\
    ;; >>> (sum_digits 100000000000000000000)\n;; 100000000000000000000\n;; >>> (sum_digits\
    \ 1000000000000000000000)\n;; 1000000000000000000000\n;; >>> (sum_digits 10000000000000000000000)\n\
    ;; 10000000000000000000000\n;; >>> (sum_digits 100000000000000000000000)\n;; 100000000000000000000000\n\
    ;; >>> (sum_digits 1000000000000000000000000)\n;; 1000000000000000000000000\n\
    ;; >>> (sum_digits 10000000000000000000000000)\n;; 10000000000000000000000000\n\
    ;; >>> (sum_digits 100000000000000000000000000)\n;; 100000000000000000000000000\n\
    ;; >>> (sum_digits 1000000000000000000000000000)\n;; 1000000000000000000000000000\n\
    ;; >>> (sum", "  (let ((result (make-vector 0 (sub1 a))))\n    (for-each (lambda\
    \ (x) (vector-set! result x)) (range a b))\n    result))\n\n;; Given a positive\
    \ integer n, return the sum of the digits of n.\n;; For example:\n;; >>> (sum-of-digits\
    \ 5)\n;; 5\n;; >>> (sum-of-digits 10)\n;; 10\n;; >>> (sum-of-digits 100)\n;; 100\n\
    ;; >>> (sum-of-digits 1000)\n;; 1000\n;; >>> (sum-of-digits 1000000)\n;; 1000000\n\
    ;; >>> (sum-of-digits 10000000)\n;; 10000000\n;; >>> (sum-of-digits 100000000)\n\
    ;; 100000000\n;; >>> (sum-of-digits 1000000000)\n;; 1000000000\n;; >>> (sum-of-digits\
    \ 10000000000)\n;; 10000000000\n;; >>> (sum-of-digits 100000000000)\n;; 100000000000\n\
    ;; >>> (sum-of-digits 1000000000000)\n;; 1000000000000\n;; >>> (sum-of-digits\
    \ 10000000000000)\n;; 10000000000000\n;; >>> (sum-of-digits 100000000000000)\n\
    ;; 100000000000000\n;; >>> (sum-of-digits 1000000000000000)\n;; 1000000000000000\n\
    ;; >>> (sum-of-digits 10000000000000000)\n;; 10000000000000000\n;; >>> (sum-of-digits\
    \ 100000000000000000)\n;; 100000000000000000\n;; >>> (sum-of-digits 1000000000000000000)\n\
    ;; 1000000000000000000\n;; >>> (sum-of-digits 10000000000000000000)\n;; 10000000000000000000\n\
    ;; >>> (sum-of-digits 100000000000000000000)\n;; 100000000000000000000\n;; >>>\
    \ (sum-of-digits 1000000000000000000000)\n;; 1000000000000000000000\n;; >>> (sum-of-digits\
    \ 10000000000000000000000)\n;; 10000000000000000000000\n;; >>> (sum-of-digits\
    \ 100000000000000000000000)\n;; 100000000000000000000000\n;; >>> (sum-of-digits\
    \ 1000000000000000000000000)\n;; 1000000000000000000000000\n;; >>> (sum-of-digits\
    \ 10000000000000000000000000)\n;; 10000000000000000000000000\n;; >>> (sum-of-digits\
    \ 100000000000000000000000000)\n;;", "  (let ((result (list)))\n    (for-each\
    \ (lambda (x)\n                (if (even? x)\n                    (append result\
    \ (list x)))\n                )\n           (range a b))\n    result))\n", " \
    \ (let ((result (list)))\n    (while (< a b)\n      (let ((i (quotient a b)))\n\
    \        (if (= i 0)\n            (append result (quotient a i))\n           \
    \ (append result (quotient a (quotient (quotient a b) 2)))\n          )\n    \
    \    )\n      )\n    (reverse result)\n    )\n)\n\n;; Given a positive integer\
    \ n, return the sum of the even digits between\n;; 1 and n, in ascending order.\n\
    ;; For example:\n;; >>> (sum_even_digits 10)\n;; 10\n;; >>> (sum_even_digits 100)\n\
    ;; 100\n;; >>> (sum_even_digits 1000)\n;; 1000\n;; >>> (sum_even_digits 10000)\n\
    ;; 10000\n;; >>> (sum_even_digits 100000)\n;; 100000\n;; >>> (sum_even_digits\
    \ 1000000)\n;; 1000000\n;; >>> (sum_even_digits 10000000)\n;; 10000000\n;; >>>\
    \ (sum_even_digits 100000000)\n;; 100000000\n;; >>> (sum_even_digits 1000000000)\n\
    ;; 1000000000\n;; >>> (sum_even_digits 10000000000)\n;; 10000000000\n;; >>> (sum_even_digits\
    \ 100000000000)\n;; 100000000000\n;; >>> (sum_even_digits 1000000000000)\n;; 1000000000000\n\
    ;; >>> (sum_even_digits 10000000000000)\n;; 10000000000000\n;; >>> (sum_even_digits\
    \ 100000000000000)\n;; 100000000000000\n;; >>> (sum_even_digits 1000000000000000)\n\
    ;; 1000000000000000\n;; >>> (sum_even_digits 10000000000000000)\n;; 10000000000000000\n\
    ;; >>> (sum_even_digits 100000000000000000)\n;; 100000000000000000\n;; >>> (sum_even_digits\
    \ 1000000000000000000)\n;; 1000000000000000000\n;; >>> (sum_even_digits 10000000000000000000)\n\
    ;; 10000000000000000000\n;; >>> (sum_even_digits 100000000000000000000)\n;; 100000000000000000000\n\
    ;; >>> (sum_even_digits 1000000000000000000000)\n;; 1000000000000000000000\n;;\
    \ >>> (sum_even_digits 10000000000000000000000)\n;; 100", "  (let ((i a))\n  \
    \  (if (<= i b)\n      (list i)\n      (generate_integers (i (+ i 1)) b))))\n\n\
    ;; Given a positive integer n, return the sum of the even digits between\n;; 1\
    \ and n, in ascending order.\n;; For example:\n;; >>> (sum_even_digits 10)\n;;\
    \ 10\n;; >>> (sum_even_digits 100)\n;; 10\n;; >>> (sum_even_digits 1000)\n;; 10\n\
    ;; >>> (sum_even_digits 10000)\n;; 10\n;; >>> (sum_even_digits 100000)\n;; 10\n\
    ;; >>> (sum_even_digits 1000000)\n;; 10\n;; >>> (sum_even_digits 10000000)\n;;\
    \ 10\n;; >>> (sum_even_digits 100000000)\n;; 10\n;; >>> (sum_even_digits 1000000000)\n\
    ;; 10\n;; >>> (sum_even_digits 10000000000)\n;; 10\n;; >>> (sum_even_digits 100000000000)\n\
    ;; 10\n;; >>> (sum_even_digits 1000000000000)\n;; 10\n;; >>> (sum_even_digits\
    \ 10000000000000)\n;; 10\n;; >>> (sum_even_digits 100000000000000)\n;; 10\n;;\
    \ >>> (sum_even_digits 1000000000000000)\n;; 10\n;; >>> (sum_even_digits 10000000000000000)\n\
    ;; 10\n;; >>> (sum_even_digits 100000000000000000)\n;; 10\n;; >>> (sum_even_digits\
    \ 1000000000000000000)\n;; 10\n;; >>> (sum_even_digits 10000000000000000000)\n\
    ;; 10\n;; >>> (sum_even_digits 100000000000000000000)\n;; 10\n;; >>> (sum_even_digits\
    \ 1000000000000000000000)\n;; 10\n;; >>> (sum_even_digits 10000000000000000000000)\n\
    ;; 10\n;; >>> (sum_even_digits 100000000000000000000000)\n;; 10\n;; >>> (sum_even_digits\
    \ 1000000000000000000000000)\n;; 10\n;; >>> (sum_even_digits 10000000000000000000000000)\n\
    ;; 10\n;; >>> (sum_even_digits 100000000000000000000000000)\n;; 10\n;; >>> (sum_even_digits\
    \ 1000000000000000000000000000", "  (let ((i a))\n    (while (< i b)\n      (let\
    \ ((j (modulo i 10)))\n        (if (= j 0)\n            (list j)\n           \
    \ (append (list j) (generate_integers (i (+ 1 j)) (i (+ 2 j))))))))\n  (generate_integers\
    \ a b))\n\n;; Given a positive integer n, return the sum of the first n even numbers.\n\
    ;; For example:\n;; >>> (sum_of_even_numbers 5)\n;; 10\n;; >>> (sum_of_even_numbers\
    \ 10)\n;; 30\n;; >>> (sum_of_even_numbers 100)\n;; 210\n;; >>> (sum_of_even_numbers\
    \ 1000)\n;; 30210\n;; >>> (sum_of_even_numbers 10000)\n;; 30210\n;; >>> (sum_of_even_numbers\
    \ 100000)\n;; 3021030210\n;; >>> (sum_of_even_numbers 1000000)\n;; 302103021030210\n\
    ;; >>> (sum_of_even_numbers 10000000)\n;; 3021030210302103021030210\n;; >>> (sum_of_even_numbers\
    \ 100000000)\n;; 30210302103021030210302103021030210\n;; >>> (sum_of_even_numbers\
    \ 1000000000)\n
  "  (if (<= a b)\n    (list)\n    (let ((i (b - a)))\n      (if (even? i)\n     \
    \   (let ((j (quotient i 2)))\n          (if (odd? j)\n            (list j)\n\
    \            (list (quotient i 2) (quotient i 2))))\n        (let ((j (quotient\
    \ i 2)))\n          (if (odd? j)\n            (list j)\n            (list (quotient\
    \ i 2) (quotient i 2)))))))\n)\n\n;; Given a positive integer n, return the sum\
    \ of the even digits between\n;; 1 and n, in ascending order. For example:\n;;\
    \ >>> (sum_even_digits 10)\n;; 10\n;; >>> (sum_even_digits 100)\n;; 100\n;; >>>\
    \ (sum_even_digits 1000)\n;; 1000\n;; >>> (sum_even_digits 10000)\n;; 10000\n\
    ;; >>> (sum_even_digits 100000)\n;; 100000\n;; >>> (sum_even_digits 1000000)\n\
    ;; 1000000\n;; >>> (sum_even_digits 10000000)\n;; 10000000\n;; >>> (sum_even_digits\
    \ 100000000)\n;; 100000000\n;; >>> (sum_even_digits 1000000000)\n;; 1000000000\n\
    ;; >>> (sum_even_digits 10000000000)\n;; 10000000000\n;; >>> (sum_even_digits\
    \ 100000000000)\n;; 100000000000\n;; >>> (sum_even_digits 1000000000000)\n;; 1000000000000\n\
    ;; >>> (sum_even_digits 10000000000000)\n;; 10000000000000\n;; >>> (sum_even_digits\
    \ 100000000000000)\n;; 100000000000000\n;; >>> (sum_even_digits 1000000000000000)\n\
    ;; 1000000000000000\n;; >>> (sum_even_digits 10000000000000000)\n;; 10000000000000000\n\
    ;; >>> (sum_even_digits 100000000000000000)\n;; 100000000000000000\n;; >>> (sum_even_digits\
    \ 1000000000000000000)\n;; 1000000000000000000\n;; >>> (sum_even_digits 10000000000000000000)\n\
    ;; 10000000000000000000\n;; >>> (sum_even_digits 100000000000000000000)\n;; 100000000000000000000\n\
    ;;", "  (cond ((<= a b) (list))\n        ((= a 0) (list))\n        ((<= a b)\n\
    \          (let ((n (modulo a 10)))\n            (if (zero? n)\n             \
    \   (list)\n                (cons (modulo (add n 10) 10)\n                   \
    \  (generate_integers (sub n 10) (sub b 10)))))))\n)\n\n;; Given a positive integer\
    \ n, return the sum of the even digits between\n;; 1 and n, in ascending order.\n\
    ;; For example:\n;; >>> (sum_even_digits 10)\n;; (list 2 4 6 8 10)\n;; >>> (sum_even_digits\
    \ 0)\n;; (list )", "  (let ((n (if (zero? a) (zero? b) (abs a) (abs b))))\n  \
    \  (if (zero? n)\n      (list)\n      (let ((i 0))\n        (while (< i n)\n \
    \         (let ((digit (modulo n i)))\n            (if (even? digit)\n       \
    \       (list digit)\n              (append (list digit) (generate_integers (i\
    \ + 1) (n - 1))))\n            (set! i (i + 1)))\n          )\n        )\n   \
    \   )\n    )\n  )\n)\n", "  (cond\n    [(<= a b) (list)]\n    [(<= a 0) (list\
    \ 0)]\n    [(<= b 0) (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n   \
    \ [(< a b) (cons (modulo a 2) (generate_integers (add a 1) (sub b 1)))]\n    [(<\
    \ a 0) (cons 0 (generate_integers (add a 1) (sub b 1)))]\n    [(< b 0) (cons 0\
    \ (generate_integers (add a 1) (sub b 1)))]\n    [else (cons (modulo a 2) (generate_integers\
    \ (add a 1) (sub b 1)))]\n  )\n)\n\n;; Given a positive integer n, return the\
    \ sum of the first n even\n;; digits of the Fibonacci sequence.\n;; For example:\n\
    ;; >>> (fibonacci_sum 5)\n;; 13\n;; >>> (fibonacci_sum 10)\n;; 55\n;; >>> (fibonacci_sum\
    \ 20)\n;; 1385\n;; >>> (fibonacci_sum 30)\n;; 5040\n;; >>> (fibonacci_sum 40)\n\
    ;; 24883\n;; >>> (fibonacci_sum 50)\n;; 12586269025\n;; >>> (fibonacci_sum 60)\n\
    ;; 144115188075\n;; >>> (fibonacci_sum 70)\n;; 12586269025\n;; >>> (fibonacci_sum\
    \ 80)\n;; 144115188075\n;; >>> (fibonacci_sum 90)\n;; 12586269025\n;; >>> (fibonacci_sum\
    \ 100)\n;; 144115188075\n;; >>> (fibonacci_sum 110)\n;; 12586269025\n;; >>> (fibonacci_sum\
    \ 120)\n;; 144115188075\n;; >>> (fibonacci_sum 130)\n;; 12586269025\n;; >>> (fibonacci_sum\
    \ 140)\n;; 144115188075\n;; >>> (fibonacci_sum 150)\n;; 12586269025\n;; >>> (fibonacci",
  "  (let ((i a))\n    (if (<= i b)\n      (list i)\n      (generate_integers (i +\
    \ 1) b))))\n\n;; Given a positive integer n, return the sum of the even digits\
    \ between\n;; 1 and n, in ascending order.\n;; For example:\n;; >>> (sum_of_even_digits\
    \ 2)\n;; 2\n;; >>> (sum_of_even_digits 10)\n;; 22\n;; >>> (sum_of_even_digits\
    \ 100)\n;; 222\n;; >>> (sum_of_even_digits 1000)\n;; 2222\n;; >>> (sum_of_even_digits\
    \ 10000)\n;; 22222\n;; >>> (sum_of_even_digits 100000)\n;; 222222\n;; >>> (sum_of_even_digits\
    \ 1000000)\n;; 2222222\n;; >>> (sum_of_even_digits 10000000)\n;; 22222222\n;;\
    \ >>> (sum_of_even_digits 100000000)\n;; 222222222\n;; >>> (sum_of_even_digits\
    \ 1000000000)\n;; 2222222222\n;; >>> (sum_of_even_digits 10000000000)\n;; 22222222222\n\
    ;; >>> (sum_of_even_digits 100000000000)\n;; 222222222222\n;; >>> (sum_of_even_digits\
    \ 1000000000000)\n;; 2222222222222\n;; >>> (sum_of_even_digits 10000000000000)\n\
    ;; 22222222222222\n;; >>> (sum_of_even_digits 100000000000000)\n;; 222222222222222\n\
    ;; >>> (sum_of_even_digits 1000000000000000)\n;; 222222222222222\n;; >>> (sum_of_even_digits\
    \ 10000000000000000)\n;; 222222222222222\n;; >>> (sum_of_even_digits 100000000000000000)\n\
    ;; 222222222222222\n;; >>> (sum_of_even_digits 1000000000000000000)\n;; 222222222222222\n\
    ;; >>> (sum_of_even_digits 10000000000000000000)\n;; 222222222222222\n;; >>> (sum_of_even_digits",
  "  (define (gen-even-digits a b)\n    (define (gen-even-digits-helper a b)\n   \
    \   (cond\n        [(<= a b) (list a)]\n        [(<= a (modulo b 2)) (gen-even-digits-helper\
    \ (add a 1) (sub b 1))]\n        [else (gen-even-digits-helper a (sub b 1))]))\n\
    \    (gen-even-digits-helper a b))\n  (gen-even-digits a b))\n\n;; Given a positive\
    \ integer n, return the sum of the digits of n.\n;; For example:\n;; >>> (sum-of-digits\
    \ 5)\n;; 5\n;; >>> (sum-of-digits 10)\n;; 10\n;; >>> (sum-of-digits 100)\n;; 100\n\
    ;; >>> (sum-of-digits 1000)\n;; 1000\n;; >>> (sum-of-digits 100000)\n;; 100000\n\
    ;; >>> (sum-of-digits 1000000)\n;; 1000000\n;; >>> (sum-of-digits 10000000)\n\
    ;; 10000000\n;; >>> (sum-of-digits 100000000)\n;; 100000000\n;; >>> (sum-of-digits\
    \ 1000000000)\n;; 1000000000\n;; >>> (sum-of-digits 10000000000)\n;; 10000000000\n\
    ;; >>> (sum-of-digits 100000000000)\n;; 100000000000\n;; >>> (sum-of-digits 1000000000000)\n\
    ;; 1000000000000\n;; >>> (sum-of-digits 10000000000000)\n;; 10000000000000\n;;\
    \ >>> (sum-of-digits 100000000000000)\n;; 100000000000000\n;; >>> (sum-of-digits\
    \ 1000000000000000)\n;; 1000000000000000\n;; >>> (sum-of-digits 10000000000000000)\n\
    ;; 10000000000000000\n;; >>> (sum-of-digits 100000000000000000)\n;; 100000000000000000\n\
    ;; >>> (sum-of-digits 1000000000000000000)\n;; 1000000000000000000\n;; >>> (sum-of-digits\
    \ 10000000000000000000)\n;; 10000000000000000000\n;; >>> (sum-of-digits 100000000000000000000)\n\
    ;; 100000000000000000000\n;; >>> (sum-of", "  (define (gen-range a b)\n    (cond\
    \ ((<= a b) (list))\n        ((= a b) (list))\n        ((< a 0) (list))\n    \
    \    ((= a 0) (list))\n        ((< b 0) (list))\n        ((= b 0) (list))\n  \
    \      ((<= a b) (list))\n        ((< a b) (list))\n        ((<= a b) (list))\n\
    \        ((<= a b) (list))\n        ((<= a b) (list))\n        ((<= a b) (list))\n\
    \        ((<= a b) (list))\n        ((<= a b) (list))\n        ((<= a b) (list))\n\
    \        ((<= a b) (list))\n        ((<= a b) (list))\n        ((<= a b) (list))\n\
    \        ((<= a b) (list))\n        ((<= a b) (list))\n        ((<= a b) (list))\n\
    \        ((<= a b) (list))\n        ((<= a b) (list))\n        ((<= a b) (list))\n\
    \        ((<= a b) (list))\n        ((<= a b) (list))\n        ((<= a b) (list))\n\
    \        ((<= a b) (list))\n        ((<= a b) (list))\n        ((<= a b) (list))\n\
    \        ((<= a b) (list))\n        ((<= a b) (list))\n        ((<= a b) (list))\n\
    \        ((<= a b) (list))\n        ((<= a b) (list))\n        ((<= a b) (list))\n\
    \        ((<= a b) (list))\n        ((<= a b) (list))\n        ((<= a b) (list))\n\
    \        ((<= a b) (list))\n        ((<= a b) (list))\n        ((<= a b) (list))\n\
    \        ((<= a b) (list))\n        ((<= a b) (list))\n        ((<= a b) (list))\n\
    \        ((<= a b) (list))", "  (let ((n (if (zero? a) 1 (sub1 a))))\n    (let\
    \ ((i 0))\n      (while (< i n)\n        (let ((digit (modulo (remainder (remainder\
    \ (remainder i a) b) 10))))\n          (if (even? digit)\n              (list\
    \ digit)\n              (let ((next i (add1 i)))\n                (if (zero? next)\n\
    \                    (list)\n                    (generate_integers next (sub1\
    \ next))))))))))\n", "  (if (<= a b)\n    (list)\n    (let ((n (div a 2)))\n \
    \     (if (<= n b)\n        (list (mod a 2))\n        (generate_integers (add\
    \ a n) (sub1 n)))))\n)\n\n;; Given a positive integer n, return the sum of the\
    \ even digits between\n;; 1 and n, in ascending order.\n;; For example:\n;; >>>\
    \ (sum_of_even_digits 10)\n;; 10\n;; >>> (sum_of_even_digits 100)\n;; 10\n;; >>>\
    \ (sum_of_even_digits 1000)\n;; 10\n;; >>> (sum_of_even_digits 10000)\n;; 10\n\
    ;; >>> (sum_of_even_digits 100000)\n;; 10\n;; >>> (sum_of_even_digits 1000000)\n\
    ;; 10\n;; >>> (sum_of_even_digits 10000000)\n;; 10\n;; >>> (sum_of_even_digits\
    \ 100000000)\n;; 10\n;; >>> (sum_of_even_digits 1000000000)\n;; 10\n;; >>> (sum_of_even_digits\
    \ 10000000000)\n;; 10\n;; >>> (sum_of_even_digits 100000000000)\n;; 10\n;; >>>\
    \ (sum_of_even_digits 1000000000000)\n;; 10\n;; >>> (sum_of_even_digits 10000000000000)\n\
    ;; 10\n;; >>> (sum_of_even_digits 100000000000000)\n;; 10\n;; >>> (sum_of_even_digits\
    \ 1000000000000000)\n;; 10\n;; >>> (sum_of_even_digits 10000000000000000)\n;;\
    \ 10\n;; >>> (sum_of_even_digits 100000000000000000)\n;; 10\n;; >>> (sum_of_even_digits\
    \ 1000000000000000000)\n;; 10\n;; >>> (sum_of_even_digits 10000000000000000000)\n\
    ;; 10\n;; >>> (sum_of_even_digits 100000000000000000000)\n;; 10\n;; >>> (sum_of_even_digits\
    \ 1000000000000000000000)\n;; 10\n;; >>> (sum_of_even_digits 10000000000000000000000)\n\
    ;; 10\n;; >>> (sum_of_even_digits 100", "  (if (<= a b)\n    (list)\n    (let\
    \ ((n (div a 10)))\n      (let ((i 0))\n        (while (<= i n)\n          (let\
    \ ((digit (modulo (remainder a i) 10)))\n            (if (= digit 0)\n       \
    \       (list digit)\n              (append (list digit) (generate_integers (add\
    \ i 1) (add n 1))))\n            (setq i (add i 1)))))))\n)\n\n;; Given a positive\
    \ integer n, return the sum of the digits of n.\n;; For example:\n;; >>> (sum_digits\
    \ 5)\n;; 5\n;; >>> (sum_digits 10)\n;; 10\n;; >>> (sum_digits 100)\n;; 100\n;;\
    \ >>> (sum_digits 1000)\n;; 1000\n;; >>> (sum_digits 10000)\n;; 10001\n;; >>>\
    \ (sum_digits 100000)\n;; 100001\n;; >>> (sum_digits 1000000)\n;; 1000001\n;;\
    \ >>> (sum_digits 10000000)\n;; 10000001\n;; >>> (sum_digits 100000000)\n;; 100000001\n\
    ;; >>> (sum_digits 1000000000)\n;; 1000000001\n;; >>> (sum_digits 10000000000)\n\
    ;; 10000000001\n;; >>> (sum_digits 100000000000)\n;; 100000000001\n;; >>> (sum_digits\
    \ 1000000000000)\n;; 1000000000001\n;; >>> (sum_digits 10000000000000)\n;; 10000000000001\n\
    ;; >>> (sum_digits 100000000000000)\n;; 100000000000001\n;; >>> (sum_digits 1000000000000000)\n\
    ;; 1000000000000001\n;; >>> (sum_digits 10000000000000000)\n;; 10000000000000001\n\
    ;; >>> (sum_digits 100000000000000000)\n;; 100000000000000001\n;; >>> (sum_digits\
    \ 1000000000000000000)\n;; 1000000000000000001\n;; >>> (sum_digits 10000000000000000000)\n\
    ;; 1000000000000000001\n;; >>> (sum_digits 100000000000000000000)\n;; 1000000000000000001\n\
    ;; >>> (sum_digits 1000000000000000000000)\n;; 1000000000000000001\n;; >>> (sum_digits\
    \ 10000000000000000000000)\n;; 1000000000000000001\n;; >>> (sum_", "  (let ((result\
    \ (make-vector 0 (b - a))))\n    (let ((i (a)))\n      (while (< i b)\n\t(setq\
    \ result (append result (modulo i 10)))\n\t(setq i (add1 i)))\n      result))\n\
    \  result)\n\n;; Given a positive integer n, return the sum of the even digits\
    \ between\n;; 1 and n, in ascending order.\n;; For example:\n;; >>> (sum_of_even_digits\
    \ 10)\n;; 10\n;; >>> (sum_of_even_digits 100)\n;; 10\n;; >>> (sum_of_even_digits\
    \ 1000)\n;; 10\n;; >>> (sum_of_even_digits 1001)\n;; 11\n;; >>> (sum_of_even_digits\
    \ 1000000)\n;; 10\n;; >>> (sum_of_even_digits 1000001)\n;; 11\n;; >>> (sum_of_even_digits\
    \ 10000000)\n;; 10\n;; >>> (sum_of_even_digits 10000001)\n;; 11\n;; >>> (sum_of_even_digits\
    \ 100000000)\n;; 10\n;; >>> (sum_of_even_digits 100000001)\n;; 11\n;; >>> (sum_of_even_digits\
    \ 10000000000)\n;; 10\n;; >>> (sum_of_even_digits 1000000001)\n;; 11\n;; >>> (sum_of_even_digits\
    \ 100000000001)\n;; 11\n;; >>> (sum_of_even_digits 1000000000000)\n;; 10\n;; >>>\
    \ (sum_of_even_digits 1000000000001)\n;; 11\n;; >>> (sum_of_even_digits 100000000000000)\n\
    ;; 10\n;; >>> (sum_of_even_digits 100000000000001)\n;; 11\n;; >>> (sum_of_even_digits\
    \ 1000000000000000)\n;; 10\n;; >>> (sum_of_even_digits 1000000000000001)\n;; 11\n\
    ;; >>> (sum_of_even_digits 10000000000000000)\n;; 10\n;; >>> (sum_of_even_digits\
    \ 10000000000000001)\n;; 11\n;; >>> (sum_of_even_digits 100000000000000000)\n\
    ;; 10\n;; >>> (sum_", "  (if (<= a b)\n    (list)\n    (let ((n (modulo a b)))\n\
    \      (if (= n 0)\n        (list)\n        (cons (modulo (/ n 10))\n        \
    \  (generate_integers (modulo (+ n 1)) (modulo (+ n 2))))))))\n", "  (let ((n\
    \ (if (zero? a) (zero? b) (min a b))))\n    (if (zero? n)\n      (list)\n    \
    \  (let ((i (zero? n)))\n        (while (< i n)\n          (let ((digit (modulo\
    \ n i)))\n            (if (even? digit)\n              (list digit)\n        \
    \      (let ((next (modulo n (add1 i))))\n                (generate_integers (add1\
    \ i) next)))))))))\n", "  (let ((result (make-vector 0 (sub1 a))))\n    (let ((i\
    \ a))\n      (while (< i b)\n        (set! result (append result (modulo i 10)))\n\
    \        (set! i (add1 i)))))\n  result)\n", "  (let ((result (list)))\n    (for-each\
    \ (lambda (i)\n                (if (even? i)\n                    (append result\
    \ i)\n                    ()))\n      (range a b)))\n  result)\n", "  (define\
    \ (gen-even-digits a b)\n    (define (gen-even-digit a b)\n      (if (even? a)\n\
    \        (gen-even-digit (+ a (modulo b 10)))\n      (gen-even-digit a b)))\n\
    \    (gen-even-digit a b))\n  (gen-even-digits a b))\n\n;; Given a positive integer\
    \ n, return the sum of the even digits between\n;; 1 and n, in ascending order.\n\
    ;; For example:\n;; >>> (sum-even-digits 10)\n;; 10\n;; >>> (sum-even-digits 100)\n\
    ;; 10\n;; >>> (sum-even-digits 1000)\n;; 10\n;; >>> (sum-even-digits 1001)\n;;\
    \ 11\n;; >>> (sum-even-digits 10001)\n;; 11\n;; >>> (sum-even-digits 100001)\n\
    ;; 11\n;; >>> (sum-even-digits 1000001)\n;; 12\n;; >>> (sum-even-digits 10000001)\n\
    ;; 12\n;; >>> (sum-even-digits 100000001)\n;; 12\n;; >>> (sum-even-digits 1000000001)\n\
    ;; 12\n;; >>> (sum-even-digits 10000000001)\n;; 12\n;; >>> (sum-even-digits 100000000001)\n\
    ;; 12\n;; >>> (sum-even-digits 1000000000001)\n;; 12\n;; >>> (sum-even-digits\
    \ 10000000000001)\n;; 12\n;; >>> (sum-even-digits 100000000000001)\n;; 12\n;;\
    \ >>> (sum-even-digits 1000000000000001)\n;; 12\n;; >>> (sum-even-digits 10000000000000001)\n\
    ;; 12\n;; >>> (sum-even-digits 100000000000000001)\n;; 12\n;; >>> (sum-even-digits\
    \ 1000000000000000001)\n;; 12\n;; >>> (sum-even-digits 1000000000000000001)\n\
    ;; 12\n;; >>> (sum-even-digits 1000000000000000001)\n;; 12\n;; >>> (sum-even-digits\
    \ 1000000000000000001)\n;; 12\n;; >>> (sum-even-digits 1000000000000000001)\n\
    ;; 12\n;; >>> (sum-", "  (cond\n    [(<= a b) (list)]\n    [(<= a 0) (list 0)]\n\
    \    [(<= b 0) (list)]\n    [(>= a b) (list)]\n    [(>= a 0) (list)]\n    [(>=\
    \ b 0) (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n\
    \    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0)\
    \ (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0) (list)]\n\
    \    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0) (list)]\n    [(= b 0)\
    \ (list)]\n    [(= a b) (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n\
    \    [(= a b) (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b)\
    \ (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n\
    \    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0)\
    \ (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0) (list)]\n\
    \    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0) (list)]\n    [(= b 0)\
    \ (list)]\n    [(= a b) (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n\
    \    [(= a b) (list)]\n    [(= a 0", "  (cond\n    [(<= a b) (list)]\n    [(<=\
    \ a 0) (list 0)]\n    [(<= b 0) (list)]\n    [(>= a b) (list)]\n    [(>= a 0)\
    \ (list)]\n    [(>= b 0) (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n\
    \    [(= a b) (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b)\
    \ (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n\
    \    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0)\
    \ (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0) (list)]\n\
    \    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0) (list)]\n    [(= b 0)\
    \ (list)]\n    [(= a b) (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n\
    \    [(= a b) (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b)\
    \ (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n\
    \    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0)\
    \ (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0) (list)]\n\
    \    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0", "  (cond\n    [(<=\
    \ a b) (list)]\n    [(<= a 0) (list 0)]\n    [(<= b 0) (list)]\n    [(= a 0) (list)]\n\
    \    [(= b 0) (list)]\n    [(< a b) (list)]\n    [(< a 0) (list 0)]\n    [(< b\
    \ 0) (list)]\n    [(= a b) (list)]\n    [(= b 0) (list)]\n    [(< a 0) (list)]\n\
    \    [(< b 0) (list 0)]\n    [else (let* ([i (modulo a b)])\n      (if (> i 0)\n\
    \        (list (modulo (- i 2) b) (modulo (- i 2) b) (modulo (- i 2) b) (modulo\
    \ (- i 2) b) (modulo (- i 2) b) (modulo (- i 2) b) (modulo (- i 2) b) (modulo\
    \ (- i 2) b) (modulo (- i 2) b) (modulo (- i 2) b) (modulo (- i 2) b) (modulo\
    \ (- i 2) b) (modulo (- i 2) b) (modulo (- i 2) b) (modulo (- i 2) b) (modulo\
    \ (- i 2) b) (modulo (- i 2) b) (modulo (- i 2) b) (modulo (- i 2) b) (modulo\
    \ (- i 2) b) (modulo (- i 2) b) (modulo (- i 2) b) (modulo (- i 2) b) (modulo\
    \ (- i 2) b) (modulo (- i 2) b) (modulo (- i 2) b) (modulo (- i 2) b) (modulo\
    \ (- i 2) b) (modulo (- i 2) b) (modulo (- i 2) b) (modulo (- i 2) b) (modulo\
    \ (- i 2) b) (modulo (- i 2) b) (modulo (- i 2) b) (modulo (- i 2) b) (modulo\
    \ (- i 2) b) (modulo (- i 2) b) (modulo (- i 2) b) (", "  (if (<= a b)\n    (list)\n\
    \    (let ((n (modulo a b)))\n      (if (even? n)\n        (append (list n) (generate_integers\
    \ (a - 1) (b - 1)))\n        (generate_integers (a - 1) (b - 1)))))\n)\n", " \
    \ (define (gen-range a b)\n    (if (<= a b)\n      (list a)\n      (gen-range\
    \ (+ a 1) b)))\n  (gen-range a b))\n\n;; Given a positive integer n, return the\
    \ sum of the digits of n,\n;; starting with the rightmost digit and moving left.\n\
    ;; For example:\n;; >>> (sum-digits 5)\n;; 5\n;; >>> (sum-digits 10)\n;; 10\n\
    ;; >>> (sum-digits 123)\n;; 123\n;; >>> (sum-digits 987)\n;; 987\n;; >>> (sum-digits\
    \ 0)\n;; 0\n;; >>> (sum-digits -1)\n;; 0\n;; >>> (sum-digits -10)\n;; -10\n;;\
    \ >>> (sum-digits -123)\n;; -123\n;; >>> (sum-digits -987)\n;; -987\n;; >>> (sum-digits\
    \ -100)\n;; -100\n;; >>> (sum-digits -0)\n;; 0\n;; >>> (sum-digits -1)\n;; 0\n\
    ;; >>> (sum-digits -10)\n;; -10\n;; >>> (sum-digits -123)\n;; -123\n;; >>> (sum-digits\
    \ -987)\n;; -987\n;; >>> (sum-digits -100)\n;; -100\n;; >>> (sum-digits -0)\n\
    ;; 0\n;; >>> (sum-digits -1)\n;; 0\n;; >>> (sum-digits -10)\n;; -10\n;; >>> (sum-digits\
    \ -123)\n;; -123\n;; >>> (sum-digits -987)\n;; -987\n;; >>> (sum-digits -100)\n\
    ;; -100\n;; >>> (sum-digits -0)\n;; 0\n;; >>> (sum-digits -1)\n;; 0\n;; >>> (sum-digits\
    \ -10)\n;; -10\n;; >>> (sum-digits -123)\n;; -123\n;; >>> (sum-digits -987)\n\
    ;; -987\n;; >>> (sum-digits -100)\n;; -100\n;; >>> (sum-digits -0)\n;; 0\n;; >>>\
    \ (sum-digits -1)\n", "  (cond ((<= a b) (list))\n        ((= a 0) (list))\n \
    \       ((<= a b)\n          (let ((n (div a 2)))\n            (cons (modulo a\
    \ 2) (generate_integers (sub1 n) (sub1 n))))))\n  (generate_integers a b))\n\n\
    ;; Given a positive integer n, return the sum of the even digits between\n;; 1\
    \ and n, in ascending order.\n;; For example:\n;; >>> (sum_even_digits 2)\n;;\
    \ 2\n;; >>> (sum_even_digits 10)\n;; 22\n;; >>> (sum_even_digits 100)\n;; 222\n\
    ;; >>> (sum_even_digits 1000)\n;; 3222\n;; >>> (sum_even_digits 10000)\n;; 33222\n\
    ;; >>> (sum_even_digits 100000)\n;; 333222\n;; >>> (sum_even_digits 1000000)\n\
    ;; 33333222\n;; >>> (sum_even_digits 10000000)\n;; 3333333222\n;; >>> (sum_even_digits\
    \ 100000000)\n;; 333333333222\n;; >>> (sum_even_digits 1000000000)\n;; 33333333333222\n\
    ;; >>> (sum_even_digits 10000000000)\n;; 333333333333333222\n;; >>> (sum_even_digits\
    \ 100000000000)\n;; 3333333333333333333222\n;; >>> (sum_even_digits 1000000000000)\n\
    ;; 33333333333333333333333222\n;; >>> (sum_even_digits 10000000000000)\n;; 333333333333333333333333333222\n\
    ;; >>> (sum_even_digits 100000000000000)\n;; 3333333333333333333333333333333222\n\
    ;; >>> (sum_even_digits 1000000000000000)\n;; 33333333333333333333333333333333333222\n\
    ;; >>> (sum_even_digits 10000000000000000)\n;; 333333333333333333333333333333333333333222\n\
    ;; >>> (sum_even_digits 100000000000000000)\n;; 3333333333333333333333333333333333333333333222\n\
    ;; >>> (sum_even_digits 1000000000000000000)\n;; 333333333333333333333333333333333333333333333333333222\n\
    ;; >>> (sum_even_", "  (let ((result (list)))\n    (for-each (lambda (x) (result\
    \ (cons x (car x)))) (range a b)))\n  result)\n\n;; Given a positive integer n,\
    \ return the sum of the even digits between\n;; 1 and n. For example:\n;; >>>\
    \ (sum_even_digits 10)\n;; 10\n;; >>> (sum_even_digits 100)\n;; 10\n;; >>> (sum_even_digits\
    \ 1000)\n;; 10\n;; >>> (sum_even_digits 100000)\n;; 10\n;; >>> (sum_even_digits\
    \ 1000000)\n;; 10\n;; >>> (sum_even_digits 10000000)\n;; 10\n;; >>> (sum_even_digits\
    \ 100000000)\n;; 10\n;; >>> (sum_even_digits 1000000000)\n;; 10\n;; >>> (sum_even_digits\
    \ 10000000000)\n;; 10\n;; >>> (sum_even_digits 100000000000)\n;; 10\n;; >>> (sum_even_digits\
    \ 1000000000000)\n;; 10\n;; >>> (sum_even_digits 10000000000000)\n;; 10\n;; >>>\
    \ (sum_even_digits 100000000000000)\n;; 10\n;; >>> (sum_even_digits 1000000000000000)\n\
    ;; 10\n;; >>> (sum_even_digits 10000000000000000)\n;; 10\n;; >>> (sum_even_digits\
    \ 100000000000000000)\n;; 10\n;; >>> (sum_even_digits 1000000000000000000)\n;;\
    \ 10\n;; >>> (sum_even_digits 10000000000000000000)\n;; 10\n;; >>> (sum_even_digits\
    \ 100000000000000000000)\n;; 10\n;; >>> (sum_even_digits 1000000000000000000000)\n\
    ;; 10\n;; >>> (sum_even_digits 10000000000000000000000)\n;; 10\n;; >>> (sum_even_digits\
    \ 100000000000000000000000)\n;; 10\n;; >>> (sum_even_digits 1000000000000000000000000)\n\
    ;; 10\n;; >>> (sum_even_digits 10000000000000000000000000)\n;; 10\n;; >>> (sum_even_digits\
    \ 100000000000000000000000000)\n;; 10\n;; >>> (sum_even_digits 1000000000000000000000000000)\n\
    ;; 10\n;; >>> (sum_even_digits 10000000000000000000000000000)\n;; 10", "  (let\
    \ ((i a))\n    (while (< i b)\n      (let ((digit (modulo i 10)))\n        (if\
    \ (= digit 0)\n            (list digit)\n            (append (list digit) (generate_integers\
    \ (i (+ i 1)) (i (- i 1))))))))\n  (generate_integers a b))\n\n;; Given a positive\
    \ integer n, return the sum of the first n even\n;; digits of the Fibonacci sequence.\n\
    ;; For example:\n;; >>> (fibonacci_sum 5)\n;; 13\n;; >>> (fibonacci_sum 10)\n\
    ;; 55\n;; >>> (fibonacci_sum 20)\n;; 1385\n;; >>> (fibonacci_sum 100)\n;; 354224848179261915075\n\
    ;; >>> (fibonacci_sum 1000)\n;; 354224848179261915075\n;; >>> (fibonacci_sum 10000)\n\
    ;; 138535399515708994511\n;; >>> (fibonacci_sum 100000)\n;; 354224848179261915075\n\
    ;; >>> (fibonacci_sum 1000000)\n;; 138535399515708994511\n;; >>> (fibonacci_sum\
    \ 10000000)\n;; 354224848179261915075\n;; >>> (fibonacci_sum 100000000)\n;; 138535399515708994511\n\
    ;; >>> (fibonacci_sum 1000000000)\n;; 354224848179261915075\n;; >>> (fibonacci_sum\
    \ 10000000000)\n;; 138535399515708994511\n;; >>> (fibonacci_sum 100000000000)\n\
    ;; 354224848179261915075\n;; >>> (fibonacci_sum 1000000000000)\n;; 138535399515708994511\n\
    ;; >>> (fibonacci_sum 10000000000000)\n;; 354224848179261915075\n;; >>> (fibonacci_sum\
    \ 100000000000000)\n;; 138535399515708994511\n;; >>> (fibonacci_sum 1000000000000000)\n\
    ;; 354224848179261915075\n;; >>> (fibonacci_sum 10000000000000000)\n;; 13", " \
    \ (if (zero? a)\n    (list)\n    (let ((n (quotient a b)))\n      (if (zero? n)\n\
    \        (list)\n        (let ((i (quotient n 2)))\n          (if (zero? i)\n\
    \            (list)\n            (let ((j (quotient i 2)))\n              (if\
    \ (zero? j)\n                (list)\n                (let ((k (quotient j 2)))\n\
    \                  (if (zero? k)\n                    (list)\n               \
    \     (let ((l (quotient k 2)))\n                      (list (cons a (cons b (cons\
    \ (cons i (cons j (cons k (cons l))))))))))))))))))))))\n", "  (let ((n (div a\
    \ b)))\n    (if (< n 0)\n      (list)\n      (let ((i 0))\n        (while (< i\
    \ n)\n          (let ((digit (modulo (remainder (remainder (remainder i a) b)\
    \ 10))))\n            (if (= digit 0)\n              (list digit)\n          \
    \    (append (list digit) (generate_integers (remainder i a) (remainder i b))))\n\
    \            (setq i (add1 i)))\n          (setq i (add1 i)))))))\n\n;; Given\
    \ a positive integer n, return the sum of the digits of n.\n;; For example:\n\
    ;; >>> (sum_of_digits 5)\n;; 5\n;; >>> (sum_of_digits)\n;; 0\n;; >>> (sum_of_digits\
    \ 10)\n;; 10\n;; >>> (sum_of_digits 100)\n;; 100\n;; >>> (sum_of_digits 1000)\n\
    ;; 1000\n;; >>> (sum_of_digits 1001)\n;; 1001\n;; >>> (sum_of_digits 10001)\n\
    ;; 10001\n;; >>> (sum_of_digits 100001)\n;; 100001\n;; >>> (sum_of_digits 1000001)\n\
    ;; 1000001\n;; >>> (sum_of_digits 10000001)\n;; 10000001\n;; >>> (sum_of_digits\
    \ 100000001)\n;; 100000001\n;; >>> (sum_of_digits 1000000001)\n;; 1000000001\n\
    ;; >>> (sum_of_digits 10000000001)\n;; 10000000001\n;; >>> (sum_of_digits 100000000001)\n\
    ;; 100000000001\n;; >>> (sum_of_digits 1000000000001)\n;; 1000000000001\n;; >>>\
    \ (sum_of_digits 10000000000001)\n;; 10000000000001\n;; >>> (sum_of_digits 100000000000001)\n\
    ;; 100000000000001\n;; >>> (sum_of_digits 1000000000000001)\n;; 1000000000000001\n\
    ;; >>> (sum_of_digits 10000000000000001)\n;; 10000000000000001\n;; >>> (sum_of_digits\
    \ 100000000000000001)\n;; 100000000000000001", "  (define (generate-integers a\
    \ b)\n    (define (generate-digit d)\n      (if (< d a)\n        (generate-integers\
    \ a (sub1 d))\n        (generate-integers (sub1 d) b)))\n    (generate-digit 0)\n\
    \  )\n)\n\n;; Given a positive integer n, return the number of ways to write it\
    \ as a\n;; sum of two positive integers, where the second integer is at most b.\n\
    ;; For example:\n;; >>> (count_ways_to_write_as_sum 2 4)\n;; 2\n;; >>> (count_ways_to_write_as_sum\
    \ 2 5)\n;; 0\n;; >>> (count_ways_to_write_as_sum 2 6)\n;; 1\n;; >>> (count_ways_to_write_as_sum\
    \ 2 7)\n;; 2\n;; >>> (count_ways_to_write_as_sum 2 8)\n;; 2\n;; >>> (count_ways_to_write_as_sum\
    \ 2 9)\n;; 2\n;; >>> (count_ways_to_write_as_sum 2 10)\n;; 2\n;; >>> (count_ways_to_write_as_sum\
    \ 2 11)\n;; 2\n;; >>> (count_ways_to_write_as_sum 2 12)\n;; 2\n;; >>> (count_ways_to_write_as_sum\
    \ 2 13)\n;; 2\n;; >>> (count_ways_to_write_as_sum 2 14)\n;; 2\n;; >>> (count_ways_to_write_as_sum\
    \ 2 15)\n;; 2\n;; >>> (count_ways_to_write_as_sum 2 16)\n;; 2\n;; >>> (count_ways_to_write_as_sum\
    \ 2 17)\n;; 2\n;; >>> (count_ways_to_write_as_sum 2 18)\n;; 2\n;; >>> (count_ways_to_write_as_sum\
    \ 2 19)\n;; 2\n;; >>> (count_ways_to_write_as_sum 2 20)\n;; 2\n;; >>> (count_ways_to_write_as_sum\
    \ 2 21)\n;; 2\n;; >>> (count_ways_to_write_as_sum 2 22)\n", "  (cond\n    [(<=\
    \ a b) (list)]\n    [(<= a 0) (list 0)]\n    [(<= b 0) (list)]\n    [(<= a b)\
    \ (list)]\n    [(<= a 0) (list 0)]\n    [(<= b 0) (list)]\n    [(<= a b) (list)]\n\
    \    [(<= a 0) (list 0)]\n    [(<= b 0) (list 0)]\n    [(<= a b) (list)]\n   \
    \ [(<= a 0) (list 0)]\n    [(<= b 0) (list 0)]\n    [(<= a b) (list)]\n    [(<=\
    \ a 0) (list 0)]\n    [(<= b 0) (list 0)]\n    [(<= a b) (list)]\n    [(<= a 0)\
    \ (list 0)]\n    [(<= b 0) (list 0)]\n    [(<= a b) (list)]\n    [(<= a 0) (list\
    \ 0)]\n    [(<= b 0) (list 0)]\n    [(<= a b) (list)]\n    [(<= a 0) (list 0)]\n\
    \    [(<= b 0) (list 0)]\n    [(<= a b) (list)]\n    [(<= a 0) (list 0)]\n   \
    \ [(<= b 0) (list 0)]\n    [(<= a b) (list)]\n    [(<= a 0) (list 0)]\n    [(<=\
    \ b 0) (list 0)]\n    [(<= a b) (list)]\n    [(<= a 0) (list 0)]\n    [(<= b 0)\
    \ (list 0)]\n    [(<= a b) (list)]\n    [(<= a 0) (list 0)]\n    [(<= b 0) (list\
    \ 0)]\n    [(<= a b) (list)]\n    [(<= a 0) (list 0)]\n    [(<= b 0) (list 0)]\n\
    \    [(<= a b) (list)]\n    [(<", "  (let ((result (make-vector (sub1 a) (sub1\
    \ b))))\n    (for-each (lambda (i) (vector-set! result i (modulo (vector-ref a\
    \ i) 10)))\n      (range a b)))\n  result)\n", "  (define (gen-range a b)\n  \
    \  (if (<= a b)\n      (list a)\n      (gen-range (+ a 1) b)))\n  (gen-range a\
    \ b))\n\n;; Given a positive integer n, return the sum of the digits of n,\n;;\
    \ starting with the rightmost digit and moving left.\n;; For example:\n;; >>>\
    \ (sum-digits 5)\n;; 5\n;; >>> (sum-digits 10)\n;; 10\n;; >>> (sum-digits 100)\n\
    ;; 100\n;; >>> (sum-digits 1000)\n;; 1000\n;; >>> (sum-digits 100000)\n;; 100000\n\
    ;; >>> (sum-digits 1000000)\n;; 1000000\n;; >>> (sum-digits 10000000)\n;; 10000000\n\
    ;; >>> (sum-digits 100000000)\n;; 100000000\n;; >>> (sum-digits 1000000000)\n\
    ;; 1000000000\n;; >>> (sum-digits 10000000000)\n;; 10000000000\n;; >>> (sum-digits\
    \ 100000000000)\n;; 100000000000\n;; >>> (sum-digits 1000000000000)\n;; 1000000000000\n\
    ;; >>> (sum-digits 10000000000000)\n;; 10000000000000\n;; >>> (sum-digits 100000000000000)\n\
    ;; 100000000000000\n;; >>> (sum-digits 1000000000000000)\n;; 1000000000000000\n\
    ;; >>> (sum-digits 10000000000000000)\n;; 10000000000000000\n;; >>> (sum-digits\
    \ 100000000000000000)\n;; 100000000000000000\n;; >>> (sum-digits 1000000000000000000)\n\
    ;; 1000000000000000000\n;; >>> (sum-digits 10000000000000000000)\n;; 10000000000000000000\n\
    ;; >>> (sum-digits 100000000000000000000)\n;; 100000000000000000000\n;; >>> (sum-digits\
    \ 1000000000000000000000)\n;; 1000000000000000000000\n;; >>> (sum-digits 10000000000000000000000)\n\
    ;; 10000000000000000000000\n;; >>> (sum-digits 100000000000000000000000)\n;; 100000000000000000000000\n\
    ;; >>> (sum-digits 1000000000000000000000000)\n;; 1000000000000000000000000\n\
    ;; >>> (sum-digits 10000000000000000000000000)\n;; 10000000000000000000000000\n\
    ;; >>> (sum-digits 100000000000000000000000000)\n;; 100000000000000000000000000\n\
    ;; >>> (sum-digits 1000000000000000000000000000)\n;; 1000000000000000000", " \
    \ (let ((i a))\n    (while (< i b)\n      (let ((digit (modulo i 10)))\n     \
    \   (if (= digit 0)\n          (list digit)\n          (append (list digit) (generate_integers\
    \ (i (+ i 1)) (i (+ i 1))))))))\n  (generate_integers a b))\n\n;; Given a positive\
    \ integer n, return the sum of the digits of n.\n;; For example:\n;; >>> (sum_of_digits\
    \ 5)\n;; 5\n;; >>> (sum_of_digits 10)\n;; 10\n;; >>> (sum_of_digits 100)\n;; 100\n\
    ;; >>> (sum_of_digits 1000)\n;; 1000\n;; >>> (sum_of_digits 1000000)\n;; 1000000\n\
    ;; >>> (sum_of_digits 1000000000)\n;; 1000000000\n;; >>> (sum_of_digits 1000000000000)\n\
    ;; 1000000000000\n;; >>> (sum_of_digits 1000000000000000)\n;; 1000000000000000\n\
    ;; >>> (sum_of_digits 10000000000000000)\n;; 10000000000000000\n;; >>> (sum_of_digits\
    \ 100000000000000000)\n;; 100000000000000000\n;; >>> (sum_of_digits 1000000000000000000)\n\
    ;; 1000000000000000000\n;; >>> (sum_of_digits 10000000000000000000)\n;; 10000000000000000000\n\
    ;; >>> (sum_of_digits 100000000000000000000)\n;; 100000000000000000000\n;; >>>\
    \ (sum_of_digits 1000000000000000000000)\n;; 1000000000000000000000\n;; >>> (sum_of_digits\
    \ 10000000000000000000000)\n;; 10000000000000000000000\n;; >>> (sum_of_digits\
    \ 100000000000000000000000)\n;; 100000000000000000000000\n;; >>> (sum_of_digits\
    \ 1000000000000000000000000)\n;; 1000000000000000000000000\n;; >>> (sum_of_digits\
    \ 10000000000000000000000000)\n;; 10000000000000000000000000\n;; >>> (sum_of_digits\
    \ 100000000000000000000000000)\n;; 100000000000000000000000000\n;; >>> (sum_of_digits\
    \ 1000000000000000000000000000)\n;; 1000000000000000000000000000\n;; >>> (sum_of_digits\
    \ 10000000000000000000000000000)\n;; 10000000000000000000000000000\n;; >>> (sum_of_digits\
    \ 100000000000000000000000000000)\n;; 100000000000000000000000000000\n;; >>> (sum_",
  "  (define (gen-range a b)\n    (if (<= a b)\n      (list a)\n      (gen-range (+\
    \ a 1) b)))\n  (gen-range a b))\n\n;; Given a positive integer n, return the sum\
    \ of the even digits between\n;; 1 and n, in ascending order.\n;; For example:\n\
    ;; >>> (sum_even_digits 10)\n;; 10\n;; >>> (sum_even_digits 100)\n;; 10\n;; >>>\
    \ (sum_even_digits 1000)\n;; 10\n;; >>> (sum_even_digits 10000)\n;; 10\n;; >>>\
    \ (sum_even_digits 100000)\n;; 10\n;; >>> (sum_even_digits 1000000)\n;; 10\n;;\
    \ >>> (sum_even_digits 10000000)\n;; 10\n;; >>> (sum_even_digits 100000000)\n\
    ;; 10\n;; >>> (sum_even_digits 1000000000)\n;; 10\n;; >>> (sum_even_digits 10000000000)\n\
    ;; 10\n;; >>> (sum_even_digits 100000000000)\n;; 10\n;; >>> (sum_even_digits 1000000000000)\n\
    ;; 10\n;; >>> (sum_even_digits 10000000000000)\n;; 10\n;; >>> (sum_even_digits\
    \ 100000000000000)\n;; 10\n;; >>> (sum_even_digits 1000000000000000)\n;; 10\n\
    ;; >>> (sum_even_digits 10000000000000000)\n;; 10\n;; >>> (sum_even_digits 100000000000000000)\n\
    ;; 10\n;; >>> (sum_even_digits 1000000000000000000)\n;; 10\n;; >>> (sum_even_digits\
    \ 10000000000000000000)\n;; 10\n;; >>> (sum_even_digits 100000000000000000000)\n\
    ;; 10\n;; >>> (sum_even_digits 1000000000000000000000)\n;; 10\n;; >>> (sum_even_digits\
    \ 10000000000000000000000)\n;; 10\n;; >>> (sum_even_digits 100000000000000000000000)\n\
    ;; 10\n;; >>> (sum_even_digits 1000000000000000000000000)\n;; 10\n;; >>> (sum_even_digits\
    \ 10000000000000000000000000)\n;; 10\n;; >>> (sum_even_digits 100000000000000000000000000)\n\
    ;; 10\n;; >>> (sum_", "  (cond ((<= a b) (list))\n        ((= a 0) (list))\n \
    \       ((<= a b)\n         (let ((n (modulo a 10)))\n           (if (>= n 0)\n\
    \               (list n)\n               (generate_integers (- n 1) (sub1 a))))))\n\
    \  )\n\n;; Given a positive integer n, return the sum of the digits of n.\n;;\
    \ For example:\n;; >>> (sum_digits 5)\n;; 5\n;; >>> (sum_digits 10)\n;; 10\n;;\
    \ >>> (sum_digits -1)\n;; -1", "  (let ((result (list)))\n    (for-each (lambda\
    \ (x) (append result (list x)))\n      (range a b)))\n  result)\n\n;; Given a\
    \ positive integer n, return the sum of the digits of n, in\n;; ascending order.\n\
    ;; For example:\n;; >>> (sum_digits 5)\n;; 5\n;; >>> (sum_digits 10)\n;; 10\n\
    ;; >>> (sum_digits 100)\n;; 100\n;; >>> (sum_digits 1000)\n;; 1000\n;; >>> (sum_digits\
    \ 100000)\n;; 100000\n;; >>> (sum_digits 1000000)\n;; 1000000\n;; >>> (sum_digits\
    \ 10000000)\n;; 10000000\n;; >>> (sum_digits 100000000)\n;; 100000000\n;; >>>\
    \ (sum_digits 1000000000)\n;; 1000000000\n;; >>> (sum_digits 10000000000)\n;;\
    \ 10000000000\n;; >>> (sum_digits 100000000000)\n;; 100000000000\n;; >>> (sum_digits\
    \ 1000000000000)\n;; 1000000000000\n;; >>> (sum_digits 10000000000000)\n;; 10000000000000\n\
    ;; >>> (sum_digits 100000000000000)\n;; 100000000000000\n;; >>> (sum_digits 1000000000000000)\n\
    ;; 1000000000000000\n;; >>> (sum_digits 10000000000000000)\n;; 10000000000000000\n\
    ;; >>> (sum_digits 100000000000000000)\n;; 100000000000000000\n;; >>> (sum_digits\
    \ 1000000000000000000)\n;; 1000000000000000000\n;; >>> (sum_digits 10000000000000000000)\n\
    ;; 10000000000000000000\n;; >>> (sum_digits 100000000000000000000)\n;; 100000000000000000000\n\
    ;; >>> (sum_digits 1000000000000000000000)\n;; 1000000000000000000000\n;; >>>\
    \ (sum_digits 10000000000000000000000)\n;; 10000000000000000000000\n;; >>> (sum_digits\
    \ 100000000000000000000000)\n;; 100000000000000000000000\n;; >>> (sum_digits 1000000000000000000000000)\n\
    ;; 1000000000000000000000000\n;; >>> (sum_digits 10000000000000000000000000)\n\
    ;; 10000000000000000000000000\n;; >>> (sum_digits 100000000000000000000000000)\n\
    ;; 100000000000000000000000000\n;; >>> (sum_digits 1000000000000000000000000000)\n\
    ;; 1000000000000000000000000000\n;; >>> (sum_digits 10000000000000000000000000000)",
  "  (let ((i a))\n    (if (<= i b)\n      (list i)\n      (generate_integers (i (+\
    \ i 1)) b))))\n\n;; Given a positive integer n, return the sum of the even digits\
    \ between\n;; 1 and n, in ascending order.\n;; For example:\n;; >>> (sum_even_digits\
    \ 10)\n;; 10\n;; >>> (sum_even_digits 100)\n;; 10\n;; >>> (sum_even_digits 1000)\n\
    ;; 10\n;; >>> (sum_even_digits 10000)\n;; 10\n;; >>> (sum_even_digits 100000)\n\
    ;; 10\n;; >>> (sum_even_digits 1000000)\n;; 10\n;; >>> (sum_even_digits 10000000)\n\
    ;; 10\n;; >>> (sum_even_digits 100000000)\n;; 10\n;; >>> (sum_even_digits 1000000000)\n\
    ;; 10\n;; >>> (sum_even_digits 10000000000)\n;; 10\n;; >>> (sum_even_digits 100000000000)\n\
    ;; 10\n;; >>> (sum_even_digits 1000000000000)\n;; 10\n;; >>> (sum_even_digits\
    \ 10000000000000)\n;; 10\n;; >>> (sum_even_digits 100000000000000)\n;; 10\n;;\
    \ >>> (sum_even_digits 1000000000000000)\n;; 10\n;; >>> (sum_even_digits 10000000000000000)\n\
    ;; 10\n;; >>> (sum_even_digits 100000000000000000)\n;; 10\n;; >>> (sum_even_digits\
    \ 1000000000000000000)\n;; 10\n;; >>> (sum_even_digits 10000000000000000000)\n\
    ;; 10\n;; >>> (sum_even_digits 100000000000000000000)\n;; 10\n;; >>> (sum_even_digits\
    \ 1000000000000000000000)\n;; 10\n;; >>> (sum_even_digits 10000000000000000000000)\n\
    ;; 10\n;; >>> (sum_even_digits 100000000000000000000000)\n;; 10\n;; >>> (sum_even_digits\
    \ 1000000000000000000000000)\n;; 10\n;; >>> (sum_even_digits 10000000000000000000000000)\n\
    ;; 10\n;; >>> (sum_even_digits 100000000000000000000000000)\n;; 10\n;; >>> (sum_even_digits\
    \ 1000000000000000000000000000", "  (cond\n    [(<= a b) (list)]\n    [(<= a 0)\
    \ (list 0)]\n    [(<= b 0) (list)]\n    [(>= a b) (list)]\n    [(>= a 0) (list)]\n\
    \    [(>= b 0) (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a\
    \ b) (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n\
    \    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0)\
    \ (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0) (list)]\n\
    \    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0) (list)]\n    [(= b 0)\
    \ (list)]\n    [(= a b) (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n\
    \    [(= a b) (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b)\
    \ (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n\
    \    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0)\
    \ (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0) (list)]\n\
    \    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0) (list)]\n    [(= b 0)\
    \ (list)]\n    [(= a b) (list)]\n    [(= a 0", "  (let ((result (make-vector (sub1\
    \ a) (sub1 b))))\n    (let ((i 0))\n      (while (< i (sub1 b))\n        (set!\
    \ result (append result (vector-ref a i)))\n        (set! i (add1 i)))))\n  result)\n\
    \n;; Given a positive integer n, return the sum of the even digits between\n;;\
    \ 1 and n, in ascending order.\n;; For example:\n;; >>> (sum_of_even_digits 2)\n\
    ;; 2\n;; >>> (sum_of_even_digits 10)\n;; 22\n;; >>> (sum_of_even_digits 100)\n\
    ;; 222\n;; >>> (sum_of_even_digits 1000)\n;; 2222\n;; >>> (sum_of_even_digits\
    \ 10000)\n;; 22222\n;; >>> (sum_of_even_digits 100000)\n;; 222222\n;; >>> (sum_of_even_digits\
    \ 1000000)\n;; 2222222\n;; >>> (sum_of_even_digits 10000000)\n;; 22222222\n;;\
    \ >>> (sum_of_even_digits 100000000)\n;; 222222222\n;; >>> (sum_of_even_digits\
    \ 1000000000)\n;; 2222222222\n;; >>> (sum_of_even_digits 10000000000)\n;; 22222222222\n\
    ;; >>> (sum_of_even_digits 100000000000)\n;; 222222222222\n;; >>> (sum_of_even_digits\
    \ 1000000000000)\n;; 2222222222222\n;; >>> (sum_of_even_digits 10000000000000)\n\
    ;; 22222222222222\n;; >>> (sum_of_even_digits 100000000000000)\n;; 222222222222222\n\
    ;; >>> (sum_of_even_digits 1000000000000000)\n;; 222222222222222\n;; >>> (sum_of_even_digits\
    \ 10000000000000000)\n;; 222222222222222\n;; >>> (sum_of_even_digits 100000000000000000)\n\
    ;; 222222222222222\n;; >>> (sum_of_even_digits 1000000000000000000)\n;; 222222222222222\n\
    ;; >>> (sum", "  (let ((n (make-vector (sub1 a) b)))\n    (map (lambda (x) (vector-ref\
    \ n x))\n       (range (sub1 a) (sub1 b)))\n    ))\n\n;; Given a positive integer\
    \ n, return the number of ways to write it as\n;; a sum of two positive integers.\n\
    ;; For example:\n;; >>> (count_ways_to_write_as_sum 2)\n;; 2\n;; >>> (count_ways_to_write_as_sum\
    \ 3)\n;; 3\n;; >>> (count_ways_to_write_as_sum 4)\n;; 5\n;; >>> (count_ways_to_write_as_sum\
    \ 5)\n;; 10\n;; >>> (count_ways_to_write_as_sum 6)\n;; 15\n;; >>> (count_ways_to_write_as_sum\
    \ 7)\n;; 21\n;; >>> (count_ways_to_write_as_sum 8)\n;; 28\n;; >>> (count_ways_to_write_as_sum\
    \ 9)\n;; 36\n;; >>> (count_ways_to_write_as_sum 10)\n;; 45\n;; >>> (count_ways_to_write_as_sum\
    \ 11)\n;; 55\n;; >>> (count_ways_to_write_as_sum 12)\n;; 66\n;; >>> (count_ways_to_write_as_sum\
    \ 13)\n;; 78\n;; >>> (count_ways_to_write_as_sum 14)\n;; 91\n;; >>> (count_ways_to_write_as_sum\
    \ 15)\n;; 105\n;; >>> (count_ways_to_write_as_sum 16)\n;; 120\n;; >>> (count_ways_to_write_as_sum\
    \ 17)\n;; 136\n;; >>> (count_ways_to_write_as_sum 18)\n;; 153\n;; >>> (count_ways_to_write_as_sum\
    \ 19)\n;; 171\n;; >>> (count_ways_to_write_as_sum 20)\n;; 190\n;; >>> (count_ways_to_write_as_sum\
    \ 21)\n;; 210\n;; >>> (count_ways_to_write_as_sum 22)\n;; 230\n;; >>> (count_ways_to_write",
  "  (define (gen-even-digits a b)\n    (define (gen-even-digits-rec a b)\n      (if\
    \ (<= a b)\n        (list a)\n        (gen-even-digits-rec (+ a 1)))))\n  (gen-even-digits-rec\
    \ a b))\n\n;; Given a positive integer n, return the sum of the even digits between\n\
    ;; 1 and n, in ascending order.\n;; For example:\n;; >>> (sum-even-digits 10)\n\
    ;; 10\n;; >>> (sum-even-digits 100)\n;; 10\n;; >>> (sum-even-digits 1000)\n;;\
    \ 10\n;; >>> (sum-even-digits 1001)\n;; 11\n;; >>> (sum-even-digits 10001)\n;;\
    \ 11\n;; >>> (sum-even-digits 100001)\n;; 12\n;; >>> (sum-even-digits 1000001)\n\
    ;; 12\n;; >>> (sum-even-digits 10000001)\n;; 12\n;; >>> (sum-even-digits 100000001)\n\
    ;; 12\n;; >>> (sum-even-digits 1000000001)\n;; 12\n;; >>> (sum-even-digits 10000000101)\n\
    ;; 12\n;; >>> (sum-even-digits 100000001001)\n;; 12\n;; >>> (sum-even-digits 1000000010001)\n\
    ;; 12\n;; >>> (sum-even-digits 10000000100001)\n;; 12\n;; >>> (sum-even-digits\
    \ 100000001000001)\n;; 12\n;; >>> (sum-even-digits 1000000010000001)\n;; 12\n\
    ;; >>> (sum-even-digits 10000000100000101)\n;; 12\n;; >>> (sum-even-digits 100000001000001001)\n\
    ;; 12\n;; >>> (sum-even-digits 1000000010000010001)\n;; 12\n;; >>> (sum-even-digits\
    \ 10000000100000100001)\n;; 12\n;; >>> (sum-even-digits 100000001000001000001)\n\
    ;; 12\n;; >>> (sum-even-digits 1000000010000010000001)\n;; 12\n;; >>> (sum-even-digits\
    \ 1000000", "  (let ((result (make-vector (sub1 a) b)))\n    (for-each (lambda\
    \ (x) (vector-set! result x)) (range a b)))\n  result)\n\n;; Given a positive\
    \ integer n, return the sum of the even digits between\n;; 1 and n, in ascending\
    \ order.\n;; For example:\n;; >>> (sum_even_digits 10)\n;; 10\n;; >>> (sum_even_digits\
    \ 100)\n;; 100\n;; >>> (sum_even_digits 1000)\n;; 1000\n;; >>> (sum_even_digits\
    \ 100000)\n;; 100000\n;; >>> (sum_even_digits 1000000)\n;; 1000000\n;; >>> (sum_even_digits\
    \ 10000000)\n;; 10000000\n;; >>> (sum_even_digits 100000000)\n;; 100000000\n;;\
    \ >>> (sum_even_digits 1000000000)\n;; 1000000000\n;; >>> (sum_even_digits 10000000000)\n\
    ;; 10000000000\n;; >>> (sum_even_digits 100000000000)\n;; 100000000000\n;; >>>\
    \ (sum_even_digits 1000000000000)\n;; 1000000000000\n;; >>> (sum_even_digits 10000000000000)\n\
    ;; 10000000000000\n;; >>> (sum_even_digits 100000000000000)\n;; 100000000000000\n\
    ;; >>> (sum_even_digits 1000000000000000)\n;; 1000000000000000\n;; >>> (sum_even_digits\
    \ 10000000000000000)\n;; 10000000000000000\n;; >>> (sum_even_digits 100000000000000000)\n\
    ;; 100000000000000000\n;; >>> (sum_even_digits 1000000000000000000)\n;; 1000000000000000000\n\
    ;; >>> (sum_even_digits 10000000000000000000)\n;; 10000000000000000000\n;; >>>\
    \ (sum_even_digits 100000000000000000000)\n;; 100000000000000000000\n;; >>> (sum_even_digits\
    \ 1000000000000000000000)\n;; 1000000000000000000000\n;; >>> (sum_even_digits\
    \ 10000000000000000000000)\n;; 10000000000000000000000\n;; >>> (sum_even_digits\
    \ 100000000000000000000000)\n;; 100000000000000000000000\n;; >>> (sum_even_digits\
    \ 1000000000000000000000000)\n;; 1000000000000000000000000\n;; >>> (sum_even_digits\
    \ 10000000000000000000000000)\n;; 10000000000000000000000000\n;; >>> (", "  (define\
    \ (gen-range a b)\n    (if (<= a b)\n      (list a)\n      (gen-range (+ a 1)\
    \ b)))\n  (gen-range a b))\n\n;; Given a positive integer n, return the sum of\
    \ the even digits between\n;; 1 and n, in ascending order.\n;; For example:\n\
    ;; >>> (sum-even-digits 10)\n;; 10\n;; >>> (sum-even-digits 100)\n;; 10\n;; >>>\
    \ (sum-even-digits 1000)\n;; 10\n;; >>> (sum-even-digits 10000)\n;; 10\n;; >>>\
    \ (sum-even-digits 100000)\n;; 10\n;; >>> (sum-even-digits 1000000)\n;; 10\n;;\
    \ >>> (sum-even-digits 10000000)\n;; 10\n;; >>> (sum-even-digits 100000000)\n\
    ;; 10\n;; >>> (sum-even-digits 1000000000)\n;; 10\n;; >>> (sum-even-digits 10000000000)\n\
    ;; 10\n;; >>> (sum-even-digits 100000000000)\n;; 10\n;; >>> (sum-even-digits 1000000000000)\n\
    ;; 10\n;; >>> (sum-even-digits 10000000000000)\n;; 10\n;; >>> (sum-even-digits\
    \ 100000000000000)\n;; 10\n;; >>> (sum-even-digits 1000000000000000)\n;; 10\n\
    ;; >>> (sum-even-digits 10000000000000000)\n;; 10\n;; >>> (sum-even-digits 100000000000000000)\n\
    ;; 10\n;; >>> (sum-even-digits 1000000000000000000)\n;; 10\n;; >>> (sum-even-digits\
    \ 10000000000000000000)\n;; 10\n;; >>> (sum-even-digits 100000000000000000000)\n\
    ;; 10\n;; >>> (sum-even-digits 1000000000000000000000)\n;; 10\n;; >>> (sum-even-digits\
    \ 10000000000000000000000)\n;; 10\n;; >>> (sum-even-digits 100000000000000000000000)\n\
    ;; 10\n;; >>> (sum-even-digits 1000000000000000000000000)\n;; 10\n;; >>> (sum-even-digits\
    \ 10000000000000000000000000)\n;; 10\n;; >>> (sum-even-digits 100000000000000000000000000)\n\
    ;; 10\n;; >>> (sum-", "  (cond\n    [(<= a b) (list)]\n    [(<= a 0) (list 0)]\n\
    \    [(<= b 0) (list)]\n    [(>= a b) (list)]\n    [(>= a 0) (list)]\n    [(>=\
    \ b 0) (list)]\n    [(< a b) (list)]\n    [(< a 0) (list 0)]\n    [(< b 0) (list)]\n\
    \    [(> a b) (list)]\n    [(> a 0) (list)]\n    [(> b 0) (list)]\n    [(= a b)\
    \ (list)]\n    [(= a 0) (list 0)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n\
    \    [(= a 0) (list 0)]\n    [(= b 0) (list)]\n    [(< a b) (list)]\n    [(< a\
    \ 0) (list 0)]\n    [(< b 0) (list)]\n    [(> a b) (list)]\n    [(> a 0) (list\
    \ 0)]\n    [(> b 0) (list)]\n    [(<= a b) (list)]\n    [(<= a 0) (list 0)]\n\
    \    [(<= b 0) (list)]\n    [(>= a b) (list)]\n    [(>= a 0) (list 0)]\n    [(>=\
    \ b 0) (list)]\n    [(< a b) (list)]\n    [(< a 0) (list 0)]\n    [(< b 0) (list)]\n\
    \    [(> a b) (list)]\n    [(> a 0) (list 0)]\n    [(> b 0) (list)]\n    [(= a\
    \ b) (list)]\n    [(= a 0) (list 0)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n\
    \    [(= a 0) (list 0)]\n    [(= b 0) (list)]\n    [(< a b) (list)]\n    [(< a\
    \ 0) (list 0)]", "  (let ((i (0)))\n    (while (< i b)\n      (let ((n (modulo\
    \ (i) 10)))\n        (if (= n 0)\n            (list n)\n            (append (list\
    \ n) (generate_integers (i + 1) (modulo (i + 1) 10)))))))))\n", "  (cond\n   \
    \ [(<= a b) (list)]\n    [(<= a 0) (list 0)]\n    [(<= b 0) (list)]\n    [(<=\
    \ a b)\n      (let ((n (div a 2)))\n        (cons (mod a 2) (generate_integers\
    \ (sub1 n) (sub1 n))))]\n    [(<= a 0)\n      (let ((n (div a 2)))\n        (cons\
    \ (mod a 2) (generate_integers (sub1 n) (sub1 n))))]\n    [(<= b 0)\n      (let\
    \ ((n (div b 2)))\n        (cons (mod b 2) (generate_integers (sub1 n) (sub1 n))))]\n\
    \    [else\n      (let ((n (div b 2)))\n        (cons (mod b 2) (generate_integers\
    \ (sub1 n) (sub1 n))))]))\n\n;; Given a positive integer n, return the sum of\
    \ the digits of n.\n;; For example:\n;; >>> (sum_digits 5)\n;; 5\n;; >>> (sum_digits\
    \ 10)\n;; 10\n;; >>> (sum_digits 100)\n;; 100\n;; >>> (sum_digits 1000)\n;; 1000\n\
    ;; >>> (sum_digits 10000)\n;; 10001\n;; >>> (sum_digits 100000)\n;; 100001\n;;\
    \ >>> (sum_digits 1000000)\n;; 1000001\n;; >>> (sum_digits 10000000)\n;; 10000001\n\
    ;; >>> (sum_digits 100000000)\n;; 100000001\n;; >>> (sum_digits 1000000000)\n\
    ;; 1000000001\n;; >>> (sum_digits 10000000000)\n;; 10000000001\n;; >>> (sum_digits\
    \ 100000000000)\n;; 100000000001\n;; >>> (sum_digits 1000000000000)\n;; 1000000000001\n\
    ;; >>> (sum_digits 10000000000000)\n;; 10000000000001\n;; >>> (sum_digits 100000000000000)\n\
    ;; 100000000000001\n;; >>> (sum_digits 1000000000000000)\n;; 1000000000000001\n\
    ;; >>> (sum_digits 10000000000000000)\n;; 10000000000000001\n;; >>> (sum", " \
    \ (let ((result (make-vector (sub1 a) (sub1 b))))\n    (for-each (lambda (x) (vector-set!\
    \ result x)) (range a b)))\n  result)\n\n;; Given a positive integer n, return\
    \ the sum of the even digits between\n;; 1 and n, in ascending order.\n;; For\
    \ example:\n;; >>> (sum_even_digits 2)\n;; 2\n;; >>> (sum_even_digits 10)\n;;\
    \ 22\n;; >>> (sum_even_digits 100)\n;; 222\n;; >>> (sum_even_digits 1000)\n;;\
    \ 3222\n;; >>> (sum_even_digits 10000)\n;; 33222\n;; >>> (sum_even_digits 100000)\n\
    ;; 333222\n;; >>> (sum_even_digits 1000000)\n;; 33333222\n;; >>> (sum_even_digits\
    \ 10000000)\n;; 3333333222\n;; >>> (sum_even_digits 100000000)\n;; 333333333222\n\
    ;; >>> (sum_even_digits 1000000000)\n;; 33333333333222\n;; >>> (sum_even_digits\
    \ 10000000000)\n;; 333333333333333222\n;; >>> (sum_even_digits 100000000000)\n\
    ;; 3333333333333333333222\n;; >>> (sum_even_digits 1000000000000)\n;; 33333333333333333333333222\n\
    ;; >>> (sum_even_digits 10000000000000)\n;; 333333333333333333333333333222\n;;\
    \ >>> (sum_even_digits 100000000000000)\n;; 3333333333333333333333333333333222\n\
    ;; >>> (sum_even_digits 1000000000000000)\n;; 33333333333333333333333333333333333222\n\
    ;; >>> (sum_even_digits 10000000000000000)\n;; 333333333333333333333333333333333333333222\n\
    ;; >>> (sum_even_digits 100000000000000000)\n;; 3333333333333333333333333333333333333333333222\n\
    ;; >>> (sum_even_digits 1000000000000000000)\n;; 333333333333333333333333333333333333333333333332222\n\
    ;; >>> (sum_even_digits 10000000000000000000)\n;; 33333333333333333333333333333333333333333333333333333332222\n\
    ;; >>> (sum_even_", "  (cond ((<= a b) (list))\n        ((= a 0) (list))\n   \
    \     ((<= a b)\n          (let ((i (quotient a b)))\n            (cons (modulo\
    \ i 10) (generate_integers (add a (quotient i 2)) (add i 1)))))))\n\n;; Given\
    \ a positive integer n, return the sum of the even digits between\n;; 0 and n,\
    \ in ascending order.\n;; For example:\n;; >>> (sum_of_even_digits 10)\n;; (list\
    \ 2 4 6 8 10)\n;; >>> (sum_of_even_digits 0)\n;; (list )", "  (let ((i a))\n \
    \   (while (< i b)\n      (let ((j (modulo i 10)))\n        (if (= j 0) (list\
    \ j) (list j) (append (list j) (generate_integers (i + 1) (modulo i 10)))))))))\n",
  "  (let ((result (list)))\n    (while (< a b)\n      (let ((i (quotient a b)))\n\
    \        (if (= i 0)\n            (append result (quotient a i))\n           \
    \ (append result (quotient a (quotient (- i 1) b)))\n          )\n        )\n\
    \      )\n    (reverse result)\n    )\n  )\n\n;; Given a positive integer n, return\
    \ the sum of the even digits between\n;; 1 and n, in ascending order.\n;; For\
    \ example:\n;; >>> (sum_even_digits 2)\n;; 2\n;; >>> (sum_even_digits 10)\n;;\
    \ 22\n;; >>> (sum_even_digits 100)\n;; 222\n;; >>> (sum_even_digits 1000)\n;;\
    \ 2222\n;; >>> (sum_even_digits 10000)\n;; 22222\n;; >>> (sum_even_digits 100000)\n\
    ;; 222222\n;; >>> (sum_even_digits 1000000)\n;; 2222222\n;; >>> (sum_even_digits\
    \ 10000000)\n;; 22222222\n;; >>> (sum_even_digits 100000000)\n;; 222222222\n;;\
    \ >>> (sum_even_digits 1000000000)\n;; 2222222222\n;; >>> (sum_even_digits 10000000000)\n\
    ;; 22222222222\n;; >>> (sum_even_digits 100000000000)\n;; 222222222222\n;; >>>\
    \ (sum_even_digits 1000000000000)\n;; 2222222222222\n;; >>> (sum_even_digits 10000000000000)\n\
    ;; 22222222222222\n;; >>> (sum_even_digits 100000000000000)\n;; 222222222222222\n\
    ;; >>> (sum_even_digits 1000000000000000)\n;; 222222222222222\n;; >>> (sum_even_digits\
    \ 10000000000000000)\n;; 222222222222222\n;; >>> (sum_even_digits 100000000000000000)\n\
    ;; 222222222222222\n;; >>> (sum_even_digits 1000000000000000000)\n;; 222222222222222\n\
    ;; >>> (sum_even_digits 10000000000000000000)\n;; 2222222222222", "  (let ((n\
    \ (if (< a b) (sub1 a) b)))\n    (if (<= n 0)\n      (list)\n      (cons (modulo\
    \ n 10) (generate_integers (add1 n) (sub1 n))))))\n\n;; Given a positive integer\
    \ n, return the sum of the digits of n.\n;; For example:\n;; >>> (sum_digits 2)\n\
    ;; 2\n;; >>> (sum_digits 10)\n;; 10\n;; >>> (sum_digits 100)\n;; 100\n;; >>> (sum_digits\
    \ 1000)\n;; 1000\n;; >>> (sum_digits 100000)\n;; 100000\n;; >>> (sum_digits 1000000)\n\
    ;; 1000000\n;; >>> (sum_digits 10000000)\n;; 10000000\n;; >>> (sum_digits 100000000)\n\
    ;; 100000000\n;; >>> (sum_digits 1000000000)\n;; 1000000000\n;; >>> (sum_digits\
    \ 10000000000)\n;; 10000000000\n;; >>> (sum_digits 100000000000)\n;; 100000000000\n\
    ;; >>> (sum_digits 1000000000000)\n;; 1000000000000\n;; >>> (sum_digits 10000000000000)\n\
    ;; 10000000000000\n;; >>> (sum_digits 100000000000000)\n;; 100000000000000\n;;\
    \ >>> (sum_digits 1000000000000000)\n;; 1000000000000000\n;; >>> (sum_digits 10000000000000000)\n\
    ;; 10000000000000000\n;; >>> (sum_digits 100000000000000000)\n;; 100000000000000000\n\
    ;; >>> (sum_digits 1000000000000000000)\n;; 1000000000000000000\n;; >>> (sum_digits\
    \ 10000000000000000000)\n;; 10000000000000000000\n;; >>> (sum_digits 100000000000000000000)\n\
    ;; 100000000000000000000\n;; >>> (sum_digits 1000000000000000000000)\n;; 1000000000000000000000\n\
    ;; >>> (sum_digits 10000000000000000000000)\n;; 10000000000000000000000\n;; >>>\
    \ (sum_digits 100000000000000000000000)\n;; 100000000000000000000000\n;; >>> (sum_digits\
    \ 1000000000000000000000000)\n;; 1000000000000000000000000\n;; >>> (sum_digits\
    \ 10000000000000000000000000)\n;; 10000000000000000000000000\n;; >>> (sum_digits\
    \ 100000000000000000000000000)\n;; 100000000000000000000000000\n;; >>> (sum_digits\
    \ 1000000000000000000000000000)\n;; 100", "  (let ((result (list)))\n    (while\
    \ (< a b)\n      (let ((digit (modulo a 10)))\n        (if (= digit 0)\n     \
    \     (append result digit)\n          (append result digit)\n          (append\
    \ result digit))))\n    result))\n", "  (let ((i a))\n    (if (<= i b)\n     \
    \ (list i)\n      (generate_integers (i (+ i 1)) b))))\n\n;; Given a positive\
    \ integer n, return the number of ways you can make a\n;; sequence of n even numbers.\n\
    ;; For example:\n;; >>> (count_ways 2)\n;; 2\n;; >>> (count_ways 4)\n;; 6\n;;\
    \ >>> (count_ways 6)\n;; 24\n;; >>> (count_ways 10)\n;; 120", "  (let ((result\
    \ (list)))\n    (while (< a b)\n      (let ((digit (modulo a 10)))\n        (if\
    \ (= digit 0)\n          (append result digit)\n          (append result (modulo\
    \ digit 10)))))\n    result))\n", "  (let ((n (div a b)))\n    (if (< n 0)\n \
    \     (list)\n      (let ((i 0))\n        (while (< i n)\n          (let ((digit\
    \ (modulo (remainder (remainder n i) b) 10)))\n            (if (= digit 0)\n \
    \             (list digit)\n              (append (list digit) (generate_integers\
    \ (remainder n (add i 1)) (remainder n (add i 1)))))))))))))\n", "  (if (zero?\
    \ a)\n    (list)\n    (let ((n (div a 10)))\n      (if (zero? n)\n        (list)\n\
    \        (let ((d (mod a 10)))\n          (if (zero? d)\n            (list)\n\
    \            (let ((i (div d 10)))\n              (if (zero? i)\n            \
    \    (list)\n                (cons (mod d 10) (cons (mod i 10) (cons (mod (div\
    \ i 10)) (cons (mod (div d 10)) (cons (mod (div d 10)) (cons (mod (div d 10))\
    \ (cons (mod (div d 10)) (cons (mod (div d 10)) (cons (mod (div d 10)) (cons (mod\
    \ (div d 10)) (cons (mod (div d 10)) (cons (mod (div d 10)) (cons (mod (div d\
    \ 10)) (cons (mod (div d 10)) (cons (mod (div d 10)) (cons (mod (div d 10)) (cons\
    \ (mod (div d 10)) (cons (mod (div d 10)) (cons (mod (div d 10)) (cons (mod (div\
    \ d 10)) (cons (mod (div d 10)) (cons (mod (div d 10)) (cons (mod (div d 10))\
    \ (cons (mod (div d 10)) (cons (mod (div d 10)) (cons (mod (div d 10)) (cons (mod\
    \ (div d 10)) (cons (mod (div d 10)) (cons (mod (div d 10)) (cons (mod (div d\
    \ 10)) (cons (mod (div d 10)) (cons (mod (div d 10)) (cons (mod (div d 10)) (cons\
    \ (mod (div d 10)) (cons (mod (div d 10)) (cons (mod (div d 10)) (cons (mod (div\
    \ d 10)) (cons (mod (div d 10)) (cons (mod (div d 10)) (cons (mod (div d 10))\
    \ (cons (mod (div d 10)) (cons (mod (div d 10)) (cons (mod (div d 10)) (cons (mod\
    \ (div d 10)) (cons (mod (div d 10)) (cons (mod (div d 10)) (cons (mod (div d\
    \ 10)) (cons (", "  (let ((i a))\n    (while (< i b)\n      (let ((digit (modulo\
    \ i 10)))\n        (if (= digit 0)\n            (list digit)\n            (append\
    \ (list digit) (generate_integers (i (+ i 1)) (i (+ i 1))))))))\n  (generate_integers\
    \ a b))\n\n;; Given a positive integer n, return the sum of the first n even\n\
    ;; digits of the Fibonacci sequence.\n;; For example:\n;; >>> (sum_fibonacci_digits\
    \ 4)\n;; (list 2)\n;; >>> (sum_fibonacci_digits 10)\n;; (list 2 8)\n;; >>> (sum_fibonacci_digits\
    \ 100)\n;; (list 2 8 18 34)\n;; >>> (sum_fibonacci_digits 1000)\n;; (list 2 8\
    \ 18 34 52 86)\n;; >>> (sum_fibonacci_digits 10000)\n;; (list 2 8 18 34 52 86\
    \ 108)\n;; >>> (sum_fibonacci_digits 100000)\n;; (list 2 8 18 34 52 86 108 130)\n\
    ;; >>> (sum_fibonacci_digits 1000000)\n;; (list 2 8 18 34 52 86 108 130 144)\n\
    ;; >>> (sum_fibonacci_digits 10000000)\n;; (list 2 8 18 34 52 86 108 130 144 182)\n\
    ;; >>> (sum_fibonacci_digits 100000000)\n;; (list 2 8 18 34 52 86 108 130 144\
    \ 182 246)\n;; >>> (sum_fibonacci_digits 1000000000)\n;; (list 2 8 18 34 52 86\
    \ 108 130 144 182 246 290)\n;; >>> (sum_fibonacci_digits 10000000000)\n;; (list\
    \ 2 8 18 34 52 86 108 130 144 182 246 290 354)\n;; >>> (sum_fibonacci_digits 100000000000)\n\
    ;; (list 2 8 18 34 52 86 108 130 144 182 246 290 354 418)\n;; >>> (sum_fibonacci_digits\
    \ 1000000000000)\n;; (list 2 8 18 34 52 86 108 130 144 182 246 290 354 418 476)\n\
    ;; >>> (sum_fibonacci_digits 10000000000000)\n", "  (define (generate_digits n)\n\
    \    (if (< n 0)\n      (list)\n      (cons (modulo n 10) (generate_digits (quotient\
    \ n 10))))\n    (if (<= n 0)\n      (list)\n      (cons 0 (generate_digits (-\
    \ n 1))))\n    (generate_digits a)\n    (append (generate_digits b) (reverse (generate_digits\
    \ b))))\n)\n\n;; Given a positive integer n, return the number of ways you can\
    \ make\n;; change by n cents.\n;; For example:\n;; >>> (change_cents 2)\n;; 2\n\
    ;; >>> (change_cents 5)\n;; 3\n;; >>> (change_cents 10)\n;; 2\n;; >>> (change_cents\
    \ 100)\n;; 1\n;; >>> (change_cents 1000)\n;; 0\n;; >>> (change_cents 10000)\n\
    ;; 0\n;; >>> (change_cents 100000)\n;; 0\n;; >>> (change_cents 1000000)\n;; 0\n\
    ;; >>> (change_cents 10000000)\n;; 0\n;; >>> (change_cents 100000000)\n;; 0\n\
    ;; >>> (change_cents 1000000000)\n;; 0\n;; >>> (change_cents 10000000000)\n;;\
    \ 0\n;; >>> (change_cents 100000000000)\n;; 0\n;; >>> (change_cents 1000000000000)\n\
    ;; 0\n;; >>> (change_cents 10000000000000)\n;; 0\n;; >>> (change_cents 100000000000000)\n\
    ;; 0\n;; >>> (change_cents 1000000000000000)\n;; 0\n;; >>> (change_cents 10000000000000000)\n\
    ;; 0\n;; >>> (change_cents 100000000000000000)\n;; 0\n;; >>> (change_cents 1000000000000000000)\n\
    ;; 0\n;; >>> (change_cents 10000000000000000000)\n;; 0\n;; >>> (change_cents 100000000000000000000)\n\
    ;; 0\n;; >>> (change_cents 1000000000000000000000)\n;; 0\n;; >>> (change_cents\
    \ 10000000000000000000000)\n;; 0\n;; >>> (change_cents 100000000000000000000000)\n\
    ;; 0\n;; >>> (change_cents 1000000000000000000000000)\n;; 0\n", "  (if (<= a b)\n\
    \    (list)\n    (let ((i a))\n      (while (<= i b)\n        (list (modulo i\
    \ 10))\n        (set! i (+ i 1))))))\n\n;; Given a positive integer n, return\
    \ the sum of the digits of n.\n;; For example:\n;; >>> (sum_digits 5)\n;; 5\n\
    ;; >>> (sum_digits 10)\n;; 10\n;; >>> (sum_digits 100)\n;; 100\n;; >>> (sum_digits\
    \ 1000)\n;; 1000\n;; >>> (sum_digits 100000)\n;; 100000\n;; >>> (sum_digits 1000000)\n\
    ;; 1000000\n;; >>> (sum_digits 10000000)\n;; 10000000\n;; >>> (sum_digits 100000000)\n\
    ;; 100000000\n;; >>> (sum_digits 1000000000)\n;; 1000000000\n;; >>> (sum_digits\
    \ 10000000000)\n;; 10000000000\n;; >>> (sum_digits 100000000000)\n;; 100000000000\n\
    ;; >>> (sum_digits 1000000000000)\n;; 1000000000000\n;; >>> (sum_digits 10000000000000)\n\
    ;; 10000000000000\n;; >>> (sum_digits 100000000000000)\n;; 100000000000000\n;;\
    \ >>> (sum_digits 1000000000000000)\n;; 1000000000000000\n;; >>> (sum_digits 10000000000000000)\n\
    ;; 10000000000000000\n;; >>> (sum_digits 100000000000000000)\n;; 100000000000000000\n\
    ;; >>> (sum_digits 1000000000000000000)\n;; 1000000000000000000\n;; >>> (sum_digits\
    \ 10000000000000000000)\n;; 10000000000000000000\n;; >>> (sum_digits 100000000000000000000)\n\
    ;; 100000000000000000000\n;; >>> (sum_digits 1000000000000000000000)\n;; 1000000000000000000000\n\
    ;; >>> (sum_digits 10000000000000000000000)\n;; 10000000000000000000000\n;; >>>\
    \ (sum_digits 100000000000000000000000)\n;; 100000000000000000000000\n;; >>> (sum_digits\
    \ 1000000000000000000000000)\n;; 1000000000000000000000000\n;; >>> (sum_digits\
    \ 10000000000000000000000000)\n;; 10000000000000000000000000\n;; >>> (sum_digits\
    \ 100000000000000000000000000)\n;; 100000000000000000000000000\n;; >>> (sum_digits\
    \ 1000000000000000000000000000)\n;; 1000000000000000000000000000\n;; >>> (sum",
  "  (let ((n (div a b)))\n    (if (zero? n)\n      (list)\n      (let ((i 0))\n \
    \       (while (< i n)\n          (let ((digit (modulo (remainder (remainder (quotient\
    \ n i) b) a) 10)))\n            (if (even? digit)\n              (list digit)\n\
    \              (set! i (add i 1))))))))))\n", "  (cond ((<= a b) (list))\n   \
    \     ((= a 0) (list))\n        ((<= a b)\n          (let ((n (div a 2)))\n  \
    \          (cons (modulo a 2)\n                  (generate_integers (sub1 n) (sub1\
    \ n) (sub1 n))))))\n  (generate_integers a b))\n\n;; Given a positive integer\
    \ n, return the sum of the even digits between\n;; 1 and n, in ascending order.\n\
    ;; For example:\n;; >>> (sum_even_digits 2)\n;; 2\n;; >>> (sum_even_digits 10)\n\
    ;; 22\n;; >>> (sum_even_digits 100)\n;; 222\n;; >>> (sum_even_digits 1000)\n;;\
    \ 3222\n;; >>> (sum_even_digits 10000)\n;; 33222\n;; >>> (sum_even_digits 100000)\n\
    ;; 333222\n;; >>> (sum_even_digits 1000000)\n;; 33333222\n;; >>> (sum_even_digits\
    \ 10000000)\n;; 3333333222\n;; >>> (sum_even_digits 100000000)\n;; 333333333222\n\
    ;; >>> (sum_even_digits 1000000000)\n;; 33333333333222\n;; >>> (sum_even_digits\
    \ 10000000000)\n;; 333333333333333222\n;; >>> (sum_even_digits 100000000000)\n\
    ;; 3333333333333333333222\n;; >>> (sum_even_digits 1000000000000)\n;; 33333333333333333333333222\n\
    ;; >>> (sum_even_digits 10000000000000)\n;; 333333333333333333333333333222\n;;\
    \ >>> (sum_even_digits 100000000000000)\n;; 3333333333333333333333333333333222\n\
    ;; >>> (sum_even_digits 1000000000000000)\n;; 33333333333333333333333333333333333222\n\
    ;; >>> (sum_even_digits 10000000000000000)\n;; 333333333333333333333333333333333333333222\n\
    ;; >>> (sum_even_digits 100000000000000000)\n;; 3333333333333333333333333333333333333333333222\n\
    ;; >>> (sum_even_digits 1000000000000000000)\n;; 333333333333333333333333333333333333333333333332222\n",
  "  (let ((result (make-vector 0 (b - a))))\n    (for-each\n      (lambda (i)\n \
    \       (if (even? i)\n            (vector-set! result i)\n            (vector-set!\
    \ result (vector-ref result (sub1 i))))\n        (range a i)))\n    result))\n\
    \n;; Given a positive integer n, return the number of ways to make a\n;; sequence\
    \ of n even numbers.\n;; For example:\n;; >>> (count_ways 2)\n;; 2\n;; >>> (count_ways\
    \ 4)\n;; 4\n;; >>> (count_ways 6)\n;; 8\n;; >>> (count_ways 10)\n;; 16\n;; >>>\
    \ (count_ways 12)\n;; 24\n;; >>> (count_ways 14)\n;; 32\n;; >>> (count_ways 16)\n\
    ;; 64\n;; >>> (count_ways 18)\n;; 96\n;; >>> (count_ways 20)\n;; 128\n;; >>> (count_ways\
    \ 22)\n;; 160\n;; >>> (count_ways 24)\n;; 192\n;; >>> (count_ways 26)\n;; 224\n\
    ;; >>> (count_ways 28)\n;; 256\n;; >>> (count_ways 30)\n;; 288\n;; >>> (count_ways\
    \ 32)\n;; 320\n;; >>> (count_ways 34)\n;; 352\n;; >>> (count_ways 36)\n;; 384\n\
    ;; >>> (count_ways 38)\n;; 416\n;; >>> (count_ways 40)\n;; 448\n;; >>> (count_ways\
    \ 42)\n;; 480\n;; >>> (count_ways 44)\n;; 512\n;; >>> (count_ways 46)\n;; 544\n\
    ;; >>> (count_ways 48)\n;; 576\n;; >>> (count_ways 50)\n;; 608\n;; >>> (count_ways\
    \ 52)\n;; 640\n;; >>> (count_ways 54)\n;; 672\n;; >>> (count_ways 56)\n;; 704\n\
    ;; >>> (count_ways 58)\n;; 736\n;; >>> (count_ways 60)\n;; 768\n;; >>> (count_ways\
    \ 62)\n;; 800\n;; >>> (count_ways 64)\n;; 832\n;; >>> (count_ways 66)\n;; 864\n\
    ;; >>> (count_ways 68)\n;; 896\n;;", "  (cond\n    [(<= a b) (list)]\n    [(<=\
    \ a 0) (list 0)]\n    [(<= b 0) (list)]\n    [(>= a b) (list)]\n    [(>= a 0)\
    \ (list)]\n    [(>= b 0) (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n\
    \    [(= a b) (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b)\
    \ (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n\
    \    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0)\
    \ (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0) (list)]\n\
    \    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0) (list)]\n    [(= b 0)\
    \ (list)]\n    [(= a b) (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n\
    \    [(= a b) (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b)\
    \ (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n\
    \    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0)\
    \ (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0) (list)]\n\
    \    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0", "  (let ((result (list)))\n\
    \    (for-each (lambda (x) (append result (list x)))\n      (range a b)))\n  result)\n\
    \n;; Given a positive integer n, return the sum of the digits of n.\n;; For example:\n\
    ;; >>> (sum_digits 5)\n;; 10\n;; >>> (sum_digits 10)\n;; 10\n;; >>> (sum_digits\
    \ 100)\n;; 100\n;; >>> (sum_digits 1000)\n;; 1000\n;; >>> (sum_digits 100000)\n\
    ;; 100000\n;; >>> (sum_digits 1000000)\n;; 1000000\n;; >>> (sum_digits 10000000)\n\
    ;; 10000000\n;; >>> (sum_digits 100000000)\n;; 100000000\n;; >>> (sum_digits 1000000000)\n\
    ;; 1000000000\n;; >>> (sum_digits 10000000000)\n;; 10000000000\n;; >>> (sum_digits\
    \ 100000000000)\n;; 100000000000\n;; >>> (sum_digits 1000000000000)\n;; 1000000000000\n\
    ;; >>> (sum_digits 10000000000000)\n;; 10000000000000\n;; >>> (sum_digits 100000000000000)\n\
    ;; 100000000000000\n;; >>> (sum_digits 1000000000000000)\n;; 1000000000000000\n\
    ;; >>> (sum_digits 10000000000000000)\n;; 10000000000000000\n;; >>> (sum_digits\
    \ 100000000000000000)\n;; 100000000000000000\n;; >>> (sum_digits 1000000000000000000)\n\
    ;; 1000000000000000000\n;; >>> (sum_digits 10000000000000000000)\n;; 10000000000000000000\n\
    ;; >>> (sum_digits 100000000000000000000)\n;; 100000000000000000000\n;; >>> (sum_digits\
    \ 1000000000000000000000)\n;; 1000000000000000000000\n;; >>> (sum_digits 10000000000000000000000)\n\
    ;; 10000000000000000000000\n;; >>> (sum_digits 100000000000000000000000)\n;; 100000000000000000000000\n\
    ;; >>> (sum_digits 1000000000000000000000000)\n;; 1000000000000000000000000\n\
    ;; >>> (sum_digits 10000000000000000000000000)\n;; 10000000000000000000000000\n\
    ;; >>> (sum_digits 100000000000000000000000000)\n;; 100000000000000000000000000\n\
    ;; >>> (sum_digits 1000000000000000000000000000)\n;; 1000000000000000000000000000\n\
    ;; >>> (sum_digits 10000000000000000000000000000)\n;; 10000000000000000000000000000",
  "  (cond ((<= a b) (list))\n        ((= a 0) (list))\n        ((<= a b)\n      \
    \    (let ((i (quotient a b)))\n            (if (>= i 2)\n                (list\
    \ (modulo i 2))\n                (generate_integers (sub1 a) (sub1 b))))))\n \
    \ (generate_integers a b))\n\n;; Given a positive integer n, return the sum of\
    \ the even digits between\n;; 1 and n, in ascending order.\n;; For example:\n\
    ;; >>> (sum_even_digits 10)\n;; 10\n;; >>> (sum_even_digits 100)\n;; 10\n;; >>>\
    \ (sum_even_digits 1000)\n;; 10\n;; >>> (sum_even_digits 1001)\n;; 11\n;; >>>\
    \ (sum_even_digits 1002)\n;; 12\n;; >>> (sum_even_digits 1003)\n;; 13\n;; >>>\
    \ (sum_even_digits 1004)\n;; 14\n;; >>> (sum_even_digits 1005)\n;; 15\n;; >>>\
    \ (sum_even_digits 1006)\n;; 16\n;; >>> (sum_even_digits 1007)\n;; 17\n;; >>>\
    \ (sum_even_digits 1008)\n;; 18\n;; >>> (sum_even_digits 1009)\n;; 19\n;; >>>\
    \ (sum_even_digits 1010)\n;; 20\n;; >>> (sum_even_digits 1011)\n;; 21\n;; >>>\
    \ (sum_even_digits 1012)\n;; 22\n;; >>> (sum_even_digits 1013)\n;; 23\n;; >>>\
    \ (sum_even_digits 1014)\n;; 24\n;; >>> (sum_even_digits 1015)\n;; 25\n;; >>>\
    \ (sum_even_digits 1016)\n;; 26\n;; >>> (sum_even_digits 1017)\n;; 27\n;; >>>\
    \ (sum_even_digits 1018)\n;; 28\n;; >>> (sum_even_digits 1019)\n;; 29\n;; >>>\
    \ (sum_even_digits 1020)\n;; 30\n;; >>> (sum_even_digits 1021)\n;; 31\n;; >>>\
    \ (sum_even", "  (let ((i a))\n    (if (<= i b)\n      (list i)\n      (let ((i\
    \ (+ i 1)))\n        (generate_integers i b))))\n)\n\n;; Given a positive integer\
    \ n, return the number of ways you can make a\n;; sequence of n even numbers from\
    \ 2 to n.\n;; For example:\n;; >>> (number_of_ways_to_make_sequence 2)\n;; 2\n\
    ;; >>> (number_of_ways_to_make_sequence 4)\n;; 6\n;; >>> (number_of_ways_to_make_sequence\
    \ 6)\n;; 24\n;; >>> (number_of_ways_to_make_sequence 8)\n;; 120\n;; >>> (number_of_ways_to_make_sequence\
    \ 10)\n;; 720\n;; >>> (number_of_ways_to_make_sequence 12)\n;; 5040\n;; >>> (number_of_ways_to_make_sequence\
    \ 14)\n;; 40320\n;; >>> (number_of_ways_to_make_sequence 16)\n;; 362880\n;; >>>\
    \ (number_of_ways_to_make_sequence 18)\n;; 3628800\n;; >>> (number_of_ways_to_make_sequence\
    \ 20)\n;; 39916800\n;; >>> (number_of_ways_to_make_sequence 22)\n;; 479001600\n\
    ;; >>> (number_of_ways_to_make_sequence 24)\n;; 6227020800\n;; >>> (number_of_ways_to_make_sequence\
    \ 26)\n;; 87178291200\n;; >>> (number_of_ways_to_make_sequence 28)\n;; 1307674368000\n\
    ;; >>> (number_of_ways_to_make_sequence 30)\n;; 20922789888000\n;; >>> (number_of_ways_to_make_sequence\
    \ 32)\n;; 355687428096000\n;; >>> (number_of_ways_to_make_sequence 34)\n;; 6.40E+18\n\
    ;; >>> (number_of_ways_to_make_sequence 36)\n;; 1.58E+21\n;; >>> (number_of_ways_to_make_sequence\
    \ 38)\n;; 2.36E+23\n;; >>> (number_", "  (define (gen-range a b)\n    (if (<=\
    \ a b)\n      (list a)\n      (gen-range (+ a 1) b)))\n  (gen-range a b))\n\n\
    ;; Given a positive integer n, return the sum of the even digits between\n;; 1\
    \ and n, in ascending order.\n;; For example:\n;; >>> (sum-of-even-digits 10)\n\
    ;; 10\n;; >>> (sum-of-even-digits 100)\n;; 100\n;; >>> (sum-of-even-digits 1000)\n\
    ;; 1000\n;; >>> (sum-of-even-digits 10000)\n;; 10000\n;; >>> (sum-of-even-digits\
    \ 100000)\n;; 100000\n;; >>> (sum-of-even-digits 1000000)\n;; 1000000\n;; >>>\
    \ (sum-of-even-digits 10000000)\n;; 10000000\n;; >>> (sum-of-even-digits 100000000)\n\
    ;; 100000000\n;; >>> (sum-of-even-digits 1000000000)\n;; 1000000000\n;; >>> (sum-of-even-digits\
    \ 10000000000)\n;; 10000000000\n;; >>> (sum-of-even-digits 100000000000)\n;; 100000000000\n\
    ;; >>> (sum-of-even-digits 1000000000000)\n;; 1000000000000\n;; >>> (sum-of-even-digits\
    \ 10000000000000)\n;; 10000000000000\n;; >>> (sum-of-even-digits 100000000000000)\n\
    ;; 100000000000000\n;; >>> (sum-of-even-digits 1000000000000000)\n;; 1000000000000000\n\
    ;; >>> (sum-of-even-digits 10000000000000000)\n;; 10000000000000000\n;; >>> (sum-of-even-digits\
    \ 100000000000000000)\n;; 100000000000000000\n;; >>> (sum-of-even-digits 1000000000000000000)\n\
    ;; 1000000000000000000\n;; >>> (sum-of-even-digits 10000000000000000000)\n;; 10000000000000000000\n\
    ;; >>> (sum-of-even-digits 100000000000000000000)\n;; 100000000000000000000\n\
    ;; >>> (sum-of-even-digits 1000000000000000000000)\n;; 1000000000000000000000\n\
    ;; >>> (sum-of-even-digits 10000000000000000000000)\n;; 10000000000000000000000",
  "  (let ((result (list)))\n    (for-each (lambda (x) (append result (list x)))\n\
    \      (range a b)))\n  result)\n\n;; Given a positive integer n, return the sum\
    \ of the digits of n,\n;; in the form a pair (a b), where a is the sum of the\
    \ even digits,\n;; and b is the sum of the odd digits.\n;; For example:\n;; >>>\
    \ (sum_digits 5)\n;; (list 5)\n;; >>> (sum_digits 10)\n;; (list 10)\n;; >>> (sum_digits\
    \ 100)\n;; (list 50)\n;; >>> (sum_digits 1000)\n;; (list 250)\n;; >>> (sum_digits\
    \ 10000)\n;; (list 1250)\n;; >>> (sum_digits 100000)\n;; (list 5250)\n;; >>> (sum_digits\
    \ 1000000)\n;; (list 25250)\n;; >>> (sum_digits 10000000)\n;; (list 251250)\n\
    ;; >>> (sum_digits 100000000)\n;; (list 251250)\n;; >>> (sum_digits 1000000000)\n\
    ;; (list 251250)\n;; >>> (sum_digits 10000000000)\n;; (list 251250)\n;; >>> (sum_digits\
    \ 100000000000)\n;; (list 251250)\n;; >>> (sum_digits 1000000000000)\n;; (list\
    \ 251250)\n;; >>> (sum_digits 10000000000000)\n;; (list 251250)\n;; >>> (sum_digits\
    \ 100000000000000)\n;; (list 251250)\n;; >>> (sum_digits 1000000000000000)\n;;\
    \ (list 251250)\n;; >>> (sum_digits 10000000000000000)\n;; (list 251250)\n;; >>>\
    \ (sum_digits 100000000000000000)\n;; (list 251250)\n;; >>> (sum_digits 1000000000000000000)\n\
    ;; (list 251250)\n;; >>> (sum_digits 10000000000000000000)\n;; (list 251250)\n\
    ;; >>> (sum_digits 100000000000000000000)\n;; (list 251250)\n;; >>> (sum_digits\
    \ 1000000000000000000000)\n;; (list 251250)\n;; >>> (sum_", "  (define (gen-even-digits\
    \ a b)\n    (define (gen-even-digits-rec a b)\n      (if (<= a b)\n        (list\
    \ a)\n        (gen-even-digits-rec (+ a 1)))))\n  (gen-even-digits-rec a b))\n\
    \n;; Given a positive integer n, return the sum of the even digits between\n;;\
    \ 1 and n, in ascending order.\n;; For example:\n;; >>> (sum-even-digits 10)\n\
    ;; 10\n;; >>> (sum-even-digits 100)\n;; 100\n;; >>> (sum-even-digits 1000)\n;;\
    \ 1000\n;; >>> (sum-even-digits 100000)\n;; 100000\n;; >>> (sum-even-digits 1000000)\n\
    ;; 1000000\n;; >>> (sum-even-digits 10000000)\n;; 10000000\n;; >>> (sum-even-digits\
    \ 100000000)\n;; 100000000\n;; >>> (sum-even-digits 1000000000)\n;; 1000000000\n\
    ;; >>> (sum-even-digits 10000000000)\n;; 10000000000\n;; >>> (sum-even-digits\
    \ 100000000000)\n;; 100000000000\n;; >>> (sum-even-digits 1000000000000)\n;; 1000000000000\n\
    ;; >>> (sum-even-digits 10000000000000)\n;; 10000000000000\n;; >>> (sum-even-digits\
    \ 100000000000000)\n;; 100000000000000\n;; >>> (sum-even-digits 1000000000000000)\n\
    ;; 1000000000000000\n;; >>> (sum-even-digits 10000000000000000)\n;; 10000000000000000\n\
    ;; >>> (sum-even-digits 100000000000000000)\n;; 100000000000000000\n;; >>> (sum-even-digits\
    \ 1000000000000000000)\n;; 1000000000000000000\n;; >>> (sum-even-digits 10000000000000000000)\n\
    ;; 10000000000000000000\n;; >>> (sum-even-digits 100000000000000000000)\n;; 100000000000000000000\n\
    ;; >>> (sum-even-digits 1000000000000000000000)\n;; 1000000000000000000000\n;;\
    \ >>> (sum-even-digits 10000000000000000000000)\n;; 10000000000000000000000\n\
    ;; >>> (sum-even-digits 100000000000000000000000)\n;; 100000000000000000000000\n\
    ;; >>> (sum-even-digits 1000000000000000000", "  (let ((n (div a b)))\n    (if\
    \ (<= n 0)\n      (list)\n      (let ((i 0))\n        (while (<= i n)\n      \
    \    (let ((digit (modulo (remainder n i) 10)))\n            (if (= digit 0)\n\
    \              (list digit)\n              (append (list digit) (generate_integers\
    \ (i + 1) (b)))))))))\n)\n", "  (let ((result (list)))\n    (for-each (lambda\
    \ (x) (result (cons x (car result))))\n      (range a b)))\n  result)\n\n;; Given\
    \ a positive integer n, return the sum of the digits of n.\n;; For example:\n\
    ;; >>> (sum_digits 5)\n;; 10\n;; >>> (sum_digits 10)\n;; 10\n;; >>> (sum_digits\
    \ 100)\n;; 100\n;; >>> (sum_digits 1000)\n;; 1000\n;; >>> (sum_digits 100000)\n\
    ;; 100000\n;; >>> (sum_digits 1000000)\n;; 1000000\n;; >>> (sum_digits 10000000)\n\
    ;; 10000000\n;; >>> (sum_digits 100000000)\n;; 100000000\n;; >>> (sum_digits 1000000000)\n\
    ;; 1000000000\n;; >>> (sum_digits 10000000000)\n;; 10000000000\n;; >>> (sum_digits\
    \ 100000000000)\n;; 100000000000\n;; >>> (sum_digits 1000000000000)\n;; 1000000000000\n\
    ;; >>> (sum_digits 10000000000000)\n;; 10000000000000\n;; >>> (sum_digits 100000000000000)\n\
    ;; 100000000000000\n;; >>> (sum_digits 1000000000000000)\n;; 1000000000000000\n\
    ;; >>> (sum_digits 10000000000000000)\n;; 10000000000000000\n;; >>> (sum_digits\
    \ 100000000000000000)\n;; 100000000000000000\n;; >>> (sum_digits 1000000000000000000)\n\
    ;; 1000000000000000000\n;; >>> (sum_digits 10000000000000000000)\n;; 10000000000000000000\n\
    ;; >>> (sum_digits 100000000000000000000)\n;; 100000000000000000000\n;; >>> (sum_digits\
    \ 1000000000000000000000)\n;; 1000000000000000000000\n;; >>> (sum_digits 10000000000000000000000)\n\
    ;; 10000000000000000000000\n;; >>> (sum_digits 100000000000000000000000)\n;; 100000000000000000000000\n\
    ;; >>> (sum_digits 1000000000000000000000000)\n;; 1000000000000000000000000\n\
    ;; >>> (sum_digits 10000000000000000000000000)\n;; 10000000000000000000000000\n\
    ;; >>> (sum_digits 100000000000000000000000000)\n;; 100000000000000000000000000\n\
    ;; >>> (sum_digits 1000000000000000000000000000)\n;; 1000000000000000000000000000\n\
    ;; >>> (sum_digits 10000000000000000000000000000)\n;; 1000000000000000000", " \
    \ (cond\n    [(<= a b) (list)]\n    [(<= a 0) (list 0)]\n    [(<= b 0) (list)]\n\
    \    [(>= a b) (list)]\n    [(>= a 0) (list)]\n    [(>= b 0) (list)]\n    [(=\
    \ a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0) (list)]\n\
    \    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0) (list)]\n    [(= b 0)\
    \ (list)]\n    [(= a b) (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n\
    \    [(= a b) (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b)\
    \ (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n\
    \    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0)\
    \ (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0) (list)]\n\
    \    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0) (list)]\n    [(= b 0)\
    \ (list)]\n    [(= a b) (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n\
    \    [(= a b) (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b)\
    \ (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n\
    \    [(= a 0", "  (cond\n    [(<= a b) (list)]\n    [(<= a 0) (list 0)]\n    [(<=\
    \ b 0) (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(< a b) (cons\
    \ a)]\n    [(< a 0) (cons 0)]\n    [(< b 0) (cons 0)]\n    [(= a 0) (cons)]\n\
    \    [(= b 0) (cons)]\n    [else (cons)]\n  )\n)\n\n;; Given a positive integer\
    \ n, return the sum of the digits of n, in\n;; ascending order. For example:\n\
    ;; >>> (sum_digits 5)\n;; 5\n;; >>> (sum_digits 10)\n;; 10\n;; >>> (sum_digits\
    \ 100)\n;; 100\n;; >>> (sum_digits 1000)\n;; 1000\n;; >>> (sum_digits 100000)\n\
    ;; 100000\n;; >>> (sum_digits 1000000)\n;; 1000000\n;; >>> (sum_digits 10000000)\n\
    ;; 10000000\n;; >>> (sum_digits 100000000)\n;; 100000000\n;; >>> (sum_digits 1000000000)\n\
    ;; 1000000000\n;; >>> (sum_digits 10000000000)\n;; 10000000000\n;; >>> (sum_digits\
    \ 100000000000)\n;; 100000000000\n;; >>> (sum_digits 1000000000000)\n;; 1000000000000\n\
    ;; >>> (sum_digits 10000000000000)\n;; 10000000000000\n;; >>> (sum_digits 100000000000000)\n\
    ;; 100000000000000\n;; >>> (sum_digits 1000000000000000)\n;; 1000000000000000\n\
    ;; >>> (sum_digits 10000000000000000)\n;; 10000000000000000\n;; >>> (sum_digits\
    \ 100000000000000000)\n;; 100000000000000000\n;; >>> (sum_digits 1000000000000000000)\n\
    ;; 1000000000000000000\n;; >>> (sum_digits 10000000000000000000)\n;; 10000000000000000000\n\
    ;; >>> (sum_digits 100000000000000000000)\n;; 100000000000000000000\n;; >>> (sum_digits\
    \ 1000000000000000000000)\n;; 1000000000000000000000\n;; >>> (sum_digits 10000000000000000000000)\n\
    ;; 10000000000000000000000\n;; >>> (sum_dig", "  (if (<= a b)\n    (list)\n  \
    \  (let ((i a))\n      (while (<= i b)\n        (list i)\n        (set! i (+ i\
    \ 1)))))\n)\n\n;; Given a positive integer n, return the sum of the digits of\
    \ n.\n;; For example:\n;; >>> (sum_digits 5)\n;; 5\n;; >>> (sum_digits 10)\n;;\
    \ 10\n;; >>> (sum_digits 100)\n;; 100\n;; >>> (sum_digits 1000)\n;; 1000\n;; >>>\
    \ (sum_digits 100000)\n;; 100000\n;; >>> (sum_digits 1000000)\n;; 1000000\n;;\
    \ >>> (sum_digits 10000000)\n;; 10000000\n;; >>> (sum_digits 100000000)\n;; 100000000\n\
    ;; >>> (sum_digits 1000000000)\n;; 1000000000\n;; >>> (sum_digits 10000000000)\n\
    ;; 10000000000\n;; >>> (sum_digits 100000000000)\n;; 100000000000\n;; >>> (sum_digits\
    \ 1000000000000)\n;; 1000000000000\n;; >>> (sum_digits 10000000000000)\n;; 10000000000000\n\
    ;; >>> (sum_digits 100000000000000)\n;; 100000000000000\n;; >>> (sum_digits 1000000000000000)\n\
    ;; 1000000000000000\n;; >>> (sum_digits 10000000000000000)\n;; 10000000000000000\n\
    ;; >>> (sum_digits 100000000000000000)\n;; 100000000000000000\n;; >>> (sum_digits\
    \ 1000000000000000000)\n;; 1000000000000000000\n;; >>> (sum_digits 10000000000000000000)\n\
    ;; 10000000000000000000\n;; >>> (sum_digits 100000000000000000000)\n;; 100000000000000000000\n\
    ;; >>> (sum_digits 1000000000000000000000)\n;; 1000000000000000000000\n;; >>>\
    \ (sum_digits 10000000000000000000000)\n;; 10000000000000000000000\n;; >>> (sum_digits\
    \ 100000000000000000000000)\n;; 100000000000000000000000\n;; >>> (sum_digits 1000000000000000000000000)\n\
    ;; 1000000000000000000000000\n;; >>> (sum_digits 10000000000000000000000000)\n\
    ;; 10000000000000000000000000\n;; >>> (sum_digits 100000000000000000000000000)\n\
    ;; 100000000000000000000000000\n;; >>> (sum_digits 1000000000000000000000000000)\n\
    ;; 1000000000000000000000000000\n;; >>> (sum_dig", "  (cond\n    [(<= a b) (list)]\n\
    \    [(<= a 0) (list 0)]\n    [(<= b 0) (list)]\n    [(>= a b) (list)]\n    [(>=\
    \ a 0) (list)]\n    [(>= b 0) (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n\
    \    [(= a b) (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b)\
    \ (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n\
    \    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0)\
    \ (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0) (list)]\n\
    \    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0) (list)]\n    [(= b 0)\
    \ (list)]\n    [(= a b) (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n\
    \    [(= a b) (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b)\
    \ (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n\
    \    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0)\
    \ (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0) (list)]\n\
    \    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0", "  (define (gen-evens\
    \ a b)\n    (define (gen-evens-rec a b)\n      (if (<= a b)\n\t(list a)\n\t(gen-evens-rec\
    \ (+ a 1)))))\n  (gen-evens a b))\n\n;; >>> (generate_integers 2 8)\n;; (list\
    \ 2 4 6 8)\n;; >>> (generate_integers 8 2)\n;; (list 2 4 6 8)\n;; >>> (generate_integers\
    \ 10 14)\n;; (list )\n\n;; >>> (generate_integers 2 8)\n;; (list 2 4 6 8)\n;;\
    \ >>> (generate_integers 8 2)\n;; (list 2 4 6 8)\n;; >>> (generate_integers 10\
    \ 14)\n;; (list )\n\n;; >>> (generate_integers 2 8)\n;; (list 2 4 6 8)\n;; >>>\
    \ (generate_integers 8 2)\n;; (list 2 4 6 8)\n;; >>> (generate_integers 10 14)\n\
    ;; (list )\n\n;; >>> (generate_integers 2 8)\n;; (list 2 4 6 8)\n;; >>> (generate_integers\
    \ 8 2)\n;; (list 2 4 6 8)\n;; >>> (generate_integers 10 14)\n;; (list )\n\n;;\
    \ >>> (generate_integers 2 8)\n;; (list 2 4 6 8)\n;; >>> (generate_integers 8\
    \ 2)\n;; (list 2 4 6 8)\n;; >>> (generate_integers 10 14)\n;; (list )\n\n;; >>>\
    \ (generate_integers 2 8)\n;; (list 2 4 6 8)\n;; >>> (generate_integers 8 2)\n\
    ;; (list 2 4 6 8)\n;; >>> (generate_integers 10 14)\n;; (list )\n\n;; >>> (generate_integers\
    \ 2 8)\n;; (list 2 4 6 8)\n;; >>> (generate_integers 8 2)\n;; (list 2 4 6 8)\n\
    ;; >>> (generate_integers 10 14)\n;; (list )\n\n;; >>> (generate_integers 2 8)\n\
    ;; (list 2 4 6 8)\n;; >>> (generate", "  (define (generate-integers a b)\n   \
    \ (define (generate-digit d)\n      (if (< d a)\n        (generate-integers a\
    \ (sub1 d))\n        (generate-integers (sub1 d) b)))\n    (let ((d (generate-digit\
    \ 1)))\n      (cons d (generate-digit 2))))\n  (generate-integers a b))\n\n;;\
    \ Given a positive integer n, return the sum of the even digits between\n;; 1\
    \ and n, in ascending order. For example:\n;; >>> (sum-even-digits 10)\n;; 10\n\
    ;; >>> (sum-even-digits 100)\n;; 10\n;; >>> (sum-even-digits 1000)\n;; 10\n;;\
    \ >>> (sum-even-digits 10000)\n;; 10\n;; >>> (sum-even-digits 100000)\n;; 10\n\
    ;; >>> (sum-even-digits 1000000)\n;; 10\n;; >>> (sum-even-digits 10000000)\n;;\
    \ 10\n;; >>> (sum-even-digits 100000000)\n;; 10\n;; >>> (sum-even-digits 1000000000)\n\
    ;; 10\n;; >>> (sum-even-digits 10000000000)\n;; 10\n;; >>> (sum-even-digits 100000000000)\n\
    ;; 10\n;; >>> (sum-even-digits 1000000000000)\n;; 10\n;; >>> (sum-even-digits\
    \ 10000000000000)\n;; 10\n;; >>> (sum-even-digits 100000000000000)\n;; 10\n;;\
    \ >>> (sum-even-digits 1000000000000000)\n;; 10\n;; >>> (sum-even-digits 10000000000000000)\n\
    ;; 10\n;; >>> (sum-even-digits 100000000000000000)\n;; 10\n;; >>> (sum-even-digits\
    \ 1000000000000000000)\n;; 10\n;; >>> (sum-even-digits 10000000000000000000)\n\
    ;; 10\n;; >>> (sum-even-digits 100000000000000000000)\n;; 10\n;; >>> (sum-even-digits\
    \ 1000000000000000000000)\n;; 10\n;; >>> (sum-even-digits 10000000000000000000000)\n\
    ;; 10\n;; >>> (sum-even-digits 100000000000000000000000)\n;; 10\n;; >>> (sum-even-dig",
  "  (let ((result (list)))\n    (for-each (lambda (i)\n                (if (even?\
    \ i)\n                    (append result i)\n                    (append result\
    \ (number->string (- i 1))))\n                (range a i))\n      (lambda (i)\n\
    \        (if (even? i)\n            (append result i)\n            (append result\
    \ (number->string (- i 1)))))))\n  result)\n", "  (let ((n (abs a)))\n    (if\
    \ (<= n b)\n      (list n)\n      (let ((i 0))\n        (while (<= i n)\n    \
    \      (set! i (+ i 2))\n          (list i)))))\n)\n\n;; Given a positive integer\
    \ n, return the sum of the even digits between\n;; 1 and n, in ascending order.\n\
    ;; For example:\n;; >>> (sum_of_even_digits 10)\n;; (list 6)\n;; >>> (sum_of_even_digits\
    \ 100)\n;; (list 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46\
    \ 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 96 98)\n\
    ;; >>> (sum_of_even_digits 0)\n;; (list )", "  (define (gen-evens a b)\n    (define\
    \ (gen-evens-rec a b)\n      (if (<= a b)\n        (list a)\n        (gen-evens-rec\
    \ (+ a 1) b)))\n    (gen-evens-rec a b)))\n", "  (cond\n    [(<= a b) (list)]\n\
    \    [(<= a 0) (list 0)]\n    [(<= b 0) (list)]\n    [(<= a b) (cons (modulo a\
    \ 2) (generate_integers (add a 1) (sub b 1))) (cons (modulo b 2) (generate_integers\
    \ (add b 1) (sub a 1)))]\n    [else (cons (modulo a 2) (generate_integers (add\
    \ a 1) (sub b 1))) (cons (modulo b 2) (generate_integers (add b 1) (sub a 1)))]\n\
    \  )\n)\n\n;; Given a positive integer n, return the sum of the digits of n.\n\
    ;; For example:\n;; >>> (sum_digits 5)\n;; 5\n;; >>> (sum_digits 10)\n;; 10\n\
    ;; >>> (sum_digits 100)\n;; 100\n;; >>> (sum_digits 1000)\n;; 1000\n;; >>> (sum_digits\
    \ 1001)\n;; 1001\n;; >>> (sum_digits 10001)\n;; 10001\n;; >>> (sum_digits 100001)\n\
    ;; 100001\n;; >>> (sum_digits 1000001)\n;; 1000001\n;; >>> (sum_digits 10000001)\n\
    ;; 10000001\n;; >>> (sum_digits 100000001)\n;; 100000001\n;; >>> (sum_digits 1000000001)\n\
    ;; 1000000001\n;; >>> (sum_digits 10000000101)\n;; 10000000101\n;; >>> (sum_digits\
    \ 100000001001)\n;; 100000001001\n;; >>> (sum_digits 1000000010001)\n;; 1000000010001\n\
    ;; >>> (sum_digits 10000000100001)\n;; 10000000100001\n;; >>> (sum_digits 100000001000001)\n\
    ;; 100000001000001\n;; >>> (sum_digits 1000000010000001)\n;; 1000000010000001\n\
    ;; >>> (sum_digits 10000000100000101)\n;; 10000000100000101\n;; >>> (sum_digits\
    \ 100000001000001001)\n;; 100000001000001001\n;; >>> (", "  (let ((result (make-vector\
    \ 0 (b - a))))\n    (for-each (lambda (i) (vector-set! result i (modulo (vector-ref\
    \ a i) 10)))\n      (range a (b))))\n  result)\n\n;; Given a positive integer\
    \ n, return the number of ways to write n as\n;; a sum of two positive integers.\n\
    ;; For example:\n;; >>> (number_of_ways_to_write_nums 2)\n;; 2\n;; >>> (number_of_ways_to_write_nums\
    \ 3)\n;; 3\n;; >>> (number_of_ways_to_write_nums 4)\n;; 5\n;; >>> (number_of_ways_to_write_nums\
    \ 5)\n;; 10\n;; >>> (number_of_ways_to_write_nums 6)\n;; 15\n;; >>> (number_of_ways_to_write_nums\
    \ 7)\n;; 20\n;; >>> (number_of_ways_to_write_nums 8)\n;; 25\n;; >>> (number_of_ways_to_write_nums\
    \ 9)\n;; 30\n;; >>> (number_of_ways_to_write_nums 10)\n;; 35\n;; >>> (number_of_ways_to_write_nums\
    \ 11)\n;; 40\n;; >>> (number_of_ways_to_write_nums 12)\n;; 45\n;; >>> (number_of_ways_to_write_nums\
    \ 13)\n;; 50\n;; >>> (number_of_ways_to_write_nums 14)\n;; 55\n;; >>> (number_of_ways_to_write_nums\
    \ 15)\n;; 60\n;; >>> (number_of_ways_to_write_nums 16)\n;; 65\n;; >>> (number_of_ways_to_write_nums\
    \ 17)\n;; 70\n;; >>> (number_of_ways_to_write_nums 18)\n;; 75\n;; >>> (number_of_ways_to_write_nums\
    \ 19)\n;; 80\n;; >>> (number_of_ways_to_write_nums 20)\n;; 85\n;; >>> (number_of_ways_to_write_nums\
    \ 21)\n;; 90\n;; >>>", "  (let ((result (make-vector (sub1 a) (sub1 b))))\n  \
    \  (let ((i a))\n      (while (< i b)\n        (set! i (add1 i))\n        (if\
    \ (even? i)\n          (vector-set! result i)\n          (set! i (add1 i))))\n\
    \      result))\n)\n\n;; Given a positive integer n, return the sum of the digits\
    \ of the factorial\n;; of n. For example:\n;; >>> (factorial 5)\n;; 2520\n;; >>>\
    \ (factorial 10)\n;; 3628800\n;; >>> (factorial 0)\n;; 1\n;; >>> (factorial -1)\n\
    ;; 0\n;; >>> (factorial -2)\n;; 0\n;; >>> (factorial -3)\n;; 0\n;; >>> (factorial\
    \ -4)\n;; 0\n;; >>> (factorial -5)\n;; 0\n;; >>> (factorial -6)\n;; 0\n;; >>>\
    \ (factorial -7)\n;; 0\n;; >>> (factorial -8)\n;; 0\n;; >>> (factorial -9)\n;;\
    \ 0\n;; >>> (factorial -10)\n;; 0\n;; >>> (factorial -11)\n;; 0\n;; >>> (factorial\
    \ -12)\n;; 0\n;; >>> (factorial -13)\n;; 0\n;; >>> (factorial -14)\n;; 0\n;; >>>\
    \ (factorial -15)\n;; 0\n;; >>> (factorial -16)\n;; 0\n;; >>> (factorial -17)\n\
    ;; 0\n;; >>> (factorial -18)\n;; 0\n;; >>> (factorial -19)\n;; 0\n;; >>> (factorial\
    \ -20)\n;; 0\n;; >>> (factorial -21)\n;; 0\n;; >>> (factorial -22)\n;; 0\n;; >>>\
    \ (factorial -23)\n;; 0\n;; >>> (factorial -24)\n;; 0\n;; >>> (factorial -25)\n\
    ;; 0\n;; >>> (factorial -26)\n;; 0\n;; >>> (factorial -27)\n;; 0\n;; >>> (factorial\
    \ -28)\n;; 0\n;; >>> (factorial -29)\n;; 0\n;; >>> (factorial -30)\n;; 0\n;; >>>\
    \ (factorial -", "  (define (gen-evens a b)\n    (define (gen-evens-rec a b)\n\
    \      (if (<= a b)\n        (list a)\n        (gen-evens-rec (+ a 1)))))\n  (gen-evens\
    \ a b))\n\n;; Given a positive integer n, return the sum of the even digits between\n\
    ;; 1 and n, in ascending order.\n;; For example:\n;; >>> (sum-even-digits 10)\n\
    ;; 10\n;; >>> (sum-even-digits 100)\n;; 100\n;; >>> (sum-even-digits 1000)\n;;\
    \ 1000\n;; >>> (sum-even-digits 100000)\n;; 100000\n;; >>> (sum-even-digits 1000000)\n\
    ;; 1000000\n;; >>> (sum-even-digits 10000000)\n;; 10000000\n;; >>> (sum-even-digits\
    \ 100000000)\n;; 100000000\n;; >>> (sum-even-digits 1000000000)\n;; 1000000000\n\
    ;; >>> (sum-even-digits 10000000000)\n;; 10000000000\n;; >>> (sum-even-digits\
    \ 100000000000)\n;; 100000000000\n;; >>> (sum-even-digits 1000000000000)\n;; 1000000000000\n\
    ;; >>> (sum-even-digits 10000000000000)\n;; 10000000000000\n;; >>> (sum-even-digits\
    \ 100000000000000)\n;; 100000000000000\n;; >>> (sum-even-digits 1000000000000000)\n\
    ;; 1000000000000000\n;; >>> (sum-even-digits 10000000000000000)\n;; 10000000000000000\n\
    ;; >>> (sum-even-digits 100000000000000000)\n;; 100000000000000000\n;; >>> (sum-even-digits\
    \ 1000000000000000000)\n;; 1000000000000000000\n;; >>> (sum-even-digits 10000000000000000000)\n\
    ;; 10000000000000000000\n;; >>> (sum-even-digits 100000000000000000000)\n;; 100000000000000000000\n\
    ;; >>> (sum-even-digits 1000000000000000000000)\n;; 1000000000000000000000\n;;\
    \ >>> (sum-even-digits 10000000000000000000000)\n;; 10000000000000000000000\n\
    ;; >>> (sum-even-digits 100000000000000000000000)\n;; 100000000000000000000000\n\
    ;; >>> (sum-even-digits 1000000000000000000000000)\n;; 1000000000000000000000000\n\
    ;; >>>", "  (cond\n    [(<= a b) (list)]\n    [(<= a 0) (list 0)]\n    [(<= b\
    \ 0) (list)]\n    [(<= a b)\n      (let ((n (div a 2)))\n        (cons (mod a\
    \ 2)\n          (generate_integers (sub1 n) (sub1 (sub1 n)))))\n      (cons (mod\
    \ a 2)\n        (generate_integers (sub1 (sub1 n)) (sub1 (sub1 (sub1 n)))))\n\
    \      ]\n    )\n)\n", "  (let ((n (if (zero? a) 1 (sub1 a))))\n    (if (zero?\
    \ b)\n      (list)\n      (let ((i (zero? n)))\n        (if (zero? i)\n      \
    \    (list)\n          (list (modulo n 10) (modulo (add1 i) 10))\n          (generate_integers\
    \ (add1 i) (sub1 n))))))))\n", "  (if (<= a b)\n    (list)\n    (let ((n (modulo\
    \ a b)))\n      (if (even? n)\n        (append (list (modulo n 10)) (generate_integers\
    \ (modulo n 10) (modulo n 10)))\n        (generate_integers (modulo n 10) (modulo\
    \ n 10))))))\n\n;; Given a positive integer n, return the sum of the digits of\
    \ n.\n;; For example:\n;; >>> (sum_digits 5)\n;; 5\n;; >>> (sum_digits 10)\n;;\
    \ 10\n;; >>> (sum_digits 100)\n;; 100\n;; >>> (sum_digits 1000)\n;; 1000\n;; >>>\
    \ (sum_digits 100000)\n;; 100000\n;; >>> (sum_digits 1000000)\n;; 1000000\n;;\
    \ >>> (sum_digits 10000000)\n;; 10000000\n;; >>> (sum_digits 100000000)\n;; 100000000\n\
    ;; >>> (sum_digits 1000000000)\n;; 1000000000\n;; >>> (sum_digits 10000000000)\n\
    ;; 10000000000\n;; >>> (sum_digits 100000000000)\n;; 100000000000\n;; >>> (sum_digits\
    \ 1000000000000)\n;; 1000000000000\n;; >>> (sum_digits 10000000000000)\n;; 10000000000000\n\
    ;; >>> (sum_digits 100000000000000)\n;; 100000000000000\n;; >>> (sum_digits 1000000000000000)\n\
    ;; 1000000000000000\n;; >>> (sum_digits 10000000000000000)\n;; 10000000000000000\n\
    ;; >>> (sum_digits 100000000000000000)\n;; 100000000000000000\n;; >>> (sum_digits\
    \ 1000000000000000000)\n;; 1000000000000000000\n;; >>> (sum_digits 10000000000000000000)\n\
    ;; 10000000000000000000\n;; >>> (sum_digits 100000000000000000000)\n;; 100000000000000000000\n\
    ;; >>> (sum_digits 1000000000000000000000)\n;; 1000000000000000000000\n;; >>>\
    \ (sum_digits 10000000000000000000000)\n;; 10000000000000000000000\n;; >>> (sum_digits\
    \ 100000000000000000000000)\n;; 100000000000000000000000\n;; >>> (sum_digits 1000000000000000000000000)\n\
    ;; 1000000000000000000000000\n;; >>> (sum_digits 10000000000000000000000000)\n\
    ;; 10000000000000000000000000\n;; >>> (sum_dig", "  (define (gen-range a b)\n\
    \    (cond\n      [(<= a b) (list)]\n      [(<= a b) (gen-range (add1 a) (sub1\
    \ b))]\n      [(<= a b) (gen-range (add1 a) (sub1 b))]\n      [(<= a b) (gen-range\
    \ (add1 a) (sub1 b))]\n      [(<= a b) (gen-range (add1 a) (sub1 b))]\n      [(<=\
    \ a b) (gen-range (add1 a) (sub1 b))]\n      [(<= a b) (gen-range (add1 a) (sub1\
    \ b))]\n      [(<= a b) (gen-range (add1 a) (sub1 b))]\n      [(<= a b) (gen-range\
    \ (add1 a) (sub1 b))]\n      [(<= a b) (gen-range (add1 a) (sub1 b))]\n      [(<=\
    \ a b) (gen-range (add1 a) (sub1 b))]\n      [(<= a b) (gen-range (add1 a) (sub1\
    \ b))]\n      [(<= a b) (gen-range (add1 a) (sub1 b))]\n      [(<= a b) (gen-range\
    \ (add1 a) (sub1 b))]\n      [(<= a b) (gen-range (add1 a) (sub1 b))]\n      [(<=\
    \ a b) (gen-range (add1 a) (sub1 b))]\n      [(<= a b) (gen-range (add1 a) (sub1\
    \ b))]\n      [(<= a b) (gen-range (add1 a) (sub1 b))]\n      [(<= a b) (gen-range\
    \ (add1 a) (sub1 b))]\n      [(<= a b) (gen-range (add1 a) (sub1 b))]\n      [(<=\
    \ a b) (gen-range (add1 a) (sub1 b))]\n      [(<=", "  (cond ((<= a b) (list))\n\
    \        ((= a 0) (list))\n        ((<= a b)\n          (let ((n (modulo a 10)))\n\
    \            (if (>= n 0)\n                (cons n (generate_integers (add1 a)\
    \ (sub1 b)))\n                (generate_integers (add1 a) (sub1 b))))))\n)\n\n\
    ;; Given a positive integer n, return the sum of the digits of n, in\n;; ascending\
    \ order.\n;; For example:\n;; >>> (sum_digits 5)\n;; 5\n;; >>> (sum_digits 10)\n\
    ;; 10\n;; >>> (sum_digits 100)\n;; 100\n;; >>> (sum_digits 1000)\n;; 1000\n;;\
    \ >>> (sum_digits 100000)\n;; 100000\n;; >>> (sum_digits 1000000)\n;; 1000000\n\
    ;; >>> (sum_digits 10000000)\n;; 10000000\n;; >>> (sum_digits 100000000)\n;; 100000000\n\
    ;; >>> (sum_digits 1000000000)\n;; 1000000000\n;; >>> (sum_digits 10000000000)\n\
    ;; 10000000000\n;; >>> (sum_digits 100000000000)\n;; 100000000000\n;; >>> (sum_digits\
    \ 1000000000000)\n;; 1000000000000\n;; >>> (sum_digits 10000000000000)\n;; 10000000000000\n\
    ;; >>> (sum_digits 100000000000000)\n;; 100000000000000\n;; >>> (sum_digits 1000000000000000)\n\
    ;; 1000000000000000\n;; >>> (sum_digits 10000000000000000)\n;; 10000000000000000\n\
    ;; >>> (sum_digits 100000000000000000)\n;; 100000000000000000\n;; >>> (sum_digits\
    \ 1000000000000000000)\n;; 1000000000000000000\n;; >>> (sum_digits 10000000000000000000)\n\
    ;; 10000000000000000000\n;; >>> (sum_digits 100000000000000000000)\n;; 100000000000000000000\n\
    ;; >>> (sum_digits 1000000000000000000000)\n;; 1000000000000000000000\n;; >>>\
    \ (sum_digits 10000000000000000000000)\n;; 10000000000000000000000\n;; >>> (sum_digits\
    \ 100000000000000000000000)\n;; 100000000000000000000000\n;; >>> (sum_digits 1000000000000000000000000)\n\
    ;; 1000000000000000000000000\n;; >>> (sum_digits 1000000000000000000", "  (let\
    \ ((i (0)))\n    (while (< i b)\n      (let ((digit (modulo (/ i a) 10)))\n  \
    \      (if (= digit 0)\n            (list digit)\n            (append (list digit)\
    \ (generate_integers (i + 1) (i + digit)))))))))\n", "  (cond\n    [(<= a b) (list)]\n\
    \    [(<= a 0) (list 0)]\n    [(<= b 0) (list)]\n    [(<= a b)\n      (let ((n\
    \ (div a 2)))\n        (cons (mod a 2) (generate_integers (sub1 n) (sub1 n))))]\n\
    \    [(<= a 0)\n      (let ((n (div a 2)))\n        (cons (mod a 2) (generate_integers\
    \ (sub1 n) (sub1 n))))]\n    [(<= b 0)\n      (let ((n (div b 2)))\n        (cons\
    \ (mod b 2) (generate_integers (sub1 n) (sub1 n))))]\n    [else\n      (let ((n\
    \ (div b 2)))\n        (cons (mod b 2) (generate_integers (sub1 n) (sub1 n))))]))\n",
  "  (let ((result (make-vector (sub1 a) (sub1 b))))\n    (let ((i 0))\n      (while\
    \ (< i b)\n\t(set! result (append result (modulo (vector-ref a i) 10)))\n\t(set!\
    \ i (add1 i)))))\n  result)\n", "  (let ((result (list)))\n    (for-each (lambda\
    \ (x) (append result (list x)))\n      (range a b)))\n  result)\n\n;; Given a\
    \ positive integer n, return the sum of the digits of n, in\n;; ascending order.\n\
    ;; For example:\n;; >>> (sum_digits 5)\n;; 5\n;; >>> (sum_digits 10)\n;; 10\n\
    ;; >>> (sum_digits 100)\n;; 100\n;; >>> (sum_digits 1000)\n;; 1000\n;; >>> (sum_digits\
    \ 100000)\n;; 100000\n;; >>> (sum_digits 1000000)\n;; 1000000\n;; >>> (sum_digits\
    \ 10000000)\n;; 10000000\n;; >>> (sum_digits 100000000)\n;; 100000000\n;; >>>\
    \ (sum_digits 1000000000)\n;; 1000000000\n;; >>> (sum_digits 10000000000)\n;;\
    \ 10000000000\n;; >>> (sum_digits 100000000000)\n;; 100000000000\n;; >>> (sum_digits\
    \ 1000000000000)\n;; 1000000000000\n;; >>> (sum_digits 10000000000000)\n;; 10000000000000\n\
    ;; >>> (sum_digits 100000000000000)\n;; 100000000000000\n;; >>> (sum_digits 1000000000000000)\n\
    ;; 1000000000000000\n;; >>> (sum_digits 10000000000000000)\n;; 10000000000000000\n\
    ;; >>> (sum_digits 100000000000000000)\n;; 100000000000000000\n;; >>> (sum_digits\
    \ 1000000000000000000)\n;; 1000000000000000000\n;; >>> (sum_digits 10000000000000000000)\n\
    ;; 10000000000000000000\n;; >>> (sum_digits 100000000000000000000)\n;; 100000000000000000000\n\
    ;; >>> (sum_digits 1000000000000000000000)\n;; 1000000000000000000000\n;; >>>\
    \ (sum_digits 10000000000000000000000)\n;; 10000000000000000000000\n;; >>> (sum_digits\
    \ 100000000000000000000000)\n;; 100000000000000000000000\n;; >>> (sum_digits 1000000000000000000000000)\n\
    ;; 1000000000000000000000000\n;; >>> (sum_digits 10000000000000000000000000)\n\
    ;; 10000000000000000000000000\n;; >>> (sum_digits 100000000000000000000000000)\n\
    ;; 100000000000000000000000000\n;; >>> (sum_digits 1000000000000000000000000000)\n\
    ;; 1000000000000000000000000000\n;; >>> (sum_digits 10000000000000000000000000000)",
  "  (cond\n    [(<= a b) (list)]\n    [(<= a 0) (list 0)]\n    [(<= b 0) (list)]\n\
    \    [(<= a b)\n      (let* ([i (modulo a b)])\n        (if (zero? i)\n      \
    \      (list)\n            (cons (modulo (/ i 10)))))\n      (let* ([i (modulo\
    \ a b)])\n        (if (zero? i)\n            (list)\n            (cons (modulo\
    \ (/ i 10)))))\n      (let* ([i (modulo a b)])\n        (if (zero? i)\n      \
    \      (list)\n            (cons (modulo (/ i 10)))))\n      (let* ([i (modulo\
    \ a b)])\n        (if (zero? i)\n            (list)\n            (cons (modulo\
    \ (/ i 10)))))\n      (let* ([i (modulo a b)])\n        (if (zero? i)\n      \
    \      (list)\n            (cons (modulo (/ i 10)))))\n      (let* ([i (modulo\
    \ a b)])\n        (if (zero? i)\n            (list)\n            (cons (modulo\
    \ (/ i 10)))))\n      (let* ([i (modulo a b)])\n        (if (zero? i)\n      \
    \      (list)\n            (cons (modulo (/ i 10)))))\n      (let* ([i (modulo\
    \ a b)])\n        (if (zero? i)\n            (list)\n            (cons (modulo\
    \ (/ i 10)))))\n      (let* ([i (modulo a b)])\n        (if (zero? i)\n      \
    \      (list)\n            (cons (modulo (/ i 10)))))\n      (let* ([i (modulo\
    \ a b)])\n        (if (zero? i)\n            (list)\n            (cons (modulo\
    \ (/ i 10)))))\n      (let* ([i (modulo a b)])\n        (if (zero? i)\n      \
    \      (list)\n            (cons (modulo (/ i 10)))))\n      (let* ([i (modulo\
    \ a b)])\n        (if (zero? i)", "  (cond ((<= a b) (list))\n        ((= a 0)\
    \ (list))\n        ((<= a b)\n          (let ((n (modulo a 10)))\n           \
    \ (if (<= n 0) (list) (cons n (generate_integers (- n 1) (b - 1)))))))\n)\n\n\
    ;; Given a positive integer n, return the sum of the digits of n.\n;; For example:\n\
    ;; >>> (sum_of_digits 2)\n;; 2\n;; >>> (sum_of_digits 10)\n;; 10", "  (cond\n\
    \    [(<= a b) (list)]\n    [(<= a 0) (list 0)]\n    [(<= b 0) (list)]\n    [(<=\
    \ a b)\n      (let* ([i (modulo a b)])\n        (if (>= i 0)\n            (list\
    \ (modulo (/ i 2)))\n            (generate_integers (- a i) (- b i))))]\n    [else\n\
    \      (let* ([i (modulo a b)])\n        (if (>= i 0)\n            (list (modulo\
    \ (/ i 2)))\n            (generate_integers (- a i) (- b i))))]))\n\n;; Given\
    \ a positive integer n, return the number of ways to write n as\n;; a sum of two\
    \ positive integers.\n;; For example:\n;; >>> (count_ways_to_write_nums 1)\n;;\
    \ 1\n;; >>> (count_ways_to_write_nums 2)\n;; 2\n;; >>> (count_ways_to_write_nums\
    \ 3)\n;; 3\n;; >>> (count_ways_to_write_nums 4)\n;; 4\n;; >>> (count_ways_to_write_nums\
    \ 5)\n;; 5\n;; >>> (count_ways_to_write_nums 6)\n;; 6\n;; >>> (count_ways_to_write_nums\
    \ 7)\n;; 7\n;; >>> (count_ways_to_write_nums 8)\n;; 8\n;; >>> (count_ways_to_write_nums\
    \ 9)\n;; 9\n;; >>> (count_ways_to_write_nums 10)\n;; 10\n;; >>> (count_ways_to_write_nums\
    \ 11)\n;; 11\n;; >>> (count_ways_to_write_nums 12)\n;; 12\n;; >>> (count_ways_to_write_nums\
    \ 13)\n;; 13\n;; >>> (count_ways_to_write_nums 14)\n;; 14\n;; >>> (count_ways_to_write_nums\
    \ 15)\n;; 15\n;; >>> (count_ways_to_write_nums 16)\n;; 16\n;; >>> (count_ways_to_write_nums\
    \ 17)\n;; 17\n", "  (let ((result (list)))\n    (for-each (lambda (x) (result\
    \ (cons x (car x)))) (range a b)))\n  result)\n\n;; Given a positive integer n,\
    \ return the number of ways to write n as\n;; a sum of two positive integers.\n\
    ;; For example:\n;; >>> (count_ways_of_nums 1)\n;; 1\n;; >>> (count_ways_of_nums\
    \ 2)\n;; 2\n;; >>> (count_ways_of_nums 3)\n;; 3\n;; >>> (count_ways_of_nums 4)\n\
    ;; 4\n;; >>> (count_ways_of_nums 5)\n;; 5\n;; >>> (count_ways_of_nums 6)\n;; 6\n\
    ;; >>> (count_ways_of_nums 7)\n;; 7\n;; >>> (count_ways_of_nums 8)\n;; 8\n;; >>>\
    \ (count_ways_of_nums 9)\n;; 9\n;; >>> (count_ways_of_nums 10)\n;; 10\n;; >>>\
    \ (count_ways_of_nums 11)\n;; 11\n;; >>> (count_ways_of_nums 12)\n;; 12\n;; >>>\
    \ (count_ways_of_nums 13)\n;; 13\n;; >>> (count_ways_of_nums 14)\n;; 14\n;; >>>\
    \ (count_ways_of_nums 15)\n;; 15\n;; >>> (count_ways_of_nums 16)\n;; 16\n;; >>>\
    \ (count_ways_of_nums 17)\n;; 17\n;; >>> (count_ways_of_nums 18)\n;; 18\n;; >>>\
    \ (count_ways_of_nums 19)\n;; 19\n;; >>> (count_ways_of_nums 20)\n;; 20\n;; >>>\
    \ (count_ways_of_nums 21)\n;; 21\n;; >>> (count_ways_of_nums 22)\n;; 22\n;; >>>\
    \ (count_ways_of_nums 23)\n;; 23\n;; >>> (count_ways_of_nums 24)\n;; 24\n;; >>>\
    \ (count_ways_of_nums 25)\n;; 25\n;; >>> (count_ways_of_nums 26)\n;; 26\n", " \
    \ (cond\n    [(<= a b) (list)]\n    [(<= a 0) (list 0)]\n    [(<= b 0) (list)]\n\
    \    [(>= a b) (list)]\n    [(>= a 0) (list)]\n    [(>= b 0) (list)]\n    [(=\
    \ a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0) (list)]\n\
    \    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0) (list)]\n    [(= b 0)\
    \ (list)]\n    [(= a b) (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n\
    \    [(= a b) (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b)\
    \ (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n\
    \    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0)\
    \ (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0) (list)]\n\
    \    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0) (list)]\n    [(= b 0)\
    \ (list)]\n    [(= a b) (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n\
    \    [(= a b) (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b)\
    \ (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n\
    \    [(= a 0", "  (let ((i a))\n    (while (< i b)\n      (let ((n (modulo i 10)))\n\
    \        (if (= n 0)\n            (list n)\n            (append (list n) (generate_integers\
    \ (i (+ 1 i)) (min a b)))))))))\n", "  (define (gen-even-digits a b)\n    (define\
    \ (gen-even-digits-helper a b)\n      (cond\n        [(<= a b) (list a)]\n   \
    \     [(<= a (modulo b 2)) (gen-even-digits-helper (add a 1) (subtract b 1))]\n\
    \        [else (gen-even-digits-helper a (add a 1))]))\n    (gen-even-digits-helper\
    \ a b))\n  (gen-even-digits a b))\n\n;; Given a positive integer n, return the\
    \ sum of the digits of n, in\n;; ascending order. For example:\n;; >>> (sum-digits\
    \ 5)\n;; 5\n;; >>> (sum-digits 10)\n;; 10\n;; >>> (sum-digits 100)\n;; 100\n;;\
    \ >>> (sum-digits 1000)\n;; 1000\n;; >>> (sum-digits 100000)\n;; 100000\n;; >>>\
    \ (sum-digits 1000000)\n;; 1000000\n;; >>> (sum-digits 10000000)\n;; 10000000\n\
    ;; >>> (sum-digits 100000000)\n;; 100000000\n;; >>> (sum-digits 1000000000)\n\
    ;; 1000000000\n;; >>> (sum-digits 10000000000)\n;; 10000000000\n;; >>> (sum-digits\
    \ 100000000000)\n;; 100000000000\n;; >>> (sum-digits 1000000000000)\n;; 1000000000000\n\
    ;; >>> (sum-digits 10000000000000)\n;; 10000000000000\n;; >>> (sum-digits 100000000000000)\n\
    ;; 100000000000000\n;; >>> (sum-digits 1000000000000000)\n;; 1000000000000000\n\
    ;; >>> (sum-digits 10000000000000000)\n;; 10000000000000000\n;; >>> (sum-digits\
    \ 100000000000000000)\n;; 100000000000000000\n;; >>> (sum-digits 1000000000000000000)\n\
    ;; 1000000000000000000\n;; >>> (sum-digits 10000000000000000000)\n;; 10000000000000000000\n\
    ;; >>> (sum-digits 100000000000000000000)\n;; 100000000000000000000\n;; >>> (sum-digits\
    \ 1000000000000000000000)\n;; 1000000000000000000000\n;; >>> (sum-digits 10000000000000000000000)\n\
    ;; 10000000000000000000000\n;; >>> (sum-dig", "  (cond ((<= a b) (list))\n   \
    \     ((= a 0) (list))\n        ((<= a b)\n          (let ((i (quotient a b)))\n\
    \            (cons (modulo i 10) (generate_integers (add1 i) (sub1 i)))))))\n\n\
    ;; Given a positive integer n, return the sum of the even digits between\n;; 1\
    \ and n, in ascending order.\n;; For example:\n;; >>> (sum_of_even_digits 10)\n\
    ;; (list 2 4 6 8 10)\n;; >>> (sum_of_even_digits 0)\n;; (list )", "  (cond\n \
    \   [(<= a b) (list)]\n    [(<= a 0) (list 0)]\n    [(<= b 0) (list)]\n    [(=\
    \ a 0) (list)]\n    [(= b 0) (list)]\n    [(< a 0) (list)]\n    [(< b 0) (list)]\n\
    \    [(= a b) (list)]\n    [(< a b)\n      (let* ([i (modulo a b)])\n        (if\
    \ (> i 0)\n            (list (modulo (- i 2) b) (modulo (- i 2) b))\n        \
    \    (list (modulo (- i 2) b))))]\n    [(< a b)\n      (let* ([i (modulo a b)])\n\
    \        (if (> i 0)\n            (list (modulo (- i 2) b) (modulo (- i 2) b))\n\
    \            (list (modulo (- i 2) b))))]\n    [(< a b)\n      (let* ([i (modulo\
    \ a b)])\n        (if (> i 0)\n            (list (modulo (- i 2) b) (modulo (-\
    \ i 2) b))\n            (list (modulo (- i 2) b))))]\n    [(< a b)\n      (let*\
    \ ([i (modulo a b)])\n        (if (> i 0)\n            (list (modulo (- i 2) b)\
    \ (modulo (- i 2) b))\n            (list (modulo (- i 2) b))))]\n    [(< a b)\n\
    \      (let* ([i (modulo a b)])\n        (if (> i 0)\n            (list (modulo\
    \ (- i 2) b) (modulo (- i 2) b))\n            (list (modulo (- i 2) b))))]\n \
    \   [(< a b)\n      (let* ([i (modulo a b)])\n        (if (> i 0)\n          \
    \  (list (modulo (- i 2) b) (modulo (- i 2) b))\n            (list (modulo (-\
    \ i 2) b))))]\n    [(< a b)\n      (let* ([i (modulo a b)", "  (let ((i a))\n\
    \    (while (< i b)\n      (let ((j (modulo i 10)))\n        (if (= j 0)\n   \
    \         (list j)\n            (append (list j) (generate_integers (i (+ j 1))\
    \ (i (+ j 2))))))))))\n\n;; Given a positive integer n, return the sum of the\
    \ digits of n.\n;; For example:\n;; >>> (sum_of_digits 5)\n;; 5\n;; >>> (sum_of_digits\
    \ 10)\n;; 10\n;; >>> (sum_of_digits 100)\n;; 100\n;; >>> (sum_of_digits 1000)\n\
    ;; 1000\n;; >>> (sum_of_digits 100000)\n;; 100000\n;; >>> (sum_of_digits 1000000)\n\
    ;; 1000000\n;; >>> (sum_of_digits 10000000)\n;; 10000000\n;; >>> (sum_of_digits\
    \ 100000000)\n;; 100000000\n;; >>> (sum_of_digits 1000000000)\n;; 1000000000\n\
    ;; >>> (sum_of_digits 10000000000)\n;; 10000000000\n;; >>> (sum_of_digits 100000000000)\n\
    ;; 100000000000\n;; >>> (sum_of_digits 1000000000000)\n;; 1000000000000\n;; >>>\
    \ (sum_of_digits 10000000000000)\n;; 10000000000000\n;; >>> (sum_of_digits 100000000000000)\n\
    ;; 100000000000000\n;; >>> (sum_of_digits 1000000000000000)\n;; 1000000000000000\n\
    ;; >>> (sum_of_digits 10000000000000000)\n;; 10000000000000000\n;; >>> (sum_of_digits\
    \ 100000000000000000)\n;; 100000000000000000\n;; >>> (sum_of_digits 1000000000000000000)\n\
    ;; 1000000000000000000\n;; >>> (sum_of_digits 10000000000000000000)\n;; 10000000000000000000\n\
    ;; >>> (sum_of_digits 100000000000000000000)\n;; 100000000000000000000\n;; >>>\
    \ (sum_of_digits 1000000000000000000000)\n;; 1000000000000000000000\n;; >>> (sum_of_digits\
    \ 10000000000000000000000)\n;; 10000000000000000000000\n;; >>> (sum_of_digits\
    \ 100000000000000000000000)\n;; 100000000000000000000000\n;; >>> (sum_of_digits\
    \ 100", "  (let ((n (if (zero? a) (zero? b) (sub1 a) (sub1 b))))\n    (if (zero?\
    \ n)\n      (list)\n      (let ((result (make-vector n 0)))\n        (let ((i\
    \ 0))\n          (while (< i n)\n            (set! result (vector-set! result\
    \ (vector-ref i result))))\n          (vector-set! result n)\n          (set!\
    \ i (add1 i)))))\n    (vector-ref result n)))\n\n;; Given a positive integer n,\
    \ return the sum of the even digits between\n;; 1 and n, in ascending order.\n\
    ;; For example:\n;; >>> (sum_even_digits 10)\n;; 10\n;; >>> (sum_even_digits 100)\n\
    ;; 10\n;; >>> (sum_even_digits 1000)\n;; 100\n;; >>> (sum_even_digits 10000)\n\
    ;; 1000\n;; >>> (sum_even_digits 100000)\n;; 100000\n;; >>> (sum_even_digits 1000000)\n\
    ;; 1000000\n;; >>> (sum_even_digits 10000000)\n;; 10000000\n;; >>> (sum_even_digits\
    \ 100000000)\n;; 100000000\n;; >>> (sum_even_digits 1000000000)\n;; 1000000000\n\
    ;; >>> (sum_even_digits 10000000000)\n;; 10000000000\n;; >>> (sum_even_digits\
    \ 100000000000)\n;; 100000000000\n;; >>> (sum_even_digits 1000000000000)\n;; 1000000000000\n\
    ;; >>> (sum_even_digits 10000000000000)\n;; 10000000000000\n;; >>> (sum_even_digits\
    \ 100000000000000)\n;; 100000000000000\n;; >>> (sum_even_digits 1000000000000000)\n\
    ;; 1000000000000000\n;; >>> (sum_even_digits 10000000000000000)\n;; 10000000000000000\n\
    ;; >>> (sum_even_digits 100000000000000000)\n;; 100000000000000000\n;; >>> (sum_even_digits\
    \ 1000000000000000000)\n;; 1000000000000000000\n;; >>> (sum_even_digits 10000000000000000000)\n\
    ;; 10000000000000000000\n;; >>> (sum_even_digits 100000000000000000000)\n;; 100000000000000000000\n\
    ;; >>> (sum_even_", "  (let ((n (div a b)))\n    (if (<= n 0)\n      (list)\n\
    \      (let ((i 0))\n        (while (<= i n)\n          (let ((digit (modulo (remainder\
    \ (remainder n i) b) 10)))\n            (if (= digit 0)\n              (list digit)\n\
    \              (append (list digit) (generate_integers (remainder n i) (remainder\
    \ n (add i 1))))))))))))\n", "  (define (generate-even-digits n)\n    (if (<=\
    \ n 0)\n      (list)\n      (cons (modulo n 10) (generate-even-digits (quotient\
    \ n 10))))\n    (generate-even-digits (quotient a b))))\n", "  (let ((i a))\n\
    \    (while (< i b)\n      (let ((j (modulo i 10)))\n        (if (= j 0)\n   \
    \         (list j)\n            (append (list j) (generate_integers (i (+ j 1))\
    \ (i (+ j 2))))))))))\n", "  (cond\n    [(<= a b) (list)]\n    [(<= a 0) (list\
    \ 0)]\n    [(<= b 0) (list)]\n    [(<= a b)\n      (let* ([i (modulo a 10)])\n\
    \        (if (zero? i)\n            (list)\n            (cons i\n            \
    \   (generate_integers (add a 1) (subtract b 1)))))]))\n", "  (let ((n (div a\
    \ b)))\n    (if (<= n 0)\n      (list)\n      (let ((i 0))\n        (while (<=\
    \ i n)\n          (let ((digit (modulo (remainder (remainder n i) b) 10)))\n \
    \           (if (= digit 0)\n              (list digit)\n              (append\
    \ (list digit) (generate_integers (a (modulo (remainder (remainder n (add i 1))\
    \ b) 10)) (b (modulo (remainder (remainder n (add i 1)) b) 10))))))))))))\n",
  "  (cond ((<= a b) (list))\n        ((= a 0) (list))\n        ((<= a b)\n      \
    \   (let ((n (modulo a 10)))\n           (if (>= n 0)\n               (cons n\
    \ (generate_integers (add1 a) (sub1 b)))\n               (generate_integers (add1\
    \ a) (sub1 b))))))\n)\n\n;; Given a positive integer n, return the sum of the\
    \ even digits between\n;; 1 and n, in ascending order.\n;; For example:\n;; >>>\
    \ (sum_even_digits 2)\n;; 2\n;; >>> (sum_even_digits 10)\n;; 22\n;; >>> (sum_even_digits\
    \ 100)\n;; 222\n;; >>> (sum_even_digits 1000)\n;; 3222\n;; >>> (sum_even_digits\
    \ 10000)\n;; 33222\n;; >>> (sum_even_digits 100000)\n;; 333222\n;; >>> (sum_even_digits\
    \ 1000000)\n;; 33333222\n;; >>> (sum_even_digits 10000000)\n;; 3333333322\n;;\
    \ >>> (sum_even_digits 100000000)\n;; 333333333222\n;; >>> (sum_even_digits 1000000000)\n\
    ;; 33333333333222\n;; >>> (sum_even_digits 10000000000)\n;; 3333333333333222\n\
    ;; >>> (sum_even_digits 100000000000)\n;; 333333333333333222\n;; >>> (sum_even_digits\
    \ 1000000000000)\n;; 33333333333333333222\n;; >>> (sum_even_digits 10000000000000)\n\
    ;; 333333333333333333322\n;; >>> (sum_even_digits 100000000000000)\n;; 33333333333333333333322\n\
    ;; >>> (sum_even_digits 1000000000000000)\n;; 3333333333333333333333322\n;; >>>\
    \ (sum_even_digits 10000000000000000)\n;; 3333333333333333333333322\n;; >>> (sum_even_digits\
    \ 100000000000000000)\n;; 3333333333333333333333322\n;; >>> (sum_even_digits 1000000000000000000)\n\
    ;; 3333333333333333333333322\n;; >>> (sum_even_digits 10000000000000000000)\n\
    ;; 3333333", "  (define (gen-evens a b)\n    (define (gen-evens-rec a b)\n   \
    \   (if (<= a b)\n\t(list a)\n\t(gen-evens-rec (+ a 1)))))\n  (gen-evens a b))\n\
    \n;; Given a positive integer n, return the sum of the even digits between\n;;\
    \ 1 and n, in ascending order.\n;; For example:\n;; >>> (sum-evens 10)\n;; 10\n\
    ;; >>> (sum-evens 100)\n;; 10\n;; >>> (sum-evens 1000)\n;; 10\n;; >>> (sum-evens\
    \ 10000)\n;; 10\n;; >>> (sum-evens 100000)\n;; 10\n;; >>> (sum-evens 1000000)\n\
    ;; 10\n;; >>> (sum-evens 10000000)\n;; 10\n;; >>> (sum-evens 100000000)\n;; 10\n\
    ;; >>> (sum-evens 1000000000)\n;; 10\n;; >>> (sum-evens 10000000000)\n;; 10\n\
    ;; >>> (sum-evens 100000000000)\n;; 10\n;; >>> (sum-evens 1000000000000)\n;; 10\n\
    ;; >>> (sum-evens 10000000000000)\n;; 10\n;; >>> (sum-evens 100000000000000)\n\
    ;; 10\n;; >>> (sum-evens 1000000000000000)\n;; 10\n;; >>> (sum-evens 10000000000000000)\n\
    ;; 10\n;; >>> (sum-evens 100000000000000000)\n;; 10\n;; >>> (sum-evens 1000000000000000000)\n\
    ;; 10\n;; >>> (sum-evens 10000000000000000000)\n;; 10\n;; >>> (sum-evens 100000000000000000000)\n\
    ;; 10\n;; >>> (sum-evens 1000000000000000000000)\n;; 10\n;; >>> (sum-evens 10000000000000000000000)\n\
    ;; 10\n;; >>> (sum-evens 100000000000000000000000)\n;; 10\n;; >>> (sum-evens 1000000000000000000000000)\n\
    ;; 10\n;; >>> (sum-evens 10000000000000000000000000)\n;; 10\n;; >>> (sum-evens\
    \ 100000000000000000000000000)\n;; 10\n;; >>> (sum-evens 1000000000000000000000000000)\n\
    ;; 10\n;; >>> (sum-evens 10000000000000000000000000000)\n;; 10\n;; >>> (sum-evens",
  "  (let ((result (make-vector (sub1 a) (sub1 b))))\n    (let ((i 0))\n      (while\
    \ (< i (vector-length result))\n        (setf (aref result i) (if (even? (aref\
    \ a i)) (aref b i) (aref a i)))\n        (setf i (add1 i)))))\n  result)\n\n;;\
    \ Given a positive integer n, return the sum of the digits of n.\n;; For example:\n\
    ;; >>> (sum-of-digits 5)\n;; 5\n;; >>> (sum-of-digits 10)\n;; 10\n;; >>> (sum-of-digits\
    \ 100)\n;; 100\n;; >>> (sum-of-digits 1000)\n;; 1000\n;; >>> (sum-of-digits 1001)\n\
    ;; 1001\n;; >>> (sum-of-digits 10001)\n;; 10001\n;; >>> (sum-of-digits 100001)\n\
    ;; 100001\n;; >>> (sum-of-digits 1000001)\n;; 1000001\n;; >>> (sum-of-digits 10000001)\n\
    ;; 10000001\n;; >>> (sum-of-digits 100000001)\n;; 100000001\n;; >>> (sum-of-digits\
    \ 1000000001)\n;; 1000000001\n;; >>> (sum-of-digits 10000000101)\n;; 10000000101\n\
    ;; >>> (sum-of-digits 100000001001)\n;; 100000001001\n;; >>> (sum-of-digits 1000000010001)\n\
    ;; 1000000010001\n;; >>> (sum-of-digits 10000000100001)\n;; 10000000100001\n;;\
    \ >>> (sum-of-digits 100000001000001)\n;; 100000001000001\n;; >>> (sum-of-digits\
    \ 1000000010000001)\n;; 1000000010000001\n;; >>> (sum-of-digits 10000000100000101)\n\
    ;; 10000000100000101\n;; >>> (sum-of-digits 100000001000001001)\n;; 100000001000001001\n\
    ;; >>> (sum-of-digits 1000000010000010101)\n;; 1000000010000010101\n;; >>> (sum-",
  "  (let ((i a))\n    (while (< i b)\n      (let ((j (modulo i 10)))\n        (if\
    \ (= j 0)\n            (list j)\n            (append (list j) (generate_integers\
    \ (i (+ 1 j)) (i (+ 2 j))))))))))\n\n;; Given a positive integer n, return the\
    \ sum of the digits of n.\n;; For example:\n;; >>> (sum_of_digits 5)\n;; 5\n;;\
    \ >>> (sum_of_digits 10)\n;; 10\n;; >>> (sum_of_digits 100)\n;; 100\n;; >>> (sum_of_digits\
    \ 1000)\n;; 1000\n;; >>> (sum_of_digits 100000)\n;; 100000\n;; >>> (sum_of_digits\
    \ 1000000)\n;; 1000000\n;; >>> (sum_of_digits 10000000)\n;; 10000000\n;; >>> (sum_of_digits\
    \ 100000000)\n;; 100000000\n;; >>> (sum_of_digits 1000000000)\n;; 1000000000\n\
    ;; >>> (sum_of_digits 10000000000)\n;; 10000000000\n;; >>> (sum_of_digits 100000000000)\n\
    ;; 100000000000\n;; >>> (sum_of_digits 1000000000000)\n;; 1000000000000\n;; >>>\
    \ (sum_of_digits 10000000000000)\n;; 10000000000000\n;; >>> (sum_of_digits 100000000000000)\n\
    ;; 100000000000000\n;; >>> (sum_of_digits 1000000000000000)\n;; 1000000000000000\n\
    ;; >>> (sum_of_digits 10000000000000000)\n;; 10000000000000000\n;; >>> (sum_of_digits\
    \ 100000000000000000)\n;; 100000000000000000\n;; >>> (sum_of_digits 1000000000000000000)\n\
    ;; 1000000000000000000\n;; >>> (sum_of_digits 10000000000000000000)\n;; 10000000000000000000\n\
    ;; >>> (sum_of_digits 100000000000000000000)\n;; 100000000000000000000\n;; >>>\
    \ (sum_of_digits 1000000000000000000000)\n;; 1000000000000000000000\n;; >>> (sum_of_digits\
    \ 10000000000000000000000)\n;; 10000000000000000000000\n;; >>> (sum_of_digits\
    \ 100000000000000000000000)\n;; 100000000000000000000000\n;; >>> (sum_of_digits\
    \ 100", "  (define (gen-range a b)\n    (cond ((<= a b) (list))\n      ((= a b)\
    \ (list))\n      ((< a 0) (list))\n      ((<= b 0) (list))\n      ((= b 0) (list))\n\
    \      ((<= a b)\n        (let ((i (gen-range (- a 1) (- b 1))))\n          (list\
    \ (map (lambda (x) (* 10 x)) i))))\n      (else\n        (let ((i (gen-range (-\
    \ a 1) (- b 1))))\n          (let ((j (gen-range (- b 1) (- a 1))))\n        \
    \    (let ((k (gen-range (- a 1) (- b 1))))\n              (let ((l (gen-range\
    \ (- b 1) (- a 1))))\n                (list (map (lambda (x) (* 10 x)) i)\n  \
    \                    (map (lambda (x) (* 10 x)) j)\n                      (map\
    \ (lambda (x) (* 10 x)) k)\n                      (map (lambda (x) (* 10 x)) l))))))))))\n",
  "  (if (<= a b)\n    (list)\n    (let ((n (modulo a 10)))\n      (if (= n 0)\n \
    \       (list)\n        (cons n)\n        (generate_integers (a - 1) (b - 1))))))\n\
    \n;; Given a positive integer n, return the sum of the digits of n.\n;; For example:\n\
    ;; >>> (sum_digits 5)\n;; 5\n;; >>> (sum_digits 10)\n;; 10\n;; >>> (sum_digits\
    \ 100)\n;; 100\n;; >>> (sum_digits 1000)\n;; 1000\n;; >>> (sum_digits 100000)\n\
    ;; 100000\n;; >>> (sum_digits 1000000)\n;; 1000000\n;; >>> (sum_digits 10000000)\n\
    ;; 10000000\n;; >>> (sum_digits 100000000)\n;; 100000000\n;; >>> (sum_digits 1000000000)\n\
    ;; 1000000000\n;; >>> (sum_digits 10000000000)\n;; 10000000000\n;; >>> (sum_digits\
    \ 100000000000)\n;; 100000000000\n;; >>> (sum_digits 1000000000000)\n;; 1000000000000\n\
    ;; >>> (sum_digits 10000000000000)\n;; 10000000000000\n;; >>> (sum_digits 100000000000000)\n\
    ;; 100000000000000\n;; >>> (sum_digits 1000000000000000)\n;; 1000000000000000\n\
    ;; >>> (sum_digits 10000000000000000)\n;; 10000000000000000\n;; >>> (sum_digits\
    \ 100000000000000000)\n;; 100000000000000000\n;; >>> (sum_digits 1000000000000000000)\n\
    ;; 1000000000000000000\n;; >>> (sum_digits 10000000000000000000)\n;; 10000000000000000000\n\
    ;; >>> (sum_digits 100000000000000000000)\n;; 100000000000000000000\n;; >>> (sum_digits\
    \ 1000000000000000000000)\n;; 1000000000000000000000\n;; >>> (sum_digits 10000000000000000000000)\n\
    ;; 10000000000000000000000\n;; >>> (sum_digits 100000000000000000000000)\n;; 100000000000000000000000\n\
    ;; >>> (sum_digits 1000000000000000000000000)\n;; 1000000000000000000000000\n\
    ;; >>> (sum_digits 10000000000000000000000000)\n;; 10000000000000000000000000\n\
    ;; >>> (sum_digits 100000000000000000000000000)\n;; 100000000000000000000000000\n\
    ;; >>> (sum_digits 1000000000000000000000000000", "  (define (gen-range a b)\n\
    \    (if (<= a b)\n      (list a)\n      (gen-range (+ a 1) b)))\n  (gen-range\
    \ a b))\n", "  (let ((n (if (zero? a) (zero? b) (abs a) (abs b))))\n    (if (zero?\
    \ n)\n      (list)\n      (let ((i 0))\n        (while (< i n)\n          (let\
    \ ((digit (modulo (remainder n i) 10)))\n            (if (even? digit)\n     \
    \         (list digit)\n              (append (list digit) (generate_integers\
    \ (i + 1) (n - 1))))\n            (setq i (i + 1)))\n          (append (list 0)\
    \ (generate_integers (i + 1) (n - 1)))))))\n\n;; Given a positive integer n, return\
    \ the sum of the digits of n, in\n;; ascending order.\n;; For example:\n;; >>>\
    \ (sum_digits 5)\n;; 5\n;; >>> (sum_digits 10)\n;; 10\n;; >>> (sum_digits 100)\n\
    ;; 101\n;; >>> (sum_digits 1000)\n;; 1001\n;; >>> (sum_digits 100000)\n;; 100001\n\
    ;; >>> (sum_digits 1000000)\n;; 1000001\n;; >>> (sum_digits 10000000)\n;; 10000001\n\
    ;; >>> (sum_digits 100000000)\n;; 100000001\n;; >>> (sum_digits 1000000000)\n\
    ;; 1000000001\n;; >>> (sum_digits 10000000000)\n;; 10000000001\n;; >>> (sum_digits\
    \ 100000000000)\n;; 100000000001\n;; >>> (sum_digits 1000000000000)\n;; 1000000000001\n\
    ;; >>> (sum_digits 10000000000000)\n;; 10000000000001\n;; >>> (sum_digits 100000000000000)\n\
    ;; 100000000000001\n;; >>> (sum_digits 1000000000000000)\n;; 1000000000000001\n\
    ;; >>> (sum_digits 10000000000000000)\n;; 10000000000000001\n;; >>> (sum_digits\
    \ 100000000000000000)\n;; 100000000000000001\n;; >>> (sum_digits 1000000000000000000)\n\
    ;; 1000000000000000001\n;; >>> (sum_digits 10000000000000000000)\n;; 1000000000000000001\n\
    ;; >>> (sum_digits 100000000000000000000)\n;; 1000000000000000001\n;; >>> (sum_digits\
    \ 1000000000000000000000)", "  (let ((i a))\n    (while (< i b)\n      (let ((j\
    \ (quotient i 2)))\n        (if (= j 0)\n            (list i)\n            (append\
    \ (list i) (generate_integers (add 1 i) (sub 1 j)))))))))\n\n;; Given a positive\
    \ integer n, return the sum of the first n even\n;; digits of the Fibonacci sequence.\n\
    ;; For example:\n;; >>> (sum_of_first_n_fibonacci_digits 5)\n;; (list 5)\n;; >>>\
    \ (sum_of_first_n_fibonacci_digits 10)\n;; (list 55)\n;; >>> (sum_of_first_n_fibonacci_digits\
    \ 20)\n;; (list 6765)\n;; >>> (sum_of_first_n_fibonacci_digits 30)\n;; (list 75025)\n\
    ;; >>> (sum_of_first_n_fibonacci_digits 40)\n;; (list 1023456789101112131415)\n\
    ;; >>> (sum_of_first_n_fibonacci_digits 50)\n;; (list 14423406985175258880037006689)\n\
    ;; >>> (sum_of_first_n_fibonacci_digits 100)\n;; (list 14423406985175258880037006689)\n\
    ;; >>> (sum_of_first_n_fibonacci_digits 1000)\n;; (list 14423406985175258880037006689)\n\
    ;; >>> (sum_of_first_n_fibonacci_digits 10000)\n;; (list 14423406985175258880037006689)\n\
    ;; >>> (sum_of_first_n_fibonacci_digits 100000)\n;; (list 14423406985175258880037006689)\n\
    ;; >>> (sum_of_first_n_fibonacci_digits 1000000)\n;; (list 14423406985175258880037006689)\n\
    ;; >>> (sum_of_first_n_fibonacci_digits 10000000)\n;; (list 144234069", "  (let\
    \ ((result (list)))\n    (for-each (lambda (x) (result (append result x)))\n \
    \     (range a b)))\n  result)\n\n;; Given a positive integer n, return the sum\
    \ of the even digits between\n;; 1 and n, in ascending order.\n;; For example:\n\
    ;; >>> (sum_of_even_digits 10)\n;; 10\n;; >>> (sum_of_even_digits 100)\n;; 200\n\
    ;; >>> (sum_of_even_digits 1000)\n;; 2000\n;; >>> (sum_of_even_digits 10000)\n\
    ;; 20000\n;; >>> (sum_of_even_digits 100000)\n;; 200000\n;; >>> (sum_of_even_digits\
    \ 1000000)\n;; 2000000\n;; >>> (sum_of_even_digits 10000000)\n;; 20000000\n;;\
    \ >>> (sum_of_even_digits 100000000)\n;; 200000000\n;; >>> (sum_of_even_digits\
    \ 1000000000)\n;; 2000000000\n;; >>> (sum_of_even_digits 10000000000)\n;; 20000000000\n\
    ;; >>> (sum_of_even_digits 100000000000)\n;; 200000000000\n;; >>> (sum_of_even_digits\
    \ 1000000000000)\n;; 2000000000000\n;; >>> (sum_of_even_digits 10000000000000)\n\
    ;; 20000000000000\n;; >>> (sum_of_even_digits 100000000000000)\n;; 200000000000000\n\
    ;; >>> (sum_of_even_digits 1000000000000000)\n;; 2000000000000000\n;; >>> (sum_of_even_digits\
    \ 10000000000000000)\n;; 20000000000000000\n;; >>> (sum_of_even_digits 100000000000000000)\n\
    ;; 200000000000000000\n;; >>> (sum_of_even_digits 1000000000000000000)\n;; 2000000000000000000\n\
    ;; >>> (sum_of_even_digits 10000000000000000000)\n;; 20000000000000000000\n;;\
    \ >>> (sum_of_even_digits 100000000000000000000)\n;; 200000000000000000000\n;;\
    \ >>> (sum_of_even_digits 1000000000000000000000)\n;; 2000000000000000000000\n\
    ;; >>> (sum_of_even_digits 10000000000000000000000)\n;; 20000000000000000000000\n\
    ;; >>> (sum_of_", "  (define (gen-evens a b)\n    (define (gen-evens-rec a b)\n\
    \      (if (<= a b)\n        (list a)\n        (gen-evens-rec (+ a 1)))))\n  (gen-evens\
    \ a b))\n\n;; Given a positive integer n, return the sum of the even digits between\n\
    ;; 1 and n, in ascending order.\n;; For example:\n;; >>> (sum-even-digits 10)\n\
    ;; 10\n;; >>> (sum-even-digits 100)\n;; 10\n;; >>> (sum-even-digits 1000)\n;;\
    \ 10\n;; >>> (sum-even-digits 1001)\n;; 11\n;; >>> (sum-even-digits 10001)\n;;\
    \ 11\n;; >>> (sum-even-digits 100001)\n;; 11\n;; >>> (sum-even-digits 1000001)\n\
    ;; 12\n;; >>> (sum-even-digits 10000001)\n;; 12\n;; >>> (sum-even-digits 100000001)\n\
    ;; 12\n;; >>> (sum-even-digits 1000000001)\n;; 12\n;; >>> (sum-even-digits 10000000101)\n\
    ;; 12\n;; >>> (sum-even-digits 100000001001)\n;; 12\n;; >>> (sum-even-digits 1000000010001)\n\
    ;; 12\n;; >>> (sum-even-digits 10000000100001)\n;; 12\n;; >>> (sum-even-digits\
    \ 100000001000001)\n;; 12\n;; >>> (sum-even-digits 1000000010000001)\n;; 12\n\
    ;; >>> (sum-even-digits 10000000100000101)\n;; 12\n;; >>> (sum-even-digits 100000001000001001)\n\
    ;; 12\n;; >>> (sum-even-digits 1000000010000010001)\n;; 12\n;; >>> (sum-even-digits\
    \ 10000000100000100001)\n;; 12\n;; >>> (sum-even-digits 100000001000001000001)\n\
    ;; 12\n;; >>> (sum-even-digits 10000000100000100000101)\n;; 12\n;; >>> (sum-even-digits\
    \ 100000001000001000001001)\n;;", "  (cond ((<= a b) (list))\n        ((= a 0)\
    \ (list))\n        ((<= a b)\n         (let ((i (quotient a b)))\n           (if\
    \ (<= i 2)\n             (list (quotient a b))\n             (generate_integers\
    \ (quotient a b) (quotient a b) (quotient a b)))))))\n", "  (let ((n (abs a)))\n\
    \    (if (<= n b)\n      (list n)\n      (let ((i 0))\n        (while (<= i n)\n\
    \          (set! i (+ i 1))\n          (if (= i a)\n            (list)\n     \
    \       (list i))))))))\n", "  (let ((n (if (<= a b) (sub1 a) (sub1 b))))\n  \
    \  (if (<= n 0)\n      (list)\n      (cons (modulo n 10) (generate_integers (add1\
    \ n) (sub1 n))))))\n", "  (cond\n    [(<= a b) (list)]\n    [(<= a 0) (list 0)]\n\
    \    [(<= b 0) (list)]\n    [(<= a b) (list)]\n    [(<= a 0) (list)]\n    [(<=\
    \ b 0) (list)]\n    [(<= a b) (list)]\n    [(<= a 0) (list 0)]\n    [(<= b 0)\
    \ (list 0)]\n    [(<= a b) (list)]\n    [(<= a 0) (list)]\n    [(<= b 0) (list)]\n\
    \    [(<= a b) (list)]\n    [(<= a 0) (list 0)]\n    [(<= b 0) (list 0)]\n   \
    \ [(<= a b) (list)]\n    [(<= a 0) (list)]\n    [(<= b 0) (list)]\n    [(<= a\
    \ b) (list)]\n    [(<= a 0) (list 0)]\n    [(<= b 0) (list 0)]\n    [(<= a b)\
    \ (list)]\n    [(<= a 0) (list)]\n    [(<= b 0) (list)]\n    [(<= a b) (list)]\n\
    \    [(<= a 0) (list 0)]\n    [(<= b 0) (list 0)]\n    [(<= a b) (list)]\n   \
    \ [(<= a 0) (list)]\n    [(<= b 0) (list)]\n    [(<= a b) (list)]\n    [(<= a\
    \ 0) (list 0)]\n    [(<= b 0) (list 0)]\n    [(<= a b) (list)]\n    [(<= a 0)\
    \ (list)]\n    [(<= b 0) (list)]\n    [(<= a b) (list)]\n    [(<= a 0) (list 0)]\n\
    \    [(<= b 0) (list 0)]\n    [(<= a b) (list)]\n    [(<= a 0) (list)]\n    [(",
  "  (let ((result (make-vector 0 (sub1 a))))\n    (for-each (lambda (i) (vector-set!\
    \ result i (modulo (vector-ref a i) 10)))\n      (range a b)))\n  result)\n",
  "  (cond\n    [(<= a b) (list)]\n    [(<= a 0) (list 0)]\n    [(<= b 0) (list)]\n\
    \    [(<= a b)\n      (let ((i (generate_integers (- a 1) (- b 1))))\n       \
    \ (list (car i) (cdr i)))\n      (let ((i (generate_integers (- a 1) (- b 1))))\n\
    \        (list (car i) (cdr i)))\n      (let ((i (generate_integers (- a 1) (-\
    \ b 1))))\n        (list (car i) (cdr i)))\n      (let ((i (generate_integers\
    \ (- a 1) (- b 1))))\n        (list (car i) (cdr i)))\n      (let ((i (generate_integers\
    \ (- a 1) (- b 1))))\n        (list (car i) (cdr i)))\n      (let ((i (generate_integers\
    \ (- a 1) (- b 1))))\n        (list (car i) (cdr i)))\n      (let ((i (generate_integers\
    \ (- a 1) (- b 1))))\n        (list (car i) (cdr i)))\n      (let ((i (generate_integers\
    \ (- a 1) (- b 1))))\n        (list (car i) (cdr i)))\n      (let ((i (generate_integers\
    \ (- a 1) (- b 1))))\n        (list (car i) (cdr i)))\n      (let ((i (generate_integers\
    \ (- a 1) (- b 1))))\n        (list (car i) (cdr i)))\n      (let ((i (generate_integers\
    \ (- a 1) (- b 1))))\n        (list (car i) (cdr i)))\n      (let ((i (generate_integers\
    \ (- a 1) (- b 1))))\n        (list (car i) (cdr i)))\n      (let ((i (generate_integers\
    \ (- a 1) (- b 1))))\n        (list (car i) (cdr i)))\n      (let ((i (generate_integers\
    \ (- a 1) (- b 1))))\n        (list (car i) (cdr i)))\n", "  (define (generate-integers\
    \ a b)\n    (define (generate-even-digits a b)\n      (define (generate-even-digits-helper\
    \ a b)\n        (cond\n          [(<= a b) (list a)]\n          [(<= a (modulo\
    \ b 2)) (cons (modulo a 2) (generate-even-digits-helper (modulo a 2) (modulo b\
    \ 2)))]\n          [else (generate-even-digits-helper a (modulo b 2))]))\n   \
    \ (generate-even-digits-helper a b)))\n  (generate-even-digits a b)))\n", "  (let\
    \ ((result (list)))\n    (for-each (lambda (x) (append result (list x)))\n   \
    \   (range a b)))\n  result)\n\n;; Given a positive integer n, return the sum\
    \ of the digits of n.\n;; For example:\n;; >>> (sum_of_digits 2)\n;; 2\n;; >>>\
    \ (sum_of_digits 10)\n;; 10\n;; >>> (sum_of_digits 100)\n;; 100", "  (let ((n\
    \ (div a b)))\n    (if (<= n 0)\n      (list)\n      (let ((i 0))\n        (while\
    \ (<= i n)\n          (let ((digit (modulo (remainder n i) 10)))\n           \
    \ (if (= digit 0)\n              (list digit)\n              (append (list digit)\
    \ (generate_integers (i + 1) (a + 1)))))))))\n)\n", "  (let ((result (list)))\n\
    \    (for-each (lambda (i)\n                (if (even? i)\n                  \
    \  (append result (list i))\n                    ()))\n      (range a b)))\n \
    \ result)\n", "  (let ((n (b - a)))\n    (if (<= 0 n)\n      (list)\n      (let\
    \ ((i 0))\n        (while (<= i n)\n          (let ((digit (modulo (/ i 10) 10)))\n\
    \            (list digit)\n            (set! i (+ i 1)))\n          )\n      \
    \  )\n      )\n    )\n  )\n)\n\n;; Given a positive integer n, return the sum\
    \ of the digits of n.\n;; For example:\n;; >>> (sum_of_digits 5)\n;; 5\n;; >>>\
    \ (sum_of_digits 10)\n;; 10\n;; >>> (sum_of_digits 100)\n;; 100\n;; >>> (sum_of_digits\
    \ 1000)\n;; 1000\n;; >>> (sum_of_digits 10000)\n;; 10000\n;; >>> (sum_of_digits\
    \ 100000)\n;; 100000\n;; >>> (sum_of_digits 1000000)\n;; 1000000\n;; >>> (sum_of_digits\
    \ 10000000)\n;; 10000000\n;; >>> (sum_of_digits 100000000)\n;; 100000000\n;; >>>\
    \ (sum_of_digits 1000000000)\n;; 1000000000\n;; >>> (sum_of_digits 10000000000)\n\
    ;; 10000000000\n;; >>> (sum_of_digits 100000000000)\n;; 100000000000\n;; >>> (sum_of_digits\
    \ 1000000000000)\n;; 1000000000000\n;; >>> (sum_of_digits 10000000000000)\n;;\
    \ 10000000000000\n;; >>> (sum_of_digits 100000000000000)\n;; 100000000000000\n\
    ;; >>> (sum_of_digits 1000000000000000)\n;; 1000000000000000\n;; >>> (sum_of_digits\
    \ 10000000000000000)\n;; 10000000000000000\n;; >>> (sum_of_digits 100000000000000000)\n\
    ;; 100000000000000000\n;; >>> (sum_of_digits 1000000000000000000)\n;; 1000000000000000000\n\
    ;; >>> (sum_of_digits 10000000000000000000)\n;; 10000000000000000000\n;; >>> (sum_of_digits\
    \ 100000000000000000000)\n;; 100000000000000000000\n;; >>> (sum_of_digits 1000000000000000000000)\n\
    ;; 1000000000000000000000\n;; >>> (sum_of_digits 10000000000000000000000)", " \
    \ (define (gen-even-digits a b)\n    (define (gen-even-digit a b)\n      (cond\n\
    \        [(<= a b) (list a)]\n        [(= a b) (gen-even-digit (sub1 a) b)]\n\
    \        [else (gen-even-digit a (sub1 b))]))\n    (gen-even-digit a b))\n  (gen-even-digits\
    \ a b))\n\n;; Given a positive integer n, return the sum of the even digits between\n\
    ;; 1 and n, in ascending order. For example:\n;; >>> (sum-even-digits 10)\n;;\
    \ (list 2 4 6 8 10)\n;; >>> (sum-even-digits 100)\n;; (list 2 4 6 8 10 100)\n\
    ;; >>> (sum-even-digits 1000)\n;; (list 2 4 6 8 10 100 1000)\n;; >>> (sum-even-digits\
    \ 1001)\n;; (list )", "  (define (generate_even_digits n)\n    (if (<= n 0)\n\
    \      (list)\n      (cons (modulo n 10) (generate_even_digits (sub1 n))))\n \
    \   (generate_even_digits (sub1 a))))\n", "  (let ((result (make-vector 0 (sub1\
    \ a))))\n    (for-each (lambda (i) (set-car! result i)) (range a b))\n    result))\n\
    \n;; Given a positive integer n, return the sum of the even digits between\n;;\
    \ 1 and n, in ascending order.\n;; For example:\n;; >>> (sum_even_digits 1)\n\
    ;; 2\n;; >>> (sum_even_digits 10)\n;; 22\n;; >>> (sum_even_digits 100)\n;; 222\n\
    ;; >>> (sum_even_digits 1000)\n;; 2224\n;; >>> (sum_even_digits 10000)\n;; 22224\n\
    ;; >>> (sum_even_digits 100000)\n;; 222244\n;; >>> (sum_even_digits 1000000)\n\
    ;; 2222444\n;; >>> (sum_even_digits 10000000)\n;; 22224444\n;; >>> (sum_even_digits\
    \ 100000000)\n;; 222244444\n;; >>> (sum_even_digits 1000000000)\n;; 2222444444\n\
    ;; >>> (sum_even_digits 10000000000)\n;; 22224444444\n;; >>> (sum_even_digits\
    \ 100000000000)\n;; 222244444444\n;; >>> (sum_even_digits 1000000000000)\n;; 2222444444444\n\
    ;; >>> (sum_even_digits 10000000000000)\n;; 22224444444444\n;; >>> (sum_even_digits\
    \ 100000000000000)\n;; 222244444444444\n;; >>> (sum_even_digits 1000000000000000)\n\
    ;; 2222444444444444\n;; >>> (sum_even_digits 10000000000000000)\n;; 22224444444444444\n\
    ;; >>> (sum_even_digits 100000000000000000)\n;; 222244444444444444\n;; >>> (sum_even_digits\
    \ 1000000000000000000)\n;; 2222444444444444444\n;; >>> (sum_even_digits 10000000000000000000)\n\
    ;; 22224444444444444444\n;; >>> (sum_even_digits 10000000000000000000)\n;; 22224444444444444444\n\
    ;; >>> (sum_even_digits 10000000000000000000", "  (define (gen-range a b)\n  \
    \  (if (<= a b)\n      (list a)\n      (gen-range (+ a 1) b)))\n  (gen-range a\
    \ b))\n\n;; Given a positive integer n, return the number of ways you can make\n\
    ;; change by n cents.\n;; For example:\n;; >>> (change-cents 5)\n;; 5\n;; >>>\
    \ (change-cents 10)\n;; 10\n;; >>> (change-cents 25)\n;; 20\n;; >>> (change-cents\
    \ 100)\n;; 200\n;; >>> (change-cents 500)\n;; 400\n;; >>> (change-cents 1000)\n\
    ;; 800\n;; >>> (change-cents 5000)\n;; 4000\n;; >>> (change-cents 10000)\n;; 8000\n\
    ;; >>> (change-cents 50000)\n;; 40000\n;; >>> (change-cents 100000)\n;; 80000\n\
    ;; >>> (change-cents 500000)\n;; 400000\n;; >>> (change-cents 1000000)\n;; 800000\n\
    ;; >>> (change-cents 5000000)\n;; 4000000\n;; >>> (change-cents 10000000)\n;;\
    \ 8000000\n;; >>> (change-cents 50000000)\n;; 40000000\n;; >>> (change-cents 100000000)\n\
    ;; 80000000\n;; >>> (change-cents 500000000)\n;; 400000000\n;; >>> (change-cents\
    \ 1000000000)\n;; 800000000\n;; >>> (change-cents 5000000000)\n;; 4000000000\n\
    ;; >>> (change-cents 10000000000)\n;; 8000000000\n;; >>> (change-cents 50000000000)\n\
    ;; 40000000000\n;; >>> (change-cents 1000000000000)\n;; 80000000000\n;; >>> (change-cents\
    \ 50000000000000)\n;; 40000000000000\n;; >>> (change-cents 10000000000000)\n;;\
    \ 80000000000000\n;; >>> (change-cents 500000000000000)\n;; 400000000000000\n\
    ;; >>> (change-cents 100000000000000)\n;; 800000000000000\n;; >>> (change-cents\
    \ 5000000000000000)\n;; 4000000000000000\n;; >>> (change-cents 1000000000000000)\n\
    ;; 8000000000000000\n;; >>> (change-cents 50000000000000000)\n;; 4", "  (let ((result\
    \ (list)))\n    (for-each (lambda (i)\n                (if (even? i)\n       \
    \             (append result (list i))\n                    ()))\n      (range\
    \ a b)))\n  result)\n\n;; Given a positive integer n, return the sum of the even\
    \ digits between\n;; 1 and n, in ascending order.\n;; For example:\n;; >>> (sum_even_digits\
    \ 10)\n;; 10\n;; >>> (sum_even_digits 100)\n;; 10\n;; >>> (sum_even_digits 1000)\n\
    ;; 10\n;; >>> (sum_even_digits 1001)\n;; 11\n;; >>> (sum_even_digits 1002)\n;;\
    \ 12\n;; >>> (sum_even_digits 1003)\n;; 13\n;; >>> (sum_even_digits 1004)\n;;\
    \ 14\n;; >>> (sum_even_digits 1005)\n;; 15\n;; >>> (sum_even_digits 1006)\n;;\
    \ 16\n;; >>> (sum_even_digits 1007)\n;; 17\n;; >>> (sum_even_digits 1008)\n;;\
    \ 18\n;; >>> (sum_even_digits 1009)\n;; 19\n;; >>> (sum_even_digits 1010)\n;;\
    \ 20\n;; >>> (sum_even_digits 1011)\n;; 21\n;; >>> (sum_even_digits 1012)\n;;\
    \ 22\n;; >>> (sum_even_digits 1013)\n;; 23\n;; >>> (sum_even_digits 1014)\n;;\
    \ 24\n;; >>> (sum_even_digits 1015)\n;; 25\n;; >>> (sum_even_digits 1016)\n;;\
    \ 26\n;; >>> (sum_even_digits 1017)\n;; 27\n;; >>> (sum_even_digits 1018)\n;;\
    \ 28\n;; >>> (sum_even_digits 1019)\n;; 29\n;; >>> (sum_even_digits 1020)\n;;\
    \ 30\n;; >>> (sum_even_digits 1021)\n;; 31\n;; >>> (sum_even_digits 1022)\n;;\
    \ 32\n;; >>> (sum_even_digits 1023)\n;; 33\n;; >>> (sum_even_digits 1024)\n;;\
    \ 34", "  (if (<= a b)\n    (list)\n    (let ((n (modulo a 10)))\n      (if (zero?\
    \ n)\n        (list)\n        (let ((i (quotient a 10)))\n          (if (zero?\
    \ i)\n            (list)\n            (let ((j (quotient b 10)))\n           \
    \   (if (zero? j)\n                (list)\n                (let ((k (quotient\
    \ (remainder b 10) 10)))\n                  (list (remainder (remainder a 10)\
    \ 10)\n                       (remainder (remainder b 10) 10)\n              \
    \         (remainder (remainder (remainder a 10) 10) 10)\n                   \
    \    (remainder (remainder (remainder b 10) 10) 10)\n                       (remainder\
    \ (remainder (remainder (remainder a 10) 10) 10) 10)\n                       (remainder\
    \ (remainder (remainder (remainder b 10) 10) 10) 10)\n                       (remainder\
    \ (remainder (remainder (remainder (remainder a 10) 10) 10) 10) 10)\n        \
    \               (remainder (remainder (remainder (remainder (remainder b 10) 10)\
    \ 10) 10) 10)\n                       (remainder (remainder (remainder (remainder\
    \ (remainder (remainder a 10) 10) 10) 10) 10) 10)\n                       (remainder\
    \ (remainder (remainder (remainder (remainder (remainder b 10) 10) 10) 10) 10)\
    \ 10)\n                       (remainder (remainder (remainder (remainder (remainder\
    \ (remainder (remainder a 10) 10) 10) 10) 10) 10) 10)\n                      \
    \ (remainder (remainder (remainder (remainder (remainder (remainder (remainder\
    \ b 10) 10) 10) 10) 10) 10) 10)\n                       (remainder (remainder\
    \ (remainder (remainder (remainder (remainder (remainder (remainder a 10) 10",
  "  (let ((result (list)))\n    (for-each (lambda (x) (append result (list x)))\n\
    \      (range a b)))\n  result)\n\n;; Given a positive integer n, return the sum\
    \ of the digits of n.\n;; For example:\n;; >>> (sum_digits 5)\n;; 10\n;; >>> (sum_digits\
    \ 10)\n;; 10\n;; >>> (sum_digits 100)\n;; 100\n;; >>> (sum_digits 1000)\n;; 1000\n\
    ;; >>> (sum_digits 1000000)\n;; 1000000\n;; >>> (sum_digits 1000000000)\n;; 1000000000\n\
    ;; >>> (sum_digits 1000000000000)\n;; 1000000000000\n;; >>> (sum_digits 1000000000000000)\n\
    ;; 1000000000000000\n;; >>> (sum_digits 100000000000000000)\n;; 100000000000000000\n\
    ;; >>> (sum_digits 1000000000000000000)\n;; 1000000000000000000\n;; >>> (sum_digits\
    \ 10000000000000000000)\n;; 10000000000000000000\n;; >>> (sum_digits 100000000000000000000)\n\
    ;; 100000000000000000000\n;; >>> (sum_digits 1000000000000000000000)\n;; 1000000000000000000000\n\
    ;; >>> (sum_digits 10000000000000000000000)\n;; 10000000000000000000000\n;; >>>\
    \ (sum_digits 100000000000000000000000)\n;; 100000000000000000000000\n;; >>> (sum_digits\
    \ 1000000000000000000000000)\n;; 1000000000000000000000000\n;; >>> (sum_digits\
    \ 10000000000000000000000000)\n;; 10000000000000000000000000\n;; >>> (sum_digits\
    \ 100000000000000000000000000)\n;; 100000000000000000000000000\n;; >>> (sum_digits\
    \ 1000000000000000000000000000)\n;; 1000000000000000000000000000\n;; >>> (sum_digits\
    \ 10000000000000000000000000000)\n;; 10000000000000000000000000000\n;; >>> (sum_digits\
    \ 100000000000000000000000000000)\n;; 100000000000000000000000000000\n;; >>> (sum_digits\
    \ 1000000000000000000000000000000)\n;; 1000000000000000000000000000000\n;; >>>\
    \ (sum_digits 10000000000000000000000000000000)\n;; 10000000000000000000000000000000\n\
    ;; >>> (sum_digits 100000000000000000000000000000000)\n;; 100000000000000000000000000000000\n\
    ;; >>> (sum_digits 1000000000000000000000000000000000)\n;; 1000000000000000000000000000000000\n\
    ;; >>> (sum_digits 10000000000000000000000000000000000)\n;; 10000000000000000000000000000000000\n\
    ;; >>> (sum_digits 100000000000000000000000000000000000)\n;;", "  (let ((i a))\n\
    \    (if (<= i b)\n      (list i)\n      (generate_integers (i (+ i 1)) b))))\n\
    \n;; Given a positive integer n, return the sum of the digits of n.\n;; For example:\n\
    ;; >>> (sum_of_digits 5)\n;; 5\n;; >>> (sum_of_digits 10)\n;; 10\n;; >>> (sum_of_digits\
    \ 100)\n;; 100\n;; >>> (sum_of_digits 1000)\n;; 1000\n;; >>> (sum_of_digits 1001)\n\
    ;; 1001\n;; >>> (sum_of_digits 10001)\n;; 10001\n;; >>> (sum_of_digits 100001)\n\
    ;; 100001\n;; >>> (sum_of_digits 1000001)\n;; 1000001\n;; >>> (sum_of_digits 10000001)\n\
    ;; 10000001\n;; >>> (sum_of_digits 100000001)\n;; 100000001\n;; >>> (sum_of_digits\
    \ 1000000001)\n;; 1000000001\n;; >>> (sum_of_digits 10000000101)\n;; 10000000101\n\
    ;; >>> (sum_of_digits 100000001001)\n;; 100000001001\n;; >>> (sum_of_digits 1000000010001)\n\
    ;; 1000000010001\n;; >>> (sum_of_digits 10000000100001)\n;; 10000000100001\n;;\
    \ >>> (sum_of_digits 100000001000001)\n;; 100000001000001\n;; >>> (sum_of_digits\
    \ 1000000010000001)\n;; 1000000010000001\n;; >>> (sum_of_digits 10000000100000101)\n\
    ;; 10000000100000101\n;; >>> (sum_of_digits 100000001000001001)\n;; 100000001000001001\n\
    ;; >>> (sum_of_digits 1000000010000010101)\n;; 1000000010000010101\n;; >>> (sum_of_digits\
    \ 10000000100000101001)\n;; 10000000100000101001\n;; >>> (sum_of_digits 100000001000001010101)\n\
    ;; 100000001000001010101\n", "  (cond ((<= a b) (list))\n        ((= a 0) (list))\n\
    \        ((<= a b)\n         (let ((result (make-vector (sub1 a) b)))\n      \
    \     (map (lambda (x) (vector-ref result x))\n                (range (+ a 1)\
    \ (+ b 1)))))))\n\n;; Given a positive integer n, return the number of ways to\
    \ make a\n;; sequence of n even numbers.\n;; For example:\n;; >>> (count_ways\
    \ 2)\n;; 2\n;; >>> (count_ways 4)\n;; 6\n;; >>> (count_ways 6)\n;; 24\n;; >>>\
    \ (count_ways 8)\n;; 120\n;; >>> (count_ways 10)\n;; 720\n;; >>> (count_ways 12)\n\
    ;; 5040\n;; >>> (count_ways 14)\n;; 40320\n;; >>> (count_ways 16)\n;; 362880\n\
    ;; >>> (count_ways 18)\n;; 3628800\n;; >>> (count_ways 20)\n;; 39916800\n;; >>>\
    \ (count_ways 22)\n;; 479001600\n;; >>> (count_ways 24)\n;; 6227020800\n;; >>>\
    \ (count_ways 26)\n;; 87178291200\n;; >>> (count_ways 28)\n;; 1307674368000\n\
    ;; >>> (count_ways 30)\n;; 214746711248000\n;; >>> (count_ways 32)\n;; 4294967296000\n\
    ;; >>> (count_ways 34)\n;; 8589934592000\n;; >>> (count_ways 36)\n;; 17179869184000\n\
    ;; >>> (count_ways 38)\n;; 34359738368000\n;; >>> (count_ways 40)\n;; 68719476736000\n\
    ;; >>> (count_ways 42)\n;; 137438953472000\n;; >>> (count_ways 44)\n;; 274877906944000\n\
    ;; >>> (count_ways 46)\n;; 549755813888000\n;; >>> (count_ways 48)\n;; 1099511627776000\n\
    ;; >>> (count_ways 50)\n;; 2199023255552000\n;; >>> (count_ways 52)\n;; 4398046511104000\n\
    ;; >>> (count_ways", "  (let ((n (if (zero? a) 1 (sub1 a))))\n    (if (zero? b)\n\
    \      (list)\n      (let ((result (make-vector n b)))\n        (for-each (lambda\
    \ (i) (vector-set! result i (modulo n i)))\n             (range n))))))\n\n;;\
    \ Given a positive integer n, return the sum of the digits of n.\n;; For example:\n\
    ;; >>> (sum-of-digits 5)\n;; 5\n;; >>> (sum-of-digits)\n;; 0\n;; >>> (sum-of-digits\
    \ 10)\n;; 10\n;; >>> (sum-of-digits -1)\n;; -1\n;; >>> (sum-of-digits -10)\n;;\
    \ -10\n;; >>> (sum-of-digits -100)\n;; -100\n;; >>> (sum-of-digits -1000)\n;;\
    \ -1000\n;; >>> (sum-of-digits -10000)\n;; -10000\n;; >>> (sum-of-digits -100000)\n\
    ;; -100000\n;; >>> (sum-of-digits -1000000)\n;; -1000000\n;; >>> (sum-of-digits\
    \ -10000000)\n;; -10000000\n;; >>> (sum-of-digits -100000000)\n;; -100000000\n\
    ;; >>> (sum-of-digits -1000000000)\n;; -1000000000\n;; >>> (sum-of-digits -10000000000)\n\
    ;; -10000000000\n;; >>> (sum-of-digits -100000000000)\n;; -100000000000\n;; >>>\
    \ (sum-of-digits -1000000000000)\n;; -1000000000000\n;; >>> (sum-of-digits -10000000000000)\n\
    ;; -10000000000000\n;; >>> (sum-of-digits -100000000000000)\n;; -100000000000000\n\
    ;; >>> (sum-of-digits -1000000000000000)\n;; -1000000000000000\n;; >>> (sum-of-digits\
    \ -10000000000000000)\n;; -10000000000000000\n;; >>> (sum-of-digits -100000000000000000)\n\
    ;; -100000000000000000\n;; >>> (sum-of-digits -1000000000000000000)\n;; -1", " \
    \ (let ((n (if (zero? a) 1 (sub1 a))))\n    (let ((result (make-vector n b)))\n\
    \      (let ((i 0))\n        (while (<= i n)\n          (set! result (vector-set!\
    \ result (vector-ref i a) (vector-ref i b)))\n          (set! i (add1 i)))\n \
    \       result)))\n  )\n)\n\n;; Given a positive integer n, return the sum of\
    \ the even digits between\n;; 1 and n, in ascending order.\n;; For example:\n\
    ;; >>> (sum_of_even_digits 10)\n;; 10\n;; >>> (sum_of_even_digits 14)\n;; 22\n\
    ;; >>> (sum_of_even_digits 1)\n;; 0\n;; >>> (sum_of_even_digits 0)\n;; 0\n;; >>>\
    \ (sum_of_even_digits -1)\n;; 0\n;; >>> (sum_of_even_digits -2)\n;; 0\n;; >>>\
    \ (sum_of_even_digits -3)\n;; 0\n;; >>> (sum_of_even_digits -4)\n;; 0\n;; >>>\
    \ (sum_of_even_digits -5)\n;; 0\n;; >>> (sum_of_even_digits -6)\n;; 0\n;; >>>\
    \ (sum_of_even_digits -7)\n;; 0\n;; >>> (sum_of_even_digits -8)\n;; 0\n;; >>>\
    \ (sum_of_even_digits -9)\n;; 0\n;; >>> (sum_of_even_digits -10)\n;; 0\n;; >>>\
    \ (sum_of_even_digits -11)\n;; 0\n;; >>> (sum_of_even_digits -12)\n;; 0\n;; >>>\
    \ (sum_of_even_digits -13)\n;; 0\n;; >>> (sum_of_even_digits -14)\n;; 0\n;; >>>\
    \ (sum_of_even_digits -15)\n;; 0\n;; >>> (sum_of_even_digits -16)\n;; 0\n;; >>>\
    \ (sum_of_even_digits -17)\n;; 0\n;; >>> (sum_of_even_digits", "  (define (gen-evens\
    \ a b)\n    (define (gen-evens-rec a b)\n      (if (<= a b)\n        (list a)\n\
    \        (gen-evens-rec (+ a 1)))))\n  (gen-evens a b))\n", "  (let ((n (if (zero?\
    \ a) 1 (sub1 a))))\n    (if (zero? b)\n      (list)\n      (let ((i (zero? n)))\n\
    \        (if (zero? i)\n          (list)\n          (cons (modulo n 10) (generate_integers\
    \ (add1 i) (add1 n))))))))\n\n;; Given a positive integer n, return the sum of\
    \ the even digits between\n;; 1 and n, in ascending order.\n;; For example:\n\
    ;; >>> (sum_even_digits 10)\n;; (list 2 4 6 8 10)\n;; >>> (sum_even_digits)\n\
    ;; (list )", "  (define (gen-range a b)\n    (if (<= a b)\n      (list a)\n  \
    \    (gen-range (+ a 1) b)))\n  (gen-range a b))\n\n;; Given a positive integer\
    \ n, return the sum of the even digits between\n;; 1 and n, in ascending order.\n\
    ;; For example:\n;; >>> (sum-even-digits 2)\n;; 2\n;; >>> (sum-even-digits 10)\n\
    ;; 22\n;; >>> (sum-even-digits 100)\n;; 222\n;; >>> (sum-even-digits 1000)\n;;\
    \ 3222\n;; >>> (sum-even-digits 10000)\n;; 32322\n;; >>> (sum-even-digits 100000)\n\
    ;; 323222\n;; >>> (sum-even-digits 1000000)\n;; 3232222\n;; >>> (sum-even-digits\
    \ 10000000)\n;; 32322222\n;; >>> (sum-even-digits 100000000)\n;; 323222222\n;;\
    \ >>> (sum-even-digits 1000000000)\n;; 3232222222\n;; >>> (sum-even-digits 10000000000)\n\
    ;; 32322222222\n;; >>> (sum-even-digits 100000000000)\n;; 323222222222\n;; >>>\
    \ (sum-even-digits 1000000000000)\n;; 3232222222222\n;; >>> (sum-even-digits 10000000000000)\n\
    ;; 32322222222222\n;; >>> (sum-even-digits 100000000000000)\n;; 323222222222222\n\
    ;; >>> (sum-even-digits 1000000000000000)\n;; 3232222222222222\n;; >>> (sum-even-digits\
    \ 10000000000000000)\n;; 32322222222222222\n;; >>> (sum-even-digits 100000000000000000)\n\
    ;; 323222222222222222\n;; >>> (sum-even-digits 1000000000000000000)\n;; 3232222222222222222\n\
    ;; >>> (sum-even-digits 10000000000000000000)\n;; 32322222222222222222\n;; >>>\
    \ (sum-even-digits 100000000000000000000)\n;; 323222222222222222222\n;; >>> (sum-even-digits\
    \ 100", "  (define (gen-evens a b)\n    (define (gen-evens-helper a b)\n     \
    \ (cond\n        [(<= a b) (list a)]\n        [(<= a (modulo b 2)) (gen-evens-helper\
    \ (add a 1) (subtract b 1))]\n        [else (gen-evens-helper (add a 1) b)]))\n\
    \    (gen-evens-helper a b))\n  (gen-evens a b))\n\n;; Given a positive integer\
    \ n, return the sum of the even digits between\n;; 1 and n, in ascending order.\n\
    ;; For example:\n;; >>> (sum-even-digits 5)\n;; 6\n;; >>> (sum-even-digits 10)\n\
    ;; 22\n;; >>> (sum-even-digits 100)\n;; 112\n;; >>> (sum-even-digits 1000)\n;;\
    \ 1002\n;; >>> (sum-even-digits 10000)\n;; 10022\n;; >>> (sum-even-digits 100000)\n\
    ;; 100002\n;; >>> (sum-even-digits 1000000)\n;; 1000002\n;; >>> (sum-even-digits\
    \ 10000000)\n;; 10000002\n;; >>> (sum-even-digits 100000000)\n;; 100000022\n;;\
    \ >>> (sum-even-digits 1000000000)\n;; 1000000002\n;; >>> (sum-even-digits 10000000000)\n\
    ;; 100000000002\n;; >>> (sum-even-digits 100000000000)\n;; 1000000000022\n;; >>>\
    \ (sum-even-digits 1000000000000)\n;; 10000000000002\n;; >>> (sum-even-digits\
    \ 10000000000000)\n;; 100000000000002\n;; >>> (sum-even-digits 100000000000000)\n\
    ;; 1000000000000002\n;; >>> (sum-even-digits 1000000000000000)\n;; 10000000000000002\n\
    ;; >>> (sum-even-digits 10000000000000000)\n;; 100000000000000002\n;; >>> (sum-even-digits\
    \ 100000000000000000)\n;; 1000000000000000002\n;; >>> (sum-even-digits 1000000000000000000)\n\
    ;; 10000000000000000002\n;; >>> (sum-even-digits 10000000000000000000)\n;; 100000000000000000002",
  "  (let ((n (if (<= a b) a b)))\n    (if (<= n 0)\n      (list)\n      (let ((i\
    \ 0))\n        (while (<= i n)\n          (let ((digit (modulo (/ i 10) 10)))\n\
    \            (list digit)\n            (set! i (+ i 1)))\n          ))))))\n",
  "  (define (gen-evens a b)\n    (define (gen-evens-rec a b)\n      (if (<= a b)\n\
    \        (list a)\n        (gen-evens-rec (+ a 1)))))\n  (gen-evens a b))\n\n\
    ;; #lang scheme", "  (cond\n    [(<= a b) (list)]\n    [(<= a 0) (list 0)]\n \
    \   [(<= b 0) (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(< a b)\
    \ (cons a)]\n    [(< a 0) (cons 0)]\n    [(< b 0) (cons 0)]\n    [(= a 0) (cons)]\n\
    \    [(= b 0) (cons)]\n    [else (cons (generate_integers (- a 1) (- b 1)))])\n\
    \n;; Given a positive integer n, return the sum of the digits of n,\n;; starting\
    \ with the rightmost digit and moving left.\n;; For example:\n;; >>> (sum_digits\
    \ 5)\n;; 5\n;; >>> (sum_digits 10)\n;; 10\n;; >>> (sum_digits 100)\n;; 100\n;;\
    \ >>> (sum_digits 1000)\n;; 1000\n;; >>> (sum_digits 100000)\n;; 100000\n;; >>>\
    \ (sum_digits 1000000)\n;; 1000000\n;; >>> (sum_digits 10000000)\n;; 10000000\n\
    ;; >>> (sum_digits 100000000)\n;; 100000000\n;; >>> (sum_digits 1000000000)\n\
    ;; 1000000000\n;; >>> (sum_digits 10000000000)\n;; 10000000000\n;; >>> (sum_digits\
    \ 100000000000)\n;; 100000000000\n;; >>> (sum_digits 1000000000000)\n;; 1000000000000\n\
    ;; >>> (sum_digits 10000000000000)\n;; 10000000000000\n;; >>> (sum_digits 100000000000000)\n\
    ;; 100000000000000\n;; >>> (sum_digits 1000000000000000)\n;; 1000000000000000\n\
    ;; >>> (sum_digits 10000000000000000)\n;; 10000000000000000\n;; >>> (sum_digits\
    \ 100000000000000000)\n;; 100000000000000000\n;; >>> (sum_digits 1000000000000000000)\n\
    ;; 1000000000000000000\n;; >>> (sum_digits 10000000000000000000)\n;; 10000000000000000000\n\
    ;; >>> (sum_digits 100000000000000000000)\n;; 100000000000000000000\n;; >>> (sum_digits\
    \ 1000000000000000000000)\n;; 1000000000000000000000\n;; >>> (sum_dig", "  (define\
    \ (gen-evens a b)\n    (define (gen-evens-rec a b)\n      (if (<= a b)\n     \
    \   (list a)\n        (gen-evens-rec (+ a 1)))))\n  (gen-evens a b))\n\n;; Given\
    \ a positive integer n, return the number of ways you can make\n;; change by n\
    \ cents.\n;; For example:\n;; >>> (change-cents 5)\n;; 5\n;; >>> (change-cents\
    \ 10)\n;; 10\n;; >>> (change-cents 25)\n;; 10\n;; >>> (change-cents 100)\n;; 5\n\
    ;; >>> (change-cents 500)\n;; 0\n;; >>> (change-cents 1000)\n;; 0\n;; >>> (change-cents\
    \ 2500)\n;; 0\n;; >>> (change-cents 10000)\n;; 0\n;; >>> (change-cents 50000)\n\
    ;; 0\n;; >>> (change-cents 100000)\n;; 0\n;; >>> (change-cents 250000)\n;; 0\n\
    ;; >>> (change-cents 1000000)\n;; 0\n;; >>> (change-cents 500000)\n;; 0\n;; >>>\
    \ (change-cents 1000000)\n;; 0\n;; >>> (change-cents 2500000)\n;; 0\n;; >>> (change-cents\
    \ 10000000)\n;; 0\n;; >>> (change-cents 5000000)\n;; 0\n;; >>> (change-cents 10000000)\n\
    ;; 0\n;; >>> (change-cents 25000000)\n;; 0\n;; >>> (change-cents 100000000)\n\
    ;; 0\n;; >>> (change-cents 50000000)\n;; 0\n;; >>> (change-cents 100000000)\n\
    ;; 0\n;; >>> (change-cents 250000000)\n;; 0\n;; >>> (change-cents 1000000000)\n\
    ;; 0\n;; >>> (change-cents 500000000)\n;; 0\n;; >>> (change-cents 1000000000)\n\
    ;; 0\n;; >>> (change-cents 2500000000)\n;; 0\n;; >>> (change-cents 10000000000)\n\
    ;; 0\n;; >>> (change-cents 5000000000)\n;; 0\n;; >>> (change-cents 10000000000)\n\
    ;; 0\n;; >>> (change-", "  (define (gen-evens a b)\n    (if (<= a b)\n      (list\
    \ a)\n      (gen-evens (+ a 1))\n      ))\n  (gen-evens a b))\n", "  (cond\n \
    \   [(<= a b) (list)]\n    [(<= a 0) (list 0)]\n    [(<= b 0) (list)]\n    [(>=\
    \ a b) (list)]\n    [(>= a 0) (list)]\n    [(>= b 0) (list)]\n    [(= a 0) (list)]\n\
    \    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0) (list)]\n    [(= b 0)\
    \ (list)]\n    [(= a b) (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n\
    \    [(= a b) (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b)\
    \ (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n\
    \    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0)\
    \ (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0) (list)]\n\
    \    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0) (list)]\n    [(= b 0)\
    \ (list)]\n    [(= a b) (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n\
    \    [(= a b) (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b)\
    \ (list)]\n    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n\
    \    [(= a 0) (list)]\n    [(= b 0) (list)]\n    [(= a b) (list)]\n    [(= a 0",
  "  (let ((n (if (< a b) a b)))\n    (if (< n 10)\n      (list n)\n      (let ((i\
    \ 0))\n        (while (< i n)\n          (let ((digit (modulo n i)))\n       \
    \     (if (= digit 0)\n              (list digit)\n              (let ((next i))\n\
    \                (list digit)\n                (set! i (+ i 1))))))))))\n", " \
    \ (define (gen-range a b)\n    (if (<= a b)\n      (list a)\n      (gen-range\
    \ (+ a 1) b)))\n  (gen-range a b))\n\n;; Given a positive integer n, return the\
    \ sum of the even digits between\n;; 1 and n, in ascending order.\n;; For example:\n\
    ;; >>> (sum-even-digits 10)\n;; 10\n;; >>> (sum-even-digits 100)\n;; 10\n;; >>>\
    \ (sum-even-digits 1000)\n;; 10\n;; >>> (sum-even-digits 1001)\n;; 1001\n;; >>>\
    \ (sum-even-digits 10001)\n;; 10001\n;; >>> (sum-even-digits 100001)\n;; 100001\n\
    ;; >>> (sum-even-digits 1000001)\n;; 1000001\n;; >>> (sum-even-digits 10000001)\n\
    ;; 10000001\n;; >>> (sum-even-digits 100000001)\n;; 100000001\n;; >>> (sum-even-digits\
    \ 1000000001)\n;; 1000000001\n;; >>> (sum-even-digits 10000000101)\n;; 10000000101\n\
    ;; >>> (sum-even-digits 100000001001)\n;; 100000001001\n;; >>> (sum-even-digits\
    \ 1000000010001)\n;; 1000000010001\n;; >>> (sum-even-digits 10000000100001)\n\
    ;; 10000000100001\n;; >>> (sum-even-digits 100000001000001)\n;; 100000001000001\n\
    ;; >>> (sum-even-digits 1000000010000001)\n;; 1000000010000001\n;; >>> (sum-even-digits\
    \ 10000000100000101)\n;; 10000000100000101\n;; >>> (sum-even-digits 100000001000001001)\n\
    ;; 100000001000001001\n;; >>> (sum-even-digits 1000000010000010001)\n;; 1000000010000010001\n\
    ;; >>> (sum-even-digits 10000000100000100001)\n;; 10000000100000100001\n;; >>>\
    \ (sum-even-digits 100000001000001000001)\n;; 100000001000001000001\n;; >>>",
  "  (let ((result (list)))\n    (for-each (lambda (i)\n                (if (even?\
    \ i)\n                    (append result (list i))\n                    ()))\n\
    \      (range a b)))\n  result)\n\n;; Given a positive integer n, return the sum\
    \ of the digits of n.\n;; For example:\n;; >>> (sum_digits 5)\n;; 10\n;; >>> (sum_digits\
    \ 10)\n;; 10\n;; >>> (sum_digits 100)\n;; 100\n;; >>> (sum_digits 1000)\n;; 1000\n\
    ;; >>> (sum_digits 100000)\n;; 100000\n;; >>> (sum_digits 1000000)\n;; 1000000\n\
    ;; >>> (sum_digits 10000000)\n;; 10000000\n;; >>> (sum_digits 100000000)\n;; 100000000\n\
    ;; >>> (sum_digits 1000000000)\n;; 1000000000\n;; >>> (sum_digits 10000000000)\n\
    ;; 10000000000\n;; >>> (sum_digits 100000000000)\n;; 100000000000\n;; >>> (sum_digits\
    \ 1000000000000)\n;; 1000000000000\n;; >>> (sum_digits 10000000000000)\n;; 10000000000000\n\
    ;; >>> (sum_digits 100000000000000)\n;; 100000000000000\n;; >>> (sum_digits 1000000000000000)\n\
    ;; 1000000000000000\n;; >>> (sum_digits 10000000000000000)\n;; 10000000000000000\n\
    ;; >>> (sum_digits 100000000000000000)\n;; 100000000000000000\n;; >>> (sum_digits\
    \ 1000000000000000000)\n;; 1000000000000000000\n;; >>> (sum_digits 10000000000000000000)\n\
    ;; 10000000000000000000\n;; >>> (sum_digits 100000000000000000000)\n;; 100000000000000000000\n\
    ;; >>> (sum_digits 1000000000000000000000)\n;; 1000000000000000000000\n;; >>>\
    \ (sum_digits 10000000000000000000000)\n;; 10000000000000000000000\n;; >>> (sum_digits\
    \ 100000000000000000000000)\n;; 100000000000000000000000\n;; >>> (sum_digits 1000000000000000000000000)\n\
    ;; 1000000000000000000000000\n;; >>> (sum_digits 10000000000000000000000000)\n\
    ;; 10000000000000000000000000\n;; >>> (sum_digits 100000000000000000000000000)\n\
    ;; 100000000000000000000000000\n;; >>> (sum_digits 1000000000000000000000000000)\n\
    ;; 1000000000000000000000000000\n;; >>> (", "  (let ((result (list)))\n    (for-each\
    \ (lambda (x) (result (append result x)))\n      (range a b)))\n  result)\n\n\
    ;; Given a positive integer n, return the sum of the even digits between\n;; 1\
    \ and n, in ascending order.\n;; For example:\n;; >>> (sum_of_even_digits 10)\n\
    ;; 10\n;; >>> (sum_of_even_digits 100)\n;; 10\n;; >>> (sum_of_even_digits 1000)\n\
    ;; 10\n;; >>> (sum_of_even_digits 10000)\n;; 10\n;; >>> (sum_of_even_digits 100000)\n\
    ;; 10\n;; >>> (sum_of_even_digits 1000000)\n;; 10\n;; >>> (sum_of_even_digits\
    \ 10000000)\n;; 10\n;; >>> (sum_of_even_digits 100000000)\n;; 10\n;; >>> (sum_of_even_digits\
    \ 1000000000)\n;; 10\n;; >>> (sum_of_even_digits 10000000000)\n;; 10\n;; >>> (sum_of_even_digits\
    \ 100000000000)\n;; 10\n;; >>> (sum_of_even_digits 1000000000000)\n;; 10\n;; >>>\
    \ (sum_of_even_digits 10000000000000)\n;; 10\n;; >>> (sum_of_even_digits 100000000000000)\n\
    ;; 10\n;; >>> (sum_of_even_digits 1000000000000000)\n;; 10\n;; >>> (sum_of_even_digits\
    \ 10000000000000000)\n;; 10\n;; >>> (sum_of_even_digits 100000000000000000)\n\
    ;; 10\n;; >>> (sum_of_even_digits 1000000000000000000)\n;; 10\n;; >>> (sum_of_even_digits\
    \ 10000000000000000000)\n;; 10\n;; >>> (sum_of_even_digits 100000000000000000000)\n\
    ;; 10\n;; >>> (sum_of_even_digits 1000000000000000000000)\n;; 10\n;; >>> (sum_of_even_digits\
    \ 10000000000000000000000)\n;; 10\n;; >>> (sum_of_even_digits 100000000000000000000000)\n\
    ;; 10\n;; >>> (sum_of_even_digits 1000000000000000000000000)\n;; 10\n", "  (let\
    \ ((n (div a b)))\n    (if (<= n 0)\n      (list)\n      (let ((i 0))\n      \
    \  (while (<= i n)\n          (let ((digit (modulo (remainder (remainder n i)\
    \ b) 10)))\n            (if (= digit 0)\n              (list digit)\n        \
    \      (append (list digit) (generate_integers (a (add i 1)) (b (add i 1))))))\n\
    \          (set! i (add i 1))))))\n)\n\n;; Given a positive integer n, return\
    \ the sum of the digits of n.\n;; For example:\n;; >>> (sum_digits 5)\n;; 5\n\
    ;; >>> (sum_digits 10)\n;; 10\n;; >>> (sum_digits 100)\n;; 100\n;; >>> (sum_digits\
    \ 1000)\n;; 1000\n;; >>> (sum_digits 1000000)\n;; 1000000\n;; >>> (sum_digits\
    \ 1000000000)\n;; 1000000000\n;; >>> (sum_digits 1000000000000)\n;; 1000000000000\n\
    ;; >>> (sum_digits 1000000000000000)\n;; 1000000000000000\n;; >>> (sum_digits\
    \ 100000000000000000)\n;; 100000000000000000\n;; >>> (sum_digits 1000000000000000000)\n\
    ;; 1000000000000000000\n;; >>> (sum_digits 10000000000000000000)\n;; 10000000000000000000\n\
    ;; >>> (sum_digits 100000000000000000000)\n;; 100000000000000000000\n;; >>> (sum_digits\
    \ 1000000000000000000000)\n;; 1000000000000000000000\n;; >>> (sum_digits 10000000000000000000000)\n\
    ;; 10000000000000000000000\n;; >>> (sum_digits 100000000000000000000000)\n;; 100000000000000000000000\n\
    ;; >>> (sum_digits 1000000000000000000000000)\n;; 1000000000000000000000000\n\
    ;; >>> (sum_digits 10000000000000000000000000)\n;; 10000000000000000000000000\n\
    ;; >>> (sum_digits 100000000000000000000000000)\n;; 100000000000000000000000000\n\
    ;; >>> (sum_digits 1000000000000000000000000000)\n;; 1000000000000000000000000000\n\
    ;; >>> (sum_digits 10000000000000000000000000000)\n;; 10000000000000000000000000000\n\
    ;; >>> (sum_digits 100000000000000000000000000000)\n;; 100000000000000000000000000000\n\
    ;; >>> (sum_digits 1000000000000000000000000000000)\n;; 1000000000000000000000000000000\n\
    ;; >>> (sum", "  (define (generate_digits n)\n    (if (< n 0)\n      (list)\n\
    \      (let ((i n))\n        (if (<= i b)\n          (list i)\n          (generate_digits\
    \ (sub1 i) (sub1 i)))))\n    (generate_digits a)\n    (append (generate_digits\
    \ b) (list))))\n\n;; Given a positive integer n, return the sum of the even digits\
    \ between\n;; 1 and n, in ascending order. For example:\n;; >>> (sum_even_digits\
    \ 10)\n;; 10\n;; >>> (sum_even_digits 100)\n;; 10\n;; >>> (sum_even_digits 1000)\n\
    ;; 10\n;; >>> (sum_even_digits 1001)\n;; 11\n;; >>> (sum_even_digits 1002)\n;;\
    \ 12\n;; >>> (sum_even_digits 1003)\n;; 13\n;; >>> (sum_even_digits 1004)\n;;\
    \ 14\n;; >>> (sum_even_digits 1005)\n;; 15\n;; >>> (sum_even_digits 1006)\n;;\
    \ 16\n;; >>> (sum_even_digits 1007)\n;; 17\n;; >>> (sum_even_digits 1008)\n;;\
    \ 18\n;; >>> (sum_even_digits 1009)\n;; 19\n;; >>> (sum_even_digits 1010)\n;;\
    \ 20\n;; >>> (sum_even_digits 1011)\n;; 21\n;; >>> (sum_even_digits 1012)\n;;\
    \ 22\n;; >>> (sum_even_digits 1013)\n;; 23\n;; >>> (sum_even_digits 1014)\n;;\
    \ 24\n;; >>> (sum_even_digits 1015)\n;; 25\n;; >>> (sum_even_digits 1016)\n;;\
    \ 26\n;; >>> (sum_even_digits 1017)\n;; 27\n;; >>> (sum_even_digits 1018)\n;;\
    \ 28\n;; >>> (sum_even_digits 1019)\n;; 29\n;; >>> (sum_even_digits 1020)\n;;\
    \ 30\n;; >>> (sum_even_digits 1021)\n;; 31\n;; >>> (sum_even_digits", "  (define\
    \ (gen-range a b)\n    (if (<= a b)\n      (list a)\n      (gen-range (+ a 1)\
    \ b)))\n  (gen-range a b))\n\n;; Given a positive integer n, return the number\
    \ of ways you can make a\n;; sequence of n even numbers from 0 to n-1.\n;; For\
    \ example:\n;; >>> (count-evens 10)\n;; 10\n;; >>> (count-evens 20)\n;; 10\n;;\
    \ >>> (count-evens 30)\n;; 10\n;; >>> (count-evens 40)\n;; 10\n;; >>> (count-evens\
    \ 50)\n;; 10\n;; >>> (count-evens 60)\n;; 10\n;; >>> (count-evens 70)\n;; 10\n\
    ;; >>> (count-evens 80)\n;; 10\n;; >>> (count-evens 90)\n;; 10\n;; >>> (count-evens\
    \ 100)\n;; 10\n;; >>> (count-evens 110)\n;; 10\n;; >>> (count-evens 120)\n;; 10\n\
    ;; >>> (count-evens 130)\n;; 10\n;; >>> (count-evens 140)\n;; 10\n;; >>> (count-evens\
    \ 150)\n;; 10\n;; >>> (count-evens 160)\n;; 10\n;; >>> (count-evens 170)\n;; 10\n\
    ;; >>> (count-evens 180)\n;; 10\n;; >>> (count-evens 190)\n;; 10\n;; >>> (count-evens\
    \ 200)\n;; 10\n;; >>> (count-evens 210)\n;; 10\n;; >>> (count-evens 220)\n;; 10\n\
    ;; >>> (count-evens 230)\n;; 10\n;; >>> (count-evens 240)\n;; 10\n;; >>> (count-evens\
    \ 250)\n;; 10\n;; >>> (count-evens 260)\n;; 10\n;; >>> (count-evens 270)\n;; 10\n\
    ;; >>> (count-evens 280)\n;; 10\n;; >>> (count-evens 290)\n;; 10\n;; >>> (count-evens\
    \ 300)\n;; 10\n;; >>> (count-evens 310)\n;; 10\n;; >>> (count-evens 320)\n;; 10\n\
    ;; >>> (count-evens 330)\n;; 10", "  (let ((result (list)))\n    (while (< a b)\n\
    \      (let ((i (quotient a b)))\n        (if (even? i)\n          (append result\
    \ (quotient a i))\n          (append result i)))\n      (set! a (quotient a b))\n\
    \      (set! b (quotient a b)))\n    (reverse result)))\n\n;; Given a positive\
    \ integer n, return the sum of the even digits between\n;; 1 and n, in ascending\
    \ order.\n;; For example:\n;; >>> (sum_even_digits 1)\n;; 2\n;; >>> (sum_even_digits\
    \ 10)\n;; 22\n;; >>> (sum_even_digits 100)\n;; 222\n;; >>> (sum_even_digits 1000)\n\
    ;; 2222\n;; >>> (sum_even_digits 10000)\n;; 22222\n;; >>> (sum_even_digits 100000)\n\
    ;; 222222\n;; >>> (sum_even_digits 1000000)\n;; 2222222\n;; >>> (sum_even_digits\
    \ 10000000)\n;; 22222222\n;; >>> (sum_even_digits 100000000)\n;; 222222222\n;;\
    \ >>> (sum_even_digits 1000000000)\n;; 2222222222\n;; >>> (sum_even_digits 10000000000)\n\
    ;; 22222222222\n;; >>> (sum_even_digits 100000000000)\n;; 222222222222\n;; >>>\
    \ (sum_even_digits 1000000000000)\n;; 2222222222222\n;; >>> (sum_even_digits 10000000000000)\n\
    ;; 22222222222222\n;; >>> (sum_even_digits 100000000000000)\n;; 222222222222222\n\
    ;; >>> (sum_even_digits 1000000000000000)\n;; 222222222222222\n;; >>> (sum_even_digits\
    \ 10000000000000000)\n;; 222222222222222\n;; >>> (sum_even_digits 100000000000000000)\n\
    ;; 222222222222222\n;; >>> (sum_even_digits 1000000000000000000)\n;; 222222222222222\n\
    ;; >>> (sum_even_digits 10000000000000000000)\n;; 222222222222222", "  (let ((n\
    \ (if (zero? a) (zero? b) (sub1 a) (sub1 b))))\n    (if (zero? n)\n      (list)\n\
    \      (let ((i 0))\n        (while (< i n)\n          (let ((digit (modulo (remainder\
    \ n i) 10)))\n            (list (number->string digit) (number->string (remainder\
    \ i 2)))\n            (setq i (add1 i)))\n          (setq i (add1 i))))))))\n",
  "  (let ((result (list)))\n    (while (<= a b)\n      (let ((i (quotient a b)))\n\
    \        (if (= i 0)\n            (append result (quotient a i))\n           \
    \ (append result (quotient (remainder a i) b)))))\n    (reverse result)))\n\n\
    ;; Given a positive integer n, return the sum of the even digits between\n;; 1\
    \ and n, in ascending order.\n;; For example:\n;; >>> (sum_even_digits 10)\n;;\
    \ 10\n;; >>> (sum_even_digits 100)\n;; 10\n;; >>> (sum_even_digits 1000)\n;; 10\n\
    ;; >>> (sum_even_digits 10000)\n;; 10\n;; >>> (sum_even_digits 100000)\n;; 10\n\
    ;; >>> (sum_even_digits 1000000)\n;; 10\n;; >>> (sum_even_digits 10000000)\n;;\
    \ 10\n;; >>> (sum_even_digits 100000000)\n;; 10\n;; >>> (sum_even_digits 1000000000)\n\
    ;; 10\n;; >>> (sum_even_digits 10000000000)\n;; 10\n;; >>> (sum_even_digits 100000000000)\n\
    ;; 10\n;; >>> (sum_even_digits 1000000000000)\n;; 10\n;; >>> (sum_even_digits\
    \ 10000000000000)\n;; 10\n;; >>> (sum_even_digits 100000000000000)\n;; 10\n;;\
    \ >>> (sum_even_digits 1000000000000000)\n;; 10\n;; >>> (sum_even_digits 10000000000000000)\n\
    ;; 10\n;; >>> (sum_even_digits 100000000000000000)\n;; 10\n;; >>> (sum_even_digits\
    \ 1000000000000000000)\n;; 10\n;; >>> (sum_even_digits 10000000000000000000)\n\
    ;; 10\n;; >>> (sum_even_digits 100000000000000000000)\n;; 10\n;; >>> (sum_even_digits\
    \ 1000000000000000000000)\n;; 10\n;; >>> (sum_even_digits 10000000000000000000000)\n\
    ;; 10\n;; >>> (sum_even_digits 100000000000000000000000)\n;; 10\n;; >>> (sum_even_digits\
    \ 1000000000000000000000000)\n;; 10\n;; >>> (sum_even_digits 100", "  (let ((n\
    \ (if (zero? a) (zero? b) (sub1 a) (sub1 b))))\n    (if (zero? n)\n      (list)\n\
    \      (let ((n (if (zero? n) (zero? a) (sub1 n))))\n        (let ((n (if (zero?\
    \ n) (zero? b) (sub1 n))))\n          (if (zero? n)\n            (list)\n    \
    \        (let ((n (if (zero? n) (zero? a) (sub1 n))))\n              (let ((n\
    \ (if (zero? n) (zero? b) (sub1 n))))\n                (if (zero? n)\n       \
    \           (list)\n                  (let ((n (if (zero? n) (zero? a) (sub1 n))))\n\
    \                    (let ((n (if (zero? n) (zero? b) (sub1 n))))\n          \
    \            (if (zero? n)\n                        (list)\n                 \
    \       (let ((n (if (zero? n) (zero? a) (sub1 n
  "  (cond ((<= a b) (list))\n        ((= a 0) (list))\n        ((<= a b)\n      \
    \    (let ((n (div a 2)))\n            (cons (mod a 2)\n                 (generate_integers\
    \ (sub1 n) (sub1 (sub1 n)))))\n          )\n        )\n  )\n)\n", "  (let ((n\
    \ (if (<= a b) (sub1 a) (sub1 b))))\n    (if (<= n 0)\n      (list)\n      (let\
    \ ((i 0))\n        (while (<= i n)\n          (let ((digit (modulo n i)))\n  \
    \          (if (= digit 0)\n              (list digit)\n              (append\
    \ (list digit) (generate_integers i (sub1 digit)))))))))\n\n;; Given a positive\
    \ integer n, return the sum of the digits of n.\n;; For example:\n;; >>> (sum_of_digits\
    \ 5)\n;; 5\n;; >>> (sum_of_digits)\n;; 0", "  (define (gen-evens a b)\n    (define\
    \ (gen-evens-rec a b)\n      (if (<= a b)\n        (list a)\n        (gen-evens-rec\
    \ (+ a 1)))))\n  (gen-evens a b))\n", "  (cond ((<= a b) (list))\n        ((=\
    \ a 0) (list))\n        ((<= a b)\n         (let ((result (make-vector (sub1 a)\
    \ (sub1 b))))\n           (for-each (lambda (x) (vector-set! result x))\n    \
    \            (range (+ a 1) (+ b 1))))))\n)\n\n;; Given a positive integer n,\
    \ return the sum of the first n even\n;; digits of the Fibonacci sequence.\n;;\
    \ For example:\n;; >>> (sum_of_even_fibonacci_digits 5)\n;; 10\n;; >>> (sum_of_even_fibonacci_digits\
    \ 10)\n;; 55\n;; >>> (sum_of_even_fibonacci_digits 100)\n;; 354224848179261915075\n\
    ;; >>> (sum_of_even_fibonacci_digits 1000)\n;; 354224848179261915075\n;; >>> (sum_of_even_fibonacci_digits\
    \ 1001)\n;; #f\n;; >>> (sum_of_even_fibonacci_digits -1)\n;; #f\n;; >>> (sum_of_even_fibonacci_digits\
    \ 0)\n;; #f\n;; >>> (sum_of_even_fibonacci_digits -2)\n;; #f\n;; >>> (sum_of_even_fibonacci_digits\
    \ -10)\n;; #f\n;; >>> (sum_of_even_fibonacci_digits -100)\n;; #f\n;; >>> (sum_of_even_fibonacci_digits\
    \ -1000)\n;; #f\n;; >>> (sum_of_even_fibonacci_digits -1001)\n;; #f\n;; >>> (sum_of_even_fibonacci_digits\
    \ -1002)\n;; #f\n;; >>> (sum_of_even_fibonacci_digits -1003)\n;; #f\n;; >>> (sum_of_even_fibonacci_digits\
    \ -1004)\n;; #f\n;; >>> (sum_of_even_fibonacci_digits -1005)\n;; #f\n", "  (let\
    \ ((i a))\n    (while (< i b)\n      (if (even? (modulo i 10))\n        (list\
    \ (modulo i 10))\n        (set! i (+ i 1)))))\n  (list)))\n", "  (cond\n    [(<=\
    \ a b) (list)]\n    [(<= a 0) (list 0)]\n    [(<= b 0) (list)]\n    [(<= a b)\n\
    \      (let ((n (div a 2)))\n        (cons (mod a 2) (generate_integers (sub1\
    \ n) (sub1 n))))]\n    [(<= a 0)\n      (let ((n (div a 2)))\n        (cons (mod\
    \ a 2) (generate_integers (sub1 n) (sub1 n))))]\n    [(<= b 0) (list)]\n    [else\
    \ (let ((n (div a 2)))\n          (cons (mod a 2) (generate_integers (sub1 n)\
    \ (sub1 n))))]\n  )\n)\n", "  (cond\n    [(<= a b) (list)]\n    [(<= a 0) (list\
    \ 0)]\n    [(<= b 0) (list)]\n    [(<= a b) (cons (modulo a 2) (generate_integers\
    \ (add a 1) (sub b 1)))]\n    [else (cons (modulo a 2) (generate_integers (add\
    \ a 1) (sub b 1)))]\n  )\n)\n\n;; Given a positive integer n, return the sum of\
    \ the digits of n.\n;; For example:\n;; >>> (sum_digits 5)\n;; 5\n;; >>> (sum_digits\
    \ 10)\n;; 10\n;; >>> (sum_digits 100)\n;; 100\n;; >>> (sum_digits 1000)\n;; 1000\n\
    ;; >>> (sum_digits 100000)\n;; 100000\n;; >>> (sum_digits 1000000)\n;; 1000000\n\
    ;; >>> (sum_digits 10000000)\n;; 10000000\n;; >>> (sum_digits 100000000)\n;; 100000000\n\
    ;; >>> (sum_digits 1000000000)\n;; 1000000000\n;; >>> (sum_digits 10000000000)\n\
    ;; 10000000000\n;; >>> (sum_digits 100000000000)\n;; 100000000000\n;; >>> (sum_digits\
    \ 1000000000000)\n;; 1000000000000\n;; >>> (sum_digits 10000000000000)\n;; 10000000000000\n\
    ;; >>> (sum_digits 100000000000000)\n;; 100000000000000\n;; >>> (sum_digits 1000000000000000)\n\
    ;; 1000000000000000\n;; >>> (sum_digits 10000000000000000)\n;; 10000000000000000\n\
    ;; >>> (sum_digits 100000000000000000)\n;; 100000000000000000\n;; >>> (sum_digits\
    \ 1000000000000000000)\n;; 1000000000000000000\n;; >>> (sum_digits 10000000000000000000)\n\
    ;; 10000000000000000000\n;; >>> (sum_digits 100000000000000000000)\n;; 100000000000000000000\n\
    ;; >>> (sum_digits 1000000000000000000000)\n;; 1000000000000000000000\n;; >>>\
    \ (sum_digits 10000000000000000000000)\n;; 10000000000000000000000\n;; >>> (sum_digits\
    \ 100000000000000000000000)\n;; 100000000000000000000000\n;; >>> (sum_digits 1000000000000000000000000)\n\
    ;; 1000000000000000000000000\n", "  (let ((n (div a b)))\n    (if (<= n 0)\n \
    \     (list)\n      (let ((i 0))\n        (while (<= i n)\n          (let ((digit\
    \ (modulo (remainder n i) 10)))\n            (if (= digit 0)\n              (list\
    \ digit)\n              (append (list digit) (generate_integers (i + 1) (b))))))))))\n",
  "  (let ((n (if (zero? a) 1 (sub1 a))))\n    (if (zero? b)\n      (list)\n     \
    \ (let ((result (make-vector n b)))\n        (for-each (lambda (i) (vector-set!\
    \ result i (modulo n i)))\n               (range a b)))))\n)\n\n;; Given a positive\
    \ integer n, return the sum of the first n even\n;; digits of the Fibonacci sequence.\n\
    ;; For example:\n;; >>> (sum_of_even_fibonacci 3)\n;; 3\n;; >>> (sum_of_even_fibonacci\
    \ 10)\n;; 55\n;; >>> (sum_of_even_fibonacci 100)\n;; 354224848179261915075", " \
    \ (cond\n    [(<= a b) (list)]\n    [(<= a 0) (list 0)]\n    [(<= a 1) (list 1)]\n\
    \    [(<= a 2) (list 2)]\n    [(<= a 3) (list 3)]\n    [(<= a 4) (list 4)]\n \
    \   [(<= a 5) (list 5)]\n    [(<= a 6) (list 6)]\n    [(<= a 7) (list 7)]\n  \
    \  [(<= a 8) (list 8)]\n    [(<= a 9) (list 9)]\n    [(<= a 10) (list 10)]\n \
    \   [(<= a 11) (list 11)]\n    [(<= a 12) (list 12)]\n    [(<= a 13) (list 13)]\n\
    \    [(<= a 14) (list 14)]\n    [(<= a 15) (list 15)]\n    [(<= a 16) (list 16)]\n\
    \    [(<= a 17) (list 17)]\n    [(<= a 18) (list 18)]\n    [(<= a 19) (list 19)]\n\
    \    [(<= a 20) (list 20)]\n    [(<= a 21) (list 21)]\n    [(<= a 22) (list 22)]\n\
    \    [(<= a 23) (list 23)]\n    [(<= a 24) (list 24)]\n    [(<= a 25) (list 25)]\n\
    \    [(<= a 26) (list 26)]\n    [(<= a 27) (list 27)]\n    [(<= a 28) (list 28)]\n\
    \    [(<= a 29) (list 29)]\n    [(<= a 30) (list 30)]\n    [(<= a 31) (list 31)]\n\
    \    [(<= a 32) (list 32)]\n    [(<= a 33) (list 33)]\n    [(<= a 34) (list 34)]\n\
    \    [(<= a 35) (list 35)]\n    [(<= a 36) (list 36)]\n    [(<= a 37) (list 37)]\n\
    \    [", "  (let ((result (make-vector (sub1 a) (sub1 b))))\n    (for-each (lambda\
    \ (x) (vector-set! result x)) (range a b)))\n  result)\n\n;; Given a positive\
    \ integer n, return the sum of the even digits between\n;; 1 and n, in ascending\
    \ order.\n;; For example:\n;; >>> (sum_even_digits 2)\n;; 2\n;; >>> (sum_even_digits\
    \ 10)\n;; 22\n;; >>> (sum_even_digits 100)\n;; 222\n;; >>> (sum_even_digits 1000)\n\
    ;; 3222\n;; >>> (sum_even_digits 10000)\n;; 32322\n;; >>> (sum_even_digits 100000)\n\
    ;; 323232\n;; >>> (sum_even_digits 1000000)\n;; 3232322\n;; >>> (sum_even_digits\
    \ 10000000)\n;; 32323232\n;; >>> (sum_even_digits 100000000)\n;; 323232322\n;;\
    \ >>> (sum_even_digits 1000000000)\n;; 3232323232\n;; >>> (sum_even_digits 10000000000)\n\
    ;; 32323232322\n;; >>> (sum_even_digits 100000000000)\n;; 323232323232\n;; >>>\
    \ (sum_even_digits 1000000000000)\n;; 3232323232322\n;; >>> (sum_even_digits 10000000000000)\n\
    ;; 32323232323232\n;; >>> (sum_even_digits 100000000000000)\n;; 323232323232322\n\
    ;; >>> (sum_even_digits 1000000000000000)\n;; 3232323232323232\n;; >>> (sum_even_digits\
    \ 10000000000000000)\n;; 32323232323232322\n;; >>> (sum_even_digits 100000000000000000)\n\
    ;; 323232323232323232\n;; >>> (sum_even_digits 1000000000000000000)\n;; 3232323232323232322\n\
    ;; >>> (sum_even_digits 10000000000000000000)\n;; 32323232323232323232\n;; >>>\
    \ (sum_even_digits 100000000000000000000)\n;; 323232323232323232322\n;; >>> (sum_even_digits"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
