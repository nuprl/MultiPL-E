name: HumanEval_25_factorize
language: rkt
prompt: "#lang racket\n\n;; Return list of prime factors of given integer in the order\
  \ from smallest to largest.\n;; Each of the factors should be listed number of times\
  \ corresponding to how many times it appeares in factorization.\n;; Input number\
  \ should be equal to the product of all factors\n;; >>> (factorize 8)\n;; (list\
  \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
  \ 2 5 7)\n(define (factorize n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate factorize))\n\
  \    (check-equal? (candidate 2) (list 2))\n    (check-equal? (candidate 4) (list\
  \ 2 2))\n    (check-equal? (candidate 8) (list 2 2 2))\n    (check-equal? (candidate\
  \ 57) (list 3 19))\n    (check-equal? (candidate 3249) (list 3 3 19 19))\n    (check-equal?\
  \ (candidate 185193) (list 3 3 3 19 19 19))\n    (check-equal? (candidate 20577)\
  \ (list 3 19 19 19))\n    (check-equal? (candidate 18) (list 2 3 3))\n))\n\n(test-humaneval)"
completions: ["  (let ((factors (list 1)))\n    (while (< n 1)\n      (let ((next\
    \ (modulo n 2)))\n        (if (= next 0)\n          (append factors (list n))\n\
    \          (let ((f (modulo/remainder next 2)))\n            (if (< f 1)\n   \
    \           (append factors (list n))\n              (append factors (list f))\n\
    \              (let ((next (modulo/remainder next 2)))\n                (if (<\
    \ next 0)\n                  (append factors (list n))\n                  (append\
    \ factors (list next)))))\n            (append factors (list 2)))\n          (n\
    \ (modulo/remainder n 2)))\n        (n 2)))\n    (reverse factors)))\n\n;; Return\
    \ list of prime factors of given integer in the order from smallest to largest.\n\
    ;; Each of the factors should be listed number of times corresponding to how many\
    \ times it appeares in factorization.\n;; Input number should be equal to the\
    \ product of all factors\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)", "  (let ((factors\
    \ (make-vector n 0)))\n    (let ((i 0))\n      (while (< i n)\n        (let ((p\
    \ (modulo n (car factors))))\n          (if (zero? p)\n            (return factors)\n\
    \            (set-car! factors p)\n            (set-cdr! factors (make-vector\
    \ p 1))\n            (set-car! (cdr factors) (car factors))\n            (set-cdr!\
    \ (cdr factors) (make-vector p 1))\n            (set-car! (cdr (cdr factors))\
    \ (car (cdr factors)))\n            (set-cdr! (cdr (cdr factors)) (make-vector\
    \ p 1))\n            (set-car! (cdr (cdr (cdr factors))) (car (cdr (cdr factors))))\n\
    \            (set-cdr! (cdr (cdr (cdr factors))) (make-vector p 1))\n        \
    \    (set-car! (cdr (cdr (cdr (cdr factors)))) (car (cdr (cdr (cdr factors))))))\n\
    \          (set-car! factors (car factors))\n          (set-cdr! factors (cdr\
    \ factors))\n          (set-car! (cdr factors) (car factors))\n          (set-cdr!\
    \ (cdr factors) (cdr factors))\n          (set-car! (cdr (cdr factors)) (car (cdr\
    \ factors)))\n          (set-cdr! (cdr (cdr factors)) (cdr factors))\n       \
    \   (set-car! (cdr (cdr (cdr factors))) (car (cdr (cdr factors))))\n         \
    \ (set-cdr! (cdr (cdr (cdr factors))) (cdr (cdr (cdr factors))))\n          (set-car!\
    \ (cdr (cdr (cdr (cdr factors)))) (car (cdr (cdr (cdr factors))))))\n        \
    \  (set-cdr! (cdr (cdr (cdr (cdr factors)))) (cdr (cdr (cdr (cdr factors))))))\n\
    \          (set-car! (cdr (cdr (cdr (cdr (cdr factors))))))", "  (let ((factors\
    \ (list)))\n    (if (zero? n)\n      (return factors)\n      (let ((i (1)))\n\
    \        (while (< n i)\n          (if (zero? (modulo n i))\n            (append\
    \ factors i)\n            (set! i (+ i 1)))))\n      (return factors)))\n\n;;\
    \ >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;;\
    \ >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;;", "  (let ((factors\
    \ (list)))\n    (if (zero? n)\n      (return factors)\n      (let ((prime (car\
    \ n)))\n        (if (zero? prime)\n          (return factors)\n          (let\
    \ ((factor (car factors)))\n            (if (zero? prime)\n              (return\
    \ factors)\n              (let ((factor (car factors)))\n                (if (zero?\
    \ prime)\n                  (return factors)\n                  (let ((factor\
    \ (car factors)))\n                    (if (zero? prime)\n                   \
    \   (return factors)\n                      (let ((factor (car factors)))\n  \
    \                      (if (zero? prime)\n                          (return factors)\n\
    \                          (let ((factor (car factors)))\n                   \
    \         (if (zero? prime)\n                              (return factors)\n\
    \                              (let ((factor (car factors)))\n               \
    \                 (if (zero? prime)\n                                  (return\
    \ factors)\n                                  (let ((factor (car factors)))\n\
    \                                    (if (zero? prime)\n                     \
    \                 (return factors)\n                                      (let\
    \ ((factor (car factors)))\n                                        (if (zero?\
    \ prime)\n                                          (return factors)\n       \
    \                                   (let ((factor (car factors)))\n          \
    \                                  (if (zero? prime)\n                       \
    \                       (return factors)\n                                   \
    \           (let ((factor (car factors)))\n                                  \
    \              (if (zero? prime)\n                                           \
    \       (return factors)\n                                                  (let\
    \ ((factor (car factors)))\n                                                 \
    \   (if (zero? prime)\n                                                      (return\
    \ factors)\n                                                      (let ((factor\
    \ (car factors)))\n                                                        (if\
    \ (zero? prime)\n                                                          (return\
    \ factors)\n                                                          (let ((factor\
    \ (car factors)))\n                                                          \
    \  (if (zero? prime)\n                                                       \
    \       (return factors)\n                                                   \
    \           (let ((factor (car factors)))\n                                  \
    \                              (if (zero? prime)\n                           \
    \                                       (return factors)\n                   \
    \                                               (let ((factor (car factors)))\n\
    \                                                                  ", "  (let\
    \ ((factors (list)))\n    (while (< n 1)\n      (let ((p (read-integer)))\n  \
    \      (if (even? p)\n          (append factors (list p))\n          (append factors\
    \ (list p) (list -1))\n          (set! n (quotient n p)))))\n    (reverse factors)))\n\
    \n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)", "  (let ((factors\
    \ (list)))\n    (while (< n 1)\n      (let ((divisor (div n 2)))\n        (if\
    \ (= divisor 1)\n          (append factors (list divisor))\n          (append\
    \ factors (list divisor) (factorize (divisor * n)))\n        )\n      )\n    )\n\
    \    (reverse factors)\n  )\n)\n\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>>\
    \ (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>>\
    \ (factorize 8 * 25 * 70)\n;; (list 2 2 2 5 5 7)", "  (let ((factors (list)))\n\
    \    (let ((p (car factors)))\n      (while (< n p)\n        (let ((q (car factors)))\n\
    \          (if (<= n q)\n            (append factors (list p q))\n           \
    \ (append factors (list p))\n            (append factors (list q))\n         \
    \   (set! p (car factors))\n            (set! q (car factors))\n            (set!\
    \ factors (cdr factors))\n            (set! n (cdr factors)))\n          (set!\
    \ p (car factors))\n          (set! q (car factors))\n          (set! factors\
    \ (cdr factors))\n          (set! n (cdr factors))))))\n  (if (null? factors)\n\
    \    (list 1)\n    (factorize (cdr factors)))\n)\n\n;; Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n;; Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n;; Input number should be equal to the product of all factors\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)", "  (let ((factors (list)))\n    (while\
    \ (< n 1)\n      (let ((p (read \"Enter a number: \")))\n        (if (even? p)\n\
    \          (factors (append factors (list p)))\n          (factors (append factors\
    \ (list p) (list p)))\n          (n (quotient p n))))))\n\n;; >>> (factorize 8)\n\
    ;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n\
    ;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n\
    ;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n\
    ;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n\
    ;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n\
    ;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n\
    ;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n\
    ;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n\
    ;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n\
    ;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n\
    ;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n\
    ;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n\
    ;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n\
    ;; (list 2 5 7)\n;; >>> (factorize 8", "  (let ((factors (list)))\n    (while\
    \ (< n 1)\n      (let ((p (read-integer)))\n        (if (zero? p)\n          (return\
    \ factors)\n          (factors (append factors (list p) (factorize (- p n)))))))))\n\
    \n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)", "  (let ((factors (list)))\n    (while (< n 1)\n     \
    \ (let ((next (modulo n 2)))\n        (if (= next 0)\n          (append factors\
    \ (list next))\n          (append factors (list 2 next))\n          (append factors\
    \ (list next 2)))))\n    (reverse factors)))\n\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2", "  (let ((factors (list)))\n\
    \    (while (< n 1)\n      (let ((i (1)))\n        (while (< (n / i) 1)\n    \
    \      (set! factors (append factors (list i)))\n          (set! i (i * i)))\n\
    \        (set! n (n / i)))\n      (set! i (1)))\n    (factors)))\n\n;; Return\
    \ list of prime factors of given integer in the order from smallest to largest.\n\
    ;; Each of the factors should be listed number of times corresponding to how many\
    \ times it appeares in factorization.\n;; Input number should be equal to the\
    \ product of all factors\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)", "  (let ((factors\
    \ (list 1)))\n    (if (zero? n)\n      (return factors)\n      (let ((f (car factors)))\n\
    \        (if (zero? (quotient n f))\n          (return factors)\n          (setf\
    \ factors (cons f (factorize (quotient n f)))))))))\n\n;; >>> (factorize 8)\n\
    ;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n\
    ;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n\
    ;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n\
    ;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n\
    ;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n\
    ;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n\
    ;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n\
    ;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n\
    ;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n\
    ;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n\
    ;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n\
    ;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n\
    ;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n\
    ;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list", "  (let ((factors (list)))\n\
    \    (let ((i 0))\n      (while (< i n)\n        (if (< n (car factors))\n   \
    \       (set! factors (cdr factors))\n          (set! i (car factors))\n     \
    \     (set! n (cdr factors))\n          (set! factors (cons i (factorize n))))))\n\
    \    (reverse factors)))\n\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)", "  (let ((factors\
    \ (list 1)))\n    (while (< n 1)\n      (let ((f (first factors)))\n        (if\
    \ (zero? (modulo n f))\n          (append factors (f))\n          (set! factors\
    \ (cons (f) (rest factors))))))\n    (reverse factors)))\n\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n", "  (let ((factors\
    \ (list)))\n    (if (zero? n)\n      (return factors)\n      (let ((prime (car\
    \ factors)))\n        (if (zero? prime)\n          (return factors)\n        \
    \  (let ((factor (car factors)))\n            (if (zero? factor)\n           \
    \   (return factors)\n              (let ((factor (car factors)))\n          \
    \      (if (zero? factor)\n                  (return factors)\n              \
    \    (let ((factor (car factors)))\n                    (if (zero? factor)\n \
    \                     (return factors)\n                      (let ((factor (car\
    \ factors)))\n                        (if (zero? factor)\n                   \
    \       (return factors)\n                          (let ((factor (car factors)))\n\
    \                            (if (zero? factor)\n                            \
    \  (return factors)\n                              (let ((factor (car factors)))\n\
    \                                (if (zero? factor)\n                        \
    \          (return factors)\n                                  (let ((factor (car\
    \ factors)))\n                                    (if (zero? factor)\n       \
    \                               (return factors)\n                           \
    \           (let ((factor (car factors)))\n                                  \
    \      (if (zero? factor)\n                                          (return factors)\n\
    \                                          (let ((factor (car factors)))\n   \
    \                                         (if (zero? factor)\n               \
    \                               (return factors)\n                           \
    \                   (let ((factor (car factors)))\n                          \
    \                      (if (zero? factor)\n                                  \
    \                (return factors)\n                                          \
    \        (let ((factor (car factors)))\n                                     \
    \               (if (zero? factor)\n                                         \
    \             (return factors)\n                                             \
    \         (let ((factor (car factors)))\n                                    \
    \                    (if (zero? factor)\n                                    \
    \                      (return factors)\n                                    \
    \                      (let ((factor (car factors)))\n                       \
    \                                     (if (zero? factor)\n                   \
    \                                           (return factors)\n               \
    \                                               (let ((factor (car factors)))\n\
    \                                                                (if (zero? factor)\n\
    \                                                                  (return factors)\n\
    \                                                                  (let ((factor\
    \ (car factors)))\n                                                          \
    \        ", "  (let ((factors (list 1)))\n    (while (< n 1)\n      (let ((f (first\
    \ factors)))\n        (setq factors (rest factors))\n        (if (zero? (modulo\
    \ n f))\n          (append factors f)\n          (append factors (f * n)))))\n\
    \    (reverse factors)))\n\n;; Return list of prime factors of given integer in\
    \ the order from largest to smallest.\n;; Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    ;; Input number should be equal to the product of all factors\n;; >>> (factorize-reverse\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize-reverse 25)\n;; (list 5 5)\n;; >>> (factorize-reverse\
    \ 70)\n;; (list 2 5 7)", "  (let ((factors (list 1)))\n    (while (< n 1)\n  \
    \    (let ((f (first factors)))\n        (if (< n f)\n          (set-car! factors\
    \ f)\n          (set-cdr! factors (cons f (factorize (quotient n f)))))))\n  \
    \  (reverse factors)))\n\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2", "  (let ((factors (list 1)))\n    (while (< n 1)\n      (let\
    \ ((next (modulo n 2)))\n        (if (= next 0)\n          (append factors (list\
    \ n))\n          (let ((f (modulo/remainder next 2)))\n            (if (= f 1)\n\
    \              (append factors (list next))\n              (append factors (list\
    \ (modulo/remainder next f)))\n              (append factors (list (modulo/remainder\
    \ next (modulo f 2))))))))))\n  (reverse factors)))\n\n;; >>> (factorize 8)\n\
    ;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n\
    ;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n\
    ;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n\
    ;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n\
    ;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n\
    ;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n\
    ;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n\
    ;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n\
    ;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n\
    ;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n\
    ;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n\
    ;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n",
  "  (let ((factors (list)))\n    (if (zero? n)\n      (return factors)\n      (if\
    \ (zero? (modulo n 2))\n        (return factors)\n        (let ((factor (divisor-sieve\
    \ n)))\n          (if (zero? factor)\n            (return factors)\n         \
    \   (factors (append factors (list factor)))))\n        (factorize (quotient n\
    \ 2))))))\n\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;;\
    \ (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;;\
    \ (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n\
    ;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n\
    ;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n\
    ;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n\
    ;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n\
    ;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n\
    ;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n\
    ;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n\
    ;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n\
    ;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n\
    ;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n\
    ;; (list 5 5)\n;; >>> (factor", "  (let* ([factors (make-y-vector 0 n)])\n   \
    \ (let* ([i (0)])\n      (while (< i n)\n        (let ([prime (y-ref factors i)])\n\
    \          (if (y-ref factors i)\n            (set! prime (y-ref factors (y-add\
    \ i prime)))\n            (y-set! factors i prime)))\n        (y-set! i (y-add\
    \ i 1)))\n      (y-ref factors i)))\n\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)",
  "  (let ((factors (make-vector n 0)))\n    (let ((i 0))\n      (while (< i n)\n\
    \        (if (< (vector-ref factors i) 0)\n          (setf (vector-set! factors\
    \ i (vector-ref factors i) 1) i)\n          (setf i (+ i 1))))\n      (reverse\
    \ factors)))\n)\n\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n\
    ;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n\
    ;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n\
    ;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n\
    ;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n\
    ;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n\
    ;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n\
    ;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n\
    ;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n\
    ;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n\
    ;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n\
    ;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n\
    ;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n\
    ;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (", "  (let ((factors\
    \ (list)))\n    (let ((i 0))\n      (while (< i n)\n        (if (zero? (modulo\
    \ n i))\n          (append factors (list i))\n          (set! i (+ i 1)))))\n\
    \    (reverse factors)))\n\n;; Return list of prime factors of given integer in\
    \ the order from largest to smallest.\n;; Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    ;; Input number should be equal to the product of all factors\n;; >>> (factorize-prime\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize-prime 25)\n;; (list 5 5)\n;; >>> (factorize-prime\
    \ 70)\n;; (list 2 5 7)", "  (let ((factors (list)))\n    (while (< n 1)\n    \
    \  (let ((f (first factors)))\n        (if (zero? (modulo n f))\n          (append\
    \ factors f)\n          (set! factors (append factors (list f)))))\n      (set!\
    \ n (quotient n f)))\n    (reverse factors)))\n\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)", "  (let ((factors (list)))\n    (if (zero? n)\n\
    \      (return factors)\n      (let ((i 0))\n        (while (< i n)\n        \
    \  (let ((p (modulo n i)))\n            (if (zero? p)\n              (append factors\
    \ (list i))\n              (else\n                (append factors (list (car factors)\
    \ p))\n                (append factors (list i p)))))\n            (set! i (+\
    \ i 1)))))\n    (car factors)))\n\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>>\
    \ (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>>\
    \ (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>>\
    \ (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>>\
    \ (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>>\
    \ (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>>\
    \ (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>>\
    \ (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>>\
    \ (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>>\
    \ (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>>\
    \ (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>>\
    \ (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>>\
    \ (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>>\
    \ (", "  (let ((factors (list 1)))\n    (while (< n 1)\n      (let ((p (read-integer)))\n\
    \        (if (zero? p)\n          (return factors)\n          (factors (append\
    \ factors (list p) (factorize (- p n)))))))))\n\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25", "  (let*\
    \ ([factors (make-y-vector 1 n)])\n    (let* ([i (0)])\n      (while (< i n)\n\
    \        (let* ([prime (y-ref factors i)])\n          (if (y-ref factors i)\n\
    \            (set! i (+ i 1))\n            (y-set! factors i prime)\n        \
    \  )\n        )\n      )\n    )\n    (y-vector-copy factors factors)\n  )\n)\n",
  "  (let ((factors (list 1)))\n    (while (< n 1)\n      (let ((next (modulo n 2)))\n\
    \        (if (= next 0)\n          (append factors (list n))\n          (let ((f\
    \ (modulo/remainder next 2)))\n            (if (= f 1)\n              (append\
    \ factors (list next))\n              (append factors (list f)))))\n        (n\
    \ (next)))\n      (n 2)))\n\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8 * 8 * 8)\n;; (list 2 2 2)\n;; >>> (factorize 25 * 25 * 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70 * 70 * 70)\n;; (list 2 5 7)\n;; >>> (factorize 8 * 25 * 70)\n\
    ;; (list 2 2 2)\n;; >>> (factorize 8 * 25 * 70 * 70)\n;; (list 2 2 2)\n;; >>>\
    \ (factorize 8 * 25 * 70 * 70 * 70)\n;; (list 2 2 2)\n;; >>> (factorize 8 * 25\
    \ * 70 * 70 * 70 * 70)\n;; (list 2 2 2)\n;; >>> (factorize 8 * 25 * 70 * 70 *\
    \ 70 * 70 * 70)\n;; (list 2 2 2)\n;; >>> (factorize 8 * 25 * 70 * 70 * 70 * 70\
    \ * 70 * 70)\n;; (list 2 2 2)\n;; >>> (factorize 8 * 25 * 70 * 70 * 70 * 70 *\
    \ 70 * 70 * 70)\n;; (list 2 2 2)\n;; >>> (factorize 8 * 25 * 70 * 70 * 70 * 70\
    \ * 70 * 70 * 70 * 70)\n;; (list 2 2 2)\n;; >>> (factorize 8 * 25 * 70 * 70 *\
    \ 70 * 70 * 70 * 70 * 70 * 70 * 70)\n;; (list 2 2 2)\n;; >>> (factorize 8 * 25\
    \ * 70 * 70 * 70 * 70 * 70 * 70 * 70 * 70 * 70 * 70)\n;; (list 2 2 2)\n;; >>>\
    \ (factorize 8 * 25 * 70 *", "  (let* ([factors (make-y-vector 1)]\n         [factor-count\
    \ (make-y-vector 1)]))\n  (let ([prime-factors (make-y-vector 1)]\n        [prime-factor-count\
    \ (make-y-vector 1)])\n    (let ([i 0])\n      (while (< i n)\n        (let ([factor\
    \ (y-ref factors i)])\n          (let ([prime (y-ref prime-factors i)])\n    \
    \        (if (not (y-ref prime-factor-count i))\n              (y-set! prime-factor-count\
    \ i 1)\n              (y-set! (y-ref prime-factor-count i) (+ (y-ref prime-factor-count\
    \ i) (y-ref factor-count i))))\n            (y-set! factor-count i (+ (y-ref factor-count\
    \ i) 1))\n            (y-set! i (+ i 1)))))\n      (y-set! factor-count 1)\n \
    \     (y-set! prime-factor-count 1)\n      (y-set! factors (make-y-vector 1))\n\
    \      (y-set! prime-factors (make-y-vector 1))))\n  (y-ref factors 1)\n  (y-ref\
    \ prime-factors 1)\n  (y-ref factor-count 1))\n\n;; Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n;; Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n;; Input number should be equal to the product of all factors\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)", "  (let ((factors (list 1)))\n    (while\
    \ (< n 1)\n      (let ((p (read-line)))\n        (if (string? p)\n          (let\
    \ ((f (string->number p)))\n            (if (< f n)\n              (append factors\
    \ (list f))\n              (set! factors (append factors (list f)))\n        \
    \    )\n          )\n          (print \"Invalid input. Try again.\\n\")\n    \
    \    )\n      )\n    )\n  )\n)\n", "  (let* ([factors (make-y-vector 0)])\n  \
    \  (let* ([i (1)])\n      (while (< i n)\n        (let* ([prime (y-ref factors\
    \ i)])\n          (if (y-empty? prime)\n            (y-ref factors i)\n      \
    \      (let* ([factor (y-ref prime)])\n              (y-set! prime (y-make-y-vector\
    \ 1))\n              (y-set! (y-ref factors i) (y-make-y-vector (y-ref factors\
    \ i) (y-ref factor) (y-ref factor) (y-ref factor)))\n              (y-set! i (y-ref\
    \ i) (y-ref i) (y-ref i) (y-ref i) (y-ref i) (y-ref i) (y-ref i) (y-ref i) (y-ref\
    \ i) (y-ref i) (y-ref i) (y-ref i) (y-ref i) (y-ref i) (y-ref i) (y-ref i) (y-ref\
    \ i) (y-ref i) (y-ref i) (y-ref i) (y-ref i) (y-ref i) (y-ref i) (y-ref i) (y-ref\
    \ i) (y-ref i) (y-ref i) (y-ref i) (y-ref i) (y-ref i) (y-ref i) (y-ref i) (y-ref\
    \ i) (y-ref i) (y-ref i) (y-ref i) (y-ref i) (y-ref i) (y-ref i) (y-ref i) (y-ref\
    \ i) (y-ref i) (y-ref i) (y-ref i) (y-ref i) (y-ref i) (y-ref i) (y-ref i) (y-ref\
    \ i) (y-ref i) (y-ref i) (y-ref i) (y-ref i) (y-ref i) (y-ref i) (y-ref i) (y-ref\
    \ i) (y-ref i) (y-ref i) (", "  (let ((factors (list)))\n    (while (< n 1)\n\
    \      (let ((p (read-line \"Enter a number: \")))\n        (if (not (integer?\
    \ p)) (print \"Not an integer\")))\n        (let ((f (integer->string p)))\n \
    \         (if (not (string? f)) (print \"Not a string\")))\n          (let ((f\
    \ (string->number f)))\n            (if (not (integer? f)) (print \"Not an integer\"\
    )))\n            (if (< f 1) (print \"Not a prime number\"))\n            (if\
    \ (not (member f factors))\n              (factors (append factors (list f))))))\n\
    \    (if (empty? factors) (print \"No prime factors found\"))\n    (print factors)))\n",
  "  (let ((factors (list 1)))\n    (while (< n 1)\n      (let ((divisor (quotient\
    \ n 1)))\n        (if (< divisor 1)\n          (append factors (list divisor))\n\
    \          (let ((divisor (quotient divisor divisor)))\n            (append factors\
    \ (list divisor) (factorize divisor)))))\n      (n (quotient n 1)))\n    (reverse\
    \ factors)))\n\n;; Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n;; Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n;; Input\
    \ number should be equal to the product of all factors\n;; >>> (factorize 8)\n\
    ;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n\
    ;; (list 2 5 7)", "  (let ((factors (list)))\n    (while (< n 1)\n      (let ((p\
    \ (read-integer)))\n        (if (even? p)\n          (append factors (list p))\n\
    \          (append factors (list p) (list -1))\n          (set! n (quotient n\
    \ p)))\n        (set! n (quotient n 2)))\n      (if (= n 1)\n        (reverse\
    \ factors)\n        (append factors (list -1))))))\n\n;; Return list of prime\
    \ factors of given integer in the order from largest to smallest.\n;; Each of\
    \ the factors should be listed number of times corresponding to how many times\
    \ it appeares in factorization.\n;; Input number should be equal to the product\
    \ of all factors\n;; >>> (factorize-reverse 8)\n;; (list 2 2 2)\n;; >>> (factorize-reverse\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize-reverse 70)\n;; (list 2 5 7)", "  (let\
    \ ((factors (list 1)))\n    (while (< n 1)\n      (let ((p (read-line \"Enter\
    \ a number: \")))\n        (if (even? p)\n          (factors (append factors (list\
    \ p)))\n          (let ((f (read-line \"Enter a factor: \")))\n            (let\
    \ ((count 0))\n              (while (< f 1)\n                (if (member? f factors)\n\
    \                  (set! count (+ count 1))\n                  (set! f (read-line\
    \ \"Enter a factor: \"))\n                )\n              )\n              (factors\
    \ (append factors (list p) (list count)))\n            )\n          )\n      \
    \  )\n      )\n    )\n  )\n)\n", "  (let ((factors (list 1)))\n    (while (< n\
    \ 1)\n      (let ((p (read-line)))\n        (if (string=? p \"\")\n          (print\
    \ factors)\n          (let ((f (string->number p)))\n            (if (< f 1)\n\
    \              (print factors)\n              (let ((i (1)))\n               \
    \ (while (< i f)\n                  (let ((f (f * p)))\n                    (set!\
    \ i (+ i 1))\n                    (set! factors (append factors (list f i)))))))))\n\
    \        (print \"Not a number\")))\n    (print factors)))\n\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n", "  (let* ([factors (make-y-vector\
    \ 0)])\n    (let* ([i (1)])\n      (while (< i n)\n        (let* ([factor (y-ref\
    \ factors i)])\n          (if (y-empty? factor)\n            (y-ref factors i)\n\
    \            (let* ([j (1)])\n              (while (< j y-length)\n          \
    \      (let* ([subfactor (y-ref factor j)])\n                  (if (y-empty? subfactor)\n\
    \                    (y-ref factors i)\n                    (y-set! factor j (y-ref\
    \ factors i))\n                    (y-set! subfactor j (y-ref factors i))\n  \
    \                  (y-ref factors i)\n                    (y-set! factor j (y-ref\
    \ factors i))\n                    (y-set! subfactor j (y-ref factors i))\n  \
    \                  (y-ref factors i)\n                    (y-set! factor j (y-ref\
    \ factors i))\n                    (y-set! subfactor j (y-ref factors i))\n  \
    \                  (y-ref factors i)\n                    (y-set! factor j (y-ref\
    \ factors i))\n                    (y-set! subfactor j (y-ref factors i))\n  \
    \                  (y-ref factors i)\n                    (y-set! factor j (y-ref\
    \ factors i))\n                    (y-set! subfactor j (y-ref factors i))\n  \
    \                  (y-ref factors i)\n                    (y-set! factor j (y-ref\
    \ factors i))\n                    (y-set! subfactor j (y-ref factors i))\n  \
    \                  (y-ref factors i)\n                    (y-set! factor j (y-ref\
    \ factors i))\n                    (y-set! subfactor j (y-ref factors i))\n  \
    \                  (y-ref factors i)\n                    (y-set! factor j (y-ref\
    \ factors i))\n                    (y-set! subfactor j (y-ref factors i))\n  \
    \                  (y-ref factors i)\n                    (y-set! factor j (y-ref\
    \ factors i))\n                    (y-set! subfactor j (y-ref factors i))\n  \
    \                  (y-ref factors i)\n                    (y-set", "  (let ((factors\
    \ (list 1)))\n    (while (< n 1)\n      (let ((p (read-line \"Enter a number:\
    \ \")))\n        (if (zerop p)\n          (return factors)\n          (let ((f\
    \ (read-line \"Enter a factor: \")))\n            (if (zerop f)\n            \
    \  (return factors)\n              (let ((i (read-line \"Enter a number: \")))\n\
    \                (if (zerop i)\n                  (return factors)\n         \
    \         (let ((f (read-line \"Enter a factor: \")))\n                    (if\
    \ (zerop f)\n                      (return factors)\n                      (let\
    \ ((i (read-line \"Enter a number: \")))\n                        (if (zerop i)\n\
    \                          (return factors)\n                          (let ((f\
    \ (read-line \"Enter a factor: \")))\n                            (if (zerop f)\n\
    \                              (return factors)\n                            \
    \  (let ((i (read-line \"Enter a number: \")))\n                             \
    \   (if (zerop i)\n                                  (return factors)\n      \
    \                            (let ((f (read-line \"Enter a factor: \")))\n   \
    \                                 (if (zerop f)\n                            \
    \          (return factors)\n                                      (let ((i (read-line\
    \ \"Enter a number: \")))\n                                        (if (zerop\
    \ i)\n                                          (return factors)\n           \
    \                               (let ((f (read-line \"Enter a factor: \")))\n\
    \                                            (if (zerop f)\n                 \
    \                             (return factors)\n                             \
    \                 (let ((i (read-line \"Enter a number: \")))\n              \
    \                                  (if (zerop i)\n                           \
    \                       (return factors)\n                                   \
    \               (let ((f (read-line \"Enter a factor: \")))\n                \
    \                                    (if (zerop f)\n                         \
    \                             (return factors)\n                             \
    \                         (let ((i (read-line \"Enter a number: \")))\n      \
    \                                                  (if (zerop i)\n           \
    \                                               (return factors)\n           \
    \                          ", "  (let ((factors (list)))\n    (while (< n 1)\n\
    \      (let ((p (read \"Enter a number: \")))\n        (if (not (in? p n))\n \
    \         (append factors (list p)))\n        (set! n (quotient p n)))))\n  (if\
    \ (zero? n)\n    (list 1)\n    (factorize (quotient n 1)))\n)\n\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)", "  (let ((factors (make-vector n 0)))\n    (let ((i 0))\n      (while\
    \ (< i n)\n        (let ((p (modulo n i)))\n          (if (= p 1)\n          \
    \  (set! factors (append factors (list i)))\n            (set! factors (append\
    \ factors (list i p)))\n            (set! i (+ i 1)))))\n        (set! i 0)))\n\
    \    (reverse factors)))\n\n;; Return list of prime factors of given integer in\
    \ the order from smallest to largest.\n;; Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    ;; Input number should be equal to the product of all factors\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)", "  (let ((factors (list)))\n    (while (< n 1)\n    \
    \  (let ((p (read-integer)))\n        (if (zero? p)\n          (return factors)\n\
    \          (factors (append factors (list p) (factorize (- p n)))))))))\n", " \
    \ (let ((factors (list 1)))\n    (while (< n 1)\n      (let ((p (read-line \"\
    Enter a number: \")))\n        (if (not (integer? p)) (print \"Not an integer\"\
    )))\n        (let ((f (integer->string p)))\n          (if (not (string? f)) (print\
    \ \"Not a string\")))\n          (let ((f (string->integer f)))\n            (if\
    \ (< f 1) (print \"Not a positive integer\")))\n            (if (not (in-vector\
    \ factors f))\n              (let ((i (vector-ref factors f)))\n             \
    \   (vector-set! factors i (+ i 1))))\n              (vector-set! factors f 1)))\n\
    \          (print factors)))\n  ))\n\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n", "  (let ((factors (list)))\n    (if (zero? n)\n     \
    \ (return factors)\n      (let ((i (1)))\n        (while (< i n)\n          (if\
    \ (zero? (modulo n i)))\n            (append factors i)\n            (set! i (+\
    \ i 1)))))\n    (reverse factors)))\n\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;;", "  (let ((factors (list 1)))\n    (while (< n 1)\n\
    \      (let ((f (car factors)))\n        (if (odd? n)\n          (let ((d (quotient\
    \ n f)))\n            (if (< d 1)\n              (factors (append factors (list\
    \ d)))\n              (factors (append factors (list f) (list d)))\n         \
    \   )\n          )\n          (factors (append factors (list f)))\n        )\n\
    \      )\n    )\n  )\n)\n", "  (let ((factors (list)))\n    (while (< n 1)\n \
    \     (let ((p (read-line \"Enter a number: \")))\n        (if (even? p)\n   \
    \       (append factors (list p)))\n        (append factors (list p) (* p (factorize\
    \ (quotient n p))))\n      )\n    )\n    (reverse factors)\n  )\n)\n\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5", "  (let ((factors (list 1)))\n    (if (zero? n)\n      (return\
    \ factors)\n      (let ((factor (car factors)))\n        (if (zero? factor)\n\
    \          (return factors)\n          (set! factors (cons factor (factorize (quotient\
    \ n factor)))))))\n    (error \"Factorization failed\")\n    ))\n\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize", "  (let ((factors (list)))\n    (let\
    \ ((i 0))\n      (while (< i n)\n        (if (< n (car factors))\n          (setq\
    \ factors (cdr factors))\n          (setq i (1+ i)))\n        (setq i (1+ i)))\n\
    \      (car factors)))\n)\n\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list", "  (let ((factors (list 1)))\n    (while (< n 1)\n      (let\
    \ ((f (car factors)))\n        (setq factors (cdr factors))\n        (if (odd?\
    \ f)\n          (setq factors (cons f factors))\n          (if (< n (quotient\
    \ f n))\n            (setq factors (cons f factors)))))\n      (if (< n (quotient\
    \ f n))\n        (setq factors (cons f factors))))\n    (reverse factors)))\n\n\
    ;; Return list of prime factors of given integer in the order from largest to\
    \ smallest.\n;; Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n;; Input number should be equal\
    \ to the product of all factors\n;; >>> (factorize-prime 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize-prime 25)\n;; (list 5 5)\n;; >>> (factorize-prime 70)\n;; (list\
    \ 2 5 7)", "  (let ((factors (list 1)))\n    (while (< n 1)\n      (let ((divisor\
    \ (quotient n 1)))\n        (if (< divisor 1)\n          (factors (append factors\
    \ (list divisor)))\n          (let ((divisor (quotient divisor 2)))\n        \
    \    (if (< divisor 1)\n              (factors (append factors (list divisor)))\n\
    \              (let ((divisor (quotient divisor 3)))\n                (if (< divisor\
    \ 1)\n                  (factors (append factors (list divisor)))\n          \
    \        (let ((divisor (quotient divisor 4)))\n                    (if (< divisor\
    \ 1)\n                      (factors (append factors (list divisor)))\n      \
    \                (let ((divisor (quotient divisor 5)))\n                     \
    \   (if (< divisor 1)\n                          (factors (append factors (list\
    \ divisor)))\n                          (let ((divisor (quotient divisor 6)))\n\
    \                            (if (< divisor 1)\n                             \
    \ (factors (append factors (list divisor)))\n                              (let\
    \ ((divisor (quotient divisor 7)))\n                                (if (< divisor\
    \ 1)\n                                  (factors (append factors (list divisor)))\n\
    \                                  (let ((divisor (quotient divisor 8)))\n   \
    \                                 (if (< divisor 1)\n                        \
    \              (factors (append factors (list divisor)))\n                   \
    \                   (factors (append factors (list divisor
  "  (let ((factors (list 1)))\n    (while (< n 1)\n      (let ((p (read-line \"Enter\
    \ a number: \")))\n        (if (not (integer? p)) (print \"Not an integer\")))\n\
    \        (let ((f (integer->string p)))\n          (if (not (string? f)) (print\
    \ \"Not a string\")))\n          (let ((i 0))\n            (while (< i 0)\n  \
    \            (if (member (string->integer f) factors)\n                  (print\
    \ \"This number is already in the list\")\n                  (else\n         \
    \           (setq factors (append factors (list string->integer f))\n        \
    \              (setq i (+ 1)))))))))\n    (print factors)))\n", "  (let ((factors\
    \ (make-vector n 0)))\n    (let ((i 0))\n      (while (< i n)\n        (let ((p\
    \ (modulo n i)))\n          (if (= p 1)\n            (set-vector-element! factors\
    \ i)\n            (set-vector-element! factors (vector-ref factors i) (+ (vector-ref\
    \ factors i) p)))))\n        (set-vector-element! factors i 1))\n    (vector-ref\
    \ factors 1)))\n\n;; Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n;; Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n;; Input\
    \ number should be equal to the product of all factors\n;; >>> (factorize 8)\n\
    ;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n\
    ;; (list 2 5 7)", "  (let ((factors (list 1)))\n    (while (< n 1)\n      (let\
    \ ((p (read-line \"Enter a number: \")))\n        (if (even? p)\n          (factors\
    \ (append factors (list p)))\n          (let ((f (read-line \"Enter a factor:\
    \ \")))\n            (let ((count 0))\n              (while (< f 1)\n        \
    \        (let ((f (read-line \"Enter a factor: \")))\n                  (if (even?\
    \ f)\n                    (factors (append factors (list p)))\n              \
    \      (let ((count (1+ count)))\n                      (factors (append factors\
    \ (list p f count))))))))))))))\n", "  (let ((factors (list)))\n    (while (<\
    \ n 1)\n      (let ((p (first factors)))\n        (if (zero? p)\n          (return\
    \ factors)\n          (setq factors (append factors (list p (factorize (- n p)))))))\n\
    \      (setq n (quotient n p)))\n    (reverse factors)))\n\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8", "  (let ((factors (list)))\n   \
    \ (if (zero? n)\n      (return factors)\n      (let ((i (1)))\n        (while\
    \ (< i n)\n          (if (zero? (modulo n i)))\n            (append factors i)\n\
    \            (set! i (+ i 1)))))\n    (reverse factors)))\n\n;; Return list of\
    \ prime factors of given integer in the order from largest to smallest.\n;; Each\
    \ of the factors should be listed number of times corresponding to how many times\
    \ it appeares in factorization.\n;; Input number should be equal to the product\
    \ of all factors\n;; >>> (factorize-reverse 8)\n;; (list 2 2 2)\n;; >>> (factorize-reverse\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize-reverse 70)\n;; (list 2 5 7)", "  (let\
    \ ((factors (list)))\n    (while (< n 1)\n      (let ((p (read-integer)))\n  \
    \      (if (zero? p)\n          (return factors)\n          (factors (append factors\
    \ (list p) (factorize (- n p)))))))))\n\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)", "  (let ((factors\
    \ (list 1)))\n    (while (< n 1)\n      (let ((f (first factors)))\n        (if\
    \ (< n f)\n          (append factors (list f))\n          (set! factors (append\
    \ factors (list f)))\n          (set! n (quotient n f)))\n        (set! f (next\
    \ factors)))\n      ))\n  (reverse factors)))\n\n;; Return list of prime factors\
    \ of given integer in the order from largest to smallest.\n;; Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n;; Input number should be equal to the product of all factors\n\
    ;; >>> (factorize-reverse 8)\n;; (list 2 2 2)\n;; >>> (factorize-reverse 25)\n\
    ;; (list 5 5)\n;; >>> (factorize-reverse 70)\n;; (list 2 5 7)", "  (let ((factors\
    \ (list)))\n    (while (< n 1)\n      (let ((i (1)))\n        (while (< (n / i)\
    \ 1)\n          (set! factors (append factors (list i)))\n          (set! i (i\
    \ + 1)))\n        (set! n (n / i)))\n      )\n    (reverse factors)\n    )\n \
    \ )\n\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)", "  (let ((factors (list 1)))\n\
    \    (while (< n 1)\n      (let ((next (modulo n 2)))\n        (if (= next 0)\n\
    \          (append factors (list n))\n          (let ((f (modulo/remainder next\
    \ 2)))\n            (if (< f 1)\n              (append factors (list n))\n   \
    \           (append factors (list f))\n              (let ((next (modulo/remainder\
    \ next 2)))\n                (if (< next 0)\n                  (append factors\
    \ (list n))\n                  (append factors (list next)))))\n            (append\
    \ factors (list 2))))))\n    (reverse factors)))\n\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>>", "  (let ((factors (list)))\n    (while (< n 1)\n      (let ((f\
    \ (floor n)))\n        (if (not (in? f factors))\n          (factors (append factors\
    \ (list f)))\n          (n (quotient f n))))))\n  (reverse factors))\n\n;; >>>\
    \ (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>>\
    \ (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>>\
    \ (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>>\
    \ (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>>\
    \ (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>>\
    \ (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>>\
    \ (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>>\
    \ (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>>\
    \ (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>>\
    \ (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>>\
    \ (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>>\
    \ (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>>\
    \ (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>>\
    \ (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>>",
  "  (let* ([factors (make-y-vector 0)])\n    (let ([prime-index 0])\n      (while\
    \ (< n 1)\n        (let* ([divisor (y-vector-ref factors (y-vector-ref factors\
    \ prime-index))])\n          (if (y-vector-ref factors prime-index)\n        \
    \    (let* ([divisor-index (y-vector-ref factors prime-index)])\n            \
    \  (y-vector-set! factors (y-vector-ref factors prime-index) 0)\n            \
    \  (y-vector-set! factors (y-vector-ref factors divisor-index) (y-vector-ref factors\
    \ divisor-index) + 1)\n              (y-vector-set! factors (y-vector-ref factors\
    \ divisor-index) 0)\n              (y-vector-set! prime-index (y-vector-ref prime-index)\
    \ (y-vector-ref prime-index) + 1)\n              (set! prime-index 0))\n     \
    \       (set! prime-index (y-vector-ref prime-index) (y-vector-ref prime-index)\
    \ + 1))\n          (set! prime-index (y-vector-ref prime-index) 0)))\n    (y-vector-set!\
    \ factors prime-index 1)\n    (y-vector-set! factors prime-index 0)\n    (y-vector-set!\
    \ factors prime-index 1)\n    (y-vector-set! factors prime-index 0)\n    (y-vector-set!\
    \ factors prime-index 1)\n    (y-vector-set! factors prime-index 0)\n    (y-vector-set!\
    \ factors prime-index 1)\n    (y-vector-set! factors prime-index 0)\n    (y-vector-set!\
    \ factors prime-index 1)\n    (y-vector-set! factors prime-index 0)\n    (y-vector-set!\
    \ factors prime-index 1)\n    (y-vector-set! factors prime-index 0)\n    (y-vector-set!\
    \ factors prime-index 1)\n    (y-vector-set! factors prime-index 0)\n    (y-vector-set!\
    \ factors prime-index 1)\n    (y", "  (let ((factors (list)))\n    (while (< n\
    \ 1)\n      (if (< n (car factors))\n        (set! factors (append factors (car\
    \ factors)))\n        (set! n (cdr factors)))\n      )\n    (if (null? factors)\n\
    \      (list 1)\n      (list (car factors) (cdr factors))\n      )\n    )\n  )\n\
    \n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2", "  (let ((factors (list 1)))\n    (while (<\
    \ n 1)\n      (let ((f (first factors)))\n        (if (< n f)\n          (set!\
    \ factors (append factors (list f)))\n          (set! n (quotient n f))))))\n\
    \  (if (zero? n)\n    (list 1)\n    (factorize (quotient n (first factors))))\n\
    )\n\n;; >>> (factorize (product-of-factors (factorize 8)))\n;; (list 2 2 2)\n\
    ;; >>> (factorize (product-of-factors (factorize 25)))\n;; (list 5 5)\n;; >>>\
    \ (factorize (product-of-factors (factorize 70)))\n;; (list 2 5 7)\n;; >>> (factorize\
    \ (product-of-factors (factorize 100)))\n;; (list 2 2 2 2)\n;; >>> (factorize\
    \ (product-of-factors (factorize 1000)))\n;; (list 2 2 2 2 2)\n;; >>> (factorize\
    \ (product-of-factors (factorize 10000)))\n;; (list 2 2 2 2 2 2)\n;; >>> (factorize\
    \ (product-of-factors (factorize 100000)))\n;; (list 2 2 2 2 2 2 2)\n;; >>> (factorize\
    \ (product-of-factors (factorize 1000000)))\n;; (list 2 2 2 2 2 2 2 2)\n;; >>>\
    \ (factorize (product-of-factors (factorize 10000000)))\n;; (list 2 2 2 2 2 2\
    \ 2 2 2)\n;; >>> (factorize (product-of-factors (factorize 100000000)))\n;; (list\
    \ 2 2 2 2 2 2 2 2 2 2)\n;; >>> (factorize (product-of-factors (factorize 1000000000)))\n\
    ;; (list 2 2 2 2 2 2 2 2 2 2 2)\n;; >>> (factorize (product-of-factors (factorize\
    \ 10000000000)))\n;; (list 2 2 2 2 2 2 2 2 2 2 2 2)\n;; >>> (factorize (product-of-factors\
    \ (factorize 100000000000)))\n;; (list 2 2 2 2 2 2 2 2 2 2 2 2 2)\n;; >>> (factorize\
    \ (product-of-factors (factorize 100", "  (let* ([factors (make-y-vector 0)])\n\
    \    (let* ([i (1)])\n      (while (< i n)\n        (let* ([divisor (y-ref factors\
    \ i)])\n          (if (zero? divisor)\n            (y-set! factors i (+ i 1))\n\
    \            (let* ([divisor-factor (y-ref factors divisor)])\n              (if\
    \ (zero? divisor-factor)\n                (y-set! factors divisor (+ divisor 1))\n\
    \                (y-set! factors divisor-factor (+ divisor-factor 1))\n      \
    \          (y-set! factors i (+ i divisor)))))\n          (set! i (+ i 2)))\n\
    \      (y-set! factors i 1)))\n  (y-vector-length factors))\n\n;; >>> (factorize\
    \ 8)\n;; 2\n;; >>> (factorize 25)\n;; 5\n;; >>> (factorize 70)\n;; 2 5 7", " \
    \ (let ((factors (list)))\n    (let ((prime-factors (list)))\n      (let ((factor\
    \ (1)))\n        (while (< n factor)\n          (set! factor (* factor prime-factors))\n\
    \          (append prime-factors (list factor))\n          (append factors (list\
    \ factor))\n        )\n      )\n      (reverse factors)\n    )\n  )\n)\n", " \
    \ (let ((factors (list)))\n    (while (< n 1)\n      (let ((f (car factors)))\n\
    \        (if (zero? (modulo n f))\n          (append factors (cons f (factorize\
    \ (quotient n f))))\n          (append factors (cons f 1))))))\n  (car factors))\n\
    \n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2", " \
    \ (let ((factors (list)))\n    (while (< n 1)\n      (let ((p (first factors)))\n\
    \        (if (= n (* p p))\n          (set! factors (append factors (list p)))\n\
    \          (set! n (quotient n p))))))\n  (reverse factors))\n\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;;", "  (let ((factors\
    \ (list 1)))\n    (while (< n 1)\n      (let ((f (first factors)))\n        (if\
    \ (<= n f)\n          (set-car! factors f)\n          (set-cdr! factors (cons\
    \ f (factorize (quotient n f)))))))\n    (reverse factors)))\n\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list", "  (let ((factors (list\
    \ 1)))\n    (while (< n 1)\n      (let ((p (read-line \"Enter a number: \")))\n\
    \        (if (even? p)\n          (factors (append factors (list p)))\n      \
    \    (let ((f (read-line \"Enter a factor: \")))\n            (let ((count 0))\n\
    \              (while (< f 1)\n                (let ((f (read-line \"Enter a factor:\
    \ \")))\n                  (if (even? f)\n                    (factors (append\
    \ factors (list f)))\n                    (let ((count (1+ count))))\n       \
    \             (if (> count p)\n                      (let ((f (read-line \"Enter\
    \ a factor: \")))\n                        (let ((count (1+ count))))\n      \
    \                  (if (> count p)\n                          (error \"Number\
    \ is not prime\"))))))))))))))\n  (if (null? factors)\n    (error \"Number is\
    \ not prime\")\n  (reverse factors)))\n\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)", "  (let ((factors\
    \ (list)))\n    (while (< n 1)\n      (let ((p (read-integer)))\n        (if (zero?\
    \ p)\n          (return factors)\n          (factors (append factors (list p)))))\n\
    \      (set! n (- n 1)))))\n\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factor", "  (let ((factors (list 1)))\n    (while\
    \ (< n 1)\n      (let ((p (read-line \"Enter a number: \")))\n        (if (even?\
    \ p)\n          (print \"Not a prime number!\")\n          (else\n           \
    \ (let ((f (read-line \"Enter the number of times this prime appears in factorization:\
    \ \")))\n              (if (< f 1)\n                (print \"Number of times should\
    \ be at least 1!\")\n                (else\n                  (let ((i (read-line\
    \ \"Enter the number of this prime: \")))\n                    (if (even? i)\n\
    \                      (print \"Not a prime number!\")\n                     \
    \ (else\n                        (let ((f (read-line \"Enter the number of times\
    \ this prime appears in factorization: \")))\n                          (if (<\
    \ f 1)\n                            (print \"Number of times should be at least\
    \ 1!\")\n                            (else\n                              (let\
    \ ((i (read-line \"Enter the number of this prime: \")))\n                   \
    \             (if (even? i)\n                                  (print \"Not a\
    \ prime number!\")\n                                  (else\n                \
    \                    (let ((f (read-line \"Enter the number of times this prime\
    \ appears in factorization: \")))\n                                      (if (<\
    \ f 1)\n                                        (print \"Number of times should\
    \ be at least 1!\")\n                                        (else\n         \
    \                                 (let ((i (read-line \"Enter the number of this\
    \ prime: \")))\n                                            (if (even? i)\n  \
    \                                            (print \"Not a prime number!\")\n\
    \                                              (else\n                       \
    \                         (let ((f (read-line \"Enter the number of times this\
    \ prime appears in factorization: \")))\n                                    \
    \              (if (< f 1)\n                                                 \
    \   (print \"Number of times should be at least 1!\")\n                      \
    \                              (else\n                                       \
    \               (let ((i (read-line \"Enter the number of this prime: \")))\n\
    \                                                        (if (even? i)\n     \
    \                                                     (print \"Not a prime number!\"\
    )\n                                                          (else", "  (let ((factors\
    \ (list)))\n    (while (< n 1)\n      (let ((p (read-integer)))\n        (if (zero?\
    \ p)\n          (return factors)\n          (let ((f (integer-divisible-p p)))\n\
    \            (if (not (null? (cdr f)))\n              (error \"Factorization is\
    \ not unique\")\n              (setf (car f) p)\n              (setf (cdr f) 1)\n\
    \              (setf factors (cons (car f) (cons (car f) (cons p 1))))))))))\n\
    \n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (", "  (let ((factors (list)))\n    (while (< n 1)\n      (if (< n (car\
    \ factors))\n        (set! factors (cdr factors))\n        (set! n (car factors))\n\
    \        (set! factors (cons n (factorize (car factors))))))\n    (reverse factors)))\n\
    \n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n",
  "  (let ((factors (list 1)))\n    (while (< n 1)\n      (let ((f (quotient n 1)))\n\
    \        (if (< f 1)\n          (return factors)\n          (factors (append factors\
    \ (list f) (factorize (quotient n f))))))))\n", "  (let ((factors (list)))\n \
    \   (let ((i 0))\n      (while (< i n)\n        (if (zero? (modulo n i))\n   \
    \       (append factors (list i))\n          (set! i (+ i 1)))))\n    (reverse\
    \ factors)))\n\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n\
    ;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n\
    ;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n\
    ;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n\
    ;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n\
    ;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n\
    ;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n\
    ;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n\
    ;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n\
    ;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n\
    ;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n\
    ;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n\
    ;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n\
    ;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n\
    ;; (list 2 2 2)\n;; >>> (factorize 25)", "  (let ((factors (list 1)))\n    (if\
    \ (< n 1)\n      (return factors)\n      (let ((f (car factors)))\n        (while\
    \ (< n (car f))\n          (setf (cdr f) (cdr (car f)))\n          (setf (car\
    \ f) (car (car f)))\n          (setf (cdr f) (cons 1 (cdr f))))\n        (setf\
    \ (car factors) (car f))\n        (setf (cdr factors) (cdr f))\n        (setf\
    \ f (cdr factors)))))\n)\n\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8 * 8 * 8)\n;; (list 2 2 2)\n;; >>> (factorize 25 * 25 * 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70 * 70 * 70)\n;; (list 2 5 7)\n;; >>> (factorize 8 * 8 * 8\
    \ * 8)\n;; (list 2 2 2)\n;; >>> (factorize 25 * 25 * 25 * 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70 * 70 * 70 * 70)\n;; (list 2 5 7)\n;; >>> (factorize 8 * 8\
    \ * 8 * 8 * 8)\n;; (list 2 2 2)\n;; >>> (factorize 25 * 25 * 25 * 25 * 25)\n;;\
    \ (list 5 5)\n;; >>> (factorize 70 * 70 * 70 * 70 * 70)\n;; (list 2 5 7)\n;; >>>\
    \ (factorize 8 * 8 * 8 * 8 * 8 * 8)\n;; (list 2 2 2)\n;; >>> (factorize 25 * 25\
    \ * 25 * 25 * 25 * 25)\n;; (list 5 5)\n;; >>> (factorize 70 * 70 * 70 * 70 * 70\
    \ * 70)\n;; (list 2 5 7)\n;; >>> (factorize 8 * 8 * 8 * 8 * 8 * 8 * 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25 * 25 * 25 * 25 * 25 * 25 * 25)\n;; (list 5 5)\n",
  "  (let ((factors (list 1)))\n    (while (< n 1)\n      (let ((p (read-line \"Enter\
    \ a number: \")))\n        (if (not (integer? p)) (print \"Not an integer!\"))\n\
    \        (let ((count 0))\n          (while (< p 1)\n            (let ((q (read-line\
    \ \"Enter a factor: \")))\n              (if (not (integer? q)) (print \"Not an\
    \ integer!\"))\n              (let ((factor (p % q)))\n                (if (not\
    \ (member? factor factors))\n                  (set! factors (append factors factor))\n\
    \                  (set! count (+ count 1))))))\n          (print \"The factors\
    \ of\", n, \"are\", factors, \"with multiplicity\", count, \".\"))\n        (print\
    \ \"Enter a number: \")))))\n\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)", "  (let ((factors\
    \ (list)))\n    (while (< n 1)\n      (let ((f (floor n)))\n        (if (< f 1)\n\
    \          (append factors (list f))\n          (let ((n (quotient n f)))\n  \
    \          (append factors (list f) (factorize n)))))\n      (n (quotient n 2))))\n\
    \n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factor", "  (let ((factors (list\
    \ 1)))\n    (while (< n 1)\n      (let ((f (car factors)))\n        (if (< n (car\
    \ f))\n          (setq factors (cdr factors) (car f) (cdr f))\n          (setq\
    \ factors (cdr factors) (car f) (cdr f))\n          (setq factors (cdr factors)\
    \ (car f) (cdr f)))\n        (setq factors (cdr factors) (car f) (cdr f)))\n \
    \     (setq factors (cdr factors) (car f) (cdr f)))\n    (car factors)))\n\n;;\
    \ >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;;\
    \ >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70", "  (let ((factors\
    \ (list 1)))\n    (while (< n 1)\n      (let ((p (read-integer)))\n        (if\
    \ (= p 1)\n          (return factors)\n          (let ((f (read-integer)))\n \
    \           (if (= f 1)\n              (return factors)\n              (let ((f\
    \ (read-integer)))\n                (if (= f 1)\n                  (return factors)\n\
    \                  (let ((f (read-integer)))\n                    (if (= f 1)\n\
    \                      (return factors)\n                      (let ((f (read-integer)))\n\
    \                        (if (= f 1)\n                          (return factors)\n\
    \                          (let ((f (read-integer)))\n                       \
    \     (if (= f 1)\n                              (return factors)\n          \
    \                    (let ((f (read-integer)))\n                             \
    \   (if (= f 1)\n                                  (return factors)\n        \
    \                          (let ((f (read-integer)))\n                       \
    \             (if (= f 1)\n                                      (return factors)\n\
    \                                      (let ((f (read-integer)))\n           \
    \                             (if (= f 1)\n                                  \
    \        (return factors)\n                                          (let ((f\
    \ (read-integer)))\n                                            (if (= f 1)\n\
    \                                              (return factors)\n            \
    \                                  (let ((f (read-integer)))\n               \
    \                                 (if (= f 1)\n                              \
    \                    (return factors)\n                                      \
    \            (let ((f (read-integer)))\n                                     \
    \               (if (= f 1)\n                                                \
    \      (return factors)\n                                                    \
    \  (let ((f (read-integer)))\n                                               \
    \         (if (= f 1)\n                                                      \
    \    (return factors)\n                                                      \
    \    (let ((f (read-integer)))\n                                             \
    \               (if (= f 1)\n                                                \
    \              (return factors)\n                                            \
    \                  (let ((f (read-integer)))\n                               \
    \                                 (if (= f 1)\n                              \
    \                                    (return factors)\n                      \
    \                                            (let ((f (read-integer)))\n     \
    \                                                               (if (= f", " \
    \ (let ((factors (list 1)))\n    (while (< n 1)\n      (let ((p (read-line \"\
    Enter a number: \")))\n        (if (zerop p)\n          (return factors)\n   \
    \       (let ((f (read-int p)))\n            (if (not (in-vector factors f))\n\
    \              (vector-set! factors f)\n              (vector-set! factors (vector-set!\
    \ factors f 1)))))\n        (if (not (in-vector factors 2))\n          (vector-set!\
    \ factors 2)\n          (vector-set! factors (vector-set! factors 2 1))))))\n\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)", "  (let ((factors (list 1)))\n    (while\
    \ (< n 1)\n      (let ((p (read-line \"Enter a number to factorize: \")))\n  \
    \      (if (zero? p)\n          (print \"Zero is not a prime number.\")\n    \
    \      (let ((factor (read-line \"Enter a prime number to factorize: \")))\n \
    \           (if (zero? factor)\n              (print \"Zero is not a prime number.\"\
    )\n              (let ((factorized-p (factorize p)))\n                (factors\
    \ (cons factorized-p factors)))))))))\n\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factor", "  (let ((factors (list\
    \ 1)))\n    (while (< n 1)\n      (let ((divisor (quotient n 1)))\n        (if\
    \ (< divisor 1)\n          (append factors (list divisor))\n          (let ((divisor\
    \ (quotient divisor 1)))\n            (append factors (list divisor) (factorize\
    \ (quotient n divisor)))\n            (set! factors (cons (quotient n divisor)\
    \ factors))))))\n    (reverse factors)))\n\n;; Return list of prime factors of\
    \ given integer in the order from largest to smallest.\n;; Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n;; Input number should be equal to the product of all factors\n\
    ;; >>> (factorize-reverse 8)\n;; (list 2 2 2)\n;; >>> (factorize-reverse 25)\n\
    ;; (list 5 5)\n;; >>> (factorize-reverse 70)\n;; (list 2 5 7)", "  (let ((factors\
    \ (list)))\n    (while (< n 1)\n      (let ((p (read-line \"Enter a number to\
    \ factorize: \")))\n        (if (zerop p)\n          (println \"Zero is not a\
    \ factor\")\n          (let ((factor (read-line \"Factor: \")))\n            (if\
    \ (zerop factor)\n              (println \"Zero is not a factor\")\n         \
    \     (let ((count (read-line \"Count: \")))\n                (if (zerop count)\n\
    \                  (println \"Zero is not a factor\")\n                  (let\
    \ ((i 0))\n                    (while (< i count)\n                      (let\
    \ ((f (read-line \"Factor: \")))\n                        (if (zerop f)\n    \
    \                      (println \"Zero is not a factor\")\n                  \
    \        (let ((i (1+ i)))\n                            (append factors (list\
    \ f) i))\n                          (append factors (list f) 1))\n           \
    \             (append factors (list f) 1))\n                      (append factors\
    \ (list f) 1))\n                    (append factors (list f) 1)))\n          \
    \      (append factors (list factor) 1)))\n            (append factors (list factor)\
    \ 1)))\n        (let ((p (read-line \"Enter a number to factorize: \")))\n   \
    \     (if (zerop p)\n          (println \"Zero is not a factor\")\n          (let\
    \ ((factor (read-line \"Factor: \")))\n            (if (zerop factor)\n      \
    \        (println \"Zero is not a factor\")\n              (let ((count (read-line\
    \ \"Count: \")))\n                (if (zerop count)\n                  (println\
    \ \"Zero is not a factor\")\n                  (let ((i 0))\n                \
    \    (while (< i count)\n                      (let ((f (read-line \"Factor: \"\
    )))\n                        (if (zerop f)\n                          (println\
    \ \"Zero is not a factor\")\n                          (let ((i (1+ i)))\n   \
    \                         (append factors (list f) i))\n                     \
    \     (append factors (list f) 1))\n                        (append factors (list\
    \ f) 1))\n                      (append factors (list f) 1))\n               \
    \     (append factors (list f) 1)))))\n            (append factors (list factor)\
    \ 1)))\n        (let ((p (", "  (let ((factors (list 1)))\n    (if (zero? n)\n\
    \      (return factors)\n      (let ((factor (car factors)))\n        (if (zero?\
    \ factor)\n          (return factors)\n          (let ((factor (car factors)))\n\
    \            (if (zero? factor)\n              (return factors)\n            \
    \  (let ((factor (car factors)))\n                (if (zero? factor)\n       \
    \           (return factors)\n                  (let ((factor (car factors)))\n\
    \                    (if (zero? factor)\n                      (return factors)\n\
    \                      (let ((factor (car factors)))\n                       \
    \ (if (zero? factor)\n                          (return factors)\n           \
    \               (let ((factor (car factors)))\n                            (if\
    \ (zero? factor)\n                              (return factors)\n           \
    \                   (let ((factor (car factors)))\n                          \
    \      (if (zero? factor)\n                                  (return factors)\n\
    \                                  (let ((factor (car factors)))\n           \
    \                         (if (zero? factor)\n                               \
    \       (return factors)\n                                      (let ((factor\
    \ (car factors)))\n                                        (if (zero? factor)\n\
    \                                          (return factors)\n                \
    \                          (let ((factor (car factors)))\n                   \
    \                         (if (zero? factor)\n                               \
    \               (return factors)\n                                           \
    \   (let ((factor (car factors)))\n                                          \
    \      (if (zero? factor)\n                                                  (return\
    \ factors)\n                                                  (let ((factor (car\
    \ factors)))\n                                                    (if (zero? factor)\n\
    \                                                      (return factors)\n    \
    \                                                  (let ((factor (car factors)))\n\
    \                                                        (if (zero? factor)\n\
    \                                                          (return factors)\n\
    \                                                          (let ((factor (car\
    \ factors)))\n                                                            (if\
    \ (zero? factor)\n                                                           \
    \   (return factors)\n                                                       \
    \       (let ((factor (car factors)))\n                                      \
    \                          (if (zero? factor)\n                              \
    \                                    (return factors)\n                      \
    \                                            (let ((factor (car factors)))\n \
    \                                                              ", "  (let ((factors\
    \ (list 1)))\n    (while (< n 1)\n      (let ((p (car factors)))\n        (if\
    \ (even? p)\n          (set-car! factors (cdr factors))\n          (set-cdr! factors\
    \ (cons (car n) (cdr factors))))\n        (setq n (quotient n p)))\n      (setq\
    \ factors (cdr factors))))\n\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;;", "  (let ((factors (list)))\n\
    \    (while (< n 1)\n      (let ((p (read-integer)))\n        (if (odd? p)\n \
    \         (append factors (list p))\n          (append factors (list p) (list\
    \ 2))\n          (let ((f (factorize p)))\n            (append factors (f)))))\n\
    \      (print factors)))\n)", "  (let ((factors (list 1)))\n    (while (< n 1)\n\
    \      (let ((p (read-line \"Enter a number: \")))\n        (if (not (integer?\
    \ p)) (print \"Not an integer!\"))\n        (let ((f (integer->string p)))\n \
    \         (if (not (string? f)) (print \"Not a string!\"))\n          (let ((f\
    \ (string->integer f)))\n            (if (< f 1) (print \"Not a prime number!\"\
    ))\n            (if (not (member f factors))\n              (factors (append factors\
    \ (list f)))\n              (print \"This number has already been factored!\"\
    ))\n            (print \"This number has been factored!\")))))\n  (reverse factors)))\n\
    \n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (", "  (let ((factors\
    \ (list)))\n    (if (zero? n)\n      (return factors)\n      (let ((i (1)))\n\
    \        (while (< i n)\n          (if (zero? (modulo n i))\n            (append\
    \ factors i)\n            (set! i (+ i 1)))))\n      (return factors)))\n\n;;\
    \ >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;;\
    \ >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;;", "  (let ((factors\
    \ (list)))\n    (if (zero? n)\n      (return factors)\n      (let ((i (1)))\n\
    \        (while (< i n)\n          (if (zero? (modulo n i))\n            (append\
    \ factors i)\n            (set! i (+ i 1)))))\n      (return factors)))\n\n;;\
    \ >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;;\
    \ >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;;", "  (let ((factors\
    \ (list)))\n    (while (< n 1)\n      (let ((f (first factors)))\n        (if\
    \ (zero? (modulo n f))\n          (append factors f)\n          (set! factors\
    \ (rest factors))))))\n  (reverse factors))\n\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)", "  (let\
    \ ((factors (list)))\n    (let ((i 0))\n      (while (< i n)\n        (if (zero?\
    \ (modulo n i))\n          (append factors (list i))\n          (set! i (+ i 1)))))\n\
    \    (reverse factors)))\n\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)", "  (let* ([factors (make-y-vector\
    \ 0)])\n    (let* ([i (1)])\n      (while (< i n)\n        (let* ([prime (modulo\
    \ (quotient n i))])\n          (if (zero? prime)\n            (return factors)\n\
    \            (set-y-vector! factors (vector-push factors prime))\n           \
    \ (set-y-vector! factors (vector-push factors i))\n            (set-y-vector!\
    \ factors (vector-push factors (quotient n i)))\n            (set-y-vector! factors\
    \ (vector-push factors (quotient n prime)))\n            (set-y-vector! factors\
    \ (vector-push factors (quotient n (modulo i prime))))\n            (set-y-vector!\
    \ factors (vector-push factors (quotient n (modulo i prime) i)))\n           \
    \ (set-y-vector! factors (vector-push factors (quotient n (modulo i prime) prime)))\n\
    \            (set-y-vector! factors (vector-push factors (quotient n (modulo i\
    \ prime) (modulo i prime))))\n            (set-y-vector! factors (vector-push\
    \ factors (quotient n (modulo i prime) (modulo i prime) i)))\n            (set-y-vector!\
    \ factors (vector-push factors (quotient n (modulo i prime) (modulo i prime) prime)))\n\
    \            (set-y-vector! factors (vector-push factors (quotient n (modulo i\
    \ prime) (modulo i prime) (modulo i prime))))\n            (set-y-vector! factors\
    \ (vector-push factors (quotient n (modulo i prime) (modulo i prime) (modulo i\
    \ prime) i)))\n            (set-y-vector! factors (vector-push factors (quotient\
    \ n (modulo i prime) (modulo i prime) (modulo i prime) prime))))\n           \
    \ (set-y-vector! factors (vector-push factors (quotient n (modulo i prime) (modulo\
    \ i prime) (modulo i prime) (modulo i prime))))\n            (set-y-vector! factors\
    \ (vector-push factors (quotient n (mod", "  (let ((factors (list)))\n    (while\
    \ (< n 1)\n      (let ((i (1)))\n        (while (< n (apply + (list i) factors)))\n\
    \          (set! factors (append factors (list i)))\n          (set! i (apply\
    \ + i (list i)))\n          (set! n (apply - n (list i)))\n        )\n      )\n\
    \    (reverse factors)\n    )\n)\n\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;;\
    \ >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factor", "  (let ((factors (list)))\n\
    \    (while (< n 1)\n      (let ((p (read-integer)))\n        (if (not (in-integer\
    \ factors p))\n          (factors (append factors (list p)))\n          (set!\
    \ n (quotient n p))))))\n  (if (zero? n)\n    (list)\n    (factorize (quotient\
    \ n (car factors)))\n    (factorize (quotient n (cdr factors))))\n\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n", "  (let ((factors (list)))\n\
    \    (if (zero? n)\n      (return factors)\n      (if (zero? (modulo n 2))\n \
    \       (return factors)\n        (let ((factor (divisor-sieve n)))\n        \
    \  (if (zero? factor)\n            (return factors)\n            (factors (append\
    \ factors (list factor)))))\n        (factorize (quotient n 2))))))\n\n;; >>>\
    \ (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>>\
    \ (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>>\
    \ (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>>\
    \ (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>>\
    \ (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>>\
    \ (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>>\
    \ (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>>\
    \ (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>>\
    \ (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>>\
    \ (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>>\
    \ (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>>\
    \ (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>>\
    \ (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>>\
    \ (factor", "  (let ((factors (list)))\n    (while (< n 1)\n      (let ((f (first\
    \ factors)))\n        (if (zero? (modulo n f))\n          (append factors f)\n\
    \          (set! factors (append factors (list f)))\n          (set! n (quotient\
    \ n f))))))\n", "  (let ((factors (make-vector n 0)))\n    (let ((i 0))\n    \
    \  (while (< i n)\n        (let ((p (modulo n i)))\n          (if (zero? p)\n\
    \            (return factors)\n            (set! factors (append factors (list\
    \ p)))))\n        (set! i (i + 1)))\n      (return factors)))\n\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n", "  (let ((factors (list 1)))\n    (while (< n 1)\n\
    \      (let ((f (car factors)))\n        (if (<= n (car f))\n          (setf factors\
    \ (cdr factors) (car f) (cdr f))\n          (setf factors (cdr factors) (car f)\
    \ (cdr f))\n          (setf factors (cdr factors) (car f) (cdr f))\n         \
    \ (setf factors (cdr factors) (car f) (cdr f))\n          (setf factors (cdr factors)\
    \ (car f) (cdr f))\n          (setf factors (cdr factors) (car f) (cdr f))\n \
    \         (setf factors (cdr factors) (car f) (cdr f))\n          (setf factors\
    \ (cdr factors) (car f) (cdr f))\n          (setf factors (cdr factors) (car f)\
    \ (cdr f))\n          (setf factors (cdr factors) (car f) (cdr f))\n         \
    \ (setf factors (cdr factors) (car f) (cdr f))\n          (setf factors (cdr factors)\
    \ (car f) (cdr f))\n          (setf factors (cdr factors) (car f) (cdr f))\n \
    \         (setf factors (cdr factors) (car f) (cdr f))\n          (setf factors\
    \ (cdr factors) (car f) (cdr f))\n          (setf factors (cdr factors) (car f)\
    \ (cdr f))\n          (setf factors (cdr factors) (car f) (cdr f))\n         \
    \ (setf factors (cdr factors) (car f) (cdr f))\n          (setf factors (cdr factors)\
    \ (car f) (cdr f))\n          (setf factors (cdr factors) (car f) (cdr f))\n \
    \         (setf factors (cdr factors) (car f) (cdr f))\n          (setf factors\
    \ (cdr factors) (car f) (cdr f))\n          (setf factors (cdr factors) (car f)\
    \ (cdr f))\n          (setf factors (cdr factors) (car", "  (let ((factors (list\
    \ 1)))\n    (while (< n 1)\n      (let ((divisor (quotient n 1)))\n        (if\
    \ (< divisor 1)\n          (append factors (list divisor))\n          (append\
    \ factors (list divisor) (quotient n divisor)))))\n    (reverse factors)))\n\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8", "  (let ((factors\
    \ (list)))\n    (while (< n 1)\n      (let ((p (read-integer)))\n        (if (not\
    \ (in-integer factors p))\n          (append factors (list p))\n          (setq\
    \ factors (append factors (list p)))))\n      (setq n (quotient n 1)))\n    (reverse\
    \ factors)))\n\n;; Return list of prime factors of given integer in the order\
    \ from largest to smallest.\n;; Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n;; Input\
    \ number should be equal to the product of all factors\n;; >>> (factorize-reverse\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize-reverse 25)\n;; (list 5 5)\n;; >>> (factorize-reverse\
    \ 70)\n;; (list 2 5 7)", "  (let ((factors (make-vector n 0)))\n    (let ((i 0))\n\
    \      (while (< i n)\n        (let ((p (modulo n i)))\n          (if (zero? p)\n\
    \            (return factors)\n            (set-vector-element! factors i p)\n\
    \            (set-vector-element! factors (vector-ref factors i) p)\n        \
    \    (set-vector-element! factors (vector-ref factors (vector-ref factors i) p)\
    \ p)\n            (set-vector-element! factors (vector-ref factors (vector-ref\
    \ factors (vector-ref factors i) p) p) p)\n            (set-vector-element! factors\
    \ (vector-ref factors (vector-ref factors (vector-ref factors (vector-ref factors\
    \ i) p) p) p) p)\n            (set-vector-element! factors (vector-ref factors\
    \ (vector-ref factors (vector-ref factors (vector-ref factors (vector-ref factors\
    \ i) p) p) p) p) p)\n            (set-vector-element! factors (vector-ref factors\
    \ (vector-ref factors (vector-ref factors (vector-ref factors (vector-ref factors\
    \ (vector-ref factors i) p) p) p) p) p) p)\n            (set-vector-element! factors\
    \ (vector-ref factors (vector-ref factors (vector-ref factors (vector-ref factors\
    \ (vector-ref factors (vector-ref factors (vector-ref factors i) p) p) p) p) p)\
    \ p) p) p)\n            (set-vector-element! factors (vector-ref factors (vector-ref\
    \ factors (vector-ref factors (vector-ref factors (vector-ref factors (vector-ref\
    \ factors (vector-ref factors (vector-ref factors i) p) p) p) p) p) p) p) p) p)\
    \ p)\n            (set-vector-element! factors (vector-ref factors (vector-ref\
    \ factors (vector-ref factors (vector-ref factors (vector-ref factors (vector-ref\
    \ factors (vector-ref factors (vector-ref factors (vector-ref factors i) p) p)\
    \ p) p) p) p) p) p) p) p) p)\n            (set-vector-element! factors", "  (let\
    \ ((factors (list 1)))\n    (while (< n 1)\n      (let ((f (car factors)))\n \
    \       (if (odd? n)\n          (let ((f2 (cdr factors)))\n            (if (odd?\
    \ f)\n              (let ((f3 (cdr f2)))\n                (if (odd? f2)\n    \
    \              (let ((f4 (cdr f3)))\n                    (if (odd? f3)\n     \
    \                 (let ((f5 (cdr f4)))\n                        (if (odd? f4)\n\
    \                          (let ((f6 (cdr f5)))\n                            (if\
    \ (odd? f5)\n                              (let ((f7 (cdr f6)))\n            \
    \                    (if (odd? f6)\n                                  (let ((f8\
    \ (cdr f7)))\n                                    (if (odd? f7)\n            \
    \                          (let ((f9 (cdr f8)))\n                            \
    \            (if (odd? f8)\n                                          (let ((f10\
    \ (cdr f9)))\n                                            (if (odd? f9)\n    \
    \                                          (let ((f11 (cdr f10)))\n          \
    \                                      (if (odd? f10)\n                      \
    \                            (let ((f12 (cdr f11)))\n                        \
    \                            (if (odd? f11)\n                                \
    \                      (let ((f13 (cdr f12)))\n                              \
    \                          (if (odd? f12)\n                                  \
    \                        (let ((f14 (cdr f13)))\n                            \
    \                                (if (odd? f13)\n                            \
    \                                  (let ((f15 (cdr f14)))\n                  \
    \                                              (if (odd? f14)\n              \
    \                                                    (let ((f16 (cdr f15)))\n\
    \                                                                    (if (odd?\
    \ f15)\n                                                                     \
    \ (let ((f17 (cdr f16)))\n                                                   \
    \                     (if (odd? f16)\n                                       \
    \                                   (let ((f18 (cdr f17)))\n                 \
    \                                                           (if (odd? f17)\n \
    \                                                             ", "  (let ((factors\
    \ (list 1)))\n    (while (< n 1)\n      (let ((next (modulo n 2)))\n        (if\
    \ (= next 0)\n          (append factors (list n))\n          (append factors (list\
    \ next)))))\n    (reverse factors)))\n\n;; Return list of prime factors of given\
    \ integer in the order from largest to smallest.\n;; Each of the factors should\
    \ be listed number of times corresponding to how many times it appeares in factorization.\n\
    ;; Input number should be equal to the product of all factors\n;; >>> (factorize-prime\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize-prime 25)\n;; (list 5 5)\n;; >>> (factorize-prime\
    \ 70)\n;; (list 2 5 7)", "  (let ((factors (list 1)))\n    (while (< n 1)\n  \
    \    (let ((f (first factors)))\n        (if (< n f)\n          (append factors\
    \ (list f) (factorize (quotient n f)))\n          (append factors (list f))\n\
    \          (setq n (quotient n f)))))\n    (reverse factors)))\n\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (", "  (let ((factors (list)))\n    (if (< n 1)\n\
    \      (return factors)\n      (let ((i 0))\n        (while (< i n)\n        \
    \  (if (modulo n i)\n            (append factors (list i))\n            (set!\
    \ i (+ i 1)))\n          (set! i (+ i 1)))\n        (append factors (list n)))))\n\
    )\n\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5\
    \ 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2\
    \ 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5", "  (let ((factors (list)))\n   \
    \ (while (< n 1)\n      (let ((p (read \"Enter a number: \")))\n        (if (not\
    \ (in? p (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\
    \ 25)))\n          (print \"Invalid input!\")\n          (else\n            (if\
    \ (not (in? p factors))\n              (factors (append factors p))\n        \
    \      (print \"This number is already in the list!\")))\n        (setq n (quotient\
    \ n p)))\n      (print factors)))\n\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;;\
    \ >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2", "  (let ((factors (list 1)))\n    (while (<\
    \ n 1)\n      (let ((f (car factors)))\n        (if (<= n (car f))\n         \
    \ (set-car! factors (cdr f))\n          (set-cdr! factors (cons 1 (car f)))\n\
    \          (setq n (cdr f)))\n        (setq n (cdr f))))\n    (car factors)))\n\
    \n;; Return list of prime factors of given integer in the order from largest to\
    \ smallest.\n;; Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n;; Input number should be equal\
    \ to the product of all factors\n;; >>> (factorize-prime 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize-prime 25)\n;; (list 5 5)\n;; >>> (factorize-prime 70)\n;; (list\
    \ 2 5 7)", "  (let ((factors (make-vector n 0)))\n    (let ((i 0))\n      (while\
    \ (< i n)\n        (let ((p (modulo n (car factors) 2))))\n        (if (zero?\
    \ p)\n          (set-car! factors (car factors) -1)\n          (set-cdr! factors\
    \ (cdr factors) 1)\n          (set-car! (cdr factors) (car p))\n          (set-cdr!\
    \ (cdr factors) (cdr p))\n          (set-car! (cdr (cdr factors)) (car p))\n \
    \         (set-cdr! (cdr (cdr factors)) (cdr p))\n          (set-car! (cdr (cdr\
    \ (cdr factors))) (car p))\n          (set-cdr! (cdr (cdr (cdr factors))) (cdr\
    \ p))\n          (set-car! (cdr (cdr (cdr (cdr factors)))) (car p))\n        \
    \  (set-cdr! (cdr (cdr (cdr (cdr factors)))) (cdr p))\n          (set-car! (cdr\
    \ (cdr (cdr (cdr (cdr factors)))))) (car p))\n          (set-cdr! (cdr (cdr (cdr\
    \ (cdr (cdr factors)))))) (cdr p))\n          (set-car! (cdr (cdr (cdr (cdr (cdr\
    \ (cdr factors)))))) (car p))\n          (set-cdr! (cdr (cdr (cdr (cdr (cdr (cdr\
    \ factors)))))) (cdr p))\n          (set-car! (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ factors)))))))) (car p))\n          (set-cdr! (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr factors)))))))) (cdr p))\n          (set-car! (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (c", "  (let ((factors\
    \ (list)))\n    (if (zero? n)\n      (return factors)\n      (let ((i (1)))\n\
    \        (while (< i n)\n          (if (zero? (modulo n i))\n            (append\
    \ factors (list i))\n            (set! i (+ i 1)))))\n      (return factors)))\n\
    \n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)", "  (let ((factors\
    \ (list 1)))\n    (while (< n 1)\n      (let ((next (modulo n 2)))\n        (if\
    \ (= next 0)\n          (append factors (list 2))\n          (append factors (list\
    \ next)))))\n    (reverse factors)))\n\n;; Return list of prime factors of given\
    \ integer in the order from largest to smallest.\n;; Each of the factors should\
    \ be listed number of times corresponding to how many times it appeares in factorization.\n\
    ;; Input number should be equal to the product of all factors\n;; >>> (factorize-prime\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize-prime 25)\n;; (list 5 5)\n;; >>> (factorize-prime\
    \ 70)\n;; (list 2 5 7)", "  (let ((factors (list 1)))\n    (while (< n 1)\n  \
    \    (let ((p (read-line \"Enter a number: \")))\n        (if (odd? p)\n     \
    \     (let ((f (read-line \"Enter a factor: \")))\n            (append factors\
    \ (list f) (factorize (quotient p f))))\n          (append factors (list p) (factorize\
    \ (quotient p n))))))\n  (reverse factors))\n\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5", "  (let ((factors (list)))\n   \
    \ (if (zero? n)\n      (return factors)\n      (let ((i (1)))\n        (while\
    \ (< i n)\n          (if (zero? (modulo n i)))\n            (append factors i)\n\
    \            (set! i (+ i 1)))))\n    (reverse factors)))\n\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;;", "  (let ((factors (make-vector\
    \ n 0)))\n    (let ((i 0))\n      (while (< i n)\n        (let ((p (modulo n i)))\n\
    \          (if (zero? p)\n            (return factors)\n            (set! factors\
    \ (append factors (list p 1)))))\n        (set! i (i + 1)))\n      (return factors)))\n\
    \n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)", "  (let ((factors (make-vector n 0)))\n\
    \    (let ((i 0))\n      (while (< i n)\n        (let ((p (modulo n i)))\n   \
    \       (if (zero? p)\n            (return factors)\n            (set! factors\
    \ (append factors (list p)))))\n        (set! i (i + 1)))\n      (return factors)))\n\
    \n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)", "  (let* ([factors (make-y-vector 0)])\n\
    \    (let ([i (1)])\n      (while (< i n)\n        (let ([factor (modulo n i)])\n\
    \          (if (zero? factor)\n            (return factors)\n            (set-y!\
    \ factors i)\n            (set-y! factors factor)\n            (set-y! factors\
    \ (make-y-vector 1))\n            (set-y! (make-y-vector 1) factor)\n        \
    \    (set-y! (make-y-vector 2) i)\n            (set-y! (make-y-vector 2) (modulo\
    \ n i))\n            (set-y! (make-y-vector 3) (modulo n factor))\n          \
    \  (set-y! (make-y-vector 3) (modulo n i))\n            (set-y! (make-y-vector\
    \ 4) (modulo n factor))\n            (set-y! (make-y-vector 4) (modulo n i))\n\
    \            (set-y! (make-y-vector 5) (modulo n factor))\n            (set-y!\
    \ (make-y-vector 5) (modulo n i))\n            (set-y! (make-y-vector 6) (modulo\
    \ n factor))\n            (set-y! (make-y-vector 6) (modulo n i))\n          \
    \  (set-y! (make-y-vector 7) (modulo n factor))\n            (set-y! (make-y-vector\
    \ 7) (modulo n i))\n            (set-y! (make-y-vector 8) (modulo n factor))\n\
    \            (set-y! (make-y-vector 8) (modulo n i))\n            (set-y! (make-y-vector\
    \ 9) (modulo n factor))\n            (set-y! (make-y-vector 9) (modulo n i))\n\
    \            (set-y! (make-y-vector 10) (modulo n factor))\n            (set-y!\
    \ (make-y-vector 10) (modulo n i))\n            (set-y! (make-y-vector 11) (modulo\
    \ n factor))\n            ", "  (let ((factors (list 1)))\n    (while (< n 1)\n\
    \      (let ((p (car factors)))\n        (if (zero? p)\n          (return factors)\n\
    \          (setq factors (cons p (factorize (quotient n p)))))))))\n\n;; Return\
    \ list of prime factors of given integer in the order from smallest to largest.\n\
    ;; Each of the factors should be listed number of times corresponding to how many\
    \ times it appeares in factorization.\n;; Input number should be equal to the\
    \ product of all factors\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)", "  (let ((factors\
    \ (list)))\n    (while (< n 1)\n      (let ((next (modulo n 2)))\n        (if\
    \ (= next 0)\n          (append factors (list next))\n          (append factors\
    \ (list next) (modulo n next)))))\n    (reverse factors)))\n\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (", "  (let\
    \ ((factors (list 1)))\n    (while (< n 1)\n      (let ((next (modulo n 2)))\n\
    \        (if (= next 0)\n          (append factors (list n))\n          (let ((f\
    \ (modulo/remainder next 2)))\n            (if (< f 1)\n              (append\
    \ factors (list next))\n              (append factors (list f))\n            \
    \  (let ((next (modulo/remainder next 2)))\n                (if (< next 0)\n \
    \                 (append factors (list next)))))\n            (append factors\
    \ (list 2)))\n        (n (modulo/remainder n 2))))\n    (reverse factors)))\n\n\
    ;; Return list of prime factors of given integer in the order from largest to\
    \ smallest.\n;; Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n;; Input number should be equal\
    \ to the product of all factors\n;; >>> (factorize-reverse 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize-reverse 25)\n;; (list 5 5)\n;; >>> (factorize-reverse 70)\n\
    ;; (list 2 5 7)", "  (let ((factors (list 1)))\n    (while (< n 1)\n      (let\
    \ ((next (modulo n 2)))\n        (if (= next 0)\n          (append factors (list\
    \ n))\n          (let ((f (modulo (/ n next))))\n            (append factors (list\
    \ f) (factorize next)))))\n      (n (- n 1))))\n\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factor", "  (let ((factors (list)))\n    (if (zero? n)\n   \
    \   (return factors)\n      (let ((i 0))\n        (while (< i n)\n          (if\
    \ (zero? (modulo n i))\n            (append factors (list i))\n            (set!\
    \ i (+ i 1)))))\n      (return factors)))\n\n;; >>> (factorize 8)\n;; (list 2\
    \ 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n", "  (let ((factors (list)))\n    (while (< n\
    \ 1)\n      (let ((p (read-integer)))\n        (if (even? p)\n          (append\
    \ factors (list p))\n          (append factors (list p) (list 2))\n          (let\
    \ ((f (divisible-by p)))\n            (if (not f)\n              (append factors\
    \ (list p))\n              (append factors (list p) (list 2))))))))\n", "  (let\
    \ ((factors (list)))\n    (while (< n 1)\n      (let ((p (read \"Enter a number:\
    \ \")))\n        (if (odd? p)\n          (append factors (list p))\n         \
    \ (append factors (list (/ p 2)))\n          (append factors (list (/ p 3)))\n\
    \          (append factors (list (/ p 5)))\n          (append factors (list (/\
    \ p 7)))\n          (append factors (list (/ p 11)))\n          (append factors\
    \ (list (/ p 13)))\n          (append factors (list (/ p 17)))\n          (append\
    \ factors (list (/ p 19))))))\n    (reverse factors)))\n\n;; >>> (factorize 8)\n\
    ;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n\
    ;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n\
    ;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n\
    ;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n\
    ;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n\
    ;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n\
    ;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n\
    ;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n\
    ;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n\
    ;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n\
    ;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n\
    ;; (list 5", "  (let ((factors (list)))\n    (if (zero? n)\n      (return factors)\n\
    \      (let ((factor (car factors)))\n        (if (zero? factor)\n          (return\
    \ factors)\n          (let ((factor (car factors)))\n            (if (zero? factor)\n\
    \              (return factors)\n              (let ((factor (car factors)))\n\
    \                (if (zero? factor)\n                  (return factors)\n    \
    \              (let ((factor (car factors)))\n                    (if (zero? factor)\n\
    \                      (return factors)\n                      (let ((factor (car\
    \ factors)))\n                        (if (zero? factor)\n                   \
    \       (return factors)\n                          (let ((factor (car factors)))\n\
    \                            (if (zero? factor)\n                            \
    \  (return factors)\n                              (let ((factor (car factors)))\n\
    \                                (if (zero? factor)\n                        \
    \          (return factors)\n                                  (let ((factor (car\
    \ factors)))\n                                    (if (zero? factor)\n       \
    \                               (return factors)\n                           \
    \           (let ((factor (car factors)))\n                                  \
    \      (if (zero? factor)\n                                          (return factors)\n\
    \                                          (let ((factor (car factors)))\n   \
    \                                         (if (zero? factor)\n               \
    \                               (return factors)\n                           \
    \                   (let ((factor (car factors)))\n                          \
    \                      (if (zero? factor)\n                                  \
    \                (return factors)\n                                          \
    \        (let ((factor (car factors)))\n                                     \
    \               (if (zero? factor)\n                                         \
    \             (return factors)\n                                             \
    \         (let ((factor (car factors)))\n                                    \
    \                    (if (zero? factor)\n                                    \
    \                      (return factors)\n                                    \
    \                      (let ((factor (car factors)))\n                       \
    \                                     (if (zero? factor)\n                   \
    \                                           (return factors)\n               \
    \                                               (let ((factor (car factors)))\n\
    \                                                                (if (zero? factor)\n\
    \                                                                  (return factors)\n\
    \                                                                  (let ((factor\
    \ (car factors)))\n                                                          \
    \        ", "  (let ((factors (make-vector n 0)))\n    (let ((i 0))\n      (while\
    \ (< i n)\n        (let ((p (read-line)))\n          (if (string? p)\n       \
    \     (let ((f (string->number p)))\n              (if (not (even? f))\n     \
    \           (setf factors (append factors (list f)))\n              )\n      \
    \      )\n          )\n          (setf i (+ i 1))\n        )\n      )\n    (reverse\
    \ factors)\n    )\n)\n", "  (let* ([factors (make-y-vector 0)])\n    (let* ([i\
    \ (1)])\n      (while (< i n)\n        (let* ([factor (y-ref factors i)])\n  \
    \        (if (y-ref factors i)\n            (set! factor (y-ref factors (y-add\
    \ i factor)))\n            (set! i (y-add i 1)))\n          (y-set! factors i\
    \ factor))\n        (set! i (y-add i 1)))\n      (y-set! factors (y-add i 1))))\n\
    \n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (", "  (let ((factors (list)))\n    (if (zero? n)\n      (return factors)\n\
    \      (let ((i (1)))\n        (while (< i n)\n          (if (zero? (modulo n\
    \ i))\n            (append factors (list i))\n            (set! i (+ i 1)))))\n\
    \      (return factors)))\n\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)", "  (let ((factors (list 1)))\n    (while (< n 1)\n      (let ((p (car factors)))\n\
    \        (if (even? p)\n          (let ((q (car (cdr factors))))\n           \
    \ (if (even? q)\n              (let ((r (car (cdr (cdr factors))))\n         \
    \           (if (even? r)\n                      (let ((s (car (cdr (cdr (cdr\
    \ factors))))\n                             (if (even? s)\n                  \
    \             (list p q r s)\n                               (list p q r)))\n\
    \                          (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr", "  (let ((factors (list 1)))\n    (if (zero? n)\n    \
    \  (return factors)\n      (let ((p (car factors)))\n        (if (zero? p)\n \
    \         (return factors)\n          (let ((q (car factors)))\n            (if\
    \ (zero? q)\n              (return factors)\n              (let ((r (car factors)))\n\
    \                (if (zero? r)\n                  (return factors)\n         \
    \         (let ((s (car factors)))\n                    (if (zero? s)\n      \
    \                (return factors)\n                      (let ((t (car factors)))\n\
    \                        (if (zero? t)\n                          (return factors)\n\
    \                          (factors (append (list p) (list q) (list r) (list s)\
    \ (list t)))\n                          (factors (append (list p) (list q) (list\
    \ r) (list s) (list t) (list p)))\n                          (factors (append\
    \ (list p) (list q) (list r) (list s) (list t) (list p) (list q)))\n         \
    \                 (factors (append (list p) (list q) (list r) (list s) (list t)\
    \ (list p) (list q) (list r
  "  (let ((factors (list 1)))\n    (if (zero? n)\n      (return factors)\n      (let\
    \ ((i (1)))\n        (while (< i n)\n          (if (zero? (modulo n i))\n    \
    \        (append factors i)\n            (set! i (+ i 1)))))\n      (return factors)))\n\
    \n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n", "  (let ((factors\
    \ (list)))\n    (while (< n 1)\n      (let ((p (read-integer)))\n        (if (not\
    \ (even? p))\n          (append factors (list p)))\n        (set! n (quotient\
    \ p n)))))\n  (reverse factors))\n\n;; Return list of prime factors of given integer\
    \ in the order from largest to smallest.\n;; Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    ;; Input number should be equal to the product of all factors\n;; >>> (factorize-reverse\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize-reverse 25)\n;; (list 5 5)\n;; >>> (factorize-reverse\
    \ 70)\n;; (list 2 5 7)", "  (let ((factors (make-vector n 0)))\n    (let ((i 0))\n\
    \      (while (< i n)\n        (let ((p (modulo n i)))\n          (if (= p 1)\n\
    \            (set! factors (append factors (list i)))\n            (set! (vector-set!\
    \ factors i p) (vector-set! factors i 1))\n            (set! i (+ i p)))\n   \
    \       )\n        )\n      )\n    (vector-sort! factors)\n    (reverse factors)\n\
    \    )\n  )\n\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n\
    ;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8 * 8\
    \ * 8)\n;; (list 8 8)\n;; >>> (factorize 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8\
    \ * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8\
    \ * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8\
    \ * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8\
    \ * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8\
    \ * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8\
    \ * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8\
    \ * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8\
    \ * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 *", "  (let ((factors\
    \ (list 1)))\n    (if (zero? n)\n      (return factors)\n      (let ((i (1)))\n\
    \        (while (< i n)\n          (if (zero? (modulo n i))\n            (append\
    \ factors i)\n            (set! i (+ i 1)))))\n      (return factors)))\n\n;;\
    \ >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;;\
    \ >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n", "  (let ((factors\
    \ (list)))\n    (if (zero? n)\n      (return factors)\n      (let ((p (car factors)))\n\
    \        (if (zero? p)\n          (return factors)\n          (let ((q (car factors)))\n\
    \            (if (zero? q)\n              (return factors)\n              (let\
    \ ((r (car factors)))\n                (if (zero? r)\n                  (return\
    \ factors)\n                  (factors (cons (cons p q) (cons q r)))\n       \
    \         )\n              )\n            )\n          )\n        )\n      )\n\
    \    )\n  )\n)\n", "  (let ((factors (list)))\n    (while (< n 1)\n      (let\
    \ ((p (first factors)))\n        (if (zero? p)\n          (return factors)\n \
    \         (let ((q (first (cdr factors))))\n            (if (zero? q)\n      \
    \        (return factors)\n              (let ((r (first (cdr (cdr factors)))))\n\
    \                (if (zero? r)\n                  (return factors)\n         \
    \         (factors (cons p q r))))))))))\n\n;; >>> (factorize 8)\n;; (list 2 2\
    \ 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2\
    \ 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (", "  (let ((factors (list)))\n    (while (< n 1)\n      (let\
    \ ((p (read \"Enter a number: \")))\n        (if (not (in? p n))\n          (factors\
    \ (append factors (list p)))\n          (let ((f (read \"Enter a factor: \")))\n\
    \            (if (not (in? f factors))\n              (factors (append factors\
    \ (list f)))\n              (let ((f (read \"Enter a factor: \")))\n         \
    \       (if (not (in? f factors))\n                  (factors (append factors\
    \ (list f)))\n                  (let ((f (read \"Enter a factor: \")))\n     \
    \               (if (not (in? f factors))\n                      (factors (append\
    \ factors (list f)))\n                      (let ((f (read \"Enter a factor: \"\
    )))\n                        (if (not (in? f factors))\n                     \
    \     (factors (append factors (list f)))\n                          (let ((f\
    \ (read \"Enter a factor: \")))\n                            (if (not (in? f factors))\n\
    \                              (factors (append factors (list f)))\n         \
    \                     (let ((f (read \"Enter a factor: \")))\n               \
    \                 (if (not (in? f factors))\n                                \
    \  (factors (append factors (list f)))\n                                  (let\
    \ ((f (read \"Enter a factor: \")))\n                                    (if (not\
    \ (in? f factors))\n                                      (factors (append factors\
    \ (list f)))\n                                      (let ((f (read \"Enter a factor:\
    \ \")))\n                                        (if (not (in? f factors))\n \
    \                                         (factors (append factors (list f)))\n\
    \                                          (let ((f (read \"Enter a factor: \"\
    )))\n                                            (if (not (in? f factors))\n \
    \                                             (factors (append factors (list f)))\n\
    \                                              (let ((f (read \"Enter a factor:\
    \ \")))\n                                                (if (not (in? f factors))\n\
    \                                                  (factors (append factors (list\
    \ f)))\n                                                  (let ((f (read \"Enter\
    \ a factor: \")))\n                                                    (if (not\
    \ (in", "  (let ((factors (make-vector n 0)))\n    (let ((i 0))\n      (while\
    \ (< i n)\n        (let ((p (modulo n i)))\n          (if (zero? p)\n        \
    \    (return factors)\n            (set! factors (append factors (list p)))))\n\
    \        (set! i (+ i 1)))))\n  factors)\n\n;; >>> (factorize 8)\n;; (list 2 2\
    \ 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2\
    \ 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;;", "  (let* ([factors (make-y-vector n)])\n    (let* ([i (0)])\n \
    \     (while (< i n)\n        (let* ([j (0)])\n          (while (< j n)\n    \
    \        (if (< (vector-ref factors i) (vector-ref factors j))\n             \
    \ (set! (vector-set! factors i (vector-ref factors i) (* (vector-ref factors i)\
    \ (vector-ref factors j))))\n              (set! j (vector-ref factors j)))\n\
    \            (set! i (vector-ref factors i) (* (vector-ref factors i) (vector-ref\
    \ factors j))))\n          (set! j (vector-ref factors j)))\n        (set! i (vector-ref\
    \ factors i) (* (vector-ref factors i) (vector-ref factors j))))\n      (return\
    \ factors)))\n)\n\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n\
    ;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)", "  (let ((factors (list)))\n\
    \    (while (< n 1)\n      (let ((p (read)))\n        (if (odd? p)\n         \
    \ (append factors (list p))\n          (append factors (list p) (list 2))\n  \
    \        (let ((n (quotient p 2)))\n            (append factors (list p) (list\
    \ n)))))\n      (print factors)))\n)\n", "  (let ((factors (list)))\n    (while\
    \ (< n 1)\n      (let ((p (read-line \"Enter a number: \")))\n        (if (not\
    \ (integer? p)) (print \"Not an integer!\"))\n        (if (not (<= p 1)) (print\
    \ \"Number must be greater than 1!\"))\n        (let ((f (integer->string p)))\n\
    \          (if (not (in f factors))\n            (factors (append factors (list\
    \ p)))\n          )\n        )\n      )\n    )\n    (reverse factors)\n  )\n)\n",
  "  (let* ([factors (make-y-vector 0)])\n    (let* ([i (1)])\n      (while (< i n)\n\
    \        (let* ([prime (y-ref factors i)])\n          (if (y-empty? prime)\n \
    \           (y-ref factors i)\n            (let* ([nextprime (y-ref factors (y-ref\
    \ factors (y-cdr prime) i))])\n              (y-set! prime (y-append prime nextprime))\n\
    \              (y-set! nextprime (make-y-vector 1))\n              (y-set! (y-ref\
    \ nextprime) i)\n              (y-set! (y-ref factors i) (y-ref factors nextprime))\n\
    \              (y-set! (y-ref factors (y-cdr prime)) (y-ref factors nextprime))\n\
    \              (y-set! (y-ref factors (y-cdr nextprime)) i)\n              (set!\
    \ i (y-ref factors (y-cdr prime) i)))\n          (set! i (y-ref factors i) (y-ref\
    \ factors i) (y-ref factors i) (y-ref factors i) (y-ref factors i) (y-ref factors\
    \ i) (y-ref factors i) (y-ref factors i) (y-ref factors i) (y-ref factors i) (y-ref\
    \ factors i) (y-ref factors i) (y-ref factors i) (y-ref factors i) (y-ref factors\
    \ i) (y-ref factors i) (y-ref factors i) (y-ref factors i) (y-ref factors i) (y-ref\
    \ factors i) (y-ref factors i) (y-ref factors i) (y-ref factors i) (y-ref factors\
    \ i) (y-ref factors i) (y-ref factors i) (y-ref factors i) (y-ref factors i) (y-ref\
    \ factors i) (y-ref factors i) (y-ref factors i) (y-ref factors i) (y-ref factors\
    \ i) (y-ref factors i) (y-ref factors i) (y-ref factors i) (y-ref factors i) (y-ref\
    \ factors i) (y", "  (let ((factors (list)))\n    (if (zero? n)\n      (return\
    \ factors)\n      (let ((i 0))\n        (while (< i n)\n          (if (zero? (modulo\
    \ n i))\n            (append factors (list i))\n            (set! i (+ i 1)))))\n\
    \      (return factors)))\n\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n", "  (let ((factors (make-vector n 0)))\n    (let ((i 0))\n      (while\
    \ (< i n)\n        (let ((p (modulo n i)))\n          (if (zero? p)\n        \
    \    (return factors)\n            (set! factors (append factors (list p)))))\n\
    \        (set! i (i + 1)))\n      (return factors)))\n\n;; >>> (factorize 8)\n\
    ;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n\
    ;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n\
    ;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n\
    ;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n\
    ;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n\
    ;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n\
    ;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n\
    ;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n\
    ;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n\
    ;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n\
    ;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n\
    ;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n\
    ;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n\
    ;; (list 2 5 7)\n", "  (let ((factors (list 1)))\n    (while (< n 1)\n      (let\
    \ ((next (modulo n 2)))\n        (if (= next 0)\n          (append factors (list\
    \ n))\n          (let ((factor (modulo/remainder n next)))\n            (if (<\
    \ factor 1)\n              (append factors (list factor))\n              (append\
    \ factors (list factor) (modulo/remainder n factor)))\n            (append factors\
    \ (list next)))\n          (n (modulo/remainder n 2)))\n        (n 2)))\n    (reverse\
    \ factors)))\n\n;; Return list of prime factors of given integer in the order\
    \ from largest to smallest.\n;; Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n;; Input\
    \ number should be equal to the product of all factors\n;; >>> (factorize-reverse\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize-reverse 25)\n;; (list 5 5)\n;; >>> (factorize-reverse\
    \ 70)\n;; (list 2 5 7)", "  (let ((factors (list)))\n    (if (zero? n)\n     \
    \ (return factors)\n      (let ((i (1)))\n        (while (< i n)\n          (if\
    \ (zero? (modulo n i)))\n            (append factors i)\n            (set! i (+\
    \ i 1)))))\n    (reverse factors)))\n\n;; Return list of prime factors of given\
    \ integer in the order from largest to smallest.\n;; Each of the factors should\
    \ be listed number of times corresponding to how many times it appeares in factorization.\n\
    ;; Input number should be equal to the product of all factors\n;; >>> (factorize-prime\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize-prime 25)\n;; (list 5 5)\n;; >>> (factorize-prime\
    \ 70)\n;; (list 2 5 7)", "  (let ((factors (list 1)))\n    (while (< n 1)\n  \
    \    (let ((p (read-line \"Enter a number: \")))\n        (if (zero? p)\n    \
    \      (return factors)\n          (let ((f (integer->string p)))\n          \
    \  (if (not (string->number f))\n              (print \"Invalid input!\")\n  \
    \            (else\n                (let ((count 0))\n                  (while\
    \ (< count 0)\n                    (let ((f (string->number f)))\n           \
    \           (if (not (in-vector factors f))\n                        (set-vector-ref\
    \ factors count)\n                        (set-vector-ref factors (- count 1))\n\
    \                        (inc count))\n                      (inc count))\n  \
    \                  (print count))\n                  (print factors)))\n     \
    \         (exit)))\n        (set-vector-ref factors (string->number f)))))\n \
    \ (vector->list factors)))\n\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)", "  (let ((factors\
    \ (list)))\n    (if (zero? n)\n      (return factors)\n      (let ((prime (car\
    \ factors)))\n        (if (zero? prime)\n          (return factors)\n        \
    \  (let ((factor (car factors)))\n            (if (zero? factor)\n           \
    \   (return factors)\n              (let ((factor (car factors)))\n          \
    \      (if (zero? factor)\n                  (return factors)\n              \
    \    (let ((factor (car factors)))\n                    (if (zero? factor)\n \
    \                     (return factors)\n                      (let ((factor (car\
    \ factors)))\n                        (if (zero? factor)\n                   \
    \       (return factors)\n                          (let ((factor (car factors)))\n\
    \                            (if (zero? factor)\n                            \
    \  (return factors)\n                              (let ((factor (car factors)))\n\
    \                                (if (zero? factor)\n                        \
    \          (return factors)\n                                  (let ((factor (car\
    \ factors)))\n                                    (if (zero? factor)\n       \
    \                               (return factors)\n                           \
    \           (let ((factor (car factors)))\n                                  \
    \      (if (zero? factor)\n                                          (return factors)\n\
    \                                          (let ((factor (car factors)))\n   \
    \                                         (if (zero? factor)\n               \
    \                               (return factors)\n                           \
    \                   (let ((factor (car factors)))\n                          \
    \                      (if (zero? factor)\n                                  \
    \                (return factors)\n                                          \
    \        (let ((factor (car factors)))\n                                     \
    \               (if (zero? factor)\n                                         \
    \             (return factors)\n                                             \
    \         (let ((factor (car factors)))\n                                    \
    \                    (if (zero? factor)\n                                    \
    \                      (return factors)\n                                    \
    \                      (let ((factor (car factors)))\n                       \
    \                                     (if (zero? factor)\n                   \
    \                                           (return factors)\n               \
    \                                               (let ((factor (car factors)))\n\
    \                                                                (if (zero? factor)\n\
    \                                                                  (return factors)\n\
    \                                                                  (let ((factor\
    \ (car factors)))\n                                                          \
    \        ", "  (let ((factors (list)))\n    (while (< n 1)\n      (let ((p (read-integer)))\n\
    \        (if (even? p)\n          (append factors (list p))\n          (append\
    \ factors (list p) (list -1)))))\n    (reverse factors)))\n\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factor",
  "  (let ((factors (list 1)))\n    (while (< n 1)\n      (let ((f (first factors)))\n\
    \        (set-car! factors (car f))\n        (set-cdr! factors (cdr f))\n    \
    \    (setq n (quotient n f)))\n      (setq n (quotient n 2)))\n    (reverse factors)))\n\
    \n;; Return list of prime factors of given integer in the order from largest to\
    \ smallest.\n;; Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n;; Input number should be equal\
    \ to the product of all factors\n;; >>> (factorize-reverse 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize-reverse 25)\n;; (list 5 5)\n;; >>> (factorize-reverse 70)\n\
    ;; (list 2 5 7)", "  (let ((factors (list)))\n    (while (< n 1)\n      (let ((i\
    \ (1)))\n        (while (< n (apply + (list i) factors)))\n          (set! factors\
    \ (append factors (list i)))\n          (set! i (apply + i (list i) factors)))\n\
    \        (set! n (apply + n (list i) factors))))\n    (apply + (list n) factors)))\n\
    \n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70", "  (let ((factors (list)))\n    (if (zero? n)\n      (return\
    \ factors)\n      (let ((factor (car factors)))\n        (if (zero? factor)\n\
    \          (return factors)\n          (let ((factor (car factors)))\n       \
    \     (if (zero? factor)\n              (return factors)\n              (let ((factor\
    \ (car factors)))\n                (if (zero? factor)\n                  (return\
    \ factors)\n                  (let ((factor (car factors)))\n                \
    \    (if (zero? factor)\n                      (return factors)\n            \
    \          (let ((factor (car factors)))\n                        (if (zero? factor)\n\
    \                          (return factors)\n                          (let ((factor\
    \ (car factors)))\n                            (if (zero? factor)\n          \
    \                    (return factors)\n                              (let ((factor\
    \ (car factors)))\n                                (if (zero? factor)\n      \
    \                            (return factors)\n                              \
    \    (let ((factor (car factors)))\n                                    (if (zero?\
    \ factor)\n                                      (return factors)\n          \
    \                            (let ((factor (car factors)))\n                 \
    \                       (if (zero? factor)\n                                 \
    \         (return factors)\n                                          (let ((factor\
    \ (car factors)))\n                                            (if (zero? factor)\n\
    \                                              (return factors)\n            \
    \                                  (let ((factor (car factors)))\n           \
    \                                     (if (zero? factor)\n                   \
    \                               (return factors)\n                           \
    \                       (let ((factor (car factors)))\n                      \
    \                              (if (zero? factor)\n                          \
    \                            (return factors)\n                              \
    \                        (let ((factor (car factors)))\n                     \
    \                                   (if (zero? factor)\n                     \
    \                                     (return factors)\n                     \
    \                                     (let ((factor (car factors)))\n        \
    \                                                    (if (zero? factor)\n    \
    \                                                          (return factors)\n\
    \                                                              (let ((factor (car\
    \ factors)))\n                                                               \
    \ (if (zero? factor)\n                                                       \
    \           (return factors)\n                                               \
    \                   (let ((factor (car factors)))\n                          \
    \                                        ", "  (let ((factors (list 1)))\n   \
    \ (while (< n 1)\n      (let ((f (car factors)))\n        (setq factors (cdr factors))\n\
    \        (if (< f n)\n          (append factors f)\n          (append factors\
    \ (cons f n)))))\n    (reverse factors)))\n\n;; >>> (factorize 8)\n;; (list 2\
    \ 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n", "  (let ((factors (list)))\n\
    \    (while (< n 1)\n      (let ((f (first factors)))\n        (if (zero? (modulo\
    \ n f))\n          (append factors (f))\n          (setf factors (rest factors))))))\n\
    \  (reverse factors))\n\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25", "  (let* ([factors (make-y-vector\
    \ 0 n)])\n    (let* ([i (0)])\n      (while (< i n)\n        (let* ([prime (y-ref\
    \ factors i)])\n          (if (y-empty? prime)\n            (y-ref factors i)\n\
    \            (let* ([factor (y-ref prime)])\n              (y-set! prime (y-make-vector\
    \ 1 (y-ref factor) (y-ref factors i)))\n              (y-set! factor (y-make-vector\
    \ 1 (y-ref factor) (y-ref factors i)))\n              (y-set! factors (y-make-vector\
    \ 1 (y-ref factor) (y-ref factors i)))))\n          (set! i (y-inc! i)))\n   \
    \   (y-reverse factors)))\n  factors)\n\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)",
  "  (let ((factors (list 1)))\n    (if (< n 1)\n      (return factors)\n      (let\
    \ ((i 1))\n        (while (< i n)\n          (if (modulo n i)\n            (append\
    \ factors (list i))\n            (set! i (+ i 1)))\n          (set! i (+ i 1)))\n\
    \        (set! i 1)\n        (append factors (list n))\n        (return factors)))\n\
    \    ))\n\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5", "  (let ((factors (list 1)))\n    (while (< n 1)\n      (let ((p (read\
    \ \"Enter a number: \")))\n        (if (not (integer? p)) (print \"Not an integer!\"\
    ))\n        (if (not (<= p 1)) (print \"Not a positive integer!\"))\n        (if\
    \ (not (<= n p)) (print \"Not a factor of \" n))\n        (let ((f (floor (sqrt\
    \ p))))\n          (if (<= f 1) (print \"Not a prime number!\"))\n          (let\
    \ ((f (read \"Enter a factor: \")))\n            (if (not (integer? f)) (print\
    \ \"Not an integer!\"))\n            (if (not (<= f 1)) (print \"Not a positive\
    \ integer!\"))\n            (let ((p (read \"Enter a number: \")))\n         \
    \     (if (not (integer? p)) (print \"Not an integer!\"))\n              (if (not\
    \ (<= p 1)) (print \"Not a positive integer!\"))\n              (if (not (<= n\
    \ p)) (print \"Not a factor of \" n))\n              (if (not (modulo p f)) (print\
    \ \"Not a factor of \" p))\n              (let ((f (floor (sqrt p))))\n      \
    \          (if (<= f 1) (print \"Not a prime number!\"))\n                (let\
    \ ((f (read \"Enter a factor: \")))\n                  (if (not (integer? f))\
    \ (print \"Not an integer!\"))\n                  (if (not (<= f 1)) (print \"\
    Not a positive integer!\"))\n                  (let ((p (read \"Enter a number:\
    \ \")))\n                    (if (not (integer? p)) (print \"Not an integer!\"\
    ))\n                    (if (not (<= p 1)) (print \"Not a positive integer!\"\
    ))\n                    (if (not (<= n p)) (print \"Not a factor of \" n))\n \
    \                   (if (not (modulo p f)) (print \"Not a factor of \" p))\n \
    \                   (if (not (modulo p f)) (print \"Not a factor of \" p))\n \
    \                   (if (not (modulo p f)) (print \"Not a factor of \" p))\n \
    \                   (if (not (modulo p f", "  (let ((factors (list)))\n    (while\
    \ (< n 1)\n      (let ((p (read-integer)))\n        (if (not (even? p))\n    \
    \      (let ((f (read-integer)))\n            (append factors (cons (p) (factorize\
    \ (p * f))))))\n        (append factors (cons (p) (factorize (p * n))))))\n  \
    \  (reverse factors)))\n\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;;", "  (let ((factors (list)))\n\
    \    (if (zero? n)\n      (return factors)\n      (let ((p (car factors)))\n \
    \       (if (zero? p)\n          (return factors)\n          (let ((n (cdr factors)))\n\
    \            (if (zero? n)\n              (return factors)\n              (let\
    \ ((q (car n)))\n                (if (zero? q)\n                  (return factors)\n\
    \                  (let ((r (cdr n)))\n                    (if (zero? r)\n   \
    \                   (return factors)\n                      (let ((p (car factors)))\n\
    \                        (if (zero? p)\n                          (return factors)\n\
    \                          (let ((n (cdr factors)))\n                        \
    \    (if (zero? n)\n                              (return factors)\n         \
    \                     (let ((q (car n)))\n                                (if\
    \ (zero? q)\n                                  (return factors)\n            \
    \                      (let ((r (cdr n)))\n                                  \
    \  (if (zero? r)\n                                      (return factors)\n   \
    \                                   (let ((p (car factors)))\n               \
    \                         (if (zero? p)\n                                    \
    \      (return factors)\n                                          (let ((n (cdr\
    \ factors)))\n                                            (if (zero? n)\n    \
    \                                          (return factors)\n                \
    \                              (let ((q (car n)))\n                          \
    \                      (if (zero? q)\n                                       \
    \           (return factors)\n                                               \
    \   (let ((r (cdr n)))\n                                                    (if\
    \ (zero? r)\n                                                      (return factors)\n\
    \                                                      (let ((p (car factors)))\n\
    \                                                        (if (zero? p)\n     \
    \                                                     (return factors)\n     \
    \                                                     (let ((n (cdr factors)))\n\
    \                                                            (if (zero? n)\n \
    \                                                             (return factors)\n\
    \                                                              (let ((q (car n)))\n\
    \                                                                (if (zero? q)\n\
    \                                                                  (return factors)\n\
    \                                                                  (let ((r (c",
  "  (let ((factors (list 1)))\n    (while (< n 1)\n      (let ((p (read-line \"Enter\
    \ a number: \")))\n        (if (not (integer? p)) (print \"Not an integer!\"))\n\
    \        (let ((f (integer->string p)))\n          (if (not (string? f)) (print\
    \ \"Not a string!\"))\n          (let ((count 0))\n            (while (< count\
    \ 0)\n              (let ((f (string->integer f)))\n                (if (not (integer?\
    \ f)) (print \"Not an integer!\"))\n                (if (not (member f factors))\n\
    \                  (let ((i (member f factors)))\n                    (set-car!\
    \ i (+ count 1)))\n                    (set-cdr! factors (cons f (cdr factors)))\n\
    \                  )\n                )\n              )\n            (print factors)\n\
    \          )\n        )\n      )\n    )\n  )\n)\n", "  (let ((factors (list 1)))\n\
    \    (while (< n 1)\n      (let ((f (quotient n 1)))\n        (if (zero? f)\n\
    \          (return factors)\n          (factors (append factors (list f) (factorize\
    \ (quotient n f)))))))))\n\n;; Return list of prime factors of given integer in\
    \ the order from smallest to largest.\n;; Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    ;; Input number should be equal to the product of all factors\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)", "  (let ((factors (make-yail-list)))\n    (if (zero?\
    \ n)\n      (return factors)\n      (let ((prime-factors (make-yail-list)))\n\
    \        (for-each (lambda (factor)\n                   (if (zero? (quotient n\
    \ factor))\n                       (append prime-factors factor)\n           \
    \            (append factors (make-yail-list 1))))\n               (make-yail-list\
    \ (make-yail-list 1) (make-yail-list 1)))\n        (append factors prime-factors)\n\
    \        (factorize (quotient n (car factors)))))))\n", "  (let ((factors (make-vector\
    \ n 0)))\n    (let ((i 0))\n      (while (< i n)\n        (let ((p (modulo n i)))\n\
    \          (if (zero? p)\n            (return factors)\n            (set! factors\
    \ (append factors (list p)))))\n        (set! i (i + 1)))\n      (return factors)))\n\
    \n;; Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n;; Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n;; Input number should be equal\
    \ to the product of all factors\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>>\
    \ (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)", "  (let\
    \ ((factors (list)))\n    (while (< n 1)\n      (let ((next (modulo n 2)))\n \
    \       (if (= next 0)\n          (append factors (list next))\n          (append\
    \ factors (list next) (modulo/into factors next)))))\n    (reverse factors)))\n\
    \n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;;", "  (let ((factors (list 1)))\n    (while (< n 1)\n      (let ((f (first factors)))\n\
    \        (if (zero? (modulo n f))\n          (append factors f)\n          (setf\
    \ factors (rest factors))))))\n  (reverse factors))\n\n;; Return the product of\
    \ all factors of given integer.\n;; Input number should be equal to the product\
    \ of all factors\n;; >>> (factorize-product 8)\n;; 8\n;; >>> (factorize-product\
    \ 25)\n;; 25\n;; >>> (factorize-product 70)\n;; 70", "  (let ((factors (list 1)))\n\
    \    (while (< n 1)\n      (let ((f (first factors)))\n        (if (< n (* f n))\n\
    \          (append factors (* f n))\n          (set! factors (rest factors))))))\n\
    )\n\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5\
    \ 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2\
    \ 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list", "  (let ((factors (list)))\n    (let\
    \ ((i 0))\n      (while (< i n)\n        (if (and (= (car factors) 0) (= (cdr\
    \ factors) factors))\n          (setf (car factors) (car n))\n          (setf\
    \ (cdr factors) (cdr factors) (cdr n))\n          (setf i (+ i 1)))\n        (setf\
    \ (car factors) (car n))\n        (setf (cdr factors) (cdr n))\n        (setf\
    \ i (+ i 1))))\n    (if (car factors)\n      (list (car factors) (car factors))\n\
    \      (list (car factors))))\n\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>>\
    \ (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>>\
    \ (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>>\
    \ (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>>\
    \ (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>>\
    \ (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>>\
    \ (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>>\
    \ (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>>\
    \ (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>>\
    \ (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>>\
    \ (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>>\
    \ (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (", "  (let ((factors\
    \ (list 1)))\n    (if (< n 1)\n      (return factors)\n      (let ((i 1))\n  \
    \      (while (< i n)\n          (if (= (modulo n i) 0)\n            (append factors\
    \ (list i))\n            (set! i (+ i 1)))\n          )\n        )\n        (return\
    \ factors)\n        )\n      )\n    )\n\n;; >>> (factorize (product-of-factors\
    \ (factorize 8)))\n;; (list 2 2 2)\n;; >>> (factorize (product-of-factors (factorize\
    \ 25)))\n;; (list 5 5)\n;; >>> (factorize (product-of-factors (factorize 70)))\n\
    ;; (list 2 5 7)\n;; >>> (factorize (product-of-factors (factorize 8) (product-of-factors\
    \ (factorize 25))))\n;; (list 2 2 2 5 5)\n;; >>> (factorize (product-of-factors\
    \ (factorize 8) (product-of-factors (factorize 25) (product-of-factors (factorize\
    \ 70)))))\n;; (list 2 2 2 5 5 7)\n;; >>> (factorize (product-of-factors (factorize\
    \ 8) (product-of-factors (factorize 25) (product-of-factors (factorize 70) (product-of-factors\
    \ (factorize 70))))))\n;; (list 2 2 2 5 5 7 7)\n;; >>> (factorize (product-of-factors\
    \ (factorize 8) (product-of-factors (factorize 25) (product-of-factors (factorize\
    \ 70) (product-of-factors (factorize 70) (product-of-factors (factorize 70)))))))\n\
    ;; (list 2 2 2 5 5 7 7 7)\n;; >>> (factorize (product-of-factors (factorize 8)\
    \ (product-of-factors (factorize 25) (product-of-factors (factorize 70) (product-of-factors\
    \ (factorize 70) (product-of-factors (factorize 70) (product-of-factors (factorize\
    \ 70))))))))\n;; (list 2 2 2 5 5 7 7 7 7)\n;; >>> (factorize (", "  (let ((factors\
    \ (list)))\n    (while (< n 1)\n      (let ((next (modulo n 2)))\n        (if\
    \ (= next 0)\n          (append factors (list next))\n          (append factors\
    \ (list next) (modulo n next)))))\n    (reverse factors)))\n\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (", "  (let*\
    \ ((factors (list 1))\n         (i 0))\n    (while (< i n)\n      (let ((next\
    \ (modulo i 2)))\n        (if (= next 0)\n          (append factors (list i))\n\
    \          (set! i (+ i next)))))\n    (reverse factors)))\n\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n", "  (let ((factors\
    \ (list)))\n    (while (< n 1)\n      (let ((p (read-line \"Enter a number: \"\
    )))\n        (if (not (integer? p)) (print \"Not an integer\")))\n        (let\
    \ ((i 0))\n          (while (< i 0)\n            (if (not (even? p))\n       \
    \       (let ((f (read-line \"Enter a factor: \")))\n                (if (not\
    \ (integer? f)) (print \"Not an integer\")))\n                (let ((n (pow p\
    \ f)))\n                  (if (not (even? n)) (print \"Not a prime\")))\n    \
    \              (let ((count 0))\n                    (while (< count 0)\n    \
    \                  (if (member n factors) (set-car! factors count))\n        \
    \                (set-car! factors count)\n                        (set-cdr! factors\
    \ count)\n                        (set-car! factors count)\n                 \
    \       (set-cdr! factors count)\n                        (set-car! factors count)\n\
    \                        (set-cdr! factors count)\n                        (set-car!\
    \ factors count)\n                        (set-cdr! factors count)\n         \
    \               (set-car! factors count)\n                        (set-cdr! factors\
    \ count)\n                        (set-car! factors count)\n                 \
    \       (set-cdr! factors count)\n                        (set-car! factors count)\n\
    \                        (set-cdr! factors count)\n                        (set-car!\
    \ factors count)\n                        (set-cdr! factors count)\n         \
    \               (set-car! factors count)\n                        (set-cdr! factors\
    \ count)\n                        (set-car! factors count)\n                 \
    \       (set-cdr! factors count)\n                        (set-car! factors count)\n\
    \                        (set-cdr! factors count)\n                        (set-car!\
    \ factors count)\n                        (set-cdr! factors count)\n         \
    \               (set-car! factors count)\n                        (set-cdr! factors\
    \ count)\n                        (set-car! factors count)\n                 \
    \       (set-cdr! factors count)\n                        (set-car! factors count)\n\
    \                        (set-cdr! factors count)\n                        (set-car!\
    \ factors count)\n                        (set-cdr", "  (let ((factors (list 1)))\n\
    \    (while (< n 1)\n      (let ((p (car factors)))\n        (if (zero? p)\n \
    \         (return factors)\n          (let ((q (car (cdr factors))))\n       \
    \     (if (zero? q)\n              (return factors)\n              (let ((r (car\
    \ (cdr (cdr factors)))))\n                (if (zero? r)\n                  (return\
    \ factors)\n                  (factors (cons p (cons q (cons r (cons p (cons q\
    \ (cons r (cons p (cons q (cons r (cons p (cons q (cons r (cons p (cons q (cons\
    \ r
  "  (let ((factors (list)))\n    (while (< n 1)\n      (let ((p (read-line \"Enter\
    \ a number: \")))\n        (if (not (integer? p)) (print \"Not an integer\")))\n\
    \        (let ((f (read-line \"Enter a factor: \")))\n          (if (not (integer?\
    \ f)) (print \"Not an integer\")))\n          (if (not (member? f factors))\n\
    \            (factors (append factors f)))\n          (let ((n (quotient n p)))\n\
    \            (if (< n 1) (print \"Not a prime number\")))\n            (if (not\
    \ (member? n factors))\n              (factors (append factors n)))\n        \
    \    (n (quotient n p))))))\n\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)", "  (let ((factors\
    \ (list)))\n    (while (< n 1)\n      (let ((p (read-integer)))\n        (if (not\
    \ (in-integer factors p))\n          (append factors (list p))\n          (set!\
    \ factors (append factors (list p)))\n          (set! n (quotient n p))))))\n\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (", "  (let ((factors\
    \ (list)))\n    (if (zero? n)\n      (return factors)\n      (if (zero? (modulo\
    \ n 2))\n        (return factors)\n        (let ((f (divide n 2)))\n         \
    \ (factors (append factors (list f) (factorize (modulo n f)))))))\n  )\n)\n\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize", "  (let ((factors\
    \ (list 1)))\n    (while (< n 1)\n      (let ((p (read-line \"Enter a number:\
    \ \")))\n        (if (odd? p)\n          (let ((f (divide-by p)))\n          \
    \  (if (< f 1)\n              (print \"Number is not prime\")\n              (else\n\
    \                (let ((i (1)))\n                  (while (< i f)\n          \
    \          (let ((f (f * p)))\n                      (if (< f 1)\n           \
    \             (print \"Number is not prime\")\n                        (else\n\
    \                          (let ((j (1)))\n                            (while\
    \ (< j i)\n                              (let ((f (f * p)))\n                \
    \                (if (< f 1)\n                                  (print \"Number\
    \ is not prime\")\n                                  (else\n                 \
    \                   (let ((k (1)))\n                                      (while\
    \ (< k j)\n                                        (let ((f (f * p)))\n      \
    \                                    (if (< f 1)\n                           \
    \                 (print \"Number is not prime\")\n                          \
    \                  (else\n                                              (let ((l\
    \ (1)))\n                                                (while (< l k)\n    \
    \                                              (let ((f (f * p)))\n          \
    \                                          (if (< f 1)\n                     \
    \                                 (print \"Number is not prime\")\n          \
    \                                            (else\n                         \
    \                               (let ((m (1)))\n                             \
    \                             (while (< m l)\n                               \
    \                             (let ((f (f * p)))\n                           \
    \                                   (if (< f 1)\n                            \
    \                                    (print \"Number is not prime\")\n       \
    \                                                         (else\n            \
    \                                                      (let ((n (1)))\n      \
    \                                                              (while (< n m)\n\
    \                                                                      (let ((f\
    \ (f * p)))\n                                                                \
    \        (if (< f 1)\n                                                       \
    \                   (print \"Number is not prime\")\n                        \
    \                                                  (else\n                   \
    \                                                         (let ((o (1)))\n   \
    \                                                                           (while\
    \ (< o n)\n                                                                  \
    \              (let ((f (f", "  (let ((factors (list 1)))\n    (while (< n 1)\n\
    \      (let ((p (read-integer)))\n        (if (not (even? p))\n          (let\
    \ ((f (read-integer)))\n            (if (not (even? f))\n              (let ((f\
    \ (read-integer)))\n                (if (not (even? f))\n                  (let\
    \ ((f (read-integer)))\n                    (if (not (even? f))\n            \
    \          (let ((f (read-integer)))\n                        (if (not (even?\
    \ f))\n                          (let ((f (read-integer)))\n                 \
    \           (if (not (even? f))\n                              (let ((f (read-integer)))\n\
    \                                (if (not (even? f))\n                       \
    \           (let ((f (read-integer)))\n                                    (if\
    \ (not (even? f))\n                                      (let ((f (read-integer)))\n\
    \                                        (if (not (even? f))\n               \
    \                           (let ((f (read-integer)))\n                      \
    \                      (if (not (even? f))\n                                 \
    \             (let ((f (read-integer)))\n                                    \
    \            (if (not (even? f))\n                                           \
    \       (let ((f (read-integer)))\n                                          \
    \          (if (not (even? f))\n                                             \
    \         (let ((f (read-integer)))\n                                        \
    \                (if (not (even? f))\n                                       \
    \                   (let ((f (read-integer)))\n                              \
    \                              (if (not (even? f))\n                         \
    \                                     (let ((f (read-integer)))\n            \
    \                                                    (if (not (even? f))\n   \
    \                                                               (let ((f (read-integer)))\n\
    \                                                                    (if (not\
    \ (even? f))\n                                                               \
    \       (let ((f (read-integer)))\n                                          \
    \                              (if (not (even? f))\n                         \
    \                                                 (let ((f (read-integer)))\n\
    \                                                                            (if\
    \ (not (even? f))\n                                                          \
    \                    (let ((f (read-integer)))", "  (let ((factors (list)))\n\
    \    (if (< n 1)\n      (return factors)\n      (let ((i 0))\n        (while (<\
    \ i n)\n          (let ((p (modulo n i)))\n            (if (not (member p factors))\n\
    \              (append factors (list p))\n              (set! i (+ i 1)))))\n\
    \        (return factors)))\n  )\n)\n\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (", "  (let ((factors\
    \ (list 1)))\n    (while (< n 1)\n      (let ((f (first factors)))\n        (if\
    \ (zero? f)\n          (return factors)\n          (set-car! factors f)\n    \
    \      (set-cdr! factors (cons (car f) (factorize (cdr f)))))))\n    (cdr factors)))\n\
    \n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (", "  (let ((factors (list)))\n\
    \    (if (zero? n)\n      (return factors)\n      (let ((i 0))\n        (while\
    \ (< i n)\n          (if (zero? (modulo n i))\n            (append factors (list\
    \ i))\n            (set! i (+ i 1)))))\n      (return factors)))\n\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n", "  (let ((factors (list)))\n\
    \    (while (< n 1)\n      (let ((p (read-integer)))\n        (if (even? p)\n\
    \          (append factors (list p))\n          (append factors (list p) (list\
    \ -1)))))\n    (reverse factors)))\n\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factor", "  (let ((factors (list)))\n\
    \    (while (< n 1)\n      (let ((next (modulo n 2)))\n        (if (= next 0)\n\
    \          (append factors (list next))\n          (append factors (list 2 next))\n\
    \          (append factors (list 2 (modulo n next)))\n          (append factors\
    \ (list (modulo n next) 2))\n          (append factors (list (modulo n next) (modulo\
    \ n next)))\n          (append factors (list (modulo n next) (modulo n next) 2))\n\
    \          (append factors (list (modulo n next) (modulo n next) (modulo n next)))\n\
    \          (append factors (list (modulo n next) (modulo n next) (modulo n next)\
    \ 2))\n          (append factors (list (modulo n next) (modulo n next) (modulo\
    \ n next) (modulo n next)))\n          (append factors (list (modulo n next) (modulo\
    \ n next) (modulo n next) (modulo n next) 2))\n          (append factors (list\
    \ (modulo n next) (modulo n next) (modulo n next) (modulo n next) (modulo n next)))\n\
    \          (append factors (list (modulo n next) (modulo n next) (modulo n next)\
    \ (modulo n next) (modulo n next) 2))\n          (append factors (list (modulo\
    \ n next) (modulo n next) (modulo n next) (modulo n next) (modulo n next) (modulo\
    \ n next))))))))\n  (reverse factors)))\n\n;; >>> (factorize 8)\n;; (list 2 2\
    \ 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2\
    \ 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list\
    \ 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
    \ 2 5 7)\n;; >>>", "  (let ((factors (list)))\n    (if (zero? n)\n      (return\
    \ factors)\n      (let ((i 0))\n        (while (< i n)\n          (if (zero? (modulo\
    \ n (car factors) (car factors)))\n            (return factors)\n            (set!\
    \ i (i + 1))\n            (append factors (car factors) (car factors)))))\n  \
    \    (return factors)))\n)\n", "  (let ((factors (list)))\n    (if (zero? n)\n\
    \      (return factors)\n      (let ((prime (car n)))\n        (if (zero? prime)\n\
    \          (return factors)\n          (let ((factor (car factors)))\n       \
    \     (if (zero? prime)\n              (return factors)\n              (let ((factor\
    \ (car factors)))\n                (if (zero? prime)\n                  (return\
    \ factors)\n                  (let ((factor (car factors)))\n                \
    \    (if (zero? prime)\n                      (return factors)\n             \
    \         (let ((factor (car factors)))\n                        (if (zero? prime)\n\
    \                          (return factors)\n                          (let ((factor\
    \ (car factors)))\n                            (if (zero? prime)\n           \
    \                   (return factors)\n                              (let ((factor\
    \ (car factors)))\n                                (if (zero? prime)\n       \
    \                           (return factors)\n                               \
    \   (let ((factor (car factors)))\n                                    (if (zero?\
    \ prime)\n                                      (return factors)\n           \
    \                           (let ((factor (car factors)))\n                  \
    \                      (if (zero? prime)\n                                   \
    \       (return factors)\n                                          (let ((factor\
    \ (car factors)))\n                                            (if (zero? prime)\n\
    \                                              (return factors)\n            \
    \                                  (let ((factor (car factors)))\n           \
    \                                     (if (zero? prime)\n                    \
    \                              (return factors)\n                            \
    \                      (let ((factor (car factors)))\n                       \
    \                             (if (zero? prime)\n                            \
    \                          (return factors)\n                                \
    \                      (let ((factor (car factors)))\n                       \
    \                                 (if (zero? prime)\n                        \
    \                                  (return factors)\n                        \
    \                                  (let ((factor (car factors)))\n           \
    \                                                 (if (zero? prime)\n        \
    \                                                      (return factors)\n    \
    \                                                          (let ((factor (car\
    \ factors)))\n                                                               \
    \ (if (zero? prime)\n                                                        \
    \          (return factors)\n                                                \
    \                  (let ((factor (car factors)))\n                           \
    \                                       ", "  (let ((factors (list)))\n    (while\
    \ (< n 1)\n      (let ((i (1)))\n        (while (< (modulo n i) 0)\n         \
    \ (set! factors (append factors (list i)))\n          (set! i (+ i 1)))\n    \
    \    (set! n (quotient n i)))\n      (set! i (quotient n 1)))\n    (reverse factors)))\n\
    \n;; Return list of prime factors of given integer in the order from largest to\
    \ smallest.\n;; Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n;; Input number should be equal\
    \ to the product of all factors\n;; >>> (factorize-prime 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize-prime 25)\n;; (list 5 5)\n;; >>> (factorize-prime 70)\n;; (list\
    \ 2 5 7)", "  (let ((factors (list)))\n    (if (< n 1)\n      (return factors)\n\
    \      (let ((prime (car factors)))\n        (if (even? prime)\n          (let\
    \ ((factor (car factors)))\n            (if (even? factor)\n              (factorize\
    \ prime)\n              (let ((factor (car factors)))\n                (if (even?\
    \ factor)\n                  (factorize prime)\n                  (let ((factor\
    \ (car factors)))\n                    (if (even? factor)\n                  \
    \    (factorize prime)\n                      (let ((factor (car factors)))\n\
    \                        (if (even? factor)\n                          (factorize\
    \ prime)\n                          (let ((factor (car factors)))\n          \
    \                  (if (even? factor)\n                              (factorize\
    \ prime)\n                              (let ((factor (car factors)))\n      \
    \                          (if (even? factor)\n                              \
    \    (factorize prime)\n                                  (let ((factor (car factors)))\n\
    \                                    (if (even? factor)\n                    \
    \                  (factorize prime)\n                                      (let\
    \ ((factor (car factors)))\n                                        (if (even?\
    \ factor)\n                                          (factorize prime)\n     \
    \                                     (let ((factor (car factors)))\n        \
    \                                    (if (even? factor)\n                    \
    \                          (factorize prime)\n                               \
    \               (let ((factor (car factors)))\n                              \
    \                  (if (even? factor)\n                                      \
    \            (factorize prime)\n                                             \
    \     (let ((factor (car factors)))\n                                        \
    \            (if (even? factor)\n                                            \
    \          (factorize prime)\n                                               \
    \       (let ((factor (car factors)))\n                                      \
    \                  (if (even? factor)\n                                      \
    \                    (factorize prime)\n                                     \
    \                     (let ((factor (car factors)))\n                        \
    \                                    (if (even? factor)\n                    \
    \                                          (factorize prime)\n               \
    \                                               (let ((factor (car factors)))\n\
    \                                                                (if (even? factor)\n\
    \                                                                  (factorize\
    \ prime)\n                                                                  (let\
    \ ((factor (car", "  (let ((factors (list 1)))\n    (while (< n 1)\n      (let\
    \ ((p (read \"Enter a number: \")))\n        (if (odd? p)\n          (let ((q\
    \ (quotient p 2)))\n            (if (not (member? q factors))\n              (factors\
    \ (append factors q)))))\n        (if (zero? p)\n          (return factors)))))\n\
    \n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;;", "  (let ((factors (list 1)))\n    (while (< n 1)\n\
    \      (let ((p (read-line \"Enter a number to factorize: \")))\n        (if (zerop\
    \ p)\n          (println \"Zero is not a factor!\")\n          (else\n       \
    \     (let ((f (read-line \"Enter the number of times to factor: \")))\n     \
    \         (if (zerop f)\n                (println \"Zero is not a factor!\")\n\
    \                (else\n                  (let ((f (read-line \"Enter the number\
    \ of times to factor: \")))\n                    (if (zerop f)\n             \
    \         (println \"Zero is not a factor!\")\n                      (else\n \
    \                       (let ((f (read-line \"Enter the number of times to factor:\
    \ \")))\n                          (if (zerop f)\n                           \
    \ (println \"Zero is not a factor!\")\n                            (else\n   \
    \                           (let ((f (read-line \"Enter the number of times to\
    \ factor: \")))\n                                (if (zerop f)\n             \
    \                     (println \"Zero is not a factor!\")\n                  \
    \                (else\n                                    (let ((f (read-line\
    \ \"Enter the number of times to factor: \")))\n                             \
    \         (if (zerop f)\n                                        (println \"Zero\
    \ is not a factor!\")\n                                        (else\n       \
    \                                   (let ((f (read-line \"Enter the number of\
    \ times to factor: \")))\n                                            (if (zerop\
    \ f)\n                                              (println \"Zero is not a factor!\"\
    )\n                                              (else\n                     \
    \                           (let ((f (read-line \"Enter the number of times to\
    \ factor: \")))\n                                                  (if (zerop\
    \ f)\n                                                    (println \"Zero is not\
    \ a factor!\")\n                                                    (else\n  \
    \                                                    (let ((f (read-line \"Enter\
    \ the number of times to factor: \")))\n                                     \
    \                   (if (zerop f)\n                                          \
    \                (println \"Zero is not a factor!\")\n                       \
    \                                   (else\n                                  \
    \                         (", "  (let ((factors (list 1)))\n    (while (< n 1)\n\
    \      (let ((divisor (quotient n 1)))\n        (if (zero? divisor)\n        \
    \  (return factors)\n          (factors (append factors (list divisor)))))\n \
    \     (n (quotient n 1))))\n\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list", "  (let ((factors (list)))\n    (if (zero? n)\n      (return\
    \ factors)\n      (if (zero? (modulo n 2))\n        (return factors)\n       \
    \ (let ((factor (divisor-sieve n)))\n          (if (zero? factor)\n          \
    \  (return factors)\n            (factors (append factors factor)))))\n      (let\
    \ ((factor (divisor-sieve n)))\n        (if (zero? factor)\n          (return\
    \ factors)\n          (factors (append factors factor)))))\n  )\n)\n", "  (let\
    \ ((factors (list 1)))\n    (while (< n 1)\n      (let ((p (read-line \"Enter\
    \ a number: \")))\n        (if (not (integer? p)) (print \"Not an integer!\"))\n\
    \        (let ((f (integer->string p)))\n          (if (not (string? f)) (print\
    \ \"Not a string!\"))\n          (let ((count 0))\n            (while (< (string-length\
    \ f) 1)\n              (let ((p (string-substring f 0 1)))\n                (if\
    \ (not (string? p)) (print \"Not a string!\"))\n                (let ((f (string-substring\
    \ f 1)))\n                  (if (not (string? f)) (print \"Not a string!\"))\n\
    \                  (let ((count (+ 1 count)))\n                    (if (< count\
    \ 2)\n                      (append factors (list p))\n                      (append\
    \ factors (list p) (list count)))))\n                (setq count 0)))))\n    \
    \    (print factors)))\n    (if (not (empty? factors)) (print factors))\n    (print\
    \ \"Done!\"))\n)\n\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n\
    ;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; Done!\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; Done!\n;; >>> (factorize 25)\n;; (list 5 5)\n;; Done!\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; Done!\n\n;; >>> (factorize 8)\n;; (list\
    \ 2 2 2)\n;; Done!\n;; >>> (factorize 25)\n;; (list 5 5)\n;; Done!\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; Done!\n\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;;\
    \ Done!\n;; >>> (factorize 25)\n;; (list 5 5)\n;; Done!\n;; >>> (factorize 70)\n\
    ;; (list 2 5 7)\n;; Done!\n\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; Done!\n\
    ;; >>> (factorize", "  (let* ([factors (make-y-vector 0)])\n    (let* ([i (1)])\n\
    \      (while (< i n)\n        (let* ([prime (y-ref factors i)])\n          (if\
    \ (y-empty? prime)\n            (y-ref factors i)\n            (let* ([factor\
    \ (y-ref prime)])\n              (y-set! prime (y-make-vector 1 (y-ref factors\
    \ i)))\n              (y-set! factor (y-make-vector 1 (y-ref prime)))\n      \
    \        (y-set! (y-ref factors) (y-make-vector 1 (y-ref factors)))\n        \
    \      (y-set! (y-ref factors) (y-make-vector 1 (y-ref prime)))\n            \
    \  (y-set! (y-ref factors) (y-make-vector 1 (y-ref factor)))\n              (y-set!\
    \ (y-ref factors) (y-make-vector 1 (y-ref prime)))\n              (y-set! (y-ref\
    \ factors) (y-make-vector 1 (y-ref factor)))\n              (y-set! (y-ref factors)\
    \ (y-make-vector 1 (y-ref prime)))\n              (y-set! (y-ref factors) (y-make-vector\
    \ 1 (y-ref factor)))\n              (y-set! (y-ref factors) (y-make-vector 1 (y-ref\
    \ prime)))\n              (y-set! (y-ref factors) (y-make-vector 1 (y-ref factor)))\n\
    \              (y-set! (y-ref factors) (y-make-vector 1 (y-ref prime)))\n    \
    \          (y-set! (y-ref factors) (y-make-vector 1 (y-ref factor)))\n       \
    \       (y-set! (y-ref factors) (y-make-vector 1 (y-ref prime)))\n           \
    \   (y-set! (y-ref factors) (y-make-vector 1 (y-ref factor)))\n              (y-set!\
    \ (y-ref factors) (y-make-vector 1 (y-ref prime)))\n              (y-set! (y-ref\
    \ factors) (y-make-vector 1 (", "  (let ((factors (list 1)))\n    (if (zero? n)\n\
    \      (return factors)\n      (let ((divisor (car factors)))\n        (if (zero?\
    \ divisor)\n          (return factors)\n          (let ((divisor-1 (car (cdr factors))))\n\
    \            (if (zero? divisor-1)\n              (return factors)\n         \
    \     (let ((divisor-2 (car (cdr (cdr factors))))\n                    (if (zero?\
    \ divisor-2)\n                      (return factors)\n                      (let\
    \ ((divisor-3 (car (cdr (cdr (cdr factors))))))))\n                    (if (zero?\
    \ divisor-3)\n                      (return factors)\n                      (let\
    \ ((divisor-4 (car (cdr (cdr (cdr (cdr factors))))))))\n                     \
    \ (if (zero? divisor-4)\n                        (return factors)\n          \
    \              (let ((divisor-5 (car (cdr (cdr (cdr (cdr (cdr factors))))))))\n\
    \                          (if (zero? divisor-5)\n                           \
    \ (return factors)\n                            (let ((divisor-6 (car (cdr (cdr\
    \ (cdr (cdr (cdr (cdr factors))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
  "  (let ((factors (list 1)))\n    (while (< n 1)\n      (let ((factor (quotient\
    \ n 1)))\n        (if (< factor 1)\n          (return factors)\n        (set-car!\
    \ factors factor)\n        (set-cdr! factors (cons factor (car factors)))\n  \
    \      (n (quotient n factor))))))\n\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factor", "  (let ((factors (list)))\n    (if (zero? n)\n      (return\
    \ factors)\n      (let ((factor n))\n        (if (zero? factor)\n          (return\
    \ factors)\n          (factors (append factors (list factor)))))\n      (factorize\
    \ (quotient n (car factors)))))\n\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>>\
    \ (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>>\
    \ (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>>\
    \ (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>>\
    \ (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>>\
    \ (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>>\
    \ (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>>\
    \ (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>>\
    \ (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>>\
    \ (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>>\
    \ (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>>\
    \ (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>>\
    \ (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>>\
    \ (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>>\
    \ (factorize 8)\n;; (list 2", "  (let ((factors (list 1)))\n    (while (< n 1)\n\
    \      (let ((p (car factors)))\n        (if (even? p)\n          (set-car! factors\
    \ (cdr factors))\n          (set-cdr! factors (cons p (factorize (quotient n p)))))))))\n\
    \n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2", " \
    \ (let ((factors (list 1)))\n    (while (< n 1)\n      (let ((p (read-line \"\
    Enter a number: \")))\n        (if (odd? p)\n          (let ((f (read-line \"\
    Enter a factor: \")))\n            (append factors (list f) (factorize (quotient\
    \ p f))))\n          (append factors (list p)))))\n    (reverse factors)))\n\n\
    ;; Return list of prime factors of given integer in the order from largest to\
    \ smallest.\n;; Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n;; Input number should be equal\
    \ to the product of all factors\n;; >>> (factorize-reverse 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize-reverse 25)\n;; (list 5 5)\n;; >>> (factorize-reverse 70)\n\
    ;; (list 2 5 7)", "  (let ((factors (list)))\n    (while (< n 1)\n      (let ((p\
    \ (read-integer)))\n        (if (zero? p)\n          (return factors)\n      \
    \    (if (not (zero? (modulo p 2)))\n            (append factors (list p))\n \
    \           (let ((f (modulo p 2)))\n              (while (< f 1)\n          \
    \      (append factors (list p))\n                (set! f (modulo p f)))))\n \
    \         (set! n (modulo n p))))))\n\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2", " \
    \ (let ((factors (list 1)))\n    (while (< n 1)\n      (let ((f (first factors)))\n\
    \        (setq factors (rest factors))\n        (if (< f n)\n          (append\
    \ factors f)\n          (append factors (f * n)))))\n    (reverse factors)))\n\
    \n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n\
    ;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n\
    ;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n\
    ;;", "  (let ((factors (list 1)))\n    (while (< n 1)\n      (let ((p (read-line\
    \ \"Enter a number to factorize: \")))\n        (if (zero? p)\n          (print\
    \ \"Zero is not a factor!\")\n          (else\n            (let ((f (car p)))\n\
    \              (if (zero? f)\n                (print \"Zero is not a factor!\"\
    )\n                (else\n                  (let ((n (cdr p)))\n             \
    \       (if (zero? n)\n                      (print \"Zero is not a factor!\"\
    )\n                      (else\n                        (let ((f (car n)))\n \
    \                         (if (zero? f)\n                            (print \"\
    Zero is not a factor!\")\n                            (else\n                \
    \              (let ((n (cdr n)))\n                                (if (zero?\
    \ n)\n                                  (print \"Zero is not a factor!\")\n  \
    \                                (else\n                                    (let\
    \ ((f (car n)))\n                                      (if (zero? f)\n       \
    \                                 (print \"Zero is not a factor!\")\n        \
    \                                (else\n                                     \
    \     (let ((n (cdr n)))\n                                            (if (zero?\
    \ n)\n                                              (print \"Zero is not a factor!\"\
    )\n                                              (else\n                     \
    \                           (let ((f (car n)))\n                             \
    \                     (if (zero? f)\n                                        \
    \            (print \"Zero is not a factor!\")\n                             \
    \                       (else\n                                              \
    \        (let ((n (cdr n)))\n                                                \
    \        (if (zero? n)\n                                                     \
    \     (print \"Zero is not a factor!\")\n                                    \
    \                      (else\n                                               \
    \            (let ((f (car n)))\n                                            \
    \                  (if (zero? f)\n                                           \
    \                     (print \"Zero is not a factor!\")\n                    \
    \                                            (else\n                         \
    \                                         (let ((n (cdr n)))\n               \
    \                                                     (if (zero? n)\n        \
    \                                                              (print \"Zero is\
    \ not a factor!\")\n                                                         \
    \             ", "  (let ((factors (list)))\n    (if (zero? n)\n      (return\
    \ factors)\n      (let ((i (1)))\n        (while (< i n)\n          (if (zero?\
    \ (modulo n i))\n            (append factors i)\n            (set! i (+ i 1)))))\n\
    \      (return factors)))\n\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize\
    \ 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize\
    \ 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize\
    \ 8)\n;;", "  (let ((factors (list 1)))\n    (while (< n 1)\n      (let ((p (car\
    \ factors)))\n        (if (zero? p)\n          (return factors)\n          (setq\
    \ factors (cons (car p) (factorize (cdr p)))))))))\n\n;; >>> (factorize 8)\n;;\
    \ (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n\
    ;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n\
    ;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n\
    ;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n\
    ;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n\
    ;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n\
    ;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n\
    ;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n\
    ;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n\
    ;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n\
    ;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n\
    ;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n;; >>> (factorize 8)\n\
    ;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n\
    ;; (list 2 5 7)\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25",
  "  (let ((factors (list 1)))\n    (while (< n 1)\n      (let ((p (read-line \"Enter\
    \ a number: \")))\n        (if (zero? p)\n          (print \"Zero is not a prime\
    \ number.\")\n          (let ((factor (read-line \"Enter a prime number: \")))\n\
    \            (if (zero? factor)\n              (print \"Zero is not a prime number.\"\
    )\n              (let ((times (read-line \"Enter the number of times: \")))\n\
    \                (if (zero? times)\n                  (print \"Zero is not a prime\
    \ number.\")\n                  (let ((factor (read-line \"Enter a prime number:\
    \ \")))\n                    (if (zero? factor)\n                      (print\
    \ \"Zero is not a prime number.\")\n                      (let ((times (read-line\
    \ \"Enter the number of times: \")))\n                        (if (zero? times)\n\
    \                          (print \"Zero is not a prime number.\")\n         \
    \                 (let ((factor (read-line \"Enter a prime number: \")))\n   \
    \                         (if (zero? factor)\n                              (print\
    \ \"Zero is not a prime number.\")\n                              (let ((times\
    \ (read-line \"Enter the number of times: \")))\n                            \
    \    (if (zero? times)\n                                  (print \"Zero is not\
    \ a prime number.\")\n                                  (let ((factor (read-line\
    \ \"Enter a prime number: \")))\n                                    (if (zero?\
    \ factor)\n                                      (print \"Zero is not a prime\
    \ number.\")\n                                      (let ((times (read-line \"\
    Enter the number of times: \")))\n                                        (if\
    \ (zero? times)\n                                          (print \"Zero is not\
    \ a prime number.\")\n                                          (let ((factor\
    \ (read-line \"Enter a prime number: \")))\n                                 \
    \           (if (zero? factor)\n                                             \
    \ (print \"Zero is not a prime number.\")\n                                  \
    \            (let ((times (read-line \"Enter the number of times: \")))\n    \
    \                                            (if (zero? times)\n             \
    \                                     (print \"Zero is not a prime number.\")\n\
    \                                                  (let ((factor (read-line \"\
    Enter a prime number: \")))\n                                 "]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
