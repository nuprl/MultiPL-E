{
  "name": "HumanEval_30_get_positive",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (if (null? l)\n    l\n    (if (negative? (car l))\n      (cdr l)\n      (cons (car l) (get_positive (cdr l))))))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpejnz1wyy.rkt:25:4\nactual:     '(-2 4 5 6)\nexpected:   '(4 5 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpejnz1wyy.rkt:26:4\nactual:     '(5 3 2 3 3 9 0 123 1 -10)\nexpected:   '(5 3 2 3 3 9 123 1)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpejnz1wyy.rkt:27:4\nactual:     '(-2)\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (list)]\n    [(positive? (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -5 -3 -3 -9 -123 -10)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cdr l)]\n    [else (car l)]\n  ))\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpscvej1xa.rkt:25:4\nactual:     -1\nexpected:   '(4 5 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpscvej1xa.rkt:26:4\nactual:     '(3 -5 2 3 3 9 0 123 1 -10)\nexpected:   '(5 3 2 3 3 9 123 1)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpscvej1xa.rkt:27:4\nactual:     -1\nexpected:   '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpscvej1xa.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf44iyqvy.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf44iyqvy.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf44iyqvy.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf44iyqvy.rkt:29:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (list)]\n    [(positive? (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(positive? (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp_na3zh2.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp_na3zh2.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp_na3zh2.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp_na3zh2.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcyyvxase.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcyyvxase.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcyyvxase.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcyyvxase.rkt:29:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (list)]\n    [(positive? (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (if (null? l)\n    (list)\n    (if (negative? l)\n      (get_positive (- l))\n      (cons l (get_positive (- l))))))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa_r_3852.rkt:25:4\n\nnegative?: contract violation\n  expected: real?\n  given: '(-1 -2 4 5 6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa_r_3852.rkt:26:4\n\nnegative?: contract violation\n  expected: real?\n  given: '(5 3 -5 2 3 3 9 0 123 1 -10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa_r_3852.rkt:27:4\n\nnegative?: contract violation\n  expected: real?\n  given: '(-1 -2)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (if (null? l)\n      (list)\n      (if (negative? (car l))\n          (cdr (get_positive (cdr l)))\n          (cons (car l) (get_positive (cdr l))))))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk8csn83t.rkt:25:4\nactual:     '(6)\nexpected:   '(4 5 6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk8csn83t.rkt:26:4\n\ncdr: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk8csn83t.rkt:27:4\n\ncdr: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (list)]\n    [(positive? (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcyyvxase.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcyyvxase.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcyyvxase.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcyyvxase.rkt:29:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcyyvxase.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcyyvxase.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcyyvxase.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcyyvxase.rkt:29:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  ))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbjbkbsmm.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbjbkbsmm.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbjbkbsmm.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbjbkbsmm.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmabg3fon.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmabg3fon.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmabg3fon.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmabg3fon.rkt:29:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpohcpgpv1.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpohcpgpv1.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpohcpgpv1.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpohcpgpv1.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -2)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -5 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcr3daqip.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcr3daqip.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcr3daqip.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcr3daqip.rkt:29:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cdr l)]\n    [else (car l)]\n  ))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt77whgmj.rkt:25:4\nactual:     -1\nexpected:   '(4 5 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt77whgmj.rkt:26:4\nactual:     '(3 -5 2 3 3 9 0 123 1 -10)\nexpected:   '(5 3 2 3 3 9 123 1)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt77whgmj.rkt:27:4\nactual:     -1\nexpected:   '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt77whgmj.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cdr l)]\n    [else (car l)]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwm0_ts_c.rkt:24:4\nactual:     -1\nexpected:   '(4 5 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwm0_ts_c.rkt:25:4\nactual:     '(3 -5 2 3 3 9 0 123 1 -10)\nexpected:   '(5 3 2 3 3 9 123 1)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwm0_ts_c.rkt:26:4\nactual:     -1\nexpected:   '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwm0_ts_c.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcyyvxase.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcyyvxase.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcyyvxase.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcyyvxase.rkt:29:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpohcpgpv1.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpohcpgpv1.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpohcpgpv1.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpohcpgpv1.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (if (null? l)\n    (list)\n    (if (negative? l)\n      (get_positive (- l))\n      (cons l (get_positive (- l))))))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa_r_3852.rkt:25:4\n\nnegative?: contract violation\n  expected: real?\n  given: '(-1 -2 4 5 6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa_r_3852.rkt:26:4\n\nnegative?: contract violation\n  expected: real?\n  given: '(5 3 -5 2 3 3 9 0 123 1 -10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa_r_3852.rkt:27:4\n\nnegative?: contract violation\n  expected: real?\n  given: '(-1 -2)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cdr l)]\n    [else (car l)]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwm0_ts_c.rkt:24:4\nactual:     -1\nexpected:   '(4 5 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwm0_ts_c.rkt:25:4\nactual:     '(3 -5 2 3 3 9 0 123 1 -10)\nexpected:   '(5 3 2 3 3 9 123 1)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwm0_ts_c.rkt:26:4\nactual:     -1\nexpected:   '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwm0_ts_c.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (list)]\n    [(positive? (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (if (null? l)\n    l\n    (if (negative? (car l))\n      (cdr l)\n      (cons (car l) (get_positive (cdr l))))))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpejnz1wyy.rkt:25:4\nactual:     '(-2 4 5 6)\nexpected:   '(4 5 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpejnz1wyy.rkt:26:4\nactual:     '(5 3 2 3 3 9 0 123 1 -10)\nexpected:   '(5 3 2 3 3 9 123 1)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpejnz1wyy.rkt:27:4\nactual:     '(-2)\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  ))\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp37qfd1m2.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp37qfd1m2.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp37qfd1m2.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp37qfd1m2.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(positive? (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpaifpp4vi.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpaifpp4vi.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpaifpp4vi.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpaifpp4vi.rkt:29:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (list)]\n    [(positive? (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (if (null? l)\n    (list)\n    (if (negative? (car l))\n      (cdr (get_positive (cdr l)))\n      (cons (car l) (get_positive (cdr l))))))\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_a0dxdal.rkt:25:4\nactual:     '(6)\nexpected:   '(4 5 6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_a0dxdal.rkt:26:4\n\ncdr: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_a0dxdal.rkt:27:4\n\ncdr: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (if (null? l)\n    (list)\n    (if (negative? l)\n      (get_positive (- l))\n      (cons l (get_positive (- l))))))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa_r_3852.rkt:25:4\n\nnegative?: contract violation\n  expected: real?\n  given: '(-1 -2 4 5 6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa_r_3852.rkt:26:4\n\nnegative?: contract violation\n  expected: real?\n  given: '(5 3 -5 2 3 3 9 0 123 1 -10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa_r_3852.rkt:27:4\n\nnegative?: contract violation\n  expected: real?\n  given: '(-1 -2)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (if (null? l)\n    (list)\n    (if (negative? (car l))\n      (cdr (get_positive (cdr l)))\n      (cons (car l) (get_positive (cdr l))))))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -2)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -5 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph98omvrs.rkt:25:4\nactual:     '(6)\nexpected:   '(4 5 6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph98omvrs.rkt:26:4\n\ncdr: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph98omvrs.rkt:27:4\n\ncdr: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (list)]\n    [(number? (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293040,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfbieypy4.rkt:26:4\nactual:     '(-1 -2 4 5 6)\nexpected:   '(4 5 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfbieypy4.rkt:27:4\nactual:     '(5 3 -5 2 3 3 9 0 123 1 -10)\nexpected:   '(5 3 2 3 3 9 123 1)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfbieypy4.rkt:28:4\nactual:     '(-1 -2)\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293040,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5u5mal6z.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5u5mal6z.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5u5mal6z.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5u5mal6z.rkt:29:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(positive? (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293040,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgz8fjpgd.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgz8fjpgd.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgz8fjpgd.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgz8fjpgd.rkt:29:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmabg3fon.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmabg3fon.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmabg3fon.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmabg3fon.rkt:29:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -2)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -5 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293040,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbattv8vq.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbattv8vq.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbattv8vq.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbattv8vq.rkt:29:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (list)]\n    [(number? (car l)) (car l)]\n    [else (get_positive (cdr l))]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293040,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf_5gbobn.rkt:24:4\nactual:     -1\nexpected:   '(4 5 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf_5gbobn.rkt:25:4\nactual:     5\nexpected:   '(5 3 2 3 3 9 123 1)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf_5gbobn.rkt:26:4\nactual:     -1\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  ))\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp37qfd1m2.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp37qfd1m2.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp37qfd1m2.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp37qfd1m2.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (if (null? l)\n    (list)\n    (if (negative? l)\n      (get_positive (- l))\n      (cons l (get_positive (- l))))))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa_r_3852.rkt:25:4\n\nnegative?: contract violation\n  expected: real?\n  given: '(-1 -2 4 5 6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa_r_3852.rkt:26:4\n\nnegative?: contract violation\n  expected: real?\n  given: '(5 3 -5 2 3 3 9 0 123 1 -10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa_r_3852.rkt:27:4\n\nnegative?: contract violation\n  expected: real?\n  given: '(-1 -2)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (if (null? l)\n    (list)\n    (if (negative? (car l))\n      (cdr (get_positive (cdr l)))\n      (cons (car l) (get_positive (cdr l))))))\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_a0dxdal.rkt:25:4\nactual:     '(6)\nexpected:   '(4 5 6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_a0dxdal.rkt:26:4\n\ncdr: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_a0dxdal.rkt:27:4\n\ncdr: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (list)]\n    [(positive? (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (if (null? l)\n      (list)\n      (if (negative? (car l))\n          (cdr (get_positive (cdr l)))\n          (cons (car l) (get_positive (cdr l))))))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk8csn83t.rkt:25:4\nactual:     '(6)\nexpected:   '(4 5 6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk8csn83t.rkt:26:4\n\ncdr: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk8csn83t.rkt:27:4\n\ncdr: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpohcpgpv1.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpohcpgpv1.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpohcpgpv1.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpohcpgpv1.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (list)]\n    [(positive? (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (list)]\n    [(positive? (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -2)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -5 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293040,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cdr l)]\n    [else (car l)]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293040,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkdjao4u0.rkt:24:4\nactual:     -1\nexpected:   '(4 5 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkdjao4u0.rkt:25:4\nactual:     '(3 -5 2 3 3 9 0 123 1 -10)\nexpected:   '(5 3 2 3 3 9 123 1)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkdjao4u0.rkt:26:4\nactual:     -1\nexpected:   '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkdjao4u0.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (if (null? l)\n    (list)\n    (if (negative? (car l))\n      (cdr (get_positive (cdr l)))\n      (cons (car l) (get_positive (cdr l))))))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293040,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2gy4t805.rkt:25:4\nactual:     '(6)\nexpected:   '(4 5 6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2gy4t805.rkt:26:4\n\ncdr: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2gy4t805.rkt:27:4\n\ncdr: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcyyvxase.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcyyvxase.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcyyvxase.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcyyvxase.rkt:29:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (list)]\n    [(positive? (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (list)]\n    [(positive? (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcyyvxase.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcyyvxase.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcyyvxase.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcyyvxase.rkt:29:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only positive numbers in the list, but return the\n;; original list if there are no positive numbers.\n;; >>> (get_positive_or_self (list -1 2 -4 5 6))\n;; (list -1 2 -4 5 6)\n;; >>> (get_positive_or_self (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 -5 2 -3 3 9 0 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293040,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqny3aotq.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqny3aotq.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqny3aotq.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqny3aotq.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (list)]\n    [(positive? (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  ))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293040,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (if (null? l)\n    (list)\n    (if (negative? l)\n      (get_positive (- l))\n      (cons l (get_positive (- l))))))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa_r_3852.rkt:25:4\n\nnegative?: contract violation\n  expected: real?\n  given: '(-1 -2 4 5 6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa_r_3852.rkt:26:4\n\nnegative?: contract violation\n  expected: real?\n  given: '(5 3 -5 2 3 3 9 0 123 1 -10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa_r_3852.rkt:27:4\n\nnegative?: contract violation\n  expected: real?\n  given: '(-1 -2)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (list)]\n    [(positive? (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cdr l)]\n    [else (car l)]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293040,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkdjao4u0.rkt:24:4\nactual:     -1\nexpected:   '(4 5 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkdjao4u0.rkt:25:4\nactual:     '(3 -5 2 3 3 9 0 123 1 -10)\nexpected:   '(5 3 2 3 3 9 123 1)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkdjao4u0.rkt:26:4\nactual:     -1\nexpected:   '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkdjao4u0.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (if (null? l)\n      (list)\n      (if (negative? (car l))\n          (cdr (get_positive (cdr l)))\n          (cons (car l) (get_positive (cdr l))))))\n\n;; Return only positive numbers in the list, and return a list of\n;; the original order.\n;; >>> (get_positive_ordered (list -1 2 -4 5 6))\n;; (list -1 2 5 6)\n;; >>> (get_positive_ordered (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1 -10)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph09ele08.rkt:26:4\nactual:     '(6)\nexpected:   '(4 5 6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph09ele08.rkt:27:4\n\ncdr: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph09ele08.rkt:28:4\n\ncdr: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293040,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5u5mal6z.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5u5mal6z.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5u5mal6z.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5u5mal6z.rkt:29:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cdr l)]\n    [else (car l)]\n  ))\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpscvej1xa.rkt:25:4\nactual:     -1\nexpected:   '(4 5 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpscvej1xa.rkt:26:4\nactual:     '(3 -5 2 3 3 9 0 123 1 -10)\nexpected:   '(5 3 2 3 3 9 123 1)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpscvej1xa.rkt:27:4\nactual:     -1\nexpected:   '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpscvej1xa.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (if (null? l)\n    (list)\n    (let ((result (list)))\n      (for-each (lambda (x)\n                  (if (positive? x)\n                    (result '() (cons x result))\n                    (result '() (cons x result))))\n        l)))\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -5 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293040,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxq075thm.rkt:29:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxq075thm.rkt:30:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxq075thm.rkt:31:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293040,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9h_jchh9.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9h_jchh9.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9h_jchh9.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9h_jchh9.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (if (null? l)\n    l\n    (if (negative? (car l))\n      (cdr (get_positive (cdr l)))\n      (cons (car l) (get_positive (cdr l))))))\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsqqz7y83.rkt:25:4\nactual:     '(6)\nexpected:   '(4 5 6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsqqz7y83.rkt:26:4\n\ncdr: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsqqz7y83.rkt:27:4\n\ncdr: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (list)]\n    [(positive? (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -2)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -5 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (list)]\n    [(null? (car l)) (get_positive (cdr l))]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpohcpgpv1.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpohcpgpv1.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpohcpgpv1.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpohcpgpv1.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293040,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9h_jchh9.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9h_jchh9.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9h_jchh9.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9h_jchh9.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (list)]\n    [(positive? (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (if (null? l)\n    (list)\n    (if (negative? (car l))\n      (cdr (get_positive (cdr l)))\n      (cons (car l) (get_positive (cdr l))))))\n\n;; Return only positive numbers in the list, but not in the given list.\n;; >>> (get_positive_not_in (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive_not_in (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxsifrbw4.rkt:25:4\nactual:     '(6)\nexpected:   '(4 5 6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxsifrbw4.rkt:26:4\n\ncdr: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxsifrbw4.rkt:27:4\n\ncdr: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu__q49ov.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu__q49ov.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu__q49ov.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu__q49ov.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ngdtogg.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ngdtogg.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ngdtogg.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ngdtogg.rkt:29:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmabg3fon.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmabg3fon.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmabg3fon.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmabg3fon.rkt:29:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqt_s5gdk.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqt_s5gdk.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqt_s5gdk.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqt_s5gdk.rkt:29:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  ))\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp37qfd1m2.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp37qfd1m2.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp37qfd1m2.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp37qfd1m2.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (if (null? l)\n    (list)\n    (if (negative? (car l))\n      (cdr (get_positive (cdr l)))\n      (cons (car l) (get_positive (cdr l))))))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -2)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -5 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph98omvrs.rkt:25:4\nactual:     '(6)\nexpected:   '(4 5 6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph98omvrs.rkt:26:4\n\ncdr: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph98omvrs.rkt:27:4\n\ncdr: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (if (null? l)\n    (list)\n    (if (negative? (car l))\n      (cdr (get_positive (cdr l)))\n      (cons (car l) (get_positive (cdr l))))))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293040,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2gy4t805.rkt:25:4\nactual:     '(6)\nexpected:   '(4 5 6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2gy4t805.rkt:26:4\n\ncdr: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2gy4t805.rkt:27:4\n\ncdr: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -5 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprudsk0dw.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprudsk0dw.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprudsk0dw.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprudsk0dw.rkt:29:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (list)]\n    [(positive? (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (list)]\n    [(positive? (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293040,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5u5mal6z.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5u5mal6z.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5u5mal6z.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5u5mal6z.rkt:29:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqt_s5gdk.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqt_s5gdk.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqt_s5gdk.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqt_s5gdk.rkt:29:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (list)]\n    [(positive? (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -2)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -5 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcyyvxase.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcyyvxase.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcyyvxase.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcyyvxase.rkt:29:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cdr l)]\n    [else (car l)]\n  ))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt77whgmj.rkt:25:4\nactual:     -1\nexpected:   '(4 5 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt77whgmj.rkt:26:4\nactual:     '(3 -5 2 3 3 9 0 123 1 -10)\nexpected:   '(5 3 2 3 3 9 123 1)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt77whgmj.rkt:27:4\nactual:     -1\nexpected:   '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt77whgmj.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(>= 0 (car l)) (cdr l)]\n    [else (get_positive (cdr l))]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo4td02f1.rkt:24:4\nactual:     '(-2 4 5 6)\nexpected:   '(4 5 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo4td02f1.rkt:25:4\nactual:     '(2 3 3 9 0 123 1 -10)\nexpected:   '(5 3 2 3 3 9 123 1)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo4td02f1.rkt:26:4\nactual:     '(-2)\nexpected:   '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo4td02f1.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  ))\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp37qfd1m2.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp37qfd1m2.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp37qfd1m2.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp37qfd1m2.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (car l)]\n    [else (get_positive (cdr l))]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpckyl3cp7.rkt:24:4\nactual:     4\nexpected:   '(4 5 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpckyl3cp7.rkt:25:4\nactual:     5\nexpected:   '(5 3 2 3 3 9 123 1)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpckyl3cp7.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpckyl3cp7.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (if (null? l)\n    (list)\n    (if (negative? (car l))\n      (cdr (get_positive (cdr l)))\n      (cons (car l) (get_positive (cdr l))))))\n\n;; Return only positive numbers in the list, but return the\n;; original list if there are no positive numbers.\n;; >>> (get_positive_or_original (list -1 2 -4 5 6))\n;; (list)\n;; >>> (get_positive_or_original (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 0 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5e18hihp.rkt:26:4\nactual:     '(6)\nexpected:   '(4 5 6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5e18hihp.rkt:27:4\n\ncdr: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5e18hihp.rkt:28:4\n\ncdr: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpohcpgpv1.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpohcpgpv1.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpohcpgpv1.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpohcpgpv1.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (list)]\n    [(positive? (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -2)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -5 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293040,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbattv8vq.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbattv8vq.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbattv8vq.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbattv8vq.rkt:29:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(>= (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpubzx40pk.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpubzx40pk.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpubzx40pk.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpubzx40pk.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (if (null? l)\n    (list)\n    (if (negative? (car l))\n      (cdr (get_positive (cdr l)))\n      (cons (car l) (get_positive (cdr l))))))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293040,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2gy4t805.rkt:25:4\nactual:     '(6)\nexpected:   '(4 5 6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2gy4t805.rkt:26:4\n\ncdr: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2gy4t805.rkt:27:4\n\ncdr: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cdr l)]\n    [else (car l)]\n  ))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt77whgmj.rkt:25:4\nactual:     -1\nexpected:   '(4 5 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt77whgmj.rkt:26:4\nactual:     '(3 -5 2 3 3 9 0 123 1 -10)\nexpected:   '(5 3 2 3 3 9 123 1)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt77whgmj.rkt:27:4\nactual:     -1\nexpected:   '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt77whgmj.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ngdtogg.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ngdtogg.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ngdtogg.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ngdtogg.rkt:29:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(negative? (car l)) (cdr l)]\n    [else (car l)]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkbo9igvb.rkt:24:4\nactual:     '(-2 4 5 6)\nexpected:   '(4 5 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkbo9igvb.rkt:25:4\nactual:     5\nexpected:   '(5 3 2 3 3 9 123 1)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkbo9igvb.rkt:26:4\nactual:     '(-2)\nexpected:   '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkbo9igvb.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (list)]\n    [(positive? (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (list)]\n    [(< 0 (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (list)]\n    [(positive? (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqt_s5gdk.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqt_s5gdk.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqt_s5gdk.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqt_s5gdk.rkt:29:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(positive? (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp_na3zh2.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp_na3zh2.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp_na3zh2.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp_na3zh2.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmabg3fon.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmabg3fon.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmabg3fon.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmabg3fon.rkt:29:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (list)]\n    [(number? (car l)) (car l)]\n    [else (get_positive (cdr l))]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293040,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf_5gbobn.rkt:24:4\nactual:     -1\nexpected:   '(4 5 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf_5gbobn.rkt:25:4\nactual:     5\nexpected:   '(5 3 2 3 3 9 123 1)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf_5gbobn.rkt:26:4\nactual:     -1\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (list)]\n    [(number? (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -2)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -5 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsumqsot0.rkt:26:4\nactual:     '(-1 -2 4 5 6)\nexpected:   '(4 5 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsumqsot0.rkt:27:4\nactual:     '(5 3 -5 2 3 3 9 0 123 1 -10)\nexpected:   '(5 3 2 3 3 9 123 1)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsumqsot0.rkt:28:4\nactual:     '(-1 -2)\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (list)]\n    [(positive? (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqt_s5gdk.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqt_s5gdk.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqt_s5gdk.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqt_s5gdk.rkt:29:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (if (null? l)\n    l\n    (if (> (car l) 0)\n      (cons (car l) (get_positive (cdr l)))\n      (get_positive (cdr l))))\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (list)]\n    [(positive? (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (list)]\n    [(positive? (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (if (null? l)\n    l\n    (if (negative? (car l))\n      (cdr (get_positive (cdr l)))\n      (cons (car l) (get_positive (cdr l))))))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3mws9do6.rkt:25:4\nactual:     '(6)\nexpected:   '(4 5 6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3mws9do6.rkt:26:4\n\ncdr: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3mws9do6.rkt:27:4\n\ncdr: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqt_s5gdk.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqt_s5gdk.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqt_s5gdk.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqt_s5gdk.rkt:29:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpohcpgpv1.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpohcpgpv1.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpohcpgpv1.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpohcpgpv1.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (list)]\n    [(positive? (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -2)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -5 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293040,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (list)]\n    [(positive? (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (list)]\n    [(number? (car l)) (car l)]\n    [else (get_positive (cdr l))]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293040,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf_5gbobn.rkt:24:4\nactual:     -1\nexpected:   '(4 5 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf_5gbobn.rkt:25:4\nactual:     5\nexpected:   '(5 3 2 3 3 9 123 1)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf_5gbobn.rkt:26:4\nactual:     -1\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (list)]\n    [(positive? (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmabg3fon.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmabg3fon.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmabg3fon.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmabg3fon.rkt:29:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpohcpgpv1.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpohcpgpv1.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpohcpgpv1.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpohcpgpv1.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  ))\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp37qfd1m2.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp37qfd1m2.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp37qfd1m2.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp37qfd1m2.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqt_s5gdk.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqt_s5gdk.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqt_s5gdk.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqt_s5gdk.rkt:29:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (if (null? l)\n    (list)\n    (if (negative? (car l))\n      (cdr (get_positive (cdr l)))\n      (cons (car l) (get_positive (cdr l))))))\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_a0dxdal.rkt:25:4\nactual:     '(6)\nexpected:   '(4 5 6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_a0dxdal.rkt:26:4\n\ncdr: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_a0dxdal.rkt:27:4\n\ncdr: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(negative? (car l)) (cdr l)]\n    [else (car l)]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkbo9igvb.rkt:24:4\nactual:     '(-2 4 5 6)\nexpected:   '(4 5 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkbo9igvb.rkt:25:4\nactual:     5\nexpected:   '(5 3 2 3 3 9 123 1)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkbo9igvb.rkt:26:4\nactual:     '(-2)\nexpected:   '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkbo9igvb.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmabg3fon.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmabg3fon.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmabg3fon.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmabg3fon.rkt:29:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cdr l)]\n    [else (car l)]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293040,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkdjao4u0.rkt:24:4\nactual:     -1\nexpected:   '(4 5 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkdjao4u0.rkt:25:4\nactual:     '(3 -5 2 3 3 9 0 123 1 -10)\nexpected:   '(5 3 2 3 3 9 123 1)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkdjao4u0.rkt:26:4\nactual:     -1\nexpected:   '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkdjao4u0.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cdr l)]\n    [else (car l)]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293040,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkdjao4u0.rkt:24:4\nactual:     -1\nexpected:   '(4 5 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkdjao4u0.rkt:25:4\nactual:     '(3 -5 2 3 3 9 0 123 1 -10)\nexpected:   '(5 3 2 3 3 9 123 1)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkdjao4u0.rkt:26:4\nactual:     -1\nexpected:   '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkdjao4u0.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293040,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5u5mal6z.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5u5mal6z.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5u5mal6z.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5u5mal6z.rkt:29:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (if (null? l)\n    (list)\n    (if (negative? (car l))\n      (cdr (get_positive (cdr l)))\n      (cons (car l) (get_positive (cdr l))))))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293040,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2gy4t805.rkt:25:4\nactual:     '(6)\nexpected:   '(4 5 6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2gy4t805.rkt:26:4\n\ncdr: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2gy4t805.rkt:27:4\n\ncdr: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (list)]\n    [(positive? (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  ))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(positive? (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293040,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgz8fjpgd.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgz8fjpgd.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgz8fjpgd.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgz8fjpgd.rkt:29:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  ))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpflsvjnlo.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpflsvjnlo.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpflsvjnlo.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpflsvjnlo.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293040,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9h_jchh9.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9h_jchh9.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9h_jchh9.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9h_jchh9.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -2)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxw36g443.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxw36g443.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxw36g443.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxw36g443.rkt:29:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (if (null? l)\n    (list)\n    (if (negative? (car l))\n      (cdr (get_positive (cdr l)))\n      (cons (car l) (get_positive (cdr l))))))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293040,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2gy4t805.rkt:25:4\nactual:     '(6)\nexpected:   '(4 5 6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2gy4t805.rkt:26:4\n\ncdr: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2gy4t805.rkt:27:4\n\ncdr: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (list)]\n    [(number? (car l)) (car l)]\n    [else (get_positive (cdr l))]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5o7stm99.rkt:24:4\nactual:     -1\nexpected:   '(4 5 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5o7stm99.rkt:25:4\nactual:     5\nexpected:   '(5 3 2 3 3 9 123 1)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5o7stm99.rkt:26:4\nactual:     -1\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(negative? (car l)) (cdr l)]\n    [else (car l)]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkbo9igvb.rkt:24:4\nactual:     '(-2 4 5 6)\nexpected:   '(4 5 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkbo9igvb.rkt:25:4\nactual:     5\nexpected:   '(5 3 2 3 3 9 123 1)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkbo9igvb.rkt:26:4\nactual:     '(-2)\nexpected:   '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkbo9igvb.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293040,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9h_jchh9.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9h_jchh9.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9h_jchh9.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9h_jchh9.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(positive? (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpaifpp4vi.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpaifpp4vi.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpaifpp4vi.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpaifpp4vi.rkt:29:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  ))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbjbkbsmm.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbjbkbsmm.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbjbkbsmm.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbjbkbsmm.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cdr l)]\n    [else (car l)]\n  ))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt77whgmj.rkt:25:4\nactual:     -1\nexpected:   '(4 5 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt77whgmj.rkt:26:4\nactual:     '(3 -5 2 3 3 9 0 123 1 -10)\nexpected:   '(5 3 2 3 3 9 123 1)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt77whgmj.rkt:27:4\nactual:     -1\nexpected:   '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt77whgmj.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (list)]\n    [(positive? (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (list)]\n    [(positive? (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmabg3fon.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmabg3fon.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmabg3fon.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmabg3fon.rkt:29:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (if (null? l)\n    (list)\n    (if (negative? (car l))\n      (cdr (get_positive (cdr l)))\n      (cons (car l) (get_positive (cdr l))))))\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_a0dxdal.rkt:25:4\nactual:     '(6)\nexpected:   '(4 5 6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_a0dxdal.rkt:26:4\n\ncdr: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_a0dxdal.rkt:27:4\n\ncdr: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (list)]\n    [(positive? (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (if (null? l)\n    (list)\n    (if (negative? (car l))\n      (cdr (get_positive (cdr l)))\n      (cons (car l) (get_positive (cdr l))))))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293040,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2gy4t805.rkt:25:4\nactual:     '(6)\nexpected:   '(4 5 6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2gy4t805.rkt:26:4\n\ncdr: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2gy4t805.rkt:27:4\n\ncdr: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpohcpgpv1.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpohcpgpv1.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpohcpgpv1.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpohcpgpv1.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (if (null? l)\n    (list)\n    (let ((result (list)))\n      (for-each (lambda (x)\n                  (if (positive? x)\n                    (result (cons x result))\n                    (result (cons x result))))\n        l)))\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ehxlgyp.rkt:29:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ehxlgyp.rkt:30:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ehxlgyp.rkt:31:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (list)]\n    [(positive? (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmabg3fon.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmabg3fon.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmabg3fon.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmabg3fon.rkt:29:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(positive? (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoxxr7rat.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoxxr7rat.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoxxr7rat.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoxxr7rat.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(positive? (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpaifpp4vi.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpaifpp4vi.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpaifpp4vi.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpaifpp4vi.rkt:29:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (list)]\n    [(positive? (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (list)]\n    [(positive? (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -2)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -5 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293040,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9h_jchh9.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9h_jchh9.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9h_jchh9.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9h_jchh9.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (list)]\n    [(positive? (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4v9tyxiv.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmabg3fon.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmabg3fon.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmabg3fon.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmabg3fon.rkt:29:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(< 0 (car l)) (cdr l)]\n    [else (car l)]\n  ))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt77whgmj.rkt:25:4\nactual:     -1\nexpected:   '(4 5 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt77whgmj.rkt:26:4\nactual:     '(3 -5 2 3 3 9 0 123 1 -10)\nexpected:   '(5 3 2 3 3 9 123 1)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt77whgmj.rkt:27:4\nactual:     -1\nexpected:   '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt77whgmj.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (l)]\n    [(> (car l) 0) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]))\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -5 -6)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtm19ngf.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n    [(null? l) (list)]\n    [(positive? (car l)) (cons (car l) (get_positive (cdr l)))]\n    [else (get_positive (cdr l))]\n  )\n)\n\n;; Return only negative numbers in the list.\n;; >>> (get_negative (list -1 2 -4 5 6))\n;; (list -4 -2)\n;; >>> (get_negative (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list -10 -3 -5 -3 -3 -9 -123 -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}