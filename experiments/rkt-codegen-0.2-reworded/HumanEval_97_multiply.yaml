name: HumanEval_97_multiply
language: rkt
prompt: "#lang racket\n\n;; Complete the function that takes two integers and returns\
  \ \n;; the product of their unit digits.\n;; Assume the input is always valid.\n\
  ;; Examples:\n;; >>> (multiply 148 412)\n;; 16\n;; >>> (multiply 19 28)\n;; 72\n\
  ;; >>> (multiply 2020 1851)\n;; 0\n;; >>> (multiply 14 -15)\n;; 20\n(define (multiply\
  \ a b)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate multiply))\n\
  \    (check-equal? (candidate 148 412) 16)\n    (check-equal? (candidate 19 28)\
  \ 72)\n    (check-equal? (candidate 2020 1851) 0)\n    (check-equal? (candidate\
  \ 14 -15) 20)\n    (check-equal? (candidate 76 67) 42)\n    (check-equal? (candidate\
  \ 17 27) 49)\n    (check-equal? (candidate 0 1) 0)\n    (check-equal? (candidate\
  \ 0 0) 0)\n))\n\n(test-humaneval)"
completions: ["  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative?\
    \ a)\n        (multiply (- a) b)\n        (multiply a (- b)))))\n)\n", "  (if\
    \ (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n    \
    \    (multiply (- a) b)\n        (if (negative? b)\n          (multiply a (- b))\n\
    \          (multiply (* 10 a) (* 10 b)))))\n  )\n)\n", "  (if (zero? a)\n    0\n\
    \    (if (zero? b)\n      0\n      (if (negative? a)\n        (multiply (- a)\
    \ b)\n        (multiply a (- b)))))\n)\n", "  (if (zero? a)\n    0\n    (if (zero?\
    \ b)\n      0\n      (if (negative? a)\n        (multiply (- a) b)\n        (multiply\
    \ a (- b)))))\n)\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n   \
    \   (if (negative? a)\n        (multiply (- a) b)\n        (multiply a (- b)))))\n\
    )\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative?\
    \ a)\n        (multiply (- a) b)\n        (if (negative? b)\n          (multiply\
    \ a (- b))\n          (multiply (abs a) (abs b)))))))\n", "  (if (zero? a)\n \
    \   0\n    (if (zero? b)\n      0\n      (if (negative? a)\n        (multiply\
    \ (- a) b)\n        (multiply a (- b)))))\n)\n\n;; Complete the function that\
    \ takes two strings and returns \n;; the product of their unit digits.\n;; Assume\
    \ the input is always valid.\n;; Examples:\n;; >>> (multiply \"14\" \"15\")\n\
    ;; 20\n;; >>> (multiply \"19\" \"28\")\n;; 72\n;; >>> (multiply \"2020\" \"1851\"\
    )\n;; 0\n;; >>> (multiply \"14\" \"-15\")\n;; 20", "  (if (zero? a)\n    0\n \
    \   (if (zero? b)\n      0\n      (if (negative? a)\n        (negate (multiply\
    \ (negate a) b))\n        (if (negative? b)\n          (negate (multiply a (negate\
    \ b)))\n          (multiply (multiply (quotient a 10) (quotient b 10))\n     \
    \        (modulo a 10)\n             (modulo b 10)))))))\n", "  (if (zero? a)\n\
    \    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n        (multiply\
    \ (- a) b)\n        (multiply a (- b)))))\n)\n", "  (if (zero? a)\n    0\n   \
    \ (if (zero? b)\n      0\n      (if (negative? a)\n        (multiply (- a) b)\n\
    \        (multiply a (- b)))))\n)\n", "  (if (zero? a)\n    0\n    (if (zero?\
    \ b)\n      0\n      (if (negative? a)\n        (multiply (- a) b)\n        (multiply\
    \ a (- b)))))\n)\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n   \
    \   (if (negative? a)\n        (multiply (- a) b)\n        (multiply a (- b)))))\n\
    )\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative?\
    \ a)\n        (multiply (- a) b)\n        (if (negative? b)\n          (multiply\
    \ (- b) a)\n          (multiply a b))))))\n\n;; >>> (multiply 148 412)\n;; 16\n\
    ;; >>> (multiply 19 28)\n;; 72\n;; >>> (multiply 2020 1851)\n;; 0\n;; >>> (multiply\
    \ 14 -15)\n;; 20\n\n;; >>> (multiply 14 -15)\n;; 20\n\n;; >>> (multiply -14 -15)\n\
    ;; -20\n\n;; >>> (multiply -14 -15)\n;; -20\n\n;; >>> (multiply -14 -15)\n;; -20\n\
    \n;; >>> (multiply -14 -15)\n;; -20\n\n;; >>> (multiply -14 -15)\n;; -20\n\n;;\
    \ >>> (multiply -14 -15)\n;; -20\n\n;; >>> (multiply -14 -15)\n;; -20\n\n;; >>>\
    \ (multiply -14 -15)\n;; -20\n\n;; >>> (multiply -14 -15)\n;; -20\n\n;; >>> (multiply\
    \ -14 -15)\n;; -20\n\n;; >>> (multiply -14 -15)\n;; -20\n\n;; >>> (multiply -14\
    \ -15)\n;; -20\n\n;; >>> (multiply -14 -15)\n;; -20\n\n;; >>> (multiply -14 -15)\n\
    ;; -20\n\n;; >>> (multiply -14 -15)\n;; -20\n\n;; >>> (multiply -14 -15)\n;; -20\n\
    \n;; >>> (multiply -14 -15)\n;; -20\n\n;; >>> (multiply -14 -15)\n;; -20\n\n;;\
    \ >>> (multiply -14 -15)\n;; -20\n\n;; >>> (multiply -14 -15)\n;; -20\n\n;; >>>\
    \ (multiply -14 -15)\n;; -20\n\n;; >>> (multiply -14 -15", "  (let ((a-digits\
    \ (string->list a))\n        (b-digits (string->list b)))\n    (if (null? a-digits)\n\
    \      (string->number 0)\n    (if (null? b-digits)\n      (string->number 0)\n\
    \    (let ((a-digit (car a-digits))\n          (b-digit (car b-digits)))\n   \
    \   (string->number (string->number a-digit b-digit))))))\n", "  (if (zero? a)\n\
    \    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n        (multiply\
    \ (- a) b)\n        (multiply a (- b)))))\n)\n", "  (let ((a-digits (string->list\
    \ a))\n        (b-digits (string->list b)))\n    (reduce (lambda (a b)\n     \
    \         (if (null? a)\n                  b\n                  (if (null? b)\n\
    \                      a\n                      (let ((a-digit (car a))\n    \
    \                         (b-digit (car b)))\n                        (cons (multiply\
    \ a-digit b-digit)\n                             (multiply (cdr a) (cdr b))))))))))\n",
  "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n \
    \       (multiply (- a) b)\n        (multiply a (- b)))))\n)\n", "  (if (zero?\
    \ a)\n    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n        (negate\
    \ (multiply (- a) b))\n        (if (negative? b)\n          (negate (multiply\
    \ a (- b)))\n          (multiply (multiply (quotient a 10) (quotient b 10))\n\
    \             (remainder a 10)\n             (remainder b 10)))))))\n", "  (if\
    \ (= a 0)\n    0\n    (if (= b 0)\n      1\n      (+ (* (/ a 10) (* (/ b 10)))\
    \ (* (/ a b))))))\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n  \
    \    (if (negative? a)\n        (multiply (- a) b)\n        (multiply a (- b)))))\n\
    )\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative?\
    \ a)\n        (multiply (- a) b)\n        (multiply a (- b)))))\n)\n", "  (if\
    \ (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n    \
    \    (multiply (- a) b)\n        (multiply a (- b)))))\n)\n", "  (if (zero? a)\n\
    \    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n        (multiply\
    \ (- a) b)\n        (multiply a (- b)))))\n)\n", "  (if (zero? a)\n    0\n   \
    \ (if (zero? b)\n      0\n      (if (negative? a)\n        (multiply (- a) b)\n\
    \        (multiply a (- b)))))\n)\n\n;; Complete the function that takes two strings\
    \ and returns \n;; the number of times that the first string occurs in the second.\n\
    ;; Assume the input is always valid.\n;; Examples:\n;; >>> (count \"cat\" \"cat\"\
    )\n;; 1\n;; >>> (count \"cat\" \"dog\")\n;; 0\n;; >>> (count \"cat\" \"cat cat\"\
    )\n;; 2\n;; >>> (count \"cat\" \"cat cat cat\")\n;; 3\n;; >>> (count \"cat\" \"\
    cat cat cat cat\")\n;; 4\n;; >>> (count \"cat\" \"cat cat cat cat cat\")\n;; 5\n\
    ;; >>> (count \"cat\" \"cat cat cat cat cat cat\")\n;; 6\n;; >>> (count \"cat\"\
    \ \"cat cat cat cat cat cat cat\")\n;; 7\n;; >>> (count \"cat\" \"cat cat cat\
    \ cat cat cat cat cat\")\n;; 8\n;; >>> (count \"cat\" \"cat cat cat cat cat cat\
    \ cat cat cat\")\n;; 9\n;; >>> (count \"cat\" \"cat cat cat cat cat cat cat cat\
    \ cat cat\")\n;; 10\n;; >>> (count \"cat\" \"cat cat cat cat cat cat cat cat cat\
    \ cat cat\")\n;; 11\n;; >>> (count \"cat\" \"cat cat cat cat cat cat cat cat cat\
    \ cat cat cat\")\n;; 12\n;; >>> (count \"cat\" \"cat cat cat cat cat cat cat cat\
    \ cat cat cat cat cat\")\n;; 13\n;; >>> (count \"cat\" \"cat cat cat cat cat cat\
    \ cat cat cat cat cat cat cat cat\")\n;; 14\n;; >>> (count \"cat\" \"cat cat cat\
    \ cat cat cat cat cat cat cat cat cat cat cat cat\")\n;; 15\n;; >>> (count \"\
    cat\" \"cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat\")\n;;\
    \ 16\n;; >>> (count \"cat\" \"cat cat cat cat cat cat cat cat cat cat cat cat\
    \ cat cat cat cat cat\")\n;; 17\n;; >>> (count \"cat\" \"cat cat cat cat cat cat\
    \ cat cat cat cat cat cat cat cat cat cat cat", "  (if (zero? a)\n    0\n    (if\
    \ (zero? b)\n      1\n      (if (negative? a)\n        (multiply (- a) b)\n  \
    \      (multiply a (- b)))))\n)\n", "  (if (= a 0)\n    0\n    (if (= b 0)\n \
    \     1\n      (+ (* (/ a 10) (* b 10)))\n      )))\n\n;; >>> (multiply 14 -15)\n\
    ;; 20\n;; >>> (multiply 2020 1851)\n;; 0\n;; >>> (multiply 148 412)\n;; 16\n;;\
    \ >>> (multiply 19 28)\n;; 72\n;; >>> (multiply -148 412)\n;; -16\n;; >>> (multiply\
    \ -19 28)\n;; -72\n;; >>> (multiply -148 -412)\n;; 16\n;; >>> (multiply -19 -28)\n\
    ;; 72\n;; >>> (multiply -14 -15)\n;; -20\n;; >>> (multiply -2020 1851)\n;; 0\n\
    ;; >>> (multiply -148 -412)\n;; -16\n;; >>> (multiply -19 -28)\n;; -72\n;; >>>\
    \ (multiply -14 -15)\n;; -20\n;; >>> (multiply -2020 -1851)\n;; 0\n;; >>> (multiply\
    \ -148 -412)\n;; -16\n;; >>> (multiply -19 -28)\n;; -72\n;; >>> (multiply -14\
    \ -15)\n;; -20\n;; >>> (multiply -2020 -1851)\n;; 0\n;; >>> (multiply -148 -412)\n\
    ;; -16\n;; >>> (multiply -19 -28)\n;; -72\n;; >>> (multiply -14 -15)\n;; -20\n\
    ;; >>> (multiply -2020 -1851)\n;; 0\n;; >>> (multiply -148 -412)\n;; -16\n;; >>>\
    \ (multiply -19 -28)\n;; -72\n;; >>> (multiply -14 -15)\n;; -20\n;; >>> (multiply\
    \ -2020 -1851)\n;; 0\n;; >>> (multiply -148 -412)\n;; -16\n;; >>> (multiply -19\
    \ -28)\n;; -72\n;; >>> (multiply -14 -15)\n;; -20\n;; >>> (multiply -2020 -1851)\n\
    ;; 0\n;; >>> (multiply -148", "  (if (zero? a)\n    0\n    (if (zero? b)\n   \
    \   0\n      (if (negative? a)\n        (multiply (- a) b)\n        (multiply\
    \ a (- b)))))\n)\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n   \
    \   (if (negative? a)\n        (multiply (- a) b)\n        (multiply a (- b)))))\n\
    )\n\n;; Complete the function that takes two strings and returns \n;; the number\
    \ of times that the substring appears in the string.\n;; Assume the input is always\
    \ valid.\n;; Examples:\n;; >>> (count \"abcdefghijklmnopqrstuvwxyz\" \"abc\")\n\
    ;; 1\n;; >>> (count \"abcdefghijklmnopqrstuvwxyz\" \"abcdefghijklmnopqrstuvwxyz\"\
    )\n;; 2\n;; >>> (count \"abcdefghijklmnopqrstuvwxyz\" \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"\
    )\n;; 3\n;; >>> (count \"abcdefghijklmnopqrstuvwxyz\" \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijkl",
  "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n \
    \       (multiply (- a) b)\n        (multiply a (- b)))))\n)\n", "  (if (zero?\
    \ a)\n    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n        (multiply\
    \ (- a) b)\n        (multiply a (- b)))))\n)\n", "  (if (zero? a)\n    0\n   \
    \ (if (zero? b)\n      0\n      (if (negative? a)\n        (multiply (- a) b)\n\
    \        (multiply a (- b)))))\n)\n\n;; Complete the function that takes two strings\
    \ and returns \n;; the number of times that the second string occurs in the first.\n\
    ;; Assume the input is always valid.\n;; Examples:\n;; >>> (count \"abc\" \"abc\"\
    )\n;; 3\n;; >>> (count \"abc\" \"abcabc\")\n;; 2\n;; >>> (count \"abc\" \"abcabcabc\"\
    )\n;; 1\n;; >>> (count \"abc\" \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",
  "  (let ((a-digits (string->list a))\n        (b-digits (string->list b)))\n   \
    \ (reduce (lambda (a b)\n              (if (null? a)\n                  b\n  \
    \                (if (null? b)\n                      a\n                    \
    \  (cons (string->number (car a))\n                          (multiply (car a)\
    \ (car b)))))\n              a-digits b-digits)))\n)\n", "  (if (zero? a)\n  \
    \  0\n    (if (zero? b)\n      0\n      (if (negative? a)\n        (multiply (-\
    \ a) b)\n        (multiply a (- b)))))\n)\n", "  (if (zero? a)\n    0\n    (if\
    \ (zero? b)\n      0\n      (if (negative? a)\n        (multiply (- a) b)\n  \
    \      (multiply a (- b)))))\n)\n", "  (if (zero? a)\n    (zero? b)\n    (if (zero?\
    \ b)\n      (zero? a)\n      (if (zero? a)\n        (zero? b)\n        (if (zero?\
    \ b)\n          (zero? a)\n          (if (zero? a)\n            (zero? b)\n  \
    \          (if (zero? b)\n              (zero? a)\n              (if (zero? a)\n\
    \                (zero? b)\n                (if (zero? b)\n                  (zero?\
    \ a)\n                  (if (zero? a)\n                    (zero? b)\n       \
    \             (if (zero? b)\n                      (zero? a)\n               \
    \       (if (zero? a)\n                        (zero? b)\n                   \
    \     (if (zero? b)\n                          (zero? a)\n                   \
    \       (if (zero? a)\n                            (zero? b)\n               \
    \             (if (zero? b)\n                              (zero? a)\n       \
    \                       (if (zero? a)\n                                (zero?\
    \ b)\n                                (if (zero? b)\n                        \
    \          (zero? a)\n                                  (if (zero? a)\n      \
    \                              (zero? b)\n                                   \
    \ (if (zero? b)\n                                      (zero? a)\n           \
    \                           (if (zero? a)\n                                  \
    \      (zero? b)\n                                        (if (zero? b)\n    \
    \                                      (zero? a)\n                           \
    \               (if (zero? a)\n                                            (zero?\
    \ b)\n                                            (if (zero? b)\n            \
    \                                  (zero? a)\n                               \
    \               (if (zero? a)\n                                              \
    \  (zero? b)\n                                                (if (zero? b)\n\
    \                                                  (zero? a)\n               \
    \                                   (if (zero? a)\n                          \
    \                          (zero? b)\n                                       \
    \             (if (zero? b)\n                                                \
    \      (zero? a)\n                                                      (if (zero?\
    \ a)\n                                                        (zero? b)\n    \
    \                               ", "  (let ((a-digits (string-split a \"-\")))\n\
    \    (let ((b-digits (string-split b \"-\")))\n      (let ((a-digit (car a-digits))\n\
    \            (b-digit (car b-digits)))\n        (string-join (string-join a-digit\
    \ \"\") (string-join b-digit \"\") \"\"))))\n)\n", "  (if (zero? a)\n    0\n \
    \   (if (zero? b)\n      0\n      (if (negative? a)\n        (multiply (- a) b)\n\
    \        (multiply a (- b)))))\n)\n", "  (if (zero? a)\n    0\n    (if (zero?\
    \ b)\n      1\n      (if (negative? a)\n        (multiply (- a) b)\n        (multiply\
    \ a (- b)))))\n)\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n   \
    \   (if (negative? a)\n        (multiply (- a) b)\n        (multiply a (- b)))))\n\
    )\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative?\
    \ a)\n        (negate (multiply (abs a) (abs b)))\n        (if (negative? b)\n\
    \          (negate (multiply (abs a) (abs b)))\n          (multiply (multiply\
    \ (abs a) (abs b)) (abs a))))))))\n", "  (if (zero? a)\n    0\n    (if (zero?\
    \ b)\n      1\n      (if (negative? a)\n        (multiply (- a) b)\n        (multiply\
    \ a (- b)))))\n)\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n   \
    \   (if (negative? a)\n        (multiply (- a) b)\n        (multiply a (- b)))))\n\
    )\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative?\
    \ a)\n        (multiply (- a) b)\n        (multiply a (- b)))))\n)\n", "  (if\
    \ (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n    \
    \    (multiply (- a) b)\n        (multiply a (- b)))))\n)\n", "  (let ((a-digits\
    \ (string->list a))\n        (b-digits (string->list b)))\n    (if (empty? a-digits)\n\
    \      (string->number 0)\n    (if (empty? b-digits)\n      (string->number 0)\n\
    \    (let ((a-digit (car a-digits))\n          (b-digit (car b-digits)))\n   \
    \   (string->number (* a-digit b-digit))))))\n\n;; >>> (multiply \"148\" \"412\"\
    )\n;; 16\n;; >>> (multiply \"19\" \"28\")\n;; 72\n;; >>> (multiply \"2020\" \"\
    1851\")\n;; 0\n;; >>> (multiply \"14\" \"-15\")\n;; 20\n\n;; >>> (multiply \"\
    148\" \"412\")\n;; 16\n;; >>> (multiply \"19\" \"28\")\n;; 72\n;; >>> (multiply\
    \ \"2020\" \"1851\")\n;; 0\n;; >>> (multiply \"14\" \"-15\")\n;; 20\n\n;; >>>\
    \ (multiply \"148\" \"412\")\n;; 16\n;; >>> (multiply \"19\" \"28\")\n;; 72\n\
    ;; >>> (multiply \"2020\" \"1851\")\n;; 0\n;; >>> (multiply \"14\" \"-15\")\n\
    ;; 20\n\n;; >>> (multiply \"148\" \"412\")\n;; 16\n;; >>> (multiply \"19\" \"\
    28\")\n;; 72\n;; >>> (multiply \"2020\" \"1851\")\n;; 0\n;; >>> (multiply \"14\"\
    \ \"-15\")\n;; 20\n\n;; >>> (multiply \"148\" \"412\")\n;; 16\n;; >>> (multiply\
    \ \"19\" \"28\")\n;; 72\n;; >>> (multiply \"2020\" \"1851\")\n;; 0\n;; >>> (multiply\
    \ \"14\" \"-15\")\n;; 20\n\n;; >>> (multiply \"148\" \"412\")\n;; 16\n;; >>> (multiply\
    \ \"19\" \"28\")\n;; 72\n;; >>> (multiply \"2020\" \"1851\")\n;; 0\n;; >>> (multiply\
    \ \"14\" \"-15\")\n;; 20\n\n;; >>> (mult", "  (if (zero? a)\n    0\n    (if (zero?\
    \ b)\n      0\n      (if (negative? a)\n        (negate (multiply (negate a) b))\n\
    \        (if (negative? b)\n          (negate (multiply a (negate b)))\n     \
    \     (multiply (multiply (quotient a 10) (quotient b 10))\n             (modulo\
    \ a 10)\n             (modulo b 10)))))))\n", "  (if (zero? a)\n    0\n    (if\
    \ (zero? b)\n      0\n      (if (negative? a)\n        (multiply (- a) b)\n  \
    \      (multiply a (- b)))))\n)\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n\
    \      0\n      (if (negative? a)\n        (multiply (- a) b)\n        (multiply\
    \ a (- b)))))\n)\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n   \
    \   (if (negative? a)\n        (multiply (- a) b)\n        (multiply a (- b)))))\n\
    )\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative?\
    \ a)\n        (multiply (- a) b)\n        (multiply a (- b)))))\n)\n", "  (if\
    \ (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n    \
    \    (multiply (- a) b)\n        (multiply a (- b)))))\n)\n", "  (if (zero? a)\n\
    \    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n        (multiply\
    \ (- a) b)\n        (multiply a (- b)))))\n)\n", "  (if (zero? a)\n    0\n   \
    \ (if (zero? b)\n      0\n      (if (negative? a)\n        (multiply (- a) b)\n\
    \        (multiply a (- b)))))\n)\n", "  (if (zero? a)\n    (zero? b)\n    (if\
    \ (zero? b)\n      (zero? a)\n      (if (negative? a)\n        (negative? b)\n\
    \        (if (negative? b)\n          (negative? a)\n          (if (zero? a)\n\
    \            (zero? b)\n            (if (negative? b)\n              (negative?\
    \ a)\n              (multiply (multiply (quotient a 10) (quotient b 10)) (quotient\
    \ (remainder a 10) 10))\n            )\n            (multiply (multiply (quotient\
    \ a 10) (quotient b 10)) (remainder (remainder a 10) 10))\n          )\n     \
    \     (multiply (multiply (quotient a 10) (quotient b 10)) (remainder (remainder\
    \ b 10) 10))\n        )\n        (multiply (multiply (quotient a 10) (quotient\
    \ b 10)) (remainder (remainder a 10) 10))\n      )\n      (multiply (multiply\
    \ (quotient a 10) (quotient b 10)) (remainder (remainder b 10) 10))\n    )\n \
    \ )\n)\n\n;; Complete the function that takes two integers and returns \n;; the\
    \ product of their unit digits.\n;; Assume the input is always valid.\n;; Examples:\n\
    ;; >>> (multiply 148 412)\n;; 16\n;; >>> (multiply 19 28)\n;; 72\n;; >>> (multiply\
    \ 2020 1851)\n;; 0\n;; >>> (multiply 14 -15)\n;; 20", "  (if (zero? a)\n    0\n\
    \    (if (zero? b)\n      1\n      (if (negative? a)\n        (multiply (- a)\
    \ b)\n        (multiply a (- b)))))\n)\n", "  (if (zero? a)\n    0\n    (if (zero?\
    \ b)\n      0\n      (if (negative? a)\n        (negate (multiply (- a) b))\n\
    \        (if (negative? b)\n          (negate (multiply a (- b)))\n          (multiply\
    \ (multiply (quotient a 10) (quotient b 10))\n             (modulo a 10)\n   \
    \          (modulo b 10))))))))\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n\
    \      0\n      (if (negative? a)\n        (multiply (- a) b)\n        (multiply\
    \ a (- b)))))\n)\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n      1\n   \
    \   (if (negative? a)\n        (multiply (- a) b)\n        (multiply a (- b)))))\n\
    )\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative?\
    \ a)\n        (multiply (- a) b)\n        (multiply a (- b)))))\n)\n", "  (if\
    \ (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n    \
    \    (multiply (- a) b)\n        (multiply a (- b)))))\n)\n", "  (if (zero? a)\n\
    \    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n        (multiply\
    \ (- a) b)\n        (multiply a (- b)))))\n)\n", "  (if (zero? a)\n    0\n   \
    \ (if (zero? b)\n      0\n      (if (negative? a)\n        (multiply (- a) b)\n\
    \        (multiply a (- b)))))\n)\n", "  (if (zero? a)\n    0\n    (if (zero?\
    \ b)\n      1\n      (if (negative? a)\n        (multiply (- a) b)\n        (multiply\
    \ a (- b)))))\n)\n\n;; Complete the function that takes two strings and returns\
    \ \n;; the product of their unit digits.\n;; Assume the input is always valid.\n\
    ;; Examples:\n;; >>> (multiply \"148 412\" \"19 28\")\n;; 16\n;; >>> (multiply\
    \ \"14 -15\" \"19 28\")\n;; 20", "  (if (zero? a)\n    (zero? b)\n    (if (zero?\
    \ b)\n      (zero? a)\n      (if (negative? a)\n        (negative? b)\n      \
    \  (if (negative? b)\n          (negative? a)\n          (if (zero? a)\n     \
    \       (zero? b)\n            (if (negative? b)\n              (negative? a)\n\
    \              (if (negative? a)\n                (negative? b)\n            \
    \    (if (zero? b)\n                  (zero? a)\n                  (negative?\
    \ a)\n                  (negative? b))\n                (zero? a)\n          \
    \      (negative? b)\n                (negative? a)\n                (negative?\
    \ b))\n              (zero? a)\n              (negative? b)\n              (negative?\
    \ a)\n              (negative? b))\n            (zero? a)\n            (negative?\
    \ b)\n            (negative? a)\n            (negative? b))\n          (zero?\
    \ a)\n          (negative? b)\n          (negative? a)\n          (negative? b))\n\
    \        (zero? a)\n        (negative? b)\n        (negative? a)\n        (negative?\
    \ b))\n      (zero? a)\n      (negative? b)\n      (negative? a)\n      (negative?\
    \ b))\n    (zero? a)\n    (negative? b)\n    (negative? a)\n    (negative? b))))\n",
  "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n \
    \       (negate (multiply (- a) b))\n        (if (negative? b)\n          (negate\
    \ (multiply a (- b)))\n          (multiply (multiply (remainder a 10) (remainder\
    \ b 10))\n             (quotient a b)))))))\n", "  (if (zero? a)\n    0\n    (if\
    \ (zero? b)\n      1\n      (if (negative? a)\n        (multiply (- a) b)\n  \
    \      (multiply a (- b)))))\n)\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n\
    \      0\n      (if (negative? a)\n        (multiply (- a) b)\n        (multiply\
    \ a (- b)))))\n)\n\n;; Complete the function that takes two strings and returns\
    \ \n;; the number of times that the first string occurs in the second.\n;; Assume\
    \ the input is always valid.\n;; Examples:\n;; >>> (count \"cat\" \"cat\")\n;;\
    \ 2\n;; >>> (count \"cat\" \"dog\")\n;; 0\n;; >>> (count \"cat\" \"cat cat\")\n\
    ;; 2\n;; >>> (count \"cat\" \"cat cat cat\")\n;; 3\n;; >>> (count \"cat\" \"cat\
    \ cat cat dog\")\n;; 2\n;; >>> (count \"cat\" \"cat cat cat dog cat\")\n;; 3\n\
    ;; >>> (count \"cat\" \"cat cat cat dog cat cat\")\n;; 4\n;; >>> (count \"cat\"\
    \ \"cat cat cat dog cat cat cat\")\n;; 5\n;; >>> (count \"cat\" \"cat cat cat\
    \ dog cat cat cat cat\")\n;; 6\n;; >>> (count \"cat\" \"cat cat cat dog cat cat\
    \ cat cat cat\")\n;; 7\n;; >>> (count \"cat\" \"cat cat cat dog cat cat cat cat\
    \ cat cat\")\n;; 8\n;; >>> (count \"cat\" \"cat cat cat dog cat cat cat cat cat\
    \ cat cat\")\n;; 9\n;; >>> (count \"cat\" \"cat cat cat dog cat cat cat cat cat\
    \ cat cat cat\")\n;; 10\n;; >>> (count \"cat\" \"cat cat cat dog cat cat cat cat\
    \ cat cat cat cat cat\")\n;; 11\n;; >>> (count \"cat\" \"cat cat cat dog cat cat\
    \ cat cat cat cat cat cat cat cat\")\n;; 12\n;; >>> (count \"cat\" \"cat cat cat\
    \ dog cat cat cat cat cat cat cat cat cat cat cat\")\n;; 13\n;; >>> (count \"\
    cat\" \"cat cat cat dog cat cat cat cat cat cat cat cat cat cat cat cat\")\n;;\
    \ 14\n;; >>> (count \"cat\" \"cat cat cat dog cat cat cat cat cat cat cat cat\
    \ cat cat cat cat cat\")\n;; 15\n;; >>> (count \"cat\" \"cat cat cat dog cat cat\
    \ cat cat cat cat cat cat cat cat cat cat cat", "  (if (zero? a)\n    0\n    (if\
    \ (zero? b)\n      0\n      (if (negative? a)\n        (multiply (- a) b)\n  \
    \      (multiply a (- b)))))\n)\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n\
    \      0\n      (if (negative? a)\n        (multiply (- a) b)\n        (multiply\
    \ a (- b)))))\n)\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n   \
    \   (if (negative? a)\n        (multiply (- a) b)\n        (multiply a (- b)))))\n\
    )\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative?\
    \ a)\n        (multiply (- a) b)\n        (multiply a (- b)))))\n)\n\n;; Complete\
    \ the function that takes two strings and returns \n;; the number of times that\
    \ the first string occurs in the second.\n;; Assume the input is always valid.\n\
    ;; Examples:\n;; >>> (count \"cat\" \"cat\")\n;; 1\n;; >>> (count \"cat\" \"dog\"\
    )\n;; 0\n;; >>> (count \"cat\" \"cat cat\")\n;; 2\n;; >>> (count \"cat\" \"cat\
    \ cat cat\")\n;; 3\n;; >>> (count \"cat\" \"cat cat cat cat\")\n;; 4\n;; >>> (count\
    \ \"cat\" \"cat cat cat cat cat\")\n;; 5\n;; >>> (count \"cat\" \"cat cat cat\
    \ cat cat cat\")\n;; 6\n;; >>> (count \"cat\" \"cat cat cat cat cat cat cat\"\
    )\n;; 7\n;; >>> (count \"cat\" \"cat cat cat cat cat cat cat cat\")\n;; 8\n;;\
    \ >>> (count \"cat\" \"cat cat cat cat cat cat cat cat cat\")\n;; 9\n;; >>> (count\
    \ \"cat\" \"cat cat cat cat cat cat cat cat cat cat\")\n;; 10\n;; >>> (count \"\
    cat\" \"cat cat cat cat cat cat cat cat cat cat cat\")\n;; 11\n;; >>> (count \"\
    cat\" \"cat cat cat cat cat cat cat cat cat cat cat cat\")\n;; 12\n;; >>> (count\
    \ \"cat\" \"cat cat cat cat cat cat cat cat cat cat cat cat cat\")\n;; 13\n;;\
    \ >>> (count \"cat\" \"cat cat cat cat cat cat cat cat cat cat cat cat cat cat\"\
    )\n;; 14\n;; >>> (count \"cat\" \"cat cat cat cat cat cat cat cat cat cat cat\
    \ cat cat cat cat\")\n;; 15\n;; >>> (count \"cat\" \"cat cat cat cat cat cat cat\
    \ cat cat cat cat cat cat cat cat cat\")\n;; 16\n;; >>> (count \"cat\" \"cat cat\
    \ cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat\")\n;; 17\n;; >>>\
    \ (count \"cat\" \"cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat\
    \ cat cat", "  (let ((a-digits (string->list a))\n        (b-digits (string->list\
    \ b)))\n    (if (empty? a-digits)\n      (string->number 0)\n    (if (empty? b-digits)\n\
    \      (string->number 0)\n    (let ((a-digit (car a-digits))\n          (b-digit\
    \ (car b-digits)))\n      (string->number (string->number a-digit b-digit))))))\n",
  "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n \
    \       (negate (multiply (- a) b))\n        (if (negative? b)\n          (negate\
    \ (multiply a (- b)))\n          (multiply (multiply (quotient a 10) (quotient\
    \ b 10))\n             (remainder a 10)\n             (remainder b 10)))))))\n\
    \n;; >>> (multiply 148 412)\n;; 16\n;; >>> (multiply 19 28)\n;; 72\n;; >>> (multiply\
    \ 2020 1851)\n;; 0\n;; >>> (multiply 14 -15)\n;; 20\n", "  (if (= a 0)\n    0\n\
    \    (if (= b 0)\n      1\n      (+ (* (/ a 10) (* b 10)))\n      )))\n", "  (if\
    \ (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n    \
    \    (multiply (- a) b)\n        (if (negative? b)\n          (multiply (- b)\
    \ a)\n          (multiply a b))))))\n", "  (if (zero? a)\n    0\n    (if (zero?\
    \ b)\n      0\n      (if (negative? a)\n        (multiply (- a) b)\n        (if\
    \ (negative? b)\n          (multiply (- b) a)\n          (multiply a b))))))\n",
  "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n \
    \       (negate (multiply (abs a) (abs b)))\n        (multiply (abs a) (abs b)))))\n\
    \n;; Complete the function that takes two strings and returns \n;; the number\
    \ of times that the substring appears in the string.\n;; Assume the input is always\
    \ valid.\n;; Examples:\n;; >>> (count-substring \"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n \
    \       (multiply (- a) b)\n        (multiply a (- b)))))\n)\n", "  (if (zero?\
    \ a)\n    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n        (multiply\
    \ (- a) b)\n        (multiply a (- b)))))\n)\n", "  (if (zero? a)\n    0\n   \
    \ (if (zero? b)\n      0\n      (if (negative? a)\n        (multiply (- a) b)\n\
    \        (multiply a (- b)))))\n)\n", "  (if (zero? a)\n    0\n    (if (zero?\
    \ b)\n      0\n      (if (negative? a)\n        (multiply (- a) b)\n        (multiply\
    \ a (- b)))))\n)\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n   \
    \   (if (negative? a)\n        (multiply (- a) b)\n        (multiply a (- b)))))\n\
    )\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative?\
    \ a)\n        (multiply (- a) b)\n        (if (negative? b)\n          (multiply\
    \ (- b) a)\n          (multiply a b))))))\n", "  (if (zero? a)\n    0\n    (if\
    \ (zero? b)\n      0\n      (if (negative? a)\n        (multiply (- a) b)\n  \
    \      (multiply a (- b)))))\n)\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n\
    \      0\n      (if (negative? a)\n        (multiply (- a) b)\n        (if (negative?\
    \ b)\n          (multiply (- b) a)\n          (multiply a b))))))\n", "  (if (zero?\
    \ a)\n    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n        (multiply\
    \ (- a) b)\n        (multiply a (- b)))))\n)\n", "  (if (zero? a)\n    0\n   \
    \ (if (zero? b)\n      0\n      (if (negative? a)\n        (multiply (- a) b)\n\
    \        (multiply a (- b)))))\n)\n", "  (if (zero? a)\n    0\n    (if (zero?\
    \ b)\n      0\n      (if (negative? a)\n        (multiply (- a) b)\n        (multiply\
    \ a (- b)))))\n)\n\n;; Complete the function that takes two strings and returns\
    \ \n;; the product of their unit digits.\n;; Assume the input is always valid.\n\
    ;; Examples:\n;; >>> (multiply \"148 412\")\n;; 16\n;; >>> (multiply \"19 28\"\
    )\n;; 72\n;; >>> (multiply \"2020 1851\")\n;; 0\n;; >>> (multiply \"14 -15\")\n\
    ;; 20", "  (let ((a-digits (string-split a \"-\")))\n    (let ((b-digits (string-split\
    \ b \"-\")))\n      (let ((a-digits-length (length a-digits))\n            (b-digits-length\
    \ (length b-digits)))\n        (let ((a-digits-index (0))\n              (b-digits-index\
    \ (0)))\n          (let ((product 0))\n            (while (>= a-digits-index b-digits-index)\n\
    \              (let ((a-digit (string-at a-digits a-digits-index)))\n        \
    \        (let ((b-digit (string-at b-digits b-digits-index)))\n              \
    \    (set! product\n                    (+ product\n                      (string-at\
    \ a-digits a-digits-index)\n                      (string-at b-digits b-digits-index))))\n\
    \                (set! a-digits-index (+ a-digits-index 1))\n                (set!\
    \ b-digits-index (+ b-digits-index 1))))\n            (+ product product)))))))\n\
    \n;; Complete the function that takes two strings and returns \n;; the product\
    \ of their unit digits.\n;; Assume the input is always valid.\n;; Examples:\n\
    ;; >>> (multiply \"148\" \"412\")\n;; 16\n;; >>> (multiply \"19\" \"28\")\n;;\
    \ 72\n;; >>> (multiply \"2020\" \"1851\")\n;; 0\n;; >>> (multiply \"14\" \"-15\"\
    )\n;; 20", "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative?\
    \ a)\n        (multiply (- a) b)\n        (multiply a (- b)))))\n)\n", "  (if\
    \ (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n    \
    \    (multiply (- a) b)\n        (if (negative? b)\n          (multiply a (- b))\n\
    \          (multiply (* 10 a) (* 10 b)))))\n  )\n)\n", "  (if (zero? a)\n    0\n\
    \    (if (zero? b)\n      0\n      (if (negative? a)\n        (multiply (- a)\
    \ b)\n        (if (negative? b)\n          (multiply a (- b))\n          (multiply\
    \ (abs a) (abs b))))))))\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n    \
    \  0\n      (if (negative? a)\n        (multiply (- a) b)\n        (multiply a\
    \ (- b)))))\n)\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n     \
    \ (if (negative? a)\n        (multiply (- a) b)\n        (multiply a (- b)))))\n\
    )\n", "  (let ((a-digits (string->list a))\n        (b-digits (string->list b)))\n\
    \    (if (empty? a-digits)\n      (string->number 0)\n    (if (empty? b-digits)\n\
    \      (string->number 0)\n    (let ((a-digit (car a-digits))\n          (b-digit\
    \ (car b-digits)))\n      (string->number (string->number a-digit b-digit))))))\n",
  "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n \
    \       (multiply (- a) b)\n        (if (negative? b)\n          (multiply a (-\
    \ b))\n          (multiply (abs a) (abs b)))))))\n", "  (if (zero? a)\n    0\n\
    \    (if (zero? b)\n      0\n      (if (negative? a)\n        (multiply (- a)\
    \ b)\n        (multiply a (- b)))))\n)\n", "  (if (zero? a)\n    0\n    (if (zero?\
    \ b)\n      1\n      (if (negative? a)\n        (multiply (- a) b)\n        (multiply\
    \ a (- b)))))\n)\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n   \
    \   (if (negative? a)\n        (multiply (- a) b)\n        (multiply a (- b)))))\n\
    )\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative?\
    \ a)\n        (multiply (- a) b)\n        (multiply a (- b)))))\n)\n", "  (if\
    \ (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n    \
    \    (multiply (- a) b)\n        (multiply a (- b)))))\n)\n", "  (if (zero? a)\n\
    \    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n        (multiply\
    \ (- a) b)\n        (multiply a (- b)))))\n)\n", "  (if (zero? a)\n    0\n   \
    \ (if (zero? b)\n      0\n      (if (negative? a)\n        (multiply (- a) b)\n\
    \        (multiply a (- b)))))\n)\n", "  (if (zero? a)\n    0\n    (if (zero?\
    \ b)\n      1\n      (if (negative? a)\n        (multiply (- a) b)\n        (multiply\
    \ a (- b)))))\n)\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n   \
    \   (if (negative? a)\n        (negate (multiply (negate a) b))\n        (if (negative?\
    \ b)\n          (negate (multiply a (negate b)))\n          (multiply (multiply\
    \ (quotient a 10) (quotient b 10))\n             (remainder a 10)\n          \
    \   (remainder b 10)))))))\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n  \
    \    0\n      (if (negative? a)\n        (multiply (- a) b)\n        (multiply\
    \ a (- b)))))\n)\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n      1\n   \
    \   (if (negative? a)\n        (multiply (- a) b)\n        (multiply a (- b)))))\n\
    )\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n      1\n      (if (negative?\
    \ a)\n        (multiply (- a) b)\n        (multiply a (- b)))))\n)\n", "  (if\
    \ (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n    \
    \    (multiply (- a) b)\n        (multiply a (- b)))))\n)\n", "  (if (= a 0)\n\
    \    0\n    (if (= b 0)\n      1\n      (* (modulo a 10) (modulo b 10)))))\n\n\
    ;; Complete the function that takes two strings and returns \n;; the number of\
    \ times that the first string appears in the second.\n;; Assume the input is always\
    \ valid.\n;; Examples:\n;; >>> (count-string \"hello\" \"hello world\")\n;; 2\n\
    ;; >>> (count-string \"hello\" \"hello world hello world\")\n;; 2\n;; >>> (count-string\
    \ \"hello\" \"hello world hello world hello world hello world hello world hello\
    \ world hello world hello world hello world hello world hello world hello world\
    \ hello world hello world hello world hello world hello world hello world hello\
    \ world hello world hello world hello world hello world hello world hello world\
    \ hello world hello world hello world hello world hello world hello world hello\
    \ world hello world hello world hello world hello world hello world hello world\
    \ hello world hello world hello world hello world hello world hello world hello\
    \ world hello world hello world hello world hello world hello world hello world\
    \ hello world hello world hello world hello world hello world hello world hello\
    \ world hello world hello world hello world hello world hello world hello world\
    \ hello world hello world hello world hello world hello world hello world hello\
    \ world hello world hello world hello world hello world hello world hello world\
    \ hello world hello world hello world hello world hello world hello world hello\
    \ world hello world hello world hello world hello world hello world hello world\
    \ hello world hello world hello world hello world hello world hello world hello\
    \ world hello world hello world hello world hello world hello world hello world\
    \ hello world hello world hello world hello world hello world hello world hello\
    \ world hello world hello world hello world hello world hello world hello world\
    \ hello world hello world hello world hello world hello world hello world hello\
    \ world hello world hello world hello world hello world hello world hello world\
    \ hello world hello world hello world hello world hello world hello world hello\
    \ world hello world hello world hello world hello world hello world hello world\
    \ hello world hello world hello world hello world hello world hello world hello\
    \ world hello world hello world hello world hello world hello world hello world\
    \ hello world hello world hello world hello world hello world hello world hello\
    \ world hello world hello world hello world hello world hello world hello world\
    \ hello world hello world hello world hello world hello world hello world hello\
    \ world hello world hello world hello world hello world hello world hello world\
    \ hello world hello world hello world hello world hello world hello world hello\
    \ world hello world hello world hello world hello world hello world", "  (if (zero?\
    \ a)\n    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n        (multiply\
    \ (- a) b)\n        (if (negative? b)\n          (multiply a (- b))\n        \
    \  (multiply (abs a) (abs b)))))))\n", "  (let ((a-digits (string->list a))\n\
    \        (b-digits (string->list b)))\n    (if (empty? a-digits)\n      (string->number\
    \ 0)\n    (if (empty? b-digits)\n      (string->number 0)\n    (let ((a-digit\
    \ (car a-digits))\n          (b-digit (car b-digits)))\n      (string->number\
    \ (string->number a-digit b-digit))))))\n\n;; >>> (multiply \"148\" \"412\")\n\
    ;; \"16\"\n;; >>> (multiply \"19\" \"28\")\n;; \"72\"\n;; >>> (multiply \"2020\"\
    \ \"1851\")\n;; \"0\"\n;; >>> (multiply \"14\" \"-15\")\n;; \"20\"\n;; >>> (multiply\
    \ \"14\" \"15\")\n;; \"0\"\n;; >>> (multiply \"14\" \"14\")\n;; \"14\"\n;; >>>\
    \ (multiply \"14\" \"0\")\n;; \"0\"\n;; >>> (multiply \"14\" \"1\")\n;; \"14\"\
    \n;; >>> (multiply \"14\" \"2\")\n;; \"14\"\n;; >>> (multiply \"14\" \"3\")\n\
    ;; \"14\"\n;; >>> (multiply \"14\" \"4\")\n;; \"14\"\n;; >>> (multiply \"14\"\
    \ \"5\")\n;; \"14\"\n;; >>> (multiply \"14\" \"6\")\n;; \"14\"\n;; >>> (multiply\
    \ \"14\" \"7\")\n;; \"14\"\n;; >>> (multiply \"14\" \"8\")\n;; \"14\"\n;; >>>\
    \ (multiply \"14\" \"9\")\n;; \"14\"\n;; >>> (multiply \"14\" \"10\")\n;; \"14\"\
    \n;; >>> (multiply \"14\" \"11\")\n;; \"14\"\n;; >>> (multiply \"14\" \"12\")\n\
    ;; \"14\"\n;; >>> (multiply \"14\" \"13\")\n;; \"14\"\n;; >>> (multiply \"14\"\
    \ \"14\")\n;; \"14\"\n;; >>> (multiply \"14\" \"15\")\n;; \"14\"\n", "  (let ((a-digits\
    \ (string-split-at-first a \"-\")))\n    (let ((b-digits (string-split-at-first\
    \ b \"-\")))\n      (string-join (map (lambda (x) (string-trim-left-f x \"0\"\
    )) a-digits) \"\")\n      (string-join (map (lambda (x) (string-trim-left-f x\
    \ \"0\")) b-digits) \"\")\n      (string-join \"0\" (map (lambda (x) (string-trim-right-f\
    \ x \"0\")) a-digits))\n      (string-join \"0\" (map (lambda (x) (string-trim-right-f\
    \ x \"0\")) b-digits))\n      (string-join \"0\" (map (lambda (x) (string-trim-right-f\
    \ x \"0\")) a-digits))\n      (string-join \"0\" (map (lambda (x) (string-trim-right-f\
    \ x \"0\")) b-digits))\n      (string-join \"0\" (map (lambda (x) (string-trim-left-f\
    \ x \"0\")) a-digits))\n      (string-join \"0\" (map (lambda (x) (string-trim-left-f\
    \ x \"0\")) b-digits))\n      (string-join \"0\" (map (lambda (x) (string-trim-left-f\
    \ x \"0\")) a-digits))\n      (string-join \"0\" (map (lambda (x) (string-trim-left-f\
    \ x \"0\")) b-digits))))))\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n  \
    \    0\n      (if (negative? a)\n        (multiply (- a) b)\n        (multiply\
    \ a (- b)))))\n)\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n   \
    \   (if (negative? a)\n        (multiply (- a) b)\n        (multiply a (- b)))))\n\
    )\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative?\
    \ a)\n        (multiply (- a) b)\n        (if (negative? b)\n          (multiply\
    \ a (- b))\n          (multiply (abs a) (abs b)))))))\n", "  (if (zero? a)\n \
    \   (zero? b)\n    (if (zero? b)\n      (zero? a)\n      (if (negative? a)\n \
    \       (- (* 10 (multiply (- a) b)))\n        (* 10 (multiply a b))))))\n", " \
    \ (if (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n\
    \        (negate (multiply (negate a) b))\n        (if (negative? b)\n       \
    \   (negate (multiply a (negate b)))\n          (multiply (multiply (quotient\
    \ a 10) (quotient b 10))\n             (remainder a 10)\n             (remainder\
    \ b 10)))))))\n\n;; >>> (multiply 148 412)\n;; 16\n;; >>> (multiply 19 28)\n;;\
    \ 72\n;; >>> (multiply 2020 1851)\n;; 0\n;; >>> (multiply 14 -15)\n;; 20\n\n;;\
    \ >>> (multiply 14 -15)\n;; 20\n\n;; >>> (multiply 14 -15)\n;; 20\n\n;; >>> (multiply\
    \ 14 -15)\n;; 20\n\n;; >>> (multiply 14 -15)\n;; 20\n\n;; >>> (multiply 14 -15)\n\
    ;; 20\n\n;; >>> (multiply 14 -15)\n;; 20\n\n;; >>> (multiply 14 -15)\n;; 20\n\n\
    ;; >>> (multiply 14 -15)\n;; 20\n\n;; >>> (multiply 14 -15)\n;; 20\n\n;; >>> (multiply\
    \ 14 -15)\n;; 20\n\n;; >>> (multiply 14 -15)\n;; 20\n\n;; >>> (multiply 14 -15)\n\
    ;; 20\n\n;; >>> (multiply 14 -15)\n;; 20\n\n;; >>> (multiply 14 -15)\n;; 20\n\n\
    ;; >>> (multiply 14 -15)\n;; 20\n\n;; >>> (multiply 14 -15)\n;; 20\n\n;; >>> (multiply\
    \ 14 -15)\n;; 20\n\n;; >>> (multiply 14 -15)\n;; 20\n\n;; >>> (multiply 14 -15)\n\
    ;; 20\n\n;; >>> (multiply 14 -15)\n;; 20\n\n;; >>> (multiply 14 -15)\n;; 20\n\n\
    ;; >>> (multiply 14 -15)\n;; 20\n\n;; >>> (multiply 14 -15)", "  (let ((a-digits\
    \ (string-split a \"-\")))\n    (let ((b-digits (string-split b \"-\")))\n   \
    \   (let ((a-digit (first a-digits))\n            (b-digit (first b-digits)))\n\
    \        (string-join (string-join a-digit b-digit) \"-\"))))\n", "  (if (zero?\
    \ a)\n    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n        (multiply\
    \ (- a) b)\n        (multiply a (- b)))))\n)\n", "  (if (zero? a)\n    0\n   \
    \ (if (zero? b)\n      0\n      (if (negative? a)\n        (multiply (- a) b)\n\
    \        (multiply a (- b)))))\n)\n", "  (if (zero? a)\n    0\n    (if (zero?\
    \ b)\n      0\n      (if (negative? a)\n        (multiply (- a) b)\n        (multiply\
    \ a (- b)))))\n)\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n   \
    \   (if (negative? a)\n        (multiply (- a) b)\n        (multiply a (- b)))))\n\
    )\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative?\
    \ a)\n        (multiply (- a) b)\n        (multiply a (- b)))))\n)\n", "  (if\
    \ (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n    \
    \    (multiply (- a) b)\n        (multiply a (- b)))))\n)\n", "  (if (zero? a)\n\
    \    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n        (multiply\
    \ (- a) b)\n        (multiply a (- b)))))\n)\n", "  (if (zero? a)\n    0\n   \
    \ (if (zero? b)\n      0\n      (if (negative? a)\n        (multiply (- a) b)\n\
    \        (if (negative? b)\n          (multiply a (- b))\n          (multiply\
    \ (abs a) (abs b)))))))\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n     \
    \ 0\n      (if (negative? a)\n        (multiply (- a) b)\n        (multiply a\
    \ (- b)))))\n)\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n     \
    \ (if (negative? a)\n        (multiply (- a) b)\n        (multiply a (- b)))))\n\
    )\n", "  (let ((a-digit (modulo a 10)))\n    (let ((b-digit (modulo b 10)))\n\
    \      (if (= a-digit 0)\n        (if (= b-digit 0)\n          (+ (multiply (remainder\
    \ a 10) (remainder b 10)))\n          (+ (multiply (remainder a 10) b-digit)\n\
    \             (multiply a-digit b-digit)))\n        (+ (multiply a-digit b-digit))))))\n",
  "  (let ((a-digits (string->list a))\n        (b-digits (string->list b)))\n   \
    \ (reduce (lambda (a b)\n              (if (null? a)\n                  b\n  \
    \                (if (null? b)\n                      a\n                    \
    \  (cons (string->number (car a))\n                          (multiply (car a)\
    \ (car b)))))))\n  )\n)\n", "  (if (= a 0)\n    0\n    (if (= b 0)\n      1\n\
    \      (multiply (/ a 10) (/ b 10)))))\n", "  (if (zero? a)\n    0\n    (if (zero?\
    \ b)\n      0\n      (if (negative? a)\n        (multiply (- a) b)\n        (multiply\
    \ a (- b)))))\n)\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n      1\n   \
    \   (if (negative? a)\n        (multiply (- a) b)\n        (multiply a (- b)))))\n\
    )\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative?\
    \ a)\n        (multiply (- a) b)\n        (multiply a (- b)))))\n)\n", "  (if\
    \ (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n    \
    \    (multiply (- a) b)\n        (multiply a (- b)))))\n)\n", "  (if (zero? a)\n\
    \    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n        (multiply\
    \ (- a) b)\n        (if (negative? b)\n          (multiply (- b) a)\n        \
    \  (multiply a b))))))\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n\
    \      (if (negative? a)\n        (multiply (- a) b)\n        (if (negative? b)\n\
    \          (multiply a (- b))\n          (multiply (abs a) (abs b)))))))\n", " \
    \ (if (zero? a)\n    (zero? b)\n    (if (zero? b)\n      (zero? a)\n      (if\
    \ (negative? a)\n        (multiply (- a) b)\n        (multiply a (- b)))))\n)\n",
  "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n \
    \       (multiply (- a) b)\n        (if (negative? b)\n          (- a)\n     \
    \     (multiply a (- b)))))))\n", "  (let ((a-digits (string->list a))\n     \
    \   (b-digits (string->list b)))\n    (if (null? a-digits)\n      (string->number\
    \ 0)\n      (if (null? b-digits)\n        (string->number 0)\n        (string->number\
    \ (string-append (string->list (first a-digits)) (first b-digits)))\n        (string->number\
    \ (string-append (string->list (first b-digits)) (first a-digits))))))\n", " \
    \ (if (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n\
    \        (multiply (- a) b)\n        (multiply a (- b)))))\n)\n", "  (if (zero?\
    \ a)\n    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n        (multiply\
    \ (- a) b)\n        (multiply a (- b)))))\n)\n", "  (if (zero? a)\n    0\n   \
    \ (if (zero? b)\n      0\n      (if (negative? a)\n        (multiply (- a) b)\n\
    \        (multiply a (- b)))))\n)\n", "  (if (zero? a)\n    0\n    (if (zero?\
    \ b)\n      0\n      (if (negative? a)\n        (multiply (- a) b)\n        (multiply\
    \ a (- b)))))\n)\n\n;; Complete the function that takes two strings and returns\
    \ \n;; the number of times that the first string occurs in the second.\n;; Assume\
    \ the input is always valid.\n;; Examples:\n;; >>> (count \"cat\" \"cat\")\n;;\
    \ 2\n;; >>> (count \"cat\" \"dog\")\n;; 0\n;; >>> (count \"cat\" \"cat cat\")\n\
    ;; 2\n;; >>> (count \"cat\" \"cat cat cat\")\n;; 3\n;; >>> (count \"cat\" \"cat\
    \ cat cat dog\")\n;; 2\n;; >>> (count \"cat\" \"cat cat cat dog cat\")\n;; 3\n\
    ;; >>> (count \"cat\" \"cat cat cat dog cat cat\")\n;; 4\n;; >>> (count \"cat\"\
    \ \"cat cat cat dog cat cat cat\")\n;; 5\n;; >>> (count \"cat\" \"cat cat cat\
    \ dog cat cat cat cat\")\n;; 6\n;; >>> (count \"cat\" \"cat cat cat dog cat cat\
    \ cat cat cat\")\n;; 7\n;; >>> (count \"cat\" \"cat cat cat dog cat cat cat cat\
    \ cat cat\")\n;; 8\n;; >>> (count \"cat\" \"cat cat cat dog cat cat cat cat cat\
    \ cat cat\")\n;; 9\n;; >>> (count \"cat\" \"cat cat cat dog cat cat cat cat cat\
    \ cat cat cat\")\n;; 10\n;; >>> (count \"cat\" \"cat cat cat dog cat cat cat cat\
    \ cat cat cat cat cat\")\n;; 11\n;; >>> (count \"cat\" \"cat cat cat dog cat cat\
    \ cat cat cat cat cat cat cat cat\")\n;; 12\n;; >>> (count \"cat\" \"cat cat cat\
    \ dog cat cat cat cat cat cat cat cat cat cat cat\")\n;; 13\n;; >>> (count \"\
    cat\" \"cat cat cat dog cat cat cat cat cat cat cat cat cat cat cat cat\")\n;;\
    \ 14\n;; >>> (count \"cat\" \"cat cat cat dog cat cat cat cat cat cat cat cat\
    \ cat cat cat cat cat\")\n;; 15\n;; >>> (count \"cat\" \"cat cat cat dog cat cat\
    \ cat cat cat cat cat cat cat cat cat cat cat", "  (if (zero? a)\n    0\n    (if\
    \ (zero? b)\n      0\n      (if (negative? a)\n        (multiply (- a) b)\n  \
    \      (multiply a (- b)))))\n)\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n\
    \      1\n      (if (negative? a)\n        (multiply (- a) b)\n        (multiply\
    \ a (- b)))))\n)\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n   \
    \   (if (negative? a)\n        (multiply (- a) b)\n        (multiply a (- b)))))\n\
    )\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative?\
    \ a)\n        (multiply (- a) b)\n        (multiply a (- b)))))\n)\n", "  (if\
    \ (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n    \
    \    (multiply (- a) b)\n        (if (negative? b)\n          (multiply a (- b))\n\
    \          (multiply (abs a) (abs b)))))))\n", "  (if (zero? a)\n    0\n    (if\
    \ (zero? b)\n      0\n      (if (negative? a)\n        (multiply (- a) b)\n  \
    \      (multiply a (- b)))))\n)\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n\
    \      0\n      (if (negative? a)\n        (multiply (- a) b)\n        (multiply\
    \ a (- b)))))\n)\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n      1\n   \
    \   (if (negative? a)\n        (multiply (- a) b)\n        (multiply a (- b)))))\n\
    )\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative?\
    \ a)\n        (multiply (- a) b)\n        (if (negative? b)\n          (- a)\n\
    \          (multiply a (- b)))))\n  )\n)\n", "  (if (zero? a)\n    0\n    (if\
    \ (zero? b)\n      0\n      (if (negative? a)\n        (multiply (- a) b)\n  \
    \      (multiply a (- b)))))\n)\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n\
    \      1\n      (if (negative? a)\n        (multiply (- a) b)\n        (multiply\
    \ a (- b)))))\n)\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n      1\n   \
    \   (if (negative? a)\n        (multiply (- a) b)\n        (multiply a (- b)))))\n\
    )\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n      1\n      (if (negative?\
    \ a)\n        (multiply (- a) b)\n        (multiply a (- b)))))\n)\n", "  (if\
    \ (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n    \
    \    (multiply (- a) b)\n        (multiply a (- b)))))\n)\n", "  (if (zero? a)\n\
    \    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n        (multiply\
    \ (- a) b)\n        (multiply a (- b)))))\n)\n", "  (if (zero? a)\n    0\n   \
    \ (if (zero? b)\n      0\n      (if (negative? a)\n        (multiply (- a) b)\n\
    \        (multiply a (- b)))))\n)\n", "  (if (zero? a)\n    0\n    (if (zero?\
    \ b)\n      0\n      (if (negative? a)\n        (multiply (- a) b)\n        (multiply\
    \ a (- b)))))\n)\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n   \
    \   (if (negative? a)\n        (multiply (- a) b)\n        (multiply a (- b)))))\n\
    )\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative?\
    \ a)\n        (multiply (- a) b)\n        (multiply a (- b)))))\n)\n\n;; Complete\
    \ the function that takes two strings and returns \n;; the number of times the\
    \ substring appears in the string.\n;; Assume the input is always valid.\n;; Examples:\n\
    ;; >>> (count-substring \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",
  "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n \
    \       (multiply (- a) b)\n        (multiply a (- b)))))\n)\n", "  (if (zero?\
    \ a)\n    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n        (multiply\
    \ (- a) b)\n        (multiply a (- b)))))\n)\n", "  (if (zero? a)\n    0\n   \
    \ (if (zero? b)\n      0\n      (if (negative? a)\n        (multiply (- a) b)\n\
    \        (if (negative? b)\n          (multiply a (- b))\n          (multiply\
    \ (abs a) (abs b)))))))\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n     \
    \ 0\n      (if (negative? a)\n        (multiply (- a) b)\n        (multiply a\
    \ (- b)))))\n)\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n     \
    \ (if (negative? a)\n        (multiply (- a) b)\n        (multiply a (- b)))))\n\
    )\n", "  (if (zero? a)\n    (zero? b)\n    (if (zero? b)\n      (zero? a)\n  \
    \    (if (zero? a)\n        (zero? b)\n        (if (zero? b)\n          (zero?\
    \ a)\n          (if (zero? a)\n            (zero? b)\n            (if (zero? b)\n\
    \              (zero? a)\n              (if (zero? a)\n                (zero?\
    \ b)\n                (if (zero? b)\n                  (zero? a)\n           \
    \       (if (zero? a)\n                    (zero? b)\n                    (if\
    \ (zero? b)\n                      (zero? a)\n                      (if (zero?\
    \ a)\n                        (zero? b)\n                        (if (zero? b)\n\
    \                          (zero? a)\n                          (if (zero? a)\n\
    \                            (zero? b)\n                            (if (zero?\
    \ b)\n                              (zero? a)\n                              (if\
    \ (zero? a)\n                                (zero? b)\n                     \
    \           (if (zero? b)\n                                  (zero? a)\n     \
    \                             (if (zero? a)\n                                \
    \    (zero? b)\n                                    (if (zero? b)\n          \
    \                            (zero? a)\n                                     \
    \ (if (zero? a)\n                                        (zero? b)\n         \
    \                               (if (zero? b)\n                              \
    \            (zero? a)\n                                          (if (zero? a)\n\
    \                                            (zero? b)\n                     \
    \                       (if (zero? b)\n                                      \
    \        (zero? a)\n                                              (if (zero? a)\n\
    \                                                (zero? b)\n                 \
    \                               (if (zero? b)\n                              \
    \                    (zero? a)\n                                             \
    \     (if (zero? a)\n                                                    (zero?\
    \ b)\n                                                    (if (zero? b)\n    \
    \                                                  (zero? a)\n               \
    \                                       (if (zero? a)\n                      \
    \                                  (zero? b)\n                               \
    \    ", "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative?\
    \ a)\n        (multiply (- a) b)\n        (multiply a (- b)))))\n)\n", "  (if\
    \ (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n    \
    \    (multiply (- a) b)\n        (multiply a (- b)))))\n)\n", "  (if (zero? a)\n\
    \    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n        (multiply\
    \ (- a) b)\n        (multiply a (- b)))))\n)\n", "  (if (zero? a)\n    0\n   \
    \ (if (zero? b)\n      0\n      (if (negative? a)\n        (multiply (- a) b)\n\
    \        (multiply a (- b)))))\n)\n", "  (if (zero? a)\n    0\n    (if (zero?\
    \ b)\n      0\n      (if (negative? a)\n        (multiply (- a) b)\n        (multiply\
    \ a (- b)))))\n)\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n      1\n   \
    \   (if (negative? a)\n        (multiply (- a) b)\n        (multiply a (- b)))))\n\
    )\n", "  (if (zero? a)\n    (zero? b)\n    (if (zero? b)\n      (zero? a)\n  \
    \    (if (negative? a)\n        (negative? b)\n        (if (negative? b)\n   \
    \       (negative? a)\n          (if (zero? a)\n            (zero? b)\n      \
    \      (if (negative? b)\n              (negative? a)\n              (multiply\
    \ (multiply (quotient a 10) (quotient b 10)) (quotient (remainder a 10) 10))\n\
    \            )\n            (multiply (multiply (quotient a 10) (quotient b 10))\
    \ (remainder (remainder a 10) 10))\n          )\n          (multiply (quotient\
    \ a 10) (quotient b 10))\n        )\n        (multiply (quotient a 10) (quotient\
    \ b 10))\n      )\n      (multiply (quotient a 10) (quotient b 10))\n    )\n \
    \ )\n)\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative?\
    \ a)\n        (multiply (- a) b)\n        (multiply a (- b)))))\n)\n", "  (if\
    \ (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n    \
    \    (multiply (- a) b)\n        (multiply a (- b)))))\n)\n", "  (if (zero? a)\n\
    \    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n        (multiply\
    \ (- a) b)\n        (multiply a (- b)))))\n)\n", "  (if (zero? a)\n    0\n   \
    \ (if (zero? b)\n      0\n      (if (negative? a)\n        (multiply (- a) b)\n\
    \        (if (negative? b)\n          (multiply a (- b))\n          (multiply\
    \ (abs a) (abs b)))))))\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n     \
    \ 0\n      (if (negative? a)\n        (multiply (- a) b)\n        (multiply a\
    \ (- b)))))\n)\n\n;; Complete the function that takes two strings and returns\
    \ \n;; the number of times that the first string occurs in the second.\n;; Assume\
    \ the input is always valid.\n;; Examples:\n;; >>> (count \"cat\" \"cat\")\n;;\
    \ 2\n;; >>> (count \"cat\" \"dog\")\n;; 0\n;; >>> (count \"cat\" \"cat cat\")\n\
    ;; 2\n;; >>> (count \"cat\" \"cat cat cat\")\n;; 3\n;; >>> (count \"cat\" \"cat\
    \ cat cat cat\")\n;; 4\n;; >>> (count \"cat\" \"cat cat cat cat cat\")\n;; 5\n\
    ;; >>> (count \"cat\" \"cat cat cat cat cat cat\")\n;; 6\n;; >>> (count \"cat\"\
    \ \"cat cat cat cat cat cat cat\")\n;; 7\n;; >>> (count \"cat\" \"cat cat cat\
    \ cat cat cat cat cat\")\n;; 8\n;; >>> (count \"cat\" \"cat cat cat cat cat cat\
    \ cat cat cat\")\n;; 9\n;; >>> (count \"cat\" \"cat cat cat cat cat cat cat cat\
    \ cat cat\")\n;; 10\n;; >>> (count \"cat\" \"cat cat cat cat cat cat cat cat cat\
    \ cat cat\")\n;; 11\n;; >>> (count \"cat\" \"cat cat cat cat cat cat cat cat cat\
    \ cat cat cat\")\n;; 12\n;; >>> (count \"cat\" \"cat cat cat cat cat cat cat cat\
    \ cat cat cat cat cat\")\n;; 13\n;; >>> (count \"cat\" \"cat cat cat cat cat cat\
    \ cat cat cat cat cat cat cat cat\")\n;; 14\n;; >>> (count \"cat\" \"cat cat cat\
    \ cat cat cat cat cat cat cat cat cat cat cat cat\")\n;; 15\n;; >>> (count \"\
    cat\" \"cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat cat\")\n;;\
    \ 16\n;; >>> (count \"cat\" \"cat cat cat cat cat cat cat cat cat cat cat cat\
    \ cat cat cat cat cat\")\n;; 17\n;; >>> (count \"cat\" \"cat cat cat cat cat cat\
    \ cat cat cat cat cat cat cat cat cat cat cat", "  (if (zero? a)\n    0\n    (if\
    \ (zero? b)\n      0\n      (if (negative? a)\n        (multiply (- a) b)\n  \
    \      (multiply a (- b)))))\n)\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n\
    \      0\n      (if (negative? a)\n        (multiply (- a) b)\n        (multiply\
    \ a (- b)))))\n)\n", "  (if (zero? a)\n    (zero? b)\n    (if (zero? b)\n    \
    \  (zero? a)\n      (if (negative? a)\n        (negative? b)\n        (if (negative?\
    \ b)\n          (negative? a)\n          (if (zero? a)\n            (zero? b)\n\
    \            (if (negative? b)\n              (negative? a)\n              (multiply\
    \ (multiply (quotient a 10) (quotient b 10)) (quotient (remainder a 10) 10))\n\
    \            (multiply (multiply (quotient a 10) (quotient b 10)) (remainder (remainder\
    \ a 10) 10))\n          )\n          (multiply (multiply (quotient a 10) (quotient\
    \ b 10)) (remainder (remainder b 10) 10))\n        )\n        (multiply (multiply\
    \ (quotient a 10) (quotient b 10)) (remainder (remainder a 10) 10))\n      )\n\
    \      (multiply (multiply (quotient a 10) (quotient b 10)) (remainder (remainder\
    \ b 10) 10))\n    )\n  )\n)\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n \
    \     0\n      (if (negative? a)\n        (multiply (- a) b)\n        (multiply\
    \ a (- b)))))\n)\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n   \
    \   (if (negative? a)\n        (multiply (- a) b)\n        (if (negative? b)\n\
    \          (- a)\n          (multiply a (- b)))))\n  )\n)\n", "  (if (zero? a)\n\
    \    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n        (multiply\
    \ (- a) b)\n        (multiply a (- b)))))\n)\n", "  (if (zero? a)\n    0\n   \
    \ (if (zero? b)\n      1\n      (if (negative? a)\n        (-1 * (multiply (-\
    \ a) b))\n        (multiply (remainder a 10) (remainder b 10))))))\n\n;; Complete\
    \ the function that takes two strings and returns \n;; true if the first string\
    \ is a permutation of the second.\n;; Assume the input is always valid.\n;; Examples:\n\
    ;; >>> (is-permutation \"abc\" \"cba\")\n;; #t\n;; >>> (is-permutation \"abc\"\
    \ \"abc\")\n;; #t\n;; >>> (is-permutation \"abc\" \"abd\")\n;; #f\n;; >>> (is-permutation\
    \ \"abc\" \"ab\")\n;; #f\n;; >>> (is-permutation \"abc\" \"ab\")\n;; #t\n;; >>>\
    \ (is-permutation \"abc\" \"ab\")\n;; #t\n;; >>> (is-permutation \"abc\" \"ab\"\
    )\n;; #t\n;; >>> (is-permutation \"abc\" \"ab\")\n;; #t\n;; >>> (is-permutation\
    \ \"abc\" \"ab\")\n;; #t\n;; >>> (is-permutation \"abc\" \"ab\")\n;; #t\n;; >>>\
    \ (is-permutation \"abc\" \"ab\")\n;; #t\n;; >>> (is-permutation \"abc\" \"ab\"\
    )\n;; #t\n;; >>> (is-permutation \"abc\" \"ab\")\n;; #t\n;; >>> (is-permutation\
    \ \"abc\" \"ab\")\n;; #t\n;; >>> (is-permutation \"abc\" \"ab\")\n;; #t\n;; >>>\
    \ (is-permutation \"abc\" \"ab\")\n;; #t\n;; >>> (is-permutation \"abc\" \"ab\"\
    )\n;; #t\n;; >>> (is-permutation \"abc\" \"ab\")\n;; #t\n;; >>> (is-permutation\
    \ \"abc\" \"ab\")\n;; #t\n;; >>> (is-permutation \"abc\" \"ab\")\n;; #t\n;; >>>\
    \ (is-permutation \"abc\" \"ab\")\n;; #t\n;; >>> (is-permutation \"abc\" \"ab\"\
    )\n;; #t\n;; >>> (is", "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n \
    \     (if (negative? a)\n        (negate (multiply (- a) b))\n        (if (negative?\
    \ b)\n          (negate (multiply a (- b)))\n          (multiply (multiply (remainder\
    \ a 10) (remainder b 10))\n             (remainder (quotient a 10) (quotient b\
    \ 10))))))))\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if\
    \ (negative? a)\n        (multiply (- a) b)\n        (multiply a (- b)))))\n)\n",
  "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n \
    \       (multiply (- a) b)\n        (multiply a (- b)))))\n)\n", "  (if (zero?\
    \ a)\n    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n        (multiply\
    \ (- a) b)\n        (multiply a (- b)))))\n)\n", "  (if (zero? a)\n    0\n   \
    \ (if (zero? b)\n      0\n      (if (negative? a)\n        (multiply (- a) b)\n\
    \        (multiply a (- b)))))\n)\n", "  (if (zero? a)\n    0\n    (if (zero?\
    \ b)\n      0\n      (if (negative? a)\n        (multiply (- a) b)\n        (if\
    \ (negative? b)\n          (multiply a (- b))\n          (multiply (* 10 a) (*\
    \ 10 b)))))\n  )\n)\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n\
    \      (if (negative? a)\n        (multiply (- a) b)\n        (multiply a (- b)))))\n\
    )\n", "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative?\
    \ a)\n        (multiply (- a) b)\n        (multiply a (- b)))))\n)\n", "  (if\
    \ (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if (negative? a)\n    \
    \    (multiply (- a) b)\n        (if (negative? b)\n          (multiply a (- b))\n\
    \          (multiply (abs a) (abs b)))))))\n", "  (if (zero? a)\n    (zero? b)\n\
    \    (if (zero? b)\n      (zero? a)\n      (if (negative? a)\n        (negative?\
    \ b)\n        (if (negative? b)\n          (negative? a)\n          (if (zero?\
    \ a)\n            (zero? b)\n            (if (negative? b)\n              (negative?\
    \ a)\n              (multiply (multiply (quotient a 10) (quotient b 10)) (quotient\
    \ (remainder a 10) 10))\n            )\n          )\n        )\n      )\n    )\n\
    \  )\n)\n\n;; Complete the function that takes two strings and returns \n;; the\
    \ product of their unit digits.\n;; Assume the input is always valid.\n;; Examples:\n\
    ;; >>> (multiply \"148 412\" \"19 28\")\n;; 16\n;; >>> (multiply \"14 -15\" \"\
    19 28\")\n;; 20", "  (if (zero? a)\n    0\n    (if (zero? b)\n      0\n      (if\
    \ (negative? a)\n        (multiply (- a) b)\n        (if (negative? b)\n     \
    \     (multiply a (- b))\n          (multiply (* 10 a) (* 10 b)))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
