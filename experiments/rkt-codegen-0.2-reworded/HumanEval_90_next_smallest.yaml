name: HumanEval_90_next_smallest
language: rkt
prompt: "#lang racket\n\n;; You are given a list of integers.\n;; Write a function\
  \ next_smallest() that returns the 2nd smallest element of the list.\n;; Return\
  \ #f if there is no such element.\n;; >>> (next_smallest (list 1 2 3 4 5))\n;; 2\n\
  ;; >>> (next_smallest (list 5 1 4 3 2))\n;; 2\n;; >>> (next_smallest (list ))\n\
  ;; #f\n;; >>> (next_smallest (list 1 1))\n;; #f\n(define (next_smallest lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate next_smallest))\n\
  \    (check-equal? (candidate (list 1 2 3 4 5)) 2)\n    (check-equal? (candidate\
  \ (list 5 1 4 3 2)) 2)\n    (check-equal? (candidate (list )) #f)\n    (check-equal?\
  \ (candidate (list 1 1)) #f)\n    (check-equal? (candidate (list 1 1 1 1 0)) 1)\n\
  \    (check-equal? (candidate (list 1 1)) #f)\n    (check-equal? (candidate (list\
  \ -35 34 12 -45)) -35)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n    ((<\
    \ (car lst) (car (cdr lst))) (car (cdr lst)))\n    (car (cdr lst))\n  )\n)\n\n\
    ;; You are given a list of integers.\n;; Write a function next_largest() that\
    \ returns the 2nd largest element of the list.\n;; Return #f if there is no such\
    \ element.\n;; >>> (next_largest (list 1 2 3 4 5))\n;; 2\n;; >>> (next_largest\
    \ (list 5 1 4 3 2))\n;; 4\n;; >>> (next_largest (list ))\n;; #f\n;; >>> (next_largest\
    \ (list 1 1))\n;; #f", "  (cond\n    ((null? lst) #f)\n    ((null? (cdr lst))\
    \ #f)\n    ((> (car lst) (car (cdr lst))) (car (cdr lst)))\n    (else (car (cdr\
    \ lst))))\n)\n\n;; You are given a list of strings.\n;; Write a function next_smallest_string()\
    \ that returns the 2nd smallest string in the list.\n;; Return #f if there is\
    \ no such element.\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\"\
    \ \"d\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\"))\n;; #f\n;; >>> (next_smallest_string (list \"a\" \"a\"))\n;; #f", " \
    \ (cond\n    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n    ((eq (car lst)\
    \ (car (cdr lst))) #f)\n    (else\n      (car (cdr lst)))))\n", "  (cond\n   \
    \ ((null? lst) #f)\n    ((< (car lst) (car (cdr lst))) (car (cdr lst)))\n    (else\
    \ (cdr lst))))\n\n;; You are given a list of strings.\n;; Write a function next_smallest_string()\
    \ that returns the 2nd smallest string in the list.\n;; Return #f if there is\
    \ no such element.\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\"\
    \ \"d\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\" \"f\"))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\"\
    \ \"d\" \"e\" \"f\" \"g\"))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\"\
    \ \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\"))\n;; \"f\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\"))\n;; \"f\"\n;;\
    \ >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"\
    h\" \"i\" \"j\"))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"\
    c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\"))\n;; \"f\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\"\
    ))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"\
    \ \"f\" \"g\" \"h\" \"i\" \"j\" \"k\"", "  (cond\n    [(null? lst) #f]\n    [(<\
    \ (car lst) (car (cdr lst))) #f]\n    [(< (car lst) (car (cdr (cdr lst)))) (car\
    \ (cdr lst))]\n    [else (car (cdr lst))]\n  )\n)\n", "  (cond\n    [(null? lst)\
    \ #f]\n    [(< (car lst) (car (cdr lst))) #f]\n    [(car (cdr lst))]\n  )\n)\n\
    \n;; You are given a list of strings.\n;; Write a function next_smallest_string()\
    \ that returns the 2nd smallest string of the list.\n;; Return #f if there is\
    \ no such element.\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\"\
    \ \"d\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\"))\n;; #f\n;; >>> (next_smallest_string (list \"a\" \"a\"))\n;; #f", " \
    \ (cond\n    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n    ((< (car lst) (car\
    \ (cdr lst))) (car (cdr lst)))\n    (car (cdr lst))\n  )\n)\n\n;; You are given\
    \ a list of strings.\n;; Write a function next_smallest_string() that returns\
    \ the 2nd smallest string in the list.\n;; Return #f if there is no such element.\n\
    ;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\" \"d\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\"))\n;; \"\
    f\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"\
    g\"))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"\
    e\" \"f\" \"g\" \"h\"))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\" \"\
    b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\"))\n;; \"f\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"))\n;; \"f\"\
    \n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\"\
    \ \"h\" \"i\" \"j\" \"k\"))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\"\
    \ \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\"))\n;; \"f\"\
    \n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e", "  (cond\n\
    \    ((null? lst) #f)\n    ((< (car lst) (car (cdr lst))) (car (cdr lst)))\n \
    \   (else (car (cdr lst)))))\n\n;; You are given a list of strings.\n;; Write\
    \ a function next_smallest_string() that returns the 2nd smallest string of the\
    \ list.\n;; Return #f if there is no such element.\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string\
    \ (list \"e\" \"a\" \"b\" \"c\" \"d\"))\n;; \"b\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\"))\n;; \"f\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\"))\n;; \"f\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\"))\n;; \"g\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\"))\n;; \"i\"\n;;\
    \ >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"\
    h\" \"i\" \"j\"))\n;; \"j\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"\
    c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\"))\n;; \"k\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\"\
    ))\n;; \"l\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"\
    \ \"f\" \"g\" \"h\" \"i\" \"j\"", "  (cond\n    [(null? lst) #f]\n    [(< (car\
    \ lst) (car (cdr lst))) #f]\n    [(car (cdr lst))]\n  )\n)\n\n;; You are given\
    \ a list of strings.\n;; Write a function next_smallest_string() that returns\
    \ the 2nd smallest string of the list.\n;; Return #f if there is no such element.\n\
    ;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\" \"d\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; #f\n;;\
    \ >>> (next_smallest_string (list \"a\" \"a\"))\n;; #f", "  (cond\n    ((null?\
    \ lst) #f)\n    ((< (car lst) (car (cdr lst))) (car (cdr lst)))\n    (else (cdr\
    \ lst))))\n", "  (cond\n    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n   \
    \ ((eq (car lst) (car (cdr lst))) #f)\n    (else\n      (setq lst (cdr lst))\n\
    \      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr\
    \ lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst\
    \ (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq\
    \ lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n   \
    \   (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n\
    \      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr\
    \ lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst\
    \ (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq\
    \ lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n   \
    \   (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n\
    \      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr\
    \ lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst\
    \ (cdr lst))\n      (setq", "  (cond\n    ((null? lst) #f)\n    ((null? (cdr lst))\
    \ #f)\n    ((< (car lst) (car (cdr lst))) (car (cdr lst)))\n    (car (cdr lst))\n\
    \  )\n)\n", "  (cond\n    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n    (else\n\
    \      (let ((smallest (car lst)))\n        (if (null? (cdr lst))\n          (car\
    \ lst)\n          (if (null? (cdr (cdr lst)))\n            (car (cdr lst))\n \
    \           (next_smallest (cdr lst)))))))))\n", "  (cond\n    ((null? lst) #f)\n\
    \    ((< (car lst) (car (cdr lst))) #f)\n    (else\n      (cdr (cdr lst))\n  \
    \    (car (cdr (cdr lst))))))\n", "  (cond\n    [(null? lst) #f]\n    [(null?\
    \ (cdr lst)) #f]\n    [(car lst) (car (cdr lst))]\n    [(car lst) (car (cdr lst))]\n\
    \    [(car lst) (car (cdr lst))]\n    [(car lst) (car (cdr lst))]\n    [(car lst)\
    \ (car (cdr lst))]\n    [(car lst) (car (cdr lst))]\n    [(car lst) (car (cdr\
    \ lst))]\n    [(car lst) (car (cdr lst))]\n    [(car lst) (car (cdr lst))]\n \
    \   [(car lst) (car (cdr lst))]\n    [(car lst) (car (cdr lst))]\n    [(car lst)\
    \ (car (cdr lst))]\n    [(car lst) (car (cdr lst))]\n    [(car lst) (car (cdr\
    \ lst))]\n    [(car lst) (car (cdr lst))]\n    [(car lst) (car (cdr lst))]\n \
    \   [(car lst) (car (cdr lst))]\n    [(car lst) (car (cdr lst))]\n    [(car lst)\
    \ (car (cdr lst))]\n    [(car lst) (car (cdr lst))]\n    [(car lst) (car (cdr\
    \ lst))]\n    [(car lst) (car (cdr lst))]\n    [(car lst) (car (cdr lst))]\n \
    \   [(car lst) (car (cdr lst))]\n    [(car lst) (car (cdr lst))]\n    [(car lst)\
    \ (car (cdr lst))]\n    [(car lst) (car (cdr lst))]\n    [(car lst) (car (cdr\
    \ lst))]\n    [(car l", "  (cond\n    ((null? lst) #f)\n    ((< (car lst) (car\
    \ (cdr lst))) (car (cdr lst)))\n    (else (car (cdr lst))))\n)\n\n;; You are given\
    \ a list of strings.\n;; Write a function next_smallest_string() that returns\
    \ the 2nd smallest string of the list.\n;; Return #f if there is no such element.\n\
    ;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\" \"d\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\"))\n;; \"\
    f\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"\
    g\"))\n;; #f\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"\
    \ \"f\" \"g\" \"h\"))\n;; #f", "  (cond\n    ((null? lst) #f)\n    ((null? (cdr\
    \ lst)) #f)\n    ((< (car lst) (car (cdr lst))) (car (cdr lst)))\n    (car (cdr\
    \ lst))\n  )\n)\n", "  (cond\n    ((null? lst) #f)\n    ((< (car lst) (car (cdr\
    \ lst))) (car (cdr lst)))\n    (else (car (cdr lst))))\n)\n\n;; You are given\
    \ a list of strings.\n;; Write a function next_smallest_string() that returns\
    \ the 2nd smallest string of the list.\n;; Return #f if there is no such element.\n\
    ;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\" \"d\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\"))\n;; \"\
    f\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"\
    g\"))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"\
    e\" \"f\" \"g\" \"h\"))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\" \"\
    b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\"))\n;; \"f\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"))\n;; \"f\"\
    \n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\"\
    \ \"h\" \"i\" \"j\" \"k\"))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\"\
    \ \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\"))\n;; \"f\"\
    \n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\"\
    \ \"h\" \"i\" \"j", "  (cond\n    [(null? lst) #f]\n    [(null? (cdr lst)) #f]\n\
    \    [(car (cdr lst))]\n    [(car (cdr (cdr lst)))])\n)\n\n;; You are given a\
    \ list of strings.\n;; Write a function next_smallest_string() that returns the\
    \ 2nd smallest string of the list.\n;; Return #f if there is no such element.\n\
    ;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\" \"d\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\"))\n;; \"\
    f\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"\
    g\"))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"\
    e\" \"f\" \"g\" \"h\"))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\" \"\
    b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\"))\n;; \"f\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"))\n;; \"f\"\
    \n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\"\
    \ \"h\" \"i\" \"j\" \"k\"))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\"\
    \ \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\"))\n;; \"f\"\
    \n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\"\
    \ \"h", "  (cond\n    ((null? lst) #f)\n    ((< (car lst) (car (cdr lst))) (car\
    \ (cdr lst)))\n    (else (car (cdr lst)))))\n", "  (cond\n    ((null? lst) #f)\n\
    \    ((null? (cdr lst)) #f)\n    ((< (car lst) (car (cdr lst))) (car (cdr lst)))\n\
    \    (else (car lst))\n  )\n)\n", "  (cond\n    ((null? lst) #f)\n    ((null?\
    \ (cdr lst)) #f)\n    ((eq (car lst) (car (cdr lst))) #f)\n    (else\n      (car\
    \ (cdr lst)))))\n\n;; >>> (next_smallest (list 1 2 3 4 5))\n;; 2\n;; >>> (next_smallest\
    \ (list 5 1 4 3 2))\n;; 2\n;; >>> (next_smallest (list ))\n;; #f\n;; >>> (next_smallest\
    \ (list 1 1))\n;; #f\n;; >>> (next_smallest (list 1 2 3 4 5 6))\n;; #f\n;; >>>\
    \ (next_smallest (list 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest (list 6 5 4\
    \ 3 2 1))\n;; #f\n;; >>> (next_smallest (list 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest\
    \ (list 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest (list 6 5 4 3 2 1))\n;; #f\n\
    ;; >>> (next_smallest (list 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest (list\
    \ 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest (list 6 5 4 3 2 1))\n;; #f\n;; >>>\
    \ (next_smallest (list 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest (list 6 5 4\
    \ 3 2 1))\n;; #f\n;; >>> (next_smallest (list 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest\
    \ (list 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest (list 6 5 4 3 2 1))\n;; #f\n\
    ;; >>> (next_smallest (list 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest (list\
    \ 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest (list 6 5 4 3 2 1))\n;; #f\n;; >>>\
    \ (next_smallest (list 6 5 4 3 2 1))\n;; #f", "  (cond\n    ((null? lst) #f)\n\
    \    ((= (car lst) (car (cdr lst))) #f)\n    (else\n      (let ((smallest (car\
    \ lst)))\n        (if (null? (cdr lst))\n          (car (cdr lst))\n         \
    \ (else\n            (if (null? (cdr (cdr lst)))\n                (car (cdr (cdr\
    \ lst)))\n                (else\n                  (if (null? (cdr (cdr (cdr lst))))\n\
    \                      (car (cdr (cdr (cdr lst))))\n                      (else\n\
    \                        (car (cdr (cdr (cdr (cdr lst))))))))))))))))\n", "  (cond\n\
    \    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n    ((< (car lst) (car (cdr\
    \ lst))) (car (cdr lst)))\n    (car lst)\n  )\n)\n\n;; You are given a list of\
    \ strings.\n;; Write a function next_smallest_string() that returns the 2nd smallest\
    \ string in the list.\n;; Return #f if there is no such element.\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\"))\n;; \"b\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\"))\n;; \"f\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\"))\n;; \"f\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\"))\n;; \"f\"\n;;\
    \ >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"\
    h\" \"i\" \"j\"))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"\
    c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\"))\n;; \"f\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\"\
    ))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"\
    \ \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\"))\n;; \"f\"\n;; >>> (next",
  "  (cond\n    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n    ((< (car lst) (car\
    \ (cdr lst))) (car (cdr lst)))\n    (else (car lst))\n  )\n)\n", "  (cond\n  \
    \  [(null? lst) #f]\n    [(null? (cdr lst)) #f]\n    [(car (cdr lst))]\n  ))\n\
    \n;; You are given a list of integers.\n;; Write a function smallest_odd_index()\
    \ that returns the index of the smallest odd element in the list.\n;; Return #f\
    \ if there is no such element.\n;; >>> (smallest_odd_index (list 1 2 3 4 5))\n\
    ;; 2\n;; >>> (smallest_odd_index (list 5 1 4 3 2))\n;; 2\n;; >>> (smallest_odd_index\
    \ (list ))\n;; #f\n;; >>> (smallest_odd_index (list 1 1))\n;; #f", "  (cond\n\
    \    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((smallest\
    \ (car lst)))\n        (if (null? (cdr lst))\n          (car lst)\n          (if\
    \ (null? (cdr (cdr lst)))\n            (car (cdr lst))\n            (next_smallest\
    \ (cdr lst)))))))))\n", "  (cond\n    ((null? lst) #f)\n    ((< (car lst) (car\
    \ (cdr lst))) (car (cdr lst)))\n    (else (car (cdr lst))))\n)\n\n;; You are given\
    \ a list of strings.\n;; Write a function next_smallest_string() that returns\
    \ the 2nd smallest string of the list.\n;; Return #f if there is no such element.\n\
    ;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\"))\n;; \"\
    b\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"\
    g\"))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"\
    e\" \"f\" \"g\" \"h\"))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\" \"\
    b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\"))\n;; \"i\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"))\n;; \"i\"\
    \n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\"\
    \ \"h\" \"i\" \"j\" \"k\"))\n;; \"j\"\n;; >>> (next_smallest_string (list \"a\"\
    \ \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\"))\n;; \"k\"\
    \n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\"\
    \ \"h\" \"i\" \"j\" \"k\" \"l\" \"m\"))\n;; \"k\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b", "  (cond\n    ((null? lst) #f)\n    ((< (car lst) (car (cdr\
    \ lst))) #f)\n    (else\n      (cdr (cdr lst))\n      (car (cdr (cdr lst))))))\n",
  "  (cond\n    ((null? lst) #f)\n    ((< (car lst) (car (cdr lst))) #f)\n    (else\n\
    \      (cdr (cdr lst))\n      (car (cdr (cdr lst))))))\n", "  (cond\n    ((null?\
    \ lst) #f)\n    ((null? (cdr lst)) #f)\n    ((eq (car lst) (car (cdr lst))) #f)\n\
    \    (else\n      (let ((smallest (car lst)))\n        (if (null? (cdr lst))\n\
    \          (car lst)\n          (if (eq (car (cdr lst)) smallest)\n          \
    \  (car lst)\n            (next_smallest (cdr lst))))))))\n\n;; You are given\
    \ a list of integers.\n;; Write a function next_largest() that returns the 2nd\
    \ largest element of the list.\n;; Return #f if there is no such element.\n;;\
    \ >>> (next_largest (list 1 2 3 4 5))\n;; 2\n;; >>> (next_largest (list 5 1 4\
    \ 3 2))\n;; 4\n;; >>> (next_largest (list ))\n;; #f\n;; >>> (next_largest (list\
    \ 1 1))\n;; #f", "  (cond\n    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n\
    \    ((eq (car lst) (car (cdr lst))) #f)\n    (else\n      (setq lst (cdr lst))\n\
    \      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr\
    \ lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst\
    \ (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq\
    \ lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n   \
    \   (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n\
    \      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr\
    \ lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst\
    \ (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq\
    \ lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n   \
    \   (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n\
    \      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr\
    \ lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst\
    \ (cdr lst))\n      (setq", "  (cond\n    ((null? lst) #f)\n    ((< (car lst)\
    \ (car (cdr lst))) (car (cdr lst)))\n    (else (car (cdr lst)))))\n", "  (cond\n\
    \    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((smallest\
    \ (car lst)))\n        (if (null? (cdr lst))\n          (car lst)\n          (else\n\
    \            (if (null? (cdr (cdr lst)))\n              (car (cdr lst))\n    \
    \          (else\n                (if (null? (cdr (cdr (cdr lst))))\n        \
    \          (car (cdr (cdr lst)))\n                  (else\n                  \
    \  (car (cdr (cdr (cdr lst))))))))))))))\n", "  (cond\n    [(null? lst) #f]\n\
    \    [(null? (cdr lst)) #f]\n    [(car lst) (car (cdr lst))]\n    [(car lst) (car\
    \ (cdr lst))]\n    [(car lst) (car (cdr lst))]\n    [(car lst) (car (cdr lst))]\n\
    \    [(car lst) (car (cdr lst))]\n    [(car lst) (car (cdr lst))]\n    [(car lst)\
    \ (car (cdr lst))]\n    [(car lst) (car (cdr lst))]\n    [(car lst) (car (cdr\
    \ lst))]\n    [(car lst) (car (cdr lst))]\n    [(car lst) (car (cdr lst))]\n \
    \   [(car lst) (car (cdr lst))]\n    [(car lst) (car (cdr lst))]\n    [(car lst)\
    \ (car (cdr lst))]\n    [(car lst) (car (cdr lst))]\n    [(car lst) (car (cdr\
    \ lst))]\n    [(car lst) (car (cdr lst))]\n    [(car lst) (car (cdr lst))]\n \
    \   [(car lst) (car (cdr lst))]\n    [(car lst) (car (cdr lst))]\n    [(car lst)\
    \ (car (cdr lst))]\n    [(car lst) (car (cdr lst))]\n    [(car lst) (car (cdr\
    \ lst))]\n    [(car lst) (car (cdr lst))]\n    [(car lst) (car (cdr lst))]\n \
    \   [(car lst) (car (cdr lst))]\n    [(car lst) (car (cdr lst))]\n    [(car lst)\
    \ (car (cdr lst))]\n    [(car l", "  (cond\n    ((null? lst) #f)\n    ((null?\
    \ (cdr lst)) #f)\n    (else\n      (let ((smallest (car lst)))\n        (if (null?\
    \ (cdr lst))\n          (car lst)\n          (if (null? (cdr (cdr lst)))\n   \
    \         (car (cdr lst))\n            (next_smallest (cdr lst)))))))))\n", " \
    \ (cond\n    ((null? lst) #f)\n    ((< (car lst) (car (cdr lst))) (car (cdr lst)))\n\
    \    (else (cdr lst))))\n\n;; You are given a list of strings.\n;; Write a function\
    \ next_smallest_string() that returns the 2nd smallest string in the list.\n;;\
    \ Return #f if there is no such element.\n;; >>> (next_smallest_string (list \"\
    a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"\
    e\" \"a\" \"b\" \"c\" \"d\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"\
    a\" \"b\" \"c\" \"d\" \"e\" \"f\"))\n;; \"f\"\n;; >>> (next_smallest_string (list\
    \ \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\"))\n;; \"f\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\"))\n;; \"f\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\"))\n;; \"f\"\n;;\
    \ >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"\
    h\" \"i\" \"j\"))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"\
    c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\"))\n;; \"f\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\"\
    ))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"\
    \ \"f\" \"g\" \"h\" \"i\" \"j\" \"k\"", "  (cond\n    ((null? lst) #f)\n    ((null?\
    \ (cdr lst)) #f)\n    ((< (car lst) (car (cdr lst))) (car (cdr lst)))\n    (car\
    \ lst)\n  )\n)\n", "  (cond\n    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n\
    \    ((< (car lst) (car (cdr lst))) (car (cdr lst)))\n    (car (cdr lst))\n  )\n\
    )\n", "  (cond\n    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n    ((< (car\
    \ lst) (car (cdr lst))) (car (cdr lst)))\n    (else (car (cdr lst))))\n)\n\n;;\
    \ You are given a list of integers.\n;; Write a function next_largest() that returns\
    \ the 2nd largest element of the list.\n;; Return #f if there is no such element.\n\
    ;; >>> (next_largest (list 1 2 3 4 5))\n;; 2\n;; >>> (next_largest (list 5 1 4\
    \ 3 2))\n;; 4\n;; >>> (next_largest (list ))\n;; #f\n;; >>> (next_largest (list\
    \ 1 1))\n;; #f", "  (cond\n    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n\
    \    ((< (car lst) (car (cdr lst))) (car (cdr lst)))\n    (car (cdr lst))\n  )\n\
    )\n\n;; You are given a list of strings.\n;; Write a function next_smallest_string()\
    \ that returns the 2nd smallest string of the list.\n;; Return #f if there is\
    \ no such element.\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\"\
    \ \"d\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\"))\n;; #f\n;; >>> (next_smallest_string (list \"a\" \"a\"))\n;; #f", " \
    \ (cond\n    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n    ((> (car lst) (car\
    \ (cdr lst))) (car (cdr lst)))\n    (else (car lst))\n  )\n)\n", "  (cond\n  \
    \  ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n    ((< (car lst) (car (cdr lst)))\
    \ (car (cdr lst)))\n    (car lst)\n  )\n)\n\n;; You are given a list of strings.\n\
    ;; Write a function next_smallest_string() that returns the 2nd smallest string\
    \ in the list.\n;; Return #f if there is no such element.\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string\
    \ (list \"e\" \"a\" \"b\" \"c\" \"d\"))\n;; \"b\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; #f\n;; >>> (next_smallest_string (list\
    \ \"a\" \"a\"))\n;; #f", "  (cond\n    ((null? lst) #f)\n    ((< (car lst) (car\
    \ (cdr lst))) #f)\n    (else (cdr lst))))\n\n;; You are given a list of strings.\n\
    ;; Write a function next_smallest_string() that returns the 2nd smallest string\
    \ in the list.\n;; Return #f if there is no such element.\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string\
    \ (list \"e\" \"a\" \"b\" \"c\" \"d\"))\n;; \"b\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"a\" \"b\" \"c\" \"d\"))\n;; #f\n;; >>> (next_smallest_string (list\
    \ \"a\" \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; #f", "  (cond\n    ((null? lst) #f)\n\
    \    ((null? (cdr lst)) #f)\n    ((< (car lst) (car (cdr lst))) (car (cdr lst)))\n\
    \    (else (car (cdr lst))))\n)\n\n;; You are given a list of strings.\n;; Write\
    \ a function next_smallest_string() that returns the 2nd smallest string of the\
    \ list.\n;; Return #f if there is no such element.\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string\
    \ (list \"e\" \"a\" \"b\" \"c\" \"d\"))\n;; \"b\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; #f\n;; >>> (next_smallest_string (list\
    \ \"a\" \"a\"))\n;; #f", "  (cond\n    ((null? lst) #f)\n    ((< (car lst) (car\
    \ (cdr lst))) (car (cdr lst)))\n    (else (car (cdr lst))))\n)\n\n;; You are given\
    \ a list of strings.\n;; Write a function next_smallest_string() that returns\
    \ the 2nd smallest string in the list.\n;; Return #f if there is no such element.\n\
    ;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\" \"d\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\"))\n;; \"\
    f\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"\
    g\"))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"\
    e\" \"f\" \"g\" \"h\"))\n;; #f", "  (cond\n    ((null? lst) #f)\n    ((null? (cdr\
    \ lst)) #f)\n    ((eq (car lst) (car (cdr lst))) #f)\n    (else\n      (car (cdr\
    \ lst)))))\n\n;; You are given a list of strings.\n;; Write a function next_smallest_string()\
    \ that returns the 2nd smallest string in the list.\n;; Return #f if there is\
    \ no such element.\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\"\
    \ \"d\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\" \"f\"))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\"\
    \ \"d\" \"e\" \"f\" \"g\"))\n;; #f\n;; >>> (next_smallest_string (list \"a\" \"\
    b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\"))\n;; #f", "  (cond\n    ((null? lst)\
    \ #f)\n    ((< (car lst) (car (cdr lst))) #f)\n    (else\n      (cdr (cdr lst))\n\
    \      (car (cdr (cdr lst))))))\n\n;; >>> (next_smallest (list 1 2 3 4 5))\n;;\
    \ 2\n;; >>> (next_smallest (list 5 1 4 3 2))\n;; 2\n;; >>> (next_smallest (list\
    \ ))\n;; #f\n;; >>> (next_smallest (list 1 1))\n;; #f\n;; >>> (next_smallest (list\
    \ 1 2 3 4 5 6))\n;; #f\n;; >>> (next_smallest (list 1 2 3 4 5 6 7))\n;; #f\n;;\
    \ >>> (next_smallest (list 1 2 3 4 5 6 7 8))\n;; #f\n;; >>> (next_smallest (list\
    \ 1 2 3 4 5 6 7 8 9))\n;; #f\n;; >>> (next_smallest (list 1 2 3 4 5 6 7 8 9 10))\n\
    ;; #f\n;; >>> (next_smallest (list 1 2 3 4 5 6 7 8 9 10 11))\n;; #f\n;; >>> (next_smallest\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12))\n;; #f\n;; >>> (next_smallest (list 1 2 3\
    \ 4 5 6 7 8 9 10 11 12 13))\n;; #f\n;; >>> (next_smallest (list 1 2 3 4 5 6 7\
    \ 8 9 10 11 12 13 14))\n;; #f\n;; >>> (next_smallest (list 1 2 3 4 5 6 7 8 9 10\
    \ 11 12 13 14 15))\n;; #f\n;; >>> (next_smallest (list 1 2 3 4 5 6 7 8 9 10 11\
    \ 12 13 14 15 16))\n;; #f\n;; >>> (next_smallest (list 1 2 3 4 5 6 7 8 9 10 11\
    \ 12 13 14 15 16 17))\n;; #f\n;; >>> (next_smallest (list 1 2 3 4 5 6 7 8 9 10\
    \ 11 12 13 14 15 16 17 18))\n;; #f\n;; >>> (next_smallest (list 1 2 3 4 5 6 7\
    \ 8 9 10 11 12 13 14 15 16 17", "  (cond\n    ((null? lst) #f)\n    ((null? (cdr\
    \ lst)) #f)\n    ((< (car lst) (car (cdr lst))) (car (cdr lst)))\n    (car (cdr\
    \ lst))\n  )\n)\n", "  (cond\n    ((null? lst) #f)\n    ((< (car lst) (car (cdr\
    \ lst))) #f)\n    (else\n      (cdr (cdr lst))\n      (car (cdr (cdr lst))))))\n",
  "  (cond\n    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n    (else\n      (let\
    \ ((smallest (car lst)))\n        (if (null? (cdr lst))\n          (car lst)\n\
    \          (if (null? (cdr (cdr lst)))\n            (car (cdr lst))\n        \
    \    (next_smallest (cdr lst)))))))))\n", "  (cond\n    ((null? lst) #f)\n   \
    \ ((null? (cdr lst)) #f)\n    ((< (car lst) (car (cdr lst))) (car (cdr lst)))\n\
    \    (car (cdr lst))\n  )\n)\n", "  (cond\n    [(null? lst) #f]\n    [(null? (cdr\
    \ lst)) #f]\n    [(car lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car lst)\
    \ (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car\
    \ lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car\
    \ lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car\
    \ lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car\
    \ lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car\
    \ lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car\
    \ lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car\
    \ lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car\
    \ lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car\
    \ lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car\
    \ lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car l", "  (cond\n    [(null?\
    \ lst) #f]\n    [(< (car lst) (car (cdr lst))) #f]\n    [(car (cdr lst))]\n  ))\n\
    \n;; You are given a list of strings.\n;; Write a function next_smallest_string()\
    \ that returns the 2nd smallest string in the list.\n;; Return #f if there is\
    \ no such element.\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\"\
    \ \"d\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\"))\n;; #f\n;; >>> (next_smallest_string (list \"a\" \"a\"))\n;; #f", " \
    \ (cond\n    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n    ((< (car lst) (car\
    \ (cdr lst))) (car (cdr lst)))\n    (car (cdr lst))\n  )\n)\n", "  (cond\n   \
    \ ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n    ((eq (car lst) (car (cdr lst)))\
    \ #f)\n    (else\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n   \
    \   (setq lst (cdr lst))\n      (car lst))))\n", "  (cond\n    ((null? lst) #f)\n\
    \    ((null? (cdr lst)) #f)\n    ((< (car lst) (car (cdr lst))) (car (cdr lst)))\n\
    \    (car lst)\n  )\n)\n", "  (cond\n    ((null? lst) #f)\n    ((< (car lst) (car\
    \ (cdr lst))) #f)\n    (else\n      (car (cdr lst)))))\n\n;; You are given a list\
    \ of strings.\n;; Write a function next_smallest_string() that returns the 2nd\
    \ smallest string in the list.\n;; Return #f if there is no such element.\n;;\
    \ >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\" \"d\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; #f\n;;\
    \ >>> (next_smallest_string (list \"a\" \"a\"))\n;; #f", "  (cond\n    ((null?\
    \ lst) #f)\n    ((null? (cdr lst)) #f)\n    ((< (car lst) (car (cdr lst))) (car\
    \ (cdr lst)))\n    (else (car (cdr lst)))\n  )\n)\n", "  (cond\n    ((null? lst)\
    \ #f)\n    ((< (car lst) (car (cdr lst))) #f)\n    (else\n      (cdr (cdr lst))\n\
    \      (car (cdr lst)))))\n", "  (cond\n    [(null? lst) #f]\n    [(< (car lst)\
    \ (car (cdr lst))) #f]\n    [(< (car lst) (car (cdr (cdr lst)))) (car (cdr (cdr\
    \ lst)))]\n    [else (car (cdr lst))]))\n", "  (cond\n    ((null? lst) #f)\n \
    \   ((null? (cdr lst)) #f)\n    ((eq (car lst) (car (cdr lst))) #f)\n    (else\n\
    \      (car (cdr lst)))\n  )\n)\n", "  (cond\n    ((null? lst) #f)\n    ((null?\
    \ (cdr lst)) #f)\n    ((< (car lst) (car (cdr lst))) (car (cdr lst)))\n    (else\
    \ (car (cdr lst))))\n)\n\n;; You are given a list of strings.\n;; Write a function\
    \ next_smallest_string() that returns the 2nd smallest string in the list.\n;;\
    \ Return #f if there is no such element.\n;; >>> (next_smallest_string (list \"\
    a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"\
    e\" \"a\" \"b\" \"c\" \"d\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"\
    a\" \"b\" \"c\" \"d\" \"e\"))\n;; #f\n;; >>> (next_smallest_string (list \"a\"\
    \ \"a\"))\n;; #f", "  (cond\n    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n\
    \    ((< (car lst) (car (cdr lst))) (car (cdr lst)))\n    (else (car (cdr lst))))\n\
    )\n\n;; You are given a list of strings.\n;; Write a function next_smallest_string()\
    \ that returns the 2nd smallest string in the list.\n;; Return #f if there is\
    \ no such element.\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\" \"f\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\"\
    \ \"d\" \"e\" \"f\" \"g\"))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\"\
    \ \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\"))\n;; \"f\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\"))\n;; \"f\"\n;;\
    \ >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"\
    h\" \"i\" \"j\"))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"\
    c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\"))\n;; \"f\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\"\
    ))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"\
    \ \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\"))\n;; \"f\"\n;; >>>", "  (cond\n\
    \    ((null? lst) #f)\n    ((< (car lst) (car (cdr lst))) (car (cdr lst)))\n \
    \   (else (car (cdr lst))))\n)\n\n;; You are given a list of strings.\n;; Write\
    \ a function next_smallest_string() that returns the 2nd smallest string in the\
    \ list.\n;; Return #f if there is no such element.\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string\
    \ (list \"e\" \"a\" \"b\" \"c\" \"d\"))\n;; \"b\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\"))\n;; \"f\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\"))\n;; \"f\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\"))\n;; #f", "  (cond\n\
    \    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n    ((< (car lst) (car (cdr\
    \ lst))) (car (cdr lst)))\n    (else (car (cdr lst))))\n)\n\n;; You are given\
    \ a list of strings.\n;; Write a function next_smallest_string() that returns\
    \ the 2nd smallest string in the list.\n;; Return #f if there is no such element.\n\
    ;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\"))\n;; \"\
    b\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"\
    g\"))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"\
    e\" \"f\" \"g\" \"h\"))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\" \"\
    b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\"))\n;; \"i\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"))\n;; \"i\"\
    \n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\"\
    \ \"h\" \"i\" \"j\" \"k\"))\n;; \"k\"\n;; >>> (next_smallest_string (list \"a\"\
    \ \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\"))\n;; \"k\"\
    \n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\"\
    \ \"h\" \"i\" \"j\" \"k\" \"l\" \"m\"))\n;; \"m\"\n;; >>>", "  (cond\n    ((null?\
    \ lst) #f)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((smallest (car\
    \ lst)))\n        (if (null? (cdr lst))\n          (car lst)\n          (if (null?\
    \ (cdr (cdr lst)))\n            (car (cdr lst))\n            (next_smallest (cdr\
    \ lst)))))))))\n", "  (cond\n    [(null? lst) #f]\n    [(null? (cdr lst)) #f]\n\
    \    [(car lst) (car (cdr lst))]\n    [(car lst) (car (cdr lst))]\n    [(car lst)\
    \ (car (cdr lst))]\n    [(car lst) (car (cdr lst))]\n    [(car lst) (car (cdr\
    \ lst))]\n    [(car lst) (car (cdr lst))]\n    [(car lst) (car (cdr lst))]\n \
    \   [(car lst) (car (cdr lst))]\n    [(car lst) (car (cdr lst))]\n    [(car lst)\
    \ (car (cdr lst))]\n    [(car lst) (car (cdr lst))]\n    [(car lst) (car (cdr\
    \ lst))]\n    [(car lst) (car (cdr lst))]\n    [(car lst) (car (cdr lst))]\n \
    \   [(car lst) (car (cdr lst))]\n    [(car lst) (car (cdr lst))]\n    [(car lst)\
    \ (car (cdr lst))]\n    [(car lst) (car (cdr lst))]\n    [(car lst) (car (cdr\
    \ lst))]\n    [(car lst) (car (cdr lst))]\n    [(car lst) (car (cdr lst))]\n \
    \   [(car lst) (car (cdr lst))]\n    [(car lst) (car (cdr lst))]\n    [(car lst)\
    \ (car (cdr lst))]\n    [(car lst) (car (cdr lst))]\n    [(car lst) (car (cdr\
    \ lst))]\n    [(car lst) (car (cdr lst))]\n    [(car lst) (car (cdr lst))]\n \
    \   [(car l", "  (cond\n    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n   \
    \ ((< (car lst) (car (cdr lst))) (car (cdr lst)))\n    (car (cdr lst))\n  )\n\
    )\n\n;; You are given a list of strings.\n;; Write a function next_smallest_string()\
    \ that returns the 2nd smallest string in the list.\n;; Return #f if there is\
    \ no such element.\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\"\
    \ \"d\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\"))\n;; #f\n;; >>> (next_smallest_string (list \"a\" \"a\"))\n;; #f", " \
    \ (cond\n    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n    ((> (car lst) (car\
    \ (cdr lst))) (car (cdr lst)))\n    (else (car lst))\n  )\n)\n", "  (cond\n  \
    \  [(null? lst) #f]\n    [(null? (cdr lst)) #f]\n    [(car lst) (cdr lst)]\n \
    \   [(car lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n\
    \    [(car lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n\
    \    [(car lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n\
    \    [(car lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n\
    \    [(car lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n\
    \    [(car lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n\
    \    [(car lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n\
    \    [(car lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n\
    \    [(car lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n\
    \    [(car lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n\
    \    [(car lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n\
    \    [(car l", "  (cond\n    ((null? lst) #f)\n    ((< (car lst) (car (cdr lst)))\
    \ #f)\n    (else\n      (cdr (cdr lst))\n      (car (cdr (cdr lst))))))\n\n;;\
    \ You are given a list of strings.\n;; Write a function next_smallest_string()\
    \ that returns the 2nd smallest string in the list.\n;; Return #f if there is\
    \ no such element.\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\" \"f\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\"\
    \ \"d\" \"e\" \"f\" \"g\"))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\"\
    \ \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\"))\n;; \"f\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\"))\n;; #f", "  (cond\n\
    \    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((smallest\
    \ (car lst)))\n        (if (null? (cdr lst))\n          (cdr smallest)\n     \
    \     (if (null? (cdr smallest))\n            (car lst)\n            (next_smallest\
    \ (cdr smallest)))))\n    )\n  )\n)\n\n;; You are given a list of strings.\n;;\
    \ Write a function next_smallest_string() that returns the 2nd smallest string\
    \ of the list.\n;; Return #f if there is no such element.\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string\
    \ (list \"e\" \"a\" \"b\" \"c\" \"d\"))\n;; \"b\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; #f\n;; >>> (next_smallest_string (list\
    \ \"a\" \"a\"))\n;; #f", "  (cond\n    [(null? lst) #f]\n    [(< (car lst) (car\
    \ (cdr lst))) #f]\n    [(car (cdr lst))]\n  )\n)\n\n;; You are given a list of\
    \ strings.\n;; Write a function next_smallest_string() that returns the 2nd smallest\
    \ string in the list.\n;; Return #f if there is no such element.\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string\
    \ (list \"e\" \"a\" \"b\" \"c\" \"d\"))\n;; \"b\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; #f\n;; >>> (next_smallest_string (list\
    \ \"a\" \"a\"))\n;; #f", "  (cond\n    ((null? lst) #f)\n    ((null? (cdr lst))\
    \ #f)\n    ((< (car lst) (car (cdr lst))) (car (cdr lst)))\n    (else (car (cdr\
    \ lst)))\n  )\n)\n", "  (cond\n    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n\
    \    ((< (car lst) (car (cdr lst))) (car (cdr lst)))\n    (car lst)\n  )\n)\n\n\
    ;; You are given a list of strings.\n;; Write a function next_smallest_string()\
    \ that returns the 2nd smallest string of the list.\n;; Return #f if there is\
    \ no such element.\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\"\
    \ \"d\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\"))\n;; #f\n;; >>> (next_smallest_string (list \"a\" \"a\"))\n;; #f", " \
    \ (cond\n    ((null? lst) #f)\n    ((< (car lst) (car (cdr lst))) (car (cdr lst)))\n\
    \    (else (cdr lst))))\n", "  (cond\n    ((null? lst) #f)\n    ((null? (cdr lst))\
    \ #f)\n    ((> (car lst) (car (cdr lst))) (car (cdr lst)))\n    (car lst)\n  )\n\
    )\n", "  (cond\n    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n    ((< (car\
    \ lst) (car (cdr lst))) (car (cdr lst)))\n    (car (cdr lst))\n  )\n)\n\n;; You\
    \ are given a list of integers.\n;; Write a function next_largest() that returns\
    \ the 2nd largest element of the list.\n;; Return #f if there is no such element.\n\
    ;; >>> (next_largest (list 1 2 3 4 5))\n;; 2\n;; >>> (next_largest (list 5 1 4\
    \ 3 2))\n;; 4\n;; >>> (next_largest (list ))\n;; #f\n;; >>> (next_largest (list\
    \ 1 1))\n;; #f", "  (cond\n    ((null? lst) #f)\n    ((< (car lst) (car (cdr lst)))\
    \ #f)\n    (else\n      (cdr (cdr lst))\n      (car (cdr lst))\n    )\n  )\n)\n",
  "  (cond\n    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n    ((< (car lst) (car\
    \ (cdr lst))) (car (cdr lst)))\n    (car (cdr lst))\n  )\n)\n\n;; You are given\
    \ a list of strings.\n;; Write a function next_smallest_string() that returns\
    \ the 2nd smallest string in the list.\n;; Return #f if there is no such element.\n\
    ;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\" \"d\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; #f\n;;\
    \ >>> (next_smallest_string (list \"a\" \"a\"))\n;; #f", "  (cond\n    ((null?\
    \ lst) #f)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((smallest (car\
    \ lst)))\n        (if (null? (cdr lst))\n          (car lst)\n          (if (null?\
    \ (cdr (cdr lst)))\n            (car (cdr lst))\n            (next_smallest (cdr\
    \ lst)))))))))\n", "  (cond\n    ((null? lst) #f)\n    ((< (car lst) (car (cdr\
    \ lst))) #f)\n    (else\n      (cdr (cdr lst))\n      (car (cdr lst))\n    )\n\
    \  )\n)\n", "  (cond\n    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n    ((<\
    \ (car lst) (car (cdr lst))) (car (cdr lst)))\n    (else (car (cdr lst)))\n  )\n\
    )\n", "  (cond\n    ((null? lst) #f)\n    ((< (car lst) (car (cdr lst))) (car\
    \ (cdr lst)))\n    (else (cdr lst))))\n", "  (cond\n    [(null? lst) #f]\n   \
    \ [(< (car lst) (car (cdr lst))) #f]\n    [(< (car lst) (car (cdr (cdr lst))))\
    \ (car (cdr (cdr lst)))]\n    [else (car (cdr (cdr lst)))])\n", "  (cond\n   \
    \ ((null? lst) #f)\n    ((= (car lst) (car (cdr lst))) #f)\n    (else\n      (car\
    \ (cdr lst)))))\n", "  (cond\n    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n\
    \    ((< (car lst) (car (cdr lst))) (car (cdr lst)))\n    (car (cdr lst))\n  )\n\
    )\n\n;; You are given a list of strings.\n;; Write a function next_smallest_string()\
    \ that returns the 2nd smallest string in the list.\n;; Return #f if there is\
    \ no such element.\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\"\
    \ \"d\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\" \"f\"))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\"\
    \ \"d\" \"e\" \"f\" \"g\"))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\"\
    \ \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\"))\n;; \"f\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\"))\n;; \"f\"\n;;\
    \ >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"\
    h\" \"i\" \"j\"))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"\
    c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\"))\n;; \"f\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\"\
    ))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e",
  "  (cond\n    [(null? lst) #f]\n    [(< (car lst) (car (cdr lst))) #f]\n    [(car\
    \ (cdr lst))]\n  )\n)\n\n;; You are given a list of integers.\n;; Write a function\
    \ next_largest() that returns the 2nd largest element of the list.\n;; Return\
    \ #f if there is no such element.\n;; >>> (next_largest (list 1 2 3 4 5))\n;;\
    \ 2\n;; >>> (next_largest (list 5 1 4 3 2))\n;; 4\n;; >>> (next_largest (list\
    \ ))\n;; #f\n;; >>> (next_largest (list 1 1))\n;; #f", "  (cond\n    ((null? lst)\
    \ #f)\n    ((= (car lst) (car (cdr lst))) #f)\n    (else\n      (setq lst (cdr\
    \ lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst\
    \ (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq\
    \ lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n   \
    \   (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n\
    \      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr\
    \ lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst\
    \ (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq\
    \ lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n   \
    \   (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n\
    \      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr\
    \ lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst\
    \ (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq\
    \ lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq l", "  (cond\n    ((null?\
    \ lst) #f)\n    ((null? (cdr lst)) #f)\n    ((> (car lst) (car (cdr lst))) (car\
    \ (cdr lst)))\n    (else (car (cdr lst)))\n  )\n)\n\n;; You are given a list of\
    \ integers.\n;; Write a function next_largest() that returns the 2nd largest element\
    \ of the list.\n;; Return #f if there is no such element.\n;; >>> (next_largest\
    \ (list 1 2 3 4 5))\n;; 2\n;; >>> (next_largest (list 5 1 4 3 2))\n;; 4\n;; >>>\
    \ (next_largest (list ))\n;; #f\n;; >>> (next_largest (list 1 1))\n;; #f", " \
    \ (cond\n    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n    ((eq (car lst)\
    \ (car (cdr lst))) #f)\n    (else\n      (car (cdr lst)))))\n\n;; You are given\
    \ a list of strings.\n;; Write a function next_smallest_string() that returns\
    \ the 2nd smallest string in the list.\n;; Return #f if there is no such element.\n\
    ;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\" \"d\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; #f\n;;\
    \ >>> (next_smallest_string (list \"a\" \"a\"))\n;; #f", "  (cond\n    ((null?\
    \ lst) #f)\n    ((null? (cdr lst)) #f)\n    ((> (car lst) (car (cdr lst))) (car\
    \ (cdr lst)))\n    (else (car (cdr lst))))\n)\n\n;; You are given a list of integers.\n\
    ;; Write a function next_largest() that returns the 2nd largest element of the\
    \ list.\n;; Return #f if there is no such element.\n;; >>> (next_largest (list\
    \ 1 2 3 4 5))\n;; 2\n;; >>> (next_largest (list 5 1 4 3 2))\n;; 4\n;; >>> (next_largest\
    \ (list ))\n;; #f\n;; >>> (next_largest (list 1 1))\n;; #f", "  (cond\n    [(null?\
    \ lst) #f]\n    [(< (car lst) (car (cdr lst))) #f]\n    [(car (cdr lst))]\n  )\n\
    )\n\n;; You are given a list of strings.\n;; Write a function next_smallest_string()\
    \ that returns the 2nd smallest string in the list.\n;; Return #f if there is\
    \ no such element.\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\"\
    \ \"d\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\"))\n;; #f\n;; >>> (next_smallest_string (list \"a\" \"a\"))\n;; #f", " \
    \ (cond\n    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n    ((< (car lst) (car\
    \ (cdr lst))) (car (cdr lst)))\n    (car lst)\n  )\n)\n\n;; You are given a list\
    \ of strings.\n;; Write a function next_smallest_string() that returns the 2nd\
    \ smallest string in the list.\n;; Return #f if there is no such element.\n;;\
    \ >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\" \"d\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; #f\n;;\
    \ >>> (next_smallest_string (list \"a\" \"a\"))\n;; #f", "  (let ((smallest (car\
    \ lst)))\n    (if (null? lst)\n      #f\n      (let ((next (cdr lst)))\n     \
    \   (if (null? next)\n          (car lst)\n          (if (null? (cdr next))\n\
    \            (car lst)\n            (next_smallest (cdr lst)))))\n      (car lst)))\n\
    )\n\n;; You are given a list of strings.\n;; Write a function next_smallest_string()\
    \ that returns the 2nd smallest string in the list.\n;; Return #f if there is\
    \ no such element.\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\"\
    \ \"d\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\" \"f\"))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\"\
    \ \"d\" \"e\" \"f\" \"g\"))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\"\
    \ \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\"))\n;; \"f\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\"))\n;; \"f\"\n;;\
    \ >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"\
    h\" \"i\" \"j\"))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"\
    c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\"))\n;; \"f\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\"\
    ))\n;; \"f", "  (cond\n    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n    ((<\
    \ (car lst) (car (cdr lst))) (car (cdr lst)))\n    (car (cdr lst))\n  )\n)\n\n\
    ;; You are given a list of strings.\n;; Write a function next_smallest_string()\
    \ that returns the 2nd smallest string in the list.\n;; Return #f if there is\
    \ no such element.\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\"\
    \ \"d\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\"))\n;; #f\n;; >>> (next_smallest_string (list \"a\" \"a\"))\n;; #f", " \
    \ (cond\n    [(null? lst) #f]\n    [(< (car lst) (car (cdr lst))) #f]\n    [(car\
    \ (cdr lst))]\n  )\n)\n\n;; You are given a list of strings.\n;; Write a function\
    \ next_smallest_string() that returns the 2nd smallest string in the list.\n;;\
    \ Return #f if there is no such string.\n;; >>> (next_smallest_string (list \"\
    a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"\
    e\" \"a\" \"b\" \"c\" \"d\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"\
    a\" \"a\" \"b\" \"c\" \"d\"))\n;; #f\n;; >>> (next_smallest_string (list \"a\"\
    \ \"b\" \"c\" \"d\" \"e\"))\n;; #f", "  (cond\n    [(null? lst) #f]\n    [(< (car\
    \ lst) (car (cdr lst))) #f]\n    [(< (car lst) (car (cdr (cdr lst)))) (car (cdr\
    \ lst))]\n    [else (car (cdr lst))]\n  )\n)\n\n;; You are given a list of strings.\n\
    ;; Write a function next_smallest_string() that returns the 2nd smallest string\
    \ of the list.\n;; Return #f if there is no such element.\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string\
    \ (list \"e\" \"a\" \"b\" \"c\" \"d\"))\n;; \"b\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; #f\n;; >>> (next_smallest_string (list\
    \ \"a\" \"a\"))\n;; #f", "  (cond\n    [(null? lst) #f]\n    [(null? (cdr lst))\
    \ #f]\n    [(car lst) (car (cdr lst))]\n    [(car lst) (car (cdr lst))]\n    [(car\
    \ lst) (car (cdr lst))]\n    [(car lst) (car (cdr lst))]\n    [(car lst) (car\
    \ (cdr lst))]\n    [(car lst) (car (cdr lst))]\n    [(car lst) (car (cdr lst))]\n\
    \    [(car lst) (car (cdr lst))]\n    [(car lst) (car (cdr lst))]\n    [(car lst)\
    \ (car (cdr lst))]\n    [(car lst) (car (cdr lst))]\n    [(car lst) (car (cdr\
    \ lst))]\n    [(car lst) (car (cdr lst))]\n    [(car lst) (car (cdr lst))]\n \
    \   [(car lst) (car (cdr lst))]\n    [(car lst) (car (cdr lst))]\n    [(car lst)\
    \ (car (cdr lst))]\n    [(car lst) (car (cdr lst))]\n    [(car lst) (car (cdr\
    \ lst))]\n    [(car lst) (car (cdr lst))]\n    [(car lst) (car (cdr lst))]\n \
    \   [(car lst) (car (cdr lst))]\n    [(car lst) (car (cdr lst))]\n    [(car lst)\
    \ (car (cdr lst))]\n    [(car lst) (car (cdr lst))]\n    [(car lst) (car (cdr\
    \ lst))]\n    [(car lst) (car (cdr lst))]\n    [(car lst) (car (cdr lst))]\n \
    \   [(car l", "  (cond\n    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n   \
    \ ((< (car lst) (car (cdr lst))) (car (cdr lst)))\n    (else (car (cdr lst)))\n\
    \  )\n)\n\n;; You are given a list of strings.\n;; Write a function next_smallest_string()\
    \ that returns the 2nd smallest string of the list.\n;; Return #f if there is\
    \ no such element.\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\"\
    \ \"d\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"a\" \"a\" \"b\" \"c\"\
    \ \"d\"))\n;; #f\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"\
    e\"))\n;; #f", "  (cond\n    ((null? lst) #f)\n    ((< (car lst) (car (cdr lst)))\
    \ (car (cdr lst)))\n    (else (car (cdr lst))))\n)\n\n;; You are given a list\
    \ of integers.\n;; Write a function next_largest() that returns the 2nd largest\
    \ element of the list.\n;; Return #f if there is no such element.\n;; >>> (next_largest\
    \ (list 1 2 3 4 5))\n;; 2\n;; >>> (next_largest (list 5 1 4 3 2))\n;; 4\n;; >>>\
    \ (next_largest (list ))\n;; #f\n;; >>> (next_largest (list 1 1))\n;; #f", " \
    \ (cond\n    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n    ((eq (car lst)\
    \ (car (cdr lst))) #f)\n    (else\n      (let ((smallest (car lst)))\n       \
    \ (if (null? (cdr lst))\n          (car lst)\n          (if (eq (car (cdr lst))\
    \ smallest)\n            (car lst)\n            (next_smallest (cdr lst))))))))\n",
  "  (cond\n    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n    ((< (car lst) (car\
    \ (cdr lst))) (car (cdr lst)))\n    (else (car (cdr lst)))\n  )\n)\n\n;; You are\
    \ given a list of integers.\n;; Write a function next_largest() that returns the\
    \ 2nd largest element of the list.\n;; Return #f if there is no such element.\n\
    ;; >>> (next_largest (list 1 2 3 4 5))\n;; 4\n;; >>> (next_largest (list 5 1 4\
    \ 3 2))\n;; 4\n;; >>> (next_largest (list ))\n;; #f\n;; >>> (next_largest (list\
    \ 1 1))\n;; #f", "  (cond\n    [(null? lst) #f]\n    [(< (car lst) (car (cdr lst)))\
    \ #f]\n    [(car (cdr lst))]\n  ))\n\n;; You are given a list of strings.\n;;\
    \ Write a function next_smallest_string() that returns the 2nd smallest string\
    \ in the list.\n;; Return #f if there is no such element.\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string\
    \ (list \"e\" \"a\" \"b\" \"c\" \"d\"))\n;; \"b\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; #f\n;; >>> (next_smallest_string (list\
    \ \"a\" \"a\"))\n;; #f", "  (cond\n    ((null? lst) #f)\n    ((null? (cdr lst))\
    \ #f)\n    ((eq (car lst) (car (cdr lst))) #f)\n    (else\n      (setq lst (cdr\
    \ lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst\
    \ (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq\
    \ lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n   \
    \   (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n\
    \      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr\
    \ lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst\
    \ (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq\
    \ lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n   \
    \   (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n\
    \      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr\
    \ lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst\
    \ (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq\
    \ lst (cdr lst))\n      (setq", "  (cond\n    ((null? lst) #f)\n    ((null? (cdr\
    \ lst)) #f)\n    (else\n      (let ((smallest (car lst)))\n        (if (null?\
    \ (cdr lst))\n          (car lst)\n          (if (null? (cdr (cdr lst)))\n   \
    \         (car (cdr lst))\n            (if (null? (cdr (cdr (cdr lst))))\n   \
    \           (car (cdr (cdr lst)))\n              (if (null? (cdr (cdr (cdr (cdr\
    \ lst))))))\n                (car (cdr (cdr (cdr (cdr lst))))))\n            (car\
    \ (cdr (cdr (cdr (cdr (cdr lst))))))))\n        (next_smallest (cdr lst))))))\n\
    \n;; You are given a list of strings.\n;; Write a function next_smallest_string()\
    \ that returns the 2nd smallest string of the list.\n;; Return #f if there is\
    \ no such element.\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\" \"f\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\"\
    \ \"d\" \"e\" \"f\" \"g\"))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\"\
    \ \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\"))\n;; \"f\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\"))\n;; \"f\"\n;;\
    \ >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"\
    h\" \"i\" \"j\"))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"\
    c\" \"d\" \"e\"", "  (cond\n    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n\
    \    ((< (car lst) (car (cdr lst))) (car (cdr lst)))\n    (else (car (cdr lst))))\n\
    )\n\n;; You are given a list of strings.\n;; Write a function next_smallest_string()\
    \ that returns the 2nd smallest string in the list.\n;; Return #f if there is\
    \ no such element.\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\"\
    \ \"d\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\"))\n;; #f\n;; >>> (next_smallest_string (list \"a\" \"a\"))\n;; #f", " \
    \ (cond\n    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n    ((eq (car lst)\
    \ (car (cdr lst))) #f)\n    (else\n      (let ((smallest (car lst)))\n       \
    \ (if (null? (cdr lst))\n          (car lst)\n          (if (eq (car lst) smallest)\n\
    \            (car lst)\n            (next_smallest (cdr lst))))))))\n", "  (cond\n\
    \    [(null? lst) #f]\n    [(< (car lst) (car (cdr lst))) #f]\n    [(car (cdr\
    \ lst))]\n  )\n)\n\n;; You are given a list of strings.\n;; Write a function next_smallest_string()\
    \ that returns the 2nd smallest string of the list.\n;; Return #f if there is\
    \ no such element.\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\"\
    \ \"d\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\"))\n;; #f\n;; >>> (next_smallest_string (list \"a\" \"a\"))\n;; #f", " \
    \ (cond\n    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n    ((eq (car lst)\
    \ (car (cdr lst))) #f)\n    (else\n      (car (cdr lst)))))\n\n;; You are given\
    \ a list of strings.\n;; Write a function next_smallest_string() that returns\
    \ the 2nd smallest string in the list.\n;; Return #f if there is no such element.\n\
    ;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\"))\n;; \"\
    b\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"\
    g\"))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"\
    e\" \"f\" \"g\" \"h\"))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\" \"\
    b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\"))\n;; #f\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"))\n;; #f",
  "  (cond\n    [(null? lst) #f]\n    [(< (car lst) (car (cdr lst))) #f]\n    [(car\
    \ (cdr lst))]\n  )\n)\n\n;; You are given a list of strings.\n;; Write a function\
    \ next_smallest_string() that returns the 2nd smallest string of the list.\n;;\
    \ Return #f if there is no such element.\n;; >>> (next_smallest_string (list \"\
    a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"\
    e\" \"a\" \"b\" \"c\" \"d\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"\
    a\" \"b\" \"c\" \"d\" \"e\"))\n;; #f\n;; >>> (next_smallest_string (list \"a\"\
    \ \"a\"))\n;; #f", "  (cond\n    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n\
    \    ((< (car lst) (car (cdr lst))) (car (cdr lst)))\n    (car (cdr lst))\n  )\n\
    )\n\n;; You are given a list of integers.\n;; Write a function next_largest()\
    \ that returns the 2nd largest element of the list.\n;; Return #f if there is\
    \ no such element.\n;; >>> (next_largest (list 1 2 3 4 5))\n;; 2\n;; >>> (next_largest\
    \ (list 5 1 4 3 2))\n;; 4\n;; >>> (next_largest (list ))\n;; #f\n;; >>> (next_largest\
    \ (list 1 1))\n;; #f", "  (cond\n    ((null? lst) #f)\n    ((null? (cdr lst))\
    \ #f)\n    ((< (car lst) (car (cdr lst))) (car (cdr lst)))\n    (else (car (cdr\
    \ lst)))\n  )\n)\n\n;; You are given a list of strings.\n;; Write a function next_smallest_string()\
    \ that returns the 2nd smallest string in the list.\n;; Return #f if there is\
    \ no such element.\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\"\
    \ \"d\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"a\" \"a\" \"b\" \"c\"\
    \ \"d\"))\n;; #f\n;; >>> (next_smallest_string (list \"a\" \"a\" \"b\" \"c\" \"\
    d\" \"e\"))\n;; #f", "  (cond\n    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n\
    \    ((eq (car lst) (car (cdr lst))) #f)\n    (else\n      (let ((smallest (car\
    \ lst)))\n        (if (null? (cdr lst))\n          (car lst)\n          (if (null?\
    \ (cdr (cdr lst)))\n            (car (cdr lst))\n            (next_smallest (cdr\
    \ lst)))))))))\n", "  (cond\n    ((null? lst) #f)\n    ((< (car lst) (car (cdr\
    \ lst))) #f)\n    (else\n      (cdr (cdr lst))\n      (car (cdr (cdr lst))))))\n",
  "  (cond\n    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n    ((eq (car lst) (car\
    \ (cdr lst))) #f)\n    (else\n      (let ((smallest (car lst)))\n        (let\
    \ ((smallest_index (car (cdr lst))))\n          (if (eq (car (cdr (cdr lst)))\
    \ (car (cdr (cdr lst))))\n            (car (cdr (cdr (cdr lst))))\n          \
    \  (car (cdr (cdr (cdr (cdr lst)))))))))))\n", "  (cond\n    ((null? lst) #f)\n\
    \    ((null? (cdr lst)) #f)\n    ((< (car lst) (car (cdr lst))) (car (cdr lst)))\n\
    \    (else (car (cdr lst))))\n)\n\n;; You are given a list of strings.\n;; Write\
    \ a function next_smallest_string() that returns the 2nd smallest string in the\
    \ list.\n;; Return #f if there is no such element.\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string\
    \ (list \"e\" \"a\" \"b\" \"c\" \"d\"))\n;; \"b\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\"))\n;; \"f\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\"))\n;; \"f\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\"))\n;; \"f\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\"))\n;; \"f\"\n;;\
    \ >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"\
    h\" \"i\" \"j\"))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"\
    c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\"))\n;; \"f\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\"\
    ))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"",
  "  (cond\n    [(null? lst) #f]\n    [(< (car lst) (car (cdr lst))) #f]\n    [(<\
    \ (car lst) (car (cdr (cdr lst)))) (car (cdr lst))]\n    [else (car (cdr lst))]\n\
    \  )\n)\n", "  (cond\n    ((null? lst) #f)\n    ((< (car lst) (car (cdr lst)))\
    \ (car (cdr lst)))\n    (else (car (cdr lst))))\n)\n\n;; You are given a list\
    \ of strings.\n;; Write a function next_smallest_string() that returns the 2nd\
    \ smallest string in the list.\n;; Return #f if there is no such element.\n;;\
    \ >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\" \"d\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; #f\n;;\
    \ >>> (next_smallest_string (list \"a\" \"a\"))\n;; #f", "  (cond\n    ((null?\
    \ lst) #f)\n    ((null? (cdr lst)) #f)\n    ((eq (car lst) (car (cdr lst))) #f)\n\
    \    (else\n      (let ((smallest (car lst)))\n        (if (null? (cdr lst))\n\
    \          (car lst)\n          (if (eq (car (cdr lst)) smallest)\n          \
    \  (car (cdr lst))\n            (next_smallest (cdr lst)))))))\n)\n\n;; You are\
    \ given a list of strings.\n;; Write a function next_smallest_string() that returns\
    \ the 2nd smallest string in the list.\n;; Return #f if there is no such element.\n\
    ;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\" \"d\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\"))\n;; \"\
    f\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"\
    g\"))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"\
    e\" \"f\" \"g\" \"h\"))\n;; #f\n;; >>> (next_smallest_string (list \"a\" \"b\"\
    \ \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\"))\n;; #f", "  (cond\n    ((null? lst)\
    \ #f)\n    ((null? (cdr lst)) #f)\n    ((< (car lst) (car (cdr lst))) (car (cdr\
    \ lst)))\n    (car lst)\n  )\n)\n", "  (cond\n    ((null? lst) #f)\n    ((null?\
    \ (cdr lst)) #f)\n    ((< (car lst) (car (cdr lst))) (car (cdr lst)))\n    (car\
    \ (cdr lst))\n  )\n)\n\n;; You are given a list of strings.\n;; Write a function\
    \ next_smallest_string() that returns the 2nd smallest string in the list.\n;;\
    \ Return #f if there is no such element.\n;; >>> (next_smallest_string (list \"\
    a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"\
    a\" \"b\" \"c\" \"d\" \"e\" \"f\"))\n;; \"b\"\n;; >>> (next_smallest_string (list\
    \ \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\"))\n;; \"f\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\"))\n;; \"f\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\"))\n;; \"i\"\n;;\
    \ >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"\
    h\" \"i\" \"j\"))\n;; \"i\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"\
    c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\"))\n;; \"k\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\"\
    ))\n;; \"k\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"\
    \ \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\"))\n;; \"m\"\n;;", "  (cond\n\
    \    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n    ((< (car lst) (car (cdr\
    \ lst))) (car (cdr lst)))\n    (car (cdr lst))\n  )\n)\n\n;; You are given a list\
    \ of strings.\n;; Write a function next_smallest_string() that returns the 2nd\
    \ smallest string in the list.\n;; Return #f if there is no such element.\n;;\
    \ >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\" \"d\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; #f\n;;\
    \ >>> (next_smallest_string (list \"a\" \"a\"))\n;; #f", "  (cond\n    ((null?\
    \ lst) #f)\n    ((null? (cdr lst)) #f)\n    ((< (car lst) (car (cdr lst))) (car\
    \ (cdr lst)))\n    (car lst)\n  )\n)\n", "  (cond\n    [(null? lst) #f]\n    [(<\
    \ (car lst) (car (cdr lst))) #f]\n    [(car (cdr lst))]\n  )\n)\n\n;; You are\
    \ given a list of strings.\n;; Write a function next_smallest_string() that returns\
    \ the 2nd smallest string in the list.\n;; Return #f if there is no such element.\n\
    ;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\" \"d\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; #f\n;;\
    \ >>> (next_smallest_string (list \"a\" \"a\"))\n;; #f", "  (cond\n    ((null?\
    \ lst) #f)\n    ((null? (cdr lst)) #f)\n    ((eq (car lst) (car (cdr lst))) #f)\n\
    \    (else\n      (car (cdr lst)))))\n", "  (let ((smallest (car lst)))\n    (if\
    \ (null? lst)\n      #f\n      (let ((next (cdr lst)))\n        (if (null? next)\n\
    \          (car lst)\n          (if (null? (cdr next))\n            (car next)\n\
    \            (next_smallest (cdr next))))))))\n\n;; >>> (next_smallest (list 1\
    \ 2 3 4 5 6))\n;; 2\n;; >>> (next_smallest (list 5 1 4 3 2))\n;; 2\n;; >>> (next_smallest\
    \ (list ))\n;; #f\n;; >>> (next_smallest (list 1 1))\n;; #f\n;; >>> (next_smallest\
    \ (list 1 2 3 4 5 6))\n;; 2\n;; >>> (next_smallest (list 5 1 4 3 2))\n;; 2\n;;\
    \ >>> (next_smallest (list 1 2 3 4 5 6 7))\n;; 2\n;; >>> (next_smallest (list\
    \ 5 1 4 3 2))\n;; 2\n;; >>> (next_smallest (list 1 2 3 4 5 6 7 8))\n;; 2\n;; >>>\
    \ (next_smallest (list 5 1 4 3 2))\n;; 2\n;; >>> (next_smallest (list 1 2 3 4\
    \ 5 6 7 8 9))\n;; 2\n;; >>> (next_smallest (list 5 1 4 3 2))\n;; 2\n;; >>> (next_smallest\
    \ (list 1 2 3 4 5 6 7 8 9 10))\n;; 2\n;; >>> (next_smallest (list 5 1 4 3 2))\n\
    ;; 2\n;; >>> (next_smallest (list 1 2 3 4 5 6 7 8 9 10 11))\n;; 2\n;; >>> (next_smallest\
    \ (list 5 1 4 3 2))\n;; 2\n;; >>> (next_smallest (list 1 2 3 4 5 6 7 8 9 10 11\
    \ 12))\n;; 2\n;; >>> (next_smallest (list 5 1 4 3 2))\n;; 2\n;; >>> (next_smallest\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13))\n;; 2\n;; >>> (next_smallest (list 5 1\
    \ 4 3 2))\n;; 2\n;; >>> (next_smallest (list 1 2 3 4 5 6", "  (cond\n    ((null?\
    \ lst) #f)\n    ((< (car lst) (car (cdr lst))) #f)\n    (else\n      (cdr (cdr\
    \ lst))\n      (car (cdr (cdr lst))))))\n\n;; You are given a list of integers.\n\
    ;; Write a function next_largest() that returns the 2nd largest element of the\
    \ list.\n;; Return #f if there is no such element.\n;; >>> (next_largest (list\
    \ 1 2 3 4 5))\n;; 2\n;; >>> (next_largest (list 5 1 4 3 2))\n;; 4\n;; >>> (next_largest\
    \ (list ))\n;; #f\n;; >>> (next_largest (list 1 1))\n;; #f", "  (cond\n    [(null?\
    \ lst) #f]\n    [(< (car lst) (car (cdr lst))) #f]\n    [(car (cdr lst))]\n  ))\n\
    \n;; >>> (next_smallest (list 1 2 3 4 5))\n;; 2\n;; >>> (next_smallest (list 5\
    \ 1 4 3 2))\n;; 2\n;; >>> (next_smallest (list ))\n;; #f\n;; >>> (next_smallest\
    \ (list 1 1))\n;; #f\n;; >>> (next_smallest (list 1 2 3 4 5 6))\n;; #f\n;; >>>\
    \ (next_smallest (list 1 2 3 4 5 6 7))\n;; #f\n;; >>> (next_smallest (list 1 2\
    \ 3 4 5 6 7 8))\n;; #f\n;; >>> (next_smallest (list 1 2 3 4 5 6 7 8 9))\n;; #f\n\
    ;; >>> (next_smallest (list 1 2 3 4 5 6 7 8 9 10))\n;; #f\n;; >>> (next_smallest\
    \ (list 1 2 3 4 5 6 7 8 9 10 11))\n;; #f\n;; >>> (next_smallest (list 1 2 3 4\
    \ 5 6 7 8 9 10 11 12))\n;; #f\n;; >>> (next_smallest (list 1 2 3 4 5 6 7 8 9 10\
    \ 11 12 13))\n;; #f\n;; >>> (next_smallest (list 1 2 3 4 5 6 7 8 9 10 11 12 13\
    \ 14))\n;; #f\n;; >>> (next_smallest (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15))\n\
    ;; #f\n;; >>> (next_smallest (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16))\n\
    ;; #f\n;; >>> (next_smallest (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17))\n\
    ;; #f\n;; >>> (next_smallest (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18))\n\
    ;; #f\n;; >>> (next_smallest (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\
    \ 19))\n;; #f\n;; >>> (next", "  (cond\n    ((null? lst) #f)\n    ((null? (cdr\
    \ lst)) #f)\n    ((eq (car lst) (car (cdr lst))) #f)\n    (else\n      (setq lst\
    \ (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq\
    \ lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n   \
    \   (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n\
    \      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr\
    \ lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst\
    \ (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq\
    \ lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n   \
    \   (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n\
    \      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr\
    \ lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst\
    \ (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq\
    \ lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n   \
    \   (setq lst (cdr lst))\n      (setq", "  (cond\n    ((null? lst) #f)\n    ((null?\
    \ (cdr lst)) #f)\n    ((eq (car lst) (car (cdr lst))) #f)\n    (else\n      (car\
    \ (cdr lst)))))\n\n;; You are given a list of integers.\n;; Write a function next_largest()\
    \ that returns the 2nd largest element of the list.\n;; Return #f if there is\
    \ no such element.\n;; >>> (next_largest (list 1 2 3 4 5))\n;; 2\n;; >>> (next_largest\
    \ (list 5 1 4 3 2))\n;; 4\n;; >>> (next_largest (list ))\n;; #f\n;; >>> (next_largest\
    \ (list 1 1))\n;; #f", "  (cond\n    ((null? lst) #f)\n    ((null? (cdr lst))\
    \ #f)\n    ((< (car lst) (car (cdr lst))) (car (cdr lst)))\n    (else (car (cdr\
    \ lst)))\n  )\n)\n\n;; You are given a list of strings.\n;; Write a function next_smallest_string()\
    \ that returns the 2nd smallest string of the list.\n;; Return #f if there is\
    \ no such element.\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\"\
    \ \"d\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\" \"f\"))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\"\
    \ \"d\" \"e\" \"f\" \"g\"))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\"\
    \ \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\"))\n;; \"f\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\"))\n;; \"f\"\n;;\
    \ >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"\
    h\" \"i\" \"j\"))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"\
    c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\"))\n;; \"f\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\"\
    ))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"", " \
    \ (cond\n    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n    ((< (car lst) (car\
    \ (cdr lst))) (car (cdr lst)))\n    (car (cdr lst))\n  )\n)\n", "  (cond\n   \
    \ ((null? lst) #f)\n    ((< (car lst) (car (cdr lst))) (car (cdr lst)))\n    (else\
    \ (car (cdr lst)))))\n", "  (cond\n    [(null? lst) #f]\n    [(< (car lst) (car\
    \ (cdr lst))) #f]\n    [(car (cdr lst))]\n  )\n)\n\n;; You are given a list of\
    \ strings.\n;; Write a function next_smallest_string() that returns the 2nd smallest\
    \ string in the list.\n;; Return #f if there is no such element.\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string\
    \ (list \"e\" \"a\" \"b\" \"c\" \"d\"))\n;; \"b\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; #f\n;; >>> (next_smallest_string (list\
    \ \"a\" \"a\"))\n;; #f", "  (cond\n    [(null? lst) #f]\n    [(null? (cdr lst))\
    \ #f]\n    [(car lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car lst) (cdr\
    \ lst)]\n    [(car lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car lst)\
    \ (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car\
    \ lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car\
    \ lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car\
    \ lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car\
    \ lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car\
    \ lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car\
    \ lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car\
    \ lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car\
    \ lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car\
    \ lst) (cdr lst)]\n    [(car lst) (cdr lst)]\n    [(car l", "  (cond\n    ((null?\
    \ lst) #f)\n    ((< (car lst) (car (cdr lst))) #f)\n    (else\n      (cdr (cdr\
    \ lst))\n      (car lst))))\n", "  (cond\n    ((null? lst) #f)\n    ((null? (cdr\
    \ lst)) #f)\n    ((< (car lst) (car (cdr lst))) (car (cdr lst)))\n    (car lst)\n\
    \  )\n)\n\n;; You are given a list of strings.\n;; Write a function next_smallest_string()\
    \ that returns the 2nd smallest string in the list.\n;; Return #f if there is\
    \ no such element.\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\"\
    \ \"d\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\"))\n;; #f\n;; >>> (next_smallest_string (list \"a\" \"a\"))\n;; #f", " \
    \ (cond\n    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n    ((< (car lst) (car\
    \ (cdr lst))) (car (cdr lst)))\n    (car (cdr lst))\n  )\n)\n\n;; You are given\
    \ a list of strings.\n;; Write a function next_smallest_string() that returns\
    \ the 2nd smallest string in the list.\n;; Return #f if there is no such element.\n\
    ;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\" \"d\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\"))\n;; \"\
    f\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"\
    g\"))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"\
    e\" \"f\" \"g\" \"h\"))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\" \"\
    b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\"))\n;; \"f\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"))\n;; \"f\"\
    \n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\"\
    \ \"h\" \"i\" \"j\" \"k\"))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\"\
    \ \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\"))\n;; \"f\"\
    \n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e", "  (cond\n\
    \    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n    ((< (car lst) (car (cdr\
    \ lst))) (car (cdr lst)))\n    (car (cdr lst))\n  )\n)\n", "  (cond\n    ((null?\
    \ lst) #f)\n    ((null? (cdr lst)) #f)\n    ((< (car lst) (car (cdr lst))) (car\
    \ (cdr lst)))\n    (car (cdr lst))\n  )\n)\n", "  (cond\n    ((null? lst) #f)\n\
    \    ((null? (cdr lst)) #f)\n    ((< (car lst) (car (cdr lst))) (car (cdr lst)))\n\
    \    (else (car (cdr lst))))\n)\n", "  (cond\n    ((null? lst) #f)\n    ((null?\
    \ (cdr lst)) #f)\n    ((eq (car lst) (car (cdr lst))) #f)\n    (else\n      (setq\
    \ lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n   \
    \   (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n\
    \      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr\
    \ lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst\
    \ (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq\
    \ lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n   \
    \   (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n\
    \      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr\
    \ lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst\
    \ (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq\
    \ lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n   \
    \   (setq lst (cdr lst))\n      (setq lst (cdr lst))\n      (setq lst (cdr lst))\n\
    \      (setq lst (cdr lst))\n      (setq", "  (cond\n    ((null? lst) #f)\n  \
    \  ((null? (cdr lst)) #f)\n    ((< (car lst) (car (cdr lst))) (car (cdr lst)))\n\
    \    (car (cdr lst))\n  )\n)\n", "  (cond\n    ((null? lst) #f)\n    ((< (car\
    \ lst) (car (cdr lst))) (cdr lst))\n    (else (cdr lst))))\n", "  (cond\n    ((null?\
    \ lst) #f)\n    ((null? (cdr lst)) #f)\n    ((< (car lst) (car (cdr lst))) (car\
    \ (cdr lst)))\n    (else (car (cdr lst)))\n  )\n)\n", "  (cond\n    [(null? lst)\
    \ #f]\n    [(< (car lst) (car (cdr lst))) #f]\n    [(< (car lst) (car (cdr (cdr\
    \ lst)))) (car (cdr (cdr lst)))]\n    [else (car (cdr (cdr lst)))])\n", "  (cond\n\
    \    ((null? lst) #f)\n    ((< (car lst) (car (cdr lst))) #f)\n    (else\n   \
    \   (cdr (cdr lst))\n      (car (cdr (cdr lst))))))\n\n;; >>> (next_smallest (list\
    \ 1 2 3 4 5))\n;; 2\n;; >>> (next_smallest (list 5 1 4 3 2))\n;; 2\n;; >>> (next_smallest\
    \ (list ))\n;; #f\n;; >>> (next_smallest (list 1 1))\n;; #f\n;; >>> (next_smallest\
    \ (list 1 2 3 4 5 6))\n;; #f\n;; >>> (next_smallest (list 6 5 4 3 2 1))\n;; #f\n\
    ;; >>> (next_smallest (list 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest (list\
    \ 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest (list 6 5 4 3 2 1))\n;; #f\n;; >>>\
    \ (next_smallest (list 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest (list 6 5 4\
    \ 3 2 1))\n;; #f\n;; >>> (next_smallest (list 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest\
    \ (list 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest (list 6 5 4 3 2 1))\n;; #f\n\
    ;; >>> (next_smallest (list 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest (list\
    \ 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest (list 6 5 4 3 2 1))\n;; #f\n;; >>>\
    \ (next_smallest (list 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest (list 6 5 4\
    \ 3 2 1))\n;; #f\n;; >>> (next_smallest (list 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest\
    \ (list 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest (list 6 5 4 3 2 1))\n;; #f",
  "  (let ((smallest (first lst)))\n    (if (null? lst)\n      #f\n      (let ((next\
    \ (first (cdr lst))))\n        (if (null? next)\n          (car lst)\n       \
    \   (next_smallest (cdr lst)))))\n    smallest))\n\n;; You are given a list of\
    \ strings.\n;; Write a function next_smallest_string() that returns the 2nd smallest\
    \ string in the list.\n;; Return #f if there is no such element.\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string\
    \ (list \"e\" \"a\" \"b\" \"c\" \"d\"))\n;; \"b\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; #f\n;; >>> (next_smallest_string (list\
    \ \"a\" \"a\"))\n;; #f", "  (cond\n    ((null? lst) #f)\n    ((null? (cdr lst))\
    \ #f)\n    ((< (car lst) (car (cdr lst))) (car (cdr lst)))\n    (else (car (cdr\
    \ lst))))\n)\n\n;; You are given a list of strings.\n;; Write a function next_smallest_string()\
    \ that returns the 2nd smallest string in the list.\n;; Return #f if there is\
    \ no such element.\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\"\
    \ \"d\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\"))\n;; #f\n;; >>> (next_smallest_string (list \"a\" \"a\"))\n;; #f", " \
    \ (cond\n    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n    ((eq (car lst)\
    \ (car (cdr lst))) #f)\n    (else\n      (let ((smallest (car lst)))\n       \
    \ (if (null? (cdr lst))\n          (car lst)\n          (if (eq (car lst) smallest)\n\
    \            (car lst)\n            (next_smallest (cdr lst))))))))\n", "  (cond\n\
    \    [(null? lst) #f]\n    [(null? (cdr lst)) #f]\n    [(car (cdr lst))]\n  ))\n\
    \n;; You are given a list of strings.\n;; Write a function next_smallest_string()\
    \ that returns the 2nd smallest string of the list.\n;; Return #f if there is\
    \ no such element.\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\"\
    \ \"d\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"a\" \"a\" \"b\" \"c\"\
    \ \"d\"))\n;; #f\n;; >>> (next_smallest_string (list \"a\" \"a\" \"b\" \"c\" \"\
    d\" \"e\"))\n;; #f", "  (cond\n    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n\
    \    ((< (car lst) (car (cdr lst))) (car (cdr lst)))\n    (else (car (cdr lst))))\n\
    )\n\n;; You are given a list of strings.\n;; Write a function next_smallest_string()\
    \ that returns the 2nd smallest string in the list.\n;; Return #f if there is\
    \ no such element.\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\"\
    \ \"d\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\"))\n;; #f\n;; >>> (next_smallest_string (list \"a\" \"a\"))\n;; #f", " \
    \ (cond\n    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n    ((< (car lst) (car\
    \ (cdr lst))) (car (cdr lst)))\n    (else (car (cdr lst)))\n  )\n)\n\n;; You are\
    \ given a list of strings.\n;; Write a function next_smallest_string() that returns\
    \ the 2nd smallest string in the list.\n;; Return #f if there is no such element.\n\
    ;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\" \"d\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; #f\n;;\
    \ >>> (next_smallest_string (list \"a\" \"a\"))\n;; #f", "  (cond\n    ((null?\
    \ lst) #f)\n    ((null? (cdr lst)) #f)\n    ((< (car lst) (car (cdr lst))) (car\
    \ (cdr lst)))\n    (car (cdr lst))\n  )\n)\n", "  (cond\n    ((null? lst) #f)\n\
    \    ((null? (cdr lst)) #f)\n    ((< (car lst) (car (cdr lst))) (car (cdr lst)))\n\
    \    (car (cdr lst))\n  )\n)\n\n;; You are given a list of strings.\n;; Write\
    \ a function next_smallest_string() that returns the 2nd smallest string in the\
    \ list.\n;; Return #f if there is no such element.\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string\
    \ (list \"e\" \"a\" \"b\" \"c\" \"d\"))\n;; \"b\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; #f\n;; >>> (next_smallest_string (list\
    \ \"a\" \"a\"))\n;; #f", "  (cond\n    ((null? lst) #f)\n    ((< (car lst) (car\
    \ (cdr lst))) (car (cdr lst)))\n    (else (car (cdr lst)))))\n\n;; #lang scheme",
  "  (cond\n    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n    ((< (car lst) (car\
    \ (cdr lst))) (car (cdr lst)))\n    (else (car lst))\n  )\n)\n\n;; You are given\
    \ a list of strings.\n;; Write a function next_smallest_string() that returns\
    \ the 2nd smallest string in the list.\n;; Return #f if there is no such element.\n\
    ;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\" \"d\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\"))\n;; \"\
    f\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"\
    g\"))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"\
    e\" \"f\" \"g\" \"h\"))\n;; #f", "  (cond\n    ((null? lst) #f)\n    ((< (car\
    \ lst) (car (cdr lst))) #f)\n    (else\n      (cdr (cdr lst))\n      (car (cdr\
    \ lst)))))\n\n;; You are given a list of strings.\n;; Write a function next_smallest_string()\
    \ that returns the 2nd smallest string in the list.\n;; Return #f if there is\
    \ no such string.\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\"\
    \ \"d\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\" \"f\"))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\"\
    \ \"d\" \"e\" \"f\" \"g\"))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\"\
    \ \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\"))\n;; #f\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\"))\n;; #f", "  (cond\n\
    \    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n    ((< (car lst) (car (cdr\
    \ lst))) (car (cdr lst)))\n    (else (car (cdr lst)))\n  )\n)\n\n;; You are given\
    \ a list of strings.\n;; Write a function next_smallest_string() that returns\
    \ the 2nd smallest string of the list.\n;; Return #f if there is no such element.\n\
    ;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\" \"d\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; #f\n;;\
    \ >>> (next_smallest_string (list \"a\" \"a\"))\n;; #f", "  (cond\n    ((null?\
    \ lst) #f)\n    ((null? (cdr lst)) #f)\n    ((< (car lst) (car (cdr lst))) (car\
    \ (cdr lst)))\n    (else (car (cdr lst))))\n)\n", "  (cond\n    ((null? lst) #f)\n\
    \    ((< (car lst) (car (cdr lst))) #f)\n    (else\n      (cdr (cdr lst))\n  \
    \    (car (cdr (cdr lst))))))\n\n;; >>> (next_smallest (list 1 2 3 4 5))\n;; 2\n\
    ;; >>> (next_smallest (list 5 1 4 3 2))\n;; 2\n;; >>> (next_smallest (list ))\n\
    ;; #f\n;; >>> (next_smallest (list 1 1))\n;; #f\n;; >>> (next_smallest (list 1\
    \ 2 3 4 5 6))\n;; #f\n;; >>> (next_smallest (list 1 2 3 4 5 6 7))\n;; #f\n;; >>>\
    \ (next_smallest (list 1 2 3 4 5 6 7 8))\n;; #f\n;; >>> (next_smallest (list 1\
    \ 2 3 4 5 6 7 8 9))\n;; #f\n;; >>> (next_smallest (list 1 2 3 4 5 6 7 8 9 10))\n\
    ;; #f\n;; >>> (next_smallest (list 1 2 3 4 5 6 7 8 9 10 11))\n;; #f\n;; >>> (next_smallest\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12))\n;; #f\n;; >>> (next_smallest (list 1 2 3\
    \ 4 5 6 7 8 9 10 11 12 13))\n;; #f\n;; >>> (next_smallest (list 1 2 3 4 5 6 7\
    \ 8 9 10 11 12 13 14))\n;; #f\n;; >>> (next_smallest (list 1 2 3 4 5 6 7 8 9 10\
    \ 11 12 13 14 15))\n;; #f\n;; >>> (next_smallest (list 1 2 3 4 5 6 7 8 9 10 11\
    \ 12 13 14 15 16))\n;; #f\n;; >>> (next_smallest (list 1 2 3 4 5 6 7 8 9 10 11\
    \ 12 13 14 15 16 17))\n;; #f\n;; >>> (next_smallest (list 1 2 3 4 5 6 7 8 9 10\
    \ 11 12 13 14 15 16 17 18))\n;; #f\n;; >>> (next_smallest (list 1 2 3 4 5 6 7\
    \ 8 9 10 11 12 13 14 15 16 17", "  (cond\n    ((null? lst) #f)\n    ((< (car lst)\
    \ (car (cdr lst))) #f)\n    (else (cdr lst))))\n\n;; You are given a list of strings.\n\
    ;; Write a function next_smallest_string() that returns the 2nd smallest string\
    \ in the list.\n;; Return #f if there is no such element.\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string\
    \ (list \"e\" \"a\" \"b\" \"c\" \"d\"))\n;; \"b\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\"))\n;; \"f\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\"))\n;; #f\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\"))\n;; #f", "  (cond\n\
    \    [(null? lst) #f]\n    [(< (car lst) (car (cdr lst))) #f]\n    [(car (cdr\
    \ lst))]\n  )\n)\n", "  (cond\n    [(null? lst) #f]\n    [(< (car lst) (car (cdr\
    \ lst))) #f]\n    [(< (car lst) (car (cdr (cdr lst)))) (car (cdr lst))]\n    [else\
    \ (car (cdr lst))]\n  )\n)\n", "  (let ((smallest (car lst)))\n    (if (null?\
    \ lst)\n      #f\n      (let ((next (cdr lst)))\n        (if (null? next)\n  \
    \        (car lst)\n          (if (null? (cdr next))\n            (car lst)\n\
    \            (next_smallest (cdr lst)))))\n      (next_smallest (cdr lst))))\n",
  "  (cond\n    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n    ((< (car lst) (car\
    \ (cdr lst))) (car (cdr lst)))\n    (car (cdr lst))\n  )\n)\n\n;; You are given\
    \ a list of strings.\n;; Write a function next_smallest_string() that returns\
    \ the 2nd smallest string in the list.\n;; Return #f if there is no such element.\n\
    ;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\" \"d\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\"))\n;; \"\
    f\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"\
    g\"))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"\
    e\" \"f\" \"g\" \"h\"))\n;; \"g\"\n;; >>> (next_smallest_string (list \"a\" \"\
    b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\"))\n;; \"i\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"))\n;; \"j\"\
    \n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\"\
    \ \"h\" \"i\" \"j\" \"k\"))\n;; \"k\"\n;; >>> (next_smallest_string (list \"a\"\
    \ \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\"))\n;; \"l\"\
    \n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e", "  (cond\n\
    \    ((null? lst) #f)\n    ((< (car lst) (car (cdr lst))) (car lst))\n    (else\
    \ (cdr lst))\n  ))\n", "  (cond\n    ((null? lst) #f)\n    ((null? (cdr lst))\
    \ #f)\n    ((< (car lst) (car (cdr lst))) (car (cdr lst)))\n    (car (cdr lst))\n\
    \  )\n)\n", "  (cond\n    ((null? lst) #f)\n    ((< (car lst) (car (cdr lst)))\
    \ (car (cdr lst)))\n    (else (car (cdr lst)))))\n", "  (cond\n    ((null? lst)\
    \ #f)\n    ((null? (cdr lst)) #f)\n    ((< (car lst) (car (cdr lst))) (car (cdr\
    \ lst)))\n    (car lst)\n  )\n)\n", "  (cond\n    [(null? lst) #f]\n    [(< (car\
    \ lst) (car (cdr lst))) #f]\n    [(car (cdr lst))]\n  )\n)\n\n;; You are given\
    \ a list of strings.\n;; Write a function next_smallest_string() that returns\
    \ the 2nd smallest string in the list.\n;; Return #f if there is no such element.\n\
    ;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\" \"d\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; #f\n;;\
    \ >>> (next_smallest_string (list \"a\" \"a\"))\n;; #f", "  (let ((smallest (car\
    \ lst)))\n    (if (null? lst)\n      #f\n      (let ((next (cdr lst)))\n     \
    \   (if (null? next)\n          (car lst)\n          (if (null? (cdr next))\n\
    \            (car lst)\n            (next_smallest (cdr lst))))))))\n\n;; >>>\
    \ (next_smallest (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20))\n\
    ;; 2\n;; >>> (next_smallest (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\
    \ 19 20))\n;; 2\n;; >>> (next_smallest (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14\
    \ 15 16 17 18 19 20))\n;; 2\n;; >>> (next_smallest (list 1 2 3 4 5 6 7 8 9 10\
    \ 11 12 13 14 15 16 17 18 19 20))\n;; 2\n;; >>> (next_smallest (list 1 2 3 4 5\
    \ 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20))\n;; 2\n;; >>> (next_smallest (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20))\n;; 2\n;; >>> (next_smallest\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20))\n;; 2\n;; >>> (next_smallest\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20))\n;; 2\n;; >>> (next_smallest\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20))\n;; 2\n;; >>> (next_smallest\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20))\n;; 2\n;; >>> (next_smallest\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20))\n;; 2\n;; >>> (next_smallest\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20))\n;; 2\n;; >>> (next_smallest\
    \ (list 1 2 3 4 5 6 7", "  (let ((smallest (car lst)))\n    (if (null? lst)\n\
    \      #f\n      (let ((smallest (car lst)))\n        (if (null? lst)\n      \
    \    #f\n          (let ((smallest (car lst)))\n            (if (null? lst)\n\
    \              #f\n              (let ((smallest (car lst)))\n               \
    \ (if (null? lst)\n                  #f\n                  (let ((smallest (car\
    \ lst)))\n                    (if (null? lst)\n                      #f\n    \
    \                  (let ((smallest (car lst)))\n                        (if (null?\
    \ lst)\n                          #f\n                          (let ((smallest\
    \ (car lst)))\n                            (if (null? lst)\n                 \
    \             #f\n                              (let ((smallest (car lst)))\n\
    \                                (if (null? lst)\n                           \
    \       #f\n                                  (let ((smallest (car lst)))\n  \
    \                                  (if (null? lst)\n                         \
    \             #f\n                                      (let ((smallest (car lst)))\n\
    \                                        (if (null? lst)\n                   \
    \                       #f\n                                          (let ((smallest\
    \ (car lst)))\n                                            (if (null? lst)\n \
    \                                             #f\n                           \
    \                   (let ((smallest (car lst)))\n                            \
    \                    (if (null? lst)\n                                       \
    \           #f\n                                                  (let ((smallest\
    \ (car lst)))\n                                                    (if (null?\
    \ lst)\n                                                      #f\n           \
    \                                           (let ((smallest (car lst)))\n    \
    \                                                    (if (null? lst)\n       \
    \                                                   #f\n                     \
    \                                     (let ((smallest (car lst)))\n          \
    \                                                  (if (null? lst)\n         \
    \                                                     #f\n                   \
    \                                           (let ((smallest (car lst)))\n    \
    \                                                            (if (null? lst)\n\
    \                                                                  #f\n      \
    \                         ", "  (cond\n    ((null? lst) #f)\n    ((< (car lst)\
    \ (car (cdr lst))) (car (cdr lst)))\n    (else (car (cdr lst))))\n)\n\n;; You\
    \ are given a list of strings.\n;; Write a function next_smallest_string() that\
    \ returns the 2nd smallest string of the list.\n;; Return #f if there is no such\
    \ element.\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n\
    ;; \"b\"\n;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\" \"d\"))\n\
    ;; \"b\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"\
    f\"))\n;; \"f\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"\
    e\" \"f\" \"g\"))\n;; #f\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\"\
    \ \"d\" \"e\" \"f\" \"g\" \"h\"))\n;; #f", "  (cond\n    [(null? lst) #f]\n  \
    \  [(< (car lst) (car (cdr lst))) #f]\n    [(car (cdr lst))]\n  ))\n\n;; You are\
    \ given a list of strings.\n;; Write a function next_smallest_string() that returns\
    \ the 2nd smallest string of the list.\n;; Return #f if there is no such element.\n\
    ;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\" \"d\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; #f\n;;\
    \ >>> (next_smallest_string (list \"a\" \"a\"))\n;; #f", "  (cond\n    ((null?\
    \ lst) #f)\n    ((null? (cdr lst)) #f)\n    ((< (car lst) (car (cdr lst))) (car\
    \ (cdr lst)))\n    (else (car (cdr lst)))\n  )\n)\n\n;; You are given a list of\
    \ strings.\n;; Write a function next_smallest_string() that returns the 2nd smallest\
    \ string in the list.\n;; Return #f if there is no such element.\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string\
    \ (list \"e\" \"a\" \"b\" \"c\" \"d\"))\n;; \"b\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\"))\n;; \"f\"\n;; >>> (next_smallest_string\
    \ (list \"f\" \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; #f\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\"))\n;; #f", "  (cond\n    ((null?\
    \ lst) #f)\n    ((null? (cdr lst)) #f)\n    ((< (car lst) (car (cdr lst))) (car\
    \ (cdr lst)))\n    (else (car (cdr lst))))\n)\n\n;; You are given a list of integers.\n\
    ;; Write a function next_largest() that returns the 2nd largest element of the\
    \ list.\n;; Return #f if there is no such element.\n;; >>> (next_largest (list\
    \ 1 2 3 4 5))\n;; 2\n;; >>> (next_largest (list 5 1 4 3 2))\n;; 4\n;; >>> (next_largest\
    \ (list ))\n;; #f\n;; >>> (next_largest (list 1 1))\n;; #f", "  (cond\n    ((null?\
    \ lst) #f)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((smallest (car\
    \ lst)))\n        (if (null? (cdr lst))\n          (car lst)\n          (if (null?\
    \ (cdr (cdr lst)))\n            (car (cdr lst))\n            (next_smallest (cdr\
    \ lst)))))))))\n", "  (cond\n    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n\
    \    ((< (car lst) (car (cdr lst))) (car (cdr lst)))\n    (else (car lst))\n \
    \ )\n)\n\n;; You are given a list of strings.\n;; Write a function next_smallest_string()\
    \ that returns the 2nd smallest string of the list.\n;; Return #f if there is\
    \ no such element.\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\"\
    \ \"d\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\"))\n;; #f\n;; >>> (next_smallest_string (list \"a\" \"a\"))\n;; #f", " \
    \ (cond\n    [(null? lst) #f]\n    [(< (car lst) (car (cdr lst))) #f]\n    [(<\
    \ (car lst) (car (cdr (cdr lst)))) (car (cdr (cdr lst)))]\n    [else (car (cdr\
    \ (cdr lst)))])\n", "  (cond\n    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n\
    \    ((< (car lst) (car (cdr lst))) (car (cdr lst)))\n    (car (cdr lst))\n  )\n\
    )\n\n;; You are given a list of strings.\n;; Write a function next_smallest_string()\
    \ that returns the 2nd smallest string in the list.\n;; Return #f if there is\
    \ no such element.\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\"\
    \ \"d\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\"))\n;; #f\n;; >>> (next_smallest_string (list \"a\" \"a\"))\n;; #f", " \
    \ (cond\n    [(null? lst) #f]\n    [(< (car lst) (car (cdr lst))) #f]\n    [(<\
    \ (car lst) (car (cdr (cdr lst)))) (car (cdr (cdr lst)))]\n  )\n)\n", "  (cond\n\
    \    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n    ((< (car lst) (car (cdr\
    \ lst))) (car (cdr lst)))\n    (car (cdr lst))\n  )\n)\n\n;; You are given a list\
    \ of strings.\n;; Write a function next_smallest_string() that returns the 2nd\
    \ smallest string of the list.\n;; Return #f if there is no such element.\n;;\
    \ >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\" \"d\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; #f\n;;\
    \ >>> (next_smallest_string (list \"a\" \"a\"))\n;; #f", "  (cond\n    ((null?\
    \ lst) #f)\n    ((< (car lst) (car (cdr lst))) (car (cdr lst)))\n    (else (car\
    \ (cdr lst)))))\n", "  (cond\n    [(null? lst) #f]\n    [(< (car lst) (car (cdr\
    \ lst))) #f]\n    [(< (car lst) (car (cdr (cdr lst)))) (car (cdr (cdr lst)))]\n\
    \    [else (car (cdr (cdr lst)))])\n", "  (cond\n    ((null? lst) #f)\n    ((null?\
    \ (cdr lst)) #f)\n    ((< (car lst) (car (cdr lst))) (car (cdr lst)))\n    (else\
    \ (car (cdr lst))))\n)\n\n;; You are given a list of strings.\n;; Write a function\
    \ next_smallest_string() that returns the 2nd smallest string in the list.\n;;\
    \ Return #f if there is no such element.\n;; >>> (next_smallest_string (list \"\
    a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"\
    e\" \"a\" \"b\" \"c\" \"d\"))\n;; \"b\"\n;; >>> (next_smallest_string (list \"\
    a\" \"a\" \"b\" \"c\" \"d\"))\n;; #f\n;; >>> (next_smallest_string (list \"a\"\
    \ \"b\" \"c\" \"d\" \"e\"))\n;; #f", "  (cond\n    [(null? lst) #f]\n    [(< (car\
    \ lst) (car (cdr lst))) #f]\n    [(car (cdr lst))]\n  )\n)\n\n;; You are given\
    \ a list of strings.\n;; Write a function next_smallest_string() that returns\
    \ the 2nd smallest string in the list.\n;; Return #f if there is no such element.\n\
    ;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\" \"d\"))\n;; \"b\"\n\
    ;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\"))\n;; \"\
    f\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"\
    g\"))\n;; #f\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"\
    \ \"f\" \"g\" \"h\"))\n;; #f", "  (let (((lst) (lst)))\n    (if (null? lst)\n\
    \      #f\n      (let (((lst) (lst)))\n        (if (null? lst)\n          #f\n\
    \          (let (((lst) (lst)))\n            (if (null? lst)\n              #f\n\
    \              (let (((lst) (lst)))\n                (if (null? lst)\n       \
    \           #f\n                  (let (((lst) (lst)))\n                    (if\
    \ (null? lst)\n                      #f\n                      (let (((lst) (lst)))\n\
    \                        (if (null? lst)\n                          #f\n     \
    \                     (let (((lst) (lst)))\n                            (if (null?\
    \ lst)\n                              #f\n                              (let (((lst)\
    \ (lst)))\n                                (if (null? lst)\n                 \
    \                 #f\n                                  (let (((lst) (lst)))\n\
    \                                    (if (null? lst)\n                       \
    \               #f\n                                      (let (((lst) (lst)))\n\
    \                                        (if (null? lst)\n                   \
    \                       #f\n                                          (let (((lst)\
    \ (lst)))\n                                            (if (null? lst)\n     \
    \                                         #f\n                               \
    \               (let (((lst) (lst)))\n                                       \
    \         (if (null? lst)\n                                                  #f\n\
    \                                                  (let (((lst) (lst)))\n    \
    \                                                (if (null? lst)\n           \
    \                                           #f\n                             \
    \                         (let (((lst) (lst)))\n                             \
    \                           (if (null? lst)\n                                \
    \                          #f\n                                              \
    \            (let (((lst) (lst)))\n                                          \
    \                  (if (null? lst)\n                                         \
    \                     #f\n                                                   \
    \           (let (((lst) (lst)))\n                                           \
    \                     (", "  (cond\n    ((null? lst) #f)\n    ((< (car lst) (car\
    \ (cdr lst))) #f)\n    (else (cdr (cdr lst)))))\n\n;; >>> (next_smallest (list\
    \ 1 2 3 4 5))\n;; 2\n;; >>> (next_smallest (list 5 1 4 3 2))\n;; 2\n;; >>> (next_smallest\
    \ (list ))\n;; #f\n;; >>> (next_smallest (list 1 1))\n;; #f\n;; >>> (next_smallest\
    \ (list 1 2 3 4 5 6))\n;; #f\n;; >>> (next_smallest (list 6 5 4 3 2 1))\n;; #f\n\
    ;; >>> (next_smallest (list 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest (list\
    \ 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest (list 6 5 4 3 2 1))\n;; #f\n;; >>>\
    \ (next_smallest (list 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest (list 6 5 4\
    \ 3 2 1))\n;; #f\n;; >>> (next_smallest (list 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest\
    \ (list 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest (list 6 5 4 3 2 1))\n;; #f\n\
    ;; >>> (next_smallest (list 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest (list\
    \ 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest (list 6 5 4 3 2 1))\n;; #f\n;; >>>\
    \ (next_smallest (list 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest (list 6 5 4\
    \ 3 2 1))\n;; #f\n;; >>> (next_smallest (list 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest\
    \ (list 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest (list 6 5 4 3 2 1))\n;; #f\n\
    ;; >>> (next_smallest (list 6 5 4 3 2", "  (cond\n    ((null? lst) #f)\n    ((null?\
    \ (cdr lst)) #f)\n    ((< (car lst) (car (cdr lst))) (car (cdr lst)))\n    (else\
    \ (car lst))\n  )\n)\n", "  (cond\n    ((null? lst) #f)\n    ((null? (cdr lst))\
    \ #f)\n    ((eq (car lst) (car (cdr lst))) #f)\n    (else\n      (let ((smallest\
    \ (car lst)))\n        (if (null? (cdr lst))\n          (car (cdr lst))\n    \
    \      (else\n            (if (eq (car (cdr lst)) smallest)\n              (car\
    \ (cdr lst))\n              (else\n                (let ((next (car (cdr lst))))\n\
    \                  (if (eq (car (cdr (cdr lst))) next)\n                    (car\
    \ (cdr (cdr lst)))\n                    (else\n                      (car (cdr\
    \ (cdr (cdr lst)))))))))))))))\n)\n\n;; You are given a list of strings.\n;; Write\
    \ a function next_smallest_string() that returns the 2nd smallest string in the\
    \ list.\n;; Return #f if there is no such element.\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string\
    \ (list \"e\" \"a\" \"b\" \"c\" \"d\"))\n;; \"b\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\"))\n;; \"f\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\"))\n;; \"f\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\"))\n;; \"g\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\"))\n;; \"i\"\n;;\
    \ >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"\
    h\" \"i\" \"j\"))\n;; \"j\"\n;; >>> (next", "  (cond\n    [(null? lst) #f]\n \
    \   [(< (car lst) (car (cdr lst))) #f]\n    [(car (cdr lst))]\n  )\n)\n\n;; You\
    \ are given a list of strings.\n;; Write a function next_smallest_string() that\
    \ returns the 2nd smallest string in the list.\n;; Return #f if there is no such\
    \ element.\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n\
    ;; \"b\"\n;; >>> (next_smallest_string (list \"e\" \"a\" \"b\" \"c\" \"d\"))\n\
    ;; \"b\"\n;; >>> (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n\
    ;; #f\n;; >>> (next_smallest_string (list \"a\" \"a\"))\n;; #f", "  (cond\n  \
    \  ((null? lst) #f)\n    ((= (car lst) (car (cdr lst))) #f)\n    (else\n     \
    \ (cdr (cdr lst))\n      (car (cdr (cdr lst))))))\n\n;; >>> (next_smallest (list\
    \ 1 2 3 4 5))\n;; 2\n;; >>> (next_smallest (list 5 1 4 3 2))\n;; 2\n;; >>> (next_smallest\
    \ (list ))\n;; #f\n;; >>> (next_smallest (list 1 1))\n;; #f\n;; >>> (next_smallest\
    \ (list 1 2 3 4 5 6))\n;; #f\n;; >>> (next_smallest (list 6 5 4 3 2 1))\n;; #f\n\
    ;; >>> (next_smallest (list 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest (list\
    \ 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest (list 6 5 4 3 2 1))\n;; #f\n;; >>>\
    \ (next_smallest (list 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest (list 6 5 4\
    \ 3 2 1))\n;; #f\n;; >>> (next_smallest (list 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest\
    \ (list 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest (list 6 5 4 3 2 1))\n;; #f\n\
    ;; >>> (next_smallest (list 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest (list\
    \ 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest (list 6 5 4 3 2 1))\n;; #f\n;; >>>\
    \ (next_smallest (list 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest (list 6 5 4\
    \ 3 2 1))\n;; #f\n;; >>> (next_smallest (list 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest\
    \ (list 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest (list 6 5 4 3 2 1))\n;; #f",
  "  (cond\n    [(null? lst) #f]\n    [(null? (cdr lst)) #f]\n    [(car (cdr lst))]\n\
    \    [(car (cdr (cdr lst)))])\n)\n\n;; You are given a list of strings.\n;; Write\
    \ a function next_smallest_string() that returns the 2nd smallest string in the\
    \ list.\n;; Return #f if there is no such element.\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\"))\n;; \"b\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\"))\n;; \"f\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\"))\n;; \"f\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\"))\n;; #f\n;; >>>\
    \ (next_smallest_string (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\"\
    \ \"i\" \"j\"))\n;; #f", "  (cond\n    ((null? lst) #f)\n    ((< (car lst) (car\
    \ (cdr lst))) (cdr lst))\n    (else (car lst))))\n\n;; >>> (next_smallest (list\
    \ 1 2 3 4 5))\n;; 2\n;; >>> (next_smallest (list 5 1 4 3 2))\n;; 2\n;; >>> (next_smallest\
    \ (list ))\n;; #f\n;; >>> (next_smallest (list 1 1))\n;; #f\n;; >>> (next_smallest\
    \ (list 1 2 3 4 5 6))\n;; #f\n;; >>> (next_smallest (list 6 5 4 3 2 1))\n;; #f\n\
    ;; >>> (next_smallest (list 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest (list\
    \ 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest (list 6 5 4 3 2 1))\n;; #f\n;; >>>\
    \ (next_smallest (list 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest (list 6 5 4\
    \ 3 2 1))\n;; #f\n;; >>> (next_smallest (list 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest\
    \ (list 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest (list 6 5 4 3 2 1))\n;; #f\n\
    ;; >>> (next_smallest (list 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest (list\
    \ 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest (list 6 5 4 3 2 1))\n;; #f\n;; >>>\
    \ (next_smallest (list 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest (list 6 5 4\
    \ 3 2 1))\n;; #f\n;; >>> (next_smallest (list 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest\
    \ (list 6 5 4 3 2 1))\n;; #f\n;; >>> (next_smallest (list 6 5 4 3 2 1))\n;; #f\n\
    ;; >>> (next_smallest (list 6 5 4 3 2 1))", "  (cond\n    ((null? lst) #f)\n \
    \   ((null? (cdr lst)) #f)\n    ((< (car lst) (car (cdr lst))) (car (cdr lst)))\n\
    \    (car (cdr lst))\n  )\n)\n\n;; You are given a list of strings.\n;; Write\
    \ a function next_smallest_string() that returns the 2nd smallest string in the\
    \ list.\n;; Return #f if there is no such element.\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"b\"\n;; >>> (next_smallest_string\
    \ (list \"e\" \"a\" \"b\" \"c\" \"d\"))\n;; \"b\"\n;; >>> (next_smallest_string\
    \ (list \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; #f\n;; >>> (next_smallest_string (list\
    \ \"a\" \"a\"))\n;; #f", "  (cond\n    ((null? lst) #f)\n    ((null? (cdr lst))\
    \ #f)\n    ((< (car lst) (car (cdr lst))) (car (cdr lst)))\n    (car (cdr lst))\n\
    \  )\n)\n", "  (cond\n    ((null? lst) #f)\n    ((null? (cdr lst)) #f)\n    ((<\
    \ (car lst) (car (cdr lst))) (car (cdr lst)))\n    (car (cdr lst))\n  )\n)\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
