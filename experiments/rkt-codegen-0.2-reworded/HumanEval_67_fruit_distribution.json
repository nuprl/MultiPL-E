{
  "name": "HumanEval_67_fruit_distribution",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19\n(define (fruit_distribution s n)\n",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fruit_distribution))\n    (check-equal? (candidate \"5 apples and 6 oranges\" 19) 8)\n    (check-equal? (candidate \"5 apples and 6 oranges\" 21) 10)\n    (check-equal? (candidate \"0 apples and 1 oranges\" 3) 2)\n    (check-equal? (candidate \"1 apples and 0 oranges\" 3) 2)\n    (check-equal? (candidate \"2 apples and 3 oranges\" 100) 95)\n    (check-equal? (candidate \"2 apples and 3 oranges\" 5) 0)\n    (check-equal? (candidate \"1 apples and 100 oranges\" 120) 19)\n))\n\n(test-humaneval)",
  "completions": [
    "  (let ((apple (string-split s \" \")))\n    (let ((orange (string-split (string-join apple \" and \") \" \")))\n      (let ((mango (string-split (string-join orange \" and \") \" \")))\n        (+ (string-length mango) (string-length apple) (string-length orange) (n - (string-length mango) (string-length apple) (string-length orange)))))))\n",
    "  (let ((apple_count (string-to-integer s)))\n    (let ((orange_count (string-to-integer (string-replace s \"apple\" \"orange\"))))\n      (let ((mango_count (string-to-integer (string-replace s \"orange\" \"mango\"))))\n        (+ mango_count (string-to-integer (string-replace s \"apple\" \"mango\"))))\n      (+ apple_count (string-to-integer (string-replace s \"orange\" \"mango\"))))\n    (+ orange_count (string-to-integer (string-replace s \"apple\" \"mango\"))))\n  )\n)\n",
    "  (let ((apple-count (string-to-integer s)))\n    (let ((orange-count (string-to-integer (substring s (string-length s) - 1))))\n      (let ((mango-count (string-to-integer (substring (substring s (string-length s) - 1) (string-length (substring s (string-length s) - 1)) - 1))))\n        (+ mango-count (* orange-count apple-count))))))\n",
    "  (let ((apple_count (string-to-integer s)))\n    (let ((orange_count (string-to-integer (string-replace s \" apples\" \" oranges\"))))\n      (let ((mango_count (string-to-integer (string-replace s \" oranges\" \" mango\"))))\n        (+ mango_count (mango_count - apple_count))))))\n",
    "  (let ((apple-count (string-to-integer s)))\n    (let ((orange-count (string-to-integer (string-replace s \"apple\" \"orange\"))))\n      (let ((mango-count (string-to-integer (string-replace s \"orange\" \"mango\"))))\n        (+ mango-count (apple-count - orange-count))))))\n",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (/ (- orange apple) n) mango))))))\n",
    "  (let ((apple (string-split s \" \")))\n    (let ((orange (string-split (string-join apple \" and \") \" \")))\n      (let ((mango (string-split (string-join orange \" and \") \" \")))\n        (+ (string-length mango) (string-length apple) (string-length orange)))))\n)\n",
    "  (let ((apple (string-to-number (substring s 0 (string-length s) -1))))\n    (let ((orange (string-to-number (substring s (string-length s) +1))))\n      (+ apple orange)))\n  (+ n apple))\n",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ (mango) (* orange n) (* apple n) (* mango n))))))\n",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (* orange (/ apple 2)))))\n    (+ mango (* orange (/ apple 3)))))\n",
    "  (let ((apple (string-split s \" \"))\n        (orange (string-split s \" \")))\n    (+ (string-length apple) (string-length orange))\n  )\n)\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (/ (- orange apple) n)\n          (+ mango (/ (- apple orange) n)\n            (+ mango (/ (- orange mango) n)\n              (+ mango (/ (- mango orange) n)\n                (+ mango (/ (- mango orange) n)\n                  (+ mango (/ (- mango mango) n))))))))))\n",
    "  (let ((apple_count (string-to-integer s)))\n    (let ((orange_count (string-to-integer (substring s (string-length s) (string-length s) -1))))\n      (+ (string-to-integer (substring s (string-length s) (string-length s) -1))\n         (string-to-integer (substring s (string-length s) (string-length s) -1))))\n    (+ apple_count orange_count)))\n",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ (apple) (orange) (mango))))))\n",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (/ (/ orange apple) n) (/ apple mango)))\n      )))\n",
    "  (let ((apple-count (string-to-integer s)))\n    (let ((orange-count (string-to-integer (string-replace s #\" \" \"\")))\n          (mango-count (string-to-integer (string-replace (string-replace s #\" \" \"\") #\" \" \"\"))))\n      (+ apple-count orange-count mango-count))))\n",
    "  (let ((apple_count (string-to-integer s)))\n    (let ((orange_count (string-to-integer (string-append s \" oranges\"))))\n      (let ((mango_count (string-to-integer (string-append s \" mango\"))))\n        (+ mango_count (mango_count * apple_count)\n          (mango_count * orange_count))))))\n",
    "  (let ((apple (string-split s \" \"))\n        (orange (string-split s \" \")))\n    (+ (string-length apple) (string-length orange))\n  )\n)\n",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (/ (- apple orange) n))))))\n",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (/ (- orange apple) (- apple orange)))))\n    (+ mango (/ (- orange apple) (- apple orange)))))\n",
    "  (let ((apple (string-to-integer (substring s 0 (string-length s) - 1))))\n    (let ((orange (string-to-integer (substring s (string-length s) + 1))))\n      (+ apple orange)))\n  (+ apple orange))\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple-count (string-to-number (substring s 0 (string-index s \"apple\"))))\n         (orange-count (string-to-number (substring s (string-index s \"orange\"))))\n         (mango-count (string-to-number (substring s (string-index s \"mango\"))))\n         (apple-total (string-to-number (substring s (string-index s \"apple\"))))\n         (orange-total (string-to-number (substring s (string-index s \"orange\"))))\n         (mango-total (string-to-number (substring s (string-index s \"mango\"))))\n         (total-fruits (string-to-number (substring s (string-index s \"fruits\"))))\n         (total-apples (string-to-number (substring s (string-index s \"apples\"))))\n         (total-oranges (string-to-number (substring s (string-index s \"oranges\"))))\n         (total-mangoes (string-to-number (substring s (string-index s \"mangoes\"))))\n         (apple-mango-count (string-to-number (substring s (string-index s \"apple\"))))\n         (orange-mango-count (string-to-number (substring s (string-index s \"orange\"))))\n         (apple-orange-count (string-to-number (substring s (string-index s \"apple\"))))\n         (orange-apple-count (string-to-number (substring s (string-index s \"orange\"))))\n         (mango-orange-count (string-to-number (substring s (string-index s \"mango\"))))\n         (mango-apple-count (string-to-number (substring s (string-index s \"mango\"))))\n         (apple-orange-mango-count (string-to-number (substring s (string-index s \"apple\"))))\n         (orange-mango-apple-count (string-to-number (substring s (string-index s \"orange\"))))\n         (mango-orange-apple-count (string-to-number (",
    "  (let ((apple-count (string-to-integer s)))\n    (let ((orange-count (string-to-integer (substring s (string-length s) -1))))\n      (let ((mango-count (string-to-integer (substring (substring s (string-length s) -1) (string-length (substring s (string-length s) -1)) -1))))\n        (+ (string-to-integer (substring s (string-length s) -1)) mango-count))))\n",
    "  (let ((apple (string-to-number (substring s 0 (string-index s \"apple\"))))\n        (orange (string-to-number (substring s (string-index s \"orange\"))))\n        (mango (string-to-number (substring s (string-index s \"mango\"))))\n        (total (string-to-number (substring s (string-index s \"and\"))))\n        (apple_count (string-to-number (substring s (string-index s \"apple\"))))\n        (orange_count (string-to-number (substring s (string-index s \"orange\"))))\n        (mango_count (string-to-number (substring s (string-index s \"mango\"))))\n        (total_count (string-to-number (substring s (string-index s \"and\"))))))\n  (+ (mango_count (divide (mango) (total)))\n    (mango_count (divide (mango) (total_count)))))\n)\n",
    "  (let ((apple-count (string-to-integer (substring s 0 (string-index s \"apple\"))))\n         (orange-count (string-to-integer (substring s (string-index s \"orange\"))))\n         (mango-count (string-to-integer (substring s (string-index s \"mango\"))))\n         (apple-total (string-to-integer (substring s 0 (string-index s \"apple\"))))\n         (orange-total (string-to-integer (substring s (string-index s \"orange\"))))\n         (mango-total (string-to-integer (substring s (string-index s \"mango\"))))\n         (apple-basket (string-to-integer (substring s (string-index s \"apple\"))))\n         (orange-basket (string-to-integer (substring s (string-index s \"orange\"))))\n         (mango-basket (string-to-integer (substring s (string-index s \"mango\"))))\n         (apple-basket-count (string-to-integer (substring s (string-index s \"apple\"))))\n         (orange-basket-count (string-to-integer (substring s (string-index s \"orange\"))))\n         (mango-basket-count (string-to-integer (substring s (string-index s \"mango\"))))\n         (apple-basket-total (string-to-integer (substring s (string-index s \"apple\"))))\n         (orange-basket-total (string-to-integer (substring s (string-index s \"orange\"))))\n         (mango-basket-total (string-to-integer (substring s (string-index s \"mango\"))))\n         (apple-basket-basket (string-to-integer (substring s (string-index s \"apple\"))))\n         (orange-basket-basket (string-to-integer (substring s (string-index s \"orange\"))))\n         (mango-basket-basket (string-to-integer (substring s (string-index s \"mango\"))))\n         (apple-basket-basket-count (string",
    "  (let ((apple (string-split s \" \")))\n    (let ((orange (string-split (string-join apple \" and \") \" \")))\n      (let ((mango (string-split (string-join orange \" and \") \" \")))\n        (+ (string-length mango) (string-length apple) (string-length orange) (n - (string-length mango) - (string-length apple) - (string-length orange))))))\n)\n",
    "  (let ((apple (string-to-number (substring s 0 (string-length s) -1))))\n    (let ((orange (string-to-number (substring s (string-length s) -1))))\n      (+ apple orange)))\n  (+ n apple))\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple-count (string-to-integer s)))\n    (let ((orange-count (string-to-integer (substring s (string-length s) -1))))\n      (let ((mango-count (string-to-integer (substring (substring s (string-length s) -1) (string-length s) -1))))\n        (+ (string-to-integer (substring s (string-length s) -1)) mango-count))))\n",
    "  (let ((apple-count (string->number s \"apple\")))\n    (let ((orange-count (string->number s \"orange\")))\n      (let ((mango-count (string->number s \"mango\")))\n        (+ mango-count (* orange-count apple-count))))))\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (/ (- apple orange) n)))\n      (+ mango (/ (- orange apple) n)))\n    (+ mango (/ (- apple orange) n))))\n",
    "  (let ((apple-count (string-to-integer s)))\n    (let ((orange-count (string-to-integer (string-append s \" oranges\"))))\n      (let ((mango-count (string-to-integer (string-append s \" mango\"))))\n        (+ mango-count (* orange-count apple-count))))))\n",
    "  (let ((apple (string-split s \" \"))\n        (orange (string-split s \" \")))\n    (+ (string-length apple) (string-length orange))\n  )\n)\n",
    "  (define (count_mangoes n)\n    (if (>= n 0)\n      (+ (count_mangoes (- n 1))\n        (count_mangoes (- n 2))\n        (count_mangoes (- n 3))\n        (count_mangoes (- n 4))\n        (count_mangoes (- n 5))\n        (count_mangoes (- n 6))\n        (count_mangoes (- n 7))\n        (count_mangoes (- n 8))\n        (count_mangoes (- n 9))\n        (count_mangoes (- n 10))\n        (count_mangoes (- n 11))\n        (count_mangoes (- n 12))\n        (count_mangoes (- n 13))\n        (count_mangoes (- n 14))\n        (count_mangoes (- n 15))))\n    (+ n (count_mangoes (- n 1)))))\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (/ (- apple orange) n))))))\n",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (/ (- orange apple) n)\n          (- mango (/ (- apple orange) n)\n            (+ mango (/ (- orange apple) n)\n              (- mango (/ (- apple orange) n))))))))\n",
    "  (let ((apple (string-split s \" \"))\n        (orange (string-split s \" \")))\n    (+ (string-length apple) (string-length orange))\n  )\n)\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple (string-split s \" \"))\n        (orange (string-split s \" \")))\n    (+ (string-length apple) (string-length orange))\n  )\n)\n",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (/ (- orange apple) (- orange n)))))\n    mango))\n",
    "  (let ((apple-count (string-to-number (substring s 0 (string-index s \"apple\"))))\n        (orange-count (string-to-number (substring s (string-index s \"orange\"))))\n        (mango-count (string-to-number (substring s (string-index s \"mango\"))))\n        (apple-count-plus-orange-count (apple-count + orange-count)))\n    (+ mango-count (apple-count-plus-orange-count n)))\n)\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple-count (string-to-integer s)))\n    (let ((orange-count (string-to-integer (string-append s \" oranges\"))))\n      (let ((mango-count (string-to-integer (string-append s \" mango\"))))\n        (+ mango-count (* orange-count apple-count))))))\n",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ (apple) (orange) (mango)))))\n  (+ (n) (fruit_distribution (string->number s) (n - 1))))\n",
    "  (let ((apple (string-to-number (substring s 0 (string-length s) -1))))\n    (let ((orange (string-to-number (substring s (string-length s) +1))))\n      (+ apple orange)))\n  (+ n apple))\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple (string-split s \" \")))\n    (let ((orange (string-split (string-join apple \" and \") \" \")))\n      (let ((mango (string-split (string-join orange \" and \") \" \")))\n        (+ (string-length mango) (n - (string-length apple) (string-length orange)))))))\n",
    "  (let ((apple (string-split s \" \")))\n    (let ((orange (string-split (string-join apple \" and \") \" \")))\n      (let ((mango (string-split (string-join orange \" and \") \" \")))\n        (+ (string-length mango) (string-length apple) (string-length orange)))\n      (+ (string-length mango) (string-length apple) (string-length orange)))\n    (+ (string-length mango) (string-length apple) (string-length orange)))\n  (+ (string-length mango) (string-length apple) (string-length orange)))\n)\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (/ (/ orange apple) n) (/ orange apple) n)))\n    (+ mango (/ (/ apple orange) n) (/ apple orange) n)))\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (* orange (/ apple 2)))))\n    (+ mango (* orange (/ apple 3)))))\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple (string-split s \" \"))\n        (orange (string-split s \" \")))\n    (+ (string-length apple) (string-length orange))\n  )\n)\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (/ (- apple orange) n))))))\n",
    "  (let ((apple-count (string-to-integer s)))\n    (let ((orange-count (string-to-integer (substring s (string-length s) -1))))\n      (let ((mango-count (string-to-integer (substring (substring s (string-length s) -1) (string-length s) -1))))\n        (+ (string-to-integer mango-count) (string-to-integer orange-count) apple-count))))\n",
    "  (define (count-mangoes n)\n    (cond\n      ((= n 0) 0)\n      ((< n 0) 0)\n      (>= n 0)\n      (+ (count-mangoes (- n 1))\n         (count-mangoes (- n 2))\n         (count-mangoes (- n 3))\n         (count-mangoes (- n 4))\n         (count-mangoes (- n 5))\n         (count-mangoes (- n 6))\n         (count-mangoes (- n 7))\n         (count-mangoes (- n 8))\n         (count-mangoes (- n 9))\n         (count-mangoes (- n 10))\n         (count-mangoes (- n 11))\n         (count-mangoes (- n 12))\n         (count-mangoes (- n 13))\n         (count-mangoes (- n 14))\n         (count-mangoes (- n 15))\n         (count-mangoes (- n 16))\n         (count-mangoes (- n 17))\n         (count-mangoes (- n 18))\n         (count-mangoes (- n 19))\n         (count-mangoes (- n 20))\n         (count-mangoes (- n 21))\n         (count-mangoes (- n 22))\n         (count-mangoes (- n 23))\n         (count-mangoes (- n 24))\n         (count-mangoes (- n 25))\n         (count-mangoes (- n 26))\n         (count-mangoes (- n 27))\n         (count-mangoes (- n 28))\n         (count-mangoes (- n 29))\n         (count-mangoes (- n 30))\n         (count-mangoes (- n 31))\n         (count-mangoes (- n 32))\n         (count-mangoes (- n 33))\n         (count-mangoes (- n 34))\n         (count-mangoes (- n 35))\n         (count-mangoes (- n 36))\n         (count-mangoes (- n 37))\n         (count-mangoes (- n 38))\n         (count-mangoes (- n 39))\n",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (/ (- orange apple) (- apple orange)))))\n    (+ mango (/ (- orange apple) (- apple orange)))))\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple (string-split s \" \"))\n        (orange (string-split s \" \")))\n    (+ (string-length apple) (string-length orange))\n  )\n)\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple (string-to-number (substring s 0 (string-length s) -1))))\n    (let ((orange (string-to-number (substring s (string-length s) +1))))\n      (+ apple orange)))\n  (+ apple (string-to-number (substring s (string-length s) +1))))\n",
    "  (define (fruit_count)\n    (cond\n      ((= s 0) (return 0))\n      ((<= s n) (return (+ (fruit_count) (fruit_count))))\n      (else (return (+ (fruit_count) (fruit_count)))))\n    (fruit_count))\n  (fruit_count))\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (* orange (/ apple n)))))\n    mango))\n",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (/ (- orange apple) n)))))\n)\n",
    "  (let ((apple (string-split s \" \")))\n    (let ((orange (string-split (first apple) \" and \")))\n      (let ((mango (string-split (first orange) \" and \")))\n        (+ (string-length mango) (string-length (first apple)))))\n    (+ (string-length orange) (string-length (first apple)))))\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple (string-split s \" \")))\n    (let ((orange (string-split (first apple) \" and \")))\n      (let ((mango (string-split (first orange) \" and \")))\n        (+ (string-length (first mango)) (string-length (first apple)))))\n    (+ (string-length (first orange)) (string-length (first apple)))))\n",
    "  (let ((apple-count (string-to-integer s)))\n    (let ((orange-count (string-to-integer (string-replace s \"apple\" \"orange\"))))\n      (let ((mango-count (string-to-integer (string-replace s \"orange\" \"mango\"))))\n        (+ mango-count (* orange-count apple-count))))))\n",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (* orange (/ apple n)))))))\n",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (/ (- apple orange) n)))\n      )))\n",
    "  (let ((apple (string-split s \" \"))\n        (orange (string-split s \" \")))\n    (+ (string-length apple) (string-length orange))\n  )\n)\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple_count (string-to-integer s)))\n    (let ((orange_count (string-to-integer (string-append s \" oranges\"))))\n      (let ((mango_count (string-to-integer (string-append s \" mango\"))))\n        (+ mango_count (mango_count - apple_count - orange_count))))))\n",
    "  (let ((apple (string-to-number (substring s 0 (string-length s) -1))))\n    (let ((orange (string-to-number (substring s (string-length s) +1))))\n      (+ apple orange)))\n  (+ n apple))\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (/ (- orange apple) n) (- orange apple) mango))))))\n",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (/ (- orange apple) n) (- orange apple) mango))))))\n",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (/ (- apple orange) n)))\n      )))\n",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (/ (- apple orange) n)))\n      )))\n",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (/ (- apple orange) n)))\n      )))\n",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (/ (- apple orange) n)))\n      )))\n",
    "  (let ((apple (string-split s \" \")))\n    (let ((orange (string-split (first apple) \" \")))\n      (let ((mango (string-split (first orange) \" \")))\n        (+ (first mango) (first apple) (first orange) (first mango))))))\n",
    "  (let ((apple-count (string-to-integer s)))\n    (let ((orange-count (string-to-integer (substring s (string-length s) - 1))))\n      (let ((mango-count (string-to-integer (substring (substring s (string-length s) - 2)))))\n        (+ mango-count (* orange-count apple-count))))))\n",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (/ (- apple orange) n)))))\n)\n",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ (apple) (orange) (mango)))\n      )))\n)\n",
    "  (let ((apple (string-split s \" \")))\n    (let ((orange (string-split (string-join apple \" and \") \" \")))\n      (let ((mango (string-split (string-join orange \" and \") \" \")))\n        (+ (string-length mango) (string-length apple) (string-length orange)))\n      (+ (string-length mango) (string-length apple) (string-length orange)))\n    (+ (string-length mango) (string-length apple) (string-length orange))))\n",
    "  (define (fruit_count)\n    (cond\n      ((= n 0) 0)\n      ((= n 1) 1)\n      ((= n 2) 2)\n      ((= n 3) 3)\n      ((= n 4) 4)\n      ((= n 5) 5)\n      ((= n 6) 6)\n      ((= n 7) 7)\n      ((= n 8) 8)\n      ((= n 9) 9)\n      ((= n 10) 10)\n      ((= n 11) 11)\n      ((= n 12) 12)\n      ((= n 13) 13)\n      ((= n 14) 14)\n      ((= n 15) 15)\n      ((= n 16) 16)\n      ((= n 17) 17)\n      ((= n 18) 18)\n      ((= n 19) 19)\n      ((= n 20) 20)\n      ((= n 21) 21)\n      ((= n 22) 22)\n      ((= n 23) 23)\n      ((= n 24) 24)\n      ((= n 25) 25)\n      ((= n 26) 26)\n      ((= n 27) 27)\n      ((= n 28) 28)\n      ((= n 29) 29)\n      ((= n 30) 30)\n      ((= n 31) 31)\n      ((= n 32) 32)\n      ((= n 33) 33)\n      ((= n 34) 34)\n      ((= n 35) 35)\n      ((= n 36) 36)\n      ((= n 37) 37)\n      ((= n 38) 38)\n      ((= n 39) 39)\n      ((= n 40) 40)\n      ((= n 41) 41)\n      ((= n 42) 42)\n      ((= n 43) 43)\n      ((= n 44) 44)\n      ((= n 45) 45)\n      ((= n 46) 46)\n      ((= n 47) 47)\n      ((= n 48) 48)\n      ((= n 49) 49)\n      ((= n 50) 50)\n      ((= n 51) 51)\n      ((= n 52) 52)\n      ((= n 53) 53)\n      ((= n 54) 54)\n      ((= n",
    "  (let ((apple (string-split s \" \")))\n    (let ((orange (string-split (string-join apple \" and \") \" \")))\n      (let ((mango (string-split (string-join orange \" and \") \" \")))\n        (+ (string-length mango) (n - (string-length apple) - (string-length orange)))))))\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (/ (- orange apple) n)))\n      (+ mango (/ (- apple orange) n)))\n    (+ mango (/ (- orange apple) n))))\n",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (/ (- orange apple) n)))\n      (+ mango (/ (- apple orange) n)))\n    (+ mango (/ (- orange apple) n)))\n  (+ mango (/ (- apple orange) n)))\n",
    "  (let ((apple (string-split s \" \")))\n    (let ((orange (string-split (string-join apple \" and \") \" \")))\n      (let ((mango (string-split (string-join orange \" and \") \" \")))\n        (+ (string-length mango) (string-length apple) (string-length orange)))))\n)\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple (string-split s \" \"))\n        (orange (string-split s \" \")))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-",
    "  (let ((apple-count (string-to-integer s)))\n    (let ((orange-count (string-to-integer (string-append s \" oranges\"))))\n      (let ((mango-count (string-to-integer (string-append s \" mango\"))))\n        (+ mango-count (* orange-count apple-count))))))\n",
    "  (let ((apple (string-split s \" \"))\n        (orange (string-split s \" \")))\n    (+ (string-length apple) (string-length orange))\n  )\n)\n",
    "  (let ((apple-count (string-to-integer s)))\n    (let ((orange-count (string-to-integer (substring s (string-length s) (string-length s) -1))))\n      (+ (string-to-integer (substring s (string-length s) (string-length s) -1)) orange-count))))\n",
    "  (let ((apple (string-split s \" \")))\n    (let ((orange (string-split (string-join apple \" and \") \" \")))\n      (let ((mango (string-split (string-join orange \" and \") \" \")))\n        (+ (string-length mango) (string-length apple) (string-length orange)))\n      )))\n)\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (/ (- orange apple) n) (- orange apple) mango))))))\n",
    "  (let ((apple_count (string-to-integer s)))\n    (let ((orange_count (string-to-integer (substring s (string-length s) - 1))))\n      (let ((mango_count (string-to-integer (substring (substring s (string-length s) - 1) (string-length (substring s (string-length s) - 1)) - 1))))\n        (+ (string-to-integer (substring s (string-length s) - 1)) mango_count))))\n",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (let ((apple_count apple)\n              (orange_count orange)\n              (mango_count mango))\n          (+ (apple_count) (orange_count) (mango_count)))\n        (+ (apple_count) (orange_count) (mango_count)))\n      (+ (apple_count) (orange_count) (mango_count)))\n    (+ (apple_count) (orange_count) (mango_count)))\n  )\n)\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple (string-split s \" \"))\n        (orange (string-split s \" \")))\n    (+ (string-length apple) (string-length orange))\n  )\n)\n",
    "  (let ((apple (string-to-number (substring s 0 (string-index s \"apple\"))))\n        (orange (string-to-number (substring s (string-index s \"orange\"))))\n        (mango (string-to-number (substring s (string-index s \"mango\"))))\n        (total (string-to-number (substring s (string-index s \"total\"))))\n        (apples (string-to-number (substring s 0 (string-index s \"apple\"))))\n        (oranges (string-to-number (substring s (string-index s \"orange\"))))\n        (mangoes (string-to-number (substring s (string-index s \"mango\"))))\n        (basket (string-to-number (substring s (string-index s \"basket\"))))\n        (apples_in_basket apples))\n    (+ (mango mango) (mangoes mango))\n    (+ (mango mango) (mango mango))\n    (+ (mango mango) (mango mango))\n    (+ (mango mango) (mango mango))\n    (+ (mango mango) (mango mango))\n    (+ (mango mango) (mango mango))\n    (+ (mango mango) (mango mango))\n    (+ (mango mango) (mango mango))\n    (+ (mango mango) (mango mango))\n    (+ (mango mango) (mango mango))\n    (+ (mango mango) (mango mango))\n    (+ (mango mango) (mango mango))\n    (+ (mango mango) (mango mango))\n    (+ (mango mango) (mango mango))\n    (+ (mango mango) (mango mango))\n    (+ (mango mango) (mango mango))\n    (+ (mango mango) (mango mango))\n    (+ (mango mango) (mango mango))\n    (+ (mango mango) (mango mango))\n    (+ (mango mango) (mango mango))\n    (+ (mango mango) (mango mango))\n    (+ (mango mango)",
    "  (let ((apple (string-split s \" \")))\n    (let ((orange (string-split (string-join apple \" and \") \" \")))\n      (let ((mango (string-split (string-join orange \" and \") \" \")))\n        (+ (string-length mango) (string-length apple) (string-length orange) (n - (string-length mango) - (string-length apple) - (string-length orange))))))\n)\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (* orange (/ apple 2)))))\n    (+ mango (* orange (/ apple 3)))))\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (define (count-mangoes n)\n    (cond ((= n 0) 0)\n      ((< n 0) (+ (count-mangoes (- n 1)) (count-mangoes n)))\n      (else (+ (count-mangoes (- n 1)) (count-mangoes n))))\n    (count-mangoes n))\n  (+ (count-mangoes (- s n)) (count-mangoes n)))\n)\n",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (* orange (/ apple n)))))\n    mango))\n",
    "  (let ((apple-count (string-to-integer (substring s 0 (string-index s \"apple\"))))\n        (orange-count (string-to-integer (substring s (string-index s \"orange\"))))\n        (mango-count (string-to-integer (substring s (string-index s \"mango\"))))\n        (apple-count-plus-orange-count (apple-count + orange-count)))\n    (+ mango-count (apple-count-plus-orange-count (orange-count + apple-count))))\n)\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple (string-split s \" \")))\n    (let ((orange (string-split (string-join apple \" and \") \" \")))\n      (let ((mango (string-split (string-join orange \" and \") \" \")))\n        (+ (string-length mango) (string-length apple) (string-length orange)))))\n)\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (/ (- orange apple) n)))))\n)\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple-count (string-to-integer s)))\n    (let ((orange-count (string-to-integer (substring s (string-length s) - 1))))\n      (let ((mango-count (string-to-integer (substring (substring s (string-length s) - 1) (string-length (substring s (string-length s) - 1)) - 1))))\n        (+ (string-to-integer (substring s (string-length s) - 1)) mango-count))))\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple (string-split s \" \")))\n    (let ((orange (string-split s \" \")))\n      (let ((mango (string-split s \" \")))\n        (+ (string-length mango)\n          (+ (string-length orange)\n            (+ (string-length apple)\n              (+ (string-length s)\n                (+ (string-length \"apple\")\n                  (+ (string-length \"orange\")\n                    (+ (string-length \"mango\")\n                      (+ (string-length \" \"))))))))))))))\n",
    "  (let ((apple (string-split s \" \")))\n    (let ((orange (string-split (string-join apple \" and \") \" \")))\n      (+ (string-length (string-join orange \" \")) (string-length (string-join apple \" \"))))))\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple_count (string-to-integer s)))\n    (let ((orange_count (string-to-integer (substring s (string-length s) (string-length s) -1))))\n      (let ((mango_count (string-to-integer (substring s (string-length s) (string-length s) -2))))\n        (+ (mango_count mango_count) (apple_count orange_count))))))\n",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (/ (- orange apple) n)))\n      (+ mango (/ (- apple orange) n)))\n    (+ mango (/ (- orange apple) n)))\n)\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (define (fruit_count)\n    (cond\n      ((= n 0) 0)\n      ((<= n 0) 0)\n      ((= n s) (snd (car (cdr s))))\n      ((<= n s) (snd (car (cdr s))))\n      ((= n (car (cdr s))) (car (cdr (car (cdr s)))))\n      ((<= n (car (cdr s))) (car (cdr (car (cdr s)))))\n      (else (car (cdr (car (cdr s))))))))\n\n;; The following task is similar to the previous one but the number of apples and oranges \n;; is given as a list.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" [19])\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" [3])\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" [100])\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" [120])\n;; 19",
    "  (let ((apple-count (string-to-integer s)))\n    (let ((orange-count (string-to-integer (string-append s \" oranges\")))\n          (mango-count (string-to-integer (string-append s \" mango\"))))\n      (+ (string-to-integer (string-append mango-count orange-count)) apple-count)))\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (apple - orange)))\n      )))\n)\n",
    "  (let ((apple (string-split s \" \")))\n    (let ((orange (string-split (first apple) \" and \")))\n      (let ((mango (string-split (first orange) \" and \")))\n        (+ (first mango) (second mango) (first apple) (second apple) (first orange) (second orange) (first mango) (second mango) (first orange) (second orange) (first mango) (second mango) (first orange) (second orange) (first mango) (second mango) (first orange) (second orange) (first mango) (second mango) (first orange) (second orange) (first mango) (second mango) (first orange) (second orange) (first mango) (second mango) (first orange) (second orange) (first mango) (second mango) (first orange) (second orange) (first mango) (second mango) (first orange) (second orange) (first mango) (second mango) (first orange) (second orange) (first mango) (second mango) (first orange) (second orange) (first mango) (second mango) (first orange) (second orange) (first mango) (second mango) (first orange) (second orange) (first mango) (second mango) (first orange) (second orange) (first mango) (second mango) (first orange) (second orange) (first mango) (second mango) (first orange) (second orange) (first mango) (second mango) (first orange) (second orange) (first mango) (second mango) (first orange) (second orange) (first mango) (second mango) (first orange) (second orange) (first mango) (second mango) (first orange) (second orange) (first mango) (second mango) (first orange) (second orange) (first mango) (second mango) (first orange) (second orange) (first mango) (second mango) (first orange) (second orange) (first mango) (second mango) (first orange) (second orange) (first mango) (second mango) (first orange) (second orange) (first mango) (second mango) (first orange) (second orange) (first mango) (second mango) (first orange) (second orange) (first mango) (second mango) (first orange) (second orange) (first",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ (apple) (orange) (mango))))))\n",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (/ (- apple orange) n))))))\n",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ (apple) (orange) (mango))))))\n",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (let ((apple_count (apple)))\n          (let ((orange_count (orange)))\n            (let ((mango_count (mango)))\n              (let ((apple_mango_count (apple_count * mango_count)))\n                (let ((orange_mango_count (orange_count * mango_count)))\n                  (let ((mango_apple_count (mango_count * apple_count)))\n                    (let ((mango_orange_count (mango_count * orange_count)))\n                      (let ((apple_orange_count (apple_count * orange_count)))\n                        (let ((mango_apple_orange_count (mango_apple_count * apple_orange_count)))\n                          (let ((mango_orange_apple_count (mango_orange_count * orange_apple_count)))\n                            (let ((mango_apple_orange_mango_count (mango_apple_orange_count * mango_mango_count)))\n                              (let ((mango_orange_apple_orange_count (mango_orange_apple_count * orange_apple_orange_count)))\n                                (let ((mango_orange_apple_orange_mango_count (mango_orange_apple_orange_count * mango_mango_count)))\n                                  (let ((mango_orange_apple_orange_mango_mango_count (mango_orange_apple_orange_mango_count * mango_mango_count)))\n                                    (let ((mango_orange_apple_orange_mango_mango_mango_count (mango_orange_apple_orange_mango_mango_count * mango_mango_count)))\n                                      (let ((mango_orange_apple_orange_mango_mango_mango_mango_count (mango_orange_apple_orange_mango_mango_mango_count * mango_mango_count))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
    "  (let ((apple-count (string-to-integer (substring s 0 (string-index s \"apple\"))))\n        (orange-count (string-to-integer (substring s (string-index s \"orange\"))))\n        (mango-count (string-to-integer (substring s (string-index s \"mango\"))))\n        (apple-total (string-to-integer (substring s 0 (string-index s \"apple\"))))\n        (orange-total (string-to-integer (substring s (string-index s \"orange\"))))\n        (mango-total (string-to-integer (substring s (string-index s \"mango\"))))\n        (total-fruits (string-to-integer (substring s (string-index s \"fruits\"))))\n        (total-apples (string-to-integer (substring s 0 (string-index s \"apples\"))))\n        (total-oranges (string-to-integer (substring s (string-index s \"oranges\"))))\n        (total-mangoes (string-to-integer (substring s (string-index s \"mangoes\"))))\n        (apple-oranges (apple-count * orange-count))\n        (orange-mangoes (orange-count * mango-count))\n        (mango-apples (mango-count * apple-count))\n        (apple-mangoes (apple-count * mango-count))\n        (mango-oranges (mango-count * orange-count))\n        (mango-apples (mango-count * apple-count))\n        (mango-oranges (mango-count * orange-count))\n        (mango-apples (mango-count * apple-count))\n        (mango-oranges (mango-count * orange-count))\n        (mango-apples (mango-count * apple-count))\n        (mango-oranges (mango-count * orange-count))\n        (mango-apples (mango-count * apple-count))\n        (mango-oranges (mango-count * orange-count))\n        (mango-apples (mango-count *",
    "  (let ((apple (string-split s \" \")))\n    (let ((orange (string-split (string-join apple \" and \") \" \")))\n      (+ (string-length (string-join orange \" and \")) (string-length (string-join apple \" and \")))))\n  (+ (string-length (string-join orange \" and \")) (string-length (string-join apple \" and \")))))\n",
    "  (let ((apple (string-split s \" \")))\n    (let ((orange (string-split (string-join apple \" and \") \" \")))\n      (let ((mango (string-split (string-join orange \" and \") \" \")))\n        (+ (string-length mango) (string-length apple) (string-length orange) (n - (string-length mango) (string-length apple) (string-length orange)))))))\n",
    "  (let ((apple (string-split \" \" s)))\n    (let ((orange (string-split \" \" (car apple))))\n      (let ((mango (string-split \" \" (cdr orange))))\n        (+ (car mango) (car apple)))))\n  n)\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (/ (- apple orange) n))))))\n",
    "  (let ((apple-count (string-to-integer s)))\n    (let ((orange-count (string-to-integer (substring s (string-length s) (string-length s) -1))))\n      (let ((mango-count (string-to-integer (substring (substring s (string-length s) (string-length s) -1) (string-length s) -1))))\n        (+ (string-to-integer mango-count) (string-to-integer apple-count) (string-to-integer orange-count)))\n      (+ (string-to-integer mango-count) (string-to-integer orange-count) (string-to-integer apple-count))))\n)\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple (string-split s \" \")))\n    (let ((orange (string-split (string-join apple \" and \") \" \")))\n      (let ((mango (string-split (string-join orange \" and \") \" \")))\n        (+ (string-length mango) (n - (string-length apple) (string-length orange)))))))\n",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (* orange (/ apple 2)))))\n    (+ mango (* orange (/ apple 3)))))\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (* orange (/ apple orange)))))\n    (+ mango (* orange (/ apple orange)))))\n",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (apple - orange)))\n      )))\n)\n",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (/ (- apple orange) n))))))\n",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (let ((apple_count apple)\n              (orange_count orange)\n              (mango_count mango))\n          (+ (apple_count) (orange_count) (mango_count)))\n        (+ (apple_count) (orange_count) (mango_count)))\n      (+ (apple_count) (orange_count) (mango_count)))\n    (+ (apple_count) (orange_count) (mango_count))))\n",
    "  (let ((apple_count (string-to-integer s)))\n    (let ((orange_count (string-to-integer (substring s (string-length s) - 1))))\n      (let ((mango_count (string-to-integer (substring (substring s (string-length s) - 1) (string-length (substring s (string-length s) - 1)) - 1))))\n        (+ (string-to-integer (substring s (string-length s) - 1)) (string-to-integer (substring (substring s (string-length s) - 1) (string-length (substring s (string-length s) - 1)) - 1))))\n      (+ apple_count orange_count mango_count)))\n)\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (let ((apple_count (apple)))\n          (let ((orange_count (orange)))\n            (let ((mango_count (mango)))\n              (+ mango_count (apple_count) (orange_count))))))))))\n",
    "  (let ((apple-count (string-to-integer s)))\n    (let ((orange-count (string-to-integer (string-append s \" oranges\"))))\n      (let ((mango-count (string-to-integer (string-append s \" mango\"))))\n        (let ((apple-mango-count (string-to-integer (string-append s \" apples and mango\"))))\n          (let ((mango-apple-count (string-to-integer (string-append s \" mango and apples\"))))\n            (let ((apple-orange-count (string-to-integer (string-append s \" apples and oranges\"))))\n              (let ((orange-mango-count (string-to-integer (string-append s \" oranges and mango\"))))\n                (let ((mango-orange-count (string-to-integer (string-append s \" mango and oranges\"))))\n                  (let ((apple-mango-orange-count (string-to-integer (string-append s \" apples and mango and oranges\"))))\n                    (let ((orange-mango-apple-count (string-to-integer (string-append s \" oranges and mango and apples\"))))\n                      (let ((mango-orange-apple-count (string-to-integer (string-append s \" mango and oranges and apples\"))))\n                        (let ((apple-orange-mango-count (string-to-integer (string-append s \" apples and oranges and mango\"))))\n                          (let ((orange-apple-mango-count (string-to-integer (string-append s \" oranges and apples and mango\"))))\n                            (let ((mango-orange-apple-count (string-to-integer (string-append s \" mango and oranges and apples\"))))\n                              (let ((orange-mango-apple-count (string-to-integer (string-append s \" oranges and mango and apples\"))))\n                                (let ((mango-orange-apple-mango-count (string-to-integer (string-append s \" mango and oranges and apples\"))))\n                                  (let ((apple-orange-mango-count (string-to-integer (string-append s \" apples and oranges and mango\"))))\n                                    (let ((orange-apple-mango-count (string-",
    "  (let ((apple (string-split s \" \")))\n    (let ((orange (string-split (string-join apple \" and \") \" \")))\n      (let ((mango (string-split (string-join orange \" and \") \" \")))\n        (+ (string-length mango) (string-length apple) (string-length orange) (n - (string-length mango) (string-length apple) (string-length orange))))))\n)\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (let ((apple_count (apple)))\n          (let ((orange_count (orange)))\n            (let ((mango_count (mango)))\n              (let ((apple_mango_count (apple_count * mango_count)))\n                (let ((orange_mango_count (orange_count * mango_count)))\n                  (let ((apple_orange_mango_count (apple_mango_count + orange_mango_count)))\n                    (let ((apple_orange_mango_count (apple_orange_mango_count + apple_count * orange_count)))\n                      (let ((apple_orange_mango_count (apple_orange_mango_count + apple_count * orange_count)))\n                        (let ((apple_orange_mango_count (apple_orange_mango_count + apple_count * orange_count)))\n                          (let ((apple_orange_mango_count (apple_orange_mango_count + apple_count * orange_count)))\n                            (let ((apple_orange_mango_count (apple_orange_mango_count + apple_count * orange_count)))\n                              (let ((apple_orange_mango_count (apple_orange_mango_count + apple_count * orange_count)))\n                                (let ((apple_orange_mango_count (apple_orange_mango_count + apple_count * orange_count)))\n                                  (let ((apple_orange_mango_count (apple_orange_mango_count + apple_count * orange_count)))\n                                    (let ((apple_orange_mango_count (apple_orange_mango_count + apple_count * orange_count)))\n                                      (let ((apple_orange_mango_count (apple_orange_mango_count + apple_count * orange_count)))\n                                        (let ((apple_orange_mango_count (apple_orange_mango_count + apple_count * orange_count)))\n                                          (let ((apple_orange_mango_count (apple_orange_mango",
    "  (let ((apple-count (string-to-number (substring s 0 (string-index s \"apple\"))))\n        (orange-count (string-to-number (substring s (string-index s \"orange\"))))\n        (mango-count (string-to-number (substring s (string-index s \"mango\"))))\n        (apple-count-plus-orange-count (apple-count + orange-count))\n        (orange-count-plus-mango-count (orange-count + mango-count)))\n  (+ apple-count-plus-orange-count orange-count-plus-mango-count mango-count)))\n",
    "  (let ((apple (string-split s \" \")))\n    (let ((orange (string-split s \" \")))\n      (let ((mango (string-split s \" \")))\n        (+ (string-length mango) (string-length orange) (string-length apple) (n - (string-length mango) (string-length orange) (string-length apple)))))))\n",
    "  (let ((apple-count (string-to-integer s)))\n    (let ((orange-count (string-to-integer (substring s (string-length s) -1))))\n      (let ((mango-count (string-to-integer (substring (substring s (string-length s) -1) (string-length (substring s (string-length s) -1)) -1))))\n        (+ (string-to-integer (substring s (string-length s) -1)) mango-count))))\n",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (/ (- apple orange) n))))))\n",
    "  (let ((apple-count (string-to-integer s)))\n    (let ((orange-count (string-to-integer (substring s (string-length s) -1))))\n      (let ((mango-count (string-to-integer (substring (substring s (string-length s) -1) (string-length (substring s (string-length s) -1)) -1))))\n        (+ (string-to-integer (substring s (string-length s) -1)) mango-count))))\n",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (/ (- apple orange) n))))))\n",
    "  (let ((apple (string-split s \" \")))\n    (let ((orange (string-split (first apple) \" and \")))\n      (let ((mango (string-split (first orange) \" and \")))\n        (+ (first mango) (second mango) (first apple) (second apple) (first orange) (second orange) (first mango) (second mango) (first apple) (second apple) (first orange) (second orange) (first mango) (second mango) (first apple) (second apple) (first orange) (second orange) (first mango) (second mango) (first apple) (second apple) (first orange) (second orange) (first mango) (second mango) (first apple) (second apple) (first orange) (second orange) (first mango) (second mango) (first apple) (second apple) (first orange) (second orange) (first mango) (second mango) (first apple) (second apple) (first orange) (second orange) (first mango) (second mango) (first apple) (second apple) (first orange) (second orange) (first mango) (second mango) (first apple) (second apple) (first orange) (second orange) (first mango) (second mango) (first apple) (second apple) (first orange) (second orange) (first mango) (second mango) (first apple) (second apple) (first orange) (second orange) (first mango) (second mango) (first apple) (second apple) (first orange) (second orange) (first mango) (second mango) (first apple) (second apple) (first orange) (second orange) (first mango) (second mango) (first apple) (second apple) (first orange) (second orange) (first mango) (second mango) (first apple) (second apple) (first orange) (second orange) (first mango) (second mango) (first apple) (second apple) (first orange) (second orange) (first mango) (second mango) (first apple) (second apple) (first orange) (second orange) (first mango) (second mango) (first apple) (second apple) (first orange) (second orange) (first mango) (second mango) (first apple) (second apple) (first orange) (second orange) (first",
    "  (define (count-mangoes n)\n    (if (>= n 0)\n      (+ (count-mangoes (- n 1))\n         (count-mangoes (- n 2))\n         (count-mangoes (- n 3))\n         (count-mangoes (- n 4))\n         (count-mangoes (- n 5))\n         (count-mangoes (- n 6))\n         (count-mangoes (- n 7))\n         (count-mangoes (- n 8))\n         (count-mangoes (- n 9))\n         (count-mangoes (- n 10))))\n    (+ (count-mangoes (- n 1))\n       (count-mangoes (- n 2))\n       (count-mangoes (- n 3))\n       (count-mangoes (- n 4))\n       (count-mangoes (- n 5))\n       (count-mangoes (- n 6))\n       (count-mangoes (- n 7))\n       (count-mangoes (- n 8))\n       (count-mangoes (- n 9))\n       (count-mangoes (- n 10))))\n  (+ (count-mangoes (- n 1))\n     (count-mangoes (- n 2))\n     (count-mangoes (- n 3))\n     (count-mangoes (- n 4))\n     (count-mangoes (- n 5))\n     (count-mangoes (- n 6))\n     (count-mangoes (- n 7))\n     (count-mangoes (- n 8))\n     (count-mangoes (- n 9))\n     (count-mangoes (- n 10))))\n  (+ (count-mangoes (- n 1))\n     (count-mangoes (- n 2))\n     (count-mangoes (- n 3))\n     (count-mangoes (- n 4))\n     (count-mangoes (- n 5))\n     (count-mangoes (- n 6))\n     (count-mangoes (- n 7))\n     (count-mangoes (- n 8))\n     (count-mangoes (- n 9))\n     (count-mangoes (- n 10))))\n  (+",
    "  (let ((apple (string-split \" \" s)))\n    (let ((orange (string-split \" \" (car apple)))\n          (mango (string-split \" \" (cdr apple))))\n      (+ (string-length (car mango)) (string-length (cdr mango))))))\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple-count (string-to-integer s)))\n    (let ((orange-count (string-to-integer (substring s (string-length s) -1))))\n      (let ((mango-count (string-to-integer (substring (substring s (string-length s) -1) (string-length (substring s (string-length s) -1)) -1))))\n        (+ (string-to-integer (substring s (string-length s) -1)) mango-count))))\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple (string-split s \" \")))\n    (let ((orange (string-split (first apple) \" and \")))\n      (let ((mango (string-split (first orange) \" and \")))\n        (+ (string-length (first mango)) (string-length (second mango)))))))\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple (string-to-number (substring s 0 (string-length s) -1))))\n    (let ((orange (string-to-number (substring s (string-length s) +1))))\n      (+ apple orange)))\n  (+ n apple))\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple (string-split s \" \"))\n        (orange (string-split s \" \")))\n    (+ (string-length apple) (string-length orange))\n  )\n)\n",
    "  (let ((apple (string-split s \" \"))\n        (orange (string-split s \" \")))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-",
    "  (let ((apple (string-split s \" \")))\n    (let ((orange (string-split (string-join apple \" and \") \" \")))\n      (let ((mango (string-split (string-join orange \" and \") \" \")))\n        (+ (string-length mango) (n - (string-length apple) - (string-length orange)))))))\n",
    "  (let ((apple (string-split s \" \")))\n    (let ((orange (string-split (string-join apple \" and \") \" \")))\n      (let ((mango (string-split (string-join orange \" and \") \" \")))\n        (+ (string-length mango) (n - (string-length apple) - (string-length orange)))))))\n",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number (substring s (length s) - 1))))\n      (let ((mango (string->number (substring s (length s) - 2))))\n        (+ mango (* orange apple))))))\n",
    "  (define (fruit_count)\n    (+ (string-length s)\n      (+ (string-length \"apple\")\n        (+ (string-length \"orange\")\n          (+ (string-length \"mango\")\n            (+ (string-length \"apple\")\n              (+ (string-length \"orange\")\n                (+ (string-length \"mango\"))))))))))\n  (+ (string-length s)\n    (+ (string-length \"apple\")\n      (+ (string-length \"orange\")\n        (+ (string-length \"mango\")\n          (+ (string-length \"apple\")\n            (+ (string-length \"orange\")\n              (+ (string-length \"mango\"))))))))))\n  (+ (string-length s)\n    (+ (string-length \"apple\")\n      (+ (string-length \"orange\")\n        (+ (string-length \"mango\")\n          (+ (string-length \"apple\")\n            (+ (string-length \"orange\")\n              (+ (string-length \"mango\"))))))))))\n  (+ (string-length s)\n    (+ (string-length \"apple\")\n      (+ (string-length \"orange\")\n        (+ (string-length \"mango\")\n          (+ (string-length \"apple\")\n            (+ (string-length \"orange\")\n              (+ (string-length \"mango\"))))))))))\n  (+ (string-length s)\n    (+ (string-length \"apple\")\n      (+ (string-length \"orange\")\n        (+ (string-length \"mango\")\n          (+ (string-length \"apple\")\n            (+ (string-length \"orange\")\n              (+ (string-length \"mango\"))))))))))\n  (+ (string-length s)\n    (+ (string-length \"apple\")\n      (+ (string-length \"orange\")\n        (+ (string-length \"mango\")\n          (+ (string-length \"apple\")\n            (+ (string-length \"orange\")\n              (+ (string-length \"mango\"))))))))))\n  (+ (string-length s)\n    (+ (string-length",
    "  (let ((apple (string-split s \" \")))\n    (let ((orange (string-split s \" \")))\n      (let ((mango (string-split s \" \")))\n        (+ (string-length mango)\n          (+ (string-length apple)\n            (+ (string-length orange)\n              (+ (string-length s)\n                (+ (string-length \"apple\")\n                  (+ (string-length \"orange\")\n                    (+ (string-length \"mango\")\n                      (+ (string-length \" \"))))))))))))))\n",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (/ (/ orange apple) n) (/ apple mango)))\n      )))\n",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (let ((apple_count apple)\n              (orange_count orange)\n              (mango_count mango))\n          (+ (apple_count) (orange_count) (mango_count)))\n        (+ (apple_count) (orange_count) (mango_count)))))\n  (+ (apple) (orange) (mango)))\n",
    "  (let ((apple-count (string-to-integer s)))\n    (let ((orange-count (string-to-integer (string-append s \" oranges\")))\n          (mango-count (string-to-integer (string-append s \" mango\"))))\n      (+ (string-to-integer (string-append mango-count orange-count)) apple-count)))\n",
    "  (define (count-mangoes n)\n    (cond\n      ((= n 0) 0)\n      ((< n 0) 0)\n      ((= n 1) 1)\n      ((> n 1) (count-mangoes (- n 1)))\n      (else (count-mangoes (- n 1)))))\n  (define (count-apples n)\n    (cond\n      ((= n 0) 0)\n      ((< n 0) 0)\n      ((= n 1) 1)\n      ((> n 1) (count-apples (- n 1)))\n      (else (count-apples (- n 1)))))\n  (define (count-oranges n)\n    (cond\n      ((= n 0) 0)\n      ((< n 0) 0)\n      ((= n 1) 1)\n      ((> n 1) (count-oranges (- n 1)))\n      (else (count-oranges (- n 1)))))\n  (define (count-mango n)\n    (cond\n      ((= n 0) 0)\n      ((< n 0) 0)\n      ((= n 1) 1)\n      ((> n 1) (count-mango (- n 1)))\n      (else (count-mango (- n 1)))))\n  (define (count-fruit n)\n    (cond\n      ((= n 0) 0)\n      ((< n 0) 0)\n      ((= n 1) 1)\n      ((> n 1) (count-fruit (- n 1)))\n      (else (count-fruit (- n 1)))))\n  (count-mangoes (string-to-number s))\n  (count-apples (string-to-number (substring s 1 2)))\n  (count-oranges (string-to-number (substring s 3 4)))\n  (count-mango (string-to-number (substring s 5 6)))\n  (count-fruit (string-to-number (substring s 7 8))))\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;;",
    "  (let ((apple_count (string-to-integer s)))\n    (let ((orange_count (string-to-integer (substring s (string-length s) - 1))))\n      (let ((mango_count (string-to-integer (substring (substring s (string-length s) - 1) (string-length (substring s (string-length s) - 1)) - 1))))\n        (+ (string-to-integer (substring s (string-length s) - 1)) mango_count))))\n",
    "  (let ((apple (string-to-number (substring s 0 (string-index s \"apple\"))))\n        (orange (string-to-number (substring s (string-index s \"orange\"))))\n        (mango (string-to-number (substring s (string-index s \"mango\"))))\n        (total (string-to-number (substring s (string-index s \"and\"))))\n        (apple_count (string-to-number (substring s (string-index s \"apple\"))))\n        (orange_count (string-to-number (substring s (string-index s \"orange\"))))\n        (mango_count (string-to-number (substring s (string-index s \"mango\"))))\n        (total_count (string-to-number (substring s (string-index s \"and\"))))))\n  (+ (mango_count (if (= (total_count) 0) 0 (if (= (apple_count) 0) 0 (if (= (orange_count) 0) 0 mango_count))))))\n",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ (apple) (orange) (mango)))\n      )))\n)\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple (string-split s \" \")))\n    (let ((orange (string-split (first apple) \" and \")))\n      (let ((mango (string-split (first orange) \" and \")))\n        (+ (first mango) (second mango) (first apple) (second apple) (first orange) (second orange))))))\n",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (/ (/ orange apple) n) (/ apple mango)))\n      )))\n",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (* orange (/ apple n)))))\n    mango))\n",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (/ (/ orange apple) n) (/ apple mango)))\n      (+ mango (/ (/ orange apple) n) (/ orange mango))))\n  (+ mango (/ (/ orange apple) n) (/ apple mango)))\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (define (fruit_count)\n    (if (>= n 0)\n      (+ (string-length s) (string-length \"apple\"))\n      (+ (string-length s) (string-length \"orange\"))\n      (+ (string-length s) (string-length \"mango\"))\n      0)))\n  (define (fruit_count_recur)\n    (if (>= n 0)\n      (+ (string-length s) (string-length \"apple\"))\n      (+ (string-length s) (string-length \"orange\"))\n      (+ (string-length s) (string-length \"mango\"))\n      0)\n    (if (>= n 0)\n      (+ (string-length s) (string-length \"apple\"))\n      (+ (string-length s) (string-length \"orange\"))\n      (+ (string-length s) (string-length \"mango\"))\n      0)))\n  (define (fruit_count_recur_helper)\n    (if (>= n 0)\n      (+ (string-length s) (string-length \"apple\"))\n      (+ (string-length s) (string-length \"orange\"))\n      (+ (string-length s) (string-length \"mango\"))\n      0)\n    (if (>= n 0)\n      (+ (string-length s) (string-length \"apple\"))\n      (+ (string-length s) (string-length \"orange\"))\n      (+ (string-length s) (string-length \"mango\"))\n      0)\n    (if (>= n 0)\n      (+ (string-length s) (string-length \"apple\"))\n      (+ (string-length s) (string-length \"orange\"))\n      (+ (string-length s) (string-length \"mango\"))\n      0)\n    (if (>= n 0)\n      (+ (string-length s) (string-length \"apple\"))\n      (+ (string-length s) (string-length \"orange\"))\n      (+ (string-length s) (string-length \"mango\"))\n      0)\n    (if (>= n 0)\n      (+ (string-length s) (string-",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (/ (- apple orange) n)))\n      )))\n)\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple (string-split s \" \")))\n    (let ((orange (string-split (first apple) \" and \")))\n      (let ((mango (string-split (first orange) \" and \")))\n        (+ (string-length (first mango)) (string-length (second mango)))))))\n",
    "  (let ((apple (string-split s \" \"))\n        (orange (string-split s \" \")))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-",
    "  (let ((apple (string-to-number (substring s 0 (string-length s) -1))))\n    (let ((orange (string-to-number (substring s (string-length s) +1))))\n      (let ((mango (string-to-number (substring s (string-length s) +2))))\n        (+ apple orange mango))))\n  (+ n (fruit_distribution (substring s (string-length s) +2) (string-length s))))\n",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (let ((apple_count apple)\n              (orange_count orange)\n              (mango_count mango))\n          (+ (apple_count) (orange_count) (mango_count)))\n        (+ (apple_count) (orange_count) (mango_count)))))\n  (+ (apple) (orange) (mango)))\n",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (let ((apple_count (apple)))\n          (let ((orange_count (orange)))\n            (let ((mango_count (mango)))\n              (let ((apple_oranges (apple_count * orange_count)))\n                (let ((orange_mangoes (orange_count * mango_count)))\n                  (let ((mango_apple (mango_count * apple_count)))\n                    (let ((mango_orange (mango_count * orange_count)))\n                      (let ((mango_mangoes (mango_count * mango_count)))\n                        (let ((apple_orange (apple_count * orange_count)))\n                          (let ((orange_apple (orange_count * apple_count)))\n                            (let ((orange_mango (orange_count * mango_count)))\n                              (let ((mango_orange (mango_count * orange_count)))\n                                (let ((mango_apple_mangoes (mango_count * apple_oranges)))\n                                  (let ((mango_orange_mangoes (mango_count * orange_oranges)))\n                                    (let ((mango_apple_orange (mango_count * apple_orange)))\n                                      (let ((mango_orange_apple (mango_count * orange_apple)))\n                                        (let ((mango_orange_orange (mango_count * orange_orange)))\n                                          (let ((mango_orange_mango (mango_count * orange_mango)))\n                                            (let ((mango_apple_mango (mango_count * apple_mango)))\n                                              (let ((mango_orange_mango (mango_count * orange_mango)))\n                                                (let ((mango_apple_orange (mango_count * apple_orange)))\n                                                  (let ((mango_orange_apple (mango_count * orange_apple)))\n                                                    (let ((mango_orange_orange (mango_count * orange_orange)))\n                                ",
    "  (let ((apple-count (string-to-integer s)))\n    (let ((orange-count (string-to-integer (substring s (string-length s) -1))))\n      (let ((mango-count (string-to-integer (substring (substring s (string-length s) -1) (string-length (substring s (string-length s) -1)) -1))))\n        (+ (string-to-integer (substring s (string-length s) -1)) mango-count))))\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (define (count-mangoes n)\n    (if (>= n 0)\n      (+ (count-mangoes (- n 1))\n         (count-mangoes (- n 2))\n         (count-mangoes (- n 3))\n         (count-mangoes (- n 4))\n         (count-mangoes (- n 5))\n         (count-mangoes (- n 6))\n         (count-mangoes (- n 7))\n         (count-mangoes (- n 8))\n         (count-mangoes (- n 9))\n         (count-mangoes (- n 10))))\n    (+ (count-mangoes n)\n       (count-mangoes (- n 1))\n       (count-mangoes (- n 2))\n       (count-mangoes (- n 3))\n       (count-mangoes (- n 4))\n       (count-mangoes (- n 5))\n       (count-mangoes (- n 6))\n       (count-mangoes (- n 7))\n       (count-mangoes (- n 8))\n       (count-mangoes (- n 9))\n       (count-mangoes (- n 10))))\n  (+ (count-mangoes (- n 1))\n     (count-mangoes (- n 2))\n     (count-mangoes (- n 3))\n     (count-mangoes (- n 4))\n     (count-mangoes (- n 5))\n     (count-mangoes (- n 6))\n     (count-mangoes (- n 7))\n     (count-mangoes (- n 8))\n     (count-mangoes (- n 9))\n     (count-mangoes (- n 10))))\n  (+ (count-mangoes (- n 2))\n     (count-mangoes (- n 3))\n     (count-mangoes (- n 4))\n     (count-mangoes (- n 5))\n     (count-mangoes (- n 6))\n     (count-mangoes (- n 7))\n     (count-mangoes (- n 8))\n     (count-mangoes (- n 9))\n     (count-mangoes (- n 10))))\n  (+ (count",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (let ((apple_count (apple)))\n          (let ((orange_count (orange)))\n            (let ((mango_count (mango)))\n              (let ((apple_mango_count (apple_count * mango_count)))\n                (let ((orange_mango_count (orange_count * mango_count)))\n                  (let ((apple_orange_mango_count (apple_mango_count + orange_mango_count)))\n                    (let ((apple_orange_mango_count (apple_orange_mango_count + apple_count * orange_count)))\n                      (let ((apple_orange_mango_count (apple_orange_mango_count + apple_count * orange_count + apple_count * orange_count)))\n                        (let ((apple_orange_mango_count (apple_orange_mango_count + apple_count * orange_count + apple_count * orange_count + apple_count * orange_count)))\n                          (let ((apple_orange_mango_count (apple_orange_mango_count + apple_count * orange_count + apple_count * orange_count + apple_count * orange_count + apple_count * orange_count)))\n                            (let ((apple_orange_mango_count (apple_orange_mango_count + apple_count * orange_count + apple_count * orange_count + apple_count * orange_count + apple_count * orange_count + apple_count * orange_count)))\n                              (let ((apple_orange_mango_count (apple_orange_mango_count + apple_count * orange_count + apple_count * orange_count + apple_count * orange_count + apple_count * orange_count + apple_count * orange_count + apple_count * orange_count)))\n                                (let ((apple_orange_mango_count (apple_orange_mango_count + apple_count * orange_count + apple_count * orange_count + apple_count * orange_count + apple_count * orange_count + apple_count * orange_count + apple_count *",
    "  (let ((apple (string-split s \" \")))\n    (let ((orange (string-split (string-join apple \" and \") \" \")))\n      (let ((mango (string-split (string-join orange \" and \") \" \")))\n        (+ (string-length mango) (string-length apple) (string-length orange)))\n      (+ (string-length mango) (string-length apple) (string-length orange)))\n    (+ (string-length mango) (string-length apple) (string-length orange)))\n  (+ (string-length mango) (string-length apple) (string-length orange)))\n)\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (/ (- apple orange) n)))\n      )))\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple (string-split s \" \")))\n    (let ((orange (string-split (first apple) \" \")))\n      (let ((mango (string-split (first orange) \" \")))\n        (+ (first mango) (second mango) (first apple) (second apple) (first orange) (second orange))))))\n",
    "  (let ((apple (string-split s \" \"))\n        (orange (string-split s \" \")))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-length apple) (string-length orange))\n    (+ (string-",
    "  (let ((apple (string-split s \" \")))\n    (let ((orange (string-split (string-join apple \" and \") \" \")))\n      (let ((mango (string-split (string-join orange \" and \") \" \")))\n        (+ (string-length mango) (string-length apple) (string-length orange)))\n      (+ (string-length mango) (string-length apple) (string-length orange)))))\n",
    "  (let ((apple (string-split s \" \")))\n    (let ((orange (string-split (string-join apple \" and \") \" \")))\n      (let ((mango (string-split (string-join orange \" and \") \" \")))\n        (+ (string-length mango) (n - (string-length apple) - (string-length orange)))))))\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ (apple) (orange) (mango))))))\n",
    "  (let ((apple (string-split s \" \")))\n    (let ((orange (string-split (string-join apple \" and \") \" \")))\n      (let ((mango (string-split (string-join orange \" and \") \" \")))\n        (+ (string-length mango) (n - (string-length apple) (string-length orange)))))))\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple_count (string-to-integer s)))\n    (let ((orange_count (string-to-integer (string-append s \" oranges\"))))\n      (let ((mango_count (string-to-integer (string-append s \" mango\"))))\n        (+ mango_count (string-to-integer (string-append (string-append orange_count apple_count) \" apples\"))))))\n",
    "  (let ((apple (string-split s \" \")))\n    (let ((orange (string-split (string-join apple \" and \") \" \")))\n      (+ (string-length (string-join orange \" and \")) (string-length (string-join apple \" and \")))))\n  (+ (string-length (string-join orange \" and \")) (string-length (string-join apple \" and \")))))\n",
    "  (let ((apple (string-split s \" \")))\n    (let ((orange (string-split (string-join apple \" and \") \" \")))\n      (let ((mango (string-split (string-join orange \" and \") \" \")))\n        (+ (string-length mango) (string-length apple) (string-length orange) (n - (string-length mango) - (string-length apple) - (string-length orange))))))\n)\n",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (/ (- apple orange) n))))))\n",
    "  (let ((apple (string-split s \" \")))\n    (let ((orange (string-split (first apple) \" and \")))\n      (let ((mango (string-split (first orange) \" and \")))\n        (+ (first mango) (string-length (first apple)))))\n    (+ (first apple) (string-length (first orange)))))\n",
    "  (let ((apple (string-to-number (substring s 0 (string-length s) -1))))\n    (let ((orange (string-to-number (substring s (string-length s) +1))))\n      (+ (apple) (orange) (n - apple - orange))))))\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple (string-split s \" \")))\n    (let ((orange (string-split (first apple) \" and \")))\n      (let ((mango (string-split (first orange) \" and \")))\n        (+ (string-length (first mango)) (string-length (first apple)))))\n    (+ (string-length (first orange)) (string-length (first apple)))))\n",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (/ (- orange apple) n)))))\n  (+ mango (/ (- apple orange) n)))\n",
    "  (let ((apple (string-split s \" \"))\n        (orange (string-split s \" \")))\n    (+ (string-length apple) (string-length orange))\n  )\n)\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple (string-split s \" \")))\n    (let ((orange (string-split (string-join apple \" and \") \" \")))\n      (let ((mango (string-split (string-join orange \" and \") \" \")))\n        (+ (string-length mango) (string-length apple) (string-length orange)))))\n)\n",
    "  (let ((apple-count (string-to-integer s)))\n    (let ((orange-count (string-to-integer (string-append s \" oranges\"))))\n      (let ((mango-count (string-to-integer (string-append s \" mango\"))))\n        (+ mango-count (* orange-count apple-count))))))\n",
    "  (define (fruit_count)\n    (cond ((= 0 n) 0)\n      ((<= 0 s) 0)\n      ((= s n) (fruit_count (+ 1 (fruit_count (- 1 s)))))))\n  (+ (fruit_count (- 1 s)) (fruit_count s)))\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple (string-split s \" \")))\n    (let ((orange (string-split s \" \")))\n      (let ((mango (string-split s \" \")))\n        (+ (string-length mango) (string-length apple) (string-length orange)))\n      )))\n)\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (/ (- apple orange) n))))))\n",
    "  (let ((apple (string-split s \" \"))\n        (orange (string-split s \" \")))\n    (+ (string-length apple) (string-length orange))\n  )\n)\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (define (fruit_count)\n    (cond\n      ((= n 0) 0)\n      ((= n 1) 1)\n      ((= n 2) 2)\n      ((= n 3) 3)\n      ((= n 4) 4)\n      ((= n 5) 5)\n      ((= n 6) 6)\n      ((= n 7) 7)\n      ((= n 8) 8)\n      ((= n 9) 9)\n      ((= n 10) 10)\n      ((= n 11) 11)\n      ((= n 12) 12)\n      ((= n 13) 13)\n      ((= n 14) 14)\n      ((= n 15) 15)\n      ((= n 16) 16)\n      ((= n 17) 17)\n      ((= n 18) 18)\n      ((= n 19) 19)\n      ((= n 20) 20)\n      ((= n 21) 21)\n      ((= n 22) 22)\n      ((= n 23) 23)\n      ((= n 24) 24)\n      ((= n 25) 25)\n      ((= n 26) 26)\n      ((= n 27) 27)\n      ((= n 28) 28)\n      ((= n 29) 29)\n      ((= n 30) 30)\n      ((= n 31) 31)\n      ((= n 32) 32)\n      ((= n 33) 33)\n      ((= n 34) 34)\n      ((= n 35) 35)\n      ((= n 36) 36)\n      ((= n 37) 37)\n      ((= n 38) 38)\n      ((= n 39) 39)\n      ((= n 40) 40)\n      ((= n 41) 41)\n      ((= n 42) 42)\n      ((= n 43) 43)\n      ((= n 44) 44)\n      ((= n 45) 45)\n      ((= n 46) 46)\n      ((= n 47) 47)\n      ((= n 48) 48)\n      ((= n 49) 49)\n      ((= n 50) 50)\n      ((= n 51) 51)\n      ((= n 52) 52)\n      ((= n 53) 53)\n      ((= n 54) 54)\n      ((= n",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (/ (- apple orange) n))))))\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple (string-split s \" \")))\n    (let ((orange (string-split (string-join apple \" and \") \" \")))\n      (let ((mango (string-split (string-join orange \" and \") \" \")))\n        (+ (string-length mango) (string-length apple) (string-length orange)))\n      (+ (string-length mango) (string-length apple) (string-length orange)))\n    (+ (string-length mango) (string-length apple) (string-length orange)))\n  (+ (string-length mango) (string-length apple) (string-length orange)))\n)\n",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (/ (- orange apple) n)))))\n)\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple-count (string-to-integer (substring s 0 (string-index s \"apple\"))))\n         (orange-count (string-to-integer (substring s (string-index s \"orange\"))))\n         (mango-count (string-to-integer (substring s (string-index s \"mango\"))))\n         (total-count (string-to-integer (substring s (string-index s \"apple\"))))\n         (apple-count-in-basket apple-count))\n  (+ mango-count (mango-count-in-basket orange-count))\n  (+ (mango-count-in-basket apple-count) (mango-count-in-basket orange-count)))\n)\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (/ (- apple orange) n))))))\n",
    "  (let ((apple (string-split s \" \"))\n        (orange (string-split s \" and \")))\n    (+ (string-length apple) (string-length orange))\n  )\n)\n\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19",
    "  (let ((apple (string->number s)))\n    (let ((orange (string->number s)))\n      (let ((mango (string->number s)))\n        (+ mango (/ (- orange apple) n)\n          (+ mango (/ (- apple orange) n)\n            (+ mango (/ (- orange mango) n)\n              (+ mango (/ (- mango orange) n)\n                (+ mango (/ (- mango orange) n)\n                  (+ mango (/ (- mango mango) n))))))))))\n",
    "  (define (fruit_count)\n    (cond\n      ((= n 0) 0)\n      ((= n 1) 1)\n      ((= n 2) 2)\n      ((= n 3) 3)\n      ((= n 4) 4)\n      ((= n 5) 5)\n      ((= n 6) 6)\n      ((= n 7) 7)\n      ((= n 8) 8)\n      ((= n 9) 9)\n      ((= n 10) 10)\n      ((= n 11) 11)\n      ((= n 12) 12)\n      ((= n 13) 13)\n      ((= n 14) 14)\n      ((= n 15) 15)\n      ((= n 16) 16)\n      ((= n 17) 17)\n      ((= n 18) 18)\n      ((= n 19) 19)\n      ((= n 20) 20)\n      ((= n 21) 21)\n      ((= n 22) 22)\n      ((= n 23) 23)\n      ((= n 24) 24)\n      ((= n 25) 25)\n      ((= n 26) 26)\n      ((= n 27) 27)\n      ((= n 28) 28)\n      ((= n 29) 29)\n      ((= n 30) 30)\n      ((= n 31) 31)\n      ((= n 32) 32)\n      ((= n 33) 33)\n      ((= n 34) 34)\n      ((= n 35) 35)\n      ((= n 36) 36)\n      ((= n 37) 37)\n      ((= n 38) 38)\n      ((= n 39) 39)\n      ((= n 40) 40)\n      ((= n 41) 41)\n      ((= n 42) 42)\n      ((= n 43) 43)\n      ((= n 44) 44)\n      ((= n 45) 45)\n      ((= n 46) 46)\n      ((= n 47) 47)\n      ((= n 48) 48)\n      ((= n 49) 49)\n      ((= n 50) 50)\n      ((= n 51) 51)\n      ((= n 52) 52)\n      ((= n 53) 53)\n      ((= n 54) 54)\n      ((= n",
    "  (let ((apple-count (string-to-integer s)))\n    (let ((orange-count (string-to-integer (substring s (string-length s) - 1))))\n      (let ((mango-count (string-to-integer (substring (substring s (string-length s) - 1) (string-length (substring s (string-length s) - 1)) - 1))))\n        (+ (string-to-integer (substring s (string-length s) - 1)) (string-to-integer (substring (substring s (string-length s) - 1) (string-length (substring s (string-length s) - 1)) - 1))))\n      (+ (string-to-integer (substring s (string-length s) - 1)) (string-to-integer (substring (substring s (string-length s) - 1) (string-length (substring s (string-length s) - 1)) - 1))))\n    (+ apple-count orange-count mango-count)))\n"
  ],
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ]
}