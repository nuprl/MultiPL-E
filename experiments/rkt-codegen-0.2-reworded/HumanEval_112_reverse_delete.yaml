name: HumanEval_112_reverse_delete
language: rkt
prompt: "#lang racket\n\n;; Task\n;; We are given two strings s and c, you have to\
  \ deleted all the characters in s that are equal to any character in c\n;; then\
  \ check if the result string is palindrome.\n;; A string is called palindrome if\
  \ it reads the same backward as forward.\n;; You should return a list containing\
  \ the result string and #t/#f for the check.\n;; Example\n;; >>> (reverse_delete\
  \ \"abcde\" \"ae\")\n;; (list \"bcd\" #f)\n;; >>> (reverse_delete \"abcdef\" \"\
  b\")\n;; (list \"acdef\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list\
  \ \"cdedc\" #t)\n(define (reverse_delete s c)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate reverse_delete))\n\
  \    (check-equal? (candidate \"abcde\" \"ae\") (list \"bcd\" #f))\n    (check-equal?\
  \ (candidate \"abcdef\" \"b\") (list \"acdef\" #f))\n    (check-equal? (candidate\
  \ \"abcdedcba\" \"ab\") (list \"cdedc\" #t))\n    (check-equal? (candidate \"dwik\"\
  \ \"w\") (list \"dik\" #f))\n    (check-equal? (candidate \"a\" \"a\") (list \"\"\
  \ #t))\n    (check-equal? (candidate \"abcdedcba\" \"\") (list \"abcdedcba\" #t))\n\
  \    (check-equal? (candidate \"abcdedcba\" \"v\") (list \"abcdedcba\" #t))\n  \
  \  (check-equal? (candidate \"vabba\" \"v\") (list \"abba\" #t))\n    (check-equal?\
  \ (candidate \"mamma\" \"mia\") (list \"\" #t))\n))\n\n(test-humaneval)"
completions: ["  (let ((result (list)))\n    (let ((i 0))\n      (while (< i (string-length\
    \ s))\n        (if (string= c (string-ref s i))\n          (setf result (append\
    \ result (list (string-substring s i (1+ i)))))\n          (setf i (1+ i)))\n\
    \        (setf i (1+ i)))\n      result))\n  result)\n", "  (let ((result \"\"\
    ))\n    (let ((i 0))\n      (while (< i (string-length s))\n        (if (string=\
    \ (string-substring s i i) c)\n            (set! result (string-append result\
    \ (string-substring s i i)))\n            (set! i (string-increment i)))))\n \
    \   (if (string= result s)\n        #t\n        (list result #f)))\n", "  (let\
    \ ((result (list)))\n    (for-each (lambda (x) (set-car! result (string-append\
    \ (string-delete x s) \"\"))) c)\n    (set-cdr! result #t)))\n", "  (define (reverse_delete-helper\
    \ s c)\n    (cond\n      [(string-length s)\n        (reverse_delete-helper (string-copy\
    \ s 0 (string-length s) -1) c)]\n      [(string-length c)\n        (reverse_delete-helper\
    \ (string-copy s 0 (string-length s) -1) (string-copy c 0 (string-length c) -1))]\n\
    \      [(string-length s)\n        (string-copy s (string-length s) -1)]\n   \
    \   [(string-length c)\n        (string-copy c (string-length c) -1)]\n      [#t\
    \ #f]\n    )\n  )\n  (reverse_delete-helper s c))\n", "  (let ((result (list)))\n\
    \    (for-each (lambda (x) (set-car! result (string-append (string-reverse x)\
    \ (string-reverse c)))) s)\n    (set-cdr! result #t)))\n\n;;; (reverse_delete\
    \ \"abcdedcba\" \"ab\")\n;;; (reverse_delete \"abcdef\" \"b\")\n;;; (reverse_delete\
    \ \"abcde\" \"ae\")\n;;; (reverse_delete \"abcdef\" \"b\")\n;;; (reverse_delete\
    \ \"abcdef\" \"b\")\n;;; (reverse_delete \"abcdef\" \"b\")\n;;; (reverse_delete\
    \ \"abcdef\" \"b\")\n;;; (reverse_delete \"abcdef\" \"b\")\n;;; (reverse_delete\
    \ \"abcdef\" \"b\")\n;;; (reverse_delete \"abcdef\" \"b\")\n;;; (reverse_delete\
    \ \"abcdef\" \"b\")\n;;; (reverse_delete \"abcdef\" \"b\")\n;;; (reverse_delete\
    \ \"abcdef\" \"b\")\n;;; (reverse_delete \"abcdef\" \"b\")\n;;; (reverse_delete\
    \ \"abcdef\" \"b\")\n;;; (reverse_delete \"abcdef\" \"b\")\n;;; (reverse_delete\
    \ \"abcdef\" \"b\")\n;;; (reverse_delete \"abcdef\" \"b\")\n;;; (reverse_delete\
    \ \"abcdef\" \"b\")\n;;; (reverse_delete \"abcdef\" \"b\")\n;;; (reverse_delete\
    \ \"abcdef\" \"b\")\n;;; (reverse_delete \"abcdef\" \"b\")\n;;; (reverse_delete\
    \ \"abcdef\" \"b\")\n;;; (reverse_delete \"abcdef\" \"b\")\n;;; (reverse_delete\
    \ \"abcdef\" \"b\")\n;;; (reverse_delete \"abcdef\" \"b\")\n;;; (reverse_delete\
    \ \"abcdef\" \"b\")\n;;; (reverse_delete \"abcdef\" \"b\")\n;;; (reverse_delete\
    \ \"abcdef\" \"b\")\n;;; (reverse_delete \"abcdef\" \"b\")\n;;; (reverse_delete\
    \ \"abcdef\" \"b\")\n;;; (reverse_delete \"abcdef\" \"b\")\n;;; (reverse_", " \
    \ (let ((result (list \"\" #f)))\n    (for-each (lambda (x) (set-car! result (string-append\
    \ (string-append (cdr x) (cdr (cdr x))) #\"\") #t)) s)\n    (set-cdr! result (reverse\
    \ result))))\n", "  (let ((result (list \"\" #f)))\n    (let ((i 0))\n      (while\
    \ (< i (string-length s))\n        (if (string=? (string-substring s i i) c)\n\
    \            (set result (list (string-append (string-substring result i i) (string-substring\
    \ s i i)) #t))\n          (set i (string-next-index s i)))\n        (set i (string-next-index\
    \ s i)))\n      result))\n)\n\n;; Task\n;; Given a string s, you have to reverse\
    \ the string and return the reversed string.\n;; Example\n;; >>> (reverse \"abcde\"\
    )\n;; \"edcba\"\n;; >>> (reverse \"abcdef\")\n;; \"fedcba\"", "  (let ((result\
    \ (list)))\n    (while (string-ci=? c s)\n      (string-set! result (list (list\
    \ (string-set! result (list s)) #f))))\n    (list result)))\n\n;;; (reverse_delete\
    \ \"abcdedcba\" \"ab\")\n;;; (reverse_delete \"abcdef\" \"b\")\n;;; (reverse_delete\
    \ \"abcde\" \"ae\")\n;;; (reverse_delete \"abcdef\" \"b\")\n;;; (reverse_delete\
    \ \"abcdef\" \"b\")\n;;; (reverse_delete \"abcdef\" \"b\")\n;;; (reverse_delete\
    \ \"abcdef\" \"b\")\n;;; (reverse_delete \"abcdef\" \"b\")\n;;; (reverse_delete\
    \ \"abcdef\" \"b\")\n;;; (reverse_delete \"abcdef\" \"b\")\n;;; (reverse_delete\
    \ \"abcdef\" \"b\")\n;;; (reverse_delete \"abcdef\" \"b\")\n;;; (reverse_delete\
    \ \"abcdef\" \"b\")\n;;; (reverse_delete \"abcdef\" \"b\")\n;;; (reverse_delete\
    \ \"abcdef\" \"b\")\n;;; (reverse_delete \"abcdef\" \"b\")\n;;; (reverse_delete\
    \ \"abcdef\" \"b\")\n;;; (reverse_delete \"abcdef\" \"b\")\n;;; (reverse_delete\
    \ \"abcdef\" \"b\")\n;;; (reverse_delete \"abcdef\" \"b\")\n;;; (reverse_delete\
    \ \"abcdef\" \"b\")\n;;; (reverse_delete \"abcdef\" \"b\")\n;;; (reverse_delete\
    \ \"abcdef\" \"b\")\n;;; (reverse_delete \"abcdef\" \"b\")\n;;; (reverse_delete\
    \ \"abcdef\" \"b\")\n;;; (reverse_delete \"abcdef\" \"b\")\n;;; (reverse_delete\
    \ \"abcdef\" \"b\")\n;;; (reverse_delete \"abcdef\" \"b\")\n;;; (reverse_delete\
    \ \"abcdef\" \"b\")\n;;; (reverse_delete \"abcdef\" \"b\")\n;;; (reverse_delete\
    \ \"abcdef\" \"b\")\n;;; (reverse_delete \"abcdef\" \"b\")\n;;; (reverse_delete\
    \ \"abc", "  (let ((result (list \"\" #f)))\n    (let ((i 0))\n      (while (<\
    \ i (string-length s))\n        (if (string= (string-substring s i i) c)\n   \
    \         (set! result (list (string-append result (string-substring s i i)) #f))\n\
    \            (set! i (string-next-index s i)))\n        (set! i (string-next-index\
    \ s i))))\n    result))\n", "  (let ((result \"\"))\n    (for-each (lambda (x)\
    \ (set! result (concat result (substring s (string-length s) -1))))\n      (string-set!\
    \ s (string-length s) -1)\n      (string-set! s 0 (string-length c)))\n      (string-set!\
    \ s (string-length s) -1)\n      (string-set! s 0 (string-length c))))\n", " \
    \ (let ((result (list \"\" #f)))\n    (for-each (lambda (x) (set-car! result (string-append\
    \ (string-append (cdr result) x) x)))\n      (string-split s \"\")\n      (string-join\
    \ \"\")\n      (string-split c \"\")\n      (string-join \"\")))\n  result)\n",
  "  (let ((result \"\"))\n    (let ((i 0))\n      (while (< i (string-length s))\n\
    \        (if (string= (string-substring s i i) c)\n            (set! result (string-append\
    \ result (string-substring s i i)))\n            (set! i (string-index-of c s\
    \ i)))\n          (set! i (string-index-of c s i) (string-length s)))))\n  (if\
    \ (string= result s)\n    (list result #t)\n    (list result #f)))\n\n;; Task\n\
    ;; Given a string, you have to reverse it and then delete all the characters that\
    \ are not in the alphabet.\n;; Then you have to check if the result string is\
    \ palindrome.\n;; A string is called palindrome if it reads the same backward\
    \ as forward.\n;; You should return a list containing the result string and #t/#f\
    \ for the check.\n;; Example\n;; >>> (reverse_delete \"abcde\" \"ae\")\n;; (list\
    \ \"bcd\" #f)\n;; >>> (reverse_delete \"abcdef\" \"b\")\n;; (list \"acdef\" #f)\n\
    ;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list \"cdedc\" #t)", "  (let\
    \ ((result (list)))\n    (for-each (lambda (x)\n                (if (equal? (string-ref\
    \ s x) (string-ref c x))\n                    (append result (list (string-append\
    \ (string-substring s (string-length s) -1) (string-substring c (string-length\
    \ c) -1))))))\n      s))\n  (if (empty? result) #f (reverse result)))\n\n;; Task\n\
    ;; Given a string, you have to delete all the characters in the string that are\
    \ not in the alphabet.\n;; Then check if the result string is palindrome.\n;;\
    \ A string is called palindrome if it reads the same backward as forward.\n;;\
    \ You should return a list containing the result string and #t/#f for the check.\n\
    ;; Example\n;; >>> (delete_non_alphabet \"abcdefghijklmnopqrstuvwxyz\")\n;; (list\
    \ \"efghijklmnopqrstuvwxyz\" #f)\n;; >>> (delete_non_alphabet \"abcdefghijklmnopqrstuvwxyz1234567890\"\
    )\n;; (list \"1234567890\" #t)", "  (let ((result (make-string (length s) #f)))\n\
    \    (for-each\n      (lambda (x)\n        (string-set! result (string-add result\
    \ x)))\n      (string-copy s))\n    (for-each\n      (lambda (x)\n        (string-set!\
    \ result (string-add result c)))\n      (string-copy c))\n    (string-set! result\
    \ (string-add result #\\0)))\n    (if (string=? result s)\n      (list result\
    \ #t)\n      (list result #f)))\n)\n\n;; Test", "  (let ((result (make-string\
    \ (length s) #f)))\n    (for-each (lambda (i) (string-set! result i (string-ref\
    \ s i)))\n      (range (length c) (- (length c) i)))\n    (if (string=? result\
    \ s)\n      (list result #t)\n      (list result #f)))\n)\n\n;; Test\n;; >>> (reverse_delete\
    \ \"abcde\" \"ae\")\n;; (list \"bcd\" #f)\n;; >>> (reverse_delete \"abcdef\" \"\
    b\")\n;; (list \"acdef\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;;\
    \ (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcd\")\n;; (list\
    \ \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcde\")\n;; (list \"\
    cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdef\")\n;; (list \"cdedc\"\
    \ #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefg\")\n;; (list \"cdedc\" #f)\n\
    ;; >>> (reverse_delete \"abcdedcba\" \"abcdefgh\")\n;; (list \"cdedc\" #f)\n;;\
    \ >>> (reverse_delete \"abcdedcba\" \"abcdefghi\")\n;; (list \"cdedc\" #f)\n;;\
    \ >>> (reverse_delete \"abcdedcba\" \"abcdefghij\")\n;; (list \"cdedc\" #f)\n\
    ;; >>> (reverse_delete \"abcdedcba\" \"abcdefghijkl\")\n;; (list \"cdedc\" #f)\n\
    ;; >>> (reverse_delete \"abcdedcba\" \"abcdefghijklm\")\n;; (list \"cdedc\" #f)\n\
    ;; >>> (reverse_delete \"abcdedcba\" \"abcdefghijklmn\")\n;; (list \"cdedc\" #f)\n\
    ;; >>> (reverse_delete \"abcdedcba\" \"abcdefghijklmnop\")\n;; (list \"cdedc\"\
    \ #f)\n;; >>> (", "  (let ((result (make-string (length s) #f)))\n    (let ((i\
    \ (0)))\n      (while (< i (length s))\n        (if (eqv (s/1 i) (c/1))\n    \
    \        (set-char! result i (char-downcase (char-upcase (s/1 i))))\n        \
    \    (set-char! result i (char-upcase (s/1 i)))\n            (set-char! result\
    \ i (char-downcase (s/1 i)))\n            (set-char! result i (char-upcase (s/1\
    \ i)))\n            (set-char! result i (char-downcase (s/1 i)))\n           \
    \ (set-char! result i (char-upcase (s/1 i)))\n            (set-char! result i\
    \ (char-downcase (s/1 i)))\n            (set-char! result i (char-upcase (s/1\
    \ i)))\n            (set-char! result i (char-downcase (s/1 i)))\n           \
    \ (set-char! result i (char-upcase (s/1 i)))\n            (set-char! result i\
    \ (char-downcase (s/1 i)))\n            (set-char! result i (char-upcase (s/1\
    \ i)))\n            (set-char! result i (char-downcase (s/1 i)))\n           \
    \ (set-char! result i (char-upcase (s/1 i)))\n            (set-char! result i\
    \ (char-downcase (s/1 i)))\n            (set-char! result i (char-upcase (s/1\
    \ i)))\n            (set-char! result i (char-downcase (s/1 i)))\n           \
    \ (set-char! result i (char-upcase (s/1 i)))\n            (set-char! result i\
    \ (char-downcase (s/1 i)))\n            (set-char! result i (char-upcase (s/1\
    \ i)))\n            (set-char! result i (char-downcase (s/1 i)))\n           \
    \ (set-char! result i (char-upcase (s/1 i)))\n            (set-char! result i\
    \ (char-downcase", "  (let ((result (make-string (length s) #f)))\n    (let ((i\
    \ (0)))\n      (while (< i (length c))\n        (if (string= (string-ci (substring\
    \ s i)) (string-ci c))\n          (setf result (append result (substring s i))))\n\
    \        (setf i (1+ i)))\n      (setf result (append result (substring s i))))\n\
    \    (if (string= (reverse result) (reverse s))\n      (list result #t)\n    \
    \  (list result #f)))\n)\n\n;; Test\n;; >>> (reverse_delete \"abcde\" \"ae\")\n\
    ;; (list \"bcd\" #f)\n;; >>> (reverse_delete \"abcdef\" \"b\")\n;; (list \"acdef\"\
    \ #f)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list \"cdedc\" #t)\n\
    ;; >>> (reverse_delete \"abcdedcba\" \"abcd\")\n;; (list \"cdedc\" #t)\n;; >>>\
    \ (reverse_delete \"abcdedcba\" \"abcd\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete\
    \ \"abcdedcba\" \"abcd\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"abcd\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcd\"\
    )\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcd\")\n;;\
    \ (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcd\")\n;; (list\
    \ \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcd\")\n;; (list \"cdedc\"\
    \ #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcd\")\n;; (list \"cdedc\" #t)\n\
    ;; >>> (reverse_delete \"abcdedcba\" \"abcd\")\n;; (list \"cdedc\" #t)\n;; >>>\
    \ (reverse_delete \"", "  (let ((result (list)))\n    (for-each (lambda (x)\n\
    \                (if (string= x c)\n                    (result '())))\n     \
    \ s)\n    (if (string= result s)\n      result\n      (reverse result)\n     \
    \ (reverse result)\n      (if (string= result s)\n        '()\n        '())))\n\
    \n;; Task\n;; Given a string, you have to delete all the characters in the string\
    \ that are not in the alphabet.\n;; Then check if the result string is palindrome.\n\
    ;; A string is called palindrome if it reads the same backward as forward.\n;;\
    \ You should return a list containing the result string and #t/#f for the check.\n\
    ;; Example\n;; >>> (delete_non_alphabet \"abcde\")\n;; (list \"e\" #f)\n;; >>>\
    \ (delete_non_alphabet \"abcdef\")\n;; (list \"f\" #f)\n;; >>> (delete_non_alphabet\
    \ \"abcdedcba\")\n;; (list \"edcba\" #t)", "  (let ((result (list)))\n    (for-each\
    \ (lambda (x)\n                (if (eq? (string-ref s x) (string-ref c x))\n \
    \                   (append result (list (string-append (string-delete s x) \"\
    \"))))\n                (string-ref s x))\n      c))\n  (if (empty? result) #f\n\
    \    (list \"\" #f)))\n", "  (let ((result (list)))\n    (for-each (lambda (x)\n\
    \                (if (string= x c)\n                    (result '#f)\n       \
    \             (set! result (cons (reverse x) result))))\n      s))\n  result)\n",
  "  (let ((result (list \"\" #f)))\n    (for-each (lambda (x) (set-car! result (string-append\
    \ (string-append (cdr result) (list (car x))) x))) s)\n    (set-cdr! result (reverse\
    \ result))\n    (if (string=? (cdr result) (car result))\n      (set-car! result\
    \ (car result))\n      (set-cdr! result #f)))))\n", "  (let ((result (list \"\"\
    \ #f)))\n    (for-each (lambda (x) (set-car! result (string-append (string-append\
    \ (reverse x) x) \"\")))\n      (string-split s \"\")\n      (string-split c \"\
    \")\n      (string-join \"\")\n      (string-join \"\")\n      (string-join \"\
    \")\n      (string-join \"\")\n      (string-join \"\")\n      (string-join \"\
    \")\n      (string-join \"\")\n      (string-join \"\")\n      (string-join \"\
    \")\n      (string-join \"\")\n      (string-join \"\")\n      (string-join \"\
    \")\n      (string-join \"\")\n      (string-join \"\")\n      (string-join \"\
    \")\n      (string-join \"\")\n      (string-join \"\")\n      (string-join \"\
    \")\n      (string-join \"\")\n      (string-join \"\")\n      (string-join \"\
    \")\n      (string-join \"\")\n      (string-join \"\")\n      (string-join \"\
    \")\n      (string-join \"\")\n      (string-join \"\")\n      (string-join \"\
    \")\n      (string-join \"\")\n      (string-join \"\")\n      (string-join \"\
    \")\n      (string-join \"\")\n      (string-join \"\")\n      (string-join \"\
    \")\n      (string-join \"\")\n      (string-join \"\")\n      (string-join \"\
    \")\n      (string-join \"\")\n      (string-join \"\")\n      (string-join \"\
    \")\n      (string-join \"\")\n      (string-join \"\")\n      (string-join \"\
    \")\n      (string-join \"\")\n      (string-join \"\")\n      (string-join \"\
    \")\n      (string-join \"\")\n      (string-join \"\")\n      (string-join \"\
    \")\n      (string-join \"\")\n      (string-join \"\")\n      (string-join \"\
    \")\n      (string-join \"\")\n      (string-join \"\")\n      (string-join \"\
    \")\n      (string-join \"\")\n      (string-join \"\")\n      ", "  (let ((result\
    \ (list)))\n    (while (string-ci=? c s)\n      (setq result (cons (string-ci-set-first\
    \ c s) result))\n      (setq s (string-ci-set-next c s))\n      (setq c (string-ci-set-last\
    \ c s))))\n  result)\n", "  (let ((result (make-string (length s) #f)))\n    (let\
    \ ((i 0))\n      (while (< i (length c))\n        (set! result (string-set! result\
    \ (string-ref result i) #f)\n          (set! i (string-index-of result (string-ref\
    \ c i)))\n          (set! i (string-index-of result (string-ref c i))))\n    \
    \    (set! i (string-index-of result (string-ref c i))))\n      (string-set! result\
    \ (string-ref result i) #t))\n    (string-set! result (string-ref result i) #f)))\n",
  "  (let ((result (list)))\n    (for-each (lambda (x)\n                (if (equal?\
    \ x c)\n                    (append result (list (reverse x))))\n            \
    \    (append result (list x)))\n              s)\n    (reverse result)))\n", " \
    \ (let ((result (list)))\n    (for-each (lambda (x)\n                (if (equal?\
    \ (string-ref s x) (string-ref c x))\n                    (result '())))\n   \
    \   s)\n    result))\n", "  (let ((result (list)))\n    (for-each (lambda (x)\n\
    \                (if (equal? x c)\n                    (append result (list (reverse\
    \ x)))\n                    (append result (list x))))\n      s))\n  (if (equal?\
    \ (reverse result) result)\n    (list true)\n    (list false)))\n\n;; Task\n;;\
    \ We are given two strings s and c, you have to delete all the characters in s\
    \ that are equal to any character in c\n;; then check if the result string is\
    \ palindrome.\n;; A string is called palindrome if it reads the same backward\
    \ as forward.\n;; You should return a list containing the result string and #t/#f\
    \ for the check.\n;; Example\n;; >>> (reverse_delete \"abcde\" \"ae\")\n;; (list\
    \ \"bcd\" #f)\n;; >>> (reverse_delete \"abcdef\" \"b\")\n;; (list \"acdef\" #f)\n\
    ;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list \"cdedc\" #t)", "  (let\
    \ ((i (string-index s c)))\n    (if (eqv? (string-ref s i) (string-ref c i))\n\
    \      (reverse (string-substring s i (string-length s) -1))\n      (string-append\
    \ (reverse (string-substring s 0 i)) (string-substring s i (string-length s) -1))))\n",
  "  (let ((result (make-string (length s) '#\\\\0)))\n    (for-each (lambda (c)\n\
    \      (string-set! result (string-set! result (string-set! result c))))\n   \
    \   s)\n    (if (string=? result s)\n      (list result #t)\n      (list result\
    \ #f)))\n)\n", "  (let ((result (list \"\" #f)))\n    (for-each (lambda (x) (set-car!\
    \ result (string-append (string-append (reverse x) x) \"\")))\n      (string-split\
    \ s c)))\n  result)\n", "  (let ((result (make-string (length s) #f)))\n    (let\
    \ ((i (0)))\n      (while (< i (length s))\n        (if (equal? (string-ref s\
    \ i) (string-ref c i))\n            (set-string-elt result i (string-set! s i\
    \ \"\"))\n            (set-string-elt result i (string-set! s i (string-ref c\
    \ i))))\n          (set-string-elt result i (string-set! s i (string-ref s i))))\n\
    \        (set-string-elt result i (string-set! s i (string-ref c i))))\n     \
    \ (set-string-elt result i (string-set! s i \"\"))))\n  (if (equal? (reverse result)\
    \ (reverse s))\n    #t\n    #f))\n", "  (let ((result (list)))\n    (let ((i 0))\n\
    \      (while (< i (string-length s))\n        (if (string= (string-substring\
    \ s i i) c)\n          (setf result (append result (list (string-substring s i\
    \ i) #f))))\n        (setf i (1+ i))))\n    result))\n", "  (let ((result \"\"\
    ))\n    (let ((i (length s)))\n      (while (< i 0)\n        (let ((j (1 - i)))\n\
    \          (set! result (concat result (substring s i j))))\n        (set! i (-\
    \ i 1)))\n      (set! result (concat result c))))\n  (if (string=? result s)\n\
    \    (list result #t)\n    (list result #f)))\n\n;; Test\n;; >>> (reverse_delete\
    \ \"abcdef\" \"b\")\n;; (list \"acdef\" #f)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"ab\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abc\"\
    )\n;; (list \"cdedcba\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdedcba\"\
    )\n;; (list \"cdedcba\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdedcba\"\
    \ \"abcdedcba\")\n;; (list \"cdedcba\" #t)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"abcdedcba\" \"abcdedcba\" \"abcdedcba\")\n;; (list \"cdedcba\" #t)\n;; >>>\
    \ (reverse_delete \"abcdedcba\" \"abcdedcba\" \"abcdedcba\" \"abcdedcba\" \"abcdedcba\"\
    )\n;; (list \"cdedcba\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdedcba\"\
    \ \"abcdedcba\" \"abcdedcba\" \"abcdedcba\" \"abcdedcba\")\n;; (list \"cdedcba\"\
    \ #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdedcba\" \"abcdedcba\" \"abcdedcba\"\
    \ \"abcdedcba\" \"abcdedcba\" \"abcdedcba\")\n;; (list \"cdedcba\" #t)\n;; >>>\
    \ (reverse_delete \"abcdedcba\" \"abcdedcba\" \"abcdedcba\" \"abcdedcba\" \"abcdedcba\"\
    \ \"abcdedcba", "  (let ((result (list)))\n    (for-each (lambda (x)\n       \
    \         (if (equal? (string-ref s x) (string-ref c x))\n                   \
    \ (result '())))\n      s)\n    result))\n", "  (let ((result (make-string (length\
    \ s) #f)))\n    (let ((i 0))\n      (while (< i (length c))\n        (if (string=\
    \ (string-ci (substring s i i)) (string-ci c))\n          (set-ci result i)\n\
    \          (set-ci result (add1 i))\n          (set-ci result (add1 i)))\n   \
    \     (set-ci result i))\n      (set-ci result (length s))))\n)\n\n;; Task\n;;\
    \ Given a string s, you have to delete all the characters in s that are equal\
    \ to any character in c.\n;; Then check if the result string is palindrome.\n\
    ;; A string is called palindrome if it reads the same backward as forward.\n;;\
    \ You should return a list containing the result string and #t/#f for the check.\n\
    ;; Example\n;; >>> (reverse_delete \"abcde\" \"ae\")\n;; (list \"bcd\" #f)\n;;\
    \ >>> (reverse_delete \"abcdef\" \"b\")\n;; (list \"acdef\" #f)\n;; >>> (reverse_delete\
    \ \"abcdedcba\" \"ab\")\n;; (list \"cdedc\" #t)", "  (let ((result (list)))\n\
    \    (for-each (lambda (x)\n                (if (eq? x c)\n                  \
    \  (result '#f)\n                    (result (cons (reverse x) result))))\n  \
    \    s))\n  result)\n\n;; Test\n;; >>> (reverse_delete \"abcde\" \"ae\")\n;; (list\
    \ \"bcd\" #f)\n;; >>> (reverse_delete \"abcdef\" \"b\")\n;; (list \"acdef\" #f)\n\
    ;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete\
    \ \"abcdedcba\" \"abc\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"abcde\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"\
    abcdef\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefg\"\
    )\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefgh\")\n\
    ;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefghi\")\n\
    ;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefghij\")\n\
    ;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefghijkl\"\
    )\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefghijklm\"\
    )\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefghijklmn\"\
    )\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefghijklmnop\"\
    )\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefghijklmnopq\"\
    )\n;; (list \"cdedc\" #", "  (let ((result (list)))\n    (for-each (lambda (x)\n\
    \                (if (equal? (string-ref s x) (string-ref c x))\n            \
    \        (append result (list (string-append (string-delete s x) \"\") #t))\n\
    \                    (append result (list (string-append (string-delete c x) \"\
    \") #f))))\n               s)\n    (reverse result)))\n", "  (let ((result (list\
    \ \"\" #f)))\n    (for-each (lambda (x) (set-car! result (string-append (string-append\
    \ (reverse x) x) \"\")))\n      (string-split s c)\n      (string-join result\
    \ \"\")\n      (string-length result)\n      (string-length (string-join result\
    \ \"\"))))\n  result)\n\n;; Test\n;; >>> (reverse_delete \"abcde\" \"ae\")\n;;\
    \ (list \"bcd\" #f)\n;; >>> (reverse_delete \"abcdef\" \"b\")\n;; (list \"acdef\"\
    \ #f)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list \"cdedc\" #t)\n\
    ;; >>> (reverse_delete \"abcdedcba\" \"abc\")\n;; (list \"cdedc\" #t)\n;; >>>\
    \ (reverse_delete \"abcdedcba\" \"abcdedcba\")\n;; (list \"cdedc\" #t)\n;; >>>\
    \ (reverse_delete \"abcdedcba\" \"abcdedcba\" \"abcdedcba\")\n;; (list \"cdedc\"\
    \ #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdedcba\" \"abcdedcba\" \"abcdedcba\"\
    )\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdedcba\"\
    \ \"abcdedcba\" \"abcdedcba\" \"abcdedcba\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete\
    \ \"abcdedcba\" \"abcdedcba\" \"abcdedcba\" \"abcdedcba\" \"abcdedcba\" \"abcdedcba\"\
    )\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdedcba\"\
    \ \"abcdedcba\" \"abcdedcba\" \"abcdedcba\" \"abcdedcba\" \"abcdedcba\")\n;; (list\
    \ \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdedcba\" \"abcdedcba\"\
    \ \"abcdedcba\" \"abcdedcba\" \"abc", "  (let ((i (string-index s c)))\n    (if\
    \ (eqv? (string-ref s i) (string-ref c i))\n      (reverse (string-substring s\
    \ i (string-length s) -1))))\n  (list (reverse (string-substring s 0 (string-length\
    \ s) -1)) #t))\n\n;; Task\n;; Given a string s, you have to delete all the characters\
    \ in s that are equal to any character in c.\n;; Then check if the result string\
    \ is palindrome.\n;; A string is called palindrome if it reads the same backward\
    \ as forward.\n;; You should return a list containing the result string and #t/#f\
    \ for the check.\n;; Example\n;; >>> (reverse_delete \"abcde\" \"ae\")\n;; (list\
    \ \"bcd\" #f)\n;; >>> (reverse_delete \"abcdef\" \"b\")\n;; (list \"acdef\" #f)\n\
    ;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list \"cdedc\" #t)", "  (let\
    \ ((i (string-index s c)))\n    (if (eqv? (string-ref s i) (string-ref c i))\n\
    \      (reverse (string-substring s i (string-length s) -1))))\n)\n", "  (let\
    \ ((result (list)))\n    (for-each (lambda (x)\n                (if (string= x\
    \ c)\n                    (append result (list (reverse x)))\n               \
    \     (append result (list x))))\n      s))\n  (if (string= (reverse result) s)\n\
    \    (list result #t)\n    (list result #f)))\n\n;;; (reverse_delete \"abcdedcba\"\
    \ \"ab\")\n;;; (reverse_delete \"abcdedcba\" \"abc\")\n;;; (reverse_delete \"\
    abcdedcba\" \"abcde\")\n;;; (reverse_delete \"abcdedcba\" \"abcdef\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"abcdefg\")\n;;; (reverse_delete \"abcdedcba\" \"abcdefgh\")\n\
    ;;; (reverse_delete \"abcdedcba\" \"abcdefghi\")\n;;; (reverse_delete \"abcdedcba\"\
    \ \"abcdefghij\")\n;;; (reverse_delete \"abcdedcba\" \"abcdefghijkl\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"abcdefghijklm\")\n;;; (reverse_delete \"abcdedcba\" \"abcdefghijklmn\"\
    )\n;;; (reverse_delete \"abcdedcba\" \"abcdefghijklmnop\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"abcdefghijklmnopq\")\n;;; (reverse_delete \"abcdedcba\" \"abcdefghijklmnopqr\"\
    )\n;;; (reverse_delete \"abcdedcba\" \"abcdefghijklmnopqrs\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"abcdefghijklmnopqrst\")\n;;; (reverse_delete \"abcdedcba\" \"\
    abcdefghijklmnopqrstu\")\n;;; (reverse_delete \"abcdedcba\" \"abcdefghijklmnopqrstuv\"\
    )\n;;; (reverse_delete \"abcdedcba\" \"abcdefghijklmnopqrstuvw\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"abcdefghijklmnopqrstuvwx\")\n;;;", "  (let ((result (list)))\n\
    \    (for-each (lambda (x)\n                (if (equal? (string-ref s x) (string-ref\
    \ c x))\n                    (append result (list (string-append (string-substring\
    \ s 0 (string-length s) -1) (string-substring c 0 (string-length c) -1))))))\n\
    \      s))\n  (if (empty? result) #f (reverse result)))\n\n;; Task\n;; Given a\
    \ string s, you have to delete all the characters in s that are not in the alphabet.\n\
    ;; Then check if the result string is palindrome.\n;; A string is called palindrome\
    \ if it reads the same backward as forward.\n;; You should return a list containing\
    \ the result string and #t/#f for the check.\n;; Example\n;; >>> (delete_non_alphabet\
    \ \"abcde\")\n;; (list \"bcde\" #f)\n;; >>> (delete_non_alphabet \"abcdef\")\n\
    ;; (list \"abcdef\" #f)\n;; >>> (delete_non_alphabet \"abcdedcba\")\n;; (list\
    \ \"abcdedcba\" #f)", "  (let ((result (make-string (length s) #f)))\n    (let\
    \ ((i 0))\n      (while (< i (length c))\n        (if (string= (string-ci (substring\
    \ s i i)) (string-ci c))\n            (setf result (append (substring result i\
    \ i) (substring s i (1+ i))) #t)\n            (setf result (append (substring\
    \ result i (1+ i)) (substring s i i))) #f)\n          (setf i (1+ i)))\n     \
    \ (setf i (length s)))\n    result))\n\n;; Test\n;; >>> (reverse_delete \"abcde\"\
    \ \"ae\")\n;; (list \"bcd\" #f)\n;; >>> (reverse_delete \"abcdef\" \"b\")\n;;\
    \ (list \"acdef\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list\
    \ \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abc\")\n;; (list \"cdedc\"\
    \ #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcd\")\n;; (list \"cdedc\" #t)\n\
    ;; >>> (reverse_delete \"abcdedcba\" \"abcde\")\n;; (list \"cdedc\" #t)\n;; >>>\
    \ (reverse_delete \"abcdedcba\" \"abcdef\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete\
    \ \"abcdedcba\" \"abcdefg\")\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"\
    abcdedcba\" \"abcdefgh\")\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"abcdefghi\")\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"abcdefghij\")\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"abcdefghijk\")\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"abcdefghijkl\")\n;; (", "  (let ((i (string-index s c)))\n    (if (eqv? (string-ref\
    \ s i) (string-ref c i))\n      (reverse (string-substring s i (string-length\
    \ s) -1))\n      (list (string-substring s i (string-length s) -1) #f)))\n)\n\n\
    ;;; (reverse_delete \"abcdedcba\" \"ab\")\n;;; (reverse_delete \"abcdedcba\" \"\
    abc\")\n;;; (reverse_delete \"abcdedcba\" \"abcde\")\n;;; (reverse_delete \"abcdedcba\"\
    \ \"abcdef\")\n;;; (reverse_delete \"abcdedcba\" \"abcdefg\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"abcdefgh\")\n;;; (reverse_delete \"abcdedcba\" \"abcdefghi\"\
    )\n;;; (reverse_delete \"abcdedcba\" \"abcdefghij\")\n;;; (reverse_delete \"abcdedcba\"\
    \ \"abcdefghijk\")\n;;; (reverse_delete \"abcdedcba\" \"abcdefghijkl\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"abcdefghijklm\")\n;;; (reverse_delete \"abcdedcba\" \"abcdefghijklmn\"\
    )\n;;; (reverse_delete \"abcdedcba\" \"abcdefghijklmnop\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"abcdefghijklmnopq\")\n;;; (reverse_delete \"abcdedcba\" \"abcdefghijklmnopqr\"\
    )\n;;; (reverse_delete \"abcdedcba\" \"abcdefghijklmnopqrs\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"abcdefghijklmnopqrst\")\n;;; (reverse_delete \"abcdedcba\" \"\
    abcdefghijklmnopqrstu\")\n;;; (reverse_delete \"abcdedcba\" \"abcdefghijklmnopqrstuv\"\
    )\n;;; (reverse_delete \"abcdedcba\" \"abcdefghijklmnopqrstuvw\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"", "  (let ((result (list \"\" #f)))\n    (for-each (lambda\
    \ (x)\n                (if (eq? x c)\n                    (set-cdr! result #t)\n\
    \                    (set-cdr! result #f)))\n      s)\n    result))\n", "  (let\
    \ ((result (list)))\n    (for-each (lambda (x)\n                (if (eq (string-ref\
    \ s x) (string-ref c x))\n                    (list (string-append result (string-append\
    \ (string-ref s x) #\\space) #\\space) #f)\n                    (list (string-append\
    \ result (string-append (string-ref s x) #\\space) #\\space) #t)))\n         \
    \     s))\n  (if (null? result) #f (list s #f)))\n\n;; Task\n;; We are given a\
    \ string s, you have to delete all the characters in s that are not in the alphabet.\n\
    ;; Then check if the result string is palindrome.\n;; A string is called palindrome\
    \ if it reads the same backward as forward.\n;; You should return a list containing\
    \ the result string and #t/#f for the check.\n;; Example\n;; >>> (delete_non_alphabet\
    \ \"abcde\")\n;; (list \"bcde\" #f)\n;; >>> (delete_non_alphabet \"abcdef\")\n\
    ;; (list \"bcdef\" #f)\n;; >>> (delete_non_alphabet \"abcdedcba\")\n;; (list \"\
    bcdedcba\" #f)\n;; >>> (delete_non_alphabet \"abcdedcba\" \"abcdedcba\")\n;; (list\
    \ \"abcdedcba\" #t)", "  (let ((result (list)))\n    (for-each (lambda (x)\n \
    \               (if (equal? (string-ref s x) (string-ref c x))\n             \
    \       (append result (list (string-append (string-delete s x) \"\") #f))\n \
    \                   (append result (list (string-append (string-delete c x) \"\
    \") #t))))\n               s)\n    (reverse result)))\n", "  (let ((result (make-string\
    \ (length s) #f)))\n    (let ((i 0))\n      (while (< i (length c))\n        (if\
    \ (string= (string-ci (substring s i i)) (substring c i i))\n            (set!\
    \ result (append result (substring s i i))))\n          (set! i (add1 i)))\n \
    \     result))\n  result)\n", "  (let ((result (list)))\n    (for-each (lambda\
    \ (x)\n                (if (eq (string-ref s x) (string-ref c x))\n          \
    \          (append result (list (string-append (string-delete s x) \"\"))))\n\
    \                (string-ref s x))\n      (string-ref c x))\n    (reverse result)\n\
    \    (if (empty? result) #f\n      (list \"\" #t))\n    (reverse result)))\n",
  "  (let ((result \"\"))\n    (let ((i (length s)))\n      (while (< i 0)\n     \
    \   (let ((j (1 - i)))\n          (set! result (concat result (substring s i j))))\n\
    \          (set! i (- i 1)))\n        (set! i (- i 1)))\n      (set! result (concat\
    \ result (substring s 0 i))))\n    (if (string=? result c)\n      (list result\
    \ #t)\n      (list result #f))\n  )\n)\n\n;; Test\n;; >>> (reverse_delete \"abcdef\"\
    \ \"b\")\n;; (list \"acdef\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\"\
    )\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abc\")\n;; (list\
    \ \"abcdedcba\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdedcba\")\n;; (list\
    \ \"abcdedcba\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdedcba\")\n;; (list\
    \ \"abcdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdedcba\")\n;; (list\
    \ \"abcdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdedcba\")\n;; (list\
    \ \"abcdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdedcba\")\n;; (list\
    \ \"abcdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdedcba\")\n;; (list\
    \ \"abcdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdedcba\")\n;; (list\
    \ \"abcdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdedcba\")\n;; (list\
    \ \"abcdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdedcba\")\n;; (list\
    \ \"abcdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcded", "  (let ((result\
    \ (list)))\n    (for-each (lambda (x) (set-car! result (delete x s))) c)\n   \
    \ (if (string=? result s)\n      (set-cdr! result #t)\n      (set-cdr! result\
    \ #f)))\n)\n\n;; Test\n;; >>> (reverse_delete \"abcdef\" \"b\")\n;; (list \"acdef\"\
    \ #f)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list \"cdedc\" #t)\n\
    ;; >>> (reverse_delete \"abcdedcba\" \"a\")\n;; (list \"bcdedcba\" #t)\n;; >>>\
    \ (reverse_delete \"abcdedcba\" \"\")\n;; (list \"abcdedcba\" #t)\n;; >>> (reverse_delete\
    \ \"abcdedcba\" \"abcd\")\n;; (list \"cdedcba\" #f)\n;; >>> (reverse_delete \"\
    abcdedcba\" \"abcde\")\n;; (list \"cdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"abcdef\")\n;; (list \"cdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"abcdefg\")\n;; (list \"cdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"abcdefgh\")\n;; (list \"cdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"abcdefghi\")\n;; (list \"cdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"abcdefghij\")\n;; (list \"cdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"abcdefghijkl\")\n;; (list \"cdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"abcdefghijklm\")\n;; (list \"cdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"abcdefghijklmn\")\n;; (list \"cdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba",
  "  (let ((i (string-index s c)))\n    (if (eqv? (string-ref s i) (string-ref c i))\n\
    \      (reverse (string-substring s i (string-length s) -1))))\n  (list (reverse\
    \ (string-substring s 0 (string-length s) -1)) #t))\n\n;; Task\n;; We are given\
    \ a string s, you have to delete all the characters in s that are equal to any\
    \ character in c\n;; then check if the result string is palindrome.\n;; A string\
    \ is called palindrome if it reads the same backward as forward.\n;; You should\
    \ return a list containing the result string and #t/#f for the check.\n;; Example\n\
    ;; >>> (reverse_delete \"abcde\" \"ae\")\n;; (list \"bcd\" #f)\n;; >>> (reverse_delete\
    \ \"abcdef\" \"b\")\n;; (list \"acdef\" #f)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"ab\")\n;; (list \"cdedc\" #t)", "  (let ((result (list)))\n    (for-each (lambda\
    \ (x)\n                (if (eq? x c)\n                    (list \"\" #t)\n   \
    \                 (list (append result (list (reverse x))))))\n      s))\n  result)\n",
  "  (let ((result (list)))\n    (for-each (lambda (x) (set-car! result (string-append\
    \ (string-append (reverse x) (reverse c)) \"\"))) s)\n    (if (string=? result\
    \ s)\n      (set-cdr! result #t)\n      (set-cdr! result #f)))))\n", "  (let ((result\
    \ (list)))\n    (for-each (lambda (x)\n                (if (string= x c)\n   \
    \                 (result '())))\n      s)\n    (if (string= result s)\n     \
    \ (result #t)\n      (result #f)))\n)\n\n;; Test\n;; >>> (reverse_delete \"abcdef\"\
    \ \"b\")\n;; (list \"acdef\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\"\
    )\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"c\")\n;; (list\
    \ \"abcdedcba\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"d\")\n;; (list \"\
    abcdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"a\")\n;; (list \"bcdedcba\"\
    \ #f)\n;; >>> (reverse_delete \"abcdedcba\" \"e\")\n;; (list \"bcdedcba\" #f)\n\
    ;; >>> (reverse_delete \"abcdedcba\" \"f\")\n;; (list \"abcdedcba\" #f)\n;; >>>\
    \ (reverse_delete \"abcdedcba\" \"b\")\n;; (list \"acdedcba\" #f)\n;; >>> (reverse_delete\
    \ \"abcdedcba\" \"c\")\n;; (list \"abcdedcba\" #f)\n;; >>> (reverse_delete \"\
    abcdedcba\" \"d\")\n;; (list \"abcdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"a\")\n;; (list \"bcdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"e\"\
    )\n;; (list \"bcdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"f\")\n;;\
    \ (list \"bcdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"b\")\n;; (list\
    \ \"acdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"c\")\n;; (list \"abcdedcba\"\
    \ #f)\n;; >>> (reverse_delete \"abcdedcba", "  (let ((result (list)))\n    (for-each\
    \ (lambda (x)\n                (if (string= x c)\n                    (result\
    \ '#f)\n                    (result (append result (list (reverse x)))))))\n \
    \   (reverse result)))\n", "  (let ((result (list)))\n    (for-each (lambda (x)\
    \ (set-car! result (string-append (string-delete x s) \"\") (eqv? (string-ref\
    \ x s) (string-ref x c)))) c)\n    (set-cdr! result #t)))\n\n;; Test\n;; >>> (reverse_delete\
    \ \"abcdef\" \"b\")\n;; (list \"acdef\" #f)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"ab\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"a\"\
    )\n;; (list \"bcdedcba\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"\")\n;; (list\
    \ \"abcdedcba\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"a\" \"b\")\n;; (list\
    \ \"cdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"a\" \"b\" \"c\")\n;;\
    \ (list \"bcdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"a\" \"b\" \"\
    c\" \"d\")\n;; (list \"bcdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"\
    a\" \"b\" \"c\" \"d\" \"e\")\n;; (list \"bcdedcba\" #f)\n;; >>> (reverse_delete\
    \ \"abcdedcba\" \"a\" \"b\" \"c\" \"d\" \"e\" \"f\")\n;; (list \"bcdedcba\" #f)\n\
    ;; >>> (reverse_delete \"abcdedcba\" \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\"\
    )\n;; (list \"bcdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"a\" \"b\"\
    \ \"c\" \"d\" \"e\" \"f\" \"g\" \"h\")\n;; (list \"bcdedcba\" #f)\n;; >>> (reverse_delete\
    \ \"abcdedcba\" \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h", "  (let ((result\
    \ \"\"))\n    (let ((i 0))\n      (while (< i (string-length s))\n        (if\
    \ (string= (string-substring s i i) c)\n            (set! result (string-append\
    \ result (string-substring s i i)))\n            (set! i (i + 1)))\n        (set!\
    \ i (i + 1)))\n      result))\n)\n\n;; Task\n;; Given a string s, you have to\
    \ delete all the characters in s that are equal to any character in c.\n;; Then\
    \ check if the result string is palindrome.\n;; A string is called palindrome\
    \ if it reads the same backward as forward.\n;; You should return a list containing\
    \ the result string and #t/#f for the check.\n;; Example\n;; >>> (reverse_delete\
    \ \"abcde\" \"ae\")\n;; (list \"bcd\" #f)\n;; >>> (reverse_delete \"abcdef\" \"\
    b\")\n;; (list \"acdef\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;;\
    \ (list \"cdedc\" #t)", "  (let ((result (make-string (length s) #f)))\n    (let\
    \ ((i 0))\n      (while (< i (length c))\n        (if (equal? (string-ref s (modulo\
    \ (length s) i)) (string-ref c (modulo (length c) i)))\n          (set-string-elt\
    \ result i (string-ref s (modulo (length s) i)))\n          (set-string-elt result\
    \ i #f)\n          (set-string-elt result (modulo (length result) i) (string-ref\
    \ c (modulo (length c) i)))\n          (set-string-elt result (modulo (length\
    \ result) i) #f)\n          (set-string-elt result (modulo (length result) i)\
    \ (string-ref s (modulo (length s) i)))\n          (set-string-elt result (modulo\
    \ (length result) i) #f)\n          (set-string-elt result (modulo (length result)\
    \ i) (string-ref c (modulo (length c) i)))\n          (set-string-elt result (modulo\
    \ (length result) i) #f)\n          (set-string-elt result (modulo (length result)\
    \ i) (string-ref s (modulo (length s) i)))\n          (set-string-elt result (modulo\
    \ (length result) i) #f)\n          (set-string-elt result (modulo (length result)\
    \ i) (string-ref c (modulo (length c) i)))\n          (set-string-elt result (modulo\
    \ (length result) i) #f)\n          (set-string-elt result (modulo (length result)\
    \ i) (string-ref s (modulo (length s) i)))\n          (set-string-elt result (modulo\
    \ (length result) i) #f)\n          (set-string-elt result (modulo (length result)\
    \ i) (string-ref c (modulo (length c) i)))\n          (set-string-elt result (modulo\
    \ (length result) i) #f)\n          (set-string-elt result (modulo (length result)\
    \ i) (string-ref s (modulo (length s) i)))\n          (", "  (let ((result (list)))\n\
    \    (let ((i 0))\n      (while (< i (string-length s))\n        (let ((c (string-char\
    \ s i)))\n          (if (string= c c)\n            (set-car! result (string-append\
    \ (string-copy/part s i 1) (string-delete/dup s i 1))))\n          (set-cdr! result\
    \ (string-append (string-copy/part s i 1) (string-delete/dup s i 1))))\n     \
    \   (set-i! i (string-length s) - 1))\n    (set-cdr! result (string-append (string-copy/part\
    \ s 0 (string-length s)) (string-delete/dup s 0 (string-length s))))\n    (set-car!\
    \ result (string-append (string-copy/part s 0 (string-length s)) (string-delete/dup\
    \ s 0 (string-length s))))\n    (set-cdr! result #t))\n  result)\n)\n", "  (let\
    \ ((result (list \"\" #f)))\n    (let ((i 0))\n      (while (< i (string-length\
    \ s))\n        (if (string= (string-substring s i i) c)\n          (set result\
    \ (append result (string-substring s (i + 1) -1))))\n        (set i (i + 1))))\n\
    \    result))\n", "  (let ((result (make-string (length s) #f)))\n    (let ((i\
    \ 0))\n      (while (< i (length c))\n        (if (string= c (string-ref s i))\n\
    \          (string-set! result (string-set! result (string-ref result i) #f) i)\n\
    \          (set! i (string-inc! i)))\n        (set! i (string-inc! i))))\n   \
    \ (if (string= (string-reverse result) (string-copy s))\n      (list result #t)\n\
    \      (list result #f)))))\n\n;; Task\n;; We are given two strings s and c, you\
    \ have to delete all the characters in s that are equal to any character in c\n\
    ;; then check if the result string is palindrome.\n;; A string is called palindrome\
    \ if it reads the same backward as forward.\n;; You should return a list containing\
    \ the result string and #t/#f for the check.\n;; Example\n;; >>> (reverse_delete\
    \ \"abcde\" \"ae\")\n;; (list \"bcd\" #f)\n;; >>> (reverse_delete \"abcdef\" \"\
    b\")\n;; (list \"acdef\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;;\
    \ (list \"cdedc\" #t)", "  (let ((result (make-string (length s) #f)))\n    (let\
    \ ((i (0)))\n      (while (< i (length s))\n        (if (equal? (string-ref s\
    \ i) (string-ref c i))\n            (set-string-elt result i (string-set! s i\
    \ \"\"))\n            (set-string-elt result i (string-set! s i (string-ref c\
    \ i))))\n          (set-string-elt result i (string-set! s i (string-ref s i))))\n\
    \        (set-string-elt result i (string-set! s i (string-ref s i))))\n     \
    \ (string-set! result (string-ref result i))))\n)\n\n;; Test\n;; >>> (reverse_delete\
    \ \"abcdef\" \"b\")\n;; (list \"acdef\" #f)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"ab\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abc\"\
    )\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcd\")\n;;\
    \ (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcde\")\n;; (list\
    \ \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdef\")\n;; (list \"\
    cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefg\")\n;; (list \"cdedc\"\
    \ #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefg\" \"abcdefg\")\n;; (list\
    \ \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefg\" \"abcdefg\"\
    )\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefg\" \"\
    abcdefg\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefg\"\
    \ \"abcdefg\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_", "  (let ((i (string-index\
    \ s c)))\n    (if (eqv? (string-ref s i) (string-ref c i))\n      (reverse (string-substring\
    \ s i (string-length s) -1))))\n)\n\n;; Test\n;; >>> (reverse_delete \"abcde\"\
    \ \"ae\")\n;; (list \"bcd\" #f)\n;; >>> (reverse_delete \"abcdef\" \"b\")\n;;\
    \ (list \"acdef\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list\
    \ \"cdedc\" #t)\n\n;; Answer\n;; >>> (reverse_delete \"abcde\" \"ae\")\n;; (list\
    \ \"bcd\" #f)\n;; >>> (reverse_delete \"abcdef\" \"b\")\n;; (list \"acdef\" #f)\n\
    ;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list \"cdedc\" #t)\n\n;; Answer\n\
    ;; >>> (reverse_delete \"abcde\" \"ae\")\n;; (list \"bcd\" #f)\n;; >>> (reverse_delete\
    \ \"abcdef\" \"b\")\n;; (list \"acdef\" #f)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"ab\")\n;; (list \"cdedc\" #t)\n\n;; Answer\n;; >>> (reverse_delete \"abcde\"\
    \ \"ae\")\n;; (list \"bcd\" #f)\n;; >>> (reverse_delete \"abcdef\" \"b\")\n;;\
    \ (list \"acdef\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list\
    \ \"cdedc\" #t)\n\n;; Answer\n;; >>> (reverse_delete \"abcde\" \"ae\")\n;; (list\
    \ \"bcd\" #f)\n;; >>> (reverse_delete \"abcdef\" \"b\")\n;; (list \"acdef\" #f)\n\
    ;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list \"cdedc\" #t)\n\n;; Answer\n\
    ;; >>> (reverse_delete \"abcde\" \"ae\")\n;; (list \"bcd\" #f)\n;; >>> (reverse_delete\
    \ \"abcdef\" \"b\")\n;; (", "  (let ((result (make-string (length s) #f)))\n \
    \   (let ((i 0))\n      (while (< i (length c))\n        (set! result (insert\
    \ result c c i))\n        (set! i (1+ i)))\n      (reverse result)))\n  (if (equal?\
    \ (reverse result) (reverse s))\n    (list result #t)\n    (list result #f)))\n\
    \n;; Test\n;; >>> (reverse_delete \"abcde\" \"ae\")\n;; (list \"bcd\" #f)\n;;\
    \ >>> (reverse_delete \"abcdef\" \"b\")\n;; (list \"acdef\" #f)\n;; >>> (reverse_delete\
    \ \"abcdedcba\" \"ab\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"abcd\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcde\"\
    )\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdea\")\n\
    ;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdea\")\n;; (list\
    \ \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdea\")\n;; (list \"\
    cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdea\")\n;; (list \"cdedc\"\
    \ #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdea\")\n;; (list \"cdedc\" #f)\n\
    ;; >>> (reverse_delete \"abcdedcba\" \"abcdea\")\n;; (list \"cdedc\" #f)\n;; >>>\
    \ (reverse_delete \"abcdedcba\" \"abcdea\")\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete\
    \ \"abcdedcba\" \"abcdea\")\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"\
    abcdedcba\" \"abcdea\")\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete", "  (let\
    \ ((result (list)))\n    (for-each (lambda (x) (set-car! result (delete x s)))\
    \ c)\n    (if (string=? result s)\n      (set-car! result #t)\n      (set-car!\
    \ result #f)))\n)\n\n;; Test\n;; >>> (reverse_delete \"abcde\" \"ae\")\n;; (list\
    \ \"bcd\" #f)\n;; >>> (reverse_delete \"abcdef\" \"b\")\n;; (list \"acdef\" #f)\n\
    ;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list \"cdedc\" #t)\n\n;; Answer\n\
    ;; >>> (reverse_delete \"abcde\" \"ae\")\n;; (list \"bcd\" #f)\n;; >>> (reverse_delete\
    \ \"abcdef\" \"b\")\n;; (list \"acdef\" #f)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"ab\")\n;; (list \"cdedc\" #t)\n\n;; Answer\n;; >>> (reverse_delete \"abcde\"\
    \ \"ae\")\n;; (list \"bcd\" #f)\n;; >>> (reverse_delete \"abcdef\" \"b\")\n;;\
    \ (list \"acdef\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list\
    \ \"cdedc\" #t)\n\n;; Answer\n;; >>> (reverse_delete \"abcde\" \"ae\")\n;; (list\
    \ \"bcd\" #f)\n;; >>> (reverse_delete \"abcdef\" \"b\")\n;; (list \"acdef\" #f)\n\
    ;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list \"cdedc\" #t)\n\n;; Answer\n\
    ;; >>> (reverse_delete \"abcde\" \"ae\")\n;; (list \"bcd\" #f)\n;; >>> (reverse_delete\
    \ \"abcdef\" \"b\")\n;; (list \"acdef\" #f)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"ab\")\n;; (list \"cdedc\" #t)\n\n;; Answer\n;; >>> (reverse_delete \"abcde\"\
    \ \"ae\")\n;; (list \"bcd\" #f)\n;; >>> (reverse_", "  (let ((result (list)))\n\
    \    (for-each (lambda (x)\n                (if (eq (car x) (cdr x))\n       \
    \             (result '())))\n      s))\n  result)\n", "  (let ((result (list)))\n\
    \    (for-each (lambda (x)\n                (if (equal? (string-ref s x) (string-ref\
    \ c x))\n                    (append result (list (string-append (string-delete\
    \ s x) \"\") #t))\n                    (append result (list (string-append (string-delete\
    \ c x) \"\") #f))))\n                (string-ref s (string-length s) -1)))\n \
    \ result)\n", "  (let ((i (string-index s c)))\n    (if (eqv? (string-ref s i)\
    \ (string-ref c i))\n      (list (string-copy s (string-substring s i (string-length\
    \ s) -1)) #t)\n      (list (string-copy s (string-substring s 0 i)) #f))))\n",
  "  (let ((result (list \"\" #f)))\n    (for-each (lambda (x) (set-car! result (string-append\
    \ (string-append (cdr x) (list #\"^(0)\")) (string-append (string-append (car\
    \ x) (list #\"^(0)\")) result)))) s)\n    (if (string=? result s)\n      (set-cdr!\
    \ result #t)\n      (set-cdr! result #f)))\n\n;; Task\n;; Given a string, you\
    \ have to reverse the string and return the result.\n;; Example\n;; >>> (reverse\
    \ \"abcdef\")\n;; \"fedcba\"\n;; >>> (reverse \"\")\n;; \"\"\n;; >>> (reverse\
    \ \"a\")\n;; \"a\"\n;; >>> (reverse \"ab\")\n;; \"ba\"\n;; >>> (reverse \"abc\"\
    )\n;; \"cba\"\n;; >>> (reverse \"abcd\")\n;; \"dcba\"\n;; >>> (reverse \"abcde\"\
    )\n;; \"edcba\"\n;; >>> (reverse \"abcdef\")\n;; \"fedcba\"\n;; >>> (reverse \"\
    abcdefg\")\n;; \"gfedcba\"\n;; >>> (reverse \"abcdefgh\")\n;; \"hgfedcba\"\n;;\
    \ >>> (reverse \"abcdefghi\")\n;; \"ihgfedcba\"\n;; >>> (reverse \"abcdefghij\"\
    )\n;; \"jihgfedcba\"\n;; >>> (reverse \"abcdefghijk\")\n;; \"kjihgfedcba\"\n;;\
    \ >>> (reverse \"abcdefghijkl\")\n;; \"lkjihgfedcba\"\n;; >>> (reverse \"abcdefghijklm\"\
    )\n;; \"mlkjihgfedcba\"\n;; >>> (reverse \"abcdefghijklmn\")\n;; \"nmlkjihgfedcba\"\
    \n;; >>> (reverse \"abcdefghijklmno\")\n;; \"omlkjihgfedcba\"\n;; >>> (reverse\
    \ \"abcdefghijklmnop\")\n;; \"pmlkjihgfedcba\"\n;; >>> (reverse \"abcdefghijklmnopq\"\
    )\n;; \"qpmlkjihgfedcba\"\n;; >>> (reverse \"abcdefghijklmnopq", "  (let ((result\
    \ (list)))\n    (for-each (lambda (x)\n                (if (equal? (string-ref\
    \ s x) (string-ref c x))\n                    (append result (list (string-append\
    \ (string-delete s x) \"\"))))\n                (string-ref s x))\n      c))\n\
    \  (if (empty? result) #f\n    (list \"\" #t))\n  (reverse result))\n", "  (let\
    \ ((result (list)))\n    (for-each (lambda (x)\n                (if (eq (string-ref\
    \ s x) (string-ref c x))\n                    (append result (list (string-append\
    \ (string-delete s x) \"\") #t))\n                    (append result (list (string-append\
    \ (string-delete c x) \"\") #f))))\n               s)\n    (reverse result)))\n",
  "  (let ((result (list)))\n    (for-each (lambda (x)\n                (if (equal?\
    \ (string-ref s x) (string-ref c x))\n                    (append result (list\
    \ (string-append (list (string-ref s x) #\\space) (string-ref c x))))))\n    \
    \            (string-ref s)))\n  (if (empty? result) #f (list #t (reverse result))))\n",
  "  (let ((result (list \"\" #f)))\n    (for-each (lambda (x) (set-car! result (string-append\
    \ (string-append (reverse x) x) \"\")))\n      (string-split s c)))\n  result)\n",
  "  (let ((result \"\"))\n    (for-each (lambda (x) (setq result (concat result (delete\
    \ x s)))) c)\n    (if (string=? result s)\n      (list result #t)\n      (list\
    \ result #f)))\n)\n", "  (let ((result (list \"\" #f)))\n    (let ((i 0))\n  \
    \    (while (< i (string-length s))\n        (if (string= (string-substring s\
    \ i i) c)\n          (set result (append result (list (string-substring s i i))))\n\
    \          (set i (string-next-index s i)))\n        (set i (string-next-index\
    \ s i)))\n      result))\n)\n", "  (let ((result (list \"\" #f)))\n    (let ((i\
    \ (length s)))\n      (while (< i 0)\n        (let ((j (1 - i)))\n          (if\
    \ (string= (string-ci (substring s i j)) (string-ci c))\n            (setf result\
    \ (append result (substring s i j))))\n          (setf i (- i 1))))\n      (setf\
    \ result (append result (substring s 0 i))))))\n\n;; Test\n;; >>> (reverse_delete\
    \ \"abcdedcba\" \"ab\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"abc\")\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcde\"\
    )\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdef\")\n\
    ;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefg\")\n;;\
    \ (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefgh\")\n;;\
    \ (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefghi\")\n;;\
    \ (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefghij\")\n\
    ;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefghijkl\"\
    )\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefghijklm\"\
    )\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefghijklmn\"\
    )\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefghijklmnop\"\
    )\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefghijklmnopq\"\
    )\n;; (list \"cdedc\" #", "  (let ((result (make-string (length s) #f)))\n   \
    \ (let ((i 0))\n      (while (< i (length c))\n        (if (string= (string-ci\
    \ (substring s i i)) (string-ci c))\n          (set-ci result i)\n          (set-ci\
    \ result (add1 i)))\n        (set-ci result (add1 i)))\n      (set-ci result (length\
    \ result))))\n  result)\n", "  (define (reverse_delete-helper s c)\n    (cond\n\
    \      ((= c #\\0) (list s #f))\n      ((= c #\\n) (list s #f))\n      ((= c #\\\
    r) (list s #f))\n      ((= c #\\t) (list s #f))\n      ((= c #\\b) (list s #f))\n\
    \      ((= c #\\a) (list s #f))\n      ((= c #\\v) (list s #f))\n      ((= c #\\\
    f) (list s #f))\n      ((= c #\\r) (list s #f))\n      ((= c #\\e) (list s #f))\n\
    \      ((= c #\\d) (list s #f))\n      ((= c #\\c) (list s #f))\n      ((= c #\\\
    s) (list s #f))\n      ((= c #\\w) (list s #f))\n      ((= c #\\q) (list s #f))\n\
    \      ((= c #\\x) (list s #f))\n      ((= c #\\u) (list s #f))\n      ((= c #\\\
    l) (list s #f))\n      ((= c #\\o) (list s #f))\n      ((= c #\\g) (list s #f))\n\
    \      ((= c #\\p) (list s #f))\n      ((= c #\\y) (list s #f))\n      ((= c #\\\
    h) (list s #f))\n      ((= c #\\m) (list s #f))\n      ((= c #\\i) (list s #f))\n\
    \      ((= c #\\k) (list s #f))\n      ((= c #\\j) (list s #f))\n      ((= c #\\\
    x) (list s #f))\n      ((= c #\\t) (list s #f))\n      ((= c #\\n) (list s #f))\n\
    \      ((= c #\\b) (list s #f))\n      ((= c #\\a) (list s #f))\n      ((= c #\\\
    v) (list s #f))", "  (let ((result (list)))\n    (for-each (lambda (x)\n     \
    \           (if (eq (string-ref s x) (string-ref c x))\n                    (append\
    \ result (list (string-append (string-delete s x) \"\") #t))\n               \
    \     (append result (list (string-append (string-delete c x) \"\") #f))))\n \
    \             s)\n    (reverse result)))\n\n;; Task\n;; Given a string, you have\
    \ to delete all the characters in the string that are not in the alphabet.\n;;\
    \ Then check if the result string is palindrome.\n;; A string is called palindrome\
    \ if it reads the same backward as forward.\n;; You should return a list containing\
    \ the result string and #t/#f for the check.\n;; Example\n;; >>> (delete_non_alphabet\
    \ \"abcdefghijklmnopqrstuvwxyz\")\n;; (list \"efghijklmnopqrstuvwxyz\" #f)\n;;\
    \ >>> (delete_non_alphabet \"abcdefghijklmnopqrstuvwxyz1234567890\")\n;; (list\
    \ \"1234567890\" #t)", "  (let ((result (list)))\n    (let ((i 0))\n      (while\
    \ (< i (string-length s))\n        (if (string= (string-ref s i) (string-ref c\
    \ i))\n          (setf result (append result (list (string-substring s i (1+ i)))))\n\
    \          (setf i (1+ i)))\n        (setf i (1+ i)))\n      result))\n  result)\n",
  "  (let ((result (list \"\" #f)))\n    (let ((i 0))\n      (while (< i (string-length\
    \ s))\n        (if (string=? (string-substring s i i) c)\n            (setf result\
    \ (list (string-append (string-substring result 0 i) (string-substring s i (string-length\
    \ s) - 1)) #t))\n          (setf i (string-increment i))))))\n  result)\n", " \
    \ (let ((result (make-string (length s) #f)))\n    (for-each (lambda (x) (string-set!\
    \ result x #f)) s)\n    (for-each (lambda (x) (string-set! result x #t)) c)\n\
    \    (reverse result)\n    (if (string=? result s)\n      (list result #t)\n \
    \     (list result #f)))\n)\n\n;; Test\n;; >>> (reverse_delete \"abcde\" \"ae\"\
    )\n;; (list \"bcd\" #f)\n;; >>> (reverse_delete \"abcdef\" \"b\")\n;; (list \"\
    acdef\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list \"cdedc\"\
    \ #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abc\")\n;; (list \"cdedc\" #t)\n\
    ;; >>> (reverse_delete \"abcdedcba\" \"abcd\")\n;; (list \"cdedc\" #t)\n;; >>>\
    \ (reverse_delete \"abcdedcba\" \"abcd\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete\
    \ \"abcdedcba\" \"abcde\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"\
    abcdedcba\" \"abcde\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"abcdef\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"\
    abcdef\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdef\"\
    )\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdef\")\n\
    ;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdef\")\n;; (list\
    \ \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdef\")\n;; (list \"\
    cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abc", "  (let ((result (make-string\
    \ (length s) #f)))\n    (let ((i 0))\n      (while (< i (length c))\n        (if\
    \ (equal? (string-ref s (modulo (length s) i)) (string-ref c (modulo (length c)\
    \ i)))\n          (set-string-element! result i (string-ref s (modulo (length\
    \ s) i)))\n          (set-string-element! result (modulo (length result) i) #f)\n\
    \          (set-string-element! result (modulo (length result) i) #t)\n      \
    \    (set-string-element! result (modulo (length result) i) #f)\n          (set-string-element!\
    \ result (modulo (length result) i) #t)\n          (set-string-element! result\
    \ (modulo (length result) i) #f)\n          (set-string-element! result (modulo\
    \ (length result) i) #t)\n          (set-string-element! result (modulo (length\
    \ result) i) #f)\n          (set-string-element! result (modulo (length result)\
    \ i) #t)\n          (set-string-element! result (modulo (length result) i) #f)\n\
    \          (set-string-element! result (modulo (length result) i) #t)\n      \
    \    (set-string-element! result (modulo (length result) i) #f)\n          (set-string-element!\
    \ result (modulo (length result) i) #t)\n          (set-string-element! result\
    \ (modulo (length result) i) #f)\n          (set-string-element! result (modulo\
    \ (length result) i) #t)\n          (set-string-element! result (modulo (length\
    \ result) i) #f)\n          (set-string-element! result (modulo (length result)\
    \ i) #t)\n          (set-string-element! result (modulo (length result) i) #f)\n\
    \          (set-string-element! result (modulo (length result) i) #t)\n      \
    \    (set-string-element! result (modulo (length result) i) #f)", "  (let ((result\
    \ (list)))\n    (for-each (lambda (x)\n                (if (equal? (string-ref\
    \ s x) (string-ref c x))\n                    (append result (list (string-append\
    \ (string-delete s x) \"\") #t))\n                    (append result (list (string-append\
    \ (string-delete c x) \"\") #f))))\n               s)\n    (reverse result)))\n\
    \n;; Task\n;; Given a string, you have to delete all the characters in the string\
    \ that are not in the alphabet.\n;; Then check if the result string is palindrome.\n\
    ;; A string is called palindrome if it reads the same backward as forward.\n;;\
    \ You should return a list containing the result string and #t/#f for the check.\n\
    ;; Example\n;; >>> (delete_non_alphabet \"abcdefghijklmnopqrstuvwxyz\")\n;; (list\
    \ \"efghijklmnopqrstuvwxyz\" #f)\n;; >>> (delete_non_alphabet \"abcdefghijklmnopqrstuvwxyz1234567890\"\
    )\n;; (list \"1234567890\" #t)", "  (let ((result (make-string (length s) '#f)))\n\
    \    (let ((i 0))\n      (while (< i (length c))\n        (if (string= c (stringref\
    \ s i))\n            (setf (stringref result i) #t)\n            (setf (stringref\
    \ result) #f)\n            (setf i (1+ i)))\n        (setf i (1+ i)))\n      (stringref\
    \ result)))\n)\n\n;; Task\n;; Given a string s, you have to delete all the characters\
    \ in s that are equal to any character in c.\n;; Then check if the result string\
    \ is palindrome.\n;; A string is called palindrome if it reads the same backward\
    \ as forward.\n;; You should return a list containing the result string and #t/#f\
    \ for the check.\n;; Example\n;; >>> (reverse_delete \"abcde\" \"ae\")\n;; (list\
    \ \"bcd\" #f)\n;; >>> (reverse_delete \"abcdef\" \"b\")\n;; (list \"acdef\" #f)\n\
    ;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list \"cdedc\" #t)", "  (let\
    \ ((result (make-string (length s) #f)))\n    (let ((i 0))\n      (while (< i\
    \ (length c))\n        (set! result (string-set! result (string-ref result i)\
    \ #f)\n          (set! i (string-add i 1)))\n        (set! i (string-add i 1))))\n\
    \    (reverse result)\n    (if (string=? result s)\n      #t\n      (list result\
    \ #f)))\n\n;; Task\n;; Given a string, you have to delete all the characters in\
    \ the string that are not in the alphabet.\n;; Then check if the result string\
    \ is palindrome.\n;; A string is called palindrome if it reads the same backward\
    \ as forward.\n;; You should return a list containing the result string and #t/#f\
    \ for the check.\n;; Example\n;; >>> (delete_non_alphabet \"abcde\")\n;; (list\
    \ \"bcde\" #f)\n;; >>> (delete_non_alphabet \"abcdef\")\n;; (list \"f\" #f)\n\
    ;; >>> (delete_non_alphabet \"abcdedcba\")\n;; (list \"edcba\" #f)\n;; >>> (delete_non_alphabet\
    \ \"abcdedcba\" \"abcdedcba\")\n;; (list \"edcba\" #t)", "  (let ((result (list\
    \ \"\" #f)))\n    (for-each (lambda (x) (set-car! result (string-append (string-append\
    \ (reverse x) x) result)))\n      (string-append s c)))\n  result)\n\n;; Solution",
  "  (let ((result (list \"\" #f)))\n    (for-each (lambda (x) (set-car! result (string-append\
    \ (reverse x) result)))\n      (string-append s c)))\n  result)\n\n;; Test\n;;\
    \ >>> (reverse_delete \"abcde\" \"ae\")\n;; (list \"bcd\" #f)\n;; >>> (reverse_delete\
    \ \"abcdef\" \"b\")\n;; (list \"acdef\" #f)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"ab\")\n;; (list \"cdedc\" #t)\n\n;; Solution", "  (let ((result (list \"\"\
    \ #f)))\n    (let ((i 0))\n      (while (< i (string-length s))\n        (if (string=\
    \ (string-substring s i i) c)\n            (set! result (list (string-append result\
    \ (string-substring s i i)) #t))\n            (set! i (string-next-index s i)))\n\
    \        (set! i (string-next-index s i)))\n      result))\n)\n\n;; Task\n;; Given\
    \ a string, you have to reverse the string and then delete all the characters\
    \ in the reversed string that are not in the given string.\n;; The result should\
    \ be the string that is the reverse of the given string without the characters\
    \ that are not in the given string.\n;; Example\n;; >>> (reverse_delete \"abcdef\"\
    \ \"abc\")\n;; \"f\"\n;; >>> (reverse_delete \"abcdef\" \"ab\")\n;; \"ef\"\n;;\
    \ >>> (reverse_delete \"abcdef\" \"abcd\")\n;; \"ef\"\n;; >>> (reverse_delete\
    \ \"abcdef\" \"abcd\")\n;; \"ef\"\n;; >>> (reverse_delete \"abcdef\" \"abcd\"\
    )\n;; \"ef\"\n;; >>> (reverse_delete \"abcdef\" \"abcd\")\n;; \"ef\"\n;; >>> (reverse_delete\
    \ \"abcdef\" \"abcd\")\n;; \"ef\"\n;; >>> (reverse_delete \"abcdef\" \"abcd\"\
    )\n;; \"ef\"\n;; >>> (reverse_delete \"abcdef\" \"abcd\")\n;; \"ef\"\n;; >>> (reverse_delete\
    \ \"abcdef\" \"abcd\")\n;; \"ef\"\n;; >>> (reverse_delete \"abcdef\" \"abcd\"\
    )\n;; \"ef\"\n;; >>> (reverse_delete \"abcdef\" \"abcd\")\n;; \"ef\"\n;; >>> (reverse_delete\
    \ \"abcdef\" \"abcd\")\n;; \"ef\"\n;; >>> (reverse_delete \"abcdef\" \"abcd\"\
    )\n;; \"ef\"\n;; >>> (reverse_delete \"abcdef\" \"abcd\")\n;; \"ef\"\n;; >>> (reverse_delete\
    \ \"abcdef\" \"abcd\")\n;; \"ef\"\n;; >>> (reverse_delete \"abcdef\" \"abcd\"\
    )\n;; \"ef\"", "  (let ((result (make-string (length s) #f)))\n    (let ((i 0))\n\
    \      (while (< i (length c))\n        (if (equal? (string-ref s (modulo i (length\
    \ c))) (string-ref c c))\n            (set-string-elt result i (string-ref s i))\n\
    \            (set-string-elt result (modulo i (length c)) (string-ref c i))\n\
    \            (set-string-elt result (modulo i (length c)) (modulo i (length c)))\n\
    \            (set-string-elt result (modulo i (length c)) (modulo i (length c)))\n\
    \            (set-string-elt result (modulo i (length c)) (modulo i (length c)))\n\
    \            (set-string-elt result (modulo i (length c)) (modulo i (length c)))\n\
    \            (set-string-elt result (modulo i (length c)) (modulo i (length c)))\n\
    \            (set-string-elt result (modulo i (length c)) (modulo i (length c)))\n\
    \            (set-string-elt result (modulo i (length c)) (modulo i (length c)))\n\
    \            (set-string-elt result (modulo i (length c)) (modulo i (length c)))\n\
    \            (set-string-elt result (modulo i (length c)) (modulo i (length c)))\n\
    \            (set-string-elt result (modulo i (length c)) (modulo i (length c)))\n\
    \            (set-string-elt result (modulo i (length c)) (modulo i (length c)))\n\
    \            (set-string-elt result (modulo i (length c)) (modulo i (length c)))\n\
    \            (set-string-elt result (modulo i (length c)) (modulo i (length c)))\n\
    \            (set-string-elt result (modulo i (length c)) (modulo i (length c)))\n\
    \            (set-string-elt result (modulo i (length c)) (modulo i (length c)))\n\
    \            (set-string-elt result (modulo i (length c)) (modulo i (length c)))\n\
    \            (set-string-elt result (", "  (let ((result (list \"\" #f)))\n  \
    \  (for-each (lambda (x)\n                (if (string= x c)\n                \
    \    (set-car! result (string-append (string-reverse x) result))\n           \
    \         (set-car! result #f)))\n               s)\n    (set-cdr! result #t)))\n",
  "  (let ((result (list \"\" #f)))\n    (let ((i 0))\n      (while (< i (string-length\
    \ s))\n        (if (string= (string-substring s i i) c)\n          (setf result\
    \ (append result (list (string-substring s i i) #t))))\n        (setf i (1+ i)))\n\
    \      result))\n  result)\n", "  (let ((result (make-string (length s) #f)))\n\
    \    (let ((i 0))\n      (while (< i (length c))\n        (if (equal? (string-ref\
    \ s (modulo (length s) i)) (string-ref c (modulo (length c) i)))\n          (set-string-elt!\
    \ result i (string-ref s (modulo (length s) i)))\n          (set-string-elt! result\
    \ (modulo (length result) i) #f)\n          (set-string-elt! result (modulo (length\
    \ result) i) #t)\n          (set-string-elt! result (modulo (length result) i)\
    \ #f)\n          (set-string-elt! result (modulo (length result) i) #t)\n    \
    \      (set-string-elt! result (modulo (length result) i) #f)\n          (set-string-elt!\
    \ result (modulo (length result) i) #t)\n          (set-string-elt! result (modulo\
    \ (length result) i) #f)\n          (set-string-elt! result (modulo (length result)\
    \ i) #t)\n          (set-string-elt! result (modulo (length result) i) #f)\n \
    \         (set-string-elt! result (modulo (length result) i) #t)\n          (set-string-elt!\
    \ result (modulo (length result) i) #f)\n          (set-string-elt! result (modulo\
    \ (length result) i) #t)\n          (set-string-elt! result (modulo (length result)\
    \ i) #f)\n          (set-string-elt! result (modulo (length result) i) #t)\n \
    \         (set-string-elt! result (modulo (length result) i) #f)\n          (set-string-elt!\
    \ result (modulo (length result) i) #t)\n          (set-string-elt! result (modulo\
    \ (length result) i) #f)\n          (set-string-elt! result (modulo (length result)\
    \ i) #t)\n          (set-string-elt! result (modulo (length result) i) #f)", " \
    \ (let ((result (make-string (length s) '#\\\\#)))\n    (let ((i 0))\n      (while\
    \ (< i (length c))\n        (set! result (insert result c c i))\n        (set!\
    \ i (1+ i))))\n    (if (string=? result s)\n      (list result #t)\n      (list\
    \ result #f)))\n)\n\n;; Test\n;; >>> (reverse_delete \"abcde\" \"ae\")\n;; (list\
    \ \"bcd\" #f)\n;; >>> (reverse_delete \"abcdef\" \"b\")\n;; (list \"acdef\" #f)\n\
    ;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete\
    \ \"abcdedcba\" \"abcd\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"abcde\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"\
    abcde\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcde\"\
    )\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcde\")\n;;\
    \ (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcde\")\n;; (list\
    \ \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcde\")\n;; (list \"\
    cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcde\")\n;; (list \"cdedc\"\
    \ #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcde\")\n;; (list \"cdedc\" #t)\n\
    ;; >>> (reverse_delete \"abcdedcba\" \"abcde\")\n;; (list \"cdedc\" #t)\n;; >>>\
    \ (reverse_delete \"abcdedcba\" \"abcde\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete\
    \ \"abcdedcba\" \"abcde\")\n;; (list \"", "  (let ((result (make-string (length\
    \ s) #f)))\n    (for-each (lambda (i) (string-set! result i (string-ref s i)))\n\
    \      (range (length s) (- (length s) i)))\n    (string-set! result (length s)\
    \ #t)\n    result))\n", "  (let ((result (list \"\" #f)))\n    (let ((i 0))\n\
    \      (while (< i (string-length s))\n        (let ((j (string-index-of s i c)))\n\
    \          (if (eqv? (string-ref s i) (string-ref c j))\n              (setf result\
    \ (append result (list (string-substring s i j) #t)))\n              (setf i (string-index-of\
    \ s i (string-ref c j) #f))))\n        (setf i (string-index-of s i #f)))\n  \
    \    result))\n)\n\n;; Test\n;; >>> (reverse_delete \"abcdef\" \"b\")\n;; (list\
    \ \"acdef\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list \"cdedc\"\
    \ #t)\n;; >>> (reverse_delete \"abcdedcba\" \"c\")\n;; (list \"abcdedcba\" #t)\n\
    ;; >>> (reverse_delete \"abcdedcba\" \"d\")\n;; (list \"abcdedcba\" #f)\n;; >>>\
    \ (reverse_delete \"abcdedcba\" \"e\")\n;; (list \"abcdedcba\" #f)\n;; >>> (reverse_delete\
    \ \"abcdedcba\" \"a\")\n;; (list \"bcdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"b\")\n;; (list \"acdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"c\"\
    )\n;; (list \"abcdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"d\")\n;;\
    \ (list \"abcdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"a\")\n;; (list\
    \ \"bcdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"b\")\n;; (list \"acdedcba\"\
    \ #f)\n;; >>> (reverse_delete \"abcdedcba\" \"c\")\n;; (list \"abcdedcba\" #f)\n\
    ;; >>> (reverse_delete \"abcdedcba\" \"d\")\n;; (list \"abcdedcba\"", "  (let\
    \ ((result (list)))\n    (for-each (lambda (x)\n                (if (eqv? x c)\n\
    \                    (result '())))\n      s)\n    (if (reverse? result)\n   \
    \   result\n      (result '())))\n)\n\n;; Test\n;; >>> (reverse_delete \"abcde\"\
    \ \"ae\")\n;; (list \"bcd\" #f)\n;; >>> (reverse_delete \"abcdef\" \"b\")\n;;\
    \ (list \"acdef\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list\
    \ \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abc\")\n;; (list \"cdedc\"\
    \ #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcd\")\n;; (list \"cdedc\" #t)\n\
    ;; >>> (reverse_delete \"abcdedcba\" \"abcde\")\n;; (list \"cdedc\" #t)\n;; >>>\
    \ (reverse_delete \"abcdedcba\" \"abcdef\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete\
    \ \"abcdedcba\" \"abcdefg\")\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"\
    abcdedcba\" \"abcdefghijklmnopqrstuvwxyz\")\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete\
    \ \"abcdedcba\" \"abcdefghijklmnopqrstuvwxyz\" \"abcdefghijklmnopqrstuvwxyz\"\
    )\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefghijklmnopqrstuvwxyz\"\
    \ \"abcdefghijklmnopqrstuvwxyz\" \"abcdefghijklmnopqrstuvwxyz\")\n;; (list \"\
    cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefghijklmnopqrstuvwxyz\"\
    \ \"abcdefghijklmnopqrstuvwxyz\" \"abcdefghijklmn", "  (let ((result (make-string\
    \ (length s) #f)))\n    (let ((i 0))\n      (while (< i (length c))\n        (set!\
    \ result (insert result c c i))\n        (set! i (1+ i))))\n    (reverse result)\n\
    \    (if (equal? (reverse result) (reverse s))\n      #t\n      #f))\n)\n\n;;\
    \ Test\n;; >>> (reverse_delete \"abcdef\" \"b\")\n;; (list \"acdef\" #f)\n;; >>>\
    \ (reverse_delete \"abcdedcba\" \"ab\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete\
    \ \"abcdedcba\" \"abc\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"abcd\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcde\"\
    )\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdef\")\n\
    ;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefg\")\n;;\
    \ (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefgh\")\n;;\
    \ (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefghi\")\n;;\
    \ (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefghij\")\n\
    ;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefghijkl\"\
    )\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefghijklm\"\
    )\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefghijklmn\"\
    )\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefghijklmnop\"\
    )\n;; (list \"cdedc", "  (let ((result (list \"\" #f)))\n    (for-each (lambda\
    \ (x) (set-car! result (string-append (string-append (cdr result) (list (car x)))\
    \ \"\") (string-append (string-append (cdr result) (list (car x))) \"\"))) s)\n\
    \    (set-cdr! result (list \"\" #t)))\n)\n\n;; Task\n;; Given a string s, you\
    \ have to delete all the characters in s that are not in the alphabet {a,b,c,d,e}.\n\
    ;; Then check if the result string is palindrome.\n;; A string is called palindrome\
    \ if it reads the same backward as forward.\n;; You should return a list containing\
    \ the result string and #t/#f for the check.\n;; Example\n;; >>> (delete_not_in_alphabet\
    \ \"abcde\")\n;; (list \"bcd\" #f)\n;; >>> (delete_not_in_alphabet \"abcdef\"\
    )\n;; (list \"acdef\" #f)\n;; >>> (delete_not_in_alphabet \"abcdedcba\")\n;; (list\
    \ \"cdedc\" #t)", "  (let ((result (make-string (length s) #f)))\n    (let ((i\
    \ (0)))\n      (while (< i (length s))\n        (let ((j (i)))\n          (set!\
    \ i (i + 1)))\n          (if (string=? (substring s i j) (substring c i j))\n\
    \              (set! result (append result (substring s i j)))\n             \
    \ (set! result (append result #f)))\n        )\n      )\n    result)\n)\n\n;;\
    \ Test\n;; >>> (reverse_delete \"abcdef\" \"b\")\n;; \"acdef\"\n;; >>> (reverse_delete\
    \ \"abcdedcba\" \"ab\")\n;; \"cdedc\"\n;; >>> (reverse_delete \"abcdedcba\" \"\
    abc\")\n;; \"dedc\"\n;; >>> (reverse_delete \"abcdedcba\" \"abcde\")\n;; \"dedc\"\
    \n;; >>> (reverse_delete \"abcdedcba\" \"abcd\")\n;; \"dedc\"\n;; >>> (reverse_delete\
    \ \"abcdedcba\" \"abcd\")\n;; \"dedc\"\n;; >>> (reverse_delete \"abcdedcba\" \"\
    abcd\")\n;; \"dedc\"\n;; >>> (reverse_delete \"abcdedcba\" \"abcd\")\n;; \"dedc\"\
    \n;; >>> (reverse_delete \"abcdedcba\" \"abcd\")\n;; \"dedc\"\n;; >>> (reverse_delete\
    \ \"abcdedcba\" \"abcd\")\n;; \"dedc\"\n;; >>> (reverse_delete \"abcdedcba\" \"\
    abcd\")\n;; \"dedc\"\n;; >>> (reverse_delete \"abcdedcba\" \"abcd\")\n;; \"dedc\"\
    \n;; >>> (reverse_delete \"abcdedcba\" \"abcd\")\n;; \"dedc\"\n;; >>> (reverse_delete\
    \ \"abcdedcba\" \"abcd\")\n;; \"dedc\"\n;; >>> (reverse_delete \"abcdedcba\" \"\
    abcd\")\n;; \"dedc\"\n;; >>> (reverse_delete \"abcdedcba\" \"abcd\")\n;; \"dedc\"\
    \n;; >>> (reverse_delete \"abcdedcba\" \"abcd\")\n;; \"dedc\"\n;; >>> (", "  (let\
    \ ((result (list)))\n    (for-each (lambda (x)\n                (if (string= x\
    \ c)\n                    (append result (list (reverse x)))\n               \
    \     (append result (list x))))\n      s))\n  (if (empty? result) #f\n    (list\
    \ s)))\n", "  (let ((result (list \"\" #f)))\n    (let ((i 0))\n      (while (<\
    \ i (string-length s))\n        (if (string= (string-substring s i i) c)\n   \
    \         (setf result (append result (string-substring s (1+ i) (- (1+ i) (string-length\
    \ s))))))\n        (setf i (1+ i)))\n      result))\n)\n\n;; Task\n;; Given a\
    \ string, you have to reverse the string and return the reversed string.\n;; Example\n\
    ;; >>> (reverse \"abc\")\n;; \"cba\"\n;; >>> (reverse \"abcd\")\n;; \"dcba\"\n\
    ;; >>> (reverse \"abcdabcd\")\n;; \"dcbacdba\"", "  (let ((result (list)))\n \
    \   (for-each (lambda (x)\n                (if (string= x c)\n               \
    \     (result '#f)\n                    (set! result (cons (reverse x) result))))\n\
    \      s)\n    result))\n", "  (let ((result (make-string (length s) #f)))\n \
    \   (let ((i 0))\n      (while (< i (length c))\n        (set! result (insert\
    \ result c c i))\n        (set! i (1+ i))))\n    (if (string=? result s)\n   \
    \   (list result #t)\n      (list result #f)))\n)\n\n;; Test\n;; >>> (reverse_delete\
    \ \"abcde\" \"ae\")\n;; (list \"bcd\" #f)\n;; >>> (reverse_delete \"abcdef\" \"\
    b\")\n;; (list \"acdef\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;;\
    \ (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abc\")\n;; (list\
    \ \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcde\")\n;; (list \"\
    cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdef\")\n;; (list \"cdedc\"\
    \ #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefg\")\n;; (list \"cdedc\" #f)\n\
    ;; >>> (reverse_delete \"abcdedcba\" \"abcdefgh\")\n;; (list \"cdedc\" #f)\n;;\
    \ >>> (reverse_delete \"abcdedcba\" \"abcdefghi\")\n;; (list \"cdedc\" #f)\n;;\
    \ >>> (reverse_delete \"abcdedcba\" \"abcdefghi\")\n;; (list \"cdedc\" #f)\n;;\
    \ >>> (reverse_delete \"abcdedcba\" \"abcdefghi\")\n;; (list \"cdedc\" #f)\n;;\
    \ >>> (reverse_delete \"abcdedcba\" \"abcdefghi\")\n;; (list \"cdedc\" #f)\n;;\
    \ >>> (reverse_delete \"abcdedcba\" \"abcdefghi\")\n;; (list \"cdedc\" #f)\n;;\
    \ >>> (reverse_delete \"abcdedcba\" \"abcdefghi\")\n;; (list \"cdedc\" #f)\n;;\
    \ >>> (reverse_delete \"abcdedc", "  (let ((result (list)))\n    (for-each (lambda\
    \ (x)\n                (if (equal? (string-ref s x) (string-ref c x))\n      \
    \              (list (append result (list (string-append (list (string-ref s x))\
    \ (list #f)))))))\n      s)\n    (if (null? result) #f (list (string-append (list\
    \ s) result))))\n)\n", "  (let ((result (list)))\n    (for-each (lambda (x)\n\
    \                (if (eq (string-ref s x) (string-ref c x))\n                \
    \    (append result (list (string-append (list (string-ref s x)) (list #f))))))\n\
    \              s)\n      result))\n", "  (let ((result (make-string (length s)\
    \ #f)))\n    (let ((i 0))\n      (while (< i (length c))\n        (set! result\
    \ (string-set! result (string-ref result i) #f)\n          (set! i (string-index-of\
    \ result (string-ref c i)))\n          (set! i (string-index-of result (string-ref\
    \ c i))))\n        (set! i (string-index-of result (string-ref c i))))\n     \
    \ (string-set! result (string-ref result i) #t)\n      (string-set! result (string-ref\
    \ result i) #f))\n    result))\n", "  (let ((result (list \"\" #f)))\n    (for-each\
    \ (lambda (x)\n                (if (string= x c)\n                    (set-car!\
    \ result (string-append (cdr result) (string-append x \"\")))\n              \
    \      (set-car! result (string-append x (cdr result))))\n                s))\n\
    \    result))\n\n;;; (reverse_delete \"abcdedcba\" \"ab\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"b\")\n;;; (reverse_delete \"abcdedcba\" \"c\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"d\")\n;;; (reverse_delete \"abcdedcba\" \"e\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"f\")\n;;; (reverse_delete \"abcdedcba\" \"g\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"h\")\n;;; (reverse_delete \"abcdedcba\" \"i\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"j\")\n;;; (reverse_delete \"abcdedcba\" \"k\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"l\")\n;;; (reverse_delete \"abcdedcba\" \"m\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"n\")\n;;; (reverse_delete \"abcdedcba\" \"o\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"p\")\n;;; (reverse_delete \"abcdedcba\" \"q\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"r\")\n;;; (reverse_delete \"abcdedcba\" \"s\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"t\")\n;;; (reverse_delete \"abcdedcba\" \"u\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"v\")\n;;; (reverse_delete \"abcdedcba\" \"w\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"x\")\n;;; (reverse_delete \"abcdedcba\" \"y\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"z\")\n;;; (reverse_delete \"abcdedcba\"", "  (let ((result (list\
    \ \"\" #f)))\n    (for-each (lambda (x) (set-car! result (string-append (string-append\
    \ (reverse x) x) \"\")))\n      (string-split s c)))\n  result)\n", "  (let ((result\
    \ (list)))\n    (for-each (lambda (x)\n                (if (eq (string-ref s x)\
    \ (string-ref c x))\n                    (append result (list (string-append (string-delete\
    \ s x) \"\") #t))\n                    (append result (list (string-append (string-delete\
    \ c x) \"\") #f))))\n              s)\n    (reverse result)))\n", "  (let ((result\
    \ (make-string (length s) '#\\0)))\n    (let ((i 0))\n      (while (< i (length\
    \ c))\n        (set! result (string-set! result (string-ref result i) #\\0)\n\
    \          (set! i (string-index-of result (string-ref c i)))\n          (set!\
    \ i (string-index-of result (string-ref c i))))\n        (set! i (string-index-of\
    \ result (string-ref c i))))\n      (if (string=? result s)\n          (list result\
    \ #t)\n          (list result #f)))))\n", "  (define (reverse_delete-helper s\
    \ c)\n    (cond\n      [(string-equal? s c) (reverse-list s)]\n      [(string-less?\
    \ s c) (reverse_delete-helper (cdr s) (car c))]\n      [else (reverse_delete-helper\
    \ (cdr s) (car c))]))\n  (reverse_delete-helper s c))\n", "  (let ((result (list)))\n\
    \    (for-each (lambda (x) (set-car! result (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-", "  (let\
    \ ((result (list \"\" #f)))\n    (for-each (lambda (x) (set-car! result (string-append\
    \ (string-append (string-append x (string-append c \"\")) \"\") \"\"))) s)\n \
    \   (set-cdr! result #t)))\n\n;; Test\n;; >>> (reverse_delete \"abcdef\" \"b\"\
    )\n;; (list \"acdef\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list\
    \ \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abc\")\n;; (list \"cdedc\"\
    \ #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcd\")\n;; (list \"cdedc\" #t)\n\
    ;; >>> (reverse_delete \"abcdedcba\" \"abcde\")\n;; (list \"cdedc\" #t)\n;; >>>\
    \ (reverse_delete \"abcdedcba\" \"abcdef\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete\
    \ \"abcdedcba\" \"abcdefg\")\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"\
    abcdedcba\" \"abcdefgh\")\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"abcdefghi\")\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"abcdefghij\")\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"abcdefghijk\")\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"abcdefghijkl\")\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"abcdefghijklm\")\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"abcdefghijklmn\")\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"abcdefghijklmnop\")\n", "  (let ((result (list)))\n    (for-each (lambda (x)\
    \ (set-car! result (string-append (reverse x) (reverse c)))) s)\n    (if (string=?\
    \ (reverse result) (reverse c))\n      (set-cdr! result #t)\n      (set-cdr! result\
    \ #f))))\n", "  (let ((result (make-string (length s) #f)))\n    (let ((i 0))\n\
    \      (while (< i (length c))\n        (set! result (insert result c c i))\n\
    \        (set! i (1+ i))))\n    (if (string=? result s)\n      (list result #t)\n\
    \      (list result #f)))\n)\n\n;; Test\n;; >>> (reverse_delete \"abcde\" \"ae\"\
    )\n;; (list \"bcd\" #f)\n;; >>> (reverse_delete \"abcdef\" \"b\")\n;; (list \"\
    acdef\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list \"cdedc\"\
    \ #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abc\")\n;; (list \"cdedc\" #t)\n\
    ;; >>> (reverse_delete \"abcdedcba\" \"abcde\")\n;; (list \"cdedc\" #t)\n;; >>>\
    \ (reverse_delete \"abcdedcba\" \"abcdef\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete\
    \ \"abcdedcba\" \"abcdefg\")\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"\
    abcdedcba\" \"abcdefg\" \"abcdefg\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete\
    \ \"abcdedcba\" \"abcdefg\" \"abcdefg\" \"abcdefg\")\n;; (list \"cdedc\" #t)\n\
    ;; >>> (reverse_delete \"abcdedcba\" \"abcdefg\" \"abcdefg\" \"abcdefg\" \"abcdefg\"\
    )\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefg\" \"\
    abcdefg\" \"abcdefg\" \"abcdefg\" \"abcdefg\")\n;; (list \"cdedc\" #t)\n;; >>>\
    \ (reverse_delete \"abcdedcba\" \"abcdefg\" \"abcdefg\" \"abcdefg\" \"abcdefg\"\
    \ \"abcdefg\" \"abcdefg\")\n;; (list \"cdedc\" #t)\n;;", "  (let ((result (list)))\n\
    \    (let ((i 0))\n      (while (< i (string-length s))\n        (if (string=\
    \ (string-substring s i i) c)\n          (set! result (append result (string-substring\
    \ s i i)))\n          (set! i (string-next-index s i)))\n        (set! i (string-next-index\
    \ s i)))\n      result))\n\n;; Test\n;; >>> (reverse_delete \"abcdef\" \"b\")\n\
    ;; (list \"acdef\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list\
    \ \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abc\")\n;; (list \"cdedc\"\
    \ #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcde\")\n;; (list \"cdedc\" #t)\n\
    ;; >>> (reverse_delete \"abcdedcba\" \"abcd\")\n;; (list \"cdedc\" #t)\n;; >>>\
    \ (reverse_delete \"abcdedcba\" \"abcd\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete\
    \ \"abcdedcba\" \"abcde\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"\
    abcdedcba\" \"abcde\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"abcde\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"\
    abcde\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcde\"\
    )\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcde\")\n;;\
    \ (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcde\")\n;; (list\
    \ \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcde\")\n;; (list \"\
    cdedc\" #t)\n;; >>> (reverse_delete \"abcded", "  (let ((result (make-string (length\
    \ s) #f)))\n    (let ((i 0))\n      (while (< i (length c))\n        (set! result\
    \ (insert result c c i))\n        (set! i (1+ i))))\n    (reverse result)\n  \
    \  (if (equal? (reverse result) (reverse result))\n      #t\n      #f)))\n\n;;\
    \ Test\n;; >>> (reverse_delete \"abcdef\" \"b\")\n;; (list \"acdef\" #f)\n;; >>>\
    \ (reverse_delete \"abcdedcba\" \"ab\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete\
    \ \"abcdedcba\" \"abcd\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"abcd\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcde\"\
    )\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcde\")\n;;\
    \ (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcde\")\n;; (list\
    \ \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcde\")\n;; (list \"\
    cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcde\")\n;; (list \"cdedc\"\
    \ #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcde\")\n;; (list \"cdedc\" #f)\n\
    ;; >>> (reverse_delete \"abcdedcba\" \"abcde\")\n;; (list \"cdedc\" #f)\n;; >>>\
    \ (reverse_delete \"abcdedcba\" \"abcde\")\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete\
    \ \"abcdedcba\" \"abcde\")\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"\
    abcdedcba\" \"abcde\")\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"abcde\")\n;;", "  (let ((result \"\"))\n    (let ((i 0))\n      (while (<\
    \ i (string-length s))\n        (if (string-ref s i)\n            (set! result\
    \ (append result (string-copy (string-substring s i 1))))\n            (set! i\
    \ (string-add (string-add i 1) (string-length c))))\n        (set! i (string-add\
    \ i 1))))\n    (if (string-equal? result s)\n      #t\n      #f))\n\n;;; (reverse_delete\
    \ \"abcdedcba\" \"ab\")\n;;; (reverse_delete \"abcdedcba\" \"abc\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"abcde\")\n;;; (reverse_delete \"abcdedcba\" \"abcdef\")\n;;;\
    \ (reverse_delete \"abcdedcba\" \"abcdefg\")\n;;; (reverse_delete \"abcdedcba\"\
    \ \"abcdefgh\")\n;;; (reverse_delete \"abcdedcba\" \"abcdefghi\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"abcdefghij\")\n;;; (reverse_delete \"abcdedcba\" \"abcdefghijk\"\
    )\n;;; (reverse_delete \"abcdedcba\" \"abcdefghijkl\")\n;;; (reverse_delete \"\
    abcdedcba\" \"abcdefghijklm\")\n;;; (reverse_delete \"abcdedcba\" \"abcdefghijklmn\"\
    )\n;;; (reverse_delete \"abcdedcba\" \"abcdefghijklmnop\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"abcdefghijklmnopq\")\n;;; (reverse_delete \"abcdedcba\" \"abcdefghijklmnopqr\"\
    )\n;;; (reverse_delete \"abcdedcba\" \"abcdefghijklmnopqrs\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"abcdefghijklmnopqrst\")\n;;; (reverse_delete \"abcdedcba\" \"\
    abcdefghijklmnopqrstu\")\n;;; (reverse_delete \"abcdedcba\" \"abcdefghijklmnopqrstuv\"\
    )\n;;;", "  (let ((result \"\"))\n    (let ((i (length s)))\n      (while (< i\
    \ 0)\n        (let ((j (1 - i)))\n          (set! result (concat result (substring\
    \ s i j))))\n          (set! i (- i 1))))\n    (if (equal? c (substring result\
    \ 0 (length result) - 1))\n      (list result #t)\n      (list result #f)))))\n",
  "  (let ((result (list \"\" #f)))\n    (let ((i 0))\n      (while (< i (string-length\
    \ s))\n        (if (string=? (string-substring s i i) c)\n          (set! result\
    \ (append result (string-substring s i i)))\n          (set! i (string-index-of\
    \ s i)\n            (string-set! i (string-substring s i (string-index-of s i)\
    \ -1))))\n        (set! i (string-index-of s i)\n          (string-set! i (string-substring\
    \ s i (string-index-of s i) -1))))\n      (set! i (string-length s))))\n  result)\n",
  "  (let ((result (list)))\n    (for-each (lambda (x)\n                (if (string=\
    \ x c)\n                    (result '#f)\n                    (set! result (append\
    \ result (list (reverse x)))))))\n    result))\n", "  (let ((result (make-string\
    \ (length s) #f)))\n    (for-each (lambda (i) (string-set! result i (string-ref\
    \ s i)))\n      (range (length c) (- (length c) i)))\n    (string-set! result\
    \ (length s) #t)\n    result))\n", "  (let ((result \"\"))\n    (let ((i (length\
    \ s)))\n      (while (< i 0)\n        (let ((j (1 - i)))\n          (if (string=\
    \ (string-ci (substring s i j)) (string-ci c))\n            (set! result (append\
    \ result (substring s i j))))\n          (set! i (- i 1))))\n      (if (string=\
    \ result (string-ci c))\n        (return (list result #t))\n        (return (list\
    \ result #f))))))\n", "  (let ((result (list \"\" #f)))\n    (for-each (lambda\
    \ (x) (set-car! result (string-append (string-append (cdr result) (list (car x)))\
    \ \"\") #t)) s)\n    (set-cdr! result (reverse result))\n    (if (string=? (cdr\
    \ result) (car result))\n      (set-cdr! result #f)\n      (set-cdr! result #t)))))\n",
  "  (let ((result (make-string (length s) #f)))\n    (for-each\n      (lambda (x)\n\
    \        (string-set! result (string-ref result (string-length result) -1)\n \
    \         (string-set! result (string-ref result 0) x)))\n      (string-copy s)))\n\
    \  (if (string=? result c)\n    (list result #t)\n    (list result #f)))\n\n;;\
    \ Task\n;; Given a string, you have to delete all the characters in the string\
    \ that are not in the alphabet.\n;; Then check if the result string is palindrome.\n\
    ;; A string is called palindrome if it reads the same backward as forward.\n;;\
    \ You should return a list containing the result string and #t/#f for the check.\n\
    ;; Example\n;; >>> (delete_non_alphabet \"abcde\")\n;; (list \"e\" #f)\n;; >>>\
    \ (delete_non_alphabet \"abcdef\")\n;; (list \"f\" #f)\n;; >>> (delete_non_alphabet\
    \ \"abcdedcba\")\n;; (list \"edcba\" #t)", "  (let ((result (make-string (length\
    \ s) #f)))\n    (let ((i 0))\n      (while (< i (length c))\n        (set! result\
    \ (insert result c c i s i)))\n      (set! i (length c)))))\n", "  (let ((result\
    \ (make-string (length s) #f)))\n    (let ((i 0))\n      (while (< i (length c))\n\
    \        (if (string= (string-ci (substring s i i)))\n            (set-ci! result\
    \ i)\n            (set-ci! result (add1 i)))\n          (set-ci! result (add1\
    \ i)))\n        (set-ci! result #t)))))\n", "  (let ((result (make-string (length\
    \ s) '#f)))\n    (let ((i 0))\n      (while (< i (length c))\n        (if (string=\
    \ (string-ci (substring s i i)))\n            (setf result (append result (substring\
    \ s i i)))\n            (setf i (1+ i)))\n        (setf i (1+ i)))\n      result))\n\
    \  result)\n", "  (let ((result (list \"\" #f)))\n    (for-each (lambda (x) (set-car!\
    \ result (string-append (string-append (cdr result) (list (car x))) \"\") (string-append\
    \ (string-append (cdr result) (list (car x))) \"\")))\n      (string-append (string-append\
    \ (cdr result) (list (car x))) \"\")))\n  result)\n", "  (let ((result (list)))\n\
    \    (for-each (lambda (x)\n                (if (eq (string-ref s x) (string-ref\
    \ c x))\n                    (append result (list (string-append (string-delete\
    \ s x) \"\"))))\n                (string-ref s x))\n              c)\n      result))\n",
  "  (let ((result (list)))\n    (for-each (lambda (x)\n                (if (eqv?\
    \ (string-ref s x) (string-ref c x))\n                    (append result (list\
    \ (string-append (string-delete s x) \"\") #t))\n                    (append result\
    \ (list (string-append (string-delete c x) \"\") #f))))\n              s))\n \
    \ result)\n", "  (let ((i (string-index s c)))\n    (if (eqv? (string-ref s i)\
    \ (string-ref c i))\n      (reverse (string-substring s i (string-length s) -1))))\n\
    \  (list (reverse s) (eqv? (reverse s) (reverse c))))\n\n;; Task\n;; We are given\
    \ a string s, you have to delete all the characters in s that are equal to any\
    \ character in c.\n;; Then check if the result string is palindrome.\n;; A string\
    \ is called palindrome if it reads the same backward as forward.\n;; You should\
    \ return a list containing the result string and #t/#f for the check.\n;; Example\n\
    ;; >>> (reverse_delete \"abcde\" \"ae\")\n;; (list \"bcd\" #f)\n;; >>> (reverse_delete\
    \ \"abcdef\" \"b\")\n;; (list \"acdef\" #f)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"ab\")\n;; (list \"cdedc\" #t)", "  (let ((result (make-string (length s) #f)))\n\
    \    (let ((i (0)))\n      (while (< i (length s))\n        (let ((j (i)))\n \
    \         (set! i (i + 1)))\n          (if (equal? (string-ref s i) (string-ref\
    \ c j))\n            (set! result (string-set! result j (string-set! result i\
    \ (string-ref result i))))\n            (set! result (string-set! result i (string-ref\
    \ result i))))))))\n", "  (let ((result (list)))\n    (for-each (lambda (x) (set-car!\
    \ result (string-append (string-append (cdr x) (cdr (cdr x))) (car x))) (set-cdr!\
    \ result (cdr x)))\n      (string-split s \"\")\n      (string-split c \"\")\n\
    \      (string-append (reverse result) \"\")\n      (string-append (reverse result)\
    \ \"\")\n      (string-append (reverse result) \"\")\n      (string-append (reverse\
    \ result) \"\")\n      (string-append (reverse result) \"\")\n      (string-append\
    \ (reverse result) \"\")\n      (string-append (reverse result) \"\")\n      (string-append\
    \ (reverse result) \"\")\n      (string-append (reverse result) \"\")\n      (string-append\
    \ (reverse result) \"\")\n      (string-append (reverse result) \"\")\n      (string-append\
    \ (reverse result) \"\")\n      (string-append (reverse result) \"\")\n      (string-append\
    \ (reverse result) \"\")\n      (string-append (reverse result) \"\")\n      (string-append\
    \ (reverse result) \"\")\n      (string-append (reverse result) \"\")\n      (string-append\
    \ (reverse result) \"\")\n      (string-append (reverse result) \"\")\n      (string-append\
    \ (reverse result) \"\")\n      (string-append (reverse result) \"\")\n      (string-append\
    \ (reverse result) \"\")\n      (string-append (reverse result) \"\")\n      (string-append\
    \ (reverse result) \"\")\n      (string-append (reverse result) \"\")\n      (string-append\
    \ (reverse result) \"\")\n      (string-append (reverse result) \"\")\n      (string-append\
    \ (reverse result) \"\")\n      (string-append (reverse result) \"\")\n      (string-append\
    \ (reverse result) \"\")\n      (string-append (reverse result) \"\")\n      (string-append\
    \ (reverse result) \"\")\n      (string-append (reverse result) \"\")\n      (string-append\
    \ (reverse result) \"\")\n      (string-append (reverse result) \"\")\n      (string-append\
    \ (reverse result) \"\")", "  (let ((result (list)))\n    (for-each (lambda (x)\n\
    \                (if (eq (cdr x) (car x))\n                    (cdr (cdr result))\n\
    \                    (cdr (cdr (cdr result))))\n                (car s))\n   \
    \           (reverse result))\n    (reverse result)))\n\n;; Task\n;; Given a string\
    \ s, you have to delete all the characters in s that are not in the alphabet.\n\
    ;; Then check if the result string is palindrome.\n;; A string is called palindrome\
    \ if it reads the same backward as forward.\n;; You should return a list containing\
    \ the result string and #t/#f for the check.\n;; Example\n;; >>> (delete_non_alphabet\
    \ \"abcde\")\n;; (list \"e\" #f)\n;; >>> (delete_non_alphabet \"abcdef\")\n;;\
    \ (list \"f\" #f)\n;; >>> (delete_non_alphabet \"abcdedcba\")\n;; (list \"edcba\"\
    \ #t)", "  (let ((result \"\"))\n    (let ((i 0))\n      (while (< i (string-length\
    \ s))\n        (if (string= (string-substring s i i) c)\n            (set! result\
    \ (string-append result (string-substring s i i)))\n            (set! i (i + 1)))\n\
    \        (set! i (i + 1)))\n      result))\n)\n\n;;; (reverse_delete \"abcdedcba\"\
    \ \"ab\")\n;;; (reverse_delete \"abcdef\" \"b\")\n;;; (reverse_delete \"abcde\"\
    \ \"ae\")\n;;; (reverse_delete \"abcdef\" \"b\")\n;;; (reverse_delete \"abcdedcba\"\
    \ \"ab\")\n;;; (reverse_delete \"abcdedcba\" \"ab\")\n;;; (reverse_delete \"abcdedcba\"\
    \ \"ab\")\n;;; (reverse_delete \"abcdedcba\" \"ab\")\n;;; (reverse_delete \"abcdedcba\"\
    \ \"ab\")\n;;; (reverse_delete \"abcdedcba\" \"ab\")\n;;; (reverse_delete \"abcdedcba\"\
    \ \"ab\")\n;;; (reverse_delete \"abcdedcba\" \"ab\")\n;;; (reverse_delete \"abcdedcba\"\
    \ \"ab\")\n;;; (reverse_delete \"abcdedcba\" \"ab\")\n;;; (reverse_delete \"abcdedcba\"\
    \ \"ab\")\n;;; (reverse_delete \"abcdedcba\" \"ab\")\n;;; (reverse_delete \"abcdedcba\"\
    \ \"ab\")\n;;; (reverse_delete \"abcdedcba\" \"ab\")\n;;; (reverse_delete \"abcdedcba\"\
    \ \"ab\")\n;;; (reverse_delete \"abcdedcba\" \"ab\")\n;;; (reverse_delete \"abcdedcba\"\
    \ \"ab\")\n;;; (reverse_delete \"abcdedcba\" \"ab\")\n;;; (reverse_delete \"abcdedcba\"\
    \ \"ab\")\n;;; (reverse_delete \"abcdedcba\" \"ab\")\n;;; (reverse_delete \"abcdedcba\"\
    \ \"ab\")\n;;; (reverse_delete \"abcdedcba\" \"ab\")\n;;; (reverse_delete \"",
  "  (let ((result (make-string (length s) #f)))\n    (let ((i (0)))\n      (while\
    \ (< i (length s))\n        (set! result (insert result (substring s i (1+ i))))\n\
    \        (set! i (1+ i)))\n      (if (equal? (reverse result) c)\n          result\n\
    \          (let ((i (0)))\n            (while (< i (length c))\n             \
    \ (set! result (insert result (substring c i (1+ i))))\n              (set! i\
    \ (1+ i)))))))\n  result)\n", "  (let ((result (list)))\n    (for-each (lambda\
    \ (x) (set-car! result (string-append (string-reverse x) (string-reverse c))))\
    \ s)\n    (set-cdr! result #t)))\n", "  (let ((result (make-string (length s)\
    \ #f)))\n    (for-each (lambda (i) (string-set! result i (string-ref s i)))\n\
    \      (range (length c) (- (length c) i)))\n    (if (string=? result s)\n   \
    \   (list result #t)\n      (list result #f)))\n)\n\n;; Test\n;; >>> (reverse_delete\
    \ \"abcdef\" \"b\")\n;; (list \"acdef\" #f)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"ab\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abc\"\
    )\n;; (list \"abcdedcba\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcd\")\n\
    ;; (list \"abcdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcde\")\n\
    ;; (list \"abcdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdef\")\n\
    ;; (list \"abcdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefg\")\n\
    ;; (list \"abcdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefgh\"\
    )\n;; (list \"abcdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefghi\"\
    )\n;; (list \"abcdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefghij\"\
    )\n;; (list \"abcdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefghijk\"\
    )\n;; (list \"abcdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefghijkl\"\
    )\n;; (list \"abcdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefghijklm\"\
    )\n;; (list \"abcdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefghijklmn\"\
    )\n;; (list \"", "  (let ((result (list)))\n    (for-each (lambda (x)\n      \
    \          (if (eq? (string-ref s x) (string-ref c x))\n                    (result\
    \ '())))\n      s)\n    result))\n\n;; Test\n;; >>> (reverse_delete \"abcdef\"\
    \ \"b\")\n;; (list \"acdef\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\"\
    )\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"b\")\n;; (list\
    \ \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"c\")\n;; (list \"dcedc\"\
    \ #f)\n;; >>> (reverse_delete \"abcdedcba\" \"d\")\n;; (list \"ceddc\" #f)\n;;\
    \ >>> (reverse_delete \"abcdedcba\" \"e\")\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete\
    \ \"abcdedcba\" \"f\")\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"g\")\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"h\")\n\
    ;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"i\")\n;; (list\
    \ \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"j\")\n;; (list \"cdedc\"\
    \ #f)\n;; >>> (reverse_delete \"abcdedcba\" \"k\")\n;; (list \"cdedc\" #f)\n;;\
    \ >>> (reverse_delete \"abcdedcba\" \"l\")\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete\
    \ \"abcdedcba\" \"m\")\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"n\")\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"o\")\n\
    ;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abc", "  (let ((result (make-string\
    \ (length s) '#\\\\#)))\n    (let ((i (0)))\n      (while (< i (length c))\n \
    \       (setq result (concat result (substring s i (+ 1 i)))))\n      (setq i\
    \ (length c)))\n    (if (string=? result s)\n      (list result #t)\n      (list\
    \ result #f)))\n)\n\n;;; (reverse_delete \"abcdedcba\" \"ab\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"abc\")\n;;; (reverse_delete \"abcdedcba\" \"abcde\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"abcdef\")\n;;; (reverse_delete \"abcdedcba\" \"abcdefg\")\n\
    ;;; (reverse_delete \"abcdedcba\" \"abcdefgh\")\n;;; (reverse_delete \"abcdedcba\"\
    \ \"abcdefghi\")\n;;; (reverse_delete \"abcdedcba\" \"abcdefghij\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"abcdefghijkl\")\n;;; (reverse_delete \"abcdedcba\" \"abcdefghijklm\"\
    )\n;;; (reverse_delete \"abcdedcba\" \"abcdefghijklmn\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"abcdefghijklmnop\")\n;;; (reverse_delete \"abcdedcba\" \"abcdefghijklmnopq\"\
    )\n;;; (reverse_delete \"abcdedcba\" \"abcdefghijklmnopqr\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"abcdefghijklmnopqrs\")\n;;; (reverse_delete \"abcdedcba\" \"\
    abcdefghijklmnopqrst\")\n;;; (reverse_delete \"abcdedcba\" \"abcdefghijklmnopqrstu\"\
    )\n;;; (reverse_delete \"abcdedcba\" \"abcdefghijklmnopqrstuv\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"abcdefghijklmnopqrstuvw\")\n;;; (reverse_delete \"abcdedcba\"\
    \ \"abcdef", "  (let ((result (list)))\n    (for-each (lambda (x)\n          \
    \      (if (eqv? (string-ref s x) (string-ref c x))\n                    (append\
    \ result (list (string-append (list (string-ref s x)) (list #f)))))\n        \
    \        (string-ref s x)))\n    (reverse result)))\n\n;; Task\n;; Given a string,\
    \ you have to delete all the characters in the string that are not in the alphabet.\n\
    ;; Then check if the result string is palindrome.\n;; A string is called palindrome\
    \ if it reads the same backward as forward.\n;; You should return a list containing\
    \ the result string and #t/#f for the check.\n;; Example\n;; >>> (delete_non_alphabet\
    \ \"abcdefghijklmnopqrstuvwxyz\")\n;; (list \"efghijklmnopqrstuvwxyz\" #f)\n;;\
    \ >>> (delete_non_alphabet \"abcdefghijklmnopqrstuvwxyz1234567890\")\n;; (list\
    \ \"1234567890\" #t)", "  (let ((result (list)))\n    (for-each (lambda (x)\n\
    \                (if (string= x c)\n                    (result '#f)\n       \
    \             (set result (cons (reverse x) result))))\n      s))\n  result)\n\
    \n;; Test\n;; >>> (reverse_delete \"abcdef\" \"b\")\n;; (list \"acdef\" #f)\n\
    ;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete\
    \ \"abcdedcba\" \"abcd\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"abc\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcd\"\
    )\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcd\")\n;;\
    \ (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcd\")\n;; (list\
    \ \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcd\")\n;; (list \"cdedc\"\
    \ #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcd\")\n;; (list \"cdedc\" #t)\n\
    ;; >>> (reverse_delete \"abcdedcba\" \"abcd\")\n;; (list \"cdedc\" #t)\n;; >>>\
    \ (reverse_delete \"abcdedcba\" \"abcd\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete\
    \ \"abcdedcba\" \"abcd\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"abcd\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcd\"\
    )\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcd\")\n;;\
    \ (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcd\")\n;; (list",
  "  (let ((result (make-string (length s) #f)))\n    (let ((i (0)))\n      (while\
    \ (< i (length s))\n        (if (equal? (string-ref s i) (string-ref c i))\n \
    \           (set-string-elt result i (string-set! result i (string-ref s i) #f)))\n\
    \          (set-string-elt result i (string-set! result i (string-ref s i) #t)))\n\
    \        (set-string-elt result i (string-set! result i (string-ref c i) #f)))\n\
    \        (set-string-elt result i (string-set! result i (string-ref c i) #t)))\n\
    \        (set-string-elt result i (string-set! result i (string-ref s i) #f)))\n\
    \        (set-string-elt result i (string-set! result i (string-ref s i) #t)))\n\
    \        (set-string-elt result i (string-set! result i (string-ref c i) #f)))\n\
    \        (set-string-elt result i (string-set! result i (string-ref c i) #t)))\n\
    \        (set-string-elt result i (string-set! result i (string-ref s i) #f)))\n\
    \        (set-string-elt result i (string-set! result i (string-ref s i) #t)))\n\
    \        (set-string-elt result i (string-set! result i (string-ref c i) #f)))\n\
    \        (set-string-elt result i (string-set! result i (string-ref c i) #t)))\n\
    \        (set-string-elt result i (string-set! result i (string-ref s i) #f)))\n\
    \        (set-string-elt result i (string-set! result i (string-ref s i) #t))))\n\
    \    (reverse result)))\n", "  (let ((result (list)))\n    (for-each (lambda (x)\n\
    \                (if (eq (string-ref s x) (string-ref c x))\n                \
    \    (append result (list (string-append (list (string-ref s x)) \"\") #f)))))\n\
    \      s))\n", "  (let ((result (make-string (length s) #f)))\n    (let ((i (0)))\n\
    \      (while (< i (length s))\n        (if (eqv? (string-ref s i) (string-ref\
    \ c i))\n            (set-string-elt result i (string-set! s i \"\"))\n      \
    \      (set-string-elt result i (string-set! s i (string-ref c i))))\n       \
    \   (set-string-elt result i (string-set! s i (string-ref s i))))\n        (set-string-elt\
    \ result i (string-set! s i (string-ref s i))))\n      (string-set! result (string-ref\
    \ result i))))\n)\n\n;; Task\n;; Given a string s, you have to delete all the\
    \ characters in s that are equal to any character in c.\n;; Then check if the\
    \ result string is palindrome.\n;; A string is called palindrome if it reads the\
    \ same backward as forward.\n;; You should return a list containing the result\
    \ string and #t/#f for the check.\n;; Example\n;; >>> (reverse_delete \"abcde\"\
    \ \"ae\")\n;; (list \"bcd\" #f)\n;; >>> (reverse_delete \"abcdef\" \"b\")\n;;\
    \ (list \"acdef\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list\
    \ \"cdedc\" #t)", "  (let ((result (list \"\" #f)))\n    (for-each (lambda (x)\
    \ (set-car! result (string-append (string-append (string-append x (string-append\
    \ c \"\")) \"\") \"\"))) s)\n    (set-cdr! result #t)))\n\n;; Task\n;; Given a\
    \ string s, you have to delete all the characters in s that are not in the alphabet.\n\
    ;; Then check if the result string is palindrome.\n;; A string is called palindrome\
    \ if it reads the same backward as forward.\n;; You should return a list containing\
    \ the result string and #t/#f for the check.\n;; Example\n;; >>> (delete_non_alphabet\
    \ \"abcde\")\n;; (list \"e\" #f)\n;; >>> (delete_non_alphabet \"abcdef\")\n;;\
    \ (list \"f\" #f)\n;; >>> (delete_non_alphabet \"abcdedcba\")\n;; (list \"edcba\"\
    \ #t)", "  (let ((i (string-index s c)))\n    (if (eqv? (string-ref s i) (string-ref\
    \ c i))\n      (reverse (string-substring s i (string-length s) -1))\n      (string-append\
    \ (reverse (string-substring s i (string-length s) -1)) (string-substring s i\
    \ (string-length s) -1))))\n", "  (let ((result (make-string (length s) #f)))\n\
    \    (let ((i 0))\n      (while (< i (length c))\n        (if (equal? (string-ref\
    \ s (modulo (length s) i)) (string-ref c (modulo (length c) i)))\n          (set-string-element!\
    \ result i (string-ref s (modulo (length s) i)))\n          (set-string-element!\
    \ result (modulo (length result) i) #f)\n          (set-string-element! result\
    \ (modulo (length result) i) #t)\n          (set-string-element! result (modulo\
    \ (length result) i) #f)\n          (set-string-element! result (modulo (length\
    \ result) i) #t)\n          (set-string-element! result (modulo (length result)\
    \ i) #f)\n          (set-string-element! result (modulo (length result) i) #t)\n\
    \          (set-string-element! result (modulo (length result) i) #f)\n      \
    \    (set-string-element! result (modulo (length result) i) #t)\n          (set-string-element!\
    \ result (modulo (length result) i) #f)\n          (set-string-element! result\
    \ (modulo (length result) i) #t)\n          (set-string-element! result (modulo\
    \ (length result) i) #f)\n          (set-string-element! result (modulo (length\
    \ result) i) #t)\n          (set-string-element! result (modulo (length result)\
    \ i) #f)\n          (set-string-element! result (modulo (length result) i) #t)\n\
    \          (set-string-element! result (modulo (length result) i) #f)\n      \
    \    (set-string-element! result (modulo (length result) i) #t)\n          (set-string-element!\
    \ result (modulo (length result) i) #f)\n          (set-string-element! result\
    \ (modulo (length result) i) #t)\n          (set-string-element! result (modulo\
    \ (length result) i) #f)", "  (let ((result (list)))\n    (let ((i 0))\n     \
    \ (while (< i (string-length s))\n        (if (string= (string-substring s i i)\
    \ c)\n          (set! result (append result (string-substring s i i)))\n     \
    \     (set! i (1+ i)))\n        (set! i (1+ i)))\n      result)\n    (if (string=\
    \ (reverse result) (string-substring s (string-length s) (string-length s)))\n\
    \      (list result #t)\n      (list result #f))\n  )\n)\n\n;; Test\n;; >>> (reverse_delete\
    \ \"abcde\" \"ae\")\n;; (list \"bcd\" #f)\n;; >>> (reverse_delete \"abcdef\" \"\
    b\")\n;; (list \"acdef\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;;\
    \ (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abc\")\n;; (list\
    \ \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcd\")\n;; (list \"cdedc\"\
    \ #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcde\")\n;; (list \"cdedc\" #t)\n\
    ;; >>> (reverse_delete \"abcdedcba\" \"abcdef\")\n;; (list \"cdedc\" #t)\n;; >>>\
    \ (reverse_delete \"abcdedcba\" \"abcdefg\")\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete\
    \ \"abcdedcba\" \"abcdefgh\")\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete\
    \ \"abcdedcba\" \"abcdefghi\")\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete\
    \ \"abcdedcba\" \"abcdefghij\")\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete\
    \ \"abcdedcba\" \"abcdefghijkl\")\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete\
    \ \"abcdedcba\" \"abcdefghijklm\")", "  (let ((result (list \"\" #f)))\n    (let\
    \ ((i 0))\n      (while (< i (string-length s))\n        (if (string= (string-substring\
    \ s i i) c)\n            (set result (append result (string-substring s i i)))\n\
    \            (set i (string-index-of c s i)\n              (if (< i (string-length\
    \ s))\n                (set i (string-length s)))))))\n    result))\n", "  (let\
    \ ((result (list)))\n    (while (string-ci=? c s)\n      (string-set! result (list\
    \ (list (string-set! result (list s)) #f)) #t))\n    result))\n\n;;; (reverse_delete\
    \ \"abcdedcba\" \"ab\")\n;;; (reverse_delete \"abcdef\" \"b\")\n;;; (reverse_delete\
    \ \"abcde\" \"ae\")\n\n;;; (reverse_delete \"abcdedcba\" \"ab\")\n;;; (reverse_delete\
    \ \"abcdef\" \"b\")\n;;; (reverse_delete \"abcde\" \"ae\")\n\n;;; (reverse_delete\
    \ \"abcdedcba\" \"ab\")\n;;; (reverse_delete \"abcdef\" \"b\")\n;;; (reverse_delete\
    \ \"abcde\" \"ae\")\n\n;;; (reverse_delete \"abcdedcba\" \"ab\")\n;;; (reverse_delete\
    \ \"abcdef\" \"b\")\n;;; (reverse_delete \"abcde\" \"ae\")\n\n;;; (reverse_delete\
    \ \"abcdedcba\" \"ab\")\n;;; (reverse_delete \"abcdef\" \"b\")\n;;; (reverse_delete\
    \ \"abcde\" \"ae\")\n\n;;; (reverse_delete \"abcdedcba\" \"ab\")\n;;; (reverse_delete\
    \ \"abcdef\" \"b\")\n;;; (reverse_delete \"abcde\" \"ae\")\n\n;;; (reverse_delete\
    \ \"abcdedcba\" \"ab\")\n;;; (reverse_delete \"abcdef\" \"b\")\n;;; (reverse_delete\
    \ \"abcde\" \"ae\")\n\n;;; (reverse_delete \"abcdedcba\" \"ab\")\n;;; (reverse_delete\
    \ \"abcdef\" \"b\")\n;;; (reverse_delete \"abcde\" \"ae\")\n\n;;; (reverse_delete\
    \ \"abcdedcba\" \"ab\")\n;;; (reverse_delete \"abcdef\" \"b\")\n;;; (reverse_delete\
    \ \"abcde\" \"ae\")\n\n;;; (reverse_delete \"abcdedcba\" \"ab\")\n;;; (reverse_delete\
    \ \"abcdef\" \"b\")\n;;; (reverse_delete \"abcde\" \"ae\")\n\n;;; (reverse_delete\
    \ \"", "  (let ((result (list \"\" #f)))\n    (let ((i 0))\n      (while (< i\
    \ (string-length s))\n        (if (string=? (string-substring s i i) c)\n    \
    \      (setf result (list (string-append result (string-substring s i i)) #t))\n\
    \          (setf i (1+ i)))\n        (setf i (1+ i)))\n      result))\n  result)\n",
  "  (let ((result \"\"))\n    (let ((i 0))\n      (while (< i (string-length s))\n\
    \        (if (string= c (string-ref s i))\n          (set! result (append result\
    \ (string-copy (string-substring s i (1+ i))))))\n        (set! i (1+ i)))\n \
    \     result))\n  result)\n", "  (let ((result (list)))\n    (for-each (lambda\
    \ (x)\n                (if (string= x c)\n                    (result '#f)\n \
    \                   (set! result (append result (list (reverse x)))))))\n    result))\n",
  "  (let ((result (make-string (length s) '#\\0)))\n    (let ((i 0))\n      (while\
    \ (< i (length c))\n        (set! result (string-set! result (string-ref result\
    \ i) #\\0)\n          (set! i (string-index-of result (string-ref c i))))\n  \
    \      (set! i (string-index-of result (string-ref s i))))\n      (string-set!\
    \ result (string-ref result i) #\\0)\n      (string-set! result (string-ref result\
    \ (length result) -1) #\\0)\n      (string-set! result (string-ref result 0) #\\\
    0)\n      (string-set! result (string-ref result (length result) 0) #\\0)\n  \
    \    (string-set! result (string-ref result (length result) -1) #\\0)\n      (string-set!\
    \ result (string-ref result (length result) -2) #\\0)\n      (string-set! result\
    \ (string-ref result (length result) -3) #\\0)\n      (string-set! result (string-ref\
    \ result (length result) -4) #\\0)\n      (string-set! result (string-ref result\
    \ (length result) -5) #\\0)\n      (string-set! result (string-ref result (length\
    \ result) -6) #\\0)\n      (string-set! result (string-ref result (length result)\
    \ -7) #\\0)\n      (string-set! result (string-ref result (length result) -8)\
    \ #\\0)\n      (string-set! result (string-ref result (length result) -9) #\\\
    0)\n      (string-set! result (string-ref result (length result) -10) #\\0)\n\
    \      (string-set! result (string-ref result (length result) -11) #\\0)\n   \
    \   (string-set! result (string-ref result (length result) -12) #\\0)\n      (string-set!\
    \ result (string-ref result (length result) -13) #\\0)\n      (string-set! result\
    \ (string-ref result (length result", "  (let ((result \"\"))\n    (for-each (lambda\
    \ (x) (setq result (concat result (delete x s)))) c)\n    (if (string=? result\
    \ s)\n      (list result #t)\n      (list result #f)))\n)\n\n;;; (reverse_delete\
    \ \"abcdedcba\" \"ab\")\n;;; (reverse_delete \"abcdedcba\" \"b\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"c\")\n;;; (reverse_delete \"abcdedcba\" \"d\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"e\")\n;;; (reverse_delete \"abcdedcba\" \"f\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"g\")\n;;; (reverse_delete \"abcdedcba\" \"h\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"i\")\n;;; (reverse_delete \"abcdedcba\" \"j\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"k\")\n;;; (reverse_delete \"abcdedcba\" \"l\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"m\")\n;;; (reverse_delete \"abcdedcba\" \"n\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"o\")\n;;; (reverse_delete \"abcdedcba\" \"p\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"q\")\n;;; (reverse_delete \"abcdedcba\" \"r\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"s\")\n;;; (reverse_delete \"abcdedcba\" \"t\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"u\")\n;;; (reverse_delete \"abcdedcba\" \"v\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"w\")\n;;; (reverse_delete \"abcdedcba\" \"x\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"y\")\n;;; (reverse_delete \"abcdedcba\" \"z\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"a\")\n;;; (reverse_delete \"abcdedcba\" \"b\")\n", "  (let ((result\
    \ (make-string (length s) '#\\0)))\n    (let ((i 0))\n      (while (< i (length\
    \ c))\n        (set! result (string-set! result (string-ref result i) #\\0)\n\
    \          (set! i (string-index-of result (string-ref c i)))\n          (set!\
    \ i (string-index-of result (string-ref c i))))\n        (set! i (string-index-of\
    \ result (string-ref c i))))\n      (reverse result)\n      (if (string=? result\
    \ s)\n        #t\n        (list result #f))))\n", "  (let ((result (list \"\"\
    \ #f)))\n    (let ((i 0))\n      (while (< i (string-length s))\n        (if (string=\
    \ (string-substring s i i) c)\n            (set result (append result (string-substring\
    \ s i i)))\n            (set i (string-index-of s i c)\n              (if (< i\
    \ (string-length s))\n                (set i (string-length s)))))))\n    result))\n",
  "  (let ((result (list)))\n    (for-each (lambda (x)\n                (if (string=\
    \ x c)\n                    (result '#f)\n                    (set result (append\
    \ result (list (reverse x)))))))\n    result))\n\n;; Test\n;; >>> (reverse_delete\
    \ \"abcde\" \"ae\")\n;; (list \"bcd\" #f)\n;; >>> (reverse_delete \"abcdef\" \"\
    b\")\n;; (list \"acdef\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;;\
    \ (list \"cdedc\" #t)\n\n;; Answer\n;; >>> (reverse_delete \"abcde\" \"ae\")\n\
    ;; (list \"bcd\" #f)\n;; >>> (reverse_delete \"abcdef\" \"b\")\n;; (list \"acdef\"\
    \ #f)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list \"cdedc\" #t)\n\n\
    ;; Answer\n;; >>> (reverse_delete \"abcde\" \"ae\")\n;; (list \"bcd\" #f)\n;;\
    \ >>> (reverse_delete \"abcdef\" \"b\")\n;; (list \"acdef\" #f)\n;; >>> (reverse_delete\
    \ \"abcdedcba\" \"ab\")\n;; (list \"cdedc\" #t)\n\n;; Answer\n;; >>> (reverse_delete\
    \ \"abcde\" \"ae\")\n;; (list \"bcd\" #f)\n;; >>> (reverse_delete \"abcdef\" \"\
    b\")\n;; (list \"acdef\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;;\
    \ (list \"cdedc\" #t)\n\n;; Answer\n;; >>> (reverse_delete \"abcde\" \"ae\")\n\
    ;; (list \"bcd\" #f)\n;; >>> (reverse_delete \"abcdef\" \"b\")\n;; (list \"acdef\"\
    \ #f)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list \"cdedc\" #t)\n\n\
    ;; Answer\n;; >>> (reverse_delete \"abcde\" \"ae\")\n;; (list \"bcd\" #f)\n;;\
    \ >>> (reverse_delete \"abcdef\" \"b\")\n;; (", "  (let ((result (list \"\" #f)))\n\
    \    (let ((i 0))\n      (while (< i (string-length s))\n        (if (string=\
    \ (string-substring s i i) c)\n          (setf result (append result (string-substring\
    \ s (1+ i) (- (1+ i) (string-length s))))))\n        (setf i (1+ i)))\n      result))\n\
    )\n", "  (let ((result \"\"))\n    (let ((i (length s)))\n      (while (< i 0)\n\
    \        (let ((j (1- i)))\n          (set! result (concat result (substring s\
    \ i j))))\n          (set! i (- i 1))))\n    (if (string=? result s)\n      (list\
    \ result #t)\n      (list result #f)))))\n\n;;; (reverse_delete \"abcdedcba\"\
    \ \"ab\")\n;;; (reverse_delete \"abcdedcba\" \"abc\")\n;;; (reverse_delete \"\
    abcdedcba\" \"abcde\")\n;;; (reverse_delete \"abcdedcba\" \"abcdef\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"abcdefg\")\n;;; (reverse_delete \"abcdedcba\" \"abcdefgh\")\n\
    ;;; (reverse_delete \"abcdedcba\" \"abcdefghi\")\n;;; (reverse_delete \"abcdedcba\"\
    \ \"abcdefghij\")\n;;; (reverse_delete \"abcdedcba\" \"abcdefghijk\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"abcdefghijkl\")\n;;; (reverse_delete \"abcdedcba\" \"abcdefghijklm\"\
    )\n;;; (reverse_delete \"abcdedcba\" \"abcdefghijklmn\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"abcdefghijklmnop\")\n;;; (reverse_delete \"abcdedcba\" \"abcdefghijklmnopq\"\
    )\n;;; (reverse_delete \"abcdedcba\" \"abcdefghijklmnopqr\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"abcdefghijklmnopqrs\")\n;;; (reverse_delete \"abcdedcba\" \"\
    abcdefghijklmnopqrst\")\n;;; (reverse_delete \"abcdedcba\" \"abcdefghijklmnopqrstu\"\
    )\n;;; (reverse_delete \"abcdedcba\" \"abcdefghijklmnopqrstuv\")\n;;; (reverse_delete\
    \ \"abcdedcba\" \"abcdefghijklmnopqrstuvw\")\n;;", "  (let ((result (list \"\"\
    \ #f)))\n    (for-each (lambda (x) (set-car! result (string-append (string-append\
    \ (string-append x (string-ref s (string-length s) - 1)) \"\") \"\") #t)) c)\n\
    \      (set-cdr! result #f)))\n\n;; Test\n;; >>> (reverse_delete \"abcde\" \"\
    ae\")\n;; (list \"bcd\" #f)\n;; >>> (reverse_delete \"abcdef\" \"b\")\n;; (list\
    \ \"acdef\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list \"cdedc\"\
    \ #t)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list \"cdedc\" #t)\n\
    ;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete\
    \ \"abcdedcba\" \"ab\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"ab\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\"\
    )\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list\
    \ \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list \"cdedc\"\
    \ #t)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list \"cdedc\" #t)\n\
    ;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete\
    \ \"abcdedcba\" \"ab\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"ab\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\"\
    )\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;;",
  "  (let ((result (list)))\n    (for-each (lambda (x)\n                (if (eq (string-ref\
    \ s x) (string-ref c x))\n                    (append result (list (string-append\
    \ (list (string-ref s x) #\\space) (string-ref c x))))))\n               s)\n\
    \    (if (empty? result) #f\n      (reverse result)\n      (reverse result)\n\
    \      (list (string-join \"\") result))))\n", "  (let ((result (list \"\" #f)))\n\
    \    (let ((i 0))\n      (while (< i (string-length s))\n        (if (string=\
    \ (string-substring s i i) c)\n          (set! result (append result (string-substring\
    \ s i i)))\n          (set! i (string-next-index s i)))\n        (set! i (string-next-index\
    \ s i))))\n    result))\n", "  (let ((result (list)))\n    (for-each (lambda (x)\
    \ (set-car! result (delete x s))) c)\n    (if (equal? (reverse result) result)\n\
    \      (set-car! result #t)\n      (set-car! result #f))))\n", "  (let ((result\
    \ (list)))\n    (for-each (lambda (x)\n                (if (eq? (string-ref s\
    \ x) (string-ref c x))\n                    (list (append result (list (string-append\
    \ (list (string-ref s x) #\\space) (string-ref c x))))))\n                (string-ref\
    \ s x)))\n      result)\n  )\n\n;; Task\n;; Given a string, you have to reverse\
    \ the string and then delete all the characters that are not in the alphabet.\n\
    ;; Then check if the result string is palindrome.\n;; A string is called palindrome\
    \ if it reads the same backward as forward.\n;; You should return a list containing\
    \ the result string and #t/#f for the check.\n;; Example\n;; >>> (reverse_delete\
    \ \"abcde\")\n;; (list \"edcba\" #f)\n;; >>> (reverse_delete \"abcdef\")\n;; (list\
    \ \"fedcb\" #f)\n;; >>> (reverse_delete \"abcdedcba\")\n;; (list \"edcba\" #t)",
  "  (let ((result (make-string (length s) #f)))\n    (let ((i 0))\n      (while (<\
    \ i (length c))\n        (if (equal? (string-ref s (modulo i (length c))) (string-ref\
    \ c c))\n            (set-string-element! result i (modulo i (length c)))\n  \
    \          (set-string-element! result i (modulo i (length c)))\n            (set-string-element!\
    \ result i (modulo i (length c)))\n            (set-string-element! result i (modulo\
    \ i (length c)))\n            (set-string-element! result i (modulo i (length\
    \ c)))\n            (set-string-element! result i (modulo i (length c)))\n   \
    \         (set-string-element! result i (modulo i (length c)))\n            (set-string-element!\
    \ result i (modulo i (length c)))\n            (set-string-element! result i (modulo\
    \ i (length c)))\n            (set-string-element! result i (modulo i (length\
    \ c)))\n            (set-string-element! result i (modulo i (length c)))\n   \
    \         (set-string-element! result i (modulo i (length c)))\n            (set-string-element!\
    \ result i (modulo i (length c)))\n            (set-string-element! result i (modulo\
    \ i (length c)))\n            (set-string-element! result i (modulo i (length\
    \ c)))\n            (set-string-element! result i (modulo i (length c)))\n   \
    \         (set-string-element! result i (modulo i (length c)))\n            (set-string-element!\
    \ result i (modulo i (length c)))\n            (set-string-element! result i (modulo\
    \ i (length c)))\n            (set-string-element! result i (modulo i (length\
    \ c)))\n            (set-string-element! result i (modulo i (length c)))\n   \
    \         (set-string-element! result i (modulo i (length c)))\n            (set-string-element!\
    \ result i (modulo i (length c)))\n            (set-string-element! result i (modulo",
  "  (let ((result \"\"))\n    (for-each (lambda (x) (setq result (concat result (delete\
    \ x s)))) c)\n    (if (string=? result s)\n      (list result #t)\n      (list\
    \ result #f)))\n)\n\n;; Test\n;; >>> (reverse_delete \"abcdef\" \"b\")\n;; (list\
    \ \"acdef\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list \"cdedc\"\
    \ #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcd\")\n;; (list \"cdedc\" #t)\n\
    ;; >>> (reverse_delete \"abcdedcba\" \"abcd\")\n;; (list \"cdedc\" #t)\n;; >>>\
    \ (reverse_delete \"abcdedcba\" \"abcde\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete\
    \ \"abcdedcba\" \"abcde\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"\
    abcdedcba\" \"abcde\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"abcde\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"\
    abcde\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcde\"\
    )\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcde\")\n;;\
    \ (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcde\")\n;; (list\
    \ \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcde\")\n;; (list \"\
    cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcde\")\n;; (list \"cdedc\"\
    \ #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcde\")\n;; (list \"cdedc\" #t)\n\
    ;; >>> (reverse_delete \"abcdedcba\" \"abcde", "  (let ((result \"\"))\n    (for-each\
    \ (lambda (x) (string-set! result (string-append result x))) s)\n    (if (string=?\
    \ result c)\n      (list result #t)\n      (list result #f)))\n)\n\n;; Test\n\
    ;; >>> (reverse_delete \"abcde\" \"ae\")\n;; (list \"bcd\" #f)\n;; >>> (reverse_delete\
    \ \"abcdef\" \"b\")\n;; (list \"acdef\" #f)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"ab\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abc\"\
    )\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcd\")\n;;\
    \ (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcde\")\n;; (list\
    \ \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdef\")\n;; (list \"\
    cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefg\")\n;; (list \"cdedc\"\
    \ #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefgh\")\n;; (list \"cdedc\"\
    \ #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefghi\")\n;; (list \"cdedc\"\
    \ #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefghij\")\n;; (list \"cdedc\"\
    \ #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefghijkl\")\n;; (list \"cdedc\"\
    \ #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefghijklm\")\n;; (list \"cdedc\"\
    \ #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefghijklmn\")\n;; (list \"cdedc\"\
    \ #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefghijklmnop\")\n;; (list \"\
    cdedc\" #f", "  (let ((result (list)))\n    (for-each (lambda (x)\n          \
    \      (if (eq (string-ref s x) (string-ref c x))\n                    (append\
    \ result (list (string-append (string-delete s x) \"\") #f))\n               \
    \     (append result (list (string-append (string-delete c x) \"\") #t))))\n \
    \               (string-ref s)))\n  result)\n", "  (let ((result (list)))\n  \
    \  (let ((i 0))\n      (while (< i (string-length s))\n        (if (string= (string-ref\
    \ s i) (string-ref c i))\n          (setf result (append result (list (string-substring\
    \ s i (1+ i)))))\n          (setf i (1+ i)))\n        (setf i (1+ i)))\n     \
    \ result)\n    (if (null? result) #f\n      (if (string= (string-substring s (1+\
    \ (string-length s))) (string-substring c (1+ (string-length c))))\n        (setf\
    \ result (list (string-concatenate result (list (string-substring s (1+ (string-length\
    \ s))) (string-substring c (1+ (string-length c)))))))\n        (setf result (list\
    \ (string-concatenate result (list (string-substring s (1+ (string-length s)))\
    \ (string-substring c (1+ (string-length c)))))))\n        (setf result (list\
    \ (string-concatenate result (list (string-substring s (1+ (string-length s)))\
    \ (string-substring c (1+ (string-length c)))))))\n        (setf result (list\
    \ (string-concatenate result (list (string-substring s (1+ (string-length s)))\
    \ (string-substring c (1+ (string-length c)))))))\n        (setf result (list\
    \ (string-concatenate result (list (string-substring s (1+ (string-length s)))\
    \ (string-substring c (1+ (string-length c)))))))\n        (setf result (list\
    \ (string-concatenate result (list (string-substring s (1+ (string-length s)))\
    \ (string-substring c (1+ (string-length c)))))))\n        (setf result (list\
    \ (string-concatenate result (list (string-substring s (1+ (string-length s)))\
    \ (string-substring c (1+ (string-length c)))))))\n        (setf result (list\
    \ (string-concatenate result (list (string-sub", "  (let ((result (make-string\
    \ (length s) #f)))\n    (let ((i 0))\n      (while (< i (length c))\n        (set!\
    \ result (insert result c c i))\n        (set! i (1+ i))))\n    (reverse result)\n\
    \    (if (string=? result s)\n      #t\n      #f))\n)\n\n;; Test\n;; >>> (reverse_delete\
    \ \"abcde\" \"ae\")\n;; (list \"bcd\" #f)\n;; >>> (reverse_delete \"abcdef\" \"\
    b\")\n;; (list \"acdef\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;;\
    \ (list \"cdedc\" #t)\n\n;; Answer\n;; >>> (reverse_delete \"abcde\" \"ae\")\n\
    ;; (list \"bcd\" #f)\n;; >>> (reverse_delete \"abcdef\" \"b\")\n;; (list \"acdef\"\
    \ #f)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list \"cdedc\" #t)\n\n\
    ;; Answer\n;; >>> (reverse_delete \"abcde\" \"ae\")\n;; (list \"bcd\" #f)\n;;\
    \ >>> (reverse_delete \"abcdef\" \"b\")\n;; (list \"acdef\" #f)\n;; >>> (reverse_delete\
    \ \"abcdedcba\" \"ab\")\n;; (list \"cdedc\" #t)\n\n;; Answer\n;; >>> (reverse_delete\
    \ \"abcde\" \"ae\")\n;; (list \"bcd\" #f)\n;; >>> (reverse_delete \"abcdef\" \"\
    b\")\n;; (list \"acdef\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;;\
    \ (list \"cdedc\" #t)\n\n;; Answer\n;; >>> (reverse_delete \"abcde\" \"ae\")\n\
    ;; (list \"bcd\" #f)\n;; >>> (reverse_delete \"abcdef\" \"b\")\n;; (list \"acdef\"\
    \ #f)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list \"cdedc\" #t)\n\n\
    ;; Answer\n;; >>> (reverse_delete \"abcde\" \"", "  (let ((result (make-string\
    \ (length s) '#f)))\n    (let ((i (0)))\n      (while (< i (length c))\n     \
    \   (if (eqv? (aref s i) (aref c i))\n            (setf (aref result i) #t)\n\
    \            (setf (aref result i) #f)\n            (setf i (1+ i)))\n       \
    \ (setf i (1+ i)))\n      (setf (aref result i) #t))\n    result))\n\n;; Test\n\
    ;; >>> (reverse_delete \"abcde\" \"ae\")\n;; (list \"bcd\" #f)\n;; >>> (reverse_delete\
    \ \"abcdef\" \"b\")\n;; (list \"acdef\" #f)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"ab\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abc\"\
    )\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcd\")\n;;\
    \ (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcde\")\n;; (list\
    \ \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdef\")\n;; (list \"\
    cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefg\")\n;; (list \"cdedc\"\
    \ #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefgh\")\n;; (list \"cdedc\"\
    \ #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefghi\")\n;; (list \"cdedc\"\
    \ #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefghij\")\n;; (list \"cdedc\"\
    \ #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefghijk\")\n;; (list \"cdedc\"\
    \ #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefghijkl\")\n;; (list \"cdedc\"\
    \ #t)\n;; >>> (reverse_", "  (let ((result (list)))\n    (for-each (lambda (x)\n\
    \                (if (equal? (string-ref s x) (string-ref c x))\n            \
    \        (append result (list (string-append (string-delete s x) \"\") #t))\n\
    \                    (append result (list (string-append (string-delete c x) \"\
    \") #f))))\n               s)\n    (reverse result)))\n", "  (let ((result (make-string\
    \ (length s) #f)))\n    (for-each (lambda (x) (string-set! result x #f)) s)\n\
    \    (for-each (lambda (x) (string-set! result x #t)) c)\n    (string-append result\
    \ result)))\n", "  (let ((result \"\"))\n    (for-each (lambda (x) (set! result\
    \ (concat result (substring s (string-length s) -1))))\n      (string-set! s (string-length\
    \ s) -1)\n      (string-set! s 0 (string-length c) -1)\n      (if (string=? result\
    \ c)\n        (return (list result #t))\n      )\n    )\n    (return (list result\
    \ #f))\n  )\n)\n", "  (let ((result (list \"\" #f)))\n    (for-each (lambda (x)\
    \ (set-car! result (string-append (string-append (cdr result) (list (car x)))\
    \ \"\") #t)) s)\n    (set-cdr! result (reverse result))))\n\n;; Task\n;; Given\
    \ a string, you have to reverse the string and then delete all the characters\
    \ that are not in the alphabet.\n;; The alphabet is defined by the string alphabet.\n\
    ;; The string alphabet is a string containing all the characters that are allowed\
    \ in the string.\n;; The string alphabet is defined by the function alphabet.\n\
    ;; The alphabet function takes a string as input and returns a string containing\
    \ all the characters that are allowed in the string.\n;; The alphabet function\
    \ should return the empty string for the empty string.\n;; The string alphabet\
    \ should be a subset of the alphabet function.\n;; The alphabet function should\
    \ return the empty string for any string that is not a string.\n;; The alphabet\
    \ function should return the empty string for the empty string.\n;; The string\
    \ alphabet should be a subset of the alphabet function.\n;; The alphabet function\
    \ should return the empty string for any string that is not a string.\n;; The\
    \ alphabet function should return the empty string for the empty string.\n;; The\
    \ string alphabet should be a subset of the alphabet function.\n;; The alphabet\
    \ function should return the empty string for any string that is not a string.\n\
    ;; The alphabet function should return the empty string for the empty string.\n\
    ;; The string alphabet should be a subset of the alphabet function.\n;; The alphabet\
    \ function should return the empty string for any string that is not a string.\n\
    ;; The alphabet function should return the empty string for the empty string.\n\
    ;; The string alphabet should be a subset of the alphabet function.\n;; The alphabet\
    \ function should return the empty string for any string that is not a string.\n\
    ;; The alphabet function should return the empty string for the empty string.\n\
    ;; The string alphabet should be a subset of the alphabet function.\n;; The alphabet\
    \ function should return the empty string for any string that is not a string.\n\
    ;; The alphabet function should return the empty string for the empty string.\n\
    ;; The string alphabet should be a subset of the alphabet function.\n;; The alphabet\
    \ function should return the empty string for any string that is not a string.\n\
    ;; The alphabet function should return the empty string for the empty", "  (let\
    \ ((result (make-string (length s) #f)))\n    (let ((i 0))\n      (while (< i\
    \ (length c))\n        (set! result (insert result c c i s i))\n        (set!\
    \ i (1+ i)))\n      (reverse result)))))\n", "  (let ((result \"\"))\n    (for-each\
    \ (lambda (x) (setq result (concat result (delete x s)))) c)\n    (if (string=?\
    \ result s)\n      (list result #t)\n      (list result #f)))\n)\n\n;; Test\n\
    ;; >>> (reverse_delete \"abcdef\" \"b\")\n;; (list \"acdef\" #f)\n;; >>> (reverse_delete\
    \ \"abcdedcba\" \"ab\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"c\")\n;; (list \"abcdedcba\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"\
    d\")\n;; (list \"abcdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"e\")\n\
    ;; (list \"abcdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"a\")\n;; (list\
    \ \"bcdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"a\")\n;; (list \"bcdedcba\"\
    \ #f)\n;; >>> (reverse_delete \"abcdedcba\" \"b\")\n;; (list \"acdedcba\" #f)\n\
    ;; >>> (reverse_delete \"abcdedcba\" \"c\")\n;; (list \"abcdedcba\" #f)\n;; >>>\
    \ (reverse_delete \"abcdedcba\" \"d\")\n;; (list \"abcdedcba\" #f)\n;; >>> (reverse_delete\
    \ \"abcdedcba\" \"e\")\n;; (list \"abcdedcba\" #f)\n;; >>> (reverse_delete \"\
    abcdedcba\" \"a\")\n;; (list \"bcdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"b\")\n;; (list \"acdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"c\"\
    )\n;; (list \"abcdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"d\")\n;;\
    \ (list \"abcdedcba\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"e\")", "  (let\
    \ ((result \"\"))\n    (let ((i (length s)))\n      (while (< i 0)\n        (let\
    \ ((j (1- i)))\n          (set! result (concat result (substring s i j))))\n \
    \         (set! i (- i 1)))\n        (set! i (- i 1)))\n      (set! result (concat\
    \ result (substring s i))))\n    (if (string=? result c)\n      (list result #t)\n\
    \      (list result #f)))\n)\n\n;; Test\n;; >>> (reverse_delete \"abcde\" \"ae\"\
    )\n;; (list \"bcd\" #f)\n;; >>> (reverse_delete \"abcdef\" \"b\")\n;; (list \"\
    acdef\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list \"cdedc\"\
    \ #t)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list \"cdedc\" #t)\n\
    ;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete\
    \ \"abcdedcba\" \"ab\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"ab\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\"\
    )\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list\
    \ \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list \"cdedc\"\
    \ #t)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list \"cdedc\" #t)\n\
    ;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete\
    \ \"abcdedcba\" \"ab\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"ab\")\n;; (list \"cdedc\" #t)\n;; >>> (", "  (let ((result (list)))\n    (for-each\
    \ (lambda (x)\n                (if (string= x c)\n                    (result\
    \ '#f)\n                    (set result (append result (list (reverse x)))))))\n\
    \    result))\n", "  (let ((result (list)))\n    (for-each (lambda (x)\n     \
    \           (if (string= x c)\n                    (result '#f)\n            \
    \        (set-car! result (string-append (reverse x) x))))\n               s)\n\
    \    (set-cdr! result '#t)))\n\n;; Task\n;; Given a string, you have to delete\
    \ all the characters in the string that are not in the alphabet.\n;; Then check\
    \ if the result string is palindrome.\n;; A string is called palindrome if it\
    \ reads the same backward as forward.\n;; You should return a list containing\
    \ the result string and #t/#f for the check.\n;; Example\n;; >>> (delete_non_alphabet\
    \ \"abcde\")\n;; (list \"bcd\" #f)\n;; >>> (delete_non_alphabet \"abcdef\")\n\
    ;; (list \"acdef\" #f)\n;; >>> (delete_non_alphabet \"abcdedcba\")\n;; (list \"\
    cdedc\" #t)", "  (let ((i (string-index s c)))\n    (if (eqv? (string-ref s i)\
    \ (string-ref c i))\n      (reverse (string-substring s i (string-length s) -1))))\n\
    )\n", "  (let ((result (make-string (length s) #f)))\n    (let ((i 0))\n     \
    \ (while (< i (length c))\n        (set! result (insert result c c i))\n     \
    \   (set! i (1+ i)))\n      (reverse result)\n      (if (equal? result s)\n  \
    \      #t\n        #f)))\n  )\n)\n\n;; Test\n;; >>> (reverse_delete \"abcde\"\
    \ \"ae\")\n;; (list \"bcd\" #f)\n;; >>> (reverse_delete \"abcdef\" \"b\")\n;;\
    \ (list \"acdef\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list\
    \ \"cdedc\" #t)\n;;; 0", "  (let ((result \"\"))\n    (for-each (lambda (x) (string-set!\
    \ result (string-append result x))) s)\n    (if (string=? result c)\n      (list\
    \ result #t)\n      (list result #f)))\n)\n", "  (let ((result \"\"))\n    (let\
    \ ((i (length s)))\n      (while (< i 0)\n        (let ((j (1 - i)))\n       \
    \   (setq result (concat result (substring s i j))))\n        (setq i (- i 1))))\n\
    \    (if (equal? c (reverse result))\n      (list result #t)\n      (list result\
    \ #f)))))\n\n;; Task\n;; Given a string s, you have to delete all the characters\
    \ in s that are equal to any character in c.\n;; Then check if the result string\
    \ is palindrome.\n;; A string is called palindrome if it reads the same backward\
    \ as forward.\n;; You should return a list containing the result string and #t/#f\
    \ for the check.\n;; Example\n;; >>> (reverse_delete \"abcde\" \"ae\")\n;; (list\
    \ \"bcd\" #f)\n;; >>> (reverse_delete \"abcdef\" \"b\")\n;; (list \"acdef\" #f)\n\
    ;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list \"cdedc\" #t)", "  (let\
    \ ((result (list)))\n    (for-each (lambda (x)\n                (if (string= x\
    \ c)\n                    (result '())\n                    (result (append (reverse\
    \ result) (list x))))))\n    (reverse result)))\n", "  (let ((result \"\"))\n\
    \    (let ((i 0))\n      (while (< i (string-length s))\n        (if (string-ref\
    \ s i)\n            (setf result (append result (string-copy (string-substring\
    \ s i 1))))\n            (setf i (string-next-index s i)))\n        (setf i (string-next-index\
    \ s i)))\n      (if (string-equal? result s)\n          #t\n          (setf result\
    \ (string-append result \" \")))\n      (setf i 0)))\n)\n\n;; Task\n;; Given a\
    \ string s, you have to delete all the characters in s that are equal to any character\
    \ in c.\n;; Then check if the result string is palindrome.\n;; A string is called\
    \ palindrome if it reads the same backward as forward.\n;; You should return a\
    \ list containing the result string and #t/#f for the check.\n;; Example\n;; >>>\
    \ (reverse_delete \"abcde\" \"ae\")\n;; (list \"bcd\" #f)\n;; >>> (reverse_delete\
    \ \"abcdef\" \"b\")\n;; (list \"acdef\" #f)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"ab\")\n;; (list \"cdedc\" #t)", "  (define (reverse_delete-helper s c)\n \
    \   (cond\n      [(string-equal? s c) (list s #t)]\n      [(string-less? s c)\
    \ (reverse_delete-helper (cdr s) (car c))]\n      [else (reverse_delete-helper\
    \ (cdr s) (car c))]\n    )\n  )\n  (reverse_delete-helper s c)\n)\n\n;; Solution",
  "  (let ((result (list)))\n    (for-each (lambda (x)\n                (if (eqv?\
    \ (string-ref s x) (string-ref c x))\n                    (append result (list\
    \ (string-append (string-ref s x) \"\"))))\n                (string-ref s (string-length\
    \ s) -1))\n      result))\n", "  (let ((result (list \"\" #f)))\n    (let ((i\
    \ 0))\n      (while (< i (string-length s))\n        (if (string-ref s i)\n  \
    \          (setf result (append result (list (string-substring s i 1))))\n   \
    \         (setf i (string-index-of c s i)))\n        (setf i (string-index-of\
    \ c s i) + 1)))\n    result))\n", "  (let ((result (make-string (length s) #f)))\n\
    \    (let ((i 0))\n      (while (< i (length c))\n        (set! result (insert\
    \ result c c i))\n        (set! i (1+ i)))\n      (if (string=? result s)\n  \
    \      (return (list result #t))\n        (return (list result #f))))))\n", " \
    \ (let ((result (list)))\n    (for-each (lambda (x)\n                (if (eq?\
    \ (string-ref s x) (string-ref c x))\n                    (append result (list\
    \ (string-append (string-delete s x) \"\") #t))\n                    (append result\
    \ (list (string-append (string-delete c x) \"\") #f))))\n                (string-split\
    \ s #\"\")\n              (string-split c #\"\")\n              (string-join result\
    \ \"\")\n              (string-length result)\n              0))\n  result)\n",
  "  (let ((result (make-string (length s) #f)))\n    (for-each (lambda (x) (string-set!\
    \ result x #f)) s)\n    (for-each (lambda (x) (string-set! result x #t)) c)\n\
    \    (if (string=? result s)\n      (list result #t)\n      (list result #f)))\n\
    )\n\n;; Test\n;; >>> (reverse_delete \"abcde\" \"ae\")\n;; (list \"bcd\" #f)\n\
    ;; >>> (reverse_delete \"abcdef\" \"b\")\n;; (list \"acdef\" #f)\n;; >>> (reverse_delete\
    \ \"abcdedcba\" \"ab\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\"\
    \ \"abc\")\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcde\"\
    )\n;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdef\")\n\
    ;; (list \"cdedc\" #t)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefg\")\n;;\
    \ (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefgh\")\n;;\
    \ (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefghi\")\n;;\
    \ (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefghij\")\n\
    ;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefghijkl\"\
    )\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefghijklm\"\
    )\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefghijklmn\"\
    )\n;; (list \"cdedc\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"abcdefghijklmnop\"\
    )\n;; (list \"cdedc\" #f", "  (let ((result (list)))\n    (for-each (lambda (x)\
    \ (set-car! result (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-", "  (let ((result (list\
    \ \"\" #f)))\n    (let ((i 0))\n      (while (< i (string-length s))\n       \
    \ (if (string=? (string-substring s i i) c)\n            (setf result (append\
    \ result (string-substring s i i)))\n            (setf i (1+ i)))\n        (setf\
    \ i (1+ i))))\n    result))\n", "  (let ((result (list)))\n    (while (string=?\
    \ c s)\n      (setq result (cons (string-set! c #\\null) result))\n      (setq\
    \ s (string-set! c #\\null s)))\n    result))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
