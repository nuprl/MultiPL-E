name: HumanEval_24_largest_divisor
language: rkt
prompt: "#lang racket\n\n;; For a given number n, find the largest number that divides\
  \ n evenly, smaller than n\n;; >>> (largest_divisor 15)\n;; 5\n(define (largest_divisor\
  \ n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
  \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
  \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
  \ 49) 7)\n))\n\n(test-humaneval)"
completions: ["  (let ((divisor (div n 1)))\n    (if (zero? divisor)\n      divisor\n\
    \      (if (negative? n)\n        (negate divisor)\n        (largest_divisor (-\
    \ n divisor)))))\n)\n\n;; For a given number n, find the largest number that divides\
    \ n evenly, greater than n\n;; >>> (largest_divisor_greater 15)\n;; 5", "  (let\
    \ ((divisors (make-vector n 0)))\n    (let ((i 0))\n      (while (< i n)\n   \
    \     (set! i (+ i 1))\n        (if (= (modulo i n) 0)\n          (set! divisors\
    \ (vector-set! divisors i) i)\n          (set! divisors (vector-set! divisors\
    \ (- i 1)) i)))\n        (if (< divisors i)\n          (set! divisors (vector-set!\
    \ divisors (- i 1)) i)\n          (set! divisors (vector-set! divisors (- i 2))\
    \ i)))\n      (if (< divisors i)\n        (set! divisors (vector-set! divisors\
    \ (- i 1)) i)\n        (set! divisors (vector-set! divisors (- i 2)) i)))\n  \
    \  (if (< divisors i)\n      (set! divisors (vector-set! divisors (- i 1)) i)\n\
    \      (set! divisors (vector-set! divisors (- i 2)) i)))\n    (if (< divisors\
    \ i)\n      (set! divisors (vector-set! divisors (- i 1)) i)\n      (set! divisors\
    \ (vector-set! divisors (- i 2)) i)))\n    (if (< divisors i)\n      (set! divisors\
    \ (vector-set! divisors (- i 1)) i)\n      (set! divisors (vector-set! divisors\
    \ (- i 2)) i)))\n    (if (< divisors i)\n      (set! divisors (vector-set! divisors\
    \ (- i 1)) i)\n      (set! divisors (vector-set! divisors (- i 2)) i)))\n    (if\
    \ (< divisors i)\n      (set! divisors (vector-set! divisors (- i 1)) i)\n   \
    \   (set! divisors (vector-set! divisors (- i 2)) i)))\n    (if (< divisors i)\n\
    \      (set! divisors (vector-set! divisors (- i 1)) i)\n      (set! divis", " \
    \ (let ((divisor (div n 1)))\n    (if (zero? divisor)\n      n\n      (largest_divisor\
    \ (sub1 n) (modulo n divisor))))\n)\n\n;; For a given number n, find the largest\
    \ number that divides n evenly, greater than n\n;; >>> (largest_divisor_greater\
    \ 15)\n;; 10", "  (let ((divisor (div n 1)))\n    (if (zero? divisor)\n      n\n\
    \      (largest_divisor (sub1 n) (modulo n divisor))))\n  )\n\n;; For a given\
    \ number n, find the largest number that divides n evenly, larger than n\n;; >>>\
    \ (largest_divisor_greater_than 15)\n;; 10", "  (let ((divisor (div n 1)))\n \
    \   (if (zero? divisor)\n      n\n      (largest_divisor (sub1 n) (divisor))))\n\
    \  )\n\n;; For a given number n, find the smallest number that divides n evenly,\
    \ larger than n\n;; >>> (smallest_divisor 15)\n;; 10", "  (let ((divisor (largest_divisor_helper\
    \ n)))\n    (if (zero? divisor)\n      divisor\n      (if (negative? divisor)\n\
    \        (- divisor)\n        divisor))))\n\n;; Helper function for largest_divisor\n\
    ;; >>> (largest_divisor_helper 15)\n;; 5", "  (let ((divisor (largest_divisor_below\
    \ n)))\n    (if (zero? divisor)\n      divisor\n      (if (zero? (modulo n divisor))\n\
    \        divisor\n        (largest_divisor_below divisor))))\n  (largest_divisor_below\
    \ n))\n\n;; For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n;; >>> (largest_divisor_below 15)\n;; 5", "  (let ((divisor\
    \ (div n 1)))\n    (if (zero? divisor)\n      n\n      (largest_divisor (sub1\
    \ n) (modulo n divisor))))\n)\n\n;; For a given number n, find the largest number\
    \ that divides n evenly, greater than n\n;; >>> (largest_divisor_greater 15)\n\
    ;; 10", "  (let ((divisors (divisors_of n)))\n    (reduce\n      (lambda (a b)\n\
    \        (if (zero? b)\n            a\n            (if (zero? a)\n           \
    \     a\n                (if (zero? b)\n                    a\n              \
    \      (if (zero? a)\n                        a\n                        (if (zero?\
    \ b)\n                            a\n                            (if (zero? a)\n\
    \                                a\n                                (if (zero?\
    \ b)\n                                    a\n                                \
    \    (if (zero? a)\n                                        a\n              \
    \                          (if (zero? b)\n                                   \
    \         a\n                                            (if (zero? a)\n     \
    \                                           a\n                              \
    \                  (if (zero? b)\n                                           \
    \         a\n                                                    (if (zero? a)\n\
    \                                                        a\n                 \
    \                                       (if (zero? b)\n                      \
    \                                      a\n                                   \
    \                         (if (zero? a)\n                                    \
    \                            a\n                                             \
    \                   (if (zero? b)\n                                          \
    \                          a\n                                               \
    \                     (if (zero? a)\n                                        \
    \                                a\n                                         \
    \                               (if (zero? b)\n                              \
    \                                              a\n                           \
    \                                                 (if (zero? a)\n            \
    \                                                                    a\n     \
    \                                                                           (if\
    \ (zero? b)\n                                                                \
    \                    a\n                                                     \
    \                               (if (zero? a)\n                              \
    \                                                        a\n                 \
    \                                                                     (if (zero?\
    \ b)\n                                                                       \
    \                 a\n                                                        \
    \                                (if (zero? a)\n                             \
    \                                                               a\n          \
    \                                                                            \
    \      (if (zero? b)\n                                                       \
    \                                         a\n                                \
    \                                                                (if (zero? a)\n\
    \                                                                            \
    \                        a\n                                                 \
    \                                                   (if (zero? b)\n          \
    \                                                                            \
    \                  a\n                                                       \
    \                                                 (if (zero? a)\n            \
    \                                                                            \
    \                    a\n                                                     \
    \                                                       (if", "  (let ((divisor\
    \ (div n 1)))\n    (if (zero? divisor)\n      n\n      (largest_divisor (sub1\
    \ n) (divisor))))\n  )\n\n;; >>> (largest_divisor 15)\n;; 5\n;; >>> (largest_divisor\
    \ (expt 2 10))\n;; 1024\n;; >>> (largest_divisor (expt 2 100))\n;; 1048576\n;;\
    \ >>> (largest_divisor (expt 2 1000))\n;; 104857600\n;; >>> (largest_divisor (expt\
    \ 2 10000))\n;; 10485760000\n;; >>> (largest_divisor (expt 2 100000))\n;; 1048576000000\n\
    ;; >>> (largest_divisor (expt 2 1000000))\n;; 10485760000000\n;; >>> (largest_divisor\
    \ (expt 2 10000000))\n;; 104857600000000\n;; >>> (largest_divisor (expt 2 100000000))\n\
    ;; 10485760000000000\n;; >>> (largest_divisor (expt 2 1000000000))\n;; 104857600000000000\n\
    ;; >>> (largest_divisor (expt 2 10000000000))\n;; 1048576000000000000\n;; >>>\
    \ (largest_divisor (expt 2 100000000000))\n;; 10485760000000000000\n;; >>> (largest_divisor\
    \ (expt 2 1000000000000))\n;; 104857600000000000000\n;; >>> (largest_divisor (expt\
    \ 2 10000000000000))\n;; 1048576000000000000000\n;; >>> (largest_divisor (expt\
    \ 2 100000000000000))\n;; 1048576000000000000000\n;; >>> (largest_divisor (expt\
    \ 2 1000000000000000))\n;; 1048576000000000000000\n;; >>> (largest_divisor (expt\
    \ 2 10000000000000000))\n;; 1048576000000000000000\n;; >>> (largest_divisor (expt\
    \ 2 100000000000000000))\n;; 1048576000000000000000\n;; >>> (largest_divisor (expt\
    \ 2 10000000000000000000))\n;; 1048576000000000000000\n;; >>> (largest_divisor\
    \ (expt 2 10000000000000000000))\n;; 1048576000000000000000\n;; >>> (largest_divisor\
    \ (expt 2 10000000000000000000", "  (let ((divisors (divisors_of n)))\n    (reduce\n\
    \      (lambda (a b)\n        (if (zero? a)\n          b\n          (if (zero?\
    \ b)\n            a\n            (if (eq? a b)\n              a\n            \
    \  (if (zero? a)\n                b\n                (if (zero? b)\n         \
    \         a\n                  (if (eq? a b)\n                    a\n        \
    \            b))))))))))\n\n;; >>> (largest_divisor 5)\n;; 5\n;; >>> (largest_divisor\
    \ 6)\n;; 3\n;; >>> (largest_divisor 7)\n;; 7\n;; >>> (largest_divisor 8)\n;; 5\n\
    ;; >>> (largest_divisor 9)\n;; 9\n;; >>> (largest_divisor 10)\n;; 5\n;; >>> (largest_divisor\
    \ 11)\n;; 11\n;; >>> (largest_divisor 12)\n;; 7\n;; >>> (largest_divisor 13)\n\
    ;; 13\n;; >>> (largest_divisor 14)\n;; 7\n;; >>> (largest_divisor 15)\n;; 5\n\
    ;; >>> (largest_divisor 16)\n;; 16\n;; >>> (largest_divisor 17)\n;; 17\n;; >>>\
    \ (largest_divisor 18)\n;; 5\n;; >>> (largest_divisor 19)\n;; 19\n;; >>> (largest_divisor\
    \ 20)\n;; 5\n;; >>> (largest_divisor 21)\n;; 21\n;; >>> (largest_divisor 22)\n\
    ;; 7\n;; >>> (largest_divisor 23)\n;; 23\n;; >>> (largest_divisor 24)\n;; 7\n\
    ;; >>> (largest_divisor 25)\n;; 5\n;; >>> (largest_divisor 26)\n;; 26\n;; >>>\
    \ (largest_divisor 27)\n;; 9\n;; >>> (largest_divisor 28)\n;; 5\n;; >>> (largest_divisor\
    \ 29)\n;; 29\n;; >>> (largest_divisor 30)\n;; 5\n;; >>> (largest_divisor 31)\n\
    ;; 31\n;; >>> (largest_divisor 32)\n;; 5\n;; >>> (largest_divisor 33)", "  (let\
    \ ((divisor (largest_divisor_helper n)))\n    (if (zero? divisor)\n      divisor\n\
    \      (if (negative? divisor)\n        (negate divisor)\n        divisor)))\n\
    \  (largest_divisor_helper n))\n\n;; Helper function for largest_divisor\n;; >>>\
    \ (largest_divisor_helper 15)\n;; 5", "  (let ((divisors (divisors_of n)))\n \
    \   (reduce (lambda (a b) (if (> a b) a b)) 1 divisors)))\n\n;; >>> (largest_divisor\
    \ 15)\n;; 5\n\n;; For a given number n, find the largest number that divides n\
    \ evenly, greater than n\n;; >>> (largest_divisor_greater 15)\n;; 10", "  (let\
    \ ((divisor (div n 1)))\n    (if (zero? divisor)\n      n\n      (largest_divisor\
    \ (sub1 n) (divisor))))\n)\n\n;; For a given number n, find the largest number\
    \ that divides n evenly, greater than n\n;; >>> (largest_divisor_greater 15)\n\
    ;; 10", "  (let ((divisors (divisors_of n)))\n    (reduce\n      (lambda (a b)\n\
    \        (if (zero? a)\n          b\n          (if (zero? b)\n            a\n\
    \            (if (eq? a b)\n              a\n              (largest_divisor (quotient\
    \ a b))))))\n      divisors))\n\n;; For a given number n, find the largest number\
    \ that divides n evenly, larger than n\n;; >>> (largest_divisor_greater 15)\n\
    ;; 10", "  (let ((divisor (div n 1)))\n    (if (zero? divisor)\n      n\n    \
    \  (largest_divisor (sub1 n) (divisor))))\n)\n\n;; For a given number n, find\
    \ the largest number that divides n evenly, greater than n\n;; >>> (largest_divisor_greater_than\
    \ 15)\n;; 10", "  (let ((divisors (divisors_of n)))\n    (reduce (lambda (a b)\
    \ (if (zero? a) b (a b))) 1 (cdr divisors)))\n)\n\n;; For a given number n, find\
    \ the smallest number that divides n evenly, larger than n\n;; >>> (smallest_divisor\
    \ 15)\n;; 10", "  (let ((divisors (divisors_of n)))\n    (reduce\n      (lambda\
    \ (a b)\n        (if (zero? a)\n          b\n          (if (zero? b)\n       \
    \     a\n            (if (eq? a b)\n              a\n              (if (eq? a\
    \ (quotient b n))\n                b\n                (largest_divisor (sub n\
    \ a))))))))))\n\n;; >>> (largest_divisor 15)\n;; 5\n;; >>> (largest_divisor (quotient\
    \ 15 5))\n;; 5\n;; >>> (largest_divisor (quotient 15 10))\n;; 10\n;; >>> (largest_divisor\
    \ (quotient 15 20))\n;; 10\n;; >>> (largest_divisor (quotient 15 25))\n;; 5\n\
    ;; >>> (largest_divisor (quotient 15 30))\n;; 15\n;; >>> (largest_divisor (quotient\
    \ 15 35))\n;; 15\n;; >>> (largest_divisor (quotient 15 40))\n;; 15\n;; >>> (largest_divisor\
    \ (quotient 15 45))\n;; 15\n;; >>> (largest_divisor (quotient 15 50))\n;; 15\n\
    ;; >>> (largest_divisor (quotient 15 55))\n;; 15\n;; >>> (largest_divisor (quotient\
    \ 15 60))\n;; 15\n;; >>> (largest_divisor (quotient 15 65))\n;; 15\n;; >>> (largest_divisor\
    \ (quotient 15 70))\n;; 15\n;; >>> (largest_divisor (quotient 15 75))\n;; 15\n\
    ;; >>> (largest_divisor (quotient 15 80))\n;; 15\n;; >>> (largest_divisor (quotient\
    \ 15 85))\n;; 15\n;; >>> (largest_divisor (quotient 15 90))\n;; 15\n;; >>> (largest_divisor\
    \ (quotient 15 95))\n;; 15\n;; >>> (largest_divisor (quotient 15 100))\n;; 15\n\
    ;; >>> (largest_divisor (quotient 15 105))\n;; 15\n;; >>> (largest_divisor (quotient\
    \ 15 110))\n;; 15", "  (let ((divisor (div n 1)))\n    (if (zero? divisor)\n \
    \     n\n      (largest_divisor (sub1 n) (divisor - 1))))\n  )\n\n;; >>> (largest_divisor\
    \ 15)\n;; 5\n\n;; For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n;; >>> (largest_divisor 15)\n;; 5", "  (let ((divisors\
    \ (divisors_of n)))\n    (reduce (lambda (a b) (if (> b 0) (cons a b) b)) 1 divisors)))\n\
    \n;; >>> (largest_divisor 15)\n;; 5\n\n;; For a given number n, find the largest\
    \ number that divides n evenly, greater than n\n;; >>> (largest_divisor_greater\
    \ 15)\n;; 5", "  (let ((divisor (div n 1)))\n    (if (zero? divisor)\n      n\n\
    \      (largest_divisor (sub1 n) (divisor - 1))))\n)\n\n;; For a given number\
    \ n, find the largest number that divides n evenly, larger than n\n;; >>> (largest_divisor_greater\
    \ 15)\n;; 10", "  (let ((divisor (div n 1)))\n    (if (zero? divisor)\n      n\n\
    \      (largest_divisor (sub1 n) (divisor - 1))))\n  )\n\n;; >>> (largest_divisor\
    \ 15)\n;; 5\n\n;; >>> (largest_divisor (expt 2 10))\n;; 1024\n\n;; >>> (largest_divisor\
    \ (expt 2 100))\n;; 1048576\n\n;; >>> (largest_divisor (expt 2 1000))\n;; 104857600\n\
    \n;; >>> (largest_divisor (expt 2 10000))\n;; 10485760000\n\n;; >>> (largest_divisor\
    \ (expt 2 100000))\n;; 1048576000000\n\n;; >>> (largest_divisor (expt 2 1000000))\n\
    ;; 104857600000000\n\n;; >>> (largest_divisor (expt 2 10000000))\n;; 10485760000000000\n\
    \n;; >>> (largest_divisor (expt 2 100000000))\n;; 104857600000000000\n\n;; >>>\
    \ (largest_divisor (expt 2 1000000000))\n;; 1048576000000000000\n\n;; >>> (largest_divisor\
    \ (expt 2 10000000000))\n;; 10485760000000000000\n\n;; >>> (largest_divisor (expt\
    \ 2 100000000000))\n;; 104857600000000000000\n\n;; >>> (largest_divisor (expt\
    \ 2 1000000000000))\n;; 1048576000000000000000\n\n;; >>> (largest_divisor (expt\
    \ 2 10000000000000))\n;; 10485760000000000000000\n\n;; >>> (largest_divisor (expt\
    \ 2 100000000000000))\n;; 104857600000000000000000\n\n;; >>> (largest_divisor\
    \ (expt 2 1000000000000000))\n;; 1048576000000000000000000\n\n;; >>> (largest_divisor\
    \ (expt 2 10000000000000000))\n;; 10485760000000000000000000\n\n;; >>> (largest_divisor\
    \ (expt 2 100000000000000000))\n;; 104857600000000000000000000\n\n;; >>> (largest_divisor\
    \ (expt 2 1000000000000000000))\n;; 1048576000000000000000000000\n\n;; >>> (largest_divisor\
    \ (expt 2 10000000000000000000", "  (let ((divisor (div n 1)))\n    (if (zero?\
    \ divisor)\n      divisor\n      (if (negative? n)\n        (negate divisor)\n\
    \        (largest_divisor (- n divisor))))))\n\n;; >>> (largest_divisor 15)\n\
    ;; 5\n;; >>> (largest_divisor -15)\n;; -5\n;; >>> (largest_divisor -15)\n;; -5\n\
    ;; >>> (largest_divisor -15)\n;; -5\n;; >>> (largest_divisor -15)\n;; -5\n;; >>>\
    \ (largest_divisor -15)\n;; -5\n;; >>> (largest_divisor -15)\n;; -5\n;; >>> (largest_divisor\
    \ -15)\n;; -5\n;; >>> (largest_divisor -15)\n;; -5\n;; >>> (largest_divisor -15)\n\
    ;; -5\n;; >>> (largest_divisor -15)\n;; -5\n;; >>> (largest_divisor -15)\n;; -5\n\
    ;; >>> (largest_divisor -15)\n;; -5\n;; >>> (largest_divisor -15)\n;; -5\n;; >>>\
    \ (largest_divisor -15)\n;; -5\n;; >>> (largest_divisor -15)\n;; -5\n;; >>> (largest_divisor\
    \ -15)\n;; -5\n;; >>> (largest_divisor -15)\n;; -5\n;; >>> (largest_divisor -15)\n\
    ;; -5\n;; >>> (largest_divisor -15)\n;; -5\n;; >>> (largest_divisor -15)\n;; -5\n\
    ;; >>> (largest_divisor -15)\n;; -5\n;; >>> (largest_divisor -15)\n;; -5\n;; >>>\
    \ (largest_divisor -15)\n;; -5\n;; >>> (largest_divisor -15)\n;; -5\n;; >>> (largest_divisor\
    \ -15)\n;; -5\n;; >>> (largest_divisor -15)\n;; -5\n;; >>> (largest_divisor -15)\n\
    ;; -5\n;; >>> (", "  (let ((divisor (div n 1)))\n    (if (zero? divisor)\n   \
    \   n\n      (largest_divisor (sub1 n) (divisor))))\n)\n\n;; For a given number\
    \ n, find the largest number that divides n evenly, greater than n\n;; >>> (largest_divisor_greater\
    \ 15)\n;; 10", "  (let ((divisor (div n 1)))\n    (if (zero? divisor)\n      divisor\n\
    \      (if (zero? (modulo n divisor))\n        divisor\n        (largest_divisor\
    \ (sub1 n) (modulo n divisor)))))))\n\n;; For a given number n, find the largest\
    \ number that divides n evenly, greater than n\n;; >>> (largest_divisor_greater\
    \ 15)\n;; 10", "  (let ((divisors (divisors_of n)))\n    (reduce (lambda (a b)\
    \ (if (zero? b) a (a b))) 1 divisors)))\n\n;; For a given number n, find the largest\
    \ number that divides n evenly, larger than n\n;; >>> (largest_divisor_greater_than\
    \ 15)\n;; 15", "  (let ((divisors (divisors_of n)))\n    (reduce (lambda (a b)\
    \ (if (zero? b) a (a b))) 1 divisors)))\n\n;; For a given number n, find the smallest\
    \ number that divides n evenly, larger than n\n;; >>> (smallest_divisor 15)\n\
    ;; 5", "  (let ((divisor (div n 1)))\n    (if (zero? divisor)\n      n\n     \
    \ (largest_divisor (sub1 n) (divisor))))\n)\n\n;; For a given number n, find the\
    \ smallest number that divides n evenly, larger than n\n;; >>> (smallest_divisor\
    \ 15)\n;; 10", "  (let ((divisors (divisors_of n)))\n    (reduce\n      (lambda\
    \ (a b)\n        (if (zero? a)\n          b\n          (if (zero? b)\n       \
    \     a\n            (if (not (zero? (modulo a b)))\n              a\n       \
    \       b))))\n      divisors)))\n\n;; For a given number n, find the largest\
    \ number that divides n evenly, larger than n\n;; >>> (largest_divisor_greater_than\
    \ 15)\n;; 10", "  (let ((divisors (divisors_of n)))\n    (reduce (lambda (a b)\
    \ (if (> b 0) (cons a b) b))\n      (cdr (filter (lambda (x) (zero? (modulo x\
    \ n))))))))\n\n;; For a given number n, find the smallest number that divides\
    \ n evenly, larger than n\n;; >>> (smallest_divisor 15)\n;; 5", "  (let ((divisor\
    \ (div n 1)))\n    (if (zero? divisor)\n      n\n      (largest_divisor (sub1\
    \ n) (divisor))))\n  )\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, larger than n\n;; >>> (largest_divisor_plus 15)\n;; 10", " \
    \ (let ((divisor (div n 1)))\n    (if (zero? divisor)\n      1\n      (largest_divisor\
    \ (sub1 divisor))))\n  )\n\n;; >>> (largest_divisor 15)\n;; 5\n;; >>> (largest_divisor\
    \ (expt 2 10))\n;; 1024\n;; >>> (largest_divisor (expt 2 100))\n;; 1048576\n;;\
    \ >>> (largest_divisor (expt 2 1000))\n;; 104857600\n;; >>> (largest_divisor (expt\
    \ 2 10000))\n;; 10485760000\n;; >>> (largest_divisor (expt 2 100000))\n;; 1048576000000\n\
    ;; >>> (largest_divisor (expt 2 1000000))\n;; 10485760000000\n;; >>> (largest_divisor\
    \ (expt 2 10000000))\n;; 104857600000000\n;; >>> (largest_divisor (expt 2 100000000))\n\
    ;; 10485760000000000\n;; >>> (largest_divisor (expt 2 1000000000))\n;; 104857600000000000\n\
    ;; >>> (largest_divisor (expt 2 10000000000))\n;; 1048576000000000000\n;; >>>\
    \ (largest_divisor (expt 2 100000000000))\n;; 10485760000000000000\n;; >>> (largest_divisor\
    \ (expt 2 1000000000000))\n;; 104857600000000000000\n;; >>> (largest_divisor (expt\
    \ 2 10000000000000))\n;; 1048576000000000000000\n;; >>> (largest_divisor (expt\
    \ 2 100000000000000))\n;; 1048576000000000000000\n;; >>> (largest_divisor (expt\
    \ 2 1000000000000000))\n;; 1048576000000000000000\n;; >>> (largest_divisor (expt\
    \ 2 10000000000000000))\n;; 1048576000000000000000\n;; >>> (largest_divisor (expt\
    \ 2 100000000000000000))\n;; 1048576000000000000000\n;; >>> (largest_divisor (expt\
    \ 2 10000000000000000000))\n;; 1048576000000000000000\n;; >>> (largest_divisor\
    \ (expt 2 10000000000000000000))\n;; 1048576000000000000000\n;; >>> (largest_divisor\
    \ (expt 2 10000000000000000000))\n;;", "  (let ((divisor (div n 1)))\n    (if\
    \ (zero? divisor)\n      n\n      (largest_divisor (sub1 n) (divisor))))\n)\n\n\
    ;; For a given number n, find the largest number that divides n evenly, greater\
    \ than n\n;; >>> (largest_divisor_greater 15)\n;; 10", "  (let ((divisors (divisors_of\
    \ n)))\n    (reduce (lambda (a b) (if (zero? a) b (if (zero? b) a (if (zero? a)\
    \ b (if (zero? b) a b))))\n           (first divisors) (second divisors))))\n\
    )\n\n;; For a given number n, find the largest number that divides n evenly, greater\
    \ than n\n;; >>> (largest_divisor_greater_than 15)\n;; 10", "  (let ((divisor\
    \ (largest_divisor_below n)))\n    (if (zero? divisor)\n      divisor\n      (if\
    \ (zero? (modulo n divisor))\n        divisor\n        (largest_divisor_below\
    \ divisor))))\n  (largest_divisor_below n))\n\n;; For a given number n, find the\
    \ largest number that divides n evenly, smaller than n\n;; >>> (largest_divisor_below\
    \ 15)\n;; 5", "  (let ((divisor (div n 1)))\n    (if (zero? divisor)\n      divisor\n\
    \      (if (zero? (modulo n divisor))\n        divisor\n        (largest_divisor\
    \ (sub1 n) (modulo n divisor)))))))\n\n;; >>> (largest_divisor 15)\n;; 5\n;; >>>\
    \ (largest_divisor (expt 2 10))\n;; 1024\n;; >>> (largest_divisor (expt 2 100))\n\
    ;; 1048576\n;; >>> (largest_divisor (expt 2 1000))\n;; 104857600\n;; >>> (largest_divisor\
    \ (expt 2 10000))\n;; 10485760000\n;; >>> (largest_divisor (expt 2 100000))\n\
    ;; 104857600000000\n;; >>> (largest_divisor (expt 2 1000000))\n;; 10485760000000000\n\
    ;; >>> (largest_divisor (expt 2 10000000))\n;; 104857600000000000\n;; >>> (largest_divisor\
    \ (expt 2 100000000))\n;; 1048576000000000000\n;; >>> (largest_divisor (expt 2\
    \ 1000000000))\n;; 10485760000000000000\n;; >>> (largest_divisor (expt 2 10000000000))\n\
    ;; 104857600000000000000\n;; >>> (largest_divisor (expt 2 100000000000))\n;; 1048576000000000000000\n\
    ;; >>> (largest_divisor (expt 2 1000000000000))\n;; 10485760000000000000000\n\
    ;; >>> (largest_divisor (expt 2 10000000000000))\n;; 104857600000000000000000\n\
    ;; >>> (largest_divisor (expt 2 100000000000000))\n;; 1048576000000000000000000\n\
    ;; >>> (largest_divisor (expt 2 1000000000000000))\n;; 10485760000000000000000000\n\
    ;; >>> (largest_divisor (expt 2 10000000000000000))\n;; 104857600000000000000000000\n\
    ;; >>> (largest_divisor (expt 2 100000000000000000))\n;; 1048576000000000000000000000\n\
    ;; >>> (largest_divisor (expt 2 1000000000000000000))\n;; 10485760000000000000000000000\n\
    ;; >>> (largest_divisor (expt 2", "  (let ((divisor (largest_divisor_helper n)))\n\
    \    (if (zero? divisor)\n      divisor\n      (if (zero? (modulo n divisor))\n\
    \        divisor\n        (largest_divisor_helper (sub1 n) divisor))))\n  (largest_divisor_helper\
    \ n))\n\n;; For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n;; >>> (largest_divisor_helper 15)\n;; 5", "  (let ((divisor\
    \ (largest_divisor_helper n)))\n    (if (zero? divisor)\n      divisor\n     \
    \ (if (zero? (modulo n divisor))\n        divisor\n        (largest_divisor_helper\
    \ (sub1 n) divisor))))\n  (largest_divisor_helper n))\n\n;; For a given number\
    \ n, find the largest number that divides n evenly, smaller than n\n;; >>> (largest_divisor_helper\
    \ 15)\n;; 5", "  (let ((divisor (div n 1)))\n    (cond\n      ((zero? divisor)\
    \ 1)\n      ((= divisor n) n)\n      (else (largest_divisor (divisor - 1)))))\n\
    )\n\n;; For a given number n, find the largest number that divides n evenly, greater\
    \ than n\n;; >>> (largest_divisor_greater 15)\n;; 10", "  (let ((divisor (div\
    \ n 1)))\n    (if (zero? divisor)\n      1\n      (largest_divisor (sub1 divisor))))\n\
    \  )\n\n;; >>> (largest_divisor 15)\n;; 5\n;; >>> (largest_divisor (expt 2 10))\n\
    ;; 1024\n;; >>> (largest_divisor (expt 2 100))\n;; 1048576\n;; >>> (largest_divisor\
    \ (expt 2 1000))\n;; 104857600\n;; >>> (largest_divisor (expt 2 10000))\n;; 10485760000\n\
    ;; >>> (largest_divisor (expt 2 100000))\n;; 1048576000000\n;; >>> (largest_divisor\
    \ (expt 2 1000000))\n;; 104857600000000\n;; >>> (largest_divisor (expt 2 10000000))\n\
    ;; 10485760000000000\n;; >>> (largest_divisor (expt 2 100000000))\n;; 104857600000000000\n\
    ;; >>> (largest_divisor (expt 2 1000000000))\n;; 1048576000000000000\n;; >>> (largest_divisor\
    \ (expt 2 10000000000))\n;; 10485760000000000000\n;; >>> (largest_divisor (expt\
    \ 2 100000000000))\n;; 104857600000000000000\n;; >>> (largest_divisor (expt 2\
    \ 1000000000000))\n;; 1048576000000000000000\n;; >>> (largest_divisor (expt 2\
    \ 10000000000000))\n;; 10485760000000000000000\n;; >>> (largest_divisor (expt\
    \ 2 100000000000000))\n;; 104857600000000000000000\n;; >>> (largest_divisor (expt\
    \ 2 1000000000000000))\n;; 1048576000000000000000000\n;; >>> (largest_divisor\
    \ (expt 2 10000000000000000))\n;; 10485760000000000000000000\n;; >>> (largest_divisor\
    \ (expt 2 100000000000000000))\n;; 104857600000000000000000000\n;; >>> (largest_divisor\
    \ (expt 2 10000000000000000000))\n;; 1048576000000000000000000000\n;; >>> (largest_divisor\
    \ (expt 2 10000000000000000000))\n;; 10485760000000000000000000000\n;; >>> (largest_divisor\
    \ (expt 2", "  (let ((divisors (make-yail-list 0)))\n    (define (helper n divisors)\n\
    \      (cond\n        [(zero? n) (car divisors)]\n        [else\n          (if\
    \ (> (abs n) (car divisors))\n            (helper (- n (car divisors)) (cdr divisors))\n\
    \          (helper n (cdr divisors)))\n        ]\n      )\n    (helper n divisors))\n\
    \  (car (helper n divisors)))\n\n;; For a given number n, find the smallest number\
    \ that divides n evenly, larger than n\n;; >>> (smallest_divisor 15)\n;; 5", " \
    \ (let ((divisors (divisors_of n)))\n    (reduce\n      (lambda (a b)\n      \
    \  (if (zero? a)\n          b\n          (if (zero? b)\n            a\n      \
    \      (if (eq? a b)\n              a\n              (largest_divisor (quotient\
    \ a b))))))\n      divisors)))\n\n;; For a given number n, find the largest number\
    \ that divides n evenly, larger than n\n;; >>> (largest_divisor_plus 15)\n;; 16",
  "  (let ((divisor (largest_divisor_helper n)))\n    (if (zero? divisor)\n      divisor\n\
    \      (if (zero? (modulo n divisor))\n        divisor\n        (largest_divisor_helper\
    \ (sub1 n) divisor))))\n  (largest_divisor_helper n))\n\n;; For a given number\
    \ n, find the largest number that divides n evenly, smaller than n\n;; >>> (largest_divisor_helper\
    \ 15)\n;; 5", "  (let ((divisor (div n 1)))\n    (if (zero? divisor)\n      divisor\n\
    \      (if (zero? (modulo n divisor))\n        divisor\n        (largest_divisor\
    \ (sub1 n) (modulo n divisor)))))))\n\n;; For a given number n, find the largest\
    \ number that divides n evenly, larger than n\n;; >>> (largest_divisor_larger\
    \ 15)\n;; 10", "  (let ((divisors (divisors_of n)))\n    (reduce\n      (lambda\
    \ (a b)\n        (if (zero? a)\n          b\n          (if (zero? b)\n       \
    \     a\n            (if (eq? a b)\n              a\n              (largest_divisor\
    \ (+ a b))))))\n      divisors)))\n\n;; For a given number n, find the largest\
    \ number that divides n evenly, smaller than n\n;; >>> (largest_divisor 15)\n\
    ;; 5", "  (let ((divisors (divisors_of n)))\n    (reduce\n      (lambda (a b)\n\
    \        (if (zero? a)\n          b\n          (if (zero? b)\n            a\n\
    \            (if (zero? (modulo a b))\n              b\n              (largest_divisor\
    \ (modulo a b))))))\n      divisors)))\n\n;; For a given number n, find the largest\
    \ number that divides n evenly, larger than n\n;; >>> (largest_divisor_greater_than\
    \ 15)\n;; 10", "  (let ((divisor (largest_divisor_helper n)))\n    (if (zero?\
    \ divisor)\n      divisor\n      (if (zero? (modulo n divisor))\n        divisor\n\
    \        (largest_divisor_helper (sub1 n) divisor))))\n  (largest_divisor_helper\
    \ n))\n\n;; For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n;; >>> (largest_divisor_helper 15)\n;; 5", "  (let ((divisor\
    \ (div n 1)))\n    (if (zero? divisor)\n      1\n      (largest_divisor (sub1\
    \ divisor))))\n  )\n\n;; >>> (largest_divisor 15)\n;; 5\n;; >>> (largest_divisor\
    \ (expt 2 10))\n;; 1024\n;; >>> (largest_divisor (expt 2 100))\n;; 1048576\n;;\
    \ >>> (largest_divisor (expt 2 1000))\n;; 104857600\n;; >>> (largest_divisor (expt\
    \ 2 10000))\n;; 10485760000\n;; >>> (largest_divisor (expt 2 100000))\n;; 1048576000000\n\
    ;; >>> (largest_divisor (expt 2 1000000))\n;; 10485760000000\n;; >>> (largest_divisor\
    \ (expt 2 10000000))\n;; 104857600000000\n;; >>> (largest_divisor (expt 2 100000000))\n\
    ;; 10485760000000000\n;; >>> (largest_divisor (expt 2 1000000000))\n;; 104857600000000000\n\
    ;; >>> (largest_divisor (expt 2 10000000000))\n;; 1048576000000000000\n;; >>>\
    \ (largest_divisor (expt 2 100000000000))\n;; 10485760000000000000\n;; >>> (largest_divisor\
    \ (expt 2 1000000000000))\n;; 104857600000000000000\n;; >>> (largest_divisor (expt\
    \ 2 10000000000000))\n;; 1048576000000000000000\n;; >>> (largest_divisor (expt\
    \ 2 100000000000000))\n;; 1048576000000000000000\n;; >>> (largest_divisor (expt\
    \ 2 1000000000000000))\n;; 104857600000000000000000\n;; >>> (largest_divisor (expt\
    \ 2 10000000000000000))\n;; 104857600000000000000000\n;; >>> (largest_divisor\
    \ (expt 2 100000000000000000))\n;; 104857600000000000000000\n;; >>> (largest_divisor\
    \ (expt 2 10000000000000000000))\n;; 104857600000000000000000\n;; >>> (largest_divisor\
    \ (expt 2 10000000000000000000))\n;; 104857600000000000000000\n;; >>> (largest_divisor\
    \ (expt 2 10000000000", "  (let ((divisors (divisors_of n)))\n    (reduce\n  \
    \    (lambda (a b)\n        (if (zero? a)\n            b\n            (if (zero?\
    \ b)\n                a\n                (if (zero? (modulo a b))\n          \
    \          b\n                    (largest_divisor (modulo a b))))))\n      divisors)))\n\
    \n;; For a given number n, find the largest number that divides n evenly, larger\
    \ than n\n;; >>> (largest_divisor_plus 15)\n;; 10", "  (let ((divisors (divisors_of\
    \ n)))\n    (reduce\n      (lambda (a b)\n        (if (zero? a)\n          b\n\
    \          (if (zero? b)\n            a\n            (if (eq? a b)\n         \
    \     a\n              (largest_divisor (+ a b))))))))\n\n;; >>> (largest_divisor\
    \ 15)\n;; 5\n;; >>> (largest_divisor (expt 2 100))\n;; 25165824\n;; >>> (largest_divisor\
    \ (expt 2 100))\n;; 25165824\n;; >>> (largest_divisor (expt 2 100))\n;; 25165824\n\
    ;; >>> (largest_divisor (expt 2 100))\n;; 25165824\n;; >>> (largest_divisor (expt\
    \ 2 100))\n;; 25165824\n;; >>> (largest_divisor (expt 2 100))\n;; 25165824\n;;\
    \ >>> (largest_divisor (expt 2 100))\n;; 25165824\n;; >>> (largest_divisor (expt\
    \ 2 100))\n;; 25165824\n;; >>> (largest_divisor (expt 2 100))\n;; 25165824\n;;\
    \ >>> (largest_divisor (expt 2 100))\n;; 25165824\n;; >>> (largest_divisor (expt\
    \ 2 100))\n;; 25165824\n;; >>> (largest_divisor (expt 2 100))\n;; 25165824\n;;\
    \ >>> (largest_divisor (expt 2 100))\n;; 25165824\n;; >>> (largest_divisor (expt\
    \ 2 100))\n;; 25165824\n;; >>> (largest_divisor (expt 2 100))\n;; 25165824\n;;\
    \ >>> (largest_divisor (expt 2 100))\n;; 25165824\n;; >>> (largest_divisor (expt\
    \ 2 100))\n;; 25165824\n;; >>> (largest_divisor (expt 2 100))\n;; 25165824\n;;\
    \ >>> (largest_divisor (expt 2 100))\n;; 25165824\n;; >>> (largest_divisor (expt\
    \ 2 100))\n;; 251658", "  (let ((divisors (divisors n)))\n    (reduce\n      (lambda\
    \ (a b) (if (zero? a) b (if (zero? b) a (if (zero? (modulo a b)) b (a b))))\n\
    \        (divisors (car divisors))\n        (cdr divisors))))\n)\n\n;; For a given\
    \ number n, find the largest number that divides n evenly, larger than n\n;; >>>\
    \ (largest_divisor_greater 15)\n;; 10", "  (let ((divisor (div n 1)))\n    (if\
    \ (zero? divisor)\n      n\n      (largest_divisor (sub1 n) (divisor))))\n)\n\n\
    ;; For a given number n, find the largest number that divides n evenly, greater\
    \ than n\n;; >>> (largest_divisor_greater 15)\n;; 10", "  (let ((divisor (div\
    \ n 1)))\n    (cond\n      ((= divisor 1) 1)\n      ((< divisor n) n)\n      (else\
    \ (largest_divisor (divisor - 1)))))\n)\n\n;; For a given number n, find the smallest\
    \ number that divides n evenly, larger than n\n;; >>> (smallest_divisor 15)\n\
    ;; 5", "  (let ((divisor (div n 1)))\n    (cond\n      ((= divisor 1) 1)\n   \
    \   ((< divisor n) n)\n      (else (largest_divisor (divisor - 1)))))\n)\n\n;;\
    \ For a given number n, find the largest number that divides n evenly, larger\
    \ than n\n;; >>> (largest_divisor_greater 15)\n;; 10", "  (let ((divisor (div\
    \ n 1)))\n    (if (zero? divisor)\n      n\n      (largest_divisor (sub1 n) (modulo\
    \ n divisor))))\n)\n\n;; For a given number n, find the largest number that divides\
    \ n evenly, greater than n\n;; >>> (largest_divisor_greater 15)\n;; 10", "  (let\
    \ ((divisor (largest_divisor_helper n)))\n    (if (zero? divisor)\n      divisor\n\
    \      (if (zero? (modulo n divisor))\n        divisor\n        (largest_divisor_helper\
    \ (sub1 n) divisor))))\n  (largest_divisor_helper n))\n\n;; For a given number\
    \ n, find the largest number that divides n evenly, smaller than n\n;; >>> (largest_divisor_helper\
    \ 15)\n;; 5", "  (let ((divisor (div n 1)))\n    (if (zero? divisor)\n      1\n\
    \      (largest_divisor (sub1 divisor))))\n  )\n\n;; >>> (largest_divisor 15)\n\
    ;; 5\n\n;; >>> (largest_divisor (expt 2 100))\n;; 10\n\n;; >>> (largest_divisor\
    \ (expt 2 100))\n;; 10\n\n;; >>> (largest_divisor (expt 2 100))\n;; 10\n\n;; >>>\
    \ (largest_divisor (expt 2 100))\n;; 10\n\n;; >>> (largest_divisor (expt 2 100))\n\
    ;; 10\n\n;; >>> (largest_divisor (expt 2 100))\n;; 10\n\n;; >>> (largest_divisor\
    \ (expt 2 100))\n;; 10\n\n;; >>> (largest_divisor (expt 2 100))\n;; 10\n\n;; >>>\
    \ (largest_divisor (expt 2 100))\n;; 10\n\n;; >>> (largest_divisor (expt 2 100))\n\
    ;; 10\n\n;; >>> (largest_divisor (expt 2 100))\n;; 10\n\n;; >>> (largest_divisor\
    \ (expt 2 100))\n;; 10\n\n;; >>> (largest_divisor (expt 2 100))\n;; 10\n\n;; >>>\
    \ (largest_divisor (expt 2 100))\n;; 10\n\n;; >>> (largest_divisor (expt 2 100))\n\
    ;; 10\n\n;; >>> (largest_divisor (expt 2 100))\n;; 10\n\n;; >>> (largest_divisor\
    \ (expt 2 100))\n;; 10\n\n;; >>> (largest_divisor (expt 2 100))\n;; 10\n\n;; >>>\
    \ (largest_divisor (expt 2 100))\n;; 10\n\n;; >>> (largest_divisor (expt 2 100))\n\
    ;; 10\n\n;; >>> (largest_divisor (expt 2 100))\n;; 10\n\n;; >>> (largest_divisor\
    \ (expt 2 100))\n;; 10\n\n;; >>> (largest_divisor (expt 2 100))\n;; 10\n\n;; >>>\
    \ (largest_divisor (expt 2 100))", "  (let ((divisor (largest_divisor_below n)))\n\
    \    (if (zero? divisor)\n      divisor\n      (if (zero? (modulo n divisor))\n\
    \        divisor\n        (largest_divisor_below divisor))))\n  (largest_divisor_below\
    \ n))\n\n;; For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n;; >>> (largest_divisor_below 15)\n;; 5", "  (let ((divisor\
    \ (div n 1)))\n    (if (zero? divisor)\n      n\n      (largest_divisor (sub1\
    \ n) (modulo n divisor))))\n)\n\n;; For a given number n, find the largest number\
    \ that divides n evenly, greater than n\n;; >>> (largest_divisor_greater 15)\n\
    ;; 10", "  (let ((divisor (div n 1)))\n    (if (zero? divisor)\n      n\n    \
    \  (largest_divisor (sub1 n) (divisor))))\n)\n\n;; For a given number n, find\
    \ the largest number that divides n evenly, larger than n\n;; >>> (largest_divisor_larger\
    \ 15)\n;; 10", "  (let ((divisors (divisors_of n)))\n    (reduce (lambda (a b)\
    \ (if (> a b) a b)) 1 divisors)))\n\n;; >>> (largest_divisor 15)\n;; 5\n\n;; For\
    \ a given number n, find the largest number that divides n evenly, smaller than\
    \ n\n;; >>> (largest_divisor 15)\n;; 5", "  (let ((divisor (largest_divisor_helper\
    \ n)))\n    (if (zero? divisor)\n      divisor\n      (if (negative? n)\n    \
    \    (sub1 divisor)\n        (add1 divisor))))\n  (largest_divisor_helper n))\n\
    \n;; For a given number n, find the largest number that divides n evenly, smaller\
    \ than n\n;; >>> (largest_divisor_helper 15)\n;; 5", "  (let ((divisor (div n\
    \ 1)))\n    (if (zero? divisor)\n      n\n      (largest_divisor (sub1 n) (divisor\
    \ - 1))))\n)\n\n;; For a given number n, find the smallest number that divides\
    \ n evenly, larger than n\n;; >>> (smallest_divisor 15)\n;; 5", "  (let ((divisor\
    \ (div n 1)))\n    (if (zero? divisor)\n      divisor\n      (if (zero? (modulo\
    \ n divisor))\n        divisor\n        (largest_divisor (sub1 n) (modulo n divisor)))))))\n\
    \n;; For a given number n, find the largest number that divides n evenly, greater\
    \ than n\n;; >>> (largest_divisor_greater 15)\n;; 10", "  (let ((divisor (div\
    \ n 1)))\n    (if (zero? divisor)\n      n\n      (largest_divisor (sub1 n) (modulo\
    \ divisor n))))\n)\n\n;; For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n;; >>> (largest_divisor 15)\n;; 5", "  (let ((divisor\
    \ (div n 1)))\n    (if (zero? divisor)\n      divisor\n      (largest_divisor\
    \ (sub1 divisor))))\n  )\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, greater than n\n;; >>> (largest_divisor_greater_than 15)\n\
    ;; 10", "  (let ((divisors (divisors_of n)))\n    (reduce (lambda (a b) (if (zero?\
    \ b) a (a b))) 1 (cdr divisors)))\n)\n\n;; For a given number n, find the largest\
    \ number that divides n evenly, greater than n\n;; >>> (largest_divisor_greater_than\
    \ 15)\n;; 10", "  (let ((divisor (div n 1)))\n    (if (zero? divisor)\n      divisor\n\
    \      (if (zero? (modulo n divisor))\n        divisor\n        (largest_divisor\
    \ (sub1 n) (modulo n divisor)))))))\n\n;; For a given number n, find the largest\
    \ number that divides n evenly, greater than n\n;; >>> (largest_divisor_greater_than\
    \ 15)\n;; 10", "  (let ((divisors (divisors_of n)))\n    (reduce (lambda (a b)\
    \ (if (zero? b) a (a b))) 1 divisors)))\n\n;; >>> (largest_divisor 15)\n;; 5\n\
    \n;; For a given number n, find the largest number that divides n evenly, greater\
    \ than n\n;; >>> (largest_divisor_greater 15)\n;; 10", "  (let ((divisor (largest_divisor_divisor\
    \ n)))\n    (if (zero? divisor)\n      divisor\n      (if (zero? (modulo n divisor))\n\
    \        divisor\n        (largest_divisor_divisor (sub1 divisor))))))\n\n;; For\
    \ a given number n, find the largest number that divides n evenly, smaller than\
    \ n\n;; >>> (largest_divisor_divisor 15)\n;; 5", "  (let ((divisor (largest_divisor_helper\
    \ n)))\n    (if (zero? divisor)\n      divisor\n      (if (zero? (modulo n divisor))\n\
    \        divisor\n        (largest_divisor_helper (sub1 n) divisor))))\n  (largest_divisor_helper\
    \ n))\n\n;; For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n;; >>> (largest_divisor_helper 15)\n;; 5", "  (let ((divisors\
    \ (divisors_of n)))\n    (reduce\n      (lambda (a b)\n        (if (zero? a)\n\
    \          b\n          (if (zero? b)\n            a\n            (if (eq? a b)\n\
    \              a\n              (largest_divisor (quotient a b))))))\n      divisors))\n\
    \n;; >>> (largest_divisor 15)\n;; 5\n\n;; For a given number n, find the largest\
    \ number that divides n evenly, smaller than n\n;; >>> (largest_divisor 15)\n\
    ;; 5", "  (let ((divisor (div n 1)))\n    (if (zero? divisor)\n      n\n     \
    \ (largest_divisor (sub1 n) (divisor - 1))))\n)\n\n;; For a given number n, find\
    \ the largest number that divides n evenly, greater than n\n;; >>> (largest_divisor_greater_than\
    \ 15)\n;; 10", "  (let ((divisor (div n 1)))\n    (if (zero? divisor)\n      1\n\
    \      (largest_divisor (modulo n divisor))))\n)\n\n;; For a given number n, find\
    \ the largest number that divides n evenly, larger than n\n;; >>> (largest_divisor_plus\
    \ 15)\n;; 10", "  (let ((i (1)))\n    (while (< i n)\n      (if (modulo i n)\n\
    \        (return i)\n        (set! i (+ i 1)))))\n)\n\n;; For a given number n,\
    \ find the smallest number that divides n evenly, larger than n\n;; >>> (smallest_divisor\
    \ 15)\n;; 10", "  (let ((divisors (divisors_of n)))\n    (reduce\n      (lambda\
    \ (a b)\n        (if (zero? a)\n          b\n          (if (zero? b)\n       \
    \     a\n            (if (eq? a b)\n              a\n              (largest_divisor\
    \ (+ a b))))))\n      divisors))\n\n;; >>> (largest_divisor 15)\n;; 5\n\n;; For\
    \ a given number n, find the largest number that divides n evenly, smaller than\
    \ n\n;; >>> (largest_divisor 15)\n;; 5", "  (let ((divisor (div n 1)))\n    (if\
    \ (zero? divisor)\n      n\n      (largest_divisor (sub1 n) (modulo n divisor))))\n\
    )\n\n;; For a given number n, find the largest number that divides n evenly, greater\
    \ than n\n;; >>> (largest_divisor_greater 15)\n;; 10", "  (let ((i (1)))\n   \
    \ (while (< i n)\n      (if (= (modulo i n) 0)\n        (return i)\n        (set!\
    \ i (i (+ 1)))))))\n\n;; For a given number n, find the smallest number that divides\
    \ n evenly, larger than n\n;; >>> (smallest_divisor 15)\n;; 10", "  (let ((divisor\
    \ (div n 1)))\n    (if (zero? divisor)\n      divisor\n      (if (zero? (modulo\
    \ n divisor))\n        divisor\n        (largest_divisor (sub1 n) (modulo n divisor)))))))\n\
    \n;; For a given number n, find the largest number that divides n evenly, larger\
    \ than n\n;; >>> (largest_divisor_greater 15)\n;; 10", "  (let ((divisors (make-yail-list\
    \ 0)))\n    (for-each (lambda (divisor)\n               (if (modulo n divisor)\n\
    \                 (append divisors divisor)\n                 ()))\n         \
    \    (range 1 (min n divisor))))\n  (first (last divisors)))\n\n;; For a given\
    \ number n, find the largest number that divides n evenly, larger than n\n;; >>>\
    \ (largest_divisor_greater_than 15)\n;; 10", "  (let ((divisor (div n 1)))\n \
    \   (if (zero? divisor)\n      1\n      (largest_divisor (sub1 divisor))))\n \
    \ )\n\n;; >>> (largest_divisor 15)\n;; 5\n;; >>> (largest_divisor (expt 2 10))\n\
    ;; 1024\n;; >>> (largest_divisor (expt 2 100))\n;; 1048576\n;; >>> (largest_divisor\
    \ (expt 2 1000))\n;; 104857600\n;; >>> (largest_divisor (expt 2 10000))\n;; 10485760000\n\
    ;; >>> (largest_divisor (expt 2 100000))\n;; 1048576000000\n;; >>> (largest_divisor\
    \ (expt 2 1000000))\n;; 104857600000000\n;; >>> (largest_divisor (expt 2 10000000))\n\
    ;; 10485760000000000\n;; >>> (largest_divisor (expt 2 100000000))\n;; 104857600000000000\n\
    ;; >>> (largest_divisor (expt 2 1000000000))\n;; 1048576000000000000\n;; >>> (largest_divisor\
    \ (expt 2 10000000000))\n;; 10485760000000000000\n;; >>> (largest_divisor (expt\
    \ 2 100000000000))\n;; 104857600000000000000\n;; >>> (largest_divisor (expt 2\
    \ 1000000000000))\n;; 1048576000000000000000\n;; >>> (largest_divisor (expt 2\
    \ 10000000000000))\n;; 10485760000000000000000\n;; >>> (largest_divisor (expt\
    \ 2 100000000000000))\n;; 104857600000000000000000\n;; >>> (largest_divisor (expt\
    \ 2 1000000000000000))\n;; 1048576000000000000000000\n;; >>> (largest_divisor\
    \ (expt 2 10000000000000000))\n;; 10485760000000000000000000\n;; >>> (largest_divisor\
    \ (expt 2 100000000000000000))\n;; 104857600000000000000000000\n;; >>> (largest_divisor\
    \ (expt 2 10000000000000000000))\n;; 1048576000000000000000000000\n;; >>> (largest_divisor\
    \ (expt 2 10000000000000000000))\n;; 10485760000000000000000000000\n;; >>> (largest_divisor\
    \ (expt 2", "  (let ((divisors (make-yail-list 0)))\n    (for-each\n      (lambda\
    \ (divisor)\n        (if (modulo n divisor)\n            (append divisors divisor)\n\
    \            ()))\n      (range 1 (floor n divisor))))\n\n;; >>> (largest_divisor\
    \ 15)\n;; 5\n;; >>> (largest_divisor (expt 2 10))\n;; 1024", "  (let ((divisors\
    \ (make-yail-list 0)))\n    (for-each\n      (lambda (divisor)\n        (if (modulo\
    \ n divisor)\n            (append divisors divisor)\n            ()))\n      (range\
    \ 1 (max (abs n) 1))))\n\n;; >>> (largest_divisor 15)\n;; 5\n\n;; For a given\
    \ number n, find the largest number that divides n evenly, larger than n\n;; >>>\
    \ (largest_divisor 15)\n;; 10", "  (let ((divisors (divisors_of n)))\n    (reduce\
    \ (lambda (a b) (if (zero? b) a (a b))) 1 (cdr divisors))))\n\n;; For a given\
    \ number n, find the largest number that divides n evenly, greater than n\n;;\
    \ >>> (largest_divisor_greater_than 15)\n;; 10", "  (let ((divisors (divisors_of\
    \ n)))\n    (reduce (lambda (a b) (if (> a b) a b)) 1 divisors)))\n\n;; >>> (largest_divisor\
    \ 15)\n;; 5\n\n;; For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n;; >>> (largest_divisor 15)\n;; 5", "  (let ((divisors\
    \ (divisors_of n)))\n    (reduce\n      (lambda (a b)\n        (if (zero? b)\n\
    \          a\n          (if (zero? a)\n            b\n            (if (zero? (modulo\
    \ a b))\n              a\n              b))))\n      divisors)))\n\n;; For a given\
    \ number n, find the largest number that divides n evenly, larger than n\n;; >>>\
    \ (largest_divisor_plus 15)\n;; 10", "  (let ((divisor (div n 1)))\n    (if (zero?\
    \ divisor)\n      n\n      (largest_divisor (sub1 n) (divisor - 1))))\n)\n\n;;\
    \ For a given number n, find the largest number that divides n evenly, greater\
    \ than n\n;; >>> (largest_divisor_greater 15)\n;; 10", "  (let ((divisor (div\
    \ n 1)))\n    (if (zero? divisor)\n      n\n      (largest_divisor (sub1 n) (modulo\
    \ n divisor))))\n  )\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> (largest_divisor 15)\n;; 5", "  (let\
    \ ((divisor (largest_divisor_helper n)))\n    (if (zero? divisor)\n      divisor\n\
    \      (if (zero? (modulo n divisor))\n        divisor\n        (largest_divisor_helper\
    \ (sub1 n) divisor))))\n  (largest_divisor_helper n))\n\n;; For a given number\
    \ n, find the largest number that divides n evenly, smaller than n\n;; >>> (largest_divisor_helper\
    \ 15)\n;; 5", "  (let ((divisor (div n 1)))\n    (if (zero? divisor)\n      n\n\
    \      (largest_divisor (sub1 n) (divisor))))\n)\n\n;; For a given number n, find\
    \ the largest number that divides n evenly, larger than n\n;; >>> (largest_divisor_greater\
    \ 15)\n;; 10", "  (let ((divisors (divisors_of n)))\n    (reduce (lambda (a b)\
    \ (if (zero? a) b (a b))) 1 (cdr divisors)))\n)\n\n;; For a given number n, find\
    \ the largest number that divides n evenly, larger than n\n;; >>> (largest_divisor_greater_than\
    \ 15)\n;; 10", "  (let ((divisor (div n 1)))\n    (if (zero? divisor)\n      n\n\
    \      (largest_divisor (sub1 n) (divisor))))\n)\n\n;; For a given number n, find\
    \ the largest number that divides n evenly, greater than n\n;; >>> (largest_divisor_greater\
    \ 15)\n;; 10", "  (let ((divisors (make-vector n 0)))\n    (let ((i 0))\n    \
    \  (while (< i n)\n        (set! i (modulo i n))\n        (vector-set! divisors\
    \ i)))))\n\n;; For a given number n, find the largest number that divides n evenly,\
    \ greater than n\n;; >>> (largest_divisor_greater 15)\n;; 10", "  (let ((i (1)))\n\
    \    (while (< i n)\n      (if (= (modulo i n) 0)\n        (return i)\n      \
    \  (set! i (i (+ 1)))))))\n\n;; For a given number n, find the largest number\
    \ that divides n evenly, larger than n\n;; >>> (largest_divisor_larger 15)\n;;\
    \ 10", "  (let ((divisor (div n 1)))\n    (if (zero? divisor)\n      1\n     \
    \ (largest_divisor (modulo n divisor))))\n)\n\n;; For a given number n, find the\
    \ smallest number that divides n evenly, larger than n\n;; >>> (smallest_divisor\
    \ 15)\n;; 10", "  (let ((divisors (divisors_of n)))\n    (reduce (lambda (a b)\
    \ (if (> a b) a b)) 1 divisors)))\n\n;; >>> (largest_divisor 15)\n;; 5\n\n;; For\
    \ a given number n, find the largest number that divides n evenly, larger than\
    \ n\n;; >>> (largest_divisor_larger 15)\n;; 10", "  (let ((divisor (div n 1)))\n\
    \    (if (zero? divisor)\n      n\n      (largest_divisor (sub1 n) (modulo n divisor))))\n\
    )\n\n;; For a given number n, find the largest number that divides n evenly, greater\
    \ than n\n;; >>> (largest_divisor_greater_than 15)\n;; 10", "  (let ((divisor\
    \ (div n 1)))\n    (if (zero? divisor)\n      n\n      (largest_divisor (sub1\
    \ n) (divisor))))\n)\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, greater than n\n;; >>> (largest_divisor_greater_than 15)\n\
    ;; 10", "  (let ((divisors (divisors_of n)))\n    (reduce\n      (lambda (a b)\n\
    \        (if (zero? a)\n          b\n          (if (zero? b)\n            a\n\
    \            (if (eq? a b)\n              a\n              (largest_divisor (+\
    \ a b))))))\n      divisors))\n\n;; >>> (largest_divisor 15)\n;; 5\n;; >>> (largest_divisor\
    \ (expt 2 16))\n;; 65536\n;; >>> (largest_divisor (expt 2 17))\n;; 131072\n;;\
    \ >>> (largest_divisor (expt 2 18))\n;; 262144\n;; >>> (largest_divisor (expt\
    \ 2 19))\n;; 524288\n;; >>> (largest_divisor (expt 2 20))\n;; 1048576\n;; >>>\
    \ (largest_divisor (expt 2 21))\n;; 2097152\n;; >>> (largest_divisor (expt 2 22))\n\
    ;; 4194304\n;; >>> (largest_divisor (expt 2 23))\n;; 8388608\n;; >>> (largest_divisor\
    \ (expt 2 24))\n;; 16777216\n;; >>> (largest_divisor (expt 2 25))\n;; 33554432\n\
    ;; >>> (largest_divisor (expt 2 26))\n;; 67108864\n;; >>> (largest_divisor (expt\
    \ 2 27))\n;; 134217728\n;; >>> (largest_divisor (expt 2 28))\n;; 268435456\n;;\
    \ >>> (largest_divisor (expt 2 29))\n;; 536870912\n;; >>> (largest_divisor (expt\
    \ 2 30))\n;; 1073741824\n;; >>> (largest_divisor (expt 2 31))\n;; 2147483648\n\
    ;; >>> (largest_divisor (expt 2 32))\n;; 4294967296\n;; >>> (largest_divisor (expt\
    \ 2 33))\n;; 8589934592\n;; >>> (largest_divisor (expt 2 34))\n;; 17179869184\n\
    ;; >>> (largest_divisor (expt 2 35))\n;; 34359738", "  (let ((divisor (div n 1)))\n\
    \    (if (zero? divisor)\n      n\n      (largest_divisor (sub1 n) (modulo n divisor))))\n\
    )\n\n;; For a given number n, find the largest number that divides n evenly, greater\
    \ than n\n;; >>> (largest_divisor_greater 15)\n;; 10", "  (let ((divisors (make-yail-list\
    \ 0)))\n    (for-each (lambda (divisor)\n               (if (modulo n divisor)\n\
    \                 (append divisors divisor)\n                 ()))\n      (range\
    \ 1 (min n divisor))))\n  (first (first divisors)))\n\n;; For a given number n,\
    \ find the largest number that divides n evenly, larger than n\n;; >>> (largest_divisor_greater_than\
    \ 15)\n;; 10", "  (let ((divisors (divisors_of n)))\n    (reduce (lambda (a b)\
    \ (if (zero? b) a (a b))) 1 divisors)))\n\n;; For a given number n, find the smallest\
    \ number that divides n evenly, larger than n\n;; >>> (smallest_divisor 15)\n\
    ;; 5", "  (let ((divisor (div n 1)))\n    (if (zero? divisor)\n      n\n     \
    \ (largest_divisor (sub1 n) (modulo n divisor))))\n  )\n\n;; >>> (largest_divisor\
    \ 15)\n;; 5\n;; >>> (largest_divisor (expt 2 10))\n;; 1024", "  (let ((divisor\
    \ (largest_divisor_helper n)))\n    (if (zero? divisor)\n      divisor\n     \
    \ (if (zero? (modulo n divisor))\n        divisor\n        (largest_divisor_helper\
    \ (sub1 n) divisor))))\n  (largest_divisor_helper n))\n\n;; For a given number\
    \ n, find the largest number that divides n evenly, smaller than n\n;; >>> (largest_divisor_helper\
    \ 15)\n;; 5", "  (let ((divisor (div n 1)))\n    (if (zero? divisor)\n      1\n\
    \      (largest_divisor (sub1 divisor))))\n  )\n\n;; >>> (largest_divisor 15)\n\
    ;; 5\n;; >>> (largest_divisor (expt 2 10))\n;; 1024\n;; >>> (largest_divisor (expt\
    \ 2 100))\n;; 1048576\n;; >>> (largest_divisor (expt 2 1000))\n;; 104857600\n\
    ;; >>> (largest_divisor (expt 2 10000))\n;; 10485760000\n;; >>> (largest_divisor\
    \ (expt 2 100000))\n;; 1048576000000\n;; >>> (largest_divisor (expt 2 1000000))\n\
    ;; 10485760000000\n;; >>> (largest_divisor (expt 2 10000000))\n;; 104857600000000\n\
    ;; >>> (largest_divisor (expt 2 100000000))\n;; 10485760000000000\n;; >>> (largest_divisor\
    \ (expt 2 1000000000))\n;; 104857600000000000\n;; >>> (largest_divisor (expt 2\
    \ 10000000000))\n;; 1048576000000000000\n;; >>> (largest_divisor (expt 2 100000000000))\n\
    ;; 10485760000000000000\n;; >>> (largest_divisor (expt 2 1000000000000))\n;; 104857600000000000000\n\
    ;; >>> (largest_divisor (expt 2 10000000000000))\n;; 1048576000000000000000\n\
    ;; >>> (largest_divisor (expt 2 100000000000000))\n;; 1048576000000000000000\n\
    ;; >>> (largest_divisor (expt 2 1000000000000000))\n;; 1048576000000000000000\n\
    ;; >>> (largest_divisor (expt 2 10000000000000000))\n;; 1048576000000000000000\n\
    ;; >>> (largest_divisor (expt 2 100000000000000000))\n;; 1048576000000000000000\n\
    ;; >>> (largest_divisor (expt 2 10000000000000000000))\n;; 1048576000000000000000\n\
    ;; >>> (largest_divisor (expt 2 10000000000000000000))\n;; 1048576000000000000000\n\
    ;; >>> (largest_divisor (expt 2 10000000000000000000))\n;;", "  (let ((divisor\
    \ (largest_divisor_helper n)))\n    (if (zero? divisor)\n      divisor\n     \
    \ (if (zero? (modulo n divisor))\n        divisor\n        (largest_divisor_helper\
    \ (sub1 n) divisor))))\n  (largest_divisor_helper n))\n\n;; For a given number\
    \ n, find the largest number that divides n evenly, smaller than n\n;; >>> (largest_divisor_helper\
    \ 15)\n;; 5", "  (let ((divisors (make-vector n 0)))\n    (let ((i 0))\n     \
    \ (while (< i n)\n        (set! i (modulo i n))\n        (vector-set! divisors\
    \ i))\n      (vector-sort divisors)\n      (vector-ref divisors n)))\n  (largest_divisor\
    \ 0))\n\n;; For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n;; >>> (largest_divisor 15)\n;; 5", "  (let ((divisor (largest_divisor_helper\
    \ n)))\n    (if (zero? divisor)\n      divisor\n      (if (negative? divisor)\n\
    \        (- divisor)\n        divisor))))\n\n;; Helper function for largest_divisor\n\
    ;; >>> (largest_divisor_helper 15)\n;; 5", "  (let ((divisor (div n 1)))\n   \
    \ (if (zero? divisor)\n      1\n      (largest_divisor (sub1 divisor))))\n  )\n\
    \n;; >>> (largest_divisor 15)\n;; 5\n;; >>> (largest_divisor (expt 2 10))\n;;\
    \ 1024\n;; >>> (largest_divisor (expt 2 100))\n;; 1048576\n;; >>> (largest_divisor\
    \ (expt 2 1000))\n;; 104857600\n;; >>> (largest_divisor (expt 2 10000))\n;; 10485760000\n\
    ;; >>> (largest_divisor (expt 2 100000))\n;; 104857600000000\n;; >>> (largest_divisor\
    \ (expt 2 1000000))\n;; 10485760000000000\n;; >>> (largest_divisor (expt 2 10000000))\n\
    ;; 1048576000000000000\n;; >>> (largest_divisor (expt 2 100000000))\n;; 1048576000000000000000\n\
    ;; >>> (largest_divisor (expt 2 1000000000))\n;; 104857600000000000000000\n;;\
    \ >>> (largest_divisor (expt 2 10000000000))\n;; 104857600000000000000000\n;;\
    \ >>> (largest_divisor (expt 2 100000000000))\n;; 1048576000000000000000000\n\
    ;; >>> (largest_divisor (expt 2 1000000000000))\n;; 10485760000000000000000000\n\
    ;; >>> (largest_divisor (expt 2 10000000000000))\n;; 104857600000000000000000000\n\
    ;; >>> (largest_divisor (expt 2 100000000000000))\n;; 1048576000000000000000000000\n\
    ;; >>> (largest_divisor (expt 2 1000000000000000))\n;; 10485760000000000000000000000\n\
    ;; >>> (largest_divisor (expt 2 10000000000000000))\n;; 104857600000000000000000000000\n\
    ;; >>> (largest_divisor (expt 2 100000000000000000))\n;; 10485760000000000000000000000000\n\
    ;; >>> (largest_divisor (expt 2 10000000000000000000))\n;; 104857600000000000000000000000000\n\
    ;; >>> (largest_divisor (expt 2 10000000000000000000))\n;; 1048576000000000000000000000000000\n\
    ;; >>> (", "  (let ((divisors (divisors_of n)))\n    (reduce (lambda (a b) (if\
    \ (zero? b) a (a b))) 1 divisors)))\n\n;; For a given number n, find the largest\
    \ number that divides n evenly, larger than n\n;; >>> (largest_divisor_larger\
    \ 15)\n;; 10", "  (let ((divisors (divisors_of n)))\n    (reduce\n      (lambda\
    \ (a b)\n        (if (zero? a)\n          b\n          (if (zero? b)\n       \
    \     a\n            (if (zero? (modulo a b))\n              a\n             \
    \ b))))\n      divisors)))\n\n;; For a given number n, find the largest number\
    \ that divides n evenly, smaller than n\n;; >>> (largest_divisor 15)\n;; 5", " \
    \ (let ((divisor (div n 1)))\n    (if (zero? divisor)\n      n\n      (largest_divisor\
    \ (sub1 n) (modulo n divisor))))\n)\n\n;; For a given number n, find the smallest\
    \ number that divides n evenly, larger than n\n;; >>> (smallest_divisor 15)\n\
    ;; 10", "  (let ((divisor (div n 1)))\n    (if (zero? divisor)\n      n\n    \
    \  (largest_divisor (sub1 n) (divisor))))\n  )\n\n;; For a given number n, find\
    \ the smallest number that divides n evenly, larger than n\n;; >>> (smallest_divisor\
    \ 15)\n;; 5", "  (let ((divisor (div n 1)))\n    (if (zero? divisor)\n      n\n\
    \      (largest_divisor (sub1 n) (modulo n divisor))))\n)\n\n;; For a given number\
    \ n, find the largest number that divides n evenly, greater than n\n;; >>> (largest_divisor_greater_than\
    \ 15)\n;; 10", "  (let ((divisor (div n 1)))\n    (if (zero? divisor)\n      n\n\
    \      (largest_divisor (sub1 n) (divisor - 1))))\n)\n\n;; For a given number\
    \ n, find the largest number that divides n evenly, greater than n\n;; >>> (largest_divisor_greater\
    \ 15)\n;; 10", "  (let ((divisor (div n 1)))\n    (if (zero? divisor)\n      n\n\
    \      (largest_divisor (sub1 n) (modulo n divisor))))\n)\n\n;; For a given number\
    \ n, find the largest number that divides n evenly, larger than n\n;; >>> (largest_divisor_plus\
    \ 15)\n;; 10", "  (let ((divisor (largest_divisor_helper n)))\n    (if (zero?\
    \ divisor)\n      divisor\n      (if (negative? n)\n        (- divisor)\n    \
    \    (divisor))))\n  (largest_divisor_helper n))\n\n;; Helper function for largest_divisor\n\
    ;; >>> (largest_divisor_helper 15)\n;; 5", "  (let ((divisors (make-yail-list\
    \ 0)))\n    (define (helper n divisors)\n      (cond\n        [(zero? n) (car\
    \ divisors)]\n        [else\n          (helper (quotient n divisors)\n       \
    \     (append divisors (cons (quotient n divisors))))]))\n    (helper n divisors)))\n\
    \n;; >>> (largest_divisor 15)\n;; 5\n;; >>> (largest_divisor (expt 2 100))\n;;\
    \ 251641\n;; >>> (largest_divisor (expt 2 100))\n;; 251641\n;; >>> (largest_divisor\
    \ (expt 2 100))\n;; 251641\n;; >>> (largest_divisor (expt 2 100))\n;; 251641\n\
    ;; >>> (largest_divisor (expt 2 100))\n;; 251641\n;; >>> (largest_divisor (expt\
    \ 2 100))\n;; 251641\n;; >>> (largest_divisor (expt 2 100))\n;; 251641\n;; >>>\
    \ (largest_divisor (expt 2 100))\n;; 251641\n;; >>> (largest_divisor (expt 2 100))\n\
    ;; 251641\n;; >>> (largest_divisor (expt 2 100))\n;; 251641\n;; >>> (largest_divisor\
    \ (expt 2 100))\n;; 251641\n;; >>> (largest_divisor (expt 2 100))\n;; 251641\n\
    ;; >>> (largest_divisor (expt 2 100))\n;; 251641\n;; >>> (largest_divisor (expt\
    \ 2 100))\n;; 251641\n;; >>> (largest_divisor (expt 2 100))\n;; 251641\n;; >>>\
    \ (largest_divisor (expt 2 100))\n;; 251641\n;; >>> (largest_divisor (expt 2 100))\n\
    ;; 251641\n;; >>> (largest_divisor (expt 2 100))\n;; 251641\n;; >>> (largest_divisor\
    \ (expt 2 100))\n;; 251641\n;; >>> (largest_divisor (expt 2 100))\n;; 251641\n\
    ;; >>>", "  (let ((divisors (divisors_of n)))\n    (reduce\n      (lambda (a b)\n\
    \        (if (zero? a)\n          b\n          (if (zero? b)\n            a\n\
    \            (if (eq? a b)\n              a\n              (largest_divisor (+\
    \ a b))))))\n      divisors)))\n\n;; For a given number n, find the largest number\
    \ that divides n evenly, smaller than n\n;; >>> (largest_divisor 15)\n;; 5", " \
    \ (let ((divisor (div n 1)))\n    (cond\n      ((= divisor 1) 1)\n      ((< divisor\
    \ n) n)\n      (else (largest_divisor (divisor - 1)))))\n)\n\n;; For a given number\
    \ n, find the largest number that divides n evenly, larger than n\n;; >>> (largest_divisor_greater_than\
    \ 15)\n;; 10", "  (let ((divisors (make-vector n 0)))\n    (let ((i 0))\n    \
    \  (while (< i n)\n        (set! i (modulo i n))\n        (vector-set! divisors\
    \ i)))))\n\n;; For a given number n, find the largest number that divides n evenly,\
    \ greater than n\n;; >>> (largest_divisor_greater 15)\n;; 10", "  (let ((divisor\
    \ (div n 1)))\n    (if (zero? divisor)\n      n\n      (largest_divisor (sub1\
    \ n) (divisor - 1))))\n)\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, larger than n\n;; >>> (largest_divisor_greater 15)\n;; 10",
  "  (let ((divisor (div n 1)))\n    (if (zero? divisor)\n      n\n      (largest_divisor\
    \ (sub1 n) (modulo n divisor))))\n  )\n\n;; For a given number n, find the largest\
    \ number that divides n evenly, smaller than n\n;; >>> (largest_divisor 15)\n\
    ;; 5", "  (let ((divisor (div n 1)))\n    (if (zero? divisor)\n      1\n     \
    \ (largest_divisor (modulo n divisor))))\n  )\n\n;; For a given number n, find\
    \ the smallest number that divides n evenly, larger than n\n;; >>> (smallest_divisor\
    \ 15)\n;; 10", "  (let ((divisor (div n 1)))\n    (cond\n      ((= divisor 1)\
    \ 1)\n      ((< divisor n) n)\n      (else (largest_divisor (divisor - 1)))))\n\
    )\n\n;; For a given number n, find the largest number that divides n evenly, larger\
    \ than n\n;; >>> (largest_divisor_greater 15)\n;; 10", "  (let ((divisor (div\
    \ n 1)))\n    (if (zero? divisor)\n      divisor\n      (if (negative? n)\n  \
    \      (sub1 divisor)\n        (largest_divisor (sub1 divisor)))))\n)\n\n;; For\
    \ a given number n, find the largest number that divides n evenly, larger than\
    \ n\n;; >>> (largest_divisor_plus 15)\n;; 10", "  (let ((divisors (divisors_of\
    \ n)))\n    (reduce (lambda (a b) (if (> b a) a b)) 1 divisors)))\n\n;; >>> (largest_divisor\
    \ 15)\n;; 5\n\n;; For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n;; >>> (largest_divisor 15)\n;; 5", "  (let ((divisors\
    \ (divisors_of n)))\n    (reduce\n      (lambda (a b)\n        (if (zero? a)\n\
    \          b\n          (if (zero? b)\n            a\n            (if (not (zero?\
    \ (modulo a b)))\n              (cons a b)\n              (largest_divisor b))))))\n\
    \  (largest_divisor n)))\n\n;; >>> (largest_divisor 15)\n;; 5\n;; >>> (largest_divisor\
    \ (expt 2 10))\n;; 10\n;; >>> (largest_divisor (expt 2 100))\n;; 100\n;; >>> (largest_divisor\
    \ (expt 2 1000))\n;; 1000\n;; >>> (largest_divisor (expt 2 10000))\n;; 10000\n\
    ;; >>> (largest_divisor (expt 2 100000))\n;; 100000\n;; >>> (largest_divisor (expt\
    \ 2 1000000))\n;; 1000000\n;; >>> (largest_divisor (expt 2 10000000))\n;; 10000000\n\
    ;; >>> (largest_divisor (expt 2 100000000))\n;; 100000000\n;; >>> (largest_divisor\
    \ (expt 2 1000000000))\n;; 1000000000\n;; >>> (largest_divisor (expt 2 10000000000))\n\
    ;; 10000000000\n;; >>> (largest_divisor (expt 2 100000000000))\n;; 100000000000\n\
    ;; >>> (largest_divisor (expt 2 1000000000000))\n;; 1000000000000\n;; >>> (largest_divisor\
    \ (expt 2 10000000000000))\n;; 10000000000000\n;; >>> (largest_divisor (expt 2\
    \ 100000000000000))\n;; 100000000000000\n;; >>> (largest_divisor (expt 2 1000000000000000))\n\
    ;; 1000000000000000\n;; >>> (largest_divisor (expt 2 10000000000000000))\n;; 10000000000000000\n\
    ;; >>> (largest_divisor (expt 2 100000000000000000))\n;; 100000000000000000\n\
    ;; >>> (largest_divisor (expt 2 1000000000000000000))\n;; 1000000000000000000\n\
    ;; >>> (largest_divisor (expt 2 10000000000000000000))\n;; 10000000000000000000\n\
    ;; >>> (largest_divisor (expt", "  (let ((divisor (div n 1)))\n    (if (zero?\
    \ divisor)\n      n\n      (largest_divisor (sub1 n) (modulo n divisor))))\n)\n\
    \n;; For a given number n, find the largest number that divides n evenly, larger\
    \ than n\n;; >>> (largest_divisor_greater 15)\n;; 10", "  (let ((divisors (divisors_of\
    \ n)))\n    (reduce (lambda (a b) (if (zero? b) a (a b))) 1 (cdr divisors)))\n\
    )\n\n;; For a given number n, find the largest number that divides n evenly, larger\
    \ than n\n;; >>> (largest_divisor_greater_than 15)\n;; 10", "  (let ((divisor\
    \ (largest_divisor_below n)))\n    (if (zero? divisor)\n      divisor\n      (if\
    \ (zero? (modulo n divisor))\n        divisor\n        (largest_divisor_below\
    \ divisor))))\n  (largest_divisor_below n))\n\n;; For a given number n, find the\
    \ largest number that divides n evenly, smaller than n\n;; >>> (largest_divisor_below\
    \ 15)\n;; 5", "  (let ((divisor (div n 1)))\n    (if (zero? divisor)\n      n\n\
    \      (largest_divisor (sub1 n) (modulo n divisor))))\n  )\n\n;; For a given\
    \ number n, find the largest number that divides n evenly, larger than n\n;; >>>\
    \ (largest_divisor_plus 15)\n;; 10", "  (let ((divisor (div n 1)))\n    (if (zero?\
    \ divisor)\n      n\n      (largest_divisor (sub1 divisor)))))\n\n;; >>> (largest_divisor\
    \ 15)\n;; 5\n;; >>> (largest_divisor (expt 2 10))\n;; 1024", "  (let ((divisors\
    \ (make-yail-list 0)))\n    (define (helper n divisors)\n      (cond\n       \
    \ ((zero? n) 1)\n        ((= n 1) 1)\n        (else\n          (set-car! divisors\
    \ (helper (- n 1) (cdr divisors)))\n          (helper n (cdr divisors)))))\n \
    \   (helper n divisors)))\n\n;; >>> (largest_divisor 15)\n;; 5\n\n;; For a given\
    \ number n, find the largest number that divides n evenly, greater than n\n;;\
    \ >>> (largest_divisor 15)\n;; 10", "  (let ((divisor (div n 1)))\n    (if (zero?\
    \ divisor)\n      1\n      (largest_divisor (sub1 divisor))))\n)\n\n;; For a given\
    \ number n, find the largest number that divides n evenly, greater than n\n;;\
    \ >>> (largest_divisor_greater_than 15)\n;; 10", "  (let ((divisors (divisors_of\
    \ n)))\n    (reduce (lambda (a b) (if (> a b) a b)) 1 divisors)))\n\n;; >>> (largest_divisor\
    \ 15)\n;; 5\n\n;; For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n;; >>> (largest_divisor 15)\n;; 5", "  (let ((divisor\
    \ (div n 1)))\n    (if (zero? divisor)\n      1\n      (largest_divisor (sub1\
    \ divisor))))\n  )\n\n;; >>> (largest_divisor 15)\n;; 5\n;; >>> (largest_divisor\
    \ (expt 2 10))\n;; 1024\n;; >>> (largest_divisor (expt 2 100))\n;; 1048576\n;;\
    \ >>> (largest_divisor (expt 2 1000))\n;; 104857600\n;; >>> (largest_divisor (expt\
    \ 2 10000))\n;; 10485760000\n;; >>> (largest_divisor (expt 2 100000))\n;; 104857600000000\n\
    ;; >>> (largest_divisor (expt 2 1000000))\n;; 10485760000000000\n;; >>> (largest_divisor\
    \ (expt 2 10000000))\n;; 1048576000000000000\n;; >>> (largest_divisor (expt 2\
    \ 100000000))\n;; 1048576000000000000000\n;; >>> (largest_divisor (expt 2 1000000000))\n\
    ;; 104857600000000000000000\n;; >>> (largest_divisor (expt 2 10000000000))\n;;\
    \ 104857600000000000000000\n;; >>> (largest_divisor (expt 2 100000000000))\n;;\
    \ 104857600000000000000000\n;; >>> (largest_divisor (expt 2 1000000000000))\n\
    ;; 104857600000000000000000\n;; >>> (largest_divisor (expt 2 10000000000000))\n\
    ;; 104857600000000000000000\n;; >>> (largest_divisor (expt 2 100000000000000))\n\
    ;; 104857600000000000000000\n;; >>> (largest_divisor (expt 2 1000000000000000))\n\
    ;; 104857600000000000000000\n;; >>> (largest_divisor (expt 2 10000000000000000))\n\
    ;; 104857600000000000000000\n;; >>> (largest_divisor (expt 2 100000000000000000))\n\
    ;; 104857600000000000000000\n;; >>> (largest_divisor (expt 2 1000000000000000000))\n\
    ;; 104857600000000000000000\n;; >>> (largest_divisor (expt 2 10000000000000000000))\n\
    ;; 104857600000000000000000\n;; >>> (largest_divisor", "  (let ((divisors (divisors_of\
    \ n)))\n    (reduce\n      (lambda (a b)\n        (if (zero? a)\n          b\n\
    \          (if (zero? b)\n            a\n            (if (eq? a b)\n         \
    \     a\n              (if (zero? a)\n                b\n                (largest_divisor\
    \ (quotient a b))))))))))\n\n;; >>> (largest_divisor 15)\n;; 5\n;; >>> (largest_divisor\
    \ 5)\n;; 5\n;; >>> (largest_divisor 3)\n;; 3\n;; >>> (largest_divisor 2)\n;; 2\n\
    ;; >>> (largest_divisor 1)\n;; 1\n;; >>> (largest_divisor 0)\n;; 0\n;; >>> (largest_divisor\
    \ -1)\n;; -1\n;; >>> (largest_divisor -2)\n;; -2\n;; >>> (largest_divisor -3)\n\
    ;; -3\n;; >>> (largest_divisor -4)\n;; -4\n;; >>> (largest_divisor -5)\n;; -5\n\
    ;; >>> (largest_divisor -6)\n;; -6\n;; >>> (largest_divisor -7)\n;; -7\n;; >>>\
    \ (largest_divisor -8)\n;; -8\n;; >>> (largest_divisor -9)\n;; -9\n;; >>> (largest_divisor\
    \ -10)\n;; -10\n;; >>> (largest_divisor -11)\n;; -11\n;; >>> (largest_divisor\
    \ -12)\n;; -12\n;; >>> (largest_divisor -13)\n;; -13\n;; >>> (largest_divisor\
    \ -14)\n;; -14\n;; >>> (largest_divisor -15)\n;; -15\n;; >>> (largest_divisor\
    \ -16)\n;; -16\n;; >>> (largest_divisor -17)\n;; -17\n;; >>> (largest_divisor\
    \ -18)\n;; -18\n;; >>> (largest_divisor -19)\n;; -19\n;; >>> (largest_divisor\
    \ -20)\n;; -20\n;; >>> (largest_divisor -21)\n", "  (let ((divisors (divisors_of\
    \ n)))\n    (reduce (lambda (a b) (if (zero? b) a (a b))) 1 divisors)))\n\n;;\
    \ For a given number n, find the largest number that divides n evenly, greater\
    \ than n\n;; >>> (largest_divisor_greater_than 15)\n;; 10", "  (let ((divisors\
    \ (divisors n)))\n    (reduce (lambda (a b) (if (> b 0) (cons a b) b))\n     \
    \  (cdr divisors)\n       (car divisors))))\n\n;; For a given number n, find the\
    \ smallest number that divides n evenly, larger than n\n;; >>> (smallest_divisor\
    \ 15)\n;; 5", "  (let ((divisors (make-yail-list 0)))\n    (define (divisor n)\n\
    \      (cond\n        ((zero? n) 1)\n        ((= n 1) 1)\n        (else\n    \
    \      (set-car! (cdr divisors)\n            (if (> (car divisors) n)\n      \
    \        (car divisors)\n              (largest_divisor (- n (car divisors)))\n\
    \            )\n          )\n        )\n      )\n    )\n    (set-cdr! divisors\
    \ (divisor n))\n    (car divisors)\n  )\n)\n\n;; For a given number n, find the\
    \ largest number that divides n evenly, larger than n\n;; >>> (largest_divisor_greater\
    \ 15)\n;; 10", "  (let ((i (1)))\n    (while (< n i)\n      (if (modulo i n)\n\
    \t(return i)\n\t(set! i (+ i 1)))))\n)\n\n;; For a given number n, find the smallest\
    \ number that divides n evenly, larger than n\n;; >>> (smallest_divisor 15)\n\
    ;; 5", "  (let ((divisors (make-vector n 0)))\n    (let ((i 0))\n      (while\
    \ (< i n)\n        (set! i (modulo i n))\n        (vector-set! divisors i)))))\n\
    \n;; For a given number n, find the smallest number that divides n evenly, larger\
    \ than n\n;; >>> (smallest_divisor 15)\n;; 5", "  (let ((divisors (divisors_of\
    \ n)))\n    (reduce\n      (lambda (a b)\n        (if (zero? b)\n            a\n\
    \            (if (zero? a)\n                b\n                (if (zero? (modulo\
    \ a b))\n                    a\n                    (largest_divisor (modulo a\
    \ b))))))\n      divisors)))\n\n;; For a given number n, find the largest number\
    \ that divides n evenly, larger than n\n;; >>> (largest_divisor_greater_than 15)\n\
    ;; 10", "  (let ((divisor (largest_divisor_helper n)))\n    (if (zero? divisor)\n\
    \      divisor\n      (if (negative? divisor)\n        (- divisor)\n        divisor))))\n\
    \n;; Helper function for largest_divisor\n;; >>> (largest_divisor_helper 15)\n\
    ;; 5", "  (let ((divisor (largest_divisor_divisor n)))\n    (if (zero? divisor)\n\
    \      divisor\n      (if (zero? (modulo n divisor))\n        divisor\n      \
    \  (largest_divisor_divisor (sub1 n divisor))))))\n\n;; For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n;; >>> (largest_divisor_divisor\
    \ 15)\n;; 5", "  (let ((divisor (div n 1)))\n    (if (zero? divisor)\n      1\n\
    \      (largest_divisor (sub1 divisor))))\n  )\n\n;; >>> (largest_divisor 15)\n\
    ;; 5\n;; >>> (largest_divisor (expt 2 10))\n;; 1024\n;; >>> (largest_divisor (expt\
    \ 2 100))\n;; 1048576\n;; >>> (largest_divisor (expt 2 1000))\n;; 104857600\n\
    ;; >>> (largest_divisor (expt 2 10000))\n;; 10485760000\n;; >>> (largest_divisor\
    \ (expt 2 100000))\n;; 1048576000000\n;; >>> (largest_divisor (expt 2 1000000))\n\
    ;; 10485760000000\n;; >>> (largest_divisor (expt 2 10000000))\n;; 104857600000000\n\
    ;; >>> (largest_divisor (expt 2 100000000))\n;; 10485760000000000\n;; >>> (largest_divisor\
    \ (expt 2 1000000000))\n;; 104857600000000000\n;; >>> (largest_divisor (expt 2\
    \ 10000000000))\n;; 1048576000000000000\n;; >>> (largest_divisor (expt 2 100000000000))\n\
    ;; 10485760000000000000\n;; >>> (largest_divisor (expt 2 1000000000000))\n;; 104857600000000000000\n\
    ;; >>> (largest_divisor (expt 2 10000000000000))\n;; 1048576000000000000000\n\
    ;; >>> (largest_divisor (expt 2 100000000000000))\n;; 1048576000000000000000\n\
    ;; >>> (largest_divisor (expt 2 1000000000000000))\n;; 1048576000000000000000\n\
    ;; >>> (largest_divisor (expt 2 10000000000000000))\n;; 1048576000000000000000\n\
    ;; >>> (largest_divisor (expt 2 100000000000000000))\n;; 1048576000000000000000\n\
    ;; >>> (largest_divisor (expt 2 10000000000000000000))\n;; 1048576000000000000000\n\
    ;; >>> (largest_divisor (expt 2 10000000000000000000))\n;; 1048576000000000000000\n\
    ;; >>> (largest_divisor (expt 2 10000000000000000000))\n;;", "  (let ((divisor\
    \ (div n 1)))\n    (if (zero? divisor)\n      n\n      (largest_divisor (sub1\
    \ n) (modulo divisor n))))\n)\n\n;; For a given number n, find the largest number\
    \ that divides n evenly, greater than n\n;; >>> (largest_divisor_greater 15)\n\
    ;; 10", "  (let ((divisor (div n 1)))\n    (if (zero? divisor)\n      divisor\n\
    \      (if (zero? (modulo n divisor))\n        divisor\n        (largest_divisor\
    \ (sub1 n) divisor))))\n  (largest_divisor 1))\n\n;; For a given number n, find\
    \ the largest number that divides n evenly, greater than n\n;; >>> (largest_divisor_greater\
    \ 15)\n;; 10", "  (let ((divisors (divisors_of n)))\n    (reduce (lambda (a b)\
    \ (if (zero? b) a (a b))) 1 (cdr divisors)))\n)\n\n;; For a given number n, find\
    \ the largest number that divides n evenly, larger than n\n;; >>> (largest_divisor_greater\
    \ 15)\n;; 10", "  (let ((divisor (div n 1)))\n    (if (zero? divisor)\n      n\n\
    \      (largest_divisor (sub1 divisor))))\n  )\n\n;; >>> (largest_divisor 15)\n\
    ;; 5\n\n;; >>> (largest_divisor (expt 2 10))\n;; 1024\n\n;; >>> (largest_divisor\
    \ (expt 2 100))\n;; 1048576\n\n;; >>> (largest_divisor (expt 2 1000))\n;; 104857600\n\
    \n;; >>> (largest_divisor (expt 2 10000))\n;; 1048576000\n\n;; >>> (largest_divisor\
    \ (expt 2 100000))\n;; 10485760000\n\n;; >>> (largest_divisor (expt 2 1000000))\n\
    ;; 1048576000000\n\n;; >>> (largest_divisor (expt 2 10000000))\n;; 10485760000000\n\
    \n;; >>> (largest_divisor (expt 2 100000000))\n;; 104857600000000\n\n;; >>> (largest_divisor\
    \ (expt 2 1000000000))\n;; 10485760000000000\n\n;; >>> (largest_divisor (expt\
    \ 2 10000000000))\n;; 104857600000000000\n\n;; >>> (largest_divisor (expt 2 100000000000))\n\
    ;; 1048576000000000000\n\n;; >>> (largest_divisor (expt 2 1000000000000))\n;;\
    \ 10485760000000000000\n\n;; >>> (largest_divisor (expt 2 10000000000000))\n;;\
    \ 104857600000000000000\n\n;; >>> (largest_divisor (expt 2 100000000000000))\n\
    ;; 1048576000000000000000\n\n;; >>> (largest_divisor (expt 2 1000000000000000))\n\
    ;; 1048576000000000000000\n\n;; >>> (largest_divisor (expt 2 10000000000000000))\n\
    ;; 1048576000000000000000\n\n;; >>> (largest_divisor (expt 2 100000000000000000))\n\
    ;; 1048576000000000000000\n\n;; >>> (largest_divisor (expt 2 10000000000000000000))\n\
    ;; 1048576000000000000000\n\n;; >>> (largest_divisor (expt 2 10000000000000000000))\n\
    ;; 1048576000000000000000\n\n", "  (let ((divisor (div n 1)))\n    (if (zero?\
    \ divisor)\n      n\n      (largest_divisor (sub1 n) (divisor - 1))))\n)\n\n;;\
    \ For a given number n, find the largest number that divides n evenly, greater\
    \ than n\n;; >>> (largest_divisor_greater 15)\n;; 10", "  (let ((divisors (divisors_of\
    \ n)))\n    (reduce\n      (lambda (a b)\n        (if (zero? a)\n          b\n\
    \          (if (zero? b)\n            a\n            (if (not (zero? (modulo a\
    \ b)))\n              a\n              b))))\n      divisors)))\n\n;; For a given\
    \ number n, find the largest number that divides n evenly, larger than n\n;; >>>\
    \ (largest_divisor_greater_than 15)\n;; 10", "  (let ((divisors (divisors_of n)))\n\
    \    (reduce (lambda (a b) (if (> a b) a b)) 1 divisors)))\n\n;; >>> (largest_divisor\
    \ 15)\n;; 5\n;; >>> (largest_divisor (expt 2 10))\n;; 1024", "  (let ((divisor\
    \ (div n 1)))\n    (if (zero? divisor)\n      divisor\n      (if (zero? (modulo\
    \ n divisor))\n        divisor\n        (largest_divisor (sub1 n) (modulo n divisor)))))))\n\
    \n;; For a given number n, find the largest number that divides n evenly, greater\
    \ than n\n;; >>> (largest_divisor_greater 15)\n;; 10", "  (let ((divisor (largest_divisor_helper\
    \ n)))\n    (if (zero? divisor)\n      divisor\n      (if (negative? divisor)\n\
    \        (negate divisor)\n        divisor))))\n\n;; Helper function for largest_divisor\n\
    ;; >>> (largest_divisor_helper 15)\n;; 5", "  (let ((i (divisor n)))\n    (if\
    \ (zero? i)\n      n\n      (if (negative? i)\n        (largest_divisor (- n)\
    \ * i)\n        (largest_divisor i))))\n)\n\n;; For a given number n, find the\
    \ smallest number that divides n evenly, larger than n\n;; >>> (smallest_divisor\
    \ 15)\n;; 5", "  (let ((divisor (div n 1)))\n    (if (zero? divisor)\n      divisor\n\
    \      (if (zero? (modulo n divisor))\n        divisor\n        (largest_divisor\
    \ (sub1 n) (modulo n divisor)))))))\n\n;; >>> (largest_divisor 15)\n;; 5\n;; >>>\
    \ (largest_divisor (expt 2 100))\n;; 25165824\n;; >>> (largest_divisor (expt 2\
    \ 100))\n;; 25165824\n;; >>> (largest_divisor (expt 2 100))\n;; 25165824\n;; >>>\
    \ (largest_divisor (expt 2 100))\n;; 25165824\n;; >>> (largest_divisor (expt 2\
    \ 100))\n;; 25165824\n;; >>> (largest_divisor (expt 2 100))\n;; 25165824\n;; >>>\
    \ (largest_divisor (expt 2 100))\n;; 25165824\n;; >>> (largest_divisor (expt 2\
    \ 100))\n;; 25165824\n;; >>> (largest_divisor (expt 2 100))\n;; 25165824\n;; >>>\
    \ (largest_divisor (expt 2 100))\n;; 25165824\n;; >>> (largest_divisor (expt 2\
    \ 100))\n;; 25165824\n;; >>> (largest_divisor (expt 2 100))\n;; 25165824\n;; >>>\
    \ (largest_divisor (expt 2 100))\n;; 25165824\n;; >>> (largest_divisor (expt 2\
    \ 100))\n;; 25165824\n;; >>> (largest_divisor (expt 2 100))\n;; 25165824\n;; >>>\
    \ (largest_divisor (expt 2 100))\n;; 25165824\n;; >>> (largest_divisor (expt 2\
    \ 100))\n;; 25165824\n;; >>> (largest_divisor (expt 2 100))\n;; 25165824\n;; >>>\
    \ (largest_divisor (expt 2 100))\n;; 25165824\n;; >>> (largest_divisor (expt 2\
    \ 100))\n;; 25165824\n;; >>> (largest_div", "  (let ((divisors (divisors_of n)))\n\
    \    (reduce (lambda (a b) (if (zero? b) a (a b))) 1 (cdr divisors)))\n)\n\n;;\
    \ For a given number n, find the largest number that divides n evenly, greater\
    \ than n\n;; >>> (largest_divisor_greater 15)\n;; 10", "  (let ((divisor (div\
    \ n 1)))\n    (if (zero? divisor)\n      n\n      (largest_divisor (sub1 n) (modulo\
    \ n divisor))))\n)\n\n;; For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n;; >>> (largest_divisor 15)\n;; 5", "  (let ((divisors\
    \ (divisors_of n)))\n    (reduce\n      (lambda (a b)\n        (if (zero? b)\n\
    \            a\n            (if (zero? a)\n                b\n               \
    \ (if (zero? (modulo a b))\n                    a\n                    (largest_divisor\
    \ (modulo a b))))))\n      divisors)))\n\n;; For a given number n, find the largest\
    \ number that divides n evenly, smaller than n\n;; >>> (largest_divisor_of_prime\
    \ 5)\n;; 5", "  (let ((divisor (div n 1)))\n    (if (zero? divisor)\n      n\n\
    \      (largest_divisor (sub1 n) (modulo n divisor))))\n  )\n\n;; >>> (largest_divisor\
    \ 15)\n;; 5\n\n;; For a given number n, find the largest number that divides n\
    \ evenly, greater than n\n;; >>> (largest_divisor 15)\n;; 10", "  (let ((divisor\
    \ (div n 1)))\n    (if (zero? divisor)\n      1\n      (largest_divisor (sub1\
    \ divisor))))\n  )\n\n;; >>> (largest_divisor 15)\n;; 5\n;; >>> (largest_divisor\
    \ (expt 2 10))\n;; 1024\n;; >>> (largest_divisor (expt 2 100))\n;; 1048576\n;;\
    \ >>> (largest_divisor (expt 2 1000))\n;; 104857600\n;; >>> (largest_divisor (expt\
    \ 2 10000))\n;; 10485760000\n;; >>> (largest_divisor (expt 2 100000))\n;; 1048576000000\n\
    ;; >>> (largest_divisor (expt 2 1000000))\n;; 10485760000000\n;; >>> (largest_divisor\
    \ (expt 2 10000000))\n;; 104857600000000\n;; >>> (largest_divisor (expt 2 100000000))\n\
    ;; 10485760000000000\n;; >>> (largest_divisor (expt 2 1000000000))\n;; 104857600000000000\n\
    ;; >>> (largest_divisor (expt 2 10000000000))\n;; 1048576000000000000\n;; >>>\
    \ (largest_divisor (expt 2 100000000000))\n;; 10485760000000000000\n;; >>> (largest_divisor\
    \ (expt 2 1000000000000))\n;; 104857600000000000000\n;; >>> (largest_divisor (expt\
    \ 2 10000000000000))\n;; 1048576000000000000000\n;; >>> (largest_divisor (expt\
    \ 2 100000000000000))\n;; 1048576000000000000000\n;; >>> (largest_divisor (expt\
    \ 2 1000000000000000))\n;; 1048576000000000000000\n;; >>> (largest_divisor (expt\
    \ 2 10000000000000000))\n;; 1048576000000000000000\n;; >>> (largest_divisor (expt\
    \ 2 100000000000000000))\n;; 1048576000000000000000\n;; >>> (largest_divisor (expt\
    \ 2 10000000000000000000))\n;; 1048576000000000000000\n;; >>> (largest_divisor\
    \ (expt 2 10000000000000000000))\n;; 1048576000000000000000\n;; >>> (largest_divisor\
    \ (expt 2 10000000000000000000))\n;;", "  (let ((divisors (divisors_of n)))\n\
    \    (reduce\n      (lambda (a b)\n        (if (zero? a)\n          b\n      \
    \    (if (zero? b)\n            a\n            (if (zero? (modulo a b))\n    \
    \          b\n              (largest_divisor (modulo a b))))))\n      divisors)))\n\
    \n;; For a given number n, find the largest number that divides n evenly, larger\
    \ than n\n;; >>> (largest_divisor_greater_than 15)\n;; 10", "  (let ((divisors\
    \ (make-yail-list 0)))\n    (define (helper n divisors)\n      (cond\n       \
    \ [(zero? n) (car divisors)]\n        [else\n          (if (modulo n divisors)\n\
    \            (helper (quotient n divisors) (cdr divisors))\n            (helper\
    \ n (append divisors (quotient n divisors))))]))\n    (helper n divisors)))\n\n\
    ;; >>> (largest_divisor 15)\n;; 5\n;; >>> (largest_divisor -15)\n;; -5\n;; >>>\
    \ (largest_divisor 0)\n;; 0\n;; >>> (largest_divisor 1)\n;; 1\n;; >>> (largest_divisor\
    \ 2)\n;; 2\n;; >>> (largest_divisor 3)\n;; 3\n;; >>> (largest_divisor 4)\n;; 4\n\
    ;; >>> (largest_divisor 5)\n;; 5\n;; >>> (largest_divisor 6)\n;; 6\n;; >>> (largest_divisor\
    \ 7)\n;; 7\n;; >>> (largest_divisor 8)\n;; 8\n;; >>> (largest_divisor 9)\n;; 9\n\
    ;; >>> (largest_divisor 10)\n;; 10\n;; >>> (largest_divisor 11)\n;; 11\n;; >>>\
    \ (largest_divisor 12)\n;; 12\n;; >>> (largest_divisor 13)\n;; 13\n;; >>> (largest_divisor\
    \ 14)\n;; 14\n;; >>> (largest_divisor 15)\n;; 15\n;; >>> (largest_divisor 16)\n\
    ;; 16\n;; >>> (largest_divisor 17)\n;; 17\n;; >>> (largest_divisor 18)\n;; 18\n\
    ;; >>> (largest_divisor 19)\n;; 19\n;; >>> (largest_divisor 20)\n;; 20\n;; >>>\
    \ (largest_divisor 21)\n;; 21\n;; >>> (largest_divisor 22)\n;; 22\n;; >>> (largest_divisor\
    \ 23)\n;; 23\n;; >>> (largest_divisor 24)\n;; 24\n;; >>> (largest_divisor 25)\n\
    ;; 25\n;;", "  (let ((divisor (div n 1)))\n    (if (zero? divisor)\n      1\n\
    \      (largest_divisor (modulo n divisor))))\n  )\n\n;; >>> (largest_divisor\
    \ 15)\n;; 5\n;; >>> (largest_divisor (expt 2 10))\n;; 1024\n;; >>> (largest_divisor\
    \ (expt 2 100))\n;; 1048576\n;; >>> (largest_divisor (expt 2 1000))\n;; 104857600\n\
    ;; >>> (largest_divisor (expt 2 10000))\n;; 10485760000\n;; >>> (largest_divisor\
    \ (expt 2 100000))\n;; 1048576000000\n;; >>> (largest_divisor (expt 2 1000000))\n\
    ;; 104857600000000\n;; >>> (largest_divisor (expt 2 10000000))\n;; 10485760000000000\n\
    ;; >>> (largest_divisor (expt 2 100000000))\n;; 104857600000000000\n;; >>> (largest_divisor\
    \ (expt 2 1000000000))\n;; 1048576000000000000\n;; >>> (largest_divisor (expt\
    \ 2 10000000000))\n;; 10485760000000000000\n;; >>> (largest_divisor (expt 2 100000000000))\n\
    ;; 104857600000000000000\n;; >>> (largest_divisor (expt 2 1000000000000))\n;;\
    \ 1048576000000000000000\n;; >>> (largest_divisor (expt 2 10000000000000))\n;;\
    \ 10485760000000000000000\n;; >>> (largest_divisor (expt 2 100000000000000))\n\
    ;; 104857600000000000000000\n;; >>> (largest_divisor (expt 2 1000000000000000))\n\
    ;; 1048576000000000000000000\n;; >>> (largest_divisor (expt 2 10000000000000000))\n\
    ;; 10485760000000000000000000\n;; >>> (largest_divisor (expt 2 100000000000000000))\n\
    ;; 104857600000000000000000000\n;; >>> (largest_divisor (expt 2 10000000000000000000))\n\
    ;; 1048576000000000000000000000\n;; >>> (largest_divisor (expt 2 10000000000000000000))\n\
    ;; 10485760000000000000000000000\n;; >>> (largest_divisor (expt", "  (let ((divisors\
    \ (divisors_of n)))\n    (reduce (lambda (a b) (if (> a b) a b)) 1 divisors)))\n\
    \n;; >>> (largest_divisor 15)\n;; 5\n\n;; For a given number n, find the largest\
    \ number that divides n evenly, greater than n\n;; >>> (largest_divisor_greater_than\
    \ 15)\n;; 10", "  (let ((divisor (div n 1)))\n    (if (zero? divisor)\n      n\n\
    \      (largest_divisor (sub1 n) (divisor - 1))))\n)\n\n;; For a given number\
    \ n, find the largest number that divides n evenly, greater than n\n;; >>> (largest_divisor_greater\
    \ 15)\n;; 10", "  (let ((divisor (div n 1)))\n    (if (zero? divisor)\n      n\n\
    \      (largest_divisor (sub1 n) (divisor))))\n)\n\n;; For a given number n, find\
    \ the largest number that divides n evenly, greater than n\n;; >>> (largest_divisor_greater\
    \ 15)\n;; 10", "  (let ((divisor (div n 1)))\n    (if (zero? divisor)\n      1\n\
    \      (largest_divisor (sub1 divisor))))\n  )\n\n;; >>> (largest_divisor 15)\n\
    ;; 5\n\n;; >>> (largest_divisor (expt 2 10))\n;; 1024\n\n;; >>> (largest_divisor\
    \ (expt 2 100))\n;; 1048576\n\n;; >>> (largest_divisor (expt 2 1000))\n;; 104857600\n\
    \n;; >>> (largest_divisor (expt 2 10000))\n;; 1048576000\n\n;; >>> (largest_divisor\
    \ (expt 2 100000))\n;; 10485760000\n\n;; >>> (largest_divisor (expt 2 1000000))\n\
    ;; 1048576000000\n\n;; >>> (largest_divisor (expt 2 10000000))\n;; 10485760000000\n\
    \n;; >>> (largest_divisor (expt 2 100000000))\n;; 104857600000000\n\n;; >>> (largest_divisor\
    \ (expt 2 1000000000))\n;; 1048576000000000\n\n;; >>> (largest_divisor (expt 2\
    \ 10000000000))\n;; 10485760000000000\n\n;; >>> (largest_divisor (expt 2 100000000000))\n\
    ;; 104857600000000000\n\n;; >>> (largest_divisor (expt 2 1000000000000))\n;; 1048576000000000000\n\
    \n;; >>> (largest_divisor (expt 2 10000000000000))\n;; 10485760000000000000\n\n\
    ;; >>> (largest_divisor (expt 2 100000000000000))\n;; 104857600000000000000\n\n\
    ;; >>> (largest_divisor (expt 2 1000000000000000))\n;; 1048576000000000000000\n\
    \n;; >>> (largest_divisor (expt 2 10000000000000000))\n;; 1048576000000000000000\n\
    \n;; >>> (largest_divisor (expt 2 100000000000000000))\n;; 1048576000000000000000\n\
    \n;; >>> (largest_divisor (expt 2 1000000000000000000))\n;; 1048576000000000000000\n\
    \n;; >>> (largest_divisor (expt 2 10000000000000000000))\n;; 1048576000000000000000\n\
    \n;; >>>", "  (let ((divisor (largest_divisor_divisor n)))\n    (if (zero? divisor)\n\
    \      divisor\n      (if (zero? (modulo n divisor))\n        divisor\n      \
    \  (largest_divisor_divisor (sub1 n divisor))))))\n\n;; For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n;; >>> (largest_divisor_divisor\
    \ 15)\n;; 5", "  (let ((divisors (make-yail-list 0)))\n    (for-each (lambda (divisor)\
    \ (append divisors (if (modulo n divisor) divisor ()))\n              (range 1\
    \ (floor n divisor)))\n      divisors)\n    (reduce (lambda (a b) (if (member?\
    \ a b) a b)) 1 divisors)))\n\n;; >>> (largest_divisor 15)\n;; 5\n;; >>> (largest_divisor\
    \ (expt 2 10))\n;; 1024", "  (let ((divisor (largest_divisor_helper n)))\n   \
    \ (if (zero? divisor)\n      divisor\n      (if (zero? (modulo n divisor))\n \
    \       divisor\n        (largest_divisor_helper (sub1 n) divisor))))\n  (largest_divisor_helper\
    \ n))\n\n;; For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n;; >>> (largest_divisor_helper 15)\n;; 5", "  (let ((divisor\
    \ (largest_divisor_below n)))\n    (if (zero? divisor)\n      divisor\n      (if\
    \ (zero? (modulo n divisor))\n        divisor\n        (largest_divisor_below\
    \ divisor))))\n  (largest_divisor_below n))\n\n;; For a given number n, find the\
    \ largest number that divides n evenly, smaller than n\n;; >>> (largest_divisor_below\
    \ 15)\n;; 5", "  (let ((divisors (make-vector n 0)))\n    (let ((i 0))\n     \
    \ (while (< i n)\n        (set! i (i + 1))\n        (if (modulo i n)\n       \
    \     (vector-set! divisors i)\n          )\n        )\n      (vector-ref divisors\
    \ n)\n      )\n    )\n  )\n\n;; For a given number n, find the smallest number\
    \ that divides n evenly, larger than n\n;; >>> (smallest_divisor 15)\n;; 5", " \
    \ (let ((divisor (div n 1)))\n    (if (zero? divisor)\n      n\n      (largest_divisor\
    \ (sub1 n) (divisor))))\n  )\n\n;; For a given number n, find the largest number\
    \ that divides n evenly, larger than n\n;; >>> (largest_divisor_greater_than 15)\n\
    ;; 10", "  (let ((i (1)))\n    (while (< n i)\n      (if (= (modulo i n) 0)\n\
    \        (return i)\n        (set! i (+ i 1)))))\n)\n\n;; For a given number n,\
    \ find the largest number that divides n evenly, greater than n\n;; >>> (largest_divisor_greater_than\
    \ 15)\n;; 10", "  (let ((divisor (div n 1)))\n    (if (zero? divisor)\n      divisor\n\
    \      (if (zero? (modulo n divisor))\n        divisor\n        (largest_divisor\
    \ (sub1 n) divisor))))\n  (largest_divisor 1))\n\n;; For a given number n, find\
    \ the largest number that divides n evenly, greater than n\n;; >>> (largest_divisor_greater\
    \ 15)\n;; 10", "  (let ((i (1)))\n    (while (< (modulo n i) 0)\n      (set! i\
    \ (+ i 1)))))\n\n;; >>> (largest_divisor 15)\n;; 5\n\n;; >>> (largest_divisor\
    \ (expt 2 10))\n;; 1024\n\n;; >>> (largest_divisor (expt 2 100))\n;; 1048576\n\
    \n;; >>> (largest_divisor (expt 2 1000))\n;; 104857600\n\n;; >>> (largest_divisor\
    \ (expt 2 10000))\n;; 10485760000\n\n;; >>> (largest_divisor (expt 2 100000))\n\
    ;; 1048576000000\n\n;; >>> (largest_divisor (expt 2 1000000))\n;; 104857600000000\n\
    \n;; >>> (largest_divisor (expt 2 10000000))\n;; 10485760000000000\n\n;; >>> (largest_divisor\
    \ (expt 2 100000000))\n;; 104857600000000000\n\n;; >>> (largest_divisor (expt\
    \ 2 1000000000))\n;; 1048576000000000000\n\n;; >>> (largest_divisor (expt 2 10000000000))\n\
    ;; 10485760000000000000\n\n;; >>> (largest_divisor (expt 2 100000000000))\n;;\
    \ 104857600000000000000\n\n;; >>> (largest_divisor (expt 2 1000000000000))\n;;\
    \ 1048576000000000000000\n\n;; >>> (largest_divisor (expt 2 10000000000000))\n\
    ;; 10485760000000000000000\n\n;; >>> (largest_divisor (expt 2 100000000000000))\n\
    ;; 104857600000000000000000\n\n;; >>> (largest_divisor (expt 2 1000000000000000))\n\
    ;; 1048576000000000000000000\n\n;; >>> (largest_divisor (expt 2 10000000000000000))\n\
    ;; 10485760000000000000000000\n\n;; >>> (largest_divisor (expt 2 100000000000000000))\n\
    ;; 104857600000000000000000000\n\n;; >>> (largest_divisor (expt 2 10000000000000000000))\n\
    ;; 1048576000000000000000000000\n\n;; >>> (largest_divisor (expt 2 10000000000000000000))\n\
    ;; 10485760000000000000000000000\n\n;; >>> (largest", "  (let ((divisors (divisors_of\
    \ n)))\n    (reduce (lambda (a b) (if (> a b) a b)) 1 divisors)))\n\n;; >>> (largest_divisor\
    \ 15)\n;; 5\n\n;; For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n;; >>> (largest_divisor 15)\n;; 5", "  (let ((divisors\
    \ (divisors_of n)))\n    (reduce (lambda (a b) (if (> a b) a b)) 1 divisors)))\n\
    \n;; >>> (largest_divisor 15)\n;; 5\n\n;; For a given number n, find the largest\
    \ number that divides n evenly, greater than n\n;; >>> (largest_divisor_greater\
    \ 15)\n;; 10", "  (let ((divisors (make-yail-list 0)))\n    (define (helper n\
    \ divisors)\n      (cond\n        [(zero? n) (car divisors)]\n        [else\n\
    \          (if (modulo n divisors)\n            (helper (quotient n divisors)\
    \ (cdr divisors))\n            (helper n (append divisors (quotient n divisors))))]))\n\
    \    (helper n divisors)))\n\n;; >>> (largest_divisor 15)\n;; 5\n\n;; For a given\
    \ number n, find the largest number that divides n evenly, smaller than n\n;;\
    \ >>> (largest_divisor 15)\n;; 5", "  (let ((divisors (divisors_of n)))\n    (reduce\
    \ (lambda (a b) (if (> b 0) a b)) 1 divisors)))\n\n;; >>> (largest_divisor 15)\n\
    ;; 5\n\n;; For a given number n, find the largest number that divides n evenly,\
    \ greater than n\n;; >>> (largest_divisor_greater_than 15)\n;; 10", "  (let ((divisor\
    \ (div n 1)))\n    (if (zero? divisor)\n      1\n      (largest_divisor (sub1\
    \ divisor))))\n  )\n\n;; >>> (largest_divisor 15)\n;; 5\n\n;; >>> (largest_divisor\
    \ (expt 2 10))\n;; 1024\n\n;; >>> (largest_divisor (expt 2 100))\n;; 1048576\n\
    \n;; >>> (largest_divisor (expt 2 1000))\n;; 104857600\n\n;; >>> (largest_divisor\
    \ (expt 2 10000))\n;; 1048576000\n\n;; >>> (largest_divisor (expt 2 100000))\n\
    ;; 10485760000\n\n;; >>> (largest_divisor (expt 2 1000000))\n;; 1048576000000\n\
    \n;; >>> (largest_divisor (expt 2 10000000))\n;; 10485760000000\n\n;; >>> (largest_divisor\
    \ (expt 2 100000000))\n;; 104857600000000\n\n;; >>> (largest_divisor (expt 2 1000000000))\n\
    ;; 10485760000000000\n\n;; >>> (largest_divisor (expt 2 10000000000))\n;; 104857600000000000\n\
    \n;; >>> (largest_divisor (expt 2 100000000000))\n;; 1048576000000000000\n\n;;\
    \ >>> (largest_divisor (expt 2 1000000000000))\n;; 10485760000000000000\n\n;;\
    \ >>> (largest_divisor (expt 2 10000000000000))\n;; 104857600000000000000\n\n\
    ;; >>> (largest_divisor (expt 2 100000000000000))\n;; 1048576000000000000000\n\
    \n;; >>> (largest_divisor (expt 2 1000000000000000))\n;; 1048576000000000000000\n\
    \n;; >>> (largest_divisor (expt 2 10000000000000000))\n;; 1048576000000000000000\n\
    \n;; >>> (largest_divisor (expt 2 100000000000000000))\n;; 1048576000000000000000\n\
    \n;; >>> (largest_divisor (expt 2 10000000000000000000))\n;; 1048576000000000000000\n\
    \n;; >>> (largest_divisor (expt 2 10000000000000000000))\n;; 1048576000000000000000\n\
    \n", "  (let ((divisors (divisors_of n)))\n    (reduce\n      (lambda (a b)\n\
    \        (if (zero? a)\n          b\n          (if (zero? b)\n            a\n\
    \            (if (not (zero? (modulo a b)))\n              (largest_divisor (modulo\
    \ a b))\n              (largest_divisor a)))))))))\n\n;; >>> (largest_divisor\
    \ 15)\n;; 5\n;; >>> (largest_divisor (expt 2 10))\n;; 1024", "  (let ((divisors\
    \ (divisors_of n)))\n    (reduce\n      (lambda (a b)\n        (if (zero? a)\n\
    \          b\n          (if (zero? b)\n            a\n            (if (eq? a b)\n\
    \              a\n              (largest_divisor (+ a b))))))))\n\n;; >>> (largest_divisor\
    \ 15)\n;; 5\n\n;; >>> (largest_divisor (expt 2 100))\n;; 104743\n\n;; >>> (largest_divisor\
    \ (expt 2 100))\n;; 104743\n\n;; >>> (largest_divisor (expt 2 100))\n;; 104743\n\
    \n;; >>> (largest_divisor (expt 2 100))\n;; 104743\n\n;; >>> (largest_divisor\
    \ (expt 2 100))\n;; 104743\n\n;; >>> (largest_divisor (expt 2 100))\n;; 104743\n\
    \n;; >>> (largest_divisor (expt 2 100))\n;; 104743\n\n;; >>> (largest_divisor\
    \ (expt 2 100))\n;; 104743\n\n;; >>> (largest_divisor (expt 2 100))\n;; 104743\n\
    \n;; >>> (largest_divisor (expt 2 100))\n;; 104743\n\n;; >>> (largest_divisor\
    \ (expt 2 100))\n;; 104743\n\n;; >>> (largest_divisor (expt 2 100))\n;; 104743\n\
    \n;; >>> (largest_divisor (expt 2 100))\n;; 104743\n\n;; >>> (largest_divisor\
    \ (expt 2 100))\n;; 104743\n\n;; >>> (largest_divisor (expt 2 100))\n;; 104743\n\
    \n;; >>> (largest_divisor (expt 2 100))\n;; 104743\n\n;; >>> (largest_divisor\
    \ (expt 2 100))\n;; 104743\n\n;; >>> (largest_divisor (expt 2 100))\n;; 104743\n\
    \n;; >>> (largest_divisor (expt 2 100))\n;; 104743\n\n;; >>> (largest_divisor\
    \ (expt 2 100))\n;; 1047", "  (let ((divisor (div n 1)))\n    (if (zero? divisor)\n\
    \      n\n      (largest_divisor (sub1 n) (modulo n divisor))))\n  )\n\n;; >>>\
    \ (largest_divisor 15)\n;; 5\n\n;; For a given number n, find the largest number\
    \ that divides n evenly, smaller than n\n;; >>> (largest_divisor 15)\n;; 5", " \
    \ (let ((divisor (div n 1)))\n    (if (zero? divisor)\n      n\n      (largest_divisor\
    \ (sub1 n) (modulo n divisor))))\n  )\n\n;; For a given number n, find the largest\
    \ number that divides n evenly, larger than n\n;; >>> (largest_divisor_minus_15)\n\
    ;; 10", "  (let ((divisor (largest_divisor_below n)))\n    (if (zero? divisor)\n\
    \      divisor\n      (if (zero? (modulo n divisor))\n        divisor\n      \
    \  (largest_divisor_below divisor))))\n  (largest_divisor_below n))\n\n;; For\
    \ a given number n, find the largest number that divides n evenly, smaller than\
    \ n\n;; >>> (largest_divisor_below 15)\n;; 5", "  (let ((divisor (div n 1)))\n\
    \    (if (zero? divisor)\n      n\n      (largest_divisor (sub1 n) (divisor))))\n\
    )\n\n;; For a given number n, find the largest number that divides n evenly, larger\
    \ than n\n;; >>> (largest_divisor_greater_than 15)\n;; 10", "  (let ((divisors\
    \ (divisors_of n)))\n    (reduce\n      (lambda (a b)\n        (if (zero? b)\n\
    \            a\n            (if (zero? a)\n                b\n               \
    \ (if (zero? (modulo a b))\n                    a\n                    (largest_divisor\
    \ (modulo a b)))))))\n  divisors))\n\n;; For a given number n, find the largest\
    \ number that divides n evenly, larger than n\n;; >>> (largest_divisor_greater_than\
    \ 15)\n;; 10", "  (let ((divisors (make-vector n 0)))\n    (let ((i 0))\n    \
    \  (while (< i n)\n        (set! i (modulo i n))\n        (vector-set! divisors\
    \ i)))))\n\n;; For a given number n, find the largest number that divides n evenly,\
    \ greater than n\n;; >>> (largest_divisor_greater 15)\n;; 10", "  (let ((divisor\
    \ (div n 1)))\n    (if (zero? divisor)\n      n\n      (largest_divisor (sub1\
    \ n) (divisor - 1))))\n  )\n\n;; >>> (largest_divisor 15)\n;; 5\n\n;; >>> (largest_divisor\
    \ (expt 2 10))\n;; 1024\n\n;; >>> (largest_divisor (expt 2 100))\n;; 1048576\n\
    \n;; >>> (largest_divisor (expt 2 1000))\n;; 104857600\n\n;; >>> (largest_divisor\
    \ (expt 2 10000))\n;; 1048576000\n\n;; >>> (largest_divisor (expt 2 100000))\n\
    ;; 10485760000\n\n;; >>> (largest_divisor (expt 2 1000000))\n;; 1048576000000\n\
    \n;; >>> (largest_divisor (expt 2 10000000))\n;; 10485760000000\n\n;; >>> (largest_divisor\
    \ (expt 2 100000000))\n;; 104857600000000\n\n;; >>> (largest_divisor (expt 2 1000000000))\n\
    ;; 10485760000000000\n\n;; >>> (largest_divisor (expt 2 10000000000))\n;; 104857600000000000\n\
    \n;; >>> (largest_divisor (expt 2 100000000000))\n;; 1048576000000000000\n\n;;\
    \ >>> (largest_divisor (expt 2 1000000000000))\n;; 10485760000000000000\n\n;;\
    \ >>> (largest_divisor (expt 2 10000000000000))\n;; 104857600000000000000\n\n\
    ;; >>> (largest_divisor (expt 2 100000000000000))\n;; 1048576000000000000000\n\
    \n;; >>> (largest_divisor (expt 2 1000000000000000))\n;; 1048576000000000000000\n\
    \n;; >>> (largest_divisor (expt 2 10000000000000000))\n;; 1048576000000000000000\n\
    \n;; >>> (largest_divisor (expt 2 100000000000000000))\n;; 1048576000000000000000\n\
    \n;; >>> (largest_divisor (expt 2 10000000000000000000))\n;; 1048576000000000000000\n\
    \n;; >>> (largest_divisor (expt 2 10000000000000000000))\n;; 1048", "  (let ((divisors\
    \ (divisors_of n)))\n    (reduce (lambda (a b) (if (zero? b) a (a b))) 1 (cdr\
    \ divisors))))\n\n;; For a given number n, find the largest number that divides\
    \ n evenly, larger than n\n;; >>> (largest_divisor_greater_than 15)\n;; 10", " \
    \ (let ((divisors (divisors_of n)))\n    (reduce\n      (lambda (a b)\n      \
    \  (if (zero? a)\n          b\n          (if (zero? b)\n            a\n      \
    \      (if (eq? a b)\n              a\n              (largest_divisor (+ a b))))))\n\
    \      divisors))\n\n;; >>> (largest_divisor 15)\n;; 5\n;; >>> (largest_divisor\
    \ (- 15))\n;; -5\n;; >>> (largest_divisor (- 15))\n;; -5\n;; >>> (largest_divisor\
    \ (- 15))\n;; -5\n;; >>> (largest_divisor (- 15))\n;; -5\n;; >>> (largest_divisor\
    \ (- 15))\n;; -5\n;; >>> (largest_divisor (- 15))\n;; -5\n;; >>> (largest_divisor\
    \ (- 15))\n;; -5\n;; >>> (largest_divisor (- 15))\n;; -5\n;; >>> (largest_divisor\
    \ (- 15))\n;; -5\n;; >>> (largest_divisor (- 15))\n;; -5\n;; >>> (largest_divisor\
    \ (- 15))\n;; -5\n;; >>> (largest_divisor (- 15))\n;; -5\n;; >>> (largest_divisor\
    \ (- 15))\n;; -5\n;; >>> (largest_divisor (- 15))\n;; -5\n;; >>> (largest_divisor\
    \ (- 15))\n;; -5\n;; >>> (largest_divisor (- 15))\n;; -5\n;; >>> (largest_divisor\
    \ (- 15))\n;; -5\n;; >>> (largest_divisor (- 15))\n;; -5\n;; >>> (largest_divisor\
    \ (- 15))\n;; -5\n;; >>> (largest_divisor (- 15))\n;; -5\n;; >>> (largest_divisor\
    \ (- 15))\n;; -5\n;; >>> (largest_divisor (- 15))\n;; -5\n;; >>> (largest_divisor\
    \ (- 15))\n;; -5\n;; >>> (largest_divisor (- 15))\n;; -5\n;; >>> (largest_divisor\
    \ (- 15))\n;; -5\n;; >>> (largest_divisor (- 15))\n", "  (let ((divisors (make-yail-list\
    \ 0)))\n    (define (helper n divisors)\n      (cond\n        ((zero? n) 1)\n\
    \        ((zero? divisors) n)\n        (else\n          (set-car! divisors (if\
    \ (modulo n divisors) (helper (quotient n divisors)) (helper (quotient n (car\
    \ divisors)))))))))\n  (helper n divisors)))\n\n;; For a given number n, find\
    \ the smallest number that divides n evenly, larger than n\n;; >>> (smallest_divisor\
    \ 15)\n;; 5", "  (let ((divisor (div n 1)))\n    (if (zero? divisor)\n      n\n\
    \      (largest_divisor (sub1 n) (divisor - 1))))\n)\n\n;; For a given number\
    \ n, find the smallest number that divides n evenly, larger than n\n;; >>> (smallest_divisor\
    \ 15)\n;; 10", "  (let ((divisor (largest_divisor_divisor n)))\n    (if (zero?\
    \ divisor)\n      divisor\n      (if (zero? (modulo n divisor))\n        divisor\n\
    \        (largest_divisor_divisor (sub1 n divisor))))))\n\n;; For a given number\
    \ n, find the largest number that divides n evenly, greater than n\n;; >>> (largest_divisor_divisor\
    \ 15)\n;; 10", "  (let ((divisors (divisors_of n)))\n    (reduce (lambda (a b)\
    \ (if (zero? b) a (a b))) 1 divisors)))\n\n;; For a given number n, find the largest\
    \ number that divides n evenly, larger than n\n;; >>> (largest_divisor_larger\
    \ 15)\n;; 10", "  (let ((i (1)))\n    (while (< (modulo n i) 0)\n      (set! i\
    \ (+ i 1)))))\n\n;; >>> (largest_divisor 15)\n;; 5\n;; >>> (largest_divisor 5)\n\
    ;; 5\n;; >>> (largest_divisor 3)\n;; 3\n;; >>> (largest_divisor 2)\n;; 2\n;; >>>\
    \ (largest_divisor 1)\n;; 1\n;; >>> (largest_divisor 0)\n;; 0\n;; >>> (largest_divisor\
    \ -1)\n;; -1\n;; >>> (largest_divisor -2)\n;; -2\n;; >>> (largest_divisor -3)\n\
    ;; -3\n;; >>> (largest_divisor -4)\n;; -4\n;; >>> (largest_divisor -5)\n;; -5\n\
    ;; >>> (largest_divisor -6)\n;; -6\n;; >>> (largest_divisor -7)\n;; -7\n;; >>>\
    \ (largest_divisor -8)\n;; -8\n;; >>> (largest_divisor -9)\n;; -9\n;; >>> (largest_divisor\
    \ -10)\n;; -10\n;; >>> (largest_divisor -11)\n;; -11\n;; >>> (largest_divisor\
    \ -12)\n;; -12\n;; >>> (largest_divisor -13)\n;; -13\n;; >>> (largest_divisor\
    \ -14)\n;; -14\n;; >>> (largest_divisor -15)\n;; -15\n;; >>> (largest_divisor\
    \ -16)\n;; -16\n;; >>> (largest_divisor -17)\n;; -17\n;; >>> (largest_divisor\
    \ -18)\n;; -18\n;; >>> (largest_divisor -19)\n;; -19\n;; >>> (largest_divisor\
    \ -20)\n;; -20\n;; >>> (largest_divisor -21)\n;; -21\n;; >>> (largest_divisor\
    \ -22)\n;; -22\n;; >>> (largest_divisor -23)\n;; -23\n;; >>> (largest_divisor\
    \ -24)\n;; -24\n;; >>> (largest_divisor -25"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
