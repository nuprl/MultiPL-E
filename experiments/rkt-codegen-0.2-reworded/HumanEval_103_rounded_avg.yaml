name: HumanEval_103_rounded_avg
language: rkt
prompt: "#lang racket\n\n;; You are given two positive integers n and m, and your\
  \ task is to compute the\n;; average of the integers from n through m (including\
  \ n and m). \n;; Round the answer to the nearest integer and convert that to binary.\n\
  ;; If n is greater than m, return -1.\n;; Example:\n;; >>> (rounded_avg 1 5)\n;;\
  \ \"0b11\"\n;; >>> (rounded_avg 7 5)\n;; -1\n;; >>> (rounded_avg 10 20)\n;; \"0b1111\"\
  \n;; >>> (rounded_avg 20 33)\n;; \"0b11010\"\n(define (rounded_avg n m)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rounded_avg))\n\
  \    (check-equal? (candidate 1 5) \"0b11\")\n    (check-equal? (candidate 7 13)\
  \ \"0b1010\")\n    (check-equal? (candidate 964 977) \"0b1111001010\")\n    (check-equal?\
  \ (candidate 996 997) \"0b1111100100\")\n    (check-equal? (candidate 560 851) \"\
  0b1011000010\")\n    (check-equal? (candidate 185 546) \"0b101101110\")\n    (check-equal?\
  \ (candidate 362 496) \"0b110101101\")\n    (check-equal? (candidate 350 902) \"\
  0b1001110010\")\n    (check-equal? (candidate 197 233) \"0b11010111\")\n    (check-equal?\
  \ (candidate 7 5) -1)\n    (check-equal? (candidate 5 1) -1)\n    (check-equal?\
  \ (candidate 5 5) \"0b101\")\n))\n\n(test-humaneval)"
completions: ["  (cond\n    ((< n m) -1)\n    ((= n m) (round (/ (n m) 2) 2))\n  \
    \  (else\n      (let ((n (round n 2)))\n        (let ((m (round m 2)))\n     \
    \     (let ((sum (+ n m))\n                (avg (round (/ sum 2) 2))))\n     \
    \     (let ((diff (abs (avg - n))))\n            (let ((diff2 (abs (avg - m))))\n\
    \              (let ((diff3 (abs (avg - (m + n))))\n                    (diff4\
    \ (abs (avg - (m + n + 1))))\n                    (diff5 (abs (avg - (m + n +\
    \ 2))))\n                    (diff6 (abs (avg - (m + n + 3))))\n             \
    \       (diff7 (abs (avg - (m + n + 4))))\n                    (diff8 (abs (avg\
    \ - (m + n + 5))))\n                    (diff9 (abs (avg - (m + n + 6))))\n  \
    \                  (diff10 (abs (avg - (m + n + 7))))\n                    (diff11\
    \ (abs (avg - (m + n + 8))))\n                    (diff12 (abs (avg - (m + n +\
    \ 9))))\n                    (diff13 (abs (avg - (m + n + 10))))\n           \
    \         (diff14 (abs (avg - (m + n + 11))))\n                    (diff15 (abs\
    \ (avg - (m + n + 12))))\n                    (diff16 (abs (avg - (m + n + 13))))\n\
    \                    (diff17 (abs (avg - (m + n + 14))))\n                   \
    \ (diff18 (abs (avg - (m + n + 15))))\n                    (diff19 (abs (avg -\
    \ (m + n + 16))))\n                    (diff20 (abs (avg - (m + n + 17))))\n \
    \                   (diff21 (abs (avg - (m + n + 18))))\n                    (diff22\
    \ (abs (avg - (m + n + 19))))\n                    (diff23 (abs (avg - (m + n\
    \ + 20))))\n                    (diff24 (abs (avg - (m + n + 21))))\n        \
    \            (diff25 (", "  (let ((n-1 (modulo n m)))\n    (if (<= n-1 0)\n  \
    \    (-1)\n      (let ((n-2 (modulo (sub1 n) m)))\n        (let ((n-3 (modulo\
    \ (sub1 (sub1 n)) m)))\n          (let ((n-4 (modulo (sub1 (sub1 (sub1 n))) m)))\n\
    \            (let ((n-5 (modulo (sub1 (sub1 (sub1 (sub1 n)))) m)))\n         \
    \     (let ((n-6 (modulo (sub1 (sub1 (sub1 (sub1 (sub1 n)))))) m)))\n        \
    \        (let ((n-7 (modulo (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 n)))))) m)))\n\
    \                  (let ((n-8 (modulo (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1\
    \ n)))))) m)))\n                        (let ((n-9 (modulo (sub1 (sub1 (sub1 (sub1\
    \ (sub1 (sub1 (sub1 (sub1 n)))))))) m)))\n                          (let ((n-10\
    \ (modulo (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 n))))))))))\
    \ m)))\n                            (let ((n-11 (modulo (sub1 (sub1 (sub1 (sub1\
    \ (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1\
    \ (sub1 n)))))))))))))))) m)))\n                              (let ((n-12 (modulo\
    \ (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1\
    \ (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1\
    \ (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1\
    \ (", "  (let ((n-1 (modulo n m)))\n    (if (zero? n-1)\n      (-1)\n      (let\
    \ ((m-1 (modulo m n)))\n        (let ((n-m (modulo n m)))\n          (let ((n-m-1\
    \ (modulo m n-1)))\n            (let ((n-m-1-1 (modulo m n-1-1)))\n          \
    \    (let ((n-m-1-1-1 (modulo m n-1-1-1)))\n                (let ((n-m-1-1-1-1\
    \ (modulo m n-1-1-1-1)))\n                  (let ((n-m-1-1-1-1-1 (modulo m n-1-1-1-1-1)))\n\
    \                    (let ((n-m-1-1-1-1-1-1 (modulo m n-1-1-1-1-1-1)))\n     \
    \                 (let ((n-m-1-1-1-1-1-1-1 (modulo m n-1-1-1-1-1-1-1)))\n    \
    \                    (let ((n-m-1-1-1-1-1-1-1-1 (modulo m n-1-1-1-1-1-1-1-1)))\n\
    \                          (let ((n-m-1-1-1-1-1-1-1-1-1 (modulo m n-1-1-1-1-1-1-1-1-1)))\n\
    \                            (let ((n-m-1-1-1-1-1-1-1-1-1-1 (modulo m n-1-1-1-1-1-1-1-1-1-1)))\n\
    \                              (let ((n-m-1-1-1-1-1-1-1-1-1-1-1 (modulo m n-1-1-1-1-1-1-1-1-1-1-1)))\n\
    \                                (let ((n-m-1-1-1-1-1-1-1-1-1-1-1-1 (modulo m\
    \ n", "  (let ((n (floor n)))\n    (let ((m (floor m)))\n      (if (<= n m)\n\
    \        (let ((avg (round (/ (n - m) (m - n))))\n              (binavg (string-append\
    \ \"0b\" (string-append (number->string avg))))))\n        (let ((avg (round (/\
    \ (n - m) (m - n))))\n              (binavg (string-append \"0b\" (string-append\
    \ (number->string avg)))))))))\n", "  (let ((n (floor n)))\n    (let ((m (floor\
    \ m)))\n      (cond\n        ((< n m) -1)\n        ((= n m) (floor (/ n m)))\n\
    \        ((< n) 0)\n        ((= n) (floor (/ n 1)))\n        (else (rounded_avg\
    \ (+ n 1) m) (rounded_avg n m))))))\n", "  (let ((n-1 (modulo n m)))\n    (if\
    \ (<= n-1 0)\n      (-1)\n      (let ((n-2 (modulo n-1 m)))\n        (let ((n-3\
    \ (modulo n-2 m)))\n          (let ((n-4 (modulo n-3 m)))\n            (let ((n-5\
    \ (modulo n-4 m)))\n              (let ((n-6 (modulo n-5 m)))\n              \
    \  (let ((n-7 (modulo n-6 m)))\n                  (let ((n-8 (modulo n-7 m)))\n\
    \                    (let ((n-9 (modulo n-8 m)))\n                      (let ((n-10\
    \ (modulo n-9 m)))\n                        (let ((n-11 (modulo n-10 m)))\n  \
    \                        (let ((n-12 (modulo n-11 m)))\n                     \
    \       (let ((n-13 (modulo n-12 m)))\n                              (let ((n-14\
    \ (modulo n-13 m)))\n                                (let ((n-15 (modulo n-14\
    \ m)))\n                                  (let ((n-16 (modulo n-15 m)))\n    \
    \                                (let ((n-17 (modulo n-16 m)))\n             \
    \                         (let ((n-18 (modulo n-17 m)))\n                    \
    \                    (let ((n-19 (modulo n-18 m)))\n                         \
    \                 (let ((n-20 (modulo n-19 m)))\n                            \
    \                (let ((n-21 (modulo n-20 m)))\n                             \
    \                 (let ((n-22 (modulo n-21 m)))\n                            \
    \                    (let ((n-23 (modulo n-22 m)))\n                         \
    \                         (let ((n-24 (modulo n-23 m)))\n                    \
    \                                (let ((n-25 (modulo n-24 m)))\n             \
    \                                         (let ((n-26 (modulo n-25 m)))\n    \
    \                                                    (let ((n-27 (modulo n-26\
    \ m)))\n                                                          (let ((n-28\
    \ (modulo n-27 m)))\n                               ", "  (let ((n_ (integer->string\
    \ n))\n        (m_ (integer->string m)))\n    (if (> n m)\n      (-1)\n      (let\
    \ ((n_ (string->integer n_))\n             (m_ (string->integer m_)))\n      \
    \  (let ((n_ (string->integer n_))\n              (m_ (string->integer m_)))\n\
    \          (let ((n_ (string->integer n_))\n                 (m_ (string->integer\
    \ m_)))\n            (let ((n_ (string->integer n_))\n                   (m_ (string->integer\
    \ m_)))\n              (let ((n_ (string->integer n_))\n                     (m_\
    \ (string->integer m_)))\n                (let ((n_ (string->integer n_))\n  \
    \                     (m_ (string->integer m_)))\n                  (let ((n_\
    \ (string->integer n_))\n                         (m_ (string->integer m_)))\n\
    \                    (let ((n_ (string->integer n_))\n                       \
    \    (m_ (string->integer m_)))\n                      (let ((n_ (string->integer\
    \ n_))\n                             (m_ (string->integer m_)))\n            \
    \            (let ((n_ (string->integer n_))\n                               (m_\
    \ (string->integer m_)))\n                          (let ((n_ (string->integer\
    \ n_))\n                                 (m_ (string->integer m_)))\n        \
    \                    (let ((n_ (string->integer n_))\n                       \
    \            (m_ (string->integer m_)))\n                              (let ((n_\
    \ (string->integer n_))\n                                     (m_ (string->integer\
    \ m_)))\n                                (let ((n_ (string->integer n_))\n   \
    \                                    (m_ (string->integer m_)))\n            \
    \                      (let ((n_ (string->integer n_))\n                     \
    \                    (m_ (string->integer m_)))\n                            \
    \        (let ((n_ (string->integer n_))\n                                   \
    \        (m_ (string->integer m_)))\n                                       (let\
    \ ((n_ (string->integer n_))\n                                              (m_\
    \ (string->integer m_)))\n                                         (let ((n_ (",
  "  (let ((n-1 (modulo n m)))\n    (if (< n-1 0)\n      (-1)\n      (if (< n-1 0)\n\
    \        (+ (modulo (div n m) 2) 1)\n        (+ (modulo (div n m) 2) 0))))\n",
  "  (let ((n-1 (modulo n m)))\n    (if (<= n-1 0)\n      (-1)\n      (+ (modulo (divide\
    \ n-1 m) 2) (modulo (divide n-1 m) 2))))\n)\n", "  (let ((n (abs n))\n       \
    \ (m (abs m)))\n    (if (zero? m)\n      (if (zero? n)\n        -1\n        0)\n\
    \      (if (zero? n)\n        0\n        (+ (/ n m) (/ n m)))\n      (+ (/ n m)\
    \ (/ n m)))))\n", "  (let ((n_ (integer->string n))\n        (m_ (integer->string\
    \ m)))\n    (if (string->number m_)\n      (string->number (string->number n_\
    \ m_))\n      (string->number (string->number n_ (string->number m_))))))\n",
  "  (let ((sum (make-vector n m)))\n    (for-each\n      (lambda (i)\n        (vector-set!\
    \ sum i (vector-ref sum i) + 1))\n      sum))\n  (if (< n m)\n    (let ((avg (rounded-avg\
    \ sum n m)))\n      (format \"0b\" avg))\n    (format \"0b\" -1)))\n", "  (let\
    \ ((n-1 (modulo n m)))\n    (if (< n-1 0)\n      (-1)\n      (if (< n-1 0)\n \
    \       (+ (modulo (- n-1 1) m) (/ m 2))\n        (+ (modulo (- n-1 2) m) (/ m\
    \ 2))\n        (+ (modulo (- n-1 3) m) (/ m 2))\n        (+ (modulo (- n-1 4)\
    \ m) (/ m 2))\n        (+ (modulo (- n-1 5) m) (/ m 2))\n        (+ (modulo (-\
    \ n-1 6) m) (/ m 2))\n        (+ (modulo (- n-1 7) m) (/ m 2))\n        (+ (modulo\
    \ (- n-1 8) m) (/ m 2))\n        (+ (modulo (- n-1 9) m) (/ m 2))\n        (+\
    \ (modulo (- n-1 10) m) (/ m 2))\n        (+ (modulo (- n-1 11) m) (/ m 2))\n\
    \        (+ (modulo (- n-1 12) m) (/ m 2))\n        (+ (modulo (- n-1 13) m) (/\
    \ m 2))\n        (+ (modulo (- n-1 14) m) (/ m 2))\n        (+ (modulo (- n-1\
    \ 15) m) (/ m 2))\n        (+ (modulo (- n-1 16) m) (/ m 2))\n        (+ (modulo\
    \ (- n-1 17) m) (/ m 2))\n        (+ (modulo (- n-1 18) m) (/ m 2))\n        (+\
    \ (modulo (- n-1 19) m) (/ m 2))\n        (+ (modulo (- n-1 20) m) (/ m 2))\n\
    \        (+ (modulo (- n-1 21) m) (/ m 2))\n        (+ (modulo (- n-1 22) m) (/\
    \ m 2))\n        (+ (modulo (- n-1 23) m) (/ m 2))\n        (+ (modulo (- n-1\
    \ 24) m) (/ m 2))\n        (+ (modulo (- n-1 25) m) (/ m 2", "  (cond\n    ((<\
    \ n m) -1)\n    ((= n m) (round (/ (n m) 2)))\n    (else (round (/ (n m) 2) 0))\n\
    \  )\n)\n", "  (let ((n_ (floor n)))\n    (let ((m_ (floor m)))\n      (if (<=\
    \ n m)\n        (let ((n_ (floor n_)))\n          (let ((m_ (floor m_)))\n   \
    \         (if (<= n_ m_)\n              (let ((n_ (floor n_)))\n             \
    \   (let ((m_ (floor m_)))\n                  (if (<= n_ m_)\n               \
    \     (let ((n_ (floor n_)))\n                      (let ((m_ (floor m_)))\n \
    \                       (if (<= n_ m_)\n                          (let ((n_ (floor\
    \ n_)))\n                            (let ((m_ (floor m_)))\n                \
    \              (if (<= n_ m_)\n                                (let ((n_ (floor\
    \ n_)))\n                                  (let ((m_ (floor m_)))\n          \
    \                          (if (<= n_ m_)\n                                  \
    \    (let ((n_ (floor n_)))\n                                        (let ((m_\
    \ (floor m_)))\n                                          (if (<= n_ m_)\n   \
    \                                         (let ((n_ (floor n_)))\n           \
    \                                   (let ((m_ (floor m_)))\n                 \
    \                               (if (<= n_ m_)\n                             \
    \                     (let ((n_ (floor n_)))\n                               \
    \                     (let ((m_ (floor m_)))\n                               \
    \                       (if (<= n_ m_)\n                                     \
    \                   (let ((n_ (floor n_)))\n                                 \
    \                         (let ((m_ (floor m_)))\n                           \
    \                                 (if (<= n_ m_)\n                           \
    \                                   (let ((n_ (floor n_)))\n                 \
    \                                               (let ((m_ (floor m_)))\n     \
    \                                                             (if (<= n_ m_)\n\
    \                                                                    (let ((n_\
    \ (floor n_)))\n                                                             \
    \         (let ((m_ (floor m_)))\n                                           \
    \                             (if (<= n_ m_)\n                               \
    \                                           (let ((n_ (floor n_)))\n         \
    \                                                                   ", "  (cond\n\
    \    [(< n m) -1]\n    [(<= n m) (round (/ (n m) 2))]\n    [else (round (/ (n\
    \ m) 2))]))\n", "  (let ((n-1 (modulo n m)))\n    (if (< n-1 0)\n      (-1)\n\
    \      (let ((n-2 (modulo n n-1)))\n        (let ((n-3 (modulo n n-2)))\n    \
    \      (let ((n-4 (modulo n n-3)))\n            (let ((n-5 (modulo n n-4)))\n\
    \              (let ((n-6 (modulo n n-5)))\n                (let ((n-7 (modulo\
    \ n n-6)))\n                  (let ((n-8 (modulo n n-7)))\n                  \
    \  (let ((n-9 (modulo n n-8)))\n                      (let ((n-10 (modulo n n-9)))\n\
    \                        (let ((n-11 (modulo n n-10)))\n                     \
    \     (let ((n-12 (modulo n n-11)))\n                            (let ((n-13 (modulo\
    \ n n-12)))\n                              (let ((n-14 (modulo n n-13)))\n   \
    \                             (let ((n-15 (modulo n n-14)))\n                \
    \                  (let ((n-16 (modulo n n-15)))\n                           \
    \         (let ((n-17 (modulo n n-16)))\n                                    \
    \  (let ((n-18 (modulo n n-17)))\n                                        (let\
    \ ((n-19 (modulo n n-18)))\n                                          (let ((n-20\
    \ (modulo n n-19)))\n                                            (let ((n-21 (modulo\
    \ n n-20)))\n                                              (let ((n-22 (modulo\
    \ n n-21)))\n                                                (let ((n-23 (modulo\
    \ n n-22)))\n                                                  (let ((n-24 (modulo\
    \ n n-23)))\n                                                    (let ((n-25 (modulo\
    \ n n-24)))\n                                                      (let ((n-26\
    \ (modulo n n-25)))\n                                                        (let\
    \ ((n-27 (modulo n n-26)))\n                                                 \
    \         (let ((n-28 (modulo n n-27)))\n                                ", " \
    \ (cond\n    ((< n m) -1)\n    ((= n m) (round (/ (n m) 2) 2))\n    (else\n  \
    \    (let ((avg (round (/ (n m) 2) 2)))\n        (let ((n (n - 1)))\n        \
    \  (let ((m (m - 1)))\n            (let ((i 0))\n              (while (< i n)\n\
    \                (let ((j 0))\n                  (while (< j m)\n            \
    \        (set! i (i + 1))\n                    (set! j (j + 1)))\n           \
    \       (set! avg (+ avg (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg\
    \ (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg\
    \ (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg\
    \ (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg\
    \ (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg\
    \ (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg\
    \ (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg\
    \ (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg (avg\
    \ (avg (avg", "  (let ((n-1 n - n + 1)\n         (m-1 m - m + 1)\n         (sum\
    \ 0))\n    (if (<= n m)\n      (+ sum (/ (m - n + 1) 2))\n      (-1)))\n", " \
    \ (let ((n (abs n))\n        (m (abs m)))\n    (if (<= n m)\n      (let ((n (floor\
    \ n))\n            (m (floor m)))\n        (let ((n (floor n))\n             \
    \ (m (floor m)))\n          (let ((n (floor n))\n                (m (floor m)))\n\
    \            (let ((n (floor n))\n                  (m (floor m)))\n         \
    \     (let ((n (floor n))\n                    (m (floor m)))\n              \
    \  (let ((n (floor n))\n                      (m (floor m)))\n               \
    \   (let ((n (floor n))\n                        (m (floor m)))\n            \
    \        (let ((n (floor n))\n                          (m (floor m)))\n     \
    \                 (let ((n (floor n))\n                            (m (floor m)))\n\
    \                        (let ((n (floor n))\n                              (m\
    \ (floor m)))\n                          (let ((n (floor n))\n               \
    \                 (m (floor m)))\n                            (let ((n (floor\
    \ n))\n                                  (m (floor m)))\n                    \
    \          (let ((n (floor n))\n                                    (m (floor\
    \ m)))\n                                (let ((n (floor n))\n                \
    \                      (m (floor m)))\n                                  (let\
    \ ((n (floor n))\n                                        (m (floor m)))\n   \
    \                                 (let ((n (floor n))\n                      \
    \                    (m (floor m)))\n                                      (let\
    \ ((n (floor n))\n                                            (m (floor m)))\n\
    \                                        (let ((n (floor n))\n               \
    \                               (m (floor m)))\n                             \
    \             (let ((n (floor n))\n                                          \
    \      (m (floor m)))\n                                            (let ((n (floor\
    \ n))\n                                                  (m (floor m)))\n    \
    \                                          (let ((n (floor n))\n             \
    \                                      (m (floor m)))\n                      \
    \                          (let ((n (floor n))\n                             \
    \                         (m (floor m)))\n                                   \
    \               (let ((n (floor n))\n                                        \
    \                 (m (floor m)))\n                                           \
    \        ", "  (let ((n-1 (sub1 n))\n        (m-1 (sub1 m)))\n    (if (>= n m)\n\
    \      (-1)\n      (let ((n-2 (sub1 n))\n            (m-2 (sub1 m)))\n       \
    \ (let ((n-3 (sub1 n))\n              (m-3 (sub1 m)))\n          (let ((n-4 (sub1\
    \ n))\n                (m-4 (sub1 m)))\n            (let ((n-5 (sub1 n))\n   \
    \               (m-5 (sub1 m)))\n              (let ((n-6 (sub1 n))\n        \
    \            (m-6 (sub1 m)))\n                (let ((n-7 (sub1 n))\n         \
    \             (m-7 (sub1 m)))\n                  (let ((n-8 (sub1 n))\n      \
    \                  (m-8 (sub1 m)))\n                    (let ((n-9 (sub1 n))\n\
    \                          (m-9 (sub1 m)))\n                      (let ((n-10\
    \ (sub1 n))\n                            (m-10 (sub1 m)))\n                  \
    \      (let ((n-11 (sub1 n))\n                              (m-11 (sub1 m)))\n\
    \                          (let ((n-12 (sub1 n))\n                           \
    \     (m-12 (sub1 m)))\n                            (let ((n-13 (sub1 n))\n  \
    \                                (m-13 (sub1 m)))\n                          \
    \    (let ((n-14 (sub1 n))\n                                     (m-14 (sub1 m)))\n\
    \                                (let ((n-15 (sub1 n))\n                     \
    \                 (m-15 (sub1 m)))\n                                  (let ((n-16\
    \ (sub1 n))\n                                        (m-16 (sub1 m)))\n      \
    \                              (let ((n-17 (sub1 n))\n                       \
    \                   (m-17 (sub1 m)))\n                                      (let\
    \ ((n-18 (sub1 n))\n                                            (m-18 (sub1 m)))\n\
    \                                        (let ((n-19 (sub1 n))\n             \
    \                                  (m-19 (sub1 m)))\n                        \
    \                  (let ((n-20 (sub1 n", "  (let ((n-1 (sub1 n))\n        (m-1\
    \ (sub1 m)))\n    (if (< n m)\n      (-1)\n      (let ((n-2 (sub1 n-1))\n    \
    \        (m-2 (sub1 m-1)))\n        (let ((n-3 (sub1 n-2))\n              (m-3\
    \ (sub1 m-2)))\n          (let ((n-4 (sub1 n-3))\n                (m-4 (sub1 m-3)))\n\
    \            (let ((n-5 (sub1 n-4))\n                  (m-5 (sub1 m-4)))\n   \
    \           (let ((n-6 (sub1 n-5))\n                    (m-6 (sub1 m-5)))\n  \
    \              (let ((n-7 (sub1 n-6))\n                      (m-7 (sub1 m-6)))\n\
    \                  (let ((n-8 (sub1 n-7))\n                        (m-8 (sub1\
    \ m-7)))\n                    (let ((n-9 (sub1 n-8))\n                       \
    \   (m-9 (sub1 m-8)))\n                      (let ((n-10 (sub1 n-9))\n       \
    \                     (m-10 (sub1 m-9)))\n                        (let ((n-11\
    \ (sub1 n-10))\n                              (m-11 (sub1 m-10)))\n          \
    \                (let ((n-12 (sub1 n-11))\n                                (m-12\
    \ (sub1 m-11)))\n                            (let ((n-13 (sub1 n-12))\n      \
    \                            (m-13 (sub1 m-12)))\n                           \
    \   (let ((n-14 (sub1 n-13))\n                                     (m-14 (sub1\
    \ m-13)))\n                                (let ((n-15 (sub1 n-14))\n        \
    \                              (m-15 (sub1 m-14)))\n                         \
    \         (let ((n-16 (sub1 n-15))\n                                        (m-16\
    \ (sub1 m-15)))\n                                    (let ((n-17 (sub1 n-16))\n\
    \                                          (m-17 (sub1 m-16)))\n             \
    \                         (let ((n-18 (", "  (let ((n_ (integer->string n)))\n\
    \    (let ((m_ (integer->string m)))\n      (let ((avg (string->integer (string->number\
    \ (string->list n_ m_))))\n            (rounded (string->integer avg)))\n    \
    \    (if (< rounded 0)\n          (-1)\n          (string->list rounded)))\n \
    \     )))\n", "  (let ((n_int n)\n        (m_int m)\n        (sum (map (lambda\
    \ (x) (+ x n_int)) (range m_int))))\n    (if (< n_int m_int)\n      (-1)\n   \
    \   (let ((rounded_sum sum))\n        (let ((rounded_avg (floor rounded_sum /\
    \ 2)))\n          (let ((rounded_remainder (mod rounded_sum 2)))\n           \
    \ (if (rounded_remainder = 0)\n              rounded_avg\n              (rounded_avg\
    \ + 1))))))))\n", "  (cond\n    ((< n m) -1)\n    ((= n m) (round (/ (n m) 2)))\n\
    \    (else\n      (let ((n1 (floor n)))\n        (let ((n2 (ceiling m)))\n   \
    \       (let ((n3 (round (/ (n1 n2) 2)))\n                (n4 (round (/ (n2 n3)\
    \ 2)))\n                (n5 (round (/ (n3 n4) 2)))\n                (n6 (round\
    \ (/ (n4 n5) 2)))\n                (n7 (round (/ (n5 n6) 2)))\n              \
    \  (n8 (round (/ (n6 n7) 2)))\n                (n9 (round (/ (n7 n8) 2)))\n  \
    \              (n10 (round (/ (n8 n9) 2)))\n                (n11 (round (/ (n9\
    \ n10) 2)))\n                (n12 (round (/ (n10 n11) 2)))\n                (n13\
    \ (round (/ (n11 n12) 2)))\n                (n14 (round (/ (n12 n13) 2)))\n  \
    \              (n15 (round (/ (n13 n14) 2)))\n                (n16 (round (/ (n14\
    \ n15) 2)))\n                (n17 (round (/ (n15 n16) 2)))\n                (n18\
    \ (round (/ (n16 n17) 2)))\n                (n19 (round (/ (n17 n18) 2)))\n  \
    \              (n20 (round (/ (n18 n19) 2)))\n                (n21 (round (/ (n19\
    \ n20) 2)))\n                (n22 (round (/ (n20 n21) 2)))\n                (n23\
    \ (round (/ (n21 n22) 2)))\n                (n24 (round (/ (n22 n23) 2)))\n  \
    \              (n25 (round (/ (n23 n24) 2)))\n                (n26 (round (/ (n24\
    \ n25) 2)))\n                (n27 (round (/ (n25 n26) 2)))\n                (n28\
    \ (round (/ (n26 n27) 2)))\n                (n29 (round (/ (n27 n28) 2)))\n  \
    \              (n30 (round (/ (n28 n29) 2)))\n                (n31 (", "  (let\
    \ ((n-1 (sub1 n))\n        (m-1 (sub1 m)))\n    (if (>= n m)\n      (-1)\n   \
    \   (+ (/ n m) (/ n m)))))\n", "  (let ((n_ (floor n)))\n    (let ((m_ (floor\
    \ m)))\n      (cond\n        ((= n m) (floor (/ n m)))\n        ((< n m) -1)\n\
    \        (else\n          (let ((n_ (floor n_)))\n            (let ((m_ (floor\
    \ m_)))\n              (let ((n_ (floor n_)))\n                (let ((m_ (floor\
    \ m_)))\n                  (let ((n_ (floor n_)))\n                    (let ((m_\
    \ (floor m_)))\n                      (let ((n_ (floor n_)))\n               \
    \         (let ((m_ (floor m_)))\n                          (let ((n_ (floor n_)))\n\
    \                            (let ((m_ (floor m_)))\n                        \
    \      (let ((n_ (floor n_)))\n                                (let ((m_ (floor\
    \ m_)))\n                                  (let ((n_ (floor n_)))\n          \
    \                          (let ((m_ (floor m_)))\n                          \
    \            (let ((n_ (floor n_)))\n                                        (let\
    \ ((m_ (floor m_)))\n                                          (let ((n_ (floor\
    \ n_)))\n                                            (let ((m_ (floor m_)))\n\
    \                                              (let ((n_ (floor n_)))\n      \
    \                                          (let ((m_ (floor m_)))\n          \
    \                                        (let ((n_ (floor n_)))\n            \
    \                                        (let ((m_ (floor m_)))\n            \
    \                                          (let ((n_ (floor n_)))\n          \
    \                                              (let ((m_ (floor m_)))\n      \
    \                                                    (let ((n_ (floor n_)))\n\
    \                                                            (let ((m_ (floor\
    \ m_)))\n                                                              (let ((n_\
    \ (floor n_)))\n                                                             \
    \   (let ((m_ (floor m_)))\n                                                 \
    \                 (let ((n_ (floor n_)))\n                                   \
    \                                 (let ((m_ (floor m_)))\n                   \
    \                                                   (let ((n_ (floor n_)))\n \
    \                                                                       (let ((m_\
    \ (floor m_)))\n", "  (let ((n_ (floor n)))\n    (let ((m_ (floor m)))\n     \
    \ (if (<= n m)\n        (let ((avg (round (/ (n - n_) (m - m_))))\n          \
    \    (bin avg))\n          (bin \"0b\" avg))\n        (let ((avg (round (/ (n\
    \ - n_) (m - m_))))\n              (bin avg))\n          (bin \"0b\" avg)))\n\
    \      (if (<= n m)\n        (let ((avg (round (/ (n - n_) (m - m_))))\n     \
    \         (bin avg))\n          (bin \"0b\" avg))\n        (let ((avg (round (/\
    \ (n - n_) (m - m_))))\n              (bin avg))\n          (bin \"0b\" avg))))))\n",
  "  (let ((n-1 (modulo n m)))\n    (if (<= n-1 0)\n      (-1)\n      (+ (modulo (divide\
    \ n-1 m) 2) (modulo (divide n-1 m) 2)))))\n", "  (let ((n (floor n)))\n    (let\
    \ ((m (floor m)))\n      (if (<= n m)\n        (let ((avg (round (/ (n - m) (m\
    \ - n))))\n              (bin avg))\n          (format \"0b\" bin))\n        (format\
    \ \"0b\" -1)))\n    ))\n", "  (let ((n_i (floor n)))\n    (let ((m_i (floor m)))\n\
    \      (if (<= n_i m_i)\n        (let ((avg (round (/ (n_i + 1) (m_i + 1))))\n\
    \              (bin avg))\n          (format \"0b\" bin))\n        (format \"\
    -1\")))\n  )\n)\n", "  (let ((n (floor n)))\n    (let ((m (floor m)))\n      (if\
    \ (<= n m)\n        (let ((avg (round (/ (n - m) n) 2)))\n          (let ((bin\
    \ (binavg avg)))\n            (if (even? bin)\n              bin\n           \
    \   (binavg (/ (binavg (- bin 1)) 2)))\n          ))\n        (let ((bin (binavg\
    \ m)))\n          (if (even? bin)\n            bin\n            (binavg (/ (binavg\
    \ (- bin 1)) 2)))\n          ))\n      ))\n  )\n)\n", "  (let ((n-1 (modulo n\
    \ m)))\n    (if (<= n-1 0)\n      (-1)\n      (let ((n-2 (modulo (sub1 n) m)))\n\
    \        (let ((n-3 (modulo (sub1 (sub1 n)) m)))\n          (let ((n-4 (modulo\
    \ (sub1 (sub1 (sub1 n))) m)))\n            (let ((n-5 (modulo (sub1 (sub1 (sub1\
    \ (sub1 n)))) m)))\n              (let ((n-6 (modulo (sub1 (sub1 (sub1 (sub1 (sub1\
    \ n)))))) m)))\n                (let ((n-7 (modulo (sub1 (sub1 (sub1 (sub1 (sub1\
    \ (sub1 n)))))) m)))\n                  (let ((n-8 (modulo (sub1 (sub1 (sub1 (sub1\
    \ (sub1 (sub1 (sub1 n)))))))) m)))\n                    (let ((n-9 (modulo (sub1\
    \ (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 n)))))))) m)))\n                 \
    \     (let ((n-10 (modulo (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1\
    \ (sub1 n))))))))))))\n                        (let ((n-11 (modulo (sub1 (sub1\
    \ (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 n))))))))))))))))\n\
    \                          (let ((n-12 (modulo (sub1 (sub1 (sub1 (sub1 (sub1 (sub1\
    \ (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1\
    \ (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1\
    \ (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1\
    \ (sub1 (sub", "  (let ((n_ (floor n)))\n    (let ((m_ (floor m)))\n      (if\
    \ (<= n m)\n        (let ((avg (round (/ (n - n_) (m - m_))))\n              (bin\
    \ avg))\n          (if (odd? n_)\n            (-1)\n            (bin)))\n    \
    \    (bin)))\n  )\n)\n", "  (cond\n    [(< n m) -1]\n    [(>= n m) -1]\n    [(+\
    \ (/ n 2) (modulo m n))]\n    [(+ (/ m 2) (modulo n m))]\n    [(+ (/ n 2) (modulo\
    \ m n))]\n    [(+ (/ m 2) (modulo n m))]\n    [(+ (/ n 2) (modulo m n))]\n   \
    \ [(+ (/ m 2) (modulo n m))]\n    [(+ (/ n 2) (modulo m n))]\n    [(+ (/ m 2)\
    \ (modulo n m))]\n    [(+ (/ n 2) (modulo m n))]\n    [(+ (/ m 2) (modulo n m))]\n\
    \    [(+ (/ n 2) (modulo m n))]\n    [(+ (/ m 2) (modulo n m))]\n    [(+ (/ n\
    \ 2) (modulo m n))]\n    [(+ (/ m 2) (modulo n m))]\n    [(+ (/ n 2) (modulo m\
    \ n))]\n    [(+ (/ m 2) (modulo n m))]\n    [(+ (/ n 2) (modulo m n))]\n    [(+\
    \ (/ m 2) (modulo n m))]\n    [(+ (/ n 2) (modulo m n))]\n    [(+ (/ m 2) (modulo\
    \ n m))]\n    [(+ (/ n 2) (modulo m n))]\n    [(+ (/ m 2) (modulo n m))]\n   \
    \ [(+ (/ n 2) (modulo m n))]\n    [(+ (/ m 2) (modulo n m))]\n    [(+ (/ n 2)\
    \ (modulo m n))]\n    [(+ (/ m 2) (modulo n m))]\n    [(+ (/ n 2) (modulo m n))]\n\
    \    [(+ (/ m 2) (modulo n m))]\n    [(+ (/ n 2)", "  (let ((n_ (floor n)))\n\
    \    (let ((m_ (floor m)))\n      (if (<= n m)\n        (let ((avg (round (/ (n\
    \ - n_) (m - m_))))\n              (bin avg))\n          (format \"0b\" avg))\n\
    \        (format \"-1\"))))\n", "  (let ((n-1 (modulo n m)))\n    (if (<= n-1\
    \ 0)\n      (-1)\n      (+ (modulo (- n-1 1) m) (/ (modulo n m) 2)))))\n", " \
    \ (let ((n (abs n))\n        (m (abs m)))\n    (if (< n m)\n      (-1)\n     \
    \ (let ((n_i (floor n))\n            (m_i (floor m)))\n        (let ((n_f (floor\
    \ n_i))\n              (m_f (floor m_i)))\n          (let ((n_c (ceiling n_i))\n\
    \                (m_c (ceiling m_i)))\n            (let ((n_r (round n_i))\n \
    \                 (m_r (round m_i)))\n              (let ((n_b (bin n_i))\n  \
    \                  (m_b (bin m_i)))\n                (let ((n_s (string n_i))\n\
    \                      (m_s (string m_i)))\n                  (let ((n_p (string-append\
    \ n_s \".\")))\n                    (let ((m_p (string-append m_s \".\")))\n \
    \                     (let ((n_r (string-append n_p m_p)))\n                 \
    \       (let ((m_r (string-append m_p n_p)))\n                          (let ((n_r\
    \ (string-append n_r \"0\")))\n                            (let ((m_r (string-append\
    \ m_r \"0\")))\n                              (let ((n_r (string-append n_r \"\
    0\")))\n                                (let ((m_r (string-append m_r \"0\")))\n\
    \                                  (let ((n_r (string-append n_r \"0\")))\n  \
    \                                  (let ((m_r (string-append m_r \"0\")))\n  \
    \                                    (let ((n_r (string-append n_r \"0\")))\n\
    \                                        (let ((m_r (string-append m_r \"0\")))\n\
    \                                          (let ((n_r (string-append n_r \"0\"\
    )))\n                                            (let ((m_r (string-append m_r\
    \ \"0\")))\n                                              (let ((n_r (string-append\
    \ n_r \"0\")))\n                                                (let ((m_r (string-append\
    \ m_r \"0\")))\n                                                  ", "  (let ((n-1\
    \ (sub1 n))\n        (m-1 (sub1 m)))\n    (cond\n      ((>= n m) -1)\n      ((<=\
    \ n m)\n        (let ((n-2 (sub1 n-1))\n              (m-2 (sub1 m-1)))\n    \
    \      (let ((n-3 (sub1 n-2))\n                (m-3 (sub1 m-2)))\n           \
    \ (let ((n-4 (sub1 n-3))\n                  (m-4 (sub1 m-3)))\n              (let\
    \ ((n-5 (sub1 n-4))\n                    (m-5 (sub1 m-4)))\n                (let\
    \ ((n-6 (sub1 n-5))\n                      (m-6 (sub1 m-5)))\n               \
    \   (let ((n-7 (sub1 n-6))\n                        (m-7 (sub1 m-6)))\n      \
    \              (let ((n-8 (sub1 n-7))\n                          (m-8 (sub1 m-7)))\n\
    \                      (let ((n-9 (sub1 n-8))\n                            (m-9\
    \ (sub1 m-8)))\n                        (let ((n-10 (sub1 n-9))\n            \
    \                  (m-10 (sub1 m-9)))\n                          (let ((n-11 (sub1\
    \ n-10))\n                                (m-11 (sub1 m-10)))\n              \
    \              (let ((n-12 (sub1 n-11))\n                                  (m-12\
    \ (sub1 m-11)))\n                              (let ((n-13 (sub1 n-12))\n    \
    \                                 (m-13 (sub1 m-12)))\n                      \
    \          (let ((n-14 (sub1 n-13))\n                                      (m-14\
    \ (sub1 m-13)))\n                                  (let ((n-15 (sub1 n-14))\n\
    \                                        (m-15 (sub1 m-14)))\n               \
    \                     (let ((n-16 (sub1 n-15))\n                             \
    \             (m-16 (sub1 m-15)))\n                                      (let\
    \ ((n-17 (sub1 n-16))\n                                            (m-17 (sub1",
  "  (let ((n (floor n)))\n    (let ((m (floor m)))\n      (cond\n        [(< n m)\
    \ -1]\n        [(= n m) (floor (/ n m))]\n        [(>= n m) (floor (/ (n - m)\
    \ m))]\n        [else (floor (/ (n - m) m))])))))\n", "  (let ((n-1 (sub1 n))\n\
    \        (m-1 (sub1 m)))\n    (cond\n      ((>= n m) -1)\n      ((< n m)\n   \
    \     (let ((n-2 (sub1 n-1))\n              (m-2 (sub1 m-1)))\n          (let\
    \ ((n-3 (sub1 n-2))\n                (m-3 (sub1 m-2)))\n            (let ((n-4\
    \ (sub1 n-3))\n                  (m-4 (sub1 m-3)))\n              (let ((n-5 (sub1\
    \ n-4))\n                    (m-5 (sub1 m-4)))\n                (let ((n-6 (sub1\
    \ n-5))\n                      (m-6 (sub1 m-5)))\n                  (let ((n-7\
    \ (sub1 n-6))\n                        (m-7 (sub1 m-6)))\n                   \
    \ (let ((n-8 (sub1 n-7))\n                          (m-8 (sub1 m-7)))\n      \
    \                (let ((n-9 (sub1 n-8))\n                            (m-9 (sub1\
    \ m-8)))\n                        (let ((n-10 (sub1 n-9))\n                  \
    \            (m-10 (sub1 m-9)))\n                          (let ((n-11 (sub1 n-10))\n\
    \                                (m-11 (sub1 m-10)))\n                       \
    \     (let ((n-12 (sub1 n-11))\n                                  (m-12 (sub1\
    \ m-11)))\n                              (let ((n-13 (sub1 n-12))\n          \
    \                           (m-13 (sub1 m-12)))\n                            \
    \    (let ((n-14 (sub1 n-13))\n                                      (m-14 (sub1\
    \ m-13)))\n                                  (let ((n-15 (sub1 n-14))\n      \
    \                                  (m-15 (sub1 m-14)))\n                     \
    \               (let ((n-16 (sub1 n-15))\n                                   \
    \       (m-16 (sub1 m-15)))\n                                      (let ((n-17\
    \ (sub1 n-16))\n                                            (m-17 (sub1 m", " \
    \ (let ((n-1 (modulo n m)))\n    (if (zero? n-1)\n      (-1)\n      (let ((n-2\
    \ (modulo (sub1 n) m)))\n        (let ((n-3 (modulo (sub1 (sub1 n)) m)))\n   \
    \       (let ((n-4 (modulo (sub1 (sub1 (sub1 n))) m)))\n            (let ((n-5\
    \ (modulo (sub1 (sub1 (sub1 (sub1 n)))) m)))\n              (let ((n-6 (modulo\
    \ (sub1 (sub1 (sub1 (sub1 (sub1 n)))))) m)))\n                (let ((n-7 (modulo\
    \ (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 n)))))) m)))\n                  (let ((n-8\
    \ (modulo (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 n)))))))) m)))\n         \
    \           (let ((n-9 (modulo (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1\
    \ (sub1 n)))))))))) m)))\n                      (let ((n-10 (modulo (sub1 (sub1\
    \ (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 n))))))))))))))))\
    \ m)))\n                        (let ((n-11 (modulo (sub1 (sub1 (sub1 (sub1 (sub1\
    \ (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1\
    \ (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1\
    \ (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1\
    \ (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1\
    \ (sub1 (sub", "  (let ((n (abs n)))\n    (let ((m (abs m)))\n      (if (< n m)\n\
    \        (-1)\n        (let ((sum (+ n m)))\n          (let ((quotient (floor\
    \ (/ sum 2)))\n                remainder (modulo sum 2))\n            (let ((rounded\
    \ (quotient + remainder)))\n              (let ((difference (abs (rounded - sum))))\n\
    \                (if (zero? difference)\n                  rounded\n         \
    \         (rounded - 1))))))))))\n", "  (let ((n-1 n - n - 1))\n    (let ((m-1\
    \ m - m - 1))\n      (let ((n-m-1 n-m-2 n-m-3 n-m-4 n-m-5 n-m-6 n-m-7 n-m-8 n-m-9\
    \ n-m-10 n-m-11 n-m-12 n-m-13 n-m-14 n-m-15 n-m-16 n-m-17 n-m-18 n-m-19 n-m-20\
    \ n-m-21 n-m-22 n-m-23 n-m-24 n-m-25 n-m-26 n-m-27 n-m-28 n-m-29 n-m-30 n-m-31\
    \ n-m-32 n-m-33 n-m-34 n-m-35 n-m-36 n-m-37 n-m-38 n-m-39 n-m-40 n-m-41 n-m-42\
    \ n-m-43 n-m-44 n-m-45 n-m-46 n-m-47 n-m-48 n-m-49 n-m-50 n-m-51 n-m-52 n-m-53\
    \ n-m-54 n-m-55 n-m-56 n-m-57 n-m-58 n-m-59 n-m-60 n-m-61 n-m-62 n-m-63 n-m-64\
    \ n-m-65 n-m-66 n-m-67 n-m-68 n-m-69 n-m-70 n-m-71 n-m-72 n-m-73 n-m-74 n-m-75\
    \ n-m-76 n-m-77 n-m-78 n-m-79 n-m-80 n-m-81 n-m-82 n-m-83 n-m-84 n-m-85 n-m-86\
    \ n-m-87 n-m-88 n-m-89 n-m-90 n-m-91 n-m-92 n-m-93 n-m-94 n-m-95 n-m-96", "  (let\
    \ ((n (abs n)))\n    (let ((m (abs m)))\n      (if (eq? n m)\n        (let ((avg\
    \ (div n m)))\n          (let ((rounded (round avg)))\n            (if (eq? rounded\
    \ 0)\n              (-1)\n              (let ((bin (bin (rounded) 2)))\n     \
    \           (string->number (string->list bin) 0))))))))))\n", "  (let ((n (floor\
    \ n)))\n    (let ((m (floor m)))\n      (cond\n        [(< n m) (-1)]\n      \
    \  [(>= n m) (floor (/ (n - m) 2))]\n        [(<= n m) (floor (/ (m - n) 2))]\n\
    \        [(> n m) (floor (/ (m - n) 2))]\n        [(= n m) (floor (/ (m - n) 2))]\n\
    \        [else (floor (/ (m - n) 2))])))))\n", "  (let ((n (floor n)))\n    (let\
    \ ((m (floor m)))\n      (if (<= n m)\n        (let ((avg (round (/ (n - m) (m\
    \ - n)))))\n          (let ((bin avg))\n            (string-append \"0b\" bin)))\n\
    \        (let ((bin (rounded_avg (m + 1) n)))\n          (string-append \"0b\"\
    \ bin)))\n      (if (< n m)\n        (-1)))\n  )\n)\n", "  (let ((n (floor n)))\n\
    \    (let ((m (floor m)))\n      (if (< n m)\n        (let ((avg (round (/ (n\
    \ - m) (m - n))))\n              (bin avg))\n          (-1))\n        (let ((avg\
    \ (round (/ (n - m) (m - n))))\n              (bin avg))\n          (let ((bin\
    \ (bin (m - n) avg)))\n            (let ((bin (bin (m - n) avg)))\n          \
    \    (let ((bin (bin (m - n) avg)))\n                (let ((bin (bin (m - n) avg)))\n\
    \                  (let ((bin (bin (m - n) avg)))\n                    (let ((bin\
    \ (bin (m - n) avg)))\n                      (let ((bin (bin (m - n) avg)))\n\
    \                        (let ((bin (bin (m - n) avg)))\n                    \
    \      (let ((bin (bin (m - n) avg)))\n                            (let ((bin\
    \ (bin (m - n) avg)))\n                              (let ((bin (bin (m - n) avg)))\n\
    \                                (let ((bin (bin (m - n) avg)))\n            \
    \                      (let ((bin (bin (m - n) avg)))\n                      \
    \              (let ((bin (bin (m - n) avg)))\n                              \
    \        (let ((bin (bin (m - n) avg)))\n                                    \
    \    (let ((bin (bin (m - n) avg)))\n                                        \
    \  (let ((bin (bin (m - n) avg)))\n                                          \
    \  (let ((bin (bin (m - n) avg)))\n                                          \
    \    (let ((bin (bin (m - n) avg)))\n                                        \
    \        (let ((bin (bin (m - n) avg)))\n                                    \
    \              (let ((bin (bin (m - n) avg)))\n                              \
    \                      (let ((bin (bin (m - n) avg)))\n                      \
    \                                (let ((bin (bin (m - n) avg)))\n            \
    \                                            (let ((bin (bin (m - n) avg)))\n\
    \                                                          (let ((bin (bin (m\
    \ - n) avg)))\n                                 ", "  (let ((n-1 (modulo n m)))\n\
    \    (if (< n-1 0)\n      (-1)\n      (let ((n-2 (modulo n n-1)))\n        (let\
    \ ((n-3 (modulo n n-2)))\n          (let ((n-4 (modulo n n-3)))\n            (let\
    \ ((n-5 (modulo n n-4)))\n              (let ((n-6 (modulo n n-5)))\n        \
    \        (let ((n-7 (modulo n n-6)))\n                  (let ((n-8 (modulo n n-7)))\n\
    \                    (let ((n-9 (modulo n n-8)))\n                      (let ((n-10\
    \ (modulo n n-9)))\n                        (let ((n-11 (modulo n n-10)))\n  \
    \                        (let ((n-12 (modulo n n-11)))\n                     \
    \       (let ((n-13 (modulo n n-12)))\n                              (let ((n-14\
    \ (modulo n n-13)))\n                                (let ((n-15 (modulo n n-14)))\n\
    \                                  (let ((n-16 (modulo n n-15)))\n           \
    \                         (let ((n-17 (modulo n n-16)))\n                    \
    \                  (let ((n-18 (modulo n n-17)))\n                           \
    \             (let ((n-19 (modulo n n-18)))\n                                \
    \          (let ((n-20 (modulo n n-19)))\n                                   \
    \         (let ((n-21 (modulo n n-20)))\n                                    \
    \          (let ((n-22 (modulo n n-21)))\n                                   \
    \             (let ((n-23 (modulo n n-22)))\n                                \
    \                  (let ((n-24 (modulo n n-23)))\n                           \
    \                         (let ((n-25 (modulo n n-24)))\n                    \
    \                                  (let ((n-26 (modulo n n-25)))\n           \
    \                                             (let ((n-27 (modulo n n-26)))\n\
    \                                                          (let ((n-28 (modulo\
    \ n n-27)))\n                                ", "  (let ((n_ (floor n)))\n   \
    \ (let ((m_ (floor m)))\n      (if (<= n m)\n        (let ((avg (round (/ (n -\
    \ n_) (m - m_))))\n              (bin avg))\n          (if (zero? avg)\n     \
    \       (-1)\n            bin))\n        (+ (rounded_avg n_ (+ 1 n_)) m_)))\n\
    \  ))\n", "  (let ((n-1 (modulo n m)))\n    (if (< n-1 0)\n      (-1)\n      (if\
    \ (< n-1 m)\n        (/ (modulo (modulo n m) 2) 1)\n        (/ (modulo (modulo\
    \ n m) 2) 0))))\n", "  (cond\n    [(< n m) -1]\n    [(= n m) (floor (/ (n - m)\
    \ 2) + 1)]\n    [else (floor (/ (n - m) 2) + 1)]))\n", "  (cond\n    ((< n m)\
    \ -1)\n    ((= n m) (round (/ (n m) 2)))\n    (else\n      (let ((n (round n)))\n\
    \        (let ((m (round m)))\n          (let ((avg (round (/ (n m) 2))))\n  \
    \          (let ((n_bit (bin (n - 1))))\n              (let ((m_bit (bin (m -\
    \ 1))))\n                (let ((avg_bit (bin avg)))\n                  (let ((diff\
    \ (bin (- (m n) 1))))\n                    (let ((diff_bit (bin diff)))\n    \
    \                  (let ((result (bin (+ (m_bit diff_bit) avg_bit))))\n      \
    \                  (+ result n_bit))))))))))))))))\n", "  (let ((n (floor n)))\n\
    \    (let ((m (floor m)))\n      (if (<= n m)\n        (let ((avg (round (/ (n\
    \ - m) n) 2)))\n          (let ((bin (binavg (avg) 2)))\n            (if (binavg?\
    \ bin)\n              bin\n              (let ((i (1)))\n                (while\
    \ (< i m)\n                  (let ((next (binavg (avg + i) 2)))\n            \
    \        (if (binavg? next)\n                      (bin (avg + i) 2)\n       \
    \               (bin (avg + i) 2)\n                      (bin (avg + i) 2)\n \
    \                     (bin (avg + i) 2)\n                      (bin (avg + i)\
    \ 2)\n                      (bin (avg + i) 2)\n                      (bin (avg\
    \ + i) 2)\n                      (bin (avg + i) 2)\n                      (bin\
    \ (avg + i) 2)\n                      (bin (avg + i) 2)\n                    \
    \  (bin (avg + i) 2)\n                      (bin (avg + i) 2)\n              \
    \        (bin (avg + i) 2)\n                      (bin (avg + i) 2)\n        \
    \              (bin (avg + i) 2)\n                      (bin (avg + i) 2)\n  \
    \                    (bin (avg + i) 2)\n                      (bin (avg + i) 2)\n\
    \                      (bin (avg + i) 2)\n                      (bin (avg + i)\
    \ 2)\n                      (bin (avg + i) 2)\n                      (bin (avg\
    \ + i) 2)\n                      (bin (avg + i) 2)\n                      (bin\
    \ (avg + i) 2)\n                      (bin (avg + i) 2)\n                    \
    \  (bin (avg + i) 2)\n                      (bin (avg + i) 2)\n              \
    \        (bin (avg + i) 2)\n                      (bin (avg + i) 2)\n        \
    \              (bin (avg + i) 2)\n                      (bin (avg + i) 2)\n  \
    \                    (bin (avg + i) 2)\n                      (bin (", "  (let\
    \ ((n_ (integer->string n))\n        (m_ (integer->string m)))\n    (if (>= n\
    \ m)\n      (-1)\n      (let ((n_ (string->integer n_))\n             (m_ (string->integer\
    \ m_)))\n        (let ((sum (+ n_ m_))\n              (avg (div sum 2)))\n   \
    \       (string->integer avg))))))\n", "  (let ((n_int (floor n)))\n    (let ((m_int\
    \ (floor m)))\n      (if (<= n_int m_int)\n        (let ((avg (round (/ (n_int\
    \ + 1) (m_int + 1))))\n              (bin avg))\n          (format \"0b\" bin))\n\
    \        (format \"-1\")))\n  )\n)\n", "  (let ((n (floor n)))\n    (let ((m (floor\
    \ m)))\n      (cond\n        [(< n m) (-1)]\n        [(= n m) (floor (/ n m))]\n\
    \        [(< n) (floor (/ n m))]\n        [(<= n) (floor (/ n m))]\n        [(>=\
    \ n) (floor (/ n m))]\n        [(> n) (floor (/ n m))]\n        [else (floor (/\
    \ n m))])))))\n", "  (cond\n    [(< n m) -1]\n    [(>= n m) 0]\n    [(<= n m)\n\
    \      (let ((n (floor n)))\n        (let ((m (floor m)))\n          (let ((avg\
    \ (avg n m)))\n            (let ((rounded (round avg)))\n              (cond\n\
    \                [(< rounded 0) (-1)]\n                [(> rounded 1) 1]\n   \
    \             [else rounded])))))]))\n", "  (let ((n_ (integer->string n))\n \
    \       (m_ (integer->string m)))\n    (if (> n m)\n      (-1)\n      (let ((avg\
    \ (string->integer (string->list (string-append n_ m_))))\n            (rounded_avg\
    \ (string->list (string-append \"0b\" (string->integer avg)))))))))\n", "  (let\
    \ ((n-1 (modulo n m)))\n    (if (< n-1 0)\n      (-1)\n      (let ((n-2 (modulo\
    \ n-1 m)))\n        (let ((n-3 (modulo n-2 m)))\n          (let ((n-4 (modulo\
    \ n-3 m)))\n            (let ((n-5 (modulo n-4 m)))\n              (let ((n-6\
    \ (modulo n-5 m)))\n                (let ((n-7 (modulo n-6 m)))\n            \
    \      (let ((n-8 (modulo n-7 m)))\n                    (let ((n-9 (modulo n-8\
    \ m)))\n                      (let ((n-10 (modulo n-9 m)))\n                 \
    \       (let ((n-11 (modulo n-10 m)))\n                          (let ((n-12 (modulo\
    \ n-11 m)))\n                            (let ((n-13 (modulo n-12 m)))\n     \
    \                         (let ((n-14 (modulo n-13 m)))\n                    \
    \            (let ((n-15 (modulo n-14 m)))\n                                 \
    \ (let ((n-16 (modulo n-15 m)))\n                                    (let ((n-17\
    \ (modulo n-16 m)))\n                                      (let ((n-18 (modulo\
    \ n-17 m)))\n                                        (let ((n-19 (modulo n-18\
    \ m)))\n                                          (let ((n-20 (modulo n-19 m)))\n\
    \                                            (let ((n-21 (modulo n-20 m)))\n \
    \                                             (let ((n-22 (modulo n-21 m)))\n\
    \                                                (let ((n-23 (modulo n-22 m)))\n\
    \                                                  (let ((n-24 (modulo n-23 m)))\n\
    \                                                    (let ((n-25 (modulo n-24\
    \ m)))\n                                                      (let ((n-26 (modulo\
    \ n-25 m)))\n                                                        (let ((n-27\
    \ (modulo n-26 m)))\n                                                        \
    \  (let ((n-28 (modulo n-27 m)))\n                                ", "  (let ((n\
    \ (floor n)))\n    (let ((m (floor m)))\n      (if (<= n m)\n        (let ((avg\
    \ (round (/ (n - m) (m - n))))\n              (bin avg))\n          (format \"\
    0b\" bin))\n        (format \"0b\" -1)))\n  )\n)\n", "  (let ((n-1 (modulo n m)))\n\
    \    (if (< n-1 0)\n      (-1)\n      (let ((n-2 (modulo n-1 m)))\n        (let\
    \ ((n-3 (modulo n-2 m)))\n          (let ((n-4 (modulo n-3 m)))\n            (let\
    \ ((n-5 (modulo n-4 m)))\n              (let ((n-6 (modulo n-5 m)))\n        \
    \        (let ((n-7 (modulo n-6 m)))\n                  (let ((n-8 (modulo n-7\
    \ m)))\n                    (let ((n-9 (modulo n-8 m)))\n                    \
    \  (let ((n-10 (modulo n-9 m)))\n                        (let ((n-11 (modulo n-10\
    \ m)))\n                          (let ((n-12 (modulo n-11 m)))\n            \
    \                (let ((n-13 (modulo n-12 m)))\n                             \
    \ (let ((n-14 (modulo n-13 m)))\n                                (let ((n-15 (modulo\
    \ n-14 m)))\n                                  (let ((n-16 (modulo n-15 m)))\n\
    \                                    (let ((n-17 (modulo n-16 m)))\n         \
    \                             (let ((n-18 (modulo n-17 m)))\n                \
    \                        (let ((n-19 (modulo n-18 m)))\n                     \
    \                     (let ((n-20 (modulo n-19 m)))\n                        \
    \                    (let ((n-21 (modulo n-20 m)))\n                         \
    \                     (let ((n-22 (modulo n-21 m)))\n                        \
    \                        (let ((n-23 (modulo n-22 m)))\n                     \
    \                             (let ((n-24 (modulo n-23 m)))\n                \
    \                                    (let ((n-25 (modulo n-24 m)))\n         \
    \                                             (let ((n-26 (modulo n-25 m)))\n\
    \                                                        (let ((n-27 (modulo n-26\
    \ m)))\n                                                          (let ((n-28\
    \ (modulo n-27 m)))\n                                ", "  (let ((n-1 (modulo\
    \ n m)))\n    (if (< n m)\n      (-1)\n      (let ((n-2 (modulo n n-1)))\n   \
    \     (let ((n-3 (modulo n n-2)))\n          (let ((n-4 (modulo n n-3)))\n   \
    \         (let ((n-5 (modulo n n-4)))\n              (let ((n-6 (modulo n n-5)))\n\
    \                (let ((n-7 (modulo n n-6)))\n                  (let ((n-8 (modulo\
    \ n n-7)))\n                    (let ((n-9 (modulo n n-8)))\n                \
    \      (let ((n-10 (modulo n n-9)))\n                        (let ((n-11 (modulo\
    \ n n-10)))\n                          (let ((n-12 (modulo n n-11)))\n       \
    \                     (let ((n-13 (modulo n n-12)))\n                        \
    \      (let ((n-14 (modulo n n-13)))\n                                (let ((n-15\
    \ (modulo n n-14)))\n                                  (let ((n-16 (modulo n n-15)))\n\
    \                                    (let ((n-17 (modulo n n-16)))\n         \
    \                             (let ((n-18 (modulo n n-17)))\n                \
    \                        (let ((n-19 (modulo n n-18)))\n                     \
    \                     (let ((n-20 (modulo n n-19)))\n                        \
    \                    (let ((n-21 (modulo n n-20)))\n                         \
    \                     (let ((n-22 (modulo n n-21)))\n                        \
    \                        (let ((n-23 (modulo n n-22)))\n                     \
    \                             (let ((n-24 (modulo n n-23)))\n                \
    \                                    (let ((n-25 (modulo n n-24)))\n         \
    \                                             (let ((n-26 (modulo n n-25)))\n\
    \                                                        (let ((n-27 (modulo n\
    \ n-26)))\n                                                          (let ((n-28\
    \ (modulo n n-27)))\n                                  ", "  (let ((n-1 (modulo\
    \ n m)))\n    (if (<= n-1 0)\n      (-1)\n      (+ (modulo (- n-1 n) m) (/ n-1\
    \ n)))))\n", "  (let ((n (floor n)))\n    (let ((m (floor m)))\n      (let ((avg\
    \ (div n m)))\n        (let ((rounded (mod avg 2)))\n          (if (< rounded\
    \ 0) (-1) (rounded)))))\n    ))\n", "  (let ((n (abs n)))\n    (let ((m (abs m)))\n\
    \      (if (< n m)\n        (-1)\n        (let ((avg (round (/ (n - m) n) 2)))\n\
    \          (let ((bin (string-append \"0b\" avg)))\n            bin))))))\n",
  "  (let ((n (floor n)))\n    (let ((m (floor m)))\n      (if (<= n m)\n        (let\
    \ ((avg (round (/ (n - m) (m - n)))))\n          (let ((bin (bin avg)))\n    \
    \        (if (even? bin)\n              bin\n              (bin - 1)))\n     \
    \   )\n      )\n      (-1)\n    )\n  )\n)\n", "  (let ((n (abs n)))\n    (let\
    \ ((m (abs m)))\n      (if (eq? n m)\n        (let ((avg (div n m)))\n       \
    \   (if (neg? n)\n            (- avg)\n            avg))\n        (if (gt? n m)\n\
    \          (-1)\n          (let ((avg (div n m)))\n            (if (neg? n)\n\
    \              (- avg)\n              avg))))))\n", "  (let ((n_ (floor n)))\n\
    \    (let ((m_ (floor m)))\n      (if (<= n m)\n        (let ((avg (round (/ (n\
    \ - n_) (m - m_))))\n              (bin avg))\n          (bin \"0b\" avg))\n \
    \       (bin \"-1\"))))\n)\n", "  (let ((n-1 (modulo n m)))\n    (if (<= n-1 0)\n\
    \      (-1)\n      (+ (modulo (divide n m) 2) (modulo (divide n-1 m) 2)))\n  )\n\
    )\n", "  (let ((n_ (floor n)))\n    (let ((m_ (floor m)))\n      (if (<= n m)\n\
    \        (let ((n_ (floor n_)))\n          (let ((m_ (floor m_)))\n          \
    \  (if (<= n_ m_)\n              (let ((n_ (floor n_)))\n                (let\
    \ ((m_ (floor m_)))\n                  (if (<= n_ m_)\n                    (let\
    \ ((n_ (floor n_)))\n                      (let ((m_ (floor m_)))\n          \
    \              (if (<= n_ m_)\n                          (let ((n_ (floor n_)))\n\
    \                            (let ((m_ (floor m_)))\n                        \
    \      (if (<= n_ m_)\n                                (let ((n_ (floor n_)))\n\
    \                                  (let ((m_ (floor m_)))\n                  \
    \                  (if (<= n_ m_)\n                                      (let\
    \ ((n_ (floor n_)))\n                                        (let ((m_ (floor\
    \ m_)))\n                                          (if (<= n_ m_)\n          \
    \                                  (let ((n_ (floor n_)))\n                  \
    \                            (let ((m_ (floor m_)))\n                        \
    \                        (if (<= n_ m_)\n                                    \
    \              (let ((n_ (floor n_)))\n                                      \
    \              (let ((m_ (floor m_)))\n                                      \
    \                (if (<= n_ m_)\n                                            \
    \            (let ((n_ (floor n_)))\n                                        \
    \                  (let ((m_ (floor m_)))\n                                  \
    \                          (if (<= n_ m_)\n                                  \
    \                            (let ((n_ (floor n_)))\n                        \
    \                                        (let ((m_ (floor m_)))\n            \
    \                                                      (if (<= n_ m_)\n      \
    \                                                              (let ((n_ (floor\
    \ n_)))\n                                                                    \
    \  (let ((m_ (floor m_)))\n                                                  \
    \                      (if (<= n_ m_)\n                                      \
    \                                    (let ((n_ (floor n_)))\n                \
    \                                                            ", "  (let ((n-1\
    \ (modulo n m)))\n    (if (< n-1 0)\n      (-1)\n      (let ((n-2 (modulo n-1\
    \ m)))\n        (let ((n-3 (modulo n-2 m)))\n          (let ((n-4 (modulo n-3\
    \ m)))\n            (let ((n-5 (modulo n-4 m)))\n              (let ((n-6 (modulo\
    \ n-5 m)))\n                (let ((n-7 (modulo n-6 m)))\n                  (let\
    \ ((n-8 (modulo n-7 m)))\n                    (let ((n-9 (modulo n-8 m)))\n  \
    \                    (let ((n-10 (modulo n-9 m)))\n                        (let\
    \ ((n-11 (modulo n-10 m)))\n                          (let ((n-12 (modulo n-11\
    \ m)))\n                            (let ((n-13 (modulo n-12 m)))\n          \
    \                    (let ((n-14 (modulo n-13 m)))\n                         \
    \       (let ((n-15 (modulo n-14 m)))\n                                  (let\
    \ ((n-16 (modulo n-15 m)))\n                                    (let ((n-17 (modulo\
    \ n-16 m)))\n                                      (let ((n-18 (modulo n-17 m)))\n\
    \                                        (let ((n-19 (modulo n-18 m)))\n     \
    \                                     (let ((n-20 (modulo n-19 m)))\n        \
    \                                    (let ((n-21 (modulo n-20 m)))\n         \
    \                                     (let ((n-22 (modulo n-21 m)))\n        \
    \                                        (let ((n-23 (modulo n-22 m)))\n     \
    \                                             (let ((n-24 (modulo n-23 m)))\n\
    \                                                    (let ((n-25 (modulo n-24\
    \ m)))\n                                                      (let ((n-26 (modulo\
    \ n-25 m)))\n                                                        (let ((n-27\
    \ (modulo n-26 m)))\n                                                        \
    \  (let ((n-28 (modulo n-27 m)))\n                                ", "  (let ((n_\
    \ (floor n)))\n    (let ((m_ (floor m)))\n      (cond\n        [(< n m_) (-1)]\n\
    \        [(>= n_ m_) (rounded_avg n_ (sub1 m_))]\n        [(<= n_ m_) (rounded_avg\
    \ n_ (sub1 m_))]\n        [(= n_ m_) (rounded_avg n_ (sub1 m_))]\n        [else\
    \ (rounded_avg n_ (sub1 m_))]\n      )\n    )\n  )\n)\n", "  (let ((n-1 n - n\
    \ + 1)\n         (m-1 m - m + 1)\n         (sum 0))\n    (if (<= n m)\n      (+\
    \ sum (/ n m))\n      (- 1)))\n", "  (let ((n-1 (modulo n m)))\n    (if (< n-1\
    \ 0)\n      (-1)\n      (let ((n-2 (modulo n-1 m)))\n        (let ((n-3 (modulo\
    \ n-2 m)))\n          (let ((n-4 (modulo n-3 m)))\n            (let ((n-5 (modulo\
    \ n-4 m)))\n              (let ((n-6 (modulo n-5 m)))\n                (let ((n-7\
    \ (modulo n-6 m)))\n                  (let ((n-8 (modulo n-7 m)))\n          \
    \          (let ((n-9 (modulo n-8 m)))\n                      (let ((n-10 (modulo\
    \ n-9 m)))\n                        (let ((n-11 (modulo n-10 m)))\n          \
    \                (let ((n-12 (modulo n-11 m)))\n                            (let\
    \ ((n-13 (modulo n-12 m)))\n                              (let ((n-14 (modulo\
    \ n-13 m)))\n                                (let ((n-15 (modulo n-14 m)))\n \
    \                                 (let ((n-16 (modulo n-15 m)))\n            \
    \                        (let ((n-17 (modulo n-16 m)))\n                     \
    \                 (let ((n-18 (modulo n-17 m)))\n                            \
    \            (let ((n-19 (modulo n-18 m)))\n                                 \
    \         (let ((n-20 (modulo n-19 m)))\n                                    \
    \        (let ((n-21 (modulo n-20 m)))\n                                     \
    \         (let ((n-22 (modulo n-21 m)))\n                                    \
    \            (let ((n-23 (modulo n-22 m)))\n                                 \
    \                 (let ((n-24 (modulo n-23 m)))\n                            \
    \                        (let ((n-25 (modulo n-24 m)))\n                     \
    \                                 (let ((n-26 (modulo n-25 m)))\n            \
    \                                            (let ((n-27 (modulo n-26 m)))\n \
    \                                                         (let ((n-28 (modulo\
    \ n-27 m)))\n                                ", "  (let ((n-1 (modulo n m)))\n\
    \    (if (< n m)\n      (-1)\n      (let ((n-2 (modulo n (sub1 n))))\n       \
    \ (let ((m-1 (modulo m (sub1 n))))\n          (let ((n-3 (modulo n (sub1 n-1))))\n\
    \            (let ((m-2 (modulo m (sub1 n-2))))\n              (let ((n-4 (modulo\
    \ n (sub1 n-3))))\n                (let ((m-3 (modulo m (sub1 n-4))))\n      \
    \            (let ((n-5 (modulo n (sub1 n-4))))\n                    (let ((m-4\
    \ (modulo m (sub1 n-5))))\n                      (let ((n-6 (modulo n (sub1 n-5))))\n\
    \                        (let ((m-5 (modulo m (sub1 n-6))))\n                \
    \          (let ((n-7 (modulo n (sub1 n-6))))\n                            (let\
    \ ((m-6 (modulo m (sub1 n-7))))\n                              (let ((n-8 (modulo\
    \ n (sub1 n-7))))\n                                (let ((m-7 (modulo m (sub1\
    \ n-8))))\n                                  (let ((n-9 (modulo n (sub1 n-8))))\n\
    \                                    (let ((m-8 (modulo m (sub1 n-9))))\n    \
    \                                  (let ((n-10 (modulo n (sub1 n-9))))\n     \
    \                                   (let ((m-9 (modulo m (sub1 n-10))))\n    \
    \                                      (let ((n-11 (modulo n (sub1 n-10))))\n\
    \                                            (let ((m-10 (modulo m (sub1 n-11))))\n\
    \                                              (let ((n-12 (modulo n (sub1 n-11))))\n\
    \                                                (let ((m-11 (modulo m (sub1 n-12))))\n\
    \                                                  (let ((n-13 (modulo n (sub1\
    \ n-12))))\n                                                    (let ((m-12 (modulo\
    \ m (sub1 n-13))))\n                                   ", "  (let ((n_ (floor\
    \ n)))\n    (let ((m_ (floor m)))\n      (if (<= n m)\n        (let ((avg (round\
    \ (/ (n - n_) (m - m_))))\n              (bin avg))\n          (bin \"0b\" avg))\n\
    \        (if (< n m)\n          (-1)\n          (let ((avg (round (/ (n - n_)\
    \ (m - m_))))\n                (bin avg))\n            (bin \"0b\" avg)))))))\n",
  "  (cond\n    ((< n m) -1)\n    ((= n m) (round (/ (n m) 2) 2))\n    (else\n   \
    \   (let ((n (round (/ n 2) 2)))\n        (let ((m (round (/ m 2) 2)))\n     \
    \     (let ((avg (round (/ (+ n m) 2) 2)))\n            (let ((bin (bin_rep avg)))\n\
    \              (+ (string-append \"0b\" bin) (string-append \"0b\" (bin_rep m))))))))))\n",
  "  (let ((n (floor n)))\n    (let ((m (floor m)))\n      (if (< n m)\n        (-1)\n\
    \        (let ((avg (round (/ (n - m) n) 2)))\n          (let ((bin (string-append\
    \ \"0b\" avg)))\n            bin)))\n      bin))\n)\n", "  (let ((n_ (floor n)))\n\
    \    (let ((m_ (floor m)))\n      (if (<= n m)\n        (let ((n_ (floor n_)))\n\
    \          (let ((m_ (floor m_)))\n            (if (<= n_ m_)\n              (let\
    \ ((n_ (floor n_)))\n                (let ((m_ (floor m_)))\n                \
    \  (if (<= n_ m_)\n                    (let ((n_ (floor n_)))\n              \
    \        (let ((m_ (floor m_)))\n                        (if (<= n_ m_)\n    \
    \                      (let ((n_ (floor n_)))\n                            (let\
    \ ((m_ (floor m_)))\n                              (if (<= n_ m_)\n          \
    \                      (let ((n_ (floor n_)))\n                              \
    \    (let ((m_ (floor m_)))\n                                    (if (<= n_ m_)\n\
    \                                      (let ((n_ (floor n_)))\n              \
    \                          (let ((m_ (floor m_)))\n                          \
    \                (if (<= n_ m_)\n                                            (let\
    \ ((n_ (floor n_)))\n                                              (let ((m_ (floor\
    \ m_)))\n                                                (if (<= n_ m_)\n    \
    \                                              (let ((n_ (floor n_)))\n      \
    \                                              (let ((m_ (floor m_)))\n      \
    \                                                (if (<= n_ m_)\n            \
    \                                            (let ((n_ (floor n_)))\n        \
    \                                                  (let ((m_ (floor m_)))\n  \
    \                                                          (if (<= n_ m_)\n  \
    \                                                            (let ((n_ (floor\
    \ n_)))\n                                                                (let\
    \ ((m_ (floor m_)))\n                                                        \
    \          (if (<= n_ m_)\n                                                  \
    \                  (let ((n_ (floor n_)))\n                                  \
    \                                    (let ((m_ (floor m_)))\n                \
    \                                                        (if (<= n_ m_)\n    \
    \                                                                      (let ((n_\
    \ (floor n_)))\n                                                             \
    \               ", "  (let ((n (floor n)))\n    (let ((m (floor m)))\n      (if\
    \ (<= n m)\n        (let ((avg (round (/ (n - m) (m - n))))\n              (bin\
    \ avg))\n          (if (< avg 1)\n            (-1)\n            bin))\n      \
    \  avg)))\n)\n", "  (let ((n-1 (modulo n m)))\n    (if (< n m)\n      (-1)\n \
    \     (let ((n-2 (modulo n (sub1 n))))\n        (let ((n-3 (modulo n (sub1 n-1))))\n\
    \          (let ((n-4 (modulo n (sub1 n-2))))\n            (let ((n-5 (modulo\
    \ n (sub1 n-3))))\n              (let ((n-6 (modulo n (sub1 n-4))))\n        \
    \        (let ((n-7 (modulo n (sub1 n-5))))\n                  (let ((n-8 (modulo\
    \ n (sub1 n-6))))\n                    (let ((n-9 (modulo n (sub1 n-7))))\n  \
    \                    (let ((n-10 (modulo n (sub1 n-8))))\n                   \
    \     (let ((n-11 (modulo n (sub1 n-9))))\n                          (let ((n-12\
    \ (modulo n (sub1 n-10))))\n                            (let ((n-13 (modulo n\
    \ (sub1 n-11))))\n                              (let ((n-14 (modulo n (sub1 n-12))))\n\
    \                                (let ((n-15 (modulo n (sub1 n-13))))\n      \
    \                            (let ((n-16 (modulo n (sub1 n-14))))\n          \
    \                          (let ((n-17 (modulo n (sub1 n-15))))\n            \
    \                          (let ((n-18 (modulo n (sub1 n-16))))\n            \
    \                            (let ((n-19 (modulo n (sub1 n-17))))\n          \
    \                                (let ((n-20 (modulo n (sub1 n-18))))\n      \
    \                                      (let ((n-21 (modulo n (sub1 n-19))))\n\
    \                                              (let ((n-22 (modulo n (sub1 n-20))))\n\
    \                                                (let ((n-23 (modulo n (sub1 n-21))))\n\
    \                                                  (let ((n-24 (modulo n (sub1\
    \ n-22))))\n                                                    (let ((n-25 (modulo\
    \ n (sub1 n-23))))\n                                 ", "  (let ((n-1 (modulo\
    \ n m)))\n    (if (<= n-1 0)\n      (-1)\n      (+ (modulo (- n-1 n) m)\n    \
    \     (rounded_avg (- n-1 n) m))))\n)\n", "  (let ((n-1 (modulo n m)))\n    (if\
    \ (<= n-1 0)\n      (-1)\n      (+ (modulo (divide n-1 m) 2) (modulo (divide n-1\
    \ m) 2))))\n)\n", "  (let ((n-1 (modulo n m)))\n    (if (<= n-1 0)\n      (-1)\n\
    \      (+ (modulo (divide n m) 2) (modulo (divide n-1 m) 2)))\n    ))\n", "  (let\
    \ ((n_ (floor n)))\n    (let ((m_ (floor m)))\n      (if (<= n m)\n        (let\
    \ ((avg (round (/ (n - n_) (m - m_))))\n              (bin avg))\n          (bin\
    \ (- 1) (bin avg)))\n        (bin (- 1))))))\n", "  (let ((n (floor n)))\n   \
    \ (let ((m (floor m)))\n      (cond\n        [(< n m) (-1)]\n        [(>= n m)\
    \ (floor (/ (n - m) 2))]\n        [(<= n m) (floor (/ (m - n) 2))]\n        [(>\
    \ n m) (floor (/ (m - n) 2))]\n        [(= n m) (floor (/ (m - n) 2))]\n     \
    \   [else (floor (/ (m - n) 2))])))))\n", "  (let ((n-1 n - n + 1)\n         (m-1\
    \ m - m + 1)\n         (sum 0)\n         (avg 0))\n    (if (< n m)\n      (-1)\n\
    \    (for ((i n - 1) (i m))\n      (set! sum (+ i i))\n      (set! avg (+ sum\
    \ sum) / 2))\n    (+ avg (m - n + 1))))\n", "  (let ((n-1 (modulo n m)))\n   \
    \ (if (< n 0) -1\n      (if (< n-1 0)\n        (let ((n-2 (modulo n-1 m)))\n \
    \         (let ((n-3 (modulo n-2 m)))\n            (let ((n-4 (modulo n-3 m)))\n\
    \              (let ((n-5 (modulo n-4 m)))\n                (let ((n-6 (modulo\
    \ n-5 m)))\n                  (let ((n-7 (modulo n-6 m)))\n                  \
    \  (let ((n-8 (modulo n-7 m)))\n                      (let ((n-9 (modulo n-8 m)))\n\
    \                        (let ((n-10 (modulo n-9 m)))\n                      \
    \    (let ((n-11 (modulo n-10 m)))\n                            (let ((n-12 (modulo\
    \ n-11 m)))\n                              (let ((n-13 (modulo n-12 m)))\n   \
    \                             (let ((n-14 (modulo n-13 m)))\n                \
    \                  (let ((n-15 (modulo n-14 m)))\n                           \
    \         (let ((n-16 (modulo n-15 m)))\n                                    \
    \  (let ((n-17 (modulo n-16 m)))\n                                        (let\
    \ ((n-18 (modulo n-17 m)))\n                                          (let ((n-19\
    \ (modulo n-18 m)))\n                                            (let ((n-20 (modulo\
    \ n-19 m)))\n                                              (let ((n-21 (modulo\
    \ n-20 m)))\n                                                (let ((n-22 (modulo\
    \ n-21 m)))\n                                                  (let ((n-23 (modulo\
    \ n-22 m)))\n                                                    (let ((n-24 (modulo\
    \ n-23 m)))\n                                                      (let ((n-25\
    \ (modulo n-24 m)))\n                                                        (let\
    \ ((n-26 (modulo n-25 m)))\n                                                 \
    \         (let ((n-27 (modulo n-26 m)))\n                                    \
    \                        (let", "  (let ((n_ (integer->string n))\n        (m_\
    \ (integer->string m)))\n    (if (> m n)\n      (-1)\n      (let ((n_ (integer->string\
    \ n))\n             (m_ (integer->string m)))\n        (let ((n_ (integer->string\
    \ n))\n              (m_ (integer->string m)))\n          (let ((n_ (integer->string\
    \ n))\n                (m_ (integer->string m)))\n            (let ((n_ (integer->string\
    \ n))\n                  (m_ (integer->string m)))\n              (let ((n_ (integer->string\
    \ n))\n                    (m_ (integer->string m)))\n                (let ((n_\
    \ (integer->string n))\n                      (m_ (integer->string m)))\n    \
    \              (let ((n_ (integer->string n))\n                        (m_ (integer->string\
    \ m)))\n                    (let ((n_ (integer->string n))\n                 \
    \         (m_ (integer->string m)))\n                      (let ((n_ (integer->string\
    \ n))\n                            (m_ (integer->string m)))\n               \
    \         (let ((n_ (integer->string n))\n                              (m_ (integer->string\
    \ m)))\n                          (let ((n_ (integer->string n))\n           \
    \                     (m_ (integer->string m)))\n                            (let\
    \ ((n_ (integer->string n))\n                                  (m_ (integer->string\
    \ m)))\n                              (let ((n_ (integer->string n))\n       \
    \                             (m_ (integer->string m)))\n                    \
    \            (let ((n_ (integer->string n))\n                                \
    \      (m_ (integer->string m)))\n                                  (let ((n_\
    \ (integer->string n))\n                                        (m_ (integer->string\
    \ m)))\n                                    (let ((n_ (integer->string n))\n \
    \                                         (m_ (integer->string m)))\n        \
    \                              (let ((n_ (integer->string n))\n              \
    \                              (m_ (integer->string m)))\n                   \
    \                     (let ((n_ (integer->string n))\n                       \
    \                       (m_ (integer->string m)))\n                          \
    \                (let ((n_ (integer->string n))", "  (let ((n-1 (modulo n m)))\n\
    \    (if (<= n-1 0)\n      (-1)\n      (+ (modulo (divide n-1 m) 2) (modulo (divide\
    \ n-1 m) 2)))))\n", "  (let ((n (floor n)))\n    (let ((m (floor m)))\n      (if\
    \ (<= n m)\n        (let ((avg (round (/ (n - m) (m - n))))\n              (bin\
    \ avg))\n          (if (< avg 1)\n            (-1)\n            bin))\n      \
    \  avg))\n  ))\n", "  (let ((n-1 n - n + 1)\n         (m-1 m - m + 1)\n      \
    \   (sum 0))\n    (if (>= n m)\n      (-1)\n      (do ((i n)\n            (j m))\n\
    \        ((<= i j)\n          (set! sum (+ (i) (j))))\n        (set! i (- 1 i))\n\
    \        (set! j (- 1 j))))\n    (+ (truncate (/ (sum) 2)) 1)))\n", "  (let ((n-1\
    \ (modulo n m)))\n    (if (< n m)\n      (-1)\n      (let ((n-2 (modulo n n-1)))\n\
    \        (let ((m-1 (modulo m n-1)))\n          (let ((m-2 (modulo m m-1)))\n\
    \            (let ((n-3 (modulo n n-2)))\n              (let ((m-3 (modulo m m-2)))\n\
    \                (let ((n-4 (modulo n n-3)))\n                  (let ((m-4 (modulo\
    \ m m-3)))\n                    (let ((n-5 (modulo n n-4)))\n                \
    \      (let ((m-5 (modulo m m-4)))\n                        (let ((n-6 (modulo\
    \ n n-5)))\n                          (let ((m-6 (modulo m m-5)))\n          \
    \                  (let ((n-7 (modulo n n-6)))\n                             \
    \ (let ((m-7 (modulo m m-6)))\n                                (let ((n-8 (modulo\
    \ n n-7)))\n                                  (let ((m-8 (modulo m m-7)))\n  \
    \                                  (let ((n-9 (modulo n n-8)))\n             \
    \                         (let ((m-9 (modulo m m-8)))\n                      \
    \                  (let ((n-10 (modulo n n-9)))\n                            \
    \              (let ((m-10 (modulo m m-9)))\n                                \
    \            (let ((n-11 (modulo n n-10)))\n                                 \
    \             (let ((m-11 (modulo m m-10)))\n                                \
    \                (let ((n-12 (modulo n n-11)))\n                             \
    \                     (let ((m-12 (modulo m m-11)))\n                        \
    \                            (let ((n-13 (modulo n n-12)))\n                 \
    \                                     (let ((m-13 (modulo m m-12)))\n        \
    \                                                (let ((n-14 (modulo n n-13)))\n\
    \                                                          (let ((m-14 (modulo\
    \ m m-13)))\n                                  ", "  (let ((n_ (floor n)))\n \
    \   (let ((m_ (floor m)))\n      (if (<= n m)\n        (let ((avg (round (/ (n\
    \ - n_) (m - m_))))\n              (bin avg))\n          (bin_to_int bin))\n \
    \       (else\n          -1)))))\n", "  (let ((n (floor n)))\n    (let ((m (floor\
    \ m)))\n      (let ((n_m (+ n m)))\n        (let ((avg (div n_m 2)))\n       \
    \   (let ((rounded_avg (mod avg 2)))\n            (cond\n              [(< n m)\
    \ -1]\n              [(= n m) (floor rounded_avg)]\n              [(> n m) -1]\n\
    \              [(>= n m) (floor rounded_avg)]\n              [else rounded_avg]))))))\n",
  "  (cond\n    ((< n m) -1)\n    ((= n m) (round (/ (n m) 2) 2))\n    (else\n   \
    \   (let ((n m))\n        (let ((n m))\n          (let ((n m))\n            (let\
    \ ((n m))\n              (let ((n m))\n                (let ((n m))\n        \
    \          (let ((n m))\n                    (let ((n m))\n                  \
    \    (let ((n m))\n                        (let ((n m))\n                    \
    \      (let ((n m))\n                            (let ((n m))\n              \
    \                (let ((n m))\n                                (let ((n m))\n\
    \                                  (let ((n m))\n                            \
    \        (let ((n m))\n                                      (let ((n m))\n  \
    \                                      (let ((n m))\n                        \
    \                  (let ((n m))\n                                            (let\
    \ ((n m))\n                                              (let ((n m))\n      \
    \                                          (let ((n m))\n                    \
    \                              (let ((n m))\n                                \
    \                    (let ((n m))\n                                          \
    \            (let ((n m))\n                                                  \
    \      (let ((n m))\n                                                        \
    \  (let ((n m))\n                                                            (let\
    \ ((n m))\n                                                              (let\
    \ ((n m))\n                                                                (let\
    \ ((n m))\n                                                                  (let\
    \ ((n m))\n                                                                  \
    \  (let ((n m))\n                                                            \
    \          (let ((n m))\n                                                    \
    \                    (let ((n m))\n                                          \
    \                                (let ((n m))\n                              \
    \                                              (let ((n m))\n                \
    \                                                              (let ((n m))\n\
    \                                                                            \
    \    (let ((n m))\n                                                          \
    \                        (let ((n m))\n                                      \
    \                                              (let ((n m))\n                \
    \                                                                      (let ((n\
    \ m))\n                                                                      \
    \                  (let ((n m))\n                                            \
    \                                              (let ((n m))\n                \
    \                                                                            (let\
    \ ((n m))\n                                                                  \
    \                           (let ((n m))\n", "  (let ((n-1 (modulo n m)))\n  \
    \  (if (<= n-1 0)\n      (-1)\n      (let ((n-2 (modulo (sub1 n) m)))\n      \
    \  (let ((n-3 (modulo (sub1 (sub1 n)) m)))\n          (let ((n-4 (modulo (sub1\
    \ (sub1 (sub1 n))) m)))\n            (let ((n-5 (modulo (sub1 (sub1 (sub1 (sub1\
    \ n)))) m)))\n              (let ((n-6 (modulo (sub1 (sub1 (sub1 (sub1 (sub1 n))))))))\n\
    \                (let ((n-7 (modulo (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 n))))))))\n\
    \                      (let ((n-8 (modulo (sub1 (sub1 (sub1 (sub1 (sub1 (sub1\
    \ (sub1 n))))))))))\n                        (let ((n-9 (modulo (sub1 (sub1 (sub1\
    \ (sub1 (sub1 (sub1 (sub1 (sub1 n))))))))))))\n                          (let\
    \ ((n-10 (modulo (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 n))))))))))))\n\
    \                            (let ((n-11 (modulo (sub1 (sub1 (sub1 (sub1 (sub1\
    \ (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 n))))))))))))))))\n  \
    \                            (let ((n-12 (modulo (sub1 (sub1 (sub1 (sub1 (sub1\
    \ (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1\
    \ (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1\
    \ (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1\
    \ (sub1 (sub1 (sub1 (sub", "  (let ((n (abs n)))\n    (let ((m (abs m)))\n   \
    \   (if (eq? n m)\n\t  (let ((n (abs n)))\n\t    (let ((m (abs m)))\n\t      (if\
    \ (eq? n m)\n\t\t  (let ((n (abs n)))\n\t\t    (let ((m (abs m)))\n\t\t      (if\
    \ (eq? n m)\n\t\t\t  (let ((n (abs n)))\n\t\t\t    (let ((m (abs m)))\n\t\t\t\
    \      (if (eq? n m)\n\t\t\t\t  (let ((n (abs n)))\n\t\t\t\t    (let ((m (abs\
    \ m)))\n\t\t\t\t      (if (eq? n m)\n\t\t\t\t\t  (let ((n (abs n)))\n\t\t\t\t\t\
    \    (let ((m (abs m)))\n\t\t\t\t\t      (if (eq? n m)\n\t\t\t\t\t\t  (let ((n\
    \ (abs n)))\n\t\t\t\t\t\t    (let ((m (abs m)))\n\t\t\t\t\t\t      (if (eq? n\
    \ m)\n\t\t\t\t\t\t\t  (let ((n (abs n)))\n\t\t\t\t\t\t\t    (let ((m (abs m)))\n\
    \t\t\t\t\t\t\t      (if (eq? n m)\n\t\t\t\t\t\t\t\t  (let ((n (abs n)))\n\t\t\t\
    \t\t\t\t\t    (let ((m (abs m)))\n\t\t\t\t\t\t\t\t      (if (eq? n m)\n\t\t\t\t\
    \t\t\t\t\t  (let ((n (abs n)))\n\t\t\t\t\t\t\t\t\t    (let ((m (abs m)))\n\t\t\
    \t\t\t\t\t\t\t      (if (eq? n m)\n\t\t\t\t\t\t\t\t\t\t  (let ((n (abs n)))\n\t\
    \t\t\t\t\t\t\t\t\t    (let ((m (abs m)))\n\t\t\t\t\t\t\t\t\t\t      (if (eq? n\
    \ m)\n\t\t\t\t\t\t\t\t\t\t\t  (let ((n (abs n)))\n\t\t\t\t\t\t\t\t\t\t\t    (let\
    \ ((m (abs m)))\n\t\t\t\t\t\t\t\t\t\t\t      (if (eq? n m)\n\t\t\t\t\t\t\t\t\t\
    \t\t\t  (let ((n (abs n)))\n\t\t\t\t\t\t\t\t\t\t\t\t    (let ((m (abs m)))\n\t\
    \t\t\t\t\t\t\t\t\t\t\t      (if (eq? n m)\n\t\t\t\t\t\t\t\t\t\t\t\t\t  (let ((n\
    \ (abs n)))\n\t\t\t\t\t\t\t\t\t\t\t\t\t    (let ((m (abs m)))\n\t\t\t\t\t\t\t\t\
    \t\t\t\t\t      (if (eq? n m)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  (let ((n (abs n)))\n\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t    (let ((m (abs m)))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t      (if (eq?", "  (let ((n-1 (modulo n m)))\n    (if (negative? n-1) -1\n\
    \      (let ((n-2 (modulo n n-1)))\n        (if (negative? n-2) -1\n         \
    \ (let ((n-3 (modulo n n-2)))\n            (if (negative? n-3) -1\n          \
    \    (let ((n-4 (modulo n n-3)))\n                (if (negative? n-4) -1\n   \
    \               (let ((n-5 (modulo n n-4)))\n                    (if (negative?\
    \ n-5) -1\n                      (let ((n-6 (modulo n n-5)))\n               \
    \         (if (negative? n-6) -1\n                          (let ((n-7 (modulo\
    \ n n-6)))\n                            (if (negative? n-7) -1\n             \
    \                 (let ((n-8 (modulo n n-7)))\n                              \
    \  (if (negative? n-8) -1\n                                  (let ((n-9 (modulo\
    \ n n-8)))\n                                    (if (negative? n-9) -1\n     \
    \                                 (let ((n-10 (modulo n n-9)))\n             \
    \                           (if (negative? n-10) -1\n                        \
    \                  (let ((n-11 (modulo n n-10)))\n                           \
    \                 (if (negative? n-11) -1\n                                  \
    \            (let ((n-12 (modulo n n-11)))\n                                 \
    \               (if (negative? n-12) -1\n                                    \
    \              (let ((n-13 (modulo n n-12)))\n                               \
    \                     (if (negative? n-13) -1\n                              \
    \                        (let ((n-14 (modulo n n-13)))\n                     \
    \                                   (if (negative? n-14) -1\n                \
    \                                          (let ((n-15 (modulo n n-14)))\n   \
    \                                                         (if (negative? n-15)\
    \ -1\n                                                              (let ((n-16\
    \ (modulo n n-15)))\n                                                        \
    \        ", "  (let ((n-1 (modulo n m)))\n    (if (< n-1 0)\n      (-1)\n    \
    \  (let ((m-1 (modulo m n)))\n        (let ((avg (div n m)))\n          (let ((rounded\
    \ (modulo avg 2)))\n            (let ((bin-avg (bin-up rounded)))\n          \
    \    (let ((bin-rounded (modulo bin-avg 2)))\n                (let ((bin-m (modulo\
    \ m bin-avg)))\n                  (let ((bin-n (modulo n bin-m)))\n          \
    \          (let ((bin-n-1 (modulo n bin-n)))\n                      (let ((bin-m-1\
    \ (modulo m bin-n)))\n                        (let ((bin-avg-1 (div m bin-n)))\n\
    \                          (let ((bin-avg-2 (modulo bin-avg-1 2)))\n         \
    \                   (let ((bin-avg-3 (modulo bin-avg-2 2)))\n                \
    \              (let ((bin-avg-4 (modulo bin-avg-3 2)))\n                     \
    \           (let ((bin-avg-5 (modulo bin-avg-4 2)))\n                        \
    \          (let ((bin-avg-6 (modulo bin-avg-5 2)))\n                         \
    \           (let ((bin-avg-7 (modulo bin-avg-6 2)))\n                        \
    \              (let ((bin-avg-8 (modulo bin-avg-7 2)))\n                     \
    \                   (let ((bin-avg-9 (modulo bin-avg-8 2)))\n                \
    \                          (let ((bin-avg-10 (modulo bin-avg-9 2)))\n        \
    \                                    (let ((bin-avg-11 (modulo bin-avg-10 2)))\n\
    \                                              (let ((bin-avg-12 (modulo bin-avg-11\
    \ 2)))\n                                                (let ((bin-avg-13 (modulo\
    \ bin-avg-12 2)))\n                                                  (let ((bin-avg-14\
    \ (modulo bin-avg-13 2)))\n                                                  \
    \  (let ((bin-avg-15 (mod", "  (let* ([n (int->string n)])\n    (let* ([m (int->string\
    \ m)])\n      (let* ([n_len (string-length n)])\n        (let* ([m_len (string-length\
    \ m)])\n          (let* ([n_str (string->list n)])\n            (let* ([m_str\
    \ (string->list m)])\n              (let* ([n_avg (string->number (string-join\
    \ \" \" n_str))])\n                (let* ([m_avg (string->number (string-join\
    \ \" \" m_str))])\n                  (let* ([n_int (string->number n_avg)]\n \
    \                       [m_int (string->number m_avg)]\n                     \
    \   [avg (string->number (string-join \" \" [n_int m_int]))])\n              \
    \      (let* ([avg_int (string->number avg)]\n                          [rounded_avg\
    \ (string->number (string-join \" \" [avg_int \"0\"]))])\n                   \
    \   (if (string-ci=? rounded_avg \"0\")\n                        (string->number\
    \ (string-join \" \" [avg_int \"1\"]))\n                        rounded_avg)))\n\
    \            ))))))))))))))\n", "  (let ((n-1 (modulo n m)))\n    (if (< n 0)\n\
    \      (-1)\n      (if (< n-1 0)\n        (/ (modulo n-1 m) 2)\n        (/ (modulo\
    \ n m) 2)\n        (+ (modulo n-1 m) (modulo n m) / 2)))))\n", "  (let ((n-1 (sub1\
    \ n))\n        (m-1 (sub1 m)))\n    (if (<= n m)\n      (let ((n-2 (sub1 n-1))\n\
    \             (m-2 (sub1 m-1)))\n        (let ((n-3 (sub1 n-2))\n            \
    \  (m-3 (sub1 m-2)))\n          (let ((n-4 (sub1 n-3))\n                 (m-4\
    \ (sub1 m-3)))\n            (let ((n-5 (sub1 n-4))\n                   (m-5 (sub1\
    \ m-4)))\n              (let ((n-6 (sub1 n-5))\n                     (m-6 (sub1\
    \ m-5)))\n                (let ((n-7 (sub1 n-6))\n                       (m-7\
    \ (sub1 m-6)))\n                  (let ((n-8 (sub1 n-7))\n                   \
    \      (m-8 (sub1 m-7)))\n                    (let ((n-9 (sub1 n-8))\n       \
    \                   (m-9 (sub1 m-8)))\n                      (let ((n-10 (sub1\
    \ n-9))\n                             (m-10 (sub1 m-9)))\n                   \
    \     (let ((n-11 (sub1 n-10))\n                               (m-11 (sub1 m-10)))\n\
    \                          (let ((n-12 (sub1 n-11))\n                        \
    \         (m-12 (sub1 m-11)))\n                            (let ((n-13 (sub1 n-12))\n\
    \                                   (m-13 (sub1 m-12)))\n                    \
    \          (let ((n-14 (sub1 n-13))\n                                     (m-14\
    \ (sub1 m-13)))\n                                (let ((n-15 (sub1 n-14))\n  \
    \                                     (m-15 (sub1 m-14)))\n                  \
    \                (let ((n-16 (sub1 n-15))\n                                  \
    \       (m-16 (sub1 m-15)))\n                                    (let ((n-17 (sub1\
    \ n-16))\n                                           (m-17 (sub1 m-16)))\n   \
    \                                    (let ((n-18 (sub1 n", "  (let ((n-1 (modulo\
    \ n m)))\n    (if (< n 0)\n      (-1)\n      (if (< n-1 0)\n        (+ (modulo\
    \ (- n-1 1) m) (/ m 2))\n        (+ (modulo (- n 1) m) (/ m 2)))))\n)\n", "  (let\
    \ ((n_ (floor n)))\n    (let ((m_ (floor m)))\n      (if (<= n m)\n        (let\
    \ ((avg (round (/ (n - n_) (m - m_))))\n              (bin avg))\n          (if\
    \ (even? avg)\n            (bin/: \"0b\" avg)\n            (bin/: \"0b\" avg -\
    \ 1)))\n        (else\n          (-1)))\n    ))\n)\n", "  (let ((n (abs n))\n\
    \        (m (abs m)))\n    (if (<= n m)\n      (let ((n (floor n))\n         \
    \   (m (floor m)))\n        (let ((n (round n))\n              (m (round m)))\n\
    \          (let ((n (floor n))\n                (m (floor m)))\n            (if\
    \ (<= n m)\n              (let ((n (round n))\n                    (m (round m)))\n\
    \                (let ((n (floor n))\n                      (m (floor m)))\n \
    \                 (let ((n (round n))\n                        (m (round m)))\n\
    \                    (if (<= n m)\n                      (let ((n (floor n))\n\
    \                            (m (floor m)))\n                        (let ((n\
    \ (round n))\n                              (m (round m)))\n                 \
    \         (let ((n (floor n))\n                                (m (floor m)))\n\
    \                            (if (<= n m)\n                              (let\
    \ ((n (round n))\n                                    (m (round m)))\n       \
    \                         (let ((n (floor n))\n                              \
    \        (m (floor m)))\n                                 (if (<= n m)\n     \
    \                              (let ((n (round n))\n                         \
    \               (m (round m)))\n                                    (let ((n (floor\
    \ n))\n                                          (m (floor m)))\n            \
    \                          (if (<= n m)\n                                    \
    \    (let ((n (round n))\n                                              (m (round\
    \ m)))\n                                          (let ((n (floor n))\n      \
    \                                          (m (floor m)))\n                  \
    \                          (if (<= n m)\n                                    \
    \          (let ((n (round n))\n                                             \
    \      (m (round m)))\n                                                (let ((n\
    \ (floor n))\n                                                      (m (floor\
    \ m)))\n                                                  (if (<= n m)\n     \
    \                                               (let ((n (round n))\n        \
    \                                                  (m (round m)))\n          \
    \                                              (let ((n (floor n))\n         \
    \                                                   (m (floor m)))\n", "  (let\
    \ ((n-1 (sub1 n))\n        (m-1 (sub1 m)))\n    (cond\n      ((>= n m) -1)\n \
    \     ((<= n m)\n        (let ((n-2 (sub1 n-1))\n              (m-2 (sub1 m-1)))\n\
    \          (let ((n-3 (sub1 n-2))\n                (m-3 (sub1 m-2)))\n       \
    \     (let ((n-4 (sub1 n-3))\n                  (m-4 (sub1 m-3)))\n          \
    \    (let ((n-5 (sub1 n-4))\n                    (m-5 (sub1 m-4)))\n         \
    \       (let ((n-6 (sub1 n-5))\n                      (m-6 (sub1 m-5)))\n    \
    \              (let ((n-7 (sub1 n-6))\n                        (m-7 (sub1 m-6)))\n\
    \                    (let ((n-8 (sub1 n-7))\n                          (m-8 (sub1\
    \ m-7)))\n                      (let ((n-9 (sub1 n-8))\n                     \
    \       (m-9 (sub1 m-8)))\n                        (let ((n-10 (sub1 n-9))\n \
    \                             (m-10 (sub1 m-9)))\n                          (let\
    \ ((n-11 (sub1 n-10))\n                                (m-11 (sub1 m-10)))\n \
    \                           (let ((n-12 (sub1 n-11))\n                       \
    \           (m-12 (sub1 m-11)))\n                              (let ((n-13 (sub1\
    \ n-12))\n                                     (m-13 (sub1 m-12)))\n         \
    \                       (let ((n-14 (sub1 n-13))\n                           \
    \           (m-14 (sub1 m-13)))\n                                  (let ((n-15\
    \ (sub1 n-14))\n                                        (m-15 (sub1 m-14)))\n\
    \                                    (let ((n-16 (sub1 n-15))\n              \
    \                            (m-16 (sub1 m-15)))\n                           \
    \           (let ((n-17 (sub1 n-16))\n                                       \
    \     (m-17 (sub1", "  (let ((n (abs n)))\n    (let ((m (abs m)))\n      (if (<=\
    \ n m)\n        (let ((n (floor n)))\n          (let ((m (floor m)))\n       \
    \     (if (<= n m)\n              (let ((n (floor n)))\n                (let ((m\
    \ (floor m)))\n                  (if (<= n m)\n                    (let ((n (floor\
    \ n)))\n                      (let ((m (floor m)))\n                        (if\
    \ (<= n m)\n                          (let ((n (floor n)))\n                 \
    \           (let ((m (floor m)))\n                              (if (<= n m)\n\
    \                                (let ((n (floor n)))\n                      \
    \            (let ((m (floor m)))\n                                    (if (<=\
    \ n m)\n                                      (let ((n (floor n)))\n         \
    \                               (let ((m (floor m)))\n                       \
    \                   (if (<= n m)\n                                           \
    \ (let ((n (floor n)))\n                                              (let ((m\
    \ (floor m)))\n                                                (if (<= n m)\n\
    \                                                  (let ((n (floor n)))\n    \
    \                                                (let ((m (floor m)))\n      \
    \                                                (if (<= n m)\n              \
    \                                          (let ((n (floor n)))\n            \
    \                                              (let ((m (floor m)))\n        \
    \                                                    (if (<= n m)\n          \
    \                                                    (let ((n (floor n)))\n  \
    \                                                              (let ((m (floor\
    \ m)))\n                                                                  (if\
    \ (<= n m)\n                                                                 \
    \   (let ((n (floor n)))\n                                                   \
    \                   (let ((m (floor m)))\n                                   \
    \                                     (if (<= n m)\n                         \
    \                                                 (let ((n (floor n)))\n     \
    \                                                                       (let ((m\
    \ (floor m)))\n                                                              \
    \                (if (<= n m)\n                                              \
    \                                  (let ((n (floor n)))\n                    \
    \                                                              (let ((m (floor\
    \ m)))\n                                                                     \
    \               (if (<= n m)\n                                               \
    \                                       (let ((", "  (let ((n (floor n)))\n  \
    \  (let ((m (floor m)))\n      (if (<= n m)\n        (let ((avg (round (/ (n -\
    \ m) n) 2)))\n          (let ((bin (binavg (avg) 2)))\n            (if (even?\
    \ avg)\n              bin\n              (binavg (avg + 1) 2)))\n          bin)\n\
    \        (rounded_avg n (+ m 1))))))\n", "  (let ((n-1 (modulo n m)))\n    (if\
    \ (<= n-1 0)\n      (-1)\n      (let ((n-2 (modulo (modulo n m) 2)))\n       \
    \ (let ((n-3 (modulo (modulo (modulo n m) 2) 2)))\n          (let ((n-4 (modulo\
    \ (modulo (modulo (modulo n m) 2) 2) 2)))\n            (let ((n-5 (modulo (modulo\
    \ (modulo (modulo (modulo n m) 2) 2) 2) 2)))\n              (let ((n-6 (modulo\
    \ (modulo (modulo (modulo (modulo (modulo n m) 2) 2) 2) 2) 2)))\n            \
    \    (let ((n-7 (modulo (modulo (modulo (modulo (modulo (modulo (modulo n m) 2)\
    \ 2) 2) 2) 2) 2)))\n                  (let ((n-8 (modulo (modulo (modulo (modulo\
    \ (modulo (modulo (modulo (modulo n m) 2) 2) 2) 2) 2) 2) 2)))\n              \
    \      (let ((n-9 (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo\
    \ (modulo n m) 2) 2) 2) 2) 2) 2) 2) 2)))\n                      (let ((n-10 (modulo\
    \ (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo\
    \ n m) 2) 2) 2) 2) 2) 2) 2) 2) 2) 2))))\n                        (let ((n-11 (modulo\
    \ (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo\
    \ (modulo (modulo n m) 2) 2) 2) 2) 2) 2) 2) 2) 2) 2) 2) 2))))\n              \
    \            (let ((n-12 (modulo (modulo (modulo (modulo (modulo (modulo (modulo\
    \ (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo", "  (let ((n\
    \ (abs n)))\n    (let ((m (abs m)))\n      (if (<= n m)\n        (let ((n_m (+\
    \ n m)))\n          (let ((n_m_1 (floor n_m)))\n            (let ((n_m_2 (floor\
    \ n_m_1)))\n              (let ((n_m_3 (floor n_m_2)))\n                (let ((n_m_4\
    \ (floor n_m_3)))\n                  (let ((n_m_5 (floor n_m_4)))\n          \
    \          (let ((n_m_6 (floor n_m_5)))\n                      (let ((n_m_7 (floor\
    \ n_m_6)))\n                        (let ((n_m_8 (floor n_m_7)))\n           \
    \               (let ((n_m_9 (floor n_m_8)))\n                            (let\
    \ ((n_m_10 (floor n_m_9)))\n                              (let ((n_m_11 (floor\
    \ n_m_10)))\n                                (let ((n_m_12 (floor n_m_11)))\n\
    \                                  (let ((n_m_13 (floor n_m_12)))\n          \
    \                          (let ((n_m_14 (floor n_m_13)))\n                  \
    \                    (let ((n_m_15 (floor n_m_14)))\n                        \
    \                (let ((n_m_16 (floor n_m_15)))\n                            \
    \              (let ((n_m_17 (floor n_m_16)))\n                              \
    \              (let ((n_m_18 (floor n_m_17)))\n                              \
    \                (let ((n_m_19 (floor n_m_18)))\n                            \
    \                    (let ((n_m_20 (floor n_m_19)))\n                        \
    \                          (let ((n_m_21 (floor n_m_20)))\n                  \
    \                                  (let ((n_m_22 (floor n_m_21)))\n          \
    \                                            (let ((n_m_23 (floor n_m_22)))\n\
    \                                                        (let ((n_m_24 (floor\
    \ n_m_23)))\n", "  (let ((n-1 (modulo n m)))\n    (if (< n-1 0)\n      (-1)\n\
    \      (let ((n-2 (modulo n n-1)))\n        (let ((m-1 (modulo m n-1)))\n    \
    \      (let ((m-2 (modulo m m-1)))\n            (let ((n-3 (modulo n n-2)))\n\
    \              (let ((m-3 (modulo m m-2)))\n                (let ((n-4 (modulo\
    \ n n-3)))\n                  (let ((m-4 (modulo m m-3)))\n                  \
    \  (let ((n-5 (modulo n n-4)))\n                      (let ((m-5 (modulo m m-4)))\n\
    \                        (let ((n-6 (modulo n n-5)))\n                       \
    \   (let ((m-6 (modulo m m-5)))\n                            (let ((n-7 (modulo\
    \ n n-6)))\n                              (let ((m-7 (modulo m m-6)))\n      \
    \                          (let ((n-8 (modulo n n-7)))\n                     \
    \             (let ((m-8 (modulo m m-7)))\n                                  \
    \  (let ((n-9 (modulo n n-8)))\n                                      (let ((m-9\
    \ (modulo m m-8)))\n                                        (let ((n-10 (modulo\
    \ n n-9)))\n                                          (let ((m-10 (modulo m m-9)))\n\
    \                                            (let ((n-11 (modulo n n-10)))\n \
    \                                             (let ((m-11 (modulo m m-10)))\n\
    \                                                (let ((n-12 (modulo n n-11)))\n\
    \                                                  (let ((m-12 (modulo m m-11)))\n\
    \                                                    (let ((n-13 (modulo n n-12)))\n\
    \                                                      (let ((m-13 (modulo m m-12)))\n\
    \                                                        (let ((n-14 (modulo n\
    \ n-13)))\n                                                          (let ((m-14\
    \ (modulo m m-13)))\n                                ", "  (let ((n_ (floor n)))\n\
    \    (let ((m_ (floor m)))\n      (if (<= n m)\n        (let ((avg (round (/ (n\
    \ - n_) (m - m_))))\n              (bin avg))\n          (if (odd? n_)\n     \
    \       (bin \"1\" avg)\n            (bin \"0\" avg)))\n        (if (< n m)\n\
    \          (-1)\n          (bin \"1\" (round (/ (n - n_) (m - m_)))))))\n)\n",
  "  (let ((n-1 (modulo n m)))\n    (if (<= n-1 0)\n      (-1)\n      (+ (modulo (-\
    \ n-1 n) m) (/ n m)))))\n", "  (let ((n-1 (modulo n m)))\n    (if (< n-1 0)\n\
    \      (-1)\n      (let ((n-2 (modulo n n-1)))\n        (let ((m-1 (modulo m n-1)))\n\
    \          (let ((m-2 (modulo m m-1)))\n            (let ((n-3 (modulo n n-2)))\n\
    \              (let ((m-3 (modulo m m-2)))\n                (let ((n-4 (modulo\
    \ n n-3)))\n                  (let ((m-4 (modulo m m-3)))\n                  \
    \  (let ((n-5 (modulo n n-4)))\n                      (let ((m-5 (modulo m m-4)))\n\
    \                        (let ((n-6 (modulo n n-5)))\n                       \
    \   (let ((m-6 (modulo m m-5)))\n                            (let ((n-7 (modulo\
    \ n n-6)))\n                              (let ((m-7 (modulo m m-6)))\n      \
    \                          (let ((n-8 (modulo n n-7)))\n                     \
    \             (let ((m-8 (modulo m m-7)))\n                                  \
    \  (let ((n-9 (modulo n n-8)))\n                                      (let ((m-9\
    \ (modulo m m-8)))\n                                        (let ((n-10 (modulo\
    \ n n-9)))\n                                          (let ((m-10 (modulo m m-9)))\n\
    \                                            (let ((n-11 (modulo n n-10)))\n \
    \                                             (let ((m-11 (modulo m m-10)))\n\
    \                                                (let ((n-12 (modulo n n-11)))\n\
    \                                                  (let ((m-12 (modulo m m-11)))\n\
    \                                                    (let ((n-13 (modulo n n-12)))\n\
    \                                                      (let ((m-13 (modulo m m-12)))\n\
    \                                                        (let ((n-14 (modulo n\
    \ n-13)))\n                                                          (let ((m-14\
    \ (modulo m m-13)))\n                                ", "  (let ((n (abs n))\n\
    \        (m (abs m)))\n    (if (<= n m)\n      (let ((n_ (floor n))\n        \
    \     (m_ (floor m)))\n        (if (< n_ m_)\n          (-1)\n          (let ((n_\
    \ (floor n_))\n                 (m_ (floor m_)))\n            (let ((n_ (floor\
    \ n_))\n                  (m_ (floor m_)))\n              (let ((n_ (floor n_))\n\
    \                     (m_ (floor m_)))\n                (let ((n_ (floor n_))\n\
    \                      (m_ (floor m_)))\n                  (let ((n_ (floor n_))\n\
    \                         (m_ (floor m_)))\n                    (let ((n_ (floor\
    \ n_))\n                          (m_ (floor m_)))\n                      (let\
    \ ((n_ (floor n_))\n                             (m_ (floor m_)))\n          \
    \              (let ((n_ (floor n_))\n                               (m_ (floor\
    \ m_)))\n                          (let ((n_ (floor n_))\n                   \
    \              (m_ (floor m_)))\n                            (let ((n_ (floor\
    \ n_))\n                                   (m_ (floor m_)))\n                \
    \              (let ((n_ (floor n_))\n                                     (m_\
    \ (floor m_)))\n                                (let ((n_ (floor n_))\n      \
    \                                 (m_ (floor m_)))\n                         \
    \         (let ((n_ (floor n_))\n                                         (m_\
    \ (floor m_)))\n                                    (let ((n_ (floor n_))\n  \
    \                                         (m_ (floor m_)))\n                 \
    \                     (let ((n_ (floor n_))\n                                \
    \             (m_ (floor m_)))\n                                        (let ((n_\
    \ (floor n_))\n                                               (m_ (floor m_)))\n\
    \                                          (let ((n_ (floor n_))\n           \
    \                                     (m_ (floor m_)))\n                     \
    \                       (let ((n_ (floor n_))\n                              \
    \                    (m_ (floor m_)))\n                                      \
    \        (let ((n_ (floor n_", "  (let ((n_ (floor n)))\n    (let ((m_ (floor\
    \ m)))\n      (cond\n        [(< n m_) (-1)]\n        [(> n_ m_) (-1)]\n     \
    \   [(= n_ m_)\n          (let ((n_ (floor n_)))\n            (let ((m_ (floor\
    \ m_)))\n              (let ((n_ (floor n_)))\n                (let ((m_ (floor\
    \ m_)))\n                  (let ((n_ (floor n_)))\n                    (let ((m_\
    \ (floor m_)))\n                      (let ((n_ (floor n_)))\n               \
    \         (let ((m_ (floor m_)))\n                          (let ((n_ (floor n_)))\n\
    \                            (let ((m_ (floor m_)))\n                        \
    \      (let ((n_ (floor n_)))\n                                (let ((m_ (floor\
    \ m_)))\n                                  (let ((n_ (floor n_)))\n          \
    \                          (let ((m_ (floor m_)))\n                          \
    \            (let ((n_ (floor n_)))\n                                        (let\
    \ ((m_ (floor m_)))\n                                          (let ((n_ (floor\
    \ n_)))\n                                            (let ((m_ (floor m_)))\n\
    \                                              (let ((n_ (floor n_)))\n      \
    \                                          (let ((m_ (floor m_)))\n          \
    \                                        (let ((n_ (floor n_)))\n            \
    \                                        (let ((m_ (floor m_)))\n            \
    \                                          (let ((n_ (floor n_)))\n          \
    \                                              (let ((m_ (floor m_)))\n      \
    \                                                    (let ((n_ (floor n_)))\n\
    \                                                            (let ((m_ (floor\
    \ m_)))\n                                                              (let ((n_\
    \ (floor n_)))\n                                                             \
    \   (let ((m_ (floor m_)))\n                                                 \
    \                 (let ((n_ (floor n_)))\n                                   \
    \                                 (let ((m_ (floor m_)))\n                   \
    \                                                   (let ((n_ (floor n_)))\n \
    \                                                                       (let ((",
  "  (let ((n_ (floor n)))\n    (let ((m_ (floor m)))\n      (if (<= n m)\n      \
    \  (let ((avg (div n m)))\n          (let ((rounded (round avg)))\n          \
    \  (let ((bin_rounded (bin (rounded))))\n              (let ((bin_avg (bin avg)))\n\
    \                (let ((bin_diff (subbin_diff bin_avg bin_rounded)))\n       \
    \           (let ((diff (div bin_diff 2)))\n                    (if (< diff 0)\n\
    \                      (-1)\n                      (+ (bin_avg) (bin_rounded)\
    \ (diff)))))))))))))))\n", "  (let ((n-1 (modulo n m)))\n    (if (< n-1 0)\n \
    \     (-1)\n      (let ((n-2 (modulo n-1 m)))\n        (let ((n-3 (modulo n-2\
    \ m)))\n          (let ((n-4 (modulo n-3 m)))\n            (let ((n-5 (modulo\
    \ n-4 m)))\n              (let ((n-6 (modulo n-5 m)))\n                (let ((n-7\
    \ (modulo n-6 m)))\n                  (let ((n-8 (modulo n-7 m)))\n          \
    \          (let ((n-9 (modulo n-8 m)))\n                      (let ((n-10 (modulo\
    \ n-9 m)))\n                        (let ((n-11 (modulo n-10 m)))\n          \
    \                (let ((n-12 (modulo n-11 m)))\n                            (let\
    \ ((n-13 (modulo n-12 m)))\n                              (let ((n-14 (modulo\
    \ n-13 m)))\n                                (let ((n-15 (modulo n-14 m)))\n \
    \                                 (let ((n-16 (modulo n-15 m)))\n            \
    \                        (let ((n-17 (modulo n-16 m)))\n                     \
    \                 (let ((n-18 (modulo n-17 m)))\n                            \
    \            (let ((n-19 (modulo n-18 m)))\n                                 \
    \         (let ((n-20 (modulo n-19 m)))\n                                    \
    \        (let ((n-21 (modulo n-20 m)))\n                                     \
    \         (let ((n-22 (modulo n-21 m)))\n                                    \
    \            (let ((n-23 (modulo n-22 m)))\n                                 \
    \                 (let ((n-24 (modulo n-23 m)))\n                            \
    \                        (let ((n-25 (modulo n-24 m)))\n                     \
    \                                 (let ((n-26 (modulo n-25 m)))\n            \
    \                                            (let ((n-27 (modulo n-26 m)))\n \
    \                                                         (let ((n-28 (modulo\
    \ n-27 m)))\n                                ", "  (let ((n_ (floor n)))\n   \
    \ (let ((m_ (floor m)))\n      (if (eq? n m)\n        (let ((avg (div n_ m_)))\n\
    \          (let ((rounded_avg (div avg (floor avg))))\n            (if (eq? rounded_avg\
    \ 0)\n              (-1)\n              (+ (string-append \"0b\" rounded_avg)))))))\n\
    \    (+ (string-append \"0b\" n_) m_)))\n", "  (let ((n-1 (modulo n m)))\n   \
    \ (if (<= n-1 0)\n      (-1)\n      (let ((n-2 (modulo n n-1)))\n        (let\
    \ ((m-1 (modulo m n-1)))\n          (let ((m-2 (modulo m m-1)))\n            (let\
    \ ((n-3 (modulo n n-2)))\n              (let ((m-3 (modulo m m-2)))\n        \
    \        (let ((n-4 (modulo n n-3)))\n                  (let ((m-4 (modulo m m-3)))\n\
    \                    (let ((n-5 (modulo n n-4)))\n                      (let ((m-5\
    \ (modulo m m-4)))\n                        (let ((n-6 (modulo n n-5)))\n    \
    \                      (let ((m-6 (modulo m m-5)))\n                         \
    \   (let ((n-7 (modulo n n-6)))\n                              (let ((m-7 (modulo\
    \ m m-6)))\n                                (let ((n-8 (modulo n n-7)))\n    \
    \                              (let ((m-8 (modulo m m-7)))\n                 \
    \                   (let ((n-9 (modulo n n-8)))\n                            \
    \          (let ((m-9 (modulo m m-8)))\n                                     \
    \   (let ((n-10 (modulo n n-9)))\n                                          (let\
    \ ((m-10 (modulo m m-9)))\n                                            (let ((n-11\
    \ (modulo n n-10)))\n                                              (let ((m-11\
    \ (modulo m m-10)))\n                                                (let ((n-12\
    \ (modulo n n-11)))\n                                                  (let ((m-12\
    \ (modulo m m-11)))\n                                                    (let\
    \ ((n-13 (modulo n n-12)))\n                                                 \
    \     (let ((m-13 (modulo m m-12)))\n                                        \
    \                (let ((n-14 (modulo n n-13)))\n                             \
    \                             (let ((m-14 (modulo m m-13)))\n                \
    \               ", "  (let ((n_ (integer->string n))\n        (m_ (integer->string\
    \ m)))\n    (if (>= n m)\n      (-1)\n      (let ((avg (average n m)))\n     \
    \   (string->number avg))))\n)\n", "  (let ((n-1 (modulo n m)))\n    (if (<= n-1\
    \ 0)\n      (-1)\n      (let ((n-2 (modulo n n-1)))\n        (let ((m-1 (modulo\
    \ m n-1)))\n          (let ((m-2 (modulo m m-1)))\n            (let ((n-3 (modulo\
    \ n n-2)))\n              (let ((m-3 (modulo m m-2)))\n                (let ((n-4\
    \ (modulo n n-3)))\n                  (let ((m-4 (modulo m m-3)))\n          \
    \          (let ((n-5 (modulo n n-4)))\n                      (let ((m-5 (modulo\
    \ m m-4)))\n                        (let ((n-6 (modulo n n-5)))\n            \
    \              (let ((m-6 (modulo m m-5)))\n                            (let ((n-7\
    \ (modulo n n-6)))\n                              (let ((m-7 (modulo m m-6)))\n\
    \                                (let ((n-8 (modulo n n-7)))\n               \
    \                   (let ((m-8 (modulo m m-7)))\n                            \
    \        (let ((n-9 (modulo n n-8)))\n                                      (let\
    \ ((m-9 (modulo m m-8)))\n                                        (let ((n-10\
    \ (modulo n n-9)))\n                                          (let ((m-10 (modulo\
    \ m m-9)))\n                                            (let ((n-11 (modulo n\
    \ n-10)))\n                                              (let ((m-11 (modulo m\
    \ m-10)))\n                                                (let ((n-12 (modulo\
    \ n n-11)))\n                                                  (let ((m-12 (modulo\
    \ m m-11)))\n                                                    (let ((n-13 (modulo\
    \ n n-12)))\n                                                      (let ((m-13\
    \ (modulo m m-12)))\n                                                        (let\
    \ ((n-14 (modulo n n-13)))\n                                                 \
    \         (let ((m-14 (modulo m m-13)))\n                               ", " \
    \ (cond\n    ((< n m) -1)\n    ((= n m) (round (/ (n m) 2)))\n    (else\n    \
    \  (let ((n (round n)))\n        (let ((m (round m)))\n          (let ((avg (round\
    \ (/ (n m) 2))))\n            (let ((num (m - n + 1)))\n              (let ((den\
    \ (m - n + 1)))\n                (let ((result (round (/ (num avg) den)))\n  \
    \                    (bin (string-append \"0b\" result)))\n                  (bin\
    \ (string-append \"0b\" num))\n                  (bin (string-append \"0b\" den))\n\
    \                  (bin (string-append \"0b\" avg))))))))))))\n", "  (let ((n_\
    \ (floor n)))\n    (let ((m_ (floor m)))\n      (if (<= n m)\n        (let ((avg\
    \ (round (/ (n - n_) (m - m_))))\n              (bin avg))\n          (bin (-\
    \ 1) avg))\n        (bin (- 1) -1)))\n  )\n)\n", "  (let ((n_ (floor n)))\n  \
    \  (let ((m_ (floor m)))\n      (let ((n_m_ (mul n_ m_)))\n        (let ((n_m_n\
    \ (floor n_m_))\n              (n_m_m (floor m_))\n              (n_m_n_m_m (mul\
    \ n_m_n_m_m)))\n          (let ((n_m_n_m_m_ (floor n_m_n_m_m_))\n            \
    \    (n_m_n_m_m_n (floor n_m_n_m_m_n)))\n            (if (< n_m_n_m_m_n n_m_n_m_m_m)\n\
    \              (-1)\n              (let ((n_m_n_m_m_n_ (floor n_m_n_m_m_n_))\n\
    \                    (n_m_n_m_m_m_n_ (floor n_m_n_m_m_m_n_)))\n              \
    \  (let ((n_m_n_m_m_m_n_ (floor n_m_n_m_m_m_n_))\n                      (n_m_n_m_m_m_m_n_\
    \ (floor n_m_n_m_m_m_m_n_)))\n                  (let ((n_m_n_m_m_m_m_n_ (floor\
    \ n_m_n_m_m_m_m_n_))\n                        (n_m_n_m_m_m_m_m_n_ (floor n_m_n_m_m_m_m_m_n_)))\n\
    \                    (let ((n_m_n_m_m_m_m_m_n_ (floor n_m_n_m_m_m_m_m_n_))\n \
    \                         (n_m_n_m_m_m_m_m_m_n_ (floor n_m_n_m_m_m_m_m_m_n_)))\n\
    \                      (let ((n_m_n_m_m_m_m", "  (let ((n_ (floor n)))\n    (let\
    \ ((m_ (floor m)))\n      (if (eq? n m)\n          (let ((avg (round (/ (n - n_)\
    \ (m - m_))))\n                (bin avg))\n            (bin (- 1))))\n      (let\
    \ ((avg (round (/ (n - n_) (m - m_))))\n            (bin avg))\n        (bin (-\
    \ 1))))))\n", "  (let ((n-1 (sub1 n))\n        (m-1 (sub1 m)))\n    (if (< n m)\n\
    \      (-1)\n      (let ((n-2 (sub1 n-1))\n            (m-2 (sub1 m-1)))\n   \
    \     (let ((n-3 (sub1 n-2))\n              (m-3 (sub1 m-2)))\n          (let\
    \ ((n-4 (sub1 n-3))\n                (m-4 (sub1 m-3)))\n            (let ((n-5\
    \ (sub1 n-4))\n                  (m-5 (sub1 m-4)))\n              (let ((n-6 (sub1\
    \ n-5))\n                    (m-6 (sub1 m-5)))\n                (let ((n-7 (sub1\
    \ n-6))\n                      (m-7 (sub1 m-6)))\n                  (let ((n-8\
    \ (sub1 n-7))\n                        (m-8 (sub1 m-7)))\n                   \
    \ (let ((n-9 (sub1 n-8))\n                          (m-9 (sub1 m-8)))\n      \
    \                (let ((n-10 (sub1 n-9))\n                            (m-10 (sub1\
    \ m-9)))\n                        (let ((n-11 (sub1 n-10))\n                 \
    \             (m-11 (sub1 m-10)))\n                          (let ((n-12 (sub1\
    \ n-11))\n                                (m-12 (sub1 m-11)))\n              \
    \              (let ((n-13 (sub1 n-12))\n                                  (m-13\
    \ (sub1 m-12)))\n                              (let ((n-14 (sub1 n-13))\n    \
    \                                 (m-14 (sub1 m-13)))\n                      \
    \          (let ((n-15 (sub1 n-14))\n                                      (m-15\
    \ (sub1 m-14)))\n                                  (let ((n-16 (sub1 n-15))\n\
    \                                        (m-16 (sub1 m-15)))\n               \
    \                     (let ((n-17 (sub1 n-16))\n                             \
    \             (m-17 (sub1 m-16)))\n                                      (let\
    \ ((n-18 (", "  (let ((n-1 (sub1 n))\n        (m-1 (sub1 m)))\n    (if (>= n m)\n\
    \      (-1)\n      (let ((n-2 (sub1 n))\n            (m-2 (sub1 m)))\n       \
    \ (let ((n-3 (sub1 n))\n              (m-3 (sub1 m)))\n          (let ((n-4 (sub1\
    \ n))\n                (m-4 (sub1 m)))\n            (let ((n-5 (sub1 n))\n   \
    \               (m-5 (sub1 m)))\n              (let ((n-6 (sub1 n))\n        \
    \            (m-6 (sub1 m)))\n                (let ((n-7 (sub1 n))\n         \
    \             (m-7 (sub1 m)))\n                  (let ((n-8 (sub1 n))\n      \
    \                  (m-8 (sub1 m)))\n                    (let ((n-9 (sub1 n))\n\
    \                          (m-9 (sub1 m)))\n                      (let ((n-10\
    \ (sub1 n))\n                            (m-10 (sub1 m)))\n                  \
    \      (let ((n-11 (sub1 n))\n                              (m-11 (sub1 m)))\n\
    \                          (let ((n-12 (sub1 n))\n                           \
    \     (m-12 (sub1 m)))\n                            (let ((n-13 (sub1 n))\n  \
    \                                (m-13 (sub1 m)))\n                          \
    \    (let ((n-14 (sub1 n))\n                                     (m-14 (sub1 m)))\n\
    \                                (let ((n-15 (sub1 n))\n                     \
    \                 (m-15 (sub1 m)))\n                                  (let ((n-16\
    \ (sub1 n))\n                                        (m-16 (sub1 m)))\n      \
    \                              (let ((n-17 (sub1 n))\n                       \
    \                   (m-17 (sub1 m)))\n                                      (let\
    \ ((n-18 (sub1 n))\n                                            (m-18 (sub1 m)))\n\
    \                                        (let ((n-19 (sub1 n))\n             \
    \                                  (m-19 (sub1 m)))\n                        \
    \                  (let ((n-20 (sub1 n", "  (let ((n_ (floor n)))\n    (let ((m_\
    \ (floor m)))\n      (if (eq? n m)\n        (let ((avg (div n m)))\n         \
    \ (let ((rounded_avg (mod avg 2)))\n            (if (eq? rounded_avg 0)\n    \
    \          (-1)\n              (+ (rounded_avg) (m_ - n_)))\n            )))\n\
    \      (+ (n_) (m_))\n    )\n  )\n)\n", "  (let ((n-1 (modulo n m)))\n    (if\
    \ (<= n-1 0)\n      (-1)\n      (let ((n-2 (modulo n n-1)))\n        (let ((m-1\
    \ (modulo m n-1)))\n          (let ((m-2 (modulo m m-1)))\n            (let ((n-3\
    \ (modulo n n-2)))\n              (let ((m-3 (modulo m m-2)))\n              \
    \  (let ((n-4 (modulo n n-3)))\n                  (let ((m-4 (modulo m m-3)))\n\
    \                    (let ((n-5 (modulo n n-4)))\n                      (let ((m-5\
    \ (modulo m m-4)))\n                        (let ((n-6 (modulo n n-5)))\n    \
    \                      (let ((m-6 (modulo m m-5)))\n                         \
    \   (let ((n-7 (modulo n n-6)))\n                              (let ((m-7 (modulo\
    \ m m-6)))\n                                (let ((n-8 (modulo n n-7)))\n    \
    \                              (let ((m-8 (modulo m m-7)))\n                 \
    \                   (let ((n-9 (modulo n n-8)))\n                            \
    \          (let ((m-9 (modulo m m-8)))\n                                     \
    \   (let ((n-10 (modulo n n-9)))\n                                          (let\
    \ ((m-10 (modulo m m-9)))\n                                            (let ((n-11\
    \ (modulo n n-10)))\n                                              (let ((m-11\
    \ (modulo m m-10)))\n                                                (let ((n-12\
    \ (modulo n n-11)))\n                                                  (let ((m-12\
    \ (modulo m m-11)))\n                                                    (let\
    \ ((n-13 (modulo n n-12)))\n                                                 \
    \     (let ((m-13 (modulo m m-12)))\n                                        \
    \                (let ((n-14 (modulo n n-13)))\n                             \
    \                             (let ((m-14 (modulo m m-13)))\n                \
    \               ", "  (cond\n    ((< n m) -1)\n    ((= n m) (round (/ (n m) 2)))\n\
    \    (else\n      (+ (round (/ (n m) 2)) (round (/ (n m) 2))))))\n", "  (let ((n_\
    \ (floor n)))\n    (let ((m_ (floor m)))\n      (if (<= n m)\n        (let ((n_\
    \ (floor n_)))\n          (let ((m_ (floor m_)))\n            (if (<= n_ m_)\n\
    \              (let ((n_ (floor n_)))\n                (let ((m_ (floor m_)))\n\
    \                  (if (<= n_ m_)\n                    (let ((n_ (floor n_)))\n\
    \                      (let ((m_ (floor m_)))\n                        (if (<=\
    \ n_ m_)\n                          (let ((n_ (floor n_)))\n                 \
    \           (let ((m_ (floor m_)))\n                              (if (<= n_ m_)\n\
    \                                (let ((n_ (floor n_)))\n                    \
    \              (let ((m_ (floor m_)))\n                                    (if\
    \ (<= n_ m_)\n                                      (let ((n_ (floor n_)))\n \
    \                                       (let ((m_ (floor m_)))\n             \
    \                             (if (<= n_ m_)\n                               \
    \             (let ((n_ (floor n_)))\n                                       \
    \       (let ((m_ (floor m_)))\n                                             \
    \   (if (<= n_ m_)\n                                                  (let ((n_\
    \ (floor n_)))\n                                                    (let ((m_\
    \ (floor m_)))\n                                                      (if (<=\
    \ n_ m_)\n                                                        (let ((n_ (floor\
    \ n_)))\n                                                          (let ((m_ (floor\
    \ m_)))\n                                                            (if (<= n_\
    \ m_)\n                                                              (let ((n_\
    \ (floor n_)))\n                                                             \
    \   (let ((m_ (floor m_)))\n                                                 \
    \                 (if (<= n_ m_)\n                                           \
    \                         (let ((n_ (floor n_)))\n                           \
    \                                           (let ((m_ (floor m_)))\n         \
    \                                                               (if (<= n_ m_)\n\
    \                                                                          (let\
    \ ((n_ (floor n_)))\n                                                        \
    \                    ", "  (let ((n (floor n)))\n    (let ((m (floor m)))\n  \
    \    (cond\n        [(< n m) -1]\n        [(< n m) (floor (/ (n - m) 2))]\n  \
    \      [(< n m) (floor (/ (m - n) 2))]\n        [(= n m) (floor (/ (m - n) 2))]\n\
    \        [else (floor (/ (m - n) 2))])))))\n", "  (let ((n-1 (modulo n m)))\n\
    \    (if (< n-1 0)\n      (-1)\n      (let ((n-2 (modulo n n-1)))\n        (let\
    \ ((m-1 (modulo m n-1)))\n          (let ((m-2 (modulo m m-1)))\n            (let\
    \ ((n-3 (modulo n n-2)))\n              (let ((m-3 (modulo m m-2)))\n        \
    \        (let ((n-4 (modulo n n-3)))\n                  (let ((m-4 (modulo m m-3)))\n\
    \                    (let ((n-5 (modulo n n-4)))\n                      (let ((m-5\
    \ (modulo m m-4)))\n                        (let ((n-6 (modulo n n-5)))\n    \
    \                      (let ((m-6 (modulo m m-5)))\n                         \
    \   (let ((n-7 (modulo n n-6)))\n                              (let ((m-7 (modulo\
    \ m m-6)))\n                                (let ((n-8 (modulo n n-7)))\n    \
    \                              (let ((m-8 (modulo m m-7)))\n                 \
    \                   (let ((n-9 (modulo n n-8)))\n                            \
    \          (let ((m-9 (modulo m m-8)))\n                                     \
    \   (let ((n-10 (modulo n n-9)))\n                                          (let\
    \ ((m-10 (modulo m m-9)))\n                                            (let ((n-11\
    \ (modulo n n-10)))\n                                              (let ((m-11\
    \ (modulo m m-10)))\n                                                (let ((n-12\
    \ (modulo n n-11)))\n                                                  (let ((m-12\
    \ (modulo m m-11)))\n                                                    (let\
    \ ((n-13 (modulo n n-12)))\n                                                 \
    \     (let ((m-13 (modulo m m-12)))\n                                        \
    \                (let ((n-14 (modulo n n-13)))\n                             \
    \                             (let ((m-14 (modulo m m-13)))\n                \
    \                ", "  (let ((n-1 (modulo n m)))\n    (if (< n-1 0)\n      (-1)\n\
    \      (if (< n-1 0)\n        (+ (rounded_avg (add n-1 n) (sub n-1 m))\n     \
    \     (rounded_avg (add n-1 m) (sub n-1 n)))\n        (rounded_avg (add n-1 n)\
    \ (sub n-1 m))))))\n", "  (let ((n_int (floor n)))\n    (let ((m_int (floor m)))\n\
    \      (let ((avg (div n_int m_int)))\n        (let ((rounded (div avg 2)))\n\
    \          (cond\n            ((= rounded 0) (-1))\n            ((< rounded 1)\
    \ \"0b0\")\n            ((= rounded 2) \"0b1\")\n            ((< rounded 3) \"\
    0b10\")\n            ((= rounded 4) \"0b11\")\n            ((< rounded 5) \"0b100\"\
    )\n            ((= rounded 6) \"0b101\")\n            ((< rounded 7) \"0b110\"\
    )\n            ((= rounded 8) \"0b111\")\n            ((< rounded 9) \"0b1000\"\
    )\n            ((= rounded 10) \"0b1001\")\n            ((< rounded 11) \"0b1010\"\
    )\n            ((= rounded 12) \"0b1011\")\n            ((< rounded 13) \"0b1100\"\
    )\n            ((= rounded 14) \"0b1101\")\n            ((< rounded 15) \"0b1110\"\
    )\n            ((= rounded 16) \"0b1111\")\n            ((< rounded 17) \"0b11000\"\
    )\n            ((= rounded 18) \"0b11001\")\n            ((< rounded 19) \"0b11010\"\
    )\n            ((= rounded 20) \"0b11011\")\n            ((< rounded 21) \"0b11100\"\
    )\n            ((= rounded 22) \"0b11101\")\n            ((< rounded 23) \"0b11110\"\
    )\n            ((= rounded 24) \"0b11111\")\n            ((< rounded 25) \"0b100000\"\
    )\n            ((= rounded 26) \"0b100001\")\n            ((< rounded 27) \"0b100010\"\
    )\n            ((= rounded 28) \"0b100011\")\n            ((< rounded 29) \"0b100100\"\
    )\n            ((= rounded 30) \"0b100101\")\n            ((< rounded 31) \"0b100110\"\
    )\n            ((= rounded 32) \"0b100111\")\n            ((< rounded 33) \"0b101000\"\
    )\n            ((= rounded 34) \"0b101001\")\n            ((< rounded 35) \"0b101010\"\
    )\n            ((= rounded", "  (cond\n    ((< n m) -1)\n    ((= n m) (round (/\
    \ (n m) 2) 2))\n    (else\n      (let ((n (round n 2)))\n        (let ((m (round\
    \ m 2)))\n          (let ((avg (round (/ (n m) 2) 2)))\n            (let ((n_\
    \ (round n 2)))\n              (let ((m_ (round m 2)))\n                (let ((avg_\
    \ (round (/ (n m) 2) 2)))\n                  (let ((n_ (round n 2)))\n       \
    \             (let ((m_ (round m 2)))\n                      (let ((avg_ (round\
    \ (/ (n m) 2) 2)))\n                        (let ((n_ (round n 2)))\n        \
    \                  (let ((m_ (round m 2)))\n                            (let ((avg_\
    \ (round (/ (n m) 2) 2)))\n                              (let ((n_ (round n 2)))\n\
    \                                (let ((m_ (round m 2)))\n                   \
    \               (let ((avg_ (round (/ (n m) 2) 2)))\n                        \
    \            (let ((n_ (round n 2)))\n                                      (let\
    \ ((m_ (round m 2)))\n                                        (let ((avg_ (round\
    \ (/ (n m) 2) 2)))\n                                          (let ((n_ (round\
    \ n 2)))\n                                            (let ((m_ (round m 2)))\n\
    \                                              (let ((avg_ (round (/ (n m) 2)\
    \ 2)))\n                                                (let ((n_ (round n 2)))\n\
    \                                                  (let ((m_ (round m 2)))\n \
    \                                                   (let ((avg_ (round (/ (n m)\
    \ 2) 2)))\n                                                      (let ((n_ (round\
    \ n 2)))\n                                                        (let ((m_ (round\
    \ m 2)))\n                                                          (let ((avg_\
    \ (round (/ (n m) 2) 2)))\n                                                  \
    \          (let ((n_ (round n 2)))\n                                         \
    \                     (let ((m_ (round m 2)))\n                              \
    \                                  (let ((avg", "  (let ((n (floor n)))\n    (let\
    \ ((m (floor m)))\n      (cond\n        [(< n m) (-1)]\n        [(>= n m) (floor\
    \ (/ (n - m) 2))]\n        [(<= n m) (floor (/ (m - n) 2))]\n        [(> n m)\
    \ (floor (/ (n - m) 2))]\n        [(<= n m) (floor (/ (m - n) 2))]\n        [(>=\
    \ n m) (floor (/ (m - n) 2))]\n        [(<= n m) (floor (/ (m - n) 2))]\n    \
    \    [(> n m) (floor (/ (n - m) 2))]\n        [(<= n m) (floor (/ (m - n) 2))]\n\
    \        [(>= n m) (floor (/ (m - n) 2))]\n        [(< n m) (floor (/ (n - m)\
    \ 2))]\n        [(<= n m) (floor (/ (m - n) 2))]\n        [(> n m) (floor (/ (n\
    \ - m) 2))]\n        [(<= n m) (floor (/ (m - n) 2))]\n        [(>= n m) (floor\
    \ (/ (m - n) 2))]\n        [(< n m) (floor (/ (n - m) 2))]\n        [(<= n m)\
    \ (floor (/ (m - n) 2))]\n        [(> n m) (floor (/ (n - m) 2))]\n        [(<=\
    \ n m) (floor (/ (m - n) 2))]\n        [(>= n m) (floor (/ (m - n) 2))]\n    \
    \    [(< n m) (floor (/ (n - m) 2))]\n        [(<= n m) (floor (/ (m - n) 2))]\n\
    \        [(> n m) (floor (/ (n - m) 2))]\n        [(<= n m) (floor (/ (m - n)\
    \ 2))]\n        [(>= n m) (floor (/ (m - n) 2))]\n        [(< n", "  (let ((n_int\
    \ n)\n        (m_int m))\n    (if (<= n m)\n      (let ((n_int n_int)\n      \
    \      (m_int m_int))\n        (let ((avg (div n_int m_int)))\n          (let\
    \ ((rounded_avg (round avg)))\n            (cond\n              ((= rounded_avg\
    \ 0) (-1))\n              ((< rounded_avg 1) \"0b0\")\n              ((< rounded_avg\
    \ 2) \"0b1\")\n              ((< rounded_avg 3) \"0b10\")\n              ((< rounded_avg\
    \ 4) \"0b11\")\n              ((< rounded_avg 5) \"0b100\")\n              ((<\
    \ rounded_avg 6) \"0b101\")\n              ((< rounded_avg 7) \"0b110\")\n   \
    \           ((< rounded_avg 8) \"0b111\")\n              ((< rounded_avg 9) \"\
    0b1000\")\n              ((< rounded_avg 10) \"0b1001\")\n              ((< rounded_avg\
    \ 11) \"0b1010\")\n              ((< rounded_avg 12) \"0b1011\")\n           \
    \   ((< rounded_avg 13) \"0b1100\")\n              ((< rounded_avg 14) \"0b1101\"\
    )\n              ((< rounded_avg 15) \"0b1110\")\n              ((< rounded_avg\
    \ 16) \"0b1111\")\n              ((< rounded_avg 17) \"0b10000\")\n          \
    \    ((< rounded_avg 18) \"0b10001\")\n              ((< rounded_avg 19) \"0b10010\"\
    )\n              ((< rounded_avg 20) \"0b10011\")\n              ((< rounded_avg\
    \ 21) \"0b10100\")\n              ((< rounded_avg 22) \"0b10101\")\n         \
    \     ((< rounded_avg 23) \"0b10110\")\n              ((< rounded_avg 24) \"0b10111\"\
    )\n              ((< rounded_avg 25) \"0b11000\")\n              ((< rounded_avg\
    \ 26) \"0b11001\")\n              ((< rounded_avg 27) \"0b11010", "  (let ((n_\
    \ (floor n)))\n    (let ((m_ (floor m)))\n      (if (<= n m)\n        (let ((avg\
    \ (round (/ (n - n_) (m - m_))))\n              (bin avg))\n          (bin (-\
    \ 1) avg))\n        (bin (- 1) -1))))\n)\n", "  (let ((n_ (integer->string n)))\n\
    \    (let ((m_ (integer->string m)))\n      (let ((avg (string->number (string->list\
    \ n_ m_))))\n        (if (< avg 0)\n          (-1)\n          (string->list (string->number\
    \ avg)))))))\n", "  (let ((n (abs n)))\n    (let ((m (abs m)))\n      (if (<=\
    \ n m)\n        (let ((avg (round (/ (n + m) 2))))\n          (if (< avg 1)\n\
    \            (-1)\n            (let ((bin (string-append \"0b\" (string-append\
    \ (number->string avg) \"1\"))))\n              bin)))\n        (+ 1 (rounded_avg\
    \ (- n 1) (- m 1))))))\n", "  (let ((n_ (floor n)))\n    (let ((m_ (floor m)))\n\
    \      (cond\n        ((= n m) (floor (/ n m)))\n        ((< n m) -1)\n      \
    \  (else\n          (let ((n_ (floor n_)))\n            (let ((m_ (floor m_)))\n\
    \              (let ((n_m_ (floor (/ n_ m_))))\n                (let ((n_m_ (floor\
    \ n_m_)))\n                  (let ((n_m_m_ (floor n_m_m_)))\n                \
    \    (let ((n_m_m_ (floor n_m_m_)))\n                      (let ((n_m_m_m_ (floor\
    \ n_m_m_m_)))\n                        (let ((n_m_m_m_ (floor n_m_m_m_)))\n  \
    \                        (let ((n_m_m_m_m_ (floor n_m_m_m_m_)))\n            \
    \                (let ((n_m_m_m_m_m_ (floor n_m_m_m_m_m_)))\n                \
    \              (let ((n_m_m_m_m_m_m_ (floor n_m_m_m_m_m_m_)))\n              \
    \                  (let ((n_m_m_m_m_m_m_m_ (floor n_m_m_m_m_m_m_m_)))\n      \
    \                            (let ((n_m_m_m_m_m_m_m_m_ (floor n_m_m_m_m_m_m_m_m_)))\n\
    \                                    (let ((n_m_m_m_m_m_m_m_m_m_ (floor n_m_m_m_m_m_m_m_m_m_)))\n\
    \                                      (let ((n_m_m_m_m_m_m_m_m_m_m_ (floor n_m_m_m_m_m_m_m_m_m_m_)))\n\
    \                                        (let ((n_m_m_m_m_m_m_m_m_m_m", "  (let\
    \ ((n-1 (modulo n m)))\n    (if (< n-1 0)\n      (-1)\n      (let ((n-2 (modulo\
    \ n-1 m)))\n        (let ((n-3 (modulo n-2 m)))\n          (let ((n-4 (modulo\
    \ n-3 m)))\n            (let ((n-5 (modulo n-4 m)))\n              (let ((n-6\
    \ (modulo n-5 m)))\n                (let ((n-7 (modulo n-6 m)))\n            \
    \      (let ((n-8 (modulo n-7 m)))\n                    (let ((n-9 (modulo n-8\
    \ m)))\n                      (let ((n-10 (modulo n-9 m)))\n                 \
    \       (let ((n-11 (modulo n-10 m)))\n                          (let ((n-12 (modulo\
    \ n-11 m)))\n                            (let ((n-13 (modulo n-12 m)))\n     \
    \                         (let ((n-14 (modulo n-13 m)))\n                    \
    \            (let ((n-15 (modulo n-14 m)))\n                                 \
    \ (let ((n-16 (modulo n-15 m)))\n                                    (let ((n-17\
    \ (modulo n-16 m)))\n                                      (let ((n-18 (modulo\
    \ n-17 m)))\n                                        (let ((n-19 (modulo n-18\
    \ m)))\n                                          (let ((n-20 (modulo n-19 m)))\n\
    \                                            (let ((n-21 (modulo n-20 m)))\n \
    \                                             (let ((n-22 (modulo n-21 m)))\n\
    \                                                (let ((n-23 (modulo n-22 m)))\n\
    \                                                  (let ((n-24 (modulo n-23 m)))\n\
    \                                                    (let ((n-25 (modulo n-24\
    \ m)))\n                                                      (let ((n-26 (modulo\
    \ n-25 m)))\n                                                        (let ((n-27\
    \ (modulo n-26 m)))\n                                                        \
    \  (let ((n-28 (modulo n-27 m)))\n                                ", "  (let ((n_\
    \ (integer->string n))\n        (m_ (integer->string m)))\n    (if (> (string->integer\
    \ m_) (string->integer n_))\n      (-1)\n      (let ((avg (string->integer (string->number\
    \ (string->integer n_) + \".\" + (string->integer m_))))\n            (rounded\
    \ (string->integer avg)))\n        (string->number rounded))))\n", "  (let ((n\
    \ (floor n)))\n    (let ((m (floor m)))\n      (if (<= n m)\n        (let ((n\
    \ (floor n)))\n          (let ((m (floor m)))\n            (if (<= n m)\n    \
    \          (let ((n (floor n)))\n                (let ((m (floor m)))\n      \
    \            (if (<= n m)\n                    (let ((n (floor n)))\n        \
    \              (let ((m (floor m)))\n                        (if (<= n m)\n  \
    \                        (let ((n (floor n)))\n                            (let\
    \ ((m (floor m)))\n                              (if (<= n m)\n              \
    \                  (let ((n (floor n)))\n                                  (let\
    \ ((m (floor m)))\n                                    (if (<= n m)\n        \
    \                              (let ((n (floor n)))\n                        \
    \                (let ((m (floor m)))\n                                      \
    \    (if (<= n m)\n                                            (let ((n (floor\
    \ n)))\n                                              (let ((m (floor m)))\n \
    \                                               (if (<= n m)\n               \
    \                                   (let ((n (floor n)))\n                   \
    \                                 (let ((m (floor m)))\n                     \
    \                                 (if (<= n m)\n                             \
    \                           (let ((n (floor n)))\n                           \
    \                               (let ((m (floor m)))\n                       \
    \                                     (if (<= n m)\n                         \
    \                                     (let ((n (floor n)))\n                 \
    \                                               (let ((m (floor m)))\n       \
    \                                                           (if (<= n m)\n   \
    \                                                                 (let ((n (floor\
    \ n)))\n                                                                     \
    \ (let ((m (floor m)))\n                                                     \
    \                   (if (<= n m)\n                                           \
    \                               (let ((n (floor n)))\n                       \
    \                                                     (let ((m (floor m)))\n \
    \                                                                            \
    \ (if (<= n m)\n                                                             \
    \                   (let ((n (floor n)))\n                                   \
    \                                               (let ((m (floor m)))\n       \
    \                                                                            \
    \ (if (<= n m)\n                                                             \
    \                         (let ((", "  (let ((n (abs n)))\n    (let ((m (abs m)))\n\
    \      (if (<= n m)\n        (let ((n_m (+ n m)))\n          (let ((n_m_div (floor\
    \ n_m)))\n            (let ((n_m_mod (modulo n_m)))\n              (let ((n_m_div_mod\
    \ (floor n_m_mod)))\n                (let ((n_m_div_mod_mod (modulo n_m_div_mod)))\n\
    \                  (let ((n_m_div_mod_mod_mod (modulo n_m_div_mod_mod)))\n   \
    \                 (if (<= n_m_div_mod_mod_mod n_m)\n                      (let\
    \ ((n_m_div_mod_mod_mod_div (floor n_m_div_mod_mod_mod)))\n                  \
    \      (let ((n_m_div_mod_mod_mod_div_mod (modulo n_m_div_mod_mod_mod_div)))\n\
    \                          (let ((n_m_div_mod_mod_mod_div_mod_mod (modulo n_m_div_mod_mod_mod_div_mod)))\n\
    \                            (if (<= n_m_div_mod_mod_mod_div_mod_mod n_m)\n  \
    \                            (let ((n_m_div_mod_mod_mod_div_mod_mod_div (floor\
    \ n_m_div_mod_mod_mod_div_mod_mod)))\n                                (let ((n_m_div_mod_mod_mod_div_mod_mod_div_mod_mod\
    \ (modulo n_m_div_mod_mod_mod_div_mod_mod_div)))\n                           \
    \       (if (<= n_m_div_mod_mod_mod_div_mod_mod_div_mod_mod n_m)\n           \
    \                          (let ((n_m_div_mod_mod_mod_div_mod_mod_div_mod_mod_div\
    \ (floor n_m_div_mod_mod_mod_div_mod_mod_div_mod_mod)))\n                    \
    \                   (let ((n_m_div_mod_mod_mod", "  (let ((n (abs n)))\n    (let\
    \ ((m (abs m)))\n      (if (<= n m)\n        (let ((avg (round (/ (n m) 2) + 1)))\n\
    \          (if (odd? avg)\n            (- avg)\n            avg))\n        (-1)))\n\
    \    ))\n", "  (let ((n_ (floor n)))\n    (let ((m_ (floor m)))\n      (cond\n\
    \        [(< n m_) (-1)]\n        [(< n n_) (rounded_avg n_ (add1 m_))]\n    \
    \    [(>= n n_) (rounded_avg n_ (add1 m_))]\n        [(>= n m_) (rounded_avg n_\
    \ (add1 m_))]\n        [(> n m_) (rounded_avg n_ (add1 m_))]\n        [else (rounded_avg\
    \ n_ (add1 m_))]\n      )\n    )\n  )\n)\n", "  (cond\n    ((< n m) -1)\n    ((=\
    \ n m) (round (/ (n m) 2)))\n    (else\n      (let ((n1 (round (/ n 2)))\n   \
    \         (n2 (round (/ m 2)))\n            (n3 (round (/ (n m) 2)))\n       \
    \     (n4 (round (/ (n m) 3)))\n            (n5 (round (/ (n m) 4)))\n       \
    \     (n6 (round (/ (n m) 5)))\n            (n7 (round (/ (n m) 6)))\n       \
    \     (n8 (round (/ (n m) 7)))\n            (n9 (round (/ (n m) 8)))\n       \
    \     (n10 (round (/ (n m) 9)))\n            (n11 (round (/ (n m) 10))))\n   \
    \   (let ((m1 (round (/ m 2)))\n            (m2 (round (/ (m m) 2)))\n       \
    \     (m3 (round (/ (m m) 3)))\n            (m4 (round (/ (m m) 4)))\n       \
    \     (m5 (round (/ (m m) 5)))\n            (m6 (round (/ (m m) 6)))\n       \
    \     (m7 (round (/ (m m) 7)))\n            (m8 (round (/ (m m) 8)))\n       \
    \     (m9 (round (/ (m m) 9)))\n            (m10 (round (/ (m m) 10))))\n    \
    \  (let ((n12 (round (/ (n m) 12)))\n            (n13 (round (/ (n m) 13)))\n\
    \            (n14 (round (/ (n m) 14)))\n            (n15 (round (/ (n m) 15)))\n\
    \            (n16 (round (/ (n m) 16)))\n            (n17 (round (/ (n m) 17)))\n\
    \            (n18 (round (/ (n m) 18)))\n            (n19 (round (/ (n m) 19)))\n\
    \            (n20 (round (/ (n m) 20))))\n      (let ((m12 (round (/ (m m) 12)))\n\
    \            (m13 (round (/ (m m) 13)))\n            (m14 (round (/ (m m) 14)))\n\
    \            (m15 (round (/ (m m) 15)))\n            (m", "  (let ((n-1 (modulo\
    \ n m)))\n    (if (< n-1 0)\n      (-1)\n      (let ((n-2 (modulo n-1 m)))\n \
    \       (let ((n-3 (modulo n-2 m)))\n          (let ((n-4 (modulo n-3 m)))\n \
    \           (let ((n-5 (modulo n-4 m)))\n              (let ((n-6 (modulo n-5\
    \ m)))\n                (let ((n-7 (modulo n-6 m)))\n                  (let ((n-8\
    \ (modulo n-7 m)))\n                    (let ((n-9 (modulo n-8 m)))\n        \
    \              (let ((n-10 (modulo n-9 m)))\n                        (let ((n-11\
    \ (modulo n-10 m)))\n                          (let ((n-12 (modulo n-11 m)))\n\
    \                            (let ((n-13 (modulo n-12 m)))\n                 \
    \             (let ((n-14 (modulo n-13 m)))\n                                (let\
    \ ((n-15 (modulo n-14 m)))\n                                  (let ((n-16 (modulo\
    \ n-15 m)))\n                                    (let ((n-17 (modulo n-16 m)))\n\
    \                                      (let ((n-18 (modulo n-17 m)))\n       \
    \                                 (let ((n-19 (modulo n-18 m)))\n            \
    \                              (let ((n-20 (modulo n-19 m)))\n               \
    \                             (let ((n-21 (modulo n-20 m)))\n                \
    \                              (let ((n-22 (modulo n-21 m)))\n               \
    \                                 (let ((n-23 (modulo n-22 m)))\n            \
    \                                      (let ((n-24 (modulo n-23 m)))\n       \
    \                                             (let ((n-25 (modulo n-24 m)))\n\
    \                                                      (let ((n-26 (modulo n-25\
    \ m)))\n                                                        (let ((n-27 (modulo\
    \ n-26 m)))\n                                                          (let ((n-28\
    \ (modulo n-27 m)))\n                                ", "  (cond\n    ((< n m)\
    \ -1)\n    ((= n m) (round (/ (n m) 2)))\n    (else (round (/ (n m) 2)))))\n",
  "  (let ((n_ (floor n)))\n    (let ((m_ (floor m)))\n      (if (<= n m)\n      \
    \  (let ((avg (round (/ (n - n_) (m - m_))))\n              (bin avg))\n     \
    \     (bin \"0b\" avg))\n        (bin \"0b-1\"))))\n", "  (let ((n_ (floor n)))\n\
    \    (let ((m_ (floor m)))\n      (if (<= n m)\n        (let ((avg (round (/ (n\
    \ - n_) (m - m_))))\n              (bin avg))\n          (if (< avg 1)\n     \
    \       (-1)\n            bin))\n        avg))\n  ))\n", "  (let ((n-1 (modulo\
    \ n m)))\n    (if (< n 0)\n      (-1)\n      (if (< n-1 0)\n        (+ (modulo\
    \ (- n-1) m) (/ m 2))\n        (+ (modulo (- n) m) (/ m 2)))))\n)\n", "  (let\
    \ ((n-1 (modulo n m)))\n    (if (< n-1 0)\n      (-1)\n      (let ((n-2 (modulo\
    \ n-1 m)))\n        (let ((n-3 (modulo n-2 m)))\n          (let ((n-4 (modulo\
    \ n-3 m)))\n            (let ((n-5 (modulo n-4 m)))\n              (let ((n-6\
    \ (modulo n-5 m)))\n                (let ((n-7 (modulo n-6 m)))\n            \
    \      (let ((n-8 (modulo n-7 m)))\n                    (let ((n-9 (modulo n-8\
    \ m)))\n                      (let ((n-10 (modulo n-9 m)))\n                 \
    \       (let ((n-11 (modulo n-10 m)))\n                          (let ((n-12 (modulo\
    \ n-11 m)))\n                            (let ((n-13 (modulo n-12 m)))\n     \
    \                         (let ((n-14 (modulo n-13 m)))\n                    \
    \            (let ((n-15 (modulo n-14 m)))\n                                 \
    \ (let ((n-16 (modulo n-15 m)))\n                                    (let ((n-17\
    \ (modulo n-16 m)))\n                                      (let ((n-18 (modulo\
    \ n-17 m)))\n                                        (let ((n-19 (modulo n-18\
    \ m)))\n                                          (let ((n-20 (modulo n-19 m)))\n\
    \                                            (let ((n-21 (modulo n-20 m)))\n \
    \                                             (let ((n-22 (modulo n-21 m)))\n\
    \                                                (let ((n-23 (modulo n-22 m)))\n\
    \                                                  (let ((n-24 (modulo n-23 m)))\n\
    \                                                    (let ((n-25 (modulo n-24\
    \ m)))\n                                                      (let ((n-26 (modulo\
    \ n-25 m)))\n                                                        (let ((n-27\
    \ (modulo n-26 m)))\n                                                        \
    \  (let ((n-28 (modulo n-27 m)))\n                                ", "  (let ((n_int\
    \ n)\n        (m_int m))\n    (if (>= n m)\n      (-1)\n      (let ((n_rem n)\n\
    \             (m_rem m))\n        (let ((n_div n_rem)\n              (m_div m_rem))\n\
    \          (let ((n_quot n_div)\n                (m_quot m_div))\n           \
    \ (let ((n_rem_quot n_quot)\n                  (m_rem_quot m_quot))\n        \
    \      (let ((n_rem_div n_rem_quot)\n                    (m_rem_div m_rem_quot))\n\
    \                (+ (quotient n_rem_div)\n                   (quotient m_rem_div)))))))))))\n",
  "  (cond\n    ((< n m) -1)\n    ((= n m) (round (/ (n m) 2) 2))\n    (else\n   \
    \   (let ((n_half (floor n / 2)))\n        (let ((m_half (floor m / 2)))\n   \
    \       (let ((n_rem (modulo n n_half)))\n            (let ((m_rem (modulo m m_half)))\n\
    \              (let ((n_half_rem (modulo n_half n_rem)))\n                (let\
    \ ((m_half_rem (modulo m_half m_rem)))\n                  (let ((n_rem_half (modulo\
    \ n_rem n_half_rem)))\n                    (let ((m_rem_half (modulo m_rem m_half_rem)))\n\
    \                      (let ((n_half_rem_half (modulo n_half_rem n_rem_half)))\n\
    \                        (let ((m_half_rem_half (modulo m_half_rem m_rem_half)))\n\
    \                          (let ((n_rem_half_rem (modulo n_rem_half n_rem_half_rem)))\n\
    \                            (let ((m_rem_half_rem (modulo m_rem_half m_rem_half_rem)))\n\
    \                              (let ((n_rem_half_rem_half (modulo n_rem_half_rem\
    \ n_rem_half_rem_half)))\n                                (let ((m_rem_half_rem_half\
    \ (modulo m_rem_half_rem m_rem_half_rem_half)))\n                            \
    \      (let ((n_rem_half_rem_half_half (modulo n_rem_half_rem_half n_rem_half_rem_half_half)))\n\
    \                                    (let ((m_rem_half_rem_half_half (modulo m_rem_half_rem_half\
    \ m_rem_half_rem_half_half)))\n                                      (let ((n_rem_half_rem_half_half_half\
    \ (modulo n_rem_half_rem_half_half n_rem_half_rem_half_half_half)))\n        \
    \                                (let ((m_rem_half_rem_half_half_half (modulo\
    \ m", "  (let ((n_ (floor n)))\n    (let ((m_ (floor m)))\n      (let ((n_m_ (mul\
    \ n_ m_)))\n        (let ((n_m_n (div n_m_ n_)))\n          (let ((n_m_n_1 (mod\
    \ n_m_ n_)))\n            (let ((n_m_n_2 (mod n_m_ n_1)))\n              (let\
    \ ((n_m_n_3 (mod n_m_ n_2)))\n                (let ((n_m_n_4 (mod n_m_ n_3)))\n\
    \                  (let ((n_m_n_5 (mod n_m_ n_4)))\n                    (let ((n_m_n_6\
    \ (mod n_m_ n_5)))\n                      (let ((n_m_n_7 (mod n_m_ n_6)))\n  \
    \                      (let ((n_m_n_8 (mod n_m_ n_7)))\n                     \
    \     (let ((n_m_n_9 (mod n_m_ n_8)))\n                            (let ((n_m_n_10\
    \ (mod n_m_ n_9)))\n                              (let ((n_m_n_11 (mod n_m_ n_10)))\n\
    \                                (let ((n_m_n_12 (mod n_m_ n_11)))\n         \
    \                         (let ((n_m_n_13 (mod n_m_ n_12)))\n                \
    \                    (let ((n_m_n_14 (mod n_m_ n_13)))\n                     \
    \                 (let ((n_m_n_15 (mod n_m_ n_14)))\n                        \
    \                (let ((n_m_n_16 (mod n_m_ n_15)))\n                         \
    \                 (let ((n_m_n_17 (mod n_m_ n_16)))\n                        \
    \                    (let ((n_m_n_18 (mod n_m_ n_17)))\n                     \
    \                         (let ((n_m_n_19 (mod n_m_ n_18)))\n                \
    \                                (let ((n_m_n_20 (mod n_m", "  (let ((n-1 (sub1\
    \ n))\n        (m-1 (sub1 m)))\n    (cond\n      ((= n m) (-1))\n      ((< n m)\
    \ (-1))\n      ((>= n m)\n        (let ((n-2 (sub1 n))\n              (m-2 (sub1\
    \ m)))\n          (/ (+ n-2 m-2) 2)))\n      (else\n        (let ((n-3 (sub1 n))\n\
    \              (m-3 (sub1 m)))\n          (/ (+ n-3 m-3) 3))))))\n", "  (let ((n\
    \ (abs n))\n        (m (abs m))\n        (sum (if (< n m)\n               (+ n\
    \ m)\n               (- m n)))\n        (avg (if (< n m)\n               (+ (/\
    \ sum 2) (/ n 2))\n               (- (/ sum 2) (/ m 2))))\n        (if (< avg\
    \ 0)\n           (-1)\n           (if (< avg 1)\n               \"0b0\"\n    \
    \           (let ((i (floor avg)))\n                 (let ((j (floor (/ sum i)))\n\
    \                        (k (floor (/ n i)))\n                        (l (floor\
    \ (/ m i)))\n                        (mul (if (< i 1)\n                      \
    \           1\n                                 (if (< j 1)\n                \
    \                    1\n                                    (if (< k 1)\n    \
    \                                    1\n                                     \
    \   (if (< l 1)\n                                            1\n             \
    \                               (let ((n (if (< i 2)\n                       \
    \                                 1\n                                        \
    \                (if (< j 2)\n                                               \
    \            1\n                                                           (if\
    \ (< k 2)\n                                                              1\n \
    \                                                             (if (< l 2)\n  \
    \                                                              1\n           \
    \                                                     (let ((n (if (< i 3)\n \
    \                                                                        1\n \
    \                                                                        (if (<\
    \ j 3)\n                                                                     \
    \       1\n                                                                  \
    \          (if (< k 3)\n                                                     \
    \                         1\n                                                \
    \                              (if (< l 3)\n                                 \
    \                                               1\n                          \
    \                                                      (let ((n (if (< i 4)\n\
    \                                                                            \
    \           1\n                                                              \
    \                         (if (< j 4)\n                                      \
    \                                                  1\n                       \
    \                                                                 (if (< k 4)\n\
    \                                                                            \
    \              1\n                                                           \
    \                               (if (< l 4)\n                                \
    \                                                            1\n             \
    \                                                                            \
    \   (let ((n (if (< i 5)\n                                                   \
    \                                               1\n                          \
    \                                                                        (if (<\
    \ j 5)\n                                                                     \
    \                              1\n                                           \
    \                                                        (if (< k 5)\n       \
    \                                                                            \
    \                 1\n                                                        \
    \                                     ", "  (let ((n-1 (modulo n m)))\n    (if\
    \ (< n m)\n      (-1)\n      (let ((n-2 (modulo n n-1)))\n        (let ((m-1 (modulo\
    \ m n-1)))\n          (let ((m-2 (modulo m m-1)))\n            (let ((n-3 (modulo\
    \ n n-2)))\n              (let ((m-3 (modulo m m-2)))\n                (let ((n-4\
    \ (modulo n n-3)))\n                  (let ((m-4 (modulo m m-3)))\n          \
    \          (let ((n-5 (modulo n n-4)))\n                      (let ((m-5 (modulo\
    \ m m-4)))\n                        (let ((n-6 (modulo n n-5)))\n            \
    \              (let ((m-6 (modulo m m-5)))\n                            (let ((n-7\
    \ (modulo n n-6)))\n                              (let ((m-7 (modulo m m-6)))\n\
    \                                (let ((n-8 (modulo n n-7)))\n               \
    \                   (let ((m-8 (modulo m m-7)))\n                            \
    \        (let ((n-9 (modulo n n-8)))\n                                      (let\
    \ ((m-9 (modulo m m-8)))\n                                        (let ((n-10\
    \ (modulo n n-9)))\n                                          (let ((m-10 (modulo\
    \ m m-9)))\n                                            (let ((n-11 (modulo n\
    \ n-10)))\n                                              (let ((m-11 (modulo m\
    \ m-10)))\n                                                (let ((n-12 (modulo\
    \ n n-11)))\n                                                  (let ((m-12 (modulo\
    \ m m-11)))\n                                                    (let ((n-13 (modulo\
    \ n n-12)))\n                                                      (let ((m-13\
    \ (modulo m m-12)))\n                                                        (let\
    \ ((n-14 (modulo n n-13)))\n                                                 \
    \         (let ((m-14 (modulo m m-13)))\n                                  ",
  "  (let ((n_ (floor n)))\n    (let ((m_ (floor m)))\n      (if (<= n m)\n      \
    \  (let ((avg (round (/ (n - n_) (m - m_))))\n              (bin avg))\n     \
    \     (if (< avg 1)\n            (-1)\n            bin))\n        avg))\n  ))\n",
  "  (cond\n    ((< n m) -1)\n    ((= n m)\n      (let ((n (floor n)))\n        (let\
    \ ((m (floor m)))\n          (let ((avg (round (/ (n - m) (m - n))))\n       \
    \         (bin avg))\n            (string-append \"0b\" bin))))))\n    (else\n\
    \      (let ((n (floor n)))\n        (let ((m (floor m)))\n          (let ((avg\
    \ (round (/ (n - m) (m - n))))\n                (bin avg))\n            (string-append\
    \ \"0b\" bin)))))))\n", "  (let ((n-1 (sub1 n))\n        (m-1 (sub1 m)))\n   \
    \ (if (>= n m)\n      (-1)\n      (+ (/ n m)\n         (/ (+ n m) 2))))\n)\n",
  "  (let ((n-1 (sub1 n))\n        (m-1 (sub1 m)))\n    (if (>= n m)\n      (-1)\n\
    \      (+ (/ n m) (/ n m)))))\n", "  (cond\n    [(< n m) -1]\n    [(<= n m) (round\
    \ (/ (n m) 2))]\n    [else (round (/ (n m) 2))]))\n", "  (let ((n_ (floor n)))\n\
    \    (let ((m_ (floor m)))\n      (if (<= n m)\n        (let ((avg (round (/ (n\
    \ - n_) (m - m_))))\n              (bin avg))\n          (format \"0b\" bin))\n\
    \        (format \"-1\"))))\n)\n", "  (let ((n (abs n)))\n    (let ((m (abs m)))\n\
    \      (let ((sum (+ n m))\n             (avg (div sum 2))\n             (rounded\
    \ (round avg)))\n        (cond\n          [(< n m) (-1)]\n          [(= n m) rounded]\n\
    \          [(< avg 1) (-1)]\n          [else rounded]))))\n", "  (let ((n (abs\
    \ n)))\n    (let ((m (abs m)))\n      (if (<= n m)\n        (let ((n_m (+ n m)))\n\
    \          (let ((n_m_div (floor n_m)))\n            (let ((n_m_mod (modulo n_m)))\n\
    \              (let ((n_m_div_mod (floor n_m_mod)))\n                (let ((n_m_div_mod_mod\
    \ (modulo n_m_div_mod)))\n                  (let ((n_m_div_mod_mod_mod (modulo\
    \ n_m_div_mod_mod)))\n                    (if (<= n_m_div_mod_mod_mod n_m)\n \
    \                     (let ((n_m_div_mod_mod_mod_div (floor n_m_div_mod_mod_mod)))\n\
    \                        (let ((n_m_div_mod_mod_mod_div_mod (modulo n_m_div_mod_mod_mod_div)))\n\
    \                          (let ((n_m_div_mod_mod_mod_div_mod_mod (modulo n_m_div_mod_mod_mod_div_mod)))\n\
    \                            (if (<= n_m_div_mod_mod_mod_div_mod_mod n_m)\n  \
    \                            (let ((n_m_div_mod_mod_mod_div_mod_mod_div (floor\
    \ n_m_div_mod_mod_mod_div_mod_mod)))\n                                (let ((n_m_div_mod_mod_mod_div_mod_mod_div_mod_mod\
    \ (modulo n_m_div_mod_mod_mod_div_mod_mod_div)))\n                           \
    \       (let ((n_m_div_mod_mod_mod_div_mod_mod_div_mod_mod_div (modulo n_m_div_mod_mod_mod_div_mod_mod_div_mod_mod)))\n\
    \                                    (if (<= n_m_div_mod_mod_mod_div_mod_mod_div_mod_mod_div\
    \ n_m)\n                                      (let ((n_m_div_mod_", "  (let ((n_\
    \ (floor n)))\n    (let ((m_ (floor m)))\n      (if (<= n m)\n        (let ((avg\
    \ (round (/ (n - n_) (m - m_))))\n              (bin avg))\n          (bin \"\
    0b\" avg))\n        (let ((avg (round (/ (n - n_) (m - m_))))\n              (bin\
    \ avg))\n          (bin \"0b\" avg))))))\n", "  (let ((n-1 (sub1 n))\n       \
    \ (m-1 (sub1 m)))\n    (if (< n m)\n      (-1)\n      (let ((n-2 (sub1 n-1))\n\
    \            (m-2 (sub1 m-1)))\n        (let ((n-3 (sub1 n-2))\n             \
    \ (m-3 (sub1 m-2)))\n          (let ((n-4 (sub1 n-3))\n                (m-4 (sub1\
    \ m-3)))\n            (let ((n-5 (sub1 n-4))\n                  (m-5 (sub1 m-4)))\n\
    \              (let ((n-6 (sub1 n-5))\n                    (m-6 (sub1 m-5)))\n\
    \                (let ((n-7 (sub1 n-6))\n                      (m-7 (sub1 m-6)))\n\
    \                  (let ((n-8 (sub1 n-7))\n                        (m-8 (sub1\
    \ m-7)))\n                    (let ((n-9 (sub1 n-8))\n                       \
    \   (m-9 (sub1 m-8)))\n                      (let ((n-10 (sub1 n-9))\n       \
    \                     (m-10 (sub1 m-9)))\n                        (let ((n-11\
    \ (sub1 n-10))\n                              (m-11 (sub1 m-10)))\n          \
    \                (let ((n-12 (sub1 n-11))\n                                (m-12\
    \ (sub1 m-11)))\n                            (let ((n-13 (sub1 n-12))\n      \
    \                            (m-13 (sub1 m-12)))\n                           \
    \   (let ((n-14 (sub1 n-13))\n                                     (m-14 (sub1\
    \ m-13)))\n                                (let ((n-15 (sub1 n-14))\n        \
    \                              (m-15 (sub1 m-14)))\n                         \
    \         (let ((n-16 (sub1 n-15))\n                                        (m-16\
    \ (sub1 m-15)))\n                                    (let ((n-17 (sub1 n-16))\n\
    \                                          (m-17 (sub1 m-16)))\n             \
    \                         (let ((n-18 (", "  (let ((n (floor n)))\n    (let ((m\
    \ (floor m)))\n      (if (<= n m)\n        (let ((n (floor n)))\n          (let\
    \ ((m (floor m)))\n            (if (<= n m)\n              (let ((n (floor n)))\n\
    \                (let ((m (floor m)))\n                  (if (<= n m)\n      \
    \              (let ((n (floor n)))\n                      (let ((m (floor m)))\n\
    \                        (if (<= n m)\n                          (let ((n (floor\
    \ n)))\n                            (let ((m (floor m)))\n                   \
    \           (if (<= n m)\n                                (let ((n (floor n)))\n\
    \                                  (let ((m (floor m)))\n                    \
    \                (if (<= n m)\n                                      (let ((n\
    \ (floor n)))\n                                        (let ((m (floor m)))\n\
    \                                          (if (<= n m)\n                    \
    \                        (let ((n (floor n)))\n                              \
    \                (let ((m (floor m)))\n                                      \
    \          (if (<= n m)\n                                                  (let\
    \ ((n (floor n)))\n                                                    (let ((m\
    \ (floor m)))\n                                                      (if (<= n\
    \ m)\n                                                        (let ((n (floor\
    \ n)))\n                                                          (let ((m (floor\
    \ m)))\n                                                            (if (<= n\
    \ m)\n                                                              (let ((n (floor\
    \ n)))\n                                                                (let ((m\
    \ (floor m)))\n                                                              \
    \    (if (<= n m)\n                                                          \
    \          (let ((n (floor n)))\n                                            \
    \                          (let ((m (floor m)))\n                            \
    \                                            (if (<= n m)\n                  \
    \                                                        (let ((n (floor n)))\n\
    \                                                                            (let\
    \ ((m (floor m)))\n                                                          \
    \                    (if (<= n m)\n                                          \
    \                                      (let ((n (floor n)))\n                \
    \                                                                  (let ((m (floor\
    \ m)))\n                                                                     \
    \               (if (<= n m)\n                                               \
    \                                       (let ((", "  (let ((n-1 (modulo n m)))\n\
    \    (if (< n-1 0)\n      (-1)\n      (let ((n-2 (modulo n n-1)))\n        (let\
    \ ((n-3 (modulo n n-2)))\n          (let ((n-4 (modulo n n-3)))\n            (let\
    \ ((n-5 (modulo n n-4)))\n              (let ((n-6 (modulo n n-5)))\n        \
    \        (let ((n-7 (modulo n n-6)))\n                  (let ((n-8 (modulo n n-7)))\n\
    \                    (let ((n-9 (modulo n n-8)))\n                      (let ((n-10\
    \ (modulo n n-9)))\n                        (let ((n-11 (modulo n n-10)))\n  \
    \                        (let ((n-12 (modulo n n-11)))\n                     \
    \       (let ((n-13 (modulo n n-12)))\n                              (let ((n-14\
    \ (modulo n n-13)))\n                                (let ((n-15 (modulo n n-14)))\n\
    \                                  (let ((n-16 (modulo n n-15)))\n           \
    \                         (let ((n-17 (modulo n n-16)))\n                    \
    \                  (let ((n-18 (modulo n n-17)))\n                           \
    \             (let ((n-19 (modulo n n-18)))\n                                \
    \          (let ((n-20 (modulo n n-19)))\n                                   \
    \         (let ((n-21 (modulo n n-20)))\n                                    \
    \          (let ((n-22 (modulo n n-21)))\n                                   \
    \             (let ((n-23 (modulo n n-22)))\n                                \
    \                  (let ((n-24 (modulo n n-23)))\n                           \
    \                         (let ((n-25 (modulo n n-24)))\n                    \
    \                                  (let ((n-26 (modulo n n-25)))\n           \
    \                                             (let ((n-27 (modulo n n-26)))\n\
    \                                                          (let ((n-28 (modulo\
    \ n n-27)))\n                                ", "  (cond\n    ((< n m) -1)\n \
    \   ((= n m) (round (/ (n m) 2)))\n    (else\n      (+ (round (/ (n m) 2))\n\t\
    \      (round (/ (m n) 2))))))\n", "  (let ((n_ (floor n)))\n    (let ((m_ (floor\
    \ m)))\n      (cond\n        [(< n m_) (-1)]\n        [(> n_ m_) (-1)]\n     \
    \   [(= n_ m_)\n          (let ((n_ (floor n_)))\n            (let ((m_ (floor\
    \ m_)))\n              (let ((n_ (floor n_)))\n                (let ((m_ (floor\
    \ m_)))\n                  (let ((n_ (floor n_)))\n                    (let ((m_\
    \ (floor m_)))\n                      (let ((n_ (floor n_)))\n               \
    \         (let ((m_ (floor m_)))\n                          (let ((n_ (floor n_)))\n\
    \                            (let ((m_ (floor m_)))\n                        \
    \      (let ((n_ (floor n_)))\n                                (let ((m_ (floor\
    \ m_)))\n                                  (let ((n_ (floor n_)))\n          \
    \                          (let ((m_ (floor m_)))\n                          \
    \            (let ((n_ (floor n_)))\n                                        (let\
    \ ((m_ (floor m_)))\n                                          (let ((n_ (floor\
    \ n_)))\n                                            (let ((m_ (floor m_)))\n\
    \                                              (let ((n_ (floor n_)))\n      \
    \                                          (let ((m_ (floor m_)))\n          \
    \                                        (let ((n_ (floor n_)))\n            \
    \                                        (let ((m_ (floor m_)))\n            \
    \                                          (let ((n_ (floor n_)))\n          \
    \                                              (let ((m_ (floor m_)))\n      \
    \                                                    (let ((n_ (floor n_)))\n\
    \                                                            (let ((m_ (floor\
    \ m_)))\n                                                              (let ((n_\
    \ (floor n_)))\n                                                             \
    \   (let ((m_ (floor m_)))\n                                                 \
    \                 (let ((n_ (floor n_)))\n                                   \
    \                                 (let ((m_ (floor m_)))\n                   \
    \                                                   (let ((n_ (floor n_)))\n \
    \                                                                       (let ((",
  "  (let ((n-1 (modulo n m)))\n    (if (< n-1 0)\n      (-1)\n      (if (< n-1 0)\n\
    \        (+ (modulo (- n-1 1) m) (/ m 2))\n        (+ (modulo (- n-1 2) m) (/\
    \ m 2))\n        (+ (modulo (- n-1 3) m) (/ m 2))\n        (+ (modulo (- n-1 4)\
    \ m) (/ m 2))\n        (+ (modulo (- n-1 5) m) (/ m 2))\n        (+ (modulo (-\
    \ n-1 6) m) (/ m 2))\n        (+ (modulo (- n-1 7) m) (/ m 2))\n        (+ (modulo\
    \ (- n-1 8) m) (/ m 2))\n        (+ (modulo (- n-1 9) m) (/ m 2))\n        (+\
    \ (modulo (- n-1 10) m) (/ m 2))\n        (+ (modulo (- n-1 11) m) (/ m 2))\n\
    \        (+ (modulo (- n-1 12) m) (/ m 2))\n        (+ (modulo (- n-1 13) m) (/\
    \ m 2))\n        (+ (modulo (- n-1 14) m) (/ m 2))\n        (+ (modulo (- n-1\
    \ 15) m) (/ m 2))\n        (+ (modulo (- n-1 16) m) (/ m 2))\n        (+ (modulo\
    \ (- n-1 17) m) (/ m 2))\n        (+ (modulo (- n-1 18) m) (/ m 2))\n        (+\
    \ (modulo (- n-1 19) m) (/ m 2))\n        (+ (modulo (- n-1 20) m) (/ m 2))\n\
    \        (+ (modulo (- n-1 21) m) (/ m 2))\n        (+ (modulo (- n-1 22) m) (/\
    \ m 2))\n        (+ (modulo (- n-1 23) m) (/ m 2))\n        (+ (modulo (- n-1\
    \ 24) m) (/ m 2))\n        (+ (modulo (- n-1 25) m) (/ m 2", "  (let ((n-1 (modulo\
    \ n m)))\n    (if (< n-1 0)\n      (-1)\n      (let ((m-1 (modulo m n)))\n   \
    \     (let ((n-m (modulo n m)))\n          (let ((n-m-1 (modulo m n-1)))\n   \
    \         (let ((n-m-1-1 (modulo m n-1-1)))\n              (let ((n-m-1-1-1 (modulo\
    \ m n-1-1-1)))\n                (let ((n-m-1-1-1-1 (modulo m n-1-1-1-1)))\n  \
    \                (let ((n-m-1-1-1-1-1 (modulo m n-1-1-1-1-1)))\n             \
    \       (let ((n-m-1-1-1-1-1-1 (modulo m n-1-1-1-1-1-1)))\n                  \
    \    (let ((n-m-1-1-1-1-1-1-1 (modulo m n-1-1-1-1-1-1-1)))\n                 \
    \       (let ((n-m-1-1-1-1-1-1-1-1 (modulo m n-1-1-1-1-1-1-1-1)))\n          \
    \                (let ((n-m-1-1-1-1-1-1-1-1-1 (modulo m n-1-1-1-1-1-1-1-1-1)))\n\
    \                            (let ((n-m-1-1-1-1-1-1-1-1-1-1 (modulo m n-1-1-1-1-1-1-1-1-1-1)))\n\
    \                              (let ((n-m-1-1-1-1-1-1-1-1-1-1-1 (modulo m n-1-1-1-1-1-1-1-1-1-1-1)))\n\
    \                                (let ((n-m-1-1-1-1-1-1-1-1-1-1-1-1 (modulo m\
    \ n-", "  (let ((n_ (floor n)))\n    (let ((m_ (floor m)))\n      (if (< n m)\n\
    \        (-1)\n        (let ((avg (round (/ (n - n_) (m - m_))))\n           \
    \   (bin avg))\n          (string->number bin))))))\n", "  (let ((n-1 (sub1 n))\n\
    \        (m-1 (sub1 m)))\n    (cond\n      ((>= n m) -1)\n      ((< n m)\n   \
    \     (let ((n-2 (sub1 n-1))\n              (m-2 (sub1 m-1)))\n          (let\
    \ ((n-3 (sub1 n-2))\n                (m-3 (sub1 m-2)))\n            (let ((n-4\
    \ (sub1 n-3))\n                  (m-4 (sub1 m-3)))\n              (let ((n-5 (sub1\
    \ n-4))\n                    (m-5 (sub1 m-4)))\n                (let ((n-6 (sub1\
    \ n-5))\n                      (m-6 (sub1 m-5)))\n                  (let ((n-7\
    \ (sub1 n-6))\n                        (m-7 (sub1 m-6)))\n                   \
    \ (let ((n-8 (sub1 n-7))\n                          (m-8 (sub1 m-7)))\n      \
    \                (let ((n-9 (sub1 n-8))\n                            (m-9 (sub1\
    \ m-8)))\n                        (let ((n-10 (sub1 n-9))\n                  \
    \            (m-10 (sub1 m-9)))\n                          (let ((n-11 (sub1 n-10))\n\
    \                                (m-11 (sub1 m-10)))\n                       \
    \     (let ((n-12 (sub1 n-11))\n                                  (m-12 (sub1\
    \ m-11)))\n                              (let ((n-13 (sub1 n-12))\n          \
    \                           (m-13 (sub1 m-12)))\n                            \
    \    (let ((n-14 (sub1 n-13))\n                                      (m-14 (sub1\
    \ m-13)))\n                                  (let ((n-15 (sub1 n-14))\n      \
    \                                  (m-15 (sub1 m-14)))\n                     \
    \               (let ((n-16 (sub1 n-15))\n                                   \
    \       (m-16 (sub1 m-15)))\n                                      (let ((n-17\
    \ (sub1 n-16))\n                                            (m-17 (sub1 m", " \
    \ (let ((n-1 (modulo n m)))\n    (if (< n m)\n      (-1)\n      (let ((n-2 (modulo\
    \ n n-1)))\n        (let ((n-3 (modulo n n-2)))\n          (let ((n-4 (modulo\
    \ n n-3)))\n            (let ((n-5 (modulo n n-4)))\n              (let ((n-6\
    \ (modulo n n-5)))\n                (let ((n-7 (modulo n n-6)))\n            \
    \      (let ((n-8 (modulo n n-7)))\n                    (let ((n-9 (modulo n n-8)))\n\
    \                      (let ((n-10 (modulo n n-9)))\n                        (let\
    \ ((n-11 (modulo n n-10)))\n                          (let ((n-12 (modulo n n-11)))\n\
    \                            (let ((n-13 (modulo n n-12)))\n                 \
    \             (let ((n-14 (modulo n n-13)))\n                                (let\
    \ ((n-15 (modulo n n-14)))\n                                  (let ((n-16 (modulo\
    \ n n-15)))\n                                    (let ((n-17 (modulo n n-16)))\n\
    \                                      (let ((n-18 (modulo n n-17)))\n       \
    \                                 (let ((n-19 (modulo n n-18)))\n            \
    \                              (let ((n-20 (modulo n n-19)))\n               \
    \                             (let ((n-21 (modulo n n-20)))\n                \
    \                              (let ((n-22 (modulo n n-21)))\n               \
    \                                 (let ((n-23 (modulo n n-22)))\n            \
    \                                      (let ((n-24 (modulo n n-23)))\n       \
    \                                             (let ((n-25 (modulo n n-24)))\n\
    \                                                      (let ((n-26 (modulo n n-25)))\n\
    \                                                        (let ((n-27 (modulo n\
    \ n-26)))\n                                                          (let ((n-28\
    \ (modulo n n-27)))\n                                  ", "  (cond\n    [(< n\
    \ m) -1]\n    [(= n m) (round (/ (n m) 2))]\n    [else (round (/ (n m) 2))]))\n",
  "  (let ((n_ (floor n)))\n    (let ((m_ (floor m)))\n      (if (<= n m)\n      \
    \  (let ((avg (round (/ (n - n_) (m - m_))))\n              (bin avg))\n     \
    \     (bin \"0b\" avg))\n        (let ((avg (round (/ (n - n_) (m - m_))))\n \
    \             (bin avg))\n          (bin \"0b\" avg)))\n      (if (< n m)\n  \
    \      (let ((avg (round (/ (n - n_) (m - m_))))\n              (bin avg))\n \
    \         (bin \"0b\" avg)))))\n)\n", "  (let ((n_int n)\n        (m_int m))\n\
    \    (if (< n m)\n      (-1)\n      (let ((n_rem n_int)\n            (m_rem m_int))\n\
    \        (let ((n_div m_int)\n              (m_div n_int))\n          (+ (round\
    \ (/ n_div m_int)) n_rem)\n          )))\n  ))\n", "  (let ((n_ (floor n)))\n\
    \    (let ((m_ (floor m)))\n      (let ((n_m_ (mul n_ m_)))\n        (let ((n_m_n_\
    \ (mul n_m_ n_)))\n          (let ((n_m_n_m_ (mul n_m_ n_m_)))\n            (let\
    \ ((n_m_n_m_n_ (mul n_m_ n_m_n_)))\n              (let ((n_m_n_m_n_m_ (mul n_m_\
    \ n_m_n_m_)))\n                (let ((n_m_n_m_n_m_n_ (mul n_m_ n_m_n_m_n_)))\n\
    \                  (let ((n_m_n_m_n_m_n_m_ (mul n_m_ n_m_n_m_n_m_)))\n       \
    \             (let ((n_m_n_m_n_m_n_m_n_ (mul n_m_ n_m_n_m_n_m_n_)))\n        \
    \              (let ((n_m_n_m_n_m_n_m_n_m_ (mul n_m_ n_m_n_m_n_m_n_m_)))\n   \
    \                     (let ((n_m_n_m_n_m_n_m_n_m_n_ (mul n_m_ n_m_n_m_n_m_n_m_n_)))\n\
    \                          (let ((n_m_n_m_n_m_n_m_n_m_n_m_ (mul n_m_ n_m_n_m_n_m_n_m_n_m_)))\n\
    \                            (let ((n_m_n_m_n_m_n_m_n_m_n_m_n_ (mul n_m_ n_m_n_m_n_m_n_m_n_m_n_)))\n\
    \                              (let ((n_m_n_m_n_m_n_m_n_", "  (let ((n (floor\
    \ n)))\n    (let ((m (floor m)))\n      (if (< n m)\n        (-1)\n        (let\
    \ ((avg (round (/ (n - m) n) 2)))\n          (let ((bin (binavg (n - m) avg)))\n\
    \            (let ((bin2 (binavg (m - n) avg)))\n              (let ((bin3 (binavg\
    \ (m - n) avg)))\n                (let ((bin4 (binavg (m - n) avg)))\n       \
    \           (let ((bin5 (binavg (m - n) avg)))\n                    (let ((bin6\
    \ (binavg (m - n) avg)))\n                      (let ((bin7 (binavg (m - n) avg)))\n\
    \                        (let ((bin8 (binavg (m - n) avg)))\n                \
    \          (let ((bin9 (binavg (m - n) avg)))\n                            (let\
    \ ((bin10 (binavg (m - n) avg)))\n                              (let ((bin11 (binavg\
    \ (m - n) avg)))\n                                (let ((bin12 (binavg (m - n)\
    \ avg)))\n                                  (let ((bin13 (binavg (m - n) avg)))\n\
    \                                    (let ((bin14 (binavg (m - n) avg)))\n   \
    \                                   (let ((bin15 (binavg (m - n) avg))))\n   \
    \                                   (let ((bin16 (binavg (m - n) avg))))\n   \
    \                                   (let ((bin17 (binavg (m - n) avg))))\n   \
    \                                   (let ((bin18 (binavg (m - n) avg))))\n   \
    \                                   (let ((bin19 (binavg (m - n) avg))))\n   \
    \                                   (let ((bin20 (binavg (m - n) avg))))\n   \
    \                                   (let ((bin21 (binavg (m - n) avg))))\n   \
    \                                   (let ((bin22 (binavg (m - n) avg))))\n   \
    \                                   (let ((bin23 (binavg (m - n) avg))))\n   \
    \                                   (let ((bin24 (binavg (m -", "  (let ((n-1\
    \ (modulo n m)))\n    (if (< n-1 0)\n      (-1)\n      (let ((n-2 (modulo n-1\
    \ m)))\n        (let ((n-3 (modulo n-2 m)))\n          (let ((n-4 (modulo n-3\
    \ m)))\n            (let ((n-5 (modulo n-4 m)))\n              (let ((n-6 (modulo\
    \ n-5 m)))\n                (let ((n-7 (modulo n-6 m)))\n                  (let\
    \ ((n-8 (modulo n-7 m)))\n                    (let ((n-9 (modulo n-8 m)))\n  \
    \                    (let ((n-10 (modulo n-9 m)))\n                        (let\
    \ ((n-11 (modulo n-10 m)))\n                          (let ((n-12 (modulo n-11\
    \ m)))\n                            (let ((n-13 (modulo n-12 m)))\n          \
    \                    (let ((n-14 (modulo n-13 m)))\n                         \
    \       (let ((n-15 (modulo n-14 m)))\n                                  (let\
    \ ((n-16 (modulo n-15 m)))\n                                    (let ((n-17 (modulo\
    \ n-16 m)))\n                                      (let ((n-18 (modulo n-17 m)))\n\
    \                                        (let ((n-19 (modulo n-18 m)))\n     \
    \                                     (let ((n-20 (modulo n-19 m)))\n        \
    \                                    (let ((n-21 (modulo n-20 m)))\n         \
    \                                     (let ((n-22 (modulo n-21 m)))\n        \
    \                                        (let ((n-23 (modulo n-22 m)))\n     \
    \                                             (let ((n-24 (modulo n-23 m)))\n\
    \                                                    (let ((n-25 (modulo n-24\
    \ m)))\n                                                      (let ((n-26 (modulo\
    \ n-25 m)))\n                                                        (let ((n-27\
    \ (modulo n-26 m)))\n                                                        \
    \  (let ((n-28 (modulo n-27 m)))\n                                ", "  (let ((n-1\
    \ (modulo n m)))\n    (if (< n-1 0)\n      (-1)\n      (let ((n-2 (modulo n-1\
    \ m)))\n        (let ((n-3 (modulo n-2 m)))\n          (let ((n-4 (modulo n-3\
    \ m)))\n            (let ((n-5 (modulo n-4 m)))\n              (let ((n-6 (modulo\
    \ n-5 m)))\n                (let ((n-7 (modulo n-6 m)))\n                  (let\
    \ ((n-8 (modulo n-7 m)))\n                    (let ((n-9 (modulo n-8 m)))\n  \
    \                    (let ((n-10 (modulo n-9 m)))\n                        (let\
    \ ((n-11 (modulo n-10 m)))\n                          (let ((n-12 (modulo n-11\
    \ m)))\n                            (let ((n-13 (modulo n-12 m)))\n          \
    \                    (let ((n-14 (modulo n-13 m)))\n                         \
    \       (let ((n-15 (modulo n-14 m)))\n                                  (let\
    \ ((n-16 (modulo n-15 m)))\n                                    (let ((n-17 (modulo\
    \ n-16 m)))\n                                      (let ((n-18 (modulo n-17 m)))\n\
    \                                        (let ((n-19 (modulo n-18 m)))\n     \
    \                                     (let ((n-20 (modulo n-19 m)))\n        \
    \                                    (let ((n-21 (modulo n-20 m)))\n         \
    \                                     (let ((n-22 (modulo n-21 m)))\n        \
    \                                        (let ((n-23 (modulo n-22 m)))\n     \
    \                                             (let ((n-24 (modulo n-23 m)))\n\
    \                                                    (let ((n-25 (modulo n-24\
    \ m)))\n                                                      (let ((n-26 (modulo\
    \ n-25 m)))\n                                                        (let ((n-27\
    \ (modulo n-26 m)))\n                                                        \
    \  (let ((n-28 (modulo n-27 m)))\n                                ", "  (let ((n_\
    \ (floor n)))\n    (let ((m_ (floor m)))\n      (if (< n m)\n        (let ((avg\
    \ (round (/ (n - n_) (m - m_))))\n              (if (odd? avg)\n             \
    \   (+ (avg - 1) 1)\n                avg))\n          (if (odd? avg)\n       \
    \     (- avg 1)\n            avg)))\n      (-1)))\n", "  (let ((n-1 (sub1 n))\n\
    \        (m-1 (sub1 m)))\n    (if (>= n m)\n      (-1)\n      (+ (/ n m) (/ n\
    \ m)))))\n", "  (let ((n-1 (sub1 n))\n        (m-1 (sub1 m)))\n    (if (< n m)\n\
    \      (-1)\n      (let ((n-2 (sub1 n-1))\n            (m-2 (sub1 m-1)))\n   \
    \     (let ((n-3 (sub1 n-2))\n              (m-3 (sub1 m-2)))\n          (let\
    \ ((n-4 (sub1 n-3))\n                (m-4 (sub1 m-3)))\n            (let ((n-5\
    \ (sub1 n-4))\n                  (m-5 (sub1 m-4)))\n              (let ((n-6 (sub1\
    \ n-5))\n                    (m-6 (sub1 m-5)))\n                (let ((n-7 (sub1\
    \ n-6))\n                      (m-7 (sub1 m-6)))\n                  (let ((n-8\
    \ (sub1 n-7))\n                        (m-8 (sub1 m-7)))\n                   \
    \ (let ((n-9 (sub1 n-8))\n                          (m-9 (sub1 m-8)))\n      \
    \                (let ((n-10 (sub1 n-9))\n                            (m-10 (sub1\
    \ m-9)))\n                        (let ((n-11 (sub1 n-10))\n                 \
    \             (m-11 (sub1 m-10)))\n                          (let ((n-12 (sub1\
    \ n-11))\n                                (m-12 (sub1 m-11)))\n              \
    \              (let ((n-13 (sub1 n-12))\n                                  (m-13\
    \ (sub1 m-12)))\n                              (let ((n-14 (sub1 n-13))\n    \
    \                                 (m-14 (sub1 m-13)))\n                      \
    \          (let ((n-15 (sub1 n-14))\n                                      (m-15\
    \ (sub1 m-14)))\n                                  (let ((n-16 (sub1 n-15))\n\
    \                                        (m-16 (sub1 m-15)))\n               \
    \                     (let ((n-17 (sub1 n-16))\n                             \
    \             (m-17 (sub1 m-16)))\n                                      (let\
    \ ((n-18 (", "  (let ((n-1 (modulo n m)))\n    (if (< n-1 0)\n      (-1)\n   \
    \   (let ((n-2 (modulo n-1 m)))\n        (let ((n-3 (modulo n-2 m)))\n       \
    \   (let ((n-4 (modulo n-3 m)))\n            (let ((n-5 (modulo n-4 m)))\n   \
    \           (let ((n-6 (modulo n-5 m)))\n                (let ((n-7 (modulo n-6\
    \ m)))\n                  (let ((n-8 (modulo n-7 m)))\n                    (let\
    \ ((n-9 (modulo n-8 m)))\n                      (let ((n-10 (modulo n-9 m)))\n\
    \                        (let ((n-11 (modulo n-10 m)))\n                     \
    \     (let ((n-12 (modulo n-11 m)))\n                            (let ((n-13 (modulo\
    \ n-12 m)))\n                              (let ((n-14 (modulo n-13 m)))\n   \
    \                             (let ((n-15 (modulo n-14 m)))\n                \
    \                  (let ((n-16 (modulo n-15 m)))\n                           \
    \         (let ((n-17 (modulo n-16 m)))\n                                    \
    \  (let ((n-18 (modulo n-17 m)))\n                                        (let\
    \ ((n-19 (modulo n-18 m)))\n                                          (let ((n-20\
    \ (modulo n-19 m)))\n                                            (let ((n-21 (modulo\
    \ n-20 m)))\n                                              (let ((n-22 (modulo\
    \ n-21 m)))\n                                                (let ((n-23 (modulo\
    \ n-22 m)))\n                                                  (let ((n-24 (modulo\
    \ n-23 m)))\n                                                    (let ((n-25 (modulo\
    \ n-24 m)))\n                                                      (let ((n-26\
    \ (modulo n-25 m)))\n                                                        (let\
    \ ((n-27 (modulo n-26 m)))\n                                                 \
    \         (let ((n-28 (modulo n-27 m)))\n                                ", " \
    \ (let ((n (floor n)))\n    (let ((m (floor m)))\n      (if (<= n m)\n       \
    \ (let ((n (floor n)))\n          (let ((m (floor m)))\n            (if (<= n\
    \ m)\n              (let ((n (floor n)))\n                (let ((m (floor m)))\n\
    \                  (if (<= n m)\n                    (let ((n (floor n)))\n  \
    \                    (let ((m (floor m)))\n                        (if (<= n m)\n\
    \                          (let ((n (floor n)))\n                            (let\
    \ ((m (floor m)))\n                              (if (<= n m)\n              \
    \                  (let ((n (floor n)))\n                                  (let\
    \ ((m (floor m)))\n                                    (if (<= n m)\n        \
    \                              (let ((n (floor n)))\n                        \
    \                (let ((m (floor m)))\n                                      \
    \    (if (<= n m)\n                                            (let ((n (floor\
    \ n)))\n                                              (let ((m (floor m)))\n \
    \                                               (if (<= n m)\n               \
    \                                   (let ((n (floor n)))\n                   \
    \                                 (let ((m (floor m)))\n                     \
    \                                 (if (<= n m)\n                             \
    \                           (let ((n (floor n)))\n                           \
    \                               (let ((m (floor m)))\n                       \
    \                                     (if (<= n m)\n                         \
    \                                     (let ((n (floor n)))\n                 \
    \                                               (let ((m (floor m)))\n       \
    \                                                           (if (<= n m)\n   \
    \                                                                 (let ((n (floor\
    \ n)))\n                                                                     \
    \ (let ((m (floor m)))\n                                                     \
    \                   (if (<= n m)\n                                           \
    \                               (let ((n (floor n)))\n                       \
    \                                                     (let ((m (floor m)))\n \
    \                                                                            \
    \ (if (<= n m)\n                                                             \
    \                   (let ((n (floor n)))\n                                   \
    \                                               (let ((m (floor m)))\n       \
    \                                                                            \
    \ (if (<= n m)\n                                                             \
    \                         (let ((", "  (let ((n-1 (modulo n m)))\n    (if (< n-1\
    \ 0)\n      (-1)\n      (let ((n-2 (modulo n n-1)))\n        (let ((m-1 (modulo\
    \ m n-1)))\n          (let ((m-2 (modulo m m-1)))\n            (let ((n-3 (modulo\
    \ n n-2)))\n              (let ((m-3 (modulo m m-2)))\n                (let ((n-4\
    \ (modulo n n-3)))\n                  (let ((m-4 (modulo m m-3)))\n          \
    \          (let ((n-5 (modulo n n-4)))\n                      (let ((m-5 (modulo\
    \ m m-4)))\n                        (let ((n-6 (modulo n n-5)))\n            \
    \              (let ((m-6 (modulo m m-5)))\n                            (let ((n-7\
    \ (modulo n n-6)))\n                              (let ((m-7 (modulo m m-6)))\n\
    \                                (let ((n-8 (modulo n n-7)))\n               \
    \                   (let ((m-8 (modulo m m-7)))\n                            \
    \        (let ((n-9 (modulo n n-8)))\n                                      (let\
    \ ((m-9 (modulo m m-8)))\n                                        (let ((n-10\
    \ (modulo n n-9)))\n                                          (let ((m-10 (modulo\
    \ m m-9)))\n                                            (let ((n-11 (modulo n\
    \ n-10)))\n                                              (let ((m-11 (modulo m\
    \ m-10)))\n                                                (let ((n-12 (modulo\
    \ n n-11)))\n                                                  (let ((m-12 (modulo\
    \ m m-11)))\n                                                    (let ((n-13 (modulo\
    \ n n-12)))\n                                                      (let ((m-13\
    \ (modulo m m-12)))\n                                                        (let\
    \ ((n-14 (modulo n n-13)))\n                                                 \
    \         (let ((m-14 (modulo m m-13)))\n                                ", " \
    \ (let ((n_ (floor n)))\n    (let ((m_ (floor m)))\n      (if (eq? n m)\n    \
    \    (let ((n_ (floor n_)))\n          (let ((m_ (floor m_)))\n            (if\
    \ (eq? n_ m_)\n              (let ((n_ (floor n_)))\n                (let ((m_\
    \ (floor m_)))\n                  (if (eq? n_ m_)\n                    (let ((n_\
    \ (floor n_)))\n                      (let ((m_ (floor m_)))\n               \
    \         (if (eq? n_ m_)\n                          (let ((n_ (floor n_)))\n\
    \                            (let ((m_ (floor m_)))\n                        \
    \      (if (eq? n_ m_)\n                                (let ((n_ (floor n_)))\n\
    \                                  (let ((m_ (floor m_)))\n                  \
    \                  (if (eq? n_ m_)\n                                      (let\
    \ ((n_ (floor n_)))\n                                        (let ((m_ (floor\
    \ m_)))\n                                          (if (eq? n_ m_)\n         \
    \                                   (let ((n_ (floor n_)))\n                 \
    \                             (let ((m_ (floor m_)))\n                       \
    \                         (if (eq? n_ m_)\n                                  \
    \                (let ((n_ (floor n_)))\n                                    \
    \                (let ((m_ (floor m_)))\n                                    \
    \                  (if (eq? n_ m_)\n                                         \
    \               (let ((n_ (floor n_)))\n                                     \
    \                     (let ((m_ (floor m_)))\n                               \
    \                             (if (eq? n_ m_)\n                              \
    \                                (let ((n_ (floor n_)))\n                    \
    \                                            (let ((m_ (floor m_)))\n        \
    \                                                          (if (eq? n_ m_)\n \
    \                                                                   (let ((n_\
    \ (floor n_)))\n                                                             \
    \         (let ((m_ (floor m_)))\n                                           \
    \                             (if (eq? n_ m_)\n                              \
    \                                            (let ((n", "  (let ((n-1 (modulo\
    \ n m)))\n    (if (< n 0)\n      (-1)\n      (if (< n-1 0)\n        (/ (modulo\
    \ (add n-1 1) m) 2)\n        (/ (modulo n m) 2))))\n)\n", "  (cond\n    ((< n\
    \ m) -1)\n    ((= n m)\n      (let ((n (floor n)))\n        (let ((m (floor m)))\n\
    \          (let ((avg (round (/ (n - m) (m - n)))))\n            (let ((bin (binavg\
    \ (avg)))\n                  (bin-len (length bin)))\n              (let ((bin-len-1\
    \ (sub1 bin-len)))\n                (let ((bin-len-2 (sub1 bin-len-1)))\n    \
    \              (let ((bin-len-3 (sub1 bin-len-2)))\n                    (let ((bin-len-4\
    \ (sub1 bin-len-3)))\n                      (let ((bin-len-5 (sub1 bin-len-4)))\n\
    \                        (let ((bin-len-6 (sub1 bin-len-5)))\n               \
    \           (let ((bin-len-7 (sub1 bin-len-6)))\n                            (let\
    \ ((bin-len-8 (sub1 bin-len-7)))\n                              (let ((bin-len-9\
    \ (sub1 bin-len-8)))\n                                (let ((bin-len-10 (sub1\
    \ bin-len-9)))\n                                  (let ((bin-len-11 (sub1 bin-len-10)))\n\
    \                                    (let ((bin-len-12 (sub1 bin-len-11)))\n \
    \                                     (let ((bin-len-13 (sub1 bin-len-12)))\n\
    \                                        (let ((bin-len-14 (sub1 bin-len-13)))\n\
    \                                          (let ((bin-len-15 (sub1 bin-len-14)))\n\
    \                                            (let ((bin-len-16 (sub1 bin-len-15)))\n\
    \                                              (let ((bin-len-17 (sub1 bin-len-16)))\n\
    \                                                (let ((bin-len-18 (sub1 bin-len-17)))\n\
    \                                                  (let ((bin-len-19 (sub1 bin-len-18)))\n\
    \                                                    (let ((bin-len-20 (sub1 bin-len-19)))\n\
    \                                                      (let ((bin-len-21 (sub1\
    \ bin-", "  (let ((n_ (floor n)))\n    (let ((m_ (floor m)))\n      (if (<= n\
    \ m)\n        (let ((avg (round (/ (n - n_) (m - m_))))\n              (bin avg))\n\
    \          (if (< avg 1)\n            (-1)\n            bin))\n        avg)))\n\
    )\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
