name: HumanEval_70_strange_sort_list
language: rkt
prompt: "#lang racket\n\n;; Given list of integers, return list in strange order.\n\
  ;; Strange sorting, is when you start with the minimum value,\n;; then maximum of\
  \ the remaining integers, then minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list\
  \ (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n\
  ;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )\n(define (strange_sort_list\
  \ lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate strange_sort_list))\n\
  \    (check-equal? (candidate (list 1 2 3 4)) (list 1 4 2 3))\n    (check-equal?\
  \ (candidate (list 5 6 7 8 9)) (list 5 9 6 8 7))\n    (check-equal? (candidate (list\
  \ 1 2 3 4 5)) (list 1 5 2 4 3))\n    (check-equal? (candidate (list 5 6 7 8 9 1))\
  \ (list 1 9 5 8 6 7))\n    (check-equal? (candidate (list 5 5 5 5)) (list 5 5 5\
  \ 5))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
  \ (list 1 2 3 4 5 6 7 8)) (list 1 8 2 7 3 6 4 5))\n    (check-equal? (candidate\
  \ (list 0 2 2 2 5 5 -5 -5)) (list -5 5 -5 5 0 2 2 2))\n    (check-equal? (candidate\
  \ (list 111111)) (list 111111))\n))\n\n(test-humaneval)"
completions: ["  (if (null? lst)\n    (list)\n    (let ((min (car lst))\n        \
    \  (max (cdr lst)))\n      (let ((lst (cdr lst)))\n        (if (null? lst)\n \
    \         (list min max)\n          (let ((min (car lst))\n                (max\
    \ (cdr lst)))\n            (let ((lst (cdr lst)))\n              (if (null? lst)\n\
    \                (list min max min)\n                (let ((min (car lst))\n \
    \                     (max (cdr lst)))\n                  (let ((lst (cdr lst)))\n\
    \                    (if (null? lst)\n                      (list min max min\
    \ min)\n                      (let ((min (car lst))\n                        \
    \    (max (cdr lst)))\n                        (let ((lst (cdr lst)))\n      \
    \                    (if (null? lst)\n                            (list min max\
    \ min min min)\n                            (let ((min (car lst))\n          \
    \                        (max (cdr lst)))\n                              (let\
    \ ((lst (cdr lst)))\n                                (if (null? lst)\n       \
    \                           (list min max min min min min)\n                 \
    \                 (let ((min (car lst))\n                                    \
    \    (max (cdr lst)))\n                                    (let ((lst (cdr lst)))\n\
    \                                      (if (null? lst)\n                     \
    \                   (list min max min min min min min)\n                     \
    \                   (let ((min (car lst))\n                                  \
    \            (max (cdr lst)))\n                                          (let\
    \ ((lst (cdr lst)))\n                                            (if (null? lst)\n\
    \                                              (list min max min min min min min\
    \ min)\n                                              (let ((min (car lst))\n\
    \                                                   (max (cdr lst)))\n       \
    \                                         (let ((lst (cdr lst)))\n           \
    \                                       (if (null? lst)\n                    \
    \                                (list min max min min min min min min min)\n\
    \                                                    (let ((min (car lst", " \
    \ (if (null? lst)\n    lst\n    (let ((min (car lst))\n          (max (cdr lst)))\n\
    \      (let ((lst (cdr lst)))\n        (if (null? lst)\n          (list min max)\n\
    \          (let ((lst (cdr lst)))\n            (if (null? lst)\n             \
    \ (list min max min)\n              (let ((lst (cdr lst)))\n                (if\
    \ (null? lst)\n                  (list min max min min)\n                  (let\
    \ ((lst (cdr lst)))\n                    (if (null? lst)\n                   \
    \   (list min max min min min)\n                      (let ((lst (cdr lst)))\n\
    \                        (if (null? lst)\n                          (list min\
    \ max min min min min)\n                          (error \"strange_sort_list:\
    \ too many elements\")\n                          (let ((lst (cdr lst)))\n   \
    \                         (if (null? lst)\n                              (list\
    \ min max min min min min min min)\n                              (error \"strange_sort_list:\
    \ too many elements\")\n
  "  (if (null? lst)\n    lst\n    (let ((min (car lst))\n          (max (cdr lst)))\n\
    \      (let ((head (cons min max)))\n        (let ((tail (cdr head)))\n      \
    \    (strange_sort_list tail)))))))\n\n;; Given list of integers, return list\
    \ in strange order.\n;; Strange sorting, is when you start with the minimum value,\n\
    ;; then maximum of the remaining integers, then minimum and so on.\n;; Examples:\n\
    ;; >>> (strange_sort_list (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list\
    \ (list 5 5 5 5))\n;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list\
    \ )", "  (if (null? lst)\n    lst\n    (let ((min (car lst))\n          (max (cdr\
    \ lst)))\n      (let ((lst (cdr lst)))\n        (if (null? lst)\n          (list\
    \ min max)\n          (let ((lst (cdr lst)))\n            (if (null? lst)\n  \
    \            (list min max min)\n              (let ((lst (cdr lst)))\n      \
    \          (if (null? lst)\n                  (list min max min min)\n       \
    \           (let ((lst (cdr lst)))\n                    (if (null? lst)\n    \
    \                  (list min max min min min)\n                      (let ((lst\
    \ (cdr lst)))\n                        (if (null? lst)\n                     \
    \     (list min max min min min min)\n                          (let ((lst (cdr\
    \ lst)))\n                            (if (null? lst)\n                      \
    \        (list min max min min min min min)\n                              (let\
    \ ((lst (cdr lst)))\n                                (if (null? lst)\n       \
    \                           (list min max min min min min min min)\n         \
    \                         (let ((lst (cdr lst)))\n                           \
    \         (if (null? lst)\n                                      (list min max\
    \ min min min min min min min)\n                                      (let ((lst\
    \ (cdr lst)))\n                                        (if (null? lst)\n     \
    \                                     (list min max min min min min min min min\
    \ min)\n                                          (let ((lst (cdr lst)))\n   \
    \                                         (if (null? lst)\n                  \
    \                            (list min max min min min min min min min min min)\n\
    \                                              (let ((lst (cdr lst)))\n      \
    \                                          (if (null? lst)\n                 \
    \                                 (list min max min min min min min min min min\
    \ min min)\n                                                  (let ((lst (cdr\
    \ lst)))\n                                                    (if (null? lst)\n\
    \                                                      (list min max min min min\
    \ min min min min min min min min)\n                                ", "  (if\
    \ (null? lst)\n    lst\n    (let ((head (car lst))\n          (tail (cdr lst)))\n\
    \      (let ((min (car head))\n            (max (car tail)))\n        (let ((min\
    \ (car min))\n              (max (car max)))\n          (let ((min (car min))\n\
    \                (max (car max)))\n            (let ((min (car min))\n       \
    \           (max (car max)))\n              (let ((min (car min))\n          \
    \          (max (car max)))\n                (let ((min (car min))\n         \
    \             (max (car max)))\n                  (let ((min (car min))\n    \
    \                    (max (car max)))\n                    (let ((min (car min))\n\
    \                          (max (car max)))\n                      (let ((min\
    \ (car min))\n                            (max (car max)))\n                 \
    \       (let ((min (car min))\n                              (max (car max)))\n\
    \                          (let ((min (car min))\n                           \
    \     (max (car max)))\n                            (let ((min (car min))\n  \
    \                                (max (car max)))\n                          \
    \    (let ((min (car min))\n                                    (max (car max)))\n\
    \                                (let ((min (car min))\n                     \
    \                 (max (car max)))\n                                  (let ((min\
    \ (car min))\n                                        (max (car max)))\n     \
    \                               (let ((min (car min))\n                      \
    \                    (max (car max)))\n                                      (let\
    \ ((min (car min))\n                                            (max (car max)))\n\
    \                                        (let ((min (car min))\n             \
    \                                 (max (car max)))\n                         \
    \                 (let ((min (car min))\n                                    \
    \            (max (car max)))\n                                            (let\
    \ ((min (car min))\n                                                  (max (car\
    \ max)))\n                                              (let ((min (car min))\n\
    \                                                   (max (car max)))\n       \
    \                                         (let ((min (car min))\n            \
    \                                          (max (car max)))\n                \
    \                                  (let ((min (car min))\n                   \
    \                                      (max (car", "  (if (null? lst)\n    lst\n\
    \    (let ((min (car lst))\n          (max (cdr lst)))\n      (let ((curr (car\
    \ lst)))\n        (if (null? curr)\n          (list min max)\n          (let ((next\
    \ (cdr curr)))\n            (list min (car curr) (strange_sort_list next) max)))))\n\
    \  ))\n\n;; Given list of integers, return list in strange order.\n;; Strange\
    \ sorting, is when you start with the minimum value,\n;; then maximum of the remaining\
    \ integers, then minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list (list\
    \ 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n;;\
    \ (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )", "  (let ((result\
    \ (list)))\n    (if (empty? lst)\n      result\n    (let ((min (car lst)))\n \
    \     (let ((max (cdr lst)))\n        (let ((curr (car lst)))\n          (if (null?\
    \ max)\n            (list min curr)\n          (let ((next (cdr lst)))\n     \
    \       (list min (if (null? next)\n                          (list curr max)\n\
    \                          (strange_sort_list (cdr next)))))))))\n    (strange_sort_list\
    \ (cdr lst))))\n\n;; Given list of integers, return list in strange order.\n;;\
    \ Strange sorting, is when you start with the minimum value,\n;; then maximum\
    \ of the remaining integers, then minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list\
    \ (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n\
    ;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )", "  (if (empty?\
    \ lst)\n    lst\n    (let ((min (car lst))\n          (max (cdr lst)))\n     \
    \ (let ((lst2 (cdr lst)))\n        (if (empty? lst2)\n          (list min max)\n\
    \          (let ((lst3 (cdr lst2)))\n            (if (empty? lst3)\n         \
    \     (list min max min)\n              (let ((lst4 (cdr lst3)))\n           \
    \     (if (empty? lst4)\n                  (list min max min min)\n          \
    \        (let ((lst5 (cdr lst4)))\n                    (if (empty? lst5)\n   \
    \                   (list min max min min min)\n                      (let ((lst6\
    \ (cdr lst5)))\n                        (if (empty? lst6)\n                  \
    \        (list min max min min min min)\n                          (let ((lst7\
    \ (cdr lst6)))\n                            (if (empty? lst7)\n              \
    \                (list min max min min min min min)\n                        \
    \      (let ((lst8 (cdr lst7)))\n                                (if (empty? lst8)\n\
    \                                  (list min max min min min min min min)\n  \
    \                                (let ((lst9 (cdr lst8)))\n                  \
    \                  (if (empty? lst9)\n                                      (list\
    \ min max min min min min min min min)\n                                     \
    \ (let ((lst10 (cdr lst9)))\n                                        (if (empty?\
    \ lst10)\n                                          (list min max min min min\
    \ min min min min min)\n                                          (let ((lst11\
    \ (cdr lst10)))\n                                            (if (empty? lst11)\n\
    \                                              (list min max min min min min min\
    \ min min min min)\n                                              (let ((lst12\
    \ (cdr lst11)))\n                                                (if (empty? lst12)\n\
    \                                                  (list min max min min min min\
    \ min min min min min min)\n                                                 \
    \ (let ((lst13 (cdr lst12)))\n                                               \
    \     (", "  (if (null? lst)\n    lst\n    (let ((min (car lst))\n          (max\
    \ (cdr lst)))\n      (let ((lst (cdr lst)))\n        (if (null? lst)\n       \
    \   lst\n          (let ((lst (cdr lst)))\n            (if (null? lst)\n     \
    \         lst\n              (let ((lst (cdr lst)))\n                (if (null?\
    \ lst)\n                  lst\n                  (let ((lst (cdr lst)))\n    \
    \                (if (null? lst)\n                      lst\n                \
    \      (let ((lst (cdr lst)))\n                        (if (null? lst)\n     \
    \                     lst\n                          (let ((lst (cdr lst)))\n\
    \                            (if (null? lst)\n                              lst\n\
    \                              (let ((lst (cdr lst)))\n                      \
    \          (if (null? lst)\n                                  lst\n          \
    \                        (let ((lst (cdr lst)))\n                            \
    \        (if (null? lst)\n                                      lst\n        \
    \                              (let ((lst (cdr lst)))\n                      \
    \                  (if (null? lst)\n                                         \
    \ lst\n                                          (let ((lst (cdr lst)))\n    \
    \                                        (if (null? lst)\n                   \
    \                           lst\n                                            \
    \  (let ((lst (cdr lst)))\n                                                (if\
    \ (null? lst)\n                                                  lst\n       \
    \                                           (let ((lst (cdr lst)))\n         \
    \                                           (if (null? lst)\n                \
    \                                      lst\n                                 \
    \                     (let ((lst (cdr lst)))\n                               \
    \                         (if (null? lst)\n                                  \
    \                        lst\n                                               \
    \           (let ((lst (cdr lst)))\n                                         \
    \                   (if (null? lst)\n                                        \
    \                      lst\n                                                 \
    \             (let ((lst (cdr", "  (if (null? lst)\n    lst\n    (let ((min (car\
    \ lst))\n          (max (cdr lst)))\n      (let ((curr (car lst)))\n        (if\
    \ (null? curr)\n          (list min max)\n          (let ((next (cdr curr)))\n\
    \            (if (null? next)\n              (list min max min)\n            \
    \  (let ((next_min (car next)))\n                (let ((next_max (cdr next)))\n\
    \                  (list min max min next_min next_max)))))))))))\n", "  (if (null?\
    \ lst)\n    (list)\n    (let ((min (car lst))\n          (max (cdr lst)))\n  \
    \    (let ((lst2 (cdr lst)))\n        (if (null? lst2)\n          (list min max)\n\
    \          (let ((min2 (car lst2))\n                (max2 (cdr lst2)))\n     \
    \       (let ((lst3 (cdr lst2)))\n              (if (null? lst3)\n           \
    \     (list min2 max2)\n                (let ((min3 (car lst3))\n            \
    \          (max3 (cdr lst3)))\n                  (list min min2 min3 max max2\
    \ max3)))))))))))\n\n;; Given list of integers, return list in sorted order.\n\
    ;; Sorted sorting, is when you start with the minimum value,\n;; then minimum\
    \ of the remaining integers, then minimum and so on.\n;; Examples:\n;; >>> (sorted_sort_list\
    \ (list 1 2 3 4))\n;; (list 1 2 3 4)\n;; >>> (sorted_sort_list (list 5 5 5 5))\n\
    ;; (list 5 5 5 5)\n;; >>> (sorted_sort_list (list ))\n;; (list )", "  (if (null?\
    \ lst)\n    (list)\n    (let ((min (car lst))\n          (rest (cdr lst)))\n \
    \     (if (null? rest)\n        (list min)\n        (let ((max (car rest))\n \
    \             (rest (cdr rest)))\n          (if (null? rest)\n            (list\
    \ min max)\n            (let ((min (car rest))\n                  (rest (cdr rest)))\n\
    \              (if (null? rest)\n                (list min max min)\n        \
    \        (let ((max (car rest))\n                      (rest (cdr rest)))\n  \
    \                (if (null? rest)\n                    (list min max min max)\n\
    \                    (let ((min (car rest))\n                          (rest (cdr\
    \ rest)))\n                      (if (null? rest)\n                        (list\
    \ min max min max min)\n                        (let ((max (car rest))\n     \
    \                         (rest (cdr rest)))\n                          (if (null?\
    \ rest)\n                            (list min max min max min max)\n        \
    \                    (let ((min (car rest))\n                                \
    \  (rest (cdr rest)))\n                              (if (null? rest)\n      \
    \                          (list min max min max min max min max)\n          \
    \                      (list min max min max min max min max))))))))))))))))))))))\n",
  "  (if (null? lst)\n    (list)\n    (let ((min (car lst))\n          (max (cdr lst)))\n\
    \      (let ((lst2 (cdr lst)))\n        (if (null? lst2)\n          (list min\
    \ max)\n          (let ((min2 (car lst2))\n                (max2 (cdr lst2)))\n\
    \            (let ((lst3 (cdr lst2)))\n              (if (null? lst3)\n      \
    \          (list min2 max2)\n                (let ((min3 (car lst3))\n       \
    \               (max3 (cdr lst3)))\n                  (list min min2 min3 max\
    \ max2 max3)))))))))))\n\n;; Given list of integers, return list in sorted order.\n\
    ;; Sorting, is when you start with the minimum value,\n;; then maximum of the\
    \ remaining integers, then minimum and so on.\n;; Examples:\n;; >>> (sort_list\
    \ (list 1 2 3 4))\n;; (list 1 2 3 4)\n;; >>> (sort_list (list 5 5 5 5))\n;; (list\
    \ 5 5 5 5)\n;; >>> (sort_list (list ))\n;; (list )", "  (if (null? lst)\n    (list)\n\
    \    (let ((min (car lst))\n          (max (cdr lst)))\n      (let ((lst (cdr\
    \ lst)))\n        (cons min\n           (if (null? lst)\n             max\n  \
    \           (strange_sort_list (lst))))))))\n\n;; Given list of integers, return\
    \ list in strange order.\n;; Strange sorting, is when you start with the minimum\
    \ value,\n;; then maximum of the remaining integers, then minimum and so on.\n\
    ;; Examples:\n;; >>> (strange_sort_list (list 1 2 3 4))\n;; (list 1 4 2 3)\n;;\
    \ >>> (strange_sort_list (list 5 5 5 5))\n;; (list 5 5 5 5)\n;; >>> (strange_sort_list\
    \ (list ))\n;; (list )", "  (if (null? lst)\n    (list)\n    (let ((head (car\
    \ lst)))\n      (let ((tail (cdr lst)))\n        (if (null? tail)\n          (list\
    \ head)\n          (strange_sort_list (append (list head) tail)))))))\n\n;; Given\
    \ list of integers, return list in strange order.\n;; Strange sorting, is when\
    \ you start with the minimum value,\n;; then maximum of the remaining integers,\
    \ then minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list (list 1 2 3\
    \ 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n;; (list\
    \ 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )", "  (if (null? lst)\n\
    \    (list)\n    (let ((min (car lst))\n          (max (cdr lst)))\n      (let\
    \ ((min_lst (cons min (cdr lst)))\n             (max_lst (cons max (cdr lst))))\n\
    \        (let ((min_lst_lst (cons min_lst (cdr lst)))\n               (max_lst_lst\
    \ (cons max_lst (cdr lst))))\n          (let ((min_lst_lst_lst (cons min_lst_lst\
    \ (cdr lst))))\n            (let ((max_lst_lst_lst (cons max_lst_lst (cdr lst))))\n\
    \              (let ((min_lst_lst_lst_lst (cons min_lst_lst_lst (cdr lst))))\n\
    \                (let ((max_lst_lst_lst_lst (cons max_lst_lst_lst (cdr lst))))\n\
    \                  (let ((min_lst_lst_lst_lst_lst (cons min_lst_lst_lst_lst (cdr\
    \ lst))))\n                    (let ((max_lst_lst_lst_lst_lst (cons max_lst_lst_lst_lst\
    \ (cdr lst))))\n                      (let ((min_lst_lst_lst_lst_lst_lst (cons\
    \ min_lst_lst_lst_lst_lst (cdr lst))))\n                        (let ((max_lst_lst_lst_lst_lst_lst\
    \ (cons max_lst_lst_lst_lst_lst (cdr lst))))\n                          (let ((min_lst_lst_lst_lst_lst_lst_lst\
    \ (cons min_lst_lst_lst_lst_lst_lst (cdr lst))))\n                           \
    \ (let ((max_lst_lst_lst_lst_lst_lst_lst (cons max_", "  (let ((result (list)))\n\
    \    (if (null? lst)\n      result\n    (let ((min (car lst))\n          (max\
    \ (cdr lst)))\n      (let ((i (1)))\n        (while (< i (length lst))\n     \
    \     (let ((next (cdr lst)))\n            (if (null? next)\n              (append\
    \ result min)\n              (append result max)\n              (append result\
    \ min)\n              (append result max))\n            (set! i (i + 1)))\n  \
    \        (set! i (i + 1)))\n        (append result min)\n        (append result\
    \ max))))))\n\n;; Given list of integers, return list in sorted order.\n;; Sorted\
    \ sorting, is when you start with the minimum value,\n;; then minimum of the remaining\
    \ integers, then minimum and so on.\n;; Examples:\n;; >>> (sorted_sort_list (list\
    \ 1 2 3 4))\n;; (list 1 2 3 4)\n;; >>> (sorted_sort_list (list 5 5 5 5))\n;; (list\
    \ 5 5 5 5)\n;; >>> (sorted_sort_list (list ))\n;; (list )", "  (let ((result (list)))\n\
    \    (if (null? lst)\n      result\n    (let ((min (car lst)))\n      (let ((max\
    \ (cdr lst)))\n        (let ((curr (car lst)))\n          (if (null? max)\n  \
    \          (list min curr)\n          (let ((next (cdr lst)))\n            (list\
    \ min (car lst) (if (null? next)\n                                   (list curr\
    \ max)\n                                   (strange_sort_list (cdr lst)))))))))\n\
    \    (strange_sort_list (cdr lst))))\n", "  (if (null? lst)\n    lst\n    (let\
    \ ((head (car lst))\n          (tail (cdr lst)))\n      (let ((min (car head))\n\
    \            (max (car tail)))\n        (let ((min (car min))\n              (max\
    \ (car max)))\n          (let ((min (car min))\n                (max (car max)))\n\
    \            (let ((min (car min))\n                  (max (car max)))\n     \
    \         (let ((min (car min))\n                    (max (car max)))\n      \
    \          (let ((min (car min))\n                      (max (car max)))\n   \
    \               (let ((min (car min))\n                        (max (car max)))\n\
    \                    (let ((min (car min))\n                          (max (car\
    \ max)))\n                      (let ((min (car min))\n                      \
    \      (max (car max)))\n                        (let ((min (car min))\n     \
    \                         (max (car max)))\n                          (let ((min\
    \ (car min))\n                                (max (car max)))\n             \
    \               (let ((min (car min))\n                                  (max\
    \ (car max)))\n                              (let ((min (car min))\n         \
    \                           (max (car max)))\n                               \
    \ (let ((min (car min))\n                                      (max (car max)))\n\
    \                                  (let ((min (car min))\n                   \
    \                     (max (car max)))\n                                    (let\
    \ ((min (car min))\n                                          (max (car max)))\n\
    \                                      (let ((min (car min))\n               \
    \                             (max (car max)))\n                             \
    \           (let ((min (car min))\n                                          \
    \    (max (car max)))\n                                          (let ((min (car\
    \ min))\n                                                (max (car max)))\n  \
    \                                          (let ((min (car min))\n           \
    \                                       (max (car max)))\n                   \
    \                           (let ((min (car min))\n                          \
    \                         (max (car max)))\n                                 \
    \               (let ((min (car min))\n                                      \
    \                (max (car max)))\n                                          \
    \        (let ((min (car min))\n                                             \
    \            (max (car", "  (if (null? lst)\n    lst\n    (let ((min (car lst))\n\
    \          (max (cdr lst)))\n      (let ((lst (cdr lst)))\n        (if (null?\
    \ lst)\n          lst\n          (let ((lst (cdr lst)))\n            (if (null?\
    \ lst)\n              lst\n              (let ((lst (cdr lst)))\n            \
    \    (if (null? lst)\n                  lst\n                  (let ((lst (cdr\
    \ lst)))\n                    (if (null? lst)\n                      lst\n   \
    \                   (let ((lst (cdr lst)))\n                        (if (null?\
    \ lst)\n                          lst\n                          (let ((lst (cdr\
    \ lst)))\n                            (if (null? lst)\n                      \
    \        lst\n                              (let ((lst (cdr lst)))\n         \
    \                       (if (null? lst)\n                                  lst\n\
    \                                  (let ((lst (cdr lst)))\n                  \
    \                  (if (null? lst)\n                                      lst\n\
    \                                      (let ((lst (cdr lst)))\n              \
    \                          (if (null? lst)\n                                 \
    \         lst\n                                          (let ((lst (cdr lst)))\n\
    \                                            (if (null? lst)\n               \
    \                               lst\n                                        \
    \      (let ((lst (cdr lst)))\n                                              \
    \  (if (null? lst)\n                                                  lst\n  \
    \                                                (let ((lst (cdr lst)))\n    \
    \                                                (if (null? lst)\n           \
    \                                           lst\n                            \
    \                          (let ((lst (cdr lst)))\n                          \
    \                              (if (null? lst)\n                             \
    \                             lst\n                                          \
    \                (let ((lst (cdr lst)))\n                                    \
    \                        (if (null? lst)\n                                   \
    \                           lst\n                                            \
    \                  (let ((lst (cdr", "  (if (null? lst)\n    lst\n    (let ((min\
    \ (car lst))\n          (max (cdr lst)))\n      (let ((curr (car lst)))\n    \
    \    (if (null? curr)\n          (list min max)\n          (strange_sort_list\
    \ (cdr lst)))))))\n\n;; Given list of integers, return list of their squares.\n\
    ;; Examples:\n;; >>> (square_list (list 1 2 3 4))\n;; (list 1 4 9 16 25)\n;; >>>\
    \ (square_list (list ))\n;; (list )", "  (let ((result (list)))\n    (if (null?\
    \ lst)\n      result\n      (let ((min (car lst))\n            (max (cdr lst)))\n\
    \        (let ((i (1)))\n          (while (< i (length lst))\n            (let\
    \ ((curr (car lst)))\n              (if (< min (car curr))\n                min\n\
    \                (if (> max (car curr))\n                  max\n             \
    \     (set! max (car curr))\n                  (set! min (car curr))))\n     \
    \           (set! i (i + 1))))\n          (append result min max)))\n    result))\n\
    \n;; Given list of integers, return list sorted in ascending order.\n;; Examples:\n\
    ;; >>> (ascending_sort_list (list 1 2 3 4))\n;; (list 1 2 3 4)\n;; >>> (ascending_sort_list\
    \ (list 5 5 5 5))\n;; (list 5 5 5 5)\n;; >>> (ascending_sort_list (list ))\n;;\
    \ (list )", "  (if (null? lst)\n    lst\n    (let ((min (car lst))\n         \
    \ (max (cdr lst)))\n      (let ((lst (cdr lst)))\n        (cons min (strange_sort_list\
    \ (cdr lst)) max))))\n)\n\n;; Given list of integers, return list in strange order.\n\
    ;; Strange sorting, is when you start with the minimum value,\n;; then maximum\
    \ of the remaining integers, then minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list\
    \ (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n\
    ;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )", "  (if (null?\
    \ lst)\n    (list)\n    (let ((min (car lst))\n          (rest (cdr lst)))\n \
    \     (if (null? rest)\n        (list min)\n        (let ((max (car rest))\n \
    \             (rest (cdr rest)))\n          (if (null? rest)\n            (list\
    \ min max)\n            (let ((min (car rest))\n                  (rest (cdr rest)))\n\
    \              (if (null? rest)\n                (list min max min)\n        \
    \        (let ((max (car rest))\n                      (rest (cdr rest)))\n  \
    \                (if (null? rest)\n                    (list min max min max)\n\
    \                    (let ((min (car rest))\n                          (rest (cdr\
    \ rest)))\n                      (if (null? rest)\n                        (list\
    \ min max min max min)\n                        (let ((max (car rest))\n     \
    \                         (rest (cdr rest)))\n                          (if (null?\
    \ rest)\n                            (list min max min max min max)\n        \
    \                    (list min max min max min max max)))))))))))))))))))\n\n\
    ;; Given list of integers, return list in sorted order.\n;; Sorting, is when you\
    \ start with the minimum value,\n;; then minimum of the remaining integers, then\
    \ minimum and so on.\n;; Examples:\n;; >>> (sorted_sort_list (list 1 2 3 4))\n\
    ;; (list 1 2 3 4)\n;; >>> (sorted_sort_list (list 5 5 5 5))\n;; (list 5 5 5 5)\n\
    ;; >>> (sorted_sort_list (list ))\n;; (list )", "  (if (null? lst)\n    lst\n\
    \    (let ((min (car lst))\n          (rest (cdr lst)))\n      (if (null? rest)\n\
    \        (list min)\n        (strange_sort_list (append (list min) rest))))))\n\
    \n;; Given list of integers, return list in strange order.\n;; Strange sorting,\
    \ is when you start with the minimum value,\n;; then maximum of the remaining\
    \ integers, then minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list (list\
    \ 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n;;\
    \ (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )", "  (if (null?\
    \ lst)\n    lst\n    (let ((min (car lst))\n          (max (cdr lst)))\n     \
    \ (let ((lst (cdr lst)))\n        (if (null? lst)\n          (list min max)\n\
    \          (strange_sort_list (cdr lst))))))))\n\n;; Given list of integers, return\
    \ list in strange order.\n;; Strange sorting, is when you start with the minimum\
    \ value,\n;; then maximum of the remaining integers, then minimum and so on.\n\
    ;; Examples:\n;; >>> (strange_sort_list (list 1 2 3 4))\n;; (list 1 4 2 3)\n;;\
    \ >>> (strange_sort_list (list 5 5 5 5))\n;; (list 5 5 5 5)\n;; >>> (strange_sort_list\
    \ (list ))\n;; (list )", "  (if (null? lst)\n    (list)\n    (let ((min (car lst))\n\
    \          (max (cdr lst)))\n      (let ((lst (cdr lst)))\n        (if (null?\
    \ lst)\n          (list min max)\n          (let ((min (car lst))\n          \
    \      (max (cdr lst)))\n            (let ((lst (cdr lst)))\n              (if\
    \ (null? lst)\n                (list min max min)\n                (let ((min\
    \ (car lst))\n                      (max (cdr lst)))\n                  (let ((lst\
    \ (cdr lst)))\n                    (if (null? lst)\n                      (list\
    \ min max min min)\n                      (let ((min (car lst))\n            \
    \                (max (cdr lst)))\n                        (let ((lst (cdr lst)))\n\
    \                          (if (null? lst)\n                            (list\
    \ min max min min min)\n                            (let ((min (car lst))\n  \
    \                                (max (cdr lst)))\n                          \
    \    (let ((lst (cdr lst)))\n                                (if (null? lst)\n\
    \                                  (list min max min min min min)\n          \
    \                        (let ((min (car lst))\n                             \
    \           (max (cdr lst)))\n                                    (let ((lst (cdr\
    \ lst)))\n                                      (if (null? lst)\n            \
    \                            (list min max min min min min min)\n            \
    \                            (let ((min (car lst))\n                         \
    \                     (max (cdr lst)))\n                                     \
    \     (let ((lst (cdr lst)))\n                                            (if\
    \ (null? lst)\n                                              (list min max min\
    \ min min min min min)\n                                              (let ((min\
    \ (car lst))\n                                                   (max (cdr lst)))\n\
    \                                                (let ((lst (cdr lst)))\n    \
    \                                              (if (null? lst)\n             \
    \                                       (list min max min min min min min min\
    \ min)\n                                                    (let ((min (car lst",
  "  (if (null? lst)\n    (list)\n    (let ((min (car lst))\n          (max (cdr lst)))\n\
    \      (let ((lst (cdr lst)))\n        (cons min\n           (if (null? lst)\n\
    \             max\n             (strange_sort_list lst)))))))\n\n;; Given list\
    \ of integers, return list sorted in ascending order.\n;; Examples:\n;; >>> (ascending_sort_list\
    \ (list 1 2 3 4))\n;; (list 1 2 3 4)\n;; >>> (ascending_sort_list (list 5 5 5\
    \ 5))\n;; (list 5 5 5 5)\n;; >>> (ascending_sort_list (list ))\n;; (list )", " \
    \ (if (null? lst)\n    (list)\n    (let ((min (car lst))\n          (rest (cdr\
    \ lst)))\n      (if (null? rest)\n        (list min)\n        (let ((max (car\
    \ rest))\n              (rest (cdr rest)))\n          (if (null? rest)\n     \
    \       (list min max)\n            (let ((min (car rest))\n                 \
    \ (rest (cdr rest)))\n              (if (null? rest)\n                (list min\
    \ max min)\n                (let ((max (car rest))\n                      (rest\
    \ (cdr rest)))\n                  (if (null? rest)\n                    (list\
    \ min max min max)\n                    (let ((min (car rest))\n             \
    \             (rest (cdr rest)))\n                      (if (null? rest)\n   \
    \                     (list min max min max min)\n                        (let\
    \ ((max (car rest))\n                              (rest (cdr rest)))\n      \
    \                    (if (null? rest)\n                            (list min max\
    \ min max min max)\n                            (let ((min (car rest))\n     \
    \                             (rest (cdr rest)))\n                           \
    \   (if (null? rest)\n                                (list min max min max min\
    \ max min max)\n                                (list min max min max min max\
    \ min max))))))))))))))))))))))))))))\n", "  (if (null? lst)\n    (list)\n   \
    \ (let ((min (car lst))\n          (max (cdr lst)))\n      (let ((lst (cdr lst)))\n\
    \        (cons min (strange_sort_list (cdr lst)) max))))\n  lst)\n\n;; Given list\
    \ of integers, return list in strange order.\n;; Strange sorting, is when you\
    \ start with the minimum value,\n;; then maximum of the remaining integers, then\
    \ minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list (list 1 2 3 4))\n\
    ;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n;; (list 5 5 5 5)\n\
    ;; >>> (strange_sort_list (list ))\n;; (list )", "  (if (null? lst)\n    (list)\n\
    \    (let ((min (car lst))\n          (rest (cdr lst)))\n      (let ((max (car\
    \ rest))\n            (new_rest (cdr rest)))\n        (let ((new_min (car new_rest))\n\
    \              (new_max (car rest)))\n          (if (null? new_rest)\n       \
    \     (list min max)\n            (let ((new_new_min (car new_rest))\n       \
    \           (new_new_max (car rest)))\n              (strange_sort_list\n    \
    \            (list min new_min new_max new_new_min new_new_max))))))))))\n", " \
    \ (if (null? lst)\n    (list)\n    (let ((min (car lst))\n          (max (cdr\
    \ lst)))\n      (let ((head (car lst))\n            (tail (cdr lst)))\n      \
    \  (if (null? tail)\n          (list head min max)\n          (let ((min (car\
    \ tail))\n                (max (cdr tail)))\n            (let ((head (car tail))\n\
    \                  (tail (cdr tail)))\n              (if (null? tail)\n      \
    \          (list head min max min)\n                (let ((min (car tail))\n \
    \                     (max (cdr tail)))\n                  (let ((head (car tail))\n\
    \                        (tail (cdr tail)))\n                    (if (null? tail)\n\
    \                      (list head min max min min)\n                      (let\
    \ ((min (car tail))\n                            (max (cdr tail)))\n         \
    \               (let ((head (car tail))\n                              (tail (cdr\
    \ tail)))\n                          (if (null? tail)\n                      \
    \      (list head min max min min min)\n                            (let ((min\
    \ (car tail))\n                                  (max (cdr tail)))\n         \
    \                     (let ((head (car tail))\n                              \
    \      (tail (cdr tail)))\n                                (if (null? tail)\n\
    \                                  (list head min max min min min min)\n     \
    \                             (let ((min (car tail))\n                       \
    \                 (max (cdr tail)))\n                                    (let\
    \ ((head (car tail))\n                                          (tail (cdr tail)))\n\
    \                                      (if (null? tail)\n                    \
    \                    (list head min max min min min min min)\n               \
    \                         (let ((min (car tail))\n                           \
    \                   (max (cdr tail)))\n                                      \
    \    (let ((head (car tail))\n                                               \
    \ (tail (cdr tail)))\n                                            (if (null? tail)\n\
    \                                              (list head min max min min min\
    \ min min min)\n                                              (let ((min (car\
    \ tail))\n                                                   (max (cdr tail)))\n\
    \                                                (let ((head (car tail))\n   \
    \                                                   (tail (", "  (if (null? lst)\n\
    \    (list)\n    (let ((head (car lst))\n          (tail (cdr lst)))\n      (let\
    \ ((min (car head))\n             (max (car tail)))\n        (let ((min (car min))\n\
    \               (max (car max)))\n          (let ((min (car min))\n          \
    \       (max (car max)))\n            (let ((min (car min))\n                \
    \   (max (car max)))\n              (let ((min (car min))\n                  \
    \   (max (car max)))\n                (let ((min (car min))\n                \
    \       (max (car max)))\n                  (let ((min (car min))\n          \
    \               (max (car max)))\n                    (let ((min (car min))\n\
    \                           (max (car max)))\n                      (let ((min\
    \ (car min))\n                             (max (car max)))\n                \
    \        (let ((min (car min))\n                               (max (car max)))\n\
    \                          (let ((min (car min))\n                           \
    \      (max (car max)))\n                            (let ((min (car min))\n \
    \                                  (max (car max)))\n                        \
    \      (let ((min (car min))\n                                     (max (car max)))\n\
    \                                (let ((min (car min))\n                     \
    \                  (max (car max)))\n                                   (let ((min\
    \ (car min))\n                                         (max (car max)))\n    \
    \                                 (let ((min (car min))\n                    \
    \                       (max (car max)))\n                                   \
    \    (let ((min (car min))\n                                             (max\
    \ (car max)))\n                                         (let ((min (car min))\n\
    \                                               (max (car max)))\n           \
    \                                (let ((min (car min))\n                     \
    \                            (max (car max)))\n                              \
    \               (let ((min (car min))\n                                      \
    \            (max (car max)))\n                                              \
    \ (let ((min (car min))\n                                                    \
    \ (max (car max)))\n                                                 (let ((min\
    \ (car min))\n                                                       (max (car\
    \ max)))\n                                                  (let ((min (car min))\n\
    \                                                        (max", "  (if (null?\
    \ lst)\n    lst\n    (let ((min (car lst))\n          (max (cdr lst)))\n     \
    \ (let ((lst2 (cdr lst)))\n        (if (null? lst2)\n          (list min max)\n\
    \          (let ((lst3 (cdr lst2)))\n            (if (null? lst3)\n          \
    \    (list min max min)\n              (let ((lst4 (cdr lst3)))\n            \
    \    (if (null? lst4)\n                  (list min max min min)\n            \
    \      (let ((lst5 (cdr lst4)))\n                    (if (null? lst5)\n      \
    \                (list min max min min min)\n                      (let ((lst6\
    \ (cdr lst5)))\n                        (if (null? lst6)\n                   \
    \       (list min max min min min min)\n                          (let ((lst7\
    \ (cdr lst6)))\n                            (if (null? lst7)\n               \
    \               (list min max min min min min min)\n                         \
    \     (let ((lst8 (cdr lst7)))\n                                (if (null? lst8)\n\
    \                                  (list min max min min min min min min)\n  \
    \                                (let ((lst9 (cdr lst8)))\n                  \
    \                  (if (null? lst9)\n                                      (list\
    \ min max min min min min min min min)\n                                     \
    \ (let ((lst10 (cdr lst9)))\n                                        (if (null?\
    \ lst10)\n                                          (list min max min min min\
    \ min min min min min)\n                                          (list min max\
    \ min min min min min min min min min))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
  "  (if (null? lst)\n    (list)\n    (let ((min (car lst))\n          (max (cdr lst)))\n\
    \      (let ((lst (cdr lst)))\n        (if (null? lst)\n            (list min\
    \ max)\n            (let ((lst (cdr lst)))\n              (if (null? lst)\n  \
    \                (list min max min)\n                  (let ((lst (cdr lst)))\n\
    \                    (if (null? lst)\n                        (list min max min\
    \ min)\n                        (let ((lst (cdr lst)))\n                     \
    \     (if (null? lst)\n                              (list min max min min min)\n\
    \                              (let ((lst (cdr lst)))\n                      \
    \          (if (null? lst)\n                                    (list min max\
    \ min min min min)\n                                    (let ((lst (cdr lst)))\n\
    \                                      (if (null? lst)\n                     \
    \                     (list min max min min min min min)\n                   \
    \                       (let ((lst (cdr lst)))\n                             \
    \               (if (null? lst)\n                                            \
    \    (list min max min min min min min min)\n                                \
    \                (let ((lst (cdr lst)))\n                                    \
    \               (if (null? lst)\n                                            \
    \           (list min max min min min min min min min)\n                     \
    \                                  (let ((lst (cdr lst)))\n                  \
    \                                       (if (null? lst)\n                    \
    \                                        (list min max min min min min min min\
    \ min min)\n                                                           (let ((lst\
    \ (cdr lst)))\n                                                             (if\
    \ (null? lst)\n                                                              \
    \  (list min max min min min min min min min min min)\n                      \
    \                                          (let ((lst (cdr lst)))\n          \
    \                                                         (if (null? lst)\n  \
    \                                                                    (list min\
    \ max min min min min min min min min min min)\n                             \
    \                                        (let ((", "  (if (null? lst)\n    (list)\n\
    \    (let ((min (car lst))\n          (max (cdr lst)))\n      (let ((lst (cdr\
    \ lst)))\n        (if (null? lst)\n            (list min max)\n            (let\
    \ ((lst (cdr lst)))\n              (if (null? lst)\n                  (list min\
    \ max min)\n                  (let ((lst (cdr lst)))\n                    (if\
    \ (null? lst)\n                        (list min max min min)\n              \
    \          (strange_sort_list (cdr lst))))))))))))\n", "  (if (null? lst)\n  \
    \  lst\n    (let ((min (car lst))\n          (max (cdr lst)))\n      (let ((lst2\
    \ (cdr lst)))\n        (if (null? lst2)\n          (list min max)\n          (let\
    \ ((lst3 (cdr lst2)))\n            (if (null? lst3)\n              (list min max\
    \ min)\n              (let ((lst4 (cdr lst3)))\n                (if (null? lst4)\n\
    \                  (list min max min min)\n                  (let ((lst5 (cdr\
    \ lst4)))\n                    (if (null? lst5)\n                      (list min\
    \ max min min min)\n                      (let ((lst6 (cdr lst5)))\n         \
    \               (if (null? lst6)\n                          (list min max min\
    \ min min min)\n                          (list min max min min min min min)\n\
    \                          ))))))))))))))))))\n", "  (if (null? lst)\n    (list)\n\
    \    (let ((min (car lst))\n          (max (cdr lst)))\n      (let ((lst2 (cdr\
    \ lst)))\n        (let ((lst3 (cdr lst2)))\n          (let ((lst4 (cdr lst3)))\n\
    \            (let ((lst5 (cdr lst4)))\n              (let ((lst6 (cdr lst5)))\n\
    \                (let ((lst7 (cdr lst6)))\n                  (let ((lst8 (cdr\
    \ lst7)))\n                    (let ((lst9 (cdr lst8)))\n                    \
    \  (let ((lst10 (cdr lst9)))\n                        (let ((lst11 (cdr lst10)))\n\
    \                          (let ((lst12 (cdr lst11)))\n                      \
    \      (let ((lst13 (cdr lst12)))\n                              (let ((lst14\
    \ (cdr lst13)))\n                                (let ((lst15 (cdr lst14)))\n\
    \                                  (let ((lst16 (cdr lst15)))\n              \
    \                      (let ((lst17 (cdr lst16)))\n                          \
    \            (let ((lst18 (cdr lst17)))\n                                    \
    \    (let ((lst19 (cdr lst18)))\n                                          (let\
    \ ((lst20 (cdr lst19)))\n                                            (let ((lst21\
    \ (cdr lst20)))\n                                              (let ((lst22 (cdr\
    \ lst21)))\n                                                (let ((lst23 (cdr\
    \ lst22)))\n                                                  (let ((lst24 (cdr\
    \ lst23)))\n                                                    (let ((lst25 (cdr\
    \ lst24)))\n                                                      (let ((lst26\
    \ (cdr lst25)))\n                                                        (let\
    \ ((lst27 (cdr lst26)))\n                                                    \
    \      (let ((lst28 (cdr lst27)))\n                                          \
    \                  (let ((lst29 (cdr lst28", "  (if (null? lst)\n    lst\n   \
    \ (let ((min (car lst))\n          (max (cdr lst)))\n      (let ((result (cons\
    \ min (strange_sort_list (cdr lst))))\n            (lst (cdr lst)))\n        (if\
    \ (null? lst)\n          result\n          (let ((min (car lst))\n           \
    \     (max (cdr lst)))\n            (let ((result (cons min (strange_sort_list\
    \ (cdr lst))))\n                  (lst (cdr lst)))\n              (if (null? lst)\n\
    \                result\n                (let ((min (car lst))\n             \
    \         (max (cdr lst)))\n                  (let ((result (cons min (strange_sort_list\
    \ (cdr lst))))\n                         (lst (cdr lst)))\n                  \
    \  (if (null? lst)\n                      result\n                      (let ((min\
    \ (car lst))\n                            (max (cdr lst)))\n                 \
    \       (let ((result (cons min (strange_sort_list (cdr lst))))\n            \
    \                  (lst (cdr lst)))\n                          (if (null? lst)\n\
    \                            result\n                            (let ((min (car\
    \ lst))\n                                  (max (cdr lst)))\n                \
    \              (let ((result (cons min (strange_sort_list (cdr lst))))\n     \
    \                               (lst (cdr lst
  "  (if (null? lst)\n    (list)\n    (let ((min (car lst))\n          (rest (cdr\
    \ lst)))\n      (if (null? rest)\n        (list min)\n        (let ((max (car\
    \ rest))\n              (new_rest (cdr rest)))\n          (if (null? new_rest)\n\
    \            (list min max)\n            (let ((min (car new_rest))\n        \
    \          (new_rest (cdr new_rest)))\n              (if (null? new_rest)\n  \
    \              (list min max min)\n                (let ((max (car new_rest))\n\
    \                      (new_rest (cdr new_rest)))\n                  (if (null?\
    \ new_rest)\n                    (list min max min max)\n                    (let\
    \ ((min (car new_rest))\n                          (new_rest (cdr new_rest)))\n\
    \                      (if (null? new_rest)\n                        (list min\
    \ max min max min)\n                        (let ((max (car new_rest))\n     \
    \                         (new_rest (cdr new_rest)))\n                       \
    \   (if (null? new_rest)\n                            (list min max min max min\
    \ max)\n                            (list min max min max min max max))))))))))))))))))\n",
  "  (if (null? lst)\n    (list)\n    (let ((min (car lst))\n          (max (cdr lst)))\n\
    \      (let ((head (car lst))\n            (tail (cdr lst)))\n        (if (null?\
    \ tail)\n          (list head min max)\n          (strange_sort_list (list head\
    \ min max tail)))))))\n\n;; Given list of integers, return list in sorted order.\n\
    ;; Sorting, is when you start with the minimum value,\n;; then maximum of the\
    \ remaining integers, then minimum and so on.\n;; Examples:\n;; >>> (sort_list\
    \ (list 1 2 3 4))\n;; (list 1 2 3 4)\n;; >>> (sort_list (list 5 5 5 5))\n;; (list\
    \ 5 5 5 5)\n;; >>> (sort_list (list ))\n;; (list )", "  (if (null? lst)\n    (list)\n\
    \    (let ((head (car lst))\n          (tail (cdr lst)))\n      (let ((min (car\
    \ head))\n            (max (car tail)))\n        (let ((min (car min))\n     \
    \         (max (car max)))\n          (let ((min (car min))\n                (max\
    \ (car max)))\n            (let ((min (car min))\n                  (max (car\
    \ max)))\n              (let ((min (car min))\n                    (max (car max)))\n\
    \                (let ((min (car min))\n                      (max (car max)))\n\
    \                  (let ((min (car min))\n                        (max (car max)))\n\
    \                    (let ((min (car min))\n                          (max (car\
    \ max)))\n                      (let ((min (car min))\n                      \
    \      (max (car max)))\n                        (let ((min (car min))\n     \
    \                         (max (car max)))\n                          (let ((min\
    \ (car min))\n                                (max (car max)))\n             \
    \               (let ((min (car min))\n                                  (max\
    \ (car max)))\n                              (let ((min (car min))\n         \
    \                           (max (car max)))\n                               \
    \ (let ((min (car min))\n                                      (max (car max)))\n\
    \                                  (let ((min (car min))\n                   \
    \                     (max (car max)))\n                                    (let\
    \ ((min (car min))\n                                          (max (car max)))\n\
    \                                      (let ((min (car min))\n               \
    \                             (max (car max)))\n                             \
    \           (let ((min (car min))\n                                          \
    \    (max (car max)))\n                                          (let ((min (car\
    \ min))\n                                                (max (car max)))\n  \
    \                                          (let ((min (car min))\n           \
    \                                       (max (car max)))\n                   \
    \                           (let ((min (car min))\n                          \
    \                         (max (car max)))\n                                 \
    \               (let ((min (car min))\n                                      \
    \                (max (car max)))\n                                          \
    \        (let ((min (car min))\n                                             \
    \            (max (", "  (let ((result (list)))\n    (let ((current (first lst)))\n\
    \      (while (not (null? lst))\n        (let ((next (first (cdr lst))))\n   \
    \       (if (null? next)\n            (append result current)\n            (append\
    \ result (cons current next))))\n          (setq current (first (cdr lst)))\n\
    \          (setq lst (cdr lst)))\n        (setq lst (cdr lst))))\n  result))\n",
  "  (if (null? lst)\n    (list)\n    (let ((min (car lst))\n          (max (cdr lst)))\n\
    \      (let ((lst (cdr lst)))\n        (if (null? lst)\n          (list min max)\n\
    \          (let ((lst (cdr lst)))\n            (if (null? lst)\n             \
    \ (list min max min)\n              (let ((lst (cdr lst)))\n                (if\
    \ (null? lst)\n                  (list min max min min)\n                  (let\
    \ ((lst (cdr lst)))\n                    (if (null? lst)\n                   \
    \   (list min max min min min)\n                      (let ((lst (cdr lst)))\n\
    \                        (if (null? lst)\n                          (list min\
    \ max min min min min)\n                          (let ((lst (cdr lst)))\n   \
    \                         (if (null? lst)\n                              (list\
    \ min max min min min min min)\n                              (let ((lst (cdr\
    \ lst)))\n                                (if (null? lst)\n                  \
    \                (list min max min min min min min min)\n                    \
    \              (let ((lst (cdr lst)))\n                                    (if\
    \ (null? lst)\n                                      (list min max min min min\
    \ min min min min)\n                                      (let ((lst (cdr lst)))\n\
    \                                        (if (null? lst)\n                   \
    \                       (list min max min min min min min min min min)\n     \
    \                                     (let ((lst (cdr lst)))\n               \
    \                             (if (null? lst)\n                              \
    \                (list min max min min min min min min min min min)\n        \
    \                                      (let ((lst (cdr lst)))\n              \
    \                                  (if (null? lst)\n                         \
    \                         (list min max min min min min min min min min min min)\n\
    \                                                  (let ((lst (cdr lst)))\n  \
    \                                                  (if (null? lst)\n         \
    \                                             (list min max min min min min min\
    \ min min min min min min)\n                               ", "  (if (null? lst)\n\
    \    (list)\n    (let ((min (car lst))\n          (max (cdr lst)))\n      (let\
    \ ((result (cons min (strange_sort_list (cdr lst))))\n            (lst (cdr lst)))\n\
    \        (cons min (strange_sort_list (cdr lst)))))))\n\n;; Given list of integers,\
    \ return list in strange order.\n;; Strange sorting, is when you start with the\
    \ minimum value,\n;; then maximum of the remaining integers, then minimum and\
    \ so on.\n;; Examples:\n;; >>> (strange_sort_list (list 1 2 3 4))\n;; (list 1\
    \ 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n;; (list 5 5 5 5)\n;; >>>\
    \ (strange_sort_list (list ))\n;; (list )", "  (let ((result (list)))\n    (if\
    \ (null? lst)\n      result\n      (let ((min (car lst)))\n        (let ((max\
    \ (car lst)))\n          (let ((i (car lst)))\n            (if (null? i)\n   \
    \           (append result min)\n              (append result max)\n         \
    \     (append result min max i))))))))\n\n;; Given list of integers, return list\
    \ in strange order.\n;; Strange sorting, is when you start with the minimum value,\n\
    ;; then maximum of the remaining integers, then minimum and so on.\n;; Examples:\n\
    ;; >>> (strange_sort_list (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list\
    \ (list 5 5 5 5))\n;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list\
    \ )", "  (if (null? lst)\n    (list)\n    (let ((min (car lst))\n          (max\
    \ (cdr lst)))\n      (let ((curr (car lst)))\n        (if (null? curr)\n     \
    \     (list min max)\n          (let ((next (cdr curr)))\n            (let ((next_min\
    \ (car next)))\n              (let ((next_max (cdr next)))\n                (list\n\
    \                  (if (null? next_min)\n                    (list min max)\n\
    \                    (list min next_min)\n                  )\n              \
    \    (if (null? next_max)\n                    (list min max)\n              \
    \      (list min next_max)\n                  )\n                )\n         \
    \     )\n            )\n          )\n        )\n      )\n    )\n  )\n)\n\n;; Given\
    \ list of integers, return list in strange order.\n;; Strange sorting, is when\
    \ you start with the minimum value,\n;; then maximum of the remaining integers,\
    \ then minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list (list 1 2 3\
    \ 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n;; (list\
    \ 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )", "  (if (null? lst)\n\
    \    (list)\n    (let ((min (car lst))\n          (max (cdr lst)))\n      (let\
    \ ((i (car lst)))\n        (while (not (null? i))\n          (let ((next (cdr\
    \ i)))\n            (setcar i (if (null? next)\n                           (car\
    \ min)\n                           (car max)))\n            (setcdr i next)))\n\
    \        (list min max)))\n  )\n)\n\n;; Given list of integers, return list in\
    \ strange order.\n;; Strange sorting, is when you start with the minimum value,\n\
    ;; then maximum of the remaining integers, then minimum and so on.\n;; Examples:\n\
    ;; >>> (strange_sort_list (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list\
    \ (list 5 5 5 5))\n;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list\
    \ )", "  (if (null? lst)\n    (list)\n    (let ((head (car lst))\n          (tail\
    \ (cdr lst)))\n      (if (null? tail)\n        (list head)\n        (strange_sort_list\
    \ (append tail (list head) (strange_sort_list tail)))\n      )\n    )\n  )\n)\n\
    \n;; Given list of integers, return list in strange order.\n;; Strange sorting,\
    \ is when you start with the minimum value,\n;; then maximum of the remaining\
    \ integers, then minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list (list\
    \ 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n;;\
    \ (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )", "  (if (null?\
    \ lst)\n    (list)\n    (let ((min (car lst))\n          (max (cdr lst)))\n  \
    \    (let ((lst (cdr lst)))\n        (if (null? lst)\n          (list min max)\n\
    \          (let ((lst (cdr lst)))\n            (if (null? lst)\n             \
    \ (list min max min)\n              (let ((lst (cdr lst)))\n                (if\
    \ (null? lst)\n                  (list min max min min)\n                  (let\
    \ ((lst (cdr lst)))\n                    (if (null? lst)\n                   \
    \   (list min max min min min)\n                      (let ((lst (cdr lst)))\n\
    \                        (if (null? lst)\n                          (list min\
    \ max min min min min)\n                          (error \"Too many elements in\
    \ list\"))))))))))))))))))\n", "  (if (null? lst)\n    (list)\n    (let ((min\
    \ (car lst))\n          (max (cdr lst)))\n      (let ((lst (cdr lst)))\n     \
    \   (cons min\n           (if (null? lst)\n             max\n             (strange_sort_list\
    \ lst)))))))\n\n;; Given list of integers, return list in strange order.\n;; Strange\
    \ sorting, is when you start with the minimum value,\n;; then maximum of the remaining\
    \ integers, then minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list (list\
    \ 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n;;\
    \ (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )", "  (if (null?\
    \ lst)\n    lst\n    (let ((min (car lst))\n          (max (cdr lst)))\n     \
    \ (let ((head (car lst))\n            (tail (cdr lst)))\n        (let ((min (car\
    \ head))\n              (max (cdr head)))\n          (let ((head (car head))\n\
    \                (tail (cdr head)))\n            (let ((min (car tail))\n    \
    \              (max (cdr tail)))\n              (let ((head (car tail))\n    \
    \                (tail (cdr tail)))\n                (let ((min (car head))\n\
    \                      (max (cdr head)))\n                  (let ((head (car head))\n\
    \                        (tail (cdr head)))\n                    (let ((min (car\
    \ tail))\n                          (max (cdr tail)))\n                      (let\
    \ ((head (car tail))\n                            (tail (cdr tail)))\n       \
    \                 (let ((min (car head))\n                              (max (cdr\
    \ head)))\n                          (let ((head (car head))\n               \
    \                 (tail (cdr head)))\n                            (let ((min (car\
    \ tail))\n                                  (max (cdr tail)))\n              \
    \                (let ((head (car tail))\n                                   \
    \ (tail (cdr tail)))\n                                (let ((min (car head))\n\
    \                                      (max (cdr head)))\n                   \
    \               (let ((head (car head))\n                                    \
    \    (tail (cdr head)))\n                                    (let ((min (car tail))\n\
    \                                          (max (cdr tail)))\n               \
    \                       (let ((head (car tail))\n                            \
    \                (tail (cdr tail)))\n                                        (let\
    \ ((min (car head))\n                                              (max (cdr head)))\n\
    \                                          (let ((head (car head))\n         \
    \                                       (tail (cdr head)))\n                 \
    \                           (let ((min (car tail))\n                         \
    \                         (max (cdr tail)))\n                                \
    \              (let ((head (car tail))\n                                     \
    \              (tail (cdr tail)))\n                                          \
    \      (let ((min (car head))\n                                              \
    \        (max (cdr head)))\n                                ", "  (if (null? lst)\n\
    \    (list)\n    (let ((min (car lst))\n          (max (cdr lst)))\n      (let\
    \ ((lst (cdr lst)))\n        (cons min (if (null? lst)\n                     \
    \ max\n                      (strange_sort_list (lst))))))))\n\n;; Given list\
    \ of integers, return list in strange order.\n;; Strange sorting, is when you\
    \ start with the minimum value,\n;; then maximum of the remaining integers, then\
    \ minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list (list 1 2 3 4))\n\
    ;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n;; (list 5 5 5 5)\n\
    ;; >>> (strange_sort_list (list ))\n;; (list )", "  (if (null? lst)\n    (list)\n\
    \    (let ((head (car lst))\n          (tail (cdr lst)))\n      (let ((min (car\
    \ head))\n            (max (car tail)))\n        (let ((min (car min))\n     \
    \         (max (car max)))\n          (let ((min (car min))\n                (max\
    \ (car max)))\n            (let ((min (car min))\n                  (max (car\
    \ max)))\n              (let ((min (car min))\n                    (max (car max)))\n\
    \                (let ((min (car min))\n                      (max (car max)))\n\
    \                  (let ((min (car min))\n                        (max (car max)))\n\
    \                    (let ((min (car min))\n                          (max (car\
    \ max)))\n                      (let ((min (car min))\n                      \
    \      (max (car max)))\n                        (let ((min (car min))\n     \
    \                         (max (car max)))\n                          (let ((min\
    \ (car min))\n                                (max (car max)))\n             \
    \               (let ((min (car min))\n                                  (max\
    \ (car max)))\n                              (let ((min (car min))\n         \
    \                           (max (car max)))\n                               \
    \ (let ((min (car min))\n                                      (max (car max)))\n\
    \                                  (let ((min (car min))\n                   \
    \                     (max (car max)))\n                                    (let\
    \ ((min (car min))\n                                          (max (car max)))\n\
    \                                      (let ((min (car min))\n               \
    \                             (max (car max)))\n                             \
    \           (let ((min (car min))\n                                          \
    \    (max (car max)))\n                                          (let ((min (car\
    \ min))\n                                                (max (car max)))\n  \
    \                                          (let ((min (car min))\n           \
    \                                       (max (car max)))\n                   \
    \                           (let ((min (car min))\n                          \
    \                         (max (car max)))\n                                 \
    \               (let ((min (car min))\n                                      \
    \                (max (car max)))\n                                          \
    \        (let ((min (car min))\n                                             \
    \            (max (", "  (if (null? lst)\n    (list)\n    (let ((min (car lst))\n\
    \          (max (cdr lst)))\n      (let ((result (cons min (strange_sort_list\
    \ (cdr lst))))\n            (lst (cdr lst)))\n        (cons min (strange_sort_list\
    \ (cdr lst)))))))\n\n;; Given list of integers, return list in strange order.\n\
    ;; Strange sorting, is when you start with the minimum value,\n;; then maximum\
    \ of the remaining integers, then minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list\
    \ (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n\
    ;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )", "  (if (null?\
    \ lst)\n    (list)\n    (let ((head (car lst))\n          (tail (cdr lst)))\n\
    \      (if (null? tail)\n        (list head)\n        (strange_sort_list (append\
    \ (list head) tail))))))\n\n;; Given list of integers, return list in strange\
    \ order.\n;; Strange sorting, is when you start with the minimum value,\n;; then\
    \ maximum of the remaining integers, then minimum and so on.\n;; Examples:\n;;\
    \ >>> (strange_sort_list (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list\
    \ (list 5 5 5 5))\n;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list\
    \ )", "  (if (null? lst)\n    (list)\n    (let ((head (car lst))\n          (tail\
    \ (cdr lst)))\n      (let ((min (car head))\n            (max (car tail)))\n \
    \       (let ((min (car min))\n              (max (car max)))\n          (let\
    \ ((min (car min))\n                (max (car max)))\n            (let ((min (car\
    \ min))\n                  (max (car max)))\n              (let ((min (car min))\n\
    \                    (max (car max)))\n                (let ((min (car min))\n\
    \                      (max (car max)))\n                  (let ((min (car min))\n\
    \                        (max (car max)))\n                    (let ((min (car\
    \ min))\n                          (max (car max)))\n                      (let\
    \ ((min (car min))\n                            (max (car max)))\n           \
    \             (let ((min (car min))\n                              (max (car max)))\n\
    \                          (let ((min (car min))\n                           \
    \     (max (car max)))\n                            (let ((min (car min))\n  \
    \                                (max (car max)))\n                          \
    \    (let ((min (car min))\n                                    (max (car max)))\n\
    \                                (let ((min (car min))\n                     \
    \                 (max (car max)))\n                                  (let ((min\
    \ (car min))\n                                        (max (car max)))\n     \
    \                               (let ((min (car min))\n                      \
    \                    (max (car max)))\n                                      (let\
    \ ((min (car min))\n                                            (max (car max)))\n\
    \                                        (let ((min (car min))\n             \
    \                                 (max (car max)))\n                         \
    \                 (let ((min (car min))\n                                    \
    \            (max (car max)))\n                                            (let\
    \ ((min (car min))\n                                                  (max (car\
    \ max)))\n                                              (let ((min (car min))\n\
    \                                                   (max (car max)))\n       \
    \                                         (let ((min (car min))\n            \
    \                                          (max (car max)))\n                \
    \                                  (let ((min (car min))\n                   \
    \                                      (max (", "  (if (null? lst)\n    lst\n\
    \    (let ((min (car lst))\n          (rest (cdr lst)))\n      (let ((max (car\
    \ rest))\n            (result (cons min max)))\n        (strange_sort_list rest)\n\
    \        (cons min result))))\n)\n\n;; Given list of integers, return list in\
    \ strange order.\n;; Strange sorting, is when you start with the minimum value,\n\
    ;; then maximum of the remaining integers, then minimum and so on.\n;; Examples:\n\
    ;; >>> (strange_sort_list (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list\
    \ (list 5 5 5 5))\n;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list\
    \ )", "  (if (null? lst)\n    (list)\n    (let ((min (car lst))\n          (max\
    \ (cdr lst)))\n      (let ((lst (cdr lst)))\n        (if (null? lst)\n       \
    \   (list min max)\n          (let ((lst (cdr lst)))\n            (if (null? lst)\n\
    \              (list min max min)\n              (let ((lst (cdr lst)))\n    \
    \            (if (null? lst)\n                  (list min max min min)\n     \
    \             (let ((lst (cdr lst)))\n                    (if (null? lst)\n  \
    \                    (list min max min min min)\n                      (let ((lst\
    \ (cdr lst)))\n                        (if (null? lst)\n                     \
    \     (list min max min min min min)\n                          (error \"strange_sort_list:\
    \ too many values\")\n                          (strange_sort_list (cdr lst))))))))))))))))))\n\
    \n;; Given list of integers, return list in strange order.\n;; Strange sorting,\
    \ is when you start with the minimum value,\n;; then maximum of the remaining\
    \ integers, then minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list (list\
    \ 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n;;\
    \ (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )", "  (if (null?\
    \ lst)\n    (list)\n    (let ((min (car lst))\n          (max (cdr lst)))\n  \
    \    (let ((lst (cdr lst)))\n        (if (null? lst)\n          (list min max)\n\
    \          (let ((lst (cdr lst)))\n            (if (null? lst)\n             \
    \ (list min max min)\n              (let ((lst (cdr lst)))\n                (if\
    \ (null? lst)\n                  (list min max min min)\n                  (let\
    \ ((lst (cdr lst)))\n                    (if (null? lst)\n                   \
    \   (list min max min min min)\n                      (let ((lst (cdr lst)))\n\
    \                        (if (null? lst)\n                          (list min\
    \ max min min min min)\n                          (error \"strange_sort_list:\
    \ too many values\")\n                          (let ((lst (cdr lst)))\n     \
    \                       (if (null? lst)\n                              (list min\
    \ max min min min min min min)\n                              (error \"strange_sort_list:\
    \ too many values\")\n                              (error \"strange_sort_list:\
    \ too many values\")\n
  "  (if (null? lst)\n    (list)\n    (let ((min (car lst))\n          (max (cdr lst)))\n\
    \      (let ((lst2 (cdr lst)))\n        (if (null? lst2)\n          (list min\
    \ max)\n          (let ((min2 (car lst2))\n                (max2 (cdr lst2)))\n\
    \            (let ((lst3 (cdr lst2)))\n              (if (null? lst3)\n      \
    \          (list min2 max2)\n                (let ((min3 (car lst3))\n       \
    \               (max3 (cdr lst3)))\n                  (list min min2 min3 max\
    \ max2 max3))))))))))))\n\n;; Given list of integers, return list in strange order.\n\
    ;; Strange sorting, is when you start with the minimum value,\n;; then maximum\
    \ of the remaining integers, then minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list\
    \ (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n\
    ;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )", "  (if (null?\
    \ lst)\n    (list)\n    (let ((min (car lst))\n          (max (cdr lst)))\n  \
    \    (let ((curr (car lst)))\n        (if (null? curr)\n          (list min max)\n\
    \          (let ((next (cdr curr)))\n            (if (null? next)\n          \
    \    (list min max min)\n              (let ((next_min (car next)))\n        \
    \        (let ((next_max (cdr next)))\n                  (list min max min next_min\
    \ next_max))))))))))\n", "  (if (null? lst)\n    (list)\n    (let ((min (car lst))\n\
    \          (max (cdr lst)))\n      (let ((curr (car lst)))\n        (if (null?\
    \ curr)\n          (list min max)\n          (let ((next (cdr curr)))\n      \
    \      (let ((next_min (car next)))\n              (let ((next_max (cdr next)))\n\
    \                (list\n                  (if (null? next_min)\n             \
    \       (list min max)\n                    (list min next_max)\n            \
    \      )\n                  (if (null? next_max)\n                    (list min\
    \ max)\n                    (list min next_min)\n                  )\n       \
    \           (if (null? next)\n                    (list min max)\n           \
    \         (list min next_min)\n                  )\n                )\n      \
    \        )\n            )\n          )\n        )\n      )\n    )\n  )\n)\n",
  "  (if (null? lst)\n    lst\n    (let ((min (car lst))\n          (max (cdr lst)))\n\
    \      (let ((lst2 (cdr lst)))\n        (if (null? lst2)\n          (list min\
    \ max)\n          (let ((min2 (car lst2))\n                (max2 (cdr lst2)))\n\
    \            (list min min2 max max2))))))))\n\n;; Given list of integers, return\
    \ list in strange order.\n;; Strange sorting, is when you start with the minimum\
    \ value,\n;; then maximum of the remaining integers, then minimum and so on.\n\
    ;; Examples:\n;; >>> (strange_sort_list (list 1 2 3 4))\n;; (list 1 4 2 3)\n;;\
    \ >>> (strange_sort_list (list 5 5 5 5))\n;; (list 5 5 5 5)\n;; >>> (strange_sort_list\
    \ (list ))\n;; (list )", "  (if (null? lst)\n    (list)\n    (let ((min (car lst))\n\
    \          (max (cdr lst)))\n      (let ((lst2 (cdr lst)))\n        (if (null?\
    \ lst2)\n          (list min max)\n          (let ((min2 (car lst2))\n       \
    \         (max2 (cdr lst2)))\n            (let ((lst3 (cdr lst2)))\n         \
    \     (if (null? lst3)\n                (list min2 max2)\n                (let\
    \ ((min3 (car lst3))\n                      (max3 (cdr lst3)))\n             \
    \     (list min min2 min3 max max2 max3))))))))))))\n\n;; Given list of integers,\
    \ return list in sorted order.\n;; Sorted order, is when you start with the minimum\
    \ value,\n;; then minimum of the remaining integers, then minimum and so on.\n\
    ;; Examples:\n;; >>> (sorted_sort_list (list 1 2 3 4))\n;; (list 1 2 3 4)\n;;\
    \ >>> (sorted_sort_list (list 5 5 5 5))\n;; (list 5 5 5 5)\n;; >>> (sorted_sort_list\
    \ (list ))\n;; (list )", "  (if (null? lst)\n    (list)\n    (let ((head (car\
    \ lst))\n          (tail (cdr lst)))\n      (if (null? tail)\n        (list head)\n\
    \        (strange_sort_list (append tail (list head)))\n      ))))\n\n;; Given\
    \ list of integers, return list in strange order.\n;; Strange sorting, is when\
    \ you start with the minimum value,\n;; then maximum of the remaining integers,\
    \ then minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list (list 1 2 3\
    \ 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n;; (list\
    \ 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )", "  (if (null? lst)\n\
    \    lst\n    (let ((min (car lst))\n          (max (cdr lst)))\n      (let ((lst\
    \ (cdr lst)))\n        (if (null? lst)\n          lst\n          (let ((lst (cdr\
    \ lst)))\n            (if (null? lst)\n              lst\n              (let ((lst\
    \ (cdr lst)))\n                (if (null? lst)\n                  lst\n      \
    \            (let ((lst (cdr lst)))\n                    (if (null? lst)\n   \
    \                   lst\n                      (let ((lst (cdr lst)))\n      \
    \                  (if (null? lst)\n                          lst\n          \
    \                (let ((lst (cdr lst)))\n                            (if (null?\
    \ lst)\n                              lst\n                              (let\
    \ ((lst (cdr lst)))\n                                (if (null? lst)\n       \
    \                           lst\n                                  (let ((lst\
    \ (cdr lst)))\n                                    (if (null? lst)\n         \
    \                             lst\n                                      (let\
    \ ((lst (cdr lst)))\n                                        (if (null? lst)\n\
    \                                          lst\n                             \
    \             (let ((lst (cdr lst)))\n                                       \
    \     (if (null? lst)\n                                              lst\n   \
    \                                           (let ((lst (cdr lst)))\n         \
    \                                       (if (null? lst)\n                    \
    \                              lst\n                                         \
    \         (let ((lst (cdr lst)))\n                                           \
    \         (if (null? lst)\n                                                  \
    \    lst\n                                                      (let ((lst (cdr\
    \ lst)))\n                                                        (if (null? lst)\n\
    \                                                          lst\n             \
    \                                             (let ((lst (cdr lst)))\n       \
    \                                                     (if (null? lst)\n      \
    \                                                        lst\n               \
    \                                               (let ((lst (cdr", "  (if (null?\
    \ lst)\n    (list)\n    (let ((head (car lst))\n          (tail (cdr lst)))\n\
    \      (let ((min (car head))\n            (max (car tail)))\n        (let ((min\
    \ (car min))\n              (max (car max)))\n          (let ((min (car min))\n\
    \                (max (car max)))\n            (let ((min (car min))\n       \
    \           (max (car max)))\n              (let ((min (car min))\n          \
    \          (max (car max)))\n                (let ((min (car min))\n         \
    \             (max (car max)))\n                  (let ((min (car min))\n    \
    \                    (max (car max)))\n                    (let ((min (car min))\n\
    \                          (max (car max)))\n                      (let ((min\
    \ (car min))\n                            (max (car max)))\n                 \
    \       (let ((min (car min))\n                              (max (car max)))\n\
    \                          (let ((min (car min))\n                           \
    \     (max (car max)))\n                            (let ((min (car min))\n  \
    \                                (max (car max)))\n                          \
    \    (let ((min (car min))\n                                    (max (car max)))\n\
    \                                (let ((min (car min))\n                     \
    \                 (max (car max)))\n                                  (let ((min\
    \ (car min))\n                                        (max (car max)))\n     \
    \                               (let ((min (car min))\n                      \
    \                    (max (car max)))\n                                      (let\
    \ ((min (car min))\n                                            (max (car max)))\n\
    \                                        (let ((min (car min))\n             \
    \                                 (max (car max)))\n                         \
    \                 (let ((min (car min))\n                                    \
    \            (max (car max)))\n                                            (let\
    \ ((min (car min))\n                                                  (max (car\
    \ max)))\n                                              (let ((min (car min))\n\
    \                                                   (max (car max)))\n       \
    \                                         (let ((min (car min))\n            \
    \                                          (max (car max)))\n                \
    \                                  (let ((min (car min))\n                   \
    \                                      (max (", "  (let ((result (list)))\n  \
    \  (let ((curr (lst)))\n      (while (not (null? curr))\n        (let ((next (cdr\
    \ curr)))\n          (if (null? next)\n            (append result curr)\n    \
    \        (append result (car curr))\n            (append result (car next))\n\
    \            (set! curr (cdr next))\n          )\n        )\n      )\n      (return\
    \ result)\n    )\n  )\n)\n", "  (if (null? lst)\n    lst\n    (let ((min (car\
    \ lst))\n          (max (cdr lst)))\n      (let ((result (cons min (cdr lst))))\n\
    \        (if (null? cdr lst)\n            result\n            (let ((lst (cdr\
    \ lst)))\n              (strange_sort_list (cons min (cdr lst)) result)))))))\n\
    \n;; Given list of integers, return list in strange order.\n;; Strange sorting,\
    \ is when you start with the minimum value,\n;; then maximum of the remaining\
    \ integers, then minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list (list\
    \ 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n;;\
    \ (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )", "  (if (null?\
    \ lst)\n    (list)\n    (let ((min (car lst))\n          (max (cdr lst)))\n  \
    \    (let ((new_lst (cons min (strange_sort_list (cdr lst))))\n            (i\
    \ 0))\n        (while (< i (length lst))\n          (let ((curr (car lst)))\n\
    \            (setq lst (cdr lst))\n            (setq i (1 + i))\n            (setq\
    \ curr (car lst))\n            (setq lst (cons (car lst) (cdr lst))))\n      \
    \    (setq lst (cons min (new_lst)))))))\n\n;; Given list of integers, return\
    \ list in sorted order.\n;; Sorted order, is when you start with the minimum value,\n\
    ;; then minimum of the remaining integers, then minimum and so on.\n;; Examples:\n\
    ;; >>> (sorted_sort_list (list 1 2 3 4))\n;; (list 1 2 3 4)\n;; >>> (sorted_sort_list\
    \ (list 5 5 5 5))\n;; (list 5 5 5 5)\n;; >>> (sorted_sort_list (list ))\n;; (list\
    \ )", "  (if (null? lst)\n    (list)\n    (let ((min (car lst))\n          (max\
    \ (cdr lst)))\n      (let ((lst (cdr lst)))\n        (if (null? lst)\n       \
    \     (list min max)\n            (let ((lst (cdr lst)))\n              (if (null?\
    \ lst)\n                  (list min max min)\n                  (let ((lst (cdr\
    \ lst)))\n                    (if (null? lst)\n                        (list min\
    \ max min min)\n                        (let ((lst (cdr lst)))\n             \
    \             (if (null? lst)\n                              (list min max min\
    \ min min)\n                              (let ((lst (cdr lst)))\n           \
    \                     (if (null? lst)\n                                    (list\
    \ min max min min min min)\n                                    (error \"strange_sort_list:\
    \ too many elements\")\n                                    (strange_sort_list\
    \ (cdr lst))))))))))))))))))\n", "  (if (null? lst)\n    lst\n    (let ((min (car\
    \ lst))\n          (max (cdr lst)))\n      (let ((lst2 (cdr lst)))\n        (if\
    \ (null? lst2)\n          (list min max)\n          (let ((lst3 (cdr lst2)))\n\
    \            (if (null? lst3)\n              (list min max min)\n            \
    \  (let ((lst4 (cdr lst3)))\n                (if (null? lst4)\n              \
    \    (list min max min min)\n                  (let ((lst5 (cdr lst4)))\n    \
    \                (if (null? lst5)\n                      (list min max min min\
    \ min)\n                      (let ((lst6 (cdr lst5)))\n                     \
    \   (if (null? lst6)\n                          (list min max min min min min)\n\
    \                          (let ((lst7 (cdr lst6)))\n                        \
    \    (if (null? lst7)\n                              (list min max min min min\
    \ min min)\n                              (let ((lst8 (cdr lst7)))\n         \
    \                       (if (null? lst8)\n                                  (list\
    \ min max min min min min min min)\n                                  (let ((lst9\
    \ (cdr lst8)))\n                                    (if (null? lst9)\n       \
    \                               (list min max min min min min min min min)\n \
    \                                     (let ((lst10 (cdr lst9)))\n            \
    \                            (if (null? lst10)\n                             \
    \             (list min max min min min min min min min min)\n               \
    \                           (let ((lst11 (cdr lst10)))\n                     \
    \                       (if (null? lst11)\n                                  \
    \            (list min max min min min min min min min min min)\n            \
    \                                  (let ((lst12 (cdr lst11)))\n              \
    \                                  (if (null? lst12)\n                       \
    \                           (list min max min min min min min min min min min\
    \ min)\n                                                  (let ((lst13 (cdr lst12)))\n\
    \                                                    (", "  (if (null? lst)\n\
    \    (list)\n    (let ((min (car lst))\n          (max (cdr lst)))\n      (let\
    \ ((result (cons min (strange_sort_list (cdr lst))))\n            (lst (cdr lst)))\n\
    \        (cons (car lst) (strange_sort_list (cdr lst)))))))\n\n;; Given list of\
    \ integers, return list in strange order.\n;; Strange sorting, is when you start\
    \ with the minimum value,\n;; then maximum of the remaining integers, then minimum\
    \ and so on.\n;; Examples:\n;; >>> (strange_sort_list (list 1 2 3 4))\n;; (list\
    \ 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n;; (list 5 5 5 5)\n;; >>>\
    \ (strange_sort_list (list ))\n;; (list )", "  (if (null? lst)\n    lst\n    (let\
    \ ((min (car lst))\n          (max (cdr lst)))\n      (let ((lst (cdr lst)))\n\
    \        (if (null? lst)\n          (cons min max)\n          (cons min (strange_sort_list\
    \ (cdr lst)))\n          ))))\n)\n\n;; Given list of integers, return list in\
    \ strange order.\n;; Strange sorting, is when you start with the minimum value,\n\
    ;; then maximum of the remaining integers, then minimum and so on.\n;; Examples:\n\
    ;; >>> (strange_sort_list (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list\
    \ (list 5 5 5 5))\n;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list\
    \ )", "  (if (null? lst)\n    (list)\n    (let ((min (car lst))\n          (max\
    \ (cdr lst)))\n      (let ((i (car lst)))\n        (if (null? i)\n          (list\
    \ min max)\n          (let ((j (cdr lst)))\n            (if (null? j)\n      \
    \        (list min max min)\n              (let ((k (car lst)))\n            \
    \    (if (null? k)\n                  (list min max min max)\n               \
    \   (strange_sort_list (append (list i) (cdr lst)))))\n                (strange_sort_list\
    \ (append (list min) (cdr lst)))))\n            (strange_sort_list (append (list\
    \ min) (cdr lst)))))\n      (strange_sort_list (append (list min) (cdr lst))))))\n\
    \n;; Given list of integers, return list in strange order.\n;; Strange sorting,\
    \ is when you start with the minimum value,\n;; then maximum of the remaining\
    \ integers, then minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list (list\
    \ 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n;;\
    \ (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )", "  (if (empty?\
    \ lst)\n    lst\n    (let ((min (car lst))\n          (rest (cdr lst)))\n    \
    \  (if (empty? rest)\n        (list min)\n      (let ((max (car rest))\n     \
    \       (rest (cdr rest)))\n        (let ((min (car rest))\n              (rest\
    \ (cdr rest)))\n          (if (empty? rest)\n            (list min max min)\n\
    \          (let ((max (car rest))\n                (rest (cdr rest)))\n      \
    \      (let ((min (car rest))\n                  (rest (cdr rest)))\n        \
    \      (if (empty? rest)\n                (list min max min max)\n           \
    \   (let ((max (car rest))\n                    (rest (cdr rest)))\n         \
    \       (let ((min (car rest))\n                      (rest (cdr rest)))\n   \
    \               (if (empty? rest)\n                    (list min max min max min)\n\
    \                  (let ((max (car rest))\n                        (rest (cdr\
    \ rest)))\n                    (let ((min (car rest))\n                      \
    \    (rest (cdr rest)))\n                      (if (empty? rest)\n           \
    \             (list min max min max min max)\n                      (let ((max\
    \ (car rest))\n                            (rest (cdr rest)))\n              \
    \          (let ((min (car rest))\n                              (rest (cdr rest)))\n\
    \                          (if (empty? rest)\n                            (list\
    \ min max min max min max max)\n                          (let ((max (car rest))\n\
    \                                (rest (cdr rest)))\n                        \
    \    (let ((min (car rest))\n                                  (rest (cdr rest)))\n\
    \                              (if (empty? rest)\n                           \
    \     (list min max min max min max max max)\n                              (let\
    \ ((max (car rest))\n                                    (rest (cdr rest)))\n\
    \                                (let ((min (car rest))\n                    \
    \                  (rest (cdr rest)))\n                                 (if (empty?\
    \ rest)\n                                   (list min max min max min max max\
    \ max)\n                                 (let ((max (car rest))\n            \
    \                           (rest (cdr rest)))\n                             \
    \      (let ((min (car rest))\n                                         (rest\
    \ (cdr rest)))\n                               ", "  (let ((result (list)))\n\
    \    (let ((i 0))\n      (while (< i (length lst))\n        (let ((min (car lst)))\n\
    \          (let ((max (cdr lst)))\n            (let ((next (cdr min)))\n     \
    \         (if (null? next)\n                (car min)\n                (if (null?\
    \ max)\n                  (car max)\n                  (if (null? min)\n     \
    \               (car next)\n                    (if (null? max)\n            \
    \          (car next)\n                      (car max)\n                     \
    \ (car min)\n                      (car next)\n                      (car max)\n\
    \                      (car min)\n                      (car next)\n         \
    \             (car max)\n                      (car min)\n                   \
    \   (car next)\n                      (car max)\n                      (car min)\n\
    \                      (car next)\n                      (car max)\n         \
    \             (car min)\n                      (car next)\n                  \
    \    (car max)\n                      (car min)\n                      (car next)\n\
    \                      (car max)\n                      (car min)\n          \
    \            (car next)\n                      (car max)\n                   \
    \   (car min)\n                      (car next)\n                      (car max)\n\
    \                      (car min)\n                      (car next)\n         \
    \             (car max)\n                      (car min)\n                   \
    \   (car next)\n                      (car max)\n                      (car min)\n\
    \                      (car next)\n                      (car max)\n         \
    \             (car min)\n                      (car next)\n                  \
    \    (car max)\n                      (car min)\n                      (car next)\n\
    \                      (car max)\n                      (car min)\n          \
    \            (car next)\n                      (car max)\n                   \
    \   (car min)\n                      (car next)\n                      (car max)\n\
    \                      (car min)\n                      (car next)\n         \
    \             (car max)\n                      (car min)\n                   \
    \   (car next)\n                      (car max)\n                      (car min)\n\
    \                      (car next)\n                      (car max)\n         \
    \             (car min)\n                      (car next)\n                  \
    \    (car max)\n                      (car min)\n                      (car next)\n\
    \                      (car max)\n                      (car min)\n          \
    \            (car next)\n                      (car max)\n                   \
    \   (car min)\n", "  (if (null? lst)\n    lst\n    (let ((min (car lst))\n   \
    \       (max (cdr lst)))\n      (let ((lst (cdr lst)))\n        (if (null? lst)\n\
    \          lst\n          (let ((lst (cdr lst)))\n            (if (null? lst)\n\
    \              lst\n              (let ((lst (cdr lst)))\n                (if\
    \ (null? lst)\n                  lst\n                  (let ((lst (cdr lst)))\n\
    \                    (if (null? lst)\n                      lst\n            \
    \          (let ((lst (cdr lst)))\n                        (if (null? lst)\n \
    \                         lst\n                          (let ((lst (cdr lst)))\n\
    \                            (if (null? lst)\n                              lst\n\
    \                              (let ((lst (cdr lst)))\n                      \
    \          (if (null? lst)\n                                  lst\n          \
    \                        (let ((lst (cdr lst)))\n                            \
    \        (if (null? lst)\n                                      lst\n        \
    \                              (let ((lst (cdr lst))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
  "  (if (null? lst)\n    (list)\n    (let ((min (car lst))\n          (max (cdr lst)))\n\
    \      (let ((curr (car lst)))\n        (if (null? curr)\n          (list min\
    \ max)\n          (let ((next (cdr curr)))\n            (let ((next_min (car next)))\n\
    \              (let ((next_max (cdr next)))\n                (list\n         \
    \         (if (null? next_min)\n                    min\n                    (if\
    \ (null? next_max)\n                      (list min max)\n                   \
    \   (list min next_min next_max)))\n                  (if (null? next_max)\n \
    \                   min\n                    (if (null? next_min)\n          \
    \            (list min max)\n                      (list min next_min next_max)))\n\
    \                  (if (null? next_min)\n                    min\n           \
    \         (if (null? next_max)\n                      (list min max)\n       \
    \               (list min next_min next_max)))\n                  (if (null? next_max)\n\
    \                    min\n                    (if (null? next_min)\n         \
    \             (list min max)\n                      (list min next_min next_max))))))))))))))\n\
    \n;; Given list of integers, return list in strange order.\n;; Strange sorting,\
    \ is when you start with the minimum value,\n;; then maximum of the remaining\
    \ integers, then minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list (list\
    \ 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n;;\
    \ (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )", "  (if (null?\
    \ lst)\n    (list)\n    (let ((min (car lst))\n          (max (cdr lst)))\n  \
    \    (let ((lst2 (cdr lst)))\n        (let ((lst3 (cdr lst2)))\n          (let\
    \ ((lst4 (cdr lst3)))\n            (list (car min) (car max) (car min) (car max)\
    \ (car min) (car max) (car min) (car max) (car min) (car max) (car min) (car max)\
    \ (car min) (car max) (car min) (car max) (car min) (car max) (car min) (car max)\
    \ (car min) (car max) (car min) (car max) (car min) (car max) (car min) (car max)\
    \ (car min) (car max) (car min) (car max) (car min) (car max) (car min) (car max)\
    \ (car min) (car max) (car min) (car max) (car min) (car max) (car min) (car max)\
    \ (car min) (car max) (car min) (car max) (car min) (car max) (car min) (car max)\
    \ (car min) (car max) (car min) (car max) (car min) (car max) (car min) (car max)\
    \ (car min) (car max) (car min) (car max) (car min) (car max) (car min) (car max)\
    \ (car min) (car max) (car min) (car max) (car min) (car max) (car min) (car max)\
    \ (car min) (car max) (car min) (car max) (car min) (car max) (car min) (car max)\
    \ (car min) (car max) (car min) (car max) (car min) (car max) (car min) (car max)\
    \ (car min) (car max) (car min) (car max) (car min) (car max) (car min) (car max)\
    \ (car min) (car max) (car min) (car max) (car min) (car max) (car min) (", " \
    \ (if (null? lst)\n    (list)\n    (let ((head (car lst))\n          (tail (cdr\
    \ lst)))\n      (let ((min (car head))\n            (max (car tail)))\n      \
    \  (let ((min (car min))\n              (max (car max)))\n          (let ((min\
    \ (car min))\n                (max (car max)))\n            (let ((min (car min))\n\
    \                  (max (car max)))\n              (let ((min (car min))\n   \
    \                 (max (car max)))\n                (let ((min (car min))\n  \
    \                    (max (car max)))\n                  (let ((min (car min))\n\
    \                        (max (car max)))\n                    (let ((min (car\
    \ min))\n                          (max (car max)))\n                      (let\
    \ ((min (car min))\n                            (max (car max)))\n           \
    \             (let ((min (car min))\n                              (max (car max)))\n\
    \                          (let ((min (car min))\n                           \
    \     (max (car max)))\n                            (let ((min (car min))\n  \
    \                                (max (car max)))\n                          \
    \    (let ((min (car min))\n                                    (max (car max)))\n\
    \                                (let ((min (car min))\n                     \
    \                 (max (car max)))\n                                  (let ((min\
    \ (car min))\n                                        (max (car max)))\n     \
    \                               (let ((min (car min))\n                      \
    \                    (max (car max)))\n                                      (let\
    \ ((min (car min))\n                                            (max (car max)))\n\
    \                                        (let ((min (car min))\n             \
    \                                 (max (car max)))\n                         \
    \                 (let ((min (car min))\n                                    \
    \            (max (car max)))\n                                            (let\
    \ ((min (car min))\n                                                  (max (car\
    \ max)))\n                                              (let ((min (car min))\n\
    \                                                   (max (car max)))\n       \
    \                                         (let ((min (car min))\n            \
    \                                          (max (car max)))\n                \
    \                                  (let ((min (car min))\n                   \
    \                                      (max (", "  (if (null? lst)\n    (list)\n\
    \    (let ((min (car lst))\n          (max (cdr lst)))\n      (let ((lst (cdr\
    \ lst)))\n        (if (null? lst)\n          (list min max)\n          (let ((lst\
    \ (cdr lst)))\n            (if (null? lst)\n              (list min max min)\n\
    \              (let ((lst (cdr lst)))\n                (if (null? lst)\n     \
    \             (list min max min min)\n                  (let ((lst (cdr lst)))\n\
    \                    (if (null? lst)\n                      (list min max min\
    \ min min)\n                      (error \"strange_sort_list: too many elements\"\
    ))))))))))))))\n", "  (if (null? lst)\n    (list)\n    (let ((min (car lst))\n\
    \          (max (cdr lst)))\n      (let ((result (cons min (strange_sort_list\
    \ (cdr lst))))\n            (lst (cdr lst)))\n        (cons (car lst) result))))\n\
    \  )\n\n;; Given list of integers, return list in strange order.\n;; Strange sorting,\
    \ is when you start with the minimum value,\n;; then maximum of the remaining\
    \ integers, then minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list (list\
    \ 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n;;\
    \ (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )", "  (if (null?\
    \ lst)\n    (list)\n    (let ((min (car lst))\n          (rest (cdr lst)))\n \
    \     (let ((max (car rest))\n            (new_rest (cdr rest)))\n        (let\
    \ ((new_min (car new_rest))\n              (new_max (car rest)))\n          (if\
    \ (null? new_rest)\n            (list min max)\n            (let ((new_min (car\
    \ new_rest))\n                  (new_max (car rest)))\n              (let ((new_min\
    \ (car new_rest))\n                    (new_max (car rest)))\n               \
    \ (list min new_min max new_max))))))))))\n", "  (if (null? lst)\n    lst\n  \
    \  (let ((min (car lst))\n          (max (cdr lst)))\n      (let ((curr (car lst)))\n\
    \        (if (null? curr)\n          (cdr lst)\n          (let ((next (car lst)))\n\
    \            (if (null? next)\n              (cdr lst)\n              (strange_sort_list\
    \ (append (list min max) (cdr lst))))))))))\n\n;; Given list of integers, return\
    \ list in strange order.\n;; Strange sorting, is when you start with the minimum\
    \ value,\n;; then maximum of the remaining integers, then minimum and so on.\n\
    ;; Examples:\n;; >>> (strange_sort_list (list 1 2 3 4))\n;; (list 1 4 2 3)\n;;\
    \ >>> (strange_sort_list (list 5 5 5 5))\n;; (list 5 5 5 5)\n;; >>> (strange_sort_list\
    \ (list ))\n;; (list )", "  (if (null? lst)\n    lst\n    (let ((min (car lst))\n\
    \          (max (cdr lst)))\n      (let ((lst2 (cdr lst)))\n        (let ((lst3\
    \ (cdr lst2)))\n          (let ((lst4 (cdr lst3)))\n            (let ((lst5 (cdr\
    \ lst4)))\n              (let ((lst6 (cdr lst5)))\n                (let ((lst7\
    \ (cdr lst6)))\n                  (let ((lst8 (cdr lst7)))\n                 \
    \   (let ((lst9 (cdr lst8)))\n                      (let ((lst10 (cdr lst9)))\n\
    \                        (let ((lst11 (cdr lst10)))\n                        \
    \  (let ((lst12 (cdr lst11)))\n                            (let ((lst13 (cdr lst12)))\n\
    \                              (let ((lst14 (cdr lst13)))\n                  \
    \              (let ((lst15 (cdr lst14)))\n                                  (let\
    \ ((lst16 (cdr lst15)))\n                                    (let ((lst17 (cdr\
    \ lst16)))\n                                      (let ((lst18 (cdr lst17)))\n\
    \                                        (let ((lst19 (cdr lst18)))\n        \
    \                                  (let ((lst20 (cdr lst19)))\n              \
    \                              (let ((lst21 (cdr lst20)))\n                  \
    \                            (let ((lst22 (cdr lst21)))\n                    \
    \                            (let ((lst23 (cdr lst22)))\n                    \
    \                              (let ((lst24 (cdr lst23)))\n                  \
    \                                  (let ((lst25 (cdr lst24)))\n              \
    \                                        (let ((lst26 (cdr lst25)))\n        \
    \                                                (let ((lst27 (cdr lst26)))\n\
    \                                                          (let ((lst28 (cdr lst27)))\n\
    \                                                            (let ((lst29 (cdr\
    \ lst28)))", "  (if (null? lst)\n    (list)\n    (let ((min (car lst))\n     \
    \     (rest (cdr lst)))\n      (let ((max (car rest))\n            (result (cons\
    \ min max)))\n        (strange_sort_list (cdr rest))))))\n\n;; Given list of integers,\
    \ return list in strange order.\n;; Strange sorting, is when you start with the\
    \ minimum value,\n;; then maximum of the remaining integers, then minimum and\
    \ so on.\n;; Examples:\n;; >>> (strange_sort_list (list 1 2 3 4))\n;; (list 1\
    \ 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n;; (list 5 5 5 5)\n;; >>>\
    \ (strange_sort_list (list ))\n;; (list )", "  (if (null? lst)\n    (list)\n \
    \   (let ((min (car lst))\n          (max (cdr lst)))\n      (let ((lst (cdr lst)))\n\
    \        (if (null? lst)\n            (list min max)\n            (let ((lst (cdr\
    \ lst)))\n              (if (null? lst)\n                  (list min max min)\n\
    \                  (let ((lst (cdr lst)))\n                    (if (null? lst)\n\
    \                        (list min max min min)\n                        (let\
    \ ((lst (cdr lst)))\n                          (if (null? lst)\n             \
    \                 (list min max min min min)\n                              (let\
    \ ((lst (cdr lst)))\n                                (if (null? lst)\n       \
    \                             (list min max min min min min)\n               \
    \                     (let ((lst (cdr lst)))\n                               \
    \       (if (null? lst)\n                                          (list min max\
    \ min min min min min)\n                                          (let ((lst (cdr\
    \ lst)))\n                                            (if (null? lst)\n      \
    \                                          (list min max min min min min min min)\n\
    \                                                (let ((lst (cdr lst)))\n    \
    \                                              (if (null? lst)\n             \
    \                                         (list min max min min min min min min\
    \ min)\n                                                      (let ((lst (cdr\
    \ lst)))\n                                                        (if (null? lst)\n\
    \                                                            (list min max min\
    \ min min min min min min min)\n                                             \
    \               (let ((lst (cdr lst)))\n                                     \
    \                         (if (null? lst)\n                                  \
    \                                (list min max min min min min min min min min\
    \ min)\n                                                                  (let\
    \ ((lst (cdr lst)))\n                                                        \
    \              (if (null? lst)\n                                             \
    \                             (list min max min min min min min min min min min\
    \ min)\n                                                                     \
    \     (let ((lst (cdr lst", "  (if (null? lst)\n    (list)\n    (let ((min (car\
    \ lst))\n          (max (cdr lst)))\n      (let ((i (car lst)))\n        (if (null?\
    \ i)\n          (list min max)\n          (let ((next (cdr i)))\n            (let\
    \ ((next_min (car next)))\n              (let ((next_max (cdr next)))\n      \
    \          (list\n                  (if (null? next_min)\n                   \
    \ min\n                    (if (null? next_max)\n                      (list min\
    \ max)\n                      (list min next_max min next_min)))\n           \
    \       (if (null? next_max)\n                    max\n                    (if\
    \ (null? next_min)\n                      (list min max)\n                   \
    \   (list min next_min max next_max)))\n                  (if (null? next_min)\n\
    \                    min\n                    (if (null? next_max)\n         \
    \             (list min max)\n                      (list min next_max min next_min))))))))))))))\n",
  "  (if (null? lst)\n    lst\n    (let ((min (car lst))\n          (max (cdr lst)))\n\
    \      (let ((lst2 (cdr lst)))\n        (if (null? lst2)\n          (list min\
    \ max)\n          (let ((min2 (car lst2))\n                (max2 (cdr lst2)))\n\
    \            (list min min2 max max2))))))))\n\n;; Given list of integers, return\
    \ list sorted in ascending order.\n;; Examples:\n;; >>> (ascending_sort_list (list\
    \ 1 2 3 4))\n;; (list 1 2 3 4)\n;; >>> (ascending_sort_list (list 5 5 5 5))\n\
    ;; (list 5 5 5 5)\n;; >>> (ascending_sort_list (list ))\n;; (list )", "  (if (null?\
    \ lst)\n    lst\n    (let ((head (car lst))\n          (tail (cdr lst)))\n   \
    \   (let ((min (car head))\n            (max (car tail)))\n        (let ((min\
    \ (car min))\n              (max (car max)))\n          (let ((min (car min))\n\
    \                (max (car max)))\n            (let ((min (car min))\n       \
    \           (max (car max)))\n              (let ((min (car min))\n          \
    \          (max (car max)))\n                (let ((min (car min))\n         \
    \             (max (car max)))\n                  (let ((min (car min))\n    \
    \                    (max (car max)))\n                    (let ((min (car min))\n\
    \                          (max (car max)))\n                      (let ((min\
    \ (car min))\n                            (max (car max)))\n                 \
    \       (let ((min (car min))\n                              (max (car max)))\n\
    \                          (let ((min (car min))\n                           \
    \     (max (car max)))\n                            (let ((min (car min))\n  \
    \                                (max (car max)))\n                          \
    \    (let ((min (car min))\n                                    (max (car max)))\n\
    \                                (let ((min (car min))\n                     \
    \                 (max (car max)))\n                                  (let ((min\
    \ (car min))\n                                        (max (car max)))\n     \
    \                               (let ((min (car min))\n                      \
    \                    (max (car max)))\n                                      (let\
    \ ((min (car min))\n                                            (max (car max)))\n\
    \                                        (let ((min (car min))\n             \
    \                                 (max (car max)))\n                         \
    \                 (let ((min (car min))\n                                    \
    \            (max (car max)))\n                                            (let\
    \ ((min (car min))\n                                                  (max (car\
    \ max)))\n                                              (let ((min (car min))\n\
    \                                                   (max (car max)))\n       \
    \                                         (let ((min (car min))\n            \
    \                                          (max (car max)))\n                \
    \                                  (let ((min (car min))\n                   \
    \                                      (max (car", "  (let ((result (list)))\n\
    \    (if (null? lst)\n      result\n      (let ((min (car lst))\n            (max\
    \ (cdr lst)))\n        (let ((i (1)))\n          (while (< i (length lst))\n \
    \           (let ((curr (car lst)))\n              (if (< min curr)\n        \
    \        min\n                (if (> max curr)\n                  max\n      \
    \            (set! min (car lst))\n                  (set! max (cdr lst))\n  \
    \                (set! i (i + 1))))))\n          (append result min max)))\n \
    \   result))\n\n;; Given list of integers, return list in sorted order.\n;; Sorted\
    \ order, is when you start with the minimum value,\n;; then maximum of the remaining\
    \ integers, then minimum and so on.\n;; Examples:\n;; >>> (sorted_sort_list (list\
    \ 1 2 3 4))\n;; (list 1 2 3 4)\n;; >>> (sorted_sort_list (list 5 5 5 5))\n;; (list\
    \ 5 5 5 5)\n;; >>> (sorted_sort_list (list ))\n;; (list )", "  (if (null? lst)\n\
    \    (list)\n    (let ((min (car lst))\n          (max (cdr lst)))\n      (let\
    \ ((new_lst (cons min (cdr lst))))\n        (strange_sort_list (cdr new_lst))))))\n\
    \n;; Given list of integers, return list in strange order.\n;; Strange sorting,\
    \ is when you start with the minimum value,\n;; then maximum of the remaining\
    \ integers, then minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list (list\
    \ 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n;;\
    \ (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )", "  (if (null?\
    \ lst)\n    (list)\n    (let ((min (car lst))\n          (max (cdr lst)))\n  \
    \    (let ((lst (cdr lst)))\n        (if (null? lst)\n          (list min max)\n\
    \          (let ((lst (cdr lst)))\n            (if (null? lst)\n             \
    \ (list min max min)\n              (let ((lst (cdr lst)))\n                (if\
    \ (null? lst)\n                  (list min max min min)\n                  (let\
    \ ((lst (cdr lst)))\n                    (if (null? lst)\n                   \
    \   (list min max min min min)\n                      (error \"strange_sort_list:\
    \ too many values\")\n                      (strange_sort_list (cdr lst)))))))))))))))\n\
    \n;; Given list of integers, return list in sorted order.\n;; Sorting, is when\
    \ you start with the minimum value,\n;; then maximum of the remaining integers,\
    \ then minimum and so on.\n;; Examples:\n;; >>> (sort_list (list 1 2 3 4))\n;;\
    \ (list 1 2 3 4)\n;; >>> (sort_list (list 5 5 5 5))\n;; (list 5 5 5 5)\n;; >>>\
    \ (sort_list (list ))\n;; (list )", "  (if (null? lst)\n    lst\n    (let ((head\
    \ (car lst))\n          (tail (cdr lst)))\n      (let ((min (car head))\n    \
    \        (max (car tail)))\n        (let ((min (car min))\n              (max\
    \ (car max)))\n          (let ((min (car min))\n                (max (car max)))\n\
    \            (let ((min (car min))\n                  (max (car max)))\n     \
    \         (let ((min (car min))\n                    (max (car max)))\n      \
    \          (let ((min (car min))\n                      (max (car max)))\n   \
    \               (let ((min (car min))\n                        (max (car max)))\n\
    \                    (let ((min (car min))\n                          (max (car\
    \ max)))\n                      (let ((min (car min))\n                      \
    \      (max (car max)))\n                        (let ((min (car min))\n     \
    \                         (max (car max)))\n                          (let ((min\
    \ (car min))\n                                (max (car max)))\n             \
    \               (let ((min (car min))\n                                  (max\
    \ (car max)))\n                              (let ((min (car min))\n         \
    \                           (max (car max)))\n                               \
    \ (let ((min (car min))\n                                      (max (car max)))\n\
    \                                  (let ((min (car min))\n                   \
    \                     (max (car max)))\n                                    (let\
    \ ((min (car min))\n                                          (max (car max)))\n\
    \                                      (let ((min (car min))\n               \
    \                             (max (car max)))\n                             \
    \           (let ((min (car min))\n                                          \
    \    (max (car max)))\n                                          (let ((min (car\
    \ min))\n                                                (max (car max)))\n  \
    \                                          (let ((min (car min))\n           \
    \                                       (max (car max)))\n                   \
    \                           (let ((min (car min))\n                          \
    \                         (max (car max)))\n                                 \
    \               (let ((min (car min))\n                                      \
    \                (max (car max)))\n                                          \
    \        (let ((min (car min))\n                                             \
    \            (max (car", "  (if (null? lst)\n    (list)\n    (let ((min (car lst))\n\
    \          (rest (cdr lst)))\n      (if (null? rest)\n        (list min)\n   \
    \     (let ((max (car rest))\n              (rest (cdr rest)))\n          (if\
    \ (null? rest)\n            (list min max)\n            (let ((min (car rest))\n\
    \                  (rest (cdr rest)))\n              (if (null? rest)\n      \
    \          (list min max min)\n                (let ((max (car rest))\n      \
    \                (rest (cdr rest)))\n                  (if (null? rest)\n    \
    \                (list min max min max)\n                    (let ((min (car rest))\n\
    \                          (rest (cdr rest)))\n                      (if (null?\
    \ rest)\n                        (list min max min max min)\n                \
    \        (let ((max (car rest))\n                              (rest (cdr rest)))\n\
    \                          (if (null? rest)\n                            (list\
    \ min max min max min max)\n                            (let ((min (car rest))\n\
    \                                  (rest (cdr rest)))\n                      \
    \        (if (null? rest)\n                                (list min max min max\
    \ min max min max)\n                                (list min max min max min\
    \ max min max min max))))))))))))))))))))))))\n\n;; Given list of integers, return\
    \ list in strange order.\n;; Strange sorting, is when you start with the minimum\
    \ value,\n;; then maximum of the remaining integers, then minimum and so on.\n\
    ;; Examples:\n;; >>> (strange_sort_list (list 1 2 3 4))\n;; (list 1 4 2 3)\n;;\
    \ >>> (strange_sort_list (list 5 5 5 5))\n;; (list 5 5 5 5)\n;; >>> (strange_sort_list\
    \ (list ))\n;; (list )", "  (let ((result (list)))\n    (let ((min (car lst)))\n\
    \      (let ((max (car (cdr lst))))\n        (let ((i (cdr (cdr lst))))\n    \
    \      (if (null? i)\n            (append result min)\n            (append result\
    \ max)\n            (append result min)\n            (append result i)))\n   \
    \       (append result min)))))\n\n;; Given list of integers, return list in strange\
    \ order.\n;; Strange sorting, is when you start with the minimum value,\n;; then\
    \ maximum of the remaining integers, then minimum and so on.\n;; Examples:\n;;\
    \ >>> (strange_sort_list (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list\
    \ (list 5 5 5 5))\n;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list\
    \ )", "  (if (null? lst)\n    (list)\n    (let ((min (car lst))\n          (max\
    \ (cdr lst)))\n      (let ((lst2 (cdr lst)))\n        (if (null? lst2)\n     \
    \     (list min max)\n          (let ((min2 (car lst2))\n                (max2\
    \ (cdr lst2)))\n            (let ((lst3 (cdr lst2)))\n              (if (null?\
    \ lst3)\n                (list min2 max2)\n                (let ((min3 (car lst3))\n\
    \                      (max3 (cdr lst3)))\n                  (list min min2 min3\
    \ max max2 max3)))))))))))\n\n;; Given list of integers, return list in sorted\
    \ order.\n;; Sorted order, is when you start with the minimum value,\n;; then\
    \ minimum of the remaining integers, then minimum and so on.\n;; Examples:\n;;\
    \ >>> (sort_list (list 1 2 3 4))\n;; (list 1 2 3 4)\n;; >>> (sort_list (list 5\
    \ 5 5 5))\n;; (list 5 5 5 5)\n;; >>> (sort_list (list ))\n;; (list )", "  (let\
    \ ((lst-size (length lst)))\n    (if (eq? lst-size 0)\n      lst\n      (let ((min\
    \ (car lst))\n            (max (cdr lst)))\n        (let ((lst-size (lst-size\
    \ - 1)))\n          (if (eq? lst-size 0)\n            (list min max)\n       \
    \     (let ((lst-size (lst-size - 1)))\n              (let ((lst-size (lst-size\
    \ - 1)))\n                (if (eq? lst-size 0)\n                  (list min max\
    \ min)\n                  (let ((lst-size (lst-size - 1)))\n                 \
    \   (list min max min max))))))))))))))\n", "  (if (null? lst)\n    (list)\n \
    \   (let ((min (car lst))\n          (rest (cdr lst)))\n      (let ((max (car\
    \ rest))\n            (rest (cdr rest)))\n        (let ((min (car rest))\n   \
    \           (rest (cdr rest)))\n          (let ((max (car rest))\n           \
    \     (rest (cdr rest)))\n            (let ((min (car rest))\n               \
    \   (rest (cdr rest)))\n              (let ((max (car rest))\n               \
    \     (rest (cdr rest)))\n                (let ((min (car rest))\n           \
    \           (rest (cdr rest)))\n                  (let ((max (car rest))\n   \
    \                     (rest (cdr rest)))\n                    (let ((min (car\
    \ rest))\n                          (rest (cdr rest)))\n                     \
    \ (let ((max (car rest))\n                            (rest (cdr rest)))\n   \
    \                     (let ((min (car rest))\n                              (rest\
    \ (cdr rest)))\n                          (let ((max (car rest))\n           \
    \                     (rest (cdr rest)))\n                            (let ((min\
    \ (car rest))\n                                  (rest (cdr rest)))\n        \
    \                      (let ((max (car rest))\n                              \
    \      (rest (cdr rest)))\n                                (let ((min (car rest))\n\
    \                                      (rest (cdr rest)))\n                  \
    \                (let ((max (car rest))\n                                    \
    \    (rest (cdr rest)))\n                                    (let ((min (car rest))\n\
    \                                          (rest (cdr rest)))\n              \
    \                        (let ((max (car rest))\n                            \
    \                (rest (cdr rest)))\n                                        (let\
    \ ((min (car rest))\n                                              (rest (cdr\
    \ rest)))\n                                          (let ((max (car rest))\n\
    \                                                (rest (cdr rest)))\n        \
    \                                    (let ((min (car rest))\n                \
    \                                  (rest (cdr rest)))\n                      \
    \                        (let ((max (car rest))\n                            \
    \                       (rest (cdr rest)))\n                                 \
    \               (let ((min (car rest))\n                                     \
    \                 (rest (cdr rest)))\n                                       \
    \         ", "  (if (null? lst)\n    (list)\n    (let ((min (car lst))\n     \
    \     (max (cdr lst)))\n      (let ((result (list min max))\n            (rest\
    \ (cdr lst)))\n        (strange_sort_list (cdr rest))))))\n\n;; Given list of\
    \ integers, return list in strange order.\n;; Strange sorting, is when you start\
    \ with the minimum value,\n;; then maximum of the remaining integers, then minimum\
    \ and so on.\n;; Examples:\n;; >>> (strange_sort_list (list 1 2 3 4))\n;; (list\
    \ 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n;; (list 5 5 5 5)\n;; >>>\
    \ (strange_sort_list (list ))\n;; (list )", "  (if (null? lst)\n    lst\n    (let\
    \ ((min (car lst))\n          (max (cdr lst)))\n      (let ((result (cons min\
    \ (cdr lst))))\n        (let ((lst (cdr lst)))\n          (if (null? lst)\n  \
    \          result\n            (let ((lst (cdr lst)))\n              (let ((result\
    \ (cons max (cdr lst))))\n                (let ((lst (cdr lst)))\n           \
    \       (if (null? lst)\n                    result\n                    (let\
    \ ((lst (cdr lst)))\n                      (let ((result (cons min (cdr lst))))\n\
    \                        (let ((lst (cdr lst)))\n                          (if\
    \ (null? lst)\n                            result\n                          \
    \  (let ((lst (cdr lst))))\n                              (let ((result (cons\
    \ max (cdr lst))))\n                                (let ((lst (cdr lst)))\n \
    \                                 (if (null? lst)\n                          \
    \          result\n                                    (let ((lst (cdr lst))))\n\
    \                                      (let ((result (cons min (cdr lst))))\n\
    \                                        (let ((lst (cdr lst)))\n            \
    \                              (if (null? lst)\n                             \
    \               result\n                                            (let ((lst\
    \ (cdr lst))))\n                                              (let ((result (cons\
    \ max (cdr lst))))\n                                                (let ((lst\
    \ (cdr lst)))\n                                                  (if (null? lst)\n\
    \                                                    result\n                \
    \                                    (let ((lst (cdr lst))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
  "  (if (null? lst)\n    (list)\n    (let ((min (car lst))\n          (max (cdr lst)))\n\
    \      (let ((result (cons min (strange_sort_list (cdr lst))))\n            (lst\
    \ (cdr lst)))\n        (cons (car lst)\n           (if (null? lst)\n         \
    \    result\n             (cons (car lst)\n                  (strange_sort_list\
    \ (cdr lst))))))))\n\n;; Given list of integers, return list in strange order.\n\
    ;; Strange sorting, is when you start with the minimum value,\n;; then maximum\
    \ of the remaining integers, then minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list\
    \ (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n\
    ;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )", "  (if (null?\
    \ lst)\n    lst\n    (let ((head (car lst))\n          (tail (cdr lst)))\n   \
    \   (let ((min (car head))\n            (max (car tail)))\n        (let ((min\
    \ (car min))\n              (max (car max)))\n          (let ((min (car min))\n\
    \                (max (car max)))\n            (let ((min (car min))\n       \
    \           (max (car max)))\n              (let ((min (car min))\n          \
    \          (max (car max)))\n                (let ((min (car min))\n         \
    \             (max (car max)))\n                  (let ((min (car min))\n    \
    \                    (max (car max)))\n                    (let ((min (car min))\n\
    \                          (max (car max)))\n                      (let ((min\
    \ (car min))\n                            (max (car max)))\n                 \
    \       (let ((min (car min))\n                              (max (car max)))\n\
    \                          (let ((min (car min))\n                           \
    \     (max (car max)))\n                            (let ((min (car min))\n  \
    \                                (max (car max)))\n                          \
    \    (let ((min (car min))\n                                    (max (car max)))\n\
    \                                (let ((min (car min))\n                     \
    \                 (max (car max)))\n                                  (let ((min\
    \ (car min))\n                                        (max (car max)))\n     \
    \                               (let ((min (car min))\n                      \
    \                    (max (car max)))\n                                      (let\
    \ ((min (car min))\n                                            (max (car max)))\n\
    \                                        (let ((min (car min))\n             \
    \                                 (max (car max)))\n                         \
    \                 (let ((min (car min))\n                                    \
    \            (max (car max)))\n                                            (let\
    \ ((min (car min))\n                                                  (max (car\
    \ max)))\n                                              (let ((min (car min))\n\
    \                                                   (max (car max)))\n       \
    \                                         (let ((min (car min))\n            \
    \                                          (max (car max)))\n                \
    \                                  (let ((min (car min))\n                   \
    \                                      (max (car", "  (if (null? lst)\n    (list)\n\
    \    (let ((min (car lst))\n          (max (cdr lst)))\n      (let ((curr (car\
    \ lst)))\n        (if (null? curr)\n          (list min max)\n          (let ((next\
    \ (cdr curr)))\n            (let ((next_min (car next))\n                  (next_max\
    \ (cdr next)))\n              (strange_sort_list (list min next_min max next_max))))))))\n\
    \n;; Given list of integers, return list in sorted order.\n;; Sorted order, is\
    \ when you start with the minimum value,\n;; then minimum of the remaining integers,\
    \ then minimum and so on.\n;; Examples:\n;; >>> (sorted_sort_list (list 1 2 3\
    \ 4))\n;; (list 1 2 3 4)\n;; >>> (sorted_sort_list (list 5 5 5 5))\n;; (list 5\
    \ 5 5 5)\n;; >>> (sorted_sort_list (list ))\n;; (list )", "  (let ((result (list)))\n\
    \    (if (null? lst)\n      result\n      (let ((head (car lst)))\n        (let\
    \ ((tail (cdr lst)))\n          (if (null? tail)\n            (append result head)\n\
    \            (append result (strange_sort_list tail)))))\n      (append result\
    \ head))))\n\n;; Given list of integers, return list in strange order.\n;; Strange\
    \ sorting, is when you start with the minimum value,\n;; then maximum of the remaining\
    \ integers, then minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list (list\
    \ 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n;;\
    \ (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )", "  (if (null?\
    \ lst)\n    lst\n    (let ((min (car lst))\n          (max (cdr lst)))\n     \
    \ (let ((lst (cdr lst)))\n        (if (null? lst)\n          (list min max)\n\
    \          (let ((lst (cdr lst)))\n            (if (null? lst)\n             \
    \ (list min max min)\n              (let ((lst (cdr lst)))\n                (if\
    \ (null? lst)\n                  (list min max min min)\n                  (let\
    \ ((lst (cdr lst)))\n                    (if (null? lst)\n                   \
    \   (list min max min min min)\n                      (let ((lst (cdr lst)))\n\
    \                        (if (null? lst)\n                          (list min\
    \ max min min min min)\n                          (error \"strange_sort_list:\
    \ not enough arguments\")\n                          ))))))))))))))))))\n", " \
    \ (if (null? lst)\n    (list)\n    (let ((min (car lst))\n          (max (cdr\
    \ lst)))\n      (let ((lst2 (cdr lst)))\n        (if (null? lst2)\n          (list\
    \ min max)\n          (let ((min2 (car lst2))\n                (max2 (cdr lst2)))\n\
    \            (let ((lst3 (cdr lst2)))\n              (if (null? lst3)\n      \
    \          (list min2 max2)\n                (let ((min3 (car lst3))\n       \
    \               (max3 (cdr lst3)))\n                  (list min min2 min3 max\
    \ max2 max3)))))))))))\n\n;; Given list of integers, return list in strange order.\n\
    ;; Strange sorting, is when you start with the minimum value,\n;; then maximum\
    \ of the remaining integers, then minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list\
    \ (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n\
    ;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )", "  (if (null?\
    \ lst)\n    (list)\n    (let ((min (car lst))\n          (max (cdr lst)))\n  \
    \    (let ((head (car lst))\n            (tail (cdr lst)))\n        (if (null?\
    \ tail)\n          (list min max)\n          (let ((min (car tail))\n        \
    \        (max (cdr tail)))\n            (let ((head (car tail))\n            \
    \      (tail (cdr tail)))\n              (if (null? tail)\n                (list\
    \ min max min)\n                (let ((min (car tail))\n                     \
    \ (max (cdr tail)))\n                  (let ((head (car tail))\n             \
    \           (tail (cdr tail)))\n                    (if (null? tail)\n       \
    \               (list min max min min)\n                      (let ((min (car\
    \ tail))\n                            (max (cdr tail)))\n                    \
    \    (let ((head (car tail))\n                              (tail (cdr tail)))\n\
    \                          (if (null? tail)\n                            (list\
    \ min max min min min)\n                            (let ((min (car tail))\n \
    \                                 (max (cdr tail)))\n                        \
    \      (let ((head (car tail))\n                                    (tail (cdr\
    \ tail)))\n                                (if (null? tail)\n                \
    \                  (list min max min min min min)\n                          \
    \        (let ((min (car tail))\n                                        (max\
    \ (cdr tail)))\n                                    (let ((head (car tail))\n\
    \                                          (tail (cdr tail)))\n              \
    \                        (if (null? tail)\n                                  \
    \      (list min max min min min min min)\n                                  \
    \      (let ((min (car tail))\n                                              (max\
    \ (cdr tail)))\n                                          (let ((head (car tail))\n\
    \                                                (tail (cdr tail)))\n        \
    \                                    (if (null? tail)\n                      \
    \                        (list min max min min min min min min)\n            \
    \                                  (let ((min (car tail))\n                  \
    \                                 (max (cdr tail)))\n                        \
    \                        (let ((head (car tail))\n                           \
    \                           (tail (cdr tail)))\n                             \
    \   ", "  (if (null? lst)\n    lst\n    (let ((min (car lst))\n          (max\
    \ (cdr lst)))\n      (let ((lst (cdr lst)))\n        (if (null? lst)\n       \
    \   lst\n          (let ((lst (cdr lst)))\n            (if (null? lst)\n     \
    \         lst\n              (let ((lst (cdr lst)))\n                (if (null?\
    \ lst)\n                  lst\n                  (let ((lst (cdr lst)))\n    \
    \                (if (null? lst)\n                      lst\n                \
    \      (let ((lst (cdr lst)))\n                        (if (null? lst)\n     \
    \                     lst\n                          (let ((lst (cdr lst)))\n\
    \                            (if (null? lst)\n                              lst\n\
    \                              (let ((lst (cdr lst)))\n                      \
    \          (if (null? lst)\n                                  lst\n          \
    \                        (let ((lst (cdr lst)))\n                            \
    \        (if (null? lst)\n                                      lst\n        \
    \                              (let ((lst (cdr lst)))\n                      \
    \                  (if (null? lst)\n                                         \
    \ lst\n                                          (let ((lst (cdr lst)))\n    \
    \                                        (if (null? lst)\n                   \
    \                           lst\n                                            \
    \  (let ((lst (cdr lst)))\n                                                (if\
    \ (null? lst)\n                                                  lst\n       \
    \                                           (let ((lst (cdr lst)))\n         \
    \                                           (if (null? lst)\n                \
    \                                      lst\n                                 \
    \                     (let ((lst (cdr lst)))\n                               \
    \                         (if (null? lst)\n                                  \
    \                        lst\n                                               \
    \           (let ((lst (cdr lst)))\n                                         \
    \                   (if (null? lst)\n                                        \
    \                      lst\n                                                 \
    \             (let ((lst (cdr", "  (let ((lst-head (car lst)))\n    (if (null?\
    \ lst-head)\n      (list)\n      (strange_sort_list (cdr lst))))\n  (strange_sort_list\
    \ (cdr lst)))\n\n;; Given list of integers, return list in strange order.\n;;\
    \ Strange sorting, is when you start with the minimum value,\n;; then maximum\
    \ of the remaining integers, then minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list\
    \ (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n\
    ;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )", "  (if (null?\
    \ lst)\n    (list)\n    (let ((min (car lst))\n          (max (cdr lst)))\n  \
    \    (let ((lst (cdr lst)))\n        (cons min\n           (if (null? lst)\n \
    \            max\n             (strange_sort_list lst)))))))\n\n;; Given list\
    \ of integers, return list in strange order.\n;; Strange sorting, is when you\
    \ start with the minimum value,\n;; then maximum of the remaining integers, then\
    \ minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list (list 1 2 3 4))\n\
    ;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n;; (list 5 5 5 5)\n\
    ;; >>> (strange_sort_list (list ))\n;; (list )", "  (if (null? lst)\n    (list)\n\
    \    (let ((min (car lst))\n          (max (cdr lst)))\n      (let ((lst (cdr\
    \ lst)))\n        (cons min (strange_sort_list (cdr lst)) max))))\n)\n\n;; Given\
    \ list of integers, return list in strange order.\n;; Strange sorting, is when\
    \ you start with the minimum value,\n;; then maximum of the remaining integers,\
    \ then minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list (list 1 2 3\
    \ 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n;; (list\
    \ 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )", "  (if (null? lst)\n\
    \    lst\n    (let ((min (car lst))\n          (max (cdr lst)))\n      (let ((result\
    \ (cons min (strange_sort_list (cdr lst))))\n            (lst (cdr lst)))\n  \
    \      (cons min (strange_sort_list (cdr lst)))))))\n\n;; Given list of integers,\
    \ return list in strange order.\n;; Strange sorting, is when you start with the\
    \ minimum value,\n;; then maximum of the remaining integers, then minimum and\
    \ so on.\n;; Examples:\n;; >>> (strange_sort_list (list 1 2 3 4))\n;; (list 1\
    \ 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n;; (list 5 5 5 5)\n;; >>>\
    \ (strange_sort_list (list ))\n;; (list )", "  (if (null? lst)\n    lst\n    (let\
    \ ((head (car lst))\n          (tail (cdr lst)))\n      (let ((min (car head))\n\
    \            (max (car tail)))\n        (let ((min (car min))\n              (max\
    \ (car max)))\n          (let ((min (car min))\n                (max (car max)))\n\
    \            (let ((min (car min))\n                  (max (car max)))\n     \
    \         (let ((min (car min))\n                    (max (car max)))\n      \
    \          (let ((min (car min))\n                      (max (car max)))\n   \
    \               (let ((min (car min))\n                        (max (car max)))\n\
    \                    (let ((min (car min))\n                          (max (car\
    \ max)))\n                      (let ((min (car min))\n                      \
    \      (max (car max)))\n                        (let ((min (car min))\n     \
    \                         (max (car max)))\n                          (let ((min\
    \ (car min))\n                                (max (car max)))\n             \
    \               (let ((min (car min))\n                                  (max\
    \ (car max)))\n                              (let ((min (car min))\n         \
    \                           (max (car max)))\n                               \
    \ (let ((min (car min))\n                                      (max (car max)))\n\
    \                                  (let ((min (car min))\n                   \
    \                     (max (car max)))\n                                    (let\
    \ ((min (car min))\n                                          (max (car max)))\n\
    \                                      (let ((min (car min))\n               \
    \                             (max (car max)))\n                             \
    \           (let ((min (car min))\n                                          \
    \    (max (car max)))\n                                          (let ((min (car\
    \ min))\n                                                (max (car max)))\n  \
    \                                          (let ((min (car min))\n           \
    \                                       (max (car max)))\n                   \
    \                           (let ((min (car min))\n                          \
    \                         (max (car max)))\n                                 \
    \               (let ((min (car min))\n                                      \
    \                (max (car max)))\n                                          \
    \        (let ((min (car min))\n                                             \
    \            (max (car", "  (if (null? lst)\n    (list)\n    (let ((min (car lst))\n\
    \          (max (cdr lst)))\n      (let ((curr (car lst)))\n        (if (null?\
    \ curr)\n          (list min max)\n          (let ((next (cdr curr)))\n      \
    \      (let ((next_min (car next)))\n              (let ((next_max (cdr next)))\n\
    \                (list\n                  (if (null? next_min)\n             \
    \       min\n                    (if (null? next_max)\n                      (list\
    \ min max)\n                      (list min next_min next_max)))\n           \
    \       (if (null? next_max)\n                    max\n                    (if\
    \ (null? next_min)\n                      (list min max)\n                   \
    \   (list min next_min next_max)))\n                  (if (null? next_min)\n \
    \                   min\n                    (if (null? next_max)\n          \
    \            (list min max)\n                      (list min next_min next_max))))))))))))))\n",
  "  (if (null? lst)\n    (list)\n    (let ((min (car lst))\n          (max (cdr lst)))\n\
    \      (let ((new_lst (cons min (cdr lst))))\n        (strange_sort_list (cdr\
    \ new_lst))))))\n\n;; Given list of integers, return list in strange order.\n\
    ;; Strange sorting, is when you start with the minimum value,\n;; then maximum\
    \ of the remaining integers, then minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list\
    \ (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n\
    ;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )", "  (let ((result\
    \ (list)))\n    (if (null? lst)\n      result\n      (let ((head (car lst)))\n\
    \        (let ((tail (cdr lst)))\n          (if (null? tail)\n            (cons\
    \ head result)\n            (let ((tail_head (strange_sort_list tail)))\n    \
    \          (cons head (cons tail_head result))))))))))\n\n;; Given list of integers,\
    \ return list in strange order.\n;; Strange sorting, is when you start with the\
    \ minimum value,\n;; then maximum of the remaining integers, then minimum and\
    \ so on.\n;; Examples:\n;; >>> (strange_sort_list (list 1 2 3 4))\n;; (list 1\
    \ 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n;; (list 5 5 5 5)\n;; >>>\
    \ (strange_sort_list (list ))\n;; (list )", "  (if (null? lst)\n    (list)\n \
    \   (let ((min (car lst))\n          (max (cdr lst)))\n      (let ((lst (cdr lst)))\n\
    \        (cons min\n           (if (null? lst)\n             max\n           \
    \  (strange_sort_list lst)))))))\n\n;; Given list of integers, return list sorted\
    \ in ascending order.\n;; Examples:\n;; >>> (ascending_sort_list (list 1 2 3 4))\n\
    ;; (list 1 2 3 4)\n;; >>> (ascending_sort_list (list 5 5 5 5))\n;; (list 5 5 5\
    \ 5)\n;; >>> (ascending_sort_list (list ))\n;; (list )", "  (if (null? lst)\n\
    \    (list)\n    (let ((head (car lst))\n          (tail (cdr lst)))\n      (let\
    \ ((min (car head))\n            (max (car tail)))\n        (let ((min (car min))\n\
    \              (max (car max)))\n          (let ((min (car min))\n           \
    \     (max (car max)))\n            (let ((min (car min))\n                  (max\
    \ (car max)))\n              (let ((min (car min))\n                    (max (car\
    \ max)))\n                (let ((min (car min))\n                      (max (car\
    \ max)))\n                  (let ((min (car min))\n                        (max\
    \ (car max)))\n                    (let ((min (car min))\n                   \
    \       (max (car max)))\n                      (let ((min (car min))\n      \
    \                      (max (car max)))\n                        (let ((min (car\
    \ min))\n                              (max (car max)))\n                    \
    \      (let ((min (car min))\n                                (max (car max)))\n\
    \                            (let ((min (car min))\n                         \
    \         (max (car max)))\n                              (let ((min (car min))\n\
    \                                    (max (car max)))\n                      \
    \          (let ((min (car min))\n                                      (max (car\
    \ max)))\n                                  (let ((min (car min))\n          \
    \                              (max (car max)))\n                            \
    \        (let ((min (car min))\n                                          (max\
    \ (car max)))\n                                      (let ((min (car min))\n \
    \                                           (max (car max)))\n               \
    \                         (let ((min (car min))\n                            \
    \                  (max (car max)))\n                                        \
    \  (let ((min (car min))\n                                                (max\
    \ (car max)))\n                                            (let ((min (car min))\n\
    \                                                  (max (car max)))\n        \
    \                                      (let ((min (car min))\n               \
    \                                    (max (car max)))\n                      \
    \                          (let ((min (car min))\n                           \
    \                           (max (car max)))\n                               \
    \                   (let ((min (car min))\n                                  \
    \                       (max (", "  (if (null? lst)\n    (list)\n    (let ((min\
    \ (car lst))\n          (rest (cdr lst)))\n      (if (null? rest)\n        (list\
    \ min)\n        (let ((max (car rest))\n              (rest (cdr rest)))\n   \
    \       (if (null? rest)\n            (list min max)\n            (let ((min (car\
    \ rest))\n                  (rest (cdr rest)))\n              (if (null? rest)\n\
    \                (list min max min)\n                (let ((max (car rest))\n\
    \                      (rest (cdr rest)))\n                  (if (null? rest)\n\
    \                    (list min max min max)\n                    (let ((min (car\
    \ rest))\n                          (rest (cdr rest)))\n                     \
    \ (if (null? rest)\n                        (list min max min max min)\n     \
    \                   (let ((max (car rest))\n                              (rest\
    \ (cdr rest)))\n                          (if (null? rest)\n                 \
    \           (list min max min max min max)\n                            (let ((min\
    \ (car rest))\n                                  (rest (cdr rest)))\n        \
    \                      (if (null? rest)\n                                (list\
    \ min max min max min max min max)\n                                (let ((max\
    \ (car rest))\n                                      (rest (cdr rest)))\n    \
    \                             (if (null? rest)\n                             \
    \      (list min max min max min max min max min max)\n                      \
    \             (let ((min (car rest))\n                                       \
    \  (rest (cdr rest)))\n                                     (if (null? rest)\n\
    \                                       (list min max min max min max min max\
    \ min max min max)\n                                       (let ((max (car rest))\n\
    \                                             (rest (cdr rest)))\n           \
    \                              (if (null? rest)\n                            \
    \               (list min max min max min max min max min max min max min max)\n\
    \                                           (let ((min (car rest))\n         \
    \                                       (rest (cdr rest)))\n                 \
    \                            (if (null? rest)\n                              \
    \                 (list min max min max min max min max min max min max min max\
    \ min max)\n                                               (let ((max (car", " \
    \ (if (null? lst)\n    lst\n    (let ((min (car lst))\n          (max (cdr lst)))\n\
    \      (let ((lst (cdr lst)))\n        (if (null? lst)\n          (cons min max)\n\
    \          (cons min (strange_sort_list (cdr lst)))\n          ))))\n)\n\n;; Given\
    \ list of integers, return list in strange order.\n;; Strange sorting, is when\
    \ you start with the minimum value,\n;; then maximum of the remaining integers,\
    \ then minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list (list 1 2 3\
    \ 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n;; (list\
    \ 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )", "  (let ((result\
    \ (list)))\n    (let ((min (car lst)))\n      (while (not (null? (cdr lst)))\n\
    \        (let ((max (car (cdr lst))))\n          (if (lt min max)\n          \
    \    (set! min max)\n              (set! result (append result (list min max))))\n\
    \          (set! lst (cdr lst)))\n        (set! lst (car lst)))\n      (set! lst\
    \ (car lst)))\n    (set! lst (car lst))\n    (set! result (append result (list\
    \ min))))\n  (result))\n\n;; Given list of integers, return list sorted in ascending\
    \ order.\n;; Examples:\n;; >>> (ascending_sort_list (list 1 2 3 4))\n;; (list\
    \ 1 2 3 4)\n;; >>> (ascending_sort_list (list 5 5 5 5))\n;; (list 5 5 5 5)\n;;\
    \ >>> (ascending_sort_list (list ))\n;; (list )", "  (let ((result (list)))\n\
    \    (if (null? lst)\n      result\n      (let ((head (car lst)))\n        (let\
    \ ((tail (cdr lst)))\n          (if (null? tail)\n            (cons head result)\n\
    \            (let ((tail_head (strange_sort_list tail)))\n              (cons\
    \ head (cons tail_head result))))))))))\n", "  (if (null? lst)\n    (list)\n \
    \   (let ((head (car lst)))\n      (let ((tail (cdr lst)))\n        (let ((min\
    \ (car head))\n              (max (car (cdr head))))\n          (let ((min (car\
    \ (cdr tail)))\n                (max (car (cdr (cdr tail))))\n               \
    \ (result (cons min max))))\n            (let ((head (cdr head)))\n          \
    \    (let ((tail (cdr tail)))\n                (let ((min (car (cdr head)))\n\
    \                      (max (car (cdr (cdr head))))\n                      (result\
    \ (cons min max))))\n                  (let ((head (cdr head)))\n            \
    \        (let ((tail (cdr tail)))\n                      (let ((min (car (cdr\
    \ head)))\n                            (max (car (cdr (cdr head))))\n        \
    \                    (result (cons min max))))))))))))))))))\n", "  (if (null?\
    \ lst)\n    lst\n    (let ((min (car lst))\n          (max (cdr lst)))\n     \
    \ (let ((lst2 (cdr lst)))\n        (let ((lst3 (cdr lst2)))\n          (let ((lst4\
    \ (cdr lst3)))\n            (let ((lst5 (cdr lst4)))\n              (let ((lst6\
    \ (cdr lst5)))\n                (let ((lst7 (cdr lst6)))\n                  (let\
    \ ((lst8 (cdr lst7)))\n                    (let ((lst9 (cdr lst8)))\n        \
    \              (let ((lst10 (cdr lst9)))\n                        (let ((lst11\
    \ (cdr lst10)))\n                          (let ((lst12 (cdr lst11)))\n      \
    \                      (let ((lst13 (cdr lst12)))\n                          \
    \    (let ((lst14 (cdr lst13)))\n                                (let ((lst15\
    \ (cdr lst14)))\n                                  (let ((lst16 (cdr lst15)))\n\
    \                                    (let ((lst17 (cdr lst16)))\n            \
    \                          (let ((lst18 (cdr lst17)))\n                      \
    \                  (let ((lst19 (cdr lst18)))\n                              \
    \            (let ((lst20 (cdr lst19)))\n                                    \
    \        (let ((lst21 (cdr lst20)))\n                                        \
    \      (let ((lst22 (cdr lst21)))\n                                          \
    \      (let ((lst23 (cdr lst22)))\n                                          \
    \        (let ((lst24 (cdr lst23)))\n                                        \
    \            (let ((lst25 (cdr lst24)))\n                                    \
    \                  (let ((lst26 (cdr lst25)))\n                              \
    \                          (let ((lst27 (cdr lst26)))\n                      \
    \                                    (let ((lst28 (cdr lst27)))\n            \
    \                                                (let ((lst29 (cdr lst28)))",
  "  (if (null? lst)\n    lst\n    (let ((min (car lst))\n          (max (cdr lst)))\n\
    \      (let ((lst (cdr lst)))\n        (if (null? lst)\n          (list min max)\n\
    \          (let ((lst (cdr lst)))\n            (if (null? lst)\n             \
    \ (list min max min)\n              (let ((lst (cdr lst)))\n                (if\
    \ (null? lst)\n                  (list min max min min)\n                  (let\
    \ ((lst (cdr lst)))\n                    (if (null? lst)\n                   \
    \   (list min max min min min)\n                      (let ((lst (cdr lst)))\n\
    \                        (if (null? lst)\n                          (list min\
    \ max min min min min)\n                          (let ((lst (cdr lst)))\n   \
    \                         (if (null? lst)\n                              (list\
    \ min max min min min min min)\n                              (let ((lst (cdr\
    \ lst)))\n                                (if (null? lst)\n                  \
    \                (list min max min min min min min min)\n                    \
    \              (let ((lst (cdr lst)))\n                                    (if\
    \ (null? lst)\n                                      (list min max min min min\
    \ min min min min)\n                                      (let ((lst (cdr lst)))\n\
    \                                        (if (null? lst)\n                   \
    \                       (list min max min min min min min min min min)\n     \
    \                                     (let ((lst (cdr lst)))\n               \
    \                             (if (null? lst)\n                              \
    \                (list min max min min min min min min min min min)\n        \
    \                                      (let ((lst (cdr lst)))\n              \
    \                                  (if (null? lst)\n                         \
    \                         (list min max min min min min min min min min min min)\n\
    \                                                  (let ((lst (cdr lst)))\n  \
    \                                                  (if (null? lst)\n         \
    \                                             (list min max min min min min min\
    \ min min min min min min)\n                                ", "  (if (null? lst)\n\
    \    lst\n    (let ((min (car lst))\n          (max (cdr lst)))\n      (let ((lst\
    \ (cdr lst)))\n        (if (null? lst)\n          (list min max)\n          (let\
    \ ((lst (cdr lst)))\n            (if (null? lst)\n              (list min max\
    \ min)\n              (let ((lst (cdr lst)))\n                (if (null? lst)\n\
    \                  (list min max min min)\n                  (let ((lst (cdr lst)))\n\
    \                    (if (null? lst)\n                      (list min max min\
    \ min min)\n                      (error \"strange_sort_list: not enough arguments\"\
    )\n                    (strange_sort_list (cdr lst)))))))))))))))\n\n;; Given\
    \ list of integers, return list in strange order.\n;; Strange sorting, is when\
    \ you start with the minimum value,\n;; then maximum of the remaining integers,\
    \ then minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list (list 1 2 3\
    \ 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n;; (list\
    \ 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )", "  (if (null? lst)\n\
    \    (list)\n    (let ((min (car lst))\n          (max (cdr lst)))\n      (let\
    \ ((result (cons min (strange_sort_list (cdr lst))))\n            (lst (cdr lst)))\n\
    \        (if (null? lst)\n          (list min max)\n          (cons min (strange_sort_list\
    \ (cdr lst))))))))\n\n;; Given list of integers, return list in strange order.\n\
    ;; Strange sorting, is when you start with the minimum value,\n;; then maximum\
    \ of the remaining integers, then minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list\
    \ (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n\
    ;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )", "  (let ((result\
    \ (make-vector 0 (length lst))))\n    (let ((i 0))\n      (while (< i (length\
    \ lst))\n        (set! result (append result (list (car lst) (car lst))))\n  \
    \      (set! lst (cdr lst))\n        (set! i (i + 1))))\n    result))\n\n;; Given\
    \ a list of lists, return list of lists in strange order.\n;; Strange sorting,\
    \ is when you start with the minimum value,\n;; then maximum of the remaining\
    \ lists, then minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list_of_lists\
    \ (list (list 1 2 3) (list 4 5 6) (list 7 8 9)))\n;; (list (list 1 2 3) (list\
    \ 4 5 6) (list 7 8 9))\n;; >>> (strange_sort_list_of_lists (list (list 1 2 3)\
    \ (list 4 5 6) (list 7 8 9) (list 10 11 12)))\n;; (list (list 1 2 3) (list 4 5\
    \ 6) (list 7 8 9) (list 10 11 12))\n;; >>> (strange_sort_list_of_lists (list (list\
    \ 1 2 3) (list 4 5 6) (list 7 8 9) (list 10 11 12) (list 13 14 15)))\n;; (list\
    \ (list 1 2 3) (list 4 5 6) (list 7 8 9) (list 10 11 12) (list 13 14 15))\n;;\
    \ >>> (strange_sort_list_of_lists (list (list 1 2 3) (list 4 5 6) (list 7 8 9)\
    \ (list 10 11 12) (list 13 14 15) (list 16 17 18)))\n;; (list (list 1 2 3) (list\
    \ 4 5 6) (list 7 8 9) (list 10 11 12) (list 13 14 15) (list 16 17 18))\n;; >>>\
    \ (strange_sort_list_of_lists (list (list 1 2 3) (list 4 5 6) (list 7 8 9) (list\
    \ 10 11 12) (list 13 14 15) (list 16 17 18) (list 19 20 21)))\n;; (list (list\
    \ 1 2 3) (list 4 5 6) (list 7 8 9) (list 10", "  (if (null? lst)\n    lst\n  \
    \  (let ((min (car lst))\n          (max (cdr lst)))\n      (let ((lst (cdr lst)))\n\
    \        (if (null? lst)\n          (cons min max)\n          (cons min (strange_sort_list\
    \ (cdr lst)))\n          ))))\n)\n\n;; Given list of integers, return list in\
    \ strange order.\n;; Strange sorting, is when you start with the minimum value,\n\
    ;; then maximum of the remaining integers, then minimum and so on.\n;; Examples:\n\
    ;; >>> (strange_sort_list (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list\
    \ (list 5 5 5 5))\n;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list\
    \ )", "  (if (null? lst)\n    (list)\n    (let ((min (car lst))\n          (rest\
    \ (cdr lst)))\n      (let ((max (car rest))\n            (result (cons min max)))\n\
    \        (strange_sort_list (cdr rest))))))\n\n;; Given list of integers, return\
    \ list in strange order.\n;; Strange sorting, is when you start with the minimum\
    \ value,\n;; then maximum of the remaining integers, then minimum and so on.\n\
    ;; Examples:\n;; >>> (strange_sort_list (list 1 2 3 4))\n;; (list 1 4 2 3)\n;;\
    \ >>> (strange_sort_list (list 5 5 5 5))\n;; (list 5 5 5 5)\n;; >>> (strange_sort_list\
    \ (list ))\n;; (list )", "  (if (null? lst)\n    (list)\n    (let ((min (car lst))\n\
    \          (max (cdr lst)))\n      (let ((curr (car lst)))\n        (if (null?\
    \ curr)\n          (list min max)\n          (let ((next (cdr curr)))\n      \
    \      (let ((next_min (car next)))\n              (let ((next_max (cdr next)))\n\
    \                (list\n                  (if (null? next_min)\n             \
    \       min\n                    (if (null? next_max)\n                      max\n\
    \                      (if (null? next_min)\n                        min\n   \
    \                     (if (null? next_max)\n                          max\n  \
    \                        (if (null? next_min)\n                            min\n\
    \                            (if (null? next_max)\n                          \
    \    max\n                              (if (null? next_min)\n               \
    \                 min\n                                (if (null? next_max)\n\
    \                                  max\n                                  (if\
    \ (null? next_min)\n                                    min\n                \
    \                    (if (null? next_max)\n                                  \
    \    max\n                                      (if (null? next_min)\n       \
    \                                 min\n                                      \
    \  (if (null? next_max)\n                                          max\n     \
    \                                     (if (null? next_min)\n                 \
    \                           min\n                                            (if\
    \ (null? next_max)\n                                              max\n      \
    \                                        (if (null? next_min)\n              \
    \                                  min\n                                     \
    \           (if (null? next_max)\n                                           \
    \       max\n                                                  (if (null? next_min)\n\
    \                                                    min\n                   \
    \                                 (if (null? next_max)\n                     \
    \                                 max\n                                      \
    \                (if (null? next_min)\n                                      \
    \                  min\n                                                     \
    \   (if (null? next_max)\n                                                   \
    \       max\n                                                          (if (null?\
    \ next_min)\n                                                            min\n\
    \                                  ", "  (if (null? lst)\n    (list)\n    (let\
    \ ((min (car lst))\n          (max (cdr lst)))\n      (let ((lst2 (cdr lst)))\n\
    \        (let ((lst3 (cdr lst2)))\n          (let ((lst4 (cdr lst3)))\n      \
    \      (let ((lst5 (cdr lst4)))\n              (let ((lst6 (cdr lst5)))\n    \
    \            (let ((lst7 (cdr lst6)))\n                  (let ((lst8 (cdr lst7)))\n\
    \                    (let ((lst9 (cdr lst8)))\n                      (let ((lst10\
    \ (cdr lst9)))\n                        (let ((lst11 (cdr lst10)))\n         \
    \                 (let ((lst12 (cdr lst11)))\n                            (let\
    \ ((lst13 (cdr lst12)))\n                              (let ((lst14 (cdr lst13)))\n\
    \                                (let ((lst15 (cdr lst14)))\n                \
    \                  (let ((lst16 (cdr lst15)))\n                              \
    \      (let ((lst17 (cdr lst16)))\n                                      (let\
    \ ((lst18 (cdr lst17)))\n                                        (let ((lst19\
    \ (cdr lst18)))\n                                          (let ((lst20 (cdr lst19)))\n\
    \                                            (let ((lst21 (cdr lst20)))\n    \
    \                                          (let ((lst22 (cdr lst21)))\n      \
    \                                          (let ((lst23 (cdr lst22)))\n      \
    \                                            (let ((lst24 (cdr lst23)))\n    \
    \                                                (let ((lst25 (cdr lst24)))\n\
    \                                                      (let ((lst26 (cdr lst25)))\n\
    \                                                        (let ((lst27 (cdr lst26)))\n\
    \                                                          (let ((lst28 (cdr lst27)))\n\
    \                                                            (let ((lst29 (cdr\
    \ lst28", "  (if (null? lst)\n    (list)\n    (let ((min (car lst))\n        \
    \  (max (cdr lst)))\n      (let ((head (car lst))\n            (tail (cdr lst)))\n\
    \        (if (null? tail)\n          (list min max)\n          (let ((min (car\
    \ tail))\n                (max (cdr tail)))\n            (list min max min)))))))\n\
    \n;; Given list of integers, return list in strange order.\n;; Strange sorting,\
    \ is when you start with the minimum value,\n;; then maximum of the remaining\
    \ integers, then minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list (list\
    \ 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n;;\
    \ (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )", "  (if (null?\
    \ lst)\n    (list)\n    (let ((head (car lst)))\n      (let ((tail (cdr lst)))\n\
    \        (if (null? tail)\n          (list head)\n          (let ((min (car tail)))\n\
    \            (let ((max (cdr tail)))\n              (let ((rest (cdr min)))\n\
    \                (list head min max rest))))))))))\n\n;; Given list of integers,\
    \ return list in sorted order.\n;; Sorting, is when you start with the minimum\
    \ value,\n;; then maximum of the remaining integers, then minimum and so on.\n\
    ;; Examples:\n;; >>> (sort_list (list 1 2 3 4))\n;; (list 1 2 3 4)\n;; >>> (sort_list\
    \ (list 5 5 5 5))\n;; (list 5 5 5 5)\n;; >>> (sort_list (list ))\n;; (list )",
  "  (let ((lst-size (length lst)))\n    (if (eq? lst-size 0)\n      lst\n      (let\
    \ ((min (car lst))\n            (max (cdr lst)))\n        (let ((lst-size (lst-size\
    \ - 1)))\n          (let ((lst-size (lst-size - 1)))\n            (let ((lst-size\
    \ (lst-size - 1)))\n              (let ((lst-size (lst-size - 1)))\n         \
    \       (let ((lst-size (lst-size - 1)))\n                  (let ((lst-size (lst-size\
    \ - 1)))\n                    (let ((lst-size (lst-size - 1)))\n             \
    \         (let ((lst-size (lst-size - 1)))\n                        (let ((lst-size\
    \ (lst-size - 1)))\n                          (let ((lst-size (lst-size - 1)))\n\
    \                            (let ((lst-size (lst-size - 1)))\n              \
    \                (let ((lst-size (lst-size - 1)))\n                          \
    \      (let ((lst-size (lst-size - 1)))\n                                  (let\
    \ ((lst-size (lst-size - 1)))\n                                    (let ((lst-size\
    \ (lst-size - 1)))\n                                      (let ((lst-size (lst-size\
    \ - 1)))\n                                        (let ((lst-size (lst-size -\
    \ 1)))\n                                          (let ((lst-size (lst-size -\
    \ 1)))\n                                            (let ((lst-size (lst-size\
    \ - 1)))\n                                              (let ((lst-size (lst-size\
    \ - 1)))\n                                                (let ((lst-size (lst-size\
    \ - 1)))\n                                                  (let ((lst-size (lst-size\
    \ - 1)))\n                                                    (let ((lst-size\
    \ (lst-size - 1)))\n                                                      (let\
    \ ((lst-size (lst-size - 1)))\n                                              \
    \          (let ((lst-size (lst", "  (if (empty? lst)\n    lst\n    (let ((min\
    \ (car lst))\n          (rest (cdr lst)))\n      (let ((max (car rest))\n    \
    \        (rest (cdr rest)))\n        (let ((min (car rest))\n              (rest\
    \ (cdr rest)))\n          (let ((max (car rest))\n                (rest (cdr rest)))\n\
    \            (let ((min (car rest))\n                  (rest (cdr rest)))\n  \
    \            (let ((max (car rest))\n                    (rest (cdr rest)))\n\
    \                (let ((min (car rest))\n                      (rest (cdr rest)))\n\
    \                  (let ((max (car rest))\n                        (rest (cdr\
    \ rest)))\n                    (let ((min (car rest))\n                      \
    \    (rest (cdr rest)))\n                      (let ((max (car rest))\n      \
    \                      (rest (cdr rest)))\n                        (let ((min\
    \ (car rest))\n                              (rest (cdr rest)))\n            \
    \              (let ((max (car rest))\n                                (rest (cdr\
    \ rest)))\n                            (let ((min (car rest))\n              \
    \                    (rest (cdr rest)))\n                              (let ((max\
    \ (car rest))\n                                    (rest (cdr rest)))\n      \
    \                          (let ((min (car rest))\n                          \
    \            (rest (cdr rest)))\n                                  (let ((max\
    \ (car rest))\n                                        (rest (cdr rest)))\n  \
    \                                  (let ((min (car rest))\n                  \
    \                        (rest (cdr rest)))\n                                \
    \      (let ((max (car rest))\n                                            (rest\
    \ (cdr rest)))\n                                        (let ((min (car rest))\n\
    \                                              (rest (cdr rest)))\n          \
    \                                (let ((max (car rest))\n                    \
    \                            (rest (cdr rest)))\n                            \
    \                (let ((min (car rest))\n                                    \
    \              (rest (cdr rest)))\n                                          \
    \    (let ((max (car rest))\n                                                \
    \   (rest (cdr rest)))\n                                                (let ((min\
    \ (car rest))\n                                                      (rest (cdr\
    \ rest)))\n                                                  ", "  (if (null?\
    \ lst)\n    (list)\n    (let ((head (car lst)))\n      (let ((tail (cdr lst)))\n\
    \        (let ((min (car head))\n              (max (car tail)))\n          (let\
    \ ((min (car min))\n                (max (car max)))\n            (let ((min (car\
    \ min))\n                  (max (car max)))\n              (let ((min (car min))\n\
    \                    (max (car max)))\n                (let ((min (car min))\n\
    \                      (max (car max)))\n                  (let ((min (car min))\n\
    \                        (max (car max)))\n                    (let ((min (car\
    \ min))\n                          (max (car max)))\n                      (let\
    \ ((min (car min))\n                            (max (car max)))\n           \
    \             (let ((min (car min))\n                              (max (car max)))\n\
    \                          (let ((min (car min))\n                           \
    \     (max (car max)))\n                            (let ((min (car min))\n  \
    \                                (max (car max)))\n                          \
    \    (let ((min (car min))\n                                    (max (car max)))\n\
    \                                (let ((min (car min))\n                     \
    \                 (max (car max)))\n                                  (let ((min\
    \ (car min))\n                                        (max (car max)))\n     \
    \                               (let ((min (car min))\n                      \
    \                    (max (car max)))\n                                      (let\
    \ ((min (car min))\n                                            (max (car max)))\n\
    \                                        (let ((min (car min))\n             \
    \                                 (max (car max)))\n                         \
    \                 (let ((min (car min))\n                                    \
    \            (max (car max)))\n                                            (let\
    \ ((min (car min))\n                                                  (max (car\
    \ max)))\n                                              (let ((min (car min))\n\
    \                                                   (max (car max)))\n       \
    \                                         (let ((min (car min))\n            \
    \                                          (max (car max)))\n                \
    \                                  (let ((min (car min))\n                   \
    \                                      (max (car max)))\n                    \
    \                                (let ((min (car min", "  (if (null? lst)\n  \
    \  (list)\n    (let ((min (car lst))\n          (max (cdr lst)))\n      (let ((lst2\
    \ (cdr lst)))\n        (if (null? lst2)\n          (list min max)\n          (let\
    \ ((min2 (car lst2))\n                (max2 (cdr lst2)))\n            (let ((lst3\
    \ (cdr lst2)))\n              (if (null? lst3)\n                (list min2 max2)\n\
    \                (let ((min3 (car lst3))\n                      (max3 (cdr lst3)))\n\
    \                  (list min min2 min3 max max2 max3)))))))))))\n\n;; Given list\
    \ of integers, return list in sorted order.\n;; Sorted sorting, is when you start\
    \ with the minimum value,\n;; then minimum of the remaining integers, then minimum\
    \ and so on.\n;; Examples:\n;; >>> (sorted_sort_list (list 1 2 3 4))\n;; (list\
    \ 1 2 3 4)\n;; >>> (sorted_sort_list (list 5 5 5 5))\n;; (list 5 5 5 5)\n;; >>>\
    \ (sorted_sort_list (list ))\n;; (list )", "  (if (null? lst)\n    lst\n    (let\
    \ ((min (car lst))\n          (max (cdr lst)))\n      (let ((lst (cdr lst)))\n\
    \        (if (null? lst)\n          (list min max)\n          (let ((lst (cdr\
    \ lst)))\n            (if (null? lst)\n              (list min max min)\n    \
    \          (let ((lst (cdr lst)))\n                (if (null? lst)\n         \
    \         (list min max min min)\n                  (let ((lst (cdr lst)))\n \
    \                   (if (null? lst)\n                      (list min max min min\
    \ min)\n                      (let ((lst (cdr lst)))\n                       \
    \ (if (null? lst)\n                          (list min max min min min min)\n\
    \                          (error \"too many elements in list\"))))))))))))))))))\n",
  "  (if (null? lst)\n    (list)\n    (let ((min (car lst))\n          (max (cdr lst)))\n\
    \      (let ((lst2 (cdr lst)))\n        (list (min min) (max max) min (strange_sort_list\
    \ lst2))))))\n\n;; Given list of integers, return list in strange order.\n;; Strange\
    \ sorting, is when you start with the minimum value,\n;; then maximum of the remaining\
    \ integers, then minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list (list\
    \ 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n;;\
    \ (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )", "  (if (null?\
    \ lst)\n    (list)\n    (let ((head (car lst))\n          (tail (cdr lst)))\n\
    \      (let ((min (car head))\n            (max (car tail)))\n        (let ((min\
    \ (car min))\n              (max (car max)))\n          (let ((min (car min))\n\
    \                (max (car max)))\n            (let ((min (car min))\n       \
    \           (max (car max)))\n              (let ((min (car min))\n          \
    \          (max (car max)))\n                (let ((min (car min))\n         \
    \             (max (car max)))\n                  (let ((min (car min))\n    \
    \                    (max (car max)))\n                    (let ((min (car min))\n\
    \                          (max (car max)))\n                      (let ((min\
    \ (car min))\n                            (max (car max)))\n                 \
    \       (let ((min (car min))\n                              (max (car max)))\n\
    \                          (let ((min (car min))\n                           \
    \     (max (car max)))\n                            (let ((min (car min))\n  \
    \                                (max (car max)))\n                          \
    \    (let ((min (car min))\n                                    (max (car max)))\n\
    \                                (let ((min (car min))\n                     \
    \                 (max (car max)))\n                                  (let ((min\
    \ (car min))\n                                        (max (car max)))\n     \
    \                               (let ((min (car min))\n                      \
    \                    (max (car max)))\n                                      (let\
    \ ((min (car min))\n                                            (max (car max)))\n\
    \                                        (let ((min (car min))\n             \
    \                                 (max (car max)))\n                         \
    \                 (let ((min (car min))\n                                    \
    \            (max (car max)))\n                                            (let\
    \ ((min (car min))\n                                                  (max (car\
    \ max)))\n                                              (let ((min (car min))\n\
    \                                                   (max (car max)))\n       \
    \                                         (let ((min (car min))\n            \
    \                                          (max (car max)))\n                \
    \                                  (let ((min (car min))\n                   \
    \                                      (max (", "  (if (empty? lst)\n    lst\n\
    \    (let ((min (car lst))\n          (max (cdr lst)))\n      (let ((lst (cdr\
    \ lst)))\n        (if (empty? lst)\n          lst\n          (let ((min (car lst))\n\
    \                (max (cdr lst)))\n            (let ((lst (cdr lst)))\n      \
    \        (if (empty? lst)\n                lst\n                (let ((min (car\
    \ lst))\n                      (max (cdr lst)))\n                  (let ((lst\
    \ (cdr lst)))\n                    (if (empty? lst)\n                      lst\n\
    \                      (let ((min (car lst))\n                            (max\
    \ (cdr lst)))\n                        (let ((lst (cdr lst)))\n              \
    \            (if (empty? lst)\n                            lst\n             \
    \               (let ((min (car lst))\n                                  (max\
    \ (cdr lst)))\n                              (let ((lst (cdr lst)))\n        \
    \                        (if (empty? lst)\n                                  lst\n\
    \                                  (let ((min (car lst))\n                   \
    \                     (max (cdr lst)))\n                                    (let\
    \ ((lst (cdr lst)))\n                                      (if (empty? lst)\n\
    \                                        lst\n                               \
    \         (let ((min (car lst))\n                                            \
    \  (max (cdr lst)))\n                                          (let ((lst (cdr\
    \ lst)))\n                                            (if (empty? lst)\n     \
    \                                         lst\n                              \
    \                (let ((min (car lst))\n                                     \
    \              (max (cdr lst)))\n                                            \
    \    (let ((lst (cdr lst)))\n                                                \
    \  (if (empty? lst)\n                                                    lst\n\
    \                                                    (let ((min (car lst))\n \
    \                                                        (max (cdr lst)))\n  \
    \                                                    (let ((lst (cdr lst)))\n\
    \                                                        (if (empty? l", "  (if\
    \ (null? lst)\n    (list)\n    (let ((min (car lst))\n          (max (cdr lst)))\n\
    \      (let ((lst1 (cdr lst))\n            (lst2 (cdr lst1)))\n        (let ((lst3\
    \ (cdr lst2)))\n          (let ((lst4 (cdr lst3)))\n            (let ((lst5 (cdr\
    \ lst4)))\n              (let ((lst6 (cdr lst5)))\n                (let ((lst7\
    \ (cdr lst6)))\n                  (let ((lst8 (cdr lst7)))\n                 \
    \   (let ((lst9 (cdr lst8)))\n                      (let ((lst10 (cdr lst9)))\n\
    \                        (let ((lst11 (cdr lst10)))\n                        \
    \  (let ((lst12 (cdr lst11)))\n                            (let ((lst13 (cdr lst12)))\n\
    \                              (let ((lst14 (cdr lst13)))\n                  \
    \              (let ((lst15 (cdr lst14)))\n                                  (let\
    \ ((lst16 (cdr lst15)))\n                                    (let ((lst17 (cdr\
    \ lst16)))\n                                      (let ((lst18 (cdr lst17)))\n\
    \                                        (let ((lst19 (cdr lst18)))\n        \
    \                                  (let ((lst20 (cdr lst19)))\n              \
    \                              (let ((lst21 (cdr lst20)))\n                  \
    \                            (let ((lst22 (cdr lst21)))\n                    \
    \                            (let ((lst23 (cdr lst22)))\n                    \
    \                              (let ((lst24 (cdr lst23)))\n                  \
    \                                  (let ((lst25 (cdr lst24)))\n              \
    \                                        (let ((lst26 (cdr lst25)))\n        \
    \                                                (let ((lst27 (cdr lst26)))\n\
    \                                                          (let ((lst28 (cdr lst27)))\n\
    \                                        ", "  (if (null? lst)\n    lst\n    (let\
    \ ((min (car lst))\n          (max (cdr lst)))\n      (let ((lst (cdr lst)))\n\
    \        (if (null? lst)\n          (list min max)\n          (let ((lst (cdr\
    \ lst)))\n            (if (null? lst)\n              (list min max min)\n    \
    \          (let ((lst (cdr lst)))\n                (if (null? lst)\n         \
    \         (list min max min min)\n                  (let ((lst (cdr lst)))\n \
    \                   (if (null? lst)\n                      (list min max min min\
    \ min)\n                      (error \"strange_sort_list: too many values\")\n\
    \                      (strange_sort_list (cdr lst)))))))))))))))\n\n;; Given\
    \ list of integers, return list sorted in ascending order.\n;; Examples:\n;; >>>\
    \ (ascending_sort_list (list 1 2 3 4))\n;; (list 1 2 3 4)\n;; >>> (ascending_sort_list\
    \ (list 5 5 5 5))\n;; (list 5 5 5 5)\n;; >>> (ascending_sort_list (list ))\n;;\
    \ (list )", "  (if (null? lst)\n    lst\n    (let ((min (car lst))\n         \
    \ (max (cdr lst)))\n      (let ((lst2 (cdr lst)))\n        (if (null? lst2)\n\
    \          (list min max)\n          (let ((lst3 (cdr lst2)))\n            (if\
    \ (null? lst3)\n              (list min max min)\n              (let ((lst4 (cdr\
    \ lst3)))\n                (if (null? lst4)\n                  (list min max min\
    \ min)\n                  (let ((lst5 (cdr lst4)))\n                    (if (null?\
    \ lst5)\n                      (list min max min min min)\n                  \
    \    (let ((lst6 (cdr lst5)))\n                        (if (null? lst6)\n    \
    \                      (list min max min min min min)\n                      \
    \    (let ((lst7 (cdr lst6)))\n                            (if (null? lst7)\n\
    \                              (list min max min min min min min)\n          \
    \                    (let ((lst8 (cdr lst7)))\n                              \
    \  (if (null? lst8)\n                                  (list min max min min min\
    \ min min min)\n                                  (let ((lst9 (cdr lst8)))\n \
    \                                   (if (null? lst9)\n                       \
    \               (list min max min min min min min min min)\n                 \
    \                     (let ((lst10 (cdr lst9)))\n                            \
    \            (if (null? lst10)\n                                          (list\
    \ min max min min min min min min min min)\n                                 \
    \         (let ((lst11 (cdr lst10)))\n                                       \
    \     (if (null? lst11)\n                                              (list min\
    \ max min min min min min min min min min)\n                                 \
    \             (let ((lst12 (cdr lst11)))\n                                   \
    \             (if (null? lst12)\n                                            \
    \      (list min max min min min min min min min min min min)\n              \
    \                                    (let ((lst13 (cdr lst12)))\n            \
    \                                        (", "  (let ((result (list)))\n    (if\
    \ (null? lst)\n      (return result)\n      (let ((head (car lst)))\n        (let\
    \ ((tail (cdr lst)))\n          (if (null? tail)\n            (cons head result)\n\
    \            (let ((min (car head)))\n              (let ((max (cdr head)))\n\
    \                (let ((min (car min)))\n                  (let ((max (cdr max)))\n\
    \                    (cons min (cons max (strange_sort_list tail))))))))))))))\n",
  "  (let ((result (list)))\n    (if (null? lst)\n      (return result)\n      (let\
    \ ((min (car lst)))\n        (let ((max (car lst)))\n          (let ((next (cdr\
    \ lst)))\n            (if (null? next)\n              (append result min max)\n\
    \              (append result min (strange_sort_list next)))))\n        (append\
    \ result min))))\n  (strange_sort_list lst))\n\n;; Given list of integers, return\
    \ list in strange order.\n;; Strange sorting, is when you start with the minimum\
    \ value,\n;; then maximum of the remaining integers, then minimum and so on.\n\
    ;; Examples:\n;; >>> (strange_sort_list (list 1 2 3 4))\n;; (list 1 4 2 3)\n;;\
    \ >>> (strange_sort_list (list 5 5 5 5))\n;; (list 5 5 5 5)\n;; >>> (strange_sort_list\
    \ (list ))\n;; (list )", "  (let ((result (list)))\n    (if (null? lst)\n    \
    \  result\n      (let ((min (car lst))\n            (max (cdr lst)))\n       \
    \ (let ((i (1)))\n          (while (< i (length lst))\n            (let ((curr\
    \ (car lst)))\n              (if (< curr min)\n                min\n         \
    \       curr\n              )\n              (if (> curr max)\n              \
    \  max\n                curr\n              )\n              (setq result (append\
    \ result curr))\n              (setq lst (cdr lst))\n              (setq i (1\
    \ + i)))\n            (setq lst (cdr lst)))\n          (setq result (append result\
    \ min)\n             result (append result max)))\n        (setq lst (cdr lst)))))\n\
    \  (strange_sort_list lst))\n\n;; Given list of integers, return list in strange\
    \ order.\n;; Strange sorting, is when you start with the minimum value,\n;; then\
    \ maximum of the remaining integers, then minimum and so on.\n;; Examples:\n;;\
    \ >>> (strange_sort_list (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list\
    \ (list 5 5 5 5))\n;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list\
    \ )", "  (if (null? lst)\n    lst\n    (let ((min (car lst))\n          (max (cdr\
    \ lst)))\n      (let ((lst (cdr lst)))\n        (if (null? lst)\n          lst\n\
    \          (let ((lst (cdr lst)))\n            (if (null? lst)\n             \
    \ lst\n              (let ((lst (cdr lst)))\n                (if (null? lst)\n\
    \                  lst\n                  (let ((lst (cdr lst)))\n           \
    \         (if (null? lst)\n                      lst\n                      (let\
    \ ((lst (cdr lst)))\n                        (if (null? lst)\n               \
    \           lst\n                          (let ((lst (cdr lst)))\n          \
    \                  (if (null? lst)\n                              lst\n      \
    \                        (let ((lst (cdr lst)))\n                            \
    \    (if (null? lst)\n                                  lst\n                \
    \                  (let ((lst (cdr lst)))\n                                  \
    \  (if (null? lst)\n                                      lst\n              \
    \                        (let ((lst (cdr lst)))\n                            \
    \            (if (null? lst)\n                                          lst\n\
    \                                          (let ((lst (cdr lst)))\n          \
    \                                  (if (null? lst)\n                         \
    \                     lst\n                                              (let\
    \ ((lst (cdr lst)))\n                                                (if (null?\
    \ lst)\n                                                  lst\n              \
    \                                    (let ((lst (cdr lst)))\n                \
    \                                    (if (null? lst)\n                       \
    \                               lst\n                                        \
    \              (let ((lst (cdr lst)))\n                                      \
    \                  (if (null? lst)\n                                         \
    \                 lst\n                                                      \
    \    (let ((lst (cdr lst)))\n                                                \
    \            (if (null? lst)\n                                               \
    \               lst\n                                                        \
    \      (let ((lst (cdr", "  (if (null? lst)\n    (list)\n    (let ((min (car lst))\n\
    \          (max (cdr lst)))\n      (let ((result (cons min max)))\n        (strange_sort_list\
    \ (cdr lst)))))))\n\n;; Given list of integers, return list in strange order.\n\
    ;; Strange sorting, is when you start with the minimum value,\n;; then maximum\
    \ of the remaining integers, then minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list\
    \ (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n\
    ;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )", "  (if (null?\
    \ lst)\n    (list)\n    (let ((min (car lst))\n          (max (cdr lst)))\n  \
    \    (let ((lst (cdr lst)))\n        (if (null? lst)\n            (list min max)\n\
    \            (let ((lst (cdr lst)))\n              (if (null? lst)\n         \
    \         (list min max min)\n                  (let ((lst (cdr lst)))\n     \
    \               (if (null? lst)\n                        (list min max min min)\n\
    \                        (let ((lst (cdr lst)))\n                          (if\
    \ (null? lst)\n                              (list min max min min min)\n    \
    \                          (let ((lst (cdr lst)))\n                          \
    \      (if (null? lst)\n                                    (list min max min\
    \ min min min)\n                                    (list min max min min min\
    \ min min))))))))))))))))))\n\n;; Given list of integers, return list in strange\
    \ order.\n;; Strange sorting, is when you start with the minimum value,\n;; then\
    \ maximum of the remaining integers, then minimum and so on.\n;; Examples:\n;;\
    \ >>> (strange_sort_list (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list\
    \ (list 5 5 5 5))\n;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list\
    \ )", "  (let ((result (list)))\n    (if (null? lst)\n      result\n    (let ((min\
    \ (car lst)))\n      (let ((max (car (cdr lst))))\n        (let ((i (1)))\n  \
    \        (while (< i (length lst))\n            (let ((curr (car lst)))\n    \
    \          (if (< curr min)\n                min\n              (if (> curr max)\n\
    \                max\n                (setf result (append result (list min max\
    \ curr))))))\n            (setf i (1 + i)))\n          (setf i (1 + i))))))\n\
    \  result))\n", "  (if (null? lst)\n    (list)\n    (let ((min (car lst))\n  \
    \        (max (cdr lst)))\n      (let ((curr (car lst)))\n        (if (null? curr)\n\
    \          (list min max)\n          (let ((next (cdr curr)))\n            (if\
    \ (null? next)\n              (list min max min)\n              (let ((next_min\
    \ (car next)))\n                (let ((next_max (cdr next)))\n               \
    \   (list min max min next_min next_max))))))))))\n", "  (if (null? lst)\n   \
    \ lst\n    (let ((head (car lst))\n          (tail (cdr lst)))\n      (let ((min\
    \ (car head))\n            (max (car tail)))\n        (let ((min (car min))\n\
    \              (max (car max)))\n          (let ((min (car min))\n           \
    \     (max (car max)))\n            (let ((min (car min))\n                  (max\
    \ (car max)))\n              (let ((min (car min))\n                    (max (car\
    \ max)))\n                (let ((min (car min))\n                      (max (car\
    \ max)))\n                  (let ((min (car min))\n                        (max\
    \ (car max)))\n                    (let ((min (car min))\n                   \
    \       (max (car max)))\n                      (let ((min (car min))\n      \
    \                      (max (car max)))\n                        (let ((min (car\
    \ min))\n                              (max (car max)))\n                    \
    \      (let ((min (car min))\n                                (max (car max)))\n\
    \                            (let ((min (car min))\n                         \
    \         (max (car max)))\n                              (let ((min (car min))\n\
    \                                    (max (car max)))\n                      \
    \          (let ((min (car min))\n                                      (max (car\
    \ max)))\n                                  (let ((min (car min))\n          \
    \                              (max (car max)))\n                            \
    \        (let ((min (car min))\n                                          (max\
    \ (car max)))\n                                      (let ((min (car min))\n \
    \                                           (max (car max)))\n               \
    \                         (let ((min (car min))\n                            \
    \                  (max (car max)))\n                                        \
    \  (let ((min (car min))\n                                                (max\
    \ (car max)))\n                                            (let ((min (car min))\n\
    \                                                  (max (car max)))\n        \
    \                                      (let ((min (car min))\n               \
    \                                    (max (car max)))\n                      \
    \                          (let ((min (car min))\n                           \
    \                           (max (car max)))\n                               \
    \                   (let ((min (car min))\n                                  \
    \                       (max (car", "  (if (null? lst)\n    (list)\n    (let ((min\
    \ (car lst))\n          (max (cdr lst)))\n      (let ((lst (cdr lst)))\n     \
    \   (cons min\n           (if (null? lst)\n             max\n             (strange_sort_list\
    \ lst)))))))\n\n;; Given list of integers, return list in sorted order.\n;; Sorting,\
    \ is when you start with the minimum value,\n;; then maximum of the remaining\
    \ integers, then minimum and so on.\n;; Examples:\n;; >>> (sort_list (list 1 2\
    \ 3 4))\n;; (list 1 2 3 4)\n;; >>> (sort_list (list 5 5 5 5))\n;; (list 5 5 5\
    \ 5)\n;; >>> (sort_list (list ))\n;; (list )", "  (if (null? lst)\n    lst\n \
    \   (let ((min (car lst))\n          (max (cdr lst)))\n      (let ((lst (cdr lst)))\n\
    \        (if (null? lst)\n          lst\n          (let ((lst (cdr lst)))\n  \
    \          (if (null? lst)\n              lst\n              (let ((lst (cdr lst)))\n\
    \                (if (null? lst)\n                  lst\n                  (let\
    \ ((lst (cdr lst)))\n                    (if (null? lst)\n                   \
    \   lst\n                      (let ((lst (cdr lst)))\n                      \
    \  (if (null? lst)\n                          lst\n                          (let\
    \ ((lst (cdr lst)))\n                            (if (null? lst)\n           \
    \                   lst\n                              (let ((lst (cdr lst)))\n\
    \                                (if (null? lst)\n                           \
    \       lst\n                                  (let ((lst (cdr lst)))\n      \
    \                              (if (null? lst)\n                             \
    \         lst\n                                      (let ((lst (cdr lst)))\n\
    \                                        (if (null? lst)\n                   \
    \                       lst\n                                          (let ((lst\
    \ (cdr lst)))\n                                            (if (null? lst)\n \
    \                                             lst\n                          \
    \                    (let ((lst (cdr lst)))\n                                \
    \                (if (null? lst)\n                                           \
    \       lst\n                                                  (let ((lst (cdr\
    \ lst)))\n                                                    (if (null? lst)\n\
    \                                                      lst\n                 \
    \                                     (let ((lst (cdr lst)))\n               \
    \                                         (if (null? lst)\n                  \
    \                                        lst\n                               \
    \                           (let ((lst (cdr lst)))\n                         \
    \                                   (if (null? lst)\n                        \
    \                                      lst\n                                 \
    \                             (let ((lst (cdr", "  (if (null? lst)\n    (list)\n\
    \    (let ((min (car lst))\n          (max (cdr lst)))\n      (let ((lst (cdr\
    \ lst)))\n        (if (null? lst)\n          (list min max)\n          (let ((lst\
    \ (cdr lst)))\n            (if (null? lst)\n              (list min max min)\n\
    \              (let ((lst (cdr lst)))\n                (if (null? lst)\n     \
    \             (list min max min min)\n                  (let ((lst (cdr lst)))\n\
    \                    (if (null? lst)\n                      (list min max min\
    \ min min)\n                      (error \"too many elements in list\"))))))))))))))\n",
  "  (let ((result (list)))\n    (if (null? lst)\n      result\n      (let ((min (car\
    \ lst))\n            (max (cdr lst)))\n        (let ((i (1)))\n          (while\
    \ (< i (length lst))\n            (let ((curr (car lst)))\n              (if (<\
    \ curr min)\n                min\n                (if (> curr max)\n         \
    \         max\n                  curr))))\n          (setf result (cons min max\
    \ result)))))))\n\n;; Given list of integers, return list in strange order.\n\
    ;; Strange sorting, is when you start with the minimum value,\n;; then maximum\
    \ of the remaining integers, then minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list\
    \ (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n\
    ;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )", "  (if (null?\
    \ lst)\n    lst\n    (let ((min (car lst))\n          (max (cdr lst)))\n     \
    \ (let ((head (car lst))\n            (tail (cdr lst)))\n        (let ((result\
    \ (cons min (strange_sort_list tail))))\n          (if (null? tail)\n        \
    \    result\n            (cons head (strange_sort_list result))))))))\n\n;; Given\
    \ list of integers, return list sorted in ascending order.\n;; Examples:\n;; >>>\
    \ (ascending_sort_list (list 1 2 3 4))\n;; (list 1 2 3 4)\n;; >>> (ascending_sort_list\
    \ (list 5 5 5 5))\n;; (list 5 5 5 5)\n;; >>> (ascending_sort_list (list ))\n;;\
    \ (list )", "  (if (null? lst)\n    lst\n    (let ((min (car lst))\n         \
    \ (max (cdr lst)))\n      (let ((cur (car lst)))\n        (if (null? cur)\n  \
    \        (list min max)\n          (strange_sort_list (cdr cur)))))))\n\n;; Given\
    \ list of integers, return list in strange order.\n;; Strange sorting, is when\
    \ you start with the minimum value,\n;; then maximum of the remaining integers,\
    \ then minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list (list 1 2 3\
    \ 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n;; (list\
    \ 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )", "  (if (null? lst)\n\
    \    (list)\n    (let ((min (car lst))\n          (max (cdr lst)))\n      (let\
    \ ((lst (cdr lst)))\n        (if (null? lst)\n          (list min max)\n     \
    \     (let ((min (car lst))\n                (max (cdr lst)))\n            (let\
    \ ((lst (cdr lst)))\n              (if (null? lst)\n                (list min\
    \ max min)\n                (let ((min (car lst))\n                      (max\
    \ (cdr lst)))\n                  (let ((lst (cdr lst)))\n                    (if\
    \ (null? lst)\n                      (list min max min min)\n                \
    \      (let ((min (car lst))\n                            (max (cdr lst)))\n \
    \                       (let ((lst (cdr lst)))\n                          (if\
    \ (null? lst)\n                            (list min max min min min)\n      \
    \                      (let ((min (car lst))\n                               \
    \   (max (cdr lst)))\n                              (let ((lst (cdr lst)))\n \
    \                               (if (null? lst)\n                            \
    \      (list min max min min min min)\n                                  (let\
    \ ((min (car lst))\n                                        (max (cdr lst)))\n\
    \                                    (let ((lst (cdr lst)))\n                \
    \                      (if (null? lst)\n                                     \
    \   (list min max min min min min min)\n                                     \
    \   (let ((min (car lst))\n                                              (max\
    \ (cdr lst)))\n                                          (let ((lst (cdr lst)))\n\
    \                                            (if (null? lst)\n               \
    \                               (list min max min min min min min min)\n     \
    \                                         (let ((min (car lst))\n            \
    \                                       (max (cdr lst)))\n                   \
    \                             (let ((lst (cdr lst)))\n                       \
    \                           (if (null? lst)\n                                \
    \                    (list min max min min min min min min min)\n            \
    \                                        (let ((min (car lst", "  (if (null? lst)\n\
    \    (list)\n    (let ((min (car lst))\n          (rest (cdr lst)))\n      (if\
    \ (null? rest)\n        (list min)\n        (let ((max (car rest))\n         \
    \     (rest (cdr rest)))\n          (if (null? rest)\n            (list min max)\n\
    \            (let ((min (car rest))\n                  (rest (cdr rest)))\n  \
    \            (if (null? rest)\n                (list min max min)\n          \
    \      (let ((max (car rest))\n                      (rest (cdr rest)))\n    \
    \              (if (null? rest)\n                    (list min max min max)\n\
    \                    (let ((min (car rest))\n                          (rest (cdr\
    \ rest)))\n                      (if (null? rest)\n                        (list\
    \ min max min max min)\n                        (let ((max (car rest))\n     \
    \                         (rest (cdr rest)))\n                          (if (null?\
    \ rest)\n                            (list min max min max min max)\n        \
    \                    (let ((min (car rest))\n                                \
    \  (rest (cdr rest)))\n                              (if (null? rest)\n      \
    \                          (list min max min max min max min max)\n          \
    \                      (list min max min max min max min max min))))))))))))))))))))))\n",
  "  (if (null? lst)\n    (list)\n    (let ((head (car lst))\n          (tail (cdr\
    \ lst)))\n      (if (null? tail)\n        (list head)\n        (strange_sort_list\
    \ (append tail (list head) (strange_sort_list tail)))\n      )\n    )\n  )\n)\n\
    \n;; Given list of integers, return list in strange order.\n;; Strange sorting,\
    \ is when you start with the minimum value,\n;; then maximum of the remaining\
    \ integers, then minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list (list\
    \ 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n;;\
    \ (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )", "  (if (null?\
    \ lst)\n    (list)\n    (let ((min (car lst))\n          (max (cdr lst)))\n  \
    \    (let ((curr (car lst)))\n        (if (null? curr)\n          (list min max)\n\
    \          (let ((next (cdr curr)))\n            (let ((next_min (car next))\n\
    \                  (next_max (cdr next)))\n              (strange_sort_list\n\
    \                (cons min (cons max next_min (cons min next_max next))))))))))\n\
    \n;; Given list of integers, return list in strange order.\n;; Strange sorting,\
    \ is when you start with the minimum value,\n;; then maximum of the remaining\
    \ integers, then minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list (list\
    \ 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n;;\
    \ (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )", "  (if (null?\
    \ lst)\n    lst\n    (let ((min (car lst))\n          (max (cdr lst)))\n     \
    \ (let ((lst (cdr lst)))\n        (if (null? lst)\n          lst\n          (let\
    \ ((lst (cdr lst)))\n            (if (null? lst)\n              lst\n        \
    \      (let ((lst (cdr lst)))\n                (if (null? lst)\n             \
    \     lst\n                  (let ((lst (cdr lst)))\n                    (if (null?\
    \ lst)\n                      lst\n                      (let ((lst (cdr lst)))\n\
    \                        (if (null? lst)\n                          lst\n    \
    \                      (let ((lst (cdr lst)))\n                            (if\
    \ (null? lst)\n                              lst\n                           \
    \   (let ((lst (cdr lst)))\n                                (if (null? lst)\n\
    \                                  lst\n                                  (let\
    \ ((lst (cdr lst)))\n                                    (if (null? lst)\n   \
    \                                   lst\n                                    \
    \  (let ((lst (cdr lst)))\n                                        (if (null?\
    \ lst)\n                                          lst\n                      \
    \                    (let ((lst (cdr lst)))\n                                \
    \            (if (null? lst)\n                                              lst\n\
    \                                              (let ((lst (cdr lst)))\n      \
    \                                          (if (null? lst)\n                 \
    \                                 lst\n                                      \
    \            (let ((lst (cdr lst)))\n                                        \
    \            (if (null? lst)\n                                               \
    \       lst\n                                                      (let ((lst\
    \ (cdr lst)))\n                                                        (if (null?\
    \ lst)\n                                                          lst\n      \
    \                                                    (let ((lst (cdr lst)))\n\
    \                                                            (if (null? lst)\n\
    \                                                              lst\n         \
    \                                                     (let ((lst (cdr", "  (if\
    \ (null? lst)\n    (list)\n    (let ((head (car lst))\n          (tail (cdr lst)))\n\
    \      (if (null? tail)\n        (list head)\n        (strange_sort_list (append\
    \ (list head) tail))))))\n\n;; Given list of integers, return list in strange\
    \ order.\n;; Strange sorting, is when you start with the minimum value,\n;; then\
    \ maximum of the remaining integers, then minimum and so on.\n;; Examples:\n;;\
    \ >>> (strange_sort_list (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list\
    \ (list 5 5 5 5))\n;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list\
    \ )", "  (if (null? lst)\n    lst\n    (let ((min (car lst))\n          (max (cdr\
    \ lst)))\n      (let ((curr (car lst)))\n        (if (null? curr)\n          (cdr\
    \ lst)\n          (if (null? (cdr curr))\n            (cons min max)\n       \
    \     (cons min (car curr))\n            (cons min (cdr curr))\n            (strange_sort_list\
    \ (cdr curr))))))))\n\n;; Given list of integers, return list in sorted order.\n\
    ;; Sorted order, is when you start with the minimum value,\n;; then maximum of\
    \ the remaining integers, then minimum and so on.\n;; Examples:\n;; >>> (sort_list\
    \ (list 1 2 3 4))\n;; (list 1 2 3 4)\n;; >>> (sort_list (list 5 5 5 5))\n;; (list\
    \ 5 5 5 5)\n;; >>> (sort_list (list ))\n;; (list )", "  (if (null? lst)\n    (list)\n\
    \    (let ((min (car lst))\n          (max (cdr lst)))\n      (let ((head (car\
    \ lst))\n            (tail (cdr lst)))\n        (if (null? tail)\n          (list\
    \ head min max)\n          (strange_sort_list (list head min max tail)))))))\n\
    \n;; Given list of integers, return list in strange order.\n;; Strange sorting,\
    \ is when you start with the minimum value,\n;; then maximum of the remaining\
    \ integers, then minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list (list\
    \ 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n;;\
    \ (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )", "  (if (null?\
    \ lst)\n    lst\n    (let ((min (car lst))\n          (max (cdr lst)))\n     \
    \ (let ((lst (cdr lst)))\n        (if (null? lst)\n          (list min max)\n\
    \          (let ((lst (cdr lst)))\n            (strange_sort_list (cons min (strange_sort_list\
    \ max lst)))))\n      (strange_sort_list lst))))\n\n;; Given list of integers,\
    \ return list in strange order.\n;; Strange sorting, is when you start with the\
    \ minimum value,\n;; then maximum of the remaining integers, then minimum and\
    \ so on.\n;; Examples:\n;; >>> (strange_sort_list (list 1 2 3 4))\n;; (list 1\
    \ 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n;; (list 5 5 5 5)\n;; >>>\
    \ (strange_sort_list (list ))\n;; (list )", "  (if (null? lst)\n    (list)\n \
    \   (let ((min (car lst))\n          (max (cdr lst)))\n      (let ((lst2 (cdr\
    \ lst)))\n        (list (min min)\n             (max max)\n             (min min)\n\
    \             (max max)\n             (min min)\n             (max max)\n    \
    \         (min min)\n             (max max)\n             (min min)\n        \
    \     (max max)\n             (min min)\n             (max max)\n            \
    \ (min min)\n             (max max)\n             (min min)\n             (max\
    \ max)\n             (min min)\n             (max max)\n             (min min)\n\
    \             (max max)\n             (min min)\n             (max max)\n    \
    \         (min min)\n             (max max)\n             (min min)\n        \
    \     (max max)\n             (min min)\n             (max max)\n            \
    \ (min min)\n             (max max)\n             (min min)\n             (max\
    \ max)\n             (min min)\n             (max max)\n             (min min)\n\
    \             (max max)\n             (min min)\n             (max max)\n    \
    \         (min min)\n             (max max)\n             (min min)\n        \
    \     (max max)\n             (min min)\n             (max max)\n            \
    \ (min min)\n             (max max)\n             (min min)\n             (max\
    \ max)\n             (min min)\n             (max max)\n             (min min)\n\
    \             (max max)\n             (min min)\n             (max max)\n    \
    \         (min min)\n             (max max)\n             (min min)\n        \
    \     (max max)\n             (min min)\n             (max max)\n            \
    \ (min min)\n             (max max)\n             (min min)\n             (max\
    \ max)\n             (min min)\n             (max max)\n             (min min)\n\
    \             (max max)\n             (min min)\n             (max max)\n    \
    \         (min min)\n             (max max)\n             (min min)\n        \
    \     (max max)\n             (min min)\n             (max max)\n            \
    \ (min min", "  (let ((lst-head (car lst)))\n    (if (null? lst-head)\n      (list)\n\
    \      (let ((lst-tail (cdr lst-head)))\n        (if (null? lst-tail)\n      \
    \    (list lst-head)\n          (let ((lst-head (car lst-tail)))\n           \
    \ (if (null? lst-head)\n              (list lst-tail)\n              (let ((lst-tail\
    \ (cdr lst-head)))\n                (if (null? lst-tail)\n                  (list\
    \ lst-head)\n                  (let ((lst-head (car lst-tail)))\n            \
    \        (if (null? lst-head)\n                      (list lst-tail)\n       \
    \               (let ((lst-tail (cdr lst-head)))\n                        (if\
    \ (null? lst-tail)\n                          (list lst-head)\n              \
    \            (let ((lst-head (car lst-tail)))\n                            (if\
    \ (null? lst-head)\n                              (list lst-tail)\n          \
    \                    (let ((lst-tail (cdr lst-head)))\n                      \
    \          (if (null? lst-tail)\n                                  (list lst-head)\n\
    \                                  (let ((lst-head (car lst-tail)))\n        \
    \                            (if (null? lst-head)\n                          \
    \            (list lst-tail)\n                                      (let ((lst-tail\
    \ (cdr lst-head)))\n                                        (if (null? lst-tail)\n\
    \                                          (list lst-head)\n                 \
    \                         (let ((lst-head (car lst-tail)))\n                 \
    \                           (if (null? lst-head)\n                           \
    \                   (list lst-tail)\n                                        \
    \      (let ((lst-tail (cdr lst-head)))\n                                    \
    \            (if (null? lst-tail)\n                                          \
    \        (list lst-head)\n                                                  (let\
    \ ((lst-head (car lst-tail)))\n                                              \
    \      (if (null? lst-", "  (if (null? lst)\n    (list)\n    (let ((min (car lst))\n\
    \          (max (cdr lst)))\n      (let ((lst (cdr lst)))\n        (if (null?\
    \ lst)\n          (list min max)\n          (let ((min (car lst)))\n         \
    \   (let ((lst (cdr lst)))\n              (if (null? lst)\n                (list\
    \ min min)\n                (let ((max (car lst)))\n                  (list min\
    \ max max)))))))))))\n\n;; Given list of integers, return list in sorted order.\n\
    ;; Sorting, is when you start with the minimum value,\n;; then maximum of the\
    \ remaining integers, then minimum and so on.\n;; Examples:\n;; >>> (sort_list\
    \ (list 1 2 3 4))\n;; (list 1 2 3 4)\n;; >>> (sort_list (list 5 5 5 5))\n;; (list\
    \ 5 5 5 5)\n;; >>> (sort_list (list ))\n;; (list )", "  (if (null? lst)\n    (list)\n\
    \    (let ((min (car lst))\n          (max (cdr lst)))\n      (let ((lst (cdr\
    \ lst)))\n        (if (null? lst)\n          (list min max)\n          (let ((lst\
    \ (cdr lst)))\n            (if (null? lst)\n              (list min max min)\n\
    \              (let ((lst (cdr lst)))\n                (if (null? lst)\n     \
    \             (list min max min min)\n                  (let ((lst (cdr lst)))\n\
    \                    (if (null? lst)\n                      (list min max min\
    \ min min)\n                      (let ((lst (cdr lst)))\n                   \
    \     (if (null? lst)\n                          (list min max min min min min)\n\
    \                          (error \"too many elements in list\"))))))))))))))))))\n",
  "  (let ((result (list)))\n    (if (null? lst)\n      result\n    (let ((min (car\
    \ lst)))\n      (let ((max (cdr lst)))\n        (let ((i (1)))\n          (while\
    \ (< i (length lst))\n            (let ((curr (car lst)))\n              (if (<\
    \ curr min)\n                min\n              (if (> curr max)\n           \
    \     max\n                (set! min (car curr))\n                (set! max (cdr\
    \ curr))\n                (set! result (append result (list min max))))\n    \
    \            (set! i (i + 1))))))))\n      (set! result (append result (list min\
    \ max)))))))\n", "  (if (null? lst)\n    lst\n    (let ((min (car lst))\n    \
    \      (max (cdr lst)))\n      (let ((curr (car lst)))\n        (if (null? curr)\n\
    \          (list min max)\n          (strange_sort_list (cdr lst)))))))\n\n;;\
    \ Given list of integers, return list sorted in ascending order.\n;; Examples:\n\
    ;; >>> (ascending_sort_list (list 1 2 3 4))\n;; (list 1 2 3 4)\n;; >>> (ascending_sort_list\
    \ (list 5 5 5 5))\n;; (list 5 5 5 5)\n;; >>> (ascending_sort_list (list ))\n;;\
    \ (list )", "  (if (empty? lst)\n    lst\n    (let ((min (car lst))\n        \
    \  (max (cdr lst)))\n      (let ((lst2 (cdr lst)))\n        (let ((lst3 (cdr lst2)))\n\
    \          (let ((lst4 (cdr lst3)))\n            (let ((lst5 (cdr lst4)))\n  \
    \            (let ((lst6 (cdr lst5)))\n                (let ((lst7 (cdr lst6)))\n\
    \                  (let ((lst8 (cdr lst7)))\n                    (let ((lst9 (cdr\
    \ lst8)))\n                      (let ((lst10 (cdr lst9)))\n                 \
    \       (let ((lst11 (cdr lst10)))\n                          (let ((lst12 (cdr\
    \ lst11)))\n                            (let ((lst13 (cdr lst12)))\n         \
    \                     (let ((lst14 (cdr lst13)))\n                           \
    \     (let ((lst15 (cdr lst14)))\n                                  (let ((lst16\
    \ (cdr lst15)))\n                                    (let ((lst17 (cdr lst16)))\n\
    \                                      (let ((lst18 (cdr lst17)))\n          \
    \                              (let ((lst19 (cdr lst18)))\n                  \
    \                        (let ((lst20 (cdr lst19)))\n                        \
    \                    (let ((lst21 (cdr lst20)))\n                            \
    \                  (let ((lst22 (cdr lst21)))\n                              \
    \                  (let ((lst23 (cdr lst22)))\n                              \
    \                    (let ((lst24 (cdr lst23)))\n                            \
    \                        (let ((lst25 (cdr lst24)))\n                        \
    \                              (let ((lst26 (cdr lst25)))\n                  \
    \                                      (let ((lst27 (cdr lst26)))\n          \
    \                                                (let ((lst28 (cdr lst27)))\n\
    \                                                            (let ((lst29 (cdr\
    \ lst28)))", "  (let ((result (list)))\n    (if (null? lst)\n      result\n  \
    \    (let ((min (car lst))\n            (max (cdr lst)))\n        (let ((i (1)))\n\
    \          (while (< i (length lst))\n            (let ((next (cdr lst)))\n  \
    \            (if (< (car lst) min)\n                (set! min (car lst))\n   \
    \             (set! max (car lst)))\n              (set! lst (cdr lst))\n    \
    \          (set! lst (cons min (list (car lst) max)))\n              (set! i (i\
    \ + 1)))\n            (set! lst (cons min (list (car lst) max)))\n           \
    \ (set! i (i + 1)))\n          (set! result (cons min (list (car lst) max) result)))))))\n\
    \n;; Given list of integers, return list in sorted order.\n;; Sorted ordering,\
    \ is when you start with the minimum value,\n;; then minimum of the remaining\
    \ integers, then minimum and so on.\n;; Examples:\n;; >>> (sort_list (list 1 2\
    \ 3 4))\n;; (list 1 2 3 4)\n;; >>> (sort_list (list 5 5 5 5))\n;; (list 5 5 5\
    \ 5)\n;; >>> (sort_list (list ))\n;; (list )", "  (if (null? lst)\n    lst\n \
    \   (let ((min (car lst))\n          (max (cdr lst)))\n      (let ((curr (car\
    \ lst)))\n        (if (null? curr)\n          (list min max)\n          (let ((next\
    \ (cdr curr)))\n            (list (min (car curr))\n                         \
    \ (max (cdr curr))\n                          (min (car next))\n             \
    \             (max (cdr next))))))))))\n", "  (if (null? lst)\n    (list)\n  \
    \  (let ((min (car lst))\n          (max (cdr lst)))\n      (let ((lst2 (cdr lst)))\n\
    \        (if (null? lst2)\n          (list min max)\n          (let ((min2 (car\
    \ lst2))\n                (max2 (cdr lst2)))\n            (let ((lst3 (cdr lst2)))\n\
    \              (if (null? lst3)\n                (list min2 max2)\n          \
    \      (let ((min3 (car lst3))\n                      (max3 (cdr lst3)))\n   \
    \               (list min min2 min3 max max2 max3)))))))))))\n\n;; Given list\
    \ of integers, return list in strange order.\n;; Strange sorting, is when you\
    \ start with the minimum value,\n;; then maximum of the remaining integers, then\
    \ minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list (list 1 2 3 4))\n\
    ;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n;; (list 5 5 5 5)\n\
    ;; >>> (strange_sort_list (list ))\n;; (list )", "  (if (null? lst)\n    lst\n\
    \    (let ((min (car lst))\n          (max (cdr lst)))\n      (let ((lst (cdr\
    \ lst)))\n        (if (null? lst)\n          lst\n          (let ((lst (cdr lst)))\n\
    \            (if (null? lst)\n              lst\n              (let ((lst (cdr\
    \ lst)))\n                (if (null? lst)\n                  lst\n           \
    \       (let ((lst (cdr lst)))\n                    (if (null? lst)\n        \
    \              lst\n                      (let ((lst (cdr lst)))\n           \
    \             (if (null? lst)\n                          lst\n               \
    \           (let ((lst (cdr lst)))\n                            (if (null? lst)\n\
    \                              lst\n                              (let ((lst (cdr\
    \ lst)))\n                                (if (null? lst)\n                  \
    \                lst\n                                  (let ((lst (cdr lst)))\n\
    \                                    (if (null? lst)\n                       \
    \               lst\n                                      (let ((lst (cdr lst)))\n\
    \                                        (if (null? lst)\n                   \
    \                       lst\n                                          (let ((lst\
    \ (cdr lst)))\n                                            (if (null? lst)\n \
    \                                             lst\n                          \
    \                    (let ((lst (cdr lst)))\n                                \
    \                (if (null? lst)\n                                           \
    \       lst\n                                                  (let ((lst (cdr\
    \ lst)))\n                                                    (if (null? lst)\n\
    \                                                      lst\n                 \
    \                                     (let ((lst (cdr lst)))\n               \
    \                                         (if (null? lst)\n                  \
    \                                        lst\n                               \
    \                           (let ((lst (cdr lst)))\n                         \
    \                                   (if (null? lst)\n                        \
    \                                      lst\n                                 \
    \                             (let ((lst (cdr", "  (if (null? lst)\n    (list)\n\
    \    (let ((head (car lst)))\n      (let ((tail (cdr lst)))\n        (if (null?\
    \ tail)\n          (list head)\n          (let ((min (car tail))\n           \
    \     (max (cdr tail)))\n            (let ((curr (car lst)))\n              (if\
    \ (null? curr)\n                (list min max)\n                (let ((next (cdr\
    \ curr)))\n                  (strange_sort_list (cons min (cons max next))))))))))))))\n",
  "  (if (null? lst)\n    (list)\n    (let ((min (car lst))\n          (max (cdr lst)))\n\
    \      (let ((head (car lst))\n            (tail (cdr lst)))\n        (if (null?\
    \ tail)\n          (list head min max)\n          (strange_sort_list (list head\
    \ min max tail)))))))\n\n;; Given list of integers, return list in strange order.\n\
    ;; Strange sorting, is when you start with the minimum value,\n;; then maximum\
    \ of the remaining integers, then minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list\
    \ (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n\
    ;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )", "  (if (null?\
    \ lst)\n    (list)\n    (let ((min (car lst))\n          (max (cdr lst)))\n  \
    \    (let ((new_lst (cons min (cdr lst))))\n        (strange_sort_list (cdr new_lst))))))\n\
    \n;; Given list of integers, return list in strange order.\n;; Strange sorting,\
    \ is when you start with the minimum value,\n;; then maximum of the remaining\
    \ integers, then minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list (list\
    \ 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n;;\
    \ (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )", "  (if (null?\
    \ lst)\n    lst\n    (let ((min (car lst))\n          (max (cdr lst)))\n     \
    \ (let ((lst1 (cdr lst))\n            (lst2 (cdr lst1)))\n        (let ((lst3\
    \ (cdr lst2)))\n          (let ((lst4 (cdr lst3)))\n            (let ((lst5 (cdr\
    \ lst4)))\n              (let ((lst6 (cdr lst5)))\n                (let ((lst7\
    \ (cdr lst6)))\n                  (let ((lst8 (cdr lst7)))\n                 \
    \   (let ((lst9 (cdr lst8)))\n                      (let ((lst10 (cdr lst9)))\n\
    \                        (let ((lst11 (cdr lst10)))\n                        \
    \  (let ((lst12 (cdr lst11)))\n                            (let ((lst13 (cdr lst12)))\n\
    \                              (let ((lst14 (cdr lst13)))\n                  \
    \              (let ((lst15 (cdr lst14)))\n                                  (let\
    \ ((lst16 (cdr lst15)))\n                                    (let ((lst17 (cdr\
    \ lst16)))\n                                      (let ((lst18 (cdr lst17)))\n\
    \                                        (let ((lst19 (cdr lst18)))\n        \
    \                                  (let ((lst20 (cdr lst19)))\n              \
    \                              (let ((lst21 (cdr lst20)))\n                  \
    \                            (let ((lst22 (cdr lst21)))\n                    \
    \                            (let ((lst23 (cdr lst22)))\n                    \
    \                              (let ((lst24 (cdr lst23)))\n                  \
    \                                  (let ((lst25 (cdr lst24)))\n              \
    \                                        (let ((lst26 (cdr lst25)))\n        \
    \                                                (let ((lst27 (cdr lst26)))\n\
    \                                                          (let ((lst28 (cdr lst27)))\n\
    \                                                            ", "  (if (null?\
    \ lst)\n    (list)\n    (let ((min (car lst))\n          (max (cdr lst)))\n  \
    \    (let ((head (car lst))\n            (tail (cdr lst)))\n        (if (null?\
    \ tail)\n          (list min max)\n          (let ((min (car tail))\n        \
    \        (max (cdr tail)))\n            (let ((head (car tail))\n            \
    \      (tail (cdr tail)))\n              (if (null? tail)\n                (list\
    \ min max min)\n                (let ((min (car tail))\n                     \
    \ (max (cdr tail)))\n                  (let ((head (car tail))\n             \
    \           (tail (cdr tail)))\n                    (if (null? tail)\n       \
    \               (list min max min min)\n                      (let ((min (car\
    \ tail))\n                            (max (cdr tail)))\n                    \
    \    (let ((head (car tail))\n                              (tail (cdr tail)))\n\
    \                          (if (null? tail)\n                            (list\
    \ min max min min min)\n                            (let ((min (car tail))\n \
    \                                 (max (cdr tail)))\n                        \
    \      (let ((head (car tail))\n                                    (tail (cdr\
    \ tail)))\n                                (if (null? tail)\n                \
    \                  (list min max min min min min)\n                          \
    \        (let ((min (car tail))\n                                        (max\
    \ (cdr tail)))\n                                    (let ((head (car tail))\n\
    \                                          (tail (cdr tail)))\n              \
    \                        (if (null? tail)\n                                  \
    \      (list min max min min min min min)\n                                  \
    \      (let ((min (car tail))\n                                              (max\
    \ (cdr tail)))\n                                          (let ((head (car tail))\n\
    \                                                (tail (cdr tail)))\n        \
    \                                    (if (null? tail)\n                      \
    \                        (list min max min min min min min min)\n            \
    \                                  (let ((min (car tail))\n                  \
    \                                 (max (cdr tail)))\n                        \
    \                        (let ((head (car tail))\n                           \
    \                           (tail (cdr tail)))\n                             \
    \   ", "  (if (null? lst)\n    (list)\n    (let ((min (car lst))\n          (max\
    \ (cdr lst)))\n      (let ((result (cons min (cdr lst))))\n        (let ((i (1)))\n\
    \          (while (< i (length lst))\n            (let ((curr (cdr result)))\n\
    \              (if (null? curr)\n                (list min max)\n            \
    \    (let ((next (car lst)))\n                  (if (null? next)\n           \
    \         (list min max)\n                    (cons min (cons min (cdr curr))\
    \ (cons max (cons max (cdr next))))))))\n            (set! i (i + 1)))\n     \
    \     (cdr result))))))\n\n;; Given list of integers, return list in strange order.\n\
    ;; Strange sorting, is when you start with the minimum value,\n;; then maximum\
    \ of the remaining integers, then minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list\
    \ (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n\
    ;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )", "  (if (null?\
    \ lst)\n    (list)\n    (let ((min (car lst))\n          (max (cdr lst)))\n  \
    \    (let ((curr (car lst)))\n        (if (null? curr)\n          (list min max)\n\
    \          (let ((next (cdr curr)))\n            (let ((next_min (car next)))\n\
    \              (let ((next_max (cdr next)))\n                (list\n         \
    \         (if (null? next_min)\n                    min\n                    (if\
    \ (null? next_max)\n                      (list min max)\n                   \
    \   (list min next_min next_max)))\n                  (if (null? next_max)\n \
    \                   min\n                    (if (null? next_min)\n          \
    \            (list min max)\n                      (list min next_min next_max)))\n\
    \                  (if (null? next_min)\n                    min\n           \
    \         (if (null? next_max)\n                      (list min max)\n       \
    \               (list min next_min next_max)))\n                  (if (null? next_max)\n\
    \                    min\n                    (if (null? next_min)\n         \
    \             (list min max)\n                      (list min next_min next_max))))))))))))))\n\
    \n;; Given list of integers, return list in strange order.\n;; Strange sorting,\
    \ is when you start with the minimum value,\n;; then maximum of the remaining\
    \ integers, then minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list (list\
    \ 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n;;\
    \ (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )", "  (let ((result\
    \ (list)))\n    (if (null? lst)\n      result\n      (let ((head (car lst)))\n\
    \        (let ((tail (cdr lst)))\n          (if (null? tail)\n            (append\
    \ result head)\n            (append result (strange_sort_list tail))))))))\n\n\
    ;; Given list of integers, return list in strange order.\n;; Strange sorting,\
    \ is when you start with the minimum value,\n;; then maximum of the remaining\
    \ integers, then minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list (list\
    \ 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n;;\
    \ (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )", "  (if (null?\
    \ lst)\n    lst\n    (let ((min (car lst))\n          (max (cdr lst)))\n     \
    \ (let ((lst (cdr lst)))\n        (if (null? lst)\n          lst\n          (let\
    \ ((lst (cdr lst)))\n            (if (null? lst)\n              lst\n        \
    \      (let ((lst (cdr lst)))\n                (if (null? lst)\n             \
    \     lst\n                  (let ((lst (cdr lst)))\n                    (if (null?\
    \ lst)\n                      lst\n                      (let ((lst (cdr lst)))\n\
    \                        (if (null? lst)\n                          lst\n    \
    \                      (let ((lst (cdr lst)))\n                            (if\
    \ (null? lst)\n                              lst\n                           \
    \   (let ((lst (cdr lst)))\n                                (if (null? lst)\n\
    \                                  lst\n                                  (let\
    \ ((lst (cdr lst)))\n                                    (if (null? lst)\n   \
    \                                   lst\n                                    \
    \  (let ((lst (cdr lst)))\n                                        (if (null?\
    \ lst)\n                                          lst\n                      \
    \                    (let ((lst (cdr lst)))\n                                \
    \            (if (null? lst)\n                                              lst\n\
    \                                              (let ((lst (cdr lst)))\n      \
    \                                          (if (null? lst)\n                 \
    \                                 lst\n                                      \
    \            (let ((lst (cdr lst)))\n                                        \
    \            (if (null? lst)\n                                               \
    \       lst\n                                                      (let ((lst\
    \ (cdr lst)))\n                                                        (if (null?\
    \ lst)\n                                                          lst\n      \
    \                                                    (let ((lst (cdr lst))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
  "  (if (null? lst)\n    (list)\n    (let ((min (car lst))\n          (max (cdr lst)))\n\
    \      (let ((head (car lst))\n            (tail (cdr lst)))\n        (if (null?\
    \ tail)\n          (list head min max)\n          (strange_sort_list (append (list\
    \ head min) tail)))))))\n\n;; Given list of integers, return list in strange order.\n\
    ;; Strange sorting, is when you start with the minimum value,\n;; then maximum\
    \ of the remaining integers, then minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list\
    \ (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n\
    ;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )", "  (if (null?\
    \ lst)\n    (list)\n    (let ((min (car lst))\n          (max (cdr lst)))\n  \
    \    (let ((lst2 (cdr lst)))\n        (list (min min)\n             (max max)\n\
    \             (min min)\n             (max max)\n             (min min)\n    \
    \         (max max)\n             (min min)\n             (max max)\n        \
    \     (min min)\n             (max max)\n             (min min)\n            \
    \ (max max)\n             (min min)\n             (max max)\n             (min\
    \ min)\n             (max max)\n             (min min)\n             (max max)\n\
    \             (min min)\n             (max max)\n             (min min)\n    \
    \         (max max)\n             (min min)\n             (max max)\n        \
    \     (min min)\n             (max max)\n             (min min)\n            \
    \ (max max)\n             (min min)\n             (max max)\n             (min\
    \ min)\n             (max max)\n             (min min)\n             (max max)\n\
    \             (min min)\n             (max max)\n             (min min)\n    \
    \         (max max)\n             (min min)\n             (max max)\n        \
    \     (min min)\n             (max max)\n             (min min)\n            \
    \ (max max)\n             (min min)\n             (max max)\n             (min\
    \ min)\n             (max max)\n             (min min)\n             (max max)\n\
    \             (min min)\n             (max max)\n             (min min)\n    \
    \         (max max)\n             (min min)\n             (max max)\n        \
    \     (min min)\n             (max max)\n             (min min)\n            \
    \ (max max)\n             (min min)\n             (max max)\n             (min\
    \ min)\n             (max max)\n             (min min)\n             (max max)\n\
    \             (min min)\n             (max max)\n             (min min)\n    \
    \         (max max)\n             (min min)\n             (max max)\n        \
    \     (min min)\n             (max max)\n             (min min)\n            \
    \ (max max)\n             (min min", "  (if (null? lst)\n    (list)\n    (let\
    \ ((min (car lst))\n          (max (cdr lst)))\n      (let ((i (car lst)))\n \
    \       (if (null? i)\n          (list min max)\n          (let ((next (cdr i)))\n\
    \            (let ((next_min (car next)))\n              (let ((next_max (cdr\
    \ next)))\n                (list (if (null? next_min)\n                      \
    \    (list min max)\n                          (list min (if (null? next_max)\n\
    \                                       (list min max)\n                     \
    \                  (list min next_max)))\n                          (if (null?\
    \ next_max)\n                            (list min max)\n                    \
    \        (list min next_min)))))))))))))))\n\n;; Given list of integers, return\
    \ list in strange order.\n;; Strange sorting, is when you start with the minimum\
    \ value,\n;; then maximum of the remaining integers, then minimum and so on.\n\
    ;; Examples:\n;; >>> (strange_sort_list (list 1 2 3 4))\n;; (list 1 4 2 3)\n;;\
    \ >>> (strange_sort_list (list 5 5 5 5))\n;; (list 5 5 5 5)\n;; >>> (strange_sort_list\
    \ (list ))\n;; (list )", "  (if (null? lst)\n    (list)\n    (let ((min (car lst))\n\
    \          (max (cdr lst)))\n      (let ((lst (cdr lst)))\n        (if (null?\
    \ lst)\n          (list min max)\n          (let ((min (car lst))\n          \
    \      (max (cdr lst)))\n            (let ((lst (cdr lst)))\n              (if\
    \ (null? lst)\n                (list min max min)\n                (let ((min\
    \ (car lst))\n                      (max (cdr lst)))\n                  (let ((lst\
    \ (cdr lst)))\n                    (if (null? lst)\n                      (list\
    \ min max min min)\n                      (let ((min (car lst))\n            \
    \                (max (cdr lst)))\n                        (let ((lst (cdr lst)))\n\
    \                          (if (null? lst)\n                            (list\
    \ min max min min min)\n                            (let ((min (car lst))\n  \
    \                                (max (cdr lst)))\n                          \
    \    (let ((lst (cdr lst)))\n                                (if (null? lst)\n\
    \                                  (list min max min min min min)\n          \
    \                        (let ((min (car lst))\n                             \
    \           (max (cdr lst)))\n                                    (let ((lst (cdr\
    \ lst)))\n                                      (if (null? lst)\n            \
    \                            (list min max min min min min min)\n            \
    \                            (let ((min (car lst))\n                         \
    \                     (max (cdr lst)))\n                                     \
    \     (let ((lst (cdr lst)))\n                                            (if\
    \ (null? lst)\n                                              (list min max min\
    \ min min min min min)\n                                              (let ((min\
    \ (car lst))\n                                                   (max (cdr lst)))\n\
    \                                                (let ((lst (cdr lst)))\n    \
    \                                              (if (null? lst)\n             \
    \                                       (list min max min min min min min min\
    \ min)\n                                                    (let ((min (car lst",
  "  (if (null? lst)\n    lst\n    (let ((head (car lst))\n          (tail (cdr lst)))\n\
    \      (let ((min (car head))\n            (max (car tail)))\n        (let ((min\
    \ (car min))\n              (max (car max)))\n          (let ((min (car min))\n\
    \                (max (car max)))\n            (let ((min (car min))\n       \
    \           (max (car max)))\n              (let ((min (car min))\n          \
    \          (max (car max)))\n                (let ((min (car min))\n         \
    \             (max (car max)))\n                  (let ((min (car min))\n    \
    \                    (max (car max)))\n                    (let ((min (car min))\n\
    \                          (max (car max)))\n                      (let ((min\
    \ (car min))\n                            (max (car max)))\n                 \
    \       (let ((min (car min))\n                              (max (car max)))\n\
    \                          (let ((min (car min))\n                           \
    \     (max (car max)))\n                            (let ((min (car min))\n  \
    \                                (max (car max)))\n                          \
    \    (let ((min (car min))\n                                    (max (car max)))\n\
    \                                (let ((min (car min))\n                     \
    \                 (max (car max)))\n                                  (let ((min\
    \ (car min))\n                                        (max (car max)))\n     \
    \                               (let ((min (car min))\n                      \
    \                    (max (car max)))\n                                      (let\
    \ ((min (car min))\n                                            (max (car max)))\n\
    \                                        (let ((min (car min))\n             \
    \                                 (max (car max)))\n                         \
    \                 (let ((min (car min))\n                                    \
    \            (max (car max)))\n                                            (let\
    \ ((min (car min))\n                                                  (max (car\
    \ max)))\n                                              (let ((min (car min))\n\
    \                                                   (max (car max)))\n       \
    \                                         (let ((min (car min))\n            \
    \                                          (max (car max)))\n                \
    \                                  (let ((min (car min))\n                   \
    \                                      (max (car", "  (if (null? lst)\n    (list)\n\
    \    (let ((min (car lst))\n          (max (cdr lst)))\n      (let ((lst1 (cdr\
    \ lst))\n            (lst2 (cdr lst1)))\n        (let ((lst3 (cdr lst2)))\n  \
    \        (let ((lst4 (cdr lst3)))\n            (let ((lst5 (cdr lst4)))\n    \
    \          (let ((lst6 (cdr lst5)))\n                (let ((lst7 (cdr lst6)))\n\
    \                  (let ((lst8 (cdr lst7)))\n                    (let ((lst9 (cdr\
    \ lst8)))\n                      (let ((lst10 (cdr lst9)))\n                 \
    \       (let ((lst11 (cdr lst10)))\n                          (let ((lst12 (cdr\
    \ lst11)))\n                            (let ((lst13 (cdr lst12)))\n         \
    \                     (let ((lst14 (cdr lst13)))\n                           \
    \     (let ((lst15 (cdr lst14)))\n                                  (let ((lst16\
    \ (cdr lst15)))\n                                    (let ((lst17 (cdr lst16)))\n\
    \                                      (let ((lst18 (cdr lst17)))\n          \
    \                              (let ((lst19 (cdr lst18)))\n                  \
    \                        (let ((lst20 (cdr lst19)))\n                        \
    \                    (let ((lst21 (cdr lst20)))\n                            \
    \                  (let ((lst22 (cdr lst21)))\n                              \
    \                  (let ((lst23 (cdr lst22)))\n                              \
    \                    (let ((lst24 (cdr lst23)))\n                            \
    \                        (let ((lst25 (cdr lst24)))\n                        \
    \                              (let ((lst26 (cdr lst25)))\n                  \
    \                                      (let ((lst27 (cdr lst26)))\n          \
    \                                                (let ((lst28 (cdr lst27)))\n\
    \                                        ", "  (if (null? lst)\n    (list)\n \
    \   (let ((min (car lst))\n          (rest (cdr lst)))\n      (if (null? rest)\n\
    \        (list min)\n        (let ((max (car rest))\n              (rest (cdr\
    \ rest)))\n          (if (null? rest)\n            (list min max)\n          \
    \  (let ((min (car rest))\n                  (rest (cdr rest)))\n            \
    \  (if (null? rest)\n                (list min max min)\n                (let\
    \ ((max (car rest))\n                      (rest (cdr rest)))\n              \
    \    (if (null? rest)\n                    (list min max min max)\n          \
    \          (let ((min (car rest))\n                          (rest (cdr rest)))\n\
    \                      (if (null? rest)\n                        (list min max\
    \ min max min)\n                        (let ((max (car rest))\n             \
    \                 (rest (cdr rest)))\n                          (if (null? rest)\n\
    \                            (list min max min max min max)\n                \
    \            (let ((min (car rest))\n                                  (rest (cdr\
    \ rest)))\n                              (if (null? rest)\n                  \
    \              (list min max min max min max min max)\n                      \
    \          (let ((max (car rest))\n                                      (rest\
    \ (cdr rest)))\n                                 (if (null? rest)\n          \
    \                         (list min max min max min max min max min max)\n   \
    \                                (list min max min max min max min max min max\
    \ min max
  "  (if (null? lst)\n    (list)\n    (let ((head (car lst)))\n      (let ((tail (cdr\
    \ lst)))\n        (if (null? tail)\n          (list head)\n          (let ((head2\
    \ (car tail)))\n            (let ((tail2 (cdr tail)))\n              (if (null?\
    \ tail2)\n                (list head head2)\n                (let ((head3 (car\
    \ tail2)))\n                  (let ((tail3 (cdr tail2)))\n                   \
    \ (if (null? tail3)\n                      (list head head2 head3)\n         \
    \             (let ((head4 (car tail3)))\n                        (let ((tail4\
    \ (cdr tail3)))\n                          (if (null? tail4)\n               \
    \             (list head head2 head3 head4)\n                            (let\
    \ ((head5 (car tail4)))\n                              (let ((tail5 (cdr tail4)))\n\
    \                                (if (null? tail5)\n                         \
    \         (list head head2 head3 head4 head5)\n                              \
    \    (let ((head6 (car tail5)))\n                                    (let ((tail6\
    \ (cdr tail5)))\n                                      (if (null? tail6)\n   \
    \                                     (list head head2 head3 head4 head5 head6)\n\
    \                                        (let ((head7 (car tail6)))\n        \
    \                                  (let ((tail7 (cdr tail6)))\n              \
    \                              (if (null? tail7)\n                           \
    \                   (list head head2 head3 head4 head5 head6 head7)\n        \
    \                                      (let ((head8 (car tail7)))\n          \
    \                                      (let ((tail8 (cdr tail7)))\n          \
    \                                        (if (null? tail8)\n                 \
    \                                   (list head head2 head3 head4 head5 head6 head7\
    \ head8)\n                                                    (let ((head9 (car\
    \ tail8)))\n                                                      (let ((tail9\
    \ (cdr tail8)))\n                                                        (if (null?\
    \ tail9)\n                                                          (list head\
    \ head2 head3 head4 head5 head6 head7 head8 head9)\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
