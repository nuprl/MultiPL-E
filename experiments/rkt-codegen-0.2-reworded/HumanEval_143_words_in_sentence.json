{
  "name": "HumanEval_143_words_in_sentence",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters\n(define (words_in_sentence sentence)\n",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate words_in_sentence))\n    (check-equal? (candidate \"This is a test\") \"is\")\n    (check-equal? (candidate \"lets go for swimming\") \"go for\")\n    (check-equal? (candidate \"there is no place available here\") \"there is no place\")\n    (check-equal? (candidate \"Hi I am Hussein\") \"Hi am Hussein\")\n    (check-equal? (candidate \"go for it\") \"go for it\")\n    (check-equal? (candidate \"here\") \"\")\n    (check-equal? (candidate \"here is\") \"is\")\n))\n\n(test-humaneval)",
  "completions": [
    "  (let ((words (split-string sentence \" \")))\n    (let ((new-words (map (lambda (word)\n                            (if (string? word)\n                              (if (not (string? (string->number word)))\n                                 (string->number word)))\n                              (string->number word)))\n           words))\n      (map (lambda (word)\n            (if (not (string? word))\n              (string->number word)))\n         words))))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (not (string-length word))\n            (return word)\n            (if (not (string-length (string-append (string-length word) \"1\")))\n              (return word)\n              (let ((prime (string-length word)))\n                (if (not (string-length prime))\n                  (return word)\n                  (if (not (string-length (string-append prime \"1\")))\n                    (return word)\n                    (let ((prime (string-length prime)))\n                      (if (not (string-length prime))\n                        (return word)\n                        (if (not (string-length (string-append prime \"1\")))\n                          (return word)\n                          (return word)))))))))))))))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (n) (not (modulo n 2)))\n            (filter (lambda (n) (modulo n 2))\n              (map (lambda (i) (length word)))))\n          (words)))\n    (join-words words)))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter (lambda (prime)\n                     (string-length prime))\n                     (string-split word \"\")\n                     (string-length word))))\n         words)))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string? word)\n            (if (not (string-length word))\n              (string-length word)\n              (if (not (string-length (string-append word \"0\")))\n                (string-length (string-append word \"0\"))))\n            (if (not (string-length (string-append word \"1\")))\n              (string-length (string-append word \"1\"))))\n          words))\n  (string-join \" \" words)))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter (lambda (prime) (string-length prime))\n                  (filter (lambda (prime) (string-length prime))\n                        (filter (lambda (prime) (string-length prime))\n                          (string-length prime))))\n              (string-length word)))\n         words)))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (if (is-prime? (string-length word))\n                (string word)\n                (words_in_sentence (string-append word \" \"))))\n            (words_in_sentence (string-append word \" \"))))\n    (words_in_sentence (string-join \" \" words))))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter (lambda (prime) (string-length prime))\n                  (string-split-at-first-prime word))\n              (words)))\n          words))\n)\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter (lambda (prime)\n                     (string-length prime))\n                     (string-split word \" \"))\n              (words_in_sentence word))))\n    (join-words words)))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string? word)\n            (if (not (string? (string->number word)))\n                (string->number word)\n                (string->number (string->number word)))\n              (string->number word)))\n        words))\n)\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter (lambda (prime) (string-length prime))\n                  (string-split word \"\")\n                  (string-length prime))\n              (words_in_sentence word))))\n    (join \" \" (words))))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (n) (not (modulo n 2)))\n            (string-length word)))\n      words)))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (x) (string-length x) (is-prime? (string-length x))))\n           (words)))\n      words)))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter-primes (string-length word))\n            (string-length word))))))",
    "  (let ((words (split-string sentence \" \")))\n    (let ((words (map (lambda (word)\n                       (if (string? word)\n                         (if (not (string? (string->number word)))\n                             (string->number word)))\n                         (string->number word)))\n          words)))\n      (map (lambda (word)\n             (if (not (string? word))\n                 (string->number word)))\n         words)))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (n) (not (modulo n 2)))\n            (string-length word)))\n      words)))\n",
    "  (let ((words (split-string sentence \" \")))\n    (let ((primes (make-primes (length words))))\n      (let ((new-words (map (lambda (word)\n                             (if (member primes (string-length word))\n                                (string-append word \"\")\n                                (string-append word \"\"))))\n            (words (map new-words words))))\n        (string-join \" \" words))))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (n) (not (modulo n 2)))\n            (filter (lambda (n) (modulo n 2))\n              (filter (lambda (n) (modulo n 3))\n                (filter (lambda (n) (modulo n 5))\n                  (filter (lambda (n) (modulo n 7))\n                    (filter (lambda (n) (modulo n 11))\n                      (filter (lambda (n) (modulo n 13))\n                        (filter (lambda (n) (modulo n 17))\n                          (filter (lambda (n) (modulo n 19))\n                            (filter (lambda (n) (modulo n 23))\n                              (filter (lambda (n) (modulo n 29))\n                                (filter (lambda (n) (modulo n 31))\n                                  (filter (lambda (n) (modulo n 37))\n                                    (filter (lambda (n) (modulo n 41))\n                                      (filter (lambda (n) (modulo n 43))\n                                        (filter (lambda (n) (modulo n 47))\n                                          (filter (lambda (n) (modulo n 53))\n                                            (filter (lambda (n) (modulo n 59))\n                                              (filter (lambda (n) (modulo n 61))\n                                                (filter (lambda (n) (modulo n 67))\n                                                  (filter (lambda (n) (modulo n 71))\n                                                    (filter (lambda (n) (modulo n 73))\n                                                      (filter (lambda (n) (modulo n 79))\n                                                        (filter (lambda (n) (modulo n 83))\n                                                         (filter (lambda (n) (modulo n 89))\n                                                           (filter (lambda (n) (modulo n 97))\n                                                            (filter (lambda (n) (modulo n 101))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
    "  (let ((words (split-string sentence \" \")))\n    (let ((new-words (map (lambda (word)\n                            (if (string? word)\n                              (if (not (string? (string->number word)))\n                                 (string->number word)))\n                              (string->number word)))\n           words))\n      (map (lambda (word)\n             (if (string? word)\n                 (if (not (string? (string->number word)))\n                     (string->number word)))\n             (string->number word)))\n      words))\n)\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter (lambda (n) (not (modulo n 2))) (string-length word)))\n            (string \"\")))\n      words)))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (not (string-length word))\n            (return word)\n            (if (not (string-length (string-append word \"1\")))\n              (return word)\n              (if (not (string-length (string-append word \"2\")))\n                (return word)\n                (if (not (string-length (string-append word \"3\")))\n                  (return word)\n                  (if (not (string-length (string-append word \"4\")))\n                    (return word)\n                    (if (not (string-length (string-append word \"5\")))\n                      (return word)\n                      (if (not (string-length (string-append word \"6\")))\n                        (return word)\n                        (if (not (string-length (string-append word \"7\")))\n                          (return word)\n                          (if (not (string-length (string-append word \"8\")))\n                            (return word)\n                            (if (not (string-length (string-append word \"9\")))\n                              (return word)\n                              (if (not (string-length (string-append word \"10\")))\n                                (return word)\n                                (if (not (string-length (string-append word \"11\")))\n                                  (return word)\n                                  (if (not (string-length (string-append word \"12\")))\n                                    (return word)\n                                    (if (not (string-length (string-append word \"13\")))\n                                      (return word)\n                                      (if (not (string-length (string-append word \"14\")))\n                                        (return word)\n                                        (if (not (string-length (string-append word \"15\")))\n                                          (return word)\n                                          (if (not (string-length (string-append word \"16\")))\n                                            (return word)\n                                            (if (not (string-length (string-append word \"17\")))\n                                              (return word)\n                                              (if (not (string-",
    "  (let ((words (split-string sentence \" \")))\n    (let ((new-words (map (lambda (word)\n                            (if (string? word)\n                              (if (not (string? (string->number word)))\n                                 (string->number word)))\n                              (string->number word)))\n           words))\n      (map (lambda (word)\n            (if (not (string? word))\n              (string->number word)))\n         new-words))))\n",
    "  (let ((words (split-string sentence \" \")))\n    (let ((words-lengths (map (lambda (word) (string-length word)))\n           (primes (map (lambda (n) (filter (lambda (x) (not (modulo n x))) (range (n)))))))\n      (let ((new-words (map (lambda (word)\n                             (if (member (string-length word) primes)\n                                (string-append word \" \")\n                                word))))\n           (map (lambda (word)\n                 (if (member (string-length word) primes)\n                     (string-append word \" \")\n                     word))))\n        (string-join \" \" new-words words))))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string? word)\n            (if (not (string? (string->number word)))\n                (string->number word)\n                (string->number (string->number word) + 1))\n              (string->number word)))\n        words)))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter (lambda (prime) (string-length prime))\n                  (string-split word \"\")\n                  (string-length prime))\n            (words_in_sentence word))))\n    (join \" \" (words))))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (n) (modulo n 2) 0)\n            (map (lambda (i) (modulo i 2))\n              (map (lambda (j) (modulo j 2))\n                (map (lambda (k) (modulo k 2))\n                  (map (lambda (l) (modulo l 2))\n                    (map (lambda (m) (modulo m 2))\n                      (map (lambda (n) (modulo n 2))\n                        (map (lambda (o) (modulo o 2))\n                          (map (lambda (p) (modulo p 2))\n                            (map (lambda (q) (modulo q 2))\n                              (map (lambda (r) (modulo r 2))\n                                (map (lambda (s) (modulo s 2))\n                                  (map (lambda (t) (modulo t 2))\n                                    (map (lambda (u) (modulo u 2))\n                                      (map (lambda (v) (modulo v 2))\n                                        (map (lambda (w) (modulo w 2))\n                                          (map (lambda (x) (modulo x 2))\n                                            (map (lambda (y) (modulo y 2))\n                                              (map (lambda (z) (modulo z 2))\n                                                (map (lambda (a) (modulo a 2))\n                                                  (map (lambda (b) (modulo b 2))\n                                                    (map (lambda (c) (modulo c 2))\n                                                      (map (lambda (d) (modulo d 2))\n                                                        (map (lambda (e) (modulo e 2))\n                                                          (map (lambda (f) (modulo f 2))\n                                                           (map (lambda (g) (modulo g 2))\n                                                            (map (lambda (h) (modulo h 2))\n                                                              (map (lambda (i) (modulo i 2",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string? word)\n            (if (not (string-length word))\n              (string-append word \"\")\n              (if (not (string-length word))\n                (string-append word \"\")\n                (if (not (string-length word))\n                  (string-append word \"\")\n                  (if (not (string-length word))\n                    (string-append word \"\")\n                    (if (not (string-length word))\n                      (string-append word \"\")\n                      (if (not (string-length word))\n                        (string-append word \"\")\n                        (if (not (string-length word))\n                          (string-append word \"\")\n                          (if (not (string-length word))\n                            (string-append word \"\")\n                            (if (not (string-length word))\n                              (string-append word \"\")\n                              (if (not (string-length word))\n                                (string-append word \"\")\n                                (if (not (string-length word))\n                                  (string-append word \"\")\n                                  (if (not (string-length word))\n                                    (string-append word \"\")\n                                    (if (not (string-length word))\n                                      (string-append word \"\")\n                                      (if (not (string-length word))\n                                        (string-append word \"\")\n                                        (if (not (string-length word))\n                                          (string-append word \"\")\n                                          (if (not (string-length word))\n                                            (string-append word \"\")\n                                            (if (not (string-length word))\n                                              (string-append word \"\")\n                                              (if (not (string-length word))\n                                                (string-append word \"\")\n                                                (if (not (string-length word))\n                                                  (string-append word \"\")\n                                                  (if (not (string-length word))\n                                                    (string-append word \"\")\n                                                    (if (",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (if (string-length (string-upcase word))\n                (string-append (string-upcase word) \"\")\n                (string-append (string-upcase word) \" \"))\n            (string-append (string-upcase word) \" \")))\n      words)))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (prime)\n                    (string-length word)\n                    (modulo (string-length word) 2)))\n          words)))))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string? word)\n            (if (not (string-length word))\n              (string-append word \"\")\n              (string-length word)))\n            (string-length word)))\n      words))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter (lambda (n) (string-length n))\n                  (filter-map (lambda (prime) (if (modulo n prime) word))\n                                  (range (string-length word))))\n              (words)))\n         words)))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter (lambda (prime)\n                     (string-length prime))\n                  (string-split word \"\")\n                  (string-length word))))\n         words)))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (n) (modulo n 2) (string-length word)))\n          (words)))\n    (join \" \" (words)))\n)\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (let ((new-words (map (lambda (word)\n                           (if (string? word)\n                               (if (not (string? (string->number word)))\n                                   (string->number word)))\n                               (string->number word)))\n           words)))\n      (map (lambda (word)\n             (if (string? word)\n                 (if (not (string? (string->number word)))\n                     (string->number word))\n                 (string->number word)))\n         new-words))))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (let ((words-lengths (map (lambda (word) (string-length word))))\n          (primes (filter (lambda (x) (not (modulo x 2))))))\n      (let ((new-words (map (lambda (word)\n                             (if (member words-lengths word)\n                                (append words \" \")\n                                (append words word))))))\n        (if (empty? new-words)\n            (let ((new-words-lengths (map (lambda (word) (string-length word))))\n                  (if (empty? new-words-lengths)\n                      (let ((new-words-lengths-length (length new-words-lengths)))\n                          (if (new-words-lengths-length >= 2)\n                              (return (map (lambda (word) (string-copy word 0 (string-length word) - 1)) new-words))))\n                        (return (map (lambda (word) (string-copy word 0 (string-length word) - 1)) new-words))))\n          (return (map (lambda (word) (string-copy word 0 (string-length word) - 1)) new-words)))))))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter-primes (string-length word))\n            (string-length word)))\n      words)))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (n) (not (modulo n 2)))\n               (filter (lambda (n) (modulo n 2))\n                     (string-length word))))\n         words)))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (n) (not (modulo n 2)))\n               (filter (lambda (n) (modulo n 2))\n                     (map (lambda (i) (length word)))))\n          (words)))\n    (join-words words)))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string? word)\n            (if (not (string-length word))\n              (string-append (string-length word) \"\")\n              (string-append word)))\n            (string-length word)))\n      words))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter (lambda (n) (string-length n))\n                  (filter-map (lambda (prime) (if (modulo n prime) word))\n                                  (range (string-length word))))\n              (words)))\n         words)))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string? word)\n            (if (not (string? (string->number word)))\n                (string->number word)\n                (string->number (string->number word)))\n              (string->number word)))\n        words))\n)\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (x) (string-length x) (is-prime? (string-length x))))\n           (words)))\n      words))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (n) (not (modulo n 2)))\n            (filter (lambda (n) (not (modulo n 3)))\n              (filter (lambda (n) (not (modulo n 5)))\n                (filter (lambda (n) (not (modulo n 7)))\n                  (filter (lambda (n) (not (modulo n 11)))\n                    (filter (lambda (n) (not (modulo n 13)))\n                      (filter (lambda (n) (not (modulo n 17)))\n                        (filter (lambda (n) (not (modulo n 19)))\n                          (filter (lambda (n) (not (modulo n 23)))\n                            (filter (lambda (n) (not (modulo n 29)))\n                              (filter (lambda (n) (not (modulo n 31)))\n                                (filter (lambda (n) (not (modulo n 37)))\n                                  (filter (lambda (n) (not (modulo n 41)))\n                                    (filter (lambda (n) (not (modulo n 43)))\n                                      (filter (lambda (n) (not (modulo n 47)))\n                                       (filter (lambda (n) (not (modulo n 53)))\n                                        (filter (lambda (n) (not (modulo n 59)))\n                                          (filter (lambda (n) (not (modulo n 61)))\n                                            (filter (lambda (n) (not (modulo n 67)))\n                                              (filter (lambda (n) (not (modulo n 71)))\n                                                (filter (lambda (n) (not (modulo n 73)))\n                                                  (filter (lambda (n) (not (modulo n 79)))\n                                                   (filter (lambda (n) (not (modulo n 83)))\n                                                     (filter (lambda (n) (not (modulo n 89)))\n                                                      (filter (lambda (n) (not (modulo n 97)))\n                                                        (filter (lambda (n) (not (modulo n 101",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (n) (not (modulo n 2)))\n               (filter (lambda (n) (modulo n 2))\n                      (map (lambda (i) (length word)))))\n          (words)))\n    (join-words words)))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (if (is-prime? (string-length word))\n                (string word)))\n            (words)))\n    (words)))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (if (string-length (string-upcase word))\n                (string-append word \" \")\n                (string-append (string-upcase word) \" \"))\n            (string-append (string-upcase word))))\n      words)))\n",
    "  (let ((words (split-string sentence \" \")))\n    (let ((words-lengths (map (lambda (word) (string-length word)) words)))\n      (let ((primes (filter (lambda (x) (not (modulo x 2)))) (range 2 (int-sqrt (max words-lengths) + 1))))\n        (let ((new-words (map (lambda (i) (if (member i words-lengths) (string-append word (first primes)) word)) words)))\n          (string-join \" \" new-words)))))))\n\n;;; A program to find the longest common substring of two strings.\n;;; The longest common substring is the longest substring that is a common substring of both strings.\n;;; The longest common substring of two strings is the longest substring that is a common substring of both strings.\n;;; The longest common substring of two strings is the longest substring that is a common substring of both strings.\n;;; The longest common substring of two strings is the longest substring that is a common substring of both strings.\n;;; The longest common substring of two strings is the longest substring that is a common substring of both strings.\n;;; The longest common substring of two strings is the longest substring that is a common substring of both strings.\n;;; The longest common substring of two strings is the longest substring that is a common substring of both strings.\n;;; The longest common substring of two strings is the longest substring that is a common substring of both strings.\n;;; The longest common substring of two strings is the longest substring that is a common substring of both strings.\n;;; The longest common substring of two strings is the longest substring that is a common substring of both strings.\n;;; The longest common substring of two strings is the longest substring that is a common substring of both strings.\n;;; The longest common substring of two strings is the longest substring that is a common substring of both strings.\n;;; The longest common substring of two strings is the longest substring that is a common substring of both strings.\n;;; The longest common substring of two strings is the longest substring that is a common substring of both strings.\n;;; The longest",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string? word)\n            (if (not (string-length word))\n              (if (not (integer? (string-length word)))\n                (let ((prime (prime-number (string-length word))))\n                  (if (prime? prime)\n                    (string-append word \" \")\n                    (words-in-sentence (string-append word \" \"))))))))\n        words))\n)\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string? word)\n            (if (not (string-length word))\n              (string-length word)\n              (if (not (string-length (string-append word \"0\")))\n                (string-length (string-append word \"0\"))))\n            (if (not (string-length (string-append word \"1\")))\n              (string-length (string-append word \"1\"))))\n          words))\n  (string-join \" \" words)))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter (lambda (n) (string-length n))\n                  (filter (lambda (p) (modulo p (string-length word)))\n                        (range 1 (string-length word))))\n              (string-copy word)))\n          words)))\n)\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (n) (not (modulo n 2)))\n            (filter (lambda (n) (not (modulo n 3)))\n              (filter (lambda (n) (not (modulo n 5)))\n                (filter (lambda (n) (not (modulo n 7)))\n                  (filter (lambda (n) (not (modulo n 11)))\n                    (filter (lambda (n) (not (modulo n 13)))\n                      (filter (lambda (n) (not (modulo n 17)))\n                        (filter (lambda (n) (not (modulo n 19)))\n                          (filter (lambda (n) (not (modulo n 23)))\n                            (filter (lambda (n) (not (modulo n 29)))\n                              (filter (lambda (n) (not (modulo n 31)))\n                                (filter (lambda (n) (not (modulo n 37)))\n                                  (filter (lambda (n) (not (modulo n 41)))\n                                    (filter (lambda (n) (not (modulo n 43)))\n                                      (filter (lambda (n) (not (modulo n 47)))\n                                       (filter (lambda (n) (not (modulo n 53)))\n                                        (filter (lambda (n) (not (modulo n 59)))\n                                          (filter (lambda (n) (not (modulo n 61)))\n                                            (filter (lambda (n) (not (modulo n 67)))\n                                              (filter (lambda (n) (not (modulo n 71)))\n                                                (filter (lambda (n) (not (modulo n 73)))\n                                                  (filter (lambda (n) (not (modulo n 79)))\n                                                   (filter (lambda (n) (not (modulo n 83)))\n                                                     (filter (lambda (n) (not (modulo n 89)))\n                                                      (filter (lambda (n) (not (modulo n 97)))\n                                                        (filter (lambda (n) (not (modulo n 101",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (x) (not (modulo (string-length word) 2)))\n             (filter (lambda (y) (not (modulo (string-length y) 2)))\n                   (string-split \" \" y))))\n         words))\n)\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter (lambda (prime) (string-length prime))\n                  (string-split word \" \"))\n            (list \"\"))))))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter (lambda (n) (not (modulo n 2)))\n                   (map (lambda (i) (string-length (substring word i i)))\n                         (range 1 (string-length word))))\n               (string-length word))))\n      words))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (n) (not (modulo n 2)))\n            (string-length word)))\n      words)))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (if (is-prime? (string-length word))\n                (string word)\n                (words_in_sentence (string-append word \" \"))))\n            (words_in_sentence (string-append word \" \"))))\n    (words_in_sentence (string-join \" \" words))))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (n) (not (modulo n 2)))\n            (filter (lambda (n) (modulo n 2))\n              (filter (lambda (n) (modulo n 3))\n                (filter (lambda (n) (modulo n 5))\n                  (filter (lambda (n) (modulo n 7))\n                    (filter (lambda (n) (modulo n 11))\n                      (filter (lambda (n) (modulo n 13))\n                        (filter (lambda (n) (modulo n 17))\n                          (filter (lambda (n) (modulo n 19))\n                            (filter (lambda (n) (modulo n 23))\n                              (filter (lambda (n) (modulo n 29))\n                                (filter (lambda (n) (modulo n 31))\n                                  (filter (lambda (n) (modulo n 37))\n                                    (filter (lambda (n) (modulo n 41))\n                                      (filter (lambda (n) (modulo n 43))\n                                        (filter (lambda (n) (modulo n 47))\n                                          (filter (lambda (n) (modulo n 53))\n                                            (filter (lambda (n) (modulo n 59))\n                                              (filter (lambda (n) (modulo n 61))\n                                                (filter (lambda (n) (modulo n 67))\n                                                  (filter (lambda (n) (modulo n 71))\n                                                    (filter (lambda (n) (modulo n 73))\n                                                      (filter (lambda (n) (modulo n 79))\n                                                        (filter (lambda (n) (modulo n 83))\n                                                         (filter (lambda (n) (modulo n 89))\n                                                           (filter (lambda (n) (modulo n 97))\n                                                            (filter (lambda (n) (modulo n 101))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (n) (modulo n 2)))\n          (string-split word \" \")))))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (n) (not (modulo n 2)))\n            (filter (lambda (n) (modulo n 2))\n              (filter (lambda (n) (modulo n 3))\n                (filter (lambda (n) (modulo n 5))\n                  (filter (lambda (n) (modulo n 7))\n                    (filter (lambda (n) (modulo n 11))\n                      (filter (lambda (n) (modulo n 13))\n                        (filter (lambda (n) (modulo n 17))\n                          (filter (lambda (n) (modulo n 19))\n                            (filter (lambda (n) (modulo n 23))\n                              (filter (lambda (n) (modulo n 29))\n                                (filter (lambda (n) (modulo n 31))\n                                  (filter (lambda (n) (modulo n 37))\n                                    (filter (lambda (n) (modulo n 41))\n                                      (filter (lambda (n) (modulo n 43))\n                                        (filter (lambda (n) (modulo n 47))\n                                          (filter (lambda (n) (modulo n 53))\n                                            (filter (lambda (n) (modulo n 59))\n                                              (filter (lambda (n) (modulo n 61))\n                                                (filter (lambda (n) (modulo n 67))\n                                                  (filter (lambda (n) (modulo n 71))\n                                                    (filter (lambda (n) (modulo n 73))\n                                                      (filter (lambda (n) (modulo n 79))\n                                                        (filter (lambda (n) (modulo n 83))\n                                                         (filter (lambda (n) (modulo n 89))\n                                                           (filter (lambda (n) (modulo n 97))\n                                                            (filter (lambda (n) (modulo n 101))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (if (is-prime? (string-length word))\n                (string word)\n                (words_in_sentence (string-append word \" \"))))\n            (words_in_sentence (string-append word \" \"))))\n    (words_in_sentence (string-join \" \" words))))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter (lambda (n) (string-length n))\n                  (filter-map (lambda (n) (string-length n))\n                          (filter (lambda (n) (modulo n 2)))\n                          (range 1 (string-length word)))\n                  (range 1 (string-length word))))\n            (string-copy word)))\n    (join-strings words \" \")))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (n) (modulo n 2)))\n          (string-length word))\n      words))\n)\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter (lambda (prime) (string-length prime))\n                   (filter (lambda (prime) (string-length prime))\n                         (string-split-at-first-of-char word \" \")))\n               (string-split-at-first-of-char word \" \"))))\n    words))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (n) (modulo n 2) 0)\n            (map (lambda (i) (length word))\n              (range 1 (modulo (length word) 2))))\n          words)))\n)\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (n) (not (modulo n 2)))\n               (filter (lambda (n) (not (modulo n 3)))\n                      (filter (lambda (n) (not (modulo n 5)))\n                            (filter (lambda (n) (not (modulo n 7)))\n                                  (filter (lambda (n) (not (modulo n 11)))\n                                      (filter (lambda (n) (not (modulo n 13)))\n                                          (filter (lambda (n) (not (modulo n 17)))\n                                              (filter (lambda (n) (not (modulo n 19)))\n                                                  (filter (lambda (n) (not (modulo n 23)))\n                                                    (filter (lambda (n) (not (modulo n 29)))\n                                                        (filter (lambda (n) (not (modulo n 31)))\n                                                           (filter (lambda (n) (not (modulo n 37)))\n                                                                (filter (lambda (n) (not (modulo n 41)))\n                                                                    (filter (lambda (n) (not (modulo n 43)))\n                                                                        (filter (lambda (n) (not (modulo n 47)))\n                                                                            (filter (lambda (n) (not (modulo n 53)))\n                                                                                (filter (lambda (n) (not (modulo n 59)))\n                                                                                    (filter (lambda (n) (not (modulo n 61)))\n                                                                                        (filter (lambda (n) (not (modulo n 67)))\n                                                                                            (filter (lambda (n) (not (modulo n 71)))\n                                                                                                (filter (lambda (n) (not (modulo n 73)))\n                                                                                                    (filter (lambda (n) (not (modulo n 79)))\n                                                                                                        (filter (lambda (n) (not (modulo n 83)))\n                                                                                                            (filter (lambda (n) (not (modulo",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string? word)\n            (if (not (string-length word))\n              (string-append (string-length word) \"\")\n              (string-append (string-length word) \" \"))\n            (string-length word)))\n      words))\n)\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter (lambda (prime)\n                     (string-length prime))\n                     (string-split word \" \"))\n            (words)))\n      words)))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (n) (not (modulo n 2)))\n            (filter (lambda (n) (not (modulo n 3)))\n              (filter (lambda (n) (not (modulo n 5)))\n                (filter (lambda (n) (not (modulo n 7)))\n                  (filter (lambda (n) (not (modulo n 11)))\n                    (filter (lambda (n) (not (modulo n 13)))\n                      (filter (lambda (n) (not (modulo n 17)))\n                        (filter (lambda (n) (not (modulo n 19)))\n                          (filter (lambda (n) (not (modulo n 23)))\n                            (filter (lambda (n) (not (modulo n 29)))\n                              (filter (lambda (n) (not (modulo n 31)))\n                                (filter (lambda (n) (not (modulo n 37)))\n                                  (filter (lambda (n) (not (modulo n 41)))\n                                    (filter (lambda (n) (not (modulo n 43)))\n                                      (filter (lambda (n) (not (modulo n 47)))\n                                       (filter (lambda (n) (not (modulo n 53)))\n                                        (filter (lambda (n) (not (modulo n 59)))\n                                          (filter (lambda (n) (not (modulo n 61)))\n                                            (filter (lambda (n) (not (modulo n 67)))\n                                              (filter (lambda (n) (not (modulo n 71)))\n                                                (filter (lambda (n) (not (modulo n 73)))\n                                                  (filter (lambda (n) (not (modulo n 79)))\n                                                   (filter (lambda (n) (not (modulo n 83)))\n                                                     (filter (lambda (n) (not (modulo n 89)))\n                                                      (filter (lambda (n) (not (modulo n 97)))\n                                                        (filter (lambda (n) (not (modulo n 101",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter (lambda (prime) (string-length prime))\n                  (string-split word \" \"))\n            \"\")\n          ))\n      words)\n)\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string? word)\n            (if (not (string? (string->number word)))\n                (string->number word)\n                (string->number (string->number word)))\n              (string->number word)))\n        words))\n)\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter-primes (string-length word))\n            (string-length word)))\n      words)))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (let ((words-prime (map (lambda (word) (filter (lambda (prime) (string-length word) (modulo (string-length word) prime))) words)))\n          (words-prime-length (length words-prime)))\n      (if (even? words-prime-length)\n        (map (lambda (word) (string-join \" \" word)) words-prime)\n        (words-prime)))\n  ))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (n) (not (modulo n 2)))\n            (string-length word)))\n      words))\n)\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (x) (string-length x) (is-prime? (string-length x))))\n            (words)))\n      words)))\n",
    "  (let ((words (split-string sentence \" \")))\n    (let ((primes (make-primes (length words))))\n      (let ((new-words (map (lambda (word)\n                             (if (member primes (length word))\n                               (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append (append",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (x) (string-length x) (is-prime? (string-length x))))\n           (words)))\n      words))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (if (string-length (string-upcase word))\n                (string-upcase word)\n                (string-downcase word))))\n        words)))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (if (is-prime? (string-length word))\n                (string word)\n                (words_in_sentence (string-append word \" \"))))\n            (words_in_sentence word)))\n    (words)))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (if (string-length (string-append word \"1\"))\n                (string-append word \"1\")\n                (string-append word \"2\"))\n              (string-append word \"2\"))))\n    (string-join \" \" words)))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter (lambda (prime)\n                     (string-length prime))\n                  (filter (lambda (prime)\n                           (string-length prime)\n                           (string-length word)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string? word)\n            (if (not (string->number word))\n              (string->number word)\n              (string->number (string->number word)))\n            (string->number word)))\n      words))\n)\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (x) (string-length x) (is-prime? (string-length x))))\n           (words)))\n      words)))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (if (string-length (string-upcase word))\n                (string-upcase word)))\n            (string-upcase word)))\n      words))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (if (is-prime? (string-length word))\n                (string word)))\n            (string \"\")))\n      words)))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter (lambda (prime) (string-length prime))\n                  (string-split word \"\")\n                  (string-length word))\n              (string-length word))))\n      words)))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (if (is-prime? (string-length word))\n                (string word)\n                (words_in_sentence (string-append word \" \"))))\n            (words_in_sentence word)))\n    (words_in_sentence (first words) (second words))))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (n) (not (modulo n 2)))\n               (filter (lambda (n) (modulo n 2))\n                     (filter (lambda (n) (modulo n 3))\n                          (filter (lambda (n) (modulo n 5))\n                               (filter (lambda (n) (modulo n 7))\n                                    (filter (lambda (n) (modulo n 11))\n                                        (filter (lambda (n) (modulo n 13))\n                                            (filter (lambda (n) (modulo n 17))\n                                                (filter (lambda (n) (modulo n 19))\n                                                    (filter (lambda (n) (modulo n 23))\n                                                        (filter (lambda (n) (modulo n 29))\n                                                            (filter (lambda (n) (modulo n 31))\n                                                                (filter (lambda (n) (modulo n 37))\n                                                                    (filter (lambda (n) (modulo n 41))\n                                                                        (filter (lambda (n) (modulo n 43))\n                                                                            (filter (lambda (n) (modulo n 47))\n                                                                                (filter (lambda (n) (modulo n 53))\n                                                                                    (filter (lambda (n) (modulo n 59))\n                                                                                        (filter (lambda (n) (modulo n 61))\n                                                                                            (filter (lambda (n) (modulo n 67))\n                                                                                                (filter (lambda (n) (modulo n 71))\n                                                                                                    (filter (lambda (n) (modulo n 73))\n                                                                                                        (filter (lambda (n) (modulo n 79))\n                                                                                                            (filter (lambda (n) (modulo n 83))\n                                                                                                                (filter (lambda (n) (modulo n 89))\n                                                                                                                     (filter (lambda (n) (modulo n 97))\n                                                                                              ",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter (lambda (prime) (string-length prime))\n                  (string-split word \" \"))\n            (list \"\"))))))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string? word)\n            (if (not (string? (string->number word)))\n                (string->number word)\n                (string->number (string->number word)))\n              (string->number word)))\n         words))\n)\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (not (string-length word))\n            (words_in_sentence (substring sentence 0 (string-length sentence) - (string-length word) - 1)))\n          (string-length word)))\n    (words)))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (n) (modulo n 2)))\n          (string-split word \" \")))\n    (join \" \" (map (lambda (word)\n                     (filter (lambda (n) (modulo n 2))\n                          (string-split word \" \")))\n              words))))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter (lambda (prime)\n                     (string-length prime))\n                   (string-split word \" \"))\n             (words)))\n      words)))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter (lambda (n) (string-length n)) (string-split word \" \")))\n          (string-length word)))\n      words)))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (not (string-length word))\n            (return \"\")\n            (if (not (string-length (string-length word)))\n              (return word)\n              (if (not (string-length (string-length (string-length word))))\n                (return word)\n                (return word)))))))\n  words)\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (x) (string-length x) (is-prime? (string-length x))))\n           (words)))\n      words))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string? word)\n            (if (not (string-length word))\n              (string-append (string-length word) \"\")\n              (string-append word \"\"))))\n        words)))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string? word)\n            (if (not (string-length word))\n              (string-append (string-length word) \"\")\n              (string-append (string-length word) \"/\")\n              (string-append (string-length word) \"\")\n              (string-append (string-length word) \"/\")\n              (string-append (string-length word) \"\")\n              (string-append (string-length word) \"/\")\n              (string-append (string-length word) \"\")\n              (string-append (string-length word) \"/\")\n              (string-append (string-length word) \"\")\n              (string-append (string-length word) \"/\")\n              (string-append (string-length word) \"\")\n              (string-append (string-length word) \"/\")\n              (string-append (string-length word) \"\")\n              (string-append (string-length word) \"/\")\n              (string-append (string-length word) \"\")\n              (string-append (string-length word) \"/\")\n              (string-append (string-length word) \"\")\n              (string-append (string-length word) \"/\")\n              (string-append (string-length word) \"\")\n              (string-append (string-length word) \"/\")\n              (string-append (string-length word) \"\")\n              (string-append (string-length word) \"/\")\n              (string-append (string-length word) \"\")\n              (string-append (string-length word) \"/\")\n              (string-append (string-length word) \"\")\n              (string-append (string-length word) \"/\")\n              (string-append (string-length word) \"\")\n              (string-append (string-length word) \"/\")\n              (string-append (string-length word) \"\")\n              (string-append (string-length word) \"/\")\n              (string-append (string-length word) \"\")\n              (string-append (string-length word) \"/\")\n              (string-append (string-length word) \"\")\n              (string-append (",
    "  (let ((words (split-string sentence \" \")))\n    (let ((primes (primes-of-words words)))\n      (map (lambda (word)\n             (if (member primes word)\n               word\n               (concat word \" \")))\n        words))))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (x) (not (modulo x 2)))\n            (filter (lambda (y) (not (modulo y 2)))\n              (filter (lambda (z) (not (modulo z 2)))\n                (filter (lambda (w) (not (modulo w 2)))\n                  (filter (lambda (u) (not (modulo u 2)))\n                    (filter (lambda (v) (not (modulo v 2)))\n                      (filter (lambda (t) (not (modulo t 2)))\n                        (filter (lambda (s) (not (modulo s 2)))\n                          (filter (lambda (r) (not (modulo r 2)))\n                            (filter (lambda (q) (not (modulo q 2)))\n                              (filter (lambda (p) (not (modulo p 2)))\n                                (filter (lambda (o) (not (modulo o 2)))\n                                  (filter (lambda (n) (not (modulo n 2)))\n                                    (filter (lambda (m) (not (modulo m 2)))\n                                      (filter (lambda (l) (not (modulo l 2)))\n                                        (filter (lambda (k) (not (modulo k 2)))\n                                          (filter (lambda (j) (not (modulo j 2)))\n                                            (filter (lambda (i) (not (modulo i 2)))\n                                              (filter (lambda (h) (not (modulo h 2)))\n                                                (filter (lambda (g) (not (modulo g 2)))\n                                                  (filter (lambda (f) (not (modulo f 2)))\n                                                   (filter (lambda (e) (not (modulo e 2)))\n                                                     (filter (lambda (d) (not (modulo d 2)))\n                                                      (filter (lambda (c) (not (modulo c 2)))\n                                                        (filter (lambda (b) (not (modulo b 2)))\n                                                         (filter (lambda (a) (not",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (n) (modulo n 2) (string-length word)))\n          (words)))\n    (join \" \" (words)))\n)\n",
    "  (let ((words (split-string sentence \" \")))\n    (let ((words-lengths (map (lambda (word) (string-length word))))\n          (primes (filter (lambda (x) (not (modulo x 2))) words-lengths)))\n      (map (lambda (prime)\n             (map (lambda (word)\n                    (if (member prime words-lengths)\n                        (append word \" \")\n                        word))\n               words)))))\n)\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (prime)\n                   (string-length word)\n                   (modulo (string-length word) 2)))\n          words)))\n)\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string? word)\n            (if (not (string-length word))\n              (string-append (string-length word) \"\")\n              (string-append (string-length word) \" \"))\n            (string-length word)))\n      words))\n)\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string? word)\n            (if (not (string? (string->number word)))\n                (string->number word)\n                (string->number (string->number word)))\n              (string->number word)))\n        words)))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (let ((words-lengths (map (lambda (word) (string-length word)) words)))\n      (let ((primes (filter (lambda (x) (not (modulo x 2)))) (filter (lambda (x) (not (modulo x 3))) (filter (lambda (x) (not (modulo x 5))) (filter (lambda (x) (not (modulo x 7))) (filter (lambda (x) (not (modulo x 11))) (filter (lambda (x) (not (modulo x 13))) (filter (lambda (x) (not (modulo x 17))) (filter (lambda (x) (not (modulo x 19))) (filter (lambda (x) (not (modulo x 23))) (filter (lambda (x) (not (modulo x 29))) (filter (lambda (x) (not (modulo x 31))) (filter (lambda (x) (not (modulo x 37))) (filter (lambda (x) (not (modulo x 41))) (filter (lambda (x) (not (modulo x 43)))))))))))))))))))))))))\n    (let ((new-words (map (lambda (word) (filter (lambda (x) (not (modulo x (string-length word)))) word)) words))\n      (let ((new-words-lengths (map (lambda (word) (string-length word)) new-words)))\n        (let ((new-words-primes (filter (lambda (x) (not (modulo x 2))) (filter (lambda (x) (not (modulo x 3))) (filter (lambda (x) (not (modulo x 5))) (filter (lambda (x) (not (modulo x 7))) (filter (lambda (x) (not (modulo x 11))) (filter (lambda (x) (not (modulo x 13))) (filter (lambda (x) (not (modulo x 17))) (filter (lambda (x) (not (modulo x 19))) (filter (lambda (x) (not (modulo x 23))) (filter (lambda (x) (not (modulo x 29))) (filter (lambda (x) (not (modulo x 31))) (filter (lambda (x) (not (",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter (lambda (n) (not (modulo n 2)))\n                   (string-length word)\n                   (string-length (string-append word \"0\")))\n              (string-append word \"0\")))\n         words)))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (if (string-length (prime-number-of-length word))\n                (string word)\n                (words_in_sentence (string-append word \" \"))))\n            (words_in_sentence word)))\n    (words)))\n",
    "  (let ((words (split-string sentence \" \")))\n    (let ((lengths (map (lambda (word) (string-length word))))\n          (primes (filter (lambda (n) (not (modulo n 2))))\n             (map (lambda (n) (if (modulo n 2) (string-length n) (string-length (string-append n \" \")))))\n             (lengths))))\n      (string-join \" \" (map (lambda (word) (filter (lambda (n) (modulo n 2)) (string-split word \" \"))))))))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter (lambda (prime) (string-length prime))\n                 (string-split word \"\")\n                 (string-length prime))\n            (string-length word))))\n      words)))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter (lambda (prime) (string-length prime))\n                  (string-split-at-first-of-char word \" \"))\n              (words_in_sentence word))))\n    (join \" \" (words)))\n)\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (let ((primes (make-primes (length words))))\n      (let ((new-words (map (lambda (word)\n                             (if (find primes word)\n                                 word\n                                 (string-append word \" \"))))\n            (map (lambda (word)\n                  (if (find primes (string-length word))\n                       word\n                       (string-append word \" \"))))\n            (map (lambda (word)\n                  (if (find primes (string-length word))\n                       word\n                       (string-append word \" \"))))\n            (map (lambda (word)\n                  (if (find primes (string-length word))\n                       word\n                       (string-append word \" \"))))\n            (map (lambda (word)\n                  (if (find primes (string-length word))\n                       word\n                       (string-append word \" \"))))\n            (map (lambda (word)\n                  (if (find primes (string-length word))\n                       word\n                       (string-append word \" \"))))\n            (map (lambda (word)\n                  (if (find primes (string-length word))\n                       word\n                       (string-append word \" \"))))\n            (map (lambda (word)\n                  (if (find primes (string-length word))\n                       word\n                       (string-append word \" \"))))\n            (map (lambda (word)\n                  (if (find primes (string-length word))\n                       word\n                       (string-append word \" \"))))\n            (map (lambda (word)\n                  (if (find primes (string-length word))\n                       word\n                       (string-append word \" \"))))\n            (map (lambda (word)\n                  (if (find primes (string-length word))\n                       word\n                       (string-append word \" \"))))\n            (map (lambda (word)\n                  (if (find primes (string-length word))\n                       word\n                       (string-append word \" \"))))\n            (map (lambda (word)\n                  (if (find primes (string-length word))\n                       word\n                       (string-append word \" \"))))\n            (map (lambda (word)\n                  ",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (n) (not (modulo n 2)))\n            (filter (lambda (n) (not (modulo n 3)))\n              (filter (lambda (n) (not (modulo n 5)))\n                (filter (lambda (n) (not (modulo n 7)))\n                  (filter (lambda (n) (not (modulo n 11)))\n                    (filter (lambda (n) (not (modulo n 13)))\n                      (filter (lambda (n) (not (modulo n 17)))\n                        (filter (lambda (n) (not (modulo n 19)))\n                          (filter (lambda (n) (not (modulo n 23)))\n                            (filter (lambda (n) (not (modulo n 29)))\n                              (filter (lambda (n) (not (modulo n 31)))\n                                (filter (lambda (n) (not (modulo n 37)))\n                                  (filter (lambda (n) (not (modulo n 41)))\n                                    (filter (lambda (n) (not (modulo n 43)))\n                                      (filter (lambda (n) (not (modulo n 47)))\n                                       (filter (lambda (n) (not (modulo n 53)))\n                                        (filter (lambda (n) (not (modulo n 59)))\n                                          (filter (lambda (n) (not (modulo n 61)))\n                                            (filter (lambda (n) (not (modulo n 67)))\n                                              (filter (lambda (n) (not (modulo n 71)))\n                                                (filter (lambda (n) (not (modulo n 73)))\n                                                (filter (lambda (n) (not (modulo n 79)))\n                                                  (filter (lambda (n) (not (modulo n 83)))\n                                                   (filter (lambda (n) (not (modulo n 89)))\n                                                     (filter (lambda (n) (not (modulo n 97)))\n                                                      (filter (lambda (n) (not (modulo n 101))))))))",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string? word)\n            (if (not (string-length word))\n              (string-append word \"\")\n              (string-length word)))\n            (string-length word)))\n      words))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter (lambda (prime)\n                     (string-length prime))\n                   (filter (lambda (prime)\n                            (string-length prime)\n                            (string-length word)\n                            (string-length prime)\n                            (string-length prime)\n                            (string-length prime))\n                      (string-length word)))\n                (string-length word)))\n      words))\n)\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter (lambda (prime) (string-length prime))\n                  (string-split word \" \"))\n            (list \"\"))))))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (n) (not (modulo n 2)))\n               (filter (lambda (n) (modulo n 2))\n                     (map (lambda (i) (length word)))))\n          (words)))\n    (join-words words)))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (if (string-length (string-replace/all word \" \" \"\"))\n                (string-join \" \" (filter (lambda (n) (string-length n)) (filter (lambda (n) (modulo n 2)))) word)\n                (string-join \" \" (filter (lambda (n) (modulo n 2)) (filter (lambda (n) (string-length n)) (string-split word \" \"))))))))\n    words))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (n) (not (modulo n 2)))\n            (filter (lambda (n) (not (modulo n 3)))\n              (filter (lambda (n) (not (modulo n 5)))\n                (filter (lambda (n) (not (modulo n 7)))\n                  (filter (lambda (n) (not (modulo n 11)))\n                    (filter (lambda (n) (not (modulo n 13)))\n                      (filter (lambda (n) (not (modulo n 17)))\n                        (filter (lambda (n) (not (modulo n 19)))\n                          (filter (lambda (n) (not (modulo n 23)))\n                            (filter (lambda (n) (not (modulo n 29)))\n                              (filter (lambda (n) (not (modulo n 31)))\n                                (filter (lambda (n) (not (modulo n 37)))\n                                  (filter (lambda (n) (not (modulo n 41)))\n                                    (filter (lambda (n) (not (modulo n 43)))\n                                      (filter (lambda (n) (not (modulo n 47)))\n                                        (filter (lambda (n) (not (modulo n 53)))\n                                          (filter (lambda (n) (not (modulo n 59)))\n                                            (filter (lambda (n) (not (modulo n 61)))\n                                              (filter (lambda (n) (not (modulo n 67)))\n                                                (filter (lambda (n) (not (modulo n 71)))\n                                                  (filter (lambda (n) (not (modulo n 73)))\n                                                   (filter (lambda (n) (not (modulo n 79)))\n                                                     (filter (lambda (n) (not (modulo n 83)))\n                                                      (filter (lambda (n) (not (modulo n 89)))\n                                                        (filter (lambda (n) (not (modulo n 97)))\n                                                         (filter (lambda (n) (not",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string? word)\n            (if (not (string-length word))\n              (string-length word)\n              (if (not (string-length word))\n                (string-length word)\n                (if (not (string-length word))\n                  (string-length word)\n                  (if (not (string-length word))\n                    (string-length word)\n                    (if (not (string-length word))\n                      (string-length word)\n                      (if (not (string-length word))\n                        (string-length word)\n                        (if (not (string-length word))\n                          (string-length word)\n                          (if (not (string-length word))\n                            (string-length word)\n                            (if (not (string-length word))\n                              (string-length word)\n                              (if (not (string-length word))\n                                (string-length word)\n                                (if (not (string-length word))\n                                  (string-length word)\n                                  (if (not (string-length word))\n                                    (string-length word)\n                                    (if (not (string-length word))\n                                      (string-length word)\n                                      (if (not (string-length word))\n                                        (string-length word)\n                                        (if (not (string-length word))\n                                          (string-length word)\n                                          (if (not (string-length word))\n                                            (string-length word)\n                                            (if (not (string-length word))\n                                              (string-length word)\n                                              (if (not (string-length word))\n                                                (string-length word)\n                                                (if (not (string-length word))\n                                                  (string-length word)\n                                                  (if (not (string-length word))\n                                                    (string-length word)\n                                                    (if (not (string-length word))\n                                                      (string-length word",
    "  (let ((words (split-string sentence \" \")))\n    (let ((new-words (map (lambda (word)\n                            (if (string? word)\n                              (if (not (string? (string->number word)))\n                                 (string->number word)))\n                              (string->number word)))\n           words))\n      (map (lambda (word)\n             (if (not (string? word))\n               (string->number word)))\n           new-words))))\n",
    "  (let ((words (split-string sentence \" \")))\n    (let ((new-words (map (lambda (word)\n                            (if (string? word)\n                              (if (not (string? (string->number word)))\n                                (if (not (string->number word))\n                                  (string->number word)))\n                                (string->number word)))\n                            words)))\n      (map (lambda (word)\n            (if (string? word)\n              (if (not (string->number word))\n                (string->number word))\n              (string->number word)))\n        new-words))))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter (lambda (prime) (string-length prime))\n                  (string-split-at-any word \" \"))\n            (words)))\n      words))\n)\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (let ((words-prime (map (lambda (w) (filter-prime w))))\n          (words-prime-length (map (lambda (w) (length w)))))\n      (map (lambda (w) (concat w \" \")) (words-prime-length words-prime)))))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (x) (string-length x) (is-prime? (string-length x))))\n           (words)))\n      words))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter (lambda (prime) (string-length prime))\n                  (string-split-at-first-of word \" \"))\n              (words)))\n          words))\n)\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string? word)\n            (if (not (string-length word))\n              (string-length word)\n              (if (not (string-length word))\n                (string-length word)\n                (if (not (string-length word))\n                  (string-length word)\n                  (if (not (string-length word))\n                    (string-length word)\n                    (if (not (string-length word))\n                      (string-length word)\n                      (if (not (string-length word))\n                        (string-length word)\n                        (if (not (string-length word))\n                          (string-length word)\n                          (if (not (string-length word))\n                            (string-length word)\n                            (if (not (string-length word))\n                              (string-length word)\n                              (if (not (string-length word))\n                                (string-length word)\n                                (if (not (string-length word))\n                                  (string-length word)\n                                  (if (not (string-length word))\n                                    (string-length word)\n                                    (if (not (string-length word))\n                                      (string-length word)\n                                      (if (not (string-length word))\n                                        (string-length word)\n                                        (if (not (string-length word))\n                                          (string-length word)\n                                          (if (not (string-length word))\n                                            (string-length word)\n                                            (if (not (string-length word))\n                                              (string-length word)\n                                              (if (not (string-length word))\n                                                (string-length word)\n                                                (if (not (string-length word))\n                                                  (string-length word)\n                                                  (if (not (string-length word))\n                                                    (string-length word)\n                                                    (if (not (string-length word))\n                                                      (string-length word",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (n) (not (modulo n 2)))\n            (string-length word)))\n      words)))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string? word)\n            (if (not (string-length word))\n              (if (not (prime? (string-length word)))\n                (words-in-sentence (string-append word \" \"))))\n            (words-in-sentence (string-append word \" \"))))\n      words)))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (if (string-length (string-upcase word))\n                (string-append word \" \")\n                (string-append (string-upcase word) \" \"))\n            (string-append (string-upcase word) \" \"))))\n    (filter (lambda (word) (string-length word)) words)))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string? word)\n            (if (not (string? (string->number word)))\n                (string->number word)\n                (string->number (string->number word))))\n            (string->number word)))\n      words))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter (lambda (prime) (string-length prime))\n                  (string-split word \" \"))\n            (string-append word \" \"))))\n    (string-join \" \" words)))\n",
    "  (let ((words (split-string sentence \" \")))\n    (let ((words-lengths (map length words)))\n      (let ((primes (filter (lambda (x) (not (modulo x 2)))) (words-lengths)))\n        (let ((new-words (map (lambda (x) (first x)) primes)))\n          (let ((new-words-lengths (map length new-words)))\n            (let ((new-words-primes (filter (lambda (x) (not (modulo x 2))) new-words-lengths)))\n              (let ((new-words-prime-lengths (map length new-words-primes)))\n                (let ((new-words-prime-primes (filter (lambda (x) (not (modulo x 2))) new-words-prime-lengths)))\n                  (let ((new-words-prime-prime-lengths (map length new-words-prime-primes)))\n                    (let ((new-words-prime-prime-primes (filter (lambda (x) (not (modulo x 2))) new-words-prime-prime-lengths)))\n                      (let ((new-words-prime-prime-prime-lengths (map length new-words-prime-prime-primes)))\n                        (let ((new-words-prime-prime-prime-primes (filter (lambda (x) (not (modulo x 2))) new-words-prime-prime-prime-lengths)))\n                          (let ((new-words-prime-prime-prime-prime-lengths (map length new-words-prime-prime-prime-primes)))\n                            (let ((new-words-prime-prime-prime-prime-primes (filter (lambda (x) (not (modulo x 2))) new-words-prime-prime-prime-prime-lengths)))\n                              (let ((new-words-prime-prime-prime-prime-prime-lengths (map length new-words-prime-prime-prime-prime-primes)))\n                                (let ((new-words-prime-prime-prime-prime-prime-primes (filter (lambda (x) (not (modulo x 2))) new-words-prime-prime-prime-prime-prime-lengths)))\n                                  ",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (not (string-length word))\n            (words_in_sentence (substring sentence (string-length sentence) - (string-length word) )))\n          (string-split word \" \")))\n    (filter (lambda (word) (string-length word)) words)))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string? word)\n            (if (not (string->number word))\n              (string->number word)\n              (string->number (string->number word) + 1))\n            (string->number word)))\n      words)))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (if (is-prime? (string-length word))\n                (string word)\n                (words_in_sentence (string-append word \" \"))))\n            (words_in_sentence (string-append word \" \"))))\n    (if (empty? words)\n      \"\"\n      (string-join \" \" words)))\n",
    "  (let ((words (split-string sentence \" \")))\n    (let ((words-prime (map (lambda (word) (filter-prime (string-length word) word))))\n          (words-prime-length (map (lambda (word) (string-length word)) words-prime)))\n      (let ((words-prime-length-sorted (sort words-prime-length)))\n        (let ((words-prime-length-sorted-sorted (sort words-prime-length-sorted)))\n          (let ((words-prime-length-sorted-sorted-sorted (sort words-prime-length-sorted-sorted)))\n            (let ((words-prime-length-sorted-sorted-sorted-sorted (sort words-prime-length-sorted-sorted-sorted)))\n              (let ((words-prime-length-sorted-sorted-sorted-sorted-sorted (sort words-prime-length-sorted-sorted-sorted-sorted)))\n                (let ((words-prime-length-sorted-sorted-sorted-sorted-sorted-sorted (sort words-prime-length-sorted-sorted-sorted-sorted-sorted)))\n                  (let ((words-prime-length-sorted-sorted-sorted-sorted-sorted-sorted-sorted (sort words-prime-length-sorted-sorted-sorted-sorted-sorted-sorted)))\n                    (let ((words-prime-length-sorted-sorted-sorted-sorted-sorted-sorted-sorted-sorted (sort words-prime-length-sorted-sorted-sorted-sorted-sorted-sorted-sorted)))\n                      (let ((words-prime-length-sorted-sorted-sorted-sorted-sorted-sorted-sorted-sorted-sorted (sort words-prime-length-sorted-sorted-sorted-sorted-sorted-sorted-sorted-sorted)))\n                        (let ((words-prime-length-sorted-sorted-sorted-sorted-sorted-sorted-sorted-sorted-sorted-sorted (sort",
    "  (let ((words (split-string sentence \" \")))\n    (let ((new-words (map (lambda (word)\n                           (if (string? word)\n                               (if (not (string? (string->number word)))\n                                   (string->number word)))\n                               (string->number word)))\n           words)))\n      (map (lambda (word)\n             (if (string? word)\n                 (if (not (string? (string->number word)))\n                     (string->number word))\n                 (string->number word)))\n         new-words))))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (let ((primes (make-primes (length words))))\n      (let ((new-words (map (lambda (word)\n                             (if (member primes (string-length word))\n                                (string-append word \"\")\n                                (string-append word \"\"))))\n            (words (map new-words words))))\n        (string-join \" \" words))))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string? word)\n            (if (not (string? (string->number word)))\n                (string->number word)\n                (string->number (string->number word)))\n              (string->number word)))\n         words)))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string? word)\n            (if (not (string? (string->number word)))\n                (string->number word)\n                (string->number (string->number word)))\n              (string->number word)))\n        words))\n)\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (n) (modulo n 2) 0)\n            (map (lambda (i) (length word))\n              (range 1 (modulo i 2))))\n          words)))))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter (lambda (n) (string-length n))\n                  (filter-map (lambda (n) (string-length n))\n                          (filter (lambda (n) (modulo n 2)))\n                          (range 1 (string-length word))))\n              (string-split \" \" word)))\n         words))\n)\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (x) (not (modulo x 2)))\n            (filter (lambda (y) (not (modulo y 2)))\n              (filter (lambda (z) (not (modulo z 2)))\n                (filter (lambda (w) (not (modulo w 2)))\n                  (filter (lambda (u) (not (modulo u 2)))\n                    (filter (lambda (v) (not (modulo v 2)))\n                      (filter (lambda (t) (not (modulo t 2)))\n                        (filter (lambda (s) (not (modulo s 2)))\n                          (filter (lambda (r) (not (modulo r 2)))\n                            (filter (lambda (q) (not (modulo q 2)))\n                              (filter (lambda (p) (not (modulo p 2)))\n                                (filter (lambda (o) (not (modulo o 2)))\n                                  (filter (lambda (n) (not (modulo n 2)))\n                                    (filter (lambda (m) (not (modulo m 2)))\n                                      (filter (lambda (l) (not (modulo l 2)))\n                                        (filter (lambda (k) (not (modulo k 2)))\n                                          (filter (lambda (j) (not (modulo j 2)))\n                                            (filter (lambda (i) (not (modulo i 2)))\n                                              (filter (lambda (h) (not (modulo h 2)))\n                                                (filter (lambda (g) (not (modulo g 2)))\n                                                  (filter (lambda (f) (not (modulo f 2)))\n                                                   (filter (lambda (e) (not (modulo e 2)))\n                                                     (filter (lambda (d) (not (modulo d 2)))\n                                                      (filter (lambda (c) (not (modulo c 2)))\n                                                        (filter (lambda (b) (not (modulo b 2)))\n                                                         (filter (lambda (a) (not",
    "  (let ((words (split-string sentence \" \")))\n    (let ((words-lengths (map (lambda (word) (string-length word))))\n          (primes (filter (lambda (prime) (not (modulo (car words-lengths) prime)))\n                       (range (min-int (car words-lengths)) (max-int (car words-lengths)))))\n          (new-words (map (lambda (prime)\n                           (filter (lambda (word) (modulo (car words-lengths) prime))\n                                  (cdr words) word))\n                       primes))\n          (new-words-lengths (map (lambda (prime) (car words-lengths)) primes)))\n      (map (lambda (word) (string-join \" \" (append new-words word))) words)))\n)\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (if (is-prime? (string-length word))\n                (string word)))\n            (words)))\n    (join-strings \" \" words)))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (if (is-prime? (string-length word))\n                (string word)\n                (words_in_sentence (string-append word \" \"))))\n            (words_in_sentence word)))\n    (words_in_sentence (first words)))))\n",
    "  (let ((words (split-string sentence \" \")))\n    (let ((words-prime (map (lambda (word) (filter (lambda (prime) (modulo (string-length word) prime))) words))))\n      (map (lambda (word) (string-join \" \" word)) words-prime))))\n",
    "  (let ((words (split-string sentence \" \")))\n    (let ((words-lengths (map (lambda (word) (string-length word))))\n          (primes (map (lambda (word) (filter (lambda (prime) (modulo word prime)) words-lengths))))\n          (new-words (map (lambda (prime) (filter (lambda (word) (member word words)) primes)) words)))\n      (string-join \" \" (map (lambda (word) (string-join \" \" word)) new-words))))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (n) (modulo n 2) 0)\n            (map (lambda (i) (length word))\n              (range 1 (modulo i 2))))\n          words)))\n  words)\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string? word)\n            (if (not (string? (string->number word)))\n                (string->number word)\n                (string->number (string->number word))))\n            (string->number word)))\n      words))\n",
    "  (let ((words (split-string sentence \" \")))\n    (let ((new-words (map (lambda (word)\n                            (if (string? word)\n                              (if (not (string? (string->number word)))\n                                 (string->number word)))\n                              (string->number word)))\n           words)))\n      (map (lambda (word)\n             (if (string? word)\n                 (if (not (string? (string->number word)))\n                     (string->number word)))\n             (string->number word)))\n        words)))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter-primes (string-length word))\n            (string-length word)))\n      words)))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (if (string-length (string-replace/all word \" \" \"\"))\n                (string-join \" \" (filter (lambda (n) (string-length n)) (filter (lambda (n) (string-contains-ci n \"a\"))))\n                  (filter (lambda (n) (string-contains-ci n \"e\" \"i\" \"o\" \"u\" \"y\")) (filter (lambda (n) (string-contains-ci n \"l\" \"m\" \"n\" \"r\" \"s\" \"t\"))))))))\n          words)))\n)\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (if (is-prime? (string-length word))\n                (string word)\n                (words_in_sentence (string-append word \" \"))))\n            (words_in_sentence word)))\n    (words)))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter (lambda (prime) (string-length prime))\n                  (string-split-at-first-of word \" \"))\n            (words)))\n      words)))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (if (is-prime? (string-length word))\n                (string word)\n                (words_in_sentence (string-append word \" \"))))\n            (words_in_sentence (string-append word \" \"))))\n    (words_in_sentence (string-join \" \" words))))\n",
    "  (let ((words (split-string sentence \" \")))\n    (let ((new-words (map (lambda (word)\n                          (if (string? word)\n                            (if (string? (string->number word))\n                              (string->number word)\n                              (string->number (string->number word))))\n                            (string->number word))))\n          (new-words (filter (lambda (word)\n                              (if (string? word)\n                                (if (string? (string->number word))\n                                  (string->number word))\n                                (not (string->number word))))\n                        words))))\n    (string-join \" \" new-words)))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (n) (not (modulo n 2)))\n            (string-length word)))\n      words)))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (let ((words-prime (map (lambda (word) (filter-prime (string-length word) (string-length word) (string-length word))) words))))\n    (join words-prime \" \")))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string? word)\n            (if (not (string-length word))\n              (string-length word)\n              (if (not (string-length word))\n                (string-length word)\n                (if (not (string-length word))\n                  (string-length word)\n                  (if (not (string-length word))\n                    (string-length word)\n                    (if (not (string-length word))\n                      (string-length word)\n                      (if (not (string-length word))\n                        (string-length word)\n                        (if (not (string-length word))\n                          (string-length word)\n                          (if (not (string-length word))\n                            (string-length word)\n                            (if (not (string-length word))\n                              (string-length word)\n                              (if (not (string-length word))\n                                (string-length word)\n                                (if (not (string-length word))\n                                  (string-length word)\n                                  (if (not (string-length word))\n                                    (string-length word)\n                                    (if (not (string-length word))\n                                      (string-length word)\n                                      (if (not (string-length word))\n                                        (string-length word)\n                                        (if (not (string-length word))\n                                          (string-length word)\n                                          (if (not (string-length word))\n                                            (string-length word)\n                                            (if (not (string-length word))\n                                              (string-length word)\n                                              (if (not (string-length word))\n                                                (string-length word)\n                                                (if (not (string-length word))\n                                                  (string-length word)\n                                                  (if (not (string-length word))\n                                                    (string-length word)\n                                                    (if (not (string-length word))\n                                                      (string-length word",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (not (string-length word))\n            (words_in_sentence (substring sentence (string-length sentence) - (string-length word) - 1)))\n          (string-length word)))\n    (join \" \" words)))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter (lambda (prime)\n                     (string-length prime))\n                  (filter (lambda (prime)\n                           (string-length prime)\n                           (string-length prime))\n                    (string-length word)))\n              (string-length word)))\n        words)))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter (lambda (prime)\n                     (string-length prime))\n                  (filter (lambda (prime)\n                           (string-length prime)\n                           (string-length word)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length prime)\n                           (string-length",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter (lambda (prime)\n                     (string-length prime))\n                     (string-split word \"-\"))))\n      words)))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter-primes (string-length word))\n            (string-length word)))\n      words)))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (if (is-prime? (string-length word))\n                (string word)\n                (words_in_sentence (string-append word \" \"))))\n            (words_in_sentence word)))\n    (words)))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (n) (modulo n 2) 0)\n            (map (lambda (i) (length word))\n              (range 1 (modulo i 2))))\n          words)))\n)\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter (lambda (prime)\n                     (string-length prime))\n                     (string-split word \" \"))\n            \"\")\n          ))\n      words)\n)\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (prime)\n                   (string-length word)\n                   (modulo (string-length word) 2)))\n          words)))))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (n) (not (modulo n 2)))\n               (filter (lambda (n) (modulo n 2))\n                      (map (lambda (n) (modulo n 2))\n                          (filter (lambda (n) (modulo n 2))\n                               (map (lambda (n) (modulo n 2))\n                                   (filter (lambda (n) (modulo n 2))\n                                        (map (lambda (n) (modulo n 2))\n                                             (filter (lambda (n) (modulo n 2))\n                                                 (map (lambda (n) (modulo n 2))\n                                                     (filter (lambda (n) (modulo n 2))\n                                                         (map (lambda (n) (modulo n 2))\n                                                             (filter (lambda (n) (modulo n 2))\n                                                                (map (lambda (n) (modulo n 2))\n                                                                    (filter (lambda (n) (modulo n 2))\n                                                                        (map (lambda (n) (modulo n 2))\n                                                                            (filter (lambda (n) (modulo n 2))\n                                                                                (map (lambda (n) (modulo n 2))\n                                                                                    (filter (lambda (n) (modulo n 2))\n                                                                                        (map (lambda (n) (modulo n 2))\n                                                                                            (filter (lambda (n) (modulo n 2))\n                                                                                                (map (lambda (n) (modulo n 2))\n                                                                                                    (filter (lambda (n) (modulo n 2))\n                                                                                                         (map (lambda (n) (modulo n 2))\n                                                                                                               (filter (lambda (n) (modulo n 2))\n                                                                                                                     (map (lambda (n) (modulo n 2))\n                                                                                                                            (filter (lambda (n) (modulo n 2))\n                                                                                                                                (map (",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string? word)\n            (if (not (string? (string->number word)))\n                (string->number word)\n                (string->number (string->number word)))\n              (string->number word)))\n        words))\n)\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string? word)\n            (if (not (string->number word))\n              (string->number word)\n              (string->number (string->number word) + 1)))\n            (string->number word)))\n      words))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (x) (string-length x) (is-prime? (string-length x))))\n           (words)))\n      words))\n",
    "  (let ((words (split-string sentence \" \")))\n    (let ((primes (make-primes (length words))))\n      (let ((new-words (map (lambda (w)\n                               (if (member primes w)\n                                  (append new-words w)\n                                  (append new-words (string-replace w \" \" \"\"))))\n                               words))))\n      (join-words new-words))))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (if (is-prime? (string-length word))\n                (string word)\n                (words_in_sentence (string-append word \" \"))))\n            (words_in_sentence (string-append word \" \"))))\n    (if (empty? words)\n      \"\"\n      (string-join \" \" words)))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (n) (not (modulo n 2)))\n            (filter (lambda (n) (modulo n 2))\n              (filter (lambda (n) (modulo n 3))\n                (filter (lambda (n) (modulo n 5))\n                  (filter (lambda (n) (modulo n 7))\n                    (filter (lambda (n) (modulo n 11))\n                      (filter (lambda (n) (modulo n 13))\n                        (filter (lambda (n) (modulo n 17))\n                          (filter (lambda (n) (modulo n 19))\n                            (filter (lambda (n) (modulo n 23))\n                              (filter (lambda (n) (modulo n 29))\n                                (filter (lambda (n) (modulo n 31))\n                                  (filter (lambda (n) (modulo n 37))\n                                    (filter (lambda (n) (modulo n 41))\n                                      (filter (lambda (n) (modulo n 43))\n                                        (filter (lambda (n) (modulo n 47))\n                                          (filter (lambda (n) (modulo n 53))\n                                            (filter (lambda (n) (modulo n 59))\n                                              (filter (lambda (n) (modulo n 61))\n                                                (filter (lambda (n) (modulo n 67))\n                                                  (filter (lambda (n) (modulo n 71))\n                                                    (filter (lambda (n) (modulo n 73))\n                                                      (filter (lambda (n) (modulo n 79))\n                                                        (filter (lambda (n) (modulo n 83))\n                                                         (filter (lambda (n) (modulo n 89))\n                                                           (filter (lambda (n) (modulo n 97))\n                                                            (filter (lambda (n) (modulo n 101))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter (lambda (n) (modulo n 2)))\n            (words_in_sentence (substring word 1))))\n      words)))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (if (string-length (string-upcase word))\n                (string-upcase word)\n                (string-downcase word))))\n         words)))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter-prime (string-length word))\n            (string-length word)))\n      words)))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (not (string-length word))\n            (words_in_sentence (substring sentence 0 (string-length sentence) - (string-length word) - 1)))\n          (string-length word)))\n    (filter (lambda (word) (not (string-length word))) words)))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (x) (not (modulo x 2)))\n            (filter (lambda (y) (not (modulo y 2)))\n              (filter (lambda (z) (not (modulo z 2)))\n                (filter (lambda (w) (not (modulo w 2)))\n                  (filter (lambda (u) (not (modulo u 2)))\n                    (filter (lambda (v) (not (modulo v 2)))\n                      (filter (lambda (t) (not (modulo t 2)))\n                        (filter (lambda (s) (not (modulo s 2)))\n                          (filter (lambda (r) (not (modulo r 2)))\n                            (filter (lambda (q) (not (modulo q 2)))\n                              (filter (lambda (p) (not (modulo p 2)))\n                                (filter (lambda (o) (not (modulo o 2)))\n                                  (filter (lambda (n) (not (modulo n 2)))\n                                    (filter (lambda (m) (not (modulo m 2)))\n                                      (filter (lambda (l) (not (modulo l 2)))\n                                        (filter (lambda (k) (not (modulo k 2)))\n                                          (filter (lambda (j) (not (modulo j 2)))\n                                            (filter (lambda (i) (not (modulo i 2)))\n                                              (filter (lambda (h) (not (modulo h 2)))\n                                                (filter (lambda (g) (not (modulo g 2)))\n                                                  (filter (lambda (f) (not (modulo f 2)))\n                                                   (filter (lambda (e) (not (modulo e 2)))\n                                                     (filter (lambda (d) (not (modulo d 2)))\n                                                      (filter (lambda (c) (not (modulo c 2)))\n                                                        (filter (lambda (b) (not (modulo b 2)))\n                                                         (filter (lambda (a) (not",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter (lambda (prime) (string-length prime))\n                  (string-split word \" \"))\n            (list \"\")))\n          words)))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter (lambda (n) (not (modulo n 2))) (string-length word)))\n            (words)))\n      words))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (n) (not (modulo n 2)))\n            (map (lambda (i) (string-length word))\n              (range (1 (modulo i 2))))))\n      words)))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter (lambda (prime) (string-length prime))\n                   (string-split-at-first-of word \" \"))\n              (words)))\n         words))\n)\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter (lambda (prime) (string-length prime))\n                 (string-split word \"\")\n                 (string-length prime))\n            (string-length word))))\n      words))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string? word)\n            (if (not (string-length word))\n              (string-append (string-length word) \"\")\n              (string-append (string-length word) \"/\")\n              (string-append (string-length word) \"/\")\n              (string-append (string-length word) \"/\")\n              (string-append (string-length word) \"/\")\n              (string-append (string-length word) \"/\")\n              (string-append (string-length word) \"/\")\n              (string-append (string-length word) \"/\")\n              (string-append (string-length word) \"/\")\n              (string-append (string-length word) \"/\")\n              (string-append (string-length word) \"/\")\n              (string-append (string-length word) \"/\")\n              (string-append (string-length word) \"/\")\n              (string-append (string-length word) \"/\")\n              (string-append (string-length word) \"/\")\n              (string-append (string-length word) \"/\")\n              (string-append (string-length word) \"/\")\n              (string-append (string-length word) \"/\")\n              (string-append (string-length word) \"/\")\n              (string-append (string-length word) \"/\")\n              (string-append (string-length word) \"/\")\n              (string-append (string-length word) \"/\")\n              (string-append (string-length word) \"/\")\n              (string-append (string-length word) \"/\")\n              (string-append (string-length word) \"/\")\n              (string-append (string-length word) \"/\")\n              (string-append (string-length word) \"/\")\n              (string-append (string-length word) \"/\")\n              (string-append (string-length word) \"/\")\n              (string-append (string-length word) \"/\")\n              (string-append (string-length word) \"/\")\n              (string-append (string-length word) \"/\")\n              (string-append (string-length word) \"/\")\n              (string-append (",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (prime)\n                   (string-length word)\n                   (modulo (string-length word) 2)))\n          words)))))\n",
    "  (let ((words (split-string sentence \" \")))\n    (let ((primes (make-primes (length words))))\n      (map (lambda (word)\n             (if (member primes (length word))\n                 (append (map (lambda (prime)\n                               (string-replace word \" \" \"\"))\n                               primes)\n                     word))\n             word))))\n)\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter (lambda (prime) (string-length prime))\n                   (map (lambda (prime) (string-length prime))\n                         (filter (lambda (prime) (string-length prime))\n                                 (map (lambda (prime) (string-length prime))\n                                       (filter (lambda (prime) (string-length prime))\n                                               (string-split-at-first prime word))))))))\n           words))))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (n) (not (modulo n 2)))\n            (string-length word)))\n      words))\n)\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (if (string-length (string-upcase word))\n                (string-upcase word)\n                (string-downcase word))))\n         words)))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (filter (lambda (n) (modulo n 2) (string-length word)))\n          (words)))\n    (join \" \" (words)))\n)\n",
    "  (let ((words (split-string sentence \" \")))\n    (let ((new-words (map (lambda (word)\n                            (if (string? word)\n                              (if (string? (first word))\n                                (if (string? (last word))\n                                  (if (prime? (string-length word))\n                                    (string-append word \" \"))))\n                                (if (prime? (string-length word))\n                                  (string-append word \" \"))))\n                            (words)))\n      (string-join \" \" new-words))))\n)\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (not (string-length word))\n            (return word)\n            (if (not (string-length (string-append word \"0\")))\n              (return word)\n              (let ((prime (string-length word)))\n                (if (not (string-length (string-append prime \"0\")))\n                  (return word)\n                  (if (not (string-length (string-append prime \"1\")))\n                    (return word)\n                    (let ((prime (string-length word)))\n                      (if (not (string-length (string-append prime \"2\")))\n                        (return word)\n                        (if (not (string-length (string-append prime \"3\")))\n                          (return word)\n                          (let ((prime (string-length word)))\n                            (if (not (string-length (string-append prime \"4\")))\n                              (return word)\n                              (if (not (string-length (string-append prime \"5\")))\n                                (return word)\n                                (let ((prime (string-length word)))\n                                  (if (not (string-length (string-append prime \"6\")))\n                                    (return word)\n                                    (if (not (string-length (string-append prime \"7\")))\n                                      (return word)\n                                      (let ((prime (string-length word)))\n                                        (if (not (string-length (string-append prime \"8\")))\n                                          (return word)\n                                          (if (not (string-length (string-append prime \"9\")))\n                                            (return word)\n                                            (return word))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter (lambda (prime)\n                     (string-length prime))\n                     (string-split word \"\")\n                     (string-length word)))\n            (words)))\n      words))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (if (is-prime? (string-length word))\n                (string word)\n                (words_in_sentence (string-append word \" \"))))\n            (words_in_sentence word)))\n    (words)))\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter (lambda (prime)\n                     (string-length prime))\n                     (string-split word \"-\")))\n          words)))))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (not (string-length word))\n            (return word)\n            (if (not (string-length (string-append word \"0\")))\n              (return word)\n              (let ((prime (string-length word)))\n                (if (not (string-length (string-append prime \"0\")))\n                  (return word)\n                  (return (string-append word prime)))))))))))\n",
    "  (let ((words (split-string sentence \" \")))\n    (map (lambda (word)\n          (if (string-length word)\n            (filter (lambda (prime) (string-length prime))\n                 (string-split word \" \"))\n            (string-join \" \" word)))\n         words))\n)\n\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters"
  ],
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ]
}