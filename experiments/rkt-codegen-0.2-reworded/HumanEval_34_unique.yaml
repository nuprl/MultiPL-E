name: HumanEval_34_unique
language: rkt
prompt: "#lang racket\n\n;; Return sorted unique elements in a list\n;; >>> (unique\
  \ (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)\n(define (unique l)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique))\n\
  \    (check-equal? (candidate (list 5 3 5 2 3 3 9 0 123)) (list 0 2 3 5 9 123))\n\
  ))\n\n(test-humaneval)"
completions: ["  (let ((result (list)))\n    (let ((p (car l)))\n      (while (not\
    \ (null? p))\n        (if (not (memq p result))\n            (set! result (append\
    \ result p))\n            (set! p (cdr p))))\n        (set! p (car l))))\n  result)\n\
    \n;; Return sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3\
    \ 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n    (let ((p (car\
    \ l)))\n      (while (not (null? p))\n        (if (not (memq p result))\n    \
    \        (set! result (append result p)))\n          (set! p (cdr p)))\n     \
    \ result))\n  l)\n\n;; Return sorted unique elements in a list\n;; >>> (unique\
    \ (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((s (sort l)))\n\
    \    (if (empty? s)\n      l\n      (cons (car s) (unique (cdr s))))))\n\n;; Return\
    \ sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n\
    ;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n    (for-each (lambda (x)\n \
    \               (if (not (member? x result))\n                    (result (append\
    \ result x))))\n      l))\n  result)\n\n;; Return sorted unique elements in a\
    \ list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)",
  "  (let ((result ()))\n    (let ((p (first l)))\n      (while (not (null? p))\n\
    \        (if (not (member? p result))\n            (set! result (append result\
    \ p))\n            (set! p (cdr p))))\n        (set! p (car l))))\n    result)\n\
    \n;; Return sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3\
    \ 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n    (let ((p (first\
    \ l)))\n      (while (not (null? p))\n        (if (not (member? p result))\n \
    \           (set! result (append result p)))\n          (set! p (cdr p))))\n \
    \   result))\n\n;; Return sorted unique elements in a list\n;; >>> (unique (list\
    \ 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((lst (list)))\n  \
    \  (if (null? lst)\n      lst\n      (cons (car lst) (unique (cdr lst))))))\n\n\
    ;; Return sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9\
    \ 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n    (let ((p (first\
    \ l)))\n      (while (not (null? p))\n        (if (not (in? p (cdr l)))\n    \
    \        (set! result (cons p result))\n            (set! p (cdr p))))\n     \
    \   (set! p (first l))))\n    result)\n\n;; Return sorted unique elements in a\
    \ list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)",
  "  (let ((result ()))\n    (let ((p (first l)))\n      (while (not (null? p))\n\
    \        (if (not (member? p result))\n            (set! result (append result\
    \ p)))\n          (set! p (cdr p))))\n    result))\n\n;; Return sorted unique\
    \ elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2\
    \ 3 5 9 123)", "  (let ((result ()))\n    (for-each (lambda (x)\n            \
    \    (if (not (member? x result))\n                    (result (append result\
    \ x))))\n          l))\n  result)\n\n;; Return sorted unique elements in a list\n\
    ;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let\
    \ ((result ()))\n    (let ((p (first l)))\n      (while (not (null? p))\n    \
    \    (if (not (memq p result))\n            (set! result (cons p (cdr p)))\n \
    \           (set! p (cdr p))))\n        (set! p (first l))))\n    result)\n\n\
    ;; Return a list of all elements in a list, in sorted order\n;; >>> (sort (list\
    \ 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 3 5 5 9 123)", "  (let ((result ()))\n\
    \    (let ((p (first l)))\n      (while (not (null? p))\n        (if (not (member?\
    \ p result))\n            (set! result (append result p))\n            (set! p\
    \ (cdr p))))\n        result))\n    result)\n\n;; Return a list of all elements\
    \ in a list that are not in a second list\n;; >>> (difference (list 1 2 3 4 5\
    \ 6 7 8 9) (list 1 2 3 5 6))\n;; (list 3 4 7 8 9)", "  (let ((result ()))\n  \
    \  (for-each (lambda (x)\n                (if (not (member? x result))\n     \
    \               (append result x)))\n      l))\n  result)\n\n;; Return sorted\
    \ unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list\
    \ 0 2 3 5 9 123)", "  (let ((result ()))\n    (let ((p (first l)))\n      (while\
    \ (not (null? p))\n        (if (not (member? p result))\n            (set! result\
    \ (append result p)))\n          (set! p (cdr p))))\n    result))\n\n;; Return\
    \ sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n\
    ;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n    (let ((p (car l)))\n    \
    \  (while (not (null? p))\n        (if (not (member? p result))\n            (set!\
    \ result (append result p)))\n          (set! p (cdr p))))\n    result))\n\n;;\
    \ Return sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9\
    \ 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n    (let ((p (first\
    \ l)))\n      (while (not (null? p))\n        (if (not (member? p result))\n \
    \           (set! result (append result p))\n            (set! p (cdr p))))\n\
    \        result))\n    result)\n\n;; Return sorted unique elements in a list\n\
    ;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let\
    \ ((result ()))\n    (for-each (lambda (x) (if (not (member? x result))\n    \
    \                           (result (cons x result))))\n          l))\n  result)\n\
    \n;; Return sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3\
    \ 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n    (for-each (lambda\
    \ (x)\n                (if (not (member? x result))\n                    (result\
    \ (append result x))))\n      l))\n  result)\n\n;; Return sorted unique elements\
    \ in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)",
  "  (let ((lst (list)))\n    (if (null? lst)\n      lst\n      (let ((last (car lst)))\n\
    \        (if (null? (cdr lst))\n          (cons last lst)\n          (let ((next\
    \ (cdr last)))\n            (cons (car last) (unique (cdr lst)))\n          )\n\
    \        )\n        (cons (car lst) (unique (cdr lst)))\n      )\n    )\n  )\n\
    )\n\n;; Return sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2\
    \ 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n    (let ((p\
    \ (first l)))\n      (while (not (null? p))\n        (if (not (member? p result))\n\
    \            (set! result (append result p))\n            (set! p (cdr p))))\n\
    \        result))\n  result)\n\n;; Return sorted unique elements in a list\n;;\
    \ >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result\
    \ ()))\n    (for-each (lambda (x)\n                (if (not (member? x result))\n\
    \                    (result (append result x))))\n          l))\n  result)\n\n\
    ;; Return sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9\
    \ 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n    (let ((p (car\
    \ l)))\n      (while (not (null? p))\n        (if (not (memq p result))\n    \
    \        (set! result (append result p))\n            (set! p (cdr p))))\n   \
    \   result))\n  l)\n\n;; Return sorted unique elements in a list\n;; >>> (unique\
    \ (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n\
    \    (for-each (lambda (x)\n                (if (not (member? x result))\n   \
    \                 (result (append result x))))\n      l))\n  result)\n\n;; Return\
    \ sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n\
    ;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n    (let ((p (first l)))\n  \
    \    (while (not (null? p))\n        (if (not (memq p result))\n            (set!\
    \ result (append result p))\n            (set! p (cdr p))))\n        result))\n\
    \    result)\n\n;; Return sorted unique elements in a list\n;; >>> (unique (list\
    \ 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n   \
    \ (for-each (lambda (x)\n                (if (not (member? x result))\n      \
    \              (result (append result x))))\n      l))\n  result)\n\n;; Return\
    \ sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n\
    ;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n    (let ((p (first l)))\n  \
    \    (while (not (null? p))\n        (if (not (memq p result))\n            (set!\
    \ result (append result p))\n            (set! p (cdr p))))\n        result))\n\
    \    result)\n\n;; Return sorted unique elements in a list\n;; >>> (unique (list\
    \ 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n   \
    \ (let ((p (car l)))\n      (while (not (null? p))\n        (if (not (member?\
    \ p result))\n            (set! result (append result p)))\n          (set! p\
    \ (cdr p))))\n    (reverse result)))\n\n;; Return a list of all elements in a\
    \ list that are not in a second list\n;; >>> (difference (list 1 2 3 4 5 6 7 8\
    \ 9) (list 1 2 3 4 5 6 7 8 9))\n;; (list 1 2 3 4 5 6 7 8 9)", "  (let ((result\
    \ ()))\n    (for-each (lambda (x)\n                (if (not (member? x result))\n\
    \                    (result (append result x))))\n       l))\n  result)\n\n;;\
    \ Return sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9\
    \ 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((sorted (sort l))\n         (unique-set\
    \ ()))\n    (for-each\n      (lambda (x)\n        (if (not (member? x unique-set))\n\
    \            (unique-set (append unique-set x))))\n      sorted)))\n\n;; Return\
    \ sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n\
    ;; (list 0 2 3 5 9 123)", "  (let ((s (sort l))\n         (n (length s)))\n  \
    \  (if (< n 1)\n      (list s)\n      (unique (cdr s))))\n)\n\n;; Return a list\
    \ of all the elements in a list, in sorted order\n;; >>> (sort (list 5 3 5 2 3\
    \ 3 9 0 123))\n;; (list 0 2 3 3 5 5 9 123)", "  (let ((s (sort l))\n         (i\
    \ 0))\n    (while (< i (length s))\n      (if (eq? (car s) (cdr s))\n        (set-cdr!\
    \ s (cdr s))\n        (set-cdr! s (car s))\n        (set-car! s (car s))\n   \
    \     (set-cdr! s (cdr s))\n        (set-car! s (car s))\n        (set-cdr! s\
    \ (cdr s))\n        (set-car! s (car s))\n        (set-cdr! s (cdr s))\n     \
    \   (set-car! s (car s))\n        (set-cdr! s (cdr s))\n        (set-car! s (car\
    \ s))\n        (set-cdr! s (cdr s))\n        (set-car! s (car s))\n        (set-cdr!\
    \ s (cdr s))\n        (set-car! s (car s))\n        (set-cdr! s (cdr s))\n   \
    \     (set-car! s (car s))\n        (set-cdr! s (cdr s))\n        (set-car! s\
    \ (car s))\n        (set-cdr! s (cdr s))\n        (set-car! s (car s))\n     \
    \   (set-cdr! s (cdr s))\n        (set-car! s (car s))\n        (set-cdr! s (cdr\
    \ s))\n        (set-car! s (car s))\n        (set-cdr! s (cdr s))\n        (set-car!\
    \ s (car s))\n        (set-cdr! s (cdr s))\n        (set-car! s (car s))\n   \
    \     (set-cdr! s (cdr s))\n        (set-car! s (car s))\n        (set-cdr! s\
    \ (cdr s))\n        (set-car! s (car s))\n        (set-cdr! s (cdr s))\n     \
    \   (set-car! s (car s))\n        (set-cdr! s (cdr s))\n        ", "  (let ((result\
    \ ()))\n    (let ((p (first l)))\n      (while (not (null? p))\n        (if (not\
    \ (member? p result))\n            (set! result (append result p)))\n        \
    \  (set! p (cdr p))))\n    result))\n\n;; Return sorted unique elements in a list\n\
    ;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let\
    \ ((result (list)))\n    (for-each (lambda (x)\n                (if (not (member?\
    \ x result))\n                    (result (append result x))))\n      l))\n  result)\n\
    \n;; Return sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3\
    \ 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n    (for-each (lambda\
    \ (x)\n                (if (not (member? x result))\n                    (result\
    \ (append result x))))\n      l))\n  result)\n\n;; Return sorted unique elements\
    \ in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)",
  "  (let ((result ()))\n    (let ((p (first l)))\n      (while (not (null? p))\n\
    \        (if (not (memq p result))\n            (set! result (append result p))\n\
    \            (set! p (cdr p))))\n        (set! p (cdr l))))\n    result)\n\n;;\
    \ Return sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9\
    \ 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n    (for-each (lambda\
    \ (x)\n                (if (not (member? x result))\n                    (append\
    \ result x)))\n      l))\n  (sort result))\n\n;; Return sorted unique elements\
    \ in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)",
  "  (let ((result ()))\n    (let ((p (first l)))\n      (while (not (null? p))\n\
    \        (if (not (memq p result))\n            (set! result (append result p))\n\
    \            (set! p (cdr p))))\n        result))\n    result)\n\n;; Return sorted\
    \ unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list\
    \ 0 2 3 5 9 123)", "  (let ((result ()))\n    (let ((p (car l)))\n      (if (null?\
    \ p)\n          (cons p result)\n          (let ((q (cdr l)))\n            (if\
    \ (null? q)\n                (cons p result)\n                (if (null? (cdr\
    \ q))\n                    (cons p (unique (cdr q)))\n                    (cons\
    \ p (unique (cdr q) (cons p result))))))))))\n\n;; Return sorted unique elements\
    \ in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)",
  "  (let ((result ()))\n    (let ((p (first l)))\n      (while (not (null? p))\n\
    \        (if (not (memq p result))\n            (set! result (append result p))\n\
    \            (set! p (cdr p))))\n        result))\n    result)\n\n;; Return sorted\
    \ unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list\
    \ 0 2 3 5 9 123)", "  (let ((result ()))\n    (for-each (lambda (x) (if (not (member\
    \ x result))\n                                  (set! result (append result x))))\n\
    \           l))\n  result)\n\n;; Return sorted unique elements in a list\n;; >>>\
    \ (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result\
    \ ()))\n    (let ((p (l)))\n      (while (not (null? p))\n        (if (not (null?\
    \ (cdr p)))\n            (if (not (null? (cdr (cdr p))))\n                (setq\
    \ result (cons (car p) result))\n                (setq p (cdr p)))\n         \
    \   (setq p (cdr p)))\n        (setq p (car p))))\n    (reverse result)))\n\n\
    ;; Return the length of a list\n;; >>> (length (list 5 3 5 2 3 3 9 0 123))\n;;\
    \ 9", "  (let ((result ()))\n    (let ((p (first l)))\n      (while (not (null?\
    \ p))\n        (if (not (member? p result))\n            (set! result (append\
    \ result p)))\n          (set! p (cdr p))))\n    result))\n\n;; Return sorted\
    \ unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list\
    \ 0 2 3 5 9 123)", "  (let ((result ()))\n    (for-each (lambda (x)\n        \
    \        (if (not (member? x result))\n                    (append result x)))\n\
    \      l))\n  (sort result))\n\n;; Return sorted unique elements in a list\n;;\
    \ >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result\
    \ ()))\n    (let ((p (first l)))\n      (while (not (null? p))\n        (if (not\
    \ (member? p result))\n          (set! result (append result p))\n          (set!\
    \ p (cdr p))))\n        (set! p (first l))))\n    result)\n\n;; Return a list\
    \ of all elements in a list that are not in a second list\n;; >>> (difference\
    \ (list 1 2 3 4 5 6 7 8 9) (list 3 4 6))\n;; (list 1 2 5 7 9)", "  (let ((sorted\
    \ (sort l)))\n    (let ((unique-list ()))\n      (for-each (lambda (x)\n     \
    \             (if (not (member x unique-list))\n                      (unique-list\
    \ (append unique-list x))))\n        sorted)))\n)\n\n;; Return sorted unique elements\
    \ in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)",
  "  (let ((result ()))\n    (for-each (lambda (x)\n                (if (not (member?\
    \ x result))\n                    (result (append result x))))\n      l))\n  result)\n\
    \n;; Return sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3\
    \ 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((s (sort l)))\n    (let ((i 0))\n\
    \      (while (< i (length s))\n        (if (eq? (car s) (car (s (1 + i))))\n\
    \            (set! i (+ i 1))\n            (else\n              (set! i 0)\n \
    \             (list (car s) (car (s (1 + i))))))))))\n\n;; Return sorted unique\
    \ elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2\
    \ 3 5 9 123)", "  (let ((s (sort l)))\n    (if (null? s)\n      l\n      (append\
    \ (unique (cdr s)) (car s))))\n)\n\n;; Return sorted unique elements in a list\n\
    ;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let\
    \ ((result ()))\n    (for-each (lambda (x) (if (not (member x result))\n     \
    \                             (append result x)))\n               l))\n  (sort\
    \ result))\n\n;; Return sorted unique elements in a list\n;; >>> (unique (list\
    \ 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n   \
    \ (for-each (lambda (x)\n                (if (not (member? x result))\n      \
    \              (append result x)))\n      l))\n  (sort result))\n\n;; Return sorted\
    \ unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list\
    \ 0 2 3 5 9 123)", "  (let ((result ()))\n    (let ((p (first l)))\n      (while\
    \ (not (null? p))\n        (if (not (member? p result))\n            (set! result\
    \ (append result p))\n            (set! p (cdr p))))\n        (set! p (cdr l))))\n\
    \    result)\n\n;; Return sorted unique elements in a list\n;; >>> (unique (list\
    \ 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n   \
    \ (let ((p (first l)))\n      (while (not (null? p))\n        (if (not (member?\
    \ p result))\n            (set! result (append result p))\n            (set! p\
    \ (cdr p))))\n        result))\n    result)\n\n;; Return sorted unique elements\
    \ in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)",
  "  (let ((result ()))\n    (for-each (lambda (x)\n                (if (not (member?\
    \ x result))\n                    (result (append result x))))\n      l))\n  result)\n\
    \n;; Return sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3\
    \ 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n    (let ((p (first\
    \ l)))\n      (while (not (null? p))\n        (if (not (member? p result))\n \
    \           (set! result (append result p))\n            (set! p (cdr p))))\n\
    \        result))\n    result)\n\n;; Return sorted unique elements in a list\n\
    ;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let\
    \ ((s (sort l)))\n    (let ((i 0))\n      (loop\n        (set! i (+ i 1))\n  \
    \      (if (eq? (car s) (cdr s))\n            (return (cdr s))\n            (set!\
    \ s (cdr s)))))\n    (s)))\n\n;; Return sorted unique elements in a list\n;; >>>\
    \ (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result\
    \ ()))\n    (let ((p (first l)))\n      (while (not (null? p))\n        (if (not\
    \ (memq p result))\n            (set! result (append result p))\n            (set!\
    \ p (cdr p))))\n        result))\n    result)\n\n;; Return sorted unique elements\
    \ in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)",
  "  (let ((result ()))\n    (for-each (lambda (x)\n                (if (not (member?\
    \ x result))\n                    (result (append result x))))\n      l))\n  result)\n\
    \n;; Return sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3\
    \ 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n    (for-each (lambda\
    \ (x)\n                (if (not (member? x result))\n                    (result\
    \ (append result x))))\n      l))\n  result)\n\n;; Return sorted unique elements\
    \ in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)",
  "  (let ((result ()))\n    (let ((p (first l)))\n      (while (not (null? p))\n\
    \        (if (not (member? p result))\n            (set! result (append result\
    \ p))\n            (set! p (cdr p))))\n        result))\n  result)\n\n;; Return\
    \ sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n\
    ;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n    (let ((p (car l)))\n    \
    \  (while (not (null? p))\n        (if (not (memq p result))\n            (set!\
    \ result (append result p)))\n          (set! p (cdr p))))\n    result))\n\n;;\
    \ Return sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9\
    \ 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n    (let ((p (first\
    \ l)))\n      (while (not (null? p))\n        (if (not (member? p result))\n \
    \           (set! result (append result p))\n            (set! p (cdr p))))\n\
    \        result))\n    result)\n\n;; Return sorted unique elements in a list\n\
    ;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let\
    \ ((result ()))\n    (let ((p (first l)))\n      (while (not (null? p))\n    \
    \    (if (not (member? p result))\n            (set! result (append result p))\n\
    \            (set! p (cdr p))))\n        result))\n    result)\n\n;; Return sorted\
    \ unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list\
    \ 0 2 3 5 9 123)", "  (let ((result ()))\n    (for-each (lambda (x)\n        \
    \        (if (not (member? x result))\n                    (result (append result\
    \ x))))\n          l))\n  result)\n\n;; Return sorted unique elements in a list\n\
    ;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let\
    \ ((result ()))\n    (let ((p (first l)))\n      (while (not (null? p))\n    \
    \    (if (not (member? p result))\n            (set! result (append result p)))\n\
    \          (set! p (cdr p))))\n    result))\n\n;; Return sorted unique elements\
    \ in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)",
  "  (let ((result ()))\n    (let ((p (first l)))\n      (while (not (null? p))\n\
    \        (if (not (member? p result))\n          (set! result (append result p))\n\
    \          (set! p (cdr p))))\n        result))\n    result)\n\n;; Return sorted\
    \ unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list\
    \ 0 2 3 5 9 123)", "  (let ((result ()))\n    (for-each (lambda (x) (if (not (member\
    \ x result))\n                                   (append result x)))\n       \
    \    l))\n  (sort result))\n\n;; Return sorted unique elements in a list\n;; >>>\
    \ (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result\
    \ ()))\n    (for-each (lambda (x)\n                (if (not (member x result))\n\
    \                    (append result x)))\n      l))\n  result)\n\n;; Return sorted\
    \ unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list\
    \ 0 2 3 5 9 123)", "  (let ((result ()))\n    (for-each (lambda (x)\n        \
    \        (if (not (member? x result))\n                    (append result x)))\n\
    \      l))\n  result)\n\n;; Return sorted unique elements in a list\n;; >>> (unique\
    \ (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n\
    \    (for-each (lambda (x)\n                (if (not (member? x result))\n   \
    \                 (result (append result x))))\n           l))\n  result)\n\n\
    ;; Return sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9\
    \ 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n    (for-each (lambda\
    \ (x) (if (not (member x result))\n                                      (append\
    \ result x)))\n           l))\n  result)\n\n;; Return sorted unique elements in\
    \ a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)",
  "  (let ((result ()))\n    (let ((p (first l)))\n      (while (not (null? p))\n\
    \        (if (not (member? p result))\n            (set! result (append result\
    \ p)))\n          (set! p (cdr p))))\n    result))\n\n;; Return sorted unique\
    \ elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2\
    \ 3 5 9 123)", "  (let ((result ()))\n    (let ((p (first l)))\n      (while (not\
    \ (null? p))\n        (if (not (member? p result))\n            (set! result (append\
    \ result p)))\n          (set! p (cdr p))))\n    result))\n\n;; Return sorted\
    \ unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list\
    \ 0 2 3 5 9 123)", "  (let ((result ()))\n    (let ((p (first l)))\n      (while\
    \ (not (null? p))\n        (if (not (member? p result))\n            (set! result\
    \ (append result p))\n            (set! p (cdr p))))\n        result))\n    result)\n\
    \n;; Return a list of all the elements of a list that are not in another list\n\
    ;; >>> (difference (list 1 2 3 4 5 6 7 8 9) (list 3 4 5))\n;; (list 1 2 6 7 8\
    \ 9)", "  (let ((result ()))\n    (let ((p (car l)))\n      (while (not (null?\
    \ p))\n        (if (not (memq p result))\n            (set! result (append result\
    \ p)))\n          (set! p (cdr p))))\n    result))\n\n;; Return sorted unique\
    \ elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2\
    \ 3 5 9 123)", "  (let ((result ()))\n    (for-each (lambda (x)\n            \
    \    (if (not (member? x result))\n                    (result (append result\
    \ x))))\n          l))\n  result)\n\n;; Return sorted unique elements in a list\n\
    ;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let\
    \ ((result ()))\n    (let ((p (l)))\n      (while (not (null? p))\n        (if\
    \ (not (null? (cdr p)))\n            (if (eq? (car p) (car (cdr p)))\n       \
    \         (set! result (cons (car p) result))\n                (set! p (cdr p)))\n\
    \            (set! p (cdr p)))\n        (set! p (cdr p))))\n    (reverse result)))\n\
    \n;; Return sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3\
    \ 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n    (for-each (lambda\
    \ (x)\n                (if (not (member? x result))\n                    (append\
    \ result x)))\n      l))\n  result)\n\n;; Return sorted unique elements in a list\n\
    ;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let\
    \ ((result ()))\n    (for-each (lambda (x)\n                (if (not (member?\
    \ x result))\n                    (append result x)))\n      l))\n  result)\n\n\
    ;; Return sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9\
    \ 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n    (let ((p (first\
    \ l)))\n      (while (not (null? p))\n        (if (not (member? p result))\n \
    \           (set! result (append result p))\n            (set! p (cdr p))))\n\
    \        (set! p (car l))))\n    result)\n\n;; Return sorted unique elements in\
    \ a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)",
  "  (let ((result ()))\n    (for-each (lambda (x)\n                (if (not (member?\
    \ x result))\n                    (result (append result x))))\n      l))\n  result)\n\
    \n;; Return sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3\
    \ 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n    (for-each (lambda\
    \ (x)\n                (if (not (member? x result))\n                    (result\
    \ (append result x))))\n      l))\n  result)\n\n;; Return sorted unique elements\
    \ in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)",
  "  (let ((s (sort l))\n         (i 0))\n    (loop\n      (set! i (+ i 1))\n    \
    \  (if (null? (cdr s))\n          (return (car s))\n        (if (eq? (car s) (car\
    \ (cdr s)))\n            (return (car s))\n          (set! s (cdr s)))))\n   \
    \ (car s)))\n\n;; Return sorted unique elements in a list\n;; >>> (unique (list\
    \ 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n   \
    \ (let ((p (first l)))\n      (while (not (null? p))\n        (if (not (member?\
    \ p result))\n            (set! result (append result p))\n            (set! p\
    \ (cdr p))))\n        result))\n    result)\n\n;; Return sorted unique elements\
    \ in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)",
  "  (let ((result ()))\n    (for-each (lambda (x)\n                (if (not (member?\
    \ x result))\n                    (result (append result x))))\n           l))\n\
    \  result)\n\n;; Return sorted unique elements in a list\n;; >>> (unique (list\
    \ 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n   \
    \ (let ((p (car l)))\n      (while (not (null? p))\n        (if (not (memq p result))\n\
    \            (set! result (cons p (cdr result)))\n            (set! p (cdr p))))\n\
    \        result))\n    result)\n\n;; Return sorted unique elements in a list\n\
    ;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let\
    \ ((result ()))\n    (let ((p (first l)))\n      (while (not (null? p))\n    \
    \    (if (not (member? p result))\n            (set! result (append result p))\n\
    \            (set! p (cdr p))))\n        (set! p (car l))))\n    result)\n\n;;\
    \ Return sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9\
    \ 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n    (for-each (lambda\
    \ (x)\n                (if (not (member? x result))\n                    (result\
    \ (append result x))))\n          l))\n  result)\n\n;; Return sorted unique elements\
    \ in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)",
  "  (let ((result ()))\n    (let ((p (first l)))\n      (while (not (null? p))\n\
    \        (if (not (member? p (cdr p)))\n            (set! result (cons p (result)))\n\
    \            (set! p (cdr p))))\n        (set! p (first l))))\n    result)\n\n\
    ;; Return sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9\
    \ 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n    (let ((p (car\
    \ l)))\n      (if (null? p)\n          (cons p result)\n          (let ((q (cdr\
    \ p)))\n            (if (null? q)\n                (cons p result)\n         \
    \       (if (null? (cdr q))\n                    (cons p (cdr q))\n          \
    \          (cons p (unique (cdr q))))))))))\n\n;; Return a list of all elements\
    \ in a list that are not in a second list\n;; >>> (difference (list 1 2 3 4 5\
    \ 6 7 8 9 10) (list 2 3 5 7 9))\n;; (list 1 4 6 8)", "  (let ((result ()))\n \
    \   (for-each (lambda (x)\n                (if (not (member? x result))\n    \
    \                (result (append result x))))\n      l))\n  result)\n\n;; Return\
    \ sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n\
    ;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n    (let ((p (first l)))\n  \
    \    (while (not (null? p))\n        (if (not (in? p (cdr l)))\n            (set!\
    \ result (cons p result))\n            (set! p (cdr p))))\n        (set! p (first\
    \ l))))\n    result)\n\n;; Return sorted unique elements in a list\n;; >>> (unique\
    \ (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((s (sort l)))\n\
    \    (if (null? s)\n      l\n      (cons (car s) (unique (cdr s))))))\n\n;; Return\
    \ a list of all the elements in a list that are not in a second list\n;; >>> (difference\
    \ (list 1 2 3 4 5 6 7 8 9 10) (list 2 3 5))\n;; (list 1 4 7 9)", "  (let ((result\
    \ ()))\n    (let ((p (first l)))\n      (while (not (null? p))\n        (if (not\
    \ (memq p result))\n            (set! result (cons p (cdr p)))\n            (set!\
    \ p (cdr p))))\n        result))\n    result)\n\n;; Return the length of a list\n\
    ;; >>> (length (list 5 3 5 2 3 3 9 0 123))\n;; 9", "  (let ((result ()))\n   \
    \ (let ((p (first l)))\n      (while (not (null? p))\n        (if (not (member?\
    \ p result))\n            (set! result (append result p))\n            (set! p\
    \ (cdr p))))\n        (set! p (first l))))\n    result)\n\n;; Return sorted unique\
    \ elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2\
    \ 3 5 9 123)", "  (let ((result ()))\n    (for-each (lambda (x)\n            \
    \    (if (not (member? x result))\n                    (append result x)))\n \
    \     l))\n  (sort result))\n\n;; Return sorted unique elements in a list\n;;\
    \ >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result\
    \ ()))\n    (for-each (lambda (x)\n                (if (not (member? x result))\n\
    \                    (result (append result x))))\n      l))\n  result)\n\n;;\
    \ Return sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9\
    \ 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n    (for-each (lambda\
    \ (x)\n                (if (not (member? x result))\n                    (result\
    \ (append result x))))\n          l))\n  result)\n\n;; Return sorted unique elements\
    \ in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)",
  "  (let ((s (sort l))\n         (i 0))\n    (loop\n      (set! i (+ i 1))\n    \
    \  (if (null? (cdr s))\n          (return (car s))\n        (if (null? (cdr (cdr\
    \ s)))\n            (return (car s))\n          (if (= (car s) (car (cdr s)))\n\
    \              (return (car s))\n            (set! s (cdr s)))))\n      (set!\
    \ s (cdr s))))\n\n;; Return sorted unique elements in a list\n;; >>> (unique (list\
    \ 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((lst (list)))\n  \
    \  (if (null? lst)\n      lst\n      (let ((head (car lst)))\n        (if (null?\
    \ (cdr lst))\n          (cdr lst)\n          (let ((tail (cdr lst)))\n       \
    \     (cons head tail)))))))\n\n;; Return the length of a list\n;; >>> (length\
    \ (list 5 3 5 2 3 3 9 0 123))\n;; 9", "  (let ((lst (list)))\n    (if (null? lst)\n\
    \      lst\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n      \
    \    (cdr lst)\n          (let ((q (car (cdr lst))))\n            (if (null? (cdr\
    \ q))\n              (cdr q)\n              (let ((r (car (cdr q))))\n       \
    \         (if (null? (cdr r))\n                  (cdr r)\n                  (let\
    \ ((s (car (cdr r))))\n                    (if (null? (cdr s))\n             \
    \         (cdr s)\n                      (let ((t (car (cdr s))))\n          \
    \              (if (null? (cdr t))\n                          (cdr t)\n      \
    \                    (let ((u (car (cdr t))))\n                            (if\
    \ (null? (cdr u))\n                              (cdr u)\n                   \
    \           (let ((v (car (cdr u))))\n                                (if (null?\
    \ (cdr v))\n                                  (cdr v)\n                      \
    \            (let ((w (car (cdr v))))\n                                    (if\
    \ (null? (cdr w))\n                                      (cdr w)\n           \
    \                           (let ((x (car (cdr w))))\n                       \
    \                 (if (null? (cdr x))\n                                      \
    \    (cdr x)\n                                          (let ((y (car (cdr x))))\n\
    \                                            (if (null? (cdr y))\n           \
    \                                   (cdr y)\n                                \
    \              (let ((z (car (cdr y))))\n                                    \
    \            (if (null? (cdr z))\n                                           \
    \       (cdr z)\n                                                  (let ((a (car\
    \ (cdr z))))\n                                                    (if (null? (cdr\
    \ a))\n                                                      (cdr a)\n       \
    \                                               (let ((b (car (cdr a))))\n   \
    \                                                     (if (null? (cdr b))\n  \
    \                                                        (cdr b)\n           \
    \                    ", "  (let ((result ()))\n    (let ((p (first l)))\n    \
    \  (while (not (null? p))\n        (if (not (member? p result))\n          (set!\
    \ result (append result p))\n          (set! p (cdr p))))\n        (set! p (first\
    \ l))))\n    result)\n\n;; Return sorted unique elements in a list\n;; >>> (unique\
    \ (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n\
    \    (for-each (lambda (x)\n                (if (not (member? x result))\n   \
    \                 (result (append result x))))\n      l))\n  result)\n\n;; Return\
    \ sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n\
    ;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n    (let ((p (first l)))\n  \
    \    (while (not (null? p))\n        (if (not (memq p result))\n          (set!\
    \ result (append result p))\n          (set! p (cdr p))))\n        result))\n\
    \  result)\n\n;; Return a list of all elements in a list that are not in a second\
    \ list\n;; >>> (difference (list 1 2 3 4 5 6 7 8 9 10) (list 2 3 5))\n;; (list\
    \ 1 4 7 10)", "  (let ((result ()))\n    (let ((p (car l)))\n      (while (not\
    \ (null? p))\n        (if (not (memq p result))\n            (set! result (append\
    \ result p))\n            (set! p (cdr p))))\n        result))\n    result)\n\n\
    ;; Return sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9\
    \ 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n    (for-each (lambda\
    \ (x)\n                (if (not (member? x result))\n                    (result\
    \ (append result x))))\n      l))\n  result)\n\n;; Return sorted unique elements\
    \ in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)",
  "  (let ((result ()))\n    (let ((p (car l)))\n      (while (not (null? p))\n  \
    \      (if (not (memq p result))\n            (set! result (cons p (cdr result))))\n\
    \          (set! p (cdr p))))\n    result))\n\n;; Return sorted unique elements\
    \ in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)",
  "  (let ((result ()))\n    (let ((p (first l)))\n      (while (not (null? p))\n\
    \        (if (not (member? p result))\n            (set! result (append result\
    \ p))\n            (set! p (cdr p))))\n        result))\n    result)\n\n;; Return\
    \ sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n\
    ;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n    (for-each (lambda (x)\n \
    \               (if (not (member? x result))\n                    (result (cons\
    \ x result))))\n      l))\n  result)\n\n;; Return sorted unique elements in a\
    \ list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)",
  "  (let ((lst (list)))\n    (let ((result (list)))\n      (while (not (null? lst))\n\
    \        (if (not (null? result))\n            (if (eq? (car lst) (car result))\n\
    \                (setcar result (cdr lst))\n                (setcar lst (cdr lst)))\n\
    \            (setcar result (car lst)))\n        (setcar lst (car lst)))\n   \
    \   result))\n)\n\n;; Return sorted unique elements in a list\n;; >>> (unique\
    \ (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n\
    \    (let ((p (car l)))\n      (while (not (null? p))\n        (if (not (member?\
    \ p result))\n            (set! result (append result p)))\n          (set! p\
    \ (cdr p))))\n    result))\n\n;; Return sorted unique elements in a list\n;; >>>\
    \ (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result\
    \ ()))\n    (let ((p (first l)))\n      (while (not (null? p))\n        (if (not\
    \ (memq p result))\n            (set! result (append result p))\n            (set!\
    \ p (cdr p))))\n        result))\n    result)\n\n;; Return sorted unique elements\
    \ in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)",
  "  (let ((s (sort l)))\n    (if (null? s)\n      l\n      (cons (car s) (unique\
    \ (cdr s))))))\n\n;; Return sorted unique elements in a list\n;; >>> (unique (list\
    \ 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n   \
    \ (let ((p (first l)))\n      (while (not (null? p))\n        (if (not (member?\
    \ p result))\n            (set! result (append result p))\n            (set! p\
    \ (cdr p))))\n        result))\n  result)\n\n;; Return sorted unique elements\
    \ in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)",
  "  (let ((s (sort l)))\n    (if (null? s)\n      (list)\n      (let ((i 0))\n  \
    \      (while (< i (length s))\n          (if (eq? (car s) (car (s (1+ i))))\n\
    \            (set! i (1+ i))\n            (else\n              (set! i (1+ i))\n\
    \              (list (car s) (car (s (1+ i)))))))))))\n\n;; Return sorted unique\
    \ elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2\
    \ 3 5 9 123)", "  (let ((result ()))\n    (let ((p (l)))\n      (while (not (null?\
    \ p))\n        (if (not (null? (cdr p)))\n            (if (eq? (car p) (car (cdr\
    \ p)))\n                (set! result (cons (car p) result))\n                (set!\
    \ p (cdr p)))\n            (set! p (cdr p)))\n        (set! p (cdr p))))\n   \
    \ (reverse result)))\n\n;; Return sorted unique elements in a list\n;; >>> (unique\
    \ (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n\
    \    (let ((p (first l)))\n      (while (not (null? p))\n        (if (not (member?\
    \ p result))\n            (set! result (append result p)))\n          (set! p\
    \ (cdr p))))\n    result))\n\n;; Return sorted unique elements in a list\n;; >>>\
    \ (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result\
    \ ()))\n    (let ((p (first l)))\n      (while (not (null? p))\n        (if (not\
    \ (member? p result))\n            (set! result (append result p)))\n        \
    \  (set! p (cdr p))))\n    result))\n\n;; Return sorted unique elements in a list\n\
    ;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let\
    \ ((result ()))\n    (let ((p (car l)))\n      (while (not (null? p))\n      \
    \  (if (not (member? p result))\n            (set! result (append result p)))\n\
    \          (set! p (cdr p))))\n    result))\n\n;; Return sorted unique elements\
    \ in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)",
  "  (let ((s (sort l))\n         (r ()))\n    (for-each (lambda (x)\n           \
    \     (if (not (eq? x r))\n                    (r (cons x r))))\n      s)))\n\n\
    ;; Return sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9\
    \ 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n    (for-each (lambda\
    \ (x)\n                (if (not (member? x result))\n                    (result\
    \ (append result x))))\n      l))\n  result)\n\n;; Return sorted unique elements\
    \ in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)",
  "  (let ((result ()))\n    (let ((p (first l)))\n      (while (not (null? p))\n\
    \        (if (not (member? p result))\n            (set! result (append result\
    \ p)))\n          (set! p (cdr p))))\n    result))\n\n;; Return sorted unique\
    \ elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2\
    \ 3 5 9 123)", "  (let ((result ()))\n    (let ((p (first l)))\n      (while (not\
    \ (null? p))\n        (if (not (member? p result))\n            (set! result (append\
    \ result p))\n            (set! p (cdr p))))\n        (set! p (first l))))\n \
    \   result)\n\n;; Return sorted unique elements in a list\n;; >>> (unique (list\
    \ 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n   \
    \ (for-each (lambda (x)\n                (if (not (member? x result))\n      \
    \              (append result x)))\n      l))\n  result)\n\n;; Return sorted unique\
    \ elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2\
    \ 3 5 9 123)", "  (let ((result ()))\n    (let ((p (l)))\n      (while (not (null?\
    \ p))\n        (if (not (null? (cdr p)))\n            (if (not (null? (cdr (cdr\
    \ p))))\n                (set! result (cons (car p) result))\n               \
    \ (set! p (cdr p)))\n            (set! p (cdr p)))\n        (set! p (car p))))\n\
    \    (reverse result)))\n\n;; Return sorted unique elements in a list\n;; >>>\
    \ (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result\
    \ ()))\n    (let ((p (first l)))\n      (while (not (null? p))\n        (if (not\
    \ (member? p result))\n            (set! result (append result p))\n         \
    \   (set! p (cdr p))))\n        result))\n    result)\n\n;; Return sorted unique\
    \ elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2\
    \ 3 5 9 123)", "  (let ((result ()))\n    (for-each (lambda (x) (if (not (member\
    \ x result))\n                                      (append result x)))\n    \
    \      l))\n  result)\n\n;; Return sorted unique elements in a list\n;; >>> (unique\
    \ (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n\
    \    (let ((p (first l)))\n      (while (not (null? p))\n        (if (not (memq\
    \ p result))\n          (set! result (append result p))\n          (set! p (cdr\
    \ p))))\n      result))\n  l)\n\n;; Return sorted unique elements in a list\n\
    ;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let\
    \ ((result ()))\n    (let ((p (first l)))\n      (while (not (null? p))\n    \
    \    (if (not (memq p result))\n            (append result p)\n            (set!\
    \ p (cdr p))))\n        (set! p (cdr p))))\n  result)\n\n;; Return a list of all\
    \ the elements of a list, in sorted order\n;; >>> (sort (list 5 3 5 2 3 3 9 0\
    \ 123))\n;; (list 0 2 3 3 5 5 9 123)", "  (let ((result ()))\n    (let ((p (first\
    \ l)))\n      (while (not (null? p))\n        (if (not (member? p result))\n \
    \           (set! result (cons p (cdr p)))\n            (set! p (cdr p))))\n \
    \       result))\n    result)\n\n;; Return sorted unique elements in a list\n\
    ;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let\
    \ ((s (sort l)))\n    (if (null? s)\n      l\n      (cons (car s) (unique (cdr\
    \ s))))))\n\n;; Return a list of all elements in a list that are not in a second\
    \ list\n;; >>> (difference (list 1 2 3 4 5 6 7 8 9) (list 1 2 3 5 6 7 8 9))\n\
    ;; (list 4 5 7)", "  (let ((result ()))\n    (for-each (lambda (x)\n         \
    \       (if (not (member? x result))\n                    (result (append result\
    \ x))))\n      l))\n  result)\n\n;; Return sorted unique elements in a list\n\
    ;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let\
    \ ((result ()))\n    (for-each (lambda (x)\n                (if (not (member?\
    \ x result))\n                    (result (append result x))))\n           l))\n\
    \  result)\n\n;; Return sorted unique elements in a list\n;; >>> (unique (list\
    \ 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n   \
    \ (for-each (lambda (x) (if (not (member x result))\n                        \
    \              (append result x)))\n           l))\n  (sort result))\n\n;; Return\
    \ sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n\
    ;; (list 0 2 3 5 9 123)", "  (let ((lst (list)))\n    (if (null? lst)\n      lst\n\
    \      (let ((i (1)))\n        (while (< i (length lst))\n          (if (not (eq?\
    \ (car lst) (car (cdr lst))))\n            (setcar! lst (car (cdr lst)))\n   \
    \         (setcar! (cdr lst) (car (cdr (cdr lst))))\n            (setcar! (cdr\
    \ (cdr lst)) (car (cdr (cdr (cdr lst))))))\n          (setcar! (cdr lst) (car\
    \ lst))\n          (setcar! (cdr (cdr lst)) (car (cdr (cdr (cdr lst))))))\n  \
    \      (setcar! lst (car lst))))))\n\n;; Return sorted unique elements in a list\n\
    ;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let\
    \ ((result ()))\n    (let ((p (first l)))\n      (while (not (null? p))\n    \
    \    (if (not (member? p result))\n          (set! result (append result p))\n\
    \          (set! p (cdr p))))\n        (set! p (cdr l))))\n  result)\n\n;; Return\
    \ sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n\
    ;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n    (for-each (lambda (x)\n \
    \               (if (not (member? x result))\n                    (result (append\
    \ result x))))\n      l))\n  result)\n\n;; Return sorted unique elements in a\
    \ list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)",
  "  (let ((result ()))\n    (let ((p (first l)))\n      (while (not (null? p))\n\
    \        (if (not (member? p result))\n            (set! result (append result\
    \ p))\n            (set! p (cdr p))))\n        result))\n    result)\n\n;; Return\
    \ sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n\
    ;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n    (let ((p (first l)))\n  \
    \    (while (not (null? p))\n        (if (not (memq p result))\n            (append\
    \ result p)\n            (set! p (cdr p))))))\n  result)\n\n;; Return sorted unique\
    \ elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2\
    \ 3 5 9 123)", "  (let ((result ()))\n    (let ((p (first l)))\n      (while (not\
    \ (null? p))\n        (if (not (member? p result))\n            (set! result (append\
    \ result p)))\n          (set! p (cdr p))))\n    result))\n\n;; Return sorted\
    \ unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list\
    \ 0 2 3 5 9 123)", "  (let ((result ()))\n    (let ((p (l)))\n      (while (not\
    \ (null? p))\n        (if (not (null? (cdr p)))\n            (if (eq? (car p)\
    \ (car (cdr p)))\n                (set! result (cons (car p) result))\n      \
    \          (set! p (cdr p)))\n            (set! p (cdr p)))\n        (set! p (cdr\
    \ p))))\n    (reverse result)))\n\n;; Return sorted unique elements in a list\n\
    ;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let\
    \ ((result ()))\n    (let ((p (first l)))\n      (while (not (null? p))\n    \
    \    (if (not (member? p result))\n            (set! result (append result p))\n\
    \            (set! p (cdr p))))\n        result))\n    result)\n\n;; Return sorted\
    \ unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list\
    \ 0 2 3 5 9 123)", "  (let ((result ()))\n    (let ((p (first l)))\n      (while\
    \ (not (null? p))\n        (if (not (member? p result))\n            (set! result\
    \ (append result p))\n            (set! p (cdr p))))\n        result))\n    result)\n\
    \n;; Return sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3\
    \ 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n    (for-each (lambda\
    \ (x)\n                (if (not (member? x result))\n                    (result\
    \ (append result x))))\n          l))\n  result)\n\n;; Return sorted unique elements\
    \ in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)",
  "  (let ((result ()))\n    (for-each (lambda (x)\n                (if (not (member?\
    \ x result))\n                    (append result x)))\n      l))\n  result)\n\n\
    ;; Return sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9\
    \ 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n    (for-each (lambda\
    \ (x) (if (not (member x result))\n                                      (set!\
    \ result (append result x))))\n           l))\n  result)\n\n;; Return sorted unique\
    \ elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2\
    \ 3 5 9 123)", "  (let ((result ()))\n    (let ((p (car l)))\n      (while (not\
    \ (null? p))\n        (if (not (memq p result))\n            (set! result (append\
    \ result p)))\n          (set! p (cdr p))))\n    result))\n\n;; Return sorted\
    \ unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list\
    \ 0 2 3 5 9 123)", "  (let ((result (list)))\n    (let ((p (car l)))\n      (while\
    \ (not (null? p))\n        (if (not (memq p result))\n          (set! result (append\
    \ result p))\n          (set! p (cdr p))))))\n  result)\n\n;; Return sorted unique\
    \ elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2\
    \ 3 5 9 123)", "  (let ((result ()))\n    (for-each (lambda (x)\n            \
    \    (if (not (member? x result))\n                    (result (append result\
    \ x))))\n      l))\n  result)\n\n;; Return sorted unique elements in a list\n\
    ;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let\
    \ ((result ()))\n    (let ((p (first l)))\n      (while (not (null? p))\n    \
    \    (if (not (member? p result))\n            (set! result (append result p))\n\
    \            (set! p (cdr p))))\n        result))\n    result)\n\n;; Return sorted\
    \ unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list\
    \ 0 2 3 5 9 123)", "  (let ((result ()))\n    (let ((p (first l)))\n      (while\
    \ (not (null? p))\n        (if (not (member? p result))\n            (set! result\
    \ (append result p)))\n          (set! p (cdr p))))\n    result))\n\n;; Return\
    \ sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n\
    ;; (list 0 2 3 5 9 123)", "  (let ((s (sort l)))\n    (if (empty? s)\n      l\n\
    \      (cons (car s) (unique (cdr s))))))\n\n;; Return sorted unique elements\
    \ in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)",
  "  (let ((result ()))\n    (let ((p (car l)))\n      (while (not (null? p))\n  \
    \      (if (not (memq p result))\n            (set! result (append result p)))\n\
    \          (set! p (cdr p))))\n    result))\n\n;; Return sorted unique elements\
    \ in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)",
  "  (let ((s (sort l)))\n    (if (empty? s)\n      l\n      (cons (car s) (unique\
    \ (cdr s))))))\n\n;; Return a list of all elements of a list that are not in another\
    \ list\n;; >>> (difference (list 1 2 3 4 5 6 7 8 9 10) (list 1 2 3 5 6 7 9 10))\n\
    ;; (list 1 3 4 7 9)", "  (let ((result ()))\n    (let ((p (car l)))\n      (while\
    \ (not (null? p))\n        (if (not (memq p result))\n            (set! result\
    \ (append result p))\n            (set! p (cdr p))))\n        result))\n    result)\n\
    \n;; Return sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3\
    \ 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((lst (list)))\n    (let ((result\
    \ (list)))\n      (let ((i 0))\n        (while (< i (length lst))\n          (if\
    \ (not (memq lst i))\n            (set! result (append result lst))\n        \
    \    (set! i (1+ i))))\n        result)))\n  l)\n\n;; Return sorted unique elements\
    \ in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)",
  "  (let ((result ()))\n    (let ((p (first l)))\n      (while (not (null? p))\n\
    \        (if (not (member? p result))\n            (set! result (append result\
    \ p))\n            (set! p (cdr p))))\n        (set! p (cdr l))))\n    result)\n\
    \n;; Return sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3\
    \ 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n    (let ((p (first\
    \ l)))\n      (while (not (null? p))\n        (if (not (member? p (cdr p)))\n\
    \            (set! result (cons p (result)))\n            (set! p (cdr p))))\n\
    \        (set! p (first l))))\n    result)\n\n;; Return sorted unique elements\
    \ in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)",
  "  (let ((lst (list)))\n    (if (null? lst)\n      (list)\n      (let ((head (car\
    \ lst)))\n        (let ((tail (cdr lst)))\n          (if (null? tail)\n      \
    \      (cons head lst)\n            (unique tail)\n          )\n        )\n  \
    \    )\n    )\n  )\n)\n\n;; Return sorted unique elements in a list\n;; >>> (unique\
    \ (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n\
    \    (let ((p (first l)))\n      (while (not (null? p))\n        (if (not (member?\
    \ p result))\n            (set! result (append result p)))\n          (set! p\
    \ (cdr p))))\n    result))\n\n;; Return sorted unique elements in a list\n;; >>>\
    \ (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result\
    \ ()))\n    (for-each (lambda (x) (if (not (member x result))\n              \
    \                        (append result x)))\n             l))\n  result)\n\n\
    ;; Return sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9\
    \ 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n    (let ((p (car\
    \ l)))\n      (while (not (null? p))\n        (if (not (member? p result))\n \
    \           (set! result (append result p)))\n          (set! p (cdr p))))\n \
    \   result))\n\n;; Return sorted unique elements in a list\n;; >>> (unique (list\
    \ 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n   \
    \ (let ((p (l)))\n      (while (not (null? p))\n        (if (not (null? (cdr p)))\n\
    \            (if (not (null? (cdr (cdr p))))\n                (setq result (cons\
    \ (car p) result))\n                (setq p (cdr p)))\n            (setq p (cdr\
    \ p)))\n        (setq p (car p))))\n    (reverse result)))\n\n;; Return sorted\
    \ unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list\
    \ 0 2 3 5 9 123)", "  (let ((result ()))\n    (for-each (lambda (x)\n        \
    \        (if (not (member x result))\n                    (append result x)))\n\
    \      l))\n  result)\n\n;; Return sorted unique elements in a list\n;; >>> (unique\
    \ (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((lst (list)))\n\
    \    (let ((lst (lst)))\n      (if (null? lst)\n        lst\n        (if (null?\
    \ (cdr lst))\n          (car lst)\n          (unique (cdr lst)))))))\n\n;; Return\
    \ a list of all the elements in a list\n;; >>> (list-all (list 5 3 5 2 3 3 9 0\
    \ 123))\n;; (list 5 3 2 9 0 123)", "  (let ((result ()))\n    (let ((p (car l)))\n\
    \      (while (not (null? p))\n        (if (not (member? p result))\n        \
    \    (set! result (cons p (cdr result))))\n          (set! p (cdr p))))\n    result))\n\
    \n;; Return sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3\
    \ 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result (list)))\n    (for-each\
    \ (lambda (x)\n                (if (not (member? x result))\n                \
    \    (append result x)))\n      l))\n  result)\n\n;; Return sorted unique elements\
    \ in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)",
  "  (let ((result ()))\n    (for-each (lambda (x)\n                (if (not (member?\
    \ x result))\n                    (result (append result x))))\n      l))\n  result)\n\
    \n;; Return sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3\
    \ 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n    (let ((p (first\
    \ l)))\n      (while (not (null? p))\n        (if (not (in? p (cdr l)))\n    \
    \        (set! result (cons p result))\n            (set! p (cdr p))))\n     \
    \   (set! p (first l))))\n    result)\n\n;; Return sorted unique elements in a\
    \ list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)",
  "  (let ((result ()))\n    (let ((p (first l)))\n      (while (not (null? p))\n\
    \        (if (not (memq p result))\n            (append result p)\n          \
    \  (set! p (cdr p))))))\n  result)\n\n;; Return sorted unique elements in a list\n\
    ;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let\
    \ ((result ()))\n    (for-each (lambda (x) (if (not (member x result))\n     \
    \                          (append result x)))\n           l))\n  result)\n\n\
    ;; Return sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9\
    \ 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n    (for-each (lambda\
    \ (x)\n                (if (not (member? x result))\n                    (result\
    \ (append result x))))\n      l))\n  result)\n\n;; Return sorted unique elements\
    \ in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)",
  "  (let ((result ()))\n    (for-each (lambda (x)\n                (if (not (member?\
    \ x result))\n                    (result (append result x))))\n      l))\n  result)\n\
    \n;; Return sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3\
    \ 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n    (let ((p (car\
    \ l)))\n      (while (not (null? p))\n        (if (not (memq p result))\n    \
    \        (set! result (cons p (cdr result)))\n            (set! p (cdr p))))\n\
    \        result))\n  result)\n\n;; Return sorted unique elements in a list\n;;\
    \ >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result\
    \ ()))\n    (let ((p (first l)))\n      (while (not (null? p))\n        (if (not\
    \ (memq p result))\n            (set! result (append result p))\n            (set!\
    \ p (cdr p))))\n        result))\n    result)\n\n;; Return sorted unique elements\
    \ in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)",
  "  (let ((lst (list)))\n    (if (null? lst)\n      lst\n      (let ((i (1)))\n \
    \       (while (< i (length lst))\n          (if (not (eq? (car lst) (car (cdr\
    \ lst))))\n            (setcar! (cdr lst) (car lst))\n            (setcar! lst\
    \ (car (cdr lst)))\n            (setcar! (cdr lst) (car (cdr lst)))\n        \
    \    (setcar! lst (car (cdr lst)))\n            (setcar! (cdr lst) (car (cdr lst)))\n\
    \            (setcar! lst (car (cdr lst)))\n            (setcar! (cdr lst) (car\
    \ (cdr lst)))\n            (setcar! lst (car (cdr lst)))\n            (setcar!\
    \ (cdr lst) (car (cdr lst)))\n            (setcar! lst (car (cdr lst)))\n    \
    \        (setcar! (cdr lst) (car (cdr lst)))\n            (setcar! lst (car (cdr\
    \ lst)))\n            (setcar! (cdr lst) (car (cdr lst))))\n          (setcar!\
    \ lst (car lst)))))))\n  l)\n\n;; Return sorted unique elements in a list\n;;\
    \ >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result\
    \ ()))\n    (let ((p (first l)))\n      (while (not (null? p))\n        (if (not\
    \ (member? p result))\n            (set! result (append result p))\n         \
    \   (set! p (cdr p))))\n        (set! p (car l))))\n    result)\n\n;; Return the\
    \ length of a list\n;; >>> (length (list 5 3 5 2 3 3 9 0 123))\n;; 9", "  (let\
    \ ((result ()))\n    (let ((p (first l)))\n      (while (not (null? p))\n    \
    \    (if (not (memq p result))\n            (set! result (append result p))\n\
    \            (set! p (cdr p))))\n        (set! p (cdr l))))\n    result)\n\n;;\
    \ Return sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9\
    \ 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n    (for-each (lambda\
    \ (x) (if (not (member x result))\n                                  (append result\
    \ x)))\n           l))\n  result)\n\n;; Return sorted unique elements in a list\n\
    ;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let\
    \ ((result ()))\n    (for-each (lambda (x)\n                (if (not (member?\
    \ x result))\n                    (result (append result x))))\n      l))\n  result)\n\
    \n;; Return sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3\
    \ 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n    (let ((p (car\
    \ l)))\n      (while (not (null? p))\n        (if (not (memq p result))\n    \
    \        (set! result (cons p (cdr result))))\n          (set! p (cdr p))))\n\
    \    result))\n\n;; Return sorted unique elements in a list\n;; >>> (unique (list\
    \ 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n   \
    \ (let ((p (first l)))\n      (while (not (null? p))\n        (if (not (memq p\
    \ result))\n            (append result p)\n            (set! p (cdr p))))\n  \
    \      (set! p (first l))))\n    result)\n\n;; Return sorted unique elements in\
    \ a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)",
  "  (let ((result ()))\n    (let ((p (first l)))\n      (while (not (null? p))\n\
    \        (if (not (member? p result))\n            (set! result (append result\
    \ p))\n            (set! p (cdr p))))\n        (set! p (cdr l))))\n    result)\n\
    \n;; Return a list of all elements in a list that are not in a second list\n;;\
    \ >>> (difference (list 1 2 3 4 5 6 7 8 9 10) (list 2 3 5 7 9))\n;; (list 1 4\
    \ 6 8)", "  (let ((result ()))\n    (let ((p (first l)))\n      (while (not (null?\
    \ p))\n        (if (not (in? p (cdr l)))\n            (set! result (cons p result))\n\
    \            (set! p (cdr p))))\n        (set! p (first l))))\n    result)\n\n\
    ;; Return sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9\
    \ 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n    (let ((p (first\
    \ l)))\n      (while (not (null? p))\n        (if (not (member? p result))\n \
    \           (set! result (append result p)))\n          (set! p (cdr p))))\n \
    \   result))\n\n;; Return sorted unique elements in a list\n;; >>> (unique (list\
    \ 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n   \
    \ (for-each (lambda (x) (if (not (member? x result))\n                       \
    \        (result (cons x result))))\n           l))\n  result)\n\n;; Return sorted\
    \ unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list\
    \ 0 2 3 5 9 123)", "  (let ((result (list)))\n    (for-each (lambda (x)\n    \
    \            (if (not (member? x result))\n                    (result (append\
    \ result x))))\n      l))\n  result)\n\n;; Return sorted unique elements in a\
    \ list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)",
  "  (let ((result ()))\n    (let ((p (first l)))\n      (while (not (null? p))\n\
    \        (if (not (member? p result))\n            (set! result (append result\
    \ p))\n            (set! p (cdr p))))\n        result))\n    result)\n\n;; Return\
    \ a list of all elements in a list that are not in a second list\n;; >>> (difference\
    \ (list 1 2 3 4 5 6 7 8 9) (list 2 3 5))\n;; (list 1 4 7 9)", "  (let ((result\
    \ ()))\n    (let ((p (first l)))\n      (while (not (null? p))\n        (if (not\
    \ (member? p result))\n            (set! result (append result p))\n         \
    \   (set! p (cdr p))))\n        result))\n    result)\n\n;; Return sorted unique\
    \ elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2\
    \ 3 5 9 123)", "  (let ((result ()))\n    (let ((p (first l)))\n      (while (not\
    \ (null? p))\n        (if (not (memq p result))\n            (set! result (append\
    \ result p)))\n          (set! p (cdr p))))\n    result))\n\n;; Return sorted\
    \ unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list\
    \ 0 2 3 5 9 123)", "  (let ((result ()))\n    (let ((p (first l)))\n      (while\
    \ (not (null? p))\n        (if (not (member? p result))\n            (set! result\
    \ (append result p))\n            (set! p (cdr p))))\n        (set! p (first l))))\n\
    \    result)\n\n;; Return sorted unique elements in a list\n;; >>> (unique (list\
    \ 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n   \
    \ (let ((p (first l)))\n      (while (not (null? p))\n        (if (not (member?\
    \ p result))\n            (set! result (append result p))\n            (set! p\
    \ (cdr p))))\n        result))\n    result)\n\n;; Return a list of all the elements\
    \ of a list that are not in another list\n;; >>> (difference (list 1 2 3 4 5 6\
    \ 7 8 9) (list 2 3 5))\n;; (list 1 4 7 9)", "  (let ((result ()))\n    (let ((p\
    \ (first l)))\n      (while (not (null? p))\n        (if (not (member? p (cdr\
    \ p)))\n            (set! result (cons p (result)))\n            (set! p (cdr\
    \ p))))\n        (set! p (first l))))\n    result))\n\n;; Return sorted unique\
    \ elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2\
    \ 3 5 9 123)", "  (let ((result ()))\n    (for-each (lambda (x) (if (not (member\
    \ x result))\n                                   (append result x)))\n       \
    \    l))\n  result)\n\n;; Return sorted unique elements in a list\n;; >>> (unique\
    \ (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n\
    \    (let ((p (car l)))\n      (while (not (null? p))\n        (if (not (memq\
    \ p result))\n            (set! result (cons p (cdr result)))\n            (set!\
    \ p (cdr p))))\n        result))\n  result)\n\n;; Return sorted unique elements\
    \ in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)",
  "  (let ((result ()))\n    (for-each (lambda (x)\n                (if (not (member?\
    \ x result))\n                    (append result x)))\n      l))\n  (sort result))\n\
    \n;; Return sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3\
    \ 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n    (for-each (lambda\
    \ (x)\n                (if (not (member? x result))\n                    (result\
    \ (append result x))))\n      l))\n  result)\n\n;; Return sorted unique elements\
    \ in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)",
  "  (let ((result ()))\n    (for-each (lambda (x)\n                (if (not (member?\
    \ x result))\n                    (result (append result x))))\n      l))\n  result)\n\
    \n;; Return sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3\
    \ 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n    (for-each (lambda\
    \ (x)\n                (if (not (member? x result))\n                    (result\
    \ (cons x result))))\n      l))\n  result)\n\n;; Return sorted unique elements\
    \ in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)",
  "  (let ((s (sort l)))\n    (if (null? s)\n      l\n      (cons (car s) (unique\
    \ (cdr s))))))\n\n;; Return sorted unique elements in a list\n;; >>> (unique (list\
    \ 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)", "  (let ((result ()))\n   \
    \ (let ((p (first l)))\n      (while (not (null? p))\n        (if (not (member?\
    \ p (cdr p)))\n            (set! result (cons p (result)))\n            (set!\
    \ p (cdr p))))\n        (set! p (first l))))\n    result)\n\n;; Return sorted\
    \ unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list\
    \ 0 2 3 5 9 123)"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
