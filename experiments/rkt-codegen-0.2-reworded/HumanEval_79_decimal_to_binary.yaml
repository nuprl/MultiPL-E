name: HumanEval_79_decimal_to_binary
language: rkt
prompt: "#lang racket\n\n;; You will be given a number in decimal form and your task\
  \ is to convert it to\n;; binary format. The function should return a string, with\
  \ each character representing a binary\n;; number. Each character in the string\
  \ will be '0' or '1'.\n;; There will be an extra couple of characters 'db' at the\
  \ beginning and at the end of the string.\n;; The extra characters are there to\
  \ help with the format.\n;; Examples:\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\
  \n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n(define (decimal_to_binary decimal)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate decimal_to_binary))\n\
  \    (check-equal? (candidate 0) \"db0db\")\n    (check-equal? (candidate 32) \"\
  db100000db\")\n    (check-equal? (candidate 103) \"db1100111db\")\n    (check-equal?\
  \ (candidate 15) \"db1111db\")\n))\n\n(test-humaneval)"
completions: ["  (let ((result \"\"))\n    (let ((digit decimal))\n      (let ((carry\
    \ 0))\n        (while (< digit 2)\n          (let ((next_digit (remainder digit\
    \ 2)))\n            (set! carry (+ carry next_digit))\n            (set! digit\
    \ (remainder digit 2))\n            (set! digit (remainder digit 2))\n       \
    \   )\n          (set! digit (remainder digit 2))\n        )\n        (set! digit\
    \ (remainder digit 2))\n        (set! carry (+ carry carry))\n        (set! digit\
    \ (remainder digit 2))\n        (set! digit (remainder digit 2))\n      )\n  \
    \    (set! digit (remainder digit 2))\n      (set! carry (+ carry carry))\n  \
    \    (set! digit (remainder digit 2))\n      (set! digit (remainder digit 2))\n\
    \      (set! carry (+ carry carry))\n      (set! digit (remainder digit 2))\n\
    \      (set! digit (remainder digit 2))\n      (set! carry (+ carry carry))\n\
    \      (set! digit (remainder digit 2))\n      (set! digit (remainder digit 2))\n\
    \      (set! carry (+ carry carry))\n      (set! digit (remainder digit 2))\n\
    \      (set! digit (remainder digit 2))\n      (set! carry (+ carry carry))\n\
    \      (set! digit (remainder digit 2))\n      (set! digit (remainder digit 2))\n\
    \      (set! carry (+ carry carry))\n      (set! digit (remainder digit 2))\n\
    \      (set! digit (remainder digit 2))\n      (set! carry (+ carry carry))\n\
    \      (set! digit (remainder digit 2))\n      (set! digit (remainder digit 2))\n\
    \      (set! carry (+ carry carry))\n      (set! digit (remainder digit 2))\n\
    \      (set! digit (remainder digit 2))\n      (set! carry (+ carry carry))\n\
    \      (set! digit (remainder digit 2))\n      (set! digit (remainder digit 2))\n\
    \      (set! carry (+ carry carry))\n      (set! digit (remainder", "  (let ((result\
    \ (make-string decimal 2)))\n    (let ((i 0))\n      (while (< decimal i)\n  \
    \      (let ((digit decimal/1))\n          (set-char! result i '1)\n         \
    \ (set-char! result (add 1 i))\n          (set-char! result (sub 1 i))\n     \
    \     (set-char! result '0)\n          (set-char! result '1)\n          (set-char!\
    \ result '0)\n          (set-char! result '1)\n          (set-char! result '0)\n\
    \          (set-char! result '1)\n          (set-char! result '0)\n          (set-char!\
    \ result '1)\n          (set-char! result '0)\n          (set-char! result '1)\n\
    \          (set-char! result '0)\n          (set-char! result '1)\n          (set-char!\
    \ result '0)\n          (set-char! result '1)\n          (set-char! result '0)\n\
    \          (set-char! result '1)\n          (set-char! result '0)\n          (set-char!\
    \ result '1)\n          (set-char! result '0)\n          (set-char! result '1)\n\
    \          (set-char! result '0)\n          (set-char! result '1)\n          (set-char!\
    \ result '0)\n          (set-char! result '1)\n          (set-char! result '0)\n\
    \          (set-char! result '1)\n          (set-char! result '0)\n          (set-char!\
    \ result '1)\n          (set-char! result '0)\n          (set-char! result '1)\n\
    \          (set-char! result '0)\n          (set-char! result '1)\n          (set-char!\
    \ result '0)\n          (set-char! result '1)\n          (set-char! result '0)\n\
    \          (set-char! result '1)\n          (set-char! result '0)\n          (set-char!\
    \ result '1)\n          (set-char! result '0)\n          (set-char!", "  (let\
    \ ((result \"\"))\n    (let ((decimal-value decimal))\n      (while (< decimal-value\
    \ 0)\n        (let ((digit decimal-value - 1))\n          (setq result (concat\
    \ \"0\" result))\n          (decimal-value / 2))))\n    (concat \"db\" result)))\n\
    \n;; You will be given a string in binary format and your task is to convert it\
    \ to decimal.\n;; The function should return a number.\n;; Examples:\n;; >>> (binary_to_decimal\
    \ \"111111\")\n;; 15\n;; >>> (binary_to_decimal \"100000\")\n;; 32", "  (let ((result\
    \ (make-string decimal 2)))\n    (let ((i 0))\n      (while (< i decimal)\n  \
    \      (let ((digit (modulo decimal i)))\n          (set-char! result i '1)\n\
    \          (set-char! result (add 1 i))\n          (set-char! result '0)\n   \
    \       (set-char! result '0)\n          (set-char! result '0)\n          (set-char!\
    \ result '0)\n          (set-char! result '0)\n          (set-char! result '0)\n\
    \          (set-char! result '0)\n          (set-char! result '0)\n          (set-char!\
    \ result '0)\n          (set-char! result '0)\n          (set-char! result '0)\n\
    \          (set-char! result '0)\n          (set-char! result '0)\n          (set-char!\
    \ result '0)\n          (set-char! result '0)\n          (set-char! result '0)\n\
    \          (set-char! result '0)\n          (set-char! result '0)\n          (set-char!\
    \ result '0)\n          (set-char! result '0)\n          (set-char! result '0)\n\
    \          (set-char! result '0)\n          (set-char! result '0)\n          (set-char!\
    \ result '0)\n          (set-char! result '0)\n          (set-char! result '0)\n\
    \          (set-char! result '0)\n          (set-char! result '0)\n          (set-char!\
    \ result '0)\n          (set-char! result '0)\n          (set-char! result '0)\n\
    \          (set-char! result '0)\n          (set-char! result '0)\n          (set-char!\
    \ result '0)\n          (set-char! result '0)\n          (set-char! result '0)\n\
    \          (set-char! result '0)\n          (set-char! result '0)\n          (set-char!\
    \ result '0)\n          (set-char! result '0)\n          (set-char!", "  (let\
    \ ((result \"\"))\n    (let ((digit decimal))\n      (while (< digit 2)\n    \
    \    (let ((next_digit (modulo digit 2)))\n          (let ((next_digit_char (char->integer\
    \ next_digit)))\n            (result (append result next_digit_char))))\n    \
    \      (setq digit (quotient digit 2)))\n        (append result \"1\"))))\n\n\
    ;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n\
    ;; \"db100000db\"\n;; >>> (decimal_to_binary -1)\n;; \"db
  "  (let ((result \"\"))\n    (let ((digit decimal))\n      (while (< digit 2)\n\
    \        (let ((next_digit (modulo digit 2)))\n          (let ((next_digit_char\
    \ (char->integer next_digit)))\n            (result (append result next_digit_char))))\n\
    \          (setq digit (decimal/= digit 2)))\n        (append result \"1\"))))\n\
    \n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n\
    ;; \"db100000db\"\n;; >>> (decimal_to_binary -1)\n;; \"db
  "  (let ((result \"\"))\n    (let ((temp (string-append \"db\" decimal)))\n    \
    \  (for-each (lambda (x) (string-append result (string->char x))) temp))\n   \
    \ (string-append \"db\" result)))\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\
    \n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary\
    \ 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;;\
    \ >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n\
    ;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary\
    \ 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;;\
    \ >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n\
    ;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary\
    \ 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;;\
    \ >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n\
    ;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary\
    \ 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;;\
    \ >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n\
    ;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary\
    \ 15)\n;;", "  (let ((result (make-string decimal/width 1)))\n    (let ((i 0))\n\
    \      (while (< decimal i)\n        (let ((digit decimal/1))\n          (set/char\
    \ result i '1))\n        (setq i (+ i 1)))\n      (set/char result i '0))\n  \
    \  (concat \"db\" result \"db\"))\n  )\n)\n\n;; You will be given a string in\
    \ binary format and your task is to convert it to decimal\n;; format. The function\
    \ should return a number.\n;; Examples:\n;; >>> (binary_to_decimal \"11111111\"\
    )\n;; 15\n;; >>> (binary_to_decimal \"100000\")\n;; 32", "  (let ((result \"\"\
    ))\n    (let ((digit decimal))\n      (let ((remainder (modulo digit 2)))\n  \
    \      (if (zero? remainder)\n          (append result \"1\")\n          (append\
    \ result \"0\"))))))\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>>\
    \ (decimal_to_binary 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n\
    ;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary\
    \ 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;;\
    \ >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n\
    ;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary\
    \ 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;;\
    \ >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n\
    ;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary\
    \ 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;;\
    \ >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n\
    ;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary\
    \ 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;;\
    \ >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n\
    ;; \"", "  (let ((result (string)))\n    (let ((i 0))\n      (while (< decimal\
    \ 0)\n        (let ((digit (modulo decimal 2)))\n          (string-set! result\
    \ (string-insert result \"0\" i))\n          (string-set! result (string-insert\
    \ result \"1\" i))\n          (set! i (+ i 1))\n          (decimal:= (decimal:=\
    \ decimal / 2))))\n      (string-set! result \"db\")\n      (string-set! result\
    \ (string-insert result \"0\" i))\n      (string-set! result (string-insert result\
    \ \"1\" i))\n      (string-set! result \"db\"))))\n\n;; You will be given a string\
    \ in binary format and your task is to convert it to decimal.\n;; The function\
    \ should return a number.\n;; Examples:\n;; >>> (binary_to_decimal \"db1111db\"\
    )\n;; 15\n;; >>> (binary_to_decimal \"100000db\")\n;; 32", "  (let ((result (make-string\
    \ decimal/width 1)))\n    (let ((i 0))\n      (while (< decimal i)\n        (let\
    \ ((digit decimal/1))\n          (set/char result i '1)\n          (setq i (+\
    \ i 1))\n          (decimal/1:= digit)))\n        (setq i 0))))\n\n;; >>> (decimal_to_binary\
    \ 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n;; >>>\
    \ (decimal_to_binary -1)\n;; \"db
  "  (let ((result (string)))\n    (let ((digit decimal))\n      (while (< digit 2)\n\
    \        (let ((next_digit (remainder digit 2)))\n          (string-append (if\
    \ (< digit 2) \"0\" \"1\") result next_digit))\n        (setq digit (remainder\
    \ digit 2))\n      )\n      (string-append \"0\" result)\n    )\n    (string-append\
    \ \"db\" result)\n  )\n)\n\n;; You will be given a string in binary format and\
    \ your task is to convert it to decimal.\n;; The function should return a number.\n\
    ;; Examples:\n;; >>> (binary_to_decimal \"111111\")\n;; 15\n;; >>> (binary_to_decimal\
    \ \"100000\")\n;; 32", "  (let ((result (string)))\n    (let ((digit decimal))\n\
    \      (while (< digit 2)\n        (let ((next_digit (remainder digit 2)))\n \
    \         (string-append (string-append \"1\" \"0\") (string-append \"1\" \"0\"\
    ))\n          (string-append \"1\" \"0\"))\n        (string-append \"1\" \"0\"\
    ))\n      (string-append \"1\" \"0\"))\n    (string-append \"1\" \"0\"))\n  result)\n\
    \n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n\
    ;; \"db100000db\"\n;; >>> (decimal_to_binary -1)\n;; \"db11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
  "  (let ((result (string)))\n    (let ((decimal-number decimal))\n      (let ((i\
    \ 0))\n        (while (< i 10)\n          (let ((digit decimal-number % 10))\n\
    \            (setf result (concat result (string #\\0 #\\1))))\n            (setf\
    \ decimal-number (decimal-number / 10))\n            (setf i (+ i 1))))\n    \
    \    (setf result (concat result #\\0 #\\1))))\n    (return result)))\n\n;; You\
    \ will be given a string in binary format and your task is to convert it to decimal\n\
    ;; format. The function should return a number.\n;; Examples:\n;; >>> (binary_to_decimal\
    \ \"db1111db\")\n;; 15\n;; >>> (binary_to_decimal \"db100000db\")\n;; 32", " \
    \ (let ((result \"\"))\n    (let ((digit decimal))\n      (while (< digit 2)\n\
    \        (let ((next_digit (remainder digit 2)))\n          (setq result (concat\
    \ \"1\" result))\n          (setq digit (sub1 digit))\n        )\n        (setq\
    \ result (concat \"0\" result))\n        (setq digit (sub1 digit))\n      )\n\
    \      (setq result (concat \"1\" result))\n      (setq digit (sub1 digit))\n\
    \      (setq result (concat \"0\" result))\n      (setq digit (sub1 digit))\n\
    \    )\n    (concat \"db\" result)\n  )\n)\n\n;; You will be given a string in\
    \ binary format and your task is to convert it to decimal.\n;; The function should\
    \ return a number.\n;; Examples:\n;; >>> (binary_to_decimal \"1101\")\n;; 15\n\
    ;; >>> (binary_to_decimal \"110111\")\n;; 17", "  (let ((result (string)))\n \
    \   (let ((digit decimal))\n      (while (< digit 2)\n        (let ((next_digit\
    \ (remainder digit 2)))\n          (string-append (if (< next_digit 1) \"0\" \"\
    1\") result))\n        (setq digit (quotient digit 2)))))\n  (string result))\n\
    \n;; You will be given a string in binary format and your task is to convert it\
    \ to decimal.\n;; The function should return a number.\n;; Examples:\n;; >>> (binary_to_decimal\
    \ \"111111\")\n;; 15\n;; >>> (binary_to_decimal \"100000\")\n;; 32", "  (let ((result\
    \ (string)))\n    (let ((temp (string)))\n      (let ((i 0))\n        (while (<\
    \ i decimal)\n          (let ((digit (string-char result i)))\n            (if\
    \ (string-char temp i)\n              (setf result (concat \"1\" result))\n  \
    \            (setf result (concat \"0\" result))\n              (setf temp (concat\
    \ \"1\" temp))\n              (setf temp (concat \"0\" temp))\n              (setf\
    \ i (1+ i))))\n          (setf i (1+ i))))\n    (concat \"db\" result temp)))\n\
    \n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n\
    ;; \"db100000db\"\n;; >>> (decimal_to_binary -1)\n;; \"db
  "  (let ((result (string)))\n    (let ((digit decimal))\n      (let ((remainder\
    \ (remainder decimal 2)))\n        (if (zero? remainder)\n          (let ((remainder\
    \ (remainder decimal 1)))\n            (let ((remainder (remainder decimal 2)))\n\
    \              (let ((remainder (remainder decimal 3)))\n                (let\
    \ ((remainder (remainder decimal 4)))\n                  (let ((remainder (remainder\
    \ decimal 5)))\n                    (let ((remainder (remainder decimal 6)))\n\
    \                      (let ((remainder (remainder decimal 7)))\n            \
    \            (let ((remainder (remainder decimal 8)))\n                      \
    \    (let ((remainder (remainder decimal 9)))\n                            (let\
    \ ((remainder (remainder decimal 10)))\n                              (let ((remainder\
    \ (remainder decimal 11)))\n                                (let ((remainder (remainder\
    \ decimal 12)))\n                                  (let ((remainder (remainder\
    \ decimal 13)))\n                                    (let ((remainder (remainder\
    \ decimal 14)))\n                                      (let ((remainder (remainder\
    \ decimal 15)))\n                                        (let ((remainder (remainder\
    \ decimal 16)))\n                                          (let ((remainder (remainder\
    \ decimal 17)))\n                                            (let ((remainder\
    \ (remainder decimal 18)))\n                                              (let\
    \ ((remainder (remainder decimal 19)))\n                                     \
    \           (let ((remainder (remainder decimal 20)))\n                      \
    \                            (let ((remainder (remainder decimal 21)))\n     \
    \                                               (let ((remainder (remainder decimal\
    \ 22)))\n                                                      (let ((remainder\
    \ (remainder decimal 23)))\n                                                 \
    \       (let ((remainder (remainder decimal 24)))\n                          \
    \                                (let ((remainder (remainder decimal 25)))\n \
    \                                                           (let ((remainder (remainder\
    \ decimal 26)))\n                                                            \
    \  (let ((remainder (remainder decimal 27)))\n                               \
    \                                 (let ((", "  (let ((result (string)))\n    (let\
    \ ((n (decimal)))\n      (while (< n 2)\n        (let ((digit (modulo n 2)))\n\
    \          (string-append (if digit 1 #\"1\") #\"0\")\n          (n (quotient\
    \ n 2)))\n        (string-append #\"0\" #\"1\"))\n      (string-append #\"0\"\
    \ #\"1\"))))\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary\
    \ 32)\n;; \"db100000db\"\n;; >>> (decimal_to_binary -1)\n;; \"db
  "  (let ((result (string)))\n    (let ((digit decimal))\n      (while (< digit 2)\n\
    \        (let ((next_digit (remainder digit 2)))\n          (string-append (string-append\
    \ \"0\" (modulo digit 2)) result)\n          (string-append \"1\" next_digit)\n\
    \          (setq digit (remainder digit 2)))\n        (string-append \"1\" digit))\n\
    \      (string-append \"0\" digit)\n      (string-append \"1\" (modulo decimal\
    \ 2))))\n\n;; You will be given a number in binary form and your task is to convert\
    \ it to\n;; decimal form. The function should return a string, with each character\
    \ representing a decimal\n;; number. Each character in the string will be '0'\
    \ or '1'.\n;; There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n;; The extra characters are there to help with\
    \ the format.\n;; Examples:\n;; >>> (binary_to_decimal \"11111111\")\n;; \"15\"\
    \n;; >>> (binary_to_decimal \"100000\")\n;; \"32\"", "  (let ((result (make-string\
    \ decimal/width 1)))\n    (let ((digit decimal/1))\n      (let ((i 0))\n     \
    \   (while (< i decimal/0)\n          (set! digit (modulo digit 2))\n        \
    \  (set! i (+ i 1)))\n        (set! result (concatenate result \"1\" digit))\n\
    \        (set! digit \"0\")\n      )\n      (set! result (concatenate result \"\
    1\" digit))\n      (set! digit \"0\")\n    )\n    (concatenate \"db\" result)\n\
    \  )\n)\n\n;; You will be given a string in binary format and your task is to\
    \ convert it to decimal.\n;; The function should return a number.\n;; Examples:\n\
    ;; >>> (binary_to_decimal \"111111\")\n;; 15\n;; >>> (binary_to_decimal \"100000\"\
    )\n;; 32", "  (let ((result (string)))\n    (let ((digits (string-split \"0123456789\"\
    \ decimal)))\n      (let ((n (length digits)))\n        (for-each (lambda (digit)\n\
    \                    (let ((bit (string-join \"01\" digit)))\n               \
    \       (string-append (string-append \"0\" bit) result)))\n                 \
    \ (range 0 n - 1))))))\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>>\
    \ (decimal_to_binary 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n\
    ;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary\
    \ 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;;\
    \ >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n\
    ;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary\
    \ 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;;\
    \ >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n\
    ;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary\
    \ 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;;\
    \ >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n\
    ;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary\
    \ 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n",
  "  (let ((result \"\"))\n    (let ((divisor (decimal_to_binary decimal/2)))\n  \
    \    (let ((remainder (decimal % 2)))\n        (if (zero? remainder)\n       \
    \     (append result \"0\")\n            (append result \"1\"))))\n    (append\
    \ result divisor)\n    (append result \"db\")\n    (append result remainder)))\n\
    \n;; You will be given a string in binary format and your task is to convert it\
    \ to decimal.\n;; The function should return a number.\n;; Examples:\n;; >>> (binary_to_decimal\
    \ \"1101\")\n;; 15\n;; >>> (binary_to_decimal \"100000\")\n;; 32", "  (let ((result\
    \ (string)))\n    (let ((digit decimal))\n      (while (< digit #b0111111)\n \
    \       (let ((next_digit (remainder digit #b0111111)))\n          (string-append\
    \ result (string-append #\"1\" next_digit))))\n      (string-append result #\"\
    0\"))))\n\n;; You will be given a string in binary format and your task is to\
    \ convert it to decimal\n;; format. The function should return a number.\n;; Examples:\n\
    ;; >>> (binary_to_decimal \"11111111\")\n;; 15\n;; >>> (binary_to_decimal \"100000\"\
    )\n;; 32", "  (let ((result (string)))\n    (let ((temp (string)))\n      (let\
    \ ((i 0))\n        (while (< i decimal)\n          (let ((digit (string-char result\
    \ i)))\n            (if (string-char temp i)\n              (let ((next_digit\
    \ (string-char temp i)))\n                (string-set! result (string-append result\
    \ \"1\") (string-set! temp \"0\"))\n                (string-set! result (string-append\
    \ result \"0\") (string-set! temp next_digit)))\n              (string-set! result\
    \ (string-append result \"0\") (string-set! temp \"0\")))))\n        (string-set!\
    \ result (string-append result \"0\") (string-set! temp \"0\")))))\n  result)\n\
    \n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n\
    ;; \"db100000db\"", "  (let ((result (string)))\n    (let ((decimal-str (string-append\
    \ \"db\" decimal)))\n      (let ((i 0))\n        (while (< i decimal)\n      \
    \    (let ((digit (string-char decimal-str i)))\n            (string-set! result\
    \ (string-insert! result digit) i)\n            (set! i (+ i 1))))\n        (string-set!\
    \ result \"db\")\n        (string-set! result (string-insert! result decimal-str\
    \ i))))))\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary\
    \ 32)\n;; \"db100000db\"\n;; >>> (decimal_to_binary -1)\n;; \"db
  "  (let ((result (string)))\n    (let ((digit decimal))\n      (while (< digit 2)\n\
    \        (let ((next_digit (remainder digit 2)))\n          (string-append (if\
    \ (< next_digit 1) \"0\" \"1\") result))\n        (setq digit (quotient digit\
    \ 2)))))\n  (string result))\n\n;; You will be given a number in binary form and\
    \ your task is to convert it to\n;; decimal form. The function should return a\
    \ string, with each character representing a decimal\n;; number. Each character\
    \ in the string will be '0' or '1'.\n;; There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n;; The extra characters\
    \ are there to help with the format.\n;; Examples:\n;; >>> (binary_to_decimal\
    \ \"db1111db\")\n;; \"15\"\n;; >>> (binary_to_decimal \"100000db\")\n;; \"32\"",
  "  (let ((result (make-string decimal/width 1)))\n    (let ((i 0))\n      (while\
    \ (< i decimal/width)\n        (let ((digit (modulo decimal/width i)))\n     \
    \     (set-char! result i digit)\n          (set-char! result i '1)\n        \
    \  (set-char! result i '0)\n          (set-char! result i '1)\n          (set-char!\
    \ result i '0)\n          (set-char! result i '1)\n          (set-char! result\
    \ i '0)\n          (set-char! result i '1)\n          (set-char! result i '0)\n\
    \          (set-char! result i '1)\n          (set-char! result i '0)\n      \
    \    (set-char! result i '1)\n          (set-char! result i '0)\n          (set-char!\
    \ result i '1)\n          (set-char! result i '0)\n          (set-char! result\
    \ i '1)\n          (set-char! result i '0)\n          (set-char! result i '1)\n\
    \          (set-char! result i '0)\n          (set-char! result i '1)\n      \
    \    (set-char! result i '0)\n          (set-char! result i '1)\n          (set-char!\
    \ result i '0)\n          (set-char! result i '1)\n          (set-char! result\
    \ i '0)\n          (set-char! result i '1)\n          (set-char! result i '0)\n\
    \          (set-char! result i '1)\n          (set-char! result i '0)\n      \
    \    (set-char! result i '1)\n          (set-char! result i '0)\n          (set-char!\
    \ result i '1)\n          (set-char! result i '0)\n          (set-char! result\
    \ i '1)\n          (set-char! result i '0)\n          (set-char! result i '1)\n\
    \          (set-char! result i '0)\n          (set-char! result i '1)\n      \
    \    (set-char! result i '0", "  (let ((result \"\"))\n    (let ((digit decimal))\n\
    \      (let ((remainder decimal))\n        (while (< digit 2)\n          (let\
    \ ((quotient digit))\n            (let ((remainder (remainder (- digit quotient))))\n\
    \              (let ((digit (remainder (- digit quotient))))\n               \
    \ (let ((quotient (remainder (- digit quotient))))\n                  (let ((remainder\
    \ (remainder (- digit quotient))))\n                    (let ((digit (remainder\
    \ (- digit quotient))))\n                      (let ((quotient (remainder (- digit\
    \ quotient))))\n                        (let ((remainder (remainder (- digit quotient))))\n\
    \                          (let ((digit (remainder (- digit quotient))))\n   \
    \                         (let ((quotient (remainder (- digit quotient))))\n \
    \                             (let ((remainder (remainder (- digit quotient))))\n\
    \                                (let ((digit (remainder (- digit quotient))))\n\
    \                                  (let ((quotient (remainder (- digit quotient))))\n\
    \                                    (let ((remainder (remainder (- digit quotient))))\n\
    \                                      (let ((digit (remainder (- digit quotient))))\n\
    \                                        (let ((quotient (remainder (- digit quotient))))\n\
    \                                          (let ((remainder (remainder (- digit\
    \ quotient))))\n                                            (let ((digit (remainder\
    \ (- digit quotient))))\n                                              (let ((quotient\
    \ (remainder (- digit quotient))))\n                                         \
    \       (let ((remainder (remainder (- digit quotient))))\n                  \
    \                                (let ((digit (remainder (- digit quotient))))\n\
    \                                                    (let ((quotient (remainder\
    \ (- digit quotient))))\n                                                    \
    \  (let ((remainder (remainder (- digit quotient))))\n                       \
    \                                 (let ((digit (remainder (- digit quotient))))\n\
    \                                                          (let ((quotient (remainder\
    \ (- digit quotient))))\n                                                    \
    \        (let ((remainder (remainder (- digit quotient))))\n", "  (let ((result\
    \ (make-string decimal/width-of-decimal-base 2)))\n    (let ((digit decimal/base-ten-digit)\n\
    \          (index 0))\n      (while (<= digit decimal/base-ten-digit)\n      \
    \  (let ((next-digit (remainder digit decimal/base-ten-digit)))\n          (set-char!\
    \ result index '1)\n          (set-char! result (add index 1))\n          (set-char!\
    \ result '0)\n          (set-char! result '0)\n          (set-char! result '0)\n\
    \          (set-char! result '0)\n          (set-char! result '0)\n          (set-char!\
    \ result '0)\n          (set-char! result '0)\n          (set-char! result '0)\n\
    \          (set-char! result '0)\n          (set-char! result '0)\n          (set-char!\
    \ result '0)\n          (set-char! result '0)\n          (set-char! result '0)\n\
    \          (set-char! result '0)\n          (set-char! result '0)\n          (set-char!\
    \ result '0)\n          (set-char! result '0)\n          (set-char! result '0)\n\
    \          (set-char! result '0)\n          (set-char! result '0)\n          (set-char!\
    \ result '0)\n          (set-char! result '0)\n          (set-char! result '0)\n\
    \          (set-char! result '0)\n          (set-char! result '0)\n          (set-char!\
    \ result '0)\n          (set-char! result '0)\n          (set-char! result '0)\n\
    \          (set-char! result '0)\n          (set-char! result '0)\n          (set-char!\
    \ result '0)\n          (set-char! result '0)\n          (set-char! result '0)\n\
    \          (set-char! result '0)\n          (set-char! result '0)\n          (set-char!\
    \ result '0)\n          (set-char! result '0)\n          (", "  (let ((result\
    \ (string)))\n    (let ((digit decimal))\n      (while (< digit 2)\n        (let\
    \ ((next_digit (remainder digit 2)))\n          (string-append (string-append\
    \ \"1\" \"0\") (string-append \"1\" \"0\"))\n          (string-append \"1\" \"\
    0\"))\n        (string-append \"1\" \"0\"))\n      (string-append \"1\" \"0\"\
    ))\n    (string-append \"1\" \"0\"))\n  result)\n\n;; >>> (decimal_to_binary 15)\n\
    ;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n;; >>> (decimal_to_binary\
    \ -1)\n;; \"db
  "  (let ((result (make-string decimal/width)))\n    (let ((i 0))\n      (while (<\
    \ decimal i)\n        (let ((digit decimal/1))\n          (set/char result i '1))\n\
    \        (set/char result i '0)\n        (set/char result i 'd)\n        (set/char\
    \ result i 'b)\n        (set/char result i '0)\n        (set/char result i '0)\n\
    \        (set/char result i '0)\n        (set/char result i '0)\n        (set/char\
    \ result i '0)\n        (set/char result i '0)\n        (set/char result i '0)\n\
    \        (set/char result i '0)\n        (set/char result i '0)\n        (set/char\
    \ result i '0)\n        (set/char result i '0)\n        (set/char result i '0)\n\
    \        (set/char result i '0)\n        (set/char result i '0)\n        (set/char\
    \ result i '0)\n        (set/char result i '0)\n        (set/char result i '0)\n\
    \        (set/char result i '0)\n        (set/char result i '0)\n        (set/char\
    \ result i '0)\n        (set/char result i '0)\n        (set/char result i '0)\n\
    \        (set/char result i '0)\n        (set/char result i '0)\n        (set/char\
    \ result i '0)\n        (set/char result i '0)\n        (set/char result i '0)\n\
    \        (set/char result i '0)\n        (set/char result i '0)\n        (set/char\
    \ result i '0)\n        (set/char result i '0)\n        (set/char result i '0)\n\
    \        (set/char result i '0)\n        (set/char result i '0)\n        (set/char\
    \ result i '0)\n        (set/char result i '0)\n        (set/char result i '0)\n\
    \        (set/char result i '0)\n        (set/char result i '0)", "  (let ((result\
    \ \"\"))\n    (let ((decimal-value decimal))\n      (while (< decimal-value 0)\n\
    \        (let ((divisor 2))\n          (let ((remainder decimal-value))\n    \
    \        (if (> remainder 0)\n              (let ((quotient remainder))\n    \
    \            (let ((modulo remainder))\n                  (let ((character '1))\n\
    \                    (setq result (concat result (character) quotient))\n    \
    \                (setq decimal-value (modulo decimal-value))))))))\n        (setq\
    \ decimal-value (decimal-value - divisor)))\n      (let ((character '0))\n   \
    \     (setq result (concat result (character) decimal-value))))\n    (let ((character\
    \ 'd'))\n      (setq result (concat result (character) decimal-value))))\n  result)\n\
    \n;; You will be given a string representing a binary number and your task is\
    \ to convert it\n;; to decimal format. The function should return a number.\n\
    ;; Examples:\n;; >>> (binary_to_decimal \"db1111db\")\n;; 15\n;; >>> (binary_to_decimal\
    \ \"db100000db\")\n;; 32", "  (let ((result (string)))\n    (let ((decimal-string\
    \ (string-append \"db\" decimal)))\n      (let ((i 0))\n        (while (< i decimal)\n\
    \          (let ((digit (string-char decimal-string i)))\n            (setf result\
    \ (string-append (string-append \"0\" digit) result))\n            (setf i (1+\
    \ i)))\n          (setf i 0))\n        (setf i 0))\n      (string-append \"0\"\
    \ result)))\n)\n\n;; You will be given a number in binary form and your task is\
    \ to convert it to\n;; decimal form. The function should return a string, with\
    \ each character representing a decimal\n;; number. Each character in the string\
    \ will be a digit from 0 to 9.\n;; There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n;; The extra characters\
    \ are there to help with the format.\n;; Examples:\n;; >>> (binary_to_decimal\
    \ \"11111111\")\n;; \"15\"\n;; >>> (binary_to_decimal \"100000\")\n;; \"32\"",
  "  (let ((result \"\"))\n    (let ((digit decimal))\n      (let ((remainder decimal))\n\
    \        (while (< digit 2)\n          (let ((quotient digit))\n            (let\
    \ ((remainder (remainder (- digit quotient))))\n              (let ((digit (remainder\
    \ quotient)))\n                (let ((quotient (remainder quotient)))\n      \
    \            (let ((remainder (remainder quotient)))\n                    (let\
    \ ((digit (remainder quotient)))\n                      (let ((quotient (remainder\
    \ quotient)))\n                        (let ((remainder (remainder quotient)))\n\
    \                          (let ((digit (remainder quotient)))\n             \
    \               (let ((quotient (remainder quotient)))\n                     \
    \         (let ((remainder (remainder quotient)))\n                          \
    \      (let ((digit (remainder quotient)))\n                                 \
    \ (let ((quotient (remainder quotient)))\n                                   \
    \ (let ((remainder (remainder quotient)))\n                                  \
    \    (let ((digit (remainder quotient)))\n                                   \
    \     (let ((quotient (remainder quotient)))\n                               \
    \           (let ((remainder (remainder quotient)))\n                        \
    \                    (let ((digit (remainder quotient)))\n                   \
    \                           (let ((quotient (remainder quotient)))\n         \
    \                                       (let ((remainder (remainder quotient)))\n\
    \                                                  (let ((digit (remainder quotient)))\n\
    \                                                    (let ((quotient (remainder\
    \ quotient)))\n                                                      (let ((remainder\
    \ (remainder quotient)))\n                                                   \
    \     (let ((digit (remainder quotient)))\n                                  \
    \                        (let ((quotient (remainder quotient)))\n            \
    \                                                (let ((remainder (remainder quotient)))\n\
    \                                                              (let ((digit (remainder\
    \ quotient)))\n                                                              \
    \  (let ((quotient (remainder quotient)))\n                                  \
    \                                (let ((remainder (remainder quotient)))", " \
    \ (let ((result (string)))\n    (let ((temp (string)))\n      (let ((i 0))\n \
    \       (while (< i decimal)\n          (let ((digit (string-char result i)))\n\
    \            (if (string-char temp i)\n              (string-insert result \"\
    1\")\n              (string-insert result \"0\"))\n            (string-insert\
    \ temp \"1\")\n            (string-insert temp \"0\"))\n            (setq i (+\
    \ i 1)))\n          (string-insert result \"1\")\n          (string-insert result\
    \ \"0\"))\n        (string-insert result \"1\")\n        (string-insert result\
    \ \"0\"))\n      (string-append \"db\" result)))\n)\n\n;; You will be given a\
    \ string in binary format and your task is to convert it to decimal\n;; format.\
    \ The function should return a number.\n;; Examples:\n;; >>> (binary_to_decimal\
    \ \"db1111db\")\n;; 15\n;; >>> (binary_to_decimal \"db100000db\")\n;; 32", " \
    \ (let ((result (string)))\n    (let ((digit (string-append \"0\" decimal)))\n\
    \      (let ((result (string-append result digit)))\n        (let ((digit (string-append\
    \ \"0\" decimal)))\n          (let ((result (string-append result digit)))\n \
    \           (let ((digit (string-append \"0\" decimal)))\n              (let ((result\
    \ (string-append result digit)))\n                (let ((digit (string-append\
    \ \"0\" decimal)))\n                  (let ((result (string-append result digit)))\n\
    \                    (let ((digit (string-append \"0\" decimal)))\n          \
    \            (let ((result (string-append result digit)))\n                  \
    \      (let ((digit (string-append \"0\" decimal)))\n                        \
    \  (let ((result (string-append result digit)))\n                            (let\
    \ ((digit (string-append \"0\" decimal)))\n                              (let\
    \ ((result (string-append result digit
  "  (let ((result (string)))\n    (let ((i 0))\n      (while (< decimal i)\n    \
    \    (let ((digit (modulo decimal i 2)))\n          (string-set! result (string-append\
    \ (string-append \"0\" digit) result))))\n      (string-set! result (string-append\
    \ \"0\" (modulo decimal i 2)))\n      (string-set! result (string-append \"0\"\
    \ (modulo decimal i 2)))\n      (string-set! result (string-append \"0\" (modulo\
    \ decimal i 2)))\n      (string-set! result (string-append \"0\" (modulo decimal\
    \ i 2)))\n      (string-set! result (string-append \"0\" (modulo decimal i 2)))\n\
    \      (string-set! result (string-append \"0\" (modulo decimal i 2)))\n     \
    \ (string-set! result (string-append \"0\" (modulo decimal i 2)))\n      (string-set!\
    \ result (string-append \"0\" (modulo decimal i 2)))\n      (string-set! result\
    \ (string-append \"0\" (modulo decimal i 2)))\n      (string-set! result (string-append\
    \ \"0\" (modulo decimal i 2)))\n      (string-set! result (string-append \"0\"\
    \ (modulo decimal i 2)))\n      (string-set! result (string-append \"0\" (modulo\
    \ decimal i 2)))\n      (string-set! result (string-append \"0\" (modulo decimal\
    \ i 2)))\n      (string-set! result (string-append \"0\" (modulo decimal i 2)))\n\
    \      (string-set! result (string-append \"0\" (modulo decimal i 2)))\n     \
    \ (string-set! result (string-append \"0\" (modulo decimal i 2)))\n      (string-set!\
    \ result (string-append \"0\" (modulo decimal i 2)))\n      (string-set! result\
    \ (string-append \"0\" (modulo decimal i 2)))\n      (string-set! result (string-append\
    \ \"0\" (modulo decimal i 2)))\n      (string-set! result (string-append \"0\"\
    \ (modulo decimal i 2)))\n      (string-set! result (string-append", "  (let ((result\
    \ \"\"))\n    (let ((digit decimal))\n      (let ((remainder decimal))\n     \
    \   (while (< remainder 2)\n          (let ((quotient remainder))\n          \
    \  (let ((remainder (remainder - quotient)))\n              (let ((quotient (remainder\
    \ / 2)))\n                (let ((remainder (remainder - quotient)))\n        \
    \          (let ((quotient (remainder / 2)))\n                    (let ((remainder\
    \ (remainder - quotient)))\n                      (let ((quotient (remainder /\
    \ 2)))\n                        (let ((remainder (remainder - quotient)))\n  \
    \                        (let ((quotient (remainder / 2)))\n                 \
    \           (let ((remainder (remainder - quotient)))\n                      \
    \        (let ((quotient (remainder / 2)))\n                                (let\
    \ ((remainder (remainder - quotient)))\n                                  (let\
    \ ((quotient (remainder / 2)))\n                                    (let ((remainder\
    \ (remainder - quotient)))\n                                      (let ((quotient\
    \ (remainder / 2)))\n                                        (let ((remainder\
    \ (remainder - quotient)))\n                                          (let ((quotient\
    \ (remainder / 2)))\n                                            (let ((remainder\
    \ (remainder - quotient)))\n                                              (let\
    \ ((quotient (remainder / 2)))\n                                             \
    \   (let ((remainder (remainder - quotient)))\n                              \
    \                    (let ((quotient (remainder / 2)))\n                     \
    \                               (let ((remainder (remainder - quotient)))\n  \
    \                                                    (let ((quotient (remainder\
    \ / 2)))\n                                                        (let ((remainder\
    \ (remainder - quotient)))\n                                                 \
    \         (let ((quotient (remainder / 2)))\n                                \
    \                            (let ((remainder (remainder - quotient)))\n     \
    \                                                         (let ((quotient (remainder\
    \ / 2)))\n                                                                (let",
  "  (let ((result (make-string decimal/width 1)))\n    (let ((i 0))\n      (while\
    \ (< i decimal/width)\n        (let ((digit (modulo decimal/width i)))\n     \
    \     (set-char! result i '1))\n        (set-char! result i '0))\n        (set-char!\
    \ result i '1))\n      (set-char! result i '0))\n    (concat \"db\" result \"\
    db\"))\n)\n\n;; You will be given a string in binary format and your task is to\
    \ convert it to decimal.\n;; The function should return a number.\n;; Examples:\n\
    ;; >>> (binary_to_decimal \"111111\")\n;; 15\n;; >>> (binary_to_decimal \"100000\"\
    )\n;; 32", "  (let ((result (string)))\n    (let ((n (string-append \"db\" decimal)))\n\
    \      (let ((i 0))\n        (while (< i 10)\n          (let ((digit (string-char\
    \ n i)))\n            (setf result (string-append (string-append \"0\" digit)\
    \ result))\n            (setf i (1+ i)))\n          )\n        (setf result (string-append\
    \ \"0\" result))\n        )\n      )\n    )\n  )\n)\n\n;; You will be given a\
    \ string in binary format and your task is to convert it to decimal.\n;; The string\
    \ will be in the format \"db100000db\".\n;; The extra characters at the beginning\
    \ and at the end are there to help with the format.\n;; Examples:\n;; >>> (binary_to_decimal\
    \ \"db100000db\")\n;; \"15\"\n;; >>> (binary_to_decimal \"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
  "  (let ((result (string)))\n    (let ((n (decimal)))\n      (while (< n 2)\n  \
    \      (let ((digit (modulo n 2)))\n          (string-append (if digit 1 #\"1\"\
    ) #\"0\")\n          (n (quotient n 2)))\n        (string-append #\"0\" #\"1\"\
    )\n        (n (quotient n 2)))\n      (string-append #\"0\" #\"1\")\n      (string-append\
    \ #\"0\" #\"1\")\n      (string-append #\"0\" #\"1\")\n      (string-append #\"\
    0\" #\"1\")\n      (string-append #\"0\" #\"1\")\n      (string-append #\"0\"\
    \ #\"1\")\n      (string-append #\"0\" #\"1\")\n      (string-append #\"0\" #\"\
    1\")\n      (string-append #\"0\" #\"1\")\n      (string-append #\"0\" #\"1\"\
    )\n      (string-append #\"0\" #\"1\")\n      (string-append #\"0\" #\"1\")\n\
    \      (string-append #\"0\" #\"1\")\n      (string-append #\"0\" #\"1\")\n  \
    \    (string-append #\"0\" #\"1\")\n      (string-append #\"0\" #\"1\")\n    \
    \  (string-append #\"0\" #\"1\")\n      (string-append #\"0\" #\"1\")\n      (string-append\
    \ #\"0\" #\"1\")\n      (string-append #\"0\" #\"1\")\n      (string-append #\"\
    0\" #\"1\")\n      (string-append #\"0\" #\"1\")\n      (string-append #\"0\"\
    \ #\"1\")\n      (string-append #\"0\" #\"1\")\n      (string-append #\"0\" #\"\
    1\")\n      (string-append #\"0\" #\"1\")\n      (string-append #\"0\" #\"1\"\
    )\n      (string-append #\"0\" #\"1\")\n      (string-append #\"0\" #\"1\")\n\
    \      (string-append #\"0\" #\"1\")", "  (let ((result \"\"))\n    (let ((digit\
    \ decimal))\n      (let ((divisor 2))\n        (while (< digit 0)\n          (let\
    \ ((quotient digit divisor))\n            (let ((remainder digit (quotient digit\
    \ divisor)))\n              (set! digit (- digit quotient))\n              (set!\
    \ divisor (divisor + 1))\n              (set! result (concat result (string-append\
    \ \"1\" remainder))))))\n          (set! digit (decimal / divisor)))\n       \
    \ (set! result (concat \"0\" result))))\n  result))\n\n;; You will be given a\
    \ string in binary format and your task is to convert it to decimal\n;; format.\
    \ The function should return a number.\n;; Examples:\n;; >>> (binary_to_decimal\
    \ \"11111111\")\n;; 15\n;; >>> (binary_to_decimal \"100000\")\n;; 32", "  (let\
    \ ((result (make-string decimal/width 1)))\n    (let ((i 0))\n      (while (<\
    \ i decimal/width)\n        (let ((digit (modulo decimal/width i)))\n        \
    \  (set-char! result i digit)\n          (set-char! result i '1)\n          (set-char!\
    \ result i '0)\n          (set-char! result i '1)\n          (set-char! result\
    \ i '0)\n          (set-char! result i '1)\n          (set-char! result i '0)\n\
    \          (set-char! result i '1)\n          (set-char! result i '0)\n      \
    \    (set-char! result i '1)\n          (set-char! result i '0)\n          (set-char!\
    \ result i '1)\n          (set-char! result i '0)\n          (set-char! result\
    \ i '1)\n          (set-char! result i '0)\n          (set-char! result i '1)\n\
    \          (set-char! result i '0)\n          (set-char! result i '1)\n      \
    \    (set-char! result i '0)\n          (set-char! result i '1)\n          (set-char!\
    \ result i '0)\n          (set-char! result i '1)\n          (set-char! result\
    \ i '0)\n          (set-char! result i '1)\n          (set-char! result i '0)\n\
    \          (set-char! result i '1)\n          (set-char! result i '0)\n      \
    \    (set-char! result i '1)\n          (set-char! result i '0)\n          (set-char!\
    \ result i '1)\n          (set-char! result i '0)\n          (set-char! result\
    \ i '1)\n          (set-char! result i '0)\n          (set-char! result i '1)\n\
    \          (set-char! result i '0)\n          (set-char! result i '1)\n      \
    \    (set-char! result i '0)\n          (set-char! result i '1)\n          (set-char!\
    \ result i '0", "  (let ((result (string)))\n    (let ((i 0))\n      (while (<\
    \ decimal i)\n        (let ((digit decimal/:i))\n          (set! result (concat\
    \ \"1\" result))\n          (set! i (+ i 1))))\n      (set! result (concat \"\
    0\" result))\n      (set! i (+ i 1))))\n  result)\n\n;; You will be given a number\
    \ in binary form and your task is to convert it to\n;; decimal form. The function\
    \ should return a string, with each character representing a decimal\n;; number.\
    \ Each character in the string will be '0' or '1'.\n;; There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n;;\
    \ The extra characters are there to help with the format.\n;; Examples:\n;; >>>\
    \ (binary_to_decimal \"11111111\")\n;; \"15\"\n;; >>> (binary_to_decimal \"100000\"\
    )\n;; \"32\"", "  (let ((result (string)))\n    (let ((digit decimal))\n     \
    \ (while (< digit 2)\n        (let ((next_digit (remainder digit 2)))\n      \
    \    (string-append (string-append \"0\" next_digit) result)\n          (setq\
    \ digit (remainder digit 2)))\n        (string-append \"1\" result))\n      (string-append\
    \ \"0\" result)))\n)\n\n;; You will be given a number in binary form and your\
    \ task is to convert it to\n;; decimal form. The function should return a string,\
    \ with each character representing a decimal\n;; number. Each character in the\
    \ string will be '0' or '1'.\n;; There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n;; The extra characters are\
    \ there to help with the format.\n;; Examples:\n;; >>> (binary_to_decimal \"11111111\"\
    )\n;; \"15\"\n;; >>> (binary_to_decimal \"100000\")\n;; \"32\"", "  (let ((result\
    \ \"\"))\n    (let ((temp (string-append \"db\" decimal)))\n      (for-each (lambda\
    \ (x) (string-append result (string->char-string x))) temp))\n    (string-append\
    \ \"db\" result)))\n\n;; You will be given a string in binary format and your\
    \ task is to convert it to decimal.\n;; The function should return a number.\n\
    ;; Examples:\n;; >>> (binary_to_decimal \"11111111\")\n;; 15\n;; >>> (binary_to_decimal\
    \ \"100000\")\n;; 32", "  (let ((result (make-string decimal/width 1)))\n    (let\
    \ ((i 0))\n      (while (< i decimal/width)\n        (let ((digit (modulo decimal/width\
    \ i)))\n          (set-char! result i '1)\n          (set-char! result i '0)\n\
    \          (set-char! result i '0)\n          (set-char! result i '1)\n      \
    \    (set-char! result i '0)\n          (set-char! result i '0)\n          (set-char!\
    \ result i '1)\n          (set-char! result i '0)\n          (set-char! result\
    \ i '0)\n          (set-char! result i '1)\n          (set-char! result i '0)\n\
    \          (set-char! result i '0)\n          (set-char! result i '1)\n      \
    \    (set-char! result i '0)\n          (set-char! result i '0)\n          (set-char!\
    \ result i '1)\n          (set-char! result i '0)\n          (set-char! result\
    \ i '0)\n          (set-char! result i '1)\n          (set-char! result i '0)\n\
    \          (set-char! result i '0)\n          (set-char! result i '1)\n      \
    \    (set-char! result i '0)\n          (set-char! result i '0)\n          (set-char!\
    \ result i '1)\n          (set-char! result i '0)\n          (set-char! result\
    \ i '0)\n          (set-char! result i '1)\n          (set-char! result i '0)\n\
    \          (set-char! result i '0)\n          (set-char! result i '1)\n      \
    \    (set-char! result i '0)\n          (set-char! result i '0)\n          (set-char!\
    \ result i '1)\n          (set-char! result i '0)\n          (set-char! result\
    \ i '0)\n          (set-char! result i '1)\n          (set-char! result i '0)\n\
    \          (set-char! result i '", "  (let ((result \"\"))\n    (let ((digit decimal))\n\
    \      (let ((remainder decimal))\n        (while (< digit 2)\n          (let\
    \ ((quotient remainder))\n            (let ((quotient digit))\n              (let\
    \ ((remainder digit))\n                (set! result (concat result (string-append\
    \ \"0\" quotient)))\n                (set! remainder (remainder - quotient))\n\
    \                (set! digit (quotient - 1))\n              )\n            )\n\
    \          )\n        )\n      )\n    )\n    (concat \"db\" result)\n  )\n)\n\n\
    ;; You will be given a string in binary format and your task is to convert it\
    \ to decimal.\n;; The string will not have any extra characters at the beginning\
    \ or at the end.\n;; The string will be in the form
  "  (let ((result (make-string decimal/width)))\n    (let ((i 0))\n      (while (<\
    \ i decimal/width)\n        (let ((digit (modulo decimal/width i)))\n        \
    \  (set-char! result i '1))\n        (set-char! result i '0))\n        (set-char!\
    \ result i '1))\n      (set-char! result i '0))\n    (concat \"db\" result \"\
    db\"))\n)\n\n;; You will be given a string in binary format and your task is to\
    \ convert it to decimal.\n;; The function should return a number.\n;; Examples:\n\
    ;; >>> (binary_to_decimal \"111111\")\n;; 15\n;; >>> (binary_to_decimal \"100000\"\
    )\n;; 32", "  (let ((result \"\"))\n    (let ((digit decimal))\n      (let ((remainder\
    \ 0))\n        (while (< digit 2)\n          (let ((quotient (divide digit 2)))\n\
    \            (let ((digit1 (modulo digit 2)))\n              (let ((digit2 (modulo\
    \ digit 1)))\n                (let ((digit3 (modulo digit 0)))\n             \
    \     (let ((digit4 (modulo digit 3)))\n                    (let ((digit5 (modulo\
    \ digit 4)))\n                      (let ((digit6 (modulo digit 5)))\n       \
    \                 (let ((digit7 (modulo digit 6)))\n                         \
    \ (let ((digit8 (modulo digit 7)))\n                            (let ((digit9\
    \ (modulo digit 8)))\n                              (let ((digit10 (modulo digit\
    \ 9)))\n                                (let ((digit11 (modulo digit 10)))\n \
    \                                 (let ((digit12 (modulo digit 11)))\n       \
    \                             (let ((digit13 (modulo digit 12)))\n           \
    \                           (let ((digit14 (modulo digit 13)))\n             \
    \                           (let ((digit15 (modulo digit 14)))\n             \
    \                             (let ((digit16 (modulo digit 15)))\n           \
    \                                 (let ((digit17 (modulo digit 16)))\n       \
    \                                       (let ((digit18 (modulo digit 17)))\n \
    \                                               (let ((digit19 (modulo digit 18)))\n\
    \                                                  (let ((digit20 (modulo digit\
    \ 19)))\n                                                    (let ((digit21 (modulo\
    \ digit 20)))\n                                                      (let ((digit22\
    \ (modulo digit 21)))\n                                                      \
    \  (let ((digit23 (modulo digit 22)))\n                                      \
    \                    (let ((digit24 (modulo digit 23)))\n                    \
    \                                        (let ((digit25 (modulo digit 24)))\n\
    \                                                              (let ((digit26\
    \ (modulo digit 25)))\n                                                      \
    \          (let ((digit27 (modulo digit 26)))\n                              \
    \                                    (let ((digit28 (modulo digit 27)))\n    \
    \                                                                (let ((digit29\
    \ (modulo digit 28)))\n                                                      \
    \                (let ((digit30 (modulo digit 29)))\n                        \
    \                                      ", "  (let ((result (string)))\n    (let\
    \ ((decimal-value decimal))\n      (while (< decimal-value 0)\n        (let ((digit\
    \ decimal-value (- 1 decimal-value)))\n          (string-append (string-append\
    \ \"0\" digit) result))\n        (string-append \"1\" result))\n      (string-append\
    \ \"db\" result)))\n)\n\n;; You will be given a number in binary form and your\
    \ task is to convert it to\n;; decimal form. The function should return a string,\
    \ with each character representing a decimal\n;; number. Each character in the\
    \ string will be '0' or '1'.\n;; There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n;; The extra characters are\
    \ there to help with the format.\n;; Examples:\n;; >>> (binary_to_decimal \"11111111\"\
    )\n;; \"15\"\n;; >>> (binary_to_decimal \"100000\")\n;; \"32\"", "  (let ((result\
    \ (make-string decimal/width-of-decimal-base 2)))\n    (let ((i 0))\n      (while\
    \ (< decimal i)\n        (let ((digit decimal/1))\n          (set/char result\
    \ i '1)\n          (set/char result i '0)\n          (set/char result i '1)\n\
    \          (set/char result i '0)\n          (set/char result i '1)\n        \
    \  (set/char result i '0)\n          (set/char result i '1)\n          (set/char\
    \ result i '0)\n          (set/char result i '1)\n          (set/char result i\
    \ '0)\n          (set/char result i '1)\n          (set/char result i '0)\n  \
    \        (set/char result i '1)\n          (set/char result i '0)\n          (set/char\
    \ result i '1)\n          (set/char result i '0)\n          (set/char result i\
    \ '1)\n          (set/char result i '0)\n          (set/char result i '1)\n  \
    \        (set/char result i '0)\n          (set/char result i '1)\n          (set/char\
    \ result i '0)\n          (set/char result i '1)\n          (set/char result i\
    \ '0)\n          (set/char result i '1)\n          (set/char result i '0)\n  \
    \        (set/char result i '1)\n          (set/char result i '0)\n          (set/char\
    \ result i '1)\n          (set/char result i '0)\n          (set/char result i\
    \ '1)\n          (set/char result i '0)\n          (set/char result i '1)\n  \
    \        (set/char result i '0)\n          (set/char result i '1)\n          (set/char\
    \ result i '0)\n          (set/char result i '1)\n          (set/char result i\
    \ '0)\n          (set/char result i '1)\n          (set/char result i '0)\n  \
    \        (set/char result i '1)\n          (set/char result i '0)\n          (",
  "  (let ((result (string)))\n    (let ((digit decimal))\n      (while (< digit 2)\n\
    \        (let ((next_digit (remainder digit 2)))\n          (string-append (string-append\
    \ \"0\" (modulo digit 2)) result)\n          (string-append \"1\" next_digit)\n\
    \          (setq digit (remainder digit 2))\n        )\n        (string-append\
    \ \"1\" digit)\n      )\n      (string-append \"0\" digit)\n      (string-append\
    \ \"1\" digit)\n      (string-append \"0\" digit)\n      (string-append \"1\"\
    \ digit)\n      (string-append \"0\" digit)\n      (string-append \"1\" digit)\n\
    \      (string-append \"0\" digit)\n      (string-append \"1\" digit)\n      (string-append\
    \ \"0\" digit)\n      (string-append \"1\" digit)\n      (string-append \"0\"\
    \ digit)\n      (string-append \"1\" digit)\n      (string-append \"0\" digit)\n\
    \      (string-append \"1\" digit)\n      (string-append \"0\" digit)\n      (string-append\
    \ \"1\" digit)\n      (string-append \"0\" digit)\n      (string-append \"1\"\
    \ digit)\n      (string-append \"0\" digit)\n      (string-append \"1\" digit)\n\
    \      (string-append \"0\" digit)\n      (string-append \"1\" digit)\n      (string-append\
    \ \"0\" digit)\n      (string-append \"1\" digit)\n      (string-append \"0\"\
    \ digit)\n      (string-append \"1\" digit)\n      (string-append \"0\" digit)\n\
    \      (string-append \"1\" digit)\n      (string-append \"0\" digit)\n      (string-append\
    \ \"1\" digit)\n      (string-append \"0\" digit)\n      (string-append \"1\"\
    \ digit)\n      (string-append \"0\" digit)\n      (string-append \"1\" digit)\n\
    \      (string-append \"0\" digit)\n      (string-append \"1\" digit)\n      (string-append\
    \ \"0\" digit)\n      ", "  (let ((result \"\"))\n    (let ((decimal-number decimal))\n\
    \      (while (< decimal-number 0)\n        (let ((digit decimal-number (- decimal-number\
    \ 1)))\n          (let ((bit-value (modulo 2 (car decimal-number))))\n       \
    \     (let ((bit-char (if bit-value 0 #\\0 #\\1)))\n              (result (concat\
    \ bit-char result))))))\n      (result (concat \"db\" result))))\n\n;; >>> (decimal_to_binary\
    \ 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n;; >>>\
    \ (decimal_to_binary -1)\n;; \"db
  "  (let ((result (string)))\n    (let ((digit decimal))\n      (while (< digit 2)\n\
    \        (let ((next_digit (remainder digit 2)))\n          (string-append (if\
    \ (< next_digit 1) \"0\" \"1\") result))\n        (setq digit (quotient digit\
    \ 2)))))\n  (string result))\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\
    \n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n;; >>> (decimal_to_binary\
    \ -1)\n;; \"db
  "  (let ((result \"\"))\n    (let ((temp (string-append \"db\" decimal)))\n    \
    \  (for-each (lambda (x) (string-append result (string->number->string x))) temp))\n\
    \    (string-append \"db\" result)))\n\n;; You will be given a string in binary\
    \ format and your task is to convert it to decimal\n;; format. The function should\
    \ return a number.\n;; Examples:\n;; >>> (binary_to_decimal \"1101\")\n;; 15\n\
    ;; >>> (binary_to_decimal \"100000\")\n;; 32", "  (let ((result \"\"))\n    (let\
    \ ((decimal-value decimal))\n      (while (< decimal-value 0)\n        (let ((digit\
    \ decimal-value - 1))\n          (let ((bit 0))\n            (set! bit 1)\n  \
    \          (set! result (concat result (string-append \"1\" bit))))\n        \
    \  (decimal-value - 1))))\n    (let ((extra-char 0))\n      (if (>= decimal-value\
    \ 10)\n        (set! extra-char 1)\n        (set! extra-char 2))\n      (let ((extra-char-value\
    \ extra-char))\n        (let ((extra-char-value-2 extra-char-value - 1))\n   \
    \       (let ((extra-char-value-3 extra-char-value-2 - 1))\n            (let ((extra-char-value-4\
    \ extra-char-value-3 - 1))\n              (let ((extra-char-value-5 extra-char-value-4\
    \ - 1))\n                (let ((extra-char-value-6 extra-char-value-5 - 1))\n\
    \                  (let ((extra-char-value-7 extra-char-value-6 - 1))\n      \
    \              (let ((extra-char-value-8 extra-char-value-7 - 1))\n          \
    \            (let ((extra-char-value-9 extra-char-value-8 - 1))\n            \
    \            (let ((extra-char-value-10 extra-char-value-9 - 1))\n           \
    \               (let ((extra-char-value-11 extra-char-value-10 - 1))\n       \
    \                     (let ((extra-char-value-12 extra-char-value-11 - 1))\n \
    \                             (let ((extra-char-value-13 extra-char-value-12 -\
    \ 1))\n                                (let ((extra-char-value-14 extra-char-value-13\
    \ - 1))\n                                  (let ((extra-char-value-15 extra-char-value-14\
    \ - 1))\n                                    (let ((extra-char-value-16 extra-char-value-15\
    \ - 1))\n                                      (let ((extra-char-value-17 extra-char-value-16\
    \ - 1))\n                                        (let ((extra-char-value-18 extra",
  "  (let ((result \"\"))\n    (let ((temp (string-append \"db\" decimal)))\n    \
    \  (let ((i 0))\n        (while (< i 10)\n          (let ((digit (string-char\
    \ temp i)))\n            (setq result (string-append result digit)))\n       \
    \   (setq i (+ 1 i)))\n        (setq i 0))\n      (setq result (string-append\
    \ \"db\" result)))\n    result))\n\n;; You will be given a string in binary format\
    \ and your task is to convert it to decimal\n;; format. The function should return\
    \ a number.\n;; Examples:\n;; >>> (binary_to_decimal \"db1111db\")\n;; 15\n;;\
    \ >>> (binary_to_decimal \"db100000db\")\n;; 32", "  (let ((result (string)))\n\
    \    (let ((digit decimal))\n      (while (< digit 2)\n        (let ((next_digit\
    \ (remainder digit 2)))\n          (string-append (string-append \"0\" (modulo\
    \ digit 2)) result)\n          (string-append \"1\" next_digit)\n          (setq\
    \ digit (remainder digit 2)))\n        (string-append \"1\" digit))\n      (string-append\
    \ \"0\" digit)\n      (string-append \"1\" (modulo decimal 2))\n      (string-append\
    \ \"0\" (modulo decimal 2))\n      (string-append \"1\" (modulo decimal 2))\n\
    \      (string-append \"0\" (modulo decimal 2))\n      (string-append \"1\" (modulo\
    \ decimal 2))\n      (string-append \"0\" (modulo decimal 2))\n      (string-append\
    \ \"1\" (modulo decimal 2))\n      (string-append \"0\" (modulo decimal 2))\n\
    \      (string-append \"1\" (modulo decimal 2))\n      (string-append \"0\" (modulo\
    \ decimal 2))\n      (string-append \"1\" (modulo decimal 2))\n      (string-append\
    \ \"0\" (modulo decimal 2))\n      (string-append \"1\" (modulo decimal 2))\n\
    \      (string-append \"0\" (modulo decimal 2))\n      (string-append \"1\" (modulo\
    \ decimal 2))\n      (string-append \"0\" (modulo decimal 2))\n      (string-append\
    \ \"1\" (modulo decimal 2))\n      (string-append \"0\" (modulo decimal 2))\n\
    \      (string-append \"1\" (modulo decimal 2))\n      (string-append \"0\" (modulo\
    \ decimal 2))\n      (string-append \"1\" (modulo decimal 2))\n      (string-append\
    \ \"0\" (modulo decimal 2))\n      (string-append \"1\" (modulo decimal 2))\n\
    \      (string-append \"0\" (modulo decimal 2))\n      (string-append \"1\" (modulo\
    \ decimal 2))\n      (string-append \"0\" (modulo decimal 2))\n      (string-append\
    \ \"1\" (modulo decimal 2", "  (let ((result (make-string decimal/width 1)))\n\
    \    (let ((i 0))\n      (while (< decimal i)\n        (let ((digit decimal/1))\n\
    \          (set-char! result i '1)\n          (set-char! result i '0)\n      \
    \    (set-char! result i '1)\n          (set-char! result i '0)\n          (set-char!\
    \ result i '1)\n          (set-char! result i '0)\n          (set-char! result\
    \ i '1)\n          (set-char! result i '0)\n          (set-char! result i '1)\n\
    \          (set-char! result i '0)\n          (set-char! result i '1)\n      \
    \    (set-char! result i '0)\n          (set-char! result i '1)\n          (set-char!\
    \ result i '0)\n          (set-char! result i '1)\n          (set-char! result\
    \ i '0)\n          (set-char! result i '1)\n          (set-char! result i '0)\n\
    \          (set-char! result i '1)\n          (set-char! result i '0)\n      \
    \    (set-char! result i '1)\n          (set-char! result i '0)\n          (set-char!\
    \ result i '1)\n          (set-char! result i '0)\n          (set-char! result\
    \ i '1)\n          (set-char! result i '0)\n          (set-char! result i '1)\n\
    \          (set-char! result i '0)\n          (set-char! result i '1)\n      \
    \    (set-char! result i '0)\n          (set-char! result i '1)\n          (set-char!\
    \ result i '0)\n          (set-char! result i '1)\n          (set-char! result\
    \ i '0)\n          (set-char! result i '1)\n          (set-char! result i '0)\n\
    \          (set-char! result i '1)\n          (set-char! result i '0)\n      \
    \    (set-char! result i '1)\n          (set", "  (let ((result (string)))\n \
    \   (let ((temp (string)))\n      (let ((i 0))\n        (while (< i decimal)\n\
    \          (let ((digit (string-ci (string-upcase (string-substring (string-downcase\
    \ decimal) i i))))\n                (digit-value (string-ci digit)))\n       \
    \     (setq result (string-concat (string-append result digit-value) temp)\n \
    \             (setq temp (string-append temp \"1\"))\n              (setq i (string-ci\
    \ (string-add (string-substring decimal i i)))))))\n        (setq result (string-concat\
    \ result \"0\")\n          (setq temp (string-append temp \"0\")))))\n    (string-append\
    \ \"db\" result)))\n\n;; You will be given a string representing a binary number\
    \ and your task is to convert it to\n;; decimal form. The function should return\
    \ a number.\n;; Examples:\n;; >>> (binary_to_decimal \"db1111db\")\n;; 15\n;;\
    \ >>> (binary_to_decimal \"db100000db\")\n;; 32", "  (let ((result (make-string\
    \ decimal/width)))\n    (let ((i 0))\n      (while (< decimal i)\n        (let\
    \ ((digit decimal/1))\n          (set/char result i '1))\n        (setq i (+ i\
    \ 1)))\n      (set/char result i '0))\n    (concat \"db\" result \"db\"))\n  )\n\
    )\n\n;; You will be given a number in binary form and your task is to convert\
    \ it to\n;; decimal form. The function should return a string, with each character\
    \ representing a decimal\n;; number. Each character in the string will be '0'\
    \ or '1'.\n;; There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n;; The extra characters are there to help with\
    \ the format.\n;; Examples:\n;; >>> (binary_to_decimal \"11111111\")\n;; \"15\"\
    \n;; >>> (binary_to_decimal \"100000\")\n;; \"32\"", "  (let ((result (make-string\
    \ decimal 2)))\n    (let ((i 0))\n      (while (< decimal i)\n        (let ((digit\
    \ decimal/1))\n          (set-char! result i '1)\n          (set-char! result\
    \ i '0)\n          (set-char! result i '0)\n          (set-char! result i '1)\n\
    \          (set-char! result i '0)\n          (set-char! result i '0)\n      \
    \    (set-char! result i '1)\n          (set-char! result i '0)\n          (set-char!\
    \ result i '0)\n          (set-char! result i '1)\n          (set-char! result\
    \ i '0)\n          (set-char! result i '0)\n          (set-char! result i '1)\n\
    \          (set-char! result i '0)\n          (set-char! result i '0)\n      \
    \    (set-char! result i '1)\n          (set-char! result i '0)\n          (set-char!\
    \ result i '0)\n          (set-char! result i '1)\n          (set-char! result\
    \ i '0)\n          (set-char! result i '0)\n          (set-char! result i '1)\n\
    \          (set-char! result i '0)\n          (set-char! result i '0)\n      \
    \    (set-char! result i '1)\n          (set-char! result i '0)\n          (set-char!\
    \ result i '0)\n          (set-char! result i '1)\n          (set-char! result\
    \ i '0)\n          (set-char! result i '0)\n          (set-char! result i '1)\n\
    \          (set-char! result i '0)\n          (set-char! result i '0)\n      \
    \    (set-char! result i '1)\n          (set-char! result i '0)\n          (set-char!\
    \ result i '0)\n          (set-char! result i '1)\n          (set-char! result\
    \ i '0)\n          (set-char! result i '0)\n          (set-char", "  (let ((result\
    \ (string)))\n    (let ((temp (string)))\n      (let ((i 0))\n        (while (<\
    \ i decimal)\n          (let ((digit (string-char result i)))\n            (if\
    \ (string-char temp i)\n              (let ((temp (string-concat \"1\" temp)))\n\
    \                (let ((i (1+ i)))\n                  (setq result (string-concat\
    \ \"0\" result))))\n              (let ((i (1+ i)))\n                (setq result\
    \ (string-concat \"0\" result))))\n          (setq i (1+ i)))\n        (setq temp\
    \ (string-concat \"1\" temp))))\n    (string-append \"db\" result)))\n\n;; You\
    \ will be given a number in binary form and your task is to convert it to\n;;\
    \ decimal form. The function should return a string, with each character representing\
    \ a decimal\n;; number. Each character in the string will be '0' or '1'.\n;; There\
    \ will be an extra couple of characters 'db' at the beginning and at the end of\
    \ the string.\n;; The extra characters are there to help with the format.\n;;\
    \ Examples:\n;; >>> (binary_to_decimal \"11111111\")\n;; \"15\"\n;; >>> (binary_to_decimal\
    \ \"100000\")\n;; \"32\"", "  (let ((result (string)))\n    (let ((digit decimal))\n\
    \      (while (< digit 2)\n        (let ((next_digit (remainder digit 2)))\n \
    \         (string-append (string-append \"0\" (modulo digit 2)) next_digit)\n\
    \          (string-append \"0\" (modulo digit 2))\n          (string-append \"\
    0\" (modulo digit 2))\n          (string-append \"0\" (modulo digit 2))\n    \
    \      (string-append \"0\" (modulo digit 2))\n          (string-append \"0\"\
    \ (modulo digit 2))\n          (string-append \"0\" (modulo digit 2))\n      \
    \    (string-append \"0\" (modulo digit 2))\n          (string-append \"0\" (modulo\
    \ digit 2))\n          (string-append \"0\" (modulo digit 2))\n          (string-append\
    \ \"0\" (modulo digit 2))\n          (string-append \"0\" (modulo digit 2))\n\
    \          (string-append \"0\" (modulo digit 2))\n          (string-append \"\
    0\" (modulo digit 2))\n          (string-append \"0\" (modulo digit 2))\n    \
    \      (string-append \"0\" (modulo digit 2))\n          (string-append \"0\"\
    \ (modulo digit 2))\n          (string-append \"0\" (modulo digit 2))\n      \
    \    (string-append \"0\" (modulo digit 2))\n          (string-append \"0\" (modulo\
    \ digit 2))\n          (string-append \"0\" (modulo digit 2))\n          (string-append\
    \ \"0\" (modulo digit 2))\n          (string-append \"0\" (modulo digit 2))\n\
    \          (string-append \"0\" (modulo digit 2))\n          (string-append \"\
    0\" (modulo digit 2))\n          (string-append \"0\" (modulo digit 2))\n    \
    \      (string-append \"0\" (modulo digit 2))\n          (string-append \"0\"\
    \ (modulo digit 2))\n          (string-append \"0\" (modulo digit 2))\n      \
    \    (string-append \"0\" (modulo digit 2))\n          (string-append \"0\" (modulo\
    \ digit 2))", "  (let ((result (string)))\n    (let ((digit decimal))\n      (while\
    \ (< digit 2)\n        (let ((next_digit (remainder digit 2)))\n          (string-append\
    \ (if (< next_digit 1) \"0\" \"1\") result)\n          (setq digit (remainder\
    \ digit 2))\n        )\n        (string-append \"1\" result)\n      )\n      (string-append\
    \ \"0\" result)\n      (string-append \"1\" result)\n    )\n    (string result)\n\
    \  )\n)\n\n;; You will be given a string in binary format and your task is to\
    \ convert it to decimal\n;; format. The function should return a number.\n;; Examples:\n\
    ;; >>> (binary_to_decimal \"1101\")\n;; 15\n;; >>> (binary_to_decimal \"100000\"\
    )\n;; 32", "  (let ((result (string)))\n    (let ((n (decimal)))\n      (while\
    \ (< n 2)\n        (let ((digit (modulo n 2)))\n          (let ((bit (if (< digit\
    \ 1) #t #f)))\n            (string-append (string-append bit result) \"0\"))\n\
    \          (setq n (decimal/= n 2)))\n        (string-append \"1\" result))\n\
    \      (string-append \"0\" result)))\n)\n\n;; You will be given a string in binary\
    \ format and your task is to convert it to decimal\n;; form. The function should\
    \ return a number.\n;; Examples:\n;; >>> (binary_to_decimal \"1101\")\n;; 15\n\
    ;; >>> (binary_to_decimal \"100000\")\n;; 32", "  (let ((result (string)))\n \
    \   (let ((i 0))\n      (while (< decimal 2)\n        (let ((digit decimal/1))\n\
    \          (set! result (concat \"1\" result))\n          (set! i (+ i 1))\n \
    \         (decimal/= digit 1))\n        (set! result (concat \"0\" result))\n\
    \        (set! i (+ i 1))))\n    (concat \"db\" result)))\n\n;; You will be given\
    \ a string in binary format and your task is to convert it to decimal.\n;; The\
    \ function should return a number.\n;; Examples:\n;; >>> (binary_to_decimal \"\
    11111111\")\n;; 15\n;; >>> (binary_to_decimal \"100000\")\n;; 32", "  (let ((result\
    \ \"\"))\n    (let ((digit decimal))\n      (let ((divisor 2))\n        (while\
    \ (< digit divisor)\n          (let ((remainder digit))\n            (setq result\
    \ (concat result (string-append #\\0 #\\1))))\n          (setq digit (quotient\
    \ digit divisor))\n          (setq divisor 2)))\n        (setq result (concat\
    \ result (string-append #\\0 #\\1))))\n    (setq result (concat \"db\" result)))\n\
    \  result)\n\n;; You will be given a string representing a binary number and your\
    \ task is to convert it\n;; to decimal format. The function should return a number.\n\
    ;; Examples:\n;; >>> (binary_to_decimal \"1111\")\n;; 15\n;; >>> (binary_to_decimal\
    \ \"100000\")\n;; 32", "  (let ((result \"\"))\n    (let ((digit decimal))\n \
    \     (let ((remainder (modulo digit 2)))\n        (if (zero? remainder)\n   \
    \       (append result \"0\")\n          (append result \"1\"))))\n    (append\
    \ result \"db\")\n    (append result (string-append (decimal_to_binary (remainder\
    \ digit)) \"0\"))\n    (append result \"db\"))\n  )\n)\n\n;; You will be given\
    \ a string in binary format and your task is to convert it to decimal\n;; format.\
    \ The function should return a number.\n;; Examples:\n;; >>> (binary_to_decimal\
    \ \"11111111\")\n;; 15\n;; >>> (binary_to_decimal \"100000\")\n;; 32", "  (let\
    \ ((result (string)))\n    (let ((temp (string)))\n      (let ((i 0))\n      \
    \  (while (< i decimal)\n          (let ((digit (string-char result i)))\n   \
    \         (if (string-char temp i)\n              (string-insert result \"1\"\
    )\n              (string-insert result \"0\"))\n            (setq i (+ i 1))\n\
    \            (setq temp (string-append temp digit))))\n        (setq result (string-append\
    \ \"db\" result))))\n    result))\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\
    \n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n;; >>> (decimal_to_binary\
    \ -1)\n;; \"db
  "  (let ((result (string)))\n    (let ((n (string-append \"db\" decimal)))\n   \
    \   (let ((i 0))\n        (while (< i 10)\n          (let ((digit (string-char\
    \ n i)))\n            (setf result (string-append (string-append \"0\" digit)\
    \ result))))\n        (setf result (string-append \"1\" result))))\n    result))\n\
    \n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n\
    ;; \"db100000db\"\n;; >>> (decimal_to_binary -1)\n;; \"db
  "  (let ((result \"\"))\n    (let ((digit decimal))\n      (let ((remainder 0))\n\
    \        (while (< digit 2)\n          (let ((quotient (divide digit 2)))\n  \
    \          (let ((rem (remainder)))\n              (let ((temp (quotient)))\n\
    \                (if (>= remainder 0)\n                  (let ((temp (remainder)))\n\
    \                    (if (>= remainder 0)\n                      (let ((temp (remainder)))\n\
    \                        (if (>= remainder 0)\n                          (let\
    \ ((temp (remainder)))\n                            (if (>= remainder 0)\n   \
    \                           (let ((temp (remainder)))\n                      \
    \          (if (>= remainder 0)\n                                  (let ((temp\
    \ (remainder)))\n                                    (if (>= remainder 0)\n  \
    \                                    (let ((temp (remainder)))\n             \
    \                           (if (>= remainder 0)\n                           \
    \               (let ((temp (remainder)))\n                                  \
    \          (if (>= remainder 0)\n                                            \
    \  (let ((temp (remainder)))\n                                               \
    \ (if (>= remainder 0)\n                                                  (let\
    \ ((temp (remainder)))\n                                                    (if\
    \ (>= remainder 0)\n                                                      (let\
    \ ((temp (remainder)))\n                                                     \
    \   (if (>= remainder 0)\n                                                   \
    \       (let ((temp (remainder)))\n                                          \
    \                  (if (>= remainder 0)\n                                    \
    \                          (let ((temp (remainder)))\n                       \
    \                                         (if (>= remainder 0)\n             \
    \                                                     (let ((temp (remainder)))\n\
    \                                                                    (if (>= remainder\
    \ 0)\n                                                                      (let\
    \ ((temp (remainder)))\n                                                     \
    \                   (if (>= remainder 0)\n                                   \
    \                                       (let ((temp (remainder)))\n          \
    \                                                                  (if (>= remainder\
    \ 0)\n                                                                       \
    \       (let ((temp (remainder)))\n                                          \
    \                                      (if (>= remainder 0)\n                \
    \                                                                  (let ((temp\
    \ (remainder)))\n                                                            \
    \                        (if (>", "  (let ((result (make-string decimal/width\
    \ + 2)))\n    (let ((i 0))\n      (while (< i decimal/width)\n        (let ((digit\
    \ (modulo decimal i 2)))\n          (set-char! result i digit)\n          (set-char!\
    \ result (+ 1 i))\n          (set-char! result '0)\n          (set-char! result\
    \ '1)\n          (set-char! result '0)\n          (set-char! result '1)\n    \
    \      (set-char! result '0)\n          (set-char! result '1)\n          (set-char!\
    \ result '0)\n          (set-char! result '1)\n          (set-char! result '0)\n\
    \          (set-char! result '1)\n          (set-char! result '0)\n          (set-char!\
    \ result '1)\n          (set-char! result '0)\n          (set-char! result '1)\n\
    \          (set-char! result '0)\n          (set-char! result '1)\n          (set-char!\
    \ result '0)\n          (set-char! result '1)\n          (set-char! result '0)\n\
    \          (set-char! result '1)\n          (set-char! result '0)\n          (set-char!\
    \ result '1)\n          (set-char! result '0)\n          (set-char! result '1)\n\
    \          (set-char! result '0)\n          (set-char! result '1)\n          (set-char!\
    \ result '0)\n          (set-char! result '1)\n          (set-char! result '0)\n\
    \          (set-char! result '1)\n          (set-char! result '0)\n          (set-char!\
    \ result '1)\n          (set-char! result '0)\n          (set-char! result '1)\n\
    \          (set-char! result '0)\n          (set-char! result '1)\n          (set-char!\
    \ result '0)\n          (set-char! result '1)\n          (set-char! result '0)\n\
    \          (set-char! result '1)\n          (", "  (let ((result \"\"))\n    (let\
    \ ((digit decimal))\n      (let ((carry 0))\n        (while (< digit 2)\n    \
    \      (let ((next_digit (remainder digit 2)))\n            (set! carry (+ next_digit\
    \ carry))\n            (set! digit (remainder digit 2))\n            (set! digit\
    \ (remainder digit 2))\n            (set! digit (remainder digit 2))\n       \
    \     (set! digit (remainder digit 2))\n            (set! digit (remainder digit\
    \ 2))\n            (set! digit (remainder digit 2))\n            (set! digit (remainder\
    \ digit 2))\n            (set! digit (remainder digit 2))\n            (set! digit\
    \ (remainder digit 2))\n            (set! digit (remainder digit 2))\n       \
    \     (set! digit (remainder digit 2))\n            (set! digit (remainder digit\
    \ 2))\n            (set! digit (remainder digit 2))\n            (set! digit (remainder\
    \ digit 2))\n            (set! digit (remainder digit 2))\n            (set! digit\
    \ (remainder digit 2))\n            (set! digit (remainder digit 2))\n       \
    \     (set! digit (remainder digit 2))\n            (set! digit (remainder digit\
    \ 2))\n            (set! digit (remainder digit 2))\n            (set! digit (remainder\
    \ digit 2))\n            (set! digit (remainder digit 2))\n            (set! digit\
    \ (remainder digit 2))\n            (set! digit (remainder digit 2))\n       \
    \     (set! digit (remainder digit 2))\n            (set! digit (remainder digit\
    \ 2))\n            (set! digit (remainder digit 2))\n            (set! digit (remainder\
    \ digit 2))\n            (set! digit (remainder digit 2))\n            (set! digit\
    \ (remainder digit 2))\n            (set! digit (remainder digit 2))\n       \
    \     (set! digit (remainder digit 2))\n            (set! digit (remainder digit\
    \ 2))\n            (set! digit (remainder digit 2))\n            (set! digit (remainder\
    \ digit 2", "  (let ((result \"\"))\n    (let ((temp (string-append \"db\" decimal)))\n\
    \      (let ((i 0))\n        (while (< i 10)\n          (let ((digit (string-char\
    \ temp i)))\n            (setq result (string-append (string-append \"0\" digit)\
    \ result))\n            (setq i (1+ i)))\n          )\n        )\n      )\n  \
    \  )\n  )\n)\n\n;; You will be given a string in binary format and your task is\
    \ to convert it to decimal.\n;; The string will not contain any extra characters.\n\
    ;; Examples:\n;; >>> (binary_to_decimal \"db100000db\")\n;; \"15\"", "  (let ((result\
    \ (make-string decimal/width 2)))\n    (let ((i 0))\n      (while (< decimal i)\n\
    \        (set! result (concat \"1\" result))\n        (set! i (+ 1 i)))))\n  result)\n\
    \n;; You will be given a number in binary form and your task is to convert it\
    \ to\n;; decimal form. The function should return a string, with each character\
    \ representing a decimal\n;; number. Each character in the string will be '0'\
    \ or '1'.\n;; There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n;; The extra characters are there to help with\
    \ the format.\n;; Examples:\n;; >>> (binary_to_decimal \"11111111\")\n;; \"15\"\
    \n;; >>> (binary_to_decimal \"100000\")\n;; \"32\"", "  (let ((result (make-string\
    \ decimal/width 1)))\n    (let ((i 0))\n      (while (< i decimal/width)\n   \
    \     (let ((digit (modulo decimal/width i)))\n          (set-char! result i '1))\n\
    \        (set-char! result i '0))\n        (set-char! result i '1))\n      (append\
    \ result \"db\"))\n    result)\n)\n\n;; You will be given a number in binary form\
    \ and your task is to convert it to\n;; decimal form. The function should return\
    \ a string, with each character representing a decimal\n;; number. Each character\
    \ in the string will be '0' or '1'.\n;; There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n;; The extra characters\
    \ are there to help with the format.\n;; Examples:\n;; >>> (binary_to_decimal\
    \ \"db1111db\")\n;; \"15\"\n;; >>> (binary_to_decimal
  "  (let ((result (string)))\n    (let ((temp (string)))\n      (let ((i 0))\n  \
    \      (while (< i decimal)\n          (let ((digit (modulo decimal i)))\n   \
    \         (let ((digit_value (modulo decimal digit)))\n              (let ((digit_value_string\
    \ (string-append \"1\" digit_value)))\n                (string-set! result (string-append\
    \ result digit_value_string))))\n            (setq i (add1 i))))\n        (string-set!\
    \ result (string-append \"0\" temp))))))\n\n;; >>> (decimal_to_binary 15)\n;;\
    \ \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n;; >>> (decimal_to_binary\
    \ -1)\n;; \"db
  "  (let ((result \"\"))\n    (let ((divisor (decimal)))\n      (while (not (zero?\
    \ divisor)))\n        (let ((remainder (modulo decimal divisor)))\n          (if\
    \ (zero? remainder)\n            (append result \"0\")\n            (append result\
    \ \"1\"))\n          (decimal divisor))\n        (append result \"1\"))\n    \
    \  (append result \"0\"))\n    (append result \"db\"))\n  (decimal))\n\n;; You\
    \ will be given a string in binary format and your task is to convert it to decimal.\n\
    ;; The function should return a number.\n;; Examples:\n;; >>> (binary_to_decimal\
    \ \"db1111db\")\n;; 15\n;; >>> (binary_to_decimal \"100000db\")\n;; 32", "  (let\
    \ ((result \"\"))\n    (let ((temp (string-append \"db\" decimal)))\n      (for-each\
    \ (lambda (x) (string-append result (string->char-string x))) temp))\n    (string-append\
    \ \"db\" result)))\n\n;; You will be given a string in binary format and your\
    \ task is to convert it to decimal.\n;; The function should return a number.\n\
    ;; Examples:\n;; >>> (binary_to_decimal \"11111111\")\n;; 15\n;; >>> (binary_to_decimal\
    \ \"100000\")\n;; 32", "  (let ((result (string)))\n    (let ((digit decimal))\n\
    \      (while (< digit 2)\n        (let ((next_digit (remainder digit 2)))\n \
    \         (string-append (if (< digit 2) \"0\" \"1\") result next_digit))\n  \
    \      (setq digit (remainder digit 2))\n      )\n      (string-append \"0\" result)\n\
    \    )\n    (string-append \"db\" result)\n  )\n)\n\n;; You will be given a string\
    \ in binary format and your task is to convert it to decimal\n;; format. The function\
    \ should return a number.\n;; Examples:\n;; >>> (binary_to_decimal \"111111\"\
    )\n;; 15\n;; >>> (binary_to_decimal \"100000\")\n;; 32", "  (let ((result \"\"\
    ))\n    (let ((temp (string-append \"db\" decimal)))\n      (for-each (lambda\
    \ (x) (string-append result (string->char x))) temp))\n    (string-append \"db\"\
    \ result)))\n\n;; You will be given a number in binary form and your task is to\
    \ convert it to\n;; decimal form. The function should return a string, with each\
    \ character representing a decimal\n;; number. Each character in the string will\
    \ be '0' or '1'.\n;; There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n;; The extra characters are there to help with\
    \ the format.\n;; Examples:\n;; >>> (binary_to_decimal \"11111111\")\n;; \"15\"\
    \n;; >>> (binary_to_decimal \"100000\")\n;; \"32\"", "  (let ((result (string)))\n\
    \    (let ((n (decimal)))\n      (while (< n 2)\n        (let ((digit (modulo\
    \ n 2)))\n          (string-append (if digit 1 #b1 #b0) result)\n          (setq\
    \ n (quotient n 2)))\n        (setq n (decimal)))\n      (string-append \"db\"\
    \ result)))\n)\n\n;; You will be given a string in binary format and your task\
    \ is to convert it to decimal\n;; format. The function should return a number.\n\
    ;; Examples:\n;; >>> (binary_to_decimal \"111111\")\n;; 15\n;; >>> (binary_to_decimal\
    \ \"100000\")\n;; 32", "  (let ((result \"\"))\n    (let ((digit decimal))\n \
    \     (let ((divisor 2))\n        (while (< digit 0)\n          (let ((quotient\
    \ digit divisor))\n            (let ((remainder digit (quotient digit divisor)))\n\
    \              (set! digit (- quotient remainder))\n              (set! divisor\
    \ (quotient 2))\n              (set! result (concat result (string-append \"1\"\
    \ remainder))))))\n        (set! result (concat \"0\" result))))\n    (concat\
    \ \"db\" result)))\n\n;; You will be given a string in binary format and your\
    \ task is to convert it to decimal\n;; form. The function should return a number.\n\
    ;; Examples:\n;; >>> (binary_to_decimal \"111111\")\n;; 15\n;; >>> (binary_to_decimal\
    \ \"100000\")\n;; 32", "  (let ((result (string)))\n    (let ((temp (string)))\n\
    \      (let ((i 0))\n        (while (< i decimal)\n          (let ((digit (string-char\
    \ temp i)))\n            (setf result (concat result (string-append \"1\" digit))))\n\
    \          (setf temp (string-append \"0\" temp))\n          (setf i (1+ i))))\n\
    \      (setf result (concat \"db\" result)))\n    result))\n\n;; >>> (decimal_to_binary\
    \ 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n;; >>>\
    \ (decimal_to_binary -1)\n;; \"db
  "  (let ((result (string)))\n    (let ((digit decimal))\n      (while (< digit 2)\n\
    \        (let ((next_digit (remainder digit 2)))\n          (string-append (if\
    \ (< next_digit 1) \"0\" \"1\") result)\n          (setq digit (quotient next_digit\
    \ 2)))\n        (setq digit (quotient digit 2)))\n      (string-append \"1\" result)))\n\
    )\n\n;; You will be given a string in binary format and your task is to convert\
    \ it to decimal\n;; format. The function should return a number.\n;; Examples:\n\
    ;; >>> (binary_to_decimal \"111111\")\n;; 15\n;; >>> (binary_to_decimal \"100000\"\
    )\n;; 32", "  (let ((result \"\"))\n    (let ((digit decimal))\n      (let ((remainder\
    \ (modulo digit 2)))\n        (if (zero? remainder)\n            (append result\
    \ \"1\")\n            (append result \"0\")))\n        (if (zero? digit)\n   \
    \         (append result \"0\"))\n        (append result \"1\")))\n    (append\
    \ result \"db\")\n    (append result result)))\n\n;; You will be given a string\
    \ in binary format and your task is to convert it to decimal.\n;; The function\
    \ should return a number.\n;; Examples:\n;; >>> (binary_to_decimal \"111111\"\
    )\n;; 15\n;; >>> (binary_to_decimal \"100000\")\n;; 32", "  (let ((result \"\"\
    ))\n    (let ((decimal-value decimal))\n      (while (< decimal-value 0)\n   \
    \     (let ((digit decimal-value - 1))\n          (let ((bit-value (modulo 2 decimal-value)))\n\
    \            (let ((bit-value-char (modulo 2 16))\n                   (bit-value-char-char\
    \ (modulo 2 8)))\n              (let ((bit-value-char-char-char (modulo 2 4)))\n\
    \                (let ((bit-value-char-char-char-char (modulo 2 2)))\n       \
    \           (let ((bit-value-char-char-char-char-char (modulo 2 1)))\n       \
    \             (let ((bit-value-char-char-char-char-char-char (modulo 2 0)))\n\
    \                      (let ((bit-value-char-char-char-char-char-char-char (modulo\
    \ 2 0)))\n                        (let ((bit-value-char-char-char-char-char-char-char-char\
    \ (modulo 2 0)))\n                          (let ((bit-value-char-char-char-char-char-char-char-char-char\
    \ (modulo 2 0)))\n                            (let ((bit-value-char-char-char-char-char-char-char-char-char-char\
    \ (modulo 2 0)))\n                              (let ((bit-value-char-char-char-char-char-char-char-char-char-char-char\
    \ (modulo 2 0)))\n                                (let ((bit-value-char-char-char-char-char-char-char-char-char-char-char-char\
    \ (modulo 2 0)))\n                                  (let ((bit-value-char-char-char-char-char-char-char-char-char-char-char-char-char\
    \ (modulo 2 0)))\n                                    (let ((bit-value-char-char-char-char-char-char-char-char-char-char-char-char-char-char\
    \ (modulo 2 0)))\n                                      (let ((bit-value-char-char-char-char-char-char-char-char-char-char-char-char-char-char-char\
    \ (modulo 2 0)))\n", "  (let ((result (string)))\n    (let ((digit decimal))\n\
    \      (while (< digit 2)\n        (let ((next_digit (remainder digit 2)))\n \
    \         (string-append (if (< digit 1) \"0\" (if (< next_digit 1) \"1\" \"0\"\
    )) result))\n        (setq digit (quotient digit 2)))))\n  (string result)))\n\
    \n;; You will be given a string in binary format and your task is to convert it\
    \ to decimal\n;; format. The function should return a number.\n;; Examples:\n\
    ;; >>> (binary_to_decimal \"11111111\")\n;; 15\n;; >>> (binary_to_decimal \"100000\"\
    )\n;; 32", "  (let ((result \"\"))\n    (let ((temp (string-append \"db\" decimal)))\n\
    \      (for-each (lambda (x) (string-append result (string-append \"1\" x))) temp))\n\
    \    (string-append \"db\" result)))\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\
    \n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n;; >>> (decimal_to_binary\
    \ -1)\n;; \"db
  "  (let ((result (string)))\n    (let ((decimal-value (decimal)))\n      (while\
    \ (< decimal-value 1)\n        (let ((digit decimal-value - 1))\n          (let\
    \ ((bit (logior (modulo decimal-value 2) 2)))\n            (string-set! result\
    \ bit)\n            (decimal-value (decimal-value - 1))))\n        (string-set!\
    \ result \"1\"))\n      (string-set! result \"0\")))\n\n;; >>> (decimal_to_binary\
    \ 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n;; >>>\
    \ (decimal_to_binary -1)\n;; \"db
  "  (let ((result \"\"))\n    (let ((temp (string-append \"db\" decimal)))\n    \
    \  (for-each (lambda (x) (string-append result (string-append \"0\" (modulo x\
    \ 2)))) temp))\n    (string-append \"db\" result)))\n\n;; You will be given a\
    \ number in binary form and your task is to convert it to\n;; decimal form. The\
    \ function should return a string, with each character representing a decimal\n\
    ;; number. Each character in the string will be '0' or '1'.\n;; There will be\
    \ an extra couple of characters 'db' at the beginning and at the end of the string.\n\
    ;; The extra characters are there to help with the format.\n;; Examples:\n;; >>>\
    \ (binary_to_decimal \"db1111db\")\n;; \"15\"\n;; >>> (binary_to_decimal \"db100000db\"\
    )\n;; \"32\"", "  (let ((result \"\"))\n    (let ((decimal-value decimal))\n \
    \     (while (< decimal-value 0)\n        (let ((divisor 2))\n          (let ((remainder\
    \ decimal-value))\n            (if (> remainder 0)\n              (let ((quotient\
    \ remainder))\n                (let ((modulo remainder))\n                  (let\
    \ ((character '1))\n                    (setq result (concat result (character)\
    \ quotient)\n                      (setq decimal-value (remainder)))\n       \
    \             (setq decimal-value (remainder)))\n                    (setq decimal-value\
    \ (remainder)))\n                  (setq decimal-value (remainder)))\n       \
    \         (setq decimal-value (remainder)))\n              (setq decimal-value\
    \ (remainder)))\n            (setq decimal-value (remainder)))\n          (setq\
    \ decimal-value (remainder)))\n        (setq decimal-value (remainder)))\n   \
    \   (setq decimal-value (remainder)))\n    (return result)\n  ))\n\n;; You will\
    \ be given a string in binary format and your task is to convert it to decimal\n\
    ;; format. The function should return a number.\n;; Examples:\n;; >>> (binary_to_decimal\
    \ \"11111111\")\n;; 15\n;; >>> (binary_to_decimal \"100000\")\n;; 32", "  (let\
    \ ((result \"\"))\n    (let ((decimal-value decimal))\n      (while (< decimal-value\
    \ 0)\n        (let ((divisor 2))\n          (let ((remainder decimal-value))\n\
    \            (if (> remainder 0)\n              (let ((quotient remainder))\n\
    \                (let ((modulo remainder))\n                  (let ((digit quotient))\n\
    \                    (let ((carry 1))\n                      (if (<= remainder\
    \ 0)\n                        (let ((new-remainder remainder))\n             \
    \             (let ((new-carry 0))\n                            (set! digit (modulo\
    \ (remainder/divisor))))\n                          (set! carry 0))\n        \
    \                (set! digit (modulo (remainder/divisor)))\n                 \
    \       (set! carry 1))\n                      (set! digit (modulo (remainder/divisor)))\n\
    \                      (set! carry 0))\n                    (set! digit (modulo\
    \ (remainder/divisor)))\n                    (set! carry 1))\n               \
    \   (set! digit (modulo (remainder/divisor)))\n                  (set! carry 0))\n\
    \                (set! digit (modulo (remainder/divisor)))\n                (set!\
    \ carry 1))\n              (set! digit (modulo (remainder/divisor)))\n       \
    \       (set! carry 0))\n            (set! digit (modulo (remainder/divisor)))\n\
    \            (set! carry 1))\n          (set! remainder (remainder/divisor)))\n\
    \        (set! decimal-value (decimal-value/2))))\n    (reverse result)))\n\n\
    ;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n\
    ;; \"db100000db\"\n;; >>> (decimal_to_binary -1)\n;; \"db1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
  "  (let ((result (string)))\n    (let ((digit decimal))\n      (while (< digit 2)\n\
    \        (let ((next_digit (remainder digit 2)))\n          (string-append (string-append\
    \ \"1\" next_digit) result)\n          (setq digit (remainder digit 2)))\n   \
    \     (string-append \"0\" digit)\n      )\n      (string-append \"1\" digit)\n\
    \      (string-append \"0\" (remainder decimal 2))\n      (string-append \"1\"\
    \ (remainder decimal 2))\n      (string-append \"0\" (remainder decimal 2))\n\
    \      (string-append \"1\" (remainder decimal 2))\n      (string-append \"0\"\
    \ (remainder decimal 2))\n      (string-append \"1\" (remainder decimal 2))\n\
    \      (string-append \"0\" (remainder decimal 2))\n      (string-append \"1\"\
    \ (remainder decimal 2))\n      (string-append \"0\" (remainder decimal 2))\n\
    \      (string-append \"1\" (remainder decimal 2))\n      (string-append \"0\"\
    \ (remainder decimal 2))\n      (string-append \"1\" (remainder decimal 2))\n\
    \      (string-append \"0\" (remainder decimal 2))\n      (string-append \"1\"\
    \ (remainder decimal 2))\n      (string-append \"0\" (remainder decimal 2))\n\
    \      (string-append \"1\" (remainder decimal 2))\n      (string-append \"0\"\
    \ (remainder decimal 2))\n      (string-append \"1\" (remainder decimal 2))\n\
    \      (string-append \"0\" (remainder decimal 2))\n      (string-append \"1\"\
    \ (remainder decimal 2))\n      (string-append \"0\" (remainder decimal 2))\n\
    \      (string-append \"1\" (remainder decimal 2))\n      (string-append \"0\"\
    \ (remainder decimal 2))\n      (string-append \"1\" (remainder decimal 2))\n\
    \      (string-append \"0\" (remainder decimal 2))\n      (string-append \"1\"\
    \ (remainder decimal 2))", "  (let ((result (string)))\n    (let ((digits (string-split\
    \ \"0123456789\" decimal)))\n      (let ((digits-count (length digits)))\n   \
    \     (for-each (lambda (digit)\n                    (let ((digit-count (length\
    \ digit)))\n                      (let ((digit-value (string-join \"01\" digit)))\n\
    \                        (let ((digit-count-2 (sub1 digit-count)))\n         \
    \                 (let ((digit-count-3 (sub1 digit-count-2)))\n              \
    \              (let ((digit-count-4 (sub1 digit-count-3)))\n                 \
    \             (let ((digit-count-5 (sub1 digit-count-4)))\n                  \
    \              (let ((digit-count-6 (sub1 digit-count-5)))\n                 \
    \                 (let ((digit-count-7 (sub1 digit-count-6)))\n              \
    \                      (let ((digit-count-8 (sub1 digit-count-7)))\n         \
    \                             (let ((digit-count-9 (sub1 digit-count-8)))\n  \
    \                                      (let ((digit-count-10 (sub1 digit-count-9)))\n\
    \                                          (let ((digit-count-11 (sub1 digit-count-10)))\n\
    \                                            (let ((digit-count-12 (sub1 digit-count-11)))\n\
    \                                              (let ((digit-count-13 (sub1 digit-count-12)))\n\
    \                                                (let ((digit-count-14 (sub1 digit-count-13)))\n\
    \                                                  (let ((digit-count-15 (sub1\
    \ digit-count-14)))\n                                                    (let\
    \ ((digit-count-16 (sub1 digit-count-15)))\n                                 \
    \                     (let ((digit-count-17 (sub1 digit-count-16)))\n        \
    \                                                (let ((digit-count-18 (sub1 digit-count-17)))\n\
    \                                                          (let ((digit-count-19\
    \ (sub1 digit-count-18)))\n                                                  \
    \          (let ((digit-count-20 (sub1 digit-count-19)))\n                   \
    \                                           (let ((digit-count-21 (sub", "  (let\
    \ ((result (make-string decimal/width-of-decimal-base 2)))\n    (let ((i 0))\n\
    \      (while (< decimal i)\n        (let ((digit decimal/1))\n          (set-char!\
    \ result i '1)\n          (set-char! result (add 1 i) '0)\n          (set-char!\
    \ result (add 1 i) '1)\n          (set-char! result (add 1 i) '0)\n          (set-char!\
    \ result (add 1 i) '1)\n          (set-char! result (add 1 i) '0)\n          (set-char!\
    \ result (add 1 i) '1)\n          (set-char! result (add 1 i) '0)\n          (set-char!\
    \ result (add 1 i) '1)\n          (set-char! result (add 1 i) '0)\n          (set-char!\
    \ result (add 1 i) '1)\n          (set-char! result (add 1 i) '0)\n          (set-char!\
    \ result (add 1 i) '1)\n          (set-char! result (add 1 i) '0)\n          (set-char!\
    \ result (add 1 i) '1)\n          (set-char! result (add 1 i) '0)\n          (set-char!\
    \ result (add 1 i) '1)\n          (set-char! result (add 1 i) '0)\n          (set-char!\
    \ result (add 1 i) '1)\n          (set-char! result (add 1 i) '0)\n          (set-char!\
    \ result (add 1 i) '1)\n          (set-char! result (add 1 i) '0)\n          (set-char!\
    \ result (add 1 i) '1)\n          (set-char! result (add 1 i) '0)\n          (set-char!\
    \ result (add 1 i) '1)\n          (set-char! result (add 1 i) '0)\n          (set-char!\
    \ result (add 1 i) '1)\n          (set-char! result (add 1 i) '0)\n          (set-char!\
    \ result (add 1 i) '1)\n          (set-", "  (let ((result (make-string decimal/width\
    \ + 2)))\n    (let ((i 0))\n      (while (< i decimal/width)\n        (let ((digit\
    \ (modulo decimal i 2)))\n          (set-char! result i digit)\n          (set-char!\
    \ result (+ 1 i))\n          (set-char! result '0)\n          (set-char! result\
    \ '1)\n          (set-char! result '0)\n          (set-char! result '1)\n    \
    \      (set-char! result '0)\n          (set-char! result '1)\n          (set-char!\
    \ result '0)\n          (set-char! result '1)\n          (set-char! result '0)\n\
    \          (set-char! result '1)\n          (set-char! result '0)\n          (set-char!\
    \ result '1)\n          (set-char! result '0)\n          (set-char! result '1)\n\
    \          (set-char! result '0)\n          (set-char! result '1)\n          (set-char!\
    \ result '0)\n          (set-char! result '1)\n          (set-char! result '0)\n\
    \          (set-char! result '1)\n          (set-char! result '0)\n          (set-char!\
    \ result '1)\n          (set-char! result '0)\n          (set-char! result '1)\n\
    \          (set-char! result '0)\n          (set-char! result '1)\n          (set-char!\
    \ result '0)\n          (set-char! result '1)\n          (set-char! result '0)\n\
    \          (set-char! result '1)\n          (set-char! result '0)\n          (set-char!\
    \ result '1)\n          (set-char! result '0)\n          (set-char! result '1)\n\
    \          (set-char! result '0)\n          (set-char! result '1)\n          (set-char!\
    \ result '0)\n          (set-char! result '1)\n          (set-char! result '0)\n\
    \          (set-char! result '1)\n          (", "  (let ((result (string)))\n\
    \    (let ((digit decimal))\n      (while (< digit 2)\n        (let ((next_digit\
    \ (remainder digit 2)))\n          (string-append (if (< digit 1) \"0\" (if (<\
    \ next_digit 1) \"1\" \"0\")) result))\n        (setq digit (quotient digit 2)))\n\
    \      (string-append \"1\" result))\n    (string-append \"0\" result)))\n\n;;\
    \ You will be given a string in binary format and your task is to convert it to\
    \ decimal\n;; format. The function should return a number.\n;; Examples:\n;; >>>\
    \ (binary_to_decimal \"1111\")\n;; 15\n;; >>> (binary_to_decimal \"100000\")\n\
    ;; 32", "  (let ((result \"\"))\n    (let ((digit decimal))\n      (while (< digit\
    \ 2)\n        (let ((next_digit (remainder digit 2)))\n          (let ((next_digit_char\
    \ (modulo next_digit 2)))\n            (result (concat \"1\" next_digit_char)\
    \ \"0\" result))))\n        (result (concat \"1\" digit_char) \"0\" result))))\n\
    \n;; You will be given a number in binary format and your task is to convert it\
    \ to decimal\n;; format. The function should return a string, with each character\
    \ representing a decimal\n;; number. Each character in the string will be a digit\
    \ from 0 to 9.\n;; There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n;; The extra characters are there to help with\
    \ the format.\n;; Examples:\n;; >>> (binary_to_decimal \"db1111db\")\n;; \"15\"\
    \n;; >>> (binary_to_decimal \"11111101\")\n;; \"9\"", "  (let ((result (make-string\
    \ decimal/width 2)))\n    (let ((i 0))\n      (while (< i decimal/width)\n   \
    \     (let ((digit (modulo decimal/width i)))\n          (set-char! result i '1)\n\
    \          (set-char! result i '0)\n          (set-char! result i '0)\n      \
    \    (set-char! result i '1)\n          (set-char! result i '0)\n          (set-char!\
    \ result i '0)\n          (set-char! result i '1)\n          (set-char! result\
    \ i '0)\n          (set-char! result i '0)\n          (set-char! result i '1)\n\
    \          (set-char! result i '0)\n          (set-char! result i '0)\n      \
    \    (set-char! result i '1)\n          (set-char! result i '0)\n          (set-char!\
    \ result i '0)\n          (set-char! result i '1)\n          (set-char! result\
    \ i '0)\n          (set-char! result i '0)\n          (set-char! result i '1)\n\
    \          (set-char! result i '0)\n          (set-char! result i '0)\n      \
    \    (set-char! result i '1)\n          (set-char! result i '0)\n          (set-char!\
    \ result i '0)\n          (set-char! result i '1)\n          (set-char! result\
    \ i '0)\n          (set-char! result i '0)\n          (set-char! result i '1)\n\
    \          (set-char! result i '0)\n          (set-char! result i '0)\n      \
    \    (set-char! result i '1)\n          (set-char! result i '0)\n          (set-char!\
    \ result i '0)\n          (set-char! result i '1)\n          (set-char! result\
    \ i '0)\n          (set-char! result i '0)\n          (set-char! result i '1)\n\
    \          (set-char! result i '0)\n          (set-char! result i '", "  (let\
    \ ((result (make-string decimal/width 1)))\n    (let ((i 0))\n      (while (<\
    \ i decimal/width)\n        (let ((digit (modulo decimal/width i)))\n        \
    \  (set-char! result i '1)\n          (set-char! result i '0)\n          (set-char!\
    \ result i '0)\n          (set-char! result i '1)\n          (set-char! result\
    \ i '0)\n          (set-char! result i '0)\n          (set-char! result i '1)\n\
    \          (set-char! result i '0)\n          (set-char! result i '0)\n      \
    \    (set-char! result i '1)\n          (set-char! result i '0)\n          (set-char!\
    \ result i '0)\n          (set-char! result i '1)\n          (set-char! result\
    \ i '0)\n          (set-char! result i '0)\n          (set-char! result i '1)\n\
    \          (set-char! result i '0)\n          (set-char! result i '0)\n      \
    \    (set-char! result i '1)\n          (set-char! result i '0)\n          (set-char!\
    \ result i '0)\n          (set-char! result i '1)\n          (set-char! result\
    \ i '0)\n          (set-char! result i '0)\n          (set-char! result i '1)\n\
    \          (set-char! result i '0)\n          (set-char! result i '0)\n      \
    \    (set-char! result i '1)\n          (set-char! result i '0)\n          (set-char!\
    \ result i '0)\n          (set-char! result i '1)\n          (set-char! result\
    \ i '0)\n          (set-char! result i '0)\n          (set-char! result i '1)\n\
    \          (set-char! result i '0)\n          (set-char! result i '0)\n      \
    \    (set-char! result i '1)\n          (set-char! result i '0)\n          (set-char!\
    \ result i '", "  (let ((result (string)))\n    (let ((digit (string-append \"\
    0\" decimal)))\n      (let ((carry 0))\n        (while (< digit-length digit)\n\
    \          (let ((next-digit (string-append \"0\" digit)))\n            (set!\
    \ digit next-digit)\n            (set! carry (+ carry 1))\n            (set! result\
    \ (string-append result next-digit))))\n          (set! result (string-append\
    \ \"1\" result))))\n    (string-append \"db\" result)))\n\n;; You will be given\
    \ a string in binary format and your task is to convert it to decimal\n;; format.\
    \ The function should return a number.\n;; Examples:\n;; >>> (binary_to_decimal\
    \ \"db1111db\")\n;; 15\n;; >>> (binary_to_decimal \"db100000db\")\n;; 32", " \
    \ (let ((result \"\"))\n    (let ((digit decimal))\n      (let ((divisor 2))\n\
    \        (while (< digit divisor)\n          (let ((quotient digit divisor))\n\
    \            (let ((remainder digit (quotient digit divisor))))\n            \
    \  (let ((character (remainder digit 2))\n                     (character-value\
    \ character))\n                (setq result (concat (string-append \"0\" character)\
    \ result))\n                (setq digit (quotient digit divisor))\n          \
    \    )\n            )\n          )\n        (setq digit (quotient digit divisor))\n\
    \      )\n      (setq result (concat \"db\" result) result)\n    )\n    result\n\
    \  )\n)\n\n;; You will be given a number in binary form and your task is to convert\
    \ it to\n;; decimal form. The function should return a string, with each character\
    \ representing a decimal\n;; number. Each character in the string will be '0'\
    \ or '1'.\n;; There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n;; The extra characters are there to help with\
    \ the format.\n;; Examples:\n;; >>> (binary_to_decimal \"11111111\")\n;; \"15\"\
    \n;; >>> (binary_to_decimal \"100000\")\n;; \"32\"", "  (let ((result \"\"))\n\
    \    (let ((digit decimal))\n      (while (< digit 2)\n        (let ((next_digit\
    \ (remainder digit 2)))\n          (let ((next_digit_char (char->integer next_digit)))\n\
    \            (result (concat \"1\" next_digit_char)\n                   (concat\
    \ \"0\" result)\n                   \"1\"))))\n      (result (concat \"1\" digit)\n\
    \               (concat \"0\" result))))\n\n;; >>> (decimal_to_binary 15)\n;;\
    \ \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n;; >>> (decimal_to_binary\
    \ -1)\n;; \"db
  "  (let ((result (string)))\n    (let ((digit decimal))\n      (let ((remainder\
    \ (remainder decimal 10)))\n        (if (zero? remainder)\n          (append result\
    \ \"0\")\n          (append result (string-append \"1\" (remainder decimal 2))))))\n\
    \    (append result \"db\")\n    (append result (string-append \"0\" (string-append\
    \ \"0\" (string-append \"0\" (string-append \"0\" (string-append \"0\" (string-append\
    \ \"0\" (string-append \"0\" (string-append \"0\" (string-append \"0\" (string-append\
    \ \"0\" (string-append \"0\" (string-append \"0\" (string-append \"0\" (string-append\
    \ \"0\" (string-append \"0\" (string-append \"0\" (string-append \"0\" (string-append\
    \ \"0\" (string-append \"0\" (string-append \"0\" (string-append \"0\" (string-append\
    \ \"0\" (string-append \"0\" (string-append \"0\" (string-append \"0\" (string-append\
    \ \"0\" (string-append \"0\" (string-append \"0\" (string-append \"0\" (string-append\
    \ \"0\" (string-append \"0\" (string-append \"0\" (string-append \"0\" (string-append\
    \ \"0\" (string-append \"0\" (string-append \"0\" (string-append \"0\" (string-append\
    \ \"0\" (string-append \"0\" (string-append \"0\" (string-append \"0\" (string-append\
    \ \"0\" (string-append \"0\" (string-append \"0\" (string-append \"0\" (string-append\
    \ \"0\" (string-append \"0\" (string-append \"0\" (string-append \"0\" (string-append\
    \ \"0\" (string-append \"0\" (string-append \"0\" (string-append \"0\" (string-append\
    \ \"0\" (string-append \"0\" (string-append \"0\" (string-append \"0\" (string-append\
    \ \"0\" (string-append \"0\" (string-append \"0\" (string-append \"0\" (string-append",
  "  (let ((result \"\"))\n    (let ((digit decimal))\n      (while (< digit 2)\n\
    \        (let ((next_digit (remainder digit 2)))\n          (let ((next_digit_char\
    \ (char->integer next_digit)))\n            (let ((next_digit_char_char (char->integer\
    \ next_digit_char)))\n              (let ((next_digit_char_char_char (char->integer\
    \ next_digit_char_char)))\n                (let ((next_digit_char_char_char_char\
    \ (char->integer next_digit_char_char_char)))\n                  (let ((next_digit_char_char_char_char_char\
    \ (char->integer next_digit_char_char_char_char)))\n                    (let ((next_digit_char_char_char_char_char_char\
    \ (char->integer next_digit_char_char_char_char_char)))\n                    \
    \  (let ((next_digit_char_char_char_char_char_char_char (char->integer next_digit_char_char_char_char_char_char)))\n\
    \                        (let ((next_digit_char_char_char_char_char_char_char_char\
    \ (char->integer next_digit_char_char_char_char_char_char_char)))\n          \
    \                (let ((next_digit_char_char_char_char_char_char_char_char_char\
    \ (char->integer next_digit_char_char_char_char_char_char_char_char)))\n     \
    \                       (let ((next_digit_char_char_char_char_char_char_char_char_char_char\
    \ (char->integer next_digit_char_char_char_char_char_char_char_char_char)))\n\
    \                              (let ((next_digit_char_char_char_char_char_char_char_char_char_char_char\
    \ (char->integer next_digit_char_char_char_char_char_char_char_char_char_char)))\n\
    \                                (let ((next_digit_char_char_char_char_char_char_char_char_char_char_char_char\
    \ (char->integer next_digit_char_char_char_char_char_char_char_char_", "  (let\
    \ ((result (string)))\n    (let ((digit decimal))\n      (while (< digit 2)\n\
    \        (let ((next_digit (remainder digit 2)))\n          (string-append (string-append\
    \ \"0\" (modulo next_digit 2)) result))\n        (setq digit (remainder digit\
    \ 2))\n      )\n      (string-append \"1\" result)\n    )\n    (string-append\
    \ \"0\" result)\n    (string-append \"db\" result)\n  )\n)\n\n;; You will be given\
    \ a string in binary format and your task is to convert it to decimal\n;; form.\
    \ The function should return a number.\n;; Examples:\n;; >>> (binary_to_decimal\
    \ \"1101\")\n;; 15\n;; >>> (binary_to_decimal \"100000\")\n;; 32", "  (let ((result\
    \ (string)))\n    (let ((temp (string)))\n      (let ((i 0))\n        (while (<\
    \ i decimal)\n          (let ((digit (string-char result i)))\n            (if\
    \ (string-char temp i)\n              (let ((j 0))\n                (while (<\
    \ j decimal)\n                  (let ((digit (string-char temp j)))\n        \
    \            (setf (string-set! result j) (string-set! result i) digit)\n    \
    \                (setf (string-set! temp j) (string-set! temp i) digit)\n    \
    \                (setf (string-set! temp j) (string-set! temp i) '0)\n       \
    \             (setf (string-set! temp j) (string-set! temp i) '1)\n          \
    \          (setf (string-set! temp j) (string-set! temp i) '0)\n             \
    \       (setf (string-set! temp j) (string-set! temp i) '1)\n                \
    \    (setf (string-set! temp j) (string-set! temp i) '0)\n                   \
    \ (setf (string-set! temp j) (string-set! temp i) '1)\n                    (setf\
    \ (string-set! temp j) (string-set! temp i) '0)\n                    (setf (string-set!\
    \ temp j) (string-set! temp i) '1)\n                    (setf (string-set! temp\
    \ j) (string-set! temp i) '0)\n                    (setf (string-set! temp j)\
    \ (string-set! temp i) '1)\n                    (setf (string-set! temp j) (string-set!\
    \ temp i) '0)\n                    (setf (string-set! temp j) (string-set! temp\
    \ i) '1)\n                    (setf (string-set! temp j) (string-set! temp i)\
    \ '0)\n                    (setf (string-set! temp j) (string-set! temp i) '1)\n\
    \                    (setf (string-set! temp j) (string-set! temp i) '0)\n   \
    \                 (setf (string-set! temp j) (string-set! temp i", "  (let ((result\
    \ (string)))\n    (let ((digit decimal))\n      (while (< digit 2)\n        (let\
    \ ((next_digit (remainder digit 2)))\n          (string-append (if (< digit 1)\
    \ \"0\" \"1\") result next_digit))\n        (setq digit (quotient digit 2)))\n\
    \      (string-append \"1\" result)))\n)\n\n;; You will be given a string in binary\
    \ format and your task is to convert it to decimal\n;; format. The function should\
    \ return a number.\n;; Examples:\n;; >>> (binary_to_decimal \"111111\")\n;; 15\n\
    ;; >>> (binary_to_decimal \"100000\")\n;; 32", "  (let ((result (string)))\n \
    \   (let ((n (decimal)))\n      (while (< n 2)\n        (let ((digit (modulo n\
    \ 2)))\n          (string-append (if digit 1 #\"1\") #\"0\")\n          (n (quotient\
    \ n 2)))\n        (string-append #\"0\" #\"1\"))\n      (string-append #\"0\"\
    \ #\"1\")))\n  result)\n\n;; You will be given a string in binary format and your\
    \ task is to convert it to decimal\n;; format. The function should return a number.\n\
    ;; Examples:\n;; >>> (binary_to_decimal \"1101\")\n;; 15\n;; >>> (binary_to_decimal\
    \ \"10001\")\n;; 32", "  (let ((result \"\"))\n    (let ((temp (string-append\
    \ \"db\" decimal)))\n      (for-each (lambda (x) (string-append result (string->number->string\
    \ x))) temp))\n    (string-append \"db\" result)))\n\n;; >>> (decimal_to_binary\
    \ 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;;\
    \ >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n\
    ;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary\
    \ 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;;\
    \ >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n\
    ;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary\
    \ 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;;\
    \ >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n\
    ;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary\
    \ 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;;\
    \ >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n\
    ;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary\
    \ 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;;\
    \ >>> (decimal_to_binary 15)", "  (let ((result (string)))\n    (let ((digit decimal))\n\
    \      (while (< digit 2)\n        (let ((next_digit (remainder digit 2)))\n \
    \         (string-append (if (< digit 2) \"0\" \"1\") result next_digit))\n  \
    \      (setq digit (remainder digit 2))\n      )\n      (string-append \"0\" result)\n\
    \    )\n    (string-append \"db\" result)\n  )\n)\n\n;; You will be given a string\
    \ in binary format and your task is to convert it to decimal.\n;; The function\
    \ should return a number.\n;; Examples:\n;; >>> (binary_to_decimal \"111111\"\
    )\n;; 15\n;; >>> (binary_to_decimal \"100000\")\n;; 32", "  (let ((result (string)))\n\
    \    (let ((digit decimal))\n      (while (< digit 2)\n        (let ((next_digit\
    \ (remainder digit 2)))\n          (string-append (if (< digit 2) \"0\" (string-append\
    \ \"1\" next_digit)) result))\n        (setq digit (remainder digit 2))\n    \
    \  )\n      (string-append \"1\" result)\n    )\n    (string-append \"0\" result)\n\
    \  )\n)\n\n;; You will be given a string in binary format and your task is to\
    \ convert it to decimal.\n;; The function should return a number.\n;; Examples:\n\
    ;; >>> (binary_to_decimal \"1101\")\n;; 15\n;; >>> (binary_to_decimal \"100000\"\
    )\n;; 32", "  (let ((result (string)))\n    (let ((temp (string)))\n      (let\
    \ ((i 0))\n        (while (< i decimal)\n          (let ((digit (string-char result\
    \ i)))\n            (if (string-char temp i)\n              (let ((temp (string-concat\
    \ temp digit)))\n                (set! i (+ i 1))))\n            (set! i (+ i\
    \ 1))))\n        (set! i 0)\n        (set! result (string-concat \"db\" temp))))))\n\
    \n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n\
    ;; \"db100000db\"\n;; >>> (decimal_to_binary -1)\n;; \"db
  "  (let ((result (make-string decimal/width-of-decimal-base 2)))\n    (let ((digit\
    \ decimal/base-ten-digit)\n          (index 0))\n      (while (< digit 1)\n  \
    \      (setq digit (modulo digit 2))\n        (setq result (concat result (string-append\
    \ #\\0 #\\1)))\n        (setq index (+ index 1))))\n    (concat \"db\" result)))\n\
    \n;; You will be given a number in decimal form and your task is to convert it\
    \ to\n;; hexadecimal format. The function should return a string, with each character\
    \ representing a hexadecimal\n;; number. Each character in the string will be\
    \ '0' or '1'.\n;; There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n;; The extra characters are there to help with\
    \ the format.\n;; Examples:\n;; >>> (decimal_to_hex 15)\n;; \"db1111\"\n;; >>>\
    \ (decimal_to_hex 32)\n;; \"100000\"", "  (let ((result \"\"))\n    (let ((digit\
    \ decimal))\n      (while (< digit 2)\n        (let ((next_digit (remainder digit\
    \ 2)))\n          (setq result (concat \"1\" result))\n          (setq digit (sub1\
    \ digit))\n          (setq digit next_digit))\n        (setq digit 2))\n     \
    \ (setq result (concat \"0\" result))\n      (setq result (concat \"1\" result))\n\
    \      (setq result (concat \"0\" result))\n      (setq result (concat \"1\" result))\n\
    \      (setq result (concat \"0\" result))\n      (setq result (concat \"1\" result))\n\
    \      (setq result (concat \"0\" result))\n      (setq result (concat \"1\" result))\n\
    \      (setq result (concat \"0\" result))\n      (setq result (concat \"1\" result))\n\
    \      (setq result (concat \"0\" result))\n      (setq result (concat \"1\" result))\n\
    \      (setq result (concat \"0\" result))\n      (setq result (concat \"1\" result))\n\
    \      (setq result (concat \"0\" result))\n      (setq result (concat \"1\" result))\n\
    \      (setq result (concat \"0\" result))\n      (setq result (concat \"1\" result))\n\
    \      (setq result (concat \"0\" result))\n      (setq result (concat \"1\" result))\n\
    \      (setq result (concat \"0\" result))\n      (setq result (concat \"1\" result))\n\
    \      (setq result (concat \"0\" result))\n      (setq result (concat \"1\" result))\n\
    \      (setq result (concat \"0\" result))\n      (setq result (concat \"1\" result))\n\
    \      (setq result (concat \"0\" result))\n      (setq result (concat \"1\" result))\n\
    \      (setq result (concat \"0\" result))\n      (setq result (concat \"1\" result))\n\
    \      (setq result (concat \"0", "  (let ((result \"\"))\n    (let ((digit decimal))\n\
    \      (if (< digit 2)\n        (begin\n          (append result \"0\")\n    \
    \      (append result \"0\")\n          (append result \"0\")\n          (append\
    \ result \"0\")\n          (append result \"0\")\n          (append result \"\
    0\")\n          (append result \"0\")\n          (append result \"0\")\n     \
    \     (append result \"0\")\n          (append result \"0\")\n          (append\
    \ result \"0\")\n          (append result \"0\")\n          (append result \"\
    0\")\n          (append result \"0\")\n          (append result \"0\")\n     \
    \     (append result \"0\")\n          (append result \"0\")\n          (append\
    \ result \"0\")\n          (append result \"0\")\n          (append result \"\
    0\")\n          (append result \"0\")\n          (append result \"0\")\n     \
    \     (append result \"0\")\n          (append result \"0\")\n          (append\
    \ result \"0\")\n          (append result \"0\")\n          (append result \"\
    0\")\n          (append result \"0\")\n          (append result \"0\")\n     \
    \     (append result \"0\")\n          (append result \"0\")\n          (append\
    \ result \"0\")\n          (append result \"0\")\n          (append result \"\
    0\")\n          (append result \"0\")\n          (append result \"0\")\n     \
    \     (append result \"0\")\n          (append result \"0\")\n          (append\
    \ result \"0\")\n          (append result \"0\")\n          (append result \"\
    0\")\n          (append result \"0\")\n          (append result \"0\")\n     \
    \     (append result \"0\")\n          (append result \"0\")\n          (append\
    \ result \"0\")\n          (append result \"0\")\n          (append result \"\
    0\")\n          (append result \"0\")\n          (append result \"0\")\n     \
    \     (append result \"0\")\n          (append result \"0\")\n          (append\
    \ result \"0\")\n          (append result \"0\")\n          (append result \"\
    0\")\n          (append result \"0\")\n          (append result \"0\")\n     \
    \     (append result \"0\")\n          (append result \"0\")\n          (append\
    \ result \"0\")\n          (append result", "  (let ((result (string)))\n    (let\
    \ ((temp (string)))\n      (let ((i 0))\n        (while (< i decimal)\n      \
    \    (let ((digit (string-char result i))))\n            (let ((temp (string-append\
    \ temp digit)))\n              (set! i (+ i 1))))\n          (set! i 0)\n    \
    \    (set! i 0)\n        (set! i 0)\n        (set! i 0)\n        (set! i 0)\n\
    \        (set! i 0)\n        (set! i 0)\n        (set! i 0)\n        (set! i 0)\n\
    \        (set! i 0)\n        (set! i 0)\n        (set! i 0)\n        (set! i 0)\n\
    \        (set! i 0)\n        (set! i 0)\n        (set! i 0)\n        (set! i 0)\n\
    \        (set! i 0)\n        (set! i 0)\n        (set! i 0)\n        (set! i 0)\n\
    \        (set! i 0)\n        (set! i 0)\n        (set! i 0)\n        (set! i 0)\n\
    \        (set! i 0)\n        (set! i 0)\n        (set! i 0)\n        (set! i 0)\n\
    \        (set! i 0)\n        (set! i 0)\n        (set! i 0)\n        (set! i 0)\n\
    \        (set! i 0)\n        (set! i 0)\n        (set! i 0)\n        (set! i 0)\n\
    \        (set! i 0)\n        (set! i 0)\n        (set! i 0)\n        (set! i 0)\n\
    \        (set! i 0)\n        (set! i 0)\n        (set! i 0)\n        (set! i 0)\n\
    \        (set! i 0)\n        (set! i 0)\n        (set! i 0)\n        (set! i 0)\n\
    \        (set! i 0)\n        (set! i 0)\n        (set! i 0)\n        (set! i 0)\n\
    \        (set! i 0)\n        (set! i 0)\n        (", "  (let ((result (string)))\n\
    \    (let ((digit decimal))\n      (while (< digit 2)\n        (let ((next_digit\
    \ (remainder digit 2)))\n          (string-append (if (< digit 2) \"0\" \"1\"\
    ) result next_digit))\n        (setq digit (quotient digit 2)))))\n  (string-append\
    \ \"db\" result)\n)\n\n;; You will be given a number in binary form and your task\
    \ is to convert it to\n;; decimal form. The function should return a string, with\
    \ each character representing a decimal\n;; number. Each character in the string\
    \ will be '0' or '1'.\n;; There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n;; The extra characters are there\
    \ to help with the format.\n;; Examples:\n;; >>> (binary_to_decimal \"db1111db\"\
    )\n;; \"15\"\n;; >>> (binary_to_decimal \"01010101\")\n;; \"33\"", "  (let ((result\
    \ \"\"))\n    (let ((digit decimal))\n      (while (< digit 2)\n        (let ((next_digit\
    \ (modulo digit 2)))\n          (result #\"1\" (append result (string-append \"\
    #\" (modulo digit 2)))))\n        (digit (divide digit 2)))))\n  (append \"db\"\
    \ result)\n)\n\n;; You will be given a number in binary form and your task is\
    \ to convert it to\n;; decimal form. The function should return a string, with\
    \ each character representing a decimal\n;; number. Each character in the string\
    \ will be '0' or '1'.\n;; There will be an extra couple of characters 'db' at\
    \ the beginning and at the end of the string.\n;; The extra characters are there\
    \ to help with the format.\n;; Examples:\n;; >>> (binary_to_decimal \"11111111\"\
    )\n;; \"15\"\n;; >>> (binary_to_decimal \"100000\")\n;; \"32\"", "  (let ((result\
    \ (make-string decimal 2)))\n    (let ((i 0))\n      (while (< decimal i)\n  \
    \      (let ((digit decimal/1))\n          (set! result (concat \"1\" result))\n\
    \          (set! i (+ i 1)))\n        (set! result (concat \"0\" result))\n  \
    \      (set! i (+ i 1))))\n    (concat \"db\" result)))\n\n;; You will be given\
    \ a string in binary format and your task is to convert it to decimal.\n;; The\
    \ function should return a number.\n;; Examples:\n;; >>> (binary_to_decimal \"\
    111111\")\n;; 15\n;; >>> (binary_to_decimal \"100000\")\n;; 32", "  (let ((result\
    \ \"\"))\n    (let ((digit decimal))\n      (if (< digit 0)\n        (begin\n\
    \          (error \"decimal_to_binary: decimal must be a positive number\")\n\
    \          result)\n        (else\n          (let ((bit 0))\n            (while\
    \ (< digit 1)\n              (let ((next_bit (modulo digit 2)))\n            \
    \    (set! bit (concat \"1\" bit))\n                (set! digit (sub1 digit))\n\
    \                (set! bit (concat \"0\" next_bit))))\n            (concat \"\
    1\" bit))))))\n\n;; >>> (decimal_to_binary -1)\n;; \"db
  "  (let ((result \"\"))\n    (let ((digit decimal))\n      (while (< digit 2)\n\
    \        (let ((next_digit (remainder digit 2)))\n          (let ((next_digit_char\
    \ (char->integer next_digit)))\n            (result (concat \"1\" next_digit_char\
    \ result))))\n        (digit (quotient digit 2)))))\n  (concat \"db\" result))\n\
    \n;; You will be given a string in binary format and your task is to convert it\
    \ to decimal.\n;; The function should return a number.\n;; Examples:\n;; >>> (binary_to_decimal\
    \ \"1111\")\n;; 15\n;; >>> (binary_to_decimal \"100000\")\n;; 32", "  (let ((result\
    \ (string)))\n    (let ((decimal-value decimal))\n      (while (< decimal-value\
    \ 0)\n        (let ((divisor 2))\n          (if (< decimal-value divisor)\n  \
    \          (let ((remainder decimal-value (sub1 divisor)))\n              (string-append\
    \ (string-append \"1\" remainder) result))\n            (let ((remainder decimal-value\
    \ (sub1 divisor)))\n              (string-append \"0\" remainder)\n          \
    \    (string-append \"1\" result))))\n        (decimal-value (sub1 divisor))))\n\
    \  result))\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary\
    \ 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;;\
    \ >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n\
    ;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary\
    \ 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;;\
    \ >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n\
    ;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary\
    \ 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;;\
    \ >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n\
    ;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary\
    \ 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;;\
    \ >>> (decimal_", "  (let ((result (make-string decimal/width 1)))\n    (let ((i\
    \ 0))\n      (while (< i decimal/width)\n        (let ((digit (modulo decimal/width\
    \ i)))\n          (set-char! result i digit)\n          (set-char! result i '1)\n\
    \          (set-char! result i '0)\n          (set-char! result i '1)\n      \
    \    (set-char! result i '0)\n          (set-char! result i '1)\n          (set-char!\
    \ result i '0)\n          (set-char! result i '1)\n          (set-char! result\
    \ i '0)\n          (set-char! result i '1)\n          (set-char! result i '0)\n\
    \          (set-char! result i '1)\n          (set-char! result i '0)\n      \
    \    (set-char! result i '1)\n          (set-char! result i '0)\n          (set-char!\
    \ result i '1)\n          (set-char! result i '0)\n          (set-char! result\
    \ i '1)\n          (set-char! result i '0)\n          (set-char! result i '1)\n\
    \          (set-char! result i '0)\n          (set-char! result i '1)\n      \
    \    (set-char! result i '0)\n          (set-char! result i '1)\n          (set-char!\
    \ result i '0)\n          (set-char! result i '1)\n          (set-char! result\
    \ i '0)\n          (set-char! result i '1)\n          (set-char! result i '0)\n\
    \          (set-char! result i '1)\n          (set-char! result i '0)\n      \
    \    (set-char! result i '1)\n          (set-char! result i '0)\n          (set-char!\
    \ result i '1)\n          (set-char! result i '0)\n          (set-char! result\
    \ i '1)\n          (set-char! result i '0)\n          (set-char! result i '1)\n\
    \          (set-char! result i '0", "  (let ((result (string)))\n    (let ((n\
    \ (decimal)))\n      (while (< n 2)\n        (let ((digit (modulo n 2)))\n   \
    \       (string-append (if (zero? digit) \"0\" \"1\") result))\n        (setq\
    \ n (quotient n 2)))\n      (string-append \"db\" result)))\n)\n\n;; You will\
    \ be given a string in binary format and your task is to convert it to decimal.\n\
    ;; The function should return a number.\n;; Examples:\n;; >>> (binary_to_decimal\
    \ \"111111\")\n;; 15\n;; >>> (binary_to_decimal \"100000\")\n;; 32", "  (let ((result\
    \ (make-string decimal/width 1)))\n    (let ((digit decimal/1))\n      (let ((result\
    \ (string-append \"0\" result)))\n        (let ((result (string-append result\
    \ \"1\")))\n          (let ((result (string-append result \"0\")))\n         \
    \   (let ((result (string-append result \"1\")))\n              (let ((result\
    \ (string-append result \"0\")))\n                (let ((result (string-append\
    \ result \"1\")))\n                  (let ((result (string-append result \"0\"\
    )))\n                    (let ((result (string-append result \"1\")))\n      \
    \                (let ((result (string-append result \"0\")))\n              \
    \          (let ((result (string-append result \"1\")))\n                    \
    \      (let ((result (string-append result \"0\")))\n                        \
    \    (let ((result (string-append result \"1\")))\n                          \
    \    (let ((result (string-append result \"0\")))\n                          \
    \      (let ((result (string-append result \"1\")))\n                        \
    \          (let ((result (string-append result \"0\")))\n                    \
    \                (let ((result (string-append result \"1\")))\n              \
    \                        (let ((result (string-append result \"0\")))\n      \
    \                                  (let ((result (string-append result \"1\")))\n\
    \                                          (let ((result (string-append result\
    \ \"0\")))\n                                            (let ((result (string-append\
    \ result \"1\")))\n                                              (let ((result\
    \ (string-append result \"0\")))\n                                           \
    \     (let ((result (string-append result \"1\")))\n                         \
    \                         (let ((result (string-append result \"0\")))\n     \
    \                                               (let ((result (string-append result\
    \ \"1\")))\n                                                      (let ((result\
    \ (string-append result \"0\")))\n                                           \
    \             (let ((result (string-append result \"1\")))\n                 \
    \                                        (let ((result (string-append result \"\
    0\")))\n                                                           (let ((result\
    \ (string-append result \"1\")))\n                                       ", " \
    \ (let ((result (string)))\n    (let ((digit (string-append \"0\" decimal)))\n\
    \      (let ((result (string-append result digit)))\n        (let ((digit (string-append\
    \ \"0\" decimal)))\n          (let ((result (string-append result digit)))\n \
    \           (let ((digit (string-append \"0\" decimal)))\n              (let ((result\
    \ (string-append result digit)))\n                (let ((digit (string-append\
    \ \"0\" decimal)))\n                  (let ((result (string-append result digit)))\n\
    \                    (let ((digit (string-append \"0\" decimal)))\n          \
    \            (let ((result (string-append result digit)))\n                  \
    \      (let ((digit (string-append \"0\" decimal)))\n                        \
    \  (let ((result (string-append result digit)))\n                            (let\
    \ ((digit (string-append \"0\" decimal)))\n                              (let\
    \ ((result (string-append result digit
  "  (let ((result \"\"))\n    (let ((digit decimal))\n      (let ((remainder (modulo\
    \ digit 2)))\n        (if (zero? remainder)\n          (append result \"0\")\n\
    \          (append result \"1\"))))))\n\n;; >>> (decimal_to_binary 15)\n;; \"\
    db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n;; >>> (decimal_to_binary\
    \ -15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary -32)\n;; \"db100000db\"\n;;\
    \ >>> (decimal_to_binary -15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary -32)\n\
    ;; \"db100000db\"\n;; >>> (decimal_to_binary -15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary\
    \ -32)\n;; \"db100000db\"\n;; >>> (decimal_to_binary -15)\n;; \"db1111db\"\n;;\
    \ >>> (decimal_to_binary -32)\n;; \"db100000db\"\n;; >>> (decimal_to_binary -15)\n\
    ;; \"db1111db\"\n;; >>> (decimal_to_binary -32)\n;; \"db100000db\"\n;; >>> (decimal_to_binary\
    \ -15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary -32)\n;; \"db100000db\"\n;;\
    \ >>> (decimal_to_binary -15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary -32)\n\
    ;; \"db100000db\"\n;; >>> (decimal_to_binary -15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary\
    \ -32)\n;; \"db100000db\"\n;; >>> (decimal_to_binary -15)\n;; \"db1111db\"\n;;\
    \ >>> (decimal_to_binary -32)\n;; \"db100000db\"\n;; >>> (decimal_to_binary -15)\n\
    ;; \"db1111db\"\n;; >>> (decimal_to_binary -32)\n;; \"db100000db\"\n;; >>> (decimal",
  "  (let ((result (string)))\n    (let ((n (decimal)))\n      (while (< n 0)\n  \
    \      (let ((digit (modulo n 2)))\n          (string-append (string-append \"\
    0\" digit) result))\n        (setq n (- n 1))))))\n\n;; >>> (decimal_to_binary\
    \ 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n;; >>>\
    \ (decimal_to_binary -1)\n;; \"db
  "  (let ((result (string)))\n    (let ((decimal-str (string-append \"db\" decimal)))\n\
    \      (let ((i 0))\n        (while (< i decimal-str-length)\n          (let ((digit\
    \ (string-char-at decimal-str i)))\n            (setq result (string-append (if\
    \ (eq digit #\\0) \"0\" (if (eq digit #\\1) \"1\" \"?\")) result))\n         \
    \   (setq i (1+ i))))\n        (setq i 0))\n    result))\n\n;; >>> (decimal_to_binary\
    \ 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n;; >>>\
    \ (decimal_to_binary -1)\n;; \"?\"\n;; >>> (decimal_to_binary 0)\n;; \"0\"\n;;\
    \ >>> (decimal_to_binary 1)\n;; \"1\"\n;; >>> (decimal_to_binary 2)\n;; \"10\"\
    \n;; >>> (decimal_to_binary 3)\n;; \"11\"\n;; >>> (decimal_to_binary 4)\n;; \"\
    100\"\n;; >>> (decimal_to_binary 5)\n;; \"101\"\n;; >>> (decimal_to_binary 6)\n\
    ;; \"110\"\n;; >>> (decimal_to_binary 7)\n;; \"111\"\n;; >>> (decimal_to_binary\
    \ 8)\n;; \"1000\"\n;; >>> (decimal_to_binary 9)\n;; \"1001\"\n;; >>> (decimal_to_binary\
    \ 10)\n;; \"1010\"\n;; >>> (decimal_to_binary 11)\n;; \"1011\"\n;; >>> (decimal_to_binary\
    \ 12)\n;; \"1100\"\n;; >>> (decimal_to_binary 13)\n;; \"1101\"\n;; >>> (decimal_to_binary\
    \ 14)\n;; \"1110\"\n;; >>> (decimal_to_binary 15)\n;; \"1111\"\n;; >>> (decimal_to_binary\
    \ 16)\n;; \"10000\"\n;; >>> (decimal_to_binary 17)\n;; \"10001\"\n;; >>> (decimal_to_binary\
    \ 18)\n;; \"10010\"\n", "  (let ((result (make-string decimal/width-of-decimal-char)))\n\
    \    (let ((i 0))\n      (while (< decimal i)\n        (let ((digit decimal/1))\n\
    \          (set-char! result i digit)\n          (set-char! result i '1)\n   \
    \       (set-char! result i '0)\n          (set-char! result i '0)\n         \
    \ (set-char! result i '1)\n          (set-char! result i '0)\n          (set-char!\
    \ result i '0)\n          (set-char! result i '1)\n          (set-char! result\
    \ i '0)\n          (set-char! result i '0)\n          (set-char! result i '1)\n\
    \          (set-char! result i '0)\n          (set-char! result i '0)\n      \
    \    (set-char! result i '1)\n          (set-char! result i '0)\n          (set-char!\
    \ result i '0)\n          (set-char! result i '1)\n          (set-char! result\
    \ i '0)\n          (set-char! result i '0)\n          (set-char! result i '1)\n\
    \          (set-char! result i '0)\n          (set-char! result i '0)\n      \
    \    (set-char! result i '1)\n          (set-char! result i '0)\n          (set-char!\
    \ result i '0)\n          (set-char! result i '1)\n          (set-char! result\
    \ i '0)\n          (set-char! result i '0)\n          (set-char! result i '1)\n\
    \          (set-char! result i '0)\n          (set-char! result i '0)\n      \
    \    (set-char! result i '1)\n          (set-char! result i '0)\n          (set-char!\
    \ result i '0)\n          (set-char! result i '1)\n          (set-char! result\
    \ i '0)\n          (set-char! result i '0)\n          (set-char! result i '1)\n\
    \          (set-char! result i '0", "  (let ((result \"\"))\n    (let ((digit\
    \ decimal))\n      (let ((remainder decimal))\n        (while (< digit 2)\n  \
    \        (let ((quotient digit))\n            (let ((remainder (remainder (- digit\
    \ quotient))))\n              (let ((digit (remainder quotient)))\n          \
    \      (let ((quotient (remainder quotient)))\n                  (let ((remainder\
    \ (remainder quotient)))\n                    (let ((digit (remainder quotient)))\n\
    \                      (let ((quotient (remainder quotient)))\n              \
    \          (let ((remainder (remainder quotient)))\n                         \
    \ (let ((digit (remainder quotient)))\n                            (let ((quotient\
    \ (remainder quotient)))\n                              (let ((remainder (remainder\
    \ quotient)))\n                                (let ((digit (remainder quotient)))\n\
    \                                  (let ((quotient (remainder quotient)))\n  \
    \                                  (let ((remainder (remainder quotient)))\n \
    \                                     (let ((digit (remainder quotient)))\n  \
    \                                      (let ((quotient (remainder quotient)))\n\
    \                                          (let ((remainder (remainder quotient)))\n\
    \                                            (let ((digit (remainder quotient)))\n\
    \                                              (let ((quotient (remainder quotient)))\n\
    \                                                (let ((remainder (remainder quotient)))\n\
    \                                                  (let ((digit (remainder quotient)))\n\
    \                                                    (let ((quotient (remainder\
    \ quotient)))\n                                                      (let ((remainder\
    \ (remainder quotient)))\n                                                   \
    \     (let ((digit (remainder quotient)))\n                                  \
    \                        (let ((quotient (remainder quotient)))\n            \
    \                                                (let ((remainder (remainder quotient)))\n\
    \                                                              (let ((digit (remainder\
    \ quotient)))\n                                                              \
    \  (let ((quotient (remainder quotient)))\n                                  \
    \                                (let ((remainder (remainder quotient)))", " \
    \ (let ((result \"\"))\n    (let ((digit decimal))\n      (while (< digit 2)\n\
    \        (let ((next_digit (remainder digit 2)))\n          (let ((next_digit_char\
    \ (modulo next_digit 2)))\n            (result (concat \"1\" next_digit_char)\n\
    \              (concat \"0\" (remainder next_digit 2)))))\n        (setq digit\
    \ (quotient digit 2)))\n      (concat \"1\" (remainder decimal 2))\n      (concat\
    \ \"0\" (remainder decimal 2))\n      (concat \"1\" (remainder decimal 2))\n \
    \     (concat \"0\" (remainder decimal 2))\n      (concat \"1\" (remainder decimal\
    \ 2))\n      (concat \"0\" (remainder decimal 2))\n      (concat \"1\" (remainder\
    \ decimal 2))\n      (concat \"0\" (remainder decimal 2))\n      (concat \"1\"\
    \ (remainder decimal 2))\n      (concat \"0\" (remainder decimal 2))\n      (concat\
    \ \"1\" (remainder decimal 2))\n      (concat \"0\" (remainder decimal 2))\n \
    \     (concat \"1\" (remainder decimal 2))\n      (concat \"0\" (remainder decimal\
    \ 2))\n      (concat \"1\" (remainder decimal 2))\n      (concat \"0\" (remainder\
    \ decimal 2))\n      (concat \"1\" (remainder decimal 2))\n      (concat \"0\"\
    \ (remainder decimal 2))\n      (concat \"1\" (remainder decimal 2))\n      (concat\
    \ \"0\" (remainder decimal 2))\n      (concat \"1\" (remainder decimal 2))\n \
    \     (concat \"0\" (remainder decimal 2))\n      (concat \"1\" (remainder decimal\
    \ 2))\n      (concat \"0\" (remainder decimal 2))\n      (concat \"1\" (remainder\
    \ decimal 2))\n      (concat \"0\" (remainder decimal 2))\n      (concat \"1\"\
    \ (remainder decimal 2))\n      (con", "  (let ((result \"\"))\n    (let ((digit\
    \ decimal))\n      (if (< digit 2)\n        (begin\n          (let ((temp (string-append\
    \ \"0\" digit)))\n            (result (string-append result temp)))\n        \
    \  (let ((temp (string-append \"1\" digit)))\n            (result (string-append\
    \ result temp)))\n          (let ((temp (string-append \"0\" digit)))\n      \
    \      (result (string-append result temp)))\n          (let ((temp (string-append\
    \ \"1\" digit)))\n            (result (string-append result temp)))\n        \
    \  (let ((temp (string-append \"0\" digit)))\n            (result (string-append\
    \ result temp)))\n          (let ((temp (string-append \"1\" digit)))\n      \
    \      (result (string-append result temp)))\n          (let ((temp (string-append\
    \ \"0\" digit)))\n            (result (string-append result temp)))\n        \
    \  (let ((temp (string-append \"1\" digit)))\n            (result (string-append\
    \ result temp)))\n          (let ((temp (string-append \"0\" digit)))\n      \
    \      (result (string-append result temp)))\n          (let ((temp (string-append\
    \ \"1\" digit)))\n            (result (string-append result temp)))\n        \
    \  (let ((temp (string-append \"0\" digit)))\n            (result (string-append\
    \ result temp)))\n          (let ((temp (string-append \"1\" digit)))\n      \
    \      (result (string-append result temp)))\n          (let ((temp (string-append\
    \ \"0\" digit)))\n            (result (string-append result temp)))\n        \
    \  (let ((temp (string-append \"1\" digit)))\n            (result (string-append\
    \ result temp)))\n          (let ((temp (string-append \"0\" digit)))\n      \
    \      (result (string-append result temp)))\n          (let ((temp (string-append\
    \ \"1\" digit)))\n            (result (string-append result temp)))\n        \
    \  (let ((temp (string-append \"0\" digit)))\n            (result (string-append\
    \ result temp)))\n          (let ((temp (string-append \"1\" digit)))\n      \
    \      (result (string-append result temp)))\n          (let ((temp (string-append\
    \ \"0\" digit)))\n            ", "  (let ((result (make-string decimal/width +\
    \ 1)))\n    (let ((i 0))\n      (while (< i decimal/width)\n        (let ((digit\
    \ (modulo decimal/width i)))\n          (set-char! result i digit)\n         \
    \ (set-char! result i '1)\n          (set-char! result i '0)\n          (set-char!\
    \ result i '1)\n          (set-char! result i '0)\n          (set-char! result\
    \ i '1)\n          (set-char! result i '0)\n          (set-char! result i '1)\n\
    \          (set-char! result i '0)\n          (set-char! result i '1)\n      \
    \    (set-char! result i '0)\n          (set-char! result i '1)\n          (set-char!\
    \ result i '0)\n          (set-char! result i '1)\n          (set-char! result\
    \ i '0)\n          (set-char! result i '1)\n          (set-char! result i '0)\n\
    \          (set-char! result i '1)\n          (set-char! result i '0)\n      \
    \    (set-char! result i '1)\n          (set-char! result i '0)\n          (set-char!\
    \ result i '1)\n          (set-char! result i '0)\n          (set-char! result\
    \ i '1)\n          (set-char! result i '0)\n          (set-char! result i '1)\n\
    \          (set-char! result i '0)\n          (set-char! result i '1)\n      \
    \    (set-char! result i '0)\n          (set-char! result i '1)\n          (set-char!\
    \ result i '0)\n          (set-char! result i '1)\n          (set-char! result\
    \ i '0)\n          (set-char! result i '1)\n          (set-char! result i '0)\n\
    \          (set-char! result i '1)\n          (set-char! result i '0)\n      \
    \    (set-char! result i '1)\n          (set-char! result i '", "  (let ((result\
    \ (make-string decimal/width 2)))\n    (let ((i 0))\n      (while (< i decimal/width)\n\
    \        (let ((digit (modulo decimal/width i)))\n          (set-char! result\
    \ i '1)\n          (set-char! result i '0)\n          (set-char! result i '0)\n\
    \          (set-char! result i '1)\n          (set-char! result i '0)\n      \
    \    (set-char! result i '0)\n          (set-char! result i '1)\n          (set-char!\
    \ result i '0)\n          (set-char! result i '0)\n          (set-char! result\
    \ i '1)\n          (set-char! result i '0)\n          (set-char! result i '0)\n\
    \          (set-char! result i '1)\n          (set-char! result i '0)\n      \
    \    (set-char! result i '0)\n          (set-char! result i '1)\n          (set-char!\
    \ result i '0)\n          (set-char! result i '0)\n          (set-char! result\
    \ i '1)\n          (set-char! result i '0)\n          (set-char! result i '0)\n\
    \          (set-char! result i '1)\n          (set-char! result i '0)\n      \
    \    (set-char! result i '0)\n          (set-char! result i '1)\n          (set-char!\
    \ result i '0)\n          (set-char! result i '0)\n          (set-char! result\
    \ i '1)\n          (set-char! result i '0)\n          (set-char! result i '0)\n\
    \          (set-char! result i '1)\n          (set-char! result i '0)\n      \
    \    (set-char! result i '0)\n          (set-char! result i '1)\n          (set-char!\
    \ result i '0)\n          (set-char! result i '0)\n          (set-char! result\
    \ i '1)\n          (set-char! result i '0)\n          (set-char! result i '",
  "  (let ((result (make-string decimal/width 1)))\n    (let ((i 0))\n      (while\
    \ (< i decimal/width)\n        (let ((digit (modulo decimal/width i)))\n     \
    \     (set-char! result i digit)\n          (set-char! result i 1)\n         \
    \ (set-char! result i 0)\n          (set-char! result i 1)\n          (set-char!\
    \ result i 0)\n          (set-char! result i 1)\n          (set-char! result i\
    \ 0)\n          (set-char! result i 1)\n          (set-char! result i 0)\n   \
    \       (set-char! result i 1)\n          (set-char! result i 0)\n          (set-char!\
    \ result i 1)\n          (set-char! result i 0)\n          (set-char! result i\
    \ 1)\n          (set-char! result i 0)\n          (set-char! result i 1)\n   \
    \       (set-char! result i 0)\n          (set-char! result i 1)\n          (set-char!\
    \ result i 0)\n          (set-char! result i 1)\n          (set-char! result i\
    \ 0)\n          (set-char! result i 1)\n          (set-char! result i 0)\n   \
    \       (set-char! result i 1)\n          (set-char! result i 0)\n          (set-char!\
    \ result i 1)\n          (set-char! result i 0)\n          (set-char! result i\
    \ 1)\n          (set-char! result i 0)\n          (set-char! result i 1)\n   \
    \       (set-char! result i 0)\n          (set-char! result i 1)\n          (set-char!\
    \ result i 0)\n          (set-char! result i 1)\n          (set-char! result i\
    \ 0)\n          (set-char! result i 1)\n          (set-char! result i 0)\n   \
    \       (set-char! result i 1)\n          (set-char! result i 0)\n          (set-char!\
    \ result i 1)\n          (set-char! result i 0)\n          (set-char! result i\
    \ 1)\n          (set", "  (let ((result (make-string decimal/width 1)))\n    (let\
    \ ((i 0))\n      (while (< decimal i)\n        (let ((digit decimal/1))\n    \
    \      (set-char! result i '1)\n          (set-char! result i '0)\n          (set-char!\
    \ result i '1)\n          (set-char! result i '0)\n          (set-char! result\
    \ i '1)\n          (set-char! result i '0)\n          (set-char! result i '1)\n\
    \          (set-char! result i '0)\n          (set-char! result i '1)\n      \
    \    (set-char! result i '0)\n          (set-char! result i '1)\n          (set-char!\
    \ result i '0)\n          (set-char! result i '1)\n          (set-char! result\
    \ i '0)\n          (set-char! result i '1)\n          (set-char! result i '0)\n\
    \          (set-char! result i '1)\n          (set-char! result i '0)\n      \
    \    (set-char! result i '1)\n          (set-char! result i '0)\n          (set-char!\
    \ result i '1)\n          (set-char! result i '0)\n          (set-char! result\
    \ i '1)\n          (set-char! result i '0)\n          (set-char! result i '1)\n\
    \          (set-char! result i '0)\n          (set-char! result i '1)\n      \
    \    (set-char! result i '0)\n          (set-char! result i '1)\n          (set-char!\
    \ result i '0)\n          (set-char! result i '1)\n          (set-char! result\
    \ i '0)\n          (set-char! result i '1)\n          (set-char! result i '0)\n\
    \          (set-char! result i '1)\n          (set-char! result i '0)\n      \
    \    (set-char! result i '1)\n          (set-char! result i '0)\n          (set-char!\
    \ result i '1)\n          (set", "  (let ((result (string)))\n    (let ((digit\
    \ decimal))\n      (while (< digit 2)\n        (let ((next_digit (remainder digit\
    \ 2)))\n          (string-append (if (< next_digit 1) \"1\" \"0\") result)\n \
    \         (setq digit (quotient next_digit 2)))))\n    (string-append \"db\" result)))\n\
    \n;; You will be given a string in binary format and your task is to convert it\
    \ to decimal.\n;; The function should return a number.\n;; Examples:\n;; >>> (binary_to_decimal\
    \ \"1101\")\n;; 15\n;; >>> (binary_to_decimal \"100000\")\n;; 32", "  (let ((result\
    \ \"\"))\n    (let ((divisor (decimal)))\n      (while (< divisor 2)\n       \
    \ (let ((remainder (modulo divisor 2)))\n          (if (= remainder 0)\n     \
    \       (append result \"1\")\n            (append result \"0\"))))\n      (append\
    \ result \"1\")))\n)\n\n;; You will be given a string in binary format and your\
    \ task is to convert it to decimal.\n;; The function should return a number.\n\
    ;; Examples:\n;; >>> (binary_to_decimal \"111111\")\n;; 15\n;; >>> (binary_to_decimal\
    \ \"100000\")\n;; 32", "  (let ((result (string)))\n    (let ((decimal-string\
    \ (string-append \"db\" decimal)))\n      (let ((i 0))\n        (while (< i decimal)\n\
    \          (let ((digit (string-char decimal-string i)))\n            (setf result\
    \ (string-append (string-append \"0\" digit) result))\n            (setf i (1+\
    \ i)))\n          (setf i 0))\n        (setf result (string-append \"0\" result))))))\n\
    \n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n\
    ;; \"db100000db\"\n;; >>> (decimal_to_binary -1)\n;; \"db
  "  (let ((result (make-string decimal/width)))\n    (let ((digit decimal/1))\n \
    \     (let ((i 0))\n        (while (< i decimal/0)\n          (setq result (concat\
    \ result (string-append \"1\" (modulo digit 2))))\n          (setq digit (modulo\
    \ digit 2))\n          (setq i (+ i 1))))\n      (concat \"0\" result)))\n)\n\n\
    ;; You will be given a number in binary form and your task is to convert it to\n\
    ;; decimal form. The function should return a string, with each character representing\
    \ a decimal\n;; number. Each character in the string will be '0' or '1'.\n;; There\
    \ will be an extra couple of characters 'db' at the beginning and at the end of\
    \ the string.\n;; The extra characters are there to help with the format.\n;;\
    \ Examples:\n;; >>> (binary_to_decimal \"11111111\")\n;; \"15\"\n;; >>> (binary_to_decimal\
    \ \"100000\")\n;; \"32\"", "  (let ((result \"\"))\n    (let ((digit decimal))\n\
    \      (while (< digit 2)\n        (let ((next_digit (remainder digit 2)))\n \
    \         (let ((next_digit_char (char->integer next_digit)))\n            (result\
    \ (concat \"1\" next_digit_char result))))\n        (digit (quotient digit 2)))\n\
    \      (result (concat \"1\" result))))\n)\n\n;; You will be given a number in\
    \ binary form and your task is to convert it to\n;; decimal form. The function\
    \ should return a string, with each character representing a decimal\n;; number.\
    \ Each character in the string will be '0' or '1'.\n;; There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n;;\
    \ The extra characters are there to help with the format.\n;; Examples:\n;; >>>\
    \ (binary_to_decimal \"11111111\")\n;; \"15\"\n;; >>> (binary_to_decimal \"100000\"\
    )\n;; \"32\"", "  (let ((result (string)))\n    (let ((n (decimal)))\n      (while\
    \ (< n 0)\n        (let ((digit (modulo n 2)))\n          (string-append (if digit\
    \ 1 #\"1\") #\"0\")\n          (n (quotient n 2)))\n        (string-append #\"\
    0\" #\"1\"))\n      (string-append #\"0\" #\"1\"))))\n\n;; >>> (decimal_to_binary\
    \ 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;;\
    \ >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n\
    ;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary\
    \ 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;;\
    \ >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n\
    ;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary\
    \ 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;;\
    \ >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n\
    ;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary\
    \ 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;;\
    \ >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n\
    ;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary\
    \ 15)\n;; \"", "  (let ((result \"\"))\n    (let ((temp (string-append \"db\"\
    \ decimal)))\n      (for-each (lambda (x) (string-append result (string->char\
    \ x))) temp))\n    (string-append \"db\" result)))\n\n;; >>> (decimal_to_binary\
    \ 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n;; >>>\
    \ (decimal_to_binary -1)\n;; \"db
  "  (let ((result (string)))\n    (let ((decimal-string (string-append \"db\" decimal)))\n\
    \      (let ((i 0))\n        (while (< i decimal)\n          (let ((digit (string-char\
    \ decimal-string i)))\n            (string-set! result (string-insert! result\
    \ digit) i)\n            (set! i (+ i 1))))\n        (string-set! result \"db\"\
    )\n        (string-set! result (string-append result decimal-string))))))\n\n\
    ;; You will be given a string in binary format and your task is to convert it\
    \ to decimal.\n;; The function should return a number.\n;; Examples:\n;; >>> (binary_to_decimal\
    \ \"111111\")\n;; 15\n;; >>> (binary_to_decimal \"100000\")\n;; 32", "  (let ((result\
    \ (string)))\n    (let ((temp (string)))\n      (let ((i 0))\n        (while (<\
    \ i decimal)\n          (let ((digit (string-char temp i)))\n            (setf\
    \ result (concat result digit)))\n          (setf temp (string-append \"0\" (string-char\
    \ temp i))))\n        (setf temp (string-append \"1\" (string-char temp i))))\n\
    \      (setf result (concat \"db\" result temp)))\n    result))\n\n;; You will\
    \ be given a string in binary format and your task is to convert it to decimal.\n\
    ;; The function should return a number.\n;; Examples:\n;; >>> (binary_to_decimal\
    \ \"db1111db\")\n;; 15\n;; >>> (binary_to_decimal \"db100000db\")\n;; 32", " \
    \ (let ((result (string)))\n    (let ((decimal-str (string-append \"db\" decimal)))\n\
    \      (let ((binary-str (string-append \"0\" decimal-str)))\n        (let ((i\
    \ 0))\n          (while (< i decimal)\n            (let ((digit (string-char binary-str\
    \ i)))\n              (let ((next-digit (string-char (string-substring binary-str\
    \ i (+ 1 i)))))\n                (string-set! result (string-append result digit))))\n\
    \              (setq i (+ 1 i)))\n            (string-set! result (string-append\
    \ result \"0\")))))\n    result))\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\
    \n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n;; >>> (decimal_to_binary\
    \ -1)\n;; \"db
  "  (let ((result (string)))\n    (let ((n (string-append \"db\" decimal)))\n   \
    \   (let ((i 0))\n        (while (< i (string-length n))\n          (let ((c (string-ref\
    \ n i)))\n            (if (char=? c #\"0\")\n              (string-set! result\
    \ (string-insert! result \"0\") i)\n              (if (char=? c #\"1\")\n    \
    \            (string-set! result (string-insert! result \"1\") i)\n          \
    \      (string-insert! result \"0\")\n                (string-insert! result \"\
    1\")\n                (string-insert! result \"0\")\n                (string-insert!\
    \ result \"1\")\n                (string-insert! result \"0\")\n             \
    \   (string-insert! result \"1\")\n                (string-insert! result \"0\"\
    )\n                (string-insert! result \"1\")\n                (string-insert!\
    \ result \"0\")\n                (string-insert! result \"1\")\n             \
    \   (string-insert! result \"0\")\n                (string-insert! result \"1\"\
    )\n                (string-insert! result \"0\")\n                (string-insert!\
    \ result \"1\")\n                (string-insert! result \"0\")\n             \
    \   (string-insert! result \"1\")\n                (string-insert! result \"0\"\
    )\n                (string-insert! result \"1\")\n                (string-insert!\
    \ result \"0\")\n                (string-insert! result \"1\")\n             \
    \   (string-insert! result \"0\")\n                (string-insert! result \"1\"\
    )\n                (string-insert! result \"0\")\n                (string-insert!\
    \ result \"1\")\n                (string-insert! result \"0\")\n             \
    \   (string-insert! result \"1\")\n                (string-insert! result \"0\"\
    )\n                (string-insert! result \"1\")\n                (string-insert!\
    \ result \"0\")\n                (string-insert! result \"1\")\n             \
    \   (string-insert! result \"0\")\n                (string-insert! result \"1\"\
    )\n                (string-insert! result \"0\")\n                (string-insert!\
    \ result \"1\")\n                (string-insert! result \"0\")\n             \
    \   (string-insert!", "  (let ((result \"\"))\n    (let ((digit decimal))\n  \
    \    (let ((carry 0))\n        (while (< digit 2)\n          (let ((next_digit\
    \ (remainder digit 2)))\n            (set! carry (+ carry next_digit))\n     \
    \       (set! digit (remainder digit 2))\n            (set! digit (remainder digit\
    \ 1))\n            (set! digit (remainder digit 0))\n            (set! digit (remainder\
    \ digit 7))\n            (set! digit (remainder digit 6))\n            (set! digit\
    \ (remainder digit 5))\n            (set! digit (remainder digit 4))\n       \
    \     (set! digit (remainder digit 3))\n            (set! digit (remainder digit\
    \ 2))\n            (set! digit (remainder digit 1))\n            (set! digit (remainder\
    \ digit 0)))\n          (set! digit (remainder digit 7))\n          (set! digit\
    \ (remainder digit 6))\n          (set! digit (remainder digit 5))\n         \
    \ (set! digit (remainder digit 4))\n          (set! digit (remainder digit 3))\n\
    \          (set! digit (remainder digit 2))\n          (set! digit (remainder\
    \ digit 1))\n          (set! digit (remainder digit 0)))\n        (set! digit\
    \ (remainder digit 7))\n        (set! digit (remainder digit 6))\n        (set!\
    \ digit (remainder digit 5))\n        (set! digit (remainder digit 4))\n     \
    \   (set! digit (remainder digit 3))\n        (set! digit (remainder digit 2))\n\
    \        (set! digit (remainder digit 1))\n        (set! digit (remainder digit\
    \ 0)))\n        (set! digit (remainder digit 7))\n        (set! digit (remainder\
    \ digit 6))\n        (set! digit (remainder digit 5))\n        (set! digit (remainder\
    \ digit 4))\n        (set! digit (remainder digit 3))\n        (set! digit (remainder\
    \ digit 2))\n        (set! digit (remainder digit 1))\n        (set! digit (remainder\
    \ digit 0", "  (let ((result \"\"))\n    (let ((digit decimal))\n      (let ((remainder\
    \ (modulo digit 2)))\n        (if (zero? remainder)\n          (append result\
    \ \"0\")\n          (append result \"1\"))))\n    (append result \"db\")\n   \
    \ (append result (string-append (map (lambda (x) (string-append \"0\" x)) (string-split\
    \ \"1\" digit)))\n      (string-append \"0\" (string-join \"1\" (map (lambda (x)\
    \ (string-join \"0\" x)) (string-split \"1\" digit))))))\n)\n\n;; You will be\
    \ given a string in binary format and your task is to convert it to decimal form.\n\
    ;; The function should return a number.\n;; Examples:\n;; >>> (binary_to_decimal\
    \ \"11111111\")\n;; 15\n;; >>> (binary_to_decimal \"100000\")\n;; 32", "  (let\
    \ ((result (make-string decimal/width 2)))\n    (let ((i 0))\n      (while (<\
    \ i decimal/width)\n        (let ((digit (modulo decimal i 2)))\n          (set-char!\
    \ result i digit)\n          (set-char! result i '1)\n          (set-char! result\
    \ i '0)\n          (set-char! result i '1)\n          (set-char! result i '0)\n\
    \          (set-char! result i '1)\n          (set-char! result i '0)\n      \
    \    (set-char! result i '1)\n          (set-char! result i '0)\n          (set-char!\
    \ result i '1)\n          (set-char! result i '0)\n          (set-char! result\
    \ i '1)\n          (set-char! result i '0)\n          (set-char! result i '1)\n\
    \          (set-char! result i '0)\n          (set-char! result i '1)\n      \
    \    (set-char! result i '0)\n          (set-char! result i '1)\n          (set-char!\
    \ result i '0)\n          (set-char! result i '1)\n          (set-char! result\
    \ i '0)\n          (set-char! result i '1)\n          (set-char! result i '0)\n\
    \          (set-char! result i '1)\n          (set-char! result i '0)\n      \
    \    (set-char! result i '1)\n          (set-char! result i '0)\n          (set-char!\
    \ result i '1)\n          (set-char! result i '0)\n          (set-char! result\
    \ i '1)\n          (set-char! result i '0)\n          (set-char! result i '1)\n\
    \          (set-char! result i '0)\n          (set-char! result i '1)\n      \
    \    (set-char! result i '0)\n          (set-char! result i '1)\n          (set-char!\
    \ result i '0)\n          (set-char! result i '1)\n          (set-char! result\
    \ i '0)", "  (let ((result \"\"))\n    (let ((decimal-number decimal))\n     \
    \ (let ((decimal-number-length (length decimal-number)))\n        (for-each (lambda\
    \ (digit)\n                    (let ((digit-value (string->number digit)))\n \
    \                     (if (zero? digit-value)\n                        (append\
    \ result \"0\")\n                        (append result (string->number (modulo\
    \ decimal-number digit-value))))))\n                  (string->number decimal-number))\n\
    \          (append result \"db\")))))\n\n;; >>> (decimal_to_binary 15)\n;; \"\
    db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary\
    \ 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;;\
    \ >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n\
    ;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary\
    \ 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;;\
    \ >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n\
    ;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary\
    \ 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;;\
    \ >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n\
    ;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary\
    \ 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;;\
    \ >>> (decimal_to_binary 32)\n;;", "  (let ((result (make-string decimal/width\
    \ 1)))\n    (let ((i 0))\n      (while (< i decimal/width)\n        (let ((digit\
    \ (modulo decimal/width i)))\n          (set-char! result i '1)\n          (set-char!\
    \ result i '0)\n          (set-char! result i '0)\n          (set-char! result\
    \ i '1)\n          (set-char! result i '0)\n          (set-char! result i '0)\n\
    \          (set-char! result i '1)\n          (set-char! result i '0)\n      \
    \    (set-char! result i '0)\n          (set-char! result i '1)\n          (set-char!\
    \ result i '0)\n          (set-char! result i '0)\n          (set-char! result\
    \ i '1)\n          (set-char! result i '0)\n          (set-char! result i '0)\n\
    \          (set-char! result i '1)\n          (set-char! result i '0)\n      \
    \    (set-char! result i '0)\n          (set-char! result i '1)\n          (set-char!\
    \ result i '0)\n          (set-char! result i '0)\n          (set-char! result\
    \ i '1)\n          (set-char! result i '0)\n          (set-char! result i '0)\n\
    \          (set-char! result i '1)\n          (set-char! result i '0)\n      \
    \    (set-char! result i '0)\n          (set-char! result i '1)\n          (set-char!\
    \ result i '0)\n          (set-char! result i '0)\n          (set-char! result\
    \ i '1)\n          (set-char! result i '0)\n          (set-char! result i '0)\n\
    \          (set-char! result i '1)\n          (set-char! result i '0)\n      \
    \    (set-char! result i '0)\n          (set-char! result i '1)\n          (set-char!\
    \ result i '0)\n          (set-char! result i '", "  (let ((result \"\"))\n  \
    \  (let ((digit decimal))\n      (while (< digit 2)\n        (let ((next_digit\
    \ (remainder digit 2)))\n          (let ((next_digit_char (char->integer next_digit)))\n\
    \            (result (concat \"1\" next_digit_char)\n              (concat \"\
    0\" result)))\n          (digit (quotient digit 2)))\n        (result (concat\
    \ \"1\" result))))\n    (concat \"0\" result)))\n\n;; You will be given a string\
    \ in binary format and your task is to convert it to decimal\n;; form. The function\
    \ should return a number.\n;; Examples:\n;; >>> (binary_to_decimal \"1101\")\n\
    ;; 15\n;; >>> (binary_to_decimal \"110101\")\n;; 17", "  (let ((result \"\"))\n\
    \    (let ((digit decimal))\n      (while (< digit 2)\n        (let ((next_digit\
    \ (remainder digit 2)))\n          (let ((next_digit_char (modulo next_digit 2)))\n\
    \            (result (concat \"1\" next_digit_char)\n              (if (< digit\
    \ 2)\n                (concat \"0\" result)\n                result))))\n    \
    \    (setq digit (quotient digit 2)))\n      (if (< digit 1)\n        (concat\
    \ \"0\" result)\n        result))))\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\
    \n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n;; >>> (decimal_to_binary\
    \ -1)\n;; \"db
  "  (let ((result (string)))\n    (let ((digits (string-split \"0123456789\" decimal)))\n\
    \      (let ((length digits))\n        (if (empty? digits)\n          \"0\"\n\
    \          (let ((i 0))\n            (while (< i length)\n              (let ((digit\
    \ (first digits)))\n                (let ((next-digit (second digits)))\n    \
    \              (let ((next-length (length digits)))\n                    (if (<\
    \ next-length 2)\n                      (let ((next-result (string-append \"0\"\
    \ digit)))\n                        (string-append next-result next-digit))\n\
    \                      (let ((next-result (string-append \"1\" digit)))\n    \
    \                    (string-append next-result next-digit))))\n             \
    \       (string-append next-result digit)))))))\n        (string-append \"0\"\
    \ result))))))\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary\
    \ 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;;\
    \ >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n\
    ;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary\
    \ 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;;\
    \ >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n\
    ;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary\
    \ 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;;\
    \ >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n\
    ;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000", "  (let ((result\
    \ (string)))\n    (let ((temp (string)))\n      (let ((i 0))\n        (do ((i\
    \ (+ 1)))\n          ((= i decimal))\n          (setq result (concat result \"\
    1\"))))\n      (setq temp (string-append \"0\" result))\n      (setq result (string-append\
    \ temp \"1\" result))\n      (setq temp (string-append \"0\" result))\n      (setq\
    \ result (string-append temp \"1\" result))\n      (setq temp (string-append \"\
    0\" result))\n      (setq result (string-append temp \"1\" result))))\n  (decimal_to_binary\
    \ decimal))\n\n;; You will be given a string in binary format and your task is\
    \ to convert it to decimal.\n;; The function should return a number.\n;; Examples:\n\
    ;; >>> (binary_to_decimal \"1101\")\n;; 15\n;; >>> (binary_to_decimal \"110111\"\
    )\n;; 17", "  (let ((result (make-string decimal/width)))\n    (let ((i 0))\n\
    \      (while (< decimal i)\n        (let ((digit decimal/1))\n          (set/char\
    \ result i '1)\n          (set/char result i '0)\n          (set/char result i\
    \ '0)\n          (set/char result i '1)\n          (set/char result i '0)\n  \
    \        (set/char result i '0)\n          (set/char result i '1)\n          (set/char\
    \ result i '0)\n          (set/char result i '0)\n          (set/char result i\
    \ '1)\n          (set/char result i '0)\n          (set/char result i '0)\n  \
    \        (set/char result i '1)\n          (set/char result i '0)\n          (set/char\
    \ result i '0)\n          (set/char result i '1)\n          (set/char result i\
    \ '0)\n          (set/char result i '0)\n          (set/char result i '1)\n  \
    \        (set/char result i '0)\n          (set/char result i '0)\n          (set/char\
    \ result i '1)\n          (set/char result i '0)\n          (set/char result i\
    \ '0)\n          (set/char result i '1)\n          (set/char result i '0)\n  \
    \        (set/char result i '0)\n          (set/char result i '1)\n          (set/char\
    \ result i '0)\n          (set/char result i '0)\n          (set/char result i\
    \ '1)\n          (set/char result i '0)\n          (set/char result i '0)\n  \
    \        (set/char result i '1)\n          (set/char result i '0)\n          (set/char\
    \ result i '0)\n          (set/char result i '1)\n          (set/char result i\
    \ '0)\n          (set/char result i '0)\n          (set/char result i '1)\n  \
    \        (set/char result i '0)\n          (set/char result i '0)\n          (set/char\
    \ result i '1)", "  (let ((result \"\"))\n    (let ((digit decimal))\n      (let\
    \ ((carry 0))\n        (while (< digit 2)\n          (let ((next_digit (remainder\
    \ digit 2)))\n            (set! carry (+ next_digit carry))\n            (set!\
    \ digit (remainder digit 2))\n            (set! digit (if (< digit 2) \"0\" \"\
    1\"))\n            (set! result (+ (if (< digit 2) \"0\" \"1\") result))\n   \
    \       )\n        )\n        (set! result (+ (if (< digit 2) \"0\" \"1\") result))\n\
    \        (set! result (+ \"0\" carry))\n      )\n    )\n    (if (< decimal 2)\n\
    \      \"0\"\n      (concat \"1\" result)\n    )\n  )\n)\n\n;; You will be given\
    \ a string in binary format and your task is to convert it to decimal.\n;; The\
    \ function should return a number.\n;; Examples:\n;; >>> (binary_to_decimal \"\
    111111\")\n;; 15\n;; >>> (binary_to_decimal \"100000\")\n;; 32", "  (let ((result\
    \ \"\"))\n    (let ((digit decimal))\n      (while (< digit 2)\n        (let ((next_digit\
    \ (remainder digit 2)))\n          (let ((next_digit_char (char->integer next_digit)))\n\
    \            (result (concat \"1\" result))))\n        (let ((next_digit_char\
    \ (char->integer digit)))\n          (result (concat \"0\" result))))\n      (result\
    \ (concat \"1\" result))))\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n\
    ;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n;; >>> (decimal_to_binary -1)\n\
    ;; \"db11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
  "  (let ((result \"\"))\n    (let ((digit decimal))\n      (while (< digit 2)\n\
    \        (let ((next_digit (remainder digit 2)))\n          (let ((next_digit_char\
    \ (char->integer next_digit)))\n            (result (concat \"1\" result))))\n\
    \        (let ((next_digit_char (char->integer digit)))\n          (result (concat\
    \ \"0\" result))))\n      (result (concat \"1\" result))))\n)\n\n;; You will be\
    \ given a string in binary format and your task is to convert it to decimal.\n\
    ;; The function should return a number.\n;; Examples:\n;; >>> (binary_to_decimal\
    \ \"111111\")\n;; 15\n;; >>> (binary_to_decimal \"100000\")\n;; 32", "  (let ((result\
    \ (string)))\n    (let ((i 0))\n      (while (< decimal 0)\n        (let ((digit\
    \ (modulo decimal 2)))\n          (string-set! result (string-append \"0\" digit)\
    \ i)\n          (set! i (+ 1 i))\n          (decimal (/ decimal 2))\n        )\n\
    \      )\n      (string-set! result \"db\" i)\n    )\n    result\n  )\n)\n\n;;\
    \ You will be given a number in binary form and your task is to convert it to\n\
    ;; decimal form. The function should return a string, with each character representing\
    \ a decimal\n;; number. Each character in the string will be '0' or '1'.\n;; There\
    \ will be an extra couple of characters 'db' at the beginning and at the end of\
    \ the string.\n;; The extra characters are there to help with the format.\n;;\
    \ Examples:\n;; >>> (binary_to_decimal \"11111111\")\n;; \"15\"\n;; >>> (binary_to_decimal\
    \ \"100000\")\n;; \"32\"", "  (let ((result (string)))\n    (let ((decimal-value\
    \ decimal))\n      (let ((decimal-value-length (length decimal-value)))\n    \
    \    (for-each (lambda (character)\n                   (let ((character-value\
    \ (char-ci character)))\n                     (if (eq character-value #\\0)\n\
    \                       (append result #\\0)\n                       (append result\
    \ (char-ci character-value))))\n                   (string-append result #\\0))\n\
    \                  (string-append result #\\1))))))\n\n;; >>> (decimal_to_binary\
    \ 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n;; >>>\
    \ (decimal_to_binary -1)\n;; \"db
  "  (let ((result (string)))\n    (let ((n (decimal)))\n      (while (< n 2)\n  \
    \      (let ((digit (modulo n 2)))\n          (string-append (string-append \"\
    0\" digit) result)\n          (setq n (quotient n 2)))\n        (setq n (quotient\
    \ n 2)))\n      (string-append \"1\" result)))\n)\n\n;; You will be given a string\
    \ in binary format and your task is to convert it to decimal.\n;; The function\
    \ should return a number.\n;; Examples:\n;; >>> (binary_to_decimal \"111111\"\
    )\n;; 15\n;; >>> (binary_to_decimal \"100000\")\n;; 32", "  (let ((result (string)))\n\
    \    (let ((temp (string)))\n      (let ((i 0))\n        (while (< i decimal)\n\
    \          (let ((digit (string-char result i)))\n            (if (string-char\
    \ temp i)\n              (let ((next_digit (string-char temp i)))\n          \
    \      (string-set! result (string-append result digit) next_digit))\n       \
    \       (string-set! result digit))))\n        (string-set! result \"1\"))))\n\
    \  result)\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary\
    \ 32)\n;; \"db100000db\"\n;; >>> (decimal_to_binary -1)\n;; \"db
  "  (let ((result (string)))\n    (let ((temp (string)))\n      (let ((i 0))\n  \
    \      (while (< i decimal)\n          (let ((digit (string-char temp i)))\n \
    \           (if (string-char result digit)\n              (let ((temp (string-concat\
    \ \"1\" temp)))\n                (let ((i (1+ i)))\n                  (set! result\
    \ (string-concat result temp))))\n              (let ((i (1+ i)))\n          \
    \      (set! temp (string-concat \"0\" temp)))))))\n      (set! result (string-concat\
    \ \"0\" result))))\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary\
    \ 32)\n;; \"db100000db\"\n;; >>> (decimal_to_binary -1)\n;; \"db
  "  (let ((result \"\"))\n    (let ((decimal-value decimal))\n      (while (< decimal-value\
    \ 0)\n        (let ((remainder decimal-value))\n          (let ((quotient remainder))\n\
    \            (let ((digit quotient))\n              (let ((remainder-value remainder))\n\
    \                (let ((quotient-value remainder-value))\n                  (let\
    \ ((digit-value quotient-value))\n                    (set! digit-value (remainder-value\
    \ / 2))\n                    (set! digit-value (remainder-value % 2))\n      \
    \              (set! digit-value (quotient-value / 2))\n                    (set!\
    \ digit-value (quotient-value % 2))\n                    (set! digit-value (remainder-value\
    \ / 2))\n                    (set! digit-value (remainder-value % 2))\n      \
    \              (set! digit-value (quotient-value / 2))\n                    (set!\
    \ digit-value (quotient-value % 2))\n                    (set! digit-value (remainder-value\
    \ / 2))\n                    (set! digit-value (remainder-value % 2))\n      \
    \              (set! digit-value (quotient-value / 2))\n                    (set!\
    \ digit-value (quotient-value % 2))\n                    (set! digit-value (remainder-value\
    \ / 2))\n                    (set! digit-value (remainder-value % 2))\n      \
    \              (set! digit-value (quotient-value / 2))\n                    (set!\
    \ digit-value (quotient-value % 2))\n                    (set! digit-value (remainder-value\
    \ / 2))\n                    (set! digit-value (remainder-value % 2))\n      \
    \              (set! digit-value (quotient-value / 2))\n                    (set!\
    \ digit-value (quotient-value % 2))\n                    (set! digit-value (remainder-value\
    \ / 2))\n                    (set! digit-value (remainder-value % 2))\n      \
    \              (set! digit-value (quotient-value / 2))\n                    (set!\
    \ digit-value (quotient-value % 2))\n                    (set! digit", "  (let\
    \ ((result \"\"))\n    (let ((digit decimal))\n      (let ((remainder 0))\n  \
    \      (while (< digit 2)\n          (let ((quotient (divide digit 2)))\n    \
    \        (let ((remainder (modulo digit 2)))\n              (set! remainder (remainder\
    \ + quotient))\n              (set! quotient 0)\n              (set! digit (remainder)))\n\
    \            (set! remainder 0))\n          (set! digit 0)\n        (set! remainder\
    \ 0))\n      (set! digit 0)\n      (set! remainder 0)\n      (let ((quotient (divide\
    \ decimal 2)))\n        (let ((remainder (modulo decimal 2)))\n          (set!\
    \ remainder (remainder + quotient))\n          (set! quotient 0)\n          (set!\
    \ digit (remainder)))\n        (set! remainder 0)\n        (set! digit 0)\n  \
    \      (set! remainder 0)\n        (let ((quotient (divide decimal 2)))\n    \
    \      (let ((remainder (modulo decimal 2)))\n            (set! remainder (remainder\
    \ + quotient))\n            (set! quotient 0)\n            (set! digit (remainder)))\n\
    \          (set! remainder 0)\n          (set! digit 0)\n          (set! remainder\
    \ 0)\n          (let ((quotient (divide decimal 2)))\n            (let ((remainder\
    \ (modulo decimal 2)))\n              (set! remainder (remainder + quotient))\n\
    \              (set! quotient 0)\n              (set! digit (remainder)))\n  \
    \          (set! remainder 0)\n            (set! digit 0)\n            (set! remainder\
    \ 0)\n            (let ((quotient (divide decimal 2)))\n              (let ((remainder\
    \ (modulo decimal 2)))\n                (set! remainder (remainder + quotient))\n\
    \                (set! quotient 0)\n                (set! digit (remainder)))\n\
    \              (set! remainder 0)\n              (set! digit 0)\n            \
    \  (set! remainder 0)\n              (let ((quotient (divide decimal 2)))\n  \
    \              (let ((remainder (modulo decimal 2)))\n                  (set!",
  "  (let ((result (string)))\n    (let ((digits (string-split \"0123456789\" decimal)))\n\
    \      (let ((n (length digits)))\n        (for-each (lambda (digit)\n       \
    \             (let ((n (length result)))\n                      (let ((n (length\
    \ digit)))\n                        (let ((n (length result)))\n             \
    \             (let ((n (length digit)))\n                            (let ((n\
    \ (length result)))\n                              (let ((n (length digit)))\n\
    \                                (let ((n (length result)))\n                \
    \                  (let ((n (length digit)))\n                               \
    \     (let ((n (length result)))\n                                      (let ((n\
    \ (length digit)))\n                                        (let ((n (length result)))\n\
    \                                          (let ((n (length digit)))\n       \
    \                                     (let ((n (length result)))\n           \
    \                                   (let ((n (length digit)))\n              \
    \                                  (let ((n (length result)))\n              \
    \                                    (let ((n (length digit)))\n             \
    \                                       (let ((n (length result)))\n         \
    \                                             (let ((n (length digit)))\n    \
    \                                                    (let ((n (length result)))\n\
    \                                                          (let ((n (length digit)))\n\
    \                                                            (let ((n (length\
    \ result)))\n                                                              (let\
    \ ((n (length digit)))\n                                                     \
    \           (let ((n (length result)))\n                                     \
    \                             (let ((n (length digit)))\n                    \
    \                                                (let ((n (length result)))\n\
    \                                                                      (let ((n\
    \ (length digit)))\n                                                         \
    \               (let ((n (length result)))\n                                 \
    \                                         (let ((n (length digit)))\n        \
    \                                                                    (let ((n\
    \ (length result)))\n                                                        \
    \                      (let ((n (length digit)))\n                           \
    \                                                     (let ((n (length result)))\n\
    \                                                                            \
    \        (let ((n (length digit)))\n                                         \
    \                                             (let ((n (length result)))\n   \
    \                                                                            \
    \         (let ((n (length digit)))\n                                        \
    \                                                  (let ((n (length result)))\n\
    \                                                                            \
    \                 (let ((", "  (let ((result \"\"))\n    (let ((digit decimal))\n\
    \      (let ((remainder 0))\n        (while (< digit 2)\n          (let ((quotient\
    \ (divide digit 2)))\n            (let ((remainder (modulo digit 2)))\n      \
    \        (set! remainder (remainder * 2))\n              (set! quotient (quotient\
    \ * 2))\n              (set! digit (remainder))\n              (set! remainder\
    \ 0))\n            (set! remainder 1))\n          (set! digit (quotient))\n  \
    \        (set! remainder 0))\n        (set! remainder 1))\n      (set! digit 0)\n\
    \      (set! remainder 0)\n      (while (<= remainder 2)\n        (let ((quotient\
    \ (divide remainder 2)))\n          (let ((remainder (modulo remainder 2)))\n\
    \            (set! remainder (remainder * 2))\n            (set! quotient (quotient\
    \ * 2))\n            (set! digit (remainder))\n            (set! remainder 0))\n\
    \          (set! remainder 1))\n        (set! digit (quotient))\n        (set!\
    \ remainder 0))\n      (set! digit (remainder))\n      (set! remainder 0)\n  \
    \    (while (<= remainder 1)\n        (let ((quotient (divide remainder 1)))\n\
    \          (let ((remainder (modulo remainder 1)))\n            (set! remainder\
    \ (remainder * 2))\n            (set! quotient (quotient * 2))\n            (set!\
    \ digit (remainder))\n            (set! remainder 0))\n          (set! remainder\
    \ 1))\n        (set! digit (quotient))\n        (set! remainder 0))\n      (set!\
    \ digit (remainder))\n      (set! remainder 0)\n      (append result \"0\"))))\n\
    \  (if (string= decimal \"0\")\n    \"0\"\n    (let ((result (decimal_to_binary\
    \ decimal)))\n      (if (string= result \"0\")\n        \"0\"\n        result))))\n",
  "  (let ((result \"\"))\n    (let ((digit decimal))\n      (let ((remainder decimal))\n\
    \        (while (< digit 2)\n          (let ((quotient digit))\n            (let\
    \ ((remainder (remainder (- digit quotient))))\n              (let ((quotient\
    \ (quotient (- digit quotient))))\n                (let ((remainder (remainder\
    \ (- digit quotient))))\n                  (let ((quotient (quotient (- digit\
    \ quotient))))\n                    (let ((remainder (remainder (- digit quotient))))\n\
    \                      (let ((quotient (quotient (- digit quotient))))\n     \
    \                   (let ((remainder (remainder (- digit quotient))))\n      \
    \                    (let ((quotient (quotient (- digit quotient))))\n       \
    \                     (let ((remainder (remainder (- digit quotient))))\n    \
    \                          (let ((quotient (quotient (- digit quotient))))\n \
    \                               (let ((remainder (remainder (- digit quotient))))\n\
    \                                  (let ((quotient (quotient (- digit quotient))))\n\
    \                                    (let ((remainder (remainder (- digit quotient))))\n\
    \                                      (let ((quotient (quotient (- digit quotient))))\n\
    \                                        (let ((remainder (remainder (- digit\
    \ quotient))))\n                                          (let ((quotient (quotient\
    \ (- digit quotient))))\n                                            (let ((remainder\
    \ (remainder (- digit quotient))))\n                                         \
    \     (let ((quotient (quotient (- digit quotient))))\n                      \
    \                          (let ((remainder (remainder (- digit quotient))))\n\
    \                                                  (let ((quotient (quotient (-\
    \ digit quotient))))\n                                                    (let\
    \ ((remainder (remainder (- digit quotient))))\n                             \
    \                         (let ((quotient (quotient (- digit quotient))))\n  \
    \                                                      (let ((remainder (remainder\
    \ (- digit quotient))))\n                                                    \
    \      (let ((quotient (quotient (- digit quotient))))\n                     \
    \                                       ", "  (let ((result \"\"))\n    (let ((i\
    \ decimal))\n      (while (< i 0)\n        (let ((digit (modulo (/ i 2))))\n \
    \         (let ((bit (modulo (/ i 2))))\n            (let ((bit-char (modulo (/\
    \ bit 2))))\n              (let ((bit-char-char (modulo (/ bit 2))))\n       \
    \         (let ((bit-char-char-char (modulo (/ bit 2))))\n                  (let\
    \ ((bit-char-char-char-char (modulo (/ bit 2))))\n                    (let ((bit-char-char-char-char-char\
    \ (modulo (/ bit 2))))\n                      (let ((bit-char-char-char-char-char-char\
    \ (modulo (/ bit 2))))\n                        (let ((bit-char-char-char-char-char-char-char\
    \ (modulo (/ bit 2))))\n                          (let ((bit-char-char-char-char-char-char-char-char\
    \ (modulo (/ bit 2))))\n                            (let ((bit-char-char-char-char-char-char-char-char-char\
    \ (modulo (/ bit 2))))\n                              (let ((bit-char-char-char-char-char-char-char-char-char-char\
    \ (modulo (/ bit 2))))\n                                (let ((bit-char-char-char-char-char-char-char-char-char-char-char\
    \ (modulo (/ bit 2))))\n                                  (let ((bit-char-char-char-char-char-char-char-char-char-char-char-char\
    \ (modulo (/ bit 2))))\n                                    (let ((bit-char-char-char-char-char-char-char-char-char-char-char-char-char\
    \ (modulo (/ bit 2))))\n                                      (let ((bit-char-char-char-char-char-char-char-char-char-char-char-char-char-char\
    \ (modulo (/ bit 2))))\n                                        (let ((bit-char-char-char-char-char-char-char-char-char-char-char-char-char-char-char\
    \ (modulo (/ bit 2))))\n                                          (let ((bit-char-char-char-char-char",
  "  (let ((result (string)))\n    (let ((digit decimal))\n      (let ((i 0))\n  \
    \      (while (< i 10)\n          (let ((next_digit (modulo digit 2)))\n     \
    \       (if (even? i)\n              (let ((next_digit (modulo digit 2)))\n  \
    \              (if (even? i)\n                  (let ((next_digit (modulo digit\
    \ 2)))\n                    (if (even? i)\n                      (let ((next_digit\
    \ (modulo digit 2)))\n                        (if (even? i)\n                \
    \          (let ((next_digit (modulo digit 2)))\n                            (if\
    \ (even? i)\n                              (let ((next_digit (modulo digit 2)))\n\
    \                                (if (even? i)\n                             \
    \     (let ((next_digit (modulo digit 2)))\n                                 \
    \   (if (even? i)\n                                      (let ((next_digit (modulo\
    \ digit 2)))\n                                        (if (even? i)\n        \
    \                                  (let ((next_digit (modulo digit 2)))\n    \
    \                                        (if (even? i)\n                     \
    \                         (let ((next_digit (modulo digit 2)))\n             \
    \                                   (if (even? i)\n                          \
    \                        (let ((next_digit (modulo digit 2)))\n              \
    \                                      (if (even? i)\n                       \
    \                               (let ((next_digit (modulo digit 2)))\n       \
    \                                                 (if (even? i)\n            \
    \                                              (let ((next_digit (modulo digit\
    \ 2)))\n                                                            (if (even?\
    \ i)\n                                                              (let ((next_digit\
    \ (modulo digit 2)))\n                                                       \
    \         (if (even? i)\n                                                    \
    \              (let ((next_digit (modulo digit 2)))\n                        \
    \                                            (if (even? i)\n                 \
    \                                                     (let ((next_digit (modulo\
    \ digit 2)))\n                                                               \
    \         (if (even? i)\n                                                    \
    \                      (let ((next_digit (modulo digit 2)))\n                \
    \                                                            (if (even? i)\n \
    \                                                                             ",
  "  (let ((result (string)))\n    (let ((digit decimal))\n      (while (< digit 2)\n\
    \        (let ((next_digit (remainder digit 2)))\n          (string-append (string-append\
    \ \"1\" \"0\") (string-append \"1\" \"0\"))\n          (string-append \"1\" \"\
    0\"))\n        (string-append \"1\" \"0\"))\n      (string-append \"1\" \"0\"\
    ))\n    (string-append \"1\" \"0\"))\n  result)\n\n;; >>> (decimal_to_binary 15)\n\
    ;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n;; >>> (decimal_to_binary\
    \ -1)\n;; \"db
  "  (let ((result \"\"))\n    (let ((digit decimal))\n      (let ((carry 0))\n  \
    \      (while (< digit 2)\n          (let ((next_digit (remainder digit 2)))\n\
    \            (set! carry (+ carry next_digit))\n            (set! digit (remainder\
    \ digit 2))\n            (set! digit (if (< digit 2) 1 0))\n          )\n    \
    \      (set! digit (if (< digit 2) 1 0))\n        )\n        (set! digit (if (<\
    \ digit 2) 1 0))\n      )\n      (set! digit (if (< digit 2) 1 0))\n      (set!\
    \ digit (if (< digit 2) 1 0))\n      (set! digit (if (< digit 2) 1 0))\n     \
    \ (set! digit (if (< digit 2) 1 0))\n      (set! digit (if (< digit 2) 1 0))\n\
    \      (set! digit (if (< digit 2) 1 0))\n      (set! digit (if (< digit 2) 1\
    \ 0))\n      (set! digit (if (< digit 2) 1 0))\n      (set! digit (if (< digit\
    \ 2) 1 0))\n      (set! digit (if (< digit 2) 1 0))\n      (set! digit (if (<\
    \ digit 2) 1 0))\n      (set! digit (if (< digit 2) 1 0))\n      (set! digit (if\
    \ (< digit 2) 1 0))\n      (set! digit (if (< digit 2) 1 0))\n      (set! digit\
    \ (if (< digit 2) 1 0))\n      (set! digit (if (< digit 2) 1 0))\n      (set!\
    \ digit (if (< digit 2) 1 0))\n      (set! digit (if (< digit 2) 1 0))\n     \
    \ (set! digit (if (< digit 2) 1 0))\n      (set! digit (if (< digit 2) 1 0))\n\
    \      (set! digit (if (< digit 2) 1 0))\n      (set! digit (if (< digit 2) 1\
    \ 0))\n      (set! digit (if (< digit 2) 1 0))\n      (set! digit (if (< digit\
    \ 2) 1 0))\n      (set! digit (if (< digit 2) 1 0))\n      (set! digit (if (<\
    \ digit 2)", "  (let ((result \"\"))\n    (let ((digit decimal))\n      (while\
    \ (< digit 2)\n        (let ((next_digit (remainder digit 2)))\n          (let\
    \ ((next_digit_char (char->integer next_digit)))\n            (result (concat\
    \ \"1\" next_digit_char)\n              (concat \"0\" result))))\n        (setq\
    \ digit (quotient digit 2)))\n      (concat \"1\" result)))\n)\n\n;; You will\
    \ be given a string in binary format and your task is to convert it to decimal\n\
    ;; format. The function should return a number.\n;; Examples:\n;; >>> (binary_to_decimal\
    \ \"111111\")\n;; 15\n;; >>> (binary_to_decimal \"100000\")\n;; 32", "  (let ((result\
    \ \"\"))\n    (let ((i decimal))\n      (while (< i 0)\n        (let ((digit (modulo\
    \ (/ i 2))))\n          (let ((bit (modulo (/ i 2))))\n            (let ((bit-char\
    \ (modulo (/ bit 2))))\n              (let ((bit-char-char (modulo (/ bit 2))))\n\
    \                (let ((bit-char-char-char (modulo (/ bit 2))))\n            \
    \      (let ((bit-char-char-char-char (modulo (/ bit 2))))\n                 \
    \   (let ((bit-char-char-char-char-char (modulo (/ bit 2))))\n               \
    \       (let ((bit-char-char-char-char-char-char (modulo (/ bit 2))))\n      \
    \                  (let ((bit-char-char-char-char-char-char-char (modulo (/ bit\
    \ 2))))\n                          (let ((bit-char-char-char-char-char-char-char-char\
    \ (modulo (/ bit 2))))\n                            (let ((bit-char-char-char-char-char-char-char-char-char\
    \ (modulo (/ bit 2))))\n                              (let ((bit-char-char-char-char-char-char-char-char-char-char\
    \ (modulo (/ bit 2))))\n                                (let ((bit-char-char-char-char-char-char-char-char-char-char-char\
    \ (modulo (/ bit 2))))\n                                  (let ((bit-char-char-char-char-char-char-char-char-char-char-char-char\
    \ (modulo (/ bit 2))))\n                                    (let ((bit-char-char-char-char-char-char-char-char-char-char-char-char-char\
    \ (modulo (/ bit 2))))\n                                      (let ((bit-char-char-char-char-char-char-char-char-char-char-char-char-char-char\
    \ (modulo (/ bit 2))))\n                                        (let ((bit-char-char-char-char-char-char-char-char-char-char-char-char-char-char-char\
    \ (modulo (/ bit 2))))\n                                          (let ((bit-char-char-char-char-char",
  "  (let ((result (make-string decimal/width 1)))\n    (let ((i 0))\n      (while\
    \ (< decimal i)\n        (let ((digit decimal/1))\n          (set/char result\
    \ i '1)\n          (set/char result i '0)\n          (set/char result i '1)\n\
    \          (set/char result i '0)\n          (set/char result i '1)\n        \
    \  (set/char result i '0)\n          (set/char result i '1)\n          (set/char\
    \ result i '0)\n          (set/char result i '1)\n          (set/char result i\
    \ '0)\n          (set/char result i '1)\n          (set/char result i '0)\n  \
    \        (set/char result i '1)\n          (set/char result i '0)\n          (set/char\
    \ result i '1)\n          (set/char result i '0)\n          (set/char result i\
    \ '1)\n          (set/char result i '0)\n          (set/char result i '1)\n  \
    \        (set/char result i '0)\n          (set/char result i '1)\n          (set/char\
    \ result i '0)\n          (set/char result i '1)\n          (set/char result i\
    \ '0)\n          (set/char result i '1)\n          (set/char result i '0)\n  \
    \        (set/char result i '1)\n          (set/char result i '0)\n          (set/char\
    \ result i '1)\n          (set/char result i '0)\n          (set/char result i\
    \ '1)\n          (set/char result i '0)\n          (set/char result i '1)\n  \
    \        (set/char result i '0)\n          (set/char result i '1)\n          (set/char\
    \ result i '0)\n          (set/char result i '1)\n          (set/char result i\
    \ '0)\n          (set/char result i '1)\n          (set/char result i '0)\n  \
    \        (set/char result i '1)\n          (set/char result i '0)\n          (set/char\
    \ result i '1", "  (let ((result (string)))\n    (let ((decimal-value decimal))\n\
    \      (let ((decimal-value-length (length decimal-value)))\n        (for-each\
    \ (lambda (index)\n                    (let ((digit decimal-value (sub1 index)))\n\
    \                      (string-append (if (zero? digit) \"0\" (if (eq? digit 1)\
    \ \"1\" \"10\"))\n                                      result))\n           \
    \         (range 1 decimal-value-length))\n                  \"\")\n        (string-append\
    \ \"db\" result)))\n  result)\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\
    \n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary\
    \ 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;;\
    \ >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n\
    ;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary\
    \ 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;;\
    \ >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n\
    ;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary\
    \ 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n\n;;\
    \ >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n\
    ;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary\
    \ 32)\n;; \"db100000db\"\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;;\
    \ >>> (", "  (let ((result \"\"))\n    (let ((divisor (decimal)))\n      (while\
    \ (< divisor 2)\n        (let ((remainder (modulo divisor 2)))\n          (let\
    \ ((digit (divisor 2)))\n            (let ((subresult (string-append (string-append\
    \ \"0\" digit) result)))\n              (set! result (string-append subresult\
    \ (string-append \"1\" remainder)))\n            )\n          )\n        )\n \
    \     )\n    )\n    (string-append \"db\" result)\n  )\n)\n\n;; You will be given\
    \ a string in binary format and your task is to convert it to decimal\n;; format.\
    \ The function should return a number.\n;; Examples:\n;; >>> (binary_to_decimal\
    \ \"111111\")\n;; 15\n;; >>> (binary_to_decimal \"100000\")\n;; 32", "  (let ((result\
    \ (string)))\n    (let ((digit decimal))\n      (while (< digit #b0111111)\n \
    \       (let ((bit (logior digit #b1)))\n          (string-append (string-append\
    \ \"0\" bit) result))\n        (let ((digit (logior digit #b1)))\n          (string-append\
    \ \"1\" result))\n        (let ((digit (logior digit #b1)))\n          (string-append\
    \ \"0\" result))\n        (let ((digit (logior digit #b1)))\n          (string-append\
    \ \"1\" result))\n        (let ((digit (logior digit #b1)))\n          (string-append\
    \ \"0\" result))\n        (let ((digit (logior digit #b1)))\n          (string-append\
    \ \"1\" result))\n        (let ((digit (logior digit #b1)))\n          (string-append\
    \ \"0\" result))\n        (let ((digit (logior digit #b1)))\n          (string-append\
    \ \"1\" result))\n        (let ((digit (logior digit #b1)))\n          (string-append\
    \ \"0\" result))\n        (let ((digit (logior digit #b1)))\n          (string-append\
    \ \"1\" result))\n        (let ((digit (logior digit #b1)))\n          (string-append\
    \ \"0\" result))\n        (let ((digit (logior digit #b1)))\n          (string-append\
    \ \"1\" result))\n        (let ((digit (logior digit #b1)))\n          (string-append\
    \ \"0\" result))\n        (let ((digit (logior digit #b1)))\n          (string-append\
    \ \"1\" result))\n        (let ((digit (logior digit #b1)))\n          (string-append\
    \ \"0\" result))\n        (let ((digit (logior digit #b1)))\n          (string-append\
    \ \"1\" result))\n        (let ((digit (logior digit #b1)))\n          (string-append\
    \ \"0\" result))\n        (let ((digit (logior digit #b1)))\n          (string-append\
    \ \"1\" result))\n        (let ((digit (logior digit #b1)))\n          (string-append\
    \ \"0\" result))\n        (", "  (let ((result \"\"))\n    (let ((temp (string-append\
    \ \"db\" decimal)))\n      (for-each (lambda (x) (string-append result (string->number->string\
    \ x))) temp))\n    (string-append \"db\" result)))\n\n;; You will be given a number\
    \ in binary format and your task is to convert it to\n;; decimal format. The function\
    \ should return a string, with each character representing a decimal\n;; number.\
    \ Each character in the string will be '0' or '1'.\n;; There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n;;\
    \ The extra characters are there to help with the format.\n;; Examples:\n;; >>>\
    \ (binary_to_decimal \"db1111db\")\n;; \"15\"\n;; >>> (binary_to_decimal \"db100000db\"\
    )\n;; \"32\"", "  (let ((result \"\"))\n    (let ((temp (string-append \"db\"\
    \ decimal)))\n      (for-each (lambda (x) (string-append result (string->char-string\
    \ x))) temp))\n    (string-append \"db\" result)))\n\n;; You will be given a string\
    \ in binary format and your task is to convert it to decimal.\n;; The function\
    \ should return a number.\n;; Examples:\n;; >>> (binary_to_decimal \"11111111\"\
    )\n;; 15\n;; >>> (binary_to_decimal \"100000\")\n;; 32", "  (let ((result (string)))\n\
    \    (let ((digit decimal))\n      (while (< digit 2)\n        (let ((next_digit\
    \ (remainder digit 2)))\n          (string-append (if (< next_digit 1) \"0\" \"\
    1\") result)\n          (setq digit (remainder digit 2))\n        )\n        (string-append\
    \ \"1\" result)\n      )\n      (string-append \"0\" result)\n      (string-append\
    \ \"1\" result)\n    )\n    (string result)\n  )\n)\n\n;; You will be given a\
    \ number in binary form and your task is to convert it to\n;; decimal form. The\
    \ function should return a string, with each character representing a decimal\n\
    ;; number. Each character in the string will be '0' or '1'.\n;; There will be\
    \ an extra couple of characters 'db' at the beginning and at the end of the string.\n\
    ;; The extra characters are there to help with the format.\n;; Examples:\n;; >>>\
    \ (binary_to_decimal \"11111111\")\n;; \"15\"\n;; >>> (binary_to_decimal \"100000\"\
    )\n;; \"32\"", "  (let ((result \"\"))\n    (let ((temp (string-append \"db\"\
    \ decimal)))\n      (let ((i 0))\n        (while (< i 10)\n          (let ((digit\
    \ (string-char temp i)))\n            (setq result (string-append (if digit 1\
    \ #\"1\") (if digit 0 #\"0\"))\n              (setq i (1+ i))))))\n      (return\
    \ result)))\n)\n\n;; You will be given a string in binary format and your task\
    \ is to convert it to decimal.\n;; The function should return a number.\n;; Examples:\n\
    ;; >>> (binary_to_decimal \"11111111\")\n;; 15\n;; >>> (binary_to_decimal \"100000\"\
    )\n;; 32", "  (let ((result \"\"))\n    (let ((digit decimal))\n      (while (<\
    \ digit 2)\n        (let ((next_digit (remainder digit 2)))\n          (let ((next_digit_char\
    \ (char->integer next_digit)))\n            (setf result (concat result (char->integer\
    \ '1))))\n          (setf digit (sub1 digit))\n        )\n      )\n      (setf\
    \ result (concat \"db\" result))\n    )\n    result\n  )\n)\n\n;; You will be\
    \ given a string in binary format and your task is to convert it to decimal.\n\
    ;; The function should return a number.\n;; Examples:\n;; >>> (binary_to_decimal\
    \ \"111111\")\n;; 15\n;; >>> (binary_to_decimal \"100000\")\n;; 32", "  (let ((result\
    \ (string)))\n    (let ((temp (string)))\n      (let ((i 0))\n        (while (<\
    \ i decimal)\n          (let ((digit (string-char result i)))\n            (if\
    \ (string-char temp i)\n              (string-insert result \"1\")\n         \
    \     (string-insert result \"0\"))\n            (setq i (+ i 1))\n          \
    \  (string-insert temp \"1\")\n            (string-insert temp \"0\"))\n     \
    \     (setq i (+ i 1))\n          (string-insert temp \"1\")\n          (string-insert\
    \ temp \"0\"))\n        (string-insert result \"1\")\n        (string-insert result\
    \ \"0\")\n        (string-insert temp \"1\")\n        (string-insert temp \"0\"\
    ))\n      (string-insert result \"1\")\n      (string-insert result \"0\")\n \
    \     (string-insert temp \"1\")\n      (string-insert temp \"0\"))\n    (string-append\
    \ \"db\" result)))\n)\n\n;; You will be given a number in binary form and your\
    \ task is to convert it to\n;; decimal form. The function should return a string,\
    \ with each character representing a decimal\n;; number. Each character in the\
    \ string will be '0' or '1'.\n;; There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n;; The extra characters are\
    \ there to help with the format.\n;; Examples:\n;; >>> (binary_to_decimal \"11111111\"\
    )\n;; \"15\"\n;; >>> (binary_to_decimal \"100000\")\n;; \"32\"", "  (let ((result\
    \ (make-string decimal/width 1)))\n    (let ((i 0))\n      (while (< i decimal/width)\n\
    \        (let ((digit (modulo decimal/width i)))\n          (set-char! result\
    \ i '1)\n          (set-char! result i '0)\n          (set-char! result i '0)\n\
    \          (set-char! result i '1)\n          (set-char! result i '0)\n      \
    \    (set-char! result i '0)\n          (set-char! result i '1)\n          (set-char!\
    \ result i '0)\n          (set-char! result i '0)\n          (set-char! result\
    \ i '1)\n          (set-char! result i '0)\n          (set-char! result i '0)\n\
    \          (set-char! result i '1)\n          (set-char! result i '0)\n      \
    \    (set-char! result i '0)\n          (set-char! result i '1)\n          (set-char!\
    \ result i '0)\n          (set-char! result i '0)\n          (set-char! result\
    \ i '1)\n          (set-char! result i '0)\n          (set-char! result i '0)\n\
    \          (set-char! result i '1)\n          (set-char! result i '0)\n      \
    \    (set-char! result i '0)\n          (set-char! result i '1)\n          (set-char!\
    \ result i '0)\n          (set-char! result i '0)\n          (set-char! result\
    \ i '1)\n          (set-char! result i '0)\n          (set-char! result i '0)\n\
    \          (set-char! result i '1)\n          (set-char! result i '0)\n      \
    \    (set-char! result i '0)\n          (set-char! result i '1)\n          (set-char!\
    \ result i '0)\n          (set-char! result i '0)\n          (set-char! result\
    \ i '1)\n          (set-char! result i '0)\n          (set-char! result i '",
  "  (let ((result \"\"))\n    (let ((digit decimal))\n      (while (< digit 2)\n\
    \        (let ((next_digit (remainder digit 2)))\n          (let ((next_digit_char\
    \ (modulo next_digit 2)))\n            (result (concat \"1\" next_digit_char)\n\
    \              (concat \"0\" (remainder next_digit 2)))))\n        (digit (divide\
    \ digit 2)))\n      (result (concat \"1\" (remainder decimal 2))\n        (concat\
    \ \"0\" (remainder decimal 2)))))\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\
    \n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n;; >>> (decimal_to_binary\
    \ -1)\n;; \"db
  "  (let ((result \"\"))\n    (let ((decimal-value decimal))\n      (while (< decimal-value\
    \ 0)\n        (let ((digit decimal-value - 1))\n          (let ((bit-value (modulo\
    \ 2 decimal-value)))\n            (let ((bit-value-char (modulo 2 16)))\n    \
    \          (let ((bit-value-char-char (modulo 2 2)))\n                (let ((bit-value-char-char-char\
    \ (modulo 2 1)))\n                  (let ((bit-value-char-char-char-char (modulo\
    \ 2 0)))\n                    (let ((bit-value-char-char-char-char-char (modulo\
    \ 2 -1)))\n                      (let ((bit-value-char-char-char-char-char-char\
    \ (modulo 2 -2)))\n                        (let ((bit-value-char-char-char-char-char-char-char\
    \ (modulo 2 -3)))\n                          (let ((bit-value-char-char-char-char-char-char-char-char\
    \ (modulo 2 -4)))\n                            (let ((bit-value-char-char-char-char-char-char-char-char-char\
    \ (modulo 2 -5)))\n                              (let ((bit-value-char-char-char-char-char-char-char-char-char-char\
    \ (modulo 2 -6)))\n                                (let ((bit-value-char-char-char-char-char-char-char-char-char-char-char\
    \ (modulo 2 -7)))\n                                  (let ((bit-value-char-char-char-char-char-char-char-char-char-char-char-char\
    \ (modulo 2 -8)))\n                                    (let ((bit-value-char-char-char-char-char-char-char-char-char-char-char-char-char\
    \ (modulo 2 -9)))\n                                      (let ((bit-value-char-char-char-char-char-char-char-char-char-char-char-char-char-char\
    \ (modulo 2 -10)))\n                                        (let ((bit-value-char-char-char-char-char-char-char-char-char-char-char-",
  "  (let ((result \"\"))\n    (let ((decimal-value decimal))\n      (let ((decimal-value-length\
    \ (length decimal-value)))\n        (for-each (lambda (index)\n              \
    \      (let ((digit decimal-value (modulo decimal-value index)))\n           \
    \           (if (zero? digit)\n                        (append result \"0\")\n\
    \                        (append result \"1\"))))\n                  (range 1\
    \ decimal-value-length))\n        (append result \"db\")\n        (append result\
    \ result)))\n    result))\n\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n\
    ;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n;; >>> (decimal_to_binary -1)\n\
    ;; \"db
  "  (let ((result (make-string decimal/width 1)))\n    (let ((i 0))\n      (while\
    \ (< decimal i)\n        (let ((digit decimal/1))\n          (set! result (concat\
    \ result (string-append \"1\" digit)))\n          (set! i (+ 1 i)))))\n    (concat\
    \ \"db\" result)))\n\n;; You will be given a string in binary format and your\
    \ task is to convert it to decimal\n;; format. The function should return a number.\n\
    ;; Examples:\n;; >>> (binary_to_decimal \"11111111\")\n;; 15\n;; >>> (binary_to_decimal\
    \ \"100000\")\n;; 32", "  (let ((result (string)))\n    (let ((temp (string)))\n\
    \      (let ((i 0))\n        (while (< i decimal)\n          (let ((digit (string-char\
    \ result i))))\n            (let ((next_digit (string-char temp i)))\n       \
    \       (if (eqv? digit '0)\n                (string-append \"0\" result)\n  \
    \              (string-append \"1\" result)\n                (string-append \"\
    0\" result)\n                (string-append \"1\" result)\n                (string-append\
    \ \"0\" result)\n                (string-append \"1\" result)\n              \
    \  (string-append \"0\" result)\n                (string-append \"1\" result)\n\
    \                (string-append \"0\" result)\n                (string-append\
    \ \"1\" result)\n                (string-append \"0\" result)\n              \
    \  (string-append \"1\" result)\n                (string-append \"0\" result)\n\
    \                (string-append \"1\" result)\n                (string-append\
    \ \"0\" result)\n                (string-append \"1\" result)\n              \
    \  (string-append \"0\" result)\n                (string-append \"1\" result)\n\
    \                (string-append \"0\" result)\n                (string-append\
    \ \"1\" result)\n                (string-append \"0\" result)\n              \
    \  (string-append \"1\" result)\n                (string-append \"0\" result)\n\
    \                (string-append \"1\" result)\n                (string-append\
    \ \"0\" result)\n                (string-append \"1\" result)\n              \
    \  (string-append \"0\" result)\n                (string-append \"1\" result)\n\
    \                (string-append \"0\" result)\n                (string-append\
    \ \"1\" result)\n                (string-append \"0\" result)\n              \
    \  (string-append \"1\" result)\n                (string-append \"0\" result)\n\
    \                (string-append \"1\" result)\n                (string-append\
    \ \"0\" result)\n                (string-append \"1\" result)\n              \
    \  (string-append \"0\" result)\n                (string-append \"1\" result)\n\
    \                (string-append \"0\" result)\n                (string-append\
    \ \"1\" result", "  (let ((result (make-string decimal/width-of-decimal-base 2)))\n\
    \    (let ((i 0))\n      (while (< i decimal/width-of-decimal-base)\n        (let\
    \ ((digit (modulo decimal i)))\n          (set-char! result i '1)\n          (set-char!\
    \ result i '0)\n          (set-char! result i '1)\n          (set-char! result\
    \ i '0)\n          (set-char! result i '1)\n          (set-char! result i '0)\n\
    \          (set-char! result i '1)\n          (set-char! result i '0)\n      \
    \    (set-char! result i '1)\n          (set-char! result i '0)\n          (set-char!\
    \ result i '1)\n          (set-char! result i '0)\n          (set-char! result\
    \ i '1)\n          (set-char! result i '0)\n          (set-char! result i '1)\n\
    \          (set-char! result i '0)\n          (set-char! result i '1)\n      \
    \    (set-char! result i '0)\n          (set-char! result i '1)\n          (set-char!\
    \ result i '0)\n          (set-char! result i '1)\n          (set-char! result\
    \ i '0)\n          (set-char! result i '1)\n          (set-char! result i '0)\n\
    \          (set-char! result i '1)\n          (set-char! result i '0)\n      \
    \    (set-char! result i '1)\n          (set-char! result i '0)\n          (set-char!\
    \ result i '1)\n          (set-char! result i '0)\n          (set-char! result\
    \ i '1)\n          (set-char! result i '0)\n          (set-char! result i '1)\n\
    \          (set-char! result i '0)\n          (set-char! result i '1)\n      \
    \    (set-char! result i '0)\n          (set-char! result i '1)\n          (set-char!\
    \ result i '", "  (let ((result (string)))\n    (let ((temp (string)))\n     \
    \ (let ((i 0))\n        (while (< i decimal)\n          (let ((digit (string-ci\
    \ (string-upcase (string-ci (string-substring decimal i 1))))))\n            (string-set!\
    \ result (string-append result digit) \"\")\n            (string-set! temp (string-append\
    \ temp digit) \"\")\n            (set! i (i + 1)))\n          (string-set! result\
    \ (string-append result \"0\") \"\")\n          (string-set! temp (string-append\
    \ temp \"0\") \"\")\n          (set! i (i + 1)))\n        (string-set! result\
    \ (string-append result \"0\") \"\")\n        (string-set! temp (string-append\
    \ temp \"0\") \"\")\n        (set! i (i + 1)))\n      (string-set! result (string-append\
    \ result \"0\") \"\")\n      (string-set! temp (string-append temp \"0\") \"\"\
    )\n      (set! i (i + 1)))\n      (string-set! result (string-append result \"\
    0\") \"\")\n      (string-set! temp (string-append temp \"0\") \"\")\n      (set!\
    \ i (i + 1)))\n      (string-set! result (string-append result \"0\") \"\")\n\
    \      (string-set! temp (string-append temp \"0\") \"\")\n      (set! i (i +\
    \ 1)))\n      (string-set! result (string-append result \"0\") \"\")\n      (string-set!\
    \ temp (string-append temp \"0\") \"\")\n      (set! i (i + 1)))\n      (string-set!\
    \ result (string-append result \"0\") \"\")\n      (string-set! temp (string-append\
    \ temp \"0\") \"\")\n      (set! i (i + 1)))\n      (string-set! result (string-append\
    \ result \"0\") \"\")\n      (string-set! temp (string-append temp \"0\") \"\"\
    )\n      (set! i (i + 1)))\n      (string-set! result (string-append result \"\
    0\") \"\")\n      (string-set! temp (string-"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
