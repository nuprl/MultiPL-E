name: HumanEval_154_cycpattern_check
language: rkt
prompt: "#lang racket\n\n;; You are given 2 words. You need to return #t if the second\
  \ word or any of its rotations is a substring in the first word\n;; >>> (cycpattern_check\
  \ \"abcd\" \"abd\")\n;; #f\n;; >>> (cycpattern_check \"hello\" \"ell\")\n;; #t\n\
  ;; >>> (cycpattern_check \"whassup\" \"psus\")\n;; #f\n;; >>> (cycpattern_check\
  \ \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check \"efef\" \"eeff\")\n;; #f\n\
  ;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n(define (cycpattern_check\
  \ a b)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cycpattern_check))\n\
  \    (check-equal? (candidate \"xyzw\" \"xyw\") #f)\n    (check-equal? (candidate\
  \ \"yello\" \"ell\") #t)\n    (check-equal? (candidate \"whattup\" \"ptut\") #f)\n\
  \    (check-equal? (candidate \"efef\" \"fee\") #t)\n    (check-equal? (candidate\
  \ \"abab\" \"aabb\") #f)\n    (check-equal? (candidate \"winemtt\" \"tinem\") #t)\n\
  ))\n\n(test-humaneval)"
completions: ["  (let ((p (string-split a b)))\n    (and (map (lambda (x) (string-contains?\
    \ x b)) p)\n         (string-contains? b a))))\n\n;; >>> (cycpattern_check \"\
    abcd\" \"abd\")\n;; #f\n;; >>> (cycpattern_check \"hello\" \"ell\")\n;; #t\n;;\
    \ >>> (cycpattern_check \"whassup\" \"psus\")\n;; #f\n;; >>> (cycpattern_check\
    \ \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check \"efef\" \"eeff\")\n;; #f\n\
    ;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\"\
    )\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\"\
    )\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\"\
    )\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\"\
    )\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\"\
    )\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"", "  (let ((a (string->list a)))\n    (let ((b (string->list b)))\n     \
    \ (and (string-prefix? b a)\n           (string-prefix? a b))))\n)\n", "  (let\
    \ ((p (string-split a b)))\n    (and (map (lambda (x) (string-ci-caseless-equal?\
    \ x b)) p)\n        (string-ci-caseless-equal? b a))))\n", "  (let ((p (string-split\
    \ a b)))\n    (and (map (lambda (x) (string-contains? x b)) p)\n        (map (lambda\
    \ (x) (string-contains? x a)) p))))\n", "  (let ((p (string-split a b)))\n   \
    \ (and (map (lambda (p) (string-contains? p b)) p)\n         (string-contains?\
    \ b a))))\n\n;; You are given a string and a substring. You need to return #t\
    \ if the substring is a substring of the string\n;; >>> (substring_check \"abcd\"\
    \ \"abd\")\n;; #f\n;; >>> (substring_check \"hello\" \"ell\")\n;; #t\n;; >>> (substring_check\
    \ \"whassup\" \"psus\")\n;; #f\n;; >>> (substring_check \"abab\" \"baa\")\n;;\
    \ #t\n;; >>> (substring_check \"efef\" \"eeff\")\n;; #f\n;; >>> (substring_check\
    \ \"himenss\" \"simen\")\n;; #t", "  (let ((a-len (string-length a)))\n    (let\
    \ ((b-len (string-length b)))\n      (let ((a-str (string->list a))\n        \
    \    (b-str (string->list b)))\n        (and\n          (let ((a-str-len (length\
    \ a-str)))\n            (let ((b-str-len (length b-str)))\n              (and\n\
    \                (let ((a-str-str (car a-str)))\n                  (let ((b-str-str\
    \ (car b-str)))\n                    (and\n                      (let ((a-str-str-len\
    \ (length a-str-str)))\n                        (let ((b-str-str-len (length b-str-str)))\n\
    \                          (and\n                            (let ((a-str-str-str\
    \ (car a-str-str)))\n                              (let ((b-str-str-str (car b-str-str)))\n\
    \                                (and\n                                  (= a-str-str-len\
    \ a-str-str-len)\n                                  (= b-str-str-len b-str-str-len)\n\
    \                                  (= a-str-str-str b-str-str-str
  "  (let ((a-len (length a))\n        (b-len (length b)))\n    (if (and (>= a-len\
    \ b-len)\n            (string-ci=? (substring a 0 b-len) b))\n      #t\n     \
    \ (let ((a-rot (rotate a a-len))\n            (b-rot (rotate b b-len)))\n    \
    \    (if (and (>= a-len b-len)\n                (string-ci=? a-rot b-rot))\n \
    \         #t\n          (let ((a-rot-rot (rotate a a-len))\n                (b-rot-rot\
    \ (rotate b b-len)))\n            (if (and (>= a-len b-len)\n                \
    \    (string-ci=? a-rot-rot b-rot-rot))\n              #t\n              (let\
    \ ((a-rot-rot-rot (rotate a a-len))\n                    (b-rot-rot-rot (rotate\
    \ b b-len)))\n                (if (and (>= a-len b-len)\n                    \
    \    (string-ci=? a-rot-rot-rot b-rot-rot-rot))\n                  #t\n      \
    \            (let ((a-rot-rot-rot-rot (rotate a a-len))\n                    \
    \    (b-rot-rot-rot-rot (rotate b b-len)))\n                    (if (and (>= a-len\
    \ b-len)\n                            (string-ci=? a-rot-rot-rot-rot-rot b-rot-rot-rot-rot))\n\
    \                      #t\n                      (let ((a-rot-rot-rot-rot-rot\
    \ (rotate a a-len))\n                            (b-rot-rot-rot-rot-rot (rotate\
    \ b b-len)))\n                        (if (and (>= a-len b-len)\n            \
    \                    (string-ci=? a-rot-rot-rot-rot-rot-rot b-rot-rot-rot-rot-rot))\n\
    \                          #t\n                          (let ((a-rot-rot-rot-rot-rot-rot\
    \ (rotate a a-len))\n                                (b-rot-rot-rot-rot-rot-rot\
    \ (rotate b b-len", "  (let ((a (string->list a)))\n    (let ((b (string->list\
    \ b)))\n      (and (map (lambda (x) (string-ci=? x b)) a)\n          (string-ci=?\
    \ b a))))\n)\n\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #f\n;; >>> (cycpattern_check\
    \ \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"psus\")\n\
    ;; #f\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"efef\" \"eeff\")\n;; #f\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n\
    ;; #t\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"psus\")\n\
    ;; #t\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"efef\" \"eeff\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n\
    ;; #t\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"psus\")\n\
    ;; #t\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"efef\" \"eeff\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n\
    ;; #t\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"psus\")\n\
    ;; #t\n;; >>> (cycpattern_check \"abab\"", "  (let ((a-len (length a))\n     \
    \   (b-len (length b)))\n    (if (and (>= a-len b-len)\n            (string-ci=?\
    \ (substring a 0 b-len) b))\n      #t\n      (string-ci=? (substring a 0 a-len)\
    \ a))))\n", "  (let ((a-len (length a))\n        (b-len (length b)))\n    (if\
    \ (and (>= a-len b-len)\n            (string-ci=? a (string-ci b 0)))\n      #t\n\
    \      #f))\n)\n", "  (let ((a-len (length a))\n        (b-len (length b)))\n\
    \    (if (and (>= a-len b-len)\n            (string-ci=? (substring a 0 b-len)\
    \ b))\n      #t\n      #f))\n)\n", "  (let ((a-len (length a))\n        (b-len\
    \ (length b)))\n    (if (and (>= a-len b-len)\n            (string-ci=? (substring\
    \ a 0 b-len) b))\n      #t\n      #f))\n)\n", "  (let ((a-len (string-length a)))\n\
    \    (let ((b-len (string-length b)))\n      (let ((a-str (string-copy a)))\n\
    \        (let ((b-str (string-copy b)))\n          (let ((a-str-len (string-length\
    \ a-str)))\n            (let ((b-str-len (string-length b-str)))\n           \
    \   (let ((a-str-str (string-copy a-str)))\n                (let ((b-str-str (string-copy\
    \ b-str)))\n                  (let ((a-str-str-len (string-length a-str-str)))\n\
    \                    (let ((b-str-str-len (string-length b-str-str)))\n      \
    \                (let ((a-str-str-str (string-copy a-str-str)))\n            \
    \            (let ((b-str-str-str (string-copy b-str-str)))\n                \
    \          (let ((a-str-str-str-len (string-length a-str-str-str)))\n        \
    \                    (let ((b-str-str-str-len (string-length b-str-str-str)))\n\
    \                              (let ((a-str-str-str-str (string-copy a-str-str-str)))\n\
    \                                (let ((b-str-str-str-str (string-copy b-str-str-str)))\n\
    \                                  (let ((a-str-str-str-str-len (string-length\
    \ a-str-str-str-str)))\n                                    (let ((b-str-str-str-str-len\
    \ (string-length b-str-str-str-str)))\n                                      (let\
    \ ((a-str-str-str-str-str-str (string-copy a-str-str-str-str-str)))\n        \
    \                                (let ((b-str-str-str-str-str-str (string-copy\
    \ b-str-str-str-str-str))))\n                                        (let ((a-str-str-str-str-str-str-len\
    \ (string-length a-str-str-str-str-str-str)))\n                              \
    \            (let ((b-str-str-str-", "  (let ((a-len (string-length a)))\n   \
    \ (let ((b-len (string-length b)))\n      (let ((a-str (string-copy a)))\n   \
    \     (let ((b-str (string-copy b)))\n          (let ((a-str-len (string-length\
    \ a-str)))\n            (let ((b-str-len (string-length b-str)))\n           \
    \   (let ((a-str-str (string-copy a-str)))\n                (let ((b-str-str (string-copy\
    \ b-str)))\n                  (let ((a-str-str-len (string-length a-str-str)))\n\
    \                    (let ((b-str-str-len (string-length b-str-str)))\n      \
    \                (let ((a-str-str-str (string-copy a-str-str)))\n            \
    \            (let ((b-str-str-str (string-copy b-str-str)))\n                \
    \          (let ((a-str-str-str-len (string-length a-str-str-str)))\n        \
    \                    (let ((b-str-str-str-len (string-length b-str-str-str)))\n\
    \                              (let ((a-str-str-str-str (string-copy a-str-str-str)))\n\
    \                                (let ((b-str-str-str-str (string-copy b-str-str-str)))\n\
    \                                  (let ((a-str-str-str-str-len (string-length\
    \ a-str-str-str-str)))\n                                    (let ((b-str-str-str-str-len\
    \ (string-length b-str-str-str-str)))\n                                      (let\
    \ ((a-str-str-str-str-str-str (string-copy a-str-str-str-str-str)))\n        \
    \                                (let ((b-str-str-str-str-str-str (string-copy\
    \ b-str-str-str-str-str))))\n                                        (let ((a-str-str-str-str-str-str-len\
    \ (string-length a-str-str-str-str-str-str)))\n                              \
    \            (let ((b-str-str-str-", "  (let ((a-len (length a))\n        (b-len\
    \ (length b)))\n    (and (>= a-len b-len)\n         (let ((a-rot (rotate a-len\
    \ a)))\n           (let ((b-rot (rotate b-len b)))\n             (and (string=?\
    \ a-rot b-rot)\n                  (string=? b-rot a-rot)))))))\n", "  (let ((a-len\
    \ (string-length a)))\n    (let ((b-len (string-length b)))\n      (let ((a-str\
    \ (string->list a)))\n        (let ((b-str (string->list b)))\n          (let\
    \ ((a-list (list->string a-str)))\n            (let ((b-list (list->string b-str)))\n\
    \              (let ((a-list-len (length a-list)))\n                (let ((b-list-len\
    \ (length b-list)))\n                  (let ((a-list-str (string->list a-list)))\n\
    \                    (let ((b-list-str (string->list b-list)))\n             \
    \         (let ((a-list-list (list->string a-list-str)))\n                   \
    \     (let ((b-list-list (list->string b-list-str)))\n                       \
    \   (let ((a-list-list-len (length a-list-list)))\n                          \
    \  (let ((b-list-list-len (length b-list-list)))\n                           \
    \   (let ((a-list-list-str (string->list a-list-list)))\n                    \
    \            (let ((b-list-list-str (string->list b-list-list)))\n           \
    \                       (let ((a-list-list-list (list->string a-list-list-str)))\n\
    \                                    (let ((b-list-list-list (list->string b-list-list-str)))\n\
    \                                      (let ((a-list-list-list-len (length a-list-list-list)))\n\
    \                                        (let ((b-list-list-list-len (length b-list-list-list)))\n\
    \                                          (let ((a-list-list-list-str (string->list\
    \ a-list-list-list)))\n                                            (let ((b-list-list-list-str\
    \ (string->list b-list-list-list)))\n                                        \
    \      (let ((a-list-list-list-list (list->string a-list-list-list-str)))\n  \
    \                                              (let ((b-list-list-list-list (list->string\
    \ b-list-list-list-str)))\n                                                  (let\
    \ ((", "  (let ((a-len (length a))\n        (b-len (length b)))\n    (if (and\
    \ (>= a-len b-len)\n            (string-ci=? (string-copy/part a b-len)\n    \
    \                             (string-copy/part a 0)))\n      #t\n      (and (>=\
    \ b-len a-len)\n            (string-ci=? (string-copy/part b a-len)\n        \
    \                         (string-copy/part b 0)))\n      #f))\n)\n", "  (let\
    \ ((a-len (length a))\n        (b-len (length b)))\n    (if (and (>= a-len b-len)\n\
    \            (string-ci=? (substring a 0 (modulo a-len b-len)) b))\n      #t\n\
    \      #f))\n)\n", "  (let ((a (string->list a)))\n    (let ((b (string->list\
    \ b)))\n      (and (string-ci=? a b)\n           (string-ci=? b a))))\n  #t)\n\
    \n;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #f\n;; >>> (cycpattern_check\
    \ \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"psus\")\n\
    ;; #f\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"efef\" \"eeff\")\n;; #f\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n\
    ;; #t\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"psus\")\n\
    ;; #t\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"efef\" \"eeff\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n\
    ;; #t\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"psus\")\n\
    ;; #t\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"efef\" \"eeff\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n\
    ;; #t\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"psus\")\n\
    ;; #t\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;;", "  (define (substr s i)\n\
    \    (if (eq? i 0)\n      (substr s (1 - i))\n      (substr s i)))\n  (define\
    \ (rotate s i)\n    (if (eq? i 0)\n      s\n      (substr s (- i 1))))\n  (define\
    \ (check a b)\n    (and\n      (string=? a b)\n      (string=? b a)\n      (string=?\
    \ (rotate a i) (substr a i))\n      (string=? (rotate b i) (substr b i))\n   \
    \   (string=? (rotate (rotate a i)) (substr (rotate a i))))))\n\n;; >>> (cycpattern_check\
    \ \"abcd\" \"abd\")\n;; #f\n;; >>> (cycpattern_check \"hello\" \"ell\")\n;; #t\n\
    ;; >>> (cycpattern_check \"whassup\" \"psus\")\n;; #f\n;; >>> (cycpattern_check\
    \ \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check \"efef\" \"eeff\")\n;; #f\n\
    ;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"abcd\" \"abd\")\n;; #t\n;; >>> (cycpattern_check \"hello\" \"ell\")\n;; #t\n\
    ;; >>> (cycpattern_check \"whassup\" \"psus\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check \"efef\" \"eeff\")\n;; #t\n\
    ;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"abcd\" \"abd\")\n;; #t\n;; >>> (cycpattern_check \"hello\" \"ell\")\n;; #t\n\
    ;; >>> (cycpattern_check \"whassup\" \"psus\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check \"efef\"", "  (let ((a-len\
    \ (string-length a)))\n    (let ((b-len (string-length b)))\n      (let ((a-str\
    \ (string-copy a)))\n        (let ((b-str (string-copy b)))\n          (let ((a-str-len\
    \ (string-length a-str)))\n            (let ((b-str-len (string-length b-str)))\n\
    \              (let ((a-str-str (string-copy a-str)))\n                (let ((b-str-str\
    \ (string-copy b-str)))\n                  (let ((a-str-str-len (string-length\
    \ a-str-str)))\n                    (let ((b-str-str-len (string-length b-str-str)))\n\
    \                      (let ((a-str-str-str (string-copy a-str-str)))\n      \
    \                  (let ((b-str-str-str (string-copy b-str-str)))\n          \
    \                (let ((a-str-str-str-len (string-length a-str-str-str)))\n  \
    \                          (let ((b-str-str-str-len (string-length b-str-str-str)))\n\
    \                              (let ((a-str-str-str-str (string-copy a-str-str-str)))\n\
    \                                (let ((b-str-str-str-str (string-copy b-str-str-str)))\n\
    \                                  (let ((a-str-str-str-str-len (string-length\
    \ a-str-str-str-str)))\n                                    (let ((b-str-str-str-str-len\
    \ (string-length b-str-str-str-str)))\n                                      (let\
    \ ((a-str-str-str-str-str-str (string-copy a-str-str-str-str-str)))\n        \
    \                                (let ((b-str-str-str-str-str-str (string-copy\
    \ b-str-str-str-str-str))))\n                                        (let ((a-str-str-str-str-str-str-len\
    \ (string-length a-str-str-str-str-str-str)))\n                              \
    \            (let ((b-str-str-str-", "  (let ((a (string->list a)))\n    (let\
    \ ((b (string->list b)))\n      (and (string-ci=? a b)\n           (string-ci=?\
    \ b a))))\n  #t)\n\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #f\n;; >>>\
    \ (cycpattern_check \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\"\
    \ \"psus\")\n;; #f\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;; #t\n;; >>>\
    \ (cycpattern_check \"efef\" \"eeff\")\n;; #f\n;; >>> (cycpattern_check \"himenss\"\
    \ \"simen\")\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #t\n;; >>>\
    \ (cycpattern_check \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\"\
    \ \"psus\")\n;; #t\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;; #t\n;; >>>\
    \ (cycpattern_check \"efef\" \"eeff\")\n;; #t\n;; >>> (cycpattern_check \"himenss\"\
    \ \"simen\")\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #t\n;; >>>\
    \ (cycpattern_check \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\"\
    \ \"psus\")\n;; #t\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;; #t\n;; >>>\
    \ (cycpattern_check \"efef\" \"eeff\")\n;; #t\n;; >>> (cycpattern_check \"himenss\"\
    \ \"simen\")\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #t\n;; >>>\
    \ (cycpattern_check \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\"\
    \ \"psus\")\n;; #t\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;;", "  (let ((a-len\
    \ (length a))\n        (b-len (length b)))\n    (and (>= a-len b-len)\n      \
    \   (let ((a-str (substring a 0 a-len))\n               (b-str (substring b 0\
    \ b-len)))\n          (string=? a-str b-str))))\n)\n\n;; >>> (cycpattern_check\
    \ \"abcd\" \"abd\")\n;; #f\n;; >>> (cycpattern_check \"hello\" \"ell\")\n;; #t\n\
    ;; >>> (cycpattern_check \"whassup\" \"psus\")\n;; #f\n;; >>> (cycpattern_check\
    \ \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check \"efef\" \"eeff\")\n;; #f\n\
    ;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t", "  (let ((a-len (string-length\
    \ a))\n        (b-len (string-length b)))\n    (and\n      (let ((a-str (string-copy\
    \ a))\n            (b-str (string-copy b)))\n        (let ((a-str-len (string-length\
    \ a-str))\n              (b-str-len (string-length b-str)))\n          (and\n\
    \            (let ((a-str-str (string-copy a-str))\n                   (b-str-str\
    \ (string-copy b-str)))\n              (let ((a-str-str-len (string-length a-str-str))\n\
    \                     (b-str-str-len (string-length b-str-str)))\n           \
    \     (and\n                  (let ((a-str-str-str (string-copy a-str-str))\n\
    \                         (b-str-str-str (string-copy b-str-str)))\n         \
    \           (let ((a-str-str-str-len (string-length a-str-str-str))\n        \
    \                  (b-str-str-str-len (string-length b-str-str-str)))\n      \
    \                (and\n                        (let ((a-str-str-str-str (string-copy\
    \ a-str-str-str))\n                               (b-str-str-str-str (string-copy\
    \ b-str-str-str)))\n                          (let ((a-str-str-str-str-len (string-length\
    \ a-str-str-str-str))\n                                 (b-str-str-str-str-len\
    \ (string-length b-str-str-str-str)))\n                            (and\n    \
    \                          (let ((a-str-str-str-str-str (string-copy a-str-str-str-str))\n\
    \                                     (b-str-str-str-str-str (string-copy b-str-str-str-str)))\n\
    \                                (let ((a-str-str-str-str-str-len (string-length\
    \ a-str-str-str-str-str))\n                                       (b-str-str-str-str-str-len\
    \ (string-length b-str-str-str-str-str)))\n", "  (let ((a-len (string-length a)))\n\
    \    (let ((b-len (string-length b)))\n      (let ((a-str (string->list a))\n\
    \            (b-str (string->list b)))\n        (and\n          (let ((a-str-len\
    \ (length a-str)))\n            (let ((b-str-len (length b-str)))\n          \
    \    (and\n                (let ((a-str-str (car a-str))\n                   \
    \   (b-str-str (car b-str)))\n                  (string-ci=? a-str-str b-str-str))\n\
    \                (string-ci=? a-str-str b-str-str))))))))))\n", "  (let ((p (string-split\
    \ a b)))\n    (and (map (lambda (s) (string-contains? s a)) p)\n         (string-contains?\
    \ b a))))\n", "  (let ((p (string-split a b)))\n    (and (map (lambda (x) (string-ci-caseless-find\
    \ x b)) p)\n        (string-ci-caseless-find a b))))\n", "  (let ((p (string-split\
    \ a b)))\n    (and (map (lambda (s) (string-contains? s a)) p)\n         (string-contains?\
    \ b a))))\n\n;; You are given a list of words. You need to return #t if any of\
    \ the words is a substring of any other word\n;; >>> (cycpattern_check-list \"\
    abcd\" \"abd\")\n;; #f\n;; >>> (cycpattern_check-list \"hello\" \"ell\")\n;; #t\n\
    ;; >>> (cycpattern_check-list \"whassup\" \"psus\")\n;; #f\n;; >>> (cycpattern_check-list\
    \ \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check-list \"efef\" \"eeff\")\n\
    ;; #f\n;; >>> (cycpattern_check-list \"himenss\" \"simen\")\n;; #t", "  (let ((a-len\
    \ (length a))\n        (b-len (length b)))\n    (if (and (>= a-len b-len)\n  \
    \          (string-ci=? (string-copy/part a b-len) (string-copy/part a 0)))\n\
    \      #t\n      (and (>= b-len a-len)\n          (string-ci=? (string-copy/part\
    \ b a-len) (string-copy/part b 0)))\n      #f))\n)\n", "  (let ((p (string-split\
    \ a b)))\n    (and (map (lambda (p) (string-ci-caseless-equal? p b)) p)\n    \
    \    (string-ci-caseless-equal? b a))))\n\n;; >>> (cycpattern_check \"abcd\" \"\
    abd\")\n;; #f\n;; >>> (cycpattern_check \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"whassup\" \"psus\")\n;; #f\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;;\
    \ #t\n;; >>> (cycpattern_check \"efef\" \"eeff\")\n;; #f\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himen\" \"simen\"\
    )\n;; #t\n;; >>> (cycpattern_check \"himen\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himen\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himen\" \"simen\")\n\
    ;; #t\n;; >>> (cycpattern_check \"himen\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himen\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himen\" \"simen\")\n\
    ;; #t\n;; >>> (cycpattern_check \"himen\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himen\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himen\" \"simen\")\n\
    ;; #t\n;; >>> (cycpattern_check \"himen\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himen\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himen\" \"simen\")\n\
    ;; #t\n;; >>> (cycpattern_check \"himen\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himen\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himen\" \"simen\")",
  "  (let ((p (string-split a b)))\n    (and (map (lambda (x) (string-contains? x\
    \ b)) p)\n        (string-contains? b a))))\n\n;; You are given a string and a\
    \ pattern. You need to return #t if the string matches the pattern\n;; >>> (cycpattern_check\
    \ \"abcd\" \"ab*\")\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #f\n\
    ;; >>> (cycpattern_check \"abcd\" \"ab*d\")\n;; #t\n;; >>> (cycpattern_check \"\
    abcd\" \"ab*d*\")\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"ab*d*c\")\n;; #f\n\
    ;; >>> (cycpattern_check \"abcd\" \"ab*d*c*\")\n;; #f\n;; >>> (cycpattern_check\
    \ \"abcd\" \"ab*d*c*d\")\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"ab*d*c*d*\"\
    )\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"ab*d*c*d*e\")\n;; #f\n;; >>> (cycpattern_check\
    \ \"abcd\" \"ab*d*c*d*e*\")\n;; #f\n;; >>> (cycpattern_check \"abcd\" \"ab*d*c*d*e*f\"\
    )\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"ab*d*c*d*e*f*\")\n;; #f\n;; >>>\
    \ (cycpattern_check \"abcd\" \"ab*d*c*d*e*f*g\")\n;; #f\n;; >>> (cycpattern_check\
    \ \"abcd\" \"ab*d*c*d*e*f*g*\")\n;; #f\n;; >>> (cycpattern_check \"abcd\" \"ab*d*c*d*e*f*g*h\"\
    )\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"ab*d*c*d*e*f*g*h*\")\n;; #t\n;;",
  "  (let ((a-len (string-length a)))\n    (let ((b-len (string-length b)))\n    \
    \  (let ((a-str (string->list a))\n            (b-str (string->list b)))\n   \
    \     (let ((a-list (string-append a-str a-str)))\n          (let ((b-list (string-append\
    \ b-str b-str)))\n            (let ((a-list-len (length a-list))\n           \
    \       (b-list-len (length b-list)))\n              (let ((a-list-str (string->list\
    \ a-list))\n                    (b-list-str (string->list b-list)))\n        \
    \        (let ((a-list-list (string-append a-list-str a-list-str)))\n        \
    \          (let ((b-list-list (string-append b-list-str b-list-str)))\n      \
    \              (let ((a-list-list-len (length a-list-list))\n                \
    \          (b-list-list-len (length b-list-list)))\n                      (let\
    \ ((a-list-list-str (string->list a-list-list))\n                            (b-list-list-str\
    \ (string->list b-list-list)))\n                        (let ((a-list-list-list\
    \ (string-append a-list-list-str a-list-list-str)))\n                        \
    \  (let ((b-list-list-list (string-append b-list-list-str b-list-list-str)))\n\
    \                            (let ((a-list-list-list-len (length a-list-list-list))\n\
    \                                  (b-list-list-list-len (length b-list-list-list)))\n\
    \                              (let ((a-list-list-list-str (string->list a-list-list-list))\n\
    \                                    (b-list-list-list-str (string->list b-list-list-list)))\n\
    \                                (let ((a-list-list-list-list (string-append a-list-list-list-str\
    \ a-list-list-list-str)))\n                                  (let ((b-list-list-list-list\
    \ (string-append b-list-list-list-", "  (let ((a-len (length a))\n        (b-len\
    \ (length b)))\n    (if (and (>= a-len b-len)\n            (string-ci=? a (string-ci-downcase\
    \ b 0)))\n      #t\n      (let ((a-down (string-ci-downcase a))\n            (b-down\
    \ (string-ci-downcase b)))\n        (let ((a-rot (string-ci-rotate a-down a-len))\n\
    \              (b-rot (string-ci-rotate b-down b-len)))\n          (string-ci=?\
    \ a-rot b-rot))))))\n", "  (let ((a-len (length a))\n        (b-len (length b)))\n\
    \    (if (and (>= a-len b-len)\n            (string-ci=? (substring a 0 a-len)\
    \ b))\n      #t\n      (let ((a-rot (string-ci=? (substring a 0 a-len) (string-ci=?\
    \ a b))))\n        (if a-rot\n          (cycpattern_check a-rot b)\n         \
    \ #f))))))\n", "  (let ((a-len (length a))\n        (b-len (length b)))\n    (and\n\
    \      (>= b-len 0)\n      (let ((a-rot (rotate a-len 1)))\n        (= (string-ci=?\
    \ a-rot b) #t)))))\n", "  (let ((a-len (length a))\n        (b-len (length b)))\n\
    \    (if (and (>= a-len b-len)\n            (string-ci=? (string-copy/part a b-len)\n\
    \                                  (string-copy/part a-len b)))\n      #t\n  \
    \    #f))\n)\n", "  (let ((a-len (string-length a)))\n    (let ((b-len (string-length\
    \ b)))\n      (let ((a-str (string->list a)))\n        (let ((b-str (string->list\
    \ b)))\n          (let ((a-list (list->string a-str)))\n            (let ((b-list\
    \ (list->string b-str)))\n              (let ((a-list-len (length a-list)))\n\
    \                (let ((b-list-len (length b-list)))\n                  (let ((a-list-str\
    \ (string->list a-list)))\n                    (let ((b-list-str (string->list\
    \ b-list)))\n                      (let ((a-list-list (list->string a-list-str)))\n\
    \                        (let ((b-list-list (list->string b-list-str)))\n    \
    \                      (let ((a-list-list-len (length a-list-list)))\n       \
    \                     (let ((b-list-list-len (length b-list-list)))\n        \
    \                      (let ((a-list-list-str (string->list a-list-list)))\n \
    \                               (let ((b-list-list-str (string->list b-list-list)))\n\
    \                                  (let ((a-list-list-list (list->string a-list-list-str)))\n\
    \                                    (let ((b-list-list-list (list->string b-list-list-str)))\n\
    \                                      (let ((a-list-list-list-len (length a-list-list-list)))\n\
    \                                        (let ((b-list-list-list-len (length b-list-list-list)))\n\
    \                                          (let ((a-list-list-list-str (string->list\
    \ a-list-list-list)))\n                                            (let ((b-list-list-list-str\
    \ (string->list b-list-list-list)))\n                                        \
    \      (let ((a-list-list-list-list (list->string a-list-list-list-str)))\n  \
    \                                              (let ((b-list-list-list-list (list->string\
    \ b-list-list-list-str)))\n                                                  (let\
    \ ((", "  (let ((a-len (string-length a)))\n    (let ((b-len (string-length b)))\n\
    \      (let ((a-str (string->list a)))\n        (let ((b-str (string->list b)))\n\
    \          (let ((a-list (list->string a-str)))\n            (let ((b-list (list->string\
    \ b-str)))\n              (string-ci=? (string-ci a-list b-list)\n           \
    \     (string-ci=? (string-ci a-list b-list)\n                  (string-ci=? (string-ci\
    \ a-list b-list)\n                    (string-ci=? (string-ci a-list b-list)\n\
    \                      (string-ci=? (string-ci a-list b-list)\n              \
    \          (string-ci=? (string-ci a-list b-list)\n                          (string-ci=?\
    \ (string-ci a-list b-list)\n                            (string-ci=? (string-ci\
    \ a-list b-list)\n                              (string-ci=? (string-ci a-list\
    \ b-list)\n                                (string-ci=? (string-ci a-list b-list)\n\
    \                                  (string-ci=? (string-ci a-list b-list)\n  \
    \                                  (string-ci=? (string-ci a-list b-list)\n  \
    \                                    (string-ci=? (string-ci a-list b-list)\n\
    \                                        (string-ci=? (string-ci a-list b-list)\n\
    \                                          (string-ci=? (string-ci a-list b-list)\n\
    \                                            (string-ci=? (string-ci a-list b-list)\n\
    \                                              (string-ci=? (string-ci a-list\
    \ b-list)\n                                                (string-ci=? (string-ci\
    \ a-list b-list)\n                                                  (string-ci=?\
    \ (string-ci a-list b-list)\n                                                \
    \    (string-ci=? (string-ci a-list b-list)\n                                \
    \                      (string-ci=? (string-", "  (let ((a-len (string-length\
    \ a)))\n    (let ((b-len (string-length b)))\n      (let ((a-str (string->list\
    \ a)))\n        (let ((b-str (string->list b)))\n          (let ((a-list (list->string\
    \ a-str)))\n            (let ((b-list (list->string b-str)))\n              (let\
    \ ((a-list-len (length a-list)))\n                (let ((b-list-len (length b-list)))\n\
    \                  (let ((a-list-str (car a-list-len)))\n                    (let\
    \ ((b-list-str (car b-list-len)))\n                      (and\n              \
    \          (string=? a-list-str b-list-str)\n                        (string=?\
    \ a-list-str b-list-str)\n                        (string=? a-list-str b-list-str)\n\
    \                        (string=? a-list-str b-list-str)\n                  \
    \      (string=? a-list-str b-list-str)\n                        (string=? a-list-str\
    \ b-list-str)\n                        (string=? a-list-str b-list-str)\n    \
    \                    (string=? a-list-str b-list-str)\n                      \
    \  (string=? a-list-str b-list-str)\n                        (string=? a-list-str\
    \ b-list-str)\n                        (string=? a-list-str b-list-str)\n    \
    \                    (string=? a-list-str b-list-str)\n                      \
    \  (string=? a-list-str b-list-str)\n                        (string=? a-list-str\
    \ b-list-str)\n                        (string=? a-list-str b-list-str)\n    \
    \                    (string=? a-list-str b-list-str)\n                      \
    \  (string=? a-list-str b-list-str)\n                        (string=? a-list-str\
    \ b-list-str)\n                        (string=? a-list-str b-list-str)\n    \
    \                    (string=? a-list-str b-list-str)\n                      \
    \  (string=? a-list-str b-", "  (let ((p (string-split a b)))\n    (and (map (lambda\
    \ (x) (string-contains? x b)) p)\n         (string-contains? b a))))\n\n;; >>>\
    \ (cycpattern_check \"abcd\" \"abd\")\n;; #f\n;; >>> (cycpattern_check \"hello\"\
    \ \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"psus\")\n;; #f\n;; >>>\
    \ (cycpattern_check \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check \"efef\"\
    \ \"eeff\")\n;; #f\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;;\
    \ >>> (cycpattern_check \"abcd\" \"abd\")\n;; #t\n;; >>> (cycpattern_check \"\
    hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"psus\")\n;; #t\n\
    ;; >>> (cycpattern_check \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check \"\
    efef\" \"eeff\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n\
    ;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #t\n;; >>> (cycpattern_check \"\
    hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"psus\")\n;; #t\n\
    ;; >>> (cycpattern_check \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check \"\
    efef\" \"eeff\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n\
    ;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #t\n;; >>> (cycpattern_check \"\
    hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"psus\")\n;; #t\n\
    ;; >>> (cycpattern_check \"abab\" \"baa\")\n;; #t\n;; >>> (cy", "  (let ((a-len\
    \ (string-length a)))\n    (let ((b-len (string-length b)))\n      (let ((a-str\
    \ (string->list a)))\n        (let ((b-str (string->list b)))\n          (let\
    \ ((a-list (list->string a-str)))\n            (let ((b-list (list->string b-str)))\n\
    \              (string-ci=? (string-ci a-list b-list)\n                (string-ci=?\
    \ (string-ci a-list b-list)\n                  (string-ci=? (string-ci a-list\
    \ b-list)\n                    (string-ci=? (string-ci a-list b-list)\n      \
    \                (string-ci=? (string-ci a-list b-list)\n                    \
    \    (string-ci=? (string-ci a-list b-list)\n                          (string-ci=?\
    \ (string-ci a-list b-list)\n                            (string-ci=? (string-ci\
    \ a-list b-list)\n                              (string-ci=? (string-ci a-list\
    \ b-list)\n                                (string-ci=? (string-ci a-list b-list)\n\
    \                                  (string-ci=? (string-ci a-list b-list)\n  \
    \                                  (string-ci=? (string-ci a-list b-list)\n  \
    \                                    (string-ci=? (string-ci a-list b-list)\n\
    \                                        (string-ci=? (string-ci a-list b-list)\n\
    \                                          (string-ci=? (string-ci a-list b-list)\n\
    \                                            (string-ci=? (string-ci a-list b-list)\n\
    \                                              (string-ci=? (string-ci a-list\
    \ b-list)\n                                                (string-ci=? (string-ci\
    \ a-list b-list)\n                                                  (string-ci=?\
    \ (string-ci a-list b-list)\n                                                \
    \    (string-ci=? (string-ci a-list b-list)\n                                \
    \                      (string-ci=? (string-", "  (let ((p (string-split a b)))\n\
    \    (and (map (lambda (x) (string-contains? x b)) p)\n        (string-contains?\
    \ b a))))\n\n;; You are given a string and a pattern. You need to return #t if\
    \ the pattern is a substring of the string\n;; >>> (cycpattern_check \"abcd\"\
    \ \"ab\")\n;; #f\n;; >>> (cycpattern_check \"abcd\" \"cd\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"abcd\" \"abcd\")\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"abcdabcd\")\n\
    ;; #t\n;; >>> (cycpattern_check \"abcd\" \"abcdabcdabcd\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"abcd\" \"abcdabcdabcdabcd\")\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"\
    abcdabcdabcdabcdabcd\")\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"abcdabcdabcdabcdabcdabcd\"\
    )\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"abcdabcdabcdabcdabcdabcdabcd\")\n\
    ;; #t\n;; >>> (cycpattern_check \"abcd\" \"abcdabcdabcdabcdabcdabcdabcdabcd\"\
    )\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"abcdabcdabcdabcdabcdabcdabcdabcdabcd\"\
    )\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"\
    )\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"\
    )\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"\
    )\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"ab", "  (let ((a-len (length a))\n\
    \        (b-len (length b)))\n    (if (and (>= a-len b-len)\n            (string-ci=?\
    \ (substring a 0 b-len) b))\n      #t\n      (let ((a-rot (string-ci-rotate a\
    \ a-len))\n            (b-rot (string-ci-rotate b b-len)))\n        (if (and (>=\
    \ a-len b-len)\n                (string-ci=? a b-rot))\n          #t\n       \
    \   (let ((a-rot-rot (string-ci-rotate a a-len))\n                (b-rot-rot (string-ci-rotate\
    \ b b-len)))\n            (if (and (>= a-len b-len)\n                    (string-ci=?\
    \ a-rot b-rot))\n              #t\n              (let ((a-rot-rot-rot (string-ci-rotate\
    \ a a-len))\n                    (b-rot-rot-rot (string-ci-rotate b b-len)))\n\
    \                (if (and (>= a-len b-len)\n                        (string-ci=?\
    \ a-rot-rot b-rot))\n                  #t\n                  (let ((a-rot-rot-rot-rot\
    \ (string-ci-rotate a a-len))\n                        (b-rot-rot-rot-rot (string-ci-rotate\
    \ b b-len)))\n                    (if (and (>= a-len b-len)\n                \
    \            (string-ci=? a-rot-rot-rot b-rot))\n                      #t\n  \
    \                    (let ((a-rot-rot-rot-rot-rot (string-ci-rotate a a-len))\n\
    \                            (b-rot-rot-rot-rot-rot (string-ci-rotate b b-len)))\n\
    \                        (if (and (>= a-len b-len)\n                         \
    \       (string-ci=? a-rot-rot-rot-rot b-rot))\n                          #t\n\
    \                          (let ((a-rot-rot-rot-rot-rot-rot (string-ci-rotate\
    \ a a-len))\n                                (b-rot-rot-rot-rot-", "  (let ((a-len\
    \ (length a))\n        (b-len (length b)))\n    (and\n      (>= b-len 0)\n   \
    \   (>= a-len b-len)\n      (= (string-index-of a b) 0))))\n\n;; >>> (cycpattern_check\
    \ \"abcd\" \"abd\")\n;; #f\n;; >>> (cycpattern_check \"hello\" \"ell\")\n;; #t\n\
    ;; >>> (cycpattern_check \"whassup\" \"psus\")\n;; #f\n;; >>> (cycpattern_check\
    \ \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check \"efef\" \"eeff\")\n;; #f\n\
    ;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"abcd\" \"abd\")\n;; #t\n;; >>> (cycpattern_check \"hello\" \"ell\")\n;; #t\n\
    ;; >>> (cycpattern_check \"whassup\" \"psus\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check \"efef\" \"eeff\")\n;; #t\n\
    ;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"abcd\" \"abd\")\n;; #t\n;; >>> (cycpattern_check \"hello\" \"ell\")\n;; #t\n\
    ;; >>> (cycpattern_check \"whassup\" \"psus\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check \"efef\" \"eeff\")\n;; #t\n\
    ;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"abcd\" \"abd\")\n;; #t\n;; >>> (cycpattern_check \"hello\" \"ell\")\n;; #t\n\
    ;; >>> (cycpattern_check \"whassup\" \"psus\")\n;; #t\n;; >>> (cycpattern_check",
  "  (let ((p (string-split a b)))\n    (and (map (lambda (x) (string-contains? x\
    \ b)) p)\n         (string-contains? b a))))\n\n;; >>> (cycpattern_check \"abcd\"\
    \ \"abd\")\n;; #f\n;; >>> (cycpattern_check \"hello\" \"ell\")\n;; #t\n;; >>>\
    \ (cycpattern_check \"whassup\" \"psus\")\n;; #f\n;; >>> (cycpattern_check \"\
    abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check \"efef\" \"eeff\")\n;; #f\n;;\
    \ >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\"\
    )\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\"\
    )\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\"\
    )\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\"\
    )\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\"\
    )\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"", "  (let ((p (string-split a b)))\n    (and (map (lambda (s) (string-contains\
    \ s b)) p)\n        (string-contains a b))))\n", "  (let ((p (string-split a b)))\n\
    \    (and (map (lambda (x) (string-contains? x b)) p)\n        (string-contains?\
    \ b a))))\n", "  (let ((a-len (string-length a)))\n    (let ((b-len (string-length\
    \ b)))\n      (let ((a-str (string->list a)))\n        (let ((b-str (string->list\
    \ b)))\n          (let ((a-list (list->string a-str)))\n            (let ((b-list\
    \ (list->string b-str)))\n              (let ((a-list-len (length a-list)))\n\
    \                (let ((b-list-len (length b-list)))\n                  (let ((a-list-str\
    \ (car a-list)))\n                    (let ((b-list-str (car b-list)))\n     \
    \                 (let ((a-list-list (cdr a-list)))\n                        (let\
    \ ((b-list-list (cdr b-list)))\n                          (let ((a-list-list-len\
    \ (length a-list-list)))\n                            (let ((b-list-list-len (length\
    \ b-list-list)))\n                              (let ((a-list-list-str (car a-list-list)))\n\
    \                                (let ((b-list-list-str (car b-list-list)))\n\
    \                                  (let ((a-list-list-list (cdr a-list-list)))\n\
    \                                    (let ((b-list-list-list (cdr b-list-list)))\n\
    \                                      (let ((a-list-list-list-len (length a-list-list-list)))\n\
    \                                        (let ((b-list-list-list-len (length b-list-list-list)))\n\
    \                                          (let ((a-list-list-list-str (car a-list-list-list)))\n\
    \                                            (let ((b-list-list-list-str (car\
    \ b-list-list-list)))\n                                              (let ((a-list-list-list-list\
    \ (cdr a-list-list-list)))\n                                                (let\
    \ ((b-list-list-list-list (cdr b-list-list-list)))\n                         \
    \                         (let ((a-list-list-list-list-len (length a-list-list-list-list)))\n\
    \                                                    (", "  (let ((p (string-split\
    \ a b)))\n    (and (map (lambda (p) (string-contains p b)) p)\n        (string-contains\
    \ a b))))\n", "  (let ((a-len (string-length a)))\n    (let ((b-len (string-length\
    \ b)))\n      (let ((a-str (string->list a)))\n        (let ((b-str (string->list\
    \ b)))\n          (let ((a-list (string-append a-str a-str)))\n            (let\
    \ ((b-list (string-append b-str b-str)))\n              (string-ci=? (string-append\
    \ a-list b-list) a b))))))))\n", "  (let ((p (string-split a b)))\n    (and (map\
    \ (lambda (p) (string-contains p b)) p)\n         (string-contains a b))))\n",
  "  (let ((a-len (length a))\n        (b-len (length b)))\n    (and\n      (let ((a-rot\
    \ (rotate a-len 1)))\n        (let ((b-rot (rotate b-len 1)))\n          (and\n\
    \            (substring? b-rot a-rot)\n            (substring? a-rot b-rot)))))))\n",
  "  (let ((p (string-split a b)))\n    (and (map (lambda (p) (string-contains? p\
    \ b)) p)\n         (string-contains? b a))))\n", "  (let ((a-len (length a))\n\
    \        (b-len (length b)))\n    (if (and (>= a-len b-len)\n            (string-ci=?\
    \ (substring a 0 b-len) b))\n      #t\n      (and (string-ci=? (substring a 0\
    \ a-len) a)\n           (string-ci=? (substring a (modulo a-len b-len) b-len)\
    \ b)))))\n", "  (let ((a-len (string-length a)))\n    (let ((b-len (string-length\
    \ b)))\n      (let ((a-str (string->list a)))\n        (let ((b-str (string->list\
    \ b)))\n          (let ((a-list (list->string a-str)))\n            (let ((b-list\
    \ (list->string b-str)))\n              (let ((a-list-len (length a-list)))\n\
    \                (let ((b-list-len (length b-list)))\n                  (let ((a-list-str\
    \ (list->string a-list)))\n                    (let ((b-list-str (list->string\
    \ b-list)))\n                      (let ((a-list-list (list->list a-list-str)))\n\
    \                        (let ((b-list-list (list->list b-list-str)))\n      \
    \                    (let ((a-list-list-len (length a-list-list)))\n         \
    \                   (let ((b-list-list-len (length b-list-list)))\n          \
    \                    (let ((a-list-list-str (list->string a-list-list)))\n   \
    \                             (let ((b-list-list-str (list->string b-list-list)))\n\
    \                                  (let ((a-list-list-list (list->list a-list-list-str)))\n\
    \                                    (let ((b-list-list-list (list->list b-list-list-str)))\n\
    \                                      (let ((a-list-list-list-len (length a-list-list-list)))\n\
    \                                        (let ((b-list-list-list-len (length b-list-list-list)))\n\
    \                                          (let ((a-list-list-list-str (list->string\
    \ a-list-list-list)))\n                                            (let ((b-list-list-list-str\
    \ (list->string b-list-list-list)))\n                                        \
    \      (let ((a-list-list-list-list (list->list a-list-list-list-str)))\n    \
    \                                            (let ((b-list-list-list-list (list->list\
    \ b-list-list-list-str)))\n                                                  (let\
    \ ((", "  (let ((a (string->list a)))\n    (let ((b (string->list b)))\n     \
    \ (and (map (lambda (x) (string-ci=? x a)) b)\n          (string-ci=? b a))))\n\
    )\n\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #f\n;; >>> (cycpattern_check\
    \ \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"psus\")\n\
    ;; #f\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"efef\" \"eeff\")\n;; #f\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n\
    ;; #t", "  (let ((a-len (length a))\n        (b-len (length b)))\n    (if (and\
    \ (>= a-len b-len)\n            (string-ci=? (string-copy/part a b-len)\n    \
    \                              (string-copy/part a-len b)))\n      #t\n      #f))\n\
    )\n", "  (let ((a (string->list a)))\n    (let ((b (string->list b)))\n      (and\
    \ (string-prefix? b a)\n            (string-prefix? a b))))\n)\n", "  (let ((p\
    \ (string-split a b)))\n    (and (map (lambda (x) (string-contains? x b)) p)\n\
    \         (map (lambda (x) (string-contains? x a)) p))))\n", "  (let ((a-len (string-length\
    \ a)))\n    (let ((b-len (string-length b)))\n      (let ((a-str (string->list\
    \ a))\n            (b-str (string->list b)))\n        (let ((a-list (string-append\
    \ a-str a-str)))\n          (let ((b-list (string-append b-str b-str)))\n    \
    \        (and (string-ci=? a-list b-list)\n                (string-ci=? b-list\
    \ a-list))))))))\n", "  (let ((p (string-split a b)))\n    (and (map (lambda (x)\
    \ (string-contains x b)) p)\n        (string-contains a b))))\n", "  (let ((a-len\
    \ (length a))\n        (b-len (length b)))\n    (if (and (>= a-len b-len)\n  \
    \          (string-ci=? (substring a 0 b-len) b))\n      #t\n      (let ((a-rot\
    \ (string-ci-rotate a a-len))\n            (b-rot (string-ci-rotate b b-len)))\n\
    \        (if (and (>= a-len b-len)\n                (string-ci=? a b-rot))\n \
    \         #t\n          (let ((a-rot-rot (string-ci-rotate a a-len))\n       \
    \         (b-rot-rot (string-ci-rotate b b-len)))\n            (if (and (>= a-len\
    \ b-len)\n                    (string-ci=? a-rot b-rot))\n              #t\n \
    \             (let ((a-rot-rot-rot (string-ci-rotate a a-len))\n             \
    \       (b-rot-rot-rot (string-ci-rotate b b-len)))\n                (if (and\
    \ (>= a-len b-len)\n                        (string-ci=? a-rot-rot b-rot))\n \
    \                 #t\n                  (let ((a-rot-rot-rot-rot (string-ci-rotate\
    \ a a-len))\n                        (b-rot-rot-rot-rot (string-ci-rotate b b-len)))\n\
    \                    (if (and (>= a-len b-len)\n                            (string-ci=?\
    \ a-rot-rot-rot b-rot))\n                      #t\n                      (let\
    \ ((a-rot-rot-rot-rot-rot (string-ci-rotate a a-len))\n                      \
    \      (b-rot-rot-rot-rot-rot (string-ci-rotate b b-len)))\n                 \
    \       (if (and (>= a-len b-len)\n                                (string-ci=?\
    \ a-rot-rot-rot-rot b-rot))\n                          #t\n                  \
    \        (let ((a-rot-rot-rot-rot-rot-rot (string-ci-rotate a a-len))\n      \
    \                          (b-rot-rot-rot-rot-", "  (let ((a-len (length a))\n\
    \        (b-len (length b)))\n    (and\n      (let ((a-str (substring a 0 a-len)))\n\
    \        (let ((b-str (substring b 0 b-len)))\n          (and\n            (string=?\
    \ a-str b-str)\n            (string=? b-str a-str)))))))\n", "  (let ((a-len (length\
    \ a))\n        (b-len (length b)))\n    (if (and (>= a-len b-len)\n          \
    \  (string-ci=? (substring a 0 b-len) b))\n      #t\n      (let ((a-rot (string-ci=?\
    \ (substring a 0 a-len) a)))\n        (if (or (string-ci=? a b)\n            \
    \    (string-ci=? a-rot b))\n          #t\n          (let ((b-rot (string-ci=?\
    \ (substring b 0 b-len) b)))\n            (if (or (string-ci=? a b-rot)\n    \
    \                (string-ci=? a-rot b-rot))\n              #t\n              #f))))))))\n",
  "  (let ((a-len (length a))\n        (b-len (length b)))\n    (if (>= a-len b-len)\n\
    \      (let ((a-rot (rotate a a-len))\n            (b-rot (rotate b b-len)))\n\
    \        (and (string=? a-rot b-rot)\n             (string=? b-rot a-rot))))))\n",
  "  (let ((p (string-split a b)))\n    (and (map (lambda (x) (string-contains x b))\
    \ p)\n        (string-contains a b))))\n\n;; >>> (cycpattern_check \"abcd\" \"\
    abd\")\n;; #f\n;; >>> (cycpattern_check \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"whassup\" \"psus\")\n;; #f\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;;\
    \ #t\n;; >>> (cycpattern_check \"efef\" \"eeff\")\n;; #f\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\"\
    )\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\"\
    )\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\"\
    )\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\"\
    )\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\"\
    )\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himens", "  (let ((a\
    \ (string->list a)))\n    (let ((b (string->list b)))\n      (and (string-ci=?\
    \ (car a) (car b))\n           (string-ci=? (car a) (car b))\n           (string-ci=?\
    \ (car a) (car b))\n           (string-ci=? (car a) (car b))\n           (string-ci=?\
    \ (car a) (car b))\n           (string-ci=? (car a) (car b))\n           (string-ci=?\
    \ (car a) (car b))\n           (string-ci=? (car a) (car b))\n           (string-ci=?\
    \ (car a) (car b))\n           (string-ci=? (car a) (car b))\n           (string-ci=?\
    \ (car a) (car b))\n           (string-ci=? (car a) (car b))\n           (string-ci=?\
    \ (car a) (car b))\n           (string-ci=? (car a) (car b))\n           (string-ci=?\
    \ (car a) (car b))\n           (string-ci=? (car a) (car b))\n           (string-ci=?\
    \ (car a) (car b))\n           (string-ci=? (car a) (car b))\n           (string-ci=?\
    \ (car a) (car b))\n           (string-ci=? (car a) (car b))\n           (string-ci=?\
    \ (car a) (car b))\n           (string-ci=? (car a) (car b))\n           (string-ci=?\
    \ (car a) (car b))\n           (string-ci=? (car a) (car b))\n           (string-ci=?\
    \ (car a) (car b))\n           (string-ci=? (car a) (car b))\n           (string-ci=?\
    \ (car a) (car b))\n           (string-ci=? (car a) (car b))\n           (string-ci=?\
    \ (car a) (car b))\n           (string-ci=? (car a) (car b))\n           (string-ci=",
  "  (let ((a-len (string-length a)))\n    (let ((b-len (string-length b)))\n    \
    \  (let ((a-str (string->list a)))\n        (let ((b-str (string->list b)))\n\
    \          (let ((a-list (string-join a-str \" \")))\n            (let ((b-list\
    \ (string-join b-str \" \")))\n              (let ((a-list-len (string-length\
    \ a-list)))\n                (let ((b-list-len (string-length b-list)))\n    \
    \              (let ((a-list-str (string->list a-list)))\n                   \
    \ (let ((b-list-str (string->list b-list)))\n                      (let ((a-list-str-len\
    \ (string-length a-list-str)))\n                        (let ((b-list-str-len\
    \ (string-length b-list-str)))\n                          (let ((a-list-str-str\
    \ (string->list a-list-str)))\n                            (let ((b-list-str-str\
    \ (string->list b-list-str)))\n                              (let ((a-list-str-list\
    \ (string-join a-list-str \" \")))\n                                (let ((b-list-str-list\
    \ (string-join b-list-str \" \")))\n                                  (let ((a-list-str-list-len\
    \ (string-length a-list-str-list)))\n                                    (let\
    \ ((b-list-str-list-len (string-length b-list-str-list)))\n                  \
    \                    (let ((a-list-str-list-str (string->list a-list-str-list)))\n\
    \                                        (let ((b-list-str-list-str (string->list\
    \ b-list-str-list)))\n                                          (let ((a-list-str-list-str-len\
    \ (string-length a-list-str-list-str)))\n                                    \
    \        (let ((b-list-str-list-str-len (string-length b-list-str-list-str)))\n\
    \                                              (let ((a-list-str-list-str-str\
    \ (string->list a-list-str-list-str)))", "  (let ((a-len (length a))\n       \
    \ (b-len (length b)))\n    (and (>= a-len b-len)\n         (let ((a-str (substring\
    \ a 0 a-len))\n               (b-str (substring b 0 b-len)))\n          (string=?\
    \ a-str b-str))))\n)\n", "  (let ((a-len (string-length a)))\n    (let ((b-len\
    \ (string-length b)))\n      (let ((a-str (string->list a)))\n        (let ((b-str\
    \ (string->list b)))\n          (let ((a-list (list->string a-str)))\n       \
    \     (let ((b-list (list->string b-str)))\n              (let ((a-list-len (length\
    \ a-list))\n                    (b-list-len (length b-list)))\n              \
    \  (let ((a-list-str (car a-list))\n                      (b-list-str (car b-list)))\n\
    \                  (if (eqv? (string-ci=? a-list-str b-list-str)\n           \
    \             (string-ci=? a-list-str b-list-str))\n                    #t\n \
    \                   (let ((a-list-len (length a-list)))\n                    \
    \  (let ((b-list-len (length b-list)))\n                        (let ((a-list-str\
    \ (car a-list))\n                              (b-list-str (car b-list)))\n  \
    \                        (if (eqv? (string-ci=? a-list-str b-list-str)\n     \
    \                           (string-ci=? a-list-str b-list-str))\n           \
    \                 #t\n                            (let ((a-list-len (length a-list)))\n\
    \                              (let ((b-list-len (length b-list)))\n         \
    \                       (let ((a-list-str (car a-list))\n                    \
    \                  (b-list-str (car b-list)))\n                              \
    \    (if (eqv? (string-ci=? a-list-str b-list-str)\n                         \
    \               (string-ci=? a-list-str b-list-str))\n                       \
    \             #t\n                                    #f))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
  "  (let ((a-len (length a))\n        (b-len (length b)))\n    (if (and (>= a-len\
    \ b-len)\n            (string-ci=? (string-copy/part a b-len)\n              \
    \                   (string-copy/part a 0)))\n      #t\n      (and (string-ci=?\
    \ (string-copy/part a 0)\n                                 (string-copy/part b\
    \ 0))\n            (string-ci=? (string-copy/part b a-len)\n                 \
    \                (string-copy/part b 0)))\n      #f))\n)\n", "  (let ((a-len (length\
    \ a))\n        (b-len (length b)))\n    (and\n      (>= b-len 0)\n      (let ((a-str\
    \ (substring a 0 b-len)))\n        (string=? (string-ci a-str) (string-ci b)))\n\
    \      (let ((b-str (substring b 0 b-len)))\n        (string=? (string-ci a-str)\
    \ (string-ci b-str)))\n      (let ((a-rot (string-ci (string-append a-str (string-ci\
    \ (string-append a-str \"a\") \"b\") \"c\") \"d\"))\n            (b-rot (string-ci\
    \ (string-append b-str (string-ci (string-append b-str \"a\") \"b\") \"c\") \"\
    d\")))\n        (string=? (string-ci a-rot) (string-ci b-rot))))))\n", "  (let\
    \ ((p (string-split a b)))\n    (and (map (lambda (x) (string-ci-caseless-find\
    \ x b)) p)\n        (string-ci-caseless-find a b))))\n", "  (let ((a-len (length\
    \ a))\n        (b-len (length b)))\n    (if (eqv? (modulo a-len b-len) 0)\n  \
    \    (and (substring? b a-len)\n           (substring? a b-len))\n      #f)))\n\
    \n;; #lang scheme", "  (let ((a_len (length a))\n        (b_len (length b)))\n\
    \    (if (and (>= a_len b_len)\n            (string-ci=? a b 0 a_len))\n     \
    \ #t\n      (let ((a_idx 0)\n            (b_idx 0))\n        (while (< a_idx a_len)\n\
    \          (if (string-ci=? (substring a a_idx b_idx) b 0 b_len)\n           \
    \ (return #t)\n            (setq a_idx (1+ a_idx))\n            (setq b_idx (1+\
    \ b_idx)))))))\n", "  (let ((a-len (length a))\n        (b-len (length b)))\n\
    \    (and\n      (>= a-len b-len)\n      (let ((a-rot (rotate a-len a)))\n   \
    \     (let ((b-rot (rotate b-len b)))\n          (and\n            (memq a-rot\
    \ b-rot)\n            (memq b-rot a-rot))))))))\n", "  (let ((a-len (length a)))\n\
    \    (let ((b-len (length b)))\n      (let ((a-str (substring a 0 a-len)))\n \
    \       (let ((b-str (substring b 0 b-len)))\n          (and (string=? a-str b-str)\n\
    \               (string=? b-str a-str))))))))\n", "  (let ((p (string-split a\
    \ b)))\n    (and (map (lambda (x) (string-contains? x b)) p)\n        (string-contains?\
    \ b a))))\n", "  (let ((p (string-split a b)))\n    (and (map (lambda (x) (string-ci-caseless-equal?\
    \ x b)) p)\n         (string-ci-caseless-equal? b a))))\n\n;; >>> (cycpattern_check\
    \ \"abcd\" \"abd\")\n;; #f\n;; >>> (cycpattern_check \"hello\" \"ell\")\n;; #t\n\
    ;; >>> (cycpattern_check \"whassup\" \"psus\")\n;; #f\n;; >>> (cycpattern_check\
    \ \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check \"efef\" \"eeff\")\n;; #f\n\
    ;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\"\
    )\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\"\
    )\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\"\
    )\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\"\
    )\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\"\
    )\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;;", "  (let\
    \ ((a-len (length a))\n        (b-len (length b)))\n    (if (and (>= a-len b-len)\n\
    \            (string-ci=? (string-copy/part a b-len) (string-copy/part a 0)))\n\
    \      #t\n      (let ((i 0))\n        (while (< i a-len)\n          (if (string-ci=?\
    \ (string-copy/part a i b-len) (string-copy/part a (add1 i) b-len))\n        \
    \    #t\n            (setq i (add1 i)))))\n    #f))\n", "  (let ((p (string-split\
    \ a b)))\n    (and (map (lambda (x) (string-contains? x b)) p)\n        (string-contains?\
    \ b a))))\n\n;; You are given a list of words. You need to return #t if any of\
    \ the words is a substring of any other word\n;; >>> (cycpattern_check-list \"\
    abcd\" \"abd\")\n;; #f\n;; >>> (cycpattern_check-list \"hello\" \"ell\")\n;; #t\n\
    ;; >>> (cycpattern_check-list \"whassup\" \"psus\")\n;; #f\n;; >>> (cycpattern_check-list\
    \ \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check-list \"efef\" \"eeff\")\n\
    ;; #f\n;; >>> (cycpattern_check-list \"himenss\" \"simen\")\n;; #t", "  (let ((a-len\
    \ (string-length a)))\n    (let ((b-len (string-length b)))\n      (let ((a-str\
    \ (string->list a))\n            (b-str (string->list b)))\n        (let ((a-list\
    \ (mapcar (lambda (x) (string-cix (string->list x))) a-str)))\n          (let\
    \ ((b-list (mapcar (lambda (x) (string-cix (string->list x))) b-str)))\n     \
    \       (and (mapcar (lambda (x) (string-cix (string->list x))) a-list)\n    \
    \           (mapcar (lambda (x) (string-cix (string->list x))) b-list))))))))\n",
  "  (let ((p (string-split a b)))\n    (and (map (lambda (x) (string-contains? x\
    \ b)) p)\n        (string-contains? b a))))\n", "  (let ((a-len (string-length\
    \ a)))\n    (let ((b-len (string-length b)))\n      (let ((a-str (string->list\
    \ a))\n            (b-str (string->list b)))\n        (if (string-ci=? a-str b-str)\n\
    \          (let ((a-list (string->list a)))\n            (let ((b-list (string->list\
    \ b)))\n              (if (string-ci=? a-list b-list)\n                #t\n  \
    \              #f))))))))))\n", "  (let ((a-len (string-length a)))\n    (let\
    \ ((b-len (string-length b)))\n      (let ((a-str (string-copy a)))\n        (let\
    \ ((b-str (string-copy b)))\n          (let ((i 0))\n            (while (< i a-len)\n\
    \              (let ((j 0))\n                (while (< j b-len)\n            \
    \      (if (string-ci=? a-str (string-ci b-str))\n                    (return\
    \ #t)\n                    (setq j (1+ j))))\n                (setq i (1+ i)))))))))))\n",
  "  (let ((p (string-split a b)))\n    (and (map (lambda (s) (string-contains? s\
    \ a)) p)\n        (string-contains? b a))))\n\n;; You are given a string and a\
    \ pattern. You need to return #t if the string matches the pattern.\n;; >>> (cycpattern_check\
    \ \"abcd\" \"abd\")\n;; #f\n;; >>> (cycpattern_check \"hello\" \"ell\")\n;; #t\n\
    ;; >>> (cycpattern_check \"whassup\" \"psus\")\n;; #f\n;; >>> (cycpattern_check\
    \ \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check \"efef\" \"eeff\")\n;; #f\n\
    ;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t", "  (let ((p (string-split\
    \ a b)))\n    (and (map (lambda (x) (string-contains? x b)) p)\n        (string-contains?\
    \ b a))))\n\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #f\n;; >>> (cycpattern_check\
    \ \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"psus\")\n\
    ;; #f\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"efef\" \"eeff\")\n;; #f\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n\
    ;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\"\
    )\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\"\
    )\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\"\
    )\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\"\
    )\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\"\
    )\n;; #t\n;; >>> (cycpattern_check \"", "  (let ((a-len (string-length a)))\n\
    \    (let ((b-len (string-length b)))\n      (let ((a-str (string->list a)))\n\
    \        (let ((b-str (string->list b)))\n          (let ((a-list (list->string\
    \ a-str)))\n            (let ((b-list (list->string b-str)))\n              (let\
    \ ((a-list-len (length a-list)))\n                (let ((b-list-len (length b-list)))\n\
    \                  (let ((a-list-str (car a-list)))\n                    (let\
    \ ((b-list-str (car b-list)))\n                      (let ((a-list-str-len (string-length\
    \ a-list-str)))\n                        (let ((b-list-str-len (string-length\
    \ b-list-str)))\n                          (let ((a-list-str-str (string->list\
    \ a-list-str)))\n                            (let ((b-list-str-str (string->list\
    \ b-list-str)))\n                              (let ((a-list-str-list (list->string\
    \ a-list-str-str)))\n                                (let ((b-list-str-list (list->string\
    \ b-list-str-str)))\n                                  (let ((a-list-str-list-len\
    \ (length a-list-str-list)))\n                                    (let ((b-list-str-list-len\
    \ (length b-list-str-list)))\n                                      (let ((a-list-str-list-str\
    \ (car a-list-str-list)))\n                                        (let ((b-list-str-list-str\
    \ (car b-list-str-list)))\n                                          (let ((a-list-str-list-str-len\
    \ (string-length a-list-str-list-str)))\n                                    \
    \        (let ((b-list-str-list-str-len (string-length b-list-str-list-str)))\n\
    \                                              (let ((a-list-str-list-str-str\
    \ (string->list a-list-str-list-str)))\n                                     \
    \           (let ((b-list-str-list-str-str (string", "  (let ((p (string-split\
    \ a b)))\n    (and (map (lambda (x) (string-contains? x b)) p)\n        (string-contains?\
    \ b a))))\n", "  (let ((a-len (length a))\n        (b-len (length b)))\n    (if\
    \ (and (>= a-len b-len)\n            (string-ci=? (string-copy/part a b-len)\n\
    \                                  (string-copy/part a 0)))\n        #t\n    \
    \    (string-ci=? (string-copy/part a 0)\n                                  (string-copy/part\
    \ b 0)))))\n", "  (let ((a-len (length a))\n        (b-len (length b)))\n    (if\
    \ (and (>= a-len b-len)\n            (string-ci=? a (string-copy/ci b 0)))\n \
    \     #t\n      (let ((a-str (string-copy/ci a 0)))\n        (let ((b-str (string-copy/ci\
    \ b 0)))\n          (string-ci=? a-str b-str))))))\n", "  (let ((a-len (string-length\
    \ a)))\n    (let ((b-len (string-length b)))\n      (let ((a-str (string->list\
    \ a)))\n        (let ((b-str (string->list b)))\n          (let ((a-list (list->string\
    \ a-str)))\n            (let ((b-list (list->string b-str)))\n              (let\
    \ ((a-list-len (length a-list)))\n                (let ((b-list-len (length b-list)))\n\
    \                  (let ((a-list-str (car a-list)))\n                    (let\
    \ ((b-list-str (car b-list)))\n                      (let ((a-list-str-len (length\
    \ a-list-str)))\n                        (let ((b-list-str-len (length b-list-str)))\n\
    \                          (let ((a-list-str-str (string->list a-list-str)))\n\
    \                            (let ((b-list-str-str (string->list b-list-str)))\n\
    \                              (let ((a-list-str-str-len (length a-list-str-str)))\n\
    \                                (let ((b-list-str-str-len (length b-list-str-str)))\n\
    \                                  (let ((a-list-str-str-str (car a-list-str-str)))\n\
    \                                    (let ((b-list-str-str-str (car b-list-str-str)))\n\
    \                                      (let ((a-list-str-str-str-len (length a-list-str-str-str)))\n\
    \                                        (let ((b-list-str-str-str-len (length\
    \ b-list-str-str-str)))\n                                          (let ((a-list-str-str-str-str\
    \ (car a-list-str-str-str)))\n                                            (let\
    \ ((b-list-str-str-str-str (car b-list-str-str-str)))\n                      \
    \                        (let ((a-list-str-str-str-str-len (length a-list-str-str-str-str)))\n\
    \                                                (let ((b-list-str-str-str-str",
  "  (let ((a-len (string-length a)))\n    (let ((b-len (string-length b)))\n    \
    \  (let ((a-str (string->list a)))\n        (let ((b-str (string->list b)))\n\
    \          (and\n            (let ((a-str-len (length a-str)))\n             \
    \ (let ((b-str-len (length b-str)))\n                (and\n                  (let\
    \ ((a-str-str (car a-str)))\n                    (let ((b-str-str (car b-str)))\n\
    \                      (and\n                        (let ((a-str-str-len (length\
    \ a-str-str)))\n                          (let ((b-str-str-len (length b-str-str)))\n\
    \                            (and\n                              (let ((a-str-str-str\
    \ (car a-str-str)))\n                                (let ((b-str-str-str (car\
    \ b-str-str)))\n                                  (and\n                     \
    \               (= a-str-str-len a-str-str-len)\n                            \
    \        (= b-str-str-len b-str-str-len)\n                                   \
    \ (= a-str-str-str b-str-str-str
  "  (let ((a-len (string-length a)))\n    (let ((b-len (string-length b)))\n    \
    \  (let ((a-str (string->list a))\n            (b-str (string->list b)))\n   \
    \     (and\n          (let ((a-str-len (length a-str)))\n            (let ((b-str-len\
    \ (length b-str)))\n              (and\n                (let ((a-str-str (car\
    \ a-str)))\n                  (let ((b-str-str (car b-str)))\n               \
    \     (and\n                      (string=? a-str-str b-str-str)\n           \
    \           (string=? b-str-str a-str-str))))))))))))))\n", "  (let ((a-len (length\
    \ a))\n        (b-len (length b)))\n    (if (and (>= a-len b-len)\n          \
    \  (string-ci=? a (string-copy b 0 b-len)))\n      #t\n      (let ((a-str (string-copy\
    \ a 0 a-len))\n            (b-str (string-copy b 0 b-len)))\n        (let ((a-str-len\
    \ (length a-str))\n              (b-str-len (length b-str)))\n          (if (>=\
    \ a-str-len b-str-len)\n              (string-ci=? a-str b-str)\n            \
    \  (let ((a-str-len-1 (length a-str-1))\n                    (b-str-len-1 (length\
    \ b-str-1)))\n                (if (>= a-str-len-1 b-str-len-1)\n             \
    \       (string-ci=? a-str-1 b-str-1)\n                    (let ((a-str-len-2\
    \ (length a-str-2))\n                          (b-str-len-2 (length b-str-2)))\n\
    \                      (if (>= a-str-len-2 b-str-len-2)\n                    \
    \      (string-ci=? a-str-2 b-str-2)\n                          (let ((a-str-len-3\
    \ (length a-str-3))\n                                (b-str-len-3 (length b-str-3)))\n\
    \                            (if (>= a-str-len-3 b-str-len-3)\n              \
    \                  (string-ci=? a-str-3 b-str-3)\n                           \
    \     (let ((a-str-len-4 (length a-str-4))\n                                 \
    \     (b-str-len-4 (length b-str-4)))\n                                  (if (>=\
    \ a-str-len-4 b-str-len-4)\n                                      (string-ci=?\
    \ a-str-4 b-str-4)\n                                      (let ((a-str-len-5 (length\
    \ a-str-5))\n                                            (b-str-len-5 (", "  (let\
    \ ((a (string->list a)))\n    (let ((b (string->list b)))\n      (and (string-ci=?\
    \ (string-ci-ci a b))\n           (string-ci=? (string-ci-ci b a))))))\n\n;; >>>\
    \ (cycpattern_check \"abcd\" \"abd\")\n;; #f\n;; >>> (cycpattern_check \"hello\"\
    \ \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"psus\")\n;; #f\n;; >>>\
    \ (cycpattern_check \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check \"efef\"\
    \ \"eeff\")\n;; #f\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;;\
    \ >>> (cycpattern_check \"abcd\" \"abcd\")\n;; #t\n;; >>> (cycpattern_check \"\
    hello\" \"hello\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"whassup\")\n\
    ;; #t\n;; >>> (cycpattern_check \"abab\" \"abab\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"efef\" \"efef\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"himenss\"\
    )\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"abcd\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"hello\" \"ell\")\n;; #f\n;; >>> (cycpattern_check \"whassup\" \"psus\")\n\
    ;; #f\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;; #f\n;; >>> (cycpattern_check\
    \ \"efef\" \"eeff\")\n;; #f\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n\
    ;; #f\n;; >>> (cycpattern_check \"abcd\" \"abcd\")\n;; #f\n;; >>> (cycpattern_check\
    \ \"hello\" \"hello\")\n;; #f\n;; >>> (cycpattern_check \"whassup\" \"whassup\"\
    )\n;; #f\n;; >>> (cycpattern_", "  (let ((a-len (length a))\n        (b-len (length\
    \ b)))\n    (and\n      (let ((a-word (substring a 0 a-len)))\n        (let ((b-word\
    \ (substring b 0 b-len)))\n          (and\n            (string=? a-word b-word)\n\
    \            (string=? b-word a-word)))))))\n", "  (let ((a-len (string-length\
    \ a)))\n    (let ((b-len (string-length b)))\n      (let ((a-str (string->list\
    \ a)))\n        (let ((b-str (string->list b)))\n          (let ((a-list (list->string\
    \ a-str)))\n            (let ((b-list (list->string b-str)))\n              (and\n\
    \                (string-ci=? a-list b-list)\n                (string-ci=? b-list\
    \ a-list)\n                (string-ci=? a-list a-list)\n                (string-ci=?\
    \ b-list b-list)\n                (string-ci=? a-list b-list)\n              \
    \  (string-ci=? b-list a-list)\n                (string-ci=? a-list a-list)\n\
    \                (string-ci=? b-list b-list)\n                (string-ci=? a-list\
    \ b-list)\n                (string-ci=? b-list a-list)\n                (string-ci=?\
    \ a-list a-list)\n                (string-ci=? b-list b-list)\n              \
    \  (string-ci=? a-list b-list)\n                (string-ci=? b-list a-list)\n\
    \                (string-ci=? a-list a-list)\n                (string-ci=? b-list\
    \ b-list)\n                (string-ci=? a-list b-list)\n                (string-ci=?\
    \ b-list a-list)\n                (string-ci=? a-list a-list)\n              \
    \  (string-ci=? b-list b-list)\n                (string-ci=? a-list b-list)\n\
    \                (string-ci=? b-list a-list)\n                (string-ci=? a-list\
    \ a-list)\n                (string-ci=? b-list b-list)\n                (string-ci=?\
    \ a-list b-list)\n                (string-ci=? b-list a-list)\n              \
    \  (string-ci=? a-list a-list)\n                (string-ci=? b-list b-list)\n",
  "  (let ((p (string-split a b)))\n    (and (map (lambda (x) (string-ci-caseless-find\
    \ x b)) p)\n        (string-ci-caseless-find a b))))\n", "  (let ((p (string-split\
    \ a b)))\n    (and (map (lambda (x) (string-contains? x b)) p)\n         (string-contains?\
    \ b a))))\n\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #f\n;; >>> (cycpattern_check\
    \ \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"psus\")\n\
    ;; #f\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"efef\" \"eeff\")\n;; #f\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n\
    ;; #t\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"psus\")\n\
    ;; #t\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"efef\" \"eeff\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n\
    ;; #t\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"psus\")\n\
    ;; #t\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"efef\" \"eeff\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n\
    ;; #t\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"psus\")\n\
    ;; #t\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;; #t\n;; >>> (cy", "  (let\
    \ ((p (string-split a b)))\n    (and (map (lambda (x) (string-contains? x b))\
    \ p)\n         (string-contains? b a))))\n", "  (let ((p (string-split a b)))\n\
    \    (and (map (lambda (x) (string-contains? x b)) p)\n         (string-contains?\
    \ b a))))\n", "  (let ((a (string->list a)))\n    (let ((b (string->list b)))\n\
    \      (and\n        (string-prefix? b a)\n        (string-prefix? a b)\n    \
    \    (string-prefix? (string-append a b) a)\n        (string-prefix? (string-append\
    \ b a) b)\n        (string-prefix? (string-append a b) b)\n        (string-prefix?\
    \ (string-append b a) a)))\n    (or\n      (string-prefix? a b)\n      (string-prefix?\
    \ b a)\n      (string-prefix? (string-append a b) b)\n      (string-prefix? (string-append\
    \ b a) a)))\n  )\n)\n", "  (let ((a-len (length a))\n        (b-len (length b)))\n\
    \    (if (and (>= a-len b-len)\n            (string-ci=? (string-copy/part a b-len)\n\
    \                                 (string-copy/part a 0)))\n      #t\n      (and\
    \ (>= b-len a-len)\n            (string-ci=? (string-copy/part b a-len)\n    \
    \                             (string-copy/part b 0)))\n      #f))\n)\n", "  (let\
    \ ((a-len (length a))\n        (b-len (length b)))\n    (if (and (>= a-len b-len)\n\
    \            (string-ci=? (substring a 0 b-len) b))\n      #t\n      (let ((a-rot\
    \ (string-ci-rotate a a-len))\n            (b-rot (string-ci-rotate b b-len)))\n\
    \        (if (and (>= a-len b-len)\n                (string-ci=? a b-rot))\n \
    \         #t\n          (let ((a-rot-rot (string-ci-rotate a a-len))\n       \
    \         (b-rot-rot (string-ci-rotate b b-len)))\n            (if (and (>= a-len\
    \ b-len)\n                    (string-ci=? a-rot b-rot))\n              #t\n \
    \             #f))))))\n", "  (let ((p (string-split a b)))\n    (and (map (lambda\
    \ (x) (string-contains? x b)) p)\n         (string-contains? b a))))\n\n;; You\
    \ are given a string and a pattern. You need to return #t if the string matches\
    \ the pattern\n;; >>> (cycpattern_check \"abcd\" \"ab*\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"abcd\" \"ab?\")\n;; #f\n;; >>> (cycpattern_check \"abcd\" \"ab+\")\n;; #f\n\
    ;; >>> (cycpattern_check \"abcd\" \"ab*?\")\n;; #t\n;; >>> (cycpattern_check \"\
    abcd\" \"ab+?\")\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"ab*+\")\n;; #t\n\
    ;; >>> (cycpattern_check \"abcd\" \"ab+*\")\n;; #t\n;; >>> (cycpattern_check \"\
    abcd\" \"ab*+?\")\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"ab+*?\")\n;; #t\n\
    ;; >>> (cycpattern_check \"abcd\" \"ab*+*\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"abcd\" \"ab+*+\")\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"ab*+*?\")\n\
    ;; #t\n;; >>> (cycpattern_check \"abcd\" \"ab+*+?\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"abcd\" \"ab*+*+\")\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"ab+*+*\")\n\
    ;; #t\n;; >>> (cycpattern_check \"abcd\" \"ab*+*+?\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"abcd\" \"ab+*+*?\")\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"ab*+*+*\"\
    )\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"ab+*+*+\")\n;; #t\n;; >>> (", " \
    \ (let ((a (string->list a)))\n    (let ((b (string->list b)))\n      (and (string-ci=?\
    \ (string-ci-ci a b))\n           (string-ci-ci=? (string-ci-ci b a))))))\n\n\
    ;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #f\n;; >>> (cycpattern_check \"\
    hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"psus\")\n;; #f\n\
    ;; >>> (cycpattern_check \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check \"\
    efef\" \"eeff\")\n;; #f\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n\
    ;; >>> (cycpattern_check \"abcd\" \"abcd\")\n;; #t\n;; >>> (cycpattern_check \"\
    hello\" \"hello\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"whassup\")\n\
    ;; #t\n;; >>> (cycpattern_check \"abab\" \"abab\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"efef\" \"efef\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"himenss\"\
    )\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"abcd\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"psus\")\n\
    ;; #t\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"efef\" \"eeff\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n\
    ;; #t\n;; >>> (cycpattern_check \"abcd\" \"abcd\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"hello\" \"hello\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"whassup\"\
    )\n;; #t\n;; >>> (cyc", "  (let ((p (string-split a b)))\n    (and (map (lambda\
    \ (p) (string-contains? p b)) p)\n         (string-contains? b a))))\n", "  (let\
    \ ((a-len (string-length a)))\n    (let ((b-len (string-length b)))\n      (let\
    \ ((a-str (string->list a)))\n        (let ((b-str (string->list b)))\n      \
    \    (let ((a-list (list->string a-str)))\n            (let ((b-list (list->string\
    \ b-str)))\n              (and (string-ci=? a-list b-list)\n                 (string-ci=?\
    \ b-list a-list))))))))))\n", "  (let ((p (string-split a b)))\n    (and (map\
    \ (lambda (x) (string-contains? x b)) p)\n         (string-contains? b a))))\n\
    \n;; You are given a string and a pattern. You need to return #t if the pattern\
    \ is a substring of the string\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n;;\
    \ #t\n;; >>> (cycpattern_check \"hello\" \"ell\")\n;; #f\n;; >>> (cycpattern_check\
    \ \"whassup\" \"psus\")\n;; #f\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;;\
    \ #t\n;; >>> (cycpattern_check \"efef\" \"eeff\")\n;; #f\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t", "  (let ((p (string-split a b)))\n    (and (map\
    \ (lambda (x) (string-contains? x b)) p)\n         (string-contains? b a))))\n\
    \n;; You are given a string and a pattern. You need to return #t if the string\
    \ contains any substring that matches the pattern.\n;; >>> (cycpattern_check \"\
    abcd\" \"ab*\")\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"*cd\")\n;; #t\n;;\
    \ >>> (cycpattern_check \"abcd\" \"*ab\")\n;; #f\n;; >>> (cycpattern_check \"\
    abcd\" \"*ab*\")\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"*ab*d\")\n;; #t\n\
    ;; >>> (cycpattern_check \"abcd\" \"*ab*cd\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"abcd\" \"*ab*cd*\")\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"*ab*cd*d\"\
    )\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"*ab*cd*d*\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"abcd\" \"*ab*cd*d*e\")\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"*ab*cd*d*e*\"\
    )\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"*ab*cd*d*e*f\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"abcd\" \"*ab*cd*d*e*f*\")\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"*ab*cd*d*e*f*g\"\
    )\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"*ab*cd*d*e*f*g*\")\n;; #t\n;; >>>\
    \ (cycpattern_check \"abcd\" \"*ab*cd*d*e*f*g*h\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"abcd\" \"*ab*cd*d*", "  (let ((a-len (length a))\n        (b-len (length b)))\n\
    \    (if (and (>= a-len b-len)\n            (string-ci=? (substring a 0 b-len)\
    \ b))\n      #t\n      (let ((i 0))\n        (while (< i a-len)\n          (if\
    \ (string-ci=? (substring a i b-len) b)\n              #t\n              (set!\
    \ i (+ i 1))))))))\n", "  (let ((a-len (length a))\n        (b-len (length b)))\n\
    \    (if (and (>= a-len b-len)\n            (string-ci=? (substring a 0 b-len)\
    \ b))\n      #t\n      #f))\n)\n", "  (let ((a (string->list a)))\n    (let ((b\
    \ (string->list b)))\n      (and\n        (string-set-ci (string-append a b) #t)\n\
    \        (string-set-ci (string-append b a) #t)\n        (string-set-ci (string-append\
    \ (string-append a b) b) #t)\n        (string-set-ci (string-append (string-append\
    \ b a) b) #t)\n        (string-set-ci (string-append (string-append b a) a) #t)\n\
    \        (string-set-ci (string-append (string-append a b) a) #t)\n        (string-set-ci\
    \ (string-append (string-append a b) (string-append b a)) #t)\n        (string-set-ci\
    \ (string-append (string-append b a) (string-append a b)) #t)\n        (string-set-ci\
    \ (string-append (string-append b a) (string-append a b)) #t)\n        (string-set-ci\
    \ (string-append (string-append b a) (string-append b a)) #t)\n        (string-set-ci\
    \ (string-append (string-append b a) (string-append b a)) #t)\n        (string-set-ci\
    \ (string-append (string-append b a) (string-append b a)) #t)\n        (string-set-ci\
    \ (string-append (string-append b a) (string-append b a)) #t)\n        (string-set-ci\
    \ (string-append (string-append b a) (string-append b a)) #t)\n        (string-set-ci\
    \ (string-append (string-append b a) (string-append b a)) #t)\n        (string-set-ci\
    \ (string-append (string-append b a) (string-append b a)) #t)\n        (string-set-ci\
    \ (string-append (string-append b a) (string-append b a)) #t)\n        (string-set-ci\
    \ (string-append (string-append b a) (string-append b a)) #t)\n        (string-",
  "  (let ((a-len (string-length a)))\n    (let ((b-len (string-length b)))\n    \
    \  (let ((a-str (string-copy a)))\n        (let ((b-str (string-copy b)))\n  \
    \        (let ((a-str-len (string-length a-str)))\n            (let ((b-str-len\
    \ (string-length b-str)))\n              (let ((a-str-str (string-copy a-str)))\n\
    \                (let ((b-str-str (string-copy b-str)))\n                  (let\
    \ ((a-str-str-len (string-length a-str-str)))\n                    (let ((b-str-str-len\
    \ (string-length b-str-str)))\n                      (let ((a-str-str-str (string-copy\
    \ a-str-str)))\n                        (let ((b-str-str-str (string-copy b-str-str)))\n\
    \                          (let ((a-str-str-str-len (string-length a-str-str-str)))\n\
    \                            (let ((b-str-str-str-len (string-length b-str-str-str)))\n\
    \                              (let ((a-str-str-str-str (string-copy a-str-str-str)))\n\
    \                                (let ((b-str-str-str-str (string-copy b-str-str-str)))\n\
    \                                  (let ((a-str-str-str-str-len (string-length\
    \ a-str-str-str-str)))\n                                    (let ((b-str-str-str-str-len\
    \ (string-length b-str-str-str-str)))\n                                      (let\
    \ ((a-str-str-str-str-str-str (string-copy a-str-str-str-str-str)))\n        \
    \                                (let ((b-str-str-str-str-str-str (string-copy\
    \ b-str-str-str-str-str))))\n                                      (let ((a-str-str-str-str-str-str-len\
    \ (string-length a-str-str-str-str-str-str)))\n                              \
    \          (let ((b-str-str-str-", "  (let ((p (string-split a b)))\n    (and\
    \ (map (lambda (x) (string-ci-caseless-equal? x b)) p)\n        (string-ci-caseless-equal?\
    \ a b))))\n", "  (let ((p (string-split a b)))\n    (and (map (lambda (x) (string-contains?\
    \ x b)) p)\n        (string-contains? b a))))\n\n;; You are given a string and\
    \ a pattern. You need to return #t if the pattern is a substring of the string\n\
    ;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #f\n;; >>> (cycpattern_check \"\
    hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"psus\")\n;; #f\n\
    ;; >>> (cycpattern_check \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check \"\
    efef\" \"eeff\")\n;; #f\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t",
  "  (let ((a-len (length a))\n        (b-len (length b)))\n    (if (and (>= a-len\
    \ b-len)\n            (string-ci=? (substring a 0 a-len) b))\n      #t\n     \
    \ (let ((a-rot (string-ci-rotate a a-len))\n            (b-rot (string-ci-rotate\
    \ b b-len)))\n        (if (and (>= a-len b-len)\n                (string-ci=?\
    \ a b-rot))\n          #t\n          (let ((a-rot-len (length a-rot))\n      \
    \          (b-rot-len (length b-rot)))\n            (if (>= a-len b-len)\n   \
    \             (string-ci=? (substring a a-len) b-rot)\n              #t))))))))\n",
  "  (let ((a-len (length a))\n        (b-len (length b)))\n    (if (eqv? (modulo\
    \ a-len b-len) 0)\n      (and (memq b (cdr (cdr a)))\n           (memq (car a)\
    \ (cdr b)))\n      #f)))\n", "  (define (substr s i)\n    (if (eq? i 0)\n    \
    \  (car (cdr s))\n      (substr (cdr (cdr s)) i)))\n  (define (rotate s i)\n \
    \   (if (eq? i 0)\n      s\n      (cons (car s) (rotate (cdr s) (- i 1))))\n \
    \ (define (substr-rotate s i)\n    (if (eq? i 0)\n      (car (cdr s))\n      (substr\
    \ (cdr (cdr s)) i)))\n  (define (substr-rotate-rotate s i)\n    (if (eq? i 0)\n\
    \      (car (cdr (cdr s)))\n      (substr-rotate (cdr (cdr s)) i)))\n  (define\
    \ (substr-rotate-rotate-rotate s i)\n    (if (eq? i 0)\n      (car (cdr (cdr (cdr\
    \ s))))\n      (substr-rotate-rotate (cdr (cdr s)) i)))\n  (define (substr-rotate-rotate-rotate-rotate\
    \ s i)\n    (if (eq? i 0)\n      (car (cdr (cdr (cdr (cdr s))))))\n      (substr-rotate-rotate-rotate\
    \ (cdr (cdr s)) i)))\n  (define (substr-rotate-rotate-rotate-rotate-rotate s i)\n\
    \    (if (eq? i 0)\n      (car (cdr (cdr (cdr (cdr (cdr s)))))))\n      (substr-rotate-rotate-rotate-rotate\
    \ (cdr (cdr s)) i)))\n  (define (substr-rotate-rotate-rotate-rotate-rotate-rotate\
    \ s i)\n    (if (eq? i 0)\n      (car (cdr (cdr (cdr (cdr (cdr (cdr s))))))))\n\
    \      (substr-rotate-rotate-rotate-rotate (cdr (cdr s)) i)))\n  (define (substr-rot",
  "  (let ((a-len (length a))\n        (b-len (length b)))\n    (and\n      (let ((a-str\
    \ (string->list a))\n            (b-str (string->list b)))\n        (and\n   \
    \       (let ((a-str-len (length a-str))\n                (b-str-len (length b-str)))\n\
    \            (and\n              (let ((a-str-list (string->list a-str))\n   \
    \                 (b-str-list (string->list b-str)))\n                (and\n \
    \                 (let ((a-str-list-len (length a-str-list))\n               \
    \         (b-str-list-len (length b-str-list)))\n                    (and\n  \
    \                    (let ((a-str-list-str (string->list a-str-list))\n      \
    \                      (b-str-list-str (string->list b-str-list)))\n         \
    \               (and\n                          (let ((a-str-list-str-len (length\
    \ a-str-list-str))\n                                (b-str-list-str-len (length\
    \ b-str-list-str)))\n                            (and\n                      \
    \        (let ((a-str-list-str-list (string->list a-str-list-str))\n         \
    \                           (b-str-list-str-list (string->list b-str-list-str)))\n\
    \                                (and\n                                  (let\
    \ ((a-str-list-str-list-len (length a-str-list-str-list))\n                  \
    \                      (b-str-list-str-list-len (length b-str-list-str-list)))\n\
    \                                  (and\n                                    (let\
    \ ((a-str-list-str-list-str (string->list a-str-list-str-list))\n            \
    \                              (b-str-list-str-list-str (string->list b-str-list-str-list)))\n\
    \                                      (and\n                                \
    \        (let ((a-str-list-str-list-str-len (length a-str-list-str-list-str))\n\
    \                                              (b-str-list-str-list-str-len (length\
    \ b", "  (let ((a-len (length a))\n        (b-len (length b)))\n    (if (and (>=\
    \ a-len b-len)\n            (string-ci=? (substring a 0 b-len) b))\n      #t\n\
    \      (let ((a-pos (string-index-of a b)))\n        (if (and (>= a-pos 0)\n \
    \               (string-ci=? (substring a a-pos b-len) b))\n          #t\n   \
    \       (let ((b-pos (string-index-of b a)))\n            (if (and (>= b-pos 0)\n\
    \                    (string-ci=? (substring b 0 b-pos) a))\n              #t\n\
    \              #f))))))\n", "  (let ((a (string->list a)))\n    (let ((b (string->list\
    \ b)))\n      (and (string-prefix? b a)\n            (string-prefix? a b))))\n\
    )\n", "  (let ((a-len (length a))\n        (b-len (length b)))\n    (if (>= a-len\
    \ b-len)\n      (let ((a-rot (rotate a a-len))\n            (b-rot (rotate b b-len)))\n\
    \        (if (string=? a-rot b-rot)\n          #t\n          (cycpattern_check\
    \ a-rot b-rot))))))\n", "  (let ((a-len (length a))\n        (b-len (length b)))\n\
    \    (if (and (>= a-len b-len)\n            (string-ci=? (substring a 0 b-len)\
    \ b))\n      #t\n      (string-ci=? (substring a 0 a-len) a))))\n", "  (let ((a-len\
    \ (string-length a)))\n    (let ((b-len (string-length b)))\n      (let ((a-str\
    \ (string->list a)))\n        (let ((b-str (string->list b)))\n          (let\
    \ ((a-list (list->string a-str)))\n            (let ((b-list (list->string b-str)))\n\
    \              (string-ci=? (substring a-list 0 (string-length a-list)) b-list))))))))\n",
  "  (let ((a-len (string-length a)))\n    (let ((b-len (string-length b)))\n    \
    \  (let ((a-str (string->list a))\n            (b-str (string->list b)))\n   \
    \     (let ((a-list (string-append a-str a-str)))\n          (let ((b-list (string-append\
    \ b-str b-str)))\n            (let ((a-list-len (length a-list))\n           \
    \       (b-list-len (length b-list)))\n              (let ((a-list-str (string->list\
    \ a-list))\n                    (b-list-str (string->list b-list)))\n        \
    \        (let ((a-list-list (string-append a-list-str a-list-str)))\n        \
    \          (let ((b-list-list (string-append b-list-str b-list-str)))\n      \
    \              (let ((a-list-list-len (length a-list-list))\n                \
    \          (b-list-list-len (length b-list-list)))\n                      (let\
    \ ((a-list-list-str (string->list a-list-list))\n                            (b-list-list-str\
    \ (string->list b-list-list)))\n                        (and\n               \
    \           (string=? a-list-list-str a-list-list-str)\n                     \
    \     (string=? b-list-list-str b-list-list-str)\n                          (string=?\
    \ a-list-list-str b-list-list-str)\n                          (string=? b-list-list-str\
    \ a-list-list-str)\n                          (string=? a-list-list-str b-list-list-str)\n\
    \                          (string=? b-list-list-str a-list-list-str)\n      \
    \                    (string=? a-list-list-str b-list-list-str)\n            \
    \              (string=? b-list-list-str a-list-list-str)\n                  \
    \        (string=? a-list-list-str b-list-list-str)\n                        \
    \  (string=? b-list-list-str a-list-list-str)\n                          (string=?\
    \ a-list-list-str", "  (let ((p (string-split a b)))\n    (and (map (lambda (x)\
    \ (string-contains? x b)) p)\n         (string-contains? b a))))\n", "  (let ((a-len\
    \ (string-length a)))\n    (let ((b-len (string-length b)))\n      (let ((a-str\
    \ (string->list a)))\n        (let ((b-str (string->list b)))\n          (let\
    \ ((a-list (list->string a-str)))\n            (let ((b-list (list->string b-str)))\n\
    \              (string-ci=? (string-ci a-list b-list)\n                (string-ci=?\
    \ (string-ci a-list b-list)\n                  (string-ci=? (string-ci a-list\
    \ b-list)\n                    (string-ci=? (string-ci a-list b-list)\n      \
    \                (string-ci=? (string-ci a-list b-list)\n                    \
    \    (string-ci=? (string-ci a-list b-list)\n                          (string-ci=?\
    \ (string-ci a-list b-list)\n                            (string-ci=? (string-ci\
    \ a-list b-list)\n                              (string-ci=? (string-ci a-list\
    \ b-list)\n                                (string-ci=? (string-ci a-list b-list)\n\
    \                                  (string-ci=? (string-ci a-list b-list)\n  \
    \                                  (string-ci=? (string-ci a-list b-list)\n  \
    \                                    (string-ci=? (string-ci a-list b-list)\n\
    \                                        (string-ci=? (string-ci a-list b-list)\n\
    \                                          (string-ci=? (string-ci a-list b-list)\n\
    \                                            (string-ci=? (string-ci a-list b-list)\n\
    \                                              (string-ci=? (string-ci a-list\
    \ b-list)\n                                                (string-ci=? (string-ci\
    \ a-list b-list)\n                                                  (string-ci=?\
    \ (string-ci a-list b-list)\n                                                \
    \    (string-ci=? (string-ci a-list b-list)\n                                \
    \                      (string-ci=? (string-", "  (let ((a-len (length a))\n \
    \       (b-len (length b)))\n    (if (and (>= a-len b-len)\n            (string-ci=?\
    \ a (string-copy b 0 b-len)))\n      #t\n      (let ((a-rot (string-copy a 0 a-len))\n\
    \            (b-rot (string-copy b 0 b-len)))\n        (while (>= 0 a-len b-len)\n\
    \          (string-ci=? a-rot b-rot)\n          (string-set! a-rot (string-copy\
    \ a-rot 0 a-len))\n          (string-set! b-rot (string-copy b-rot 0 b-len)))\n\
    \        #f))))\n", "  (let ((a-len (length a))\n        (b-len (length b)))\n\
    \    (if (and (>= a-len b-len)\n            (string-ci=? a (string-copy b 0 b-len)))\n\
    \      #t\n      (let ((a-pos (string-index a 0 a-len))\n            (b-pos (string-index\
    \ b 0 b-len)))\n        (while (>= a-pos b-pos)\n          (if (string-ci=? (string-copy\
    \ a a-pos) b)\n              #t\n              (let ((a-pos (string-index a a-pos)))\n\
    \                (let ((b-pos (string-index b b-pos)))\n                  (string-copy\
    \ a a-pos b-pos))))))))))\n", "  (let ((a-len (length a))\n        (b-len (length\
    \ b)))\n    (if (and (>= a-len b-len)\n            (string-ci=? (string-copy/ci\
    \ a b)\n                                  (string-copy/ci (string-copy/ci a b)\n\
    \                                                     (string-copy/ci (string-copy/ci\
    \ a b))))\n          (string-ci=? (string-copy/ci a b)\n                     \
    \             (string-copy/ci (string-copy/ci a b)\n                         \
    \                            (string-copy/ci (string-copy/ci a b))))\n       \
    \   (string-ci=? (string-copy/ci a b)\n                                  (string-copy/ci\
    \ (string-copy/ci a b)\n                                                     (string-copy/ci\
    \ (string-copy/ci a b))))\n          (string-ci=? (string-copy/ci a b)\n     \
    \                             (string-copy/ci (string-copy/ci a b)\n         \
    \                                            (string-copy/ci (string-copy/ci a\
    \ b))))))\n  #t))\n", "  (let ((a-len (length a))\n        (b-len (length b)))\n\
    \    (if (and (>= a-len b-len)\n            (string-ci=? (string-copy/part a b-len)\n\
    \                                  (string-copy/part a 0)))\n      #t\n      (and\
    \ (string-ci=? (string-copy/part a 0)\n                                  (string-copy/part\
    \ b 0))\n        #t))))\n", "  (let ((a-len (string-length a)))\n    (let ((b-len\
    \ (string-length b)))\n      (let ((a-str (string->list a)))\n        (let ((b-str\
    \ (string->list b)))\n          (let ((a-list (list->string a-str)))\n       \
    \     (let ((b-list (list->string b-str)))\n              (let ((a-list-len (length\
    \ a-list)))\n                (let ((b-list-len (length b-list)))\n           \
    \       (let ((a-list-str (string->list a-list)))\n                    (let ((b-list-str\
    \ (string->list b-list)))\n                      (let ((a-list-list (list->string\
    \ a-list-str)))\n                        (let ((b-list-list (list->string b-list-str)))\n\
    \                          (let ((a-list-list-len (length a-list-list)))\n   \
    \                         (let ((b-list-list-len (length b-list-list)))\n    \
    \                          (let ((a-list-list-str (string->list a-list-list)))\n\
    \                                (let ((b-list-list-str (string->list b-list-list)))\n\
    \                                  (let ((a-list-list-list (list->string a-list-list-str)))\n\
    \                                    (let ((b-list-list-list (list->string b-list-list-str)))\n\
    \                                      (let ((a-list-list-list-len (length a-list-list-list)))\n\
    \                                        (let ((b-list-list-list-len (length b-list-list-list)))\n\
    \                                          (let ((a-list-list-list-str (string->list\
    \ a-list-list-list)))\n                                            (let ((b-list-list-list-str\
    \ (string->list b-list-list-list)))\n                                        \
    \      (let ((a-list-list-list-list (list->string a-list-list-list-str)))\n  \
    \                                              (let ((b-list-list-list-list (list->string\
    \ b-list-list-list-str)))\n                                                  (let\
    \ ((", "  (let ((a-len (length a))\n        (b-len (length b)))\n    (if (and\
    \ (>= a-len b-len)\n            (string-ci=? (substring a 0 b-len) b))\n     \
    \ #t\n      (let ((i 0))\n        (while (< i a-len)\n          (if (string-ci=?\
    \ (substring a i b-len) b)\n              #t\n              (setq i (+ i 1)))))\n\
    \    #f))\n\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #f\n;; >>> (cycpattern_check\
    \ \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"psus\")\n\
    ;; #f\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"efef\" \"eeff\")\n;; #f\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n\
    ;; #t\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"psus\")\n\
    ;; #t\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"efef\" \"eeff\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n\
    ;; #t\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"psus\")\n\
    ;; #t\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"efef\" \"eeff\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n\
    ;; #t\n;; >>> (cycpattern_check \"abcd\" \"ab", "  (let ((p (string-split a b)))\n\
    \    (and (map (lambda (x) (string-contains? x b)) p)\n         (string-contains?\
    \ b a))))\n\n;; #lang scheme\n;; (define (cycpattern_check a b)\n;;   (let ((p\
    \ (string-split a b)))\n;;     (and (map (lambda (x) (string-contains? x b)) p)\n\
    ;;        (string-contains? b a))))\n;; #lang lisp\n;; (defun cycpattern_check\
    \ (a b)\n;;   (let ((p (string-split a b)))\n;;     (and (mapcar (lambda (x) (string-contains?\
    \ x b)) p)\n;;        (string-contains? b a))))\n", "  (let ((p (string-split\
    \ a b)))\n    (and (map (lambda (x) (string-contains? x b)) p)\n         (string-contains?\
    \ b a))))\n\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #f\n;; >>> (cycpattern_check\
    \ \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"psus\")\n\
    ;; #f\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"efef\" \"eeff\")\n;; #f\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n\
    ;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\"\
    )\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\"\
    )\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\"\
    )\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\"\
    )\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\"\
    )\n;; #t\n;; >>> (cycpattern_check \"", "  (let ((a-len (length a))\n        (b-len\
    \ (length b)))\n    (if (and (>= a-len b-len)\n            (string-ci=? (substring\
    \ a 0 b-len) b))\n      #t\n      (let ((a-rot (string-ci-rotate a a-len))\n \
    \           (b-rot (string-ci-rotate b b-len)))\n        (if (and (>= a-len b-len)\n\
    \                (string-ci=? a b-rot))\n          #t\n          (let ((a-rot-rot\
    \ (string-ci-rotate a a-len))\n                (b-rot-rot (string-ci-rotate b\
    \ b-len)))\n            (if (and (>= a-len b-len)\n                    (string-ci=?\
    \ a b-rot-rot))\n              #t\n              #f))))))))\n", "  (let ((a-len\
    \ (length a))\n        (b-len (length b)))\n    (and\n      (>= a-len b-len)\n\
    \      (let ((a-str (substring a 0 a-len)))\n        (let ((b-str (substring b\
    \ 0 b-len)))\n          (and\n            (string=? a-str b-str)\n           \
    \ (string=? (cdr (cycpattern_check a (car b))) a-str)))))))\n", "  (let ((a-len\
    \ (length a))\n        (b-len (length b)))\n    (if (and (>= a-len b-len)\n  \
    \          (string-ci=? (substring a 0 b-len) b))\n      #t\n      #f))\n)\n",
  "  (let ((a-len (length a))\n        (b-len (length b)))\n    (if (and (>= a-len\
    \ b-len)\n            (string-ci=? (substring a 0 b-len) b))\n      #t\n     \
    \ (let ((a-len-1 (sub1 a-len))\n            (b-len-1 (sub1 b-len)))\n        (if\
    \ (and (>= a-len-1 b-len-1)\n                (string-ci=? (substring a 0 b-len-1)\
    \ b-len-1))\n          #t\n          (let ((a-len-2 (sub1 a-len-1))\n        \
    \        (b-len-2 (sub1 b-len-1)))\n            (if (and (>= a-len-2 b-len-2)\n\
    \                    (string-ci=? (substring a 0 b-len-2) b-len-2))\n        \
    \      #t\n              (let ((a-len-3 (sub1 a-len-2))\n                    (b-len-3\
    \ (sub1 b-len-2)))\n                (if (and (>= a-len-3 b-len-3)\n          \
    \              (string-ci=? (substring a 0 b-len-3) b-len-3))\n              \
    \    #t\n                  (let ((a-len-4 (sub1 a-len-3))\n                  \
    \      (b-len-4 (sub1 b-len-3)))\n                    (if (and (>= a-len-4 b-len-4)\n\
    \                            (string-ci=? (substring a 0 b-len-4) b-len-4))\n\
    \                      #t\n                      (let ((a-len-5 (sub1 a-len-4))\n\
    \                            (b-len-5 (sub1 b-len-4)))\n                     \
    \   (if (and (>= a-len-5 b-len-5)\n                                (string-ci=?\
    \ (substring a 0 b-len-5) b-len-5))\n                          #t\n          \
    \                (let ((a-len-6 (sub1 a-len-5))\n                            \
    \    (b-len-6 (sub1 b-len-5)))\n", "  (let ((a-len (length a))\n        (b-len\
    \ (length b)))\n    (if (>= b-len 0)\n      (let ((a-str (substring a 0 b-len)))\n\
    \        (if (string=? a-str b)\n          #t\n          (let ((b-str (substring\
    \ b 0 b-len)))\n            (if (string=? a-str b-str)\n              #t\n   \
    \           (let ((b-str (substring b 0 b-len)))\n                (if (string=?\
    \ a-str b-str)\n                  #t\n                  #f))))))))))\n", "  (let\
    \ ((a-len (length a))\n        (b-len (length b)))\n    (and\n      (>= a-len\
    \ b-len)\n      (let ((a-rot (rotate a-len a)))\n        (let ((b-rot (rotate\
    \ b-len b)))\n          (and\n            (memv a-rot b-rot)\n            (memv\
    \ b-rot a-rot))))))))\n", "  (define (substr s i)\n    (if (eq? i (length s))\n\
    \      #t\n      (substr s (1+i) (length s))))\n  (define (rotate s i)\n    (if\
    \ (eq? i 0)\n      s\n      (substr s (- i) (length s))))\n  (define (pattern-check\
    \ p a b)\n    (if (substr a b)\n      #t\n      (let ((a (rotate a (length a))))\n\
    \        (let ((b (rotate b (length b))))\n          (and (substr a b) (substr\
    \ a (1+b)) (substr b (1+a)))))\n      (pattern-check p (rotate a (length a)) (rotate\
    \ b (length b))))))\n", "  (let ((p (string-split a b)))\n    (and (map (lambda\
    \ (x) (string-contains? x b)) p)\n        (string-contains? b a))))\n", "  (let\
    \ ((a-len (string-length a)))\n    (let ((b-len (string-length b)))\n      (let\
    \ ((a-str (string-copy a)))\n        (let ((b-str (string-copy b)))\n        \
    \  (let ((a-str-len (string-length a-str)))\n            (let ((b-str-len (string-length\
    \ b-str)))\n              (let ((a-str-str (string-copy a-str)))\n           \
    \     (let ((b-str-str (string-copy b-str)))\n                  (let ((a-str-str-len\
    \ (string-length a-str-str)))\n                    (let ((b-str-str-len (string-length\
    \ b-str-str)))\n                      (let ((a-str-str-str (string-copy a-str-str)))\n\
    \                        (let ((b-str-str-str (string-copy b-str-str)))\n    \
    \                      (let ((a-str-str-str-len (string-length a-str-str-str)))\n\
    \                            (let ((b-str-str-str-len (string-length b-str-str-str)))\n\
    \                              (let ((a-str-str-str-str (string-copy a-str-str-str)))\n\
    \                                (let ((b-str-str-str-str (string-copy b-str-str-str)))\n\
    \                                  (let ((a-str-str-str-str-len (string-length\
    \ a-str-str-str-str)))\n                                    (let ((b-str-str-str-str-len\
    \ (string-length b-str-str-str-str)))\n                                      (let\
    \ ((a-str-str-str-str-str-str (string-copy a-str-str-str-str-str)))\n        \
    \                                (let ((b-str-str-str-str-str-str (string-copy\
    \ b-str-str-str-str-str))))\n                                        (let ((a-str-str-str-str-str-str-len\
    \ (string-length a-str-str-str-str-str-str)))\n                              \
    \            (let ((b-str-str-str-", "  (let ((p (string-split a b)))\n    (and\
    \ (map (lambda (x) (string-ci-caseless-equal? x b)) p)\n      (string-ci-caseless-equal?\
    \ b a))))\n\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #f\n;; >>> (cycpattern_check\
    \ \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"psus\")\n\
    ;; #f\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"efef\" \"eeff\")\n;; #f\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n\
    ;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\"\
    )\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\"\
    )\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\"\
    )\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\"\
    )\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\"\
    )\n;; #t\n;;", "  (let ((a (string->list a)))\n    (let ((b (string->list b)))\n\
    \      (and (string-ci=? a b)\n           (string-ci=? b a))))\n  #t)\n\n;; >>>\
    \ (cycpattern_check \"abcd\" \"abd\")\n;; #f\n;; >>> (cycpattern_check \"hello\"\
    \ \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"psus\")\n;; #f\n;; >>>\
    \ (cycpattern_check \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check \"efef\"\
    \ \"eeff\")\n;; #f\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;;\
    \ >>> (cycpattern_check \"abcd\" \"abd\")\n;; #t\n;; >>> (cycpattern_check \"\
    hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"psus\")\n;; #t\n\
    ;; >>> (cycpattern_check \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check \"\
    efef\" \"eeff\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n\
    ;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #t\n;; >>> (cycpattern_check \"\
    hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"psus\")\n;; #t\n\
    ;; >>> (cycpattern_check \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check \"\
    efef\" \"eeff\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n\
    ;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #t\n;; >>> (cycpattern_check \"\
    hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"psus\")\n;; #t\n\
    ;; >>> (cycpattern_check \"abab\" \"baa\")\n;;", "  (let ((a (string->list a)))\n\
    \    (let ((b (string->list b)))\n      (and\n        (string-set-ci (string-append\
    \ a b) #t)\n        (string-set-ci (string-append b a) #t)\n        (string-set-ci\
    \ (string-append a b) #t)\n        (string-set-ci (string-append b a) #t)\n  \
    \      (string-set-ci (string-append a b) #t)\n        (string-set-ci (string-append\
    \ b a) #t)\n        (string-set-ci (string-append a b) #t)\n        (string-set-ci\
    \ (string-append b a) #t)\n        (string-set-ci (string-append a b) #t)\n  \
    \      (string-set-ci (string-append b a) #t)\n        (string-set-ci (string-append\
    \ a b) #t)\n        (string-set-ci (string-append b a) #t)\n        (string-set-ci\
    \ (string-append a b) #t)\n        (string-set-ci (string-append b a) #t)\n  \
    \      (string-set-ci (string-append a b) #t)\n        (string-set-ci (string-append\
    \ b a) #t)\n        (string-set-ci (string-append a b) #t)\n        (string-set-ci\
    \ (string-append b a) #t)\n        (string-set-ci (string-append a b) #t)\n  \
    \      (string-set-ci (string-append b a) #t)\n        (string-set-ci (string-append\
    \ a b) #t)\n        (string-set-ci (string-append b a) #t)\n        (string-set-ci\
    \ (string-append a b) #t)\n        (string-set-ci (string-append b a) #t)\n  \
    \      (string-set-ci (string-append a b) #t)\n        (string-set-ci (string-append\
    \ b a) #t)\n        (string-set-ci (string-append a b) #t", "  (let ((a-len (length\
    \ a))\n        (b-len (length b)))\n    (if (and (>= a-len b-len)\n          \
    \  (string-ci=? (substring a 0 b-len) b))\n      #t\n      #f))\n)\n", "  (let\
    \ ((a (string->list a)))\n    (let ((b (string->list b)))\n      (and (string-ci=?\
    \ (string-ci-ci-down a b))\n           (string-ci=? (string-ci-ci-up a b))\n \
    \          (string-ci=? (string-ci-ci a b))\n           (string-ci=? (string-ci-ci-down-right\
    \ a b))\n           (string-ci=? (string-ci-ci-down-left a b))\n           (string-ci=?\
    \ (string-ci-ci-up-right a b))\n           (string-ci=? (string-ci-ci-up-left\
    \ a b)))))))\n", "  (let ((a-len (string-length a)))\n    (let ((b-len (string-length\
    \ b)))\n      (let ((a-str (string->list a)))\n        (let ((b-str (string->list\
    \ b)))\n          (let ((a-list (list->string a-str)))\n            (let ((b-list\
    \ (list->string b-str)))\n              (string-ci=? (string-ci a-list b-list)\n\
    \                (string-ci=? (string-ci a-list b-list)\n                  (string-ci=?\
    \ (string-ci a-list b-list)\n                    (string-ci=? (string-ci a-list\
    \ b-list)\n                      (string-ci=? (string-ci a-list b-list)\n    \
    \                    (string-ci=? (string-ci a-list b-list)\n                \
    \          (string-ci=? (string-ci a-list b-list)\n                          \
    \  (string-ci=? (string-ci a-list b-list)\n                              (string-ci=?\
    \ (string-ci a-list b-list)\n                                (string-ci=? (string-ci\
    \ a-list b-list)\n                                  (string-ci=? (string-ci a-list\
    \ b-list)\n                                    (string-ci=? (string-ci a-list\
    \ b-list)\n                                      (string-ci=? (string-ci a-list\
    \ b-list)\n                                        (string-ci=? (string-ci a-list\
    \ b-list)\n                                          (string-ci=? (string-ci a-list\
    \ b-list)\n                                            (string-ci=? (string-ci\
    \ a-list b-list)\n                                              (string-ci=? (string-ci\
    \ a-list b-list)\n                                                (string-ci=?\
    \ (string-ci a-list b-list)\n                                                \
    \  (string-ci=? (string-ci a-list b-list)\n                                  \
    \                  (string-ci=? (string-ci a-list b-list)\n                  \
    \                                    (string-ci=? (string-", "  (let ((p (string-split\
    \ a b)))\n    (and (map (lambda (x) (string-contains? x b)) p)\n         (string-contains?\
    \ b a))))\n\n;; You are given a string and a pattern. You need to return #t if\
    \ the string matches the pattern.\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n\
    ;; #f\n;; >>> (cycpattern_check \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"whassup\" \"psus\")\n;; #f\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;;\
    \ #t\n;; >>> (cycpattern_check \"efef\" \"eeff\")\n;; #f\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t", "  (let ((a-len (string-length a)))\n    (let\
    \ ((b-len (string-length b)))\n      (let ((a-str (string->list a)))\n       \
    \ (let ((b-str (string->list b)))\n          (let ((a-list (string-join a-str\
    \ \" \")))\n            (let ((b-list (string-join b-str \" \")))\n          \
    \    (string-ci=? a-list b-list))))))))\n", "  (let ((a (string->list a)))\n \
    \   (let ((b (string->list b)))\n      (and (string-prefix? b a)\n           (string-prefix?\
    \ a b))))\n)\n\n;; #lang scheme", "  (let ((a-len (length a))\n        (b-len\
    \ (length b)))\n    (if (and (>= a-len b-len)\n            (string-ci=? (substring\
    \ a 0 b-len) b))\n      #t\n      (and (string-ci=? (substring a 0 a-len) a)\n\
    \           (string-ci=? (substring a a-len 0) a)))))\n", "  (let ((a-len (string-length\
    \ a)))\n    (let ((b-len (string-length b)))\n      (let ((a-str (string-copy\
    \ a)))\n        (let ((b-str (string-copy b)))\n          (let ((i 0))\n     \
    \       (while (< i a-len)\n              (let ((j 0))\n                (while\
    \ (< j b-len)\n                  (if (string-ci=? (string-ref a-str (modulo i\
    \ a-len) (modulo j b-len)))\n                    (return #t)\n               \
    \     (setf j (modulo j b-len)))\n                    (setf i (modulo i a-len)))\n\
    \                (setf i (modulo i a-len)))\n              (setf i (modulo i a-len)))\n\
    \            (setf i (modulo i a-len)))\n          (setf i (modulo i a-len)))\n\
    \        (setf i (modulo i a-len)))\n      (setf i (modulo i a-len)))\n    (setf\
    \ i (modulo i a-len)))\n  #f)\n)\n", "  (let ((a-len (length a))\n        (b-len\
    \ (length b)))\n    (and (>= a-len b-len)\n         (let ((a-str (substring a\
    \ 0 a-len))\n               (b-str (substring b 0 b-len)))\n          (string=?\
    \ a-str b-str))))\n)\n\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #f\n;;\
    \ >>> (cycpattern_check \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"\
    whassup\" \"psus\")\n;; #f\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;; #t\n\
    ;; >>> (cycpattern_check \"efef\" \"eeff\")\n;; #f\n;; >>> (cycpattern_check \"\
    himenss\" \"simen\")\n;; #t", "  (let ((p (string-split a b)))\n    (and (map\
    \ (lambda (s) (string-contains? s a)) p)\n         (map (lambda (s) (string-contains?\
    \ s b)) p))))\n", "  (let ((a-len (length a))\n        (b-len (length b)))\n \
    \   (if (>= b-len a-len)\n      (let ((a-str (substring a 0 b-len)))\n       \
    \ (if (string=? a-str b)\n          #t\n          (let ((b-str (substring b 0\
    \ b-len)))\n            (if (string=? a-str b-str)\n              #t\n       \
    \       #f))))))\n", "  (let ((p (string-split a b)))\n    (and (map (lambda (x)\
    \ (string-contains? x b)) p)\n        (string-contains? b a))))\n\n;; You are\
    \ given a string and a pattern. You need to return #t if the string contains any\
    \ substring that matches the pattern\n;; >>> (cycpattern_check \"abcd\" \"ab*\"\
    )\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"*cd\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"abcd\" \"*ab\")\n;; #f\n;; >>> (cycpattern_check \"abcd\" \"*ab*\")\n;; #t\n\
    ;; >>> (cycpattern_check \"abcd\" \"*ab*d\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"abcd\" \"*ab*d*\")\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"*ab*d*c\")\n\
    ;; #f\n;; >>> (cycpattern_check \"abcd\" \"*ab*d*c*\")\n;; #f\n;; >>> (cycpattern_check\
    \ \"abcd\" \"*ab*d*c*d\")\n;; #f\n;; >>> (cycpattern_check \"abcd\" \"*ab*d*c*d*\"\
    )\n;; #f\n;; >>> (cycpattern_check \"abcd\" \"*ab*d*c*d*c\")\n;; #f\n;; >>> (cycpattern_check\
    \ \"abcd\" \"*ab*d*c*d*c*\")\n;; #f\n;; >>> (cycpattern_check \"abcd\" \"*ab*d*c*d*c*d\"\
    )\n;; #f\n;; >>> (cycpattern_check \"abcd\" \"*ab*d*c*d*c*d*\")\n;; #f\n;; >>>\
    \ (cycpattern_check \"abcd\" \"*ab*d*c*d*c*d*c\")\n;; #f\n;; >>> (cycpattern_check\
    \ \"abcd\" \"*ab*d*c*d*c*d*c*\")\n;; #f\n;; >>> (cycpattern_check \"ab", "  (let\
    \ ((p (string-split a b)))\n    (and (map (lambda (s) (string-contains? s a))\
    \ p)\n        (string-contains? b a))))\n\n;; You are given a string and a pattern.\
    \ You need to return #t if the pattern is a substring of the string\n;; >>> (cycpattern_check\
    \ \"abcd\" \"ab\")\n;; #f\n;; >>> (cycpattern_check \"abcd\" \"cd\")\n;; #t\n\
    ;; >>> (cycpattern_check \"abcd\" \"abcd\")\n;; #t\n;; >>> (cycpattern_check \"\
    abcd\" \"abcdabcd\")\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"abcdabcdabcd\"\
    )\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"abcdabcdabcdabcd\")\n;; #t\n;; >>>\
    \ (cycpattern_check \"abcd\" \"abcdabcdabcdabcdabcd\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"abcd\" \"abcdabcdabcdabcdabcdabcd\")\n;; #t\n;; >>> (cycpattern_check \"abcd\"\
    \ \"abcdabcdabcdabcdabcdabcdabcd\")\n;; #t\n;; >>> (cycpattern_check \"abcd\"\
    \ \"abcdabcdabcdabcdabcdabcdabcdabcd\")\n;; #t\n;; >>> (cycpattern_check \"abcd\"\
    \ \"abcdabcdabcdabcdabcdabcdabcdabcdabcd\")\n;; #t\n;; >>> (cycpattern_check \"\
    abcd\" \"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"abcd\" \"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"abcd\" \"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\")\n;; #t\n;; >>>\
    \ (cycpattern_check \"abcd\" \"ab", "  (let ((a (string->list a)))\n    (let ((b\
    \ (string->list b)))\n      (and (string-ci=? a b)\n           (string-ci=? b\
    \ a))))\n  #t)\n", "  (let ((a-len (length a))\n        (b-len (length b)))\n\
    \    (if (and (>= a-len b-len)\n            (string-ci=? (substring a 0 b-len)\
    \ b))\n      #t\n      #f))\n)\n", "  (let ((a-len (length a))\n        (b-len\
    \ (length b)))\n    (if (and (>= a-len b-len)\n            (string-ci=? (string-copy/ci\
    \ a b)\n                                  (string-copy/ci (string-copy/ci a b)\n\
    \                                                     (string-copy/ci (string-copy/ci\
    \ a b))))\n            (string-ci=? (string-copy/ci (string-copy/ci a b)\n   \
    \                                                  (string-copy/ci (string-copy/ci\
    \ a b)))\n                                  (string-copy/ci (string-copy/ci a\
    \ b))))\n      #t\n      #f))\n", "  (let ((p (string-split a b)))\n    (and (map\
    \ (lambda (x) (string-contains? x b)) p)\n        (string-contains? b a))))\n",
  "  (let ((a-len (length a))\n        (b-len (length b)))\n    (if (>= a-len b-len)\n\
    \      (let ((a-rot (rotate a-len a)))\n        (let ((b-rot (rotate b-len b)))\n\
    \          (and (string=? a-rot b-rot)\n               (string=? b-rot a-rot))))\n\
    \      #t\n      (else\n        #f)))\n\n;; >>> (cycpattern_check \"abcd\" \"\
    abd\")\n;; #f\n;; >>> (cycpattern_check \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"whassup\" \"psus\")\n;; #f\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;;\
    \ #t\n;; >>> (cycpattern_check \"efef\" \"eeff\")\n;; #f\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"ab\")\n;;\
    \ #f\n;; >>> (cycpattern_check \"abcd\" \"abcd\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"abcd\" \"abcd\")\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"abcd\")\n;; #t\n\
    ;; >>> (cycpattern_check \"abcd\" \"abcd\")\n;; #t\n;; >>> (cycpattern_check \"\
    abcd\" \"abcd\")\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"abcd\")\n;; #t\n\
    ;; >>> (cycpattern_check \"abcd\" \"abcd\")\n;; #t\n;; >>> (cycpattern_check \"\
    abcd\" \"abcd\")\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"abcd\")\n;; #t\n\
    ;; >>> (cycpattern_check \"abcd\" \"abcd\")\n;; #t\n;; >>> (cycpattern_check \"\
    abcd\" \"abcd\")\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"abcd\")\n;; #t\n\
    ;; >>> (cyc", "  (let ((p (string-split a b)))\n    (and (map (lambda (x) (string-contains\
    \ x b)) p)\n        (string-contains a b))))\n\n;; >>> (cycpattern_check \"abcd\"\
    \ \"abd\")\n;; #f\n;; >>> (cycpattern_check \"hello\" \"ell\")\n;; #t\n;; >>>\
    \ (cycpattern_check \"whassup\" \"psus\")\n;; #f\n;; >>> (cycpattern_check \"\
    abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check \"efef\" \"eeff\")\n;; #f\n;;\
    \ >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\"\
    )\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\"\
    )\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\"\
    )\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\"\
    )\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\"\
    )\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himens", "  (let ((a (string->list a)))\n    (let ((b (string->list b)))\n\
    \      (and (string-ci=? (car a) (car b))\n           (string-ci=? (car a) (car\
    \ b))\n           (string-ci=? (car a) (car b))\n           (string-ci=? (car\
    \ a) (car b))\n           (string-ci=? (car a) (car b))\n           (string-ci=?\
    \ (car a) (car b))\n           (string-ci=? (car a) (car b))\n           (string-ci=?\
    \ (car a) (car b))\n           (string-ci=? (car a) (car b))\n           (string-ci=?\
    \ (car a) (car b))\n           (string-ci=? (car a) (car b))\n           (string-ci=?\
    \ (car a) (car b))\n           (string-ci=? (car a) (car b))\n           (string-ci=?\
    \ (car a) (car b))\n           (string-ci=? (car a) (car b))\n           (string-ci=?\
    \ (car a) (car b))\n           (string-ci=? (car a) (car b))\n           (string-ci=?\
    \ (car a) (car b))\n           (string-ci=? (car a) (car b))\n           (string-ci=?\
    \ (car a) (car b))\n           (string-ci=? (car a) (car b))\n           (string-ci=?\
    \ (car a) (car b))\n           (string-ci=? (car a) (car b))\n           (string-ci=?\
    \ (car a) (car b))\n           (string-ci=? (car a) (car b))\n           (string-ci=?\
    \ (car a) (car b))\n           (string-ci=? (car a) (car b))\n           (string-ci=?\
    \ (car a) (car b))\n           (string-ci=? (car a) (car b))\n           (string-ci=?\
    \ (car a) (car b))\n           (string-ci=", "  (let ((a-len (length a))\n   \
    \     (b-len (length b)))\n    (if (eqv? (modulo a-len b-len) 0)\n      (and (substring?\
    \ a b)\n           (substring? (rotate a-len) b)))))\n", "  (let ((p (string-split\
    \ a b)))\n    (and (map (lambda (s) (string-contains? s a)) p)\n         (string-contains?\
    \ b a))))\n\n;; You are given a string. You need to return #t if the string contains\
    \ a substring of the form abcd\n;; >>> (cycpattern_check \"abcd\")\n;; #t\n;;\
    \ >>> (cycpattern_check \"abcdabcd\")\n;; #t\n;; >>> (cycpattern_check \"abcdabcdabcd\"\
    )\n;; #t\n;; >>> (cycpattern_check \"abcdabcdabcdabcd\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"abcdabcdabcdabcdabcd\")\n;; #t\n;; >>> (cycpattern_check \"abcdabcdabcdabcdabcdabcd\"\
    )\n;; #t\n;; >>> (cycpattern_check \"abcdabcdabcdabcdabcdabcdabcd\")\n;; #t\n\
    ;; >>> (cycpattern_check \"abcdabcdabcdabcdabcdabcdabcdabcd\")\n;; #t\n;; >>>\
    \ (cycpattern_check \"abcdabcdabcdabcdabcdabcdabcdabcdabcd\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\")\n;; #t\n;; >>>\
    \ (cycpattern_check \"abcdabcdabcdabcdabcd", "  (let ((a-len (length a))\n   \
    \     (b-len (length b)))\n    (and (>= a-len b-len)\n         (let ((a-str (substring\
    \ a 0 a-len))\n               (b-str (substring b 0 b-len)))\n          (string=?\
    \ a-str b-str))))\n)\n\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #f\n;;\
    \ >>> (cycpattern_check \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"\
    whassup\" \"psus\")\n;; #f\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;; #t\n\
    ;; >>> (cycpattern_check \"efef\" \"eeff\")\n;; #f\n;; >>> (cycpattern_check \"\
    himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #t\n\
    ;; >>> (cycpattern_check \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"\
    whassup\" \"psus\")\n;; #t\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;; #t\n\
    ;; >>> (cycpattern_check \"efef\" \"eeff\")\n;; #t\n;; >>> (cycpattern_check \"\
    himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #t\n\
    ;; >>> (cycpattern_check \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"\
    whassup\" \"psus\")\n;; #t\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;; #t\n\
    ;; >>> (cycpattern_check \"efef\" \"eeff\")\n;; #t\n;; >>> (cycpattern_check \"\
    himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #t\n\
    ;; >>> (cycpattern_check \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"\
    whass", "  (let ((a-len (length a))\n        (b-len (length b)))\n    (if (and\
    \ (>= a-len b-len)\n            (string-ci=? (string-copy/part a b-len)\n    \
    \                              (string-copy/part a 0)))\n      #t\n      (string-ci=?\
    \ (string-copy/part b a-len)\n                                  (string-copy/part\
    \ b 0))))\n)\n", "  (let ((a-len (length a))\n        (b-len (length b)))\n  \
    \  (if (>= a-len b-len)\n      (let ((a-rot (rotate a-len a)))\n        (let ((b-rot\
    \ (rotate b-len b)))\n          (and (string=? a-rot b-rot)\n               (string=?\
    \ b-rot a-rot))))\n      #t)\n    #f))\n", "  (let ((p (string-split a b)))\n\
    \    (and (map (lambda (x) (string-contains? x b)) p)\n        (string-contains?\
    \ b a))))\n\n;; You are given a string and a pattern. You need to return #t if\
    \ the string contains any substring of the pattern.\n;; >>> (cycpattern_check\
    \ \"abcd\" \"abd\")\n;; #f\n;; >>> (cycpattern_check \"hello\" \"ell\")\n;; #t\n\
    ;; >>> (cycpattern_check \"whassup\" \"psus\")\n;; #f\n;; >>> (cycpattern_check\
    \ \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check \"efef\" \"eeff\")\n;; #f\n\
    ;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t", "  (let ((a (string->list\
    \ a)))\n    (let ((b (string->list b)))\n      (and (string-ci=? a b)\n      \
    \     (string-ci=? b a))))\n  #t)\n\n;; >>> (cycpattern_check \"abcd\" \"abd\"\
    )\n;; #f\n;; >>> (cycpattern_check \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"whassup\" \"psus\")\n;; #f\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;;\
    \ #t\n;; >>> (cycpattern_check \"efef\" \"eeff\")\n;; #f\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n\
    ;; #t\n;; >>> (cycpattern_check \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"whassup\" \"psus\")\n;; #t\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;;\
    \ #t\n;; >>> (cycpattern_check \"efef\" \"eeff\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n\
    ;; #t\n;; >>> (cycpattern_check \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"whassup\" \"psus\")\n;; #t\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;;\
    \ #t\n;; >>> (cycpattern_check \"efef\" \"eeff\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n\
    ;; #t\n;; >>> (cycpattern_check \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"whassup\" \"psus\")\n;; #t\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;;",
  "  (let ((a-len (length a))\n        (b-len (length b)))\n    (if (and (>= a-len\
    \ b-len)\n            (string-ci=? (substring a 0 b-len) b))\n      #t\n     \
    \ (and (string-ci=? (substring a 0 a-len) a)\n           (string-ci=? (substring\
    \ a (modulo a-len b-len) b-len) b)))))\n", "  (let ((a-len (length a))\n     \
    \   (b-len (length b)))\n    (and\n      (let ((a-str (string->list a))\n    \
    \        (b-str (string->list b)))\n        (for-each (lambda (s)\n          \
    \         (and\n                     (string=? s a-str)\n                    \
    \ (string=? s b-str)))\n          (string->list a-str)))\n      (for-each (lambda\
    \ (s)\n                 (and\n                   (string=? s b-str)\n        \
    \           (string=? s a-str)))\n        (string->list b-str))))))\n", "  (let\
    \ ((p (string-split a b)))\n    (and (map (lambda (x) (string-ci-caseless-equal?\
    \ x b)) p)\n        (string-ci-caseless-equal? a b))))\n", "  (let ((a-len (string-length\
    \ a)))\n    (let ((b-len (string-length b)))\n      (let ((a-str (string-copy\
    \ a)))\n        (let ((b-str (string-copy b)))\n          (let ((a-str-len (string-length\
    \ a-str)))\n            (let ((b-str-len (string-length b-str)))\n           \
    \   (let ((a-str-str (string-copy a-str)))\n                (let ((b-str-str (string-copy\
    \ b-str)))\n                  (let ((a-str-str-len (string-length a-str-str)))\n\
    \                    (let ((b-str-str-len (string-length b-str-str)))\n      \
    \                (let ((a-str-str-str (string-copy a-str-str)))\n            \
    \            (let ((b-str-str-str (string-copy b-str-str)))\n                \
    \          (let ((a-str-str-str-len (string-length a-str-str-str)))\n        \
    \                    (let ((b-str-str-str-len (string-length b-str-str-str)))\n\
    \                              (let ((a-str-str-str-str (string-copy a-str-str-str)))\n\
    \                                (let ((b-str-str-str-str (string-copy b-str-str-str)))\n\
    \                                  (let ((a-str-str-str-str-len (string-length\
    \ a-str-str-str-str)))\n                                    (let ((b-str-str-str-str-len\
    \ (string-length b-str-str-str-str)))\n                                      (let\
    \ ((a-str-str-str-str-str (string-copy a-str-str-str-str)))\n                \
    \                        (let ((b-str-str-str-str-str (string-copy b-str-str-str-str))))\n\
    \                                        (let ((a-str-str-str-str-str-len (string-length\
    \ a-str-str-str-str-str)))\n                                          (let ((b-str-str-str-str-str-len\
    \ (string-length b-str", "  (let ((a (string->list a)))\n    (let ((b (string->list\
    \ b)))\n      (and (map (lambda (x) (string-ci-caseless-equal? x x)) (string-ci-caseless-prefix-ci-p\
    \ a b)) #t))))\n", "  (let ((a (string->list a)))\n    (let ((b (string->list\
    \ b)))\n      (and (string-substring? b a)\n           (string-substring? a b))))\n\
    \  )\n)\n\n;; #lang scheme", "  (let ((a (string->list a)))\n    (let ((b (string->list\
    \ b)))\n      (and (string-ci=? a b)\n           (string-ci=? b a))))\n  #t)\n\
    \n;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #f\n;; >>> (cycpattern_check\
    \ \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"psus\")\n\
    ;; #f\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"efef\" \"eeff\")\n;; #f\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n\
    ;; #t\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"psus\")\n\
    ;; #t\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"efef\" \"eeff\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n\
    ;; #t\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"psus\")\n\
    ;; #t\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"efef\" \"eeff\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n\
    ;; #t\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"psus\")\n\
    ;; #t\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;;", "  (let ((a-len (length\
    \ a))\n        (b-len (length b)))\n    (and (>= a-len b-len)\n         (let ((a-str\
    \ (substring a 0 a-len))\n               (b-str (substring b 0 b-len)))\n    \
    \      (string=? a-str b-str))))\n)\n\n;; >>> (cycpattern_check \"abcd\" \"abd\"\
    )\n;; #f\n;; >>> (cycpattern_check \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"whassup\" \"psus\")\n;; #f\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;;\
    \ #t\n;; >>> (cycpattern_check \"efef\" \"eeff\")\n;; #f\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n\
    ;; #t\n;; >>> (cycpattern_check \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"whassup\" \"psus\")\n;; #t\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;;\
    \ #t\n;; >>> (cycpattern_check \"efef\" \"eeff\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n\
    ;; #t\n;; >>> (cycpattern_check \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"whassup\" \"psus\")\n;; #t\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;;\
    \ #t\n;; >>> (cycpattern_check \"efef\" \"eeff\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n\
    ;; #t\n;; >>> (cycpattern_check \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"whass", "  (let ((a-len (string-length a)))\n    (let ((b-len (string-length\
    \ b)))\n      (let ((a-str (string-copy a)))\n        (let ((b-str (string-copy\
    \ b)))\n          (let ((i 0))\n            (while (< i a-len)\n             \
    \ (let ((j 0))\n                (while (< j b-len)\n                  (if (string-ci=?\
    \ a-str (string-ci b-str))\n                    (return #t)\n                \
    \    (setq j (1+ j))))\n                (setq i (1+ i)))))))))))\n", "  (let ((a-len\
    \ (string-length a)))\n    (let ((b-len (string-length b)))\n      (let ((a-str\
    \ (string->list a)))\n        (let ((b-str (string->list b)))\n          (and\n\
    \            (string-ci=? a-str b-str)\n            (string-ci=? a-str (string-append\
    \ b-str a-str))\n            (string-ci=? (string-append a-str b-str) a-str))))))))\n",
  "  (let ((a-len (string-length a))\n        (b-len (string-length b)))\n    (and\
    \ (>= a-len b-len)\n         (string-ci=? (string-copy/part a b-len) (string-copy/part\
    \ a 0)))))\n\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #f\n;; >>> (cycpattern_check\
    \ \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"psus\")\n\
    ;; #f\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"efef\" \"eeff\")\n;; #f\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n\
    ;; #t\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"psus\")\n\
    ;; #t\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"efef\" \"eeff\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n\
    ;; #t\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"psus\")\n\
    ;; #t\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"efef\" \"eeff\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n\
    ;; #t\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"psus\")\n\
    ;; #t\n;; >>> (", "  (let ((a-len (length a))\n        (b-len (length b)))\n \
    \   (if (>= b-len a-len)\n      (let ((a-sub (substring a 0 b-len)))\n       \
    \ (if (string=? a-sub b)\n          #t\n          (let ((b-sub (substring b 0\
    \ a-len)))\n            (if (string=? a-sub b-sub)\n              #t\n       \
    \       #f))))))\n\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #f\n;; >>>\
    \ (cycpattern_check \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\"\
    \ \"psus\")\n;; #f\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;; #t\n;; >>>\
    \ (cycpattern_check \"efef\" \"eeff\")\n;; #f\n;; >>> (cycpattern_check \"himenss\"\
    \ \"simen\")\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"abcd\")\n;; #t\n;; >>>\
    \ (cycpattern_check \"abcd\" \"abcd\")\n;; #t\n;; >>> (cycpattern_check \"abcd\"\
    \ \"abcd\")\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"abcd\")\n;; #t\n;; >>>\
    \ (cycpattern_check \"abcd\" \"abcd\")\n;; #t\n;; >>> (cycpattern_check \"abcd\"\
    \ \"abcd\")\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"abcd\")\n;; #t\n;; >>>\
    \ (cycpattern_check \"abcd\" \"abcd\")\n;; #t\n;; >>> (cycpattern_check \"abcd\"\
    \ \"abcd\")\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"abcd\")\n;; #t\n;; >>>\
    \ (cycpattern_check \"abcd\" \"abcd\")\n;; #t\n;; >>> (cycpattern_check \"abcd\"\
    \ \"abcd\")\n;; #t\n;; >>> (cycpattern_check \"abcd\" \"abcd\")\n;; #t\n;;", " \
    \ (let ((a-len (string-length a)))\n    (let ((b-len (string-length b)))\n   \
    \   (let ((a-str (string->list a)))\n        (let ((b-str (string->list b)))\n\
    \          (let ((a-list (list->string a-str)))\n            (let ((b-list (list->string\
    \ b-str)))\n              (string-ci=? (string-ci a-list b-list)\n           \
    \            (string-ci=? (string-ci a-list b-list)\n                        \
    \          (string-ci=? (string-ci a-list b-list)\n                          \
    \                  (string-ci=? (string-ci a-list b-list)\n                  \
    \                                    (string-ci=? (string-ci a-list b-list)\n\
    \                                                                (string-ci=?\
    \ (string-ci a-list b-list)\n                                                \
    \                        (string-ci=? (string-ci a-list b-list))))))))))))))))))))))\n",
  "  (let ((a (string->list a)))\n    (let ((b (string->list b)))\n      (and (string-ci=?\
    \ a b)\n           (string-ci=? b a))))\n)\n\n;; >>> (cycpattern_check \"abcd\"\
    \ \"abd\")\n;; #f\n;; >>> (cycpattern_check \"hello\" \"ell\")\n;; #t\n;; >>>\
    \ (cycpattern_check \"whassup\" \"psus\")\n;; #f\n;; >>> (cycpattern_check \"\
    abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check \"efef\" \"eeff\")\n;; #f\n;;\
    \ >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\"\
    )\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\"\
    )\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\"\
    )\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\"\
    )\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\"\
    )\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cyc",
  "  (let ((a-len (string-length a))\n        (b-len (string-length b)))\n    (and\n\
    \      (string=? a b)\n      (string=? (string-copy a 0 a-len) b)\n      (string=?\
    \ (string-copy a a-len) b)\n      (string=? (string-copy b 0 b-len) a)\n     \
    \ (string=? (string-copy b b-len) a)))\n)\n", "  (let ((a-len (string-length a)))\n\
    \    (let ((b-len (string-length b)))\n      (let ((a-str (string-copy a)))\n\
    \        (let ((b-str (string-copy b)))\n          (let ((i 0))\n            (while\
    \ (< i a-len)\n              (let ((j 0))\n                (while (< j b-len)\n\
    \                  (if (string-ci=? a-str (string-ci b-str))\n               \
    \     (return #t)\n                    (setf i (1+ i))\n                    (setf\
    \ j (1+ j)))\n                )\n              )\n            )\n          )\n\
    \        )\n      )\n    )\n  )\n)\n", "  (let ((p (string-split a b)))\n    (and\
    \ (map (lambda (x) (string-prefix? x b)) p)\n        (string-join \" \" p))))\n\
    \n;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #f\n;; >>> (cycpattern_check\
    \ \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"psus\")\n\
    ;; #f\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"efef\" \"eeff\")\n;; #f\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n\
    ;; #t\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"psus\")\n\
    ;; #t\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"efef\" \"eeff\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n\
    ;; #t\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"psus\")\n\
    ;; #t\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"efef\" \"eeff\")\n;; #t\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n\
    ;; #t\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"psus\")\n\
    ;; #t\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern",
  "  (let ((a (string->list a)))\n    (let ((b (string->list b)))\n      (and (string-ci=?\
    \ a b)\n           (string-ci=? b a))))\n  #t)\n\n;; >>> (cycpattern_check \"\
    abcd\" \"abd\")\n;; #f\n;; >>> (cycpattern_check \"hello\" \"ell\")\n;; #t\n;;\
    \ >>> (cycpattern_check \"whassup\" \"psus\")\n;; #f\n;; >>> (cycpattern_check\
    \ \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check \"efef\" \"eeff\")\n;; #f\n\
    ;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"abcd\" \"abd\")\n;; #t\n;; >>> (cycpattern_check \"hello\" \"ell\")\n;; #t\n\
    ;; >>> (cycpattern_check \"whassup\" \"psus\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check \"efef\" \"eeff\")\n;; #t\n\
    ;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"abcd\" \"abd\")\n;; #t\n;; >>> (cycpattern_check \"hello\" \"ell\")\n;; #t\n\
    ;; >>> (cycpattern_check \"whassup\" \"psus\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check \"efef\" \"eeff\")\n;; #t\n\
    ;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"abcd\" \"abd\")\n;; #t\n;; >>> (cycpattern_check \"hello\" \"ell\")\n;; #t\n\
    ;; >>> (cycpattern_check \"whassup\" \"psus\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"abab\" \"baa\")\n;;", "  (let ((a-len (string-length a)))\n    (let ((b-len\
    \ (string-length b)))\n      (let ((a-str (string-copy a)))\n        (let ((b-str\
    \ (string-copy b)))\n          (let ((a-str-len (string-length a-str)))\n    \
    \        (let ((b-str-len (string-length b-str)))\n              (let ((a-str-str\
    \ (string-copy a-str)))\n                (let ((b-str-str (string-copy b-str)))\n\
    \                  (let ((a-str-str-len (string-length a-str-str)))\n        \
    \            (let ((b-str-str-len (string-length b-str-str)))\n              \
    \        (let ((a-str-str-str (string-copy a-str-str)))\n                    \
    \    (let ((b-str-str-str (string-copy b-str-str)))\n                        \
    \  (let ((a-str-str-str-len (string-length a-str-str-str)))\n                \
    \            (let ((b-str-str-str-len (string-length b-str-str-str)))\n      \
    \                        (let ((a-str-str-str-str (string-copy a-str-str-str)))\n\
    \                                (let ((b-str-str-str-str (string-copy b-str-str-str)))\n\
    \                                  (let ((a-str-str-str-str-len (string-length\
    \ a-str-str-str-str)))\n                                    (let ((b-str-str-str-str-len\
    \ (string-length b-str-str-str-str)))\n                                      (let\
    \ ((a-str-str-str-str-str-str (string-copy a-str-str-str-str-str)))\n        \
    \                                (let ((b-str-str-str-str-str-str (string-copy\
    \ b-str-str-str-str-str))))\n                                        (let ((a-str-str-str-str-str-str-len\
    \ (string-length a-str-str-str-str-str-str)))\n                              \
    \            (let ((b-str-str-str-", "  (let ((a (string->list a)))\n    (let\
    \ ((b (string->list b)))\n      (and (string-prefix? b a)\n           (string-prefix?\
    \ a b))))\n)\n\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #f\n;; >>> (cycpattern_check\
    \ \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"psus\")\n\
    ;; #f\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check\
    \ \"efef\" \"eeff\")\n;; #f\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n\
    ;; #t", "  (let ((a-len (length a))\n        (b-len (length b)))\n    (if (and\
    \ (>= a-len b-len)\n            (string-ci=? (string-copy/ci a b)\n          \
    \                        (string-copy/ci (string-copy/ci a b)\n              \
    \                                       (string-copy/ci (string-copy/ci a b))))\n\
    \          (string-ci=? (string-copy/ci a b)\n                               \
    \   (string-copy/ci (string-copy/ci a b)\n                                   \
    \                  (string-copy/ci (string-copy/ci a b))))\n          (string-ci=?\
    \ (string-copy/ci a b)\n                                  (string-copy/ci (string-copy/ci\
    \ a b)\n                                                     (string-copy/ci (string-copy/ci\
    \ a b))))\n          (string-ci=? (string-copy/ci a b)\n                     \
    \             (string-copy/ci (string-copy/ci a b)\n                         \
    \                            (string-copy/ci (string-copy/ci a b))))\n       \
    \   (string-ci=? (string-copy/ci a b)\n                                  (string-copy/ci\
    \ (string-copy/ci a b)\n                                                     (string-copy/ci\
    \ (string-copy/ci a b))))\n          (string-ci=? (string-copy/ci a b)\n     \
    \                             (string-copy/ci (string-copy/ci a b)\n         \
    \                                            (string-copy/ci (string-copy/ci a\
    \ b))))\n          (string-ci=? (string-copy/ci a b)\n                       \
    \           (string-copy/ci (string-copy/ci a b)\n                           \
    \                          (string-copy/ci (string-copy/ci a b))))\n         \
    \ (string-ci=? (string-copy/ci a b)\n                                  (string-copy/ci\
    \ (string-copy/ci a b)\n                                                     (string-copy/ci\
    \ (string-copy/ci a b))))\n          (string-ci=? (string-copy", "  (let ((p (string-split\
    \ a b)))\n    (and (map (lambda (x) (string-contains? x b)) p)\n        (string-contains?\
    \ b a))))\n\n;; You are given a string and a pattern. You need to return #t if\
    \ the pattern is a substring of the string\n;; >>> (cycpattern_check \"abcd\"\
    \ \"abd\")\n;; #f\n;; >>> (cycpattern_check \"hello\" \"ell\")\n;; #t\n;; >>>\
    \ (cycpattern_check \"whassup\" \"psus\")\n;; #f\n;; >>> (cycpattern_check \"\
    abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check \"efef\" \"eeff\")\n;; #f\n;;\
    \ >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t", "  (let ((a-len (string-length\
    \ a)))\n    (let ((b-len (string-length b)))\n      (let ((a-str (string->list\
    \ a))\n            (b-str (string->list b)))\n        (let ((a-list (mapcar (lambda\
    \ (x) (string-ci-caseless-upcase x)) a-str))\n              (b-list (mapcar (lambda\
    \ (x) (string-ci-caseless-upcase x)) b-str)))\n          (and (string-ci-caseless-upcase\
    \ (car a-list))\n               (string-ci-caseless-upcase (car b-list)))\n  \
    \      )\n      )\n    )\n  )\n)\n", "  (let ((p (string-split a b)))\n    (and\
    \ (map (lambda (x) (string-contains? x b)) p)\n         (map (lambda (x) (string-contains?\
    \ x a)) p))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
