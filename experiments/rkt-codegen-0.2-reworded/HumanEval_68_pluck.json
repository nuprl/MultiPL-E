{
  "name": "HumanEval_68_pluck",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; \"Given a list representing a branch of a tree that has non-negative integer nodes\n;; your task is to pluck one of the nodes and return it.\n;; The plucked node should be the node with the smallest even value.\n;; If multiple nodes with the same smallest even value are found return the node that has smallest index.\n;; The plucked node should be returned in a list, [ smalest_value, its index ],\n;; If there are no even values or the given list is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>> (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)",
  "completions": [
    "  (let ((min-index (lambda (a b) (if (< a b) a b))))\n    (if (null? arr)\n      []\n      (let ((min-value (lambda (a b) (if (< a b) a b))))\n        (let ((min-index-value (lambda (a b) (if (< a b) a b))))\n          (let ((index (min-index-value arr)))\n            (if (even? arr[index])\n              (list (min-value arr[index]) index)\n              (let ((index (min-index arr)))\n                (if (even? arr[index])\n                  (list (min-value arr[index]) index)\n                  (list (min-value arr[index]) index)))))))))))\n",
    "  (let ((min_value (car arr))\n         (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min_value min_index)\n      (if (even? min_value)\n        (list min_value (car (cdr arr)))\n        (if (even? (car (cdr arr)))\n          (list min_value (car (cdr arr)))\n          (if (even? (car (cdr (cdr arr))))\n            (list min_value (car (cdr (cdr arr))))\n            (list min_value (car (cdr (cdr (cdr arr))))))))))))\n",
    "  (let ((min_index (car (min (map (lambda (a b) (if (even? b) a b)) arr))))\n        (min_value (car arr)))\n    (if (null? arr)\n      (list min_value min_index)\n      (if (even? min_value)\n        (list min_value min_index)\n        (if (even? (car arr))\n          (list (car arr) (car arr))\n          (list (car arr) (car arr)))))\n  ))",
    "  (cond\n    ((null? arr) (list))\n    ((even? (car arr)) (car arr))\n    (else (car arr))\n  ))\n)\n",
    "  (let ((min-index (car (min (map (lambda (x) (car x)) arr))))\n         (min-value (car (min (map (lambda (x) (cdr x)) arr))))\n         (min-index-value (car (min (map (lambda (x) (cdr (cdr x))) arr))))\n         (min-index-value-arr (map (lambda (x) (cdr (cdr (cdr x)))) arr))))\n  (if (null? arr)\n    (list)\n    (if (null? min-index-value-arr)\n      (list)\n      (list min-index min-value min-index-value)\n      (list min-index min-value min-index-value-arr)))))",
    "  (let ((min-index (car (min (map (lambda (x) (car x)) arr))))\n         (min-value (car (min (map (lambda (x) (car x)) arr))))\n         (min-index-value (car (min (map (lambda (x) (car x)) arr))))\n         (min-index-value-arr (map (lambda (x) (car x)) arr)))\n    (if (null? min-index-value-arr)\n      (list min-index-value-arr)\n      (list min-index min-index-value-arr)))\n)\n",
    "  (let ((min_index (car (min (map (lambda (x) (car x)) arr))))\n         (min_value (car (min (map (lambda (x) (car x)) arr))))\n         (min_index_value (car (min (map (lambda (x) (car x)) arr))))\n         (min_index_value_index (car (min (map (lambda (x) (car x)) arr))))\n         (min_index_value_index_index (car (min (map (lambda (x) (car x)) arr))))\n         (min_index_value_index_index_index (car (min (map (lambda (x) (car x)) arr))))\n         (min_index_value_index_index_index_index (car (min (map (lambda (x) (car x)) arr))))\n         (min_index_value_index_index_index_index_index (car (min (map (lambda (x) (car x)) arr))))\n         (min_index_value_index_index_index_index_index_index (car (min (map (lambda (x) (car x)) arr))))\n         (min_index_value_index_index_index_index_index_index_index (car (min (map (lambda (x) (car x)) arr))))\n         (min_index_value_index_index_index_index_index_index_index_index (car (min (map (lambda (x) (car x)) arr))))\n         (min_index_value_index_index_index_index_index_index_index_index_index (car (min (map (lambda (x) (car x)) arr))))\n         (min_index_value_index_index_index_index_index_index_index_index_index_index (car (min (map (lambda (x) (car x)) arr))))\n         (min_index_value_index_index_index_index_index_index_index_index_index_index_index (car (min (map (lambda (x) (car x)) arr))))\n         (min_index_value_index_index_index_index_index_index_index_index_index_index_index_index (",
    "  (let ((min_index (car (min (map (lambda (x) (car x)) arr))))\n         (min_value (car (min (map (lambda (x) (car x)) arr))))))\n    (if (null? arr)\n      (list)\n      (list min_value min_index))\n))",
    "  (let ((min-even (lambda (x) (if (even? x) x (min-even (- x 1)))))\n         (min-index (lambda (x) (if (even? x) x (min-index (- x 1)))))\n         (min-value (lambda (x) (if (even? x) x (min-value (- x 1)))))\n         (min-index-value (lambda (x) (if (even? x) x (min-index-value (- x 1)))))\n         (min-value-index (lambda (x) (if (even? x) x (min-value-index (- x 1)))))\n         (min-value-index-value (lambda (x) (if (even? x) x (min-value-index-value (- x 1))))))\n  (if (empty? arr)\n    []\n    (let ((min-even-index (min-index-value arr)))\n      (let ((min-even-value (min-value-index arr)))\n        (let ((min-index-value-index (min-value-index-value arr)))\n          (let ((min-index-value-value (min-value arr)))\n            (let ((min-value-index-value-index (min-value-index-value arr)))\n              (let ((min-value-index-value-value (min-value-index arr)))\n                (let ((min-value-index-value-index-value (min-value-index-value arr)))\n                  (let ((min-value-index-value-index-value-index (min-value-index-value-index arr)))\n                    (let ((min-value-index-value-index-value-value (min-value-index-value-index-value arr)))\n                      (let ((min-value-index-value-index-value-value-index (min-value-index-value-index-value-index arr)))\n                        (let ((min-value-index-value-index-value-value-index-index (min-value-index-value-index-value-index-index arr)))\n                          (let ((min-value-index-value-index-value-value-index-index-index (min-value-",
    "  (let ((min_even_value (car (min (map (lambda (x) (modulo x 2)) arr))))\n         (min_index (car (min (map (lambda (x) (modulo x 2)) (map (lambda (x) (car x)) arr))))))\n    (if (null? arr)\n      (list)\n      (list min_even_value min_index))\n  )\n)\n",
    "  (let ((min_even (min (filter even? arr))))\n    (if (null? arr)\n      []\n      (if (even? min_even)\n        (list min_even (car arr))\n        (list min_even (cdr arr)))))\n  )\n)\n",
    "  (let ((min (car arr))\n         (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min min_index)\n      (if (even? min)\n        (list min min_index)\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min",
    "  (let ((smallest (car (sort arr))))\n    (if (null? (cdr arr))\n      (list smallest (car arr))\n      (if (even? smallest)\n        (list (car arr) (car arr))\n        (if (null? (cdr arr))\n          (list smallest (car arr))\n          (if (even? (car (cdr arr)))\n            (list (car arr) (car arr))\n            (list (car (cdr arr)) (car (cdr arr))))))))))\n",
    "  (let ((min-even-value (min-even-value arr)))\n    (if (null? arr)\n      []\n      (if (even? min-even-value)\n        (list min-even-value (car arr))\n        (list min-even-value (car arr)))))\n)\n",
    "  (let ((smallest (car (sort arr))))\n    (if (null? (cdr arr))\n      (list smallest (car arr))\n      (if (even? smallest)\n        (list smallest (car arr))\n        (list (car arr) (car arr)))\n      )\n    )\n  )\n)",
    "  (let ((smallest (car (sort arr))))\n    (if (null? (cdr arr))\n      (list (car smallest) (car arr))\n      (if (even? (car smallest))\n        (let ((index (car arr)))\n          (list (car smallest) (cdr arr)))\n        (let ((index (car arr)))\n          (list (car smallest) (car arr)))))))\n",
    "  (let ((min-index (lambda (x y) (if (< x y) x y))))\n    (let ((min-value (lambda (x) (if (< x 0) 0 (if (< x 1) 1 x))))\n          (min-index-value (lambda (x y) (if (< x y) x y))))\n      (let ((index (lambda (x) (if (< x 0) 0 (if (< x 1) 1 x))))\n            (value (lambda (x) (if (< x 0) 0 (if (< x 1) 1 x))))\n            (pluck-arr arr)))))",
    "  (let ((min-index (car (min (map (lambda (x) (car x)) arr))))\n         (min-value (car (min (map (lambda (x) (car x)) arr))))\n         (min-index-value (car (min (map (lambda (x) (car x)) arr))))\n         (min-index-value-arr (map (lambda (x) (car x)) arr)))\n    (if (null? min-index-value-arr)\n      (list min-index-value)\n      (list min-index min-index-value)))\n)",
    "  (let ((min_even (min (filter even? arr))))\n    (if (null? arr)\n      []\n      (if (even? min_even)\n        (list min_even (car arr))\n        (list min_even (cdr arr)))))\n  )\n)\n",
    "  (let ((result (list)))\n    (for-each (lambda (node)\n                (if (even? node.value)\n                  (if (not result)\n                    (result (list node.value node.index)))\n                  (if (not result)\n                    (result (list node.value node.index)))\n                  (if (not result)\n                    (result (list node.value node.index))))\n                arr))\n    result))\n",
    "  (let ((min-index (lambda (x y) (if (< x y) x y))))\n    (if (empty? arr)\n      []\n      (let ((min-value (lambda (x) (if (< x 0) 0 (min-index (- x 1) arr))))\n            (min-index (lambda (x y) (if (< x y) x y))))\n        (let ((min-index (lambda (x y) (if (< x y) x y))))\n          (if (even? min-value arr)\n            (list min-value (min-index (- min-value 1) arr))\n            (list min-value (min-index (- min-value 2) arr))\n            (list min-value (min-index (- min-value 3) arr))\n            (list min-value (min-index (- min-value 4) arr))\n            (list min-value (min-index (- min-value 5) arr))))))))\n",
    "  (let ((result (list)))\n    (for-each (lambda (node)\n                (if (even? node)\n                    (if (not result)\n                        (result (list node 0))\n                        (if (null? result)\n                            (result (list node 0))\n                            (if (null? (cdr result))\n                                (cdr result)\n                                (cdr (cdr result))))))\n                  (car arr))\n              (cdr arr)))\n  result)\n",
    "  (let ((min-index (lambda (x y) (if (< x y) x y))))\n    (if (empty? arr)\n      []\n      (let ((min-value (lambda (x) (if (< x 0) 0 x))))\n        (let ((min-index-value (lambda (x y) (min-index (min-value x) (min-value y)))))\n          (let ((min-index-value-arr (lambda (x y) (min-index-value x y))))\n            (min-index-value-arr arr))))))))",
    "  (let ((min_value (car arr)))\n    (let ((min_index (car arr)))\n      (if (null? (cdr arr))\n        (list min_value min_index)\n        (if (even? min_value)\n          (list min_value min_index)\n          (if (even? (car (cdr arr)))\n            (list (car (cdr arr)) (car (cdr (cdr arr))))\n            (list (car (cdr arr)) (car (cdr (cdr arr))))))))))\n",
    "  (let ((min_value (car arr))\n         (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min_value min_index)\n      (if (even? min_value)\n        (list min_value (car (cdr arr)))\n        (if (even? (car (cdr arr)))\n          (list (car (cdr (cdr arr))) (car (cdr (cdr arr))))\n          (list (car (cdr (cdr (cdr arr)))) (car (cdr (cdr (cdr arr)))))))))))",
    "  (let ((smallest (car (sort arr (lambda (a b) (< (* a b) 0)))))))\n  (if (null? arr)\n    []\n    (if (even? smallest)\n      (list smallest (car arr))\n      (let ((smallest (car (sort arr (lambda (a b) (< (* a b) 0))))))\n        (if (even? smallest)\n          (list smallest (car arr))\n          (list smallest (car arr))))))))\n",
    "  (let ((min (car arr))\n         (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min min_index)\n      (if (even? min)\n        (list min min_index)\n        (if (null? (cdr (cdr arr)))\n          (list min min_index)\n          (if (even? min)\n            (list min min_index)\n            (if (null? (cdr (cdr (cdr arr))))\n              (list min min_index)\n              (if (even? min)\n                (list min min_index)\n                (if (null? (cdr (cdr (cdr (cdr arr))))))\n                (list min min_index)\n                (if (even? min)\n                  (list min min_index)\n                  (if (null? (cdr (cdr (cdr (cdr (cdr arr))))))))))))))))))\n",
    "  (let ((min_index (car (min (map (lambda (a b) (+ (even? a) (even? b))) arr))))\n         (min_value (car arr)))\n    (if (null? arr)\n      (list min_value min_index)\n      (if (even? min_value)\n        (list min_value min_index)\n        (if (even? (car arr))\n          (list (car arr) (car min_index))\n          (list (car min_index) (car arr)))))\n  ))",
    "  (let ((min (car arr))\n         (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min min_index)\n      (if (even? min)\n        (list min min_index)\n        (if (null? (cdr (cdr arr)))\n          (list min min_index)\n          (if (even? min)\n            (list min min_index)\n            (if (null? (cdr (cdr (cdr arr))))\n              (list min min_index)\n              (if (even? min)\n                (list min min_index)\n                (list min min_index))\n              (list min min_index))\n            (list min min_index))\n          (list min min_index))\n        (list min min_index))\n      (list min min_index))\n  arr))",
    "  (let ((min (car arr))\n        (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min min_index)\n      (if (even? min)\n        (list min min_index)\n        (if (even? min_index)\n          (list min min_index)\n          (if (even? (car (cdr arr)))\n            (list min min_index)\n            (if (even? (car (cdr (cdr arr))))\n              (list min min_index)\n              (list min min_index)))))\n    ))\n",
    "  (let ((min (car arr))\n         (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min min_index)\n      (if (even? min)\n        (list min min_index)\n        (if (null? (cdr (cdr arr)))\n          (list min min_index)\n          (if (even? min)\n            (list min min_index)\n            (if (null? (cdr (cdr (cdr arr))))\n              (list min min_index)\n              (list min min_index)\n              (list min min_index)\n              (list min min_index)\n              (list min min_index)\n              (list min min_index)\n              (list min min_index)\n              (list min min_index)\n              (list min min_index)\n              (list min min_index)\n              (list min min_index)\n              (list min min_index)\n              (list min min_index)\n              (list min min_index)\n              (list min min_index)\n              (list min min_index)\n              (list min min_index)\n              (list min min_index)\n              (list min min_index)\n              (list min min_index)\n              (list min min_index)\n              (list min min_index)\n              (list min min_index)\n              (list min min_index)\n              (list min min_index)\n              (list min min_index)\n              (list min min_index)\n              (list min min_index)\n              (list min min_index)\n              (list min min_index)\n              (list min min_index)\n              (list min min_index)\n              (list min min_index)\n              (list min min_index)\n              (list min min_index)\n              (list min min_index)\n              (list min min_index)\n              (list min min_index)\n              (list min min_index)\n              (list min min_index)\n              (list min min_index)\n              (list min min_index)\n              (list min min_index)\n              (list",
    "  (let ((min-index (lambda (a b) (if (< a b) a b))))\n    (if (empty? arr)\n      []\n      (let ((min-value (lambda (a b) (if (< a b) a b))))\n        (let ((min-index-value (lambda (a b) (if (< a b) a b))))\n          (let ((min-index-value-arr (lambda (a b) (if (< a b) a b))))\n            (let ((min-index-value-arr-arr (lambda (a b) (if (< a b) a b))))\n              (let ((min-index-value-arr-arr-arr (lambda (a b) (if (< a b) a b))))\n                (let ((min-index-value-arr-arr-arr-arr (lambda (a b) (if (< a b) a b))))\n                  (let ((min-index-value-arr-arr-arr-arr-arr (lambda (a b) (if (< a b) a b))))\n                    (let ((min-index-value-arr-arr-arr-arr-arr-arr (lambda (a b) (if (< a b) a b))))\n                      (let ((min-index-value-arr-arr-arr-arr-arr-arr-arr (lambda (a b) (if (< a b) a b))))\n                        (let ((min-index-value-arr-arr-arr-arr-arr-arr-arr-arr (lambda (a b) (if (< a b) a b))))\n                          (let ((min-index-value-arr-arr-arr-arr-arr-arr-arr-arr-arr (lambda (a b) (if (< a b) a b))))\n                            (let ((min-index-value-arr-arr-arr-arr-arr-arr-arr-arr-arr-arr (lambda (a b) (if (< a b) a b))))\n                              (let ((min-index-value-arr-arr-arr-arr-arr-arr-arr-arr-arr-arr-arr (lambda (a b) (if (< a b) a b))))\n                                (let ((min-index-value-arr-arr-arr-arr-arr-arr-",
    "  (let ((min_value (car arr))\n         (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min_value min_index)\n      (if (even? min_value)\n        (list min_value (car (cdr arr)))\n        (if (even? (car (cdr arr)))\n          (list min_value (car (cdr arr)))\n          (list min_value (car (cdr arr))))))))\n",
    "  (let ((min (car arr))\n        (min-index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min min-index)\n      (if (even? min)\n        (list min min-index)\n        (if (null? (cdr (cdr arr)))\n          (list min min-index)\n          (if (even? min)\n            (list min min-index)\n            (if (null? (cdr (cdr (cdr arr))))\n              (list min min-index)\n              (list min min-index (car (cdr (cdr (cdr arr)))))\n              (list min min-index (car (cdr (cdr (cdr (cdr arr)))))))))\n        (list min min-index (car (cdr (cdr arr)))))))\n",
    "  (let ((min_value (car arr)))\n    (let ((min_index (car arr)))\n      (if (null? (cdr arr))\n        (list min_value min_index)\n        (if (even? min_value)\n          (let ((index (car arr)))\n            (if (even? index)\n              (list min_value index)\n              (if (even? min_value)\n                (list min_value index)\n                (if (even? min_index)\n                  (list min_value min_index)\n                  (list min_value min_index index)))))))))\n",
    "  (let ((min (car arr))\n        (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min min_index)\n      (if (even? min)\n        (list min min_index)\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? (car (cdr arr)))\n          (list min min_index)\n          (list min_index (car (cdr arr))))))))\n",
    "  (let ((min (car arr))\n         (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min min_index)\n      (if (even? min)\n        (list min (car (cdr arr)))\n        (if (even? min_index)\n          (list min_index (car (cdr arr)))\n          (list min_index (car (cdr arr))))))))\n",
    "  (let ((min_index (car (min (map (lambda (x) (car x)) arr))))\n         (min_value (car (min (map (lambda (x) (car x)) arr))))\n         (min_index_value (car (min (map (lambda (x) (car x)) arr))))\n         (min_index_value_index (car (min (map (lambda (x) (car x)) arr))))))\n  (if (null? arr)\n    (list)\n    (if (null? min_index_value_index)\n      (list min_index min_value)\n      (list min_index_value min_index min_value)))))",
    "  (let ((smallest (car (sort arr))))\n    (if (null? (cdr arr))\n      (list smallest (car arr))\n      (if (even? smallest)\n        (list (car arr) (car arr))\n        (if (null? (cdr arr))\n          (list smallest (car arr))\n          (if (even? (car (cdr arr)))\n            (list (car arr) (car arr))\n            (if (null? (cdr (cdr arr)))\n              (list smallest (car arr))\n              (if (even? (car (cdr (cdr arr))))\n                (list (car arr) (car (cdr arr)))\n                (list (car (cdr arr)) (car (cdr (cdr arr))))))))))))))",
    "  (let ((smallest (car (sort arr))))\n    (if (null? (cdr arr))\n      (list smallest (car arr))\n      (if (even? smallest)\n        (list (car arr) (car arr))\n        (list (car arr) (car arr)))))\n)",
    "  (let ((result (list)))\n    (for-each (lambda (node)\n                (if (even? node.value)\n                  (if (not result)\n                    (result (list node.value node.index))\n                    (if (result.value > node.value)\n                      (result (list node.value node.index))\n                      (result (list node.value node.index))))))\n      arr))\n",
    "  (let ((smallest (car (sort arr (lambda (a b) (+ (a) (b))))) (cdr arr))))\n  (if (null? arr)\n    []\n    (cons (car smallest) (cdr smallest))))\n",
    "  (let ((result (list)))\n    (if (empty? arr)\n      (result)\n      (let ((smallest (car arr)))\n        (if (even? smallest)\n          (if (null? (cdr arr))\n            (result (cons smallest (cdr result)))\n            (result (cons smallest (cdr result) (cons smallest (cdr arr))))\n          (result (cons smallest (cdr result) (cons smallest (cdr arr))))\n          (result (cons smallest (cdr result) (cons smallest (cdr arr))))\n          (result (cons smallest (cdr result) (cons smallest (cdr arr))))\n          (result (cons smallest (cdr result) (cons smallest (cdr arr))))\n          (result (cons smallest (cdr result) (cons smallest (cdr arr))))\n          (result (cons smallest (cdr result) (cons smallest (cdr arr))))\n          (result (cons smallest (cdr result) (cons smallest (cdr arr))))\n          (result (cons smallest (cdr result) (cons smallest (cdr arr))))\n          (result (cons smallest (cdr result) (cons smallest (cdr arr))))\n          (result (cons smallest (cdr result) (cons smallest (cdr arr))))\n          (result (cons smallest (cdr result) (cons smallest (cdr arr))))\n          (result (cons smallest (cdr result) (cons smallest (cdr arr))))\n          (result (cons smallest (cdr result) (cons smallest (cdr arr))))\n          (result (cons smallest (cdr result) (cons smallest (cdr arr))))\n          (result (cons smallest (cdr result) (cons smallest (cdr arr))))\n          (result (cons smallest (cdr result) (cons smallest (cdr arr))))\n          (result (cons smallest (cdr result) (cons smallest (cdr arr))))\n          (result (cons smallest (cdr result) (cons smallest (cdr arr))))\n          (result (cons smallest (cdr result) (cons smallest (cdr arr))))\n          (result (cons smallest (cdr result) (cons smallest (cdr arr))))\n          (result (cons smallest (cdr result) (cons smallest (cdr arr))))\n          (result (cons",
    "  (let ((smallest (car (sort arr (lambda (a b) (< b a)))))))\n  (if (empty? arr)\n    []\n    (if (even? smallest)\n      (list smallest (car arr))\n      (list (car arr) (car arr)))))",
    "  (let ((min (car arr))\n         (min_index (car (cdr arr))))\n    (if (even? min)\n      (list min min_index)\n      (if (null? (cdr arr))\n        (list min)\n        (if (even? min)\n          (list min min_index)\n          (if (null? (cdr arr))\n            (list min)\n            (if (even? min)\n              (list min min_index)\n              (if (null? (cdr arr))\n                (list min))))))))\n",
    "  (let ((min (car arr))\n         (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min min_index)\n      (if (even? min)\n        (list min min_index)\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? (car arr))\n          (list min min_index)\n          (list min_index (car arr)))))\n  arr))",
    "  (let ((smallest (car (sort arr))))\n    (if (null? (cdr arr))\n      (list smallest (car arr))\n      (if (even? smallest)\n        (list (car arr) (car arr))\n        (pluck (cdr arr))))))\n",
    "  (let ((min_value (car arr))\n         (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min_value min_index)\n      (if (even? min_value)\n        (list min_value (car (cdr arr)))\n        (if (even? (car (cdr arr)))\n          (list (car (cdr (cdr arr))) (car (cdr (cdr arr))))\n          (list (car (cdr (cdr (cdr arr)))) (car (cdr (cdr (cdr arr)))))))))))\n",
    "  (let ((min-index (car (min (map (lambda (x) (car x)) arr))))\n        (min-value (car (min (map (lambda (x) (car x)) arr))))\n        (min-index-value (car (min (map (lambda (x) (car x)) arr))))\n        (min-index-value-arr (map (lambda (x) (car x)) arr)))\n    (if (null? min-index-value-arr)\n      (list min-index min-value)\n      (list min-index min-index-value min-value-arr)\n    )\n  )\n)\n",
    "  (let ((min_value (car arr))\n         (min_index (car (cdr arr))))\n    (if (even? min_value)\n      (list min_value min_index)\n      (if (null? (cdr arr))\n        (list min_value)\n        (pluck (cdr arr))))))",
    "  (let ((smallest_value (car arr))\n         (smallest_index (car arr)))\n    (if (null? arr)\n      []\n      (if (even? smallest_value)\n        (if (null? smallest_index)\n          (list smallest_value (car arr))\n          (list smallest_value (car arr) smallest_index))\n        (if (even? (car arr))\n          (list smallest_value (car arr))\n          (list smallest_value (car arr) smallest_index))\n        (if (even? (car arr))\n          (list smallest_value (car arr))\n          (list smallest_value (car arr) smallest_index))\n        (if (even? (car arr))\n          (list smallest_value (car arr))\n          (list smallest_value (car arr) smallest_index))\n        (if (even? (car arr))\n          (list smallest_value (car arr))\n          (list smallest_value (car arr) smallest_index))\n        (if (even? (car arr))\n          (list smallest_value (car arr))\n          (list smallest_value (car arr) smallest_index))\n        (if (even? (car arr))\n          (list smallest_value (car arr))\n          (list smallest_value (car arr) smallest_index))\n        (if (even? (car arr))\n          (list smallest_value (car arr))\n          (list smallest_value (car arr) smallest_index))\n        (if (even? (car arr))\n          (list smallest_value (car arr))\n          (list smallest_value (car arr) smallest_index))\n        (if (even? (car arr))\n          (list smallest_value (car arr))\n          (list smallest_value (car arr) smallest_index))\n        (if (even? (car arr))\n          (list smallest_value (car arr))\n          (list smallest_value (car arr) smallest_index))\n        (if (even? (car arr))\n          (list smallest_value (car arr))\n          (list smallest_value (car arr) smallest_index))\n        (if (even? (car arr))\n          (list smallest_value (car arr))",
    "  (let ((min-index (car (min (map (lambda (x) (car x)) arr))))\n         (min-value (car (min (map (lambda (x) (car x)) arr))))\n         (min-index-value (car (min (map (lambda (x) (car x)) arr))))\n         (min-index-value-arr (map (lambda (x) (car x)) arr))))\n  (if (null? arr)\n    []\n    (cons min-index-value-arr (cons min-index min-value))))\n",
    "  (let ((result (list)))\n    (for-each (lambda (x)\n                (if (even? x)\n                    (if (null? result)\n                        (list x 0)\n                        (if (null? (cdr result))\n                            (list x (car result))\n                            (list x (car (cdr result))))\n                        (list x (car (cdr result))))\n                    (if (null? result)\n                        (list x 0)\n                        (if (null? (cdr result))\n                            (list x (car result))\n                            (list x (car (cdr result))))))))\n      (cdr arr)))\n  result)\n",
    "  (let ((smallest_value (car arr)))\n    (let ((smallest_index (car arr)))\n      (if (null? (cdr arr))\n        (list smallest_value smallest_index)\n        (if (even? smallest_value)\n          (if (null? (cdr arr))\n            (list smallest_value smallest_index)\n            (if (even? smallest_value)\n              (list smallest_value smallest_index)\n              (list smallest_value smallest_index)))\n          (if (even? smallest_value)\n            (list smallest_value smallest_index)\n            (list smallest_value smallest_index)))\n        (if (even? smallest_value)\n          (list smallest_value smallest_index)\n          (list smallest_value smallest_index)))\n    (car arr)))\n)",
    "  (let ((min (car arr))\n        (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min min_index)\n      (if (even? min)\n        (list min min_index)\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? (car (cdr arr)))\n          (list min min_index)\n          (list min_index (car (cdr arr))))))))\n",
    "  (let ((min (car arr))\n        (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min min_index)\n      (if (even? min)\n        (list min min_index)\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min",
    "  (let ((min_value (car arr)))\n    (let ((min_index (car arr)))\n      (if (even? min_value)\n        (list min_value min_index)\n        (if (null? (cdr arr))\n          (list min_value min_index)\n          (pluck (cdr arr)))))))\n",
    "  (let ((min (car arr))\n        (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min min_index)\n      (if (even? min)\n        (list min min_index)\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min",
    "  (let ((min (car arr))\n         (min_index (car (cdr arr))))\n    (if (even? min)\n      (if (null? (cdr arr))\n        (list min min_index)\n        (list min min_index (car arr)))\n      (if (null? (cdr arr))\n        (list min min_index)\n        (list min min_index (car arr))))))",
    "  (let ((min-index (lambda (a b) (if (< a b) a b))))\n    (let ((min-value (lambda (a b) (if (< a b) a b))))\n      (let ((index (lambda (a b) (if (< a b) a b))))\n        (let ((value (lambda (a b) (if (< a b) a b))))\n          (if (null? arr)\n            (list)\n            (let ((index (index arr)))\n              (if (null? index)\n                (list)\n                (let ((value (value arr)))\n                  (if (null? value)\n                    (list)\n                    (list (min-value value) (min-index index))))))))))))",
    "  (let ((smallest (car (first arr))))\n    (if (even? (car smallest))\n      (if (even? (cdr smallest))\n        (car smallest)\n        (cdr smallest))\n      (car (cdr smallest))))\n  (if (null? arr)\n    []\n    (cons (pluck arr) (pluck (cdr arr))))))",
    "  (let ((min_index (car (min (map (lambda (x) (car x)) arr))))\n         (min_value (car (min (map (lambda (x) (car x)) arr))))\n         (min_index_value (car (min (map (lambda (x) (car x)) arr))))))\n    (if (null? arr)\n        (list)\n        (list min_value min_index_value))\n  )\n)",
    "  (let ((min (car arr))\n        (min-index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min min-index)\n      (if (even? min)\n        (list min min-index)\n        (if (even? min-index)\n          (list min min-index)\n          (list min min-index (car (cdr arr))))))))",
    "  (let ((min_value (car arr))\n         (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min_value min_index)\n      (if (even? min_value)\n        (list min_value (car (cdr arr)))\n        (if (even? (car (cdr arr)))\n          (list (car (cdr (cdr arr))) (car (cdr (cdr arr))))\n          (list (car (cdr (cdr (cdr arr)))) (car (cdr (cdr (cdr arr)))))))))))\n",
    "  (let ((min_index (car (min (map (lambda (x) (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x",
    "  (let ((smallest (car (sort arr))))\n    (if (null? (cdr arr))\n      (list (car smallest) (car arr))\n      (if (even? (car smallest))\n        (let ((index (car arr)))\n          (list (car smallest) (cdr arr)))\n        (let ((index (car arr)))\n          (list (car smallest) (car arr)))))))\n",
    "  (let ((min-index (lambda (x y) (if (< x y) x y))))\n    (if (empty? arr)\n      []\n      (let ((min-value (lambda (x) (if (< x 0) 0 x))))\n        (let ((min-index-value (lambda (x y) (min-index (min-value x) (min-value y)))))\n          (if (even? (min-index-value arr))\n            (list (min-value arr) (min-index arr))\n            (list (min-value arr) (min-index-value arr))))))))\n",
    "  (let ((result (list)))\n    (for-each (lambda (node)\n                (if (even? node)\n                  (if (not result)\n                    (result (list node 0))\n                    (if (null? result)\n                      (result (list node 0))\n                      (if (null? (cdr result))\n                        (cdr result)\n                        (cdr (cdr result))))))\n                (car arr)))\n    (if (null? result)\n      (list)\n      (car result)))\n",
    "  (let ((min-index (car (find-min (map (lambda (x) (modulo x 2)) arr))))))\n  (if (null? arr)\n    []\n    (list (car arr) min-index)))\n",
    "  (let ((min-index (lambda (a b) (if (< a b) a b))))\n    (let ((min-value (lambda (a b) (if (< a b) a b))))\n      (let ((min-index-value (lambda (a b) (if (< a b) a b))))\n        (let ((index (lambda (a b) (if (< a b) a b))))\n          (let ((value (lambda (a b) (if (< a b) a b))))\n            (let ((index-value (lambda (a b) (if (< a b) a b))))\n              (let ((index-value-arr (lambda (a b) (if (< a b) a b))))\n                (let ((index-value-arr-arr (lambda (a b) (if (< a b) a b))))\n                  (let ((index-value-arr-arr-arr (lambda (a b) (if (< a b) a b))))\n                    (let ((index-value-arr-arr-arr-arr (lambda (a b) (if (< a b) a b))))\n                      (let ((index-value-arr-arr-arr-arr-arr (lambda (a b) (if (< a b) a b))))\n                        (let ((index-value-arr-arr-arr-arr-arr-arr (lambda (a b) (if (< a b) a b))))\n                          (let ((index-value-arr-arr-arr-arr-arr-arr-arr (lambda (a b) (if (< a b) a b))))\n                            (let ((index-value-arr-arr-arr-arr-arr-arr-arr-arr (lambda (a b) (if (< a b) a b))))\n                              (let ((index-value-arr-arr-arr-arr-arr-arr-arr-arr-arr (lambda (a b) (if (< a b) a b))))\n                                (let ((index-value-arr-arr-arr-arr-arr-arr-arr-arr-arr-arr (lambda (a b) (if (< a b) a b))))\n                                  (let ((index-value-arr-arr-arr-arr-arr-arr-arr-arr-arr-arr-arr (lambda (a b",
    "  (let ((min-index (lambda (a b) (if (< a b) a b))))\n    (let ((min-value (lambda (a b) (if (< a b) a b))))\n      (let ((min-index-value (lambda (a b) (if (< a b) a b))))\n        (let ((index (lambda (a b) (if (< a b) a b))))\n          (let ((value (lambda (a b) (if (< a b) a b))))\n            (let ((index-value (lambda (a b) (if (< a b) a b))))\n              (let ((index-value-index (lambda (a b) (if (< a b) a b))))\n                (let ((index-value-value (lambda (a b) (if (< a b) a b))))\n                  (let ((index-value-value-index (lambda (a b) (if (< a b) a b))))\n                    (let ((index-value-value-value (lambda (a b) (if (< a b) a b))))\n                      (let ((index-value-value-value-index (lambda (a b) (if (< a b) a b))))\n                        (let ((index-value-value-value-value (lambda (a b) (if (< a b) a b))))\n                          (let ((index-value-value-value-value-index (lambda (a b) (if (< a b) a b))))\n                            (let ((index-value-value-value-value-value (lambda (a b) (if (< a b) a b))))\n                              (let ((index-value-value-value-value-value-index (lambda (a b) (if (< a b) a b))))\n                                (let ((index-value-value-value-value-value-value (lambda (a b) (if (< a b) a b))))\n                                  (let ((index-value-value-value-value-value-value-index (lambda (a b) (if (< a b) a b))))\n                                    (let ((index-value-value-value-value-value-value-value (lambda (a b) (if (< a b) a b))))\n                                      (let ((index-value-value",
    "  (let ((smallest (car (min (map (lambda (x) (mod x 2)) arr))))))\n    (if (null? arr)\n      (list)\n      (list (car arr) (car (cdr arr))))))",
    "  (let ((smallest (car (sort arr))))\n    (if (null? arr)\n      (list (car smallest) (car smallest))\n      (if (even? (car smallest))\n        (list (car smallest) (car smallest))\n        (if (< (car smallest) (car (car arr)))\n          (list (car smallest) (car (car arr)))\n          (list (car (car arr)) (car (car arr))))))))\n",
    "  (let ((min-index (lambda (a b) (if (< a b) a b))))\n    (let ((min-value (lambda (a b) (if (< a b) a b))))\n      (let ((index (lambda (a b) (if (< a b) a b))))\n        (if (empty? arr)\n            (list)\n            (let ((smallest-value (lambda (a b) (min-value a b))))\n              (let ((smallest-index (lambda (a b) (min-index a b))))\n                (if (even? (min-value arr))\n                    (list (smallest-value arr) (smallest-index arr))\n                    (list (smallest-value arr) (smallest-index arr)))))\n            ))))))))",
    "  (let ((min-index (car (min (map (lambda (x) (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x",
    "  (let ((smallest (car (sort arr))))\n    (if (null? (cdr arr))\n      (list smallest (car arr))\n      (if (even? smallest)\n        (list (car arr) (car arr))\n        (if (even? (car arr))\n          (list (car arr) (car arr))\n          (list (car arr) (car arr)))))\n  ))",
    "  (cond\n    ((>= arr.length 0) (list))\n    ((<= arr.length 1) (list (arr 0)))\n    ((<= arr.length 2) (list (arr 0) (arr 1)))\n    ((<= arr.length 3) (list (arr 0) (arr 1) (arr 2)))\n    ((<= arr.length 4) (list (arr 0) (arr 1) (arr 2) (arr 3)))\n    ((<= arr.length 5) (list (arr 0) (arr 1) (arr 2) (arr 3) (arr 4)))\n    ((<= arr.length 6) (list (arr 0) (arr 1) (arr 2) (arr 3) (arr 4) (arr 5)))\n    ((<= arr.length 7) (list (arr 0) (arr 1) (arr 2) (arr 3) (arr 4) (arr 5) (arr 6)))\n    ((<= arr.length 8) (list (arr 0) (arr 1) (arr 2) (arr 3) (arr 4) (arr 5) (arr 6) (arr 7)))\n    ((<= arr.length 9) (list (arr 0) (arr 1) (arr 2) (arr 3) (arr 4) (arr 5) (arr 6) (arr 7) (arr 8)))\n    ((<= arr.length 10) (list (arr 0) (arr 1) (arr 2) (arr 3) (arr 4) (arr 5) (arr 6) (arr 7) (arr 8) (arr 9)))\n    ((<= arr.length 11) (list (arr 0) (arr 1) (arr 2) (arr 3) (arr 4) (arr 5) (arr 6) (arr 7) (arr 8) (arr 9) (arr 10)))\n    ((<= arr.length 12) (list (arr 0) (arr 1) (arr 2) (arr 3) (arr 4) (arr 5) (arr 6) (arr 7) (arr 8) (arr 9) (arr 10) (arr 11)))\n    ((<= arr.length 13) (list (arr 0) (arr 1) (arr 2) (arr 3) (arr 4) (arr 5) (arr 6)",
    "  (let ((min (car arr))\n         (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min min_index)\n      (if (even? min)\n        (list min min_index)\n        (if (null? (cdr (cdr arr)))\n          (list min min_index)\n          (if (even? min)\n            (list min min_index)\n            (if (null? (cdr (cdr (cdr arr))))\n              (list min min_index)\n              (if (even? min)\n                (list min min_index)\n                (list min min_index))))))))))\n",
    "  (let ((min-index (car (min (map (lambda (x) (car x)) arr))))\n         (min-value (car (min (map (lambda (x) (car x)) arr))))\n         (min-index-value (car (min (map (lambda (x) (car x)) arr))))\n         (min-index-value-arr (map (lambda (x) (car x)) arr)))\n    (if (null? min-index-value-arr)\n      (list min-index-value)\n      (list min-index min-index-value)))\n)",
    "  (let ((min (car arr))\n        (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min min_index)\n      (if (even? min)\n        (list min min_index)\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min)))))\n",
    "  (let ((min_value (car arr))\n         (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min_value min_index)\n      (if (even? min_value)\n        (list min_value (car (cdr arr)) (car (cdr (cdr arr))))\n        (if (even? min_value)\n          (list min_value (car (cdr arr)) (car (cdr (cdr arr))))\n          (list min_value (car (cdr (cdr arr))) (car (cdr (cdr (cdr arr))))))))))\n",
    "  (let ((min_even (min (filter even? arr))))\n    (if (null? arr)\n      []\n      (if (even? min_even)\n        (list min_even (car arr))\n        (list min_even (cdr arr)))))\n  )",
    "  (let ((min-index (lambda (a b) (if (< a b) a b))))\n    (let ((min-value (lambda (a b) (if (< a b) a b))))\n      (let ((index (lambda (a b) (if (< a b) a b))))\n        (if (empty? arr)\n            (list)\n            (let ((smallest (lambda (a b) (min-value (min-index a b))))\n                  (smallest-index (lambda (a b) (min-index a b))))\n              (let ((smallest-value (lambda (a b) (min-value (min-index a b))))\n                     (smallest-index-value (lambda (a b) (min-index a b))))\n                (if (even? (smallest-value arr))\n                    (list (smallest-value arr) (smallest-index-value arr))\n                    (list (smallest-value arr) (smallest-index arr))))))))))))",
    "  (let ((min-index (lambda (a b) (if (< a b) a b))))\n    (if (empty? arr)\n      []\n      (let ((min-value (lambda (a b) (if (< a b) a b))))\n        (let ((min-index (lambda (a b) (if (< a b) a b))))\n          (if (even? (min-value arr))\n            (let ((min-index (lambda (a b) (if (< a b) a b))))\n              (list (min-value arr) (min-index arr)))\n            (let ((min-index (lambda (a b) (if (< a b) a b))))\n              (list (min-value arr) (min-index arr)))))))))))",
    "  (let ((smallest (car (sort arr (lambda (a b) (+ (a) (b)))))\n          (smallest_index (car (cdr smallest)))\n          (smallest_value (car smallest)))\n         (smallest_index_arr (cdr smallest_index)))\n    (if (null? smallest_index_arr)\n      (list smallest_value (car smallest_index))\n      (else\n        (let ((index (car smallest_index_arr)))\n          (list (car smallest_value) (cdr smallest_value) index))))))\n",
    "  (let ((smallest (car (min (map (lambda (x) (car x)) arr))))\n         (smallest_index (car (cdr smallest)))\n         (smallest_index_index (car (cdr smallest_index)))\n         (smallest_index_index_index (car (cdr smallest_index_index))))\n    (if (null? smallest_index_index_index)\n      (list smallest_index_index_index)\n      (list smallest_index_index_index_index))))",
    "  (let ((min_value (car arr))\n         (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min_value min_index)\n      (if (even? min_value)\n        (list min_value (car (cdr arr)))\n        (if (even? (car (cdr arr)))\n          (list min_value (car (cdr (cdr arr))))\n          (list min_value (car (cdr (cdr (cdr arr))))))))))\n",
    "  (let ((min (car arr))\n         (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min min_index)\n      (if (even? min)\n        (list min min_index)\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min)))))\n",
    "  (let ((smallest (car arr)))\n    (if (null? arr)\n      []\n      (if (even? smallest)\n        (list smallest (car arr))\n        (if (even? (car arr))\n          (list (car arr) (car arr))\n          (list (car arr) (car arr) (car arr)))))\n  )\n)\n",
    "  (let ((min-index (lambda (a b) (if (< a b) a b))))\n    (let ((min-value (lambda (a b) (if (< a b) a b))))\n      (let ((index (lambda (a b) (if (< a b) a b))))\n        (let ((value (lambda (a b) (if (< a b) a b))))\n          (let ((i 0))\n            (if (empty? arr)\n              (list))\n            (else\n              (if (even? arr[i])\n                (let ((min-index (lambda (a b) (if (< a b) a b))))\n                  (let ((min-value (lambda (a b) (if (< a b) a b))))\n                    (let ((index (lambda (a b) (if (< a b) a b))))\n                      (let ((value (lambda (a b) (if (< a b) a b))))\n                        (if (even? arr[i])\n                          (let ((min-index (lambda (a b) (if (< a b) a b))))\n                            (let ((min-value (lambda (a b) (if (< a b) a b))))\n                              (let ((index (lambda (a b) (if (< a b) a b))))\n                                (let ((value (lambda (a b) (if (< a b) a b))))\n                                  (if (even? arr[i])\n                                      (let ((min-index (lambda (a b) (if (< a b) a b))))\n                                        (let ((min-value (lambda (a b) (if (< a b) a b))))\n                                          (let ((index (lambda (a b) (if (< a b) a b))))\n                                            (let ((value (lambda (a b) (if (< a b) a b))))\n                                              (if (even? arr[i])\n                                                (let ((min-index (lambda (a b) (if (< a b) a b))))\n                                                  (let ((min-value (lambda (a b) (if (< a b) a b))))\n                                                    (let ((index (lambda (a b) (if (< a b) a",
    "  (let ((min (car arr)))\n    (if (null? (cdr arr))\n      (list min 0)\n      (if (even? min)\n        (list min (car arr) (cdr arr))\n        (list min (car arr) (cdr arr) (car (cdr arr)))))))\n",
    "  (let ((min_value (car arr))\n         (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min_value min_index)\n      (if (even? min_value)\n        (list min_value min_index)\n        (if (null? (cdr (cdr arr)))\n          (list min_value min_index)\n          (if (even? (car (cdr (cdr arr))))\n            (list (car (cdr (cdr arr))) (car (cdr (cdr (cdr arr))))))\n          (list (car (cdr (cdr arr))) (car (cdr (cdr (cdr arr)))))))))\n",
    "  (let ((min-index (lambda (a b) (if (< a b) a b))))\n    (let ((min-value (lambda (a b) (if (< a b) a b))))\n      (let ((index (lambda (a b) (if (< a b) a b))))\n        (if (empty? arr)\n            (list)\n            (let ((smallest-value (lambda (a b) (min-value (min-index a b))))\n                  (smallest-index (lambda (a b) (min-index a b))))\n              (let ((smallest-value-index (lambda (a b) (if (< a b) a b))))\n                (let ((smallest-index-value (lambda (a b) (if (< a b) a b))))\n                  (let ((smallest-index-value-index (lambda (a b) (if (< a b) a b))))\n                    (if (empty? arr)\n                        (list)\n                        (let ((smallest-value-index-value (lambda (a b) (min-value (min-index a b))))\n                              (smallest-index-value-index (lambda (a b) (min-index a b))))\n                          (let ((smallest-value-index-value-index (lambda (a b) (if (< a b) a b))))\n                            (if (empty? arr)\n                                (list)\n                                (let ((smallest-value-index-value-index (lambda (a b) (min-value (min-index a b))))\n                                      (smallest-index-value-index-value (lambda (a b) (min-index a b
    "  (let ((min_value (car arr))\n         (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min_value min_index)\n      (if (even? min_value)\n        (list min_value min_index)\n        (if (even? (car (cdr arr)))\n          (list (car (cdr (cdr arr))) (car (cdr (cdr arr))))\n          (list (car (cdr (cdr (cdr arr)))) (car (cdr (cdr (cdr arr)))))))))))\n",
    "  (let ((min (car arr))\n         (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min min_index)\n      (if (even? min)\n        (list min min_index)\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min",
    "  (let ((min (car arr))\n         (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min min_index)\n      (if (even? min)\n        (list min min_index)\n        (if (even? min_index)\n          (list min min_index)\n          (if (even? (car (cdr (cdr arr))))\n            (list min min_index)\n            (list min min_index))\n          (list min min_index))\n        (list min min_index)))))\n",
    "  (let ((min (car arr))\n         (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min min_index)\n      (if (even? min)\n        (list min min_index)\n        (if (even? min_index)\n          (list min min_index)\n          (list min min_index (car (cdr arr))))))))\n",
    "  (let ((result (list)))\n    (if (empty? arr)\n      (result)\n      (let ((smallest (car arr)))\n        (if (even? smallest)\n          (if (null? (cdr arr))\n            (result (list smallest 0))\n            (result (list smallest 1)))\n          (let ((index (car arr)))\n            (if (even? index)\n              (if (null? (cdr arr))\n                (result (list smallest index))\n                (result (list smallest (add index 1))))\n              (result (list smallest index))))))))))\n",
    "  (let ((min_value (car arr)))\n    (let ((min_index (car arr)))\n      (if (null? (cdr arr))\n        (list min_value min_index)\n        (if (even? min_value)\n          (list min_value min_index)\n          (if (even? (car (cdr arr)))\n            (list (car (cdr arr)) (car (cdr (cdr arr))))\n            (list (car (cdr arr)) (car (cdr (cdr (cdr arr))))))))))))\n",
    "  (let ((smallest (car (sort arr))))\n    (if (null? (cdr arr))\n      (list smallest (car arr))\n      (if (even? smallest)\n        (list (car arr) (car arr))\n        (list (car arr) (car arr)))))\n)",
    "  (let ((min_even_value (min (map (lambda (x) (+ x x)) arr))))\n    (if (null? arr)\n      []\n      (if (even? min_even_value)\n        (list min_even_value (car arr))\n        (list min_even_value (car arr)))))\n)\n",
    "  (let ((min (car arr))\n         (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min min_index)\n      (if (even? min)\n        (list min (car (cdr arr)))\n        (if (even? min_index)\n          (list min_index (car (cdr arr)))\n          (list min_index (car (cdr (cdr arr))))))))\n",
    "  (let ((smallest (car (sort arr (lambda (a b) (+ (even? a) (even? b))))))))\n    (if (null? arr)\n      []\n      (let ((smallest_index (car (sort arr (lambda (a b) (+ (even? a) (even? b))))))))\n        (if (null? arr)\n          []\n          (list (car smallest) smallest_index))))\n",
    "  (let ((min (car arr))\n         (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min min_index)\n      (if (even? min)\n        (list min min_index)\n        (if (null? (cdr (cdr arr)))\n          (list min min_index)\n          (if (even? min_index)\n            (list min min_index)\n            (list min min_index min_index))\n          (list min min_index min_index)))))\n",
    "  (let ((smallest (lambda (x) (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x 0) 0 (if (< x",
    "  (let ((min-index (lambda (a b) (if (< a b) a b))))\n    (let ((min-value (lambda (a b) (if (< a b) a b))))\n      (let ((plucked (lambda (arr)\n        (if (empty? arr)\n          []\n          (let ((index (min-index arr)))\n            (if (even? arr[index])\n              (list arr[index] index)\n              (list arr[index] (min-value arr[index] arr[index]))))))))\n      (plucked arr))))\n",
    "  (let ((smallest_value (car arr))\n         (smallest_index (car arr)))\n    (if (null? arr)\n      []\n      (if (even? smallest_value)\n        (if (null? smallest_index)\n          (list smallest_value (car arr))\n          (list smallest_value (car arr) (car smallest_index))\n        )\n        (car arr)\n      )\n    )\n  )\n)",
    "  (let ((min_value (car arr))\n         (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min_value min_index)\n      (if (even? min_value)\n        (list min_value (car (cdr arr)))\n        (if (even? (car (cdr arr)))\n          (list (car (cdr (cdr arr))) (car (cdr (cdr arr))))\n          (list (car (cdr (cdr (cdr arr)))) (car (cdr (cdr (cdr arr)))))))))))\n",
    "  (let ((result (list)))\n    (for-each (lambda (x)\n                (if (even? x)\n                    (result (append result (list x (car arr))))\n                    (if (null? result)\n                        (result (list x (car arr)))\n                        (result (append result (list x (car arr)))))))\n      (car arr)))\n  result)\n",
    "  (let ((result (list)))\n    (if (empty? arr)\n      (result)\n      (let ((smallest_value (car arr)))\n        (if (even? smallest_value)\n          (if (null? (cdr arr))\n            (list smallest_value 0)\n            (list smallest_value (car arr)))\n          (if (null? (cdr arr))\n            (list smallest_value 0)\n            (list smallest_value (car arr)))))))))",
    "  (let ((smallest_value (car arr)))\n    (let ((smallest_index (car arr)))\n      (if (even? smallest_value)\n        (if (even? (car arr))\n          (car arr)\n          (car (cdr arr)))\n        (car (cdr arr))))))\n",
    "  (let ((smallest (car (sort arr))))\n    (if (null? (cdr arr))\n      (list (car smallest) (car arr))\n      (if (even? (car smallest))\n        (list (car smallest) (car arr))\n        (pluck (cdr arr))))))\n",
    "  (let ((min (car arr))\n         (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min min_index)\n      (if (even? min)\n        (list min min_index)\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min)))))\n",
    "  (let ((smallest_value (car arr)))\n    (let ((smallest_index (car arr)))\n      (if (even? smallest_value)\n        (if (even? smallest_index)\n          (list smallest_value smallest_index)\n          (list smallest_value (car arr) (cdr arr)))\n        (if (even? smallest_index)\n          (list smallest_value (car arr) (cdr arr))\n          (list smallest_value (car arr) (cdr arr)))))\n    (cdr arr)))",
    "  (let ((min-index (lambda (arr)\n    (let ((min-value (lambda (arr)\n      (let ((min-index (lambda (arr)\n        (let ((min-value (lambda (arr)\n          (let ((min-index (lambda (arr)\n            (let ((min-value (lambda (arr)\n              (let ((min-index (lambda (arr)\n                (let ((min-value (lambda (arr)\n                  (let ((min-index (lambda (arr)\n                    (let ((min-value (lambda (arr)\n                      (let ((min-index (lambda (arr)\n                        (let ((min-value (lambda (arr)\n                          (let ((min-index (lambda (arr)\n                            (let ((min-value (lambda (arr)\n                              (let ((min-index (lambda (arr)\n                                (let ((min-value (lambda (arr)\n                                  (let ((min-index (lambda (arr)\n                                    (let ((min-value (lambda (arr)\n                                      (let ((min-index (lambda (arr)\n                                        (let ((min-value (lambda (arr)\n                                          (let ((min-index (lambda (arr)\n                                            (let ((min-value (lambda (arr)\n                                              (let ((min-index (lambda (arr)\n                                                (let ((min-value (lambda (arr)\n                                                  (let ((min-index (lambda (arr)\n                                                    (let ((min-value (lambda (arr)\n                                                      (let ((min-index (lambda (arr)\n                                                        (let ((min-value (lambda (arr)\n                                                          (let ((min-index (lambda (arr)\n                                                            (let ((min-value (lambda (arr)\n                                                                (let ((min-index (lambda (arr)\n                                                                  (let ((min-value (lambda (arr)\n                                                                     (let ((min-index (lambda (arr)\n                                                                       (let ((min-value (lambda (arr)",
    "  (let ((min-index (lambda (x y) (if (< x y) x y))))\n    (if (empty? arr)\n      []\n      (let ((min-value (lambda (x) (if (< x 0) 0 x))))\n        (let ((min-index-value (lambda (x y) (if (< x y) x y))))\n          (let ((min-index-value-arr (lambda (x y) (if (< x y) x y))))\n            (let ((min-index-value-arr-arr (lambda (x y) (if (< x y) x y))))\n              (let ((min-index-value-arr-arr-arr (lambda (x y) (if (< x y) x y))))\n                (let ((min-index-value-arr-arr-arr-arr (lambda (x y) (if (< x y) x y))))\n                  (let ((min-index-value-arr-arr-arr-arr-arr (lambda (x y) (if (< x y) x y))))\n                    (let ((min-index-value-arr-arr-arr-arr-arr-arr (lambda (x y) (if (< x y) x y))))\n                      (let ((min-index-value-arr-arr-arr-arr-arr-arr-arr (lambda (x y) (if (< x y) x y))))\n                        (let ((min-index-value-arr-arr-arr-arr-arr-arr-arr-arr (lambda (x y) (if (< x y) x y))))\n                          (min-index-value-arr-arr-arr-arr-arr-arr-arr-arr-arr
    "  (let ((smallest (car (sort arr))))\n    (if (null? (cdr arr))\n      (list smallest (car arr))\n      (if (even? smallest)\n        (list (car arr) (cdr arr))\n        (list (car arr) (cdr arr) (car (cdr arr)))))))\n",
    "  (let ((smallest (car arr))\n        (smallest_index (car arr)))\n    (if (null? arr)\n      []\n      (if (even? smallest)\n        (list smallest smallest_index)\n        (if (even? (car arr))\n          (list (car arr) (car arr))\n          (list (car arr) (car arr) (car arr)))))\n  ))",
    "  (let ((min-even (lambda (x y) (if (even? x) y x))))\n    (if (empty? arr)\n      []\n      (let ((min-index (lambda (x y) (if (even? y) x y))))\n        (let ((min-value (lambda (x y) (min-even (min-index x y))))\n              (min-index-value (lambda (x y) (min-value (min-index x y))))\n              (min-index-value-arr (lambda (x y) (min-value (min-index x y)))))\n          (min-index-value-arr arr)))))))",
    "  (let ((smallest (car (min (map (lambda (x) (mod x 2)) arr))))\n         (smallest_index (car (map (lambda (x) (mod x 2)) arr))))\n    (if (null? arr)\n      (list)\n      (if (null? smallest)\n        (list)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest_index)\n        (list smallest",
    "  (let ((min-index (lambda (a b) (if (< a b) a b))))\n    (let ((min-value (lambda (a b) (if (< a b) a b))))\n      (let ((index (lambda (a b) (if (< a b) a b))))\n        (let ((even (lambda (a b) (if (= a 0) 0 (if (= b 0) 0 (if (< a b) a b))))))\n          (let ((smallest (lambda (a b) (if (< a b) a b))))\n            (let ((smallest-index (lambda (a b) (if (< a b) a b))))\n              (let ((smallest-value (lambda (a b) (if (< a b) a b))))\n                (let ((smallest-index (lambda (a b) (if (< a b) a b))))\n                  (let ((smallest-value (lambda (a b) (if (< a b) a b))))\n                    (let ((smallest-index (lambda (a b) (if (< a b) a b))))\n                      (let ((smallest-value (lambda (a b) (if (< a b) a b))))\n                        (let ((smallest-index (lambda (a b) (if (< a b) a b))))\n                          (let ((smallest-value (lambda (a b) (if (< a b) a b))))\n                            (let ((smallest-index (lambda (a b) (if (< a b) a b))))\n                              (let ((smallest-value (lambda (a b) (if (< a b) a b))))\n                                (let ((smallest-index (lambda (a b) (if (< a b) a b))))\n                                  (let ((smallest-value (lambda (a b) (if (< a b) a b))))\n                                    (let ((smallest-index (lambda (a b) (if (< a b) a b))))\n                                      (let ((smallest-value (lambda (a b) (if (< a b) a b))))\n                                        (let ((smallest-index (lambda (a b) (if (< a b) a b))))\n                                          (let ((smallest-value (lambda (a b) (",
    "  (let ((min_value (car arr))\n         (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min_value min_index)\n      (if (even? min_value)\n        (list min_value (car (cdr arr)))\n        (if (even? (car (cdr arr)))\n          (list (car (cdr (cdr arr))) (car (cdr (cdr arr))))\n          (list (car (cdr (cdr (cdr arr)))) (car (cdr (cdr (cdr arr)))))))))))\n",
    "  (let ((min (car arr))\n         (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min min_index)\n      (if (even? min)\n        (list min min_index)\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min)))))\n",
    "  (let ((smallest (car (first arr))))\n    (let ((smallest_index (car (second arr))))\n      (if (even? smallest)\n        (if (even? smallest_index)\n          (list smallest smallest_index)\n          (list smallest (car (second arr))))\n        (list (car (first arr)) (car (second arr)))))))",
    "  (let ((min (car arr))\n        (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min min_index)\n      (if (even? min)\n        (list min min_index)\n        (if (even? min_index)\n          (list min min_index)\n          (list min min_index (car (cdr arr))))))))\n",
    "  (let ((result (list)))\n    (for-each (lambda (x)\n                (if (even? x)\n                  (append result (list (car x) (cdr x)))\n                  (append result (list (car x))))\n                (cdr arr))\n      (car arr)))\n  result)",
    "  (let ((result (list)))\n    (for-each (lambda (x)\n                (if (even? x)\n                    (append result (list x (index x)))\n                    (append result (list x (index x)))\n                )\n              )\n            arr)\n    (if (empty? result)\n      (list)\n      (first result)\n    )\n  )\n)\n",
    "  (let ((min_index (car (min (map (lambda (x) (car x)) arr))))\n         (min_value (car (min (map (lambda (x) (cdr x)) arr))))\n         (min_index_value (car (min (map (lambda (x) (cdr (cdr x))) arr))))\n         (min_index_value_index (car (min (map (lambda (x) (cdr (cdr (cdr x)))) arr))))\n         (min_index_value_index_index (car (min (map (lambda (x) (cdr (cdr (cdr (cdr x)))) arr))))))\n  (if (null? arr)\n    (list)\n    (list min_index min_value min_index_value min_index_value_index min_index_value_index_index)\n  )\n)",
    "  (let ((min (car arr))\n         (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min min_index)\n      (if (even? min)\n        (list min min_index)\n        (if (even? min_index)\n          (list min min_index)\n          (if (even? (car (cdr arr)))\n            (list min min_index)\n            (list min (car (cdr arr))))))))\n",
    "  (let ((min_value (car arr))\n         (min_index (car (cdr arr))))\n    (if (even? min_value)\n      (list min_value min_index)\n      (if (null? (cdr arr))\n        (list min_value)\n        (pluck (cdr arr))))))",
    "  (let ((min (car arr))\n         (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min min_index)\n      (if (even? min)\n        (list min min_index)\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min)))))\n",
    "  (let ((smallest (car (min (map (lambda (x) (car x)) arr))))\n         (smallest-index (car (map (lambda (x) (car x)) arr))))\n    (if (null? arr)\n      (list)\n      (if (even? smallest)\n        (list (car smallest) (car smallest-index))\n        (list (car smallest-index) (car smallest)))))\n)",
    "  (let ((min_value (car arr))\n         (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min_value min_index)\n      (if (even? min_value)\n        (list min_value (car (cdr arr)) (car (cdr (cdr arr))))\n        (if (even? min_value)\n          (list min_value (car (cdr arr)) (car (cdr (cdr arr))))\n          (list min_value (car (cdr (cdr arr))) (car (cdr (cdr (cdr arr))))))))))\n",
    "  (let ((min_index (car (min (map (lambda (x) (car x)) arr))))\n         (min_value (car (min (map (lambda (x) (cdr x)) arr))))\n         (min_index_value (car (min (map (lambda (x) (cdr (cdr x))) arr))))\n         (min_index_value_index (car (min (map (lambda (x) (cdr (cdr (cdr x)))) arr))))\n         (min_index_value_index_index (car (min (map (lambda (x) (cdr (cdr (cdr (cdr x)))) arr))))))\n  (if (null? arr)\n    (list)\n    (if (null? min_index_value_index_index)\n      (list min_index min_value)\n      (list min_index_value min_value_index min_index_value_index)\n      (list min_index_value_index min_value_index min_index_value_index_index)))))\n",
    "  (let ((smallest (lambda (x y) (if (< x y) x y))))\n    (if (null? arr)\n      []\n      (let ((smallest_value (car arr)))\n        (if (even? smallest_value)\n          (let ((smallest_index (car (cdr arr))))\n            (cons (smallest_value) (smallest_index)))\n          (cons (smallest_value) (car (cdr arr))))))))\n",
    "  (let ((min (car arr))\n         (min_index (car (cdr arr))))\n    (if (even? min)\n      (list min min_index)\n      (if (null? (cdr arr))\n        (list min)\n        (pluck (cdr arr))))))\n",
    "  (let ((min (car arr))\n        (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min min_index)\n      (if (even? min)\n        (list min min_index)\n        (if (null? (cdr (cdr arr)))\n          (list min min_index)\n          (if (even? min)\n            (list min min_index)\n            (if (null? (cdr (cdr (cdr arr))))\n              (list min min_index)\n              (if (even? min)\n                (list min min_index)\n                (list min min_index))))))))))\n",
    "  (let ((smallest (car (sort arr))))\n    (if (null? (cdr arr))\n      (list smallest (car arr))\n      (if (even? smallest)\n        (list (car arr) (car arr))\n        (list (car arr) (car arr)))))\n)\n",
    "  (let ((smallest (car (sort arr))))\n    (if (null? (cdr arr))\n      (list smallest (car arr))\n      (if (even? smallest)\n        (list (car arr) (car arr))\n        (if (null? (cdr arr))\n          (list smallest (car arr))\n          (if (even? (car (cdr arr)))\n            (list (car arr) (car (cdr arr)))\n            (list (car (cdr arr)) (car (cdr (cdr arr))))))))))\n",
    "  (let ((min-index (lambda (a b) (if (< a b) a b))))\n    (let ((min-value (lambda (a b) (if (< a b) a b))))\n      (let ((index (lambda (a b) (if (< a b) a b))))\n        (let ((value (lambda (a b) (if (< a b) a b))))\n          (if (null? arr)\n              []\n              (let ((index (index arr)))\n                (if (null? index)\n                    []\n                    (let ((value (value arr)))\n                      (if (null? value)\n                          []\n                          (let ((min-index (min-index value)))\n                            (if (null? min-index)\n                               []\n                               (let ((min-value (min-value value)))\n                                  (list min-value min-index)))))))))))))))))\n",
    "  (let ((min (car arr))\n        (min_index (car (cdr arr))))\n    (if (even? min)\n      (list min min_index)\n      (if (null? (cdr arr))\n        (list min)\n        (pluck (cdr arr))))))\n",
    "  (let ((min (car arr))\n        (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min min_index)\n      (if (even? min)\n        (list min min_index)\n        (if (even? min_index)\n          (list min min_index)\n          (if (even? (car (cdr (cdr arr))))\n            (list min min_index)\n            (list min (car (cdr (cdr arr))))))))))",
    "  (let ((min-index (lambda (a b) (if (< a b) a b))))\n    (let ((min-value (lambda (a b) (if (< a b) a b))))\n      (let ((plucked (lambda (arr)\n        (let ((index (lambda (a b) (min-index a b))))\n          (let ((value (lambda (a b) (min-value a b))))\n            (if (empty? arr)\n              []\n              (let ((plucked-value (lambda (arr)\n                (value (index arr))))\n                  (if (even? plucked-value)\n                    (list plucked-value (index arr))\n                    (list plucked-value (index arr)))))\n                (plucked arr))))))))\n      (plucked arr))))\n",
    "  (let ((min (car arr))\n         (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min min_index)\n      (if (even? min)\n        (list min min_index)\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min)))))\n",
    "  (let ((smallest (car (filter (lambda (x) (even? x.value))))))\n    (if (null? arr)\n      (list)\n      (if (null? smallest)\n        (list)\n        (list (car smallest) (car arr)))))\n)\n",
    "  (let ((smallest (lambda (x y) (if (< x y) x y))))\n    (if (empty? arr)\n      []\n      (let ((smallest_value (car arr)))\n        (if (even? smallest_value)\n          (let ((smallest_index (cdr arr)))\n            (cons (smallest_value) (smallest_index)))\n          (cons (smallest_value) (car arr)))\n        (pluck (cdr arr))))))\n",
    "  (let ((min_index (car (min (map (lambda (x) (car x)) arr))))\n         (min_value (car (min (map (lambda (x) (car x)) arr))))))\n    (if (null? arr)\n        (list)\n        (list min_value min_index))\n))",
    "  (let ((min_value (car arr)))\n    (let ((min_index (car arr)))\n      (let ((min_value (car arr)))\n        (let ((min_index (car arr)))\n          (if (even? min_value)\n            (if (even? min_value)\n              (if (even? min_value)\n                (list min_value min_index)\n                (list min_value min_index))\n              (list min_value min_index))\n            (list min_value min_index)))))\n    (cdr arr)))\n",
    "  (let ((smallest (car (min (map (lambda (x) (mod x 2)) arr))))\n         (smallest_index (car (assoc smallest arr))))\n    (if (null? smallest_index)\n      (list (car smallest) (cdr smallest_index))\n      (list (car smallest_index) (cdr smallest_index)))))",
    "  (let ((min-index (car (min (map (lambda (x) (car x)) arr))))\n        (min-value (car (min (map (lambda (x) (cdr x)) arr))))\n        (min-index-value (car (min (map (lambda (x) (cdr (cdr x))) arr))))\n        (min-index-value-arr (map (lambda (x) (cdr (cdr (cdr x)))) arr))))\n  (if (null? arr)\n    []\n    (cons min-index-value-arr (cons min-index min-value))))\n",
    "  (let ((result (list)))\n    (if (empty? arr)\n      (result)\n      (let ((smallest (car arr)))\n        (if (even? smallest)\n          (if (null? (cdr arr))\n            (list smallest 0)\n            (list smallest (car arr) (cdr arr)))\n          (if (null? (cdr arr))\n            (list smallest (car arr))\n            (list smallest (car arr) (cdr arr)))))))))",
    "  (let ((min-index (car (min (map (lambda (x) (if (even? x) (car x) (cdr x)))) arr))))\n    (if (null? arr)\n      (list 0)\n      (list (car arr) (min-index)))))\n",
    "  (let ((smallest (car (sort arr))))\n    (if (null? (cdr arr))\n      (list smallest (car arr))\n      (if (even? smallest)\n        (list (car arr) (car arr))\n        (if (null? (cdr arr))\n          (list (car arr))\n          (pluck (cdr arr))))))))\n",
    "  (let ((min_value (car arr))\n         (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min_value min_index)\n      (if (even? min_value)\n        (list min_value (car (cdr arr)) (car (cdr (cdr arr))))\n        (if (even? min_value)\n          (list min_value (car (cdr arr)) (car (cdr (cdr arr))))\n          (list min_value (car (cdr (cdr arr))) (car (cdr (cdr (cdr arr))))))))))\n",
    "  (let ((min (car arr))\n         (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min min_index)\n      (if (even? min)\n        (list min min_index)\n        (if (even? min_index)\n          (list min min_index)\n          (if (even? (car (cdr (cdr arr))))\n            (list min min_index)\n            (list min (car (cdr (cdr arr))))))))))\n",
    "  (let ((min-index (lambda (a b) (if (< a b) a b))))\n    (let ((min-value (lambda (a b) (if (< a b) a b))))\n      (let ((plucked (lambda (arr)\n        (if (empty? arr)\n          []\n          (let ((min-index (min-index arr)))\n            (if (even? min-index)\n              (list min-value min-index)\n              (list min-value (car min-index)))))\n        ))))\n      (plucked arr))))\n",
    "  (let ((min (car arr))\n        (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min min_index)\n      (if (even? min)\n        (list min min_index)\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min",
    "  (let ((min (car arr))\n        (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min min_index)\n      (if (even? min)\n        (list min min_index)\n        (if (null? (cdr arr))\n          (list min min_index)\n          (if (even? min)\n            (list min min_index)\n            (if (null? (cdr arr))\n              (list min min_index)\n              (list min min_index))))))))\n",
    "  (let ((min_value (car arr))\n         (min_index (car (cdr arr))))\n    (if (even? min_value)\n      (list min_value (car (cdr arr)))\n      (if (even? min_value)\n        (list min_value (car (cdr arr)))\n        (list min_value (car (cdr arr)))))))\n",
    "  (let ((smallest (car (filter (lambda (x) (odd? (x))))) (car arr)))\n    (if (null? arr)\n      (list (car smallest) (cdr smallest))\n      (if (even? (car smallest))\n        (list (car smallest) (cdr smallest))\n        (if (null? (cdr smallest))\n          (list (car smallest) (cdr smallest))\n          (if (even? (car (cdr smallest)))\n            (list (car (cdr smallest)) (cdr (cdr smallest)))\n            (list (car (cdr smallest)) (cdr (cdr smallest))))))))))",
    "  (let ((min_value (car arr)))\n    (let ((min_index (car arr)))\n      (if (null? (cdr arr))\n        (list min_value min_index)\n        (if (even? min_value)\n          (list min_value (car (cdr arr)))\n          (if (even? min_value)\n            (list min_value (car (cdr arr)))\n            (if (even? min_value)\n              (list min_value (car (cdr arr)))\n              (list min_value min_index))))))))\n",
    "  (let ((min (car arr))\n         (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min min_index)\n      (if (even? min)\n        (list min min_index)\n        (if (even? min_index)\n          (list min min_index)\n          (if (even? (car (cdr arr)))\n            (list min min_index)\n            (list min min_index)))))\n  arr))",
    "  (let ((smallest (car arr)))\n    (let ((smallest_index (car arr)))\n      (if (null? arr)\n        (list)\n        (if (even? smallest)\n          (list (car arr) (car arr))\n          (if (even? smallest_index)\n            (list (car arr) (car arr))\n            (list (car arr) (car arr)))))\n      (car arr)))\n)",
    "  (let ((min_value (car arr)))\n    (let ((min_index (car arr)))\n      (if (even? min_value)\n        (list min_value min_index)\n        (if (null? (cdr arr))\n          (list min_value)\n          (pluck (cdr arr))))))\n",
    "  (let ((min_index (car (min (map (lambda (x) (car x)) arr))))\n         (min_value (car (min (map (lambda (x) (car x)) arr))))\n         (min_index_value (car (min (map (lambda (x) (car x)) arr))))))\n    (if (null? arr)\n      (list)\n      (list min_value min_index_value))\n))",
    "  (let ((min (car arr))\n         (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min min_index)\n      (if (even? min)\n        (list min min_index)\n        (if (null? (cdr (cdr arr)))\n          (list min min_index)\n          (if (even? min)\n            (list min min_index)\n            (if (null? (cdr (cdr (cdr arr))))\n              (list min min_index)\n              (if (even? min)\n                (list min min_index)\n                (list min min_index))))))))))\n",
    "  (let ((smallest (car (sort arr (lambda (a b) (+ (a) (b))))) (cdr arr))))\n  (if (null? arr)\n    []\n    (cons (car smallest) (cdr smallest)))))",
    "  (let ((min (car arr))\n         (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min min_index)\n      (if (even? min)\n        (list min min_index)\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min min_index)\n          (list min_index min))\n        (if (even? min_index)\n          (list min",
    "  (let ((min-index (car (min (map (lambda (x) (if (even? x) x (car x))) arr))))\n        (min-value (car arr)))\n    (if (null? arr)\n      (list min-value min-index)\n      (if (even? min-value)\n        (list min-value min-index)\n        (if (even? (car arr))\n          (list min-value min-index)\n          (if (even? (car (cdr arr)))\n            (list min-value min-index)\n            (if (even? (car (cdr (cdr arr))))\n              (list min-value min-index)\n              (if (even? (car (cdr (cdr (cdr arr))))))\n                (list min-value min-index)\n                (if (even? (car (cdr (cdr (cdr (cdr arr))))))\n                  (list min-value min-index)\n                  (if (even? (car (cdr (cdr (cdr (cdr (cdr arr))))))))\n                    (list min-value min-index)\n                    (if (even? (car (cdr (cdr (cdr (cdr (cdr (cdr arr))))))))\n                      (list min-value min-index)\n                      (if (even? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr arr))))))))))\n                        (list min-value min-index)\n                        (if (even? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr arr))))))))))\n                          (list min-value min-index)\n                          (if (even? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr arr))))))))))))\n                            (list min-value min-index)\n                            (if (even? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr arr))))))))))))))\n                              (list min-value min-index)\n                              (if (",
    "  (let ((min-index (lambda (a b) (if (< a b) a b))))\n    (let ((min-value (lambda (a b) (if (< a b) a b))))\n      (if (empty? arr)\n          []\n          (let ((index (min-index arr)))\n            (if (even? (car arr))\n                (list (car arr) index)\n                (list (car arr) index)\n              )\n            )\n          )\n        )\n      )\n    )\n  )",
    "  (let ((smallest (car (min (map (lambda (x) (mod x 2)) arr))))))\n    (if (null? arr)\n      (list)\n      (list (car arr) (car (cdr arr))))))\n",
    "  (let ((min_value (car arr))\n         (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min_value min_index)\n      (if (even? min_value)\n        (list min_value min_index)\n        (if (even? (car (cdr (cdr arr))))\n          (list (car (cdr (cdr arr))) (car (cdr (cdr (cdr arr))))))\n        (if (even? (car (cdr (cdr (cdr arr))))))\n          (list (car (cdr (cdr (cdr (cdr arr))))))\n          (list (car (cdr (cdr (cdr (cdr (cdr arr)))))))))\n    ))\n)",
    "  (let ((min_index (car (min (map (lambda (x) (if (even? x) (car x) (cdr x)) arr))))))\n    (if (null? arr)\n      (list (car min_index) (cdr min_index))\n      (list (car min_index) (cdr min_index) (car arr)))))",
    "  (let ((result (list)))\n    (if (empty? arr)\n      (result)\n      (let ((min_value (car arr)))\n        (if (even? min_value)\n          (let ((min_index (car (cdr arr))))\n            (if (even? (car (cdr (cdr arr))))\n              (list min_value min_index)\n              (list min_value (car (cdr (cdr arr)))))))\n          (list min_value (car (cdr arr)))))))\n",
    "  (let ((smallest_value (car arr))\n         (smallest_index (car arr)))\n    (if (null? arr)\n      (list)\n      (if (even? smallest_value)\n        (list (car arr) (car arr))\n        (if (even? smallest_value)\n          (list (car arr) (car arr))\n          (if (even? smallest_value)\n            (list (car arr) (car arr))\n            (if (even? smallest_value)\n              (list (car arr) (car arr))\n              (list (car arr) (car arr)))))\n        (list (car arr) (car arr)))))\n",
    "  (let ((min (car arr))\n         (min-index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min min-index)\n      (if (even? min)\n        (list min min-index)\n        (if (null? (cdr (cdr arr)))\n          (list min min-index)\n          (if (even? min)\n            (list min min-index)\n            (if (null? (cdr (cdr (cdr arr))))\n              (list min min-index)\n              (if (even? min)\n                (list min min-index)\n                (list min min-index))))))))))",
    "  (let ((min_index (car (find-min (map (lambda (x) (modulo x 2)) arr))))))\n  (if (null? arr)\n    (list)\n    (list (car arr) min_index)))",
    "  (let ((smallest (car (sort arr))))\n    (if (null? (cdr arr))\n      (list smallest 0)\n      (if (even? smallest)\n        (list smallest (car arr))\n        (pluck (cdr arr))))))",
    "  (let ((smallest (car (sort arr))))\n    (if (null? (cdr arr))\n      (list smallest (car arr))\n      (if (even? smallest)\n        (list (car arr) (car arr))\n        (if (null? (cdr arr))\n          (list smallest (car arr))\n          (if (even? (car (cdr arr)))\n            (list (car (cdr arr)) (car (cdr arr)))\n            (list (car (cdr arr)) (car (cdr arr)))))\n        (list (car (cdr arr)) (car (cdr arr)))))\n    (list (car arr) (car arr))))\n",
    "  (let ((min (car arr))\n         (min_index (car (cdr arr))))\n    (if (even? min)\n      (if (even? min_index)\n        (list min min_index)\n        (list min min_index (car arr)))\n      (if (even? min_index)\n        (list min min_index)\n        (list min min_index (car arr)))\n      (list min min_index (car arr))))\n",
    "  (let ((min-index (car (sort arr (lambda (a b) (< b a))))))\n    (if (null? arr)\n      []\n      (cons min-index (car arr)))))\n",
    "  (let ((min (car arr)))\n    (if (null? arr)\n      []\n      (if (even? min)\n        (list min (car arr))\n        (if (even? (car arr))\n          (list (car arr) (car arr))\n          (pluck (cdr arr)))))))\n",
    "  (let ((min-index (lambda (a b) (if (< a b) a b))))\n    (if (empty? arr)\n      []\n      (let ((min-value (lambda (a b) (if (< a b) a b))))\n        (let ((min-index-value (lambda (a b) (if (< a b) a b))))\n          (let ((index (min-index-value arr)))\n            (if (even? arr[index])\n              (list arr[index] index)\n              (list arr[min-index arr] min-index))))))))\n",
    "  (let ((min-index (car (min (map (lambda (x) (if (even? x) (car x) (cdr x)))) arr))))\n    (if (null? arr)\n      (list 0)\n      (list (car arr) (min-index)))))\n",
    "  (let ((min-index (lambda (a b) (if (< a b) a b))))\n    (let ((min-value (lambda (a b) (if (< a b) a b))))\n      (let ((min-index-value (lambda (a b) (if (< a b) a b))))\n        (let ((min-index-value-arr (lambda (a b) (if (< a b) a b))))\n          (let ((min-index-value-arr-arr (lambda (a b) (if (< a b) a b))))\n            (let ((min-index-value-arr-arr-arr (lambda (a b) (if (< a b) a b))))\n              (let ((min-index-value-arr-arr-arr-arr (lambda (a b) (if (< a b) a b))))\n                (let ((min-index-value-arr-arr-arr-arr-arr (lambda (a b) (if (< a b) a b))))\n                  (let ((min-index-value-arr-arr-arr-arr-arr-arr (lambda (a b) (if (< a b) a b))))\n                    (let ((min-index-value-arr-arr-arr-arr-arr-arr-arr (lambda (a b) (if (< a b) a b))))\n                      (let ((min-index-value-arr-arr-arr-arr-arr-arr-arr-arr (lambda (a b) (if (< a b) a b))))\n                        (let ((min-index-value-arr-arr-arr-arr-arr-arr-arr-arr-arr (lambda (a b) (if (< a b) a b))))\n                          (let ((min-index-value-arr-arr-arr-arr-arr-arr-arr-arr-arr-arr (lambda (a b) (if (< a b) a b))))\n                            (let ((min-index-value-arr-arr-arr-arr-arr-arr-arr-arr-arr-arr-arr (lambda (a b) (if (< a b) a b))))\n                              (let ((min-index-value-arr-arr-arr-arr-arr-arr-arr-arr-arr-arr-arr-arr (",
    "  (let ((min (car arr)))\n    (if (null? arr)\n      []\n      (if (even? min)\n        (car arr)\n        (if (null? (cdr arr))\n          (car arr)\n          (if (even? (car (cdr arr)))\n            (car (cdr arr))\n            (car (cdr (cdr arr))))))))))\n",
    "  (let ((min (car arr))\n         (min_index (car (cdr arr))))\n    (if (even? min)\n      (if (null? (cdr arr))\n        (list min min_index)\n        (list min min_index (car (cdr arr))))\n      (if (null? (cdr arr))\n        (list min min_index)\n        (list min min_index (car (cdr arr)))))))\n",
    "  (let ((min-index (lambda (a b) (if (< a b) a b))))\n    (let ((min-value (lambda (a b) (if (< a b) a b))))\n      (let ((index (lambda (a b) (if (< a b) a b))))\n        (let ((smallest-value (lambda (a b) (if (< a b) a b))))\n          (let ((smallest-index (lambda (a b) (if (< a b) a b))))\n            (let ((smallest-value-index (lambda (a b) (if (< a b) a b))))\n              (let ((smallest-index-value (lambda (a b) (if (< a b) a b))))\n                (let ((smallest-value-index-value (lambda (a b) (if (< a b) a b))))\n                  (let ((smallest-index-value-value (lambda (a b) (if (< a b) a b))))\n                    (let ((smallest-value-index-value-value (lambda (a b) (if (< a b) a b))))\n                      (let ((smallest-index-value-value-value (lambda (a b) (if (< a b) a b))))\n                        (let ((smallest-value-index-value-value-value (lambda (a b) (if (< a b) a b))))\n                          (let ((smallest-index-value-value-value-value (lambda (a b) (if (< a b) a b))))\n                            (let ((smallest-value-index-value-value-value-value (lambda (a b) (if (< a b) a b))))\n                              (let ((smallest-index-value-value-value-value-value (lambda (a b) (if (< a b) a b))))\n                                (let ((smallest-value-index-value-value-value-value-value (lambda (a b) (if (< a b) a b))))\n                                  (let ((smallest-index-value-value-value-value-value-value (lambda (a b) (if (< a b) a b))))\n                                    (let ((smallest-value-index-value-value-value-value-value-",
    "  (let ((min-index (lambda (a b) (if (< a b) a b))))\n    (let ((min-value (lambda (a b) (if (< a b) a b))))\n      (let ((index (lambda (a b) (if (< a b) a b))))\n        (let ((value (lambda (a b) (if (< a b) a b))))\n          (if (empty? arr)\n            []\n            (let ((index (index arr)))\n              (if (even? (min-value arr))\n                (list (min-value arr) (min-index arr))\n                (list (min-value arr) (index arr)))))\n        )\n      )\n    )\n  )\n)",
    "  (let ((min_even_value (min (map (lambda (x) (+ x (modulo x 2))) arr))))\n    (if (null? arr)\n      (list min_even_value 0)\n      (if (even? min_even_value)\n        (list min_even_value (index-of min_even_value arr))\n        (list min_even_value (index-of (min (map (lambda (x) (+ x (modulo x 2))) arr))))))))\n",
    "  (let ((min_value (car arr)))\n    (let ((min_index (car arr)))\n      (if (null? (cdr arr))\n        (list min_value min_index)\n        (if (even? min_value)\n          (list min_value (car arr))\n          (let ((min_index (car arr)))\n            (if (even? min_value)\n              (list min_value min_index)\n              (list min_value (car arr)))))\n      ))\n    ))",
    "  (let ((smallest (car (sort arr (lambda (a b) (+ (a) (b))))) (cdr arr))))\n  (if (null? arr)\n    []\n    (if (even? (car smallest))\n      (list (car smallest) (car arr))\n      (pluck (cdr smallest) arr))))\n",
    "  (let ((result (list)))\n    (if (empty? arr)\n      (result)\n      (let ((smallest_value (car arr)))\n        (if (even? smallest_value)\n          (if (null? (cdr arr))\n            (result (list smallest_value (car arr)))\n            (result (list smallest_value (car arr) (car arr)))\n          )\n          (result (list smallest_value (car arr) (car arr)))\n        )\n      )\n    )\n  )\n)\n",
    "  (let ((min-index (lambda (x y) (if (< x y) x y))))\n    (if (null? arr)\n      []\n      (let ((min-value (lambda (x) (if (< x 0) 0 x))))\n        (if (even? (min-value arr))\n          (list (min-value arr) (min-index arr))\n          (list (min-value arr) (min-index arr)))))\n  )\n)",
    "  (let ((min-index (lambda (a b) (if (< a b) a b))))\n    (let ((min-value (lambda (a b) (if (< a b) a b))))\n      (let ((index (lambda (a b) (if (< a b) a b))))\n        (let ((value (lambda (a b) (if (< a b) a b))))\n          (let ((i 0))\n            (if (empty? arr)\n                (list)\n                (let ((min-index (min-index arr)))\n                  (let ((min-value (min-value arr)))\n                    (let ((index (index arr)))\n                      (let ((value (value arr)))\n                        (if (even? min-value)\n                            (list min-value min-index)\n                            (list min-value index)\n                            (list min-value i))))))))\n        ))))))))\n",
    "  (let ((min (car arr))\n         (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min min_index)\n      (if (even? min)\n        (list min min_index)\n        (if (null? (cdr (cdr arr)))\n          (list min min_index)\n          (if (even? min)\n            (list min min_index)\n            (if (null? (cdr (cdr (cdr arr))))\n              (list min min_index)\n              (if (even? min)\n                (list min min_index)\n                (if (null? (cdr (cdr (cdr (cdr arr))))))\n                (list min min_index)\n                (if (even? min)\n                  (list min min_index)\n                  (if (null? (cdr (cdr (cdr (cdr (cdr arr))))))))))))))))))\n",
    "  (let ((min_value (car arr))\n         (min_index (car (cdr arr))))\n    (if (null? (cdr arr))\n      (list min_value min_index)\n      (if (even? min_value)\n        (list min_value (car (cdr arr)) (car (cdr (cdr arr))))\n        (if (even? (car (cdr (cdr arr))))\n          (list (car (cdr (cdr arr))) (car (cdr (cdr (cdr arr))))))\n        (pluck (cdr arr))))))\n",
    "  (let ((min_value (car arr))\n        (min_index (car (cdr arr))))\n    (if (eq min_value 0)\n      (let ((index (car (cdr (cdr arr))))\n            (if (eq index 0)\n              (list min_value index)\n              (list min_value index)))\n        (car (cdr (cdr (cdr arr)))))))\n  arr))",
    "  (let ((smallest (car (min (map (lambda (x) (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x) x (if (even? x)",
    "  (let ((min-index (lambda (a b) (if (< a b) a b))))\n    (let ((min-value (lambda (a b) (if (< a b) a b))))\n      (let ((plucked (lambda (arr)\n        (let ((index (lambda (a b) (min-index a b))))\n          (let ((value (lambda (a b) (min-value a b))))\n            (if (even? a)\n              (if (even? b)\n                (list (value a) (index a))\n                (list (value b) (index b)))\n              (if (even? b)\n                (list (value a) (index a))\n                (list (value b) (index b))))))))\n      (plucked arr))))))"
  ],
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ]
}