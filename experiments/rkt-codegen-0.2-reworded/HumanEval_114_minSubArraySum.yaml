name: HumanEval_114_minSubArraySum
language: rkt
prompt: "#lang racket\n\n;; Given a list of integers nums, find the minimum sum of\
  \ any non-empty sub-list\n;; of nums.\n;; Example\n;; >>> (minSubArraySum (list\
  \ 2 3 4 1 2 4))\n;; 1\n;; >>> (minSubArraySum (list -1 -2 -3))\n;; -6\n(define (minSubArraySum\
  \ nums)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minSubArraySum))\n\
  \    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)\n    (check-equal? (candidate\
  \ (list -1 -2 -3)) -6)\n    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)\n\
  \    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)\n   \
  \ (check-equal? (candidate (list 0 10 20 1000000)) 0)\n    (check-equal? (candidate\
  \ (list -1 -2 -3 10 -5)) -6)\n    (check-equal? (candidate (list 100 -1 -2 -3 10\
  \ -5)) -6)\n    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)\n    (check-equal?\
  \ (candidate (list 100 -33 32 -1 0 -2)) -33)\n    (check-equal? (candidate (list\
  \ -10)) -10)\n    (check-equal? (candidate (list 7)) 7)\n    (check-equal? (candidate\
  \ (list 1 -1)) -1)\n))\n\n(test-humaneval)"
completions: ["  (if (null? nums)\n    0\n    (let ((sum (make-list 0))\n        \
    \  (min (make-list 0)))\n      (for-each\n        (lambda (n)\n          (if (null?\
    \ (cdr n))\n            (set! sum (car n) + (car n))\n            (if (null? (cdr\
    \ n))\n              (set! min (car n) (if (< (car n) min) min (car n)))\n   \
    \           (set! min (car n) (if (< (car n) min) min (car n))))))\n        nums)\n\
    \      (+ min sum)))\n", "  (if (null? nums)\n    0\n    (let ((sum (make-vector\
    \ 1 (length nums))))\n      (for-each\n        (lambda (i)\n          (set! sum\
    \ (vector-set! sum i (vector-ref nums i))))\n        nums)\n      (vector-ref\
    \ sum 0))))\n", "  (let ((sum (make-list 0)))\n    (for-each (lambda (n)\n   \
    \             (if (null? (cdr n))\n                  (set-car! sum (car n))\n\
    \                  (set-car! sum (if (null? sum) (car n) (cdr n))))\n        \
    \        nums))\n    (if (null? sum) 0)\n    (car sum)))\n", "  (let ((sum (make-vector\
    \ 0 (length nums))))\n    (for-each\n      (lambda (i)\n        (set! sum (vector-set!\
    \ sum i (vector-ref nums i))))\n      nums)\n    (vector-ref sum 0)))\n\n;; Given\
    \ a list of integers nums, find the minimum sum of any non-empty sub-list\n;;\
    \ of nums.\n;; Example\n;; >>> (minSubArraySum (list 2 3 4 1 2 4))\n;; 1\n;; >>>\
    \ (minSubArraySum (list -1 -2 -3))\n;; -6", "  (let ((sum (make-list 0)))\n  \
    \  (if (null? nums)\n      sum\n    (else\n      (let ((min (car nums)))\n   \
    \     (if (null? (cdr nums))\n          (minSum (sum (cdr nums)) (min (car nums)))\n\
    \          (minSum (sum (cdr nums)) (minSum (sum (cdr nums)) (min (car nums))))))))))\n",
  "  (let ((sum (make-vector 0 nums-length))))\n  (for ([i (in-range 0 nums-length)])\n\
    \    (set! sum (vector-set! sum i (- (vector-ref nums i))))\n    (if (<= sum 0)\n\
    \      sum\n      (min (vector-ref nums i) sum)\n      )))\n", "  (let ((sum (make-list\
    \ 0)))\n    (for-each (lambda (n)\n                (if (null? (cdr n))\n     \
    \               (setf sum (car n) (car sum) (car n))\n                    (setf\
    \ sum (car n) (car sum) (cdr n))))\n      nums))\n)\n", "  (if (null? nums)\n\
    \    0\n    (let ((sum (make-vector 1 (length nums))))\n      (for-each (lambda\
    \ (n) (set! sum (vector-set! sum n))) nums)\n      (vector-ref sum 0))))\n", " \
    \ (let ((sum (make-vector 0 (length nums))))\n    (for-each\n      (lambda (n)\n\
    \        (set! sum (vector-set! sum n (vector-ref sum (- (vector-length sum) 1))))\n\
    \      )\n      nums)\n    (vector-ref sum 0)))\n", "  (if (null? nums)\n    0\n\
    \    (let ((sum (make-list 0))\n          (min (make-list 0)))\n      (for-each\
    \ (lambda (n)\n                  (if (null? (cdr n))\n                    (set!\
    \ sum (car n) (if (< sum 0) sum (- sum (car n))))\n                    (set! min\
    \ (if (< min 0) min (- min (car n))) (car n))))\n           nums)))\n)\n\n;; Given\
    \ a list of integers nums, find the minimum sum of any non-empty sub-list\n;;\
    \ of nums.\n;; Example\n;; >>> (minSubArraySum (list 2 3 4 1 2 4))\n;; 1\n;; >>>\
    \ (minSubArraySum (list -1 -2 -3))\n;; -6", "  (let ((sum (make-vector 0 (length\
    \ nums))))\n    (for-each\n      (lambda (i)\n        (set! sum (vector-set! sum\
    \ i (vector-ref nums i))))\n      nums)\n    (vector-ref sum 0)))\n\n;; Given\
    \ a list of integers nums, find the minimum sum of any non-empty sub-list\n;;\
    \ of nums.\n;; Example\n;; >>> (minSubArraySum (list 2 3 4 1 2 4))\n;; 1\n;; >>>\
    \ (minSubArraySum (list -1 -2 -3))\n;; -6", "  (if (null? nums)\n    0\n    (let\
    \ ((sum (make-vector 1 (length nums))))\n      (for-each\n        (lambda (n)\n\
    \          (set! sum (vector-set! sum n (vector-ref sum (- n 1))))\n        )\n\
    \        nums\n      )\n      (vector-ref sum 0))))\n", "  (if (null? nums)\n\
    \    0\n    (let ((sum (make-vector 1 (length nums))))\n      (for-each\n    \
    \    (lambda (i)\n          (set! sum (vector-set! sum i (vector-ref nums i))))\n\
    \        nums))\n    (vector-ref sum 0)))\n", "  (define (min-sub-array-sum nums)\n\
    \    (if (null? nums)\n      0\n      (if (null? (cdr nums))\n        (car nums)\n\
    \        (car nums) + (min-sub-array-sum (cdr nums))))))\n", "  (let ((sum (make-vector\
    \ 0 nums-length))))\n  (for-each\n    (lambda (i)\n      (if (>= i 0)\n      \
    \  (set-vector-set! sum i (- nums i)))\n      (if (<= i nums-length)\n       \
    \ (set-vector-set! sum i (- nums i)))\n      (if (<= i 0)\n        (set-vector-set!\
    \ sum i 0)))\n    nums)\n  (vector-ref sum 0)))\n\n;; Given a list of integers\
    \ nums, find the minimum sum of any non-empty sub-list\n;; of nums.\n;; Example\n\
    ;; >>> (minSubArraySum (list 2 3 4 1 2 4))\n;; 1\n;; >>> (minSubArraySum (list\
    \ -1 -2 -3))\n;; -6", "  (define (min-sub-array-sum sub-array)\n    (if (null?\
    \ sub-array)\n      (car sub-array)\n      (min-sub-array-sum (cdr sub-array))))\n\
    \  (min-sub-array-sum nums)))\n\n;; Given a list of integers nums, find the minimum\
    \ sum of any non-empty sub-list\n;; of nums.\n;; Example\n;; >>> (minSubArraySum\
    \ (list 2 3 4 1 2 4))\n;; 1\n;; >>> (minSubArraySum (list -1 -2 -3))\n;; -6",
  "  (if (null? nums)\n    0\n    (let ((sum (make-vector 1 (length nums))))\n   \
    \   (for-each\n        (lambda (n)\n          (set! sum (vector-set! sum n (vector-ref\
    \ sum 0))\n            (vector-set! sum 0 (vector-ref sum 0))))\n        nums)\n\
    \      (vector-ref sum 0))))\n", "  (let ((sum (make-list 0)))\n    (for-each\
    \ (lambda (n)\n                (if (not (null? n))\n                  (set-car!\
    \ sum (+ n (car n)))\n                  (set-cdr! sum (+ n (cdr n))))\n      \
    \          nums)\n              (set-cdr! sum (car n))))\n  (car sum)))\n\n;;\
    \ Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    ;; of nums.\n;; Example\n;; >>> (minSubArraySum (list 2 3 4 1 2 4))\n;; 1\n;;\
    \ >>> (minSubArraySum (list -1 -2 -3))\n;; -6", "  (define (min-sub-array-sum\
    \ nums)\n    (cond\n      ((null? nums) 0)\n      ((<= nums (car nums)) (min-sub-array-sum\
    \ (cdr nums)))\n      (else (min-sub-array-sum (cdr nums)))))\n  (min-sub-array-sum\
    \ nums))\n\n;; Given a list of integers nums, find the minimum sum of any non-empty\
    \ sub-list\n;; of nums.\n;; Example\n;; >>> (minSubArraySum (list 2 3 4 1 2 4))\n\
    ;; 1\n;; >>> (minSubArraySum (list -1 -2 -3))\n;; -6", "  (let ((sum (make-list\
    \ 0)))\n    (for-each (lambda (n) (set! sum (+ n sum))) nums)\n      (if (<= sum\
    \ 0) sum\n        (begin (set! sum (- sum nums))\n          (minSubArraySum (-\
    \ nums sum)))))\n)\n", "  (if (null? nums)\n    0\n    (let ((sum (car nums))\n\
    \          (nums (cdr nums)))\n      (if (null? nums)\n        sum\n        (min\
    \ (sum (map (lambda (x) (+ x sum))) nums)))))\n", "  (if (null? nums)\n    0\n\
    \    (let ((sum (make-vector 1 (length nums))))\n      (for-each\n        (lambda\
    \ (n)\n          (set! sum (vector-set! sum n (vector-ref sum 0)))\n        )\n\
    \        nums\n      )\n      (vector-ref sum 0))))\n", "  (let ((sum (make-vector\
    \ 0 (length nums))))\n    (for-each\n      (lambda (i)\n        (set! sum (vector-set!\
    \ sum i (vector-ref nums i))))\n      nums)\n    (vector-ref sum 0)))\n\n;; Given\
    \ a list of integers nums, find the minimum sum of any non-empty sub-list\n;;\
    \ of nums.\n;; Example\n;; >>> (minSubArraySum (list 2 3 4 1 2 4))\n;; 1\n;; >>>\
    \ (minSubArraySum (list -1 -2 -3))\n;; -6", "  (if (null? nums)\n    0\n    (let\
    \ ((sum (car nums))\n          (nums (cdr nums)))\n      (if (null? nums)\n  \
    \      sum\n        (min (sum (map (lambda (x) (+ x sum))) nums)))))\n", "  (if\
    \ (null? nums)\n    0\n    (let ((sum (make-vector 1 (length nums))))\n      (for-each\n\
    \        (lambda (i)\n          (set! sum (vector-ref sum (vector-ref nums i))))\n\
    \        nums)\n      (vector-ref sum))))\n", "  (if (null? nums)\n    0\n   \
    \ (let ((sum (make-list 0))\n          (min (make-list (car nums))))\n      (for-each\n\
    \        (lambda (n)\n          (if (null? (cdr n))\n            (set! sum (car\
    \ n))\n            (set! min (car n))\n            (if (eq? sum (car n))\n   \
    \           (set! sum (cdr n))\n              (set! min (cdr n))))\n        nums)\n\
    \      (+ min sum)))\n)\n\n;; Given a list of integers nums, find the minimum\
    \ sum of any non-empty sub-list\n;; of nums.\n;; Example\n;; >>> (minSubArraySum\
    \ (list 2 3 4 1 2 4))\n;; 1\n;; >>> (minSubArraySum (list -1 -2 -3))\n;; -6",
  "  (define (min-sub-array-sum acc)\n    (if (null? acc)\n      acc\n      (if (null?\
    \ nums)\n        acc\n        (min-sub-array-sum\n          (list (car nums) (car\
    \ acc) (cdr acc) (cdr nums)))))))\n", "  (let ((sum (make-list 0)))\n    (for-each\n\
    \      (lambda (n)\n        (if (null? (cdr n))\n            (set-car! sum (car\
    \ n))\n            (set-car! sum (if (negative? n) (- n) sum))\n            (set-cdr!\
    \ sum (if (negative? n) (- n) sum)))\n        nums)\n      sum))\n)\n", "  (if\
    \ (null? nums)\n    0\n    (let ((sum (make-list 0))\n          (min (make-list\
    \ 0)))\n      (for-each (lambda (n)\n                  (if (null? (cdr n))\n \
    \                   (set! sum (car n) (car n) (if (< sum 0) (set! min sum) sum))\n\
    \                    (set! sum (car n) (car n) (if (< sum (car n)) (set! min sum)\
    \ sum)))\n                nums)\n        (set! min sum)))\n  min)\n", "  (if (null?\
    \ nums)\n    0\n    (let ((sum (make-vector 1 (length nums))))\n      (for-each\n\
    \        (lambda (i)\n          (set! sum (vector-set! sum i (vector-ref nums\
    \ i))))\n        nums)\n      (vector-ref sum 0))))\n", "  (if (null? nums)\n\
    \    0\n    (let ((sum (make-vector 1 (length nums))))\n      (for-each\n    \
    \    (lambda (i)\n          (set! sum (vector-set! sum 0 (vector-ref nums i))))\n\
    \        nums)\n      (vector-ref sum))))\n", "  (if (null? nums)\n    0\n   \
    \ (let ((sum (make-vector 1 (length nums))))\n      (for-each (lambda (i) (set!\
    \ sum (vector-set! sum 0 (vector-ref nums i))))\n        num-list)))\n)\n\n;;\
    \ Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    ;; of nums.\n;; Example\n;; >>> (minSubArraySum (list 2 3 4 1 2 4))\n;; 1\n;;\
    \ >>> (minSubArraySum (list -1 -2 -3))\n;; -6", "  (if (null? nums)\n    0\n \
    \   (let ((sum (make-vector 1 (length nums))))\n      (for-each\n        (lambda\
    \ (i)\n          (set! sum (vector-set! sum 0 (vector-ref nums i))))\n       \
    \ nums))\n    (vector-ref sum 0)))\n", "  (if (null? nums)\n    0\n    (let ((sum\
    \ (make-vector 1 (length nums))))\n      (for-each\n        (lambda (i)\n    \
    \      (set! sum (vector-set! sum i (vector-ref nums i))))\n        nums)\n  \
    \    (vector-ref sum))))\n", "  (if (null? nums)\n    0\n    (let ((sum (make-vector\
    \ 1 (length nums))))\n      (for-each (lambda (i)\n                  (set! sum\
    \ (vector-set! sum 0 (vector-ref nums i))))\n        nums)))\n)\n", "  (if (null?\
    \ nums)\n    0\n    (let ((sum (car nums))\n          (nums (cdr nums)))\n   \
    \   (if (null? nums)\n        sum\n        (min (sum (car nums)) (minSubArraySum\
    \ (cdr nums)))))))\n", "  (if (null? nums)\n    0\n    (let ((sum (car nums))\n\
    \          (nums (cdr nums)))\n      (if (null? nums)\n        sum\n        (min\
    \ (sum (map (lambda (x) (+ sum x)) nums)))))\n  )\n)\n\n;; Given a list of integers\
    \ nums, find the minimum sum of any non-empty sub-list\n;; of nums.\n;; Example\n\
    ;; >>> (minSubArraySum (list 2 3 4 1 2 4))\n;; 1\n;; >>> (minSubArraySum (list\
    \ -1 -2 -3))\n;; -6", "  (define (min-sub-array-sum nums)\n    (if (null? nums)\n\
    \      0\n      (if (null? (cdr nums))\n        (car nums)\n        (min-sub-array-sum\
    \ (cdr nums)))))\n  (min-sub-array-sum nums))\n", "  (define (min-sub-array-sum\
    \ sub-array)\n    (if (null? sub-array)\n      (car sub-array)\n      (min-sub-array-sum\
    \ (cdr sub-array))))\n  (min-sub-array-sum nums)))\n\n;; Given a list of integers\
    \ nums, find the minimum sum of any non-empty sub-list\n;; of nums.\n;; Example\n\
    ;; >>> (minSubArraySum (list 2 3 4 1 2 4))\n;; 1\n;; >>> (minSubArraySum (list\
    \ -1 -2 -3))\n;; -6", "  (if (null? nums)\n    0\n    (let ((sum (make-list 0))\n\
    \          (min (make-list (car nums))))\n      (for-each (lambda (n)\n      \
    \            (if (null? (cdr n))\n                    (set! sum (car n) (if (<\
    \ (car n) min) min (car n)))\n                    (set! sum (car n) (if (< (car\
    \ n) sum) sum (car n)))\n                  )\n                 nums)\n       \
    \ (if (< sum min) min sum)))\n  )\n)\n", "  (if (null? nums)\n    0\n    (let\
    \ ((sum (make-vector 1 (length nums))))\n      (for-each\n        (lambda (i)\n\
    \          (set! sum (vector-set! sum 0 (vector-ref nums i))))\n        nums))\n\
    \    (vector-ref sum 0)))\n", "  (let ((sum (make-list 0)))\n    (for-each (lambda\
    \ (n)\n                (if (not (null? n))\n                    (set! sum (+ n\
    \ sum))\n                    ()))\n               nums)\n    sum))\n", "  (if\
    \ (null? nums)\n    0\n    (let ((sum (car nums))\n          (nums (cdr nums)))\n\
    \      (if (null? nums)\n        sum\n        (let ((sum (car nums))\n       \
    \       (nums (cdr nums)))\n          (if (null? nums)\n            sum\n    \
    \        (let ((sum (car nums))\n                  (nums (cdr nums)))\n      \
    \        (if (null? nums)\n                sum\n                (let ((sum (car\
    \ nums))\n                      (nums (cdr nums)))\n                  (if (null?\
    \ nums)\n                    sum\n                    (let ((sum (car nums))\n\
    \                          (nums (cdr nums)))\n                      (if (null?\
    \ nums)\n                        sum\n                        (let ((sum (car\
    \ nums))\n                              (nums (cdr nums)))\n                 \
    \         (if (null? nums)\n                            sum\n                \
    \            (let ((sum (car nums))\n                                  (nums (cdr\
    \ nums)))\n                              (if (null? nums)\n                  \
    \              sum\n                                (let ((sum (car nums))\n \
    \                                     (nums (cdr nums)))\n                   \
    \               (if (null? nums)\n                                    sum\n  \
    \                                  (let ((sum (car nums))\n                  \
    \                        (nums (cdr nums)))\n                                \
    \      (if (null? nums)\n                                        sum\n       \
    \                                 (let ((sum (car nums))\n                   \
    \                           (nums (cdr nums)))\n                             \
    \             (if (null? nums)\n                                            sum\n\
    \                                            (let ((sum (car nums))\n        \
    \                                          (nums (cdr nums)))\n              \
    \                                (if (null? nums)\n                          \
    \                      sum\n                                                (let\
    \ ((sum (car nums))\n                                                      (nums\
    \ (cdr nums)))\n                                                  (if (null? nums)\n\
    \                                                    sum\n                   \
    \                                 (let ((sum (car nums))\n                   \
    \                 ", "  (let ((sum (make-vector 0 (length nums))))\n    (for-each\
    \ (lambda (i) (set! sum (vector-set! sum i (vector-ref nums i))))\n      nums)\n\
    \    (vector-ref sum 0)))\n", "  (if (null? nums)\n    0\n    (let ((sum (make-list\
    \ 0))\n          (min (make-list (car nums))))\n      (for-each (lambda (n)\n\
    \                  (if (null? (cdr n))\n                    (setf sum (car n))\n\
    \                    (setf min (car n))\n                    (setf sum (cdr n)\
    \ (if (null? (cdr n))\n                                        (car min)\n   \
    \                                     (if (null? (cdr min))\n                \
    \                          (car sum)\n                                       \
    \   (if (null? (cdr sum))\n                                            (car n)\n\
    \                                            (if (null? (cdr n))\n           \
    \                                   (car min)\n                              \
    \                (if (null? (cdr min))\n                                     \
    \           (car sum)\n                                                (car n))))))))\n\
    \        (cdr nums))))\n", "  (let ((sum (make-list 0)))\n    (for-each (lambda\
    \ (n)\n                (if (null? (cdr n))\n                    (setf sum (car\
    \ n) (car sum) (cdr sum))\n                    (setf sum (car n) (car sum) (cdr\
    \ sum) (car n))))\n      nums))\n)\n", "  (if (null? nums)\n    0\n    (let ((min\
    \ 0)\n          (sum 0))\n      (for-each (lambda (n)\n                  (if (null?\
    \ (cdr n))\n                    (set! sum (+ sum (car n)))\n                 \
    \   (set! min (if (<= sum 0)\n                               (+ sum (car n))\n\
    \                               (+ min (car n))))))\n        nums)))\n)\n", " \
    \ (let ((sum (make-vector 0 (length nums))))\n    (for-each\n      (lambda (i)\n\
    \        (set! sum (vector-set! sum i (vector-ref nums i))))\n      nums)\n  \
    \  (vector-ref sum 0)))\n", "  (let ((sum (make-vector 0 (length nums))))\n  \
    \  (for-each\n      (lambda (n)\n        (set! sum (vector-set! sum n (vector-ref\
    \ sum (- (vector-length sum) 1))))\n      )\n      nums)\n    (vector-ref sum\
    \ 0)))\n", "  (if (null? nums)\n    0\n    (let ((sum (make-vector 1 (length nums))))\n\
    \      (for-each\n        (lambda (i)\n          (set! sum (vector-set! sum i\
    \ (vector-ref nums i))))\n        nums)\n      (vector-ref sum 0))))\n", "  (if\
    \ (null? nums)\n    0\n    (let ((sum (car nums))\n          (nums (cdr nums)))\n\
    \      (if (null? nums)\n        sum\n        (let ((min (car nums))\n       \
    \       (nums (cdr nums)))\n          (if (null? nums)\n            min\n    \
    \        (let ((min (car nums))\n                  (nums (cdr nums)))\n      \
    \        (if (null? nums)\n                min\n                (let ((min (car\
    \ nums))\n                      (nums (cdr nums)))\n                  (if (null?\
    \ nums)\n                    min\n                    (let ((min (car nums))\n\
    \                          (nums (cdr nums)))\n                      (if (null?\
    \ nums)\n                        min\n                        (let ((min (car\
    \ nums))\n                              (nums (cdr nums)))\n                 \
    \         (if (null? nums)\n                            min\n                \
    \            (let ((min (car nums))\n                                  (nums (cdr\
    \ nums)))\n                              (if (null? nums)\n                  \
    \              min\n                                (let ((min (car nums))\n \
    \                                     (nums (cdr nums)))\n                   \
    \               (if (null? nums)\n                                    min\n  \
    \                                  (let ((min (car nums))\n                  \
    \                        (nums (cdr nums)))\n                                \
    \      (if (null? nums)\n                                        min\n       \
    \                                 (let ((min (car nums))\n                   \
    \                           (nums (cdr nums)))\n                             \
    \             (if (null? nums)\n                                            min\n\
    \                                            (let ((min (car nums))\n        \
    \                                          (nums (cdr nums)))\n              \
    \                                (if (null? nums)\n                          \
    \                      min\n                                                (let\
    \ ((min (car nums))\n                                                      (nums\
    \ (cdr nums)))\n                                                  (if (null? nums)\n\
    \                                                    min\n                   \
    \                                 (let ((min (car nums))\n                   \
    \                 ", "  (if (null? nums)\n    0\n    (let ((sum (car nums))\n\
    \          (nums (cdr nums)))\n      (if (null? nums)\n        sum\n        (min\
    \ (sum (map (lambda (x) (+ x sum))) nums)))))\n", "  (if (null? nums)\n    0\n\
    \    (let ((sum (car nums))\n          (nums (cdr nums)))\n      (if (null? nums)\n\
    \        sum\n        (min (sum (map (lambda (x) (+ sum x)) nums)))))\n  )\n)\n",
  "  (define (min-sub-array-sum sub-array)\n    (if (null? sub-array)\n      (+ sub-array\
    \ 0)\n      (min-sub-array-sum (cdr sub-array)))))\n", "  (let ((sum (make-list\
    \ 0)))\n    (for-each (lambda (x) (set! sum (+ sum x))) nums)\n    (if (null?\
    \ nums)\n      sum\n      (min sum nums)))\n)\n\n;; Given a list of integers nums,\
    \ find the minimum sum of any non-empty sub-list\n;; of nums.\n;; Example\n;;\
    \ >>> (minSubArraySum (list 2 3 4 1 2 4))\n;; 1\n;; >>> (minSubArraySum (list\
    \ -1 -2 -3))\n;; -6", "  (let ((sum (make-vector 0 (length nums))))\n    (for-each\
    \ (lambda (i) (set! sum (vector-set! sum i (vector-ref nums i))))\n      nums)\n\
    \    (vector-ref sum 0)))\n\n;; Given a list of integers nums, find the minimum\
    \ sum of any non-empty sub-list\n;; of nums.\n;; Example\n;; >>> (minSubArraySum\
    \ (list 2 3 4 1 2 4))\n;; 1\n;; >>> (minSubArraySum (list -1 -2 -3))\n;; -6",
  "  (let ((sum (make-vector 0 nums-length))))\n  (for ((i 0 nums-length))\n    (set!\
    \ sum (vector-set! sum i (- (vector-ref nums i))))\n    (if (<= 0 sum)\n     \
    \ sum\n      (minSubArraySum (list (vector-ref nums i) nums-length - i))))\n \
    \ sum)\n\n;; Given a list of integers nums, find the minimum sum of any non-empty\
    \ sub-list\n;; of nums.\n;; Example\n;; >>> (minSubArraySum (list 2 3 4 1 2 4))\n\
    ;; 1\n;; >>> (minSubArraySum (list -1 -2 -3))\n;; -6", "  (if (null? nums)\n \
    \   0\n    (let ((sum (make-vector 1 (length nums))))\n      (for-each (lambda\
    \ (i) (set! sum (vector-set! sum i (vector-ref nums i))))\n        num-list)))\n\
    )\n\n;; Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    ;; of nums.\n;; Example\n;; >>> (minSubArraySum (list 2 3 4 1 2 4))\n;; 1\n;;\
    \ >>> (minSubArraySum (list -1 -2 -3))\n;; -6", "  (let ((sum (make-vector 0 nums-length))))\n\
    \  (for-each\n    (lambda (i)\n      (set! sum (vector-set! sum i (vector-ref\
    \ nums i))))\n    nums))\n", "  (let ((sum (make-vector 0 nums-length))))\n  (for-each\
    \ (lambda (i)\n              (if (>= i 0)\n                  (set! sum (vector-ref\
    \ sum (vector-ref nums i)))\n                  (set! sum (vector-ref sum (- (vector-ref\
    \ nums i) 1))))\n              (vector-ref nums i))\n    sum))\n", "  (define\
    \ (min-sub-array-sum lst)\n    (if (null? lst)\n      0\n      (if (null? (cdr\
    \ lst))\n        (car lst)\n        (min-sub-array-sum (cdr lst)))))\n  (min-sub-array-sum\
    \ nums)))\n\n;; Given a list of integers nums, find the minimum sum of any non-empty\
    \ sub-list\n;; of nums.\n;; Example\n;; >>> (minSubArraySum (list 2 3 4 1 2 4))\n\
    ;; 1\n;; >>> (minSubArraySum (list -1 -2 -3))\n;; -6", "  (if (null? nums)\n \
    \   0\n    (let ((sum (make-vector 1 (length nums))))\n      (for-each\n     \
    \   (lambda (i)\n          (set! sum (vector-set! sum i (vector-ref nums i))))\n\
    \        nums)\n      (vector-ref sum 0))))\n", "  (if (null? nums)\n    0\n \
    \   (let ((sum (make-vector 1 (length nums))))\n      (for-each\n        (lambda\
    \ (i)\n          (set! sum (vector-set! sum i (vector-ref nums i))))\n       \
    \ nums)\n      (vector-ref sum 0))))\n", "  (define (min-sub-array-sum a b)\n\
    \    (if (null? a)\n      (+ b (car a))\n      (min-sub-array-sum (cdr a) (+ b\
    \ (car a))))\n    (min-sub-array-sum (cdr a) b)))\n", "  (let ((result 0)\n  \
    \       (i 0))\n    (while (< i (length nums))\n      (if (<= nums i)\n      \
    \  (set! result (+ result (car nums i)))\n        (set! i (cdr i)))\n      (set!\
    \ i (cdr i))))\n  result)\n", "  (define (min-sub-array-sum nums)\n    (if (null?\
    \ nums)\n      0\n      (if (null? (cdr nums))\n        (car nums)\n        (min-sub-array-sum\
    \ (cdr nums)))))\n  (min-sub-array-sum nums))\n", "  (if (null? nums)\n    0\n\
    \    (let ((min (car nums))\n          (nums (cdr nums)))\n      (if (null? nums)\n\
    \        min\n        (min (minSubArraySum (nums)))))\n    (min (minSubArraySum\
    \ (nums))))\n", "  (define (min-sub-array-sum start end)\n    (if (empty? nums)\n\
    \      0\n      (if (<= start end)\n        (+ (min-sub-array-sum start (car nums))\n\
    \          (min-sub-array-sum (cdr nums) end))\n        (min-sub-array-sum start\
    \ end (car nums))))))\n", "  (define (min-sub-array-sum nums)\n    (if (null?\
    \ nums)\n      0\n      (if (null? (cdr nums))\n        (car nums)\n        (min-sub-array-sum\
    \ (cdr nums)))))\n  (min-sub-array-sum nums))\n\n;; Given a list of integers nums,\
    \ find the minimum sum of any non-empty sub-list\n;; of nums.\n;; Example\n;;\
    \ >>> (minSubArraySum (list 2 3 4 1 2 4))\n;; 1\n;; >>> (minSubArraySum (list\
    \ -1 -2 -3))\n;; -6", "  (if (null? nums)\n    0\n    (let ((sum (make-list 0))\n\
    \          (min (make-list 0))\n          (i 0))\n      (while (< i (length nums))\n\
    \        (let ((next (nth nums i)))\n          (if (< next 0)\n            (set!\
    \ sum (sub1 sum next))\n            (set! min (sub1 min next)))\n          (set!\
    \ i (add1 i)))\n        (set! sum (sub1 sum)))\n      (min sum))))\n", "  (define\
    \ (min-sub-array-sum nums)\n    (cond\n      [(empty? nums) 0]\n      [(<= nums\
    \ (car nums)) (min-sub-array-sum (cdr nums))]\n      [(> nums (car nums)) (min-sub-array-sum\
    \ (cdr nums))]\n      [else (min-sub-array-sum (cdr nums))]\n    )\n  )\n  (min-sub-array-sum\
    \ nums)\n)\n", "  (let ((sum (make-vector 0 nums-length))))\n  (for-each\n   \
    \ (lambda (i)\n      (set! sum (vector-set! sum i nums[i])))\n    nums)\n  (vector-min\
    \ sum)))\n", "  (let ((sum (make-vector 0 nums-length))))\n  (for-each (lambda\
    \ (i) (set! sum (vector-set! sum i))) nums)\n  (vector-ref sum 0))\n\n;; Given\
    \ a list of integers nums, find the minimum sum of any non-empty sub-list\n;;\
    \ of nums.\n;; Example\n;; >>> (minSubArraySum (list 2 3 4 1 2 4))\n;; 1\n;; >>>\
    \ (minSubArraySum (list -1 -2 -3))\n;; -6", "  (let ((sum (make-vector 0 (length\
    \ nums))))\n    (for-each (lambda (i) (set! sum (vector-set! sum i (vector-ref\
    \ nums i))))\n      nums)\n    (vector-ref sum 0)))\n", "  (if (null? nums)\n\
    \    0\n    (let ((sum (make-vector 1 (length nums))))\n      (for-each\n    \
    \    (lambda (i)\n          (set! sum (vector-set! sum i (vector-ref nums i))))\n\
    \        nums)\n      (vector-ref sum 0))))\n", "  (if (null? nums)\n    0\n \
    \   (let ((sum (make-vector 1 (length nums))))\n      (for-each\n        (lambda\
    \ (i)\n          (set! sum (vector-set! sum 0 (vector-ref nums i))))\n       \
    \ nums)\n      (vector-ref sum))))\n", "  (define (min-sub-array-sum acc nums)\n\
    \    (if (null? nums) acc\n      (if (negative? acc)\n        (min-sub-array-sum\
    \ (- acc) nums)\n        (min-sub-array-sum (cons acc nums))))\n    (min-sub-array-sum\
    \ 0 nums)))\n", "  (if (null? nums)\n    0\n    (let ((sum (make-list 0))\n  \
    \        (min (make-list 0))\n          (i 0))\n      (while (< i (length nums))\n\
    \        (let ((n (nth nums i)))\n          (if (< n 0)\n            (set! sum\
    \ (make-list (- n sum)))\n            (set! min (make-list (- n min))))\n    \
    \      (set! i (i + 1))\n        )\n      )\n      (+ min sum)))\n", "  (define\
    \ (min-sub-array-sum nums)\n    (if (null? nums)\n      0\n      (if (null? (cdr\
    \ nums))\n        (car nums)\n        (car (min-sub-array-sum (cdr nums)))))))\n",
  "  (define (min-sub-array-sum nums)\n    (if (null? nums)\n      0\n      (let ((sum\
    \ (car nums))\n            (nums (cdr nums)))\n        (if (null? nums)\n    \
    \      sum\n          (min-sub-array-sum (cdr nums))))))\n", "  (let ((sum (make-vector\
    \ 0 (length nums))))\n    (for-each (lambda (i) (set! sum (vector-set! sum i (vector-ref\
    \ nums i))))\n      nums)\n    (vector-ref sum 0)))\n", "  (if (null? nums)\n\
    \    0\n    (let ((sum (make-vector 1 (length nums))))\n      (for-each\n    \
    \    (lambda (n)\n          (setf sum (vector-ref sum (- (vector-ref nums n))))\n\
    \          n)\n        nums)\n      (vector-ref sum))))\n", "  (if (null? nums)\n\
    \    0\n    (let ((sum (make-vector 1 (length nums))))\n      (for-each\n    \
    \    (lambda (i)\n          (set! sum (vector-set! sum i (vector-ref nums i))))\n\
    \        nums)\n      (vector-ref sum 0))))\n", "  (if (null? nums)\n    0\n \
    \   (let ((sum (make-vector 1 (length nums))))\n      (for-each\n        (lambda\
    \ (i)\n          (set! sum (vector-set! sum 0 (vector-ref nums i))))\n       \
    \ nums)\n      (vector-ref sum))))\n", "  (define (min-sub-array-sum lst)\n  \
    \  (cond\n      ((null? lst) 0)\n      ((null? (cdr lst)) (car lst))\n      (else\n\
    \        (+ (min-sub-array-sum (cdr lst))\n            (min-sub-array-sum (car\
    \ lst))))))\n  (min-sub-array-sum nums)))\n", "  (let ((sum (make-list 0)))\n\
    \    (for-each (lambda (i)\n                (if (null? (cdr nums))\n         \
    \           (set! sum (car nums))\n                    (set! sum (+ (car nums)\
    \ (cdr nums))))\n                (car nums))\n              (if (null? (cdr nums))\n\
    \                  (set! sum (car nums))\n                  (set! sum (+ (car\
    \ nums) (cdr nums))))))\n    (car sum)))\n\n;; Given a list of integers nums,\
    \ find the minimum sum of any non-empty sub-list\n;; of nums.\n;; Example\n;;\
    \ >>> (minSubArraySum (list 2 3 4 1 2 4))\n;; 1\n;; >>> (minSubArraySum (list\
    \ -1 -2 -3))\n;; -6", "  (if (null? nums)\n    0\n    (let ((sum (make-list 0))\n\
    \          (min (make-list 0))\n          (i 0))\n      (while (< i (length nums))\n\
    \        (if (<= nums i)\n          (set! sum (+ nums i sum))\n          (set!\
    \ min (if (<= sum min) sum min))\n          (set! i (add1 i)))\n        (set!\
    \ i (add1 i))))))\n", "  (if (null? nums)\n    0\n    (let ((sum (make-vector\
    \ 1 (length nums))))\n      (for-each\n        (lambda (i)\n          (set! sum\
    \ (vector-set! sum i (vector-ref nums i))))\n        nums)\n      (vector-ref\
    \ sum 0))))\n", "  (if (null? nums)\n    0\n    (let ((sum (make-vector 1 (length\
    \ nums))))\n      (for-each\n        (lambda (i)\n          (set! sum (vector-set!\
    \ sum 0 (vector-ref nums i))))\n        nums)\n      (vector-ref sum))))\n", " \
    \ (if (null? nums)\n    0\n    (let ((min 0)\n          (sum 0))\n      (for-each\n\
    \        (lambda (n)\n          (if (null? (cdr n))\n            (set! sum (+\
    \ sum (car n)))\n            (set! min (if (<= sum 0)\n                      \
    \ (+ min (car n))\n                       (+ min (car n) (- sum (car n))))))\n\
    \        nums)\n      (+ min sum))))\n", "  (define (min-sub-array-sum acc nums)\n\
    \    (if (null? nums) acc\n      (if (negative? acc)\n        (min-sub-array-sum\
    \ (- acc) nums)\n        (min-sub-array-sum (acc (- nums 1)) nums))))\n  (min-sub-array-sum\
    \ 0 nums)))\n\n;; Given a list of integers nums, find the minimum sum of any non-empty\
    \ sub-list\n;; of nums.\n;; Example\n;; >>> (minSubArraySum (list 2 3 4 1 2 4))\n\
    ;; 1\n;; >>> (minSubArraySum (list -1 -2 -3))\n;; -6", "  (if (null? nums)\n \
    \   0\n    (let ((sum (make-vector 1 (length nums))))\n      (for-each\n     \
    \   (lambda (i)\n          (set! sum (vector-set! sum i (vector-ref nums i))))\n\
    \        nums))\n    (vector-ref sum 0)))\n", "  (if (null? nums)\n    0\n   \
    \ (let ((sum (make-list 0))\n          (min (make-list 0)))\n      (for-each (lambda\
    \ (n)\n                  (if (null? (cdr n))\n                    (set! sum (car\
    \ n) + (car n))\n                    (if (< (car n) (car min))\n             \
    \         (set! min (car n)))))\n        nums)))\n)\n", "  (define (min-sub-array-sum\
    \ l)\n    (cond\n      ((null? l) 0)\n      ((<= (car l) 0) 0)\n      ((<= (car\
    \ l) (car nums))\n        (+ (min-sub-array-sum (cdr l)) (car l) (car nums)))\n\
    \      (else\n        (+ (min-sub-array-sum (cdr l)) (car l) (car nums)))))\n\
    \  (min-sub-array-sum nums))\n\n;; Given a list of integers nums, find the minimum\
    \ sum of any non-empty sub-list\n;; of nums.\n;; Example\n;; >>> (minSubArraySum\
    \ (list 2 3 4 1 2 4))\n;; 1\n;; >>> (minSubArraySum (list -1 -2 -3))\n;; -6",
  "  (if (null? nums)\n    0\n    (let ((sum (make-vector 1 (length nums))))\n   \
    \   (for-each\n        (lambda (i)\n          (set! sum (vector-set! sum i (vector-ref\
    \ nums i))))\n        nums)\n      (vector-ref sum 0))))\n", "  (let ((sum (make-list\
    \ 0)))\n    (for-each (lambda (n)\n                (if (null? n)\n           \
    \         (return sum)\n                    (set! sum (+ n sum))\n           \
    \         )\n                )\n              nums\n              (if (null? sum)\n\
    \                  (return 0)\n                  (return sum)\n              \
    \    )\n              )\n    sum)\n)\n", "  (let ((sum (make-list 0))\n      \
    \  (min (make-list (car nums))))\n    (for-each (lambda (n)\n                (if\
    \ (null? (cdr n))\n                    (set! sum (car n))\n                  \
    \  (set! min (car n))\n                    (if (eq? (car n) min)\n           \
    \             (set! sum (cdr n)))))\n      nums))\n", "  (if (null? nums)\n  \
    \  0\n    (let ((sum (car nums))\n          (nums (cdr nums)))\n      (if (null?\
    \ nums)\n        sum\n        (min (sum (map (lambda (x) (+ x sum))) nums) sum))))\n",
  "  (let ((sum (make-vector 0 (length nums))))\n    (for-each\n      (lambda (i)\n\
    \        (set! sum (vector-set! sum i (vector-ref nums i))))\n      nums)\n  \
    \  (vector-ref sum 0)))\n", "  (define (min-sub-array-sum start end)\n    (if\
    \ (empty? nums)\n      0\n      (if (< start 0)\n        (+ start (min-sub-array-sum\
    \ (- start 1) end))\n        (+ (min-sub-array-sum start end)\n          (min-sub-array-sum\
    \ start (- end 1))))))\n  (min-sub-array-sum 0 nums)))\n", "  (if (null? nums)\n\
    \    0\n    (let ((min 0)\n          (sum 0))\n      (for-each (lambda (n)\n \
    \                 (if (null? (cdr n))\n                    (set! sum (+ sum (car\
    \ n)))\n                    (set! min (if (< min (car n)) min (car n)))\n    \
    \              )\n                 nums)\n        (set! min (if (< min sum) min\
    \ sum)))\n      min)))\n", "  (if (null? nums)\n    0\n    (let ((sum (car nums))\n\
    \          (nums (cdr nums)))\n      (if (null? nums)\n        sum\n        (min\
    \ (sum (map (lambda (x) (+ x sum))) nums)))))\n", "  (if (null? nums)\n    0\n\
    \    (let ((min 0)\n          (sum 0))\n      (for-each\n        (lambda (n)\n\
    \          (if (null? (cdr n))\n            (set! sum (+ sum (car n)))\n     \
    \       (set! min (if (<= sum 0) (car n) (min (car n) (minSubArraySum (cdr n)))))))\n\
    \        nums))\n    min))\n", "  (if (null? nums)\n    0\n    (let ((sum (make-vector\
    \ 1 (length nums))))\n      (for-each\n        (lambda (i)\n          (set! sum\
    \ (vector-set! sum 0 (vector-ref nums i))))\n        nums)\n      (vector-ref\
    \ sum))))\n", "  (define (min-sub-array-sum acc nums)\n    (if (null? nums) acc\n\
    \      (if (negative? acc) -1 * acc\n        (if (negative? nums) -1 * acc\n \
    \         (if (negative? acc) -1 * acc\n            (min-sub-array-sum (- acc\
    \ nums)\n              (list (car nums) (cdr nums))))))))\n  (min-sub-array-sum\
    \ 0 nums)))\n", "  (if (null? nums)\n    0\n    (let ((sum (make-list 0)))\n \
    \     (for-each (lambda (n)\n                  (if (null? (cdr n))\n         \
    \           (set-car! sum (car n))\n                    (set-cdr! sum (cdr n))\n\
    \                    (set-car! sum (- (car n) (cdr n)))\n                  )\n\
    \                 nums)\n        (set-cdr! sum 0)))\n    (car sum)))\n", "  (let\
    \ ((sum (make-vector 0 (length nums))))\n    (for-each (lambda (i) (set! sum (vector-set!\
    \ sum i (vector-ref nums i))))\n      nums)\n    (vector-ref sum 0)))\n\n;; Given\
    \ a list of integers nums, find the minimum sum of any non-empty sub-list\n;;\
    \ of nums.\n;; Example\n;; >>> (minSubArraySum (list 2 3 4 1 2 4))\n;; 1\n;; >>>\
    \ (minSubArraySum (list -1 -2 -3))\n;; -6", "  (let ((sum (make-vector 0 nums-length))))\n\
    \  (for ((i 0 nums-length))\n    (if (>= i 0)\n      (set! sum (vector-ref sum\
    \ (vector-ref nums i)))\n      (set! sum (vector-set! sum (- (vector-ref nums\
    \ i) (vector-ref sum 0))))\n      (set! i (- i 1)))\n    sum))\n", "  (let ((sum\
    \ (make-list 0)))\n    (for-each (lambda (n) (set! sum (+ n sum))) nums)\n   \
    \   (if (<= sum 0) sum (min sum (cdr nums))))))\n", "  (if (null? nums)\n    0\n\
    \    (let ((sum (make-list 0))\n          (min (make-list 0)))\n      (for-each\
    \ (lambda (n)\n                  (if (null? (cdr n))\n                    (set!\
    \ sum (car n) (car n) (cdr n))\n                    (set! min (car n) (if (< (car\
    \ n) min) min (car n)))\n                    (set! sum (car n) (if (< (car n)\
    \ sum) sum (car n))))\n                 nums))\n      (if (null? min)\n      \
    \  0\n        (car min)))\n))\n\n;; Given a list of integers nums, find the minimum\
    \ sum of any non-empty sub-list\n;; of nums.\n;; Example\n;; >>> (minSubArraySum\
    \ (list 2 3 4 1 2 4))\n;; 1\n;; >>> (minSubArraySum (list -1 -2 -3))\n;; -6",
  "  (let ((sum (make-list 0)))\n    (for-each (lambda (n) (set! sum (+ n sum))) nums)\n\
    \      (if (null? sum) 0 (min sum)))\n  )\n)\n", "  (let ((sum (make-vector 0\
    \ (length nums))))\n    (for-each\n      (lambda (n)\n        (set! sum (vector-set!\
    \ sum n (vector-ref sum (- (vector-length sum) 1))))\n      )\n      nums)\n \
    \   (vector-ref sum 0)))\n", "  (let* ([sum (reduce (lambda (a b) (+ a b)) 0 nums)])\n\
    \    (if (null? nums)\n      sum\n      (if (<= sum 0)\n        sum\n        (minSubArraySum\
    \ (cdr nums) (+ sum (car nums)))))))\n", "  (let ((sum (make-vector 0 (length\
    \ nums))))\n    (for-each\n      (lambda (n)\n        (set! sum (vector-set! sum\
    \ n (vector-ref sum (- (vector-length sum) 1))))\n      )\n      nums\n      (if\
    \ (vector-length sum)\n        (vector-ref sum 0)\n        (+ sum (vector-ref\
    \ sum (- (vector-length sum) 1))))))\n)\n\n;; Given a list of integers nums, find\
    \ the minimum sum of any non-empty sub-list\n;; of nums.\n;; Example\n;; >>> (minSubArraySum\
    \ (list 2 3 4 1 2 4))\n;; 1\n;; >>> (minSubArraySum (list -1 -2 -3))\n;; -6",
  "  (define (min-sub-array-sum nums)\n    (if (null? nums)\n      0\n      (if (null?\
    \ (cdr nums))\n        (car nums)\n        (min-sub-array-sum (cdr nums)))))\n\
    \  (min-sub-array-sum nums))\n\n;; Given a list of integers nums, find the minimum\
    \ sum of any non-empty sub-list\n;; of nums.\n;; Example\n;; >>> (minSubArraySum\
    \ (list 2 3 4 1 2 4))\n;; 1\n;; >>> (minSubArraySum (list -1 -2 -3))\n;; -6",
  "  (define (min-sub-array-sum nums)\n    (if (null? nums)\n      0\n      (if (null?\
    \ (cdr nums))\n        (car nums)\n        (min-sub-array-sum (cdr nums)))))\n\
    \  (min-sub-array-sum nums))\n", "  (define (min-sub-array-sum nums)\n    (if\
    \ (null? nums)\n      0\n      (let ((sum (car nums))\n            (nums (cdr\
    \ nums)))\n        (min-sub-array-sum (cdr nums))\n        (if (null? nums)\n\
    \          sum\n          (sum (car nums))\n          (sum (car nums) (min-sub-array-sum\
    \ (cdr nums))))))))\n", "  (if (null? nums)\n    0\n    (let ((sum (make-vector\
    \ 1 (length nums))))\n      (for-each\n        (lambda (i)\n          (set! sum\
    \ (vector-set! sum 0 (vector-ref nums i))))\n        nums))\n    (vector-ref sum\
    \ 0)))\n", "  (if (null? nums)\n    0\n    (let ((sum (make-vector 1 (length nums))))\n\
    \      (for-each\n        (lambda (n)\n          (set! sum (vector-set! sum n\
    \ (vector-ref sum (- (vector-length sum) 1))))\n          nums)\n        sum)))\n\
    )\n", "  (if (null? nums)\n    0\n    (let ((sum (car nums))\n          (nums\
    \ (cdr nums)))\n      (if (null? nums)\n        sum\n        (min (sum (map (lambda\
    \ (x) (+ sum x)) nums)))))\n  )\n)\n\n;; Given a list of integers nums, find the\
    \ minimum sum of any non-empty sub-list\n;; of nums.\n;; Example\n;; >>> (minSubArraySum\
    \ (list 2 3 4 1 2 4))\n;; 1\n;; >>> (minSubArraySum (list -1 -2 -3))\n;; -6",
  "  (define (min-sub-array-sum sub-array)\n    (if (null? sub-array)\n      (car\
    \ sub-array)\n      (min-sub-array-sum (cdr sub-array))))\n  (min-sub-array-sum\
    \ nums)))\n\n;; Given a list of integers nums, find the minimum sum of any non-empty\
    \ sub-list\n;; of nums.\n;; Example\n;; >>> (minSubArraySum (list 2 3 4 1 2 4))\n\
    ;; 1\n;; >>> (minSubArraySum (list -1 -2 -3))\n;; -6", "  (define (min-sub-array-sum\
    \ sub-array)\n    (if (null? sub-array)\n      (+ sub-array 0)\n      (min-sub-array-sum\
    \ (cdr sub-array)))))\n", "  (let ((sum (make-list 0)))\n    (for-each (lambda\
    \ (n)\n                (if (not (null? n))\n                    (set-car! sum\
    \ (+ n (car n)))\n                    (set-cdr! sum (+ n (cdr n))))\n        \
    \        nums)\n              (set-cdr! sum (car n))))\n  (car sum)))\n", "  (if\
    \ (null? nums)\n    0\n    (let ((sum (car nums))\n          (nums (cdr nums)))\n\
    \      (if (null? nums)\n        sum\n        (let ((sum (car nums))\n       \
    \       (nums (cdr nums)))\n          (if (null? nums)\n            sum\n    \
    \        (let ((sum (car nums))\n                  (nums (cdr nums)))\n      \
    \        (if (null? nums)\n                sum\n                (let ((sum (car\
    \ nums))\n                      (nums (cdr nums)))\n                  (if (null?\
    \ nums)\n                    sum\n                    (let ((sum (car nums))\n\
    \                          (nums (cdr nums)))\n                      (if (null?\
    \ nums)\n                        sum\n                        (let ((sum (car\
    \ nums))\n                              (nums (cdr nums)))\n                 \
    \         (if (null? nums)\n                            sum\n                \
    \            (let ((sum (car nums))\n                                  (nums (cdr\
    \ nums)))\n                              (if (null? nums)\n                  \
    \              sum\n                                (let ((sum (car nums))\n \
    \                                     (nums (cdr nums)))\n                   \
    \               (if (null? nums)\n                                    sum\n  \
    \                                  (let ((sum (car nums))\n                  \
    \                        (nums (cdr nums)))\n                                \
    \      (if (null? nums)\n                                        sum\n       \
    \                                 (let ((sum (car nums))\n                   \
    \                           (nums (cdr nums)))\n                             \
    \             (if (null? nums)\n                                            sum\n\
    \                                            (let ((sum (car nums))\n        \
    \                                          (nums (cdr nums)))\n              \
    \                                (if (null? nums)\n                          \
    \                      sum\n                                                (let\
    \ ((sum (car nums))\n                                                      (nums\
    \ (cdr nums)))\n                                                  (if (null? nums)\n\
    \                                                    sum\n                   \
    \                                 (let ((sum (car nums))\n                   \
    \                 ", "  (if (null? nums)\n    0\n    (let ((sum (make-list 0))\n\
    \          (min (make-list (car nums))))\n      (for-each\n        (lambda (n)\n\
    \          (if (null? (cdr n))\n            (set! sum (car n))\n            (set!\
    \ min (car n))\n            (set! sum (+ sum (car n)))))\n        nums)\n    \
    \  (+ min sum)))\n\n;; Given a list of integers nums, find the minimum sum of\
    \ any non-empty sub-list\n;; of nums.\n;; Example\n;; >>> (minSubArraySum (list\
    \ 2 3 4 1 2 4))\n;; 1\n;; >>> (minSubArraySum (list -1 -2 -3))\n;; -6", "  (let\
    \ ((sum (make-vector 0 (length nums))))\n    (for-each\n      (lambda (n)\n  \
    \      (set! sum (vector-set! sum n (vector-ref sum (- (vector-length sum) 1))))\n\
    \      )\n      nums)\n    (vector-ref sum 0)))\n", "  (if (null? nums)\n    0\n\
    \    (let ((sum (make-vector 1 (length nums))))\n      (for-each\n        (lambda\
    \ (n)\n          (set! sum (vector-set! sum n (vector-ref sum 0))))\n        nums)\n\
    \      (vector-ref sum 0))))\n", "  (if (null? nums)\n    0\n    (let ((sum (make-list\
    \ 0))\n          (min (make-list (car nums))))\n      (for-each\n        (lambda\
    \ (n)\n          (if (null? (cdr n))\n            (set-car! sum (car n))\n   \
    \         (set-car! sum (if (null? sum) (car n) (add (car n) (car sum))))\n  \
    \        (set-cdr! n (cdr n)))\n        nums))\n      (car min))))\n", "  (define\
    \ (min-sub-array-sum start end)\n    (if (empty? nums)\n      0\n      (if (negative?\
    \ start)\n        (min-sub-array-sum (- start) (- end) nums)\n        (min-sub-array-sum\
    \ start end nums))))\n  (min-sub-array-sum 0 nums))\n\n;; Given a list of integers\
    \ nums, find the minimum sum of any non-empty sub-list\n;; of nums.\n;; Example\n\
    ;; >>> (minSubArraySum (list 2 3 4 1 2 4))\n;; 1\n;; >>> (minSubArraySum (list\
    \ -1 -2 -3))\n;; -6", "  (let ((sum (make-list 0)))\n    (for-each (lambda (n)\n\
    \                (if (null? n)\n                    (return sum)\n           \
    \         (set-car! sum n)\n                    (set-cdr! sum (- n 1))))\n   \
    \   nums))\n)\n\n;; Given a list of integers nums, find the minimum sum of any\
    \ non-empty sub-list\n;; of nums.\n;; Example\n;; >>> (minSubArraySum (list 2\
    \ 3 4 1 2 4))\n;; 1\n;; >>> (minSubArraySum (list -1 -2 -3))\n;; -6", "  (if (null?\
    \ nums)\n    0\n    (let ((sum (make-list 0)))\n      (for-each (lambda (n)\n\
    \                  (if (null? (cdr n))\n                    (set-car! sum (car\
    \ n))\n                    (set-cdr! sum (cdr n))\n                    (set-car!\
    \ sum (car n))\n                    (set-cdr! sum (cdr n))\n                 \
    \   (set-car! sum (car n))\n                    (set-cdr! sum (cdr n))\n     \
    \               (set-car! sum (car n))\n                    (set-cdr! sum (cdr\
    \ n))\n                    (set-car! sum (car n))\n                    (set-cdr!\
    \ sum (cdr n))\n                    (set-car! sum (car n))\n                 \
    \   (set-cdr! sum (cdr n))\n                    (set-car! sum (car n))\n     \
    \               (set-cdr! sum (cdr n))\n                    (set-car! sum (car\
    \ n))\n                    (set-cdr! sum (cdr n))\n                    (set-car!\
    \ sum (car n))\n                    (set-cdr! sum (cdr n))\n                 \
    \   (set-car! sum (car n))\n                    (set-cdr! sum (cdr n))\n     \
    \               (set-car! sum (car n))\n                    (set-cdr! sum (cdr\
    \ n))\n                    (set-car! sum (car n))\n                    (set-cdr!\
    \ sum (cdr n))\n                    (set-car! sum (car n))\n                 \
    \   (set-cdr! sum (cdr n))\n                    (set-car! sum (car n))\n     \
    \               (set-cdr! sum (cdr n))\n                    (set-car! sum (car\
    \ n))\n                    (set-cdr! sum (cdr n))\n                    (set-car!\
    \ sum (car n))\n                    (set-cdr! sum (cdr n))\n                 \
    \   (set-car! sum (car n))\n                    (set-cdr! sum (cdr n))\n     \
    \               (set-car! sum (car n))\n                    (set-cdr! sum (c",
  "  (if (null? nums)\n    0\n    (let ((sum (make-vector 1 (length nums))))\n   \
    \   (for-each (lambda (i) (set! sum (vector-ref sum i))) nums)\n      (vector-ref\
    \ sum 0))))\n", "  (if (null? nums)\n    0\n    (let ((min 0)\n          (sum\
    \ 0))\n      (for-each (lambda (n)\n                  (if (null? (cdr n))\n  \
    \                  (set! sum (+ sum (car n)))\n                    (set! min (if\
    \ (<= sum 0)\n                               (+ sum (car n))\n               \
    \                (+ min (car n))))))\n        nums)))\n)\n\n;; Given a list of\
    \ integers nums, find the minimum sum of any non-empty sub-list\n;; of nums.\n\
    ;; Example\n;; >>> (minSubArraySum (list 2 3 4 1 2 4))\n;; 1\n;; >>> (minSubArraySum\
    \ (list -1 -2 -3))\n;; -6", "  (if (null? nums)\n    0\n    (let ((sum (make-list\
    \ 0))\n          (min (make-list 0))\n          (i 0))\n      (while (< i (length\
    \ nums))\n        (let ((n (nth nums i)))\n          (if (< n 0)\n           \
    \ (set! sum (make-list (- n sum)))\n            (set! min (make-list (- n min))))\n\
    \          (set! i (i + 1)))\n        (set! sum (make-list (sum - n)))))))\n",
  "  (define (min-sub-array-sum nums)\n    (if (null? nums)\n      0\n      (if (null?\
    \ (cdr nums))\n        (car nums)\n        (min-sub-array-sum (cdr nums)))))\n\
    \  (min-sub-array-sum nums))\n", "  (let ((sum (make-vector 0 nums-length))))\n\
    \  (for ((i 0 nums-length))\n    (set! sum (vector-set! sum (vector-ref nums i)\
    \ (vector-ref sum i)))\n    (if (<= 0 sum)\n      (vector-set! sum (vector-ref\
    \ sum i))\n      (let ((next (vector-ref nums i)))\n        (vector-set! sum (vector-ref\
    \ sum next))\n        (minSubArraySum (vector-copy next nums-length))))))\n",
  "  (if (null? nums)\n    0\n    (let ((sum (make-vector 1 (length nums))))\n   \
    \   (for-each\n        (lambda (i)\n          (set! sum (vector-set! sum i (vector-ref\
    \ nums i))))\n        nums)\n      (vector-ref sum 0))))\n", "  (if (null? nums)\n\
    \    0\n    (let ((sum (make-vector 1 (length nums))))\n      (for-each\n    \
    \    (lambda (i)\n          (set! sum (vector-set! sum i (vector-ref nums i))))\n\
    \        nums)\n      (vector-ref sum))))\n", "  (let ((sum (make-list 0)))\n\
    \    (for-each\n      (lambda (n)\n        (if (zero? n)\n            (return\
    \ sum)\n            (set! sum (+ n sum))\n            (set! sum (- n sum))))\n\
    \      nums)\n    sum))\n", "  (define (min-sub-array-sum sub-array)\n    (if\
    \ (null? sub-array)\n      (car sub-array)\n      (min-sub-array-sum (cdr sub-array))))\n\
    \  (min-sub-array-sum nums))\n\n;; Given a list of integers nums, find the minimum\
    \ sum of any non-empty sub-list\n;; of nums.\n;; Example\n;; >>> (minSubArraySum\
    \ (list 2 3 4 1 2 4))\n;; 1\n;; >>> (minSubArraySum (list -1 -2 -3))\n;; -6",
  "  (let ((sum (make-list 0))\n        (min (make-list (car nums))))\n    (while\
    \ (not (null? nums))\n      (if (null? (cdr nums))\n        (set! sum (car min))\n\
    \        (set! min (car (cdr nums)))\n        (set! nums (cdr nums)))\n      (set!\
    \ sum (car sum))\n      (set! nums (cdr nums)))\n    sum))\n", "  (let ((sum (make-list\
    \ 0))\n        (min (make-list (car nums))))\n    (for-each\n      (lambda (n)\n\
    \        (if (null? (cdr n))\n            (set! sum (car n) (if (< (car n) 0)\
    \ -1 * sum (- (car n))))\n          (set! min (car n) (if (< (car n) 0) -1 * min\
    \ (car n))))\n      nums)\n    (if (null? (cdr nums))\n      (car min)\n     \
    \ (if (< (car min) 0) -1 * sum (- (car min))))))\n\n;; Given a list of integers\
    \ nums, find the minimum sum of any non-empty sub-list\n;; of nums.\n;; Example\n\
    ;; >>> (minSubArraySum (list 2 3 4 1 2 4))\n;; 1\n;; >>> (minSubArraySum (list\
    \ -1 -2 -3))\n;; -6", "  (if (null? nums)\n    0\n    (let ((sum (make-vector\
    \ 1 (length nums))))\n      (for-each\n        (lambda (i)\n          (set! sum\
    \ (vector-set! sum i (vector-ref nums i))))\n        nums)\n      (vector-ref\
    \ sum))))\n", "  (let ((sum (make-vector 0 nums-length))))\n  (for-each\n    (lambda\
    \ (i)\n      (set! sum (vector-set! sum i (vector-ref nums i))))\n    nums))\n",
  "  (if (null? nums)\n    0\n    (let ((sum (make-vector 1 (length nums))))\n   \
    \   (for-each\n        (lambda (i)\n          (set! sum (vector-set! sum i (vector-ref\
    \ nums i))))\n        nums)\n      (vector-ref sum 0))))\n", "  (define (min-sub-array-sum\
    \ a b)\n    (if (null? a)\n      (+ b 0)\n      (+ (min-sub-array-sum (cdr a)\
    \ (car a)) (* (car a) (car b)))\n    )\n    (min-sub-array-sum (cdr nums) (car\
    \ nums))\n  )\n  (min-sub-array-sum (cdr nums) (car nums))\n)\n\n;; Given a list\
    \ of integers nums, find the minimum sum of any non-empty sub-list\n;; of nums.\n\
    ;; Example\n;; >>> (minSubArraySum (list 2 3 4 1 2 4))\n;; 1\n;; >>> (minSubArraySum\
    \ (list -1 -2 -3))\n;; -6", "  (if (null? nums)\n    0\n    (let ((sum (make-vector\
    \ 1 (length nums))))\n      (for-each\n        (lambda (i)\n          (set! sum\
    \ (vector-set! sum i (vector-ref nums i))))\n        nums))\n    (vector-ref sum\
    \ 0)))\n", "  (if (null? nums)\n    0\n    (let ((sum (make-vector 1 (length nums))))\n\
    \      (for-each (lambda (i) (set! sum (vector-set! sum 0 (vector-ref nums i))))\n\
    \          (range 1 (vector-length nums))))))\n", "  (let ((sum (make-list 0))\n\
    \        (min (make-list (car nums))))\n    (for-each\n      (lambda (n)\n   \
    \     (if (null? (cdr n))\n            (set-car! sum (car n))\n            (set-car!\
    \ sum (if (null? sum) (car n) (add (car n) (car sum)))))\n        nums)\n    \
    \  (set-cdr! sum (car min)))))\n\n;; Given a list of integers nums, find the minimum\
    \ sum of any non-empty sub-list\n;; of nums.\n;; Example\n;; >>> (minSubArraySum\
    \ (list 2 3 4 1 2 4))\n;; 1\n;; >>> (minSubArraySum (list -1 -2 -3))\n;; -6",
  "  (if (null? nums)\n    0\n    (let ((sum (make-vector 1 (length nums))))\n   \
    \   (for-each\n        (lambda (i)\n          (set! sum (vector-set! sum 0 (vector-ref\
    \ nums i))))\n        nums)\n      (vector-ref sum))))\n", "  (let ((sum (make-vector\
    \ 0 (length nums))))\n    (for-each\n      (lambda (i)\n        (set! sum (vector-set!\
    \ sum i (vector-ref nums i))))\n      nums)\n    (vector-ref sum 0)))\n", "  (define\
    \ (min-sub-array-sum nums)\n    (if (null? nums)\n      0\n      (if (null? (cdr\
    \ nums))\n        (car nums)\n        (min-sub-array-sum (cdr nums)))))\n  (min-sub-array-sum\
    \ nums))\n", "  (define (min-sub-array-sum nums)\n    (if (null? nums)\n     \
    \ 0\n      (if (null? (cdr nums))\n        (car nums)\n        (min-sub-array-sum\
    \ (cdr nums)))))\n  (min-sub-array-sum nums))\n\n;; Given a list of integers nums,\
    \ find the minimum sum of any non-empty sub-list\n;; of nums.\n;; Example\n;;\
    \ >>> (minSubArraySum (list 2 3 4 1 2 4))\n;; 1\n;; >>> (minSubArraySum (list\
    \ -1 -2 -3))\n;; -6", "  (let ((sum (make-list 0)))\n    (for-each (lambda (n)\n\
    \                (if (null? n)\n                    (return sum)\n           \
    \         (set! sum (+ n sum))\n                    )\n                )\n   \
    \           nums\n              (if (null? sum)\n                  (return 0)\n\
    \                  (return sum)\n                  )\n              )\n    )\n\
    )\n", "  (if (null? nums)\n    0\n    (let ((sum (make-vector 1 (length nums))))\n\
    \      (for-each (lambda (i) (set! sum (vector-set! sum 0 (vector-ref nums i))))\
    \ nums)\n        (vector-ref sum))))\n", "  (let ((sum (make-vector 0 (length\
    \ nums))))\n    (for-each (lambda (i) (set! sum (vector-set! sum i (vector-ref\
    \ nums i))))\n      nums)\n    (vector-ref sum 0)))\n", "  (let ((sum (make-list\
    \ 0)))\n    (for-each\n      (lambda (n)\n        (if (null? (cdr n))\n      \
    \      (set! sum (car n) (if (< n 0) -1 * sum (- n))))\n        nums)\n      (set!\
    \ sum 0)))\n  sum)\n", "  (if (null? nums)\n    0\n    (let ((sum (make-vector\
    \ 1 (length nums))))\n      (for-each\n        (lambda (n)\n          (set! sum\
    \ (vector-set! sum n (vector-ref sum (- 1 n))))\n        )\n        nums)\n  \
    \    (vector-ref sum 0))))\n", "  (define (min-sub-array-sum nums)\n    (if (null?\
    \ nums)\n      0\n      (if (null? (cdr nums))\n        (car nums)\n        (min-sub-array-sum\
    \ (cdr nums)))))\n  (min-sub-array-sum nums))\n\n;; Given a list of integers nums,\
    \ find the minimum sum of any non-empty sub-list\n;; of nums.\n;; Example\n;;\
    \ >>> (minSubArraySum (list 2 3 4 1 2 4))\n;; 1\n;; >>> (minSubArraySum (list\
    \ -1 -2 -3))\n;; -6", "  (define (min-sub-array-sum sub-array)\n    (if (null?\
    \ sub-array)\n      (+ sub-array 0)\n      (min-sub-array-sum (cdr sub-array)))))\n",
  "  (let ((sum (make-vector 0 nums-length))))\n  (for ([i (in-range 0 nums-length)])\n\
    \    (set! sum (vector-set! sum 0 (vector-ref nums i)))\n    (if (<= 0 sum)\n\
    \      sum\n      (minSubArraySum (vector-copy nums (vector-ref nums i) (vector-length\
    \ nums) sum))))\n  sum)\n", "  (if (null? nums)\n    0\n    (let ((sum (make-list\
    \ 0)))\n      (for-each (lambda (n)\n                  (if (null? (cdr n))\n \
    \                   (set-car! sum (car n))\n                    (set-car! sum\
    \ (cdr n))\n                    (set-cdr! sum (cdr n))\n                    (set-cdr!\
    \ sum (car n))\n                    (set-car! sum (car n))\n                 \
    \   (set-cdr! sum (car n))))\n                nums)))\n  (car (cdr sum)))\n",
  "  (if (null? nums)\n    0\n    (let ((sum (make-vector 1 (length nums))))\n   \
    \   (for-each (lambda (i) (set! sum (vector-set! sum 0 (vector-ref nums i))))\n\
    \          nums)\n      (vector-ref sum))))\n", "  (define (min-sub-array-sum\
    \ acc nums)\n    (if (null? nums) acc\n      (if (negative? acc)\n        (min-sub-array-sum\
    \ (- acc) nums)\n        (min-sub-array-sum (acc (- nums 1)) nums))))\n  (min-sub-array-sum\
    \ 0 nums)))\n", "  (if (null? nums)\n    0\n    (let ((sum (make-vector 1 (length\
    \ nums))))\n      (for-each\n        (lambda (i)\n          (set! sum (vector-set!\
    \ sum i (vector-ref nums i))))\n        nums)\n      (vector-ref sum 0))))\n",
  "  (if (null? nums)\n    0\n    (let ((sum (make-vector 1 (length nums))))\n   \
    \   (for-each (lambda (i) (set! sum (vector-set! sum 0 (vector-ref nums i))))\n\
    \        num)))\n)\n\n;; Given a list of integers nums, find the minimum sum of\
    \ any non-empty sub-list\n;; of nums.\n;; Example\n;; >>> (minSubArraySum (list\
    \ 2 3 4 1 2 4))\n;; 1\n;; >>> (minSubArraySum (list -1 -2 -3))\n;; -6", "  (let\
    \ ((sum (make-list 0)))\n    (for-each (lambda (n) (set-car! sum n)) nums)\n \
    \   (if (null? nums)\n      (car sum)\n      (min (cdr sum) (minSubArraySum (cdr\
    \ nums))))))\n", "  (let ((sum (make-list 0)))\n    (for-each (lambda (n)\n  \
    \              (if (null? (cdr n))\n                  (set-car! sum (car n))\n\
    \                  (set-car! sum (cdr n))\n                  (set-cdr! sum (cdr\
    \ n))))\n      nums))\n  (car sum))\n", "  (if (null? nums)\n    0\n    (let ((sum\
    \ (make-list 0))\n          (min (make-list (car nums))))\n      (for-each\n \
    \       (lambda (n)\n          (if (null? (cdr n))\n            (set! sum (car\
    \ n) (if (< sum 0) sum (- sum (car n))))\n            (set! sum (car n) (if (<\
    \ sum 0) sum (- sum (car n))))\n            (set! min (car n) (if (< min 0) min\
    \ (- min (car n))))\n            (set! min (car n) (if (< min 0) min (- min (car\
    \ n)))))))\n      (+ sum min)))\n", "  (if (null? nums)\n    0\n    (let ((sum\
    \ (make-vector 1 (length nums))))\n      (for-each\n        (lambda (i)\n    \
    \      (set! sum (vector-set! sum i (vector-ref nums i))))\n        nums)\n  \
    \    (vector-ref sum 0))))\n", "  (let ((sum (make-list 0))\n        (min-sum\
    \ (make-list -1)))\n    (for-each\n      (lambda (n)\n        (if (not (null?\
    \ n))\n            (set! sum (+ n sum))\n            (set! min-sum (if (< n min-sum)\
    \ min-sum n))))\n      nums))\n", "  (define (min-sub-array-sum start end)\n \
    \   (if (eq? start end)\n      (car nums)\n      (min-sub-array-sum (cdr start)\
    \ (cdr end))))\n  (min-sub-array-sum (list 0) nums)))\n", "  (let ((sum (make-list\
    \ 0))\n        (min (make-list 0)))\n    (for-each (lambda (n)\n             \
    \   (if (not (null? n))\n                    (set! sum (+ n sum))\n          \
    \          (set! min (if (< n sum) min sum n))))\n      nums)\n    min))\n", " \
    \ (let ((sum (make-vector 0 (length nums))))\n    (for-each\n      (lambda (i)\n\
    \        (set! sum (vector-set! sum i (vector-ref nums i))))\n      nums))\n \
    \ (vector-ref sum 0))\n", "  (define (min-sub-array-sum nums start end)\n    (if\
    \ (null? nums)\n      (+ start end)\n      (if (<= start end)\n        (+ (min-sub-array-sum\
    \ (cdr nums) start end)\n           (min-sub-array-sum (car nums) start end))\n\
    \        (min-sub-array-sum nums start end))))\n  (min-sub-array-sum nums 0 (length\
    \ nums) 0)))\n", "  (let ((sum (make-list 0))\n        (min (make-list (car nums))))\n\
    \    (for-each\n      (lambda (n)\n        (if (null? (cdr n))\n            (set!\
    \ sum (car n) (car min) (cdr sum))\n            (set! min (car n) (if (null? (cdr\
    \ min)) (car n) (car min))))\n        nums)\n      sum))\n", "  (if (null? nums)\n\
    \    0\n    (let ((sum (make-list 0))\n          (min (make-list (car nums))))\n\
    \      (for-each\n        (lambda (n)\n          (if (null? (cdr n))\n       \
    \     (set! sum (car n))\n            (set! min (car n))\n            (if (null?\
    \ (cdr n))\n              (set! sum (cdr n))\n              (set! min (cdr n))))\n\
    \          nums)\n        (set! sum (car min))))))\n", "  (define (min-sub-array-sum\
    \ nums)\n    (if (null? nums)\n      0\n      (if (null? (cdr nums))\n       \
    \ (car nums)\n        (min-sub-array-sum (cdr nums)))))\n  (min-sub-array-sum\
    \ nums))\n\n;; Given a list of integers nums, find the minimum sum of any non-empty\
    \ sub-list\n;; of nums.\n;; Example\n;; >>> (minSubArraySum (list 2 3 4 1 2 4))\n\
    ;; 1\n;; >>> (minSubArraySum (list -1 -2 -3))\n;; -6", "  (let ((sum (make-vector\
    \ 0 nums-length))))\n  (for-each\n    (lambda (i)\n      (set! sum (vector-set!\
    \ sum i (vector-ref nums i))))\n    nums))\n", "  (define (min-sub-array-sum nums)\n\
    \    (if (null? nums)\n      0\n      (if (null? (cdr nums))\n        (car nums)\n\
    \        (min-sub-array-sum (cdr nums)))))\n  (min-sub-array-sum nums)))\n", " \
    \ (if (null? nums)\n    0\n    (let ((sum (make-vector 1 (length nums))))\n  \
    \    (for-each\n        (lambda (i)\n          (set! sum (vector-set! sum i (vector-ref\
    \ nums i))))\n        nums)\n      (vector-ref sum 0))))\n", "  (define (min-sub-array-sum\
    \ nums)\n    (if (null? nums)\n      0\n      (if (null? (cdr nums))\n       \
    \ (car nums)\n        (min-sub-array-sum (cdr nums)))))\n  (min-sub-array-sum\
    \ nums)))\n\n;; Given a list of integers nums, find the minimum sum of any non-empty\
    \ sub-list\n;; of nums.\n;; Example\n;; >>> (minSubArraySum (list 2 3 4 1 2 4))\n\
    ;; 1\n;; >>> (minSubArraySum (list -1 -2 -3))\n;; -6", "  (if (null? nums)\n \
    \   0\n    (let ((sum (make-vector 1 (length nums))))\n      (for-each\n     \
    \   (lambda (i)\n          (set! sum (vector-set! sum i (vector-ref nums i))))\n\
    \        nums))\n    (vector-ref sum 0)))\n", "  (let ((sum (make-list 0)))\n\
    \    (for-each (lambda (n)\n                (if (null? (cdr n))\n            \
    \        (set! sum (car n) (car sum) (cdr sum))\n                    (set! sum\
    \ (car n) (car sum) (cdr sum) (car n))))\n               nums))\n  (car sum)))\n\
    \n;; Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    ;; of nums.\n;; Example\n;; >>> (minSubArraySum (list 2 3 4 1 2 4))\n;; 1\n;;\
    \ >>> (minSubArraySum (list -1 -2 -3))\n;; -6", "  (if (null? nums)\n    0\n \
    \   (let ((sum (make-vector 1 (length nums))))\n      (for-each\n        (lambda\
    \ (n)\n          (set! sum (vector-set! sum n (vector-ref sum (- (vector-length\
    \ sum) 1))))\n          nums)\n        sum)))\n)\n", "  (if (null? nums)\n   \
    \ 0\n    (let ((sum (car nums))\n          (nums (cdr nums)))\n      (if (null?\
    \ nums)\n        sum\n        (let ((sum (car nums))\n              (nums (cdr\
    \ nums)))\n          (if (null? nums)\n            sum\n            (let ((sum\
    \ (car nums))\n                  (nums (cdr nums)))\n              (if (null?\
    \ nums)\n                sum\n                (let ((sum (car nums))\n       \
    \               (nums (cdr nums)))\n                  (if (null? nums)\n     \
    \               sum\n                    (let ((sum (car nums))\n            \
    \              (nums (cdr nums)))\n                      (if (null? nums)\n  \
    \                      sum\n                        (let ((sum (car nums))\n \
    \                             (nums (cdr nums)))\n                          (if\
    \ (null? nums)\n                            sum\n                            (let\
    \ ((sum (car nums))\n                                  (nums (cdr nums)))\n  \
    \                            (if (null? nums)\n                              \
    \  sum\n                                (let ((sum (car nums))\n             \
    \                         (nums (cdr nums)))\n                               \
    \   (if (null? nums)\n                                    sum\n              \
    \                      (let ((sum (car nums))\n                              \
    \            (nums (cdr nums)))\n                                      (if (null?\
    \ nums)\n                                        sum\n                       \
    \                 (let ((sum (car nums))\n                                   \
    \           (nums (cdr nums)))\n                                          (if\
    \ (null? nums)\n                                            sum\n            \
    \                                (let ((sum (car nums))\n                    \
    \                              (nums (cdr nums)))\n                          \
    \                    (if (null? nums)\n                                      \
    \          sum\n                                                (let ((sum (car\
    \ nums))\n                                                      (nums (cdr nums)))\n\
    \                                                  (if (null? nums)\n        \
    \                                            sum\n                           \
    \                         (let ((sum (car nums))\n                           \
    \         ", "  (define (min-sub-array-sum acc nums)\n    (if (null? nums) acc\n\
    \      (if (negative? acc)\n        (min-sub-array-sum (- acc) nums)\n       \
    \ (min-sub-array-sum (acc (- nums)) nums))))\n  (min-sub-array-sum 0 nums)))\n",
  "  (let* ([min-sum (reduce (lambda (a b) (+ a b)) 0)])\n    (if (null? nums)\n \
    \     min-sum\n      (let* ([sub-sum (reduce (lambda (a b) (+ a b)) 0)])\n   \
    \     (if (< sub-sum min-sum)\n          min-sum\n          sub-sum))))\n", " \
    \ (if (null? nums)\n    0\n    (let ((sum (make-vector 1 (length nums))))\n  \
    \    (for-each\n        (lambda (i)\n          (set! sum (vector-set! sum i (vector-ref\
    \ nums i))))\n        nums)\n      (vector-ref sum 0))))\n", "  (let ((sum (make-vector\
    \ 0 (length nums))))\n    (for-each (lambda (i) (set! sum (vector-set! sum 0 (vector-ref\
    \ nums i))))\n      nums)\n    (vector-ref sum 0)))\n\n;; Given a list of integers\
    \ nums, find the minimum sum of any non-empty sub-list\n;; of nums.\n;; Example\n\
    ;; >>> (minSubArraySum (list 2 3 4 1 2 4))\n;; 1\n;; >>> (minSubArraySum (list\
    \ -1 -2 -3))\n;; -6", "  (let ((sum (make-vector 0 (length nums))))\n    (for-each\n\
    \      (lambda (n)\n        (set! sum (vector-set! sum n (vector-ref sum (- (vector-length\
    \ sum) 1))))\n      )\n      nums)\n    (vector-ref sum 0)))\n", "  (let ((sum\
    \ (make-vector 0 (length nums))))\n    (for-each (lambda (i) (set! sum (vector-set!\
    \ sum i (vector-ref nums i))))\n      nums)\n    (vector-ref sum 0)))\n\n;; Given\
    \ a list of integers nums, find the minimum sum of any non-empty sub-list\n;;\
    \ of nums.\n;; Example\n;; >>> (minSubArraySum (list 2 3 4 1 2 4))\n;; 1\n;; >>>\
    \ (minSubArraySum (list -1 -2 -3))\n;; -6", "  (if (null? nums)\n    0\n    (let\
    \ ((sum (make-vector 1 (length nums))))\n      (for-each (lambda (i) (set! sum\
    \ (vector-ref sum i))) nums)\n      (vector-ref sum 0))))\n", "  (if (null? nums)\n\
    \    0\n    (let ((sum (make-vector 1 (length nums))))\n      (for-each\n    \
    \    (lambda (i)\n          (set! sum (vector-set! sum i (vector-ref nums i))))\n\
    \        nums)\n      (vector-ref sum 0))))\n", "  (let ((sum (make-vector 0 (length\
    \ nums))))\n    (for-each\n      (lambda (i)\n        (set! sum (vector-set! sum\
    \ i (vector-ref nums i))))\n      nums)\n    (vector-ref sum 0)))\n\n;; Given\
    \ a list of integers nums, find the minimum sum of any non-empty sub-list\n;;\
    \ of nums.\n;; Example\n;; >>> (minSubArraySum (list 2 3 4 1 2 4))\n;; 1\n;; >>>\
    \ (minSubArraySum (list -1 -2 -3))\n;; -6", "  (let ((sum (make-vector 0 (length\
    \ nums))))\n    (for-each\n      (lambda (i)\n        (set! sum (vector-set! sum\
    \ i (vector-ref nums i))))\n      nums)\n    (vector-ref sum 0)))\n\n;; Given\
    \ a list of integers nums, find the minimum sum of any non-empty sub-list\n;;\
    \ of nums.\n;; Example\n;; >>> (minSubArraySum (list 2 3 4 1 2 4))\n;; 1\n;; >>>\
    \ (minSubArraySum (list -1 -2 -3))\n;; -6", "  (define (min-sub-array-sum nums)\n\
    \    (if (null? nums)\n      0\n      (if (null? (cdr nums))\n        (car nums)\n\
    \        (min-sub-array-sum (cdr nums)))))\n  (min-sub-array-sum nums))\n\n;;\
    \ Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    ;; of nums.\n;; Example\n;; >>> (minSubArraySum (list 2 3 4 1 2 4))\n;; 1\n;;\
    \ >>> (minSubArraySum (list -1 -2 -3))\n;; -6", "  (let ((sum (make-list 0)))\n\
    \    (if (null? nums)\n      sum\n    (else\n      (let ((min (car nums)))\n \
    \       (if (null? (cdr nums))\n          (minSum (sum (append (list min) (cdr\
    \ nums))) min)\n          (minSum (sum (append (list min) (cdr nums)))\n     \
    \      (minSum (sum (append (list min) (cdr nums))) (cdr min)))\n        )\n \
    \     )\n    )\n  )\n)\n\n;; Given a list of integers nums, find the minimum sum\
    \ of any non-empty sub-list\n;; of nums.\n;; Example\n;; >>> (minSubArraySum (list\
    \ 2 3 4 1 2 4))\n;; 1\n;; >>> (minSubArraySum (list -1 -2 -3))\n;; -6", "  (let\
    \ ((sum (make-vector 0 (length nums))))\n    (for-each\n      (lambda (n)\n  \
    \      (set! sum (vector-set! sum n (vector-ref sum (- (vector-length sum) 1))))\n\
    \      )\n      nums\n    )\n    (vector-ref sum 0)))\n", "  (if (null? nums)\n\
    \    0\n    (let ((sum (car nums))\n          (nums (cdr nums)))\n      (if (null?\
    \ nums)\n        sum\n        (let ((sum (car nums))\n              (nums (cdr\
    \ nums)))\n          (if (null? nums)\n            sum\n            (let ((sum\
    \ (car nums))\n                  (nums (cdr nums)))\n              (if (null?\
    \ nums)\n                sum\n                (let ((sum (car nums))\n       \
    \               (nums (cdr nums)))\n                  (if (null? nums)\n     \
    \               sum\n                    (let ((sum (car nums))\n            \
    \              (nums (cdr nums)))\n                      (if (null? nums)\n  \
    \                      sum\n                        (let ((sum (car nums))\n \
    \                             (nums (cdr nums)))\n                          (if\
    \ (null? nums)\n                            sum\n                            (let\
    \ ((sum (car nums))\n                                  (nums (cdr nums)))\n  \
    \                            (if (null? nums)\n                              \
    \  sum\n                                (let ((sum (car nums))\n             \
    \                         (nums (cdr nums)))\n                               \
    \   (if (null? nums)\n                                    sum\n              \
    \                      (let ((sum (car nums))\n                              \
    \            (nums (cdr nums)))\n                                      (if (null?\
    \ nums)\n                                        sum\n                       \
    \                 (let ((sum (car nums))\n                                   \
    \           (nums (cdr nums)))\n                                          (if\
    \ (null? nums)\n                                            sum\n            \
    \                                (let ((sum (car nums))\n                    \
    \                              (nums (cdr nums)))\n                          \
    \                    (if (null? nums)\n                                      \
    \          sum\n                                                (let ((sum (car\
    \ nums))\n                                                      (nums (cdr nums)))\n\
    \                                                  (if (null? nums)\n        \
    \                                            sum\n                           \
    \                         (let ((sum (car nums))\n                           \
    \         "]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
