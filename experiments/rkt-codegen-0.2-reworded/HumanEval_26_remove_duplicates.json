{
  "name": "HumanEval_26_remove_duplicates",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)\n(define (remove_duplicates numbers)\n",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_duplicates))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 2 3 4)) (list 1 2 3 4))\n    (check-equal? (candidate (list 1 2 3 2 4 3 5)) (list 1 4 5))\n))\n\n(test-humaneval)",
  "completions": [
    "  (if (null? numbers)\n    []\n    (let ((result (make-vector (length numbers) 0)))\n      (for-each (lambda (number)\n                 (if (not (number = numbers/1))\n                     (set-vector-set! result number)\n                     ()))\n        numbers))\n    (vector-set! result 0)\n    result))\n",
    "  (let ((seen (make-hashtable)))\n    (let ((result ()))\n      (for-each (lambda (x)\n                  (hashtable-put seen x x)\n                  (if (hashtable-ref seen x)\n                      (append result x)))\n        numbers\n        (hashtable-remove seen x)))\n    (reverse result)))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((seen (make-hashtable)))\n    (let ((result (make-vector 0)))\n      (let ((numbers (vector->list numbers)))\n        (for-each (lambda (x)\n                    (hashtable-put seen x (vector->list x)))\n                  numbers)\n        (for-each (lambda (x)\n                    (hashtable-get seen x)\n                    (if (not (null? (hashtable-get seen x)))\n                         (vector->list (cons x result)))))\n        (vector->list result)))\n  (vector->list numbers)))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    []\n    (let ((result (make-vector (length numbers) 0)))\n      (for-each (lambda (n)\n                  (if (not (eql? n numbers))\n                    (setf result (vector-set! result n numbers)))\n                  numbers)\n        result))\n    result))\n\n;; From a list of strings, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list \"a\" \"b\" \"a\" \"c\"))\n;; (list \"a\" \"c\")",
    "  (if (null? numbers)\n    []\n    (let ((result ()))\n      (for-each (lambda (n)\n                  (if (not (member n result))\n                    (result (cons n result))))\n        numbers)))\n)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    ()\n    (let ((result (make-vector 0 (length numbers))))\n      (for-each (lambda (n)\n                  (if (not (member n result))\n                    (vector-set! result n)\n                    (vector-set! result (vector-ref numbers n))))\n        numbers))\n    (vector-sort result)\n    result))\n",
    "  (if (null? numbers)\n    ()\n    (let ((result (make-vector 0 (length numbers))))\n      (for-each (lambda (n) (vector-set! result n)) numbers)\n      (vector-sort! result)\n      (return (vector-map (lambda (n) n) result))))\n)\n\n;; From a list of strings, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list \"a\" \"b\" \"a\" \"c\"))\n;; (list \"a\" \"c\")",
    "  (if (null? numbers)\n    ()\n    (let ((result (list)))\n      (for-each (lambda (n)\n                  (if (not (member? n numbers))\n                    (result 'append (list n))\n                    (result 'append 'append)))\n        numbers)))\n  result)\n\n;; From a list of strings, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list \"a\" \"b\" \"a\" \"c\"))\n;; (list \"a\" \"c\")",
    "  (let ((result ()))\n    (for-each (lambda (n)\n                (if (not (in? n numbers))\n                    (result (cons n numbers))\n                    ()))\n               numbers\n              ()))\n  result)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    []\n    (let ((result (make-vector (length numbers) 0)))\n      (for-each (lambda (number)\n                 (if (not (number = numbers/1))\n                     (setf result/1 number)\n                     (setf result/1 number)))\n        numbers))\n    result))\n",
    "  (if (null? numbers)\n    []\n    (let ((result ()))\n      (for-each (lambda (n)\n                  (if (not (in? n numbers))\n                    (result (cons n result))\n                    ()))\n        numbers)))\n  result)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((result ()))\n    (for-each (lambda (n)\n                (if (not (member n result))\n                    (append result n)))\n      numbers))\n  result)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    []\n    (let ((result (make-vector 0 (length numbers))))\n      (for-each (lambda (n)\n                  (if (not (memq n numbers))\n                    (vector-set! result n numbers)\n                    n)\n                numbers)\n        result)))\n)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((result ()))\n    (for-each (lambda (n)\n                (if (not (in? n numbers))\n                    (result (cons n numbers))\n                    ()))\n                numbers\n                (append result (cdr n))))\n  result)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((seen (make-hashtable)))\n    (let ((result ()))\n      (for-each (lambda (x) (hashtable-put seen x x)) numbers)\n      (for-each (lambda (x) (hashtable-get seen x))\n          (if (not (hashtable-ref seen x))\n              (hashtable-put seen x x)\n              (result (append result x)))))))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    []\n    (let ((result (list)))\n      (for-each (lambda (x)\n                  (if (not (member? x numbers))\n                    (result 'append (list x))\n                    (result 'append x)))\n        numbers)))\n  (car (cdr result)))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    []\n    (let ((result (make-vector (length numbers) 0)))\n      (for-each (lambda (x) (vector-set! result x)) numbers)\n      (vector-sort result)\n      (remove-duplicates result))))\n",
    "  (let ((seen (make-hashtable)))\n    (let ((result ()))\n      (for-each (lambda (x) (hashtable-put seen x x)) numbers)\n      (for-each (lambda (x) (hashtable-get seen x)) numbers)\n      (for-each (lambda (x) (hashtable-remove seen x)) numbers)\n      (append result (list (car numbers) (cdr numbers))))))\n",
    "  (if (null? numbers)\n    []\n    (let ((result (make-vector (length numbers) 0)))\n      (for-each (lambda (number)\n                 (if (not (member number result))\n                     (set! result (append result number))\n                     )\n                 )\n           numbers\n           )\n        (reverse result))))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    []\n    (let ((result (make-vector 0 (length numbers))))\n      (for-each (lambda (n)\n                  (if (not (eql? n numbers))\n                    (vector-set! result n numbers)\n                    (vector-set! result n (vector-ref numbers n))))\n        numbers))\n    (vector-set! result (make-vector 0 (length result))))\n)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((seen (make-hashtable)))\n    (let ((result (make-vector 0)))\n      (let ((i 0))\n        (while (< i (vector-length numbers))\n          (if (hashtable-contains? seen numbers[i])\n            (setf result (append result numbers[i])\n               (hashtable-remove seen numbers[i]))\n            (setf i (1+ i)))\n          (hashtable-put seen numbers[i], numbers[i]))\n        result)))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((seen (make-hashtable))\n        (result (make-vector 0)))\n    (for-each (lambda (x) (hashtable-put seen x 0)) numbers)\n    (for-each (lambda (x) (hashtable-get seen x)) numbers)\n    (for-each (lambda (x) (hashtable-remove seen x)) numbers)\n    (for-each (lambda (x) (vector-set! result x)) numbers)\n    result))\n\n;; From a list of strings, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list \"a\" \"b\" \"a\" \"c\"))\n;; (list \"a\" \"c\")",
    "  (let ((seen (make-hashtable))\n        (result (make-list)))\n    (for-each (lambda (number)\n               (hashtable-put seen number)\n               (if (hashtable-ref seen number)\n                   (append result number)))\n      numbers\n      (hashtable-remove seen)))\n)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((seen (make-hashtable)))\n    (let ((result ()))\n      (for-each (lambda (n)\n                  (hashtable-put seen n (hashtable-get seen n)))\n        numbers\n        (hashtable-remove seen n (hashtable-get seen n))))\n    (hashtable-keys seen)\n    (hashtable-values seen)\n    (hashtable-count seen)))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((seen (make-hashtable)))\n    (let ((result ()))\n      (for-each (lambda (n)\n                  (hashtable-put seen n (hashtable-get seen n)))\n        numbers\n        (hashtable-remove seen n (hashtable-get seen n))))\n    (hashtable-keys seen)\n    (hashtable-values seen)\n    (hashtable-remove seen (hashtable-keys seen) (hashtable-values seen))))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((seen (make-hashtable))\n        (result (make-vector)))\n    (for-each (lambda (x) (hashtable-put seen x x)) numbers)\n    (for-each (lambda (x) (hashtable-get seen x)) numbers)\n    (for-each (lambda (x) (hashtable-remove seen x)) numbers)\n    (for-each (lambda (x) (vector-set! result x x)) numbers)\n    result))\n",
    "  (let ((result ()))\n    (for-each (lambda (n)\n                (if (not (in? n numbers))\n                    (result (cons n numbers))\n                    ()))\n                numbers)\n    (reverse result)))\n\n;; From a list of strings, remove all duplicates.\n;; >>> (remove_duplicates (list \"a\" \"b\" \"a\" \"c\" \"a\"))\n;; (list \"a\" \"b\" \"c\")",
    "  (let ((seen (make-hashtable)))\n    (let ((result ()))\n      (for-each (lambda (x)\n                  (hashtable-put seen x (hashtable-get seen x)))\n        numbers\n        (hashtable-for-each (lambda (k v)\n                             (hashtable-remove seen k))\n          seen)))\n    result))\n",
    "  (let ((result ()))\n    (for-each (lambda (n)\n                (if (not (in? n numbers))\n                    (result (cons n numbers))\n                    ()))\n               numbers\n              ()))\n  result)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((seen (make-hashtable)))\n    (let ((result ()))\n      (for-each (lambda (x) (hashtable-put seen x x)) numbers)\n      (for-each (lambda (x) (hashtable-remove seen x)) numbers)\n      (return (append result (map (lambda (x) (hashtable-get seen x)) numbers))))))\n",
    "  (if (null? numbers)\n    ()\n    (let ((result (make-vector 0 (length numbers))))\n      (for-each (lambda (n)\n                  (if (not (member n result))\n                    (vector-set! result n)\n                    (vector-set! result (vector-ref numbers n))))\n        numbers))\n    (vector-sort result)\n    (vector-map (lambda (n) (vector-ref numbers n)) result)))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((seen (make-hashtable)))\n    (let ((result ()))\n      (for-each (lambda (x) (hashtable-put seen x x)) numbers)\n        (for-each (lambda (x) (hashtable-get seen x))\n          (append result (list x)))\n      (reverse result))))\n\n;; From a list of integers, return a list of all the even elements.\n;; >>> (evens (list 1 2 3 4 5 6 7 8 9 10 11))\n;; (list 2 4 6 8 10)",
    "  (if (null? numbers)\n    ()\n    (let ((result (make-vector 0 (length numbers))))\n      (for-each (lambda (n)\n                  (if (not (memq n numbers))\n                    (vector-set! result n)\n                    (vector-set! result numbers)))\n        numbers)))\n  result)\n",
    "  (let ((result (make-vector 0 (length numbers))))\n    (for-each (lambda (n) (vector-set! result n)) numbers)\n    (sort result)\n    (remove-if (lambda (n) (vector-ref numbers n)) result)))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    []\n    (let ((result (make-vector 0 (length numbers))))\n      (for-each (lambda (n)\n                  (if (not (eql? n numbers))\n                    (vector-set! result n numbers)\n                    (vector-set! result n (vector-ref numbers n))))\n        numbers))\n    (vector-sort! result)\n    result))\n\n;; From a list of strings, remove all elements that are duplicated.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list \"a\" \"b\" \"a\" \"c\" \"a\"))\n;; (list \"a\" \"c\")",
    "  (if (null? numbers)\n    []\n    (let ((result (make-vector (length numbers) 0)))\n      (for-each (lambda (n)\n                  (if (not (member n numbers))\n                    (set! result (vector-set! result n numbers)))\n                  numbers)\n        result))))\n",
    "  (let ((result ()))\n    (for-each (lambda (n)\n                (if (not (in? n numbers))\n                    (result (cons n numbers))\n                    ()))\n              numbers\n              (append result (cdr n))))\n  result)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    []\n    (let ((result (make-vector (length numbers) 0)))\n      (for-each (lambda (x)\n                 (if (not (member? x numbers))\n                     (set-vector-set! result x x)\n                     (set-vector-set! result x (car numbers))))\n           numbers)\n        result))))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((seen (make-hashtable))\n        (result (make-vector)))\n    (let ((i 0))\n      (while (< i (vector-length numbers))\n        (if (hashtable-contains? seen numbers/:i)\n            (setf result (append result numbers/:i)\n                 (hashtable-remove seen numbers/:i))\n          (hashtable-put seen numbers/:i true)\n          (setf i (+ i 1))))\n      result))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((result ()))\n    (for-each (lambda (n)\n                (if (not (in? n numbers))\n                    (result (cons n numbers))\n                    ()))\n                numbers\n              ()))\n  result)\n\n;; From a list of strings, remove all empty strings.\n;; >>> (remove_empty_strings (list \"a\" \"b\" \"\" \"c\"))\n;; (list \"a\" \"b\" \"c\")",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i (length numbers))\n        (set! (aref counts i) (aref numbers i))\n        (set! i (1+ i)))\n      (values counts))))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    ()\n    (let ((result (list)))\n      (for-each (lambda (n)\n                  (if (not (null? (cdr n)))\n                    (if (not (car n) in result)\n                      (result (append result (car n)))\n                      (result (append result (car n))))\n                    (result (append result (car n))))\n                 numbers)))\n    (reverse result)))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((counts (make-hashtable)))\n    (for-each numbers (lambda (number)\n      (hashtable-put counts number (hashtable-get counts number)))\n      (hashtable-remove counts number))))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    ()\n    (let ((result (make-vector 0 (length numbers))))\n      (for-each (lambda (n)\n                  (if (not (memq n numbers))\n                    (vector-set! result n numbers)\n                    (vector-set! result n (vector-ref numbers n))))\n        numbers))\n    (vector-sort! result numbers)\n    result))\n",
    "  (let ((result ()))\n    (for-each (lambda (n)\n                (if (not (in? n numbers))\n                    (append result n)))\n      numbers))\n  (reverse result))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    []\n    (let ((result (list)))\n      (for-each (lambda (x)\n                  (if (not (member? x result))\n                    (result (append result x))))\n        numbers)))\n)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    []\n    (let ((result (make-vector 0 (length numbers))))\n      (for-each (lambda (n)\n                  (if (not (member n numbers))\n                    (vector-set! result n numbers)\n                    (vector-set! result n (vector-ref numbers n))))\n        numbers))\n    (vector-sort! result numbers)\n    (vector-copy! result numbers)))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((seen (make-hashtable)))\n    (let ((result (make-vector 0)))\n      (for-each (lambda (number)\n                  (hashtable-put seen number)\n                  (vector-set! result number))\n        numbers\n        (values (hashtable-keys seen)\n          (hashtable-values seen))))))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((result ()))\n    (for-each (lambda (n)\n                (if (not (member n result))\n                    (append result n)))\n      numbers))\n  result)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    []\n    (let ((result ()))\n      (for-each (lambda (n)\n                  (if (not (member n result))\n                    (set! result (append result n))\n                    )\n                 numbers)\n        result)\n      (reverse result))))\n\n;; From a list of strings, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list \"a\" \"b\" \"a\" \"c\" \"b\"))\n;; (list \"a\" \"c\")",
    "  (let ((result ()))\n    (for-each (lambda (x)\n                (if (not (member? x result))\n                    (result (append result x))))\n           numbers))\n  result)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((result (make-vector 0 (length numbers))))\n    (for-each\n      (lambda (n)\n        (if (not (in? n numbers))\n            (vector-set! result n)\n            (vector-set! result (vector-ref numbers n))))\n      numbers))\n  result)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    []\n    (let ((result (make-vector (length numbers) 0)))\n      (for-each (lambda (x) (vector-set! result x)) numbers)\n      (vector-sort! result)\n      (remove-duplicates result))))\n",
    "  (let ((seen (make-hashtable)))\n    (let ((result ()))\n      (for-each (lambda (x)\n                  (hashtable-put seen x (hashtable-get seen x)))\n        numbers\n        (hashtable-for-each (lambda (k v)\n                             (hashtable-remove seen k))\n          seen)))\n    result))\n",
    "  (let ((result ()))\n    (for-each (lambda (n)\n                (if (not (in? n numbers))\n                    (result (cons n numbers))\n                    ()))\n                numbers)\n    result))\n\n;; From a list of strings, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list \"a\" \"b\" \"a\" \"c\"))\n;; (list \"a\" \"c\")",
    "  (if (null? numbers)\n    ()\n    (let ((result (make-vector 0 (length numbers))))\n      (for-each (lambda (n)\n                  (if (not (memq n numbers))\n                    (vector-set! result n numbers)\n                    (vector-set! result n (vector-ref numbers n))))\n        numbers))\n    (vector-set! result (make-vector 0 (length result))))\n)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((seen (make-hashtable)) (result (list)))\n    (for-each (lambda (number)\n               (hashtable-put seen number)\n               (hashtable-ref seen number))\n      numbers\n      (let ((next (cdr numbers)))\n        (if (null? next)\n            (hashtable-ref seen first)\n            (hashtable-put seen first)\n            (cons first (remove_duplicates next))))))\n  result)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((seen (make-hashtable))\n        (result ()))\n    (for-each (lambda (n)\n                (hashtable-put seen n\n                  (hashtable-get seen n)))\n      numbers\n      (hashtable-remove seen\n       (hashtable-ref seen n))))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((result ()))\n    (for-each (lambda (n)\n                (if (not (in? n numbers))\n                    (result (append result n))))\n      numbers))\n  result)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    []\n    (let ((seen (make-hashtable))\n          (result (make-vector 0)))\n      (for-each (lambda (x)\n                 (hashtable-put seen x (hashtable-get seen x)))\n           numbers\n           (if (not (hashtable-ref seen x))\n               (vector-set! result (vector-set! result 0) x)\n               (vector-set! result (vector-set! result (vector-ref result) 1) x))))))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((result ()))\n    (for-each (lambda (n)\n                (if (not (in? n numbers))\n                    (result (cons n numbers))\n                    ()))\n               numbers\n              ()))\n  result)\n",
    "  (let ((seen (make-hashtable)) (result (list)))\n    for-each (lambda (number)\n              (hashtable-put seen number (hashtable-ref seen number)))\n      numbers\n    (hashtable-keys seen)\n    result)\n)\n",
    "  (let ((counts (map (lambda (x) (count numbers x))) ()))\n    (if (empty? counts) numbers\n      (let ((i (0)))\n        (while (< i (length numbers))\n          (if (member (numbers i) (cdr counts))\n            (setf (cdr counts) (cdr (cdr counts)))\n            (setf i (1+ i))))))))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    ()\n    (let ((result (make-vector 0 (length numbers))))\n      (for-each (lambda (n)\n                  (if (not (member n result))\n                    (set-vector-set! result n)\n                    (set-vector-set! result (vector-ref numbers n))))\n        numbers))\n    (vector-sort result)\n    result))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((counts (make-hashtable)))\n    (for-each numbers (lambda (number)\n      (hashtable-put counts number (hashtable-ref counts number))))\n    (let ((result (make-vector (length numbers) 0)))\n      (for-each numbers (lambda (number)\n        (if (hashtable-ref counts number)\n          (vector-set! result number)\n          (vector-set! result number))))\n      result)))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    []\n    (let ((result (make-vector (length numbers) 0)))\n      (for-each (lambda (x)\n                 (if (not (eq? x numbers))\n                     (vector-set! result x numbers)\n                     (vector-set! result x x)))\n           numbers)\n        result)))\n",
    "  (let ((seen (make-hashtable)))\n    (let ((result ()))\n      (for-each (lambda (x) (hashtable-put seen x x)) numbers)\n      (for-each (lambda (x) (hashtable-remove seen x)) numbers)\n      (reverse result))))\n",
    "  (if (null? numbers)\n    []\n    (let ((result (make-vector (length numbers) 0)))\n      (for-each (lambda (n)\n                  (if (not (null? (cdr n)))\n                    (setf result (vector-set! result n)\n                      (if (null? (cdr (cdr n)))\n                        (vector-set! result (car n) 1)\n                        (vector-set! result (car n) (car (cdr n)))))\n                    (vector-set! result n 0)))\n                numbers)))\n  (vector->list result))\n\n;; From a list of strings, remove all elements that are empty strings.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_empty_strings (list \"a\" \"b\" \"\" \"c\"))\n;; (list \"a\" \"c\")",
    "  (let ((seen (make-hashtable)))\n    (let ((result ()))\n      (for-each (lambda (x)\n                  (hashtable-put seen x (hashtable-get seen x)))\n        numbers\n        (hashtable-for-each (lambda (k v)\n                             (hashtable-remove seen k))\n          seen))))\n)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((result ()))\n    (for-each (lambda (x)\n                (if (not (member? x result))\n                    (result (append result x))))\n      numbers))\n  result)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((result ()))\n    (for-each (lambda (x)\n                (if (not (member? x result))\n                    (result (append result x))))\n      numbers))\n  result)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((result ()))\n    (for-each (lambda (x)\n                (if (not (member? x result))\n                    (result (append result x))))\n           numbers))\n  result)\n",
    "  (let ((seen (make-hashtable)))\n    (let ((result ()))\n      (for-each (lambda (n) (hashtable-put seen n nil)) numbers)\n      (for-each (lambda (n) (hashtable-remove seen n)) numbers)\n      (for-each (lambda (n) (hashtable-put seen n n)) numbers)\n      (for-each (lambda (n) (hashtable-ref seen n)) result)\n      result))\n)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    ()\n    (let ((result (make-vector 0 (length numbers))))\n      (for-each (lambda (n)\n                  (if (not (eql? n numbers))\n                    (vector-set! result n numbers)\n                    (vector-set! result n)))\n        numbers))\n      (vector-sort! result)\n      (vector-copy! result numbers)))\n\n;; From a list of strings, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list \"a\" \"b\" \"a\" \"c\"))\n;; (list \"a\" \"c\")",
    "  (let ((seen (make-hashtable)))\n    (let ((result ()))\n      (for-each (lambda (x) (hashtable-put seen x x)) numbers)\n      (for-each (lambda (x) (hashtable-remove seen x)) numbers)\n      (reverse result)\n      result))\n)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((result (make-vector 0 (length numbers))))\n    (for-each (lambda (n) (vector-set! result n)) numbers)\n    (sort result)\n    (remove-if (lambda (n) (vector-ref result n)) numbers)))\n\n;; From a list of strings, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list \"a\" \"b\" \"a\" \"c\"))\n;; (list \"a\" \"c\")",
    "  (let ((seen (make-hashtable)))\n    (let ((result (make-vector 0)))\n      (let ((i 0))\n        (while (< i (vector-length numbers))\n          (if (hashtable-contains? seen numbers/:i)\n            (setf result (append result numbers/:i)\n               (hashtable-remove seen numbers/:i))\n            (hashtable-put seen numbers/:i)\n            (setf i (1+ i))))))\n    (vector-set! result 0)\n    result))\n",
    "  (let ((seen (make-hashtable)))\n    (let ((result ()))\n      (for-each (lambda (x) (hashtable-put seen x x)) numbers)\n        (for-each (lambda (x) (hashtable-get seen x))\n          (if (not (eq? x result))\n            (cons x result))))))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((seen (make-hashtable))\n        (result (make-vector 0)))\n    (for-each (lambda (x) (hashtable-put seen x 0)) numbers)\n    (for-each (lambda (x) (hashtable-get seen x)) numbers)\n    (for-each (lambda (x) (hashtable-remove seen x)) numbers)\n    (for-each (lambda (x) (vector-set! result x)) numbers)\n    result))\n",
    "  (let ((seen (make-hashtable)))\n    (let ((result ()))\n      (for-each (lambda (x) (hashtable-put seen x x)) numbers)\n        (for-each (lambda (x) (hashtable-get seen x))\n          (if (not (eq? x result))\n            (cons x result))))))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    []\n    (let ((result (make-vector 0 (length numbers))))\n      (for-each (lambda (x) (vector-set! result x)) numbers)\n      (vector-sort! result)\n      (remove-duplicates result))))\n",
    "  (let ((seen (make-hashtable)))\n    (let ((result (make-vector 0)))\n      (for-each (lambda (x) (hashtable-put seen x 0)) numbers)\n      (for-each (lambda (x) (hashtable-get seen x)) numbers)\n      (for-each (lambda (x) (hashtable-remove seen x)) numbers)\n      (for-each (lambda (x) (vector-set! result x)) numbers)\n      result)))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    []\n    (let ((result (make-vector (length numbers) 0))\n          (counts (make-vector (length numbers) 0)))\n      (for-each (lambda (n)\n                 (if (not (eq? n numbers))\n                     (set! result (vector-set! result n)\n                                 (vector-set! counts n 1))\n                     (set! counts n 1)))\n           numbers)\n      (cond ((> (vector-length counts) 1)\n             (return (vector-map (lambda (n) (vector-ref result n)) counts)))\n           ((= (vector-length counts) 1)\n             (return (vector-ref result numbers)))\n           (else\n             (return (vector-map (lambda (n) (vector-ref result n)) numbers))))))\n",
    "  (if (null? numbers)\n    []\n    (let ((result (make-vector (length numbers) 0)))\n      (for-each (lambda (n) (vector-set! result n)) numbers)\n      (vector-sort result)\n      (remove-duplicates result))))\n\n;; From a list of strings, remove all empty strings.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list \"a\" \"b\" \"\" \"c\"))\n;; (list \"a\" \"b\" \"c\")",
    "  (let ((seen (make-hashtable))\n        (result (make-vector)))\n    (for-each\n      (lambda (number)\n        (hashtable-put seen number)\n        (vector-set! result number))\n      numbers))\n\n;; From a list of strings, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list \"a\" \"b\" \"a\" \"c\"))\n;; (list \"a\" \"c\")",
    "  (if (null? numbers)\n    ()\n    (let ((result (make-vector 0 (length numbers))))\n      (for-each (lambda (n)\n                  (if (not (memq n numbers))\n                    (vector-set! result n numbers)\n                    (vector-set! result n (vector-ref numbers n))))\n        numbers))\n    (vector-set! result (make-vector 0 (length result))))\n)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    ()\n    (let ((result (make-vector 0 (length numbers))))\n      (for-each (lambda (n)\n                  (if (not (memq n numbers))\n                    (vector-set! result n numbers)\n                    n)\n                numbers)\n        result)\n      result)))\n",
    "  (let ((result ()))\n    (for-each (lambda (n)\n                (if (not (member n result))\n                    (result (cons n result))))\n      numbers))\n  result)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((seen (make-hashtable)))\n    (let ((result ()))\n      (for-each (lambda (n)\n                  (hashtable-put seen n (hashtable-get seen n)))\n        numbers\n        (hashtable-for-each (lambda (k v)\n                             (hashtable-remove seen k v)\n                             (hashtable-put result k v)))\n        (hashtable-keys seen))))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((seen (make-hashtable)))\n    (let ((result ()))\n      (for-each (lambda (x) (hashtable-put seen x x)) numbers)\n      (for-each (lambda (x) (hashtable-remove seen x)) numbers)\n      (reverse result)))\n  (if (empty? numbers) numbers\n    (remove_duplicates (cdr numbers))))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    []\n    (let ((result (make-vector (length numbers) 0)))\n      (for-each (lambda (n)\n                  (if (not (eql? n numbers))\n                    (setf result (vector-set! result n numbers)))\n                  numbers)\n        result))))\n",
    "  (let ((seen (make-hashtable)))\n    (let ((result ()))\n      (for-each (lambda (number)\n                  (hashtable-put seen number)\n                  (if (hashtable-ref seen number)\n                      (append result number)))\n        numbers\n        (hashtable-remove seen number))))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((seen (make-hashtable)))\n    (let ((result (make-list)))\n      (for-each (lambda (x) (hashtable-put seen x x)) numbers)\n      (for-each (lambda (x) (hashtable-get seen x))\n          (if (not (eq? x result))\n              (append result x)))\n      result))\n)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    []\n    (let ((result (make-vector (length numbers) 0)))\n      (for-each (lambda (n)\n                  (if (not (eql? n numbers))\n                    (setf result (vector-set! result n numbers)))\n                numbers)\n        result)\n      result)))\n",
    "  (if (null? numbers)\n    ()\n    (let ((result (make-vector 0 (length numbers))))\n      (let ((i 0))\n        (while (< i (length numbers))\n          (if (not (eql? (aref numbers i) (aref numbers (1+ i))))\n            (setf (aref result i) (aref numbers i))\n            (setf i (1+ i)))\n          (setf i (1+ i)))\n        (setf (length result) (length numbers))\n        (setf numbers (cdr numbers))\n        (setf numbers (cdr numbers))\n        (setf numbers (cdr numbers))\n        (setf numbers (cdr numbers))\n        (setf numbers (cdr numbers))\n        (setf numbers (cdr numbers))\n        (setf numbers (cdr numbers))\n        (setf numbers (cdr numbers))\n        (setf numbers (cdr numbers))\n        (setf numbers (cdr numbers))\n        (setf numbers (cdr numbers))\n        (setf numbers (cdr numbers))\n        (setf numbers (cdr numbers))\n        (setf numbers (cdr numbers))\n        (setf numbers (cdr numbers))\n        (setf numbers (cdr numbers))\n        (setf numbers (cdr numbers))\n        (setf numbers (cdr numbers))\n        (setf numbers (cdr numbers))\n        (setf numbers (cdr numbers))\n        (setf numbers (cdr numbers))\n        (setf numbers (cdr numbers))\n        (setf numbers (cdr numbers))\n        (setf numbers (cdr numbers))\n        (setf numbers (cdr numbers))\n        (setf numbers (cdr numbers))\n        (setf numbers (cdr numbers))\n        (setf numbers (cdr numbers))\n        (setf numbers (cdr numbers))\n        (setf numbers (cdr numbers))\n        (setf numbers (cdr numbers))\n        (setf numbers (cdr numbers))\n        (setf numbers (cdr numbers))\n        (setf numbers (cdr numbers))\n        (setf numbers (cdr numbers))\n        (setf numbers",
    "  (let ((seen (make-hashtable)))\n    (let ((result ()))\n      (for-each (lambda (x)\n                  (hashtable-put seen x (hashtable-get seen x)))\n        numbers\n        (hashtable-for-each (lambda (x y)\n                             (hashtable-put seen x y)\n                             (hashtable-remove seen x))\n          seen)))\n    (reverse result)))\n",
    "  (let ((result ()))\n    (for-each (lambda (x)\n                (if (not (member? x result))\n                    (result (append result x))))\n      numbers))\n  result)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((result ()))\n    (for-each (lambda (n)\n                (if (not (in? n numbers))\n                    (result (cons n numbers))\n                    ()))\n              numbers\n              (append result (cdr n))))\n  result)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((seen (make-hashtable)))\n    (let ((result ()))\n      (for-each (lambda (number)\n                  (hashtable-put seen number)\n                  (if (hashtable-ref seen number)\n                      (append result number)))\n        numbers\n        (hashtable-remove seen number)))\n    (reverse result)))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((result ()))\n    (for-each (lambda (n)\n                (if (not (in? n numbers))\n                    (result (cons n numbers))\n                    ()))\n               numbers\n              ()))\n  result)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    []\n    (let ((result (make-vector (length numbers) 0)))\n      (for-each (lambda (n)\n                  (if (not (eql? n numbers))\n                    (set! result (vector-set! result n numbers))))\n        numbers))\n    result))\n\n;; From a list of strings, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list \"a\" \"b\" \"a\" \"c\"))\n;; (list \"a\" \"c\")",
    "  (let ((seen (make-hashtable)))\n    (let ((result ()))\n      (for-each (lambda (x)\n                  (hashtable-put seen x (hashtable-get seen x)))\n        numbers\n        (hashtable-for-each (lambda (k v)\n                             (hashtable-put seen k (hashtable-ref seen v))))\n      (hashtable-keys seen)\n      (hashtable-values seen)\n      (map (lambda (x) (hashtable-ref seen x)) result))))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((result (make-vector 0 (length numbers))))\n    (for-each (lambda (n) (vector-set! result n)) numbers)))\n\n;; From a list of strings, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list \"a\" \"b\" \"a\" \"c\"))\n;; (list \"a\" \"c\")",
    "  (let ((seen (make-hashtable))\n        (result (make-vector)))\n    (for-each (lambda (x) (hashtable-put seen x 0)) numbers)\n    (for-each (lambda (x) (hashtable-put seen x 1)) numbers)\n    (for-each (lambda (x) (hashtable-put seen x 0)) result)\n    (for-each (lambda (x) (hashtable-put seen x 1)) result)\n    (result)))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    []\n    (let ((result (make-vector (length numbers) 0)))\n      (for-each (lambda (n)\n                  (if (not (eql? n numbers))\n                    (setf result (vector-set! result n numbers)))\n                  numbers)\n        result))\n    result))\n\n;; From a list of strings, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list \"a\" \"b\" \"a\" \"c\" \"b\"))\n;; (list \"a\" \"c\")",
    "  (let ((seen (make-hashtable)))\n    (let ((result ()))\n      (for-each (lambda (n)\n                  (hashtable-put seen n (hashtable-get seen n)))\n        numbers\n        (hashtable-remove seen n (hashtable-get seen n))))\n    (hashtable-keys seen)\n    (hashtable-values seen)\n    (hashtable-remove seen (hashtable-keys seen))))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    []\n    (let ((result (list)))\n      (for-each (lambda (x)\n                  (if (not (member? x result))\n                    (result 'append (list x))\n                    (result 'append x)))\n        numbers)))\n)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    []\n    (let ((result (make-vector (length numbers) 0)))\n      (for-each (lambda (n)\n                  (if (not (member n numbers))\n                    (set! result (vector-set! result n numbers)))\n                  numbers)\n        result))\n    result))\n",
    "  (if (null? numbers)\n    ()\n    (let ((result (make-vector 0 (length numbers))))\n      (for-each (lambda (n)\n                  (if (not (memq n numbers))\n                    (vector-set! result n numbers)\n                    n)\n                numbers)\n        result)\n      result)))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    ()\n    (let ((result (make-vector 0 (length numbers))))\n      (for-each (lambda (n) (vector-set! result n)) numbers)\n      (vector-sort result)\n      (remove-duplicates result))))\n",
    "  (if (null? numbers)\n    []\n    (let ((result (make-vector (length numbers) 0)))\n      (for-each (lambda (x) (vector-set! result x)) numbers)\n      (vector-sort result)\n      (remove-duplicates result))))\n",
    "  (if (null? numbers)\n    []\n    (let ((seen (make-hashtable))\n          (result ()))\n      (for-each (lambda (x)\n                  (hashtable-put seen x (hashtable-get seen x)))\n           numbers\n           (if (hashtable-size seen)\n             (let ((x (car numbers)))\n               (hashtable-remove seen x)\n               (cons x result)))))\n      (reverse result)))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    ()\n    (let ((result (list)))\n      (for-each (lambda (n)\n                  (if (not (member n result))\n                    (result (append result n))))\n        numbers)))\n)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((seen (make-hashtable))\n        (result ()))\n    (for-each (lambda (x) (hashtable-put seen x x)) numbers)\n    (for-each (lambda (x) (hashtable-remove seen x)) numbers)\n    (reverse result)))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    []\n    (let ((seen (make-hashtable))\n          (result (make-vector 0))))\n    (let ((i 0))\n      (while (< i (vector-length numbers))\n        (if (hashtable-contains? seen numbers[i])\n            (setf result (append result numbers[i])\n              (delete numbers[i]))\n            (hashtable-put seen numbers[i])\n            (setf i (1+ i))))\n      result)))\n",
    "  (if (null? numbers)\n    []\n    (let ((result (make-vector (length numbers) 0)))\n      (for-each (lambda (n)\n                  (if (not (member n numbers))\n                    (set! result (vector-set! result n numbers)))\n                 numbers)\n        result))\n    result))\n",
    "  (if (null? numbers)\n    ()\n    (let ((result (list)))\n      (for-each (lambda (n)\n                  (if (not (member n result))\n                    (result (append result n))))\n        numbers)))\n)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    []\n    (let ((seen (make-hashtable))\n          (result (make-vector 0)))\n      (for-each (lambda (x) (hashtable-put seen x 0)) numbers)\n      (for-each (lambda (x)\n                 (if (hashtable-ref seen x)\n                     (vector-set! result (vector-ref result) x)\n                     (vector-set! result (vector-ref result) x)))\n           result)))\n\n;; From a list of strings, remove all empty strings.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_empty_strings (list \"a\" \"b\" \"\" \"c\"))\n;; (list \"a\" \"b\" \"c\")",
    "  (let ((result ()))\n    (for-each (lambda (x)\n                (if (not (member? x result))\n                    (result (append result x))))\n      numbers))\n  result)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    []\n    (let ((result (make-vector 0 (length numbers))))\n      (for-each (lambda (n)\n                  (if (not (member n result))\n                    (set-vector-set! result n)\n                    ()))\n        numbers)))\n  result)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((seen (make-hashtable)))\n    (let ((result ()))\n      (for-each (lambda (n)\n                  (hashtable-put seen n (hashtable-get seen n)))\n        numbers\n        (hashtable-for-each (lambda (k v)\n                             (hashtable-remove seen k v)\n                             (hashtable-put result k v)))\n        (hashtable-keys seen)\n        (hashtable-values seen))))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((result ()))\n    (for-each (lambda (n)\n                (if (not (in? n numbers))\n                    (result (cons n numbers))\n                    ()))\n          numbers\n          (append result (cdr n))))\n  result)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    []\n    (let ((result ()))\n      (for-each (lambda (x)\n                  (if (not (member? x result))\n                    (result (append result x))))\n        numbers)))\n)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((seen (make-hashtable)))\n    (let ((result ()))\n      (for-each (lambda (x)\n                  (hashtable-put seen x (hashtable-get seen x)))\n        numbers\n        (hashtable-for-each (lambda (k v)\n                             (hashtable-remove seen k)\n                             (hashtable-put result v))\n          seen)))\n    result))\n",
    "  (if (null? numbers)\n    ()\n    (let ((result (make-vector 0 (length numbers))))\n      (for-each (lambda (n)\n                  (if (not (eql? n numbers))\n                    (vector-set! result n numbers)\n                    (vector-set! result n)))\n        numbers))\n      (vector-set! result '#f)\n      result))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((result ()))\n    (for-each (lambda (x)\n                (if (not (member? x result))\n                    (result (append result x))))\n           numbers))\n  result)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    ()\n    (let ((result (make-vector 0 (length numbers))))\n      (let ((i 0))\n        (while (< i (length numbers))\n          (if (not (eql? (vector-ref numbers i) (vector-ref result i)))\n            (setf (vector-set! result i (vector-ref numbers i)) 1)\n            (setf i (1+ i)))\n          (setf i (1+ i)))\n        (return (vector-map vector-ref result))))))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    []\n    (let ((result (make-vector (length numbers) 0)))\n      (for-each (lambda (number)\n                 (if (not (number = numbers/1))\n                     (setf result/1 number)\n                     (setf result/1 number)))\n        numbers))\n    result))\n",
    "  (define (remove-duplicates-helper numbers)\n    (if (null? numbers)\n      numbers\n      (let ((last (car numbers)))\n        (if (null? (cdr numbers))\n          (cons last (remove-duplicates-helper (cdr numbers)))\n          (cons last (remove-duplicates-helper (cdr numbers)))\n          (remove-duplicates-helper (cdr numbers))))))\n  (remove-duplicates-helper numbers))\n",
    "  (if (null? numbers)\n    []\n    (let ((result (make-vector (length numbers) 0)))\n      (for-each (lambda (n)\n                  (if (not (eql? n numbers))\n                    (setf result (vector-set! result n numbers)))\n                numbers)\n        result))\n    result))\n\n;; From a list of strings, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list \"a\" \"b\" \"a\" \"c\"))\n;; (list \"a\" \"c\")",
    "  (let ((seen (make-hashtable)))\n    (let ((result ()))\n      (for-each (lambda (x)\n                  (hashtable-put seen x (hashtable-get seen x)))\n        numbers\n        (hashtable-for-each (lambda (k v)\n                             (hashtable-put seen k (hashtable-get seen k)))\n          seen)))\n    (hashtable-keys seen)\n    (hashtable-values seen)\n    result))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((seen (make-hashtable)))\n    (let ((result (make-vector 0)))\n      (for-each (lambda (x) (hashtable-put seen x 0)) numbers)\n      (for-each (lambda (x) (hashtable-put seen x 1)) numbers)\n      (for-each (lambda (x) (hashtable-put seen x 0)) result)\n      (for-each (lambda (x) (hashtable-put seen x 1)) result)\n      result)))\n\n;; From a list of strings, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list \"a\" \"b\" \"a\" \"c\"))\n;; (list \"a\" \"c\")",
    "  (let ((seen (make-hashtable)))\n    (let ((result (make-vector 0)))\n      (let ((i 0))\n        (while (< i (vector-length numbers))\n          (if (hashtable-contains? seen numbers/:i)\n            (setf result (append result numbers/:i)\n               (hashtable-remove seen numbers/:i))\n            (hashtable-put seen numbers/:i true)\n            (setf i (1+ i)))))))\n  (vector->list result))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((seen (make-hashtable)))\n    (let ((result ()))\n      (for-each (lambda (x) (hashtable-put seen x x)) numbers)\n        (for-each (lambda (x) (hashtable-get seen x))\n          (append result (list x))))\n    result))\n",
    "  (if (null? numbers)\n    ()\n    (let ((result (make-vector 0 (length numbers))))\n      (for-each (lambda (n)\n                  (if (not (eql? n numbers))\n                    (vector-set! result n numbers)\n                    (vector-set! result n (vector-ref numbers n))))\n        numbers))\n    (vector-sort! result)\n    (vector-map (lambda (n) (vector-ref numbers n)) result)))\n\n;; From a list of strings, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list \"a\" \"b\" \"a\" \"c\"))\n;; (list \"a\" \"c\")",
    "  (if (null? numbers)\n    []\n    (let ((result (make-vector 0 (length numbers))))\n      (for-each (lambda (n)\n                  (if (not (member n result))\n                    (set-vector-set! result n)\n                    ()))\n        numbers)))\n  result)\n",
    "  (let ((seen (make-hashtable)))\n    (let ((result ()))\n      (for-each (lambda (x) (hashtable-put seen x x)) numbers)\n      (for-each (lambda (x) (hashtable-get seen x)) numbers)\n      (for-each (lambda (x) (hashtable-remove seen x)) numbers)\n      (append result (list (car numbers) (cdr numbers))))))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((result ()))\n    (for-each (lambda (n)\n                (if (not (in? n numbers))\n                    (result (cons n numbers))\n                    ()))\n          numbers\n          (append result (cdr n))))\n  result)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    ()\n    (let ((result (list)))\n      (for-each (lambda (x)\n                  (if (not (member? x result))\n                    (result 'append (list x))\n                    ()))\n        numbers)))\n)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    []\n    (let ((result ()))\n      (for-each (lambda (n)\n                  (if (not (in? n numbers))\n                    (result (cons n result))\n                    ()))\n        numbers)))\n  result)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((seen (make-hashtable))\n        (result (make-vector)))\n    for-each (lambda (number)\n              (hashtable-put seen number 0))\n      numbers\n    (for-each (lambda (number)\n                (hashtable-get seen number)\n                (if (not (hashtable-ref seen number))\n                    (vector-set! result (vector-push! result number))))\n              numbers)\n    result)\n\n;; From a list of strings, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list \"a\" \"b\" \"a\" \"c\"))\n;; (list \"a\" \"c\")",
    "  (let ((result ()))\n    (for-each (lambda (x)\n                (if (not (member? x result))\n                    (result (cons x result))))\n      numbers))\n  result)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((seen (make-hashtable)))\n    (let ((result (make-vector 0)))\n      (let ((numbers (reverse numbers)))\n        (while (not (null? numbers))\n          (if (hashtable-get! seen numbers)\n            (setf result (append result numbers) numbers)\n            (hashtable-put! seen numbers numbers)\n            (setf numbers (cdr numbers))))\n        result))))\n",
    "  (let ((seen (make-hashtable)))\n    (let ((result ()))\n      (for-each (lambda (x)\n                  (hashtable-put seen x (hashtable-get seen x)))\n        numbers\n        (hashtable-remove seen x result)))\n    result))\n",
    "  (let ((seen (make-hashtable)))\n    (let ((result (make-list)))\n      (for-each\n        (lambda (number)\n          (hashtable-put seen number)\n          (if (hashtable-ref seen number)\n            (append result number)\n            (append result number)))\n        numbers)))\n)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    []\n    (let ((result (list)))\n      (for-each (lambda (n)\n                  (if (not (in? n numbers))\n                    (result (append result n))))\n        numbers)))\n)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    []\n    (let ((result (make-vector (length numbers) 0)))\n      (for-each (lambda (n)\n                  (if (not (eql? n numbers))\n                    (setf result (vector-set! result n numbers)))\n                numbers)\n        result))\n    result))\n\n;; From a list of strings, remove all duplicates.\n;; >>> (remove_duplicates (list \"a\" \"b\" \"a\" \"c\" \"b\"))\n;; (list \"a\" \"c\")",
    "  (let ((seen (make-hashtable)))\n    (let ((result ()))\n      (for-each (lambda (x) (hashtable-put seen x x)) numbers)\n        (for-each (lambda (x) (hashtable-remove seen x)) numbers)\n        (append result (list (first numbers) (second numbers))))\n    result))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    ()\n    (let ((result (list)))\n      (for-each (lambda (n)\n                  (if (not (member n result))\n                    (result (append result n))))\n        numbers)))\n)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((seen (make-hashtable)))\n    (let ((result ()))\n      (for-each (lambda (x) (hashtable-put seen x x)) numbers)\n      (for-each (lambda (x) (hashtable-get seen x))\n        (if (not (eq? x result))\n            (cons x result)))\n      result))\n)\n",
    "  (let ((result ()))\n    (for-each (lambda (n)\n                (if (not (member n result))\n                    (result (cons n result))))\n      numbers))\n  result)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    []\n    (let ((result ()))\n      (for-each (lambda (n)\n                  (if (not (member n result))\n                    (set! result (cons n result))\n                    ()))\n        numbers)))\n  result)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((seen (make-hashtable)))\n    (let ((result ()))\n      (for-each (lambda (number)\n                  (hashtable-put seen number\n                     (hashtable-ref result number)))\n           numbers\n         (hashtable-ref seen number))))\n  result)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((seen (make-hashtable)))\n    (let ((result ()))\n      (for-each (lambda (n)\n                  (hashtable-put seen n (hashtable-get seen n)))\n           numbers\n           (hashtable-ref seen n)\n           (append result n)))\n    (reverse result)))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (define (remove_duplicates_helper l)\n    (cond\n      [(null? l) (l)]\n      [else\n        (let* ([(i, x) (first l)]\n                [(j, y) (second l)])\n          (if (eq? x y)\n              (remove_duplicates_helper (cdr l))\n              (cons (car l) (remove_duplicates_helper (cdr l)))))]))\n  (remove_duplicates_helper (numbers)))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    ()\n    (let ((result (make-vector 0 (length numbers))))\n      (for-each (lambda (n)\n                  (if (not (eql? n numbers))\n                    (vector-set! result n numbers)\n                    (vector-set! result n (vector-ref numbers n))))\n        numbers))\n    (vector-sort! result numbers)\n    result))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    []\n    (let ((seen (make-hashtable (length numbers) #f)))\n      (for-each (lambda (x) (hashtable-put seen x)) numbers)\n      (let ((result (make-vector (length (hashtable-keys seen))))\n            (i 0))\n        (for-each (lambda (x) (vector-set! result i x))\n           (hashtable-keys seen))\n        (values result)))\n  ))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((seen (make-hashtable)))\n    (let ((result (make-vector 0)))\n      (for-each (lambda (x) (hashtable-put seen x 0)) numbers)\n      (for-each (lambda (x) (hashtable-put seen x 1)) numbers)\n      (for-each (lambda (x) (hashtable-put seen x 0)) result)\n      (for-each (lambda (x) (hashtable-put seen x 1)) result)\n      (result)))\n)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    []\n    (let ((seen (make-hashtable))\n          (result ()))\n      (for-each (lambda (number)\n                 (hashtable-put seen number)\n                 (if (not (hashtable-ref seen number))\n                     (hashtable-put result number)\n                     (set-car! result (cdr result))))\n           numbers)))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    ()\n    (let ((result (make-vector 0 (length numbers))))\n      (for-each (lambda (n)\n                  (if (not (memq n numbers))\n                    (vector-set! result n numbers)\n                    (vector-set! result n (vector-ref numbers n))))\n        numbers))\n    (vector-set! result (make-vector 0 (length result))))\n)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((seen (make-hashtable)))\n    (let ((result ()))\n      (for-each (lambda (x) (hashtable-put seen x x)) numbers)\n      (for-each (lambda (x) (hashtable-remove seen x)) numbers)\n      (reverse result))))\n\n;; From a list of integers, return a list of all the even elements.\n;; >>> (evens (list 1 2 3 4 5 6 7 8 9))\n;; (list 2 4 6 8)",
    "  (let ((seen (make-hashtable))\n        (result (make-vector)))\n    (for-each (lambda (x)\n                (hashtable-put seen x 0))\n      numbers\n      (for-each (lambda (x)\n                  (hashtable-put seen x 1))\n        result\n        (reverse result))))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((result ()))\n    (for-each (lambda (n)\n                (if (not (in? n numbers))\n                    (result (cons n numbers))\n                    ()))\n          numbers\n          (append result (cdr n))))\n  result)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    ()\n    (let ((result (make-vector 0 (length numbers))))\n      (let ((i 0))\n        (while (< i (length numbers))\n          (if (not (eqv? numbers/:i numbers/:i+1))\n            (setf result/:i numbers/:i)\n            (setf i (1+ i))))\n        result)))\n  (if (null? numbers)\n    ()\n    (let ((result (make-vector 0 (length numbers))))\n      (let ((i 0))\n        (while (< i (length numbers))\n          (if (not (eqv? numbers/:i numbers/:i+1))\n            (setf result/:i numbers/:i)\n            (setf i (1+ i))))\n        result)))\n)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((seen (make-hashtable))\n        (result (make-vector 0)))\n    (for-each (lambda (number)\n               (hashtable-put seen number\n                 (vector->list (cons number result))))\n      numbers\n      (hashtable-ref seen number)))\n)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    []\n    (let ((result (make-vector (length numbers) 0)))\n      (for-each (lambda (x)\n                  (if (not (member? x numbers))\n                    (vector-set! result x x)\n                    (vector-set! result x (vector-ref numbers x))))\n        numbers))\n    (vector-set! result (make-vector (length (vector-ref numbers 0)) 0)))))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((seen (make-hashtable)) (result (list)))\n    (for-each (lambda (number)\n               (hashtable-put seen number)\n               (hashtable-put result number))\n      numbers\n      (hashtable-ref seen number)))\n  result)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    ()\n    (let ((result (make-vector (length numbers) 0)))\n      (for-each\n        (lambda (n)\n          (if (not (eql? n numbers))\n            (setf result (vector-set! result n numbers)))\n        numbers)\n        result))\n    result))\n",
    "  (if (null? numbers)\n    []\n    (let ((result ()))\n      (for-each (lambda (n)\n                  (if (not (in? n numbers))\n                    (result (cons n result))\n                    ()))\n        numbers)))\n  result)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    []\n    (let ((result (make-vector (length numbers) 0)))\n      (for-each (lambda (n)\n                  (if (not (member n numbers))\n                    (vector-set! result n numbers)\n                    (vector-set! result n)))\n        numbers))\n      (vector-sort result)\n      (vector-copy result numbers)))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    []\n    (let ((result (make-vector 0 (length numbers))))\n      (for-each (lambda (n) (vector-set! result n)) numbers)\n      (remove-if (lambda (n) (not (vector-ref result n))) numbers))))\n",
    "  (if (null? numbers)\n    []\n    (let ((result ()))\n      (for-each (lambda (x)\n                  (if (not (member? x result))\n                    (result (append result x))))\n        numbers)))\n)\n\n;; From a list of strings, remove all elements that are duplicated.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list \"a\" \"b\" \"a\" \"c\" \"a\"))\n;; (list \"a\" \"c\")",
    "  (let ((seen (make-hashtable)))\n    (let ((result ()))\n      (for-each (lambda (n)\n                  (hashtable-put seen n (hashtable-get seen n)))\n        numbers\n        (hashtable-for-each (lambda (k v)\n                             (hashtable-put seen k v)\n                             (result (cons k v)))\n          seen))))\n)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    ()\n    (let ((result (make-vector 0 (length numbers))))\n      (for-each (lambda (n)\n                  (if (not (member n result))\n                    (set-vector-set! result n)\n                    (set-vector-set! result (vector-ref numbers n))))\n        numbers)))\n)\n\n;; From a list of strings, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list \"a\" \"b\" \"a\" \"c\"))\n;; (list \"a\" \"c\")",
    "  (let ((result ()))\n    (for-each (lambda (n)\n                (if (not (in? n numbers))\n                    (result (append result n))))\n      numbers))\n  result)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    []\n    (let ((result (make-vector (length numbers) 0)))\n      (for-each (lambda (n)\n                  (if (not (eql? n numbers))\n                    (setf result (vector-set! result n numbers)))\n                numbers)\n        result))\n    result))\n",
    "  (if (null? numbers)\n    []\n    (let ((result (make-vector (length numbers) 0)))\n      (for-each (lambda (x)\n                  (if (not (member? x numbers))\n                    (set-vector-set! result x x)\n                    (set-vector-set! result x (vector-ref numbers x))))\n        numbers))\n    (vector-sort result)\n    result))\n\n;; From a list of strings, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list \"a\" \"b\" \"a\" \"c\"))\n;; (list \"a\" \"c\")",
    "  (let ((seen (make-hashtable)))\n    (let ((result (make-vector 0)))\n      (let ((i 0))\n        (while (< i (vector-length numbers))\n          (if (hashtable-get! seen numbers[i])\n              (vector-set! result i numbers[i])\n              (hashtable-put! seen numbers[i] #t)\n              (setq i (vector-set! result i (vector-ref numbers i))))\n          (setq i (vector-set! result i (vector-ref numbers i))))\n        result)))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    []\n    (let ((result ()))\n      (for-each (lambda (n)\n                  (if (not (in? n numbers))\n                    (result (cons n result))\n                    ()))\n        numbers)))\n  result)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((seen (make-hashtable)) (result ()))\n    (for-each\n      (lambda (number)\n        (hashtable-put seen number (hashtable-get seen number)))\n      numbers\n      (lambda (number)\n        (hashtable-put seen number number)\n        (hashtable-ref seen number)\n        (hashtable-remove seen number)\n        (cons number result))))\n  result)\n",
    "  (let ((seen (make-hashtable)))\n    (let ((result ()))\n      (for-each (lambda (x) (hashtable-put seen x x)) numbers)\n      (for-each (lambda (x) (hashtable-remove seen x)) numbers)\n      (return (append result (hashtable-keys seen))))))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((seen (make-hashtable)))\n    (let ((result ()))\n      (for-each (lambda (x)\n                  (hashtable-put seen x (hashtable-get seen x)))\n        numbers\n        (hashtable-for-each (lambda (k v)\n                             (hashtable-remove seen k)\n                             (hashtable-put result v))\n          seen))))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    ()\n    (let ((result (make-vector 0 (length numbers))))\n      (let ((i 0))\n        (while (< i (length numbers))\n          (if (not (null? (vector-ref numbers i)))\n            (vector-set! result i (vector-ref numbers i))\n            (set! i (1+ i))))\n        (vector-set! result i (vector-ref numbers i))))\n    (vector-ref result)))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((result ()))\n    (for-each (lambda (n)\n                (if (not (in? n numbers))\n                    (result (append result n))))\n      numbers))\n  result)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((seen (make-hashtable)) (result ()))\n    for (let numbers (cons numbers (cdr numbers)))\n      (if (hashtable-get! seen numbers)\n          (hashtable-remove! seen numbers)\n          (hashtable-put! seen numbers numbers)\n          (result (cons numbers result))))\n    (car result))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    ()\n    (let ((result (make-vector 0 (length numbers))))\n      (for-each (lambda (n)\n                  (if (not (eql? n numbers))\n                    (vector-set! result n numbers)\n                    (vector-set! result n (vector-ref numbers n))))\n        numbers))\n    (vector-sort result)\n    result))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((seen (make-hashtable)))\n    (let ((result ()))\n      (for-each (lambda (x)\n                  (hashtable-put seen x x)\n                  (if (hashtable-ref seen x)\n                      (hashtable-remove seen x)\n                      (result (cons x result))))\n        numbers)))\n  (if (empty? result)\n      '()\n      (reverse result)))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((result ()))\n    (for-each (lambda (n)\n                (if (not (in? n numbers))\n                    (result (cons n numbers))\n                    ()))\n              numbers\n              (append result (cdr n))))\n  result)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (define (remove_duplicates_helper numbers)\n    (if (null? numbers)\n      numbers\n      (remove_duplicates_helper (cdr numbers))))\n  (remove_duplicates_helper numbers))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    []\n    (let ((result (list)))\n      (for-each (lambda (n)\n                  (if (not (member n result))\n                    (result (append result n))))\n        numbers)))\n)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    ()\n    (let ((result (make-vector 0 (length numbers))))\n      (for-each (lambda (n) (vector-set! result n)) numbers)\n      (vector-sort! result)\n      (return (vector-map (lambda (n) n) result))))\n)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    []\n    (let ((result (make-vector 0 (length numbers))))\n      (for-each (lambda (n)\n                  (if (not (member n result))\n                    (set-vector-set! result n)\n                    ()))\n        numbers))\n      (vector-set! result 0)))\n",
    "  (if (null? numbers)\n    []\n    (let ((result (make-vector (length numbers) 0)))\n      (for-each (lambda (n)\n                  (if (not (member n numbers))\n                    (set! result (vector-set! result n numbers))))\n        numbers))\n    result))\n",
    "  (let ((result ()))\n    (for-each (lambda (n)\n                (if (not (in? n numbers))\n                    (result (cons n numbers))\n                    ()))\n          numbers\n          (result)))\n  result)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (let ((result ()))\n    (for-each (lambda (n)\n                (if (not (member n result))\n                    (result (append result n))))\n      numbers))\n  result)\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    []\n    (let ((result (make-vector (length numbers) 0)))\n      (for-each (lambda (n)\n                  (if (not (eql? n numbers))\n                    (setf result (vector-set! result n numbers)))\n                numbers)\n        result))\n    (vector-sort result)\n    result))\n",
    "  (let ((seen (make-hashtable)))\n    (let ((result (make-vector 0)))\n      (for-each (lambda (x)\n                  (hashtable-put seen x 0))\n        numbers\n        (for-each (lambda (x)\n                   (hashtable-put seen x 1))\n          result\n          (append result (vector-ref x 0))))\n      result))\n",
    "  (let ((seen (make-hashtable)))\n    (let ((result ()))\n      (for-each (lambda (x) (hashtable-put seen x x)) numbers)\n        (for-each (lambda (x) (hashtable-get seen x))\n          (append result (list x)))\n      (reverse result))))\n\n;; From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)",
    "  (if (null? numbers)\n    []\n    (let ((result (make-vector (length numbers) 0)))\n      (for-each (lambda (n)\n                  (if (not (memq n numbers))\n                    (setf result (vector-set! result n numbers)))\n                  numbers)\n        result))\n    result))\n\n;; From a list of strings, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list \"a\" \"b\" \"a\" \"c\"))\n;; (list \"a\" \"c\")",
    "  (let ((result ()))\n    (for-each (lambda (x)\n                (if (not (in? x numbers))\n                    (result (cons x result)))))\n    result))\n\n;; From a list of strings, remove all elements that are duplicated.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list \"a\" \"b\" \"a\" \"c\" \"b\"))\n;; (list \"a\" \"c\")"
  ],
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ]
}