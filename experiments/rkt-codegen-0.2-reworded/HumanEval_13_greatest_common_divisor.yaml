name: HumanEval_13_greatest_common_divisor
language: rkt
prompt: "#lang racket\n\n;; Return a greatest common divisor of two integers a and\
  \ b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor\
  \ 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n\
  \    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n\
  \    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n\
  ))\n\n(test-humaneval)"
completions: ["  (cond\n    ((zero? a) b)\n    ((zero? b) a)\n    (else\n      (/\
    \ a b)\n      )\n    )\n  )\n\n;; Return a least common multiple of two integers\
    \ a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n\
    \      (let ((gcd (gcd a b)))\n        (if (negative? a)\n          (- gcd)\n\
    \          gcd))))\n)\n\n;; Return a least common multiple of two integers a and\
    \ b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (let ((gcd (gcd a b)))\n    (if (zero? a) gcd\n      (if\
    \ (zero? b) gcd\n        (if (negative? a) (- gcd)\n          (if (negative? b)\
    \ (- gcd)\n            gcd))))))\n\n;; Return a least common multiple of two integers\
    \ a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (let ((gcd (gcd a b)))\n    (if (<= 0 gcd)\n      (error\
    \ \"greatest_common_divisor: arguments must be positive integers\")\n      gcd)))\n\
    \n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (let ((gcd (gcd\
    \ a b)))\n    (if (<= gcd 0)\n      gcd\n      (greatest_common_divisor (- a gcd)\
    \ (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n\
    ;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n\
    ;; 75", "  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd\
    \ a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and\
    \ b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (let ((gcd (gcd a b)))\n    (if (= gcd 1)\n      gcd\n  \
    \    (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common\
    \ multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n\
    ;; >>> (least_common_multiple 25 15)\n;; 75", "  (cond\n    ((zero? a) a)\n  \
    \  ((zero? b) b)\n    (else\n      (let ((gcd (gcd a b)))\n        (if (negative?\
    \ a)\n          (- gcd)\n          gcd))))\n)\n\n;; Return a least common multiple\
    \ of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (let ((gcd (gcd a b)))\n    (if (= gcd 1) gcd\n      (greatest_common_divisor\
    \ (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers\
    \ a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (let ((gcd (gcd a b)))\n    (if (= gcd 1)\n      gcd\n  \
    \    (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common\
    \ multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n\
    ;; >>> (least_common_multiple 25 15)\n;; 75", "  (let ((gcd (gcd a b)))\n    (if\
    \ (= gcd 0)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\
    \n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (cond\n    [(zero?\
    \ a) a]\n    [(zero? b) b]\n    [(zero? a) b]\n    [(zero? b) a]\n    [(> a b)\
    \ (abs a)]\n    [(> b a) (abs b)]\n    [(a = b) a]\n    [(a < b) b]\n    [(b <\
    \ a) a]\n    [(a = b) b]\n    [(b = a) b]\n    [(a > b) a]\n    [(b > a) b]\n\
    \    [(a > b) b]\n    [(b > a) a]\n    [(a = b) a]\n    [(b = a) b]\n    [(a <\
    \ b) a]\n    [(b < a) b]\n    [(a < b) b]\n    [(b < a) a]\n    [(a > b) a]\n\
    \    [(b > a) b]\n    [(a > b) b]\n    [(b > a) a]\n    [(a = b) b]\n    [(b =\
    \ a) a]\n    [(a < b) a]\n    [(b < a) b]\n    [(a < b) b]\n    [(b < a) a]\n\
    \    [(a > b) a]\n    [(b > a) b]\n    [(a > b) b]\n    [(b > a) a]\n    [(a =\
    \ b) b]\n    [(b = a) a]\n    [(a < b) a]\n    [(b < a) b]\n    [(a < b) b]\n\
    \    [(b < a) a]\n    [(a > b) a]\n    [(b > a) b]\n    [(a > b) b]\n    [(b >\
    \ a) a]\n    [(a = b) b]\n    [(b = a) a]\n    [(a < b) a]\n    [(b < a) b]\n\
    \    [(a < b) b]\n    [(b", "  (if (= a 0)\n    b\n    (if (= b 0)\n      a\n\
    \      (greatest_common_divisor (- a b)))))\n\n;; Return a least common multiple\
    \ of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (let ((gcd (gcd a b)))\n    (if (= gcd 1) gcd\n      (greatest_common_divisor\
    \ (- a gcd)))))\n\n;; Return a least common multiple of two integers a and b\n\
    ;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n\
    ;; 75", "  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd\
    \ a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and\
    \ b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (cond\n    [(zero? a) (error \"greatest_common_divisor: first\
    \ argument must be non-zero\")]\n    [(zero? b) (error \"greatest_common_divisor:\
    \ second argument must be non-zero\")]\n    [(zero? (modulo a b)) (error \"greatest_common_divisor:\
    \ arguments must be non-zero\")]\n    [(zero? (modulo b a)) (error \"greatest_common_divisor:\
    \ arguments must be non-zero\")]\n    [else (modulo (modulo a b))]))\n\n;; Return\
    \ a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (cond ((= a 0)\
    \ 0)\n        ((= b 0) a)\n        (else (gcd a b))\n  ))\n\n;; Return a least\
    \ common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n\
    ;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (cond\n    ((zero? a)\
    \ a)\n    ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return\
    \ a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (cond\n    ((zero?\
    \ a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b))\n  )\n)\n\n;; Return a\
    \ least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (cond\n    ((zero?\
    \ a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return\
    \ a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (cond\n    ((zero?\
    \ a) a)\n    ((zero? b) b)\n    (else\n      (let ((gcd (gcd a b)))\n        (if\
    \ (zero? (modulo gcd a))\n          gcd\n          (greatest_common_divisor (modulo\
    \ a gcd) (modulo b gcd)))))))\n\n;; Return a least common multiple of two integers\
    \ a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (cond ((= a 0) 0)\n        ((= a b) b)\n        (else\n \
    \         (let ((gcd (greatest_common_divisor (quotient a b))))\n            (if\
    \ (> (abs a) (abs b))\n                (greatest_common_divisor (quotient gcd\
    \ a) b)\n                (greatest_common_divisor a (quotient gcd b)))))\n  )\n\
    )\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (let ((gcd (gcd\
    \ a b)))\n    (if (= gcd 1)\n      gcd\n      (greatest_common_divisor (- a gcd)\
    \ (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n\
    ;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n\
    ;; 75", "  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd\
    \ a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and\
    \ b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (cond ((= a 0) 0)\n        ((= b 0) a)\n        (else (gcd\
    \ a b))\n  ))\n\n;; Return a least common multiple of two integers a and b\n;;\
    \ >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n\
    ;; 75", "  (let ((gcd (gcd a b)))\n    (if (= gcd 0)\n      gcd\n      (greatest_common_divisor\
    \ (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers\
    \ a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (let ((gcd (gcd a b)))\n    (if (<= gcd 0)\n      gcd\n \
    \     (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common\
    \ multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n\
    ;; >>> (least_common_multiple 25 15)\n;; 75", "  (let ((gcd (gcd a b)))\n    (if\
    \ (zero? a)\n      gcd\n      (if (zero? b)\n        gcd\n        (greatest_common_divisor\
    \ (- a) b))))\n\n;; Return a least common multiple of two integers a and b\n;;\
    \ >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n\
    ;; 75", "  (let ((gcd (gcd a b)))\n    (if (<= 0 gcd)\n      gcd\n      (greatest_common_divisor\
    \ (- a gcd) (- b gcd))))\n\n;; Return a least common multiple of two integers\
    \ a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n\
    \      (gcd a b))\n  ))\n\n;; Return a least common multiple of two integers a\
    \ and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (let ((gcd (gcd a b)))\n    (if (= gcd 1) gcd\n      (greatest_common_divisor\
    \ (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers\
    \ a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (cond\n    ((zero? a) b)\n    ((zero? b) a)\n    (else\n\
    \      (gcd a b))\n  )\n)\n\n;; Return a least common multiple of two integers\
    \ a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (cond ((= a 0) 0)\n        ((= a b) b)\n        ((> a b)\
    \ (greatest_common_divisor (- a) b))\n        (else (greatest_common_divisor a\
    \ (- b))))\n)\n\n;; Return a least common multiple of two integers a and b\n;;\
    \ >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n\
    ;; 75", "  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (let\
    \ ((gcd (gcd a b)))\n        (if (zero? (modulo gcd a))\n            gcd\n   \
    \         (greatest_common_divisor (modulo a gcd) (modulo b gcd)))))))\n\n;; Return\
    \ a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (cond\n    ((zero?\
    \ a) a)\n    ((zero? b) b)\n    (else\n      (/ a b))\n  ))\n\n;; Return a least\
    \ common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n\
    ;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (cond\n    [(zero? a)\
    \ (error \"greatest_common_divisor: first argument must be non-zero\")]\n    [(zero?\
    \ b) (error \"greatest_common_divisor: second argument must be non-zero\")]\n\
    \    [(zero? (modulo a b)) (error \"greatest_common_divisor: arguments must be\
    \ positive\")]\n    [(zero? (modulo b a)) (error \"greatest_common_divisor: arguments\
    \ must be positive\")]\n    [else (modulo (gcd a b))]))\n\n;; Return a least common\
    \ multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n\
    ;; >>> (least_common_multiple 25 15)\n;; 75", "  (cond\n    ((zero? a) b)\n  \
    \  ((zero? b) a)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return a least\
    \ common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n\
    ;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (cond ((= a 0) 0)\n  \
    \      ((= a b) b)\n        (else\n          (/ a b)\n          (greatest_common_divisor\
    \ (- a) b)\n          )\n        )\n  )\n\n;; Return a least common multiple of\
    \ two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (cond ((= a 0) 0)\n        ((= a b) a)\n        (else\n \
    \         (let ((gcd (gcd a b)))\n            (if (> gcd a)\n                (greatest_common_divisor\
    \ (- a b) gcd)\n                gcd))))\n\n;; Return a least common multiple of\
    \ two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (let ((gcd (gcd a b)))\n    (if (= gcd 1)\n      gcd\n  \
    \    (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common\
    \ multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n\
    ;; >>> (least_common_multiple 25 15)\n;; 75", "  (cond\n    [(zero? a) (error\
    \ \"greatest_common_divisor: first argument must be non-zero\")]\n    [(zero?\
    \ b) (error \"greatest_common_divisor: second argument must be non-zero\")]\n\
    \    [(zero? (modulo a b)) (error \"greatest_common_divisor: arguments must be\
    \ positive\")]\n    [(zero? (modulo b a)) (error \"greatest_common_divisor: arguments\
    \ must be positive\")]\n    [(= a b) b]\n    [else (greatest_common_divisor (div\
    \ a b) (modulo a b))]))\n\n;; Return a least common multiple of two integers a\
    \ and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (let ((gcd (gcd a b)))\n    (if (= gcd 0)\n      gcd\n  \
    \    (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common\
    \ multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n\
    ;; >>> (least_common_multiple 25 15)\n;; 75", "  (let ((gcd (gcd a b)))\n    (if\
    \ (zero? gcd)\n      (error \"Greatest common divisor of zero\")\n      gcd)))\n\
    \n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (let ((gcd (gcd\
    \ a b)))\n    (if (= gcd 1) gcd\n      (greatest_common_divisor (- a gcd) (- b\
    \ gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>>\
    \ (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;;\
    \ 75", "  (cond ((= a 0) 0)\n        ((= b 0) a)\n        (else (gcd a b))\n \
    \ ))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (let ((gcd (gcd\
    \ a b)))\n    (if (zero? a) gcd\n      (if (zero? b) gcd\n        (if (> a b)\
    \ gcd\n           (if (< a b) gcd\n              (if (= a b) 1\n             \
    \    (greatest_common_divisor (- a) (- b)))))\n         (greatest_common_divisor\
    \ (- a) (- b))))))\n\n;; Return a least common multiple of two integers a and\
    \ b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (let ((gcd (gcd a b)))\n    (if (= gcd 1)\n      gcd\n  \
    \    (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common\
    \ multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n\
    ;; >>> (least_common_multiple 25 15)\n;; 75", "  (cond\n    ((zero? a) b)\n  \
    \  ((zero? b) a)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return a least\
    \ common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n\
    ;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (cond\n    ((zero? a)\
    \ a)\n    ((zero? b) b)\n    (else\n      (let ((gcd (gcd a b)))\n        (if\
    \ (negative? a)\n          (- gcd)\n          gcd)))\n  )\n)\n\n;; Return a least\
    \ common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n\
    ;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (cond\n    ((zero? a)\
    \ a)\n    ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return\
    \ a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (let ((gcd (gcd\
    \ a b)))\n    (if (zero? a) gcd\n      (if (zero? b) gcd\n        (if (negative?\
    \ a) (- gcd)\n          (if (negative? b) (- gcd)\n            gcd))))))\n\n;;\
    \ Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (cond\n    ((zero?\
    \ a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b))\n  )\n)\n\n;; Return a\
    \ least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (cond\n    ((zero?\
    \ a) a)\n    ((zero? b) b)\n    (else\n      (/ a b)\n      )\n    )\n  )\n\n\
    ;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (cond\n    ((zero?\
    \ a) a)\n    ((zero? b) b)\n    (else\n      (/ a b)\n      )\n    )\n  )\n\n\
    ;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (let ((gcd (gcd\
    \ a b)))\n    (if (<= gcd 0)\n      gcd\n      (greatest_common_divisor (- a gcd)\
    \ (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n\
    ;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n\
    ;; 75", "  (let ((gcd (gcd a b)))\n    (if (<= gcd 0)\n      gcd\n      (greatest_common_divisor\
    \ (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers\
    \ a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n\
    \      (gcd a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers\
    \ a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (cond ((= a 0) 0)\n        ((= a b) b)\n        (else\n \
    \         (greatest_common_divisor (- a) b)\n          )\n        )\n  )\n\n;;\
    \ Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (let ((gcd (gcd\
    \ a b)))\n    (if (= gcd 0)\n      gcd\n      (greatest_common_divisor (- a gcd)\
    \ (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n\
    ;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n\
    ;; 75", "  (cond ((= a 0) 0)\n        ((= a b) b)\n        (else\n          (let\
    \ ((gcd (gcd a b)))\n            (if (> gcd a) gcd)\n              (if (> gcd\
    \ b) gcd)\n                (gcd))))))\n\n;; Return a least common multiple of\
    \ two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (let ((gcd (gcd a b)))\n    (if (<= 0 gcd)\n      (error\
    \ \"Greatest common divisor of \" a \" and \" b \" is not positive\")))\n)\n\n\
    ;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (let ((gcd (gcd\
    \ a b)))\n    (if (<= gcd 0)\n      gcd\n      (greatest_common_divisor (- a gcd)\
    \ (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n\
    ;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n\
    ;; 75", "  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (let\
    \ ((gcd (gcd a b)))\n        (if (zero? (modulo gcd a))\n          gcd\n     \
    \     (greatest_common_divisor (modulo a gcd) (modulo b gcd)))))))\n\n;; Return\
    \ a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (cond\n    [(zero?\
    \ a) (error 'greatest_common_divisor \"divisor is zero\")]\n    [(zero? b) (error\
    \ 'greatest_common_divisor \"divisor is zero\")]\n    [(zero? (abs a)) (error\
    \ 'greatest_common_divisor \"divisor is zero\")]\n    [(zero? (abs b)) (error\
    \ 'greatest_common_divisor \"divisor is zero\")]\n    [(zero? (abs (gcd a b)))\
    \ (error 'greatest_common_divisor \"divisor is zero\")]\n    [else (gcd a b)]))\n\
    \n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (let ((gcd (gcd\
    \ a b)))\n    (if (zero? a) gcd\n      (if (zero? b) gcd\n        (if (negative?\
    \ a) (- gcd)\n          (if (negative? b) (- gcd)\n            gcd))))))\n\n;;\
    \ Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (if (= a 0)\n\
    \    b\n    (if (= b 0)\n      a\n      (greatest_common_divisor (quotient a b)\n\
    \        (greatest_common_divisor (remainder a b))))))\n\n;; Return a list of\
    \ all the prime numbers less than or equal to n\n;; >>> (primes 0)\n;; []\n;;\
    \ >>> (primes 10)\n;; [2, 3, 5, 7]", "  (let ((gcd (gcd a b)))\n    (if (<= 0\
    \ gcd)\n      (error \"greatest_common_divisor: arguments must be positive integers\"\
    )\n      gcd)))\n", "  (let ((gcd (gcd a b)))\n    (if (= gcd 1) gcd\n      (greatest_common_divisor\
    \ (- a gcd)))))\n\n;; Return a least common multiple of two integers a and b\n\
    ;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n\
    ;; 75", "  (cond ((= a 0) 0)\n        ((= a b) b)\n        (else\n          (let\
    \ ((gcd (gcd a b)))\n            (if (> gcd a) gcd)\n              (if (> gcd\
    \ b) gcd)\n                (gcd))))\n  )\n\n;; Return a least common multiple\
    \ of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 375", "  (cond ((= a 0) 0)\n        ((= a b) b)\n        (else\n\
    \          (let ((gcd (greatest_common_divisor (modulo a b) b)))\n           \
    \ (if (>= gcd a) gcd)\n            (gcd a b))))\n\n;; Return a least common multiple\
    \ of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (let ((gcd (gcd a b)))\n    (if (= gcd 1)\n      gcd\n  \
    \    (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common\
    \ multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n\
    ;; >>> (least_common_multiple 25 15)\n;; 75", "  (cond\n    ((zero? a) a)\n  \
    \  ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return a least\
    \ common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n\
    ;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (cond ((= a 0) 0)\n  \
    \      ((= a b) a)\n        (else\n          (let ((gcd (greatest_common_divisor\
    \ (quotient a b))))\n            (if (> (abs a) (abs b))\n                (greatest_common_divisor\
    \ (quotient gcd a) b)\n                (greatest_common_divisor a (quotient gcd\
    \ b)))))\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n\
    ;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n\
    ;; 75", "  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd\
    \ a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and\
    \ b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (cond ((= a 0) 0)\n        ((= a b) b)\n        (else\n \
    \         (greatest_common_divisor (- a) b)\n          )))\n\n;; Return a least\
    \ common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n\
    ;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (let ((gcd (gcd a b)))\n\
    \    (if (= gcd 1) gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\
    \n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (let ((gcd (gcd\
    \ a b)))\n    (if (<= 0 gcd)\n      gcd\n      (greatest_common_divisor (- a gcd)\
    \ (- b gcd))))\n\n;; Return a least common multiple of two integers a and b\n\
    ;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n\
    ;; 75", "  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (/ a\
    \ b)\n      )\n    )\n  )\n\n;; Return a least common multiple of two integers\
    \ a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (if (= a 0)\n    b\n    (if (= b 0)\n      a\n      (greatest_common_divisor\
    \ (- a b) (* a b)))))\n\n;; Return a least common multiple of two integers a and\
    \ b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (let ((gcd (gcd a b)))\n    (if (zero? gcd)\n      1\n  \
    \    gcd)))\n\n;; Return a least common multiple of two integers a and b\n;; >>>\
    \ (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;;\
    \ 75", "  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd a\
    \ b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and\
    \ b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (let ((gcd (gcd a b)))\n    (if (= gcd 1) gcd\n      (greatest_common_divisor\
    \ (- a gcd)))))\n\n;; Return a least common multiple of two integers a and b\n\
    ;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n\
    ;; 75", "  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (let\
    \ ((gcd (gcd a b)))\n        (if (negative? a)\n          (- gcd)\n          gcd))))\n\
    )\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (let ((gcd (gcd\
    \ a b)))\n    (if (<= 0 gcd)\n      (error \"Greatest common divisor of \" a \"\
    \ and \" b \" is \" gcd)\n      gcd)))\n\n;; Return a least common multiple of\
    \ two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (let ((gcd (gcd a b)))\n    (if (zero? gcd)\n      1\n  \
    \    gcd)))\n\n;; Return a least common multiple of two integers a and b\n;; >>>\
    \ (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;;\
    \ 75", "  (let ((gcd (gcd a b)))\n    (if (= gcd 1)\n      gcd\n      (greatest_common_divisor\
    \ (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers\
    \ a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (cond ((= a 0) 0)\n        ((= a b) b)\n        (else\n \
    \         (let ((gcd (greatest_common_divisor (modulo a b) b)))\n            (if\
    \ (zero? (modulo a b))\n                gcd\n                (greatest_common_divisor\
    \ (modulo a b) (modulo a b)))))\n  )\n)\n\n;; Return a least common multiple of\
    \ two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n\
    \      (gcd a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers\
    \ a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (cond\n    [(zero? a) (error \"greatest_common_divisor: first\
    \ argument must be non-zero\")]\n    [(zero? b) (error \"greatest_common_divisor:\
    \ second argument must be non-zero\")]\n    [(zero? (modulo a b)) (error \"greatest_common_divisor:\
    \ arguments must be positive\")]\n    [(zero? (modulo b a)) (error \"greatest_common_divisor:\
    \ arguments must be positive\")]\n    [else (modulo (gcd a b))]))\n\n;; Return\
    \ a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (cond\n    [(zero?\
    \ a) (error \"greatest_common_divisor: first argument must be non-zero\")]\n \
    \   [(zero? b) (error \"greatest_common_divisor: second argument must be non-zero\"\
    )]\n    [(zero? (modulo a b)) (error \"greatest_common_divisor: arguments must\
    \ be positive\")]\n    [(zero? (modulo b a)) (error \"greatest_common_divisor:\
    \ arguments must be positive\")]\n    [else (modulo (gcd a b))]))\n\n;; Return\
    \ a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (let ((gcd (gcd\
    \ a b)))\n    (if (= gcd 1) gcd\n      (greatest_common_divisor (- a gcd)))))\n\
    \n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (let ((gcd (gcd\
    \ a b)))\n    (if (= gcd 1)\n      gcd\n      (greatest_common_divisor (- a gcd)\
    \ (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n\
    ;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n\
    ;; 75", "  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd\
    \ a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and\
    \ b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (if (= a 0)\n    b\n    (if (= b 0)\n      a\n      (greatest_common_divisor\
    \ (- a) (- b)))))\n\n;; Return a least common multiple of two integers a and b\n\
    ;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n\
    ;; 75", "  (let ((gcd (gcd a b)))\n    (if (= gcd 1)\n      gcd\n      (greatest_common_divisor\
    \ (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers\
    \ a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (let ((gcd (gcd a b)))\n    (if (= gcd 1) gcd\n      (greatest_common_divisor\
    \ (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers\
    \ a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n\
    \      (gcd a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers\
    \ a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (let ((gcd (gcd a b)))\n    (if (<= 0 gcd)\n      (error\
    \ \"Greatest common divisor of \" a \" and \" b \" is not positive\")\n      gcd)))\n\
    \n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (let ((gcd (gcd\
    \ a b)))\n    (if (= gcd 0)\n      gcd\n      (greatest_common_divisor (- a gcd)\
    \ (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n\
    ;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n\
    ;; 75", "  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd\
    \ a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and\
    \ b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (cond\n    ((zero? a) b)\n    ((zero? b) a)\n    (else\n\
    \      (gcd a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers\
    \ a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (cond\n    [(zero? a) a]\n    [(zero? b) b]\n    [(zero?\
    \ a) b]\n    [(zero? b) a]\n    [(> a b) (gcd a b)]\n    [(> b a) (gcd b a)]\n\
    \    [(> a b) (gcd b a)]\n    [(> b a) (gcd a b)]\n    [(< a b) (gcd a b)]\n \
    \   [(< b a) (gcd b a)]\n    [(< a b) (gcd b a)]\n    [(< b a) (gcd a b)]\n  \
    \  [(= a b) a]\n    [(= b a) b]\n    [(= a b) b]\n    [(= b a) a]\n    [else (gcd\
    \ a b)]\n  )\n)\n", "  (cond ((= a 0) 0)\n        ((= a b) b)\n        (else\n\
    \          (let ((gcd (gcd a b)))\n            (if (> gcd a)\n               \
    \ (let ((x (quotient a gcd)))\n                  (let ((y (quotient b gcd)))\n\
    \                    (greatest_common_divisor x y)))\n                (greatest_common_divisor\
    \ b a))))))\n\n;; Return a least common multiple of two integers a and b\n;; >>>\
    \ (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;;\
    \ 75", "  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd a\
    \ b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and\
    \ b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (if (= a 0)\n    b\n    (if (= b 0)\n      a\n      (greatest_common_divisor\
    \ (- a b)))))\n\n;; Return a least common multiple of two integers a and b\n;;\
    \ >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n\
    ;; 75", "  (let ((gcd (gcd a b)))\n    (if (zero? a) gcd\n      (if (zero? b)\
    \ gcd\n        (if (> a b) gcd\n           (if (< a b) gcd\n              (if\
    \ (= a b) gcd 1)\n               (greatest_common_divisor (- a) (- b)))))\n  \
    \    (greatest_common_divisor (- a) (- b))))\n\n;; Return a least common multiple\
    \ of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (let ((gcd (gcd a b)))\n    (if (= gcd 1)\n      gcd\n  \
    \    (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common\
    \ multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n\
    ;; >>> (least_common_multiple 25 15)\n;; 75", "  (cond\n    ((zero? a) a)\n  \
    \  ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return a least\
    \ common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n\
    ;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (let ((gcd (gcd a b)))\n\
    \    (if (= gcd 1)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd))))\n\
    )\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (cond\n    ((zero?\
    \ a) b)\n    ((zero? b) a)\n    (else\n      (gcd a b))\n  )\n)\n\n;; Return a\
    \ least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (let ((gcd (gcd\
    \ a b)))\n    (if (zero? gcd)\n      1\n      gcd)))\n\n;; Return a least common\
    \ multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n\
    ;; >>> (least_common_multiple 25 15)\n;; 75", "  (cond\n    [(zero? a) a]\n  \
    \  [(zero? b) b]\n    [(zero? a) b]\n    [(zero? b) a]\n    [(> a b) (abs a)]\n\
    \    [(> b a) (abs b)]\n    [(> a b) (abs a)]\n    [(> b a) (abs b)]\n    [(>\
    \ a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n\
    \    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b\
    \ a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n\
    \    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a\
    \ b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n\
    \    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b\
    \ a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n\
    \    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a\
    \ b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n\
    \    [(> b a) b]\n", "  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n\
    \      (gcd a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers\
    \ a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (let ((gcd (gcd a b)))\n    (if (<= 0 gcd)\n      (error\
    \ \"greatest_common_divisor: arguments must be positive integers\")\n      gcd)))\n\
    \n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (let ((gcd (gcd\
    \ a b)))\n    (if (= gcd 1)\n      gcd\n      (greatest_common_divisor (- a gcd)\
    \ (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n\
    ;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n\
    ;; 75", "  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd\
    \ a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and\
    \ b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (let ((gcd (gcd a b)))\n    (if (= gcd 1)\n      gcd\n  \
    \    (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common\
    \ multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n\
    ;; >>> (least_common_multiple 25 15)\n;; 75", "  (let ((gcd (gcd a b)))\n    (if\
    \ (= gcd 0)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd))))\n\
    )\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (cond\n    ((zero?\
    \ a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return\
    \ a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (cond\n    ((zero?\
    \ a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return\
    \ a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (cond\n    ((zero?\
    \ a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return\
    \ a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (let ((gcd (gcd\
    \ a b)))\n    (if (= gcd 1)\n      gcd\n      (greatest_common_divisor (- a gcd)\
    \ (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n\
    ;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n\
    ;; 75", "  (cond\n    ((zero? a) b)\n    ((zero? b) a)\n    (else\n      (gcd\
    \ a b))\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n\
    ;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n\
    ;; 75", "  (cond\n    [(zero? a) (error \"greatest_common_divisor: first argument\
    \ must be non-zero\")]\n    [(zero? b) (error \"greatest_common_divisor: second\
    \ argument must be non-zero\")]\n    [else (gcd a b)]))\n\n;; Return a least common\
    \ multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n\
    ;; >>> (least_common_multiple 25 15)\n;; 75", "  (cond ((= a 0) 0)\n        ((=\
    \ a b) b)\n        (else\n          (/ a b)\n          (greatest_common_divisor\
    \ (- a) b)\n          )\n        )\n  )\n\n;; Return a least common multiple of\
    \ two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n\
    \      (gcd a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers\
    \ a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (cond ((= a 0) 0)\n       ((= a b) a)\n       ((> a b) (greatest_common_divisor\
    \ b a))\n       (else (greatest_common_divisor a (modulo b a))))\n)\n\n;; Return\
    \ a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (cond ((= a 0)\
    \ 0)\n        ((= b 0) a)\n        (else (gcd a b))\n  ))\n\n;; Return a least\
    \ common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n\
    ;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (let ((gcd (gcd a b)))\n\
    \    (if (= gcd 0)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\
    \n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (cond\n    [(zero?\
    \ a) a]\n    [(zero? b) b]\n    [(zero? a) b]\n    [(zero? b) a]\n    [(> a b)\
    \ (gcd a b)]\n    [(> b a) (gcd b a)]\n    [(<= a b) (gcd a b)]\n    [(<= b a)\
    \ (gcd b a)]\n    [(= a b) a]\n    [(= b a) b]\n    [else (gcd a b)]\n  )\n)\n\
    \n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (let ((gcd (gcd\
    \ a b)))\n    (if (= gcd 1)\n      gcd\n      (greatest_common_divisor (- a gcd)\
    \ (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n\
    ;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n\
    ;; 75", "  (cond\n    [(zero? a) (error \"greatest_common_divisor: first argument\
    \ must be non-zero\")]\n    [(zero? b) (error \"greatest_common_divisor: second\
    \ argument must be non-zero\")]\n    [(zero? (modulo a b)) (error \"greatest_common_divisor:\
    \ arguments must be non-zero and have same sign\")]\n    [(zero? (modulo b a))\
    \ (error \"greatest_common_divisor: arguments must be non-zero and have same sign\"\
    )]\n    [else (modulo (gcd a b))]))\n\n;; Return a least common multiple of two\
    \ integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n\
    \      (let ((gcd (gcd a b)))\n        (if (zero? (modulo gcd a))\n          \
    \  gcd\n            (greatest_common_divisor (modulo a gcd) (modulo b gcd)))))))\n\
    \n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (cond\n    ((zero?\
    \ a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return\
    \ a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (let ((gcd (gcd\
    \ a b)))\n    (if (= gcd 1)\n      gcd\n      (greatest_common_divisor (- a gcd)\
    \ (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n\
    ;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n\
    ;; 75", "  (cond\n    [(zero? a) (error \"greatest_common_divisor: first argument\
    \ must be non-zero\")]\n    [(zero? b) (error \"greatest_common_divisor: second\
    \ argument must be non-zero\")]\n    [(zero? (modulo a b)) (error \"greatest_common_divisor:\
    \ arguments must be positive\")]\n    [(zero? (modulo b a)) (error \"greatest_common_divisor:\
    \ arguments must be positive\")]\n    [else (modulo (gcd a b))]))\n", "  (cond\n\
    \    [(zero? a) (error \"greatest_common_divisor: first argument must be non-zero\"\
    )]\n    [(zero? b) (error \"greatest_common_divisor: second argument must be non-zero\"\
    )]\n    [(zero? (modulo a b)) (error \"greatest_common_divisor: arguments must\
    \ be positive\")]\n    [(zero? (modulo b a)) (error \"greatest_common_divisor:\
    \ arguments must be positive\")]\n    [else (modulo (gcd a b))]))\n\n;; Return\
    \ a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (let ((gcd (gcd\
    \ a b)))\n    (if (<= 0 gcd)\n      (error \"greatest_common_divisor: arguments\
    \ must be positive integers\")\n      gcd)))\n\n;; Return a least common multiple\
    \ of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (let ((gcd (gcd a b)))\n    (if (= gcd 1) gcd\n      (greatest_common_divisor\
    \ (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers\
    \ a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (cond\n    [(zero? a) a]\n    [(zero? b) b]\n    [(zero?\
    \ a) b]\n    [(zero? b) a]\n    [(> a b) (* a b)]\n    [(> b a) (* a b)]\n   \
    \ [(> a b) b]\n    [(> b a) a]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b)\
    \ b]\n    [(> b a) a]\n    [(> a b) b]\n    [(> b a) a]\n    [(> a b) b]\n   \
    \ [(> b a) b]\n    [(> a b) b]\n    [(> b a) a]\n    [(> a b) b]\n    [(> b a)\
    \ a]\n    [(> a b) b]\n    [(> b a) b]\n    [(> a b) b]\n    [(> b a) a]\n   \
    \ [(> a b) b]\n    [(> b a) b]\n    [(> a b) b]\n    [(> b a) a]\n    [(> a b)\
    \ b]\n    [(> b a) b]\n    [(> a b) b]\n    [(> b a) a]\n    [(> a b) b]\n   \
    \ [(> b a) b]\n    [(> a b) b]\n    [(> b a) a]\n    [(> a b) b]\n    [(> b a)\
    \ b]\n    [(> a b) b]\n    [(> b a) a]\n    [(> a b) b]\n    [(> b a) b]\n   \
    \ [(> a b) b]\n    [(> b a) a]\n    [(> a b) b]\n    [(> b a) b]\n    [(> a b)\
    \ b]\n    [(> b a) a]\n    [(> a b) b]\n    [(> b a) b]\n    [(>", "  (cond\n\
    \    [(zero? a) (error \"greatest_common_divisor: first argument must be non-zero\"\
    )]\n    [(zero? b) (error \"greatest_common_divisor: second argument must be non-zero\"\
    )]\n    [(zero? (modulo a b)) (error \"greatest_common_divisor: arguments must\
    \ be positive\")]\n    [(zero? (modulo b a)) (error \"greatest_common_divisor:\
    \ arguments must be positive\")]\n    [else (modulo (gcd a b))]))\n\n;; Return\
    \ a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 375", "  (cond\n    [(zero?\
    \ a) a]\n    [(zero? b) b]\n    [(zero? a) b]\n    [(zero? b) a]\n    [(> a b)\
    \ (gcd a b)]\n    [(> b a) (gcd b a)]\n    [(< a b) (gcd b a)]\n    [(< b a) (gcd\
    \ a b)]\n    [(= a b) a]\n    [(= b a) b]\n    [(< a b) a]\n    [(< b a) b]\n\
    \    [(> a b) b]\n    [(> b a) a]\n    [(= a b) b]\n    [(= b a) a]\n    [(< a\
    \ b) b]\n    [(< b a) a]\n    [(> a b) a]\n    [(> b a) b]\n    [(= a b) a]\n\
    \    [(= b a) b]\n    [(< a b) b]\n    [(< b a) a]\n    [(> a b) b]\n    [(> b\
    \ a) a]\n    [(= a b) b]\n    [(= b a) a]\n    [(< a b) b]\n    [(< b a) a]\n\
    \    [(> a b) a]\n    [(> b a) b]\n    [(= a b) b]\n    [(= b a) a]\n    [(< a\
    \ b) b]\n    [(< b a) a]\n    [(> a b) b]\n    [(> b a) a]\n    [(= a b) b]\n\
    \    [(= b a) a]\n    [(< a b) b]\n    [(< b a) a]\n    [(> a b) a]\n    [(> b\
    \ a) b]\n    [(= a b) b]\n    [(= b a) a]\n    [(< a b) b]\n    [(< b a) a]\n\
    \    [(> a b) b]\n    [", "  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n   \
    \ (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return a least common multiple of\
    \ two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (cond\n    [(zero? a) a]\n    [(zero? b) b]\n    [(zero?\
    \ a) b]\n    [(zero? b) a]\n    [(> a b) (abs a)]\n    [(> b a) (abs b)]\n   \
    \ [(> a b) (abs a)]\n    [(> b a) (abs b)]\n    [(> a b) a]\n    [(> b a) b]\n\
    \    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a\
    \ b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n\
    \    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b\
    \ a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n\
    \    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a\
    \ b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n\
    \    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b\
    \ a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n\
    \    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n", "  (cond\n\
    \    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n\
    )\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (let ((gcd (gcd\
    \ a b)))\n    (if (<= 0 gcd)\n      gcd\n      (greatest_common_divisor (- a gcd)\
    \ (- b gcd))))\n\n;; Return a least common multiple of two integers a and b\n\
    ;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n\
    ;; 75", "  (cond ((= a 0) 0)\n        ((= b 0) 0)\n        (else\n          (/\
    \ a b)))\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>>\
    \ (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;;\
    \ 75", "  (cond ((= a 0) 0)\n        ((= b 0) a)\n        (else (gcd a b))\n \
    \ ))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (cond\n    ((zero?\
    \ a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return\
    \ a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (let ((gcd (gcd\
    \ a b)))\n    (if (= gcd 0)\n      gcd\n      (greatest_common_divisor (- a gcd)\
    \ (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n\
    ;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n\
    ;; 75", "  (let ((gcd (gcd a b)))\n    (if (= gcd 1)\n      gcd\n      (greatest_common_divisor\
    \ (- a gcd) (- b gcd))))\n)\n\n;; Return a least common multiple of two integers\
    \ a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (cond\n    [(zero? a) (error \"greatest_common_divisor: first\
    \ argument must be non-zero\")]\n    [(zero? b) (error \"greatest_common_divisor:\
    \ second argument must be non-zero\")]\n    [else (gcd a b)]))\n\n;; Return a\
    \ least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (let ((gcd (gcd\
    \ a b)))\n    (if (= gcd 1)\n      gcd\n      (greatest_common_divisor (- a gcd)\
    \ (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n\
    ;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n\
    ;; 75", "  (let ((gcd (gcd a b)))\n    (if (= gcd 1)\n      gcd\n      (greatest_common_divisor\
    \ (- a gcd) (- b gcd))))\n)\n\n;; Return a least common multiple of two integers\
    \ a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n\
    \      (gcd a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers\
    \ a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (let ((gcd (gcd a b)))\n    (if (zero? gcd)\n      1\n  \
    \    gcd)))\n\n;; Return a least common multiple of two integers a and b\n;; >>>\
    \ (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;;\
    \ 75", "  (let ((gcd (gcd a b)))\n    (if (zero? gcd)\n      1\n      gcd)))\n\
    \n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (cond\n    [(zero?\
    \ a) (error \"greatest_common_divisor: first argument must be non-zero\")]\n \
    \   [(zero? b) (error \"greatest_common_divisor: second argument must be non-zero\"\
    )]\n    [(zero? (modulo a b)) (error \"greatest_common_divisor: arguments must\
    \ be positive\")]\n    [(zero? (modulo b a)) (error \"greatest_common_divisor:\
    \ arguments must be positive\")]\n    [else (modulo (gcd a b))]))\n\n;; Return\
    \ a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (cond\n    [(zero?\
    \ a) (error \"greatest_common_divisor: first argument must be non-zero\")]\n \
    \   [(zero? b) (error \"greatest_common_divisor: second argument must be non-zero\"\
    )]\n    [(zero? (modulo a b)) (error \"greatest_common_divisor: arguments must\
    \ be positive\")]\n    [(zero? (modulo b a)) (error \"greatest_common_divisor:\
    \ arguments must be positive\")]\n    [else (modulo (gcd a b))]))\n\n;; Return\
    \ a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (let ((gcd (gcd\
    \ a b)))\n    (if (zero? a) gcd\n      (if (zero? b) gcd\n        (if (> a b)\
    \ gcd\n           (if (>= a b) gcd\n              (if (<= a b) gcd\n         \
    \        (if (< a b) gcd\n                    (if (>= a b) gcd\n             \
    \          (if (<= a b) gcd\n                          (if (> a b) gcd\n     \
    \                        (if (< a b) gcd\n                                (if\
    \ (>= a b) gcd\n                                  (if (<= a b) gcd\n         \
    \                           (if (> a b) gcd\n                                \
    \       (if (<= a b) gcd\n                                        (if (> a b)\
    \ gcd\n                                          (if (<= a b) gcd\n          \
    \                                  (if (> a b) gcd\n                         \
    \                     (if (<= a b) gcd\n                                     \
    \           (if (> a b) gcd\n                                                \
    \  (if (<= a b) gcd\n                                                    (if (>\
    \ a b) gcd\n                                                      (if (<= a b)\
    \ gcd\n                                                        (if (> a b) gcd\n\
    \                                                          (if (<= a b) gcd\n\
    \                                                            (if (> a b) gcd\n\
    \                                                              (if (<= a b) gcd\n\
    \                                                                (if (> a b) gcd\n\
    \                                                                  (if (<= a b)\
    \ gcd\n                                                                    (if\
    \ (> a b) gcd\n                                                              \
    \        (if (<= a b) gcd\n                                                  \
    \                      (if (> a b) gcd\n                                     \
    \                                     (if (<= a b) gcd\n                     \
    \                                                       (if (> a b) gcd\n    \
    \                                                                          (if\
    \ (<= a b) gcd\n                                                             \
    \                   (if (> a b) gcd\n                                        \
    \                                          (if (<= a b) gcd\n                \
    \                                                                    (if (> a\
    \ b) gcd\n                                                                   \
    \                   (if (<= a b", "  (let ((gcd (gcd a b)))\n    (if (= gcd 1)\n\
    \      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return\
    \ a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (cond\n    ((zero?\
    \ a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return\
    \ a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (let ((gcd (gcd\
    \ a b)))\n    (if (= gcd 1)\n      gcd\n      (greatest_common_divisor (- a gcd)\
    \ (- b gcd))))\n)\n\n;; Return a least common multiple of two integers a and b\n\
    ;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n\
    ;; 75", "  (let ((gcd (gcd a b)))\n    (if (<= gcd 0)\n      0\n      (if (<=\
    \ gcd 1)\n        1\n        gcd)))\n)\n\n;; Return a least common multiple of\
    \ two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n\
    \      (gcd a b))\n  )\n)\n\n;; Return a least common multiple of two integers\
    \ a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n\
    \      (gcd a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers\
    \ a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (let ((gcd (gcd a b)))\n    (if (<= gcd 0)\n      gcd\n \
    \     (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common\
    \ multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n\
    ;; >>> (least_common_multiple 25 15)\n;; 75", "  (let ((gcd (gcd a b)))\n    (if\
    \ (= gcd 1)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\
    \n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (cond ((= a 0)\
    \ 0)\n        ((= b 0) a)\n        (else (gcd a b))\n  ))\n\n;; Return a least\
    \ common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n\
    ;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (cond ((= a 0) 0)\n  \
    \      ((= b 0) 0)\n        (else\n          (/ a b)))\n)\n\n;; Return a least\
    \ common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n\
    ;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (cond\n    ((zero? a)\
    \ a)\n    ((zero? b) b)\n    (else\n      (let ((gcd (gcd a b)))\n        (if\
    \ (zero? (modulo gcd a))\n          gcd\n          (greatest_common_divisor (modulo\
    \ a gcd) (modulo b gcd)))))))\n\n;; Return a least common multiple of two integers\
    \ a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (let ((gcd (gcd a b)))\n    (if (zero? a) gcd\n      (if\
    \ (zero? b) gcd\n        (if (> a b) gcd\n           (if (< a b) gcd\n       \
    \       (if (= a 0) gcd\n                 (if (= b 0) gcd\n                  \
    \  1))))))))\n\n;; Return a least common multiple of two integers a and b\n;;\
    \ >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n\
    ;; 75", "  (cond\n    [(zero? a) a]\n    [(zero? b) b]\n    [(zero? a) b]\n  \
    \  [(zero? b) a]\n    [(> a b) (abs a)]\n    [(> b a) (abs b)]\n    [(> a b) (abs\
    \ b)]\n    [(> b a) (abs a)]\n    [(> a b) (abs b)]\n    [(> b a) (abs a)]\n \
    \   [(> a b) (abs b)]\n    [(> b a) (abs a)]\n    [(> a b) (abs b)]\n    [(> b\
    \ a) (abs a)]\n    [(> a b) (abs b)]\n    [(> b a) (abs a)]\n    [(> a b) (abs\
    \ b)]\n    [(> b a) (abs a)]\n    [(> a b) (abs b)]\n    [(> b a) (abs a)]\n \
    \   [(> a b) (abs b)]\n    [(> b a) (abs a)]\n    [(> a b) (abs b)]\n    [(> b\
    \ a) (abs a)]\n    [(> a b) (abs b)]\n    [(> b a) (abs a)]\n    [(> a b) (abs\
    \ b)]\n    [(> b a) (abs a)]\n    [(> a b) (abs b)]\n    [(> b a) (abs a)]\n \
    \   [(> a b) (abs b)]\n    [(> b a) (abs a)]\n    [(> a b) (abs b)]\n    [(> b\
    \ a) (abs a)]\n    [(> a b) (abs b)]\n    [(> b a) (abs a)]\n    [(> a b) (abs\
    \ b)]\n    [(> b a) (abs a)]\n    [(> a b) (abs b)]\n    [(> b a) (abs a)]\n \
    \   [(> a b) (abs b)]\n    [(> b a) (abs a)]\n    [(> a b) (abs b)]\n", "  (let\
    \ ((gcd (gcd a b)))\n    (if (= gcd 1)\n      gcd\n      (greatest_common_divisor\
    \ (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers\
    \ a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (let ((gcd (gcd a b)))\n    (if (<= 0 gcd)\n      (error\
    \ \"Greatest common divisor is not positive\")\n      gcd)))\n\n;; Return a least\
    \ common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n\
    ;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (let ((gcd (gcd a b)))\n\
    \    (if (= gcd 1)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd))))\n\
    )\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (cond\n    [(zero?\
    \ a) a]\n    [(zero? b) b]\n    [(zero? a) b]\n    [(zero? b) a]\n    [(> a b)\
    \ (abs a)]\n    [(> b a) (abs b)]\n    [(> a b) (abs a)]\n    [(> b a) (abs b)]\n\
    \    [(> a b) (abs a)]\n    [(> b a) (abs b)]\n    [(> a b) (abs a)]\n    [(>\
    \ b a) (abs b)]\n    [(> a b) (abs a)]\n    [(> b a) (abs b)]\n    [(> a b) (abs\
    \ a)]\n    [(> b a) (abs b)]\n    [(> a b) (abs a)]\n    [(> b a) (abs b)]\n \
    \   [(> a b) (abs a)]\n    [(> b a) (abs b)]\n    [(> a b) (abs a)]\n    [(> b\
    \ a) (abs b)]\n    [(> a b) (abs a)]\n    [(> b a) (abs b)]\n    [(> a b) (abs\
    \ a)]\n    [(> b a) (abs b)]\n    [(> a b) (abs a)]\n    [(> b a) (abs b)]\n \
    \   [(> a b) (abs a)]\n    [(> b a) (abs b)]\n    [(> a b) (abs a)]\n    [(> b\
    \ a) (abs b)]\n    [(> a b) (abs a)]\n    [(> b a) (abs b)]\n    [(> a b) (abs\
    \ a)]\n    [(> b a) (abs b)]\n    [(> a b) (abs a)]\n    [(> b a) (abs b)]\n \
    \   [(> a b) (abs a)]\n    [(> b a) (abs b)]\n    [(> a b) (abs a)]\n    [(> b\
    \ a) (abs b)]\n    [(> a b) (abs a)]\n", "  (if (= a 0)\n    b\n    (if (= b 0)\n\
    \      a\n      (greatest_common_divisor (- a b)))))\n\n;; Return a least common\
    \ multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n\
    ;; >>> (least_common_multiple 25 15)\n;; 75", "  (cond ((= a 0) 0)\n        ((=\
    \ a b) a)\n        (else\n          (let ((gcd (greatest_common_divisor (modulo\
    \ a b) (abs a))))\n            (if (>= gcd a)\n                gcd\n         \
    \       (greatest_common_divisor (abs a) (abs b)))))\n  )\n)\n\n;; Return a least\
    \ common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n\
    ;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (cond\n    ((zero? a)\
    \ a)\n    ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return\
    \ a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (let ((gcd (gcd\
    \ a b)))\n    (if (= gcd 1)\n      gcd\n      (greatest_common_divisor (- a gcd)\
    \ (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n\
    ;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n\
    ;; 75", "  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd\
    \ a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and\
    \ b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (let ((gcd (gcd a b)))\n    (if (zero? a) gcd\n      (if\
    \ (zero? b) gcd\n        (if (negative? a) (- gcd)\n          (if (negative? b)\
    \ (- gcd)\n            gcd))))))\n\n;; Return a least common multiple of two integers\
    \ a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (cond\n    [(zero? a) (error \"greatest_common_divisor: first\
    \ argument must be non-zero\")]\n    [(zero? b) (error \"greatest_common_divisor:\
    \ second argument must be non-zero\")]\n    [(zero? (modulo a b)) (error \"greatest_common_divisor:\
    \ arguments must be positive\")]\n    [(zero? (modulo b a)) (error \"greatest_common_divisor:\
    \ arguments must be positive\")]\n    [(zero? (modulo (modulo a b))) (error \"\
    greatest_common_divisor: arguments must be positive\")]\n    [(zero? (modulo (modulo\
    \ b a))) (error \"greatest_common_divisor: arguments must be positive\")]\n  \
    \  [(zero? (modulo (modulo (modulo a b)))) (error \"greatest_common_divisor: arguments\
    \ must be positive\")]\n    [(zero? (modulo (modulo (modulo b a)))) (error \"\
    greatest_common_divisor: arguments must be positive\")]\n    [(zero? (modulo (modulo\
    \ (modulo (modulo a b))))) (error \"greatest_common_divisor: arguments must be\
    \ positive\")]\n    [(zero? (modulo (modulo (modulo (modulo b a))))) (error \"\
    greatest_common_divisor: arguments must be positive\")]\n    [(zero? (modulo (modulo\
    \ (modulo (modulo (modulo a b))))) (error \"greatest_common_divisor: arguments\
    \ must be positive\")]\n    [(zero? (modulo (modulo (modulo (modulo (modulo b\
    \ a))))) (error \"greatest_common_divisor: arguments must be positive\")]\n  \
    \  [(zero? (modulo (modulo (modulo (modulo (modulo (modulo a b))))) (error \"\
    greatest_common_divisor: arguments must be positive\")]\n    [(zero? (modulo (modulo\
    \ (modulo (modulo (modulo (modulo (modulo a b)))))))) (error \"greatest_common_divis",
  "  (let ((gcd (gcd a b)))\n    (if (= gcd 1) gcd\n      (greatest_common_divisor\
    \ (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers\
    \ a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (let ((gcd (gcd a b)))\n    (if (= gcd 1)\n      gcd\n  \
    \    (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common\
    \ multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n\
    ;; >>> (least_common_multiple 25 15)\n;; 75", "  (let ((gcd (gcd a b)))\n    (if\
    \ (= gcd 1) gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;;\
    \ Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (let ((gcd (gcd\
    \ a b)))\n    (if (zero? a) gcd\n      (if (zero? b) gcd\n        (if (negative?\
    \ a)\n          (- gcd (- a b))\n          (if (negative? b)\n            (- gcd\
    \ (- a b))\n            (gcd a b)))))))\n\n;; Return a least common multiple of\
    \ two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 175", "  (cond ((= a 0) 0)\n        ((= b 0) a)\n        (else (gcd\
    \ a b))\n  ))\n\n;; Return a least common multiple of two integers a and b\n;;\
    \ >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n\
    ;; 75", "  (let ((gcd (gcd a b)))\n    (if (<= 0 gcd)\n      gcd\n      (greatest_common_divisor\
    \ (- a gcd) (- b gcd))))\n)\n\n;; Return a least common multiple of two integers\
    \ a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n\
    \      (gcd a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers\
    \ a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (cond\n    [(zero? a) (error \"greatest_common_divisor: first\
    \ argument must be non-zero\")]\n    [(zero? b) (error \"greatest_common_divisor:\
    \ second argument must be non-zero\")]\n    [(zero? (modulo a b)) (error \"greatest_common_divisor:\
    \ arguments must be positive\")]\n    [(zero? (modulo b a)) (error \"greatest_common_divisor:\
    \ arguments must be positive\")]\n    [(not (zero? (modulo a b))) (modulo a b)]\n\
    \  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (let ((gcd (gcd\
    \ a b)))\n    (if (<= 0 gcd)\n      1\n      gcd)))\n\n;; Return a least common\
    \ multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n\
    ;; >>> (least_common_multiple 25 15)\n;; 75", "  (let ((gcd (gcd a b)))\n    (if\
    \ (= gcd 1) gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;;\
    \ Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (cond\n    ((zero?\
    \ a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return\
    \ a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (let ((gcd (gcd\
    \ a b)))\n    (if (zero? a) gcd\n      (if (zero? b) gcd\n        (if (negative?\
    \ a) (- gcd)\n          (if (negative? b) (- gcd)\n            gcd))))))\n\n;;\
    \ Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple\
    \ 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75", "  (let ((gcd (gcd\
    \ a b)))\n    (if (= gcd 1)\n      gcd\n      (greatest_common_divisor (- a gcd)\
    \ (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n\
    ;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n\
    ;; 75", "  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd\
    \ a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and\
    \ b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple\
    \ 25 15)\n;; 75", "  (let ((gcd (gcd a b)))\n    (if (= gcd 1)\n      gcd\n  \
    \    (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common\
    \ multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n\
    ;; >>> (least_common_multiple 25 15)\n;; 75", "  (cond\n    ((zero? a) a)\n  \
    \  ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return a least\
    \ common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n\
    ;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
