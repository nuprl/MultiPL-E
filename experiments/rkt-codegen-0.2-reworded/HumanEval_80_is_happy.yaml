name: HumanEval_80_is_happy
language: rkt
prompt: "#lang racket\n\n;; You are given a string s.\n;; Your task is to check if\
  \ the string is haprkt or not.\n;; A string is haprkt if its length is at least\
  \ 3 and every 3 consecutive letters are distinct\n;; For example:\n;; >>> (is_happy\
  \ a)\n;; #f\n;; >>> (is_happy aa)\n;; #f\n;; >>> (is_happy abcd)\n;; #t\n;; >>>\
  \ (is_happy aabb)\n;; #f\n;; >>> (is_happy adb)\n;; #t\n;; >>> (is_happy xyy)\n\
  ;; #f\n(define (is_happy s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_happy))\n\
  \    (check-equal? (candidate \"a\") #f)\n    (check-equal? (candidate \"aa\") #f)\n\
  \    (check-equal? (candidate \"abcd\") #t)\n    (check-equal? (candidate \"aabb\"\
  ) #f)\n    (check-equal? (candidate \"adb\") #t)\n    (check-equal? (candidate \"\
  xyy\") #f)\n    (check-equal? (candidate \"iopaxpoi\") #t)\n    (check-equal? (candidate\
  \ \"iopaxioi\") #f)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    ((>= (length s) 3)\n      (let ((i 0))\n        (while\
    \ (< i (length s) - 3)\n          (if (memq (string-ref s i) (string-ref s (i\
    \ + 1)))\n              (return #f)\n            (setf i (i + 1)))))\n      (return\
    \ #t)))\n", "  (let ((len (length s)))\n    (and (>= len 3)\n         (let ((i\
    \ 0))\n           (while (< i len)\n             (if (memq (substring s i i +\
    \ 3) (substring s i i + 3))\n                 (return #f)\n               (setf\
    \ i (+ i 3))))))))\n", "  (cond\n    ((>= (length s) 3)\n      (let ((i 0))\n\
    \        (while (< (length s) (3 * (1 + i)))\n          (if (not (eqv? (aref s\
    \ i) (aref s (1 + i))))\n            (return #f)\n            (setf i (1 + i)))\n\
    \          (setf i (1 + i)))\n        (return #t))))\n    (return #f)))\n", " \
    \ (cond\n    ((null? s) #t)\n    (else\n      (let ((i 0))\n        (while (<\
    \ i (string-length s))\n          (if (string-ref s i)\n            (setf i (+\
    \ i 3))\n            (else\n              (return #f)))))))\n", "  (cond\n   \
    \ ((> (length s) 3) #f)\n    ((>= (string-length s) 3)\n      (let ((i 0))\n \
    \       (while (< (string-length s) i)\n          (if (not (eqv? (string-ref s\
    \ i) (string-ref s (1+ i))))\n              #f\n              (setf i (1+ i)))))))\n\
    \  (is_happy s)))\n", "  (cond\n    ((null? s) #t)\n    ((string? s)\n      (let\
    \ ((i (string-length s)))\n        (cond\n          ((i < 3) #f)\n          ((=\
    \ i 3)\n            (let ((j (string-index-of s i)))\n              (cond\n  \
    \              ((j < 3) #f)\n                ((= j 3)\n                  (let\
    \ ((k (string-index-of s j)))\n                    (cond\n                   \
    \   ((k < 3) #f)\n                      ((= k 3)\n                        (let\
    \ ((l (string-index-of s k)))\n                          (cond\n             \
    \               ((l < 3) #f)\n                            ((= l 3)\n         \
    \                     (let ((m (string-index-of s l)))\n                     \
    \           (cond\n                                  ((m < 3) #f)\n          \
    \                        ((= m 3)\n                                    (let ((n\
    \ (string-index-of s m)))\n                                      (cond\n     \
    \                                   ((n < 3) #f)\n                           \
    \             ((= n 3)\n                                          (let ((o (string-index-of\
    \ s n)))\n                                            (cond\n                \
    \                              ((o < 3) #f)\n                                \
    \              ((= o 3)\n                                                (let\
    \ ((p (string-index-of s o)))\n                                              \
    \    (cond\n                                                    ((p < 3) #f)\n\
    \                                                    ((= p 3)\n              \
    \                                        (let ((q (string-index-of s p)))\n  \
    \                                                      (cond\n               \
    \                                           ((q < 3) #f)\n                   \
    \                                       ((= q 3)\n                           \
    \                                (let ((r (string-index-of s q)))\n          \
    \                                                  (cond\n                   \
    \                                           ((r < 3) #f)\n                   \
    \                                           ((= r 3)\n                       \
    \                                         (let ((s (string-index-of s r)))\n \
    \                                                                 (cond\n    \
    \                                                                ((s < 3) #f)\n\
    \                                                                    ((", "  (cond\n\
    \    ((>= (length s) 3)\n      (let ((i 0))\n        (while (< i (length s) -\
    \ 3)\n          (if (not (eqv? (string-ref s i) (string-ref s (i + 1)) (string-ref\
    \ s (i + 2))))\n            (return #f)\n            (setf i (i + 3)))))))\n \
    \ #t))\n", "  (cond\n    ((> (length s) 3) #f)\n    ((= (string-length s) 3)\n\
    \      (let ((i 0))\n        (while (< i (string-length s))\n          (if (not\
    \ (eqv? (string-ref s i) (string-ref s (1+ i))))\n              #f\n         \
    \     (setf i (1+ i)))))))\n  (is_happy s)))\n", "  (cond\n    ((>= (string-length\
    \ s) 3)\n      (let ((i 0))\n        (while (< i (string-length s))\n        \
    \  (if (not (eqv (string-ref s i) (string-ref s (add 1 i))))\n              (return\
    \ #f)\n            (setf i (add 1 i)))))))\n  (is_happy s)))\n", "  (cond\n  \
    \  ((null? s) #f)\n    ((string? s)\n      (let ((length (string-length s)))\n\
    \        (if (>= length 3)\n            (let ((i 0))\n              (while (<\
    \ i length)\n                (if (string-ref s i)\n                    (if (string-ref\
    \ s i + 1)\n                        (if (string-ref s i + 2)\n               \
    \             (return #t))))\n                  (setf i (+ i 3)))\n          \
    \      (setf i 0)))\n          #f))))\n", "  (let ((len (length s)))\n    (and\
    \ (>= len 3)\n         (let ((i 0))\n           (while (< i len)\n           \
    \  (if (memq (aref s i) (aref s (1+ i)))\n                 (return #f)\n     \
    \          (setf i (1+ i))))))))\n", "  (let ((len (length s)))\n    (if (>= len\
    \ 3)\n      (let ((i 0))\n        (while (< i len)\n          (if (memq (aref\
    \ s i) (aref s (1+ i)))\n            (return #f)\n            (setf i (1+ i))))))))\n",
  "  (let ((len (string-length s)))\n    (and (>= len 3)\n         (let ((i 0))\n\
    \           (while (< i len)\n             (if (string-ref s i)\n            \
    \     (string-ref s i 3)\n                 (set! i (+ i 3)))))\n         (not\
    \ (string-ref s i))))\n)\n", "  (cond\n    ((null? s) #t)\n    ((= (length s)\
    \ 3)\n      (let ((i 0))\n        (while (< i (length s) - 3)\n          (if (not\
    \ (eqv? (aref s i) (aref s (1 + i))))\n              #f\n              (setf i\
    \ (1 + i)))))))\n  #t)\n", "  (cond\n    ((string-length s) < 3)\n    (else\n\
    \      (let ((i 0))\n        (while (< i (string-length s))\n          (if (string-ref\
    \ s i)\n            (setf i (+ i 3))\n            (else\n              (return\
    \ #f)))))))\n", "  (cond\n    ((>= (string-length s) 3)\n      (let ((i 0))\n\
    \        (while (< i (string-length s))\n          (if (not (string=? (string-substring\
    \ s i i) (string-substring s i (1+ i))))\n              (return #f)\n        \
    \    (setf i (1+ i)))))))\n  (is_happy s)))\n", "  (cond\n    ((null? s) #t)\n\
    \    (else\n      (let ((i 0))\n        (while (< i (string-length s))\n     \
    \     (if (string-ref s i)\n            (return #f)\n            (set! i (+ i\
    \ 1)))))\n      #t))\n)\n", "  (cond\n    ((null? s) #f)\n    (else\n      (let\
    \ ((i 0))\n        (while (< i (string-length s))\n          (if (string-ref s\
    \ i)\n            (if (string-ref s (add1 i))\n              #f\n            \
    \  #t)))))))\n", "  (let ((len (length s)))\n    (and (>= len 3)\n         (let\
    \ ((i 0))\n           (while (< i len)\n             (if (not (eqv? (aref s i)\
    \ (aref s (1+ i))))\n               (return #f)\n               (set! i (1+ i)))))\n\
    \         (return #t))))\n", "  (cond\n    ((null? s) #f)\n    ((= (length s)\
    \ 3)\n      (let ((i 0))\n        (while (< i (length s))\n          (if (not\
    \ (eqv? (string-ref s i) (string-ref s (1+ i))))\n              (return #f)\n\
    \            (setf i (1+ i)))))))\n  #t))\n", "  (cond\n    ((null? s) #f)\n \
    \   ((>= (length s) 3)\n      (let ((i 0))\n        (while (< i (length s) - 3)\n\
    \          (if (not (eqv? (string-ref s i) (string-ref s (i + 1) 3)))\n      \
    \        #f\n              (setf i (i + 1)))\n        (else\n          #t))))))\n",
  "  (let ((len (string-length s)))\n    (if (>= len 3)\n      (let ((i 0))\n    \
    \    (while (< i len)\n          (if (string-ref s i)\n            (if (< (string-ref\
    \ s i + 1) 3)\n              (return #t)\n              (setf i (+ i 1)))\n  \
    \          (setf i (+ i 2)))\n          (setf i (+ i 3)))\n        (return #f))))\n\
    )\n", "  (let ((i 0)\n         (j 0))\n    (if (string-length s)\n      (if (>=\
    \ (string-length s) 3)\n        (let ((k 0))\n          (while (<= i j)\n    \
    \        (if (string-ci=? (string-ref s i) (string-ref s j))\n              (return\
    \ #f)\n              (setq k (+ k 1))\n              (setq i (+ i 1))\n      \
    \        (setq j (+ j 1))))\n          (return #t))))\n    #f))\n", "  (cond\n\
    \    ((null? s) #t)\n    ((string? s)\n      (let ((length (string-length s)))\n\
    \        (cond\n          ((>= length 3)\n            (let ((i 0))\n         \
    \     (while (< i length - 3)\n                (if (string-ci=? s i i i)\n   \
    \               (return #f)\n                  (set! i (+ i 1)))))))\n       \
    \ (return #t))))\n  (is_happy s)))\n", "  (cond\n    ((>= (string-length s) 3)\n\
    \      (let ((i 0))\n        (while (< i (string-length s))\n          (if (not\
    \ (string=? (string-substring s i i) (string-substring s i (1+i))))\n        \
    \      (return #f)\n            (setf i (1+i)))\n          (setf i (1+i)))\n \
    \       (return #t))))\n  (is_happy \"a\"))", "  (cond\n    ((null? s) #f)\n \
    \   (else\n      (let ((i 0))\n        (while (< i (string-length s))\n      \
    \    (if (string-ref s i)\n              (string-ref s (string-append (string-ref\
    \ s i) (string-ref s (string-add i 1))))\n              (setf i (string-add i\
    \ 1))))\n        (if (string-length s)\n            #t\n            #f))))\n",
  "  (let ((len (string-length s)))\n    (and (>= len 3)\n         (let ((i 0))\n\
    \           (while (< i len)\n             (if (string-ref s i)\n            \
    \     (string-ref s i)\n                 (set! i (+ i 1))))))))\n", "  (let ((len\
    \ (length s)))\n    (and (>= len 3)\n         (let ((i 0))\n           (while\
    \ (< i len)\n             (if (memq (aref s i) (aref s (1+ i)))\n            \
    \     (return #f)\n               (setf i (1+ i))))))))\n", "  (cond\n    [(string-length\
    \ s) < 3]\n    [(string-length s) > 3]\n    [(string-length s) == 3]\n    [(string-length\
    \ s) == 3]\n    [(string-length s) == 3]\n    [(string-length s) == 3]\n    [(string-length\
    \ s) == 3]\n    [(string-length s) == 3]\n    [(string-length s) == 3]\n    [(string-length\
    \ s) == 3]\n    [(string-length s) == 3]\n    [(string-length s) == 3]\n    [(string-length\
    \ s) == 3]\n    [(string-length s) == 3]\n    [(string-length s) == 3]\n    [(string-length\
    \ s) == 3]\n    [(string-length s) == 3]\n    [(string-length s) == 3]\n    [(string-length\
    \ s) == 3]\n    [(string-length s) == 3]\n    [(string-length s) == 3]\n    [(string-length\
    \ s) == 3]\n    [(string-length s) == 3]\n    [(string-length s) == 3]\n    [(string-length\
    \ s) == 3]\n    [(string-length s) == 3]\n    [(string-length s) == 3]\n    [(string-length\
    \ s) == 3]\n    [(string-length s) == 3]\n    [(string-length s) == 3]\n    [(string-length\
    \ s) == 3]\n    [(string-length s) == 3]\n    [(string-length s) == 3]\n    [(string-length\
    \ s) == 3]\n    [(string-length s) == 3]\n    [(string-length s) == 3]\n    [(string-length\
    \ s) == 3]\n    [(string-length s) == 3]\n    [(string-length s) == 3]\n    [(string-length\
    \ s) == 3]\n    [(string-length s) == 3]\n    [(string-length s) == 3]\n    [(string",
  "  (cond\n    ((>= (string-length s) 3)\n      (let ((i (string-index s 0)))\n \
    \       (let ((j (string-index s i)))\n          (cond\n            ((>= (string-length\
    \ s) (string-length s) 3)\n              (not (string-ref s i)))\n           \
    \ ((= (string-length s) 3)\n              (not (string-ref s i)))\n          \
    \  (else\n              (string-ref s i)\n              (string-ref s j)\n   \
    \           (not (string-ref s i)))\n            (else\n              (string-ref\
    \ s i)\n              (string-ref s j)\n              (string-ref s i)))\n   \
    \     ))\n      ))\n    (else\n      #f\n      )))\n", "  (cond\n    ((>= (length\
    \ s) 3)\n      (let ((i 0))\n        (while (< (length s) (3 * (1 + i)))\n   \
    \       (if (not (eqv? (substring s i i) (substring s (1 + i) i)))\n         \
    \     (return #f)\n            (set! i (1 + i)))\n          (set! i 0)))\n   \
    \   (return #t)))\n)\n", "  (cond\n    ((null? s) #t)\n    ((string? s)\n    \
    \  (let ((n (string-length s)))\n        (cond\n          ((= n 3)\n         \
    \   (let ((a (string-ref s 0)))\n              (let ((b (string-ref s 1)))\n \
    \               (let ((c (string-ref s 2)))\n                  (not (eq a b c))))))\n\
    \          (else #f))))))\n", "  (cond\n    ((> (length s) 3) #f)\n    ((= (string-length\
    \ s) 3)\n      (let ((i 0))\n        (while (< i (string-length s))\n        \
    \  (if (not (string=? (string-substring s i i) (string-substring s (i + 1) i)))\n\
    \              (return #f))\n            (set! i (+ i 1)))))\n    (#t)))\n", " \
    \ (cond\n    ((null? s) #t)\n    ((string? s)\n      (let ((i (string-length s)))\n\
    \        (cond\n          ((>= i 3)\n            (let ((j (string-index-of s i)))\n\
    \              (let ((k (string-index-of s j)))\n                (not (eq? j k)))))))\n\
    \      (else #f))))\n", "  (cond\n    ((> (length s) 3) #f)\n    ((= (string-length\
    \ s) 3)\n      (let ((i 0))\n        (while (< i (string-length s))\n        \
    \  (if (not (string=? (substring s i i) (substring s (i + 1) i)))\n          \
    \    #f\n              (setf i (+ i 1)))))))\n  (is_happy s)))\n", "  (cond\n\
    \    ((null? s) #f)\n    ((> (string-length s) 2) #f)\n    (let ((i 0))\n    \
    \  (while (< (string-length s) (3 * (1 + i)))\n        (if (not (eqv? (string-ref\
    \ s i) (string-ref s (1 + i))))\n            (return #f)\n          (set! i (1\
    \ + i)))\n        (set! i 0)))\n    #t))\n", "  (cond\n    ((null? s) #f)\n  \
    \  ((>= (string-length s) 3)\n      (let ((i 0))\n        (while (< (string-length\
    \ s) i)\n          (if (not (eqv? (string-ref s i) (string-ref s (1+ i))))\n \
    \             #f\n              (setf i (1+ i)))))))\n  (is_happy s)))\n", " \
    \ (cond\n    ((null? s) #f)\n    ((string? s)\n      (let ((n (string-length s)))\n\
    \        (and (>= n 3)\n             (let ((i 0))\n               (while (< i\
    \ n - 3)\n                 (if (string-ci=? s i i i)\n                     (return\
    \ #t)\n                     (set! i (+ i 1)))))\n          (return #f))))\n  \
    \  (else #f)))\n", "  (cond\n    ((>= (length s) 3)\n      (let ((i 0))\n    \
    \    (while (< i (length s) - 3)\n          (if (not (eqv? (aref s i) (aref s\
    \ (i + 1)) (aref s (i + 2))))\n            (return #f)\n            (set! i (i\
    \ + 1)))\n          (set! i (i + 1))))\n      #t))\n)\n", "  (cond\n    ((>= (string-length\
    \ s) 3)\n      (let ((i 0))\n        (while (< i (string-length s))\n        \
    \  (if (not (eqv (string-ref s i) (string-ref s (1+ i))))\n              (return\
    \ #f)\n            (setf i (1+ i)))))\n      (return #t)))\n", "  (cond\n    ((>=\
    \ (string-length s) 3)\n      (let ((i 0))\n        (while (< i (string-length\
    \ s))\n          (if (string-ref s i)\n              (string-ref s (string-append\
    \ (string-ref s i) (string-ref s (string-add (string-ref s i) 1))) i)\n      \
    \        (setf i (string-add i 1)))\n            (setf i 0)))\n    (#t)))\n",
  "  (cond\n    ((>= (string-length s) 3)\n      (let ((i 0))\n        (while (< i\
    \ (string-length s))\n          (if (string-ref s i)\n              (string-ref\
    \ s (string-append (string-ref s i) (string-ref s (string-add (string-ref s i)\
    \ 1))))\n            (setf i (string-add i 3)))\n          (setf i (string-add\
    \ i 1))))\n    (#t)))\n", "  (cond\n    ((>= (length s) 3)\n      (let ((i 0))\n\
    \        (while (< (length s) (3 * (1 + i)))\n          (if (not (eqv? (string-ref\
    \ s i) (string-ref s (1 + i))))\n            (return #f)\n            (setf i\
    \ (1 + i)))\n          (setf i (1 + i)))\n        (return #t)))\n    (return #f)))\n",
  "  (cond\n    ((null? s) #t)\n    ((string? s)\n      (let ((n (string-length s)))\n\
    \        (and (>= n 3)\n             (let ((i 0))\n               (while (< i\
    \ n - 3)\n                 (if (string-ci=? s i i i)\n                     #t\n\
    \                     #f)))))))\n  #f))\n", "  (cond\n    ((null? s) #t)\n   \
    \ ((string? s)\n      (let ((n (string-length s)))\n        (if (>= n 3)\n   \
    \         (let ((i 0))\n              (while (< i n - 3)\n                (if\
    \ (string-ci=? s i i i)\n                    (return #f)\n                   \
    \ (set! i (+ i 1))))))))\n    (else #t)))\n", "  (cond\n    ((>= (string-length\
    \ s) 3)\n      (let ((i 0))\n        (while (< i (string-length s))\n        \
    \  (if (string-ref s i)\n              (string-ref s (string-add 1 i))\n     \
    \         (set! i (string-add 1 i))))\n        (not (string-ref s i))))\n    (else\
    \ #f)))\n", "  (let ((n (string-length s)))\n    (and (>= n 3)\n         (let\
    \ ((i 0))\n           (while (< i n - 3)\n             (if (string-ref s i)\n\
    \                 (string-ref s i + 1)\n                 (string-ref s i + 2))\n\
    \             (set! i (+ i 1)))\n           (not (string-ref s i))))))\n", " \
    \ (cond\n    ((null? s) #f)\n    ((string? s)\n      (let ((length (string-length\
    \ s)))\n        (cond\n          ((>= length 3)\n            (let ((i 0))\n  \
    \            (while (< i length)\n                (if (string-ref s i)\n     \
    \             (if (string-ref s i + 1)\n                    (if (string-ref s\
    \ i + 2)\n                      #t\n                      #f))))\n           \
    \     (set! i (+ i 3)))))\n          (#f))))))\n", "  (cond\n    ((null? s) #f)\n\
    \    ((= (length s) 3)\n      (let ((i 0))\n        (while (< i (length s) - 3)\n\
    \          (if (not (eqv? (aref s i) (aref s (1 + i))))\n              #f\n  \
    \            (setf i (1 + i)))))))\n  #t))\n", "  (let ((len (string-length s)))\n\
    \    (if (>= len 3)\n      (let ((i 0))\n        (while (< i len)\n          (if\
    \ (string-ref s i)\n            (set! i (+ i 3))\n            (else\n        \
    \      (return #f))))))))\n", "  (cond\n    ((string-length s) < 3)\n    (else\n\
    \      (let ((i 0))\n        (while (< i (string-length s))\n          (if (string-ref\
    \ s i)\n            (return #f)\n            (set! i (+ i 1)))))\n      (return\
    \ #t))))\n", "  (cond\n    ((null? s) #f)\n    ((> (length s) 2) #f)\n    (let\
    \ ((i 0))\n      (while (< (length s) (3 * (1 + i)))\n        (if (not (eqv? (substring\
    \ s i i) (substring s (1 + i) i)))\n            #f\n            (set! i (1 + i)))\n\
    \      )\n      #t\n    )\n  )\n)\n", "  (let ((len (string-length s)))\n    (and\
    \ (>= len 3)\n         (let ((i 0))\n           (while (< i len)\n           \
    \  (if (string-ref s i)\n                 (string-ref s i)\n                 (set!\
    \ i (+ i 1)))))\n         (not (string-ref s i))))\n)\n", "  (cond\n    ((null?\
    \ s) #f)\n    (else\n      (let ((i 0))\n        (while (< i (string-length s))\n\
    \          (if (string-ref s i)\n            (return #f)\n            (set! i\
    \ (+ i 1)))))\n      #t))\n\n;; You are given a string s.\n;; Your task is to\
    \ check if the string is haprkt or not.\n;; A string is haprkt if its length is\
    \ at least 3 and every 3 consecutive letters are distinct\n;; For example:\n;;\
    \ >>> (is_happy a)\n;; #f\n;; >>> (is_happy aa)\n;; #f\n;; >>> (is_happy abcd)\n\
    ;; #t\n;; >>> (is_happy aabb)\n;; #f\n;; >>> (is_happy adb)\n;; #t\n;; >>> (is_happy\
    \ xyy)\n;; #f", "  (cond\n    ((null? s) #f)\n    ((> (length s) 2) #f)\n    (let\
    \ ((i 0))\n      (while (< (length s) (3 * (1 + i)))\n        (if (not (eqv? (substring\
    \ s i i) (substring s (1 + i) (1 + i))))\n            #f\n            (setf i\
    \ (1 + i))))))))\n", "  (cond\n    ((>= (string-length s) 3)\n      (let ((i 0))\n\
    \        (while (< i (string-length s))\n          (if (string-ref s i)\n    \
    \          (string-ref s (string-append (string-ref s i) (string-ref s (string-add\
    \ 1 i))))\n            (setf i (string-add 1 i)))))))\n  (is_happy s)))\n", " \
    \ (let ((len (length s)))\n    (if (< len 3)\n      #f\n    (let ((i 0))\n   \
    \   (while (< i len)\n        (if (string=? (substring s i i + 3) (substring s\
    \ i i + 3))\n          (return #t)\n        (setf i (+ i 3)))\n      )))\n   \
    \ #f\n  )\n)\n", "  (cond\n    ((null? s) #t)\n    ((>= (length s) 3)\n      (let\
    \ ((i 0))\n        (while (< (length s) (3 * (1 + i)))\n          (if (not (eqv?\
    \ (substring s i i) (substring s (1 + i) i)))\n              (return #f)\n   \
    \         (set! i (1 + i)))\n          (set! i 0)))\n      #t)\n    #f))\n", " \
    \ (cond\n    ((> (length s) 3) #f)\n    ((= (string-length s) 3)\n      (let ((i\
    \ 0))\n        (while (< i (string-length s))\n          (if (not (string-ref\
    \ s i))\n            (return #t)\n            (setf i (+ i 1)))))))\n    (else\
    \ #f)))\n", "  (cond\n    ((string-length s) < 3)\n    (else\n      (let ((i 0))\n\
    \        (while (< i (string-length s))\n          (if (string-ref s i)\n    \
    \        (return #f)\n            (set! i (+ i 1)))))\n      (return #t))))\n",
  "  (cond\n    ((>= (length s) 3)\n      (let ((i 0))\n        (while (< i (length\
    \ s) - 3)\n          (if (not (eqv? (aref s i) (aref s (1 + i))))\n          \
    \  (return #f)\n            (setf i (1 + i)))\n          (setf i (1 + i)))\n \
    \       (return #t)))\n    (else\n      #f)))\n", "  (let ((length (string-length\
    \ s)))\n    (and (>= length 3)\n         (let ((i 0))\n           (while (< i\
    \ length)\n             (if (string-ci=? s i i+3)\n                 (return #t)\n\
    \                 (set! i (+ i 1))))))))\n", "  (cond\n    ((null? s) #f)\n  \
    \  ((> (string-length s) 3) #f)\n    (let ((i 0))\n      (while (< i (string-length\
    \ s))\n        (if (not (eqv? (string-ref s i) (string-ref s (i + 1)) (string-ref\
    \ s (i + 2))))\n            (return #f)\n            (setf i (i + 3))))\n    \
    \    (return #t)))))\n", "  (cond\n    ((null? s) #f)\n    (else\n      (let ((i\
    \ 0))\n        (while (< i (string-length s))\n          (if (string-ref s i)\n\
    \            (if (string-ref s (add 1 i))\n              #t\n              #f)\n\
    \            (setf i (add 1 i)))))))\n)\n", "  (let ((length (string-length s)))\n\
    \    (and (>= length 3)\n         (let ((i 0))\n           (while (< i length)\n\
    \             (if (string-ref s i)\n                 (if (string-ref s i + 1)\n\
    \                     (if (string-ref s i + 2)\n                         (string-ref\
    \ s i + 3)\n                         #f)\n                       #t)\n       \
    \              #f)\n                 (setf i (+ i 3)))))\n    #t))\n", "  (cond\n\
    \    ((>= (length s) 3)\n      (let ((i 0))\n        (while (< i (length s) -\
    \ 3)\n          (if (not (eqv? (string-ref s i) (string-ref s (i + 1)) (string-ref\
    \ s (i + 2))))\n            (return #f)\n            (setf i (i + 3)))))))\n \
    \ (is_happy s)))\n", "  (cond\n    ((>= (length s) 3)\n      (let ((i 0))\n  \
    \      (while (< i (length s) - 3)\n          (if (memq (aref s i) (aref s (i\
    \ + 1)))\n              (return #f)\n            (setf i (i + 1)))))))\n)\n",
  "  (cond\n    ((>= (string-length s) 3)\n      (let ((i 0))\n        (while (< i\
    \ (string-length s))\n          (if (not (eqv? (string-ref s i) (string-ref s\
    \ (add1 i))))\n              (return #f)\n            (setf i (add1 i)))))\n \
    \     (return #t)))\n", "  (cond\n    ((null? s) #f)\n    ((> (length s) 3) #f)\n\
    \    (let ((i 0))\n      (while (< (length s) (3 * (1 + i)))\n        (if (not\
    \ (eqv? (substring s i i) (substring s (1 + i) i)))\n            #f\n        \
    \    (setf i (1 + i)))\n      )\n      #t\n    )\n  )\n)\n", "  (cond\n    [(string-length\
    \ s) >= 3]\n    [(let ((i 0))\n      (while (< i (string-length s))\n        [(if\
    \ (string-ref s i)\n            [(return #f)])\n          (set! i (+ i 1))])\n\
    \        [(return #t)])]))\n", "  (cond\n    ((null? s) #f)\n    (else\n     \
    \ (let ((i 0))\n        (while (< i (string-length s))\n          (if (string-ref\
    \ s i)\n            (if (string-ref s (add1 i))\n              #t\n          \
    \    #f)\n            (setf i (add1 i)))))\n      #t))\n", "  (cond\n    ((>=\
    \ (length s) 3)\n      (let ((i 0))\n        (while (< (length s) (3 * (1 + i)))\n\
    \          (if (not (eqv? (substring s i i) (substring s (1 + i) i)))\n      \
    \      (return #f)\n            (set! i (1 + i)))\n          (set! i (1 + i))))\n\
    \      #t))\n  (is_happy s)))\n", "  (cond\n    ((null? s) #f)\n    ((string?\
    \ s)\n      (let ((len (string-length s)))\n        (if (>= len 3)\n         \
    \   (let ((i 0))\n              (while (< i len - 3)\n                (if (string-ci=?\
    \ s i i i)\n                    (return #t)\n                    (set! i (+ i\
    \ 1)))))))\n      (#f)))\n)\n", "  (cond\n    ((null? s) #t)\n    ((< (length\
    \ s) 3) #f)\n    (let ((i 0))\n      (while (< (length s) (3 * (1 + i)))\n   \
    \     (if (not (eqv? (string-ref s i) (string-ref s (1 + i))))\n            (return\
    \ #f)\n            (setf i (1 + i)))\n      )\n      (return #t)\n    )\n  )\n\
    )\n", "  (cond\n    ((>= (length s) 3)\n      (let ((i 0))\n        (while (<\
    \ i (length s) - 3)\n          (if (not (eqv? (aref s i) (aref s (i + 1)) (aref\
    \ s (i + 2))))\n            (return #f)\n            (set! i (i + 3)))))))\n \
    \ #t))\n", "  (cond\n    ((null? s) #t)\n    ((string? s)\n      (let ((i (string-length\
    \ s)))\n        (cond\n          ((>= i 3)\n            (let ((cnt (0)))\n   \
    \           (for-each (lambda (x) (setf cnt (+ cnt 1))) s)\n                (>\
    \ cnt 3)))\n          (else #f))))))\n", "  (cond\n    ((null? s) #f)\n    ((=\
    \ (length s) 3)\n      (let ((i 0))\n        (while (< i (length s) - 3)\n   \
    \       (if (not (eqv? (string-ref s i) (string-ref s (i + 1)) (string-ref s (i\
    \ + 2))))\n            (return #f)\n            (set! i (i + 3)))))))\n    (#t)))\n",
  "  (cond\n    ((null? s) #t)\n    (else\n      (let ((i 0))\n        (while (< i\
    \ (string-length s))\n          (if (string-ref s i)\n            (let ((j (i\
    \ + 3)))\n              (while (< j (string-length s))\n                (if (string-ref\
    \ s j)\n                  (return #f)\n                  (setf i j)\n        \
    \          (setf j (string-length s)))))\n            (setf i (string-length s)))))))\n\
    )\n", "  (cond\n    ((string-length s) < 3)\n    (else\n      (let ((i 0))\n \
    \       (while (< i (string-length s))\n          (if (string-ref s i)\n     \
    \         (string-set! s i #f)\n              (set! i (+ i 1)))))\n      (not\
    \ (string-ref s 0) (string-ref s 1) (string-ref s 2)))\n  ))\n", "  (cond\n  \
    \  ((null? s) #f)\n    (else\n      (let ((i 0))\n        (while (< i (string-length\
    \ s))\n          (if (string-ref s i)\n            (return #f)\n            (setf\
    \ i (+ i 1)))))\n      #t))))\n", "  (cond\n    ((>= (length s) 3)\n      (let\
    \ ((i 0))\n        (while (< i (length s) - 3)\n          (if (not (eqv? (aref\
    \ s i) (aref s (i + 1)) (aref s (i + 2))))\n            (return #f)\n        \
    \    (set! i (i + 3)))))))\n  (is_happy s)))\n", "  (cond\n    ((>= (length s)\
    \ 3)\n      (let ((i 0))\n        (while (< i (length s) - 3)\n          (if (not\
    \ (eqv? (string-ref s i) (string-ref s (i + 1) 3)))\n              (return #f)\n\
    \            (setf i (i + 1)))\n          (setf i 0))))\n    (#t)))\n", "  (let\
    \ ((n (string-length s)))\n    (and (>= n 3)\n         (let ((i 0))\n        \
    \   (while (< i n - 3)\n             (if (string-ref s i)\n                 (string-ref\
    \ s i + 1)\n                 (string-ref s i + 2))\n             (set! i (+ i\
    \ 1)))))\n    (eq? n 3)))\n", "  (cond\n    ((> (length s) 3) #t)\n    ((= (length\
    \ s) 1) #f)\n    ((= (length s) 2)\n      (let ((i 0))\n        (while (< (length\
    \ s) i)\n          (if (not (eqv? (string-ref s i) (string-ref s (1+ i))))\n \
    \             #f\n              #t))))))\n", "  (let ((len (string-length s)))\n\
    \    (and (>= len 3)\n         (let ((i 0))\n           (while (< i len)\n   \
    \          (if (string-ci= s i i+3)\n                 #t\n                 #f\n\
    \                 (set! i (+ i 3))))))))\n", "  (cond\n    ((>= (length s) 3)\n\
    \      (let ((i 0))\n        (while (< i (length s) - 3)\n          (if (not (eqv?\
    \ (string-ref s i) (string-ref s (i + 1)) (string-ref s (i + 2))))\n         \
    \     (return #f)\n            (set! i (i + 3)))))))\n  #t))\n", "  (cond\n  \
    \  ((null? s) #f)\n    ((= (length s) 3)\n      (let ((i 0))\n        (while (<\
    \ i (length s) - 3)\n          (if (not (eqv? (aref s i) (aref s (1 + i))))\n\
    \              #f\n              (setf i (1 + i)))))))\n  #t))\n", "  (cond\n\
    \    ((null? s) #f)\n    ((string? s)\n      (let ((n (string-length s)))\n  \
    \      (and (>= n 3)\n             (let ((i 0))\n               (while (< i n\
    \ - 3)\n                 (if (string-ci=? s i i i)\n                     #t\n\
    \                     #f)))))))\n  #f))\n", "  (let ((len (string-length s)))\n\
    \    (if (>= len 3)\n      (let ((i 0))\n        (while (< i len - 3)\n      \
    \    (if (string-ref s i)\n            (if (string-ref s i + 1)\n            \
    \  (if (string-ref s i + 2)\n                (return #t))))\n            (setf\
    \ i (+ i 3)))\n          (setf i 0)))\n      (return #f)))\n", "  (cond\n    ((null?\
    \ s) #f)\n    ((string? s)\n      (let ((length (string-length s)))\n        (if\
    \ (>= length 3)\n            (let ((i 0))\n              (while (< i length)\n\
    \                (if (string-ref s i)\n                    (let ((j (i + 1)))\n\
    \                      (while (< j length)\n                        (if (string-ref\
    \ s j)\n                            (return #f)\n                            (setf\
    \ i j)\n                          )\n                        )\n             \
    \         )\n                    (setf i length)\n                  )\n      \
    \          )\n              )\n            #t\n          )\n        )\n      )\n\
    \  )\n)\n", "  (cond\n    ((null? s) #f)\n    ((string? s)\n      (let ((length\
    \ (string-length s)))\n        (if (>= length 3)\n            (let ((i 0))\n \
    \             (while (< i length)\n                (if (string-ref s i)\n    \
    \                (string-ref s (string-add 1 i))\n                    (string-set!\
    \ s i #f)\n                  (set! i (string-add 1 i))))\n                (return\
    \ #t)))))))\n", "  (cond\n    ((string? s)\n      (is-string? s))\n    ((>= (string-length\
    \ s) 3)\n      (let ((i 0))\n        (while (< i (string-length s))\n        \
    \  (if (string-ref s i)\n            (string-ref s (string-append (string-ref\
    \ s i) (string-ref s (string-add 1 i))))\n            (setf i (string-add 1 i)))))))\n\
    )\n", "  (cond\n    ((>= (length s) 3)\n      (every-curry\n        (lambda (a\
    \ b)\n          (and\n            (not (eq a b))\n            (not (eq (cdr a)\
    \ (cdr b))))))\n      (lambda (a b c)\n        (and\n          (not (eq a b))\n\
    \          (not (eq a c))\n          (not (eq b c))))))\n    (else #f)))\n", " \
    \ (let ((count 0))\n    (while (< (string-length s) (3 * (1 + count)))\n     \
    \ (if (string-ref s count)\n        (return #f)\n      (set! count (+ count 1)))))\n\
    )\n", "  (cond\n    ((>= (length s) 3)\n      (let ((i 0))\n        (while (<\
    \ (length s) (3 * (1 + i)))\n          (if (not (eqv? (string-ref s i) (string-ref\
    \ s (1 + i))))\n            (return #f)\n            (setf i (1 + i)))\n     \
    \     (setf i (1 + i)))\n        (return #t))))\n  (else #f)))\n", "  (cond\n\
    \    ((>= (string-length s) 3)\n      (let ((i 0))\n        (while (< i (string-length\
    \ s))\n          (if (string-ref s i)\n              (string-ref s (string-append\
    \ (string-ref s i) (string-ref s (string-add (string-ref s i) 1))))\n        \
    \    (setf i (string-add i 1)))))))\n  (is_happy s)))\n", "  (cond\n    ((>= (length\
    \ s) 3)\n      (let ((i 0))\n        (while (< i (length s) - 3)\n          (if\
    \ (not (eqv? (aref s i) (aref s (i + 1)) (aref s (i + 2))))\n            (return\
    \ #f)\n            (set! i (i + 3)))))))\n  #t))\n", "  (cond\n    ((null? s)\
    \ #f)\n    ((= (length s) 3)\n      (let ((i 0))\n        (while (< i (length\
    \ s) - 3)\n          (if (not (= (string-ref s i) (string-ref s (i + 1))))\n \
    \           (return #f)\n            (setf i (i + 3)))))))\n  #t))\n", "  (cond\n\
    \    ((null? s) #t)\n    ((= (length s) 3)\n      (let ((i 0))\n        (while\
    \ (< i (length s) - 3)\n          (if (not (eqv? (string-ref s i) (string-ref\
    \ s (i + 1) ) (string-ref s (i + 2) )))\n            (return #f)\n           \
    \ (set! i (i + 3)))))))\n  (is_happy s)))\n", "  (cond\n    ((>= (length s) 3)\n\
    \      (let ((i 0))\n        (while (< (length s) (3 * (1 + i)))\n          (if\
    \ (not (eqv? (substring s i i) (substring s (1 + i) i)))\n            (return\
    \ #f)\n            (set! i (1 + i)))\n          (set! i (1 + i))))\n      #t))\n\
    \  (is_happy s)))\n", "  (cond\n    ((>= (string-length s) 3)\n      (let ((i\
    \ 0))\n        (while (< i (string-length s))\n          (if (string-ref s i)\n\
    \              (string-ref s (string-add (string-ref s i) 1))\n              (setf\
    \ i (string-add i 1)))\n          (setf i (string-add i 1))))\n      (#t)))\n",
  "  (let ((len (length s)))\n    (and (>= len 3)\n         (let ((i 0))\n       \
    \    (while (< i len)\n             (if (memq (string-ref s i) (string-ref s (1+\
    \ i)))\n                 (return #f)\n               (setf i (1+ i))))))))\n",
  "  (let ((n (string-length s)))\n    (and (>= n 3)\n         (let ((i 0))\n    \
    \       (while (< i n - 3)\n             (if (string-ref s i)\n              \
    \   (string-ref s i + 1)\n                 (string-ref s i + 2))\n           \
    \  (set! i (+ i 1)))\n           (not (string-ref s i))))))\n", "  (cond\n   \
    \ ((null? s) #t)\n    ((string? s)\n      (let ((i (string-length s)))\n     \
    \   (cond\n          ((>= i 3)\n            (let ((cnt (string-count s #\"a\"\
    \ #\"b\" #\"c\")))\n              (and (>= cnt 3)\n                  (not (string-ci=?\
    \ s #\"a\" #\"b\" #\"c\"))))\n            (not (string-ci=? s #\"a\" #\"b\" #\"\
    c\" #\"d\"))))\n          (else #f))))))\n", "  (cond\n    ((null? s) #f)\n  \
    \  ((> (length s) 2) #f)\n    (let ((i 0))\n      (while (< (length s) (3 * (1\
    \ + i)))\n        (if (not (eqv? (substring s i i) (substring s (1 + i) (1 + i))))\n\
    \            #f\n            (set! i (1 + i)))))))\n", "  (cond\n    ((>= (string-length\
    \ s) 3)\n      (let ((i 0))\n        (while (< i (string-length s))\n        \
    \  (if (string-ref s i)\n              (string-ref s (string-append (string-ref\
    \ s i) (string-ref s (string-add i 1))))\n            (setf i (string-add i 1)))))))\n",
  "  (cond\n    ((>= (length s) 3)\n      (let ((i 0))\n        (while (< i (length\
    \ s) - 3)\n          (if (not (eqv? (aref s i) (aref s (1 + i))))\n          \
    \  (return #f)\n            (setf i (1 + i)))))))\n  #t))\n", "  (let ((len (length\
    \ s)))\n    (and (>= len 3)\n         (let ((i 0))\n           (while (< i len)\n\
    \             (if (memq (string-ref s i) (string-ref s (1+ i)))\n            \
    \     (return #f)\n               (set! i (1+ i))))))))\n", "  (cond\n    ((null?\
    \ s) #f)\n    ((>= (length s) 3)\n      (let ((i 0))\n        (while (< i (length\
    \ s) - 3)\n          (if (memq (string-ref s i) (string-ref s (i + 1) (i + 2)))\n\
    \              #f\n              (setf i (+ i 3)))))))\n))\n", "  (cond\n    ((string-length\
    \ s) < 3)\n    (else\n      (let ((i 0))\n        (while (< i (string-length s))\n\
    \          (if (string-ref s i)\n            (return #f)\n            (setf i\
    \ (+ i 1)))))\n      (return #t))))\n", "  (let ((len (length s)))\n    (and (>=\
    \ len 3)\n         (let ((i 0))\n           (while (< i len)\n             (if\
    \ (memq (aref s i) (aref s (1+ i)))\n                 (return #f)\n          \
    \     (setf i (1+ i))))))))\n", "  (let ((len (length s)))\n    (and (>= len 3)\n\
    \         (let ((i 0))\n           (while (< i len)\n             (if (memq (aref\
    \ s i) (aref s (1+ i)))\n                 (return #f)\n               (setf i\
    \ (1+ i)))))\n         (return #t))))\n", "  (cond\n    ((null? s) #f)\n    ((string?\
    \ s)\n      (let ((i (string-length s)))\n        (cond\n          ((>= i 3)\n\
    \            (let ((cnt (string-count s #\"a\")))\n              (and (= cnt 3)\n\
    \                   (not (string=? (string-substring s i -3) #\"a\"))))\n    \
    \        (not (string=? (string-substring s i -2) #\"a\"))))\n          (#t))))\n\
    \  (#f)))\n", "  (cond\n    ((null? s) #f)\n    ((string? s)\n      (let ((n (string-length\
    \ s)))\n        (and (>= n 3)\n             (let ((i 0))\n               (while\
    \ (< i n - 3)\n                 (if (string-ci=? s i i i)\n                  \
    \   (return #t)\n                     (set! i (+ i 1))))))))))\n", "  (cond\n\
    \    ((null? s) #f)\n    ((string? s)\n      (let ((cnt (string-length s)))\n\
    \        (cond\n          ((>= cnt 3)\n            (let ((i 0))\n            \
    \  (while (< i cnt)\n                (if (are-distinct (string-ref s i))\n   \
    \               (return #t)\n                  (setf i (+ i 1)))\n           \
    \     (setf i 0)))\n            (return #f)))))))\n", "  (cond\n    ((null? s)\
    \ #t)\n    (else\n      (let ((i 0))\n        (while (< i (string-length s))\n\
    \          (if (string-ref s i)\n              (string-ref s (string-append (string-ref\
    \ s i) (string-ref s (string-add i 1))))\n              (setf i (string-add i\
    \ 1))))\n        (not (null? (string-ref s i)))))))\n", "  (let ((len (string-length\
    \ s)))\n    (and (>= len 3)\n         (let ((i 0))\n           (while (< i len)\n\
    \             (if (string-ref s i)\n                 (string-ref s (string-add\
    \ i 3))\n                 (set! i (string-add i 3))))))))\n", "  (cond\n    ((>=\
    \ (length s) 3)\n      (let ((i 0))\n        (while (< i (length s) - 3)\n   \
    \       (if (not (eqv? (aref s i) (aref s (i + 1)) (aref s (i + 2)))\n       \
    \         (setf i (i + 3))))\n            (return #t))))\n    (return #f)))\n",
  "  (cond\n    ((null? s) #f)\n    (else\n      (let ((i 0))\n        (while (< i\
    \ (string-length s))\n          (if (string-ref s i)\n              (string-ref\
    \ s (string-append (string-ref s i) (string-ref s (string-add i 1))))\n      \
    \        (set! i (string-add i 1))))\n        (#t)))\n  )\n)\n", "  (cond\n  \
    \  ((null? s) #f)\n    ((>= (string-length s) 3)\n      (let ((i 0))\n       \
    \ (while (< i (string-length s))\n          (if (not (eqv? (string-ref s i) (string-ref\
    \ s (1+ i))))\n              #f\n              (setf i (1+ i)))))))\n  (is_happy\
    \ s)))\n", "  (cond\n    ((null? s) #f)\n    ((>= (string-length s) 3)\n     \
    \ (let ((i 0))\n        (while (< i (string-length s))\n          (if (not (eqv?\
    \ (string-ref s i) (string-ref s (i + 1)))))\n            (setf i (i + 3)))\n\
    \        (if (eqv? (string-ref s i) (string-ref s (i + 1)))\n            (setf\
    \ i (i + 3)))\n        (if (eqv? (string-ref s i) (string-ref s (i + 2)))\n  \
    \          (setf i (i + 3)))\n        (if (eqv? (string-ref s i) (string-ref s\
    \ (i + 3)))\n            (setf i (i + 3)))\n        (setf i (i + 1)))\n      #t))))\n",
  "  (cond\n    ((>= (length s) 3)\n      (let ((i 0))\n        (while (< i (length\
    \ s) - 3)\n          (if (not (eqv? (substring s i i + 3) (substring s i i + 3)))\n\
    \              (return #f)\n            (setf i (+ i 3)))\n          (setf i 0))))\n\
    \    (return #t)))\n", "  (cond\n    ((>= (string-length s) 3)\n      (let ((i\
    \ 0))\n        (while (< i (string-length s))\n          (if (not (eqv (string-ref\
    \ s i) (string-ref s (1 + i))))\n              (return #f)\n            (setf\
    \ i (1 + i)))))\n      (return #t)))\n", "  (cond\n    ((null? s) #f)\n    (else\n\
    \      (let ((i 0))\n        (while (< i (string-length s))\n          (if (string-ref\
    \ s i)\n            (return #f)\n            (set! i (+ i 1)))))\n      #t))\n\
    \n;; You are given a string s.\n;; Your task is to check if the string is haprkt\
    \ or not.\n;; A string is haprkt if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n;; For example:\n;; >>> (is_happy a)\n;; #f\n;; >>> (is_happy\
    \ aa)\n;; #f\n;; >>> (is_happy abcd)\n;; #t\n;; >>> (is_happy aabb)\n;; #f\n;;\
    \ >>> (is_happy adb)\n;; #t\n;; >>> (is_happy xyy)\n;; #f", "  (cond\n    ((>=\
    \ (length s) 3)\n      (let ((i 0))\n        (while (< i (length s) - 3)\n   \
    \       (if (not (eqv? (aref s i) (aref s (1 + i))))\n            (return #f)\n\
    \            (setf i (1 + i)))\n          (setf i (1 + i))))\n      (return #t)))\n\
    )\n", "  (cond\n    ((null? s) #f)\n    ((> (length s) 2) #f)\n    (let ((i 0))\n\
    \      (while (< (length s) (3 * (1 + i)))\n        (if (not (eqv? (substring\
    \ s i i) (substring s (1 + i) i)))\n            #f\n            (set! i (+ i 1))))\n\
    \        #t))))\n", "  (cond\n    ((>= (length s) 3)\n      (every-char\n    \
    \    (lambda (c)\n          (and\n            (not (eq c c))\n            (not\
    \ (eq c (car s)))))\n        (cdr s)))\n    (else #f)))\n", "  (cond\n    ((>=\
    \ (length s) 3)\n      (let ((i 0))\n        (while (< i (length s) - 3)\n   \
    \       (if (not (eqv? (string-ref s i) (string-ref s (i + 1)) (string-ref s (i\
    \ + 2))))\n            (return #f)\n            (setf i (i + 3)))))))\n  #t))\n",
  "  (cond\n    ((>= (string-length s) 3)\n      (let ((i 0))\n        (while (< i\
    \ (string-length s))\n          (if (not (eqv? (string-ref s i) (string-ref s\
    \ (i + 1)))))\n            (setf i (i + 3)))\n          (setf i (i + 1)))\n  \
    \      (eqv? (string-ref s 0) (string-ref s (string-length s - 1))))\n    (else\
    \ #f)))\n", "  (cond\n    ((null? s) #f)\n    ((> (length s) 2) #f)\n    (let\
    \ ((i 0))\n      (while (< (length s) (3 * (1 + i)))\n        (if (not (eqv? (substring\
    \ s i i) (substring s (1 + i) i)))\n            #f\n            (set! i (+ i 1)))\n\
    \      )\n      #t\n    )\n  )\n)\n", "  (cond\n    ((null? s) #t)\n    ((< (length\
    \ s) 3) #f)\n    (let ((i 0))\n      (while (< (length s) (3 * (1 + i)))\n   \
    \     (if (not (eqv? (string-ref s i) (string-ref s (1 + i))))\n            #f\n\
    \            (setf i (1 + i)))))))\n", "  (cond\n    ((>= (length s) 3)\n    \
    \  (every-char\n        (lambda (c)\n          (and\n            (not (eq c c))\n\
    \            (not (eq c (car s)))\n          )\n        )\n      )\n      #t\n\
    \    )\n    (else #f)\n  )\n)\n", "  (let ((len (string-length s)))\n    (and\
    \ (>= len 3)\n         (let ((i 0))\n           (while (< i len)\n           \
    \  (if (string-ci= s i (+ i 3))\n                 (return #t)\n              \
    \ (set! i (+ i 1)))))\n         (return #f))))\n", "  (cond\n    ((null? s) #f)\n\
    \    ((< (length s) 3) #f)\n    (let ((i 0))\n      (while (< (length s) (3 *\
    \ (1 + i)))\n        (if (not (eqv? (substring s i i) (substring s (1 + i) i)))\n\
    \            #f\n            (set! i (1 + i)))\n      )\n      #t\n    )\n  )\n\
    )\n", "  (cond\n    ((null? s) #f)\n    ((string? s)\n      (let ((len s))\n \
    \       (if (>= len 3)\n            (let ((i 0))\n              (while (< i len\
    \ - 3)\n                (if (memq (string-ci (substring s i i + 3)) s)\n     \
    \               #f\n                    (setf i (+ i 3)))))))\n      #t))\n  (is_happy\
    \ s)))\n", "  (cond\n    ((null? s) #f)\n    ((>= (string-length s) 3)\n     \
    \ (let ((i 0))\n        (while (< i (string-length s))\n          (if (not (eqv?\
    \ (string-ref s i) (string-ref s (i + 1)))))\n            (set! i (i + 3))\n \
    \         else\n            (set! i (i + 1)))))\n    (#t)))\n", "  (cond\n   \
    \ ((null? s) #f)\n    ((string? s)\n      (let ((len s))\n        (cond\n    \
    \      ((>= len 3)\n            (let ((i 0))\n              (while (< i (string-length\
    \ s) - 3)\n                (if (string-ref s i)\n                  (string-ref\
    \ s i + 1)\n                  (string-ref s i + 2))\n                (set! i (+\
    \ i 1)))))\n          (#t)))))))\n", "  (cond\n    ((null? s) #f)\n    (else\n\
    \      (let ((i 0))\n        (while (< i (string-length s))\n          (if (string-ref\
    \ s i)\n              (string-ref s (string-add (string-ref s i) 1))\n       \
    \       (set! i (string-add i 3)))\n          (set! i (string-add i 3))))\n  \
    \    (#t)))\n", "  (let ((len (string-length s)))\n    (and (>= len 3)\n     \
    \    (let ((i 0))\n           (while (< i len)\n             (if (string-ref s\
    \ i)\n                 (string-ref s i)\n                 (set! i (+ i 1))))))))\n",
  "  (let ((count 0)\n         (i 0))\n    (while (< i (string-length s))\n      (if\
    \ (string-substring s i i)\n          (set! count (+ count 1))\n        (set!\
    \ i (+ i 1))))\n    (not (< count 3)))\n)\n", "  (cond\n    ((null? s) #f)\n \
    \   ((string? s)\n      (let ((length (string-length s)))\n        (cond\n   \
    \       ((>= length 3)\n            (let ((i 0))\n              (while (< i length)\n\
    \                (if (string-cii-caseless? s i i+3)\n                    (return\
    \ #t)\n                    (set! i (+ i 1)))\n                (set! i (+ i 2)))\n\
    \              )))\n          (else #f))))))\n", "  (cond\n    ((null? s) #f)\n\
    \    ((> (length s) 2) #f)\n    (let ((i 0))\n      (while (< (length s) (3 *\
    \ (1 + i)))\n        (if (not (eqv? (substring s i i) (substring s (1 + i) i)))\n\
    \            (return #f)\n          (set! i (1 + i)))\n      )\n      #t\n   \
    \ )\n  )\n)\n", "  (cond\n    ((null? s) #t)\n    ((= (length s) 3)\n      (let\
    \ ((i 0))\n        (while (< i (length s) - 3)\n          (if (not (= (string-ref\
    \ s i) (string-ref s (i + 1))))\n            (return #f)\n            (setf i\
    \ (i + 3)))))))\n  #t))\n", "  (let ((length (string-length s)))\n    (and (>=\
    \ length 3)\n         (let ((i 0))\n           (while (< i length)\n         \
    \    (if (string-ci=? s i i (+ 3 i))\n                 (return #t)\n         \
    \        (set! i (+ i 1))))))))\n", "  (cond\n    ((>= (length s) 3)\n      (let\
    \ ((i 0))\n        (while (< (length s) (3 * (1 + i)))\n          (if (not (eqv?\
    \ (aref s i) (aref s (1 + i))))\n            (return #f)\n            (setf i\
    \ (1 + i)))\n          (setf i (1 + i)))\n        (return #t))))\n    (else #f)))\n",
  "  (cond\n    ((null? s) #t)\n    ((< (length s) 3) #f)\n    (let ((i 0))\n    \
    \  (while (< (length s) (3 * (1 + i)))\n        (if (not (eqv? (substring s i\
    \ i) (substring s (1 + i) i)))\n            (return #f)\n          (set! i (1\
    \ + i)))\n      )\n      (return #t)\n    )\n  )\n)\n", "  (cond\n    ((null?\
    \ s) #t)\n    ((string? s)\n      (let ((len (string-length s)))\n        (and\
    \ (>= len 3)\n             (let ((i 0))\n               (while (< i len)\n   \
    \              (if (string-ci=? s i i i)\n                     (return #t)\n \
    \                    (set! i (+ i 1))))))))\n    (else #f)))\n", "  (cond\n  \
    \  ((null? s) #t)\n    ((> (length s) 2) #f)\n    (let ((i 0))\n      (while (<\
    \ (length s) (3 * (1 + i)))\n        (if (not (eqv? (substring s i i) (substring\
    \ s (1 + i) i)))\n            (return #f)\n            (set! i (1 + i)))\n   \
    \   )\n      #t)\n  )\n)\n", "  (cond\n    ((>= (length s) 3)\n      (let ((i\
    \ 0))\n        (while (< i (length s) - 3)\n          (if (not (eqv? (aref s i)\
    \ (aref s (1+ i))))\n              (return #f)\n            (setf i (1+ i)))\n\
    \          (setf i 0)))\n      (return #t))\n    (else\n      (return #f)))\n",
  "  (cond\n    ((> (length s) 3) #f)\n    ((= (string-length s) 3)\n      (let ((i\
    \ 0))\n        (while (< i (string-length s))\n          (if (not (string=? (substring\
    \ s i i) (substring s (1+i) i)))\n              #f\n              (setf i (1+i)))))))\n\
    \  (is_happy s)))\n", "  (cond\n    ((>= (length s) 3)\n      (every-char\n  \
    \      (lambda (c)\n          (and\n            (not (eq c c))\n            (not\
    \ (eq c (car s)))\n            (not (eq (cdr s) (cdr s)))\n            (not (eq\
    \ (cdr (cdr s)) (cdr (cdr s)))))))\n      (true))\n    (false)))\n", "  (cond\n\
    \    ((null? s) #f)\n    ((> (string-length s) 2) #f)\n    (let ((i 0))\n    \
    \  (while (< i (string-length s))\n        (if (string-ref s i)\n            (string-ref\
    \ s (string-append (string-ref s i) (string-ref s i)))\n            (setf i (string-append\
    \ i (string-ref s i)))\n          (setf i (string-append i (string-ref s i))))\n\
    \        (setf i (string-append i (string-ref s i))))\n      (= i #f)))\n)\n",
  "  (cond\n    ((null? s) #f)\n    ((< (length s) 3) #f)\n    (let ((i 0))\n    \
    \  (while (< (length s) (3 * (1 + i)))\n        (if (not (eqv? (substring s i\
    \ i) (substring s (1 + i) i)))\n            #f\n            (setf i (1 + i)))\n\
    \      )\n      #t\n    )\n  )\n)\n", "  (let ((length (string-length s)))\n \
    \   (and (>= length 3)\n         (let ((i 0))\n           (while (< i length)\n\
    \             (if (string-ref s i)\n                 (string-ref s (string-add\
    \ i 3))\n                 (set! i (string-add i 3))))))))\n", "  (cond\n    ((null?\
    \ s) #f)\n    (else\n      (let ((count 0))\n        (while (< (string-length\
    \ s) (3 * count))\n          (set! count (+ count 1))\n          (if (not (string=?\
    \ (substring s (3 * count) (3 * count + 1)) (substring s (3 * count + 1) (3 *\
    \ count + 2))))\n            #f\n            (else\n              #t)))))))\n",
  "  (cond\n    ((>= (length s) 3)\n      (let ((i 0))\n        (while (< i (length\
    \ s) - 3)\n          (if (not (eqv? (string-ref s i) (string-ref s (i + 1)) (string-ref\
    \ s (i + 2))))\n            (return #f)\n            (set! i (i + 3)))))))\n \
    \ #t))\n", "  (cond\n    ((>= (length s) 3)\n      (let ((i 0))\n        (while\
    \ (< i (length s) - 3)\n          (if (not (eqv? (string-ref s i) (string-ref\
    \ s (i + 1)) (string-ref s (i + 2))))\n              (return #f)\n           \
    \ (setf i (i + 3)))))))\n  (is_happy s)))\n", "  (cond\n    ((null? s) #t)\n \
    \   ((string? s)\n      (let ((len (string-length s)))\n        (cond\n      \
    \    ((>= len 3)\n            (let ((i 0))\n              (while (< i len)\n \
    \               (if (string-ci=? s i i i)\n                    (return #t)\n \
    \                 (setf i (+ i 1)))\n                (setf i 0)))\n          \
    \  (return #f)))))))\n", "  (cond\n    ((null? s) #t)\n    ((< (length s) 3) #f)\n\
    \    (let ((i 0))\n      (while (< (length s) (3 * (1 + i)))\n        (if (not\
    \ (eqv? (substring s i i) (substring s (i + 1) i)))\n            (return #f)\n\
    \            (set! i (1 + i)))\n      )\n      (return #t)\n    )\n  )\n)\n",
  "  (cond\n    ((>= (length s) 3)\n      (let ((i 0))\n        (while (< i (length\
    \ s) - 3)\n          (if (not (eqv? (string-ref s i) (string-ref s (i + 1)) (string-ref\
    \ s (i + 2))))\n            (return #f)\n            (setf i (i + 3)))))))\n \
    \ #t))\n", "  (cond\n    ((>= (length s) 3)\n      (every-curry\n        (lambda\
    \ (a b)\n          (and (= (string-ci-caseless-equal a b) #t)\n              \
    \ (not (string-ci-caseless-equal a (string-append a b))))))\n      s)\n    (else\
    \ #f)))\n", "  (cond\n    ((null? s) #f)\n    ((string? s)\n      (let ((length\
    \ (string-length s)))\n        (cond\n          ((>= length 3)\n            (let\
    \ ((i 0))\n              (while (< i length)\n                (if (string-ci=?\
    \ s i i i)\n                    (return #t)\n                  (set! i (+ i 1)))))))\n\
    \        (else #f))))\n", "  (cond\n    ((>= (string-length s) 3)\n      (let\
    \ ((i 0))\n        (while (< i (string-length s))\n          (if (not (string=?\
    \ (string-substring s i i) (string-substring s i i + 1)))\n              (return\
    \ #f)\n            (setf i (+ i 1)))\n          (setf i 0)))\n      (return #t)))\n",
  "  (cond\n    ((null? s) #t)\n    (else\n      (let ((i 0))\n        (while (< i\
    \ (string-length s))\n          (if (string-ref s i)\n            (setf i (+ i\
    \ 3))\n            (else\n              (return #f)))))))\n", "  (cond\n    ((null?\
    \ s) #t)\n    (else\n      (let ((i 0))\n        (while (< i (string-length s))\n\
    \          (if (string-ref s i)\n              (string-ref s (string-append (string-ref\
    \ s i) (string-ref s (string-add i 1))))\n              (setf i (string-add i\
    \ 1))))\n        (not (null? (string-ref s i)))))))\n", "  (cond\n    ((null?\
    \ s) #f)\n    ((> (length s) 2) #f)\n    (let ((i 0))\n      (while (< i (length\
    \ s) - 3)\n        (if (not (eqv? (string-ref s i) (string-ref s (i + 1)) (string-ref\
    \ s (i + 2))))\n            #f\n            (setf i (+ i 3))))\n        #t))))\n",
  "  (cond\n    ((null? s) #f)\n    ((> (length s) 2) #f)\n    (let ((i 0))\n    \
    \  (while (< (length s) (3 * (1 + i)))\n        (if (not (eqv? (substring s i\
    \ i) (substring s (1 + i) i)))\n            (return #f)\n            (set! i (1\
    \ + i)))\n      )\n      (return #t)\n    )\n  )\n)\n", "  (cond\n    ((null?\
    \ s) #t)\n    ((string? s)\n      (let ((i (string-length s)))\n        (cond\n\
    \          ((i < 3) #f)\n          ((= i 3)\n            (let ((c (string-ref\
    \ s i)))\n              (let ((d (string-ref s i + 1)))\n                (let\
    \ ((e (string-ref s i + 2)))\n                  (not (eq? c d e)))))))))))\n",
  "  (cond\n    ((>= (length s) 3)\n      (let ((i 0))\n        (while (< i (length\
    \ s) - 3)\n          (if (memq (string-ref s i) (string-ref s (i + 1)))\n    \
    \          (return #f)\n            (setf i (i + 1)))\n          (setf i 0)))\n\
    \      (return #t)))\n", "  (cond\n    ((null? s) #f)\n    (else\n      (let ((i\
    \ 0))\n        (while (< i (string-length s))\n          (if (string-ref s i)\n\
    \              (string-ref s (string-add 1 i))\n              (set! i (string-add\
    \ 1 i))))\n        (if (string-length s)\n            (string-ref s (string-add\
    \ 1 i))\n            #t))))\n", "  (cond\n    ((null? s) #f)\n    ((> (length\
    \ s) 3) #f)\n    (let ((i 0))\n      (while (< (length s) (3 * (1 + i)))\n   \
    \     (if (not (eqv? (string-ref s i) (string-ref s (1 + i))))\n            #f\n\
    \            (setf i (1 + i))))\n      #t))\n  (is_happy s)))\n", "  (cond\n \
    \   ((>= (length s) 3)\n      (let ((i 0))\n        (while (< i (length s) - 3)\n\
    \          (if (not (eqv? (aref s i) (aref s (i + 1)) (aref s (i + 2)))\n    \
    \            (setf i (i + 3)))\n            (return #f))))\n      (return #t)))\n",
  "  (let ((i 0)\n         (count 0))\n    (while (< i (string-length s))\n      (if\
    \ (< (string-length s) (3 * (1 + count)))\n        (if (string-ref s i)\n    \
    \      (set! count 0)\n          (set! i (1 + i)))\n        (set! count (1 + count)))\n\
    \      (set! i (1 + i))))\n  (not count)))\n", "  (cond\n    ((null? s) #t)\n\
    \    ((string? s)\n      (let ((len (string-length s)))\n        (cond\n     \
    \     ((>= len 3)\n            (let ((i 0))\n              (while (< i len)\n\
    \                (if (string-ref s i)\n                  (string-ref s i)\n  \
    \                (set! i (+ i 1))))\n              (not (and (string-ref s i)\
    \ (string-ref s i) (string-ref s i))))\n            (#f)))))))\n", "  (cond\n\
    \    ((> (length s) 3) #f)\n    ((= (string-length s) 3)\n      (let ((i 0))\n\
    \        (while (< i (string-length s))\n          (if (not (eqv? (string-ref\
    \ s i) (string-ref s (1+ i))))\n              #f\n              (setf i (1+ i)))))))\n\
    \  (is_happy s)))\n", "  (let ((count 0))\n    (if (> (string-length s) 3)\n \
    \     #f\n      (let ((i 0))\n        (while (< i (string-length s))\n       \
    \   (if (string-ref s i)\n            (set! count (+ count 1))\n            (set!\
    \ i (+ i 1))))\n        (if (count = 3)\n          #t\n          #f))))))\n",
  "  (cond\n    ((null? s) #f)\n    ((> (length s) 2) #f)\n    (let ((i 0))\n    \
    \  (while (< (length s) (3 * (1 + i)))\n        (if (not (memq (string-ref s i)\
    \ (string-ref s (1 + i))))\n            (return #f)\n            (setf i (1 +\
    \ i)))\n        (setf i (1 + i)))\n      (return #t)))))\n", "  (cond\n    ((string?\
    \ s)\n      (is-string? s))\n    ((>= (length s) 3)\n      (let ((i 0))\n    \
    \    (while (< i (length s) - 3)\n          (if (memq (aref s i) (aref s (1 +\
    \ i)))\n            (return #f)\n            (setf i (1 + i)))\n          (setf\
    \ i (1 + i))))\n      (return #t))\n    (else\n      (return #f)))\n", "  (let\
    \ ((i 0)\n         (j 0)\n         (count 0))\n    (while (< i (string-length\
    \ s))\n      (if (string-substring s i j)\n        (set! count (+ count 1))\n\
    \        (set! i (+ i 1))\n        (set! j (+ j 1))))\n    (not (eq count 0))))\n",
  "  (cond\n    ((null? s) #f)\n    ((= (length s) 3)\n      (let ((i 0))\n      \
    \  (while (< i (length s) - 3)\n          (if (not (eqv? (aref s i) (aref s (1\
    \ + i))))\n            (return #f)\n            (setf i (1 + i)))\n          (setf\
    \ i (1 + i))))\n      (return #t))\n    (else #f)))\n", "  (cond\n    ((>= (length\
    \ s) 3)\n      (let ((i 0))\n        (while (< i (length s) - 3)\n          (if\
    \ (not (eqv? (string-ref s i) (string-ref s (i + 1) ) (string-ref s (i + 2) )))\n\
    \            (return #f)\n            (set! i (i + 3)))))))\n", "  (cond\n   \
    \ ((null? s) #f)\n    (else\n      (let ((i 0))\n        (while (< i (string-length\
    \ s))\n          (if (string-ref s i)\n            (return #f)\n            (set!\
    \ i (+ i 3)))))\n      #t))\n)\n\n;; You are given a string s.\n;; Your task is\
    \ to check if the string is happy or not.\n;; A string is happy if it is haprkt\
    \ and contains at least one letter which occurs an odd number of times.\n;; For\
    \ example:\n;; >>> (is_happy a)\n;; #f\n;; >>> (is_happy aa)\n;; #t\n;; >>> (is_happy\
    \ abcd)\n;; #f\n;; >>> (is_happy aabb)\n;; #t\n;; >>> (is_happy adb)\n;; #f\n\
    ;; >>> (is_happy xyy)\n;; #f", "  (cond\n    ((null? s) #t)\n    (else\n     \
    \ (let ((i 0))\n        (while (< i (string-length s))\n          (if (string-ref\
    \ s i)\n              (string-ref s (string-add 1 i))\n              (set! i (string-add\
    \ 1 i))))\n        (not (eq (string-length s) (string-length i)))\n        (not\
    \ (string-ref s i))\n        (is_happy (string-append s \"a\"))))))\n", "  (cond\n\
    \    ((null? s) #t)\n    (else\n      (let ((i 0))\n        (while (< i (string-length\
    \ s))\n          (if (string-ref s i)\n            (string-set! s i #f)\n    \
    \        (set! i (+ i 1)))))\n      (#t)))\n\n;; You are given a string s.\n;;\
    \ Your task is to check if the string is haprkt or not.\n;; A string is haprkt\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n;;\
    \ For example:\n;; >>> (is_happy a)\n;; #f\n;; >>> (is_happy aa)\n;; #f\n;; >>>\
    \ (is_happy abcd)\n;; #t\n;; >>> (is_happy aabb)\n;; #f\n;; >>> (is_happy adb)\n\
    ;; #t\n;; >>> (is_happy xyy)\n;; #f", "  (cond\n    ((null? s) #f)\n    (else\n\
    \      (let ((i 0))\n        (while (< i (string-length s))\n          (if (string-ref\
    \ s i)\n            (return #f)\n            (set! i (+ i 1)))))\n      #t))\n",
  "  (cond\n    ((>= (length s) 3)\n      (let ((i 0))\n        (while (< (length\
    \ s) i)\n          (if (not (eqv? (substring s i i) (substring s i (1+i))))\n\
    \              (return #f)\n            (set! i (1+i)))\n          )\n       \
    \ )\n      )\n    (else #t)\n  )\n)\n", "  (cond\n    ((null? s) #t)\n    (else\n\
    \      (let ((count 0))\n        (while (< count 3)\n          (let ((i (+ 1 count)))\n\
    \            (if (string=? s i)\n              (set! count (+ count 1))\n    \
    \          (else\n                (return #f))))))))\n", "  (cond\n    ((null?\
    \ s) #t)\n    ((= (length s) 3)\n      (let ((i 0))\n        (while (< i (length\
    \ s) - 3)\n          (if (not (eqv? (substring s i i + 3) (substring s i i + 3)))\n\
    \              (return #f)\n            (setf i (add 1 i)))))))\n  #t)\n", " \
    \ (let ((length (string-length s)))\n    (if (>= length 3)\n      (let ((i 0))\n\
    \        (while (< i length)\n          (if (string-ref s i)\n            (setf\
    \ i (+ i 3))\n            (else\n              (return #f))))))))\n", "  (cond\n\
    \    ((>= (length s) 3)\n      (let ((i 0))\n        (while (< (length s) (3 *\
    \ (1 + i)))\n          (if (not (eqv? (substring s i i) (substring s (1 + i) i)))\n\
    \            (return #f)\n            (set! i (1 + i)))\n          (set! i (1\
    \ + i))))\n        (return #t)))\n    (else #f)))\n", "  (cond\n    ((null? s)\
    \ #f)\n    ((= (length s) 3)\n      (let ((i 0))\n        (while (< i (length\
    \ s) - 3)\n          (if (not (eqv? (string-ref s i) (string-ref s (i + 1)) (string-ref\
    \ s (i + 2))))\n              #f\n              (setf i (+ i 3)))))))\n  #t))\n",
  "  (cond\n    ((>= (length s) 3)\n      (let ((i 0))\n        (while (< (length\
    \ s) (3 * (1 + i)))\n          (if (not (eqv? (substring s i i) (substring s (1\
    \ + i) i)))\n            (return #f)\n            (set! i (1 + i)))\n        \
    \  (set! i (1 + i))))\n      #t))\n)\n", "  (let ((len (length s)))\n    (if (<\
    \ len 3)\n      #f\n    (let ((i 0))\n      (while (< i len - 3)\n        (if\
    \ (memq (string-ci (substring s i i + 3)) s)\n          #f\n        (set! i (+\
    \ i 3)))))\n    #t))))\n", "  (cond\n    ((null? s) #f)\n    ((> (length s) 2)\
    \ #f)\n    (let ((i 0))\n      (while (< (length s) (3 * (1 + i)))\n        (if\
    \ (not (eqv? (substring s i i) (substring s (1 + i) (1 + i))))\n            #f\n\
    \            (set! i (1 + i)))\n      )\n      #t\n    )\n  )\n)\n", "  (cond\n\
    \    ((>= (length s) 3)\n      (let ((i 0))\n        (while (< i (length s) -\
    \ 3)\n          (if (not (eqv? (aref s i) (aref s (i + 1)) (aref s (i + 2)))\n\
    \                (setf i (i + 3))))\n            (return #t))))\n    (return #f)))\n",
  "  (cond\n    ((null? s) #t)\n    (else\n      (let ((i 0))\n        (while (< i\
    \ (string-length s))\n          (if (string-ref s i)\n            (return #f)\n\
    \            (set! i (+ i 3)))))\n      #t))))\n", "  (cond\n    ((null? s) #f)\n\
    \    ((> (length s) 3) #f)\n    (let ((i 0))\n      (while (< (length s) i)\n\
    \        (if (not (eqv? (substring s i i) (substring s i (1+ i))))\n         \
    \   (return #f)\n            (set! i (1+ i)))))))\n", "  (cond\n    ((> (length\
    \ s) 3) #t)\n    (else #f)\n  ))\n\n;; #f\n;; #t\n;; #t\n;; #t\n;; #f\n;; #f\n\
    ;; #t\n;; #f\n;; #t\n;; #f\n;; #t\n;; #f\n;; #t\n;; #f\n;; #t\n;; #f\n;; #t\n\
    ;; #f\n;; #t\n;; #f\n;; #t\n;; #f\n;; #t\n;; #f\n;; #t\n;; #f\n;; #t\n;; #f\n\
    ;; #t\n;; #f\n;; #t\n;; #f\n;; #t\n;; #f\n;; #t\n;; #f\n;; #t\n;; #f\n;; #t\n\
    ;; #f\n;; #t\n;; #f\n;; #t\n;; #f\n;; #t\n;; #f\n;; #t\n;; #f\n;; #t\n;; #f\n\
    ;; #t\n;; #f\n;; #t\n;; #f\n;; #t\n;; #f\n;; #t\n;; #f\n;; #t\n;; #f\n;; #t\n\
    ;; #f\n;; #t\n;; #f\n;; #t\n;; #f\n;; #t\n;; #f\n;; #t\n;; #f\n;; #t\n;; #f\n\
    ;; #t\n;; #f\n;; #t\n;; #f\n;; #t\n;; #f\n;; #t\n;; #f\n;; #t\n;; #f\n;; #t\n\
    ;; #f\n;; #t\n;; #f\n;; #t\n;; #f\n;; #t\n;; #f\n;; #t\n;; #f\n;; #t\n;; #f\n\
    ;; #t\n;; #f\n;; #t\n;; #f\n;; #t\n;; #f\n;; #t\n;; #f\n;; #t\n;; #f\n;; #t\n\
    ;; #f\n;; #t\n;; #f\n;; #t\n;; #f\n;; #t\n;; #f\n;; #t\n;; #f\n;; #t\n;; #f\n\
    ;; #t\n;; #f\n;; #t\n;; #f\n;; #t\n", "  (cond\n    ((null? s) #f)\n    ((string?\
    \ s)\n      (let ((len (string-length s)))\n        (and (>= len 3)\n        \
    \     (let ((i 0))\n               (while (< i len)\n                 (if (string-ci=?\
    \ s i i (+ 3 i))\n                     #t\n                     #f)))))))\n  \
    \  (else #f)))\n", "  (cond\n    ((null? s) #t)\n    ((< (length s) 3) #f)\n \
    \   (let ((i 0))\n      (while (< (length s) (3 * (1 + i)))\n        (if (not\
    \ (eqv? (string-ref s i) (string-ref s (1 + i))))\n            (return #f)\n \
    \         (setf i (1 + i)))\n      )\n      #t))\n  )\n)\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
