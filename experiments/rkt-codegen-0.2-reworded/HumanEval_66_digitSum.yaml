name: HumanEval_66_digitSum
language: rkt
prompt: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
  \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
  ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
  \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\"\
  )\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
  \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n\
  \    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\"\
  ) 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate\
  \ \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
  \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
completions: ["  (+ (map char-upper (string-to-list s)) 0))\n\n;; Test\n;; >>> (digitSum\
    \ \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\"\
    )\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n\
    ;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Solution\n;; >>> (digitSum\
    \ \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\"\
    )\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n\
    ;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153", "  (+\n    (map (lambda (c) (char-code\
    \ c))\n      (string-to-list s))\n    0))\n\n;; Test\n;; >>> (digitSum \"\")\n\
    ;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n\
    ;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;;\
    \ >>> (digitSum \"aAaaaXa\")\n;; 153\n", "  (let ((sum 0))\n    (for-each (lambda\
    \ (c) (if (> c 65) (sum (+ c (char->integer c) ))))\n      s))\n)\n\n;; Test\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n", "  (+\n    (map\
    \ char-code\n      (string-map char-upcase s)\n      (+ 1 (char-code '0)))\n \
    \   (char-code '0)))\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153", "  (let ((sum 0))\n\
    \    (for-each (lambda (c) (if (> c 65) (sum (+ (c 65) 1)))) s)\n    sum))\n\n\
    ;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;;\
    \ >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>>\
    \ (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n", " \
    \ (let ((sum 0))\n    (for-each (lambda (c) (if (> c 65) (sum (+ c (ascii-char\
    \ c) - 32))))\n      (string-to-list s)))\n)\n\n;; Test\n;; >>> (digitSum \"\"\
    )\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n\
    ;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;;\
    \ >>> (digitSum \"aAaaaXa\")\n;; 153\n", "  (+\n    (map (lambda (c)\n       \
    \   (+\n            (+\n              (+\n                (+\n               \
    \   (+\n                    (+\n                      (+\n                   \
    \     (+\n                          (+\n                            (+\n     \
    \                         (+\n                                (+\n           \
    \                       (+\n                                    (+\n         \
    \                             (+\n                                        (+\n\
    \                                          (+\n                              \
    \              (+\n                                              (+\n        \
    \                                        (+\n                                \
    \                  (+\n                                                    (+\n\
    \                                                      (+\n                  \
    \                                      (+\n                                  \
    \                        (+\n                                                \
    \            (+\n                                                            \
    \  (+\n                                                                (+\n  \
    \                                                                (+\n        \
    \                                                            (+\n            \
    \                                                          (+\n              \
    \                                                          (+\n              \
    \                                                            (+\n            \
    \                                                                (+\n        \
    \                                                                      (+\n  \
    \                                                                            \
    \  (+\n                                                                      \
    \              (+\n                                                          \
    \                            (+\n                                            \
    \                                            (+\n                            \
    \                                                              (+\n          \
    \                                                                            \
    \       (+\n                                                                 \
    \                              (+\n                                          \
    \                                                      (+\n                  \
    \                                                                            \
    \    (+\n                                                                    \
    \                                (+\n                                        \
    \                                                              (+\n          \
    \                                                                            \
    \                  (+\n                                                      \
    \                                                    (+\n                    \
    \                                                                            \
    \            (+\n                                                            \
    \                                                  (+\n                      \
    \                                                                            \
    \                (+\n                                                        \
    \                                                            (+\n            \
    \                                                                            \
    \                              (+\n                                          \
    \                                                                            \
    \  (+\n                                                                      \
    \                                                      (+\n                  \
    \                                                                            \
    \                                (+\n                                        \
    \                                                                            \
    \            (+\n                                                            \
    \                                                                      (+\n  \
    \                                                                            \
    \                                                         (+\n               \
    \                                                                            \
    \                                              (+\n                          \
    \                                                                            \
    \                                          (+\n                              \
    \                                                                            \
    \                                        (+\n                                \
    \                                                                            \
    \                                        (+\n                                \
    \                                                                            \
    \                                           (+\n                             \
    \                                                                            \
    \                                                (+\n                        \
    \                                                                     ", "  (let\
    \ ((sum 0))\n    (for-each (lambda (c) (if (> (char->integer c) 64) (sum (+ (char->integer\
    \ c) 1))))\n      s))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum\
    \ \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\"\
    )\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\"\
    )\n;; 153\n", "  (let ((sum 0))\n    (for-each (lambda (c) (if (> c 65) (sum (+\
    \ c (ascii-char c)))) s) s)\n    sum))\n\n;; Test\n;; >>> (digitSum \"\")\n;;\
    \ 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n\
    ;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;;\
    \ >>> (digitSum \"aAaaaXa\")\n;; 153\n", "  (let* ([sum (0)])\n    (for-each (lambda\
    \ (c)\n                (if (> c 65)\n                    (sum (+ (char->integer\
    \ c) (char->integer (char->ascii c))))\n                    sum))\n          \
    \   s)\n    sum))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"\
    abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\"\
    )\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\"\
    )\n;; 153\n", "  (let ((sum 0))\n    (for-each (lambda (c) (if (> c 65) (sum (+\
    \ (char->integer c) (char->integer (char->integer c) + 1))))\n               \
    \                   (if (< c 91) (sum (+ (char->integer c) (char->integer (char->integer\
    \ c) + 1))))\n                                  (if (< c 97) (sum (+ (char->integer\
    \ c) (char->integer (char->integer c) + 1))))\n                              \
    \    (if (< c 123) (sum (+ (char->integer c) (char->integer (char->integer c)\
    \ + 1))))\n                                  (if (< c 91) (sum (+ (char->integer\
    \ c) (char->integer (char->integer c) + 1))))\n                              \
    \    (if (< c 65) (sum (+ (char->integer c) (char->integer (char->integer c) +\
    \ 1))))\n                                  (if (< c 48) (sum (+ (char->integer\
    \ c) (char->integer (char->integer c) + 1))))\n                              \
    \    (if (< c 57) (sum (+ (char->integer c) (char->integer (char->integer c) +\
    \ 1))))\n                                  (if (< c 48) (sum (+ (char->integer\
    \ c) (char->integer (char->integer c) + 1))))\n                              \
    \    (if (< c 48) (sum (+ (char->integer c) (char->integer (char->integer c) +\
    \ 1))))\n                                  (if (< c 48) (sum (+ (char->integer\
    \ c) (char->integer (char->integer c) + 1))))\n                              \
    \    (if (< c 48) (sum (+ (char->integer c) (char->integer (char->integer c) +\
    \ 1))))\n                                  (if (< c 48) (sum (+ (char->integer\
    \ c) (char->integer (char->integer c) + 1))))\n                              \
    \    (if (< c 48) (sum (+ (char->integer c) (char->integer (char->integer c) +\
    \ 1))))\n                                  (if (< c 48) (sum (+ (char->integer\
    \ c) (char->integer (char->integer c) + 1))))\n                              \
    \    (if (< c 48) (sum (+ (char->integer c", "  (+\n    (map char-code char s)\n\
    \    (filter char-upper char s)))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;;\
    \ >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>>\
    \ (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>>\
    \ (digitSum \"aAaaaXa\")\n;; 153", "  (let ((sum 0))\n    (for-each (lambda (c)\
    \ (if (> (char->integer c) 64) (sum (+ (char->integer c) 1))))\n      s))\n)\n\
    \n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n\
    ;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>>\
    \ (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n", " \
    \ (+\n    (map char-code char s)\n    (filter char-upper-p char s)))\n\n;; Test\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Answer\n;; >>>\
    \ (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n", "  (+\n    (mapcar\n\
    \      (lambda (c)\n        (+ (char-code c) (char-code (char-upcase c))))\n \
    \     (string-to-list s))\n    0))\n\n;; Task\n;; Write a function that takes\
    \ a string as input and returns the sum of the lower characters only'\n;; ASCII\
    \ codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\"\
    )\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n\
    ;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n\
    ;; 153", "  (+\n    (mapcar #\"A\" (string-split s \"\") (string-length s))\n\
    \    (mapcar #\"A\" (string-split s \"\") (string-length s))\n  )\n)\n\n;; Test\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Task\n;; Write\
    \ a function that takes a string as input and returns the sum of the lower characters\
    \ only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum\
    \ \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\"\
    )\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\"\
    )\n;; 153", "  (let* ([sum (0)])\n    (for-each (lambda (c) (if (> c 65) (sum\
    \ (+ c (char->integer c) (char->integer (char->integer c) - 64))))\n         \
    \                         (if (< c 91) (sum (+ c (char->integer c) (char->integer\
    \ (char->integer c) - 96))))\n                                  (if (< c 123)\
    \ (sum (+ c (char->integer c) (char->integer (char->integer c) - 128))))\n   \
    \                               (if (< c 192) (sum (+ c (char->integer c) (char->integer\
    \ (char->integer c) - 192))))\n                                  (if (< c 255)\
    \ (sum (+ c (char->integer c) (char->integer (char->integer c) - 256))))\n   \
    \                               (if (< c 256) (sum (+ c (char->integer c) (char->integer\
    \ (char->integer c) - 256))))\n                                  (if (< c 256)\
    \ (sum (+ c (char->integer c) (char->integer (char->integer c) - 256))))\n   \
    \                               (if (< c 256) (sum (+ c (char->integer c) (char->integer\
    \ (char->integer c) - 256))))\n                                  (if (< c 256)\
    \ (sum (+ c (char->integer c) (char->integer (char->integer c) - 256))))\n   \
    \                               (if (< c 256) (sum (+ c (char->integer c) (char->integer\
    \ (char->integer c) - 256))))\n                                  (if (< c 256)\
    \ (sum (+ c (char->integer c) (char->integer (char->integer c) - 256))))\n   \
    \                               (if (< c 256) (sum (+ c (char->integer c) (char->integer\
    \ (char->integer c) - 256))))\n                                  (if (< c 256)\
    \ (sum (+ c (char->integer c) (char->integer (char->integer c) - 256))))\n   \
    \                               (if (< c 256) (sum (+ c (char->integer c) (char->integer\
    \ (char->integer c) - 256))))\n                                  (if (< c 256)\
    \ (sum (+ c (char->integer c) (char->integer (char->integer c) - 256))))", " \
    \ (let* ([sum (0)])\n    (for-each (lambda (c) (if (> c 65) (sum (+ c (char->integer\
    \ c) (char->integer (char->integer c) - 64)))) (else sum))\n      s)\n    sum))\n\
    \n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n\
    ;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>>\
    \ (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n", " \
    \ (+\n    (mapcar #\"A\"\n      (mapcar #\"A\"\n        (mapcar #\"A\"\n     \
    \     (mapcar #\"A\"\n            (mapcar #\"A\"\n              (mapcar #\"A\"\
    \n                (mapcar #\"A\"\n                  (mapcar #\"A\"\n         \
    \           (mapcar #\"A\"\n                      (mapcar #\"A\"\n           \
    \             (mapcar #\"A\"\n                          (mapcar #\"A\"\n     \
    \                       (mapcar #\"A\"\n                              (mapcar\
    \ #\"A\"\n                                (mapcar #\"A\"\n                   \
    \               (mapcar #\"A\"\n                                    (mapcar #\"\
    A\"\n                                      (mapcar #\"A\"\n                  \
    \                      (mapcar #\"A\"\n                                      \
    \    (mapcar #\"A\"\n                                            (mapcar #\"A\"\
    \n                                              (mapcar #\"A\"\n             \
    \                                   (mapcar #\"A\"\n                         \
    \                         (mapcar #\"A\"\n                                   \
    \                 (mapcar #\"A\"\n                                           \
    \           (mapcar #\"A\"\n                                                 \
    \       (mapcar #\"A\"\n                                                     \
    \     (mapcar #\"A\"\n                                                       \
    \     (mapcar #\"A\"\n                                                       \
    \       (mapcar #\"A\"\n                                                     \
    \           (mapcar #\"A\"\n                                                 \
    \                 (mapcar #\"A\"\n                                           \
    \                         (mapcar #\"A\"\n                                   \
    \                                   (mapcar #\"A\"\n                         \
    \                                               (mapcar #\"A\"\n             \
    \                                                             (mapcar #\"A\"\n\
    \                                                                            (mapcar\
    \ #\"A\"\n                                                                   \
    \           (mapcar #\"A\"\n                                                 \
    \                               (mapcar #\"A\"\n                             \
    \                                                     (mapcar #\"A\"\n       \
    \                                                                            \
    \ (mapcar #\"A\"\n                                                           \
    \                           (mapcar #\"A\"\n                                 \
    \                                                       (mapcar #\"A\"\n     \
    \                                                                            \
    \         (mapcar #\"A\"\n                                                   \
    \           ", "  (+\n    (map-char\n      (lambda (c) (char-ascii c))\n     \
    \ (string-to-list s))\n    0))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>>\
    \ (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum\
    \ \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum\
    \ \"aAaaaXa\")\n;; 153\n", "  (let ((sum 0))\n    (for-each (lambda (c) (if (>\
    \ c 65) (sum (+ c (char->integer c) ))))\n      s))\n)\n\n;; Test\n;; >>> (digitSum\
    \ \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\"\
    )\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n\
    ;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Answer\n;; >>> (digitSum \"\
    \")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;;\
    \ 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n\
    ;; >>> (digitSum \"aAaaaXa\")\n;; 153\n", "  (+\n    (mapcar\n      (lambda (c)\n\
    \        (+ (char->integer (string-upcase c)) 0))\n      (string-upcase s)))\n\
    \  0)\n\n;; Task\n;; Write a function that takes a string as input and returns\
    \ the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>>\
    \ (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153", "  (+\n    (map (lambda\
    \ (c)\n          (+\n            (+\n              (+\n                (+\n  \
    \                (+\n                    (+\n                      (+\n      \
    \                  (+\n                          (+\n                        \
    \    (+\n                              (+\n                                (+\n\
    \                                  (+\n                                    (+\n\
    \                                      (+\n                                  \
    \      (+\n                                          (+\n                    \
    \                        (+\n                                              (+\n\
    \                                                (+\n                        \
    \                          (+\n                                              \
    \      (+\n                                                      (+\n        \
    \                                                (+\n                        \
    \                                  (+\n                                      \
    \                      (+\n                                                  \
    \            (+\n                                                            \
    \    (+\n                                                                  (+\n\
    \                                                                    (+\n    \
    \                                                                  (+\n      \
    \                                                                  (+\n      \
    \                                                                    (+\n    \
    \                                                                        (+\n\
    \                                                                            \
    \  (+\n                                                                      \
    \          (+\n                                                              \
    \                      (+\n                                                  \
    \                                    (+\n                                    \
    \                                                    (+\n                    \
    \                                                                      (+\n  \
    \                                                                            \
    \               (+\n                                                         \
    \                                      (+\n                                  \
    \                                                              (+\n          \
    \                                                                            \
    \            (+\n                                                            \
    \                                        (+\n                                \
    \                                                                      (+\n  \
    \                                                                            \
    \                          (+\n                                              \
    \                                                            (+\n            \
    \                                                                            \
    \                    (+\n                                                    \
    \                                                         (+\n               \
    \                                                                            \
    \                   (+\n                                                     \
    \                                                             (+\n           \
    \                                                                            \
    \                             (+\n                                           \
    \                                                                           (+\n\
    \                                                                            \
    \                                            (+\n                            \
    \                                                                            \
    \                    (+\n                                                    \
    \                                                                          (+\n\
    \                                                                            \
    \                                                    (+\n                    \
    \                                                                            \
    \                                  (+\n                                      \
    \                                                                            \
    \                   (+\n                                                     \
    \                                                                            \
    \      (+\n                                                                  \
    \                                                                       (+\n \
    \                                                                            \
    \                                                              (+\n          \
    \                                                                            \
    \                                                          (+\n              \
    \                                                                            \
    \                                                        (+", "  (let* ([sum (0)])\n\
    \    (for-each (lambda (c)\n      (if (> c 65)\n        (sum (+ (c 65)))\n   \
    \     (sum sum)))\n      s)\n    sum))\n\n;; Task\n;; Write a function that takes\
    \ a string as input and returns the sum of the lower characters only'\n;; ASCII\
    \ codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\"\
    )\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n\
    ;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n\
    ;; 153", "  (let ((sum 0))\n    (for-each (lambda (c) (if (> c 65) (sum (+ (c\
    \ 65) 1)))) s)\n    sum))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum\
    \ \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\"\
    )\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\"\
    )\n;; 153", "  (let ((sum 0))\n    (for-each (lambda (c)\n                (if\
    \ (> c 65)\n                  (sum (+ c (if (< c 90) 65, 91)))\n             \
    \   (sum c)))\n      s))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum\
    \ \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\"\
    )\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\"\
    )\n;; 153\n", "  (+\n    (map (lambda (c) (char-code c))\n      (string-to-list\
    \ s))\n    (+\n      (map (lambda (c) (char-code c))\n        (string-to-list\
    \ (substring s 1 1)))\n      (map (lambda (c) (char-code c))\n        (string-to-list\
    \ (substring s 2 1))))))\n\n;; Task\n;; Write a function that takes a string as\
    \ input and returns the sum of the lower characters only'\n;; ASCII codes.\n;;\
    \ Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n\
    ;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>>\
    \ (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153", "  (let\
    \ ((sum 0))\n    (for-each (lambda (c) (if (> c 65) (sum (+ (c 65) 1))))\n   \
    \   s))\n)\n", "  (+\n    (map char-code char s)\n    (filter char-upper char\
    \ s)))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n\
    ;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n\
    ;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n",
  "  (+\n    (map (lambda (c) (char-code c))\n      (string-to-list s))\n    0))\n\
    \n;;; (digitSum \"\")\n;;; 0\n;;; (digitSum \"abAB\")\n;;; 131\n;;; (digitSum\
    \ \"abcCd\")\n;;; 67\n;;; (digitSum \"helloE\")\n;;; 69\n;;; (digitSum \"woArBld\"\
    )\n;;; 131\n;;; (digitSum \"aAaaaXa\")\n;;; 153\n", "  (let* ([sum (0)])\n   \
    \ (for-each (lambda (c)\n                (if (> (char->integer c) (char->integer\
    \ 'A'))\n                    (sum (+ (char->integer c) (char->integer 'A')))\n\
    \                    sum)\n                sum)\n      s))\n)\n", "  (+\n    (map\
    \ char-code char s)\n    (filter char-upper char s)))\n\n;; Test\n;; >>> (digitSum\
    \ \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\"\
    )\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n\
    ;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153", "  (let* ([sum (0)])\n    (for-each\
    \ (lambda (c)\n                (if (> c 65)\n                    (sum (+ c (char->integer\
    \ c)\n                          (char->integer (char->integer c) - 32))))\n  \
    \              s)\n      (+ sum 1)))\n)\n\n;; Task\n;; Write a function that takes\
    \ a string as input and returns the sum of the lower characters only'\n;; ASCII\
    \ codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\"\
    )\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n\
    ;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n\
    ;; 153", "  (+\n    (map (lambda (c)\n          (+\n            (+\n         \
    \     (+\n                (+\n                  (+\n                    (+\n \
    \                     (+\n                        (+\n                       \
    \   (+\n                            (+\n                              (+\n   \
    \                             (+\n                                  (+\n     \
    \                               (+\n                                      (+\n\
    \                                        (+\n                                \
    \          (+\n                                            (+\n              \
    \                                (+\n                                        \
    \        (+\n                                                  (+\n          \
    \                                          (+\n                              \
    \                        (+\n                                                \
    \        (+\n                                                          (+\n  \
    \                                                          (+\n              \
    \                                                (+\n                        \
    \                                        (+\n                                \
    \                                  (+\n                                      \
    \                              (+\n                                          \
    \                            (+\n                                            \
    \                            (+\n                                            \
    \                              (+\n                                          \
    \                                  (+\n                                      \
    \                                        (+\n                                \
    \                                                (+\n                        \
    \                                                            (+\n            \
    \                                                                          (+\n\
    \                                                                            \
    \            (+\n                                                            \
    \                              (+\n                                          \
    \                                                   (+\n                     \
    \                                                                          (+\n\
    \                                                                            \
    \                    (+\n                                                    \
    \                                              (+\n                          \
    \                                                                          (+\n\
    \                                                                            \
    \                          (+\n                                              \
    \                                                          (+\n              \
    \                                                                            \
    \                (+\n                                                        \
    \                                                    (+\n                    \
    \                                                                            \
    \              (+\n                                                          \
    \                                                        (+\n                \
    \                                                                            \
    \                        (+\n                                                \
    \                                                                      (+\n  \
    \                                                                            \
    \                                          (+\n                              \
    \                                                                            \
    \                  (+\n                                                      \
    \                                                                        (+\n\
    \                                                                            \
    \                                                    (+\n                    \
    \                                                                            \
    \                                  (+\n                                      \
    \                                                                            \
    \                   (+\n                                                     \
    \                                                                            \
    \      (+\n                                                                  \
    \                                                                       (+\n \
    \                                                                            \
    \                                                              (+\n          \
    \                                                                            \
    \                                                       (+\n                 \
    \                                                                            \
    \                                                  (+\n                      \
    \                                                                            \
    \                                              (+", "  (+\n    (map char-code\
    \ char s)\n    (filter char-upper char s)))\n\n;; Test\n;; >>> (digitSum \"\"\
    )\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n\
    ;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;;\
    \ >>> (digitSum \"aAaaaXa\")\n;; 153\n", "  (+\n    (map (lambda (c) (char-code\
    \ c))\n      (string-to-list s))\n    0))\n\n;; Test\n;; >>> (digitSum \"\")\n\
    ;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n\
    ;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;;\
    \ >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Solution\n;; >>> (digitSum \"\")\n\
    ;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n\
    ;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;;\
    \ >>> (digitSum \"aAaaaXa\")\n;; 153", "  (+\n    (map char-code char s)\n   \
    \ (filter char-upper char s)))\n\n;; Task\n;; Write a function that takes a string\
    \ as input and returns the sum of the lower characters only'\n;; ASCII codes.\n\
    ;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n\
    ;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>>\
    \ (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153", "  (+\n\
    \    (map (lambda (c)\n          (+\n            (if (> c 65)\n              (+\
    \ (if (> c 90)\n                    (+ (if (> c 97)\n                        \
    \  (+ (if (> c 122)\n                                (+ (if (> c 192)\n      \
    \                                (+ (if (> c 223)\n                          \
    \                 (+ (if (> c 224)\n                                         \
    \       (+ (if (> c 233)\n                                                   \
    \ (+ (if (> c 240)\n                                                        (+\
    \ (if (> c 248)\n                                                            (+\
    \ (if (> c 252)\n                                                            \
    \    (+ (if (> c 223)\n                                                      \
    \              (+ (if (> c 192)\n                                            \
    \                           (+ (if (> c 128)\n                               \
    \                                           (+ (if (> c 64)\n                \
    \                                                            (+ (if (> c 32)\n\
    \                                                                            \
    \  (+ (if (> c 16)\n                                                         \
    \                       (+ (if (> c 8)\n                                     \
    \                                               (+ (if (> c 0)\n             \
    \                                                                         (+ (if\
    \ (> c 128)\n                                                                \
    \                        (+ (if (> c 192)\n                                  \
    \                                                        (+ (if (> c 224)\n  \
    \                                                                            \
    \              (+ (if (> c 240)\n                                            \
    \                                                 (+ (if (> c 248)\n         \
    \                                                                            \
    \        (+ (if (> c 252)\n                                                  \
    \                                           (+ (if (> c 233)\n               \
    \                                                                            \
    \  (+ (if (> c 224)\n                                                        \
    \                                     (+ (if (> c 192)\n                     \
    \                                                                        (+ (if\
    \ (> c 128)\n                                                                \
    \                             (+ (if (> c 64)\n                              \
    \                                                               (+ (if (> c 32)\n\
    \                                                                            \
    \                 (+ (if (> c 16)\n                                          \
    \                                                   (+ (if (> c 8)\n         \
    \                                                                            \
    \        (+ (if (> c 0)\n                                                    \
    \                                         (+ (if (> c 128)\n                 \
    \                                                                            (+\
    \ (if (> c 192)\n                                                            \
    \                                 (+ (if (> c 224)\n                         \
    \                                                                    (+ (if (>\
    \ c 240)\n                                                                   \
    \                          (+ (if (> c 248)\n                                \
    \                              ", "  (+\n    (map (lambda (c)\n          (+\n\
    \            (+\n              (+\n                (+\n                  (+\n\
    \                    (+\n                      (+\n                        (+\n\
    \                          (+\n                            (+\n              \
    \                (+\n                                (+\n                    \
    \              (+\n                                    (+\n                  \
    \                    (+\n                                        (+\n        \
    \                                  (+\n                                      \
    \      (+\n                                              (+\n                \
    \                                (+\n                                        \
    \          (+\n                                                    (+\n      \
    \                                                (+\n                        \
    \                                (+\n                                        \
    \                  (+\n                                                      \
    \      (+\n                                                              (+\n\
    \                                                                (+\n        \
    \                                                          (+\n              \
    \                                                      (+\n                  \
    \                                                    (+\n                    \
    \                                                    (+\n                    \
    \                                                      (+\n                  \
    \                                                          (+\n              \
    \                                                                (+\n        \
    \                                                                        (+\n\
    \                                                                            \
    \        (+\n                                                                \
    \                      (+\n                                                  \
    \                                      (+\n                                  \
    \                                                        (+\n                \
    \                                                                            \
    \ (+\n                                                                       \
    \                        (+\n                                                \
    \                                                (+\n                        \
    \                                                                          (+\n\
    \                                                                            \
    \                        (+\n                                                \
    \                                                      (+\n                  \
    \                                                                            \
    \          (+\n                                                              \
    \                                            (+\n                            \
    \                                                                            \
    \    (+\n                                                                    \
    \                                          (+\n                              \
    \                                                                            \
    \        (+\n                                                                \
    \                                                    (+\n                    \
    \                                                                            \
    \                      (+\n                                                  \
    \                                                                      (+\n  \
    \                                                                            \
    \                                              (+\n                          \
    \                                                                            \
    \                        (+\n                                                \
    \                                                                            \
    \    (+\n                                                                    \
    \                                                              (+\n          \
    \                                                                            \
    \                                               (+\n                         \
    \                                                                            \
    \                                   (+\n                                     \
    \                                                                            \
    \                        (+\n                                                \
    \                                                                            \
    \               (+\n                                                         \
    \                                                                            \
    \           (+\n                                                             \
    \                                                                            \
    \         (+\n                                                               \
    \                                                                            \
    \         (+\n                               ", "  (+\n    (map (lambda (c)\n\
    \          (+ (char->integer (string->char s c))\n             (char->integer\
    \ (string->char s c))))\n      (string->char s)))\n  0)\n\n;; Test\n;; >>> (digitSum\
    \ \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\"\
    )\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n\
    ;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153", "  (+\n    (map char-code char\
    \ s)\n    (filter char-upper char s)))\n\n;; Test\n;; >>> (digitSum \"\")\n;;\
    \ 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n\
    ;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;;\
    \ >>> (digitSum \"aAaaaXa\")\n;; 153\n", "  (let ((sum 0))\n    (for-each (lambda\
    \ (c) (if (> c 65) (sum (+ c (if (< c 90) 0 1)))) s)\n      (string-to-number\
    \ c)))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\"\
    )\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n\
    ;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n\
    ;; 153\n", "  (+\n    (map char-code char s)\n    (filter char-upper char s)))\n\
    \n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n\
    ;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>>\
    \ (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n", " \
    \ (+\n    (mapcar #\"A\" s)\n    (mapcar #\"A\" (string-upcase s))\n  )\n)\n\n\
    ;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;;\
    \ >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>>\
    \ (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;;\
    \ Answer\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;;\
    \ >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>>\
    \ (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n", " \
    \ (let ((sum 0))\n    (for-each (lambda (c) (if (> c 65) (sum (+ c (char->integer\
    \ c) ))))\n      s))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum\
    \ \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\"\
    )\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\"\
    )\n;; 153\n\n;; Answer\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\"\
    )\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n\
    ;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n\
    ;; 153\n", "  (let ((sum 0))\n    (for-each (lambda (c) (if (> (char->integer\
    \ c) 64) (sum (+ (char->integer c) 1))))\n      s))\n)\n\n;; Test\n;; >>> (digitSum\
    \ \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\"\
    )\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n\
    ;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n", "  (let ((sum 0))\n    (for-each\
    \ (lambda (c)\n                (if (> (char->integer c) 64)\n                \
    \  (sum (+ (char->integer c) (char->integer (char->integer c) - 64))))\n     \
    \           s)\n      sum))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>>\
    \ (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum\
    \ \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum\
    \ \"aAaaaXa\")\n;; 153\n", "  (+\n    (map char-code char s)\n    (filter char-upper\
    \ char s)))\n\n;; Task\n;; Write a function that takes a string as input and returns\
    \ the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>>\
    \ (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153", "  (+\n    (map char-code\
    \ char s)\n    (filter char-upper char s)))\n\n;;; (digitSum \"\")\n;;; 0\n;;;\
    \ (digitSum \"abAB\")\n;;; 131\n;;; (digitSum \"abcCd\")\n;;; 67\n;;; (digitSum\
    \ \"helloE\")\n;;; 69\n;;; (digitSum \"woArBld\")\n;;; 131\n;;; (digitSum \"aAaaaXa\"\
    )\n;;; 153", "  (+\n    (map-char\n      (lambda (c)\n        (if (> c 65) c))\n\
    \      (string-to-list s))\n    0))\n\n;; Task\n;; Write a function that takes\
    \ a string as input and returns the sum of the lower characters only'\n;; ASCII\
    \ codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\"\
    )\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n\
    ;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n\
    ;; 153", "  (+\n    (map char-code char s)\n    (filter char-upper char s)))\n\
    \n;; Task\n;; Write a function that takes a string as input and returns the sum\
    \ of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum\
    \ \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\"\
    )\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n\
    ;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153", "  (+\n    (map char-code char\
    \ s)\n    (filter char-upper char s)))\n\n;; Task\n;; Write a function that takes\
    \ a string as input and returns the sum of the lower characters only'\n;; ASCII\
    \ codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\"\
    )\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n\
    ;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n\
    ;; 153", "  (+\n    (map-char\n      (lambda (c)\n        (if (> c 65)\n     \
    \       (+ (c 65) (digitSum (substring s (1 - (index-of c s)))))\n           \
    \ 0))\n      s))\n  0)\n\n;; Task\n;; Write a function that takes a string as\
    \ input and returns the sum of the lower characters only'\n;; ASCII codes.\n;;\
    \ Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n\
    ;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>>\
    \ (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153", "  (+\n\
    \    (map (lambda (c)\n          (+ (char->integer (string->char c))\n       \
    \      (char->integer (string->char (substring s 1 1))))\n          (string->char\
    \ s)))\n    0))\n", "  (let ((sum 0))\n    (for-each (lambda (c) (if (> c 65)\
    \ (sum (+ c (if (< c 91) (if (< c 97) (if (< c 123) (+ c (if (< c 91) (if (< c\
    \ 97) (if (< c 123) (+ c (if (< c 91) (if (< c 97) (if (< c 123) (+ c (if (< c\
    \ 91) (if (< c 97) (if (< c 123) (+ c (if (< c 91) (if (< c 97) (if (< c 123)\
    \ (+ c (if (< c 91) (if (< c 97) (if (< c 123) (+ c (if (< c 91) (if (< c 97)\
    \ (if (< c 123) (+ c (if (< c 91) (if (< c 97) (if (< c 123) (+ c (if (< c 91)\
    \ (if (< c 97) (if (< c 123) (+ c (if (< c 91) (if (< c 97) (if (< c 123) (+ c\
    \ (if (< c 91) (if (< c 97) (if (< c 123) (+ c (if (< c 91) (if (< c 97) (if (<\
    \ c 123) (+ c (if (< c 91) (if (< c 97) (if (< c 123) (+ c (if (< c 91) (if (<\
    \ c 97) (if (< c 123) (+ c (if (< c 91) (if (< c 97) (if (< c 123) (+ c (if (<\
    \ c 91) (if (< c 97) (if (< c 123) (+ c (if (< c 91) (if (< c 97) (if (< c 123)\
    \ (+ c (if (< c 91) (if (< c 97) (if (< c 123) (+ c (if (< c 91) (if (< c 97)\
    \ (if (< c 123) (+ c (if (< c 91) (if (< c 97) (if (< c 123) (+ c (if (< c 91)\
    \ (if (< c 97) (if (< c 123) (+ c (if (< c 91) (if (< c 97) (if (< c 123) (+ c\
    \ (if (< c 91) (if (< c 97) (if (< c 123) (+ c (if (< c 91) (if (< c 97) (if (<\
    \ c 123) (+ c (if (< c", "  (+\n    (mapcar #\"A\" (string-split s \"\") (string-length\
    \ s))\n    (mapcar #\"A\" (string-split s \"\") (string-length s))\n  )\n)\n",
  "  (+\n    (map char-code char s)\n    (filter (lambda (c) (char-code c))\n    \
    \  (string-to-list s)))\n)\n", "  (let ((sum 0))\n    (for-each (lambda (c) (if\
    \ (> c 65) (sum (+ c (char->integer c) ))))\n      s))\n)\n\n;; Test\n;; >>> (digitSum\
    \ \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\"\
    )\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n\
    ;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Answer\n;; >>> (digitSum \"\
    \")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;;\
    \ 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n\
    ;; >>> (digitSum \"aAaaaXa\")\n;; 153\n", "  (+\n    (mapcar (lambda (c) (char-code\
    \ c))\n      (string-to-list s))\n    0))\n\n;;; (digitSum \"hello\")\n;;; 131\n\
    ;;; (digitSum \"woArBld\")\n;;; 131\n;;; (digitSum \"aAaaaXa\")\n;;; 153\n;;;\
    \ (digitSum \"abAB\")\n;;; 131\n;;; (digitSum \"abcCd\")\n;;; 67\n;;; (digitSum\
    \ \"\")\n;;; 0\n;;; (digitSum \"abcd\")\n;;; 67\n;;; (digitSum \"abcd\")\n;;;\
    \ 67\n;;; (digitSum \"abcd\")\n;;; 67\n;;; (digitSum \"abcd\")\n;;; 67\n;;; (digitSum\
    \ \"abcd\")\n;;; 67\n;;; (digitSum \"abcd\")\n;;; 67\n;;; (digitSum \"abcd\")\n\
    ;;; 67\n;;; (digitSum \"abcd\")\n;;; 67\n;;; (digitSum \"abcd\")\n;;; 67\n;;;\
    \ (digitSum \"abcd\")\n;;; 67\n;;; (digitSum \"abcd\")\n;;; 67\n;;; (digitSum\
    \ \"abcd\")\n;;; 67\n;;; (digitSum \"abcd\")\n;;; 67\n;;; (digitSum \"abcd\")\n\
    ;;; 67\n;;; (digitSum \"abcd\")\n;;; 67\n;;; (digitSum \"abcd\")\n;;; 67\n;;;\
    \ (digitSum \"abcd\")\n;;; 67\n;;; (digitSum \"abcd\")\n;;; 67\n;;; (digitSum\
    \ \"abcd\")\n;;; 67\n;;; (digitSum \"abcd\")\n;;; 67\n;;; (digitSum \"abcd\")\n\
    ;;; 67\n;;; (digitSum \"abcd\")\n;;; 67\n;;; (digitSum \"abcd\")\n;;; 67\n;;;\
    \ (digitSum \"abcd\")\n;;; 67\n;;; (digitSum \"abcd\")\n;;; 67\n;;; (digitSum\
    \ \"abcd\")\n;;; 67\n;;; (digitSum \"abcd\")\n;;; 67\n;;; (digitSum \"abcd\")\n\
    ;;;", "  (+\n    (map-char\n      (lambda (c)\n        (if (> c 65)\n        \
    \    (+ (char-ascii c) (char-ascii (char-upcase c)))\n            (char-ascii\
    \ c)))\n      s)\n    0))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum\
    \ \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\"\
    )\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\"\
    )\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\"\
    )\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\"\
    )\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\"\
    )\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\"\
    )\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\"\
    )\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\"\
    )\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\"\
    )\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\"\
    )\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\"\
    )\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\"\
    )\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\"\
    )\n;; 153\n;; >>> (digitSum \"", "  (+\n    (map char-code\n      (string-split\
    \ s \"\")\n      (lambda (c) (char-code c))\n      )\n    0))\n\n;;; (digitSum\
    \ \"helloE\")\n;;; 131\n;;; (digitSum \"woArBld\")\n;;; 131\n;;; (digitSum \"\
    aAaaaXa\")\n;;; 153\n;;; (digitSum \"abAB\")\n;;; 131\n;;; (digitSum \"abcCd\"\
    )\n;;; 67\n;;; (digitSum \"\")\n;;; 0\n;;; (digitSum \"a\")\n;;; 1\n;;; (digitSum\
    \ \"ab\")\n;;; 3\n;;; (digitSum \"abc\")\n;;; 3\n;;; (digitSum \"abcd\")\n;;;\
    \ 7\n;;; (digitSum \"abcde\")\n;;; 7\n;;; (digitSum \"abcdef\")\n;;; 11\n;;; (digitSum\
    \ \"abcdefg\")\n;;; 11\n;;; (digitSum \"abcdefgh\")\n;;; 15\n;;; (digitSum \"\
    abcdefghi\")\n;;; 15\n;;; (digitSum \"abcdefghij\")\n;;; 19\n;;; (digitSum \"\
    abcdefghijk\")\n;;; 19\n;;; (digitSum \"abcdefghijkl\")\n;;; 23\n;;; (digitSum\
    \ \"abcdefghijklm\")\n;;; 23\n;;; (digitSum \"abcdefghijklmn\")\n;;; 27\n;;; (digitSum\
    \ \"abcdefghijklmno\")\n;;; 27\n;;; (digitSum \"abcdefghijklmnop\")\n;;; 31\n\
    ;;; (digitSum \"abcdefghijklmnopq\")\n;;; 31\n;;; (digitSum \"abcdefghijklmnopqr\"\
    )\n;;; 35\n;;; (digitSum \"abcdefghijklmnopqrs\")\n;;; 35\n;;; (digitSum \"abcdefghijklmnopqrst\"\
    )\n;;; 39\n;;; (digitSum \"abcdefghijklmnopqrstu\")\n;;; 39\n;;; (digitSum \"\
    abcdefghijklmnopqrstuv\")\n;;; 43\n;;; (", "  (+\n    (map-char\n      (lambda\
    \ (c)\n        (if (> c 65)\n            (+ (char-code c) (char-code (char-upcase\
    \ c)))\n            0))\n      s)\n    0))\n\n;; Task\n;; Write a function that\
    \ takes a string as input and returns the sum of the lower characters only'\n\
    ;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum\
    \ \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\"\
    )\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\"\
    )\n;; 153", "  (+\n    (mapcar\n      (lambda (c)\n        (+ (char->integer (string-upcase\
    \ c)) (char->integer (string-upcase (string-substring s 1 1)))))\n      (string-upcase\
    \ s)))\n  0)\n\n;; Task\n;; Write a function that takes a string as input and\
    \ returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153", "  (let ((sum 0))\n\
    \    (for-each (lambda (c) (if (> (char->integer c) 64) (sum (+ (char->integer\
    \ c) 1))))\n      s))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum\
    \ \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\"\
    )\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\"\
    )\n;; 153\n\n;; Answer\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\"\
    )\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n\
    ;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n\
    ;; 153\n", "  (+\n    (map char-code char s)\n    (filter char-upper char s)))\n\
    \n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n\
    ;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>>\
    \ (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;;\
    \ Answer\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;;\
    \ >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>>\
    \ (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n", " \
    \ (let ((sum 0))\n    (for-each (lambda (c) (if (> c 65) (sum (+ c (if (< c 90)\
    \ 0 1)))) s)\n      (string-char c)))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n\
    ;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n\
    ;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;;\
    \ >>> (digitSum \"aAaaaXa\")\n;; 153\n", "  (+\n    (map (lambda (c)\n       \
    \   (+ (char->integer (string->char c))\n             (char->integer (string->char\
    \ (substring s 1 1))))\n         (string->char s)))\n    0))\n\n;; Task\n;; Write\
    \ a function that takes a string as input and returns the sum of the lower characters\
    \ only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum\
    \ \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\"\
    )\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\"\
    )\n;; 153", "  (+\n    (map-char\n      (lambda (c)\n        (if (> c 65)\n  \
    \          (+ (char-ascii c) (char-ascii (char-upcase c)))\n            0))\n\
    \      s)\n    0))\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153", "  (let* ([digits\
    \ (string-split s \"\")]\n         [sum (0)])\n    (for-each digits (map (lambda\
    \ (x) (string-to-number x)) digits)\n      (sum (+ (string-to-number (first digits))\
    \ (string-to-number (last digits)))))))\n\n;; Test\n;; >>> (digitSum \"\")\n;;\
    \ 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n\
    ;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;;\
    \ >>> (digitSum \"aAaaaXa\")\n;; 153\n", "  (let ((sum 0))\n    (for-each (lambda\
    \ (c)\n                (if (> c 65)\n                  (sum (+ c (ascii-char-code\
    \ c)\n                         (ascii-char-code c)\n                         (ascii-char-code\
    \ c))))\n                (string-char c s)))\n    sum))\n\n;; Test\n;; >>> (digitSum\
    \ \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\"\
    )\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n\
    ;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n", "  (+\n    (map (lambda (c)\
    \ (char-code c))\n      (string-to-list s))\n    0))\n\n;; Test\n;; >>> (digitSum\
    \ \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\"\
    )\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n\
    ;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Answer\n;; >>> (digitSum \"\
    \")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;;\
    \ 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n\
    ;; >>> (digitSum \"aAaaaXa\")\n;; 153\n", "  (+\n    (map (lambda (c)\n      \
    \    (+\n            (+\n              (+\n                (+\n              \
    \    (+\n                    (+\n                      (+\n                  \
    \      (+\n                          (+\n                            (+\n    \
    \                          (+\n                                (+\n          \
    \                        (+\n                                    (+\n        \
    \                              (+\n                                        (+\n\
    \                                          (+\n                              \
    \              (+\n                                              (+\n        \
    \                                        (+\n                                \
    \                  (+\n                                                    (+\n\
    \                                                      (+\n                  \
    \                                      (+\n                                  \
    \                        (+\n                                                \
    \            (+\n                                                            \
    \  (+\n                                                                (+\n  \
    \                                                                (+\n        \
    \                                                            (+\n            \
    \                                                          (+\n              \
    \                                                          (+\n              \
    \                                                            (+\n            \
    \                                                                (+\n        \
    \                                                                      (+\n  \
    \                                                                            \
    \  (+\n                                                                      \
    \              (+\n                                                          \
    \                            (+\n                                            \
    \                                            (+\n                            \
    \                                                              (+\n          \
    \                                                                            \
    \       (+\n                                                                 \
    \                              (+\n                                          \
    \                                                      (+\n                  \
    \                                                                            \
    \    (+\n                                                                    \
    \                                (+\n                                        \
    \                                                              (+\n          \
    \                                                                            \
    \                  (+\n                                                      \
    \                                                    (+\n                    \
    \                                                                            \
    \            (+\n                                                            \
    \                                                  (+\n                      \
    \                                                                            \
    \                (+\n                                                        \
    \                                                            (+\n            \
    \                                                                            \
    \                              (+\n                                          \
    \                                                                            \
    \  (+\n                                                                      \
    \                                                      (+\n                  \
    \                                                                            \
    \                                (+\n                                        \
    \                                                                            \
    \            (+\n                                                            \
    \                                                                      (+\n  \
    \                                                                            \
    \                                                       (+\n                 \
    \                                                                            \
    \                                           (+\n                             \
    \                                                                            \
    \                                (+\n                                        \
    \                                                                            \
    \                       (+\n                                                 \
    \                                                                            \
    \                   (+\n                                                     \
    \                                                                            \
    \                 (+\n                                                       \
    \                                                                            \
    \                 (+\n                               ", "  (let* ([sum (0)])\n\
    \    (for-each (lambda (c)\n                (if (> c 65)\n                   \
    \ (sum (+ (char->integer c) (char->integer (char->integer c) - 64))))\n      \
    \          (if (< c 91)\n                    (sum (+ (char->integer c) (char->integer\
    \ (char->integer c) - 96))))\n                (if (< c 123)\n                \
    \    (sum (+ (char->integer c) (char->integer (char->integer c) - 128))))\n  \
    \              (if (< c 192)\n                    (sum (+ (char->integer c) (char->integer\
    \ (char->integer c) - 192))))\n                (if (< c 223)\n               \
    \     (sum (+ (char->integer c) (char->integer (char->integer c) - 224))))\n \
    \               (if (< c 240)\n                    (sum (+ (char->integer c) (char->integer\
    \ (char->integer c) - 240))))\n                (if (< c 245)\n               \
    \     (sum (+ (char->integer c) (char->integer (char->integer c) - 248))))\n \
    \               (if (< c 250)\n                    (sum (+ (char->integer c) (char->integer\
    \ (char->integer c) - 252))))\n                (if (< c 255)\n               \
    \     (sum (+ (char->integer c) (char->integer (char->integer c) - 255))))\n \
    \               (if (< c 256)\n                    (sum (+ (char->integer c) (char->integer\
    \ (char->integer c) - 256))))\n                (if (< c 257)\n               \
    \     (sum (+ (char->integer c) (char->integer (char->integer c) - 257))))\n \
    \               (if (< c 258)\n                    (sum (+ (char->integer c) (char->integer\
    \ (char->integer c) - 258))))\n                (if (< c 260)\n               \
    \     (sum (+ (char->integer c) (char->integer (char->integer c) - 260))))\n \
    \               (if (< c 261)\n                    (sum (+ (char->integer c) (char->integer\
    \ (char->integer c) - 261))))\n                (if (< c 262)\n               \
    \     (sum (+ (char->integer c) (char->integer (char->integer c) - 262))))\n \
    \               (if (< c 263)\n                    (", "  (let* ([sum (0)])\n\
    \    (for-each (lambda (c)\n                (if (> (char->integer c) 65)\n   \
    \               (sum (+ (char->integer c) (char->integer (char->integer c) - 64))))\n\
    \                s)\n      (+ sum 1)))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n\
    ;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n\
    ;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;;\
    \ >>> (digitSum \"aAaaaXa\")\n;; 153\n", "  (+\n    (map-char\n      (lambda (c)\
    \ (char-ascii c))\n      (string-to-list s))\n    0))\n\n;; Task\n;; Write a function\
    \ that takes a string as input and returns the sum of the lower characters only'\n\
    ;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum\
    \ \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\"\
    )\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\"\
    )\n;; 153", "  (+\n    (map char-code\n      (string-map char-upcase s)\n    \
    \  (range 0 (string-length s)))\n    0))\n\n;; Test\n;; >>> (digitSum \"\")\n\
    ;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n\
    ;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;;\
    \ >>> (digitSum \"aAaaaXa\")\n;; 153\n", "  (+\n    (map (lambda (c)\n       \
    \   (+\n            (+\n              (+\n                (+\n               \
    \   (+\n                    (+\n                      (+\n                   \
    \     (+\n                          (+\n                            (+\n     \
    \                         (+\n                                (+\n           \
    \                       (+\n                                    (+\n         \
    \                             (+\n                                        (+\n\
    \                                          (+\n                              \
    \              (+\n                                              (+\n        \
    \                                        (+\n                                \
    \                  (+\n                                                    (+\n\
    \                                                      (+\n                  \
    \                                      (+\n                                  \
    \                        (+\n                                                \
    \            (+\n                                                            \
    \  (+\n                                                                (+\n  \
    \                                                                (+\n        \
    \                                                            (+\n            \
    \                                                          (+\n              \
    \                                                          (+\n              \
    \                                                            (+\n            \
    \                                                                (+\n        \
    \                                                                      (+\n  \
    \                                                                            \
    \  (+\n                                                                      \
    \              (+\n                                                          \
    \                            (+\n                                            \
    \                                            (+\n                            \
    \                                                              (+\n          \
    \                                                                            \
    \       (+\n                                                                 \
    \                              (+\n                                          \
    \                                                      (+\n                  \
    \                                                                            \
    \    (+\n                                                                    \
    \                                (+\n                                        \
    \                                                              (+\n          \
    \                                                                            \
    \                  (+\n                                                      \
    \                                                    (+\n                    \
    \                                                                            \
    \            (+\n                                                            \
    \                                                 (+\n                       \
    \                                                                            \
    \           (+\n                                                             \
    \                                                   (+\n                     \
    \                                                                            \
    \                 (+\n                                                       \
    \                                                             (+\n           \
    \                                                                            \
    \                               (+\n                                         \
    \                                                                            \
    \   (+\n                                                                     \
    \                                                       (+\n                 \
    \                                                                            \
    \                                 (+\n                                       \
    \                                                                            \
    \             (+\n                                                           \
    \                                                                       (+\n \
    \                                                                            \
    \                                                        (+\n                \
    \                                                                            \
    \                                           (+\n                             \
    \                                                                            \
    \                                (+\n                                        \
    \                                                                            \
    \                       (+\n                                                 \
    \                                                                            \
    \                (", "  (+\n    (map (lambda (c)\n          (+\n            (+\n\
    \              (+\n                (+\n                  (+\n                \
    \    (+\n                      (+\n                        (+\n              \
    \            (+\n                            (+\n                            \
    \  (+\n                                (+\n                                  (+\n\
    \                                    (+\n                                    \
    \  (+\n                                        (+\n                          \
    \                (+\n                                            (+\n        \
    \                                      (+\n                                  \
    \              (+\n                                                  (+\n    \
    \                                                (+\n                        \
    \                              (+\n                                          \
    \              (+\n                                                          (+\n\
    \                                                            (+\n            \
    \                                                  (+\n                      \
    \                                          (+\n                              \
    \                                    (+\n                                    \
    \                                (+\n                                        \
    \                              (+\n                                          \
    \                              (+\n                                          \
    \                                (+\n                                        \
    \                                    (+\n                                    \
    \                                          (+\n                              \
    \                                                  (+\n                      \
    \                                                              (+\n          \
    \                                                                            (+\n\
    \                                                                            \
    \            (+\n                                                            \
    \                              (+\n                                          \
    \                                                   (+\n                     \
    \                                                                          (+\n\
    \                                                                            \
    \                    (+\n                                                    \
    \                                              (+\n                          \
    \                                                                          (+\n\
    \                                                                            \
    \                          (+\n                                              \
    \                                                          (+\n              \
    \                                                                            \
    \                (+\n                                                        \
    \                                                    (+\n                    \
    \                                                                            \
    \              (+\n                                                          \
    \                                                        (+\n                \
    \                                                                            \
    \                        (+\n                                                \
    \                                                                      (+\n  \
    \                                                                            \
    \                                          (+\n                              \
    \                                                                            \
    \                  (+\n                                                      \
    \                                                                        (+\n\
    \                                                                            \
    \                                                    (+\n                    \
    \                                                                            \
    \                                  (+\n                                      \
    \                                                                            \
    \                   (+\n                                                     \
    \                                                                            \
    \      (+\n                                                                  \
    \                                                                       (+\n \
    \                                                                            \
    \                                                              (+\n          \
    \                                                                            \
    \                                                       (+\n                 \
    \                                                                            \
    \                                                  (+\n                      \
    \                                                                            \
    \                                              (+", "  (+\n    (map (lambda (c)\
    \ (char-code c))\n      (string-to-list s))\n    0))\n\n;; Test\n;; >>> (digitSum\
    \ \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\"\
    )\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n\
    ;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Solution\n;; >>> (digitSum\
    \ \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\"\
    )\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n\
    ;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153", "  (+\n    (map (lambda (c)\n\
    \          (+\n            (+\n              (+\n                (+\n        \
    \          (+\n                    (+\n                      (+\n            \
    \            (+\n                          (+\n                            (+\n\
    \                              (+\n                                (+\n      \
    \                            (+\n                                    (+\n    \
    \                                  (+\n                                      \
    \  (+\n                                          (+\n                        \
    \                    (+\n                                              (+\n  \
    \                                              (+\n                          \
    \                        (+\n                                                \
    \    (+\n                                                      (+\n          \
    \                                              (+\n                          \
    \                                (+\n                                        \
    \                    (+\n                                                    \
    \          (+\n                                                              \
    \  (+\n                                                                  (+\n\
    \                                                                    (+\n    \
    \                                                                  (+\n      \
    \                                                                  (+\n      \
    \                                                                    (+\n    \
    \                                                                        (+\n\
    \                                                                            \
    \  (+\n                                                                      \
    \          (+\n                                                              \
    \                      (+\n                                                  \
    \                                    (+\n                                    \
    \                                                    (+\n                    \
    \                                                                      (+\n  \
    \                                                                            \
    \               (+\n                                                         \
    \                                      (+\n                                  \
    \                                                              (+\n          \
    \                                                                            \
    \            (+\n                                                            \
    \                                        (+\n                                \
    \                                                                      (+\n  \
    \                                                                            \
    \                          (+\n                                              \
    \                                                            (+\n            \
    \                                                                            \
    \                    (+\n                                                    \
    \                                                          (+\n              \
    \                                                                            \
    \                        (+\n                                                \
    \                                                                    (+\n    \
    \                                                                            \
    \                                      (+\n                                  \
    \                                                                            \
    \          (+\n                                                              \
    \                                                              (+\n          \
    \                                                                            \
    \                                        (+\n                                \
    \                                                                            \
    \                    (+\n                                                    \
    \                                                                            \
    \  (+\n                                                                      \
    \                                                                 (+\n       \
    \                                                                            \
    \                                                      (+\n                  \
    \                                                                            \
    \                                                  (+\n                      \
    \                                                                            \
    \                                                (+\n                        \
    \                                                                            \
    \                                               (+\n                         \
    \                                                                            \
    \                                                 (+\n                       \
    \                                                                            \
    \                                                     (+\n                   \
    \                                                                          ",
  "  (+\n    (map char-code\n      (string-split s \"\")\n      (filter (lambda (c)\
    \ (char-code c))\n        (string-split s \"\")\n        (filter (lambda (c) (char-code\
    \ c))\n          (string-split s \"\")\n          (filter (lambda (c) (char-code\
    \ c))\n            (string-split s \"\")\n            (filter (lambda (c) (char-code\
    \ c))\n              (string-split s \"\")\n              (filter (lambda (c)\
    \ (char-code c))\n                (string-split s \"\")\n                (filter\
    \ (lambda (c) (char-code c))\n                  (string-split s \"\")\n      \
    \            (filter (lambda (c) (char-code c))\n                    (string-split\
    \ s \"\")\n                    (filter (lambda (c) (char-code c))\n          \
    \            (string-split s \"\")\n                      (filter (lambda (c)\
    \ (char-code c))\n                        (string-split s \"\")\n            \
    \            (filter (lambda (c) (char-code c))\n                          (string-split\
    \ s \"\")\n                          (filter (lambda (c) (char-code c))\n    \
    \                        (string-split s \"\")\n                            (filter\
    \ (lambda (c) (char-code c))\n                              (string-split s \"\
    \")\n                              (filter (lambda (c) (char-code c))\n      \
    \                          (string-split s \"\")\n                           \
    \     (filter (lambda (c) (char-code c))\n                                  (string-split\
    \ s \"\")\n                                  (filter (lambda (c) (char-code c))\n\
    \                                    (string-split s \"\")\n                 \
    \                   (filter (lambda (c) (char-code c))\n                     \
    \                 (string-split s \"\")\n                                    \
    \  (filter (lambda (c) (char-code c))\n                                      \
    \  (string-split s \"\")\n                                        (filter (lambda\
    \ (c) (char-code c))\n                                          (string-split\
    \ s \"\")\n                                          (filter (lambda (c) (char-code\
    \ c))\n                                            (string-split s \"\")\n   \
    \                                         (filter (lambda (", "  (+\n    (map\
    \ char-code\n      (string-split s \"\")\n      (lambda (c) (char-code c) 0))\n\
    \    0))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n\
    ;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n\
    ;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153",
  "  (+ (map char-upper (string-split s \"\") 1)))\n\n;; Test\n;; >>> (digitSum \"\
    \")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;;\
    \ 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n\
    ;; >>> (digitSum \"aAaaaXa\")\n;; 153\n", "  (+\n    (mapcar (lambda (c) (if (>\
    \ c 65) c))\n      (string-split \" \" s))\n    0))\n\n;; Task\n;; Write a function\
    \ that takes a string as input and returns the sum of the lower characters only'\n\
    ;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum\
    \ \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\"\
    )\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\"\
    )\n;; 153", "  (+\n    (map (lambda (c)\n          (+\n            (+\n      \
    \        (+\n                (+\n                  (+\n                    (+\n\
    \                      (+\n                        (+\n                      \
    \    (+\n                            (+\n                              (+\n  \
    \                              (+\n                                  (+\n    \
    \                                (+\n                                      (+\n\
    \                                        (+\n                                \
    \          (+\n                                            (+\n              \
    \                                (+\n                                        \
    \        (+\n                                                  (+\n          \
    \                                          (+\n                              \
    \                        (+\n                                                \
    \        (+\n                                                          (+\n  \
    \                                                          (+\n              \
    \                                                (+\n                        \
    \                                        (+\n                                \
    \                                  (+\n                                      \
    \                              (+\n                                          \
    \                            (+\n                                            \
    \                            (+\n                                            \
    \                              (+\n                                          \
    \                                  (+\n                                      \
    \                                        (+\n                                \
    \                                                (+\n                        \
    \                                                            (+\n            \
    \                                                                          (+\n\
    \                                                                            \
    \            (+\n                                                            \
    \                              (+\n                                          \
    \                                                   (+\n                     \
    \                                                                          (+\n\
    \                                                                            \
    \                    (+\n                                                    \
    \                                              (+\n                          \
    \                                                                          (+\n\
    \                                                                            \
    \                          (+\n                                              \
    \                                                          (+\n              \
    \                                                                            \
    \                (+\n                                                        \
    \                                                    (+\n                    \
    \                                                                            \
    \              (+\n                                                          \
    \                                                      (+\n                  \
    \                                                                            \
    \                    (+\n                                                    \
    \                                                                (+\n        \
    \                                                                            \
    \                                  (+\n                                      \
    \                                                                            \
    \      (+\n                                                                  \
    \                                                          (+\n              \
    \                                                                            \
    \                                    (+\n                                    \
    \                                                                            \
    \                (+\n                                                        \
    \                                                                          (+\n\
    \                                                                            \
    \                                                           (+\n             \
    \                                                                            \
    \                                                (+\n                        \
    \                                                                            \
    \                                            (+\n                            \
    \                                                                            \
    \                                          (+\n                              \
    \                                                                            \
    \                                         (+\n                               \
    \                                                                            \
    \                                           (+\n                             \
    \                                 ", "  (+\n    (map (lambda (c)\n          (+\
    \ (ascii-code c)\n             (ascii-code (string-upcase c)))))\n    0))\n\n\
    ;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;;\
    \ >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>>\
    \ (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n", " \
    \ (+\n    (mapcar #\"A\" s)\n    (mapcar #\"A\" (string-upcase s))\n  )\n)\n",
  "  (let ((sum 0))\n    (for-each (lambda (c)\n                (if (> c 65)\n   \
    \               (sum (+ (c 65) 1)))\n                (if (< c 91)\n          \
    \        (sum (+ (c 91) 1)))\n                (if (< c 97)\n                 \
    \ (sum (+ (c 97) 1)))\n                (if (< c 123)\n                  (sum (+\
    \ (c 123) 1)))\n                (if (< c 192)\n                  (sum (+ (c 192)\
    \ 1)))\n                (if (< c 255)\n                  (sum (+ (c 255) 1)))\n\
    \                (if (< c 256)\n                  (sum (+ (c 256) 1)))\n     \
    \           (if (< c 383)\n                  (sum (+ (c 383) 1)))\n          \
    \      (if (< c 563)\n                  (sum (+ (c 563) 1)))\n               \
    \ (if (< c 652)\n                  (sum (+ (c 652) 1)))\n                (if (<\
    \ c 769)\n                  (sum (+ (c 769) 1)))\n                (if (< c 884)\n\
    \                  (sum (+ (c 884) 1)))\n                (if (< c 891)\n     \
    \             (sum (+ (c 891) 1)))\n                (if (< c 892)\n          \
    \        (sum (+ (c 892) 1)))\n                (if (< c 893)\n               \
    \   (sum (+ (c 893) 1)))\n                (if (< c 894)\n                  (sum\
    \ (+ (c 894) 1)))\n                (if (< c 895)\n                  (sum (+ (c\
    \ 895) 1)))\n                (if (< c 896)\n                  (sum (+ (c 896)\
    \ 1)))\n                (if (< c 897)\n                  (sum (+ (c 897) 1)))\n\
    \                (if (< c 898)\n                  (sum (+ (c 898) 1)))\n     \
    \           (if (< c 899)\n                  (sum (+ (c 899) 1)))\n          \
    \      (if (< c 900)\n                  (sum (+ (c 900) 1)))\n               \
    \ (if (< c 901)\n                  (sum (+ (c 901) 1)))\n                (if (<\
    \ c 902)\n                  (sum (+ (c 902) 1)))\n                (if (< c 903",
  "  (+\n    (map char-upper-digit s)\n    (map char-upper-digit (substring s 1))))\n\
    \n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n\
    ;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>>\
    \ (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n", " \
    \ (+\n    (map (lambda (c)\n          (+ (char->integer (string->char s c))\n\
    \             (char->integer (string->char s (string->char s c) - 1))))\n    \
    \   (string->char s)))\n  s)\n\n;; Task\n;; Write a function that takes a string\
    \ as input and returns the sum of the lower characters only'\n;; ASCII codes.\n\
    ;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n\
    ;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>>\
    \ (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153", "  (+\n\
    \    (map char-code\n      (string-map char-upcase s)\n      (range 0 (string-length\
    \ s)))\n    0))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"\
    abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\"\
    )\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\"\
    )\n;; 153", "  (+\n    (mapcar\n      (lambda (c)\n        (+ (char->integer (string-upcase\
    \ c)) (char->integer (string-upcase (string-downcase c)))))\n      (string-split\
    \ s \"\")\n    )\n    0))\n\n;;; (digitSum \"\")\n;;; 0\n;;; (digitSum \"abAB\"\
    )\n;;; 131\n;;; (digitSum \"abcCd\")\n;;; 67\n;;; (digitSum \"helloE\")\n;;; 69\n\
    ;;; (digitSum \"woArBld\")\n;;; 131\n;;; (digitSum \"aAaaaXa\")\n;;; 153", " \
    \ (+\n    (map-char\n      (lambda (c)\n        (if (> c 65)\n            (+ c\
    \ 32)\n            c))\n      s)\n    0))\n\n;; Task\n;; Write a function that\
    \ takes a string as input and returns the sum of the lower characters only'\n\
    ;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum\
    \ \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\"\
    )\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\"\
    )\n;; 153", "  (+\n    (map (lambda (c)\n          (+ (char->integer (string->char\
    \ s c))\n             (char->integer (string->char s c))))\n      (string->char\
    \ s)))\n  0)\n\n;;; (digitSum \"helloE\")\n;;; 131\n;;; (digitSum \"woArBld\"\
    )\n;;; 131\n;;; (digitSum \"aAaaaXa\")\n;;; 153\n;;; (digitSum \"abAB\")\n;;;\
    \ 131\n;;; (digitSum \"abcCd\")\n;;; 67\n;;; (digitSum \"\")\n;;; 0\n;;; (digitSum\
    \ \"abcd\")\n;;; 0\n;;; (digitSum \"abcd\")\n;;; 0\n;;; (digitSum \"abcd\")\n\
    ;;; 0\n;;; (digitSum \"abcd\")\n;;; 0\n;;; (digitSum \"abcd\")\n;;; 0\n;;; (digitSum\
    \ \"abcd\")\n;;; 0\n;;; (digitSum \"abcd\")\n;;; 0\n;;; (digitSum \"abcd\")\n\
    ;;; 0\n;;; (digitSum \"abcd\")\n;;; 0\n;;; (digitSum \"abcd\")\n;;; 0\n;;; (digitSum\
    \ \"abcd\")\n;;; 0\n;;; (digitSum \"abcd\")\n;;; 0\n;;; (digitSum \"abcd\")\n\
    ;;; 0\n;;; (digitSum \"abcd\")\n;;; 0\n;;; (digitSum \"abcd\")\n;;; 0\n;;; (digitSum\
    \ \"abcd\")\n;;; 0\n;;; (digitSum \"abcd\")\n;;; 0\n;;; (digitSum \"abcd\")\n\
    ;;; 0\n;;; (digitSum \"abcd\")\n;;; 0\n;;; (digitSum \"abcd\")\n;;; 0\n;;; (digitSum\
    \ \"abcd\")\n;;; 0\n;;; (digitSum \"abcd\")\n;;; 0\n;;; (digitSum \"abcd\")\n\
    ;;; 0\n;;; (digitSum \"abcd\")\n;;; 0\n;;; (digitSum \"abcd\")\n;;; 0\n;;; (digitSum\
    \ \"abcd\")\n;;; 0\n;;; (digitSum \"", "  (+\n    (map char-code char s)\n   \
    \ (filter char-upper char s)))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>>\
    \ (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum\
    \ \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum\
    \ \"aAaaaXa\")\n;; 153\n", "  (+\n    (map char-code char s)\n    (filter char-upper\
    \ char s)))\n\n;; Task\n;; Write a function that takes a string as input and returns\
    \ the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>>\
    \ (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153", "  (let ((sum 0))\n\
    \    (for-each (lambda (c) (if (> c 65) (sum (+ c (if (< c 90) 0 1))) sum)) s)\n\
    \    sum))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\"\
    )\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n\
    ;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n\
    ;; 153\n", "  (+\n    (map (lambda (c)\n          (+ (char->integer (string->char\
    \ s c))\n             (char->integer (string->char s c))))\n      (string->char\
    \ s)))\n  0)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\"\
    )\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n\
    ;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n\
    ;; 153\n\n;; Answer\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n\
    ;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n\
    ;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n",
  "  (+\n    (mapcar (lambda (c) (char-code c))\n      (string-to-list s))\n    0))\n\
    \n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n\
    ;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>>\
    \ (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;;\
    \ Solution\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n\
    ;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>>\
    \ (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153", "  (let\
    \ ((sum 0))\n    (for-each (lambda (c)\n                (if (> c 65)\n       \
    \           (sum (+ c (ascii-char-code c)\n                         (ascii-char-code\
    \ (ascii-char-code c) - 32))))\n                s)\n      sum))\n)\n\n;; Test\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n", "  (+\n    (mapcar\
    \ #\"A\"\n      (mapcar #\"A\"\n        (mapcar #\"A\"\n          (mapcar #\"\
    A\"\n            (mapcar #\"A\"\n              (mapcar #\"A\"\n              \
    \  (mapcar #\"A\"\n                  (mapcar #\"A\"\n                    (mapcar\
    \ #\"A\"\n                      (mapcar #\"A\"\n                        (mapcar\
    \ #\"A\"\n                          (mapcar #\"A\"\n                         \
    \   (mapcar #\"A\"\n                              (mapcar #\"A\"\n           \
    \                     (mapcar #\"A\"\n                                  (mapcar\
    \ #\"A\"\n                                    (mapcar #\"A\"\n               \
    \                       (mapcar #\"A\"\n                                     \
    \   (mapcar #\"A\"\n                                          (mapcar #\"A\"\n\
    \                                            (mapcar #\"A\"\n                \
    \                              (mapcar #\"A\"\n                              \
    \                  (mapcar #\"A\"\n                                          \
    \        (mapcar #\"A\"\n                                                    (mapcar\
    \ #\"A\"\n                                                      (mapcar #\"A\"\
    \n                                                        (mapcar #\"A\"\n   \
    \                                                       (mapcar #\"A\"\n     \
    \                                                       (mapcar #\"A\"\n     \
    \                                                         (mapcar #\"A\"\n   \
    \                                                             (mapcar #\"A\"\n\
    \                                                                  (mapcar #\"\
    A\"\n                                                                    (mapcar\
    \ #\"A\"\n                                                                   \
    \   (mapcar #\"A\"\n                                                         \
    \               (mapcar #\"A\"\n                                             \
    \                             (mapcar #\"A\"\n                               \
    \                                             (mapcar #\"A\"\n               \
    \                                                               (mapcar #\"A\"\
    \n                                                                           \
    \     (mapcar #\"A\"\n                                                       \
    \                           (mapcar #\"A\"\n                                 \
    \                                                   (mapcar #\"A\"\n         \
    \                                                                            \
    \ (mapcar #\"A\"\n                                                           \
    \                             (mapcar #\"A\"\n                               \
    \                                                           (mapcar #\"A\"\n \
    \                                                             ", "  (+\n    (map-char\n\
    \      (lambda (c) (char-ascii-value c))\n      (string-to-list s))\n    0))\n\
    \n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n\
    ;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>>\
    \ (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;;\
    \ Solution\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n\
    ;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>>\
    \ (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153", "  (+\n\
    \    (map char-code char s)\n    (filter char-upper char s)))\n\n;; Test\n;; >>>\
    \ (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n", "  (+\n    (mapcar\n\
    \      (lambda (c)\n        (+ (char->integer (string-upcase c)) (char->integer\
    \ (string-upcase (string-substring s 1 1)))))\n      (string-upcase s)))\n  0)\n\
    \n;; Task\n;; Write a function that takes a string as input and returns the sum\
    \ of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum\
    \ \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\"\
    )\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n\
    ;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153", "  (+\n    (mapcar\n      (lambda\
    \ (c)\n        (+ (char-code c) (char-code (char-upcase c)))))\n    s))\n\n;;\
    \ Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>>\
    \ (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum\
    \ \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153", "  (+\n    (map\
    \ char-code char s)\n    (filter char-upper char s)))\n\n;; Test\n;; >>> (digitSum\
    \ \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\"\
    )\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n\
    ;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Solution\n;; >>> (digitSum\
    \ \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\"\
    )\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n\
    ;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153", "  (+\n    (map (lambda (c) (char-code\
    \ c))\n      (string-to-list s))\n    (map (lambda (c) (char-code c))\n      (string-to-list\
    \ \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))))\n\n;; Task\n;; Write a function that takes\
    \ a string as input and returns the sum of the lower characters only'\n;; ASCII\
    \ codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\"\
    )\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n\
    ;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n\
    ;; 153", "  (let ((sum 0))\n    (for-each (lambda (c) (if (> c 65) (sum (+ c (char->integer\
    \ c) ))))\n      s))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum\
    \ \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\"\
    )\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\"\
    )\n;; 153\n\n;; Answer\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\"\
    )\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n\
    ;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n\
    ;; 153\n", "  (let ((sum 0))\n    (for-each (lambda (c)\n                (if (>\
    \ c 65)\n                  (sum (+ c (char->integer c)\n                     \
    \    (char->integer (char->integer c) - 64))))\n                s)\n      sum))\n\
    )\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n\
    ;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>>\
    \ (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n", " \
    \ (let* ([sum 0])\n    (for-each (lambda (c) (if (> c 65) (sum (+ c (char->integer\
    \ c) ))))\n      s)\n    sum))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>>\
    \ (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum\
    \ \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum\
    \ \"aAaaaXa\")\n;; 153\n", "  (+\n    (map char-code char s)\n    (filter char-upper\
    \ char s)))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\"\
    )\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n\
    ;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n\
    ;; 153\n\n;; Answer\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n\
    ;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n\
    ;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n",
  "  (+\n    (string-map char-upcase s)\n    0))\n\n;;; (digitSum \"\")\n;;; 0\n;;;\
    \ (digitSum \"abAB\")\n;;; 131\n;;; (digitSum \"abcCd\")\n;;; 67\n;;; (digitSum\
    \ \"helloE\")\n;;; 69\n;;; (digitSum \"woArBld\")\n;;; 131\n;;; (digitSum \"aAaaaXa\"\
    )\n;;; 153\n\n;;; (digitSum \"\")\n;;; 0\n;;; (digitSum \"abAB\")\n;;; 131\n;;;\
    \ (digitSum \"abcCd\")\n;;; 67\n;;; (digitSum \"helloE\")\n;;; 69\n;;; (digitSum\
    \ \"woArBld\")\n;;; 131\n;;; (digitSum \"aAaaaXa\")\n;;; 153\n\n;;; (digitSum\
    \ \"\")\n;;; 0\n;;; (digitSum \"abAB\")\n;;; 131\n;;; (digitSum \"abcCd\")\n;;;\
    \ 67\n;;; (digitSum \"helloE\")\n;;; 69\n;;; (digitSum \"woArBld\")\n;;; 131\n\
    ;;; (digitSum \"aAaaaXa\")\n;;; 153\n\n;;; (digitSum \"\")\n;;; 0\n;;; (digitSum\
    \ \"abAB\")\n;;; 131\n;;; (digitSum \"abcCd\")\n;;; 67\n;;; (digitSum \"helloE\"\
    )\n;;; 69\n;;; (digitSum \"woArBld\")\n;;; 131\n;;; (digitSum \"aAaaaXa\")\n;;;\
    \ 153\n\n;;; (digitSum \"\")\n;;; 0\n;;; (digitSum \"abAB\")\n;;; 131\n;;; (digitSum\
    \ \"abcCd\")\n;;; 67\n;;; (digitSum \"helloE\")\n;;; 69\n;;; (digitSum \"woArBld\"\
    )\n;;; 131\n;;; (digitSum \"aAaaaXa\")\n;;; 153\n\n;;; (digitSum \"\")\n;;; 0\n\
    ;;; (digitSum \"abAB\")\n;;; 131\n;;; (digitSum \"abcCd\")\n;;; 67\n;;; (digitSum",
  "  (+\n    (map (lambda (c)\n          (+ (char->integer (string->char s c))\n \
    \            (char->integer (string->char s c))))\n       (string->list s)))\n\
    \  0)\n\n;; Task\n;; Write a function that takes a string as input and returns\
    \ the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>>\
    \ (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153", "  (let ((sum 0))\n\
    \    (for-each (lambda (c) (if (> c 65) (sum (+ (char->integer c) (char->integer\
    \ (char->integer c) - 64))))\n                                  (if (> c 97) (sum\
    \ (+ (char->integer c) (char->integer (char->integer c) - 96))))\n           \
    \                       (if (> c 122) (sum (+ (char->integer c) (char->integer\
    \ (char->integer c) - 128))))\n                                  (if (> c 48)\
    \ (sum (+ (char->integer c) (char->integer (char->integer c) - 57))))\n      \
    \                            (if (> c 57) (sum (+ (char->integer c) (char->integer\
    \ (char->integer c) - 48))))\n                                  (if (> c 65) (sum\
    \ (+ (char->integer c) (char->integer (char->integer c) - 64))))\n           \
    \                       (if (> c 97) (sum (+ (char->integer c) (char->integer\
    \ (char->integer c) - 96))))\n                                  (if (> c 122)\
    \ (sum (+ (char->integer c) (char->integer (char->integer c) - 128))))\n     \
    \                             (if (> c 48) (sum (+ (char->integer c) (char->integer\
    \ (char->integer c) - 57))))\n                                  (if (> c 57) (sum\
    \ (+ (char->integer c) (char->integer (char->integer c) - 48))))\n           \
    \                       (if (> c 65) (sum (+ (char->integer c) (char->integer\
    \ (char->integer c) - 64))))\n                                  (if (> c 97) (sum\
    \ (+ (char->integer c) (char->integer (char->integer c) - 96))))\n           \
    \                       (if (> c 122) (sum (+ (char->integer c) (char->integer\
    \ (char->integer c) - 128))))\n                                  (if (> c 48)\
    \ (sum (+ (char->integer c) (char->integer (char->integer c) - 57))))\n      \
    \                            (if (> c 57) (sum (+ (char->integer c) (char->integer\
    \ (char->integer c) - 48))))\n                                  (if (> c 65) (sum\
    \ (+ (char->integer c", "  (+\n    (map (lambda (c)\n          (+ (char->integer\
    \ (string->char s c))\n             (char->integer (string->char s (string->char\
    \ s (string->char s (string->char s (string->char s (string->char s (string->char\
    \ s (string->char s (string->char s (string->char s (string->char s (string->char\
    \ s (string->char s (string->char s (string->char s (string->char s (string->char\
    \ s (string->char s (string->char s (string->char s (string->char s (string->char\
    \ s (string->char s (string->char s (string->char s (string->char s (string->char\
    \ s (string->char s (string->char s (string->char s (string->char s (string->char\
    \ s (string->char s (string->char s (string->char s (string->char s (string->char\
    \ s (string->char s (string->char s (string->char s (string->char s (string->char\
    \ s (string->char s (string->char s (string->char s (string->char s (string->char\
    \ s (string->char s (string->char s (string->char s (string->char s (string->char\
    \ s (string->char s (string->char s (string->char s (string->char s (string->char\
    \ s (string->char s (string->char s (string->char s (string->char s (string->char\
    \ s (string->char s (string->char s (string->char s (string->char s (string->char\
    \ s (string->char s (string->char s (string->char s (string->char s (string->char\
    \ s (string->char s (string->char s (string->char s (string->char s (string->char\
    \ s (string->char s (string->char s (string->char s (string->char s (string->char\
    \ s (string->char s (string->char s (string->char s (string->char s (string->char\
    \ s (string->char s (string->char s (string->char s (string->char s (string->char\
    \ s (string->char s (string->char s (string->char s (string->char", "  (+\n  \
    \  (mapcar #\"A\" s)\n    (mapcar #\"A\" (string-upcase s))\n  ))\n\n;; Test\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Answer\n;; >>>\
    \ (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n", "  (let* ([n (string-length\
    \ s)])\n    (+ (string-map char-upcase s)\n       (if (> n 1)\n         (+ (string-map\
    \ char-upcase (substring s 1 n))\n             (string-map char-upcase (substring\
    \ s 1 n - 1)))))))\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153", "  (+\n    (map (lambda\
    \ (c)\n          (+ (char->integer (string->char c))\n             (char->integer\
    \ (string->char (substring s 1))))\n         (string->char s)))\n    0))\n", " \
    \ (+\n    (map-char\n      (lambda (c)\n        (if (> c 65)\n            (+ c\
    \ 32)\n            c))\n      s)\n    0))\n\n;; Test\n;; >>> (digitSum \"\")\n\
    ;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n\
    ;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;;\
    \ >>> (digitSum \"aAaaaXa\")\n;; 153\n", "  (+\n    (map (lambda (c)\n       \
    \   (+\n            (+\n              (+\n                (+\n               \
    \   (+\n                    (+\n                      (+\n                   \
    \     (+\n                          (+\n                            (+\n     \
    \                         (+\n                                (+\n           \
    \                       (+\n                                    (+\n         \
    \                             (+\n                                        (+\n\
    \                                          (+\n                              \
    \              (+\n                                              (+\n        \
    \                                        (+\n                                \
    \                  (+\n                                                    (+\n\
    \                                                      (+\n                  \
    \                                      (+\n                                  \
    \                        (+\n                                                \
    \            (+\n                                                            \
    \  (+\n                                                                (+\n  \
    \                                                                (+\n        \
    \                                                            (+\n            \
    \                                                          (+\n              \
    \                                                          (+\n              \
    \                                                            (+\n            \
    \                                                                (+\n        \
    \                                                                      (+\n  \
    \                                                                            \
    \  (+\n                                                                      \
    \              (+\n                                                          \
    \                            (+\n                                            \
    \                                            (+\n                            \
    \                                                              (+\n          \
    \                                                                            \
    \       (+\n                                                                 \
    \                              (+\n                                          \
    \                                                      (+\n                  \
    \                                                                            \
    \    (+\n                                                                    \
    \                                (+\n                                        \
    \                                                              (+\n          \
    \                                                                            \
    \                  (+\n                                                      \
    \                                                    (+\n                    \
    \                                                                            \
    \            (+\n                                                            \
    \                                                 (+\n                       \
    \                                                                            \
    \           (+\n                                                             \
    \                                                   (+\n                     \
    \                                                                            \
    \                 (+\n                                                       \
    \                                                             (+\n           \
    \                                                                            \
    \                               (+\n                                         \
    \                                                                            \
    \   (+\n                                                                     \
    \                                                     (+\n                   \
    \                                                                            \
    \                             (+\n                                           \
    \                                                                            \
    \       (+\n                                                                 \
    \                                                               (+\n         \
    \                                                                            \
    \                                             (+\n                           \
    \                                                                            \
    \                              (+\n                                          \
    \                                                                            \
    \                 (+\n                                                       \
    \                                                                            \
    \      (+\n                                                                  \
    \                                                                         (",
  "  (+\n    (map (lambda (c) (char-code c))\n      (string-to-list s))\n    0))\n\
    \n;; Task\n;; Write a function that takes a string as input and returns the sum\
    \ of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum\
    \ \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\"\
    )\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n\
    ;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153", "  (+\n    (map (lambda (c)\n\
    \          (+\n            (+\n              (+\n                (+\n        \
    \          (+\n                    (+\n                      (+\n            \
    \            (+\n                          (+\n                            (+\n\
    \                              (+\n                                (+\n      \
    \                            (+\n                                    (+\n    \
    \                                  (+\n                                      \
    \  (+\n                                          (+\n                        \
    \                    (+\n                                              (+\n  \
    \                                              (+\n                          \
    \                        (+\n                                                \
    \    (+\n                                                      (+\n          \
    \                                              (+\n                          \
    \                                (+\n                                        \
    \                    (+\n                                                    \
    \          (+\n                                                              \
    \  (+\n                                                                  (+\n\
    \                                                                    (+\n    \
    \                                                                  (+\n      \
    \                                                                  (+\n      \
    \                                                                    (+\n    \
    \                                                                        (+\n\
    \                                                                            \
    \  (+\n                                                                      \
    \          (+\n                                                              \
    \                      (+\n                                                  \
    \                                    (+\n                                    \
    \                                                    (+\n                    \
    \                                                                      (+\n  \
    \                                                                            \
    \               (+\n                                                         \
    \                                      (+\n                                  \
    \                                                              (+\n          \
    \                                                                            \
    \            (+\n                                                            \
    \                                        (+\n                                \
    \                                                                      (+\n  \
    \                                                                            \
    \                          (+\n                                              \
    \                                                            (+\n            \
    \                                                                            \
    \                    (+\n                                                    \
    \                                                          (+\n              \
    \                                                                            \
    \                        (+\n                                                \
    \                                                                    (+\n    \
    \                                                                            \
    \                                      (+\n                                  \
    \                                                                            \
    \          (+\n                                                              \
    \                                                              (+\n          \
    \                                                                            \
    \                                        (+\n                                \
    \                                                                            \
    \                    (+\n                                                    \
    \                                                                            \
    \  (+\n                                                                      \
    \                                                               (+\n         \
    \                                                                            \
    \                                                  (+\n                      \
    \                                                                            \
    \                                       (+\n                                 \
    \                                                                            \
    \                              (+\n                                          \
    \                                                                            \
    \                       (+\n                                                 \
    \                                                                            \
    \                  (+\n                                                      \
    \                                                                            \
    \              (+", "  (let ((sum 0))\n    (for-each (lambda (c)\n           \
    \     (if (> c 65)\n                  (sum (+ c (char->integer c) % 26)))\n  \
    \              s)\n      (+ sum 1)))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;;\
    \ 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n\
    ;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;;\
    \ >>> (digitSum \"aAaaaXa\")\n;; 153\n", "  (+\n    (map char-code char s)\n \
    \   (filter char-upper char s)))\n\n;; Task\n;; Write a function that takes a\
    \ string as input and returns the sum of the lower characters only'\n;; ASCII\
    \ codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\"\
    )\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n\
    ;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n\
    ;; 153", "  (let ((sum 0))\n    (for-each (lambda (c)\n                (if (>\
    \ c 65)\n                  (sum (+ c (char->integer c)\n                     \
    \    (if (> c 90)\n                           9\n                           0))))\n\
    \                s)\n              (lambda (c)\n                (if (> c 65)\n\
    \                  (sum (+ c (char->integer c)\n                         (if (>\
    \ c 90)\n                           9\n                           0)))))))\n \
    \ sum)\n", "  (let ((sum 0))\n    (for-each (lambda (c) (if (> c 65) (sum (+ c\
    \ (char->integer c) ))))\n      s))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;;\
    \ 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n\
    ;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;;\
    \ >>> (digitSum \"aAaaaXa\")\n;; 153\n", "  (+\n    (map char-code char s)\n \
    \   (filter char-upper char s)))\n\n;; Task\n;; Write a function that takes a\
    \ string as input and returns the sum of the lower characters only'\n;; ASCII\
    \ codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\"\
    )\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n\
    ;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n\
    ;; 153", "  (+\n    (map char-code char s)\n    (filter char-upper char s)))\n\
    \n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n\
    ;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>>\
    \ (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n", " \
    \ (let ((sum 0))\n    (for-each (lambda (c) (if (> c 65) (sum (+ c (char->integer\
    \ c) ))))\n      s))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum\
    \ \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\"\
    )\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\"\
    )\n;; 153\n\n;; Answer\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\"\
    )\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n\
    ;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n\
    ;; 153\n", "  (+\n    (map char-code char s)\n    (filter char-upper char s)))\n\
    \n;; Task\n;; Write a function that takes a string as input and returns the sum\
    \ of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum\
    \ \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\"\
    )\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n\
    ;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153", "  (+\n    (map-char\n      (lambda\
    \ (c)\n        (if (> c 65)\n            (+ c 32)\n            c))\n      s)\n\
    \    0))\n\n;; Task\n;; Write a function that takes a string as input and returns\
    \ the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>>\
    \ (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153", "  (let ((sum 0))\n\
    \    (for-each (lambda (c) (if (> (char->integer c) 65) (sum (+ (char->integer\
    \ c) (char->integer (char->integer c) - 64))))\n          (string-set! s c))\n\
    \      s))\n)\n", "  (+\n    (map char-code char s)\n    (filter char-upper char\
    \ s)\n    0))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\"\
    )\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n\
    ;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n\
    ;; 153\n\n;; Answer\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n\
    ;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n\
    ;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n",
  "  (+\n    (map char-upper (string-split s \"\") 1)\n    (map char-upper (string-split\
    \ s \"\") 2)\n    (map char-upper (string-split s \"\") 3)\n    (map char-upper\
    \ (string-split s \"\") 4)\n    (map char-upper (string-split s \"\") 5)\n   \
    \ (map char-upper (string-split s \"\") 6)\n    (map char-upper (string-split\
    \ s \"\") 7)\n    (map char-upper (string-split s \"\") 8)\n    (map char-upper\
    \ (string-split s \"\") 9)\n    (map char-upper (string-split s \"\") 10)\n  \
    \  (map char-upper (string-split s \"\") 11)\n    (map char-upper (string-split\
    \ s \"\") 12)\n    (map char-upper (string-split s \"\") 13)\n    (map char-upper\
    \ (string-split s \"\") 14)\n    (map char-upper (string-split s \"\") 15)\n \
    \   (map char-upper (string-split s \"\") 16)\n    (map char-upper (string-split\
    \ s \"\") 17)\n    (map char-upper (string-split s \"\") 18)\n    (map char-upper\
    \ (string-split s \"\") 19)\n    (map char-upper (string-split s \"\") 20)\n \
    \   (map char-upper (string-split s \"\") 21)\n    (map char-upper (string-split\
    \ s \"\") 22)\n    (map char-upper (string-split s \"\") 23)\n    (map char-upper\
    \ (string-split s \"\") 24)\n    (map char-upper (string-split s \"\") 25)\n \
    \   (map char-upper (string-split s \"\") 26)\n    (map char-upper (string-split\
    \ s \"\") 27)\n    (map char-upper (string-split s \"\") 28)\n    (map char-upper\
    \ (string-split s \"\") 29)\n    (map char-upper (string-split s \"\") 30)\n \
    \   (map char-upper (string-split s \"\") 31)\n    (map char-upper (string-split\
    \ s \"", "  (+\n    (string-map char-upcase s)\n    0))\n\n;; Test\n;; >>> (digitSum\
    \ \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\"\
    )\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n\
    ;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Solution\n;; >>> (digitSum\
    \ \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\"\
    )\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n\
    ;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153", "  (+\n    (map (lambda (c)\n\
    \          (+\n            (+\n              (+\n                (+\n        \
    \          (+\n                    (+\n                      (+\n            \
    \            (+\n                          (+\n                            (+\n\
    \                              (+\n                                (+\n      \
    \                            (+\n                                    (+\n    \
    \                                  (+\n                                      \
    \  (+\n                                          (+\n                        \
    \                    (+\n                                              (+\n  \
    \                                              (+\n                          \
    \                        (+\n                                                \
    \    (+\n                                                      (+\n          \
    \                                              (+\n                          \
    \                                (+\n                                        \
    \                    (+\n                                                    \
    \          (+\n                                                              \
    \  (+\n                                                                  (+\n\
    \                                                                    (+\n    \
    \                                                                  (+\n      \
    \                                                                  (+\n      \
    \                                                                    (+\n    \
    \                                                                        (+\n\
    \                                                                            \
    \  (+\n                                                                      \
    \          (+\n                                                              \
    \                      (+\n                                                  \
    \                                    (+\n                                    \
    \                                                    (+\n                    \
    \                                                                      (+\n  \
    \                                                                            \
    \               (+\n                                                         \
    \                                      (+\n                                  \
    \                                                              (+\n          \
    \                                                                            \
    \            (+\n                                                            \
    \                                        (+\n                                \
    \                                                                      (+\n  \
    \                                                                            \
    \                          (+\n                                              \
    \                                                            (+\n            \
    \                                                                            \
    \                    (+\n                                                    \
    \                                                         (+\n               \
    \                                                                            \
    \                   (+\n                                                     \
    \                                                           (+\n             \
    \                                                                            \
    \                         (+\n                                               \
    \                                                                     (+\n   \
    \                                                                            \
    \                                       (+\n                                 \
    \                                                                            \
    \           (+\n                                                             \
    \                                                               (+\n         \
    \                                                                            \
    \                                         (+\n                               \
    \                                                                            \
    \                     (+\n                                                   \
    \                                                                            \
    \   (+\n                                                                     \
    \                                                                (+\n        \
    \                                                                            \
    \                                                   (+\n                     \
    \                                                                            \
    \                                        (+\n                                \
    \                                                                            \
    \                               (+\n                                         \
    \                                                                            \
    \                        (", "  (+\n    (map (lambda (c) (if (> c 65) c))\n  \
    \    (string-to-list s))\n    0))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;;\
    \ >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>>\
    \ (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>>\
    \ (digitSum \"aAaaaXa\")\n;; 153\n", "  (+\n    (map char-code\n      (string-split\
    \ s \"\")\n      (lambda (c) (char-code c))\n      )\n    0))\n\n;; Test\n;; >>>\
    \ (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153", "  (let* ([sum (0)])\n\
    \    (for-each (lambda (c)\n      (if (> c 65)\n        (sum (+ c (char->integer\
    \ c)\n              (char->integer (char->integer c) + 128))))\n      s)\n   \
    \   (lambda (c)\n        (if (> c 65)\n          (sum (+ c (char->integer c)\n\
    \                (char->integer (char->integer c) + 128)))))))\n  sum)\n\n;; Test\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"\
    aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"\
    aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"\
    aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"\
    aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"\
    aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"\
    aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"\
    aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"\
    aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"\
    aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"\
    aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;;", "  (let ((sum 0))\n  \
    \  (for-each (lambda (c)\n                (if (> c 65)\n                  (sum\
    \ (+ c (ascii-char-code c)\n                         (ascii-char-code c)\n   \
    \                      (ascii-char-code c))))\n                (string-char c\
    \ s)))\n    sum))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"\
    abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\"\
    )\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\"\
    )\n;; 153", "  (let ((sum 0))\n    (for-each (lambda (c)\n                (if\
    \ (> c 65)\n                    (sum (+ c (char->integer c)\n                \
    \          (if (char->integer c)\n                              1\n          \
    \                    0))))\n                s)\n      sum))\n)\n\n;; Test\n;;\
    \ >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153", "  (+\n    (mapcar\
    \ #\"A\" s)\n    (mapcar #\"A\" (string-upcase s))\n  )\n)\n", "  (+\n    (map\
    \ char-code char s)\n    (filter char-upper char s)))\n\n;; Test\n;; >>> (digitSum\
    \ \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\"\
    )\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n\
    ;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Answer\n;; >>> (digitSum \"\
    \")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;;\
    \ 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n\
    ;; >>> (digitSum \"aAaaaXa\")\n;; 153\n", "  (+\n    (map char-code char s)\n\
    \    (filter char-upper char s)))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;;\
    \ >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>>\
    \ (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>>\
    \ (digitSum \"aAaaaXa\")\n;; 153\n", "  (+\n    (map char-code\n      (string-map\
    \ char-upcase s)\n      '(65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,\
    \ 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,\
    \ 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\
    \ 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128,\
    \ 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144,\
    \ 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160,\
    \ 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176,\
    \ 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192,\
    \ 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208,\
    \ 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224,\
    \ 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240,\
    \ 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255)\n\
    \    ))\n  ))\n)\n", "  (+\n    (mapcar #'(lambda (c) (if (> c 65) c))\n     \
    \ (string-to-list s))\n    0))\n\n;; Task\n;; Write a function that takes a string\
    \ as input and returns the sum of the lower characters only'\n;; ASCII codes.\n\
    ;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n\
    ;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>>\
    \ (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153", "  (let\
    \ ((sum 0))\n    (for-each (lambda (c) (if (> c 65) (sum (+ c (ascii-char c) )))\n\
    \          (string-ref s c))\n      sum))\n\n;; Task\n;; Write a function that\
    \ takes a string as input and returns the sum of the lower characters only'\n\
    ;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum\
    \ \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\"\
    )\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\"\
    )\n;; 153", "  (let ((sum 0))\n    (for-each (lambda (c)\n                (if\
    \ (> c 65)\n                  (+ sum (car c)))\n                )\n          \
    \    s)\n    sum))\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153", "  (+\n    (map (lambda\
    \ (c)\n          (+ (char->integer (string->char s c))\n             (char->integer\
    \ (string->char s c))))\n      (string->char s)))\n  0)\n\n;; Test\n;; >>> (digitSum\
    \ \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\"\
    )\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n\
    ;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n", "  (let ((sum 0))\n    (for-each\
    \ (lambda (c) (if (> c 65) (sum (+ c (char->integer c) ))))\n      s))\n)\n\n\
    ;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;;\
    \ >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>>\
    \ (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n", " \
    \ (+\n    (map-char\n      (lambda (c)\n        (if (> c 65)\n            (+ c\
    \ 32)\n            c))\n      s)\n    0))\n\n;; Task\n;; Write a function that\
    \ takes a string as input and returns the sum of the lower characters only'\n\
    ;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum\
    \ \"abAB\")\n;; 65\n;; >>> (digitSum \"abcCd\")\n;; 97\n;; >>> (digitSum \"helloE\"\
    )\n;; 101\n;; >>> (digitSum \"woArBld\")\n;; 65\n;; >>> (digitSum \"aAaaaXa\"\
    )\n;; 97", "  (+ (map char-code char s)\n       (filter char-upper-p char s)))\n\
    \n;; Task\n;; Write a function that takes a string as input and returns the sum\
    \ of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum\
    \ \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\"\
    )\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n\
    ;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153", "  (+\n    (map (lambda (c)\n\
    \          (+\n            (+\n              (+\n                (+\n        \
    \          (+\n                    (+\n                      (+\n            \
    \            (+\n                          (+\n                            (+\n\
    \                              (+\n                                (+\n      \
    \                            (+\n                                    (+\n    \
    \                                  (+\n                                      \
    \  (+\n                                          (+\n                        \
    \                    (+\n                                              (+\n  \
    \                                              (+\n                          \
    \                        (+\n                                                \
    \    (+\n                                                      (+\n          \
    \                                              (+\n                          \
    \                                (+\n                                        \
    \                    (+\n                                                    \
    \          (+\n                                                              \
    \  (+\n                                                                  (+\n\
    \                                                                    (+\n    \
    \                                                                  (+\n      \
    \                                                                  (+\n      \
    \                                                                    (+\n    \
    \                                                                        (+\n\
    \                                                                            \
    \  (+\n                                                                      \
    \          (+\n                                                              \
    \                      (+\n                                                  \
    \                                    (+\n                                    \
    \                                                    (+\n                    \
    \                                                                      (+\n  \
    \                                                                            \
    \               (+\n                                                         \
    \                                      (+\n                                  \
    \                                                              (+\n          \
    \                                                                            \
    \            (+\n                                                            \
    \                                        (+\n                                \
    \                                                                      (+\n  \
    \                                                                            \
    \                          (+\n                                              \
    \                                                            (+\n            \
    \                                                                            \
    \                    (+\n                                                    \
    \                                                         (+\n               \
    \                                                                            \
    \                   (+\n                                                     \
    \                                                           (+\n             \
    \                                                                            \
    \                         (+\n                                               \
    \                                                                     (+\n   \
    \                                                                            \
    \                                       (+\n                                 \
    \                                                                            \
    \           (+\n                                                             \
    \                                                             (+\n           \
    \                                                                            \
    \                                     (+\n                                   \
    \                                                                            \
    \               (+\n                                                         \
    \                                                                       (+\n \
    \                                                                            \
    \                                                     (+\n                   \
    \                                                                            \
    \                                      (+\n                                  \
    \                                                                            \
    \                         (+\n                                               \
    \                                                                            \
    \              (+\n                                                          \
    \                                                                            \
    \     (", "  (let* ([sum (0)])\n    (for-each (lambda (c) (if (> (char->integer\
    \ c) 64) (sum (+ (char->integer c) 1))))\n      s))\n)\n\n;; Test\n;; >>> (digitSum\
    \ \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\"\
    )\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n\
    ;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n", "  (+\n    (map (lambda (c)\n\
    \          (+ (char->integer (string->char c))\n             (char->integer (string->char\
    \ (string->char s) 1))))\n       (string->char s)))\n)\n\n;; Test\n;; >>> (digitSum\
    \ \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\"\
    )\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n\
    ;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n", "  (+\n    (map char-code char\
    \ s)\n    (filter char-upper char s)))\n\n;; Task\n;; Write a function that takes\
    \ a string as input and returns the sum of the lower characters only'\n;; ASCII\
    \ codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\"\
    )\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n\
    ;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n\
    ;; 153", "  (+\n    (map char-code char s)\n    (filter char-upper char s)))\n\
    \n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n\
    ;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>>\
    \ (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;;\
    \ Answer\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;;\
    \ >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>>\
    \ (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n", " \
    \ (+\n    (map-char\n      (lambda (c)\n        (if (> c 65)\n            (+ (char-code\
    \ c) (char-code (char-upcase c)))\n            0))\n      s)\n    0))\n\n;; Task\n\
    ;; Write a function that takes a string as input and returns the sum of the lower\
    \ characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;;\
    \ 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n\
    ;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;;\
    \ >>> (digitSum \"aAaaaXa\")\n;; 153", "  (let ((sum 0))\n    (for-each (lambda\
    \ (c) (if (> c 65) (sum (+ c (char->integer c) ))))\n      s))\n)\n\n;; Test\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n", "  (+\n    (mapcar\n\
    \      (lambda (c)\n        (+ (char->integer (string->char s c)) (char->integer\
    \ (string->char s c))))\n      (string->char s)))\n  0)\n\n;; Task\n;; Write a\
    \ function that takes a string as input and returns the sum of the lower characters\
    \ only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum\
    \ \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\"\
    )\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\"\
    )\n;; 153", "  (+\n    (mapcar #'(lambda (c) (if (> c 65) c))\n      (string-upper-case\
    \ s))\n    0))\n\n;; Task\n;; Write a function that takes a string as input and\
    \ returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153", "  (let ((sum 0))\n\
    \    (for-each (lambda (c) (if (> (char->integer c) 64) (sum (+ (char->integer\
    \ c) 1))))\n      s))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum\
    \ \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\"\
    )\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\"\
    )\n;; 153\n", "  (+\n    (map (lambda (c) (char-code c))\n      (string-to-list\
    \ s))\n    (map (lambda (c) (char-code c))\n      (string-to-list \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ))\n  ))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n\
    ;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n\
    ;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153",
  "  (+\n    (map char-code char s)\n    (filter char-upper char s)))\n\n;; Task\n\
    ;; Write a function that takes a string as input and returns the sum of the lower\
    \ characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;;\
    \ 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n\
    ;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;;\
    \ >>> (digitSum \"aAaaaXa\")\n;; 153", "  (let ((sum 0))\n    (for-each (lambda\
    \ (c)\n                (if (> (char->integer c) 65)\n                  (sum (+\
    \ (char->integer c) (char->integer (char->integer c) - 64))))\n              \
    \  s)\n      (+ sum 1)))\n)\n\n;; Task\n;; Write a function that takes a string\
    \ as input and returns the sum of the lower characters only'\n;; ASCII codes.\n\
    ;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n\
    ;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>>\
    \ (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153", "  (+\n\
    \    (map char-upper-digit s)\n    (map char-upper-digit (substring s 1))))\n\n\
    ;; Task\n;; Write a function that takes a string as input and returns the sum\
    \ of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum\
    \ \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\"\
    )\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n\
    ;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153", "  (+\n    (map char-code char\
    \ s)\n    (filter char-upper char s)))\n\n;; Test\n;; >>> (digitSum \"\")\n;;\
    \ 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n\
    ;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;;\
    \ >>> (digitSum \"aAaaaXa\")\n;; 153\n", "  (+ (map char-upper (string-to-list\
    \ s)) 0))\n\n;; Task\n;; Write a function that takes a string as input and returns\
    \ the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>>\
    \ (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153", "  (+\n    (map char-code\
    \ char s)\n    (filter char-upper char s)))\n\n;; Test\n;; >>> (digitSum \"\"\
    )\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n\
    ;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;;\
    \ >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Solution\n;; >>> (digitSum \"\")\n\
    ;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n\
    ;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;;\
    \ >>> (digitSum \"aAaaaXa\")\n;; 153", "  (+\n    (map char-code char s)\n   \
    \ (filter char-upper char s)))\n\n;; Task\n;; Write a function that takes a string\
    \ as input and returns the sum of the lower characters only'\n;; ASCII codes.\n\
    ;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n\
    ;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>>\
    \ (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153", "  (+\n\
    \    (map char-code char s)\n    (filter char-upper char s)))\n\n;; Test\n;; >>>\
    \ (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n", "  (let ((sum 0))\n\
    \    (for-each (lambda (c) (if (> (char->integer c) 64) (sum (+ (char->integer\
    \ c) 1))))\n      s))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum\
    \ \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\"\
    )\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\"\
    )\n;; 153\n\n;; Answer\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\"\
    )\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n\
    ;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n\
    ;; 153\n", "  (+\n    (map (lambda (c)\n          (+\n            (+\n       \
    \       (+\n                (+\n                  (+\n                    (+\n\
    \                      (+\n                        (+\n                      \
    \    (+\n                            (+\n                              (+\n  \
    \                              (+\n                                  (+\n    \
    \                                (+\n                                      (+\n\
    \                                        (+\n                                \
    \          (+\n                                            (+\n              \
    \                                (+\n                                        \
    \        (+\n                                                  (+\n          \
    \                                          (+\n                              \
    \                        (+\n                                                \
    \        (+\n                                                          (+\n  \
    \                                                          (+\n              \
    \                                                (+\n                        \
    \                                        (+\n                                \
    \                                  (+\n                                      \
    \                              (+\n                                          \
    \                            (+\n                                            \
    \                            (+\n                                            \
    \                              (+\n                                          \
    \                                  (+\n                                      \
    \                                        (+\n                                \
    \                                                (+\n                        \
    \                                                            (+\n            \
    \                                                                          (+\n\
    \                                                                            \
    \            (+\n                                                            \
    \                              (+\n                                          \
    \                                                   (+\n                     \
    \                                                                          (+\n\
    \                                                                            \
    \                    (+\n                                                    \
    \                                              (+\n                          \
    \                                                                          (+\n\
    \                                                                            \
    \                          (+\n                                              \
    \                                                          (+\n              \
    \                                                                            \
    \                (+\n                                                        \
    \                                                    (+\n                    \
    \                                                                            \
    \             (+\n                                                           \
    \                                                   (+\n                     \
    \                                                                            \
    \               (+\n                                                         \
    \                                                         (+\n               \
    \                                                                            \
    \                         (+\n                                               \
    \                                                                       (+\n \
    \                                                                            \
    \                                           (+\n                             \
    \                                                                            \
    \                 (+\n                                                       \
    \                                                                     (+\n   \
    \                                                                            \
    \                                               (+\n                         \
    \                                                                            \
    \                           (+\n                                             \
    \                                                                            \
    \         (+\n                                                               \
    \                                                                      (+\n  \
    \                                                                            \
    \                                                         (+\n               \
    \                                                                            \
    \                                              (+\n                          \
    \                                                                            \
    \                                     (", "  (let* ([sum (0)])\n    (for-each\
    \ (lambda (c)\n                (if (> c 65)\n                    (sum (+ (char->integer\
    \ c) (char->integer (char->integer c) - 64))))\n                (if (< c 91)\n\
    \                    (sum (+ (char->integer c) (char->integer (char->integer c)\
    \ - 96))))\n                (if (< c 123)\n                    (sum (+ (char->integer\
    \ c) (char->integer (char->integer c) - 128))))\n                (if (< c 192)\n\
    \                    (sum (+ (char->integer c) (char->integer (char->integer c)\
    \ - 192))))\n                (if (< c 223)\n                    (sum (+ (char->integer\
    \ c) (char->integer (char->integer c) - 224))))\n                (if (< c 240)\n\
    \                    (sum (+ (char->integer c) (char->integer (char->integer c)\
    \ - 240))))\n                (if (< c 248)\n                    (sum (+ (char->integer\
    \ c) (char->integer (char->integer c) - 248))))\n                (if (< c 252)\n\
    \                    (sum (+ (char->integer c) (char->integer (char->integer c)\
    \ - 252))))\n                (if (< c 253)\n                    (sum (+ (char->integer\
    \ c) (char->integer (char->integer c) - 253))))\n                (if (< c 254)\n\
    \                    (sum (+ (char->integer c) (char->integer (char->integer c)\
    \ - 254))))\n                (if (< c 255)\n                    (sum (+ (char->integer\
    \ c) (char->integer (char->integer c) - 255))))\n                (if (< c 256)\n\
    \                    (sum (+ (char->integer c) (char->integer (char->integer c)\
    \ - 256))))\n                (if (< c 257)\n                    (sum (+ (char->integer\
    \ c) (char->integer (char->integer c) - 257))))\n                (if (< c 258)\n\
    \                    (sum (+ (char->integer c) (char->integer (char->integer c)\
    \ - 258))))\n                (if (< c 259)\n                    (sum (+ (char->integer\
    \ c) (char->integer (char->integer c) - 259))))\n                (if (< c 260)\n\
    \                    (", "  (+\n    (string-map\n      (lambda (c) (string-ci-p?\
    \ c))\n      (string-upper-case s))\n    0))\n\n;; Test\n;; >>> (digitSum \"\"\
    )\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n\
    ;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;;\
    \ >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Answer\n;; >>> (digitSum \"\")\n;;\
    \ 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n\
    ;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;;\
    \ >>> (digitSum \"aAaaaXa\")\n;; 153\n", "  (+\n    (map (lambda (c) (char-code\
    \ c))\n      (string-to-list s))\n    0))\n\n;; Task\n;; Write a function that\
    \ takes a string as input and returns the sum of the lower characters only'\n\
    ;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum\
    \ \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\"\
    )\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\"\
    )\n;; 153", "  (+\n    (map (lambda (c)\n          (+ (char->integer (string->char\
    \ c))\n             (char->integer (string->char (substring s 1 1))))\n      \
    \   (string->char s)))\n    0))\n\n;; Task\n;; Write a function that takes a string\
    \ as input and returns the sum of the lower characters only'\n;; ASCII codes.\n\
    ;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n\
    ;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>>\
    \ (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153", "  (+\n\
    \    (map (lambda (c)\n          (+ (char->integer (string->char s c))\n     \
    \        (char->integer (string->char s (string->char s c) - 1)))))\n    (string->char\
    \ s)))\n\n;; Task\n;; Write a function that takes a string as input and returns\
    \ the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>>\
    \ (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153", "  (let* ([sum (0)])\n\
    \    (for-each (lambda (c) (if (> (char->integer c) 64) (sum (+ (char->integer\
    \ c) 1))))\n      s))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum\
    \ \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\"\
    )\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\"\
    )\n;; 153\n", "  (+\n    (map char-code char s)\n    (filter char-upper char s)))\n\
    \n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n\
    ;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>>\
    \ (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n", " \
    \ (let ((sum 0))\n    (for-each (lambda (c) (if (> (char->integer c) 64) (sum\
    \ (+ (char->integer c) 1))))\n      s))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n\
    ;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n\
    ;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;;\
    \ >>> (digitSum \"aAaaaXa\")\n;; 153\n", "  (let ((sum 0))\n    (for-each (lambda\
    \ (c) (if (> c 65) (sum (+ c (char->integer c) ))))\n      s))\n)\n\n;; Test\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n", "  (+\n    (map\
    \ (lambda (c)\n          (+ (char->integer (string->char c))\n             (char->integer\
    \ (string->char (string->char s) 1))))\n       (string->char s)))\n)\n\n;; Test\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n", "  (let ((sum 0))\n\
    \    (for-each (lambda (c) (if (> c 65) (sum (+ c (if (< c 90) 0 1)))) s)\n  \
    \    (string-to-number c)))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>>\
    \ (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum\
    \ \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum\
    \ \"aAaaaXa\")\n;; 153\n", "  (+\n    (map char-code char s)\n    (filter char-upper\
    \ char s)))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\"\
    )\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n\
    ;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n\
    ;; 153\n\n;; Answer\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n\
    ;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n\
    ;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n",
  "  (+\n    (map (lambda (c)\n          (+ (char->integer (string->char s c))\n \
    \            (char->integer (string->char s c))))\n       (string->char s)))\n\
    )\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n\
    ;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>>\
    \ (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n", " \
    \ (+\n    (map char-code char s)\n    (filter char-upper char s)))\n\n;; Test\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n", "  (let ((sum 0))\n\
    \    (for-each (lambda (c) (if (> c 65) (sum (+ c (char->integer c) (char->integer\
    \ (char->integer c) - 64))))\n                                  (if (< c 91) (sum\
    \ (+ c (char->integer c) (char->integer (char->integer c) - 96))))\n         \
    \                         (if (< c 123) (sum (+ c (char->integer c) (char->integer\
    \ (char->integer c) - 128))))\n                                  (if (< c 192)\
    \ (sum (+ c (char->integer c) (char->integer (char->integer c) - 192))))\n   \
    \                               (if (< c 255) (sum (+ c (char->integer c) (char->integer\
    \ (char->integer c) - 256))))\n                                  (if (< c 256)\
    \ (sum (+ c (char->integer c) (char->integer (char->integer c) - 256))))\n   \
    \                               (if (< c 256) (sum (+ c (char->integer c) (char->integer\
    \ (char->integer c) - 256))))\n                                  (if (< c 256)\
    \ (sum (+ c (char->integer c) (char->integer (char->integer c) - 256))))\n   \
    \                               (if (< c 256) (sum (+ c (char->integer c) (char->integer\
    \ (char->integer c) - 256))))\n                                  (if (< c 256)\
    \ (sum (+ c (char->integer c) (char->integer (char->integer c) - 256))))\n   \
    \                               (if (< c 256) (sum (+ c (char->integer c) (char->integer\
    \ (char->integer c) - 256))))\n                                  (if (< c 256)\
    \ (sum (+ c (char->integer c) (char->integer (char->integer c) - 256))))\n   \
    \                               (if (< c 256) (sum (+ c (char->integer c) (char->integer\
    \ (char->integer c) - 256))))\n                                  (if (< c 256)\
    \ (sum (+ c (char->integer c) (char->integer (char->integer c) - 256))))\n   \
    \                               (if (< c 256) (sum (+ c (char->integer c) (char->integer\
    \ (char->integer c) - 256))))\n                                ", "  (let ((sum\
    \ 0))\n    (for-each (lambda (c) (if (> c 65) (sum (+ c (if (< c 90) 65))) sum))\
    \ s)\n    sum))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"\
    abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\"\
    )\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\"\
    )\n;; 153\n\n;; Answer\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\"\
    )\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n\
    ;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n\
    ;; 153\n", "  (+\n    (map char-code char s)\n    (filter char-upper char s)))\n\
    \n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n\
    ;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>>\
    \ (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n", " \
    \ (+\n    (map char-code char s)\n    (filter char-upper char s)))\n\n;; Test\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n", "  (+ (map char-code\
    \ char s)\n       (filter char-upper char s)))\n\n;; Test\n;; >>> (digitSum \"\
    \")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;;\
    \ 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n\
    ;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Answer\n;; >>> (digitSum \"\")\n;;\
    \ 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n\
    ;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;;\
    \ >>> (digitSum \"aAaaaXa\")\n;; 153\n", "  (+ (map (lambda (c) (char-code c))\
    \ (string-to-list s)) 0))\n\n;; Task\n;; Write a function that takes a string\
    \ as input and returns the sum of the lower characters only'\n;; ASCII codes.\n\
    ;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n\
    ;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>>\
    \ (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153", "  (let\
    \ ((sum 0))\n    (for-each (lambda (c) (if (> c 65) (sum (+ c (char->integer c)\
    \ ))))\n      s))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum\
    \ \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\"\
    )\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\"\
    )\n;; 153\n", "  (+\n    (map (lambda (c) (char-code c))\n      (string-to-list\
    \ s))\n    0))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\"\
    )\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n\
    ;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n\
    ;; 153\n\n;; Answer\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n\
    ;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n\
    ;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n",
  "  (let ((sum 0))\n    (for-each (lambda (c) (if (> c 65) (sum (+ c (char->integer\
    \ c) ))))\n      s))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum\
    \ \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\"\
    )\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\"\
    )\n;; 153\n", "  (let ((sum 0))\n    (for-each (lambda (c) (if (> c 65) (sum (+\
    \ c (char->integer c) ))))\n      s))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n\
    ;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n\
    ;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;;\
    \ >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Answer\n;; >>> (digitSum \"\")\n;;\
    \ 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n\
    ;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;;\
    \ >>> (digitSum \"aAaaaXa\")\n;; 153\n", "  (+\n    (mapcar\n      (lambda (c)\n\
    \        (+ (char->integer (string-upcase c)) 0))\n      (string-upcase s)))\n\
    \  0)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;;\
    \ 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n\
    ;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\
    \n;; Solution\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n\
    ;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>>\
    \ (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153", "  (let\
    \ ((sum 0))\n    (for-each (lambda (c) (if (> c 65) (sum (+ c (char->integer c)\
    \ ))))\n      s))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum\
    \ \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\"\
    )\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\"\
    )\n;; 153\n", "  (+\n    (map (lambda (c) (char-code c))\n      (string-to-list\
    \ s))\n    0))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\"\
    )\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n\
    ;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n\
    ;; 153\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
