name: HumanEval_161_solve
language: rkt
prompt: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse\
  \ its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n\
  ;; If the string contains no letters, reverse the string.\n;; The function should\
  \ return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\
  \n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define\
  \ (solve s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
  \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
  \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
  \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"\
  #aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
  \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\"\
  )\n))\n\n(test-humaneval)"
completions: ["  (cond\n    ((string? s)\n      (let ((s1 (string-copy s)))\n    \
    \    (string-map (lambda (c)\n                     (cond\n                   \
    \    ((char? c)\n                         (string-set! c\n                   \
    \        (if (char-ci? c)\n                               (char-ci-upcase c)\n\
    \                               (char-ci-downcase c))))\n                    \
    \   (else\n                         (string-set! c c))))\n          s1)))\n  \
    \  (else\n      (string-copy s))))\n", "  (if (string? s)\n    (if (string-length\
    \ s)\n      (let ((i (string-index s #\\space)))\n        (if (string? s[i])\n\
    \          (string-set! s i (string-set! s i (string-downcase s[i])))\n      \
    \    (string-set! s i (string-upcase s[i])))\n        (string-set! s (string-join\
    \ \" \" s))))\n    (string-downcase s)))\n", "  (if (string? s)\n    (if (string-length\
    \ s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set!\
    \ s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set!\
    \ s #\\a)))\n", "  (if (string? s)\n    (string-set! s\n      (if (string-ci?\
    \ s)\n        (string-map!\n          (lambda (c)\n            (if (char? c)\n\
    \              (string-ci? c)\n              (string-ci? c)\n              (string-ci?\
    \ c)))\n          s)\n        (string-ci? s)))\n    (string-ci? s)))\n", "  (if\
    \ (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\space)))\n\
    \        (if (string-length s)\n          (if (string-char s i)\n            (string-set!\
    \ s i #\\space)\n            (string-set! s i (string-char-upcase s i)))))\n \
    \     (string-set! s #\\space))\n    (string-set! s #\\space)))\n", "  (cond\n\
    \    ((null? s) \"\")\n    ((char? s) (if (string-ci? s)\n      (string-ci-upcase\
    \ s)\n      (string-ci-downcase s)))\n    (string-upcase s)\n  ))\n", "  (cond\n\
    \    ((string? s)\n      (let ((s1 (string-copy s)))\n        (string-map (lambda\
    \ (c)\n          (cond\n            ((char? c)\n              (string-set! s1\
    \ (string-map (lambda (c2) (if (char? c2) (char-upcase c2) (char-downcase c2)))\
    \ c)))\n            (else\n              (string-set! s1 (string-set! s1 (string-map\
    \ (lambda (c2) (if (char? c2) (char-downcase c2) (char-upcase c2))) c))))\n  \
    \        c))\n        s1)))\n    (else\n      (string-set! s (string-map (lambda\
    \ (c) (if (char? c) (char-upcase c) (char-downcase c))) s))))\n", "  (if (string?\
    \ s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n    \
    \    (if (string-length s)\n          (if (eq? i (string-length s))\n        \
    \    (string-set! s i)\n            (string-set! s i (string-map (lambda (x) (if\
    \ (eq? x #\\a) (string-upcase x) (string-downcase x))) s)))))\n      (string-set!\
    \ s (string-map (lambda (x) (if (eq? x #\\a) (string-downcase x) (string-upcase\
    \ x))) s)))\n    (string-set! s (string-map (lambda (x) (if (eq? x #\\a) (string-downcase\
    \ x) (string-upcase x))) s)))\n  s)\n)\n", "  (cond\n    [(string? s) (string-set!\
    \ s (string-map (lambda (c) (if-letter c (if-lower-case c (if-upper-case c (string-ref\
    \ s (string-length s) - 1)))) (string-ref s 0))) (string-copy s))]\n    [else\
    \ (string-set! s (string-copy s))]))\n", "  (if (string? s)\n    (if (string-length\
    \ s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n\
    \          (if (eq? i 0)\n            (string-set! s i (string-set! s i (string-set!\
    \ s i #\\A)))\n            (string-set! s i (string-set! s i (string-set! s i\
    \ #\\a))))\n          (string-set! s i (string-set! s i (string-set! s i #\\A))))\n\
    \        (string-set! s i (string-set! s i (string-set! s i #\\a))))\n      (string-set!\
    \ s i (string-set! s i (string-set! s i #\\A))))\n      (string-set! s i (string-set!\
    \ s i (string-set! s i #\\a))))\n      (string-set! s i (string-set! s i (string-set!\
    \ s i #\\A))))\n      (string-set! s i (string-set! s i (string-set! s i #\\a))))\n\
    \      (string-set! s i (string-set! s i (string-set! s i #\\A))))\n      (string-set!\
    \ s i (string-set! s i (string-set! s i #\\a))))\n      (string-set! s i (string-set!\
    \ s i (string-set! s i #\\A))))\n      (string-set! s i (string-set! s i (string-set!\
    \ s i #\\a))))\n      (string-set! s i (string-set! s i (string-set! s i #\\A))))\n\
    \      (string-set! s i (string-set! s i (string-set! s i #\\a))))\n      (string-set!\
    \ s i (string-set! s i (string-set! s i #\\A))))\n      (string-set! s i (string-set!\
    \ s i (string-set! s i #\\a))))\n      (string-set! s i (string-set! s i (string-set!\
    \ s i #\\A))))", "  (if (string? s)\n    (if (string-length s)\n      (let ((i\
    \ (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (-\
    \ (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\\
    a)))\n", "  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index\
    \ s #\\a)))\n        (if (<= i 0)\n          (string-set! s i (- (string-length\
    \ s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\a)))\n", "  (cond\n\
    \    ((string? s)\n      (let ((s (string->list s)))\n        (if (null? s)\n\
    \          (string-copy s)\n          (let ((s (string->list s)))\n          \
    \  (if (null? s)\n              (string-copy s)\n              (let ((s (string->list\
    \ s)))\n                (if (null? s)\n                  (string-copy s)\n   \
    \               (let ((s (string->list s)))\n                    (if (null? s)\n\
    \                      (string-copy s)\n                      (let ((s (string->list\
    \ s)))\n                        (if (null? s)\n                          (string-copy\
    \ s)\n                          (let ((s (string->list s)))\n                \
    \            (if (null? s)\n                              (string-copy s)\n  \
    \                            (let ((s (string->list s)))\n                   \
    \             (if (null? s)\n                                  (string-copy s)\n\
    \                                  (let ((s (string->list s)))\n             \
    \                       (if (null? s)\n                                      (string-copy\
    \ s)\n                                      (let ((s (string->list s)))\n    \
    \                                    (if (null? s)\n                         \
    \                 (string-copy s)\n                                          (let\
    \ ((s (string->list s)))\n                                            (if (null?\
    \ s)\n                                              (string-copy s)\n        \
    \                                      (let ((s (string->list s)))\n         \
    \                                       (if (null? s)\n                      \
    \                            (string-copy s)\n                               \
    \                   (let ((s (string->list s)))\n                            \
    \                        (if (null? s)\n                                     \
    \                 (string-copy s)\n                                          \
    \            (let ((s (string->list s)))\n                                   \
    \                     (if (null? s)\n                                        \
    \                  (string-copy s)\n                                         \
    \                 (let ((s (string->list s)))\n                              \
    \                              (if (null? s)\n                               \
    \                               (string-copy s)\n                            \
    \                                  (let ((s", "  (if (string? s)\n    (if (string-length\
    \ s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set!\
    \ s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set!\
    \ s #\\a)))\n", "  (if (string? s)\n    (if (string-length s)\n      (let ((i\
    \ (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (-\
    \ (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\\
    a)))\n", "  (cond\n    ((null? s) \"\")\n    ((char? s) (string-set! s (string-map\
    \ (lambda (x) (if (char? x) (string-ref x (string-length x) - 1) (string-ref x\
    \ 0))) s))\n    (else (string-set! s (string-map (lambda (x) (if (char? x) (string-ref\
    \ x (string-length x) - 1) (string-ref x 0))) s))))\n)\n", "  (if (string? s)\n\
    \    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if\
    \ (string-length s)\n          (if (eq? i 0)\n            (string-set! s #\\A)\n\
    \            (string-set! s #\\a))\n          (string-set! s #\\A)\n         \
    \ (string-set! s #\\a))))\n    (string-set! s #\\A)\n    (string-set! s #\\a)))\n",
  "  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\\
    space)))\n        (if (string-length s)\n          (if (string-length s)\n   \
    \         (let ((j (string-index s #\\space)))\n              (if (string-length\
    \ s)\n                (let ((k (string-index s #\\space)))\n                 \
    \ (if (string-length s)\n                    (let ((l (string-index s #\\space)))\n\
    \                      (if (string-length s)\n                        (let ((m\
    \ (string-index s #\\space)))\n                          (if (string-length s)\n\
    \                            (let ((n (string-index s #\\space)))\n          \
    \                    (if (string-length s)\n                                (let\
    \ ((o (string-index s #\\space)))\n                                  (if (string-length\
    \ s)\n                                    (let ((p (string-index s #\\space)))\n\
    \                                      (if (string-length s)\n               \
    \                         (let ((q (string-index s #\\space)))\n             \
    \                             (if (string-length s)\n                        \
    \                    (let ((r (string-index s #\\space)))\n                  \
    \                            (if (string-length s)\n                         \
    \                       (let ((s (string-index s #\\space)))\n               \
    \                                   (if (string-length s)\n                  \
    \                                  (let ((t (string-index s #\\space)))\n    \
    \                                                  (if (string-length s)\n   \
    \                                                     (let ((u (string-index s\
    \ #\\space)))\n                                                          (if (string-length\
    \ s)\n                                                            (let ((v (string-index\
    \ s #\\space)))\n                                                            \
    \  (if (string-length s)\n                                                   \
    \             (let ((w (string-index s #\\space)))\n                         \
    \                                         (if (string-length s)\n            \
    \                                                        (let ((x (string-index\
    \ s #\\space)))\n                                                            \
    \          (if (string-length s)\n                                           \
    \                             (let ((y (string-", "  (if (string? s)\n    (if\
    \ (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (<= i\
    \ 0)\n          (string-set! s i (string-set! s i #\\A))\n          (string-set!\
    \ s i (string-set! s i #\\a))))\n      (string-set! s #\\A))\n    (string-set!\
    \ s #\\a)))\n", "  (if (string? s)\n    (if (string-length s)\n      (let ((i\
    \ (string-index s #\\space)))\n        (if (string-length s)\n          (if (char=?\
    \ #\"a\" s[i])\n            (string-set! s i #\"A\")\n            (string-set!\
    \ s i #\"a\"))\n          (string-set! s i #\"#\")\n          (string-set! s i\
    \ #\"@\"))\n          (string-set! s i #\"#\"))\n          (string-set! s i #\"\
    @\"))\n          (string-set! s i #\"#\"))\n          (string-set! s i #\"#\"\
    ))\n          (string-set! s i #\"#\"))\n          (string-set! s i #\"#\"))\n\
    \          (string-set! s i #\"#\"))\n          (string-set! s i #\"#\"))\n  \
    \        (string-set! s i #\"#\"))\n          (string-set! s i #\"#\"))\n    \
    \      (string-set! s i #\"#\"))\n          (string-set! s i #\"#\"))\n      \
    \    (string-set! s i #\"#\"))\n          (string-set! s i #\"#\"))\n        \
    \  (string-set! s i #\"#\"))\n          (string-set! s i #\"#\"))\n          (string-set!\
    \ s i #\"#\"))\n          (string-set! s i #\"#\"))\n          (string-set! s\
    \ i #\"#\"))\n          (string-set! s i #\"#\"))\n          (string-set! s i\
    \ #\"#\"))\n          (string-set! s i #\"#\"))\n          (string-set! s i #\"\
    #\"))\n          (string-set! s i #\"#\"))\n          (string-set! s i #\"#\"\
    ))\n          (string-set! s i #\"#\"))\n          (string-set! s i #\"#\"))\n\
    \          (string-set! s i #\"#\"))\n          (string-set! s i #\"#\"))\n  \
    \        (string-set! s i #\"#\"))\n          (string-set! s i #\"", "  (if (string?\
    \ s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n    \
    \    (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n     \
    \   (string-set! s i (- i 1))))\n    (string-set! s #\\A)))\n", "  (if (string?\
    \ s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n    \
    \    (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n     \
    \   (string-set! s i i)))\n    (string-set! s #\\a)))\n", "  (if (string? s)\n\
    \    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if\
    \ (string-length s)\n          (if (eqv? (string-ref s i) #\\a)\n            (string-set!\
    \ s i #\\A)\n            (string-set! s i #\\a))\n          (string-set! s i #\\\
    A)))))\n  (string-set! s #\\a)))\n", "  (if (string? s)\n    (if (string-length\
    \ s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n\
    \          (if (eqv? (string-ref s i) #\\a)\n            (string-set! s i #\\\
    A)\n            (string-set! s i #\\a))\n          (string-set! s i #\\A))\n \
    \       (string-set! s i #\\a)))\n    (string-set! s #\\A)))\n", "  (if (string?\
    \ s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n    \
    \    (if (string-length s)\n          (if (eq? i 0)\n            (string-set!\
    \ s #\\A)\n            (string-set! s #\\a))\n          (string-set! s #\\A)))\n\
    \        (string-set! s #\\a)))\n    (string-set! s #\\a)))\n", "  (if (string?\
    \ s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n    \
    \    (if (string-length s)\n          (if (eq? i 0)\n            (string-set!\
    \ s i (string-set! s i (string-set! s i #\\A)))\n            (string-set! s i\
    \ (string-set! s i (string-set! s i #\\a)))\n            (string-set! s i (string-set!\
    \ s i #\\A)))\n          (string-set! s i (string-set! s i #\\a)))\n        (string-set!\
    \ s i #\\a)))\n    (string-set! s #\\a)))\n", "  (if (string? s)\n    (if (string-length\
    \ s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set!\
    \ s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set!\
    \ s #\\a)))\n", "  (if (string? s)\n    (if (string-length s)\n      (let ((i\
    \ (string-index s #\\a)))\n        (if (string-length s)\n          (if (eq? i\
    \ (string-length s))\n            (string-set! s i)\n            (string-set!\
    \ s i (string-map (lambda (x) (if (eq? x #\\a) #\\A (if (eq? x #\\a) #\\a (if\
    \ (eq? x #\\a) #\\a)))) s))\n          (string-set! s i (string-map (lambda (x)\
    \ (if (eq? x #\\a) #\\A (if (eq? x #\\a) #\\a (if (eq? x #\\a) #\\a)))) s))\n\
    \          (string-set! s i (string-map (lambda (x) (if (eq? x #\\a) #\\A (if\
    \ (eq? x #\\a) #\\a (if (eq? x #\\a) #\\a)))) s))\n          (string-set! s i\
    \ (string-map (lambda (x) (if (eq? x #\\a) #\\A (if (eq? x #\\a) #\\a (if (eq?\
    \ x #\\a) #\\a)))) s))\n          (string-set! s i (string-map (lambda (x) (if\
    \ (eq? x #\\a) #\\A (if (eq? x #\\a) #\\a (if (eq? x #\\a) #\\a)))) s))\n    \
    \      (string-set! s i (string-map (lambda (x) (if (eq? x #\\a) #\\A (if (eq?\
    \ x #\\a) #\\a (if (eq? x #\\a) #\\a)))) s))\n          (string-set! s i (string-map\
    \ (lambda (x) (if (eq? x #\\a) #\\A (if (eq? x #\\a) #\\a (if (eq? x #\\a) #\\\
    a)))) s))\n          (string-set! s i (string-map (lambda (x) (if (eq? x #", " \
    \ (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\\
    a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n\
    \        (string-set! s i (- i 1))))\n    (string-set! s #\\A)))\n", "  (cond\n\
    \    ((null? s) \"\")\n    ((char? s) (if (char-ci? s) (char-ci? s) (char-ci?\
    \ s)))\n    (else (string-ci? s) (string-ci? s))\n  ))\n", "  (if (string? s)\n\
    \    (if (string-length s)\n      (let ((i (string-index s #\\space)))\n     \
    \   (if (string? i)\n          (string-set! i (string-map (lambda (x) (if (char?\
    \ x) (string-ref x #\\space) (string-ref x #\\space))) s))\n          (string-set!\
    \ s (string-map (lambda (x) (if (char? x) (string-ref x #\\space) (string-ref\
    \ x #\\space))) s))))\n      (string-set! s (string-map (lambda (x) (if (char?\
    \ x) (string-ref x #\\space) (string-ref x #\\space))) s))))\n  \"\")\n)\n", " \
    \ (cond\n    [(string? s) (string-set! s (string-map (lambda (x) (if (char? x)\
    \ (string-ref x (if (char? x) (string-upcase x) (string-downcase x)))) (string-ref\
    \ s (if (char? s) (string-upcase s) (string-downcase s)))) s)])\n    [else (solve\
    \ (string-append (string-split s \"\") (string-join \"\") \"\"))]))\n", "  (if\
    \ (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n\
    \        (if (string-length s)\n          (if (eq? i (string-length s))\n    \
    \        (string-set! s i)\n            (string-set! s i (string-map (lambda (x)\
    \ (if (eq? x #\\a) (string-upcase x) (string-downcase x))) s)))\n          (string-set!\
    \ s i (string-map (lambda (x) (if (eq? x #\\a) (string-downcase x) (string-upcase\
    \ x))) s)))\n        (string-set! s i)))\n    (string-set! s #\\a)))\n", "  (cond\n\
    \    ((string? s)\n      (let ((s1 (string-copy s)))\n        (let ((s2 (string-map\
    \ (lambda (x)\n                               (cond\n                        \
    \         ((char? x)\n                                  (string-set! x (string-upcase\
    \ (string-downcase x)))\n                                 )\n                \
    \                 (else\n                                  (string-set! x x)\n\
    \                                 )\n                                )\n     \
    \                           s1)\n                               s2)))\n      \
    \    (string-set! s s2)))\n      (else\n        (string-set! s (string-upcase\
    \ (string-downcase s))))))\n)\n", "  (if (string? s)\n    (if (string-length s)\n\
    \      (let ((i (string-index s #\\space)))\n        (if (< i 0)\n          (string-set!\
    \ s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set!\
    \ s #\\space)))\n", "  (if (string? s)\n    (if (string-length s)\n      (let\
    \ ((i (string-index s #\\a)))\n        (if (string-length s)\n          (if (eq?\
    \ i 0)\n            (string-set! s #\\A)\n            (string-set! s #\\a))\n\
    \          (string-set! s #\\A)\n          (string-set! s #\\a)))\n        (string-set!\
    \ s #\\a)))\n    (string-set! s #\\a)))\n", "  (if (string? s)\n    (if (string-length\
    \ s)\n      (let ((i (string-index s #\\space)))\n        (if (string? s[i])\n\
    \          (let ((c (string-ref s i)))\n            (if (char-alphabetic? c)\n\
    \              (string-set! s i (char-upcase c))\n              (string-set! s\
    \ i (char-downcase c)))))\n          (string-set! s i (char-upcase (string-ref\
    \ s i))))\n        (string-set! s i (char-downcase (string-ref s i))))\n     \
    \ (string-set! s (string-length s) #\\space))\n    (string-set! s (string-length\
    \ s) #\\space)))\n", "  (if (string? s)\n    (if (string-length s)\n      (let\
    \ ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i\
    \ (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s\
    \ #\\a)))\n", "  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index\
    \ s #\\a)))\n        (if (string-length s)\n          (if (eqv? (string-ref s\
    \ i) #\\a)\n            (string-set! s i #\\A)\n            (string-set! s i #\\\
    a))\n          (string-set! s i #\\A)))\n        (string-set! s i #\\a)))\n  \
    \  (string-set! s #\\A)))\n", "  (if (string? s)\n    (if (string-length s)\n\
    \      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set!\
    \ s i (- (string-length s) i)))\n        (string-set! s i (- i 1))))\n    (string-set!\
    \ s #\\A)))\n", "  (if (string? s)\n    (if (string-length s)\n      (let ((i\
    \ (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (-\
    \ (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\\
    A)))\n", "  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index\
    \ s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length\
    \ s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\a)))\n", "  (if\
    \ (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\space)))\n\
    \        (if (string? i)\n          (let ((j (string-index s #\\space)))\n   \
    \         (if (string? j)\n              (let ((k (string-index s #\\space)))\n\
    \                (if (string? k)\n                  (let ((l (string-index s #\\\
    space)))\n                    (if (string? l)\n                      (let ((m\
    \ (string-index s #\\space)))\n                        (if (string? m)\n     \
    \                     (let ((n (string-index s #\\space)))\n                 \
    \           (if (string? n)\n                              (let ((o (string-index\
    \ s #\\space)))\n                                (if (string? o)\n           \
    \                       (let ((p (string-index s #\\space)))\n               \
    \                     (if (string? p)\n                                      (let\
    \ ((q (string-index s #\\space)))\n                                        (if\
    \ (string? q)\n                                          (let ((r (string-index\
    \ s #\\space)))\n                                            (if (string? r)\n\
    \                                              (let ((s (string-index s #\\space)))\n\
    \                                                (if (string? s)\n           \
    \                                       (let ((t (string-index s #\\space)))\n\
    \                                                    (if (string? t)\n       \
    \                                               (let ((u (string-index s #\\space)))\n\
    \                                                        (if (string? u)\n   \
    \                                                       (let ((v (string-index\
    \ s #\\space)))\n                                                            (if\
    \ (string? v)\n                                                              (let\
    \ ((w (string-index s #\\space)))\n                                          \
    \                      (if (string? w)\n                                     \
    \                             (let ((x (string-index s #\\space)))\n         \
    \                                                           (if (string? x)\n\
    \                                                                      (let ((y\
    \ (string-index s #\\space)))\n                                              \
    \                          (if (string? y)\n                                 \
    \                                         (let ((z (", "  (cond\n    [(string?\
    \ s) (string-set! s (string-map (lambda (x) (if (char? x) (string-ref x (if (char?\
    \ x) (string-set! x (string-upcase x)) (string-set! x (string-downcase x)))) (string-ref\
    \ x (if (char? x) (string-set! x (string-downcase x)) (string-set! x (string-upcase\
    \ x)))))) s))]\n    [else (error \"Invalid string\")]))\n", "  (if (string? s)\n\
    \    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if\
    \ (string-length s)\n          (if (eq? (string-ref s i) #\\a)\n            (string-set!\
    \ s i #\\A)\n            (string-set! s i #\\a))\n          (string-set! s i #\\\
    A)))\n        (string-set! s #\\a)))\n    (string-set! s #\\a)))\n", "  (if (string?\
    \ s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n    \
    \    (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n     \
    \   (string-set! s i i)))\n    (string-set! s #\\a)))\n", "  (if (string? s)\n\
    \    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if\
    \ (string-length s)\n          (if (eq? (string-ref s i) #\\a)\n            (string-set!\
    \ s i #\\A)\n            (string-set! s i #\\a))\n          (string-set! s i #\\\
    A))\n        (string-set! s i #\\a)))\n    (string-set! s #\\A)))\n", "  (if (string?\
    \ s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n    \
    \    (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n     \
    \   (string-set! s i (- i 1))\n        (string-set! s i (- i 1)))\n      (string-set!\
    \ s #\\a))\n    (string-set! s #\\a))\n  s)\n", "  (if (string? s)\n    (if (string-length\
    \ s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set!\
    \ s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set!\
    \ s #\\a)))\n", "  (if (string? s)\n    (string-set! s\n      (if (string? (string->list\
    \ s))\n        (string->list (string-map (lambda (x) (if (string? x) (string-upcase\
    \ x) x)) s))\n        (string-map (lambda (x) (if (string? x) (string-downcase\
    \ x) x)) s))))\n", "  (cond\n    [(string? s) (string-set! s (string-map (lambda\
    \ (c) (if (char? c) (string-ref c #\"a-z\") (string-ref c #\"A-Z\")) s)) (string-copy\
    \ s))]\n    [else (string-set! s (string-map (lambda (c) (if (char? c) (string-ref\
    \ c #\"A-Z\") (string-ref c #\"a-z\"))) s))]))\n", "  (cond\n    [(string? s)\
    \ (string-set! s (string-map (lambda (c) (if (char? c) (string-ref c 0) (string-ref\
    \ c 1))) s))]\n    [else (string-set! s (string-map (lambda (c) (if (char? c)\
    \ (string-ref c 0) (string-ref c 1))) s))]))\n", "  (if (string? s)\n    (if (string-length\
    \ s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n\
    \          (if (eq? (string-ref s i) #\\a)\n            (string-set! s i #\\A)\n\
    \            (string-set! s i #\\a))\n          (string-set! s i #\\a))\n    \
    \    (string-set! s i #\\a)))\n    (string-set! s #\\a)))\n", "  (if (string?\
    \ s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n    \
    \    (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n     \
    \   (string-set! s i (- i 1))\n        (string-set! s i (- i 1)))\n      (string-set!\
    \ s #\\a))\n    (string-set! s #\\a)))\n", "  (if (string? s)\n    (if (string-length\
    \ s)\n      (let ((i (string-index s #\\a)))\n        (if (<= i 0)\n         \
    \ (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n\
    \    (string-set! s #\\a)))\n", "  (if (string? s)\n    (if (string-length s)\n\
    \      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n     \
    \     (if (eq? i 0)\n            (string-set! s i (string-set! s i (string-set!\
    \ s i #\\A)))\n            (string-set! s i (string-set! s i (string-set! s i\
    \ #\\a))))\n          (string-set! s i (string-set! s i (string-set! s i #\\A))))\n\
    \        (string-set! s i (string-set! s i (string-set! s i #\\a))))\n      (string-set!\
    \ s i (string-set! s i (string-set! s i #\\A))))\n      (string-set! s i (string-set!\
    \ s i (string-set! s i #\\a))))\n      (string-set! s i (string-set! s i (string-set!\
    \ s i #\\A))))\n      (string-set! s i (string-set! s i (string-set! s i #\\a))))\n\
    \      (string-set! s i (string-set! s i (string-set! s i #\\A))))\n      (string-set!\
    \ s i (string-set! s i (string-set! s i #\\a))))\n      (string-set! s i (string-set!\
    \ s i (string-set! s i #\\A))))\n      (string-set! s i (string-set! s i (string-set!\
    \ s i #\\a))))\n      (string-set! s i (string-set! s i (string-set! s i #\\A))))\n\
    \      (string-set! s i (string-set! s i (string-set! s i #\\a))))\n      (string-set!\
    \ s i (string-set! s i (string-set! s i #\\A))))\n      (string-set! s i (string-set!\
    \ s i (string-set! s i #\\a))))\n      (string-set! s i (string-set! s i (string-set!\
    \ s i #\\A))))", "  (if (string? s)\n    (if (string-length s)\n      (let ((i\
    \ (string-index s #\\a)))\n        (if (<= i 0)\n          (string-set! s i (string-set!\
    \ s i #\\A))\n          (string-set! s i (string-set! s i #\\a))))\n      (string-set!\
    \ s #\\A)))\n  (string s)))\n", "  (cond\n    [(string? s) (string-set! s (string-map\
    \ (lambda (x) (if (char? x) (string-ref x (if (char? x) (string-set! x (string-upcase\
    \ x)) (string-set! x (string-downcase x)))) (string-ref x (if (char? x) (string-set!\
    \ x (string-downcase x)) (string-set! x (string-upcase x)))))) s))]\n    [else\
    \ (error \"Invalid argument\")]))\n", "  (if (string? s)\n    (string-set! s\n\
    \      (if (char? (string-ref s 0))\n        (string-ref s 0)\n        (string-ref\
    \ s (string-length s) - 1))\n      (if (char? (string-ref s (string-length s)\
    \ - 1))\n        (string-set! s\n          (string-ref s 0)\n          (string-ref\
    \ s (string-length s) - 1))\n        (string-ref s (string-length s) - 1)))\n\
    \    (string-set! s (string-copy s))))\n", "  (if (string? s)\n    (if (string-length\
    \ s)\n      (let ((i (string-index s #\\a)))\n        (if (<= i 0)\n         \
    \ (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n\
    \    (string-set! s #\\a)))\n", "  (cond\n    [(string? s) (string-set! s (string-map\
    \ (lambda (c) (if (char? c) (string-ref c \"a-z\") (string-ref c \"A-Z\"))) s))]\n\
    \    [else (string-set! s (string-map (lambda (c) (if (char? c) (string-ref c\
    \ \"a-z\") (string-ref c \"A-Z\"))) s))]\n  )\n)\n", "  (if (string? s)\n    (if\
    \ (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i\
    \ 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set!\
    \ s i i)))\n    (string-set! s #\\A)))\n", "  (if (string? s)\n    (if (string-length\
    \ s)\n      (let ((i (string-index s #\\space)))\n        (if (< i 0)\n      \
    \    (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n\
    \    (string-set! s #\\space)))\n", "  (if (string? s)\n    (if (string-length\
    \ s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n\
    \          (if (eq? i 0)\n            (string-set! s #\\A)\n            (string-set!\
    \ s #\\a))\n          (string-set! s #\\A)\n          (string-set! s #\\a))))\n\
    \    (string-set! s #\\A)\n    (string-set! s #\\a)))\n", "  (cond\n    [(string?\
    \ s) (string-set! s (string-map (lambda (c) (if-letter c (if-lower-case c (if-upper-case\
    \ c (string-ref s (string-length s) - 1)))) (string-ref s 0))) s)]\n    [else\
    \ (string-set! s (string-map (lambda (c) (if-letter c (if-lower-case c (if-upper-case\
    \ c (string-ref s (string-length s) - 1)))) (string-ref s 0))) s)]))\n", "  (cond\n\
    \    [(string? s) (string-set! s (string-map (lambda (x) (if (char? x) (string-ref\
    \ x (if (char? x) (string-upcase x) (string-downcase x)))) (string-ref s (if (char?\
    \ s) (string-upcase s) (string-downcase s)))) s)])\n    [else (error \"s is not\
    \ a string\")]))\n", "  (if (string? s)\n    (if (string-length s)\n      (let\
    \ ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i\
    \ (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s\
    \ #\\a)))\n", "  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index\
    \ s #\\a)))\n        (if (< i 0)\n          (string-set! s i (string-set! s i\
    \ #\\A))\n          (string-set! s i (string-set! s i #\\a))))\n      (string-set!\
    \ s #\\A)\n      (string-set! s #\\a)))\n  (string s)))\n", "  (if (string? s)\n\
    \    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if\
    \ (string-length s)\n          (if (eq? i 0)\n            (string-set! s #\\A)\n\
    \            (string-set! s #\\a)\n            (string-set! s #\\C))\n       \
    \   (string-set! s #\\c))\n        (string-set! s #\\b)))\n    (string-set! s\
    \ #\\b)))\n", "  (cond\n    ((string? s)\n      (let ((s1 (string-copy s)))\n\
    \        (let ((s2 (string-map (lambda (x) (if (char? x) (string-ci-upcase x)\
    \ (string-ci-downcase x)))) s1))\n          (string-set! s1 s2)))\n      (else\n\
    \        (string-ci-upcase s)))\n  ))\n", "  (if (string? s)\n    (if (string-length\
    \ s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n\
    \          (if (eq? i 0)\n            (string-set! s #\\A)\n            (string-set!\
    \ s #\\a))\n          (string-set! s #\\A)\n          (string-set! s #\\a)\n \
    \         (string-set! s #\\A)\n          (string-set! s #\\a)))\n        (string-set!\
    \ s #\\a)))\n    (string-set! s #\\a)))\n", "  (if (string? s)\n    (if (string-length\
    \ s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n\
    \          (if (eq? i (string-length s))\n            (string-set! s i)\n    \
    \        (string-set! s i (string-map (lambda (x) (if (eq? x #\\a) (string-upcase\
    \ x) (string-downcase x))) s)))))\n      (string-set! s (string-map (lambda (x)\
    \ (if (eq? x #\\a) (string-downcase x) (string-upcase x))) s)))\n    (string-set!\
    \ s (string-map (lambda (x) (if (eq? x #\\a) (string-downcase x) (string-upcase\
    \ x))) s)))\n  s)\n)\n", "  (if (string? s)\n    (if (string-length s)\n     \
    \ (let ((i (string-index s #\\a)))\n        (if (string-length s)\n          (if\
    \ (string-length s)\n            (let ((j (string-index s #\\A)))\n          \
    \    (if (string-length s)\n                (let ((k (string-index s #\\c)))\n\
    \                  (if (string-length s)\n                    (let ((l (string-index\
    \ s #\\C)))\n                      (if (string-length s)\n                   \
    \     (let ((m (string-copy s i j)))\n                          (let ((n (string-copy\
    \ s i k)))\n                            (let ((o (string-copy s i l)))\n     \
    \                         (let ((p (string-copy s i m)))\n                   \
    \             (string-set! s i p)\n                                (string-set!\
    \ s i n)\n                                (string-set! s i o)\n              \
    \                  (string-set! s i m))))))))))))))))))))))\n", "  (if (string?\
    \ s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n    \
    \    (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n     \
    \   (string-set! s i i)))\n    (string-set! s #\\a)))\n", "  (cond\n    [(string?\
    \ s) (string-set! s (string-map (lambda (c) (if (char? c) (string-ref c #\"a-z\"\
    ) (string-ref c #\"A-Z\")) s)) (string-copy s))]\n    [else (string-set! s (string-map\
    \ (lambda (c) (if (char? c) (string-ref c #\"A-Z\") (string-ref c #\"a-z\")))\
    \ s))]))\n", "  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index\
    \ s #\\a)))\n        (if (string-length s)\n          (if (eq? i 0)\n        \
    \    (string-set! s #\\A)\n            (string-set! s #\\a))\n          (string-set!\
    \ s #\\A)\n          (string-set! s #\\a)\n          (string-set! s #\\A)\n  \
    \        (string-set! s #\\a)))\n        (string-set! s #\\a)))\n    (string-set!\
    \ s #\\a)))\n", "  (if (string? s)\n    (if (string-length s)\n      (let ((i\
    \ (string-index s #\\space)))\n        (if (string-length s)\n          (if (string-char\
    \ s i)\n            (string-set! s i (string-set! (string-substring s i i) #\\\
    space #\\space))\n            (string-set! s (string-substring s 0 i)))\n    \
    \      (string-set! s (string-substring s 0 (string-length s))))\n        (string-set!\
    \ s (string-substring s 0 (string-length s))))\n      (string-set! s (string-substring\
    \ s 0 (string-length s))))\n    (string-set! s (string-substring s 0 (string-length\
    \ s))))\n  s)\n)\n", "  (if (string? s)\n    (if (string-length s)\n      (let\
    \ ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i\
    \ (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s\
    \ #\\A)))\n", "  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index\
    \ s #\\a)))\n        (if (<= i (string-length s))\n          (string-set! s i\
    \ (string-set! s i (string-downcase s i)))\n          (string-set! s i (string-upcase\
    \ s i)))\n        (string-set! s i (string-upcase s i)))\n      (string-set! s\
    \ (string-upcase s)))\n    (string-set! s (string-downcase s))))\n", "  (if (string?\
    \ s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n    \
    \    (if (string-length s)\n          (if (eq? i 0)\n            (string-set!\
    \ s #\\A)\n            (string-set! s #\\a)\n            (string-set! s #\\c)\n\
    \            (string-set! s #\\C))\n          (string-set! s #\\b)\n         \
    \ (string-set! s #\\B)\n          (string-set! s #\\d)\n          (string-set!\
    \ s #\\D)\n          (string-set! s #\\e)\n          (string-set! s #\\E)\n  \
    \        (string-set! s #\\f)\n          (string-set! s #\\F)\n          (string-set!\
    \ s #\\g)\n          (string-set! s #\\G)\n          (string-set! s #\\h)\n  \
    \        (string-set! s #\\H)\n          (string-set! s #\\i)\n          (string-set!\
    \ s #\\I)\n          (string-set! s #\\j)\n          (string-set! s #\\J)\n  \
    \        (string-set! s #\\k)\n          (string-set! s #\\K)\n          (string-set!\
    \ s #\\l)\n          (string-set! s #\\L)\n          (string-set! s #\\m)\n  \
    \        (string-set! s #\\M)\n          (string-set! s #\\n)\n          (string-set!\
    \ s #\\N)\n          (string-set! s #\\o)\n          (string-set! s #\\O)\n  \
    \        (string-set! s #\\p)\n          (string-set! s #\\P)\n          (string-set!\
    \ s #\\q)\n          (string-set! s #\\Q)\n          (string-set! s #\\r)\n  \
    \        (string-set! s #\\R)\n          (string-set! s #\\s)\n          (string-set!\
    \ s #\\S)\n          (", "  (if (string? s)\n    (if (string-length s)\n     \
    \ (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set!\
    \ s i (- (string-length s) i)))\n        (string-set! s i (- i 1))))\n    (string-set!\
    \ s #\\A)))\n", "  (if (string? s)\n    (if (string-length s)\n      (let ((i\
    \ (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (-\
    \ (string-length s) i)))\n        (string-set! s i (- i 1))))\n    (string-set!\
    \ s #\\a)))\n", "  (if (string? s)\n    (if (string-length s)\n      (let ((i\
    \ (string-index s #\\a)))\n        (if (<= i 0)\n          (string-set! s i (-\
    \ (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\\
    a)))\n", "  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index\
    \ s #\\a)))\n        (if (string-length s)\n          (if (eq? (string-ref s i)\
    \ #\\a)\n            (string-set! s i #\\A)\n            (string-set! s i #\\\
    a))\n          (string-set! s i #\\A))\n        (string-set! s i #\\a)))\n   \
    \ (string-set! s #\\A)))\n", "  (if (string? s)\n    (if (string-length s)\n \
    \     (let ((i (string-index s #\\space)))\n        (if (string? s[i])\n     \
    \     (string-set! s i (string-set! s i (string-upcase s[i])))\n          (string-set!\
    \ s i (string-downcase s[i])))\n          (string-set! s i (string-downcase s[i])))\n\
    \          (string-set! s i (string-upcase s[i])))\n          (string-set! s i\
    \ (string-upcase s[i])))\n          (string-set! s i (string-downcase s[i])))\n\
    \          (string-set! s i (string-downcase s[i])))\n          (string-set! s\
    \ i (string-upcase s[i])))\n          (string-set! s i (string-upcase s[i])))\n\
    \          (string-set! s i (string-downcase s[i])))\n          (string-set! s\
    \ i (string-downcase s[i])))\n          (string-set! s i (string-upcase s[i])))\n\
    \          (string-set! s i (string-upcase s[i])))\n          (string-set! s i\
    \ (string-downcase s[i])))\n          (string-set! s i (string-downcase s[i])))\n\
    \          (string-set! s i (string-upcase s[i])))\n          (string-set! s i\
    \ (string-upcase s[i])))\n          (string-set! s i (string-downcase s[i])))\n\
    \          (string-set! s i (string-downcase s[i])))\n          (string-set! s\
    \ i (string-upcase s[i])))\n          (string-set! s i (string-upcase s[i])))\n\
    \          (string-set! s i (string-downcase s[i])))\n          (string-set! s\
    \ i (string-downcase s[i])))\n          (string-set! s i (string-upcase s[i])))\n\
    \          (string-", "  (if (string? s)\n    (if (string-length s)\n      (let\
    \ ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i\
    \ (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s\
    \ #\\a)))\n", "  (if (string? s)\n    (string-set! s (string-map (lambda (c)\n\
    \                                (if (char? c)\n                             \
    \     (string-ref c 1)\n                                  (string-ref c 0)))\n\
    \                                s)\n          (string-copy s)))\n  s)\n", " \
    \ (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\\
    a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n\
    \        (string-set! s i i)))\n    (string-set! s #\\a)))\n", "  (cond\n    [(string?\
    \ s) (string-set! s (string-map (lambda (x) (if (char? x) (string-ref x (if (char?\
    \ x) (string-upcase x) (string-downcase x))))) s)]\n    [else (string-set! s (string-map\
    \ (lambda (x) (if (char? x) (string-downcase x) (string-upcase x))))) s]\n  )\n\
    )\n", "  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index\
    \ s #\\a)))\n        (if (string-length s)\n          (if (eq? i 0)\n        \
    \    (string-set! s #\\A)\n            (string-set! s #\\a)\n            (string-set!\
    \ s #\\C)\n            (string-set! s #\\c)\n            (string-set! s #\\B)\n\
    \            (string-set! s #\\b)\n            (string-set! s #\\D)\n        \
    \    (string-set! s #\\d)\n            (string-set! s #\\E)\n            (string-set!\
    \ s #\\e)\n            (string-set! s #\\F)\n            (string-set! s #\\f)\n\
    \            (string-set! s #\\G)\n            (string-set! s #\\g)\n        \
    \    (string-set! s #\\H)\n            (string-set! s #\\h)\n            (string-set!\
    \ s #\\I)\n            (string-set! s #\\i)\n            (string-set! s #\\J)\n\
    \            (string-set! s #\\j)\n            (string-set! s #\\K)\n        \
    \    (string-set! s #\\k)\n            (string-set! s #\\L)\n            (string-set!\
    \ s #\\l)\n            (string-set! s #\\M)\n            (string-set! s #\\m)\n\
    \            (string-set! s #\\N)\n            (string-set! s #\\n)\n        \
    \    (string-set! s #\\O)\n            (string-set! s #\\o)\n            (string-set!\
    \ s #\\P)\n            (string-set! s #\\p)\n            (string-set! s #\\Q)\n\
    \            (string-set! s #\\q)\n            (string-set! s #\\R)\n        \
    \    (string-set! s #\\r)\n            (string-set! s #\\S)\n            (string-set!\
    \ s #\\s)\n            (", "  (cond\n    ((null? s) \"\")\n    ((char? s) (string-set!\
    \ s (string-map (lambda (c) (if (char? c) (string-ref c #\"a-z\") (string-ref\
    \ c #\"A-Z\")) s)) (string-copy s)))\n    (else (string-set! s (string-map (lambda\
    \ (c) (if (char? c) (string-ref c #\"A-Z\") (string-ref c #\"a-z\"))) s)))))\n",
  "  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\\
    a)))\n        (if (string-length s)\n          (if (string-length s)\n       \
    \     (if (< i 0)\n              (string-set! s i (- (string-length s) i)))\n\
    \            (string-set! s i (- i 1)))\n          (string-set! s i (- i 1))))\n\
    \      (string-set! s i (- (string-length s) i)))\n    (string-set! s i (- (string-length\
    \ s) i))))\n", "  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index\
    \ s #\\a)))\n        (if (string-length s)\n          (if (eq? i 0)\n        \
    \    (string-set! s #\\A)\n            (string-set! s #\\a))\n          (string-set!\
    \ s #\\A)))\n        (string-set! s #\\a)))\n    (string-set! s #\\a)))\n", " \
    \ (if (string? s)\n    (string-set! s\n      (if (char? (string-ref s 0))\n  \
    \      (string-ref s 0)\n        (string-ref s (string-length s) - 1))\n     \
    \ (if (char? (string-ref s (string-length s) - 1))\n        (string-set! s\n \
    \         (string-ref s (string-length s) - 1)\n          (if (char? (string-ref\
    \ s (string-length s) - 2))\n            (string-set! s\n              (string-ref\
    \ s (string-length s) - 2)\n              (if (char? (string-ref s (string-length\
    \ s) - 3))\n                (string-set! s\n                  (string-ref s (string-length\
    \ s) - 3)\n                  (if (char? (string-ref s (string-length s) - 4))\n\
    \                    (string-set! s\n                      (string-ref s (string-length\
    \ s) - 4)\n                      (if (char? (string-ref s (string-length s) -\
    \ 5))\n                        (string-set! s\n                          (string-ref\
    \ s (string-length s) - 5)\n                          (if (char? (string-ref s\
    \ (string-length s) - 6))\n                            (string-set! s\n      \
    \                        (string-ref s (string-length s) - 6)\n              \
    \                (if (char? (string-ref s (string-length s) - 7))\n          \
    \                      (string-set! s\n                                  (string-ref\
    \ s (string-length s) - 7)\n                                  (if (char? (string-ref\
    \ s (string-length s) - 8))\n                                    (string-set!\
    \ s\n                                      (string-ref s (string-length s) - 8)\n\
    \                                      (if (char? (string-ref s (string-length\
    \ s) - 9))\n                                        (string-set! s\n         \
    \                                 (string-ref s (string-length s) - 9)\n     \
    \                                     (if (char? (string-ref s (string-length\
    \ s) - 10))\n                                            (string-set! s", "  (if\
    \ (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n\
    \        (if (string-length s)\n          (if (eq? i 0)\n            (string-set!\
    \ s #\\A)\n            (string-set! s #\\a))\n          (string-set! s #\\A)\n\
    \          (string-set! s #\\a))))\n    (string-set! s #\\A)\n    (string-set!\
    \ s #\\a)))\n", "  (if (string? s)\n    (if (string-length s)\n      (let ((i\
    \ (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (-\
    \ (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\\
    a)))\n", "  (cond\n    ((string? s) (string-set! s (string-map (lambda (x) (if\
    \ (char? x) (string-ref x (if (char? x) (string-upcase x) (string-downcase x))))\
    \ (string-ref x (if (char? x) (string-downcase x) (string-upcase x)))) s))\n \
    \   (else (string-set! s (string-map (lambda (x) (if (char? x) (string-downcase\
    \ x) (string-upcase x)))) s))))\n", "  (if (string? s)\n    (if (string-length\
    \ s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n\
    \          (if (eq? i 0)\n            (string-set! s i (string-set! s i (string-set!\
    \ s i #\\A)))\n            (string-set! s i (string-set! s i (string-set! s i\
    \ #\\a)))\n            (string-set! s i (string-set! s i (string-set! s i #\\\
    A))))\n          (string-set! s i (string-set! s i (string-set! s i #\\a))))\n\
    \        (string-set! s i (string-set! s i (string-set! s i #\\a))))\n       \
    \ (string-set! s i (string-set! s i (string-set! s i #\\a))))\n        (string-set!\
    \ s i (string-set! s i (string-set! s i #\\a))))\n        (string-set! s i (string-set!\
    \ s i (string-set! s i #\\a))))\n        (string-set! s i (string-set! s i (string-set!\
    \ s i #\\a))))\n        (string-set! s i (string-set! s i (string-set! s i #\\\
    a))))\n        (string-set! s i (string-set! s i (string-set! s i #\\a))))\n \
    \       (string-set! s i (string-set! s i (string-set! s i #\\a))))\n        (string-set!\
    \ s i (string-set! s i (string-set! s i #\\a))))\n        (string-set! s i (string-set!\
    \ s i (string-set! s i #\\a))))\n        (string-set! s i (string-set! s i (string-set!\
    \ s i #\\a))))\n        (string-set! s i (string-set! s i (string-set! s i #\\\
    a))))\n        (string-set! s i (string-set! s i (string-set! s i #\\a))))", " \
    \ (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\\
    a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n\
    \        (string-set! s i (- i 1))))\n    (string-set! s #\\A)))\n", "  (if (string?\
    \ s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n    \
    \    (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n     \
    \   (string-set! s i (- i 1))\n        (string-set! s i (- i 1)))\n      (string-set!\
    \ s #\\a)\n      (string-set! s #\\A)\n      (string-set! s #\\c)\n      (string-set!\
    \ s #\\C)))\n    (string-set! s #\\a)\n    (string-set! s #\\A)\n    (string-set!\
    \ s #\\c)\n    (string-set! s #\\C)))\n", "  (if (string? s)\n    (if (string-length\
    \ s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set!\
    \ s i (- (string-length s) i)))\n        (string-set! s i (- i 1))))\n    (string-set!\
    \ s #\\a)))\n", "  (if (string? s)\n    (if (string-length s)\n      (let ((i\
    \ (string-index s #\\a)))\n        (if (<= i 0)\n          (string-set! s i (string-set!\
    \ s i (string-set! s i #\\A)))\n          (string-set! s i (string-set! s i #\\\
    a))))\n      (string-set! s #\\A))\n    (string-set! s #\\a)))\n", "  (if (string?\
    \ s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n    \
    \    (if (string-length s)\n          (let ((j (string-index s #\\A)))\n     \
    \       (if (string-length s)\n              (let ((k (string-index s #\\c)))\n\
    \                (if (string-length s)\n                  (let ((l (string-index\
    \ s #\\C)))\n                    (if (string-length s)\n                     \
    \ (let ((m (string-index s #\\d)))\n                        (if (string-length\
    \ s)\n                          (let ((n (string-index s #\\D)))\n           \
    \                 (if (string-length s)\n                              (let ((o\
    \ (string-index s #\\e)))\n                                (if (string-length\
    \ s)\n                                  (let ((p (string-index s #\\E)))\n   \
    \                                 (if (string-length s)\n                    \
    \                  (let ((q (string-index s #\\f)))\n                        \
    \                (if (string-length s)\n                                     \
    \     (let ((r (string-index s #\\F)))\n                                     \
    \       (if (string-length s)\n                                              (let\
    \ ((s (string-index s #\\g)))\n                                              \
    \  (if (string-length s)\n                                                  (let\
    \ ((t (string-index s #\\G)))\n                                              \
    \      (if (string-length s)\n                                               \
    \       (let ((u (string-index s #\\h)))\n                                   \
    \                     (if (string-length s)\n                                \
    \                          (let ((v (string-index s #\\H)))\n                \
    \                                            (if (string-length s)\n         \
    \                                                     (let ((w (string-index s\
    \ #\\i)))\n                                                                (if\
    \ (string-length s)\n                                                        \
    \          (let ((x (string-index s #\\I)))\n                                \
    \                                    (if (string-length s)\n                 \
    \                                                     (let ((y (string-index s\
    \ #\\j)))\n                                                                  \
    \      (if", "  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index\
    \ s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length\
    \ s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\a)))\n", "  (if\
    \ (string? s)\n    (let ((i (string-index s #\\a)))\n      (if (<= i 0)\n    \
    \    (string-set! s i (string-set! s i #\\A))\n        (string-set! s i (string-set!\
    \ s i #\\c))\n        (string-set! s i (string-set! s i #\\a))\n        (string-set!\
    \ s i (string-set! s i #\\C))))\n    (string-set! s #\\A)\n    (string-set! s\
    \ #\\c)\n    (string-set! s #\\a)\n    (string-set! s #\\C)))\n", "  (cond\n \
    \   [(string? s) (string-set! s (string-map (lambda (x) (if (char? x) (string-ref\
    \ x (if (char? x) (string-set! x (string-upcase x)) (string-set! x (string-downcase\
    \ x)))) (string-ref x (if (char? x) (string-set! x (string-downcase x)) (string-set!\
    \ x (string-upcase x)))))) s))]\n    [else (string-set! s (string-map (lambda\
    \ (x) (if (char? x) (string-ref x (if (char? x) (string-set! x (string-upcase\
    \ x)) (string-set! x (string-downcase x)))) (string-ref x (if (char? x) (string-set!\
    \ x (string-downcase x)) (string-set! x (string-upcase x)))))) s))]))\n)\n", " \
    \ (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\\
    space)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s)\
    \ i)))\n        (string-set! s i (- i 1))\n        (string-set! s i (- i 1))))\n\
    \    (string-set! s #\\space)))\n", "  (if (string? s)\n    (if (string-length\
    \ s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n\
    \          (if (eq? i 0)\n            (string-set! s #\\A)\n            (string-set!\
    \ s #\\a))\n          (string-set! s #\\A)\n          (string-set! s #\\a))))\n\
    \    (string-set! s #\\A)\n    (string-set! s #\\a)))\n", "  (cond\n    ((null?\
    \ s) \"\")\n    ((char? s) (if (char-ci? s) (char-ci? (char-upcase s)) (char-ci?\
    \ (char-downcase s))))\n    (else (string-ci? s) (string-ci? (string-upcase s))\
    \ (string-ci? (string-downcase s))))\n)\n", "  (if (string? s)\n    (if (string-length\
    \ s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set!\
    \ s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set!\
    \ s #\\A)))\n", "  (if (string? s)\n    (if (string-length s)\n      (let ((i\
    \ (string-index s #\\a)))\n        (if (<= i 0)\n          (string-set! s i (-\
    \ (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\\
    A)))\n", "  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index\
    \ s #\\a)))\n        (if (<= i 0)\n          (string-set! s i (string-set! s i\
    \ (string-set! s i #\\A)))\n          (string-set! s i (string-set! s i (string-set!\
    \ s i #\\a))))\n        (string-set! s i (string-set! s i (string-set! s i #\\\
    A))))\n      (string-set! s i (string-set! s i (string-set! s i #\\a))))\n   \
    \ (string-set! s #\\A))\n  s)\n)\n", "  (if (string? s)\n    (if (string-length\
    \ s)\n      (let ((i (string-index s #\\space)))\n        (if (string? i)\n  \
    \        (let ((j (string-index s #\\space)))\n            (if (string? j)\n \
    \             (let ((k (string-index s #\\space)))\n                (if (string?\
    \ k)\n                  (let ((l (string-index s #\\space)))\n               \
    \     (if (string? l)\n                      (let ((m (string-index s #\\space)))\n\
    \                        (if (string? m)\n                          (let ((n (string-index\
    \ s #\\space)))\n                            (if (string? n)\n               \
    \               (let ((o (string-index s #\\space)))\n                       \
    \         (if (string? o)\n                                  (let ((p (string-index\
    \ s #\\space)))\n                                    (if (string? p)\n       \
    \                               (let ((q (string-index s #\\space)))\n       \
    \                                 (if (string? q)\n                          \
    \                (let ((r (string-index s #\\space)))\n                      \
    \                      (if (string? r)\n                                     \
    \         (let ((s (string-index s #\\space)))\n                             \
    \                   (if (string? s)\n                                        \
    \          (let ((t (string-index s #\\space)))\n                            \
    \                        (if (string? t)\n                                   \
    \                   (let ((u (string-index s #\\space)))\n                   \
    \                                     (if (string? u)\n                      \
    \                                    (let ((v (string-index s #\\space)))\n  \
    \                                                          (if (string? v)\n \
    \                                                             (let ((w (string-index\
    \ s #\\space)))\n                                                            \
    \    (if (string? w)\n                                                       \
    \           (let ((x (string-index s #\\space)))\n                           \
    \                                         (if (string? x)\n                  \
    \                                                    (let ((y (string-index s\
    \ #\\space)))\n                                                              \
    \          (if (string? y)\n                                                 \
    \                         (let ((z (", "  (cond\n    [(string? s) (string-set!\
    \ s (string-map (lambda (c) (if (char? c) (string-ref c 0) (string-ref c 1)))\
    \ s))]\n    [(char? s) (string-set! s (string-map (lambda (c) (if (char? c) (string-ref\
    \ c 0) (string-ref c 1))) s))]\n    [else (string-set! s (string-map (lambda (c)\
    \ (if (char? c) (string-ref c 0) (string-ref c 1))) s))]))\n", "  (if (string?\
    \ s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n    \
    \    (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n     \
    \   (string-set! s i (- i 1)))\n      (string-set! s i 0)))\n  (s)))\n", "  (cond\n\
    \    ((string? s)\n      (string-set! s (string-map (lambda (x) (if (char? x)\
    \ (string-ref x \"a\") (string-ref x \"A\"))) s))\n      (string-set! s (string-map\
    \ (lambda (x) (if (char? x) (string-ref x \"A\") (string-ref x \"a\"))) s))\n\
    \    )\n    (else (string-set! s (string-map (lambda (x) (if (char? x) (string-ref\
    \ x \"A\") (string-ref x \"a\"))) s))\n      (string-set! s (string-map (lambda\
    \ (x) (if (char? x) (string-ref x \"a\") (string-ref x \"A\"))) s))\n  ))\n)\n",
  "  (cond\n    [(string? s) (string-set! s (string-map (lambda (c) (if (char? c)\
    \ (string-ref c #\"a-z\") (string-ref c #\"A-Z\")) s)) (string-copy s))]\n   \
    \ [else (string-set! s (string-map (lambda (c) (if (char? c) (string-ref c #\"\
    A-Z\") (string-ref c #\"a-z\"))) s))]))\n", "  (if (string? s)\n    (if (string-length\
    \ s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set!\
    \ s i (- (string-length s) i)))\n        (string-set! s i (- i 1)))\n      (string-set!\
    \ s i 0)))\n  (s)))\n", "  (if (string? s)\n    (string-set! s (string-map (lambda\
    \ (c)\n                                (if (char? c)\n                       \
    \           (if (char=? #\"a\" c)\n                                    (string-set!\
    \ c #\"A\")\n                                    (string-set! c #\"a\"))\n   \
    \                               (string-set! c c))\n                         \
    \        (string-set! c c))\n                                s))\n    (string-set!\
    \ s s)))\n", "  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index\
    \ s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length\
    \ s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\a)))\n", "  (if\
    \ (string? s)\n    (string-set! s\n      (if (string-ci? s)\n        (string-map\
    \ (lambda (c) (if (char? c) (string-ci? c) (string-ci? c))) s)\n        (string-map\
    \ (lambda (c) (if (char? c) (string-ci? c) (string-ci? c))) s))\n      s)\n  \
    \  (string-set! s (if (string-ci? s) (string-ci? s) (string-ci? s))))\n", "  (cond\n\
    \    ((null? s) \"\")\n    ((char? s) (if (char-ci? s) (string-ci-upcase s) (string-ci-downcase\
    \ s)))\n    (else (string-upcase s) )\n  )\n)\n", "  (if (string? s)\n    (string-set!\
    \ s\n      (if (string? s)\n        (string-map!\n          (lambda (c)\n    \
    \        (if (char? c)\n              (string-set! c\n                (if (char?\
    \ c)\n                  (string-upcase c)\n                  (string-downcase\
    \ c)))))\n            s))\n      (string-upcase s)))\n)\n", "  (if (string? s)\n\
    \    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if\
    \ (string-length s)\n          (if (eq? i 0)\n            (string-set! s #\\A)\n\
    \            (string-set! s #\\a))\n          (string-set! s #\\A)\n         \
    \ (string-set! s #\\a)\n          (string-set! s #\\A)\n          (string-set!\
    \ s #\\a)))\n        (string-set! s #\\a)))\n    (string-set! s #\\a)))\n", " \
    \ (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\\
    a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n\
    \        (string-set! s i i)))\n    (string-set! s #\\a)))\n", "  (if (string?\
    \ s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n    \
    \    (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n     \
    \   (string-set! s i (- i 1))))\n    (string-set! s #\\a)))\n", "  (cond\n   \
    \ [(string? s) (string-set! s (string-map (lambda (x) (if (char? x) (string-ref\
    \ x (if (char? x) (string-upcase x) (string-downcase x)))) (string-ref s (if (char?\
    \ s) (string-upcase s) (string-downcase s)))) s)])\n    [else (string-set! s (string-map\
    \ (lambda (x) (if (char? x) (string-upcase x) (string-downcase x)))) s)])\n",
  "  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\\
    a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n\
    \        (string-set! s i i)))\n    (string-set! s #\\a)))\n", "  (if (string?\
    \ s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n    \
    \    (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n     \
    \   (string-set! s i i)))\n    (string-set! s #\\A)))\n", "  (if (string? s)\n\
    \    (if (string-length s)\n      (let ((i (string-index s #\\space)))\n     \
    \   (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n      \
    \  (string-set! s i i)))\n    (string-set! s #\\space)))\n", "  (if (string? s)\n\
    \    (if (string-length s)\n      (let ((i (string-index s #\\space)))\n     \
    \   (if (string? s[i])\n          (let ((c (string-ref s i)))\n            (if\
    \ (char-alphabetic? c)\n              (string-set! s i (string-upcase c))\n  \
    \            (string-set! s i (string-downcase c))))\n          (string-set! s\
    \ i (string-downcase (string-ref s i))))\n        (string-set! s i (string-upcase\
    \ (string-ref s i))))\n      (string-set! s (string-downcase s))))\n  (string-set!\
    \ s (string-upcase s))))\n", "  (if (string? s)\n    (if (string-length s)\n \
    \     (let ((i (string-index s #\\a)))\n        (if (string-length s)\n      \
    \    (if (eq? i (string-length s))\n            (string-set! s i)\n          \
    \  (string-set! s i (string-map (lambda (x) (if (eq? x #\\a) (string-upcase x)\
    \ (string-downcase x))) s)))))\n      (string-set! s (string-map (lambda (x) (if\
    \ (eq? x #\\a) (string-downcase x) (string-upcase x))) s))))\n  (solve s)))\n",
  "  (cond\n    [(string? s) (string-set! s (string-map (lambda (c) (if (char? c)\
    \ (string-ref c \"a-z\") (string-ref c \"A-Z\")) s)) \"\")]\n    [else (string-set!\
    \ s (string-map (lambda (c) (if (char? c) (string-ref c \"a-z\") (string-ref c\
    \ \"A-Z\")) s)) \"\")]\n  )\n)\n", "  (cond\n    ((null? s) \"\")\n    ((char?\
    \ s) (string-set! s (string-map (lambda (c) (if (char? c) (string-ref c \"a-z\"\
    ) (string-ref c \"A-Z\"))) s)) s)\n    (else (string-set! s (string-map (lambda\
    \ (c) (if (char? c) (string-ref c \"a-z\") (string-ref c \"A-Z\"))) s)) s)))\n",
  "  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\\
    a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n\
    \        (string-set! s i (- i 1))))\n    (string-set! s #\\A)))\n", "  (if (string?\
    \ s)\n    (string-set! s\n      (if (string-ci? s)\n        (string-map (lambda\
    \ (x) (if (char? x) (string-ci? x) (string-ci? x))) s)\n        (string-map (lambda\
    \ (x) (if (char? x) (string-upcase x) (string-downcase x))) s)\n      )\n    \
    \  \"\")\n    (string-set! s (string-map (lambda (x) (if (char? x) (string-upcase\
    \ x) (string-downcase x))) s)))\n)\n", "  (if (string? s)\n    (if (string-length\
    \ s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set!\
    \ s i (- (string-length s) i)))\n        (string-set! s i (- i 1)))\n      (string-set!\
    \ s i 0)))\n  (string s)))\n", "  (if (string? s)\n    (if (string-length s)\n\
    \      (let ((i (string-index s #\\a)))\n        (if (<= i 0)\n          (string-set!\
    \ s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set!\
    \ s #\\A)))\n", "  (if (string? s)\n    (if (string-length s)\n      (let ((i\
    \ (string-index s #\\a)))\n        (if (string-length s)\n          (if (eq? (string-ref\
    \ s i) #\\a)\n            (string-set! s i #\\A)\n            (string-set! s i\
    \ #\\a))\n          (string-set! s i #\\A)))\n        (string-set! s #\\a)))\n\
    \    (string-set! s #\\a)))\n", "  (if (string? s)\n    (if (string-length s)\n\
    \      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set!\
    \ s i (- (string-length s) i)))\n        (string-set! s i (- i 1)))\n      (string-set!\
    \ s i 0)))\n  (string s)))\n", "  (if (string? s)\n    (if (string-length s)\n\
    \      (let ((i (string-index s #\\a)))\n        (if (<= i 0)\n          (string-set!\
    \ s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set!\
    \ s #\\a)))\n", "  (if (string? s)\n    (if (string-length s)\n      (let ((i\
    \ (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (-\
    \ (string-length s) i)))\n        (string-set! s i (- i 1))\n        (string-set!\
    \ s i (+ i 1)))\n        (string-set! s i 0)))\n    (string-set! s #\\a)\n   \
    \ s))\n", "  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index\
    \ s #\\a)))\n        (if (<= i 0)\n          (string-set! s i (- (string-length\
    \ s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\A)))\n", "  (if\
    \ (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n\
    \        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n \
    \       (string-set! s i i)))\n    (string-set! s #\\a)))\n", "  (if (string?\
    \ s)\n    (if (string-length s)\n      (let ((i (string-index s #\\space)))\n\
    \        (if (string-length s)\n          (if (string-length s)\n            (if\
    \ (< i 0)\n              (string-set! s i (- (string-length s) i)))\n        \
    \    (string-set! s i (- i 1)))\n          (string-set! s i (- i 1))))\n     \
    \ (string-set! s i (- i 1))))\n  (s)))\n", "  (if (string? s)\n    (if (string-length\
    \ s)\n      (let ((i (string-index s #\\a)))\n        (if (eqv? (string-ref s\
    \ i) #\\a)\n          (string-set! s i #\\A)\n          (string-set! s i #\\a)\n\
    \          (s)))\n      (s)))\n  (s)))\n", "  (cond\n    ((null? s) \"\")\n  \
    \  ((char? (car s))\n      (let ((c (char->integer (car s))))\n        (if (char-upcase?\
    \ c)\n            (string-append (char-upcase c) (cdr s))\n            (string-append\
    \ (char-downcase c) (cdr s))))\n      (string-append (char->string (car s)) (cdr\
    \ s)))\n    (else\n      (let ((c (car s)))\n        (if (char-upcase? c)\n  \
    \          (string-append (char-upcase c) (cdr s))\n            (string-append\
    \ (char-downcase c) (cdr s)))))))\n", "  (if (string? s)\n    (if (string-length\
    \ s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n\
    \          (if (eq? i 0)\n            (string-set! s #\\A)\n            (string-set!\
    \ s #\\a))\n          (string-set! s #\\A)\n          (string-set! s #\\a)))\n\
    \        (string-set! s #\\a)))\n    (string-set! s #\\a)))\n", "  (if (string?\
    \ s)\n    (string-set! s\n      (if (string-ci? s)\n        (string-map (lambda\
    \ (x) (if (string-ci? x) (string-ci-upcase x) (string-ci-downcase x))) s)\n  \
    \      (string-ci-upcase s)\n      )\n      (string-upcase s)\n    )\n    (string-downcase\
    \ s)\n  )\n)\n", "  (if (string? s)\n    (if (string-length s)\n      (let ((i\
    \ (string-index s #\\a)))\n        (if (string-length s)\n          (if (string-length\
    \ s)\n            (string-set! s i (string-set! s i (string-ref s i) #\\A))\n\
    \            (string-set! s i (string-set! s i (string-ref s i) #\\a))\n     \
    \       (string-set! s i (string-ref s i) #\\A))\n          (string-set! s i (string-ref\
    \ s i) #\\a)))\n        (string-set! s i (string-ref s i) #\\a)))\n  (string s)))\n",
  "  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\\
    a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n\
    \        (string-set! s i i)))\n    (string-set! s #\\a)))\n", "  (if (string?\
    \ s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n    \
    \    (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n     \
    \   (string-set! s i i)))\n    (string-set! s #\\a)))\n", "  (if (string? s)\n\
    \    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if\
    \ (string-length s)\n          (if (eq? (string-ref s i) #\\a)\n            (string-set!\
    \ s i #\\A)\n            (string-set! s i #\\a))\n          (string-set! s i #\\\
    A))\n        (string-set! s i #\\a)))\n    (string-set! s #\\A)))\n", "  (if (string?\
    \ s)\n    (string-set! s\n      (if (string? (string->list s))\n        (string->list\
    \ (string-map (lambda (x) (if (char? x) (string-upcase x) (string-downcase x)))\
    \ s))\n        (string-map (lambda (x) (if (char? x) (string-downcase x) (string-upcase\
    \ x))) s))))\n  (solve \"\"))\n", "  (if (string? s)\n    (string-set! s\n   \
    \   (if (string-ci? s)\n        (string-map (lambda (c) (if (char? c) (string-ci?\
    \ c) (string-ci? c))) s)\n        (string-map (lambda (c) (if (char? c) (string-ci?\
    \ c) (string-ci? c))) s)\n      )\n      \"\")\n    (string-set! s (string-ci?\
    \ s) (string-ci? s))\n  )\n)\n", "  (if (string? s)\n    (if (string-length s)\n\
    \      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set!\
    \ s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set!\
    \ s #\\a)))\n", "  (if (string? s)\n    (if (string-length s)\n      (let ((i\
    \ (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (-\
    \ (string-length s) i)))\n        (string-set! s i (- i 1))))\n    (string-set!\
    \ s #\\a)))\n", "  (if (string? s)\n    (if (string-length s)\n      (let ((i\
    \ (string-index s #\\a)))\n        (if (string-length s)\n          (if (eq? i\
    \ 0)\n            (string-set! s i (string-set! s i (string-set! s i #\\A)))\n\
    \            (string-set! s i (string-set! s i (string-set! s i #\\a))))\n   \
    \       (string-set! s i (string-set! s i (string-set! s i #\\A))))\n        (string-set!\
    \ s i (string-set! s i (string-set! s i #\\a))))\n      (string-set! s i (string-set!\
    \ s i (string-set! s i #\\A))))\n      (string-set! s i (string-set! s i (string-set!\
    \ s i #\\a))))\n      (string-set! s i (string-set! s i (string-set! s i #\\A))))\n\
    \      (string-set! s i (string-set! s i (string-set! s i #\\a))))\n      (string-set!\
    \ s i (string-set! s i (string-set! s i #\\A))))\n      (string-set! s i (string-set!\
    \ s i (string-set! s i #\\a))))\n      (string-set! s i (string-set! s i (string-set!\
    \ s i #\\A))))\n      (string-set! s i (string-set! s i (string-set! s i #\\a))))\n\
    \      (string-set! s i (string-set! s i (string-set! s i #\\A))))\n      (string-set!\
    \ s i (string-set! s i (string-set! s i #\\a))))\n      (string-set! s i (string-set!\
    \ s i (string-set! s i #\\A))))\n      (string-set! s i (string-set! s i (string-set!\
    \ s i #\\a))))\n      (string-set! s i (string-set! s i (string-set! s i #\\A))))",
  "  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\\
    a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n\
    \        (string-set! s i i)))\n    (string-set! s #\\a)))\n", "  (cond\n    ((null?\
    \ s) \"\")\n    ((char? s) (if (char-ci? s) (string-ci-upcase s) (string-ci-downcase\
    \ s)))\n    (else (string-upcase s))\n  )\n)\n", "  (if (string? s)\n    (if (string-length\
    \ s)\n      (let ((i (string-index s #\\a)))\n        (if (<= i 0)\n         \
    \ (string-set! s i (- (string-length s) i)))\n        (string-set! s i i)))\n\
    \    (string-set! s #\\a)))\n", "  (cond\n    ((null? s) \"\")\n    ((char? s)\
    \ (if (char-ci? s) (string-ci-upcase s) (string-ci-downcase s)))\n    (else (string-upcase\
    \ s) )\n  )\n)\n", "  (if (string? s)\n    (if (string-length s)\n      (let ((i\
    \ (string-index s #\\a)))\n        (if (string-length s)\n          (if (eq? i\
    \ 0)\n            (string-set! s #\\A)\n            (string-set! s #\\a))\n  \
    \        (string-set! s #\\A)\n          (string-set! s #\\a))))\n    (string-set!\
    \ s #\\A)\n    (string-set! s #\\a)))\n", "  (cond\n    ((null? s) \"\")\n   \
    \ ((char? s) (if (string-ci? s)\n      (string-ci-upcase s)\n      (string-ci-downcase\
    \ s)))\n    (else\n      (string-upcase s)\n      (string-downcase s)))\n)\n",
  "  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\\
    a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n\
    \        (string-set! s i (- i 1))\n        (string-set! s i 0)))\n    (string-set!\
    \ s #\\a)\n    (string-set! s #\\A)))\n", "  (if (string? s)\n    (if (string-length\
    \ s)\n      (let ((i (string-index s #\\space)))\n        (if (< i 0)\n      \
    \    (string-set! s i (- (string-length s) i)))\n        (let ((i (string-index\
    \ s #\\space)))\n          (if (< i 0)\n            (string-set! s i (- (string-length\
    \ s) i)))\n          (let ((i (string-index s #\\space)))\n            (if (<\
    \ i 0)\n              (string-set! s i (- (string-length s) i)))\n           \
    \ (let ((i (string-index s #\\space)))\n              (if (< i 0)\n          \
    \      (string-set! s i (- (string-length s) i)))\n              (let ((i (string-index\
    \ s #\\space)))\n                (if (< i 0)\n                  (string-set! s\
    \ i (- (string-length s) i)))\n                (let ((i (string-index s #\\space)))\n\
    \                  (if (< i 0)\n                    (string-set! s i (- (string-length\
    \ s) i)))\n                  (let ((i (string-index s #\\space)))\n          \
    \          (if (< i 0)\n                      (string-set! s i (- (string-length\
    \ s) i)))\n                    (let ((i (string-index s #\\space)))\n        \
    \              (if (< i 0)\n                        (string-set! s i (- (string-length\
    \ s) i)))\n                      (let ((i (string-index s #\\space)))\n      \
    \                  (if (< i 0)\n                          (string-set! s i (-\
    \ (string-length s) i)))\n                        (let ((i (string-index s #\\\
    space)))\n                          (if (< i 0)\n                            (string-set!\
    \ s i (- (string-length s) i)))\n                          (let ((i (string-index\
    \ s #\\space)))\n                            (if (< i 0)\n                   \
    \           (string-set! s i (- (string-length s) i)))\n                     \
    \       (let ((i (string-index s #\\space)))\n                              (if\
    \ (< i 0)\n                                (string-set! s i (- (string-length\
    \ s) i)))\n                              ", "  (cond\n    ((string? s)\n     \
    \ (if (string-length s)\n        (string-map\n          (lambda (c)\n        \
    \    (cond\n              ((char=? c #\\space)\n                (string-set! s\
    \ #\\space)\n              ((char=? c #\\a)\n                (string-set! s #\\\
    A)\n              ((char=? c #\\b)\n                (string-set! s #\\B)\n   \
    \           ((char=? c #\\c)\n                (string-set! s #\\C)\n         \
    \     ((char=? c #\\d)\n                (string-set! s #\\D)\n              ((char=?\
    \ c #\\e)\n                (string-set! s #\\E)\n              ((char=? c #\\\
    f)\n                (string-set! s #\\F)\n              ((char=? c #\\g)\n   \
    \             (string-set! s #\\G)\n              ((char=? c #\\h)\n         \
    \       (string-set! s #\\H)\n              ((char=? c #\\i)\n               \
    \ (string-set! s #\\I)\n              ((char=? c #\\j)\n                (string-set!\
    \ s #\\J)\n              ((char=? c #\\k)\n                (string-set! s #\\\
    K)\n              ((char=? c #\\l)\n                (string-set! s #\\L)\n   \
    \           ((char=? c #\\m)\n                (string-set! s #\\M)\n         \
    \     ((char=? c #\\n)\n                (string-set! s #\\N)\n              ((char=?\
    \ c #\\o)\n                (string-set! s #\\O)\n              ((char=? c #\\\
    p)\n                (string-set! s #\\P)\n              ((char=? c #\\q)\n   \
    \             (string-set! s #\\Q)\n              ((char=? c #\\r)\n         \
    \       (string-set! s #\\R)\n              ((char=? c #\\s)\n               \
    \ (string-set! s #\\S)\n              ((char=? c #\\t)\n                (string",
  "  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\\
    a)))\n        (if (string-length s)\n          (if (eq? i 0)\n            (string-set!\
    \ s #\\A)\n            (string-set! s #\\a))\n          (string-set! s #\\A)\n\
    \          (string-set! s #\\a))))\n    (string-set! s #\\A)\n    (string-set!\
    \ s #\\a)))\n", "  (cond\n    ((null? s) \"\")\n    ((char? s) (if (string-ci?\
    \ s) (string-ci-upcase s) (string-ci-downcase s)))\n    (else (string-upcase s)\
    \ (string-downcase s))\n  )\n)\n", "  (if (string? s)\n    (if (string-length\
    \ s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n\
    \          (if (eq? i 0)\n            (string-set! s #\\A)\n            (string-set!\
    \ s #\\a))\n          (string-set! s #\\A)\n          (string-set! s #\\a)\n \
    \         (string-set! s #\\A)\n          (string-set! s #\\a)))\n        (string-set!\
    \ s #\\a)))\n    (string-set! s #\\a)))\n", "  (if (string? s)\n    (if (string-length\
    \ s)\n      (let ((i (string-index s #\\space)))\n        (if (string-length s)\n\
    \          (if (string-index s #\\space)\n            (string-set! s i (string-map\
    \ (lambda (c) (if (char? c) (string-ref c #\\space) (string-ref c #\\space)) (string-ref\
    \ s i))) (string-set! s i (string-length s))))\n          (string-set! s (string-length\
    \ s))))\n    (string-set! s (string-length s))))\n", "  (if (string? s)\n    (if\
    \ (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if (< i\
    \ 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set!\
    \ s i i)))\n    (string-set! s #\\A)))\n", "  (cond\n    [(string? s) (string-set!\
    \ s (string-map (lambda (c) (if (char? c) (string-ref c #\"a-z\") (string-ref\
    \ c #\"A-Z\")) s)) (string-copy s))]\n    [else (string-set! s (string-map (lambda\
    \ (c) (if (char? c) (string-ref c #\"A-Z\") (string-ref c #\"a-z\"))) s))]))\n",
  "  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\\
    a)))\n        (if (string-length s)\n          (if (string-index s #\\A)\n   \
    \         (string-set! s i (string-set! s i #\\A))\n            (string-set! s\
    \ i (string-set! s i #\\a)))\n          (string-set! s i (string-set! s i #\\\
    a))))\n      (string-set! s i #\\a)))\n  (string s)))\n", "  (cond\n    [(string?\
    \ s) (string-set! s (string-map (lambda (c) (if (char? c) (string-ref c \"a-z\"\
    ) (string-ref c \"A-Z\"))) s))]\n    [else (string-set! s (string-map (lambda\
    \ (c) (if (char? c) (string-ref c \"a-z\") (string-ref c \"A-Z\"))) s))]))\n",
  "  (cond\n    ((null? s) \"\")\n    (else\n      (let ((i (string-index s 0)))\n\
    \        (if (string-ci? s i)\n          (string-set! s i (string-ci? s i) (string-upcase\
    \ s i))\n          (string-set! s i (string-ci? s i) (string-downcase s i)))))))\n",
  "  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index s #\\\
    space)))\n        (if (string? s[i])\n          (string-set! s i (string-set!\
    \ (string-ref s i) #\\space #\\space) (string-ref s i))\n          (string-set!\
    \ s i (string-set! (string-ref s i) #\\space #\\space) (string-ref s i)))\n  \
    \      (string-set! s (string-length s) #\\space)))\n    (string-set! s (string-length\
    \ s) #\\space)))\n", "  (if (string? s)\n    (if (string-length s)\n      (let\
    \ ((i (string-index s #\\a)))\n        (if (string-length s)\n          (if (eq?\
    \ i 0)\n            (string-set! s #\\A)\n            (string-set! s #\\a))\n\
    \          (string-set! s #\\A)\n          (string-set! s #\\a)))\n        (string-set!\
    \ s #\\a)))\n    (string-set! s #\\a)))\n", "  (if (string? s)\n    (if (string-length\
    \ s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n\
    \          (if (eq? i 0)\n            (string-set! s #\\A)\n            (string-set!\
    \ s #\\a))\n          (string-set! s #\\A)\n          (string-set! s #\\a))))\n\
    \    (string-set! s #\\A)\n    (string-set! s #\\a)))\n", "  (if (string? s)\n\
    \    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n        (if\
    \ (< i 0)\n          (string-set! s i (- (string-length s) i)))\n        (string-set!\
    \ s i i)))\n    (string-set! s #\\a)))\n", "  (if (string? s)\n    (if (string-length\
    \ s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set!\
    \ s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set!\
    \ s #\\A)))\n", "  (if (string? s)\n    (if (string-length s)\n      (let ((i\
    \ (string-index s #\\a)))\n        (if (string-length s)\n          (if (eq? i\
    \ 0)\n            (string-set! s #\\A)\n            (string-set! s #\\a))\n  \
    \        (string-set! s #\\A)\n          (string-set! s #\\a))))\n    (string-set!\
    \ s #\\A)\n    (string-set! s #\\a)))\n", "  (if (string? s)\n    (if (string-length\
    \ s)\n      (let ((i (string-index s #\\a)))\n        (if (< i 0)\n          (string-set!\
    \ s i (- (string-length s) i)))\n        (string-set! s i i)))\n    (string-set!\
    \ s #\\a)))\n", "  (if (string? s)\n    (if (string-length s)\n      (let ((i\
    \ (string-index s #\\a)))\n        (if (< i 0)\n          (string-set! s i (-\
    \ (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\\
    a)))\n", "  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index\
    \ s #\\space)))\n        (if (< i 0)\n          (string-set! s i (- (string-length\
    \ s) i)))\n        (string-set! s i (- i 1))\n        (string-set! s i (+ i 1))))\n\
    \    (string-set! s #\\space)))\n", "  (cond\n    ((null? s) \"\")\n    ((char?\
    \ s) (if (string-ci=? #\"a-zA-Z\" s) (string-ci-upcase s) (string-ci-downcase\
    \ s)))\n    (string-ci-upcase s)\n  )\n)\n", "  (cond\n    ((string? s)\n    \
    \  (if (string-length s)\n        (string-map\n          (lambda (c)\n       \
    \     (cond\n              ((char=? c #\\\\a)\n                (string-set! c\
    \ #\\\\A)\n              ((char=? c #\\\\A)\n                (string-set! c #\\\
    \\a)\n              ((char=? c #\\\\a)\n                (string-set! c #\\\\A)))\n\
    \              (else\n                (string-set! c c))))\n          s)))\n \
    \   (else\n      (string-set! s #\\\\a)))\n", "  (if (string? s)\n    (if (string-length\
    \ s)\n      (let ((i (string-index s #\\a)))\n        (if (string-length s)\n\
    \          (let ((j (string-index s #\\A)))\n            (if (string-length s)\n\
    \              (let ((k (string-index s #\\c)))\n                (if (string-length\
    \ s)\n                  (let ((l (string-index s #\\C)))\n                   \
    \ (if (string-length s)\n                      (let ((m (string-index s #\\d)))\n\
    \                        (if (string-length s)\n                          (let\
    \ ((n (string-index s #\\D)))\n                            (if (string-length\
    \ s)\n                              (let ((o (string-index s #\\e)))\n       \
    \                         (if (string-length s)\n                            \
    \      (let ((p (string-index s #\\E)))\n                                    (if\
    \ (string-length s)\n                                      (let ((q (string-index\
    \ s #\\f)))\n                                        (if (string-length s)\n \
    \                                         (let ((r (string-index s #\\F)))\n \
    \                                           (if (string-length s)\n          \
    \                                    (let ((s (string-index s #\\g)))\n      \
    \                                          (if (string-length s)\n           \
    \                                       (let ((t (string-index s #\\G)))\n   \
    \                                                 (if (string-length s)\n    \
    \                                                  (let ((u (string-index s #\\\
    h)))\n                                                        (if (string-length\
    \ s)\n                                                          (let ((v (string-index\
    \ s #\\H)))\n                                                            (if (string-length\
    \ s)\n                                                              (let ((w (string-index\
    \ s #\\i)))\n                                                                (if\
    \ (string-length s)\n                                                        \
    \          (let ((x (string-index s #\\I)))\n                                \
    \                                    (if (string-length s)\n                 \
    \                                                     (let ((y (string-index s\
    \ #\\j)))\n                                                                  \
    \      (if", "  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index\
    \ s #\\a)))\n        (if (< i 0)\n          (string-set! s i (- (string-length\
    \ s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\a)))\n", "  (cond\n\
    \    [(string? s) (string-set! s (string-map (lambda (x) (if (char? x) (string-ref\
    \ x (if (char? x) (string-upcase x) (string-downcase x))))) s)]\n    [else (string-set!\
    \ s (string-map (lambda (x) (if (char? x) (string-downcase x) (string-upcase x)))))\
    \ s]\n  ))\n", "  (if (string? s)\n    (string-set! s\n      (if (string-ci? s)\n\
    \        (string-map!\n          (lambda (c)\n            (if (char? c)\n    \
    \          (string-ci? c)\n              (string-ci? (char->integer c))))\n  \
    \        s)\n        (string-ci? s)))\n    s))\n", "  (cond\n    [(string? s)\
    \ (string-set! s (string-map (lambda (c) (if (char? c) (string-ref c #\"a-z\"\
    ) (string-ref c #\"A-Z\"))) s)]\n    [(string? s) (string-set! s (string-map (lambda\
    \ (c) (if (char? c) (string-ref c #\"A-Z\") (string-ref c #\"a-z\"))) s)]\n  \
    \  [else (string-set! s (string-map (lambda (c) (if (char? c) (string-ref c #\"\
    A-Z\") (string-ref c #\"a-z\"))) s) \"\")]))\n", "  (if (string? s)\n    (if (string-length\
    \ s)\n      (let ((i (string-index s #\\space)))\n        (if (string-length s)\n\
    \          (if (string-char s i)\n            (string-set! s i #\\space)\n   \
    \         (string-set! s i #\\space)\n            (string-set! s i #\\space)\n\
    \            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n\
    \            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n\
    \            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n\
    \            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n\
    \            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n\
    \            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n\
    \            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n\
    \            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n\
    \            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n\
    \            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n\
    \            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n\
    \            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n\
    \            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n\
    \            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n\
    \            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n\
    \            (string-set! s i #\\space)\n            (string-set! s i #\\space)\n\
    \            (", "  (if (string? s)\n    (if (string-length s)\n      (let ((i\
    \ (string-index s #\\a)))\n        (if (<= i 0)\n          (string-set! s i (-\
    \ (string-length s) i)))\n        (string-set! s i i)))\n    (string-set! s #\\\
    a)))\n", "  (if (string? s)\n    (if (string-length s)\n      (let ((i (string-index\
    \ s #\\a)))\n        (if (string-length s)\n          (if (eq? (string-ref s i)\
    \ #\\a)\n            (string-set! s i #\\A)\n            (string-set! s i #\\\
    a))\n          (string-set! s i #\\A)))\n        (string-set! s i #\\a)))\n  \
    \  (string-set! s #\\A)))\n", "  (if (string? s)\n    (let ((i (string-index s\
    \ #\\space)))\n      (if (string? s)\n        (if (< i 0)\n          (string-set!\
    \ s i (- (string-length s) i)))\n        (string-set! s i (- i 1))))\n    (string-set!\
    \ s #\\space)))\n", "  (cond\n    [(string? s) (string-set! s (string-map (lambda\
    \ (c) (if-letter c (if-lower-case c (if-upper-case c (string-ref s (string-length\
    \ s) - 1)))) (string-ref s 0))) (string-copy s))]\n    [else (string-set! s (string-map\
    \ (lambda (c) (if-letter c (if-lower-case c (if-upper-case c (string-ref s (string-length\
    \ s) - 1)))) (string-ref s 0))) (string-copy s))]))\n", "  (if (string? s)\n \
    \   (if (string-length s)\n      (let ((i (string-index s #\\space)))\n      \
    \  (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n       \
    \ (let ((c (string-ref s i)))\n          (if (char-alphabetic? c)\n          \
    \  (string-set! c (if (char-lower-case? c) #\\upcase #\\downcase) c)\n       \
    \     (string-set! s (string-copy! s i (+ i 1))))))))\n  (s)))\n", "  (if (string?\
    \ s)\n    (if (string-length s)\n      (let ((i (string-index s #\\space)))\n\
    \        (if (string-length s)\n          (if (string-char s i)\n            (string-set!\
    \ s i (string-set! (string-substring s i) #\\space #\\space))\n            (string-set!\
    \ s (string-substring s 0 i)))\n          (string-set! s (string-substring s 0\
    \ i))))\n      (string-set! s (string-substring s 0 (string-length s))))\n   \
    \ (string-set! s (string-substring s 0 (string-length s))))\n)\n", "  (if (string?\
    \ s)\n    (if (string-length s)\n      (let ((i (string-index s #\\a)))\n    \
    \    (if (< i 0)\n          (string-set! s i (- (string-length s) i)))\n     \
    \   (string-set! s i i)))\n    (string-set! s #\\a)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
