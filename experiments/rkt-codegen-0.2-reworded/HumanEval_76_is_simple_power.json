{
  "name": "HumanEval_76_is_simple_power",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of n and false in other cases.\n;; x is a simple power of n if n**int=x\n;; For example:\n;; >>> (is_simple_power 1 4)\n;; true\n;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; true\n;; >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false\n(define (is_simple_power x n)\n",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)",
  "completions": [
    "  (equal? (pow n x) x))\n\n;; Your task is to write a function that returns true if a number x is a square\n;; number and false in other cases.\n;; x is a square number if x**2=x\n;; For example:\n;; >>> (is_square_number 1)\n;; true\n;; >>> (is_square_number 2)\n;; true\n;; >>> (is_square_number 3)\n;; false\n;; >>> (is_square_number 4)\n;; true\n;; >>> (is_square_number 5)\n;; false",
    "  (if (eq? n 0)\n    true\n    (and\n      (eq? x 1)\n      (false)\n      (eq? n 1)\n      (true)\n      (eq? n 2)\n      (true)\n      (eq? n 3)\n      (false)\n      (eq? n 4)\n      (true)\n      (eq? n 5)\n      (false)\n      (eq? n 6)\n      (false)\n      (eq? n 7)\n      (false)\n      (eq? n 8)\n      (true)\n      (eq? n 9)\n      (false)\n      (eq? n 10)\n      (false)\n      (eq? n 11)\n      (false)\n      (eq? n 12)\n      (false)\n      (eq? n 13)\n      (false)\n      (eq? n 14)\n      (false)\n      (eq? n 15)\n      (false)\n      (eq? n 16)\n      (false)\n      (eq? n 17)\n      (false)\n      (eq? n 18)\n      (false)\n      (eq? n 19)\n      (false)\n      (eq? n 20)\n      (false)\n      (eq? n 21)\n      (false)\n      (eq? n 22)\n      (false)\n      (eq? n 23)\n      (false)\n      (eq? n 24)\n      (false)\n      (eq? n 25)\n      (false)\n      (eq? n 26)\n      (false)\n      (eq? n 27)\n      (false)\n      (eq? n 28)\n      (false)\n      (eq? n 29)\n      (false)\n      (eq? n 30)\n      (false)\n      (eq? n 31)\n      (false)\n      (eq? n 32)\n      (false)\n      (eq? n 33)\n      (false)\n      (eq? n 34)\n      (false)\n      (eq? n 35)\n      (false)\n      (eq? n 36)\n      (false)\n      (eq? n 37)\n      (false)\n      ",
    "  (cond\n    ((= x 1) true)\n    ((= x 0) false)\n    ((= n 1) false)\n    ((= n 0) false)\n    (else\n      (and\n        (= (modulo x n) 0)\n        (= (quotient x n) 1)))\n  )\n)\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of 2 and false in other cases.\n;; x is a simple power of 2 if 2**int=x\n;; For example:\n;; >>> (is_simple_power 2 4)\n;; false\n;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; false\n;; >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false",
    "  (if (eq? x n)\n    true\n    false))\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of n and false in other cases.\n;; x is a simple power of n if n**int=x\n;; For example:\n;; >>> (is_simple_power 1 4)\n;; true\n;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; true\n;; >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false",
    "  (cond\n    [(zero? n) true]\n    [(zero? x) false]\n    [(zero? (expt n x)) true]\n    [false]\n  )\n)\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of n and false in other cases.\n;; x is a simple power of n if n**int=x\n;; For example:\n;; >>> (is_simple_power 1 4)\n;; true\n;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; true\n;; >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false",
    "  (cond\n    ((= x 1) true)\n    ((= x 0) false)\n    (else\n      (and\n        (= n 2)\n        (= x (expt n x)))\n      false)\n    (else\n      (and\n        (= n 2)\n        (= x (expt n x)))\n      true)\n    )\n)\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of 2 and false in other cases.\n;; x is a simple power of 2 if 2**int=x\n;; For example:\n;; >>> (is_simple_power 2 4)\n;; true\n;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 2 1)\n;; false\n;; >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false",
    "  (cond\n    ((= x 1) true)\n    ((= x 0) false)\n    (else\n      (and\n        (= n 2)\n        (= x (expt n x)))\n      )\n    )\n  )\n)\n",
    "  (cond\n    ((= x 1) true)\n    ((= x 0) false)\n    ((> x 0)\n      (and\n        (= n 1)\n        (= x (expt n x))))\n    (< x 0)\n    (and\n      (= n 2)\n      (= x (expt n x)))\n    (and\n      (> x 0)\n      (= n 2)\n      (= x (expt n x)))))\n\n;; Your function should return true if x is a simple power of n and false in\n;; other cases.",
    "  (let ((n_int (floor n)))\n    (and\n      (= n_int 1)\n      (= n_int 2)\n      (= n_int 3)\n      (= n_int 4)\n      (= n_int 5)\n      (= n_int 6)\n      (= n_int 7)\n      (= n_int 8)\n      (= n_int 9)\n      (= n_int 10)\n      (= n_int 11)\n      (= n_int 12)\n      (= n_int 13)\n      (= n_int 14)\n      (= n_int 15)\n      (= n_int 16)\n      (= n_int 17)\n      (= n_int 18)\n      (= n_int 19)\n      (= n_int 20)\n      (= n_int 21)\n      (= n_int 22)\n      (= n_int 23)\n      (= n_int 24)\n      (= n_int 25)\n      (= n_int 26)\n      (= n_int 27)\n      (= n_int 28)\n      (= n_int 29)\n      (= n_int 30)\n      (= n_int 31)\n      (= n_int 32)\n      (= n_int 33)\n      (= n_int 34)\n      (= n_int 35)\n      (= n_int 36)\n      (= n_int 37)\n      (= n_int 38)\n      (= n_int 39)\n      (= n_int 40)\n      (= n_int 41)\n      (= n_int 42)\n      (= n_int 43)\n      (= n_int 44)\n      (= n_int 45)\n      (= n_int 46)\n      (= n_int 47)\n      (= n_int 48)\n      (= n_int 49)\n      (= n_int 50)\n      (= n_int 51)\n      (= n_int 52)\n      (= n_int 53)\n      (= n_int 54)\n      (= n_int 55)\n      ",
    "  (let ((n_int (floor n)))\n    (and\n      (= (modulo x n) 0)\n      (= n_int 1)\n      (= (modulo x (pow n_int n)) 0)))\n)\n",
    "  (equal? (pow n x) x))\n\n;; Your function should return true if x is a simple power of n and false in\n;; other cases.\n",
    "  (cond\n    ((= n 1) true)\n    ((= n 2) true)\n    ((= n 3) true)\n    ((= n 4) true)\n    ((= n 5) true)\n    ((= n 6) true)\n    ((= n 7) true)\n    ((= n 8) true)\n    ((= n 9) true)\n    ((= n 10) true)\n    ((= n 11) true)\n    ((= n 12) true)\n    ((= n 13) true)\n    ((= n 14) true)\n    ((= n 15) true)\n    ((= n 16) true)\n    ((= n 17) true)\n    ((= n 18) true)\n    ((= n 19) true)\n    ((= n 20) true)\n    ((= n 21) true)\n    ((= n 22) true)\n    ((= n 23) true)\n    ((= n 24) true)\n    ((= n 25) true)\n    ((= n 26) true)\n    ((= n 27) true)\n    ((= n 28) true)\n    ((= n 29) true)\n    ((= n 30) true)\n    ((= n 31) true)\n    ((= n 32) true)\n    ((= n 33) true)\n    ((= n 34) true)\n    ((= n 35) true)\n    ((= n 36) true)\n    ((= n 37) true)\n    ((= n 38) true)\n    ((= n 39) true)\n    ((= n 40) true)\n    ((= n 41) true)\n    ((= n 42) true)\n    ((= n 43) true)\n    ((= n 44) true)\n    ((= n 45) true)\n    ((= n 46) true)\n    ((= n 47) true)\n    ((= n 48) true)\n    ((= n 49) true)\n    ((= n 50) true)\n    ((= n 51) true)\n    ((= n 52) true)\n    ((= n 53) true)\n    ((= n 54) true)\n    ((= n 55) true)\n    ((= n 56) true)\n    ((= n",
    "  (cond\n    [(zero? x) false]\n    [(zero? n) false]\n    [(zero? (expt n x)) true]\n    [false]\n  )\n)\n\n;; Your task is to write a function that returns true if a number x is a\n;; perfect power of n and false in other cases.\n;; x is a perfect power of n if n**int=x and n**int=x**int\n;; For example:\n;; >>> (is_perfect_power 1 4)\n;; false\n;; >>> (is_perfect_power 2 2)\n;; true\n;; >>> (is_perfect_power 8 2)\n;; false\n;; >>> (is_perfect_power 3 2)\n;; false\n;; >>> (is_perfect_power 3 1)\n;; false\n;; >>> (is_perfect_power 5 3)\n;; true",
    "  (equal? (power n x) x))\n\n;; You can test your function with some values:",
    "  (let ((n_int (floor n)))\n    (and\n      (= (modulo x n) 0)\n      (= n_int 1)\n      (= (modulo x (pow n_int n)) 0)\n      (= (modulo x (pow n_int (sub 1 n_int))) 0)\n      (= (modulo x (pow n_int (sub 2 n_int))) 0)\n      (= (modulo x (pow n_int (sub 3 n_int))) 0)\n      (= (modulo x (pow n_int (sub 4 n_int))) 0)\n      (= (modulo x (pow n_int (sub 5 n_int))) 0)\n      (= (modulo x (pow n_int (sub 6 n_int))) 0)\n      (= (modulo x (pow n_int (sub 7 n_int))) 0)\n      (= (modulo x (pow n_int (sub 8 n_int))) 0)\n      (= (modulo x (pow n_int (sub 9 n_int))) 0)\n      (= (modulo x (pow n_int (sub 10 n_int))) 0)\n      (= (modulo x (pow n_int (sub 11 n_int))) 0)\n      (= (modulo x (pow n_int (sub 12 n_int))) 0)\n      (= (modulo x (pow n_int (sub 13 n_int))) 0)\n      (= (modulo x (pow n_int (sub 14 n_int))) 0)\n      (= (modulo x (pow n_int (sub 15 n_int))) 0)\n      (= (modulo x (pow n_int (sub 16 n_int))) 0)\n      (= (modulo x (pow n_int (sub 17 n_int))) 0)\n      (= (modulo x (pow n_int (sub 18 n_int))) 0)\n      (= (modulo x (pow n_int (sub 19 n_int))) 0)\n      (= (modulo x (pow n_int (sub 20 n_int)))",
    "  (equal? (pow n x) x))\n\n;; Your task is to write a function that returns true if a number x is a square\n;; number and false in other cases.\n;; x is a square number if x=n**2\n;; For example:\n;; >>> (is_square_number 1)\n;; true\n;; >>> (is_square_number 2)\n;; true\n;; >>> (is_square_number 3)\n;; false\n;; >>> (is_square_number 4)\n;; true\n;; >>> (is_square_number 5)\n;; false",
    "  (let ((n_int (floor n)))\n    (and\n      (= (modulo x n) 0)\n      (= (modulo n n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo (pow n n_int)) x))))\n",
    "  (let ((n_int (floor n)))\n    (and\n      (= n_int 0)\n      (= n_int 1)\n      (= n_int 2)\n      (= n_int 3)\n      (= n_int 4)\n      (= n_int 5)\n      (= n_int 6)\n      (= n_int 7)\n      (= n_int 8)\n      (= n_int 9)\n      (= n_int 10)\n      (= n_int 11)\n      (= n_int 12)\n      (= n_int 13)\n      (= n_int 14)\n      (= n_int 15)\n      (= n_int 16)\n      (= n_int 17)\n      (= n_int 18)\n      (= n_int 19)\n      (= n_int 20)\n      (= n_int 21)\n      (= n_int 22)\n      (= n_int 23)\n      (= n_int 24)\n      (= n_int 25)\n      (= n_int 26)\n      (= n_int 27)\n      (= n_int 28)\n      (= n_int 29)\n      (= n_int 30)\n      (= n_int 31)\n      (= n_int 32)\n      (= n_int 33)\n      (= n_int 34)\n      (= n_int 35)\n      (= n_int 36)\n      (= n_int 37)\n      (= n_int 38)\n      (= n_int 39)\n      (= n_int 40)\n      (= n_int 41)\n      (= n_int 42)\n      (= n_int 43)\n      (= n_int 44)\n      (= n_int 45)\n      (= n_int 46)\n      (= n_int 47)\n      (= n_int 48)\n      (= n_int 49)\n      (= n_int 50)\n      (= n_int 51)\n      (= n_int 52)\n      (= n_int 53)\n      (= n_int 54)\n      ",
    "  (let ((n_int (floor n)))\n    (and\n      (= (mod x n) 0)\n      (= n_int 1)\n      (= (mod x (expt n_int 2)) 0)))\n)\n",
    "  (let ((result (equal? (expt n x) x)))\n    (if result\n      (display \"true\")\n      (display \"false\")))\n  )\n\n;; You can test your function with this command:\n;; is_simple_power 3 2\n;; is_simple_power 3 1\n;; is_simple_power 5 3\n;; is_simple_power 2 2\n;; is_simple_power 1 4\n;; is_simple_power 8 2\n;; is_simple_power 4 2\n;; is_simple_power 8 3\n;; is_simple_power 2 3\n;; is_simple_power 4 3\n;; is_simple_power 3 4\n;; is_simple_power 2 4\n;; is_simple_power 4 4\n;; is_simple_power 8 4\n;; is_simple_power 4 5\n;; is_simple_power 8 5\n;; is_simple_power 2 5\n;; is_simple_power 4 6\n;; is_simple_power 8 6\n;; is_simple_power 2 6\n;; is_simple_power 4 7\n;; is_simple_power 8 7\n;; is_simple_power 2 7\n;; is_simple_power 4 8\n;; is_simple_power 8 8\n;; is_simple_power 2 8\n;; is_simple_power 4 9\n;; is_simple_power 8 9\n;; is_simple_power 2 9\n;; is_simple_power 4 10\n;; is_simple_power 8 10\n;; is_simple_power 2 10\n;; is_simple_power 4 11\n;; is_simple_power 8 11\n;; is_simple_power 2 11\n;; is_simple_power 4 12\n;; is_simple_power 8 12\n;; is_simple_power 2 12\n;; is_simple_power 4 13\n;; is_simple_power 8 13\n;; is_simple_power 2 13\n;; is_simple_power 4 14\n;; is_simple_power 8 14\n;; is_simple_power 2 14\n;; is_simple_power 4 15\n;; is_simple_power 8 15\n;; is_simple_power 2 15\n;; is_simple_power 4 16\n;; is_simple_power 8 16\n;; is_simple_power 2 16\n;; is_simple_power 4 17\n;;",
    "  (and\n    (= x 1)\n    (= n 1)\n    (not (and\n      (< x 0)\n      (> x 1)\n      (= n 2)\n      (= x (expt n 2))\n      (= n (expt x 2))))))\n",
    "  (if (eq? x n)\n    true\n    false))\n\n;; Your task is to write a function that returns true if a number x is a\n;; perfect power of n and false in other cases.\n;; x is a perfect power of n if n**int=x and n**int is a prime number\n;; For example:\n;; >>> (is_perfect_power 2 4)\n;; true\n;; >>> (is_perfect_power 2 2)\n;; false\n;; >>> (is_perfect_power 2 3)\n;; false\n;; >>> (is_perfect_power 2 5)\n;; false\n;; >>> (is_perfect_power 2 6)\n;; true\n;; >>> (is_perfect_power 2 7)\n;; false\n;; >>> (is_perfect_power 2 8)\n;; false\n;; >>> (is_perfect_power 2 9)\n;; false\n;; >>> (is_perfect_power 2 10)\n;; false\n;; >>> (is_perfect_power 2 11)\n;; true\n;; >>> (is_perfect_power 2 12)\n;; false\n;; >>> (is_perfect_power 2 13)\n;; false\n;; >>> (is_perfect_power 2 14)\n;; false\n;; >>> (is_perfect_power 2 15)\n;; false\n;; >>> (is_perfect_power 2 16)\n;; false\n;; >>> (is_perfect_power 2 17)\n;; false\n;; >>> (is_perfect_power 2 18)\n;; false\n;; >>> (is_perfect_power 2 19)\n;; false\n;; >>> (is_perfect_power 2 20)\n;; false\n;; >>> (is_perfect_power 2 21)\n;; false\n;; >>> (is_perfect_power 2 22)\n;; false\n;; >>> (is_perfect_power 2 23)\n;; false\n;; >>> (is_perfect_power 2 24)\n;; false\n;; >>> (is_perfect_power 2 25)\n;; false\n;; >>> (is_perfect_power 2 26)\n;; false\n;; >>> (is_perfect_power 2 27)\n;; false\n;; >>> (is_perfect_power 2 28)\n;; false\n;; >>> (is_perfect_power 2 29)\n;; false\n;; >>> (is_perfect_power 2 30)\n;; false\n;;",
    "  (cond\n    [(zero? n) true]\n    [(zero? x) false]\n    [(zero? (expt n x)) true]\n    [false]\n  )\n)\n",
    "  (let ((n_int (floor n)))\n    (and\n      (= n_int 1)\n      (= n_int 2)\n      (= n_int 3)\n      (= n_int 4)\n      (= n_int 5)\n      (= n_int 6)\n      (= n_int 7)\n      (= n_int 8)\n      (= n_int 9)\n      (= n_int 10)\n      (= n_int 11)\n      (= n_int 12)\n      (= n_int 13)\n      (= n_int 14)\n      (= n_int 15)\n      (= n_int 16)\n      (= n_int 17)\n      (= n_int 18)\n      (= n_int 19)\n      (= n_int 20)\n      (= n_int 21)\n      (= n_int 22)\n      (= n_int 23)\n      (= n_int 24)\n      (= n_int 25)\n      (= n_int 26)\n      (= n_int 27)\n      (= n_int 28)\n      (= n_int 29)\n      (= n_int 30)\n      (= n_int 31)\n      (= n_int 32)\n      (= n_int 33)\n      (= n_int 34)\n      (= n_int 35)\n      (= n_int 36)\n      (= n_int 37)\n      (= n_int 38)\n      (= n_int 39)\n      (= n_int 40)\n      (= n_int 41)\n      (= n_int 42)\n      (= n_int 43)\n      (= n_int 44)\n      (= n_int 45)\n      (= n_int 46)\n      (= n_int 47)\n      (= n_int 48)\n      (= n_int 49)\n      (= n_int 50)\n      (= n_int 51)\n      (= n_int 52)\n      (= n_int 53)\n      (= n_int 54)\n      (= n_int 55)\n      ",
    "  (equal? (power n x) x))\n\n;; You can use the function is_simple_power to test your function.\n;; >>> (is_simple_power 3 2)\n;; true\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false\n;; >>> (is_simple_power 5 5)\n;; true\n;; >>> (is_simple_power 5 6)\n;; false\n;; >>> (is_simple_power 5 7)\n;; false\n;; >>> (is_simple_power 5 8)\n;; false\n;; >>> (is_simple_power 5 9)\n;; false\n;; >>> (is_simple_power 5 10)\n;; false\n;; >>> (is_simple_power 5 11)\n;; false\n;; >>> (is_simple_power 5 12)\n;; false\n;; >>> (is_simple_power 5 13)\n;; false\n;; >>> (is_simple_power 5 14)\n;; false\n;; >>> (is_simple_power 5 15)\n;; false\n;; >>> (is_simple_power 5 16)\n;; false\n;; >>> (is_simple_power 5 17)\n;; false\n;; >>> (is_simple_power 5 18)\n;; false\n;; >>> (is_simple_power 5 19)\n;; false\n;; >>> (is_simple_power 5 20)\n;; false\n;; >>> (is_simple_power 5 21)\n;; false\n;; >>> (is_simple_power 5 22)\n;; false\n;; >>> (is_simple_power 5 23)\n;; false\n;; >>> (is_simple_power 5 24)\n;; false\n;; >>> (is_simple_power 5 25)\n;; false\n;; >>> (is_simple_power 5 26)\n;; false\n;; >>> (is_simple_power 5 27)\n;; false\n;; >>> (is_simple_power 5 28)\n;; false\n;; >>> (is_simple_power 5 29)\n;; false\n;; >>> (is_simple_power 5 30)\n;; false\n;; >>> (is_simple_power 5 31)\n;; false\n;; >>> (is_simple_power 5 32)\n;; false\n;; >>> (is_simple_power 5 33)\n;; false\n;; >>>",
    "  (let ((n_int (floor n)))\n    (and\n      (= n_int 1)\n      (= n_int 2)\n      (= n_int 3)\n      (= n_int 4)\n      (= n_int 5)\n      (= n_int 6)\n      (= n_int 7)\n      (= n_int 8)\n      (= n_int 9)\n      (= n_int 10)\n      (= n_int 11)\n      (= n_int 12)\n      (= n_int 13)\n      (= n_int 14)\n      (= n_int 15)\n      (= n_int 16)\n      (= n_int 17)\n      (= n_int 18)\n      (= n_int 19)\n      (= n_int 20)\n      (= n_int 21)\n      (= n_int 22)\n      (= n_int 23)\n      (= n_int 24)\n      (= n_int 25)\n      (= n_int 26)\n      (= n_int 27)\n      (= n_int 28)\n      (= n_int 29)\n      (= n_int 30)\n      (= n_int 31)\n      (= n_int 32)\n      (= n_int 33)\n      (= n_int 34)\n      (= n_int 35)\n      (= n_int 36)\n      (= n_int 37)\n      (= n_int 38)\n      (= n_int 39)\n      (= n_int 40)\n      (= n_int 41)\n      (= n_int 42)\n      (= n_int 43)\n      (= n_int 44)\n      (= n_int 45)\n      (= n_int 46)\n      (= n_int 47)\n      (= n_int 48)\n      (= n_int 49)\n      (= n_int 50)\n      (= n_int 51)\n      (= n_int 52)\n      (= n_int 53)\n      (= n_int 54)\n      (= n_int 55)\n      ",
    "  (cond ((= x 1) true)\n        ((= x 0) false)\n        (else\n          (and (exact? x)\n               (exact? n)\n               (= (* x n) x))))\n)\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of 2 and false in other cases.\n;; x is a simple power of 2 if 2**int=x\n;; For example:\n;; >>> (is_simple_power 2 4)\n;; false\n;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; false\n;; >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false",
    "  (if (eq? x n)\n    true\n    false))\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of n and false in other cases.\n;; x is a simple power of n if n**int=x\n;; For example:\n;; >>> (is_simple_power 1 4)\n;; true\n;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; true\n;; >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false",
    "  (equal? (power n x) x))\n\n;; You can test your function with some values:",
    "  (if (eq? x n)\n    true\n    false))\n\n;; Your task is to write a function that returns true if a number x is a square\n;; number and false in other cases.\n;; x is a square number if x=n**2\n;; For example:\n;; >>> (is_square_number 1)\n;; true\n;; >>> (is_square_number 2)\n;; false\n;; >>> (is_square_number 3)\n;; false\n;; >>> (is_square_number 4)\n;; true\n;; >>> (is_square_number 5)\n;; false",
    "  (let ((n_int (floor n)))\n    (and\n      (= n_int 1)\n      (= n_int 2)\n      (= n_int 3)\n      (= n_int 4)\n      (= n_int 5)\n      (= n_int 6)\n      (= n_int 7)\n      (= n_int 8)\n      (= n_int 9)\n      (= n_int 10)\n      (= n_int 11)\n      (= n_int 12)\n      (= n_int 13)\n      (= n_int 14)\n      (= n_int 15)\n      (= n_int 16)\n      (= n_int 17)\n      (= n_int 18)\n      (= n_int 19)\n      (= n_int 20)\n      (= n_int 21)\n      (= n_int 22)\n      (= n_int 23)\n      (= n_int 24)\n      (= n_int 25)\n      (= n_int 26)\n      (= n_int 27)\n      (= n_int 28)\n      (= n_int 29)\n      (= n_int 30)\n      (= n_int 31)\n      (= n_int 32)\n      (= n_int 33)\n      (= n_int 34)\n      (= n_int 35)\n      (= n_int 36)\n      (= n_int 37)\n      (= n_int 38)\n      (= n_int 39)\n      (= n_int 40)\n      (= n_int 41)\n      (= n_int 42)\n      (= n_int 43)\n      (= n_int 44)\n      (= n_int 45)\n      (= n_int 46)\n      (= n_int 47)\n      (= n_int 48)\n      (= n_int 49)\n      (= n_int 50)\n      (= n_int 51)\n      (= n_int 52)\n      (= n_int 53)\n      (= n_int 54)\n      (= n_int 55)\n      ",
    "  (cond\n    [(zero? n) true]\n    [(zero? x) false]\n    [(zero? (expt n x)) true]\n    [false]\n  )\n)\n",
    "  (let ((n_int (floor n)))\n    (and\n      (= (modulo x n) 0)\n      (= n_int 1)\n      (= (modulo x (pow n n_int)) 0)))\n)\n",
    "  (cond\n    [(zero? n) true]\n    [(zero? x) false]\n    [(zero? (expt n x)) true]\n    [false]\n  )\n)\n",
    "  (cond\n    ((= n 1) true)\n    ((= n 2) true)\n    ((= n 3) true)\n    ((= n 4) true)\n    ((= n 5) true)\n    ((= n 6) true)\n    ((= n 7) true)\n    ((= n 8) true)\n    ((= n 9) true)\n    ((= n 10) true)\n    ((= n 11) true)\n    ((= n 12) true)\n    ((= n 13) true)\n    ((= n 14) true)\n    ((= n 15) true)\n    ((= n 16) true)\n    ((= n 17) true)\n    ((= n 18) true)\n    ((= n 19) true)\n    ((= n 20) true)\n    ((= n 21) true)\n    ((= n 22) true)\n    ((= n 23) true)\n    ((= n 24) true)\n    ((= n 25) true)\n    ((= n 26) true)\n    ((= n 27) true)\n    ((= n 28) true)\n    ((= n 29) true)\n    ((= n 30) true)\n    ((= n 31) true)\n    ((= n 32) true)\n    ((= n 33) true)\n    ((= n 34) true)\n    ((= n 35) true)\n    ((= n 36) true)\n    ((= n 37) true)\n    ((= n 38) true)\n    ((= n 39) true)\n    ((= n 40) true)\n    ((= n 41) true)\n    ((= n 42) true)\n    ((= n 43) true)\n    ((= n 44) true)\n    ((= n 45) true)\n    ((= n 46) true)\n    ((= n 47) true)\n    ((= n 48) true)\n    ((= n 49) true)\n    ((= n 50) true)\n    ((= n 51) true)\n    ((= n 52) true)\n    ((= n 53) true)\n    ((= n 54) true)\n    ((= n 55) true)\n    ((= n 56) true)\n    ((= n",
    "  (and\n    (= n 1)\n    (= x 1)\n    (= (expt n x) x)))\n",
    "  (equal? (pow n x) x))\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of 2 and false in other cases.\n;; x is a simple power of 2 if 2**int=x\n;; For example:\n;; >>> (is_simple_power 2)\n;; true\n;; >>> (is_simple_power 3)\n;; false\n;; >>> (is_simple_power 4)\n;; false\n;; >>> (is_simple_power 5)\n;; false\n;; >>> (is_simple_power 6)\n;; false\n;; >>> (is_simple_power 7)\n;; false\n;; >>> (is_simple_power 8)\n;; false\n;; >>> (is_simple_power 9)\n;; false\n;; >>> (is_simple_power 10)\n;; false\n;; >>> (is_simple_power 11)\n;; false\n;; >>> (is_simple_power 12)\n;; false\n;; >>> (is_simple_power 13)\n;; false\n;; >>> (is_simple_power 14)\n;; false\n;; >>> (is_simple_power 15)\n;; false\n;; >>> (is_simple_power 16)\n;; false\n;; >>> (is_simple_power 17)\n;; false\n;; >>> (is_simple_power 18)\n;; false\n;; >>> (is_simple_power 19)\n;; false\n;; >>> (is_simple_power 20)\n;; false\n;; >>> (is_simple_power 21)\n;; false\n;; >>> (is_simple_power 22)\n;; false\n;; >>> (is_simple_power 23)\n;; false\n;; >>> (is_simple_power 24)\n;; false\n;; >>> (is_simple_power 25)\n;; false\n;; >>> (is_simple_power 26)\n;; false\n;; >>> (is_simple_power 27)\n;; false\n;; >>> (is_simple_power 28)\n;; false\n;; >>> (is_simple_power 29)\n;; false\n;; >>> (is_simple_power 30)\n;; false\n;; >>> (is_simple_power 31)\n;; false\n;; >>> (is_simple_power 32)\n;; false\n;; >>> (is_simple_power 33)\n;; false\n",
    "  (cond\n    ((= x 1) true)\n    ((= x 0) false)\n    ((= (mod x n) 0) true)\n    (else false)\n  )\n)\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of n and false in other cases.\n;; x is a simple power of n if n**int=x\n;; For example:\n;; >>> (is_simple_power 1 4)\n;; true\n;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; true\n;; >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false",
    "  (cond\n    [(zero? x) false]\n    [(zero? n) false]\n    [(zero? (expt n x)) true]\n    [false]\n  )\n)\n",
    "  (if (eq? n 0)\n    #t\n    (if (eq? x 1)\n      #t\n      (if (eq? n 1)\n        #t\n        (if (eq? x n)\n          #t\n          (if (and (integer? n) (integer? x))\n            (= (* x n) x)\n            (= (* x n) x))))))))\n",
    "  (cond\n    ((= n 1) true)\n    ((= n 2) true)\n    ((= n 3) true)\n    ((= n 4) true)\n    ((= n 5) true)\n    ((= n 6) true)\n    ((= n 7) true)\n    ((= n 8) true)\n    ((= n 9) true)\n    ((= n 10) true)\n    ((= n 11) true)\n    ((= n 12) true)\n    ((= n 13) true)\n    ((= n 14) true)\n    ((= n 15) true)\n    ((= n 16) true)\n    ((= n 17) true)\n    ((= n 18) true)\n    ((= n 19) true)\n    ((= n 20) true)\n    ((= n 21) true)\n    ((= n 22) true)\n    ((= n 23) true)\n    ((= n 24) true)\n    ((= n 25) true)\n    ((= n 26) true)\n    ((= n 27) true)\n    ((= n 28) true)\n    ((= n 29) true)\n    ((= n 30) true)\n    ((= n 31) true)\n    ((= n 32) true)\n    ((= n 33) true)\n    ((= n 34) true)\n    ((= n 35) true)\n    ((= n 36) true)\n    ((= n 37) true)\n    ((= n 38) true)\n    ((= n 39) true)\n    ((= n 40) true)\n    ((= n 41) true)\n    ((= n 42) true)\n    ((= n 43) true)\n    ((= n 44) true)\n    ((= n 45) true)\n    ((= n 46) true)\n    ((= n 47) true)\n    ((= n 48) true)\n    ((= n 49) true)\n    ((= n 50) true)\n    ((= n 51) true)\n    ((= n 52) true)\n    ((= n 53) true)\n    ((= n 54) true)\n    ((= n 55) true)\n    ((= n 56) true)\n    ((= n",
    "  (cond\n    [(zero? n) true]\n    [(zero? x) false]\n    [(zero? (expt n x)) true]\n    [false]\n  )\n)\n\n;; Your task is to write a function that returns true if a number x is a\n;; perfect square and false in other cases.\n;; x is a perfect square if x=n**2\n;; For example:\n;; >>> (is_perfect_square 1)\n;; true\n;; >>> (is_perfect_square 2)\n;; true\n;; >>> (is_perfect_square 3)\n;; false\n;; >>> (is_perfect_square 4)\n;; false\n;; >>> (is_perfect_square 5)\n;; false\n;; >>> (is_perfect_square 6)\n;; false\n;; >>> (is_perfect_square 7)\n;; false",
    "  (if (eq? n 0)\n    true\n    (and\n      (eq? x 1)\n      (false)\n      (eq? n 1)\n      (true)\n      (eq? n 2)\n      (true)\n      (eq? n 3)\n      (false)\n      (eq? n 4)\n      (true)\n      (eq? n 5)\n      (false)\n      (eq? n 6)\n      (false)\n      (eq? n 7)\n      (false)\n      (eq? n 8)\n      (true)\n      (eq? n 9)\n      (false)\n      (eq? n 10)\n      (false)\n      (eq? n 11)\n      (false)\n      (eq? n 12)\n      (false)\n      (eq? n 13)\n      (false)\n      (eq? n 14)\n      (false)\n      (eq? n 15)\n      (false)\n      (eq? n 16)\n      (false)\n      (eq? n 17)\n      (false)\n      (eq? n 18)\n      (false)\n      (eq? n 19)\n      (false)\n      (eq? n 20)\n      (false)\n      (eq? n 21)\n      (false)\n      (eq? n 22)\n      (false)\n      (eq? n 23)\n      (false)\n      (eq? n 24)\n      (false)\n      (eq? n 25)\n      (false)\n      (eq? n 26)\n      (false)\n      (eq? n 27)\n      (false)\n      (eq? n 28)\n      (false)\n      (eq? n 29)\n      (false)\n      (eq? n 30)\n      (false)\n      (eq? n 31)\n      (false)\n      (eq? n 32)\n      (false)\n      (eq? n 33)\n      (false)\n      (eq? n 34)\n      (false)\n      (eq? n 35)\n      (false)\n      (eq? n 36)\n      (false)\n      (eq? n 37)\n      (false)\n      ",
    "  (let ((n_int (floor n)))\n    (and\n      (= (modulo x n) 0)\n      (= n_int 1))))\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of 2 and false in other cases.\n;; x is a simple power of 2 if 2**int=x\n;; For example:\n;; >>> (is_simple_power 2)\n;; true\n;; >>> (is_simple_power 3)\n;; false\n;; >>> (is_simple_power 4)\n;; false\n;; >>> (is_simple_power 5)\n;; false\n;; >>> (is_simple_power 6)\n;; false\n;; >>> (is_simple_power 7)\n;; false",
    "  (let ((n_int (floor n)))\n    (and\n      (= n_int 1)\n      (= n_int 2)\n      (= n_int 3)\n      (= n_int 4)\n      (= n_int 5)\n      (= n_int 6)\n      (= n_int 7)\n      (= n_int 8)\n      (= n_int 9)\n      (= n_int 10)\n      (= n_int 11)\n      (= n_int 12)\n      (= n_int 13)\n      (= n_int 14)\n      (= n_int 15)\n      (= n_int 16)\n      (= n_int 17)\n      (= n_int 18)\n      (= n_int 19)\n      (= n_int 20)\n      (= n_int 21)\n      (= n_int 22)\n      (= n_int 23)\n      (= n_int 24)\n      (= n_int 25)\n      (= n_int 26)\n      (= n_int 27)\n      (= n_int 28)\n      (= n_int 29)\n      (= n_int 30)\n      (= n_int 31)\n      (= n_int 32)\n      (= n_int 33)\n      (= n_int 34)\n      (= n_int 35)\n      (= n_int 36)\n      (= n_int 37)\n      (= n_int 38)\n      (= n_int 39)\n      (= n_int 40)\n      (= n_int 41)\n      (= n_int 42)\n      (= n_int 43)\n      (= n_int 44)\n      (= n_int 45)\n      (= n_int 46)\n      (= n_int 47)\n      (= n_int 48)\n      (= n_int 49)\n      (= n_int 50)\n      (= n_int 51)\n      (= n_int 52)\n      (= n_int 53)\n      (= n_int 54)\n      (= n_int 55)\n      ",
    "  (cond\n    ((= x 1) true)\n    ((= x 0) false)\n    (else\n      (and\n        (= n 2)\n        (= x (expt n x)))\n      )\n    )\n  )\n)\n",
    "  (cond\n    ((= n 1) true)\n    ((= n 2) true)\n    ((= n 3) true)\n    ((= n 4) true)\n    ((= n 5) true)\n    ((= n 6) true)\n    ((= n 7) true)\n    ((= n 8) true)\n    ((= n 9) true)\n    ((= n 10) true)\n    ((= n 11) true)\n    ((= n 12) true)\n    ((= n 13) true)\n    ((= n 14) true)\n    ((= n 15) true)\n    ((= n 16) true)\n    ((= n 17) true)\n    ((= n 18) true)\n    ((= n 19) true)\n    ((= n 20) true)\n    ((= n 21) true)\n    ((= n 22) true)\n    ((= n 23) true)\n    ((= n 24) true)\n    ((= n 25) true)\n    ((= n 26) true)\n    ((= n 27) true)\n    ((= n 28) true)\n    ((= n 29) true)\n    ((= n 30) true)\n    ((= n 31) true)\n    ((= n 32) true)\n    ((= n 33) true)\n    ((= n 34) true)\n    ((= n 35) true)\n    ((= n 36) true)\n    ((= n 37) true)\n    ((= n 38) true)\n    ((= n 39) true)\n    ((= n 40) true)\n    ((= n 41) true)\n    ((= n 42) true)\n    ((= n 43) true)\n    ((= n 44) true)\n    ((= n 45) true)\n    ((= n 46) true)\n    ((= n 47) true)\n    ((= n 48) true)\n    ((= n 49) true)\n    ((= n 50) true)\n    ((= n 51) true)\n    ((= n 52) true)\n    ((= n 53) true)\n    ((= n 54) true)\n    ((= n 55) true)\n    ((= n 56) true)\n    ((= n",
    "  (cond\n    ((= x 1) true)\n    ((= x 0) false)\n    (else\n      (and\n        (= n 1)\n        (= (expt x n) x)))\n  ))\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of n and false in other cases.\n;; x is a simple power of n if n**int=x\n;; For example:\n;; >>> (is_simple_power 1 4)\n;; true\n;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; true\n;; >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false",
    "  (cond\n    ((= x 1) true)\n    ((= x 0) false)\n    ((> x 0)\n      (and\n        (= n 1)\n        (= x (expt n x))))\n    (< x 0)\n    (and\n      (= n 2)\n      (= x (expt n x))))\n  false)\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of n and false in other cases.\n;; x is a simple power of n if n**int=x\n;; For example:\n;; >>> (is_simple_power 1 4)\n;; true\n;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; true\n;; >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false",
    "  (equal? (power n x) x))\n\n;; Your task is to write a function that returns true if a number x is a square\n;; number and false in other cases.\n;; x is a square number if (x**2)=x\n;; For example:\n;; >>> (is_square_number 1)\n;; true\n;; >>> (is_square_number 2)\n;; true\n;; >>> (is_square_number 3)\n;; false\n;; >>> (is_square_number 4)\n;; true\n;; >>> (is_square_number 5)\n;; false",
    "  (cond\n    ((= x 1) true)\n    ((= x 0) false)\n    ((= n 1) false)\n    ((= n 0) false)\n    (and\n      (= x (* n x))\n      (= n (* x x)))\n    (else\n      false)))\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of n and false in other cases.\n;; x is a simple power of n if n**int=x\n;; For example:\n;; >>> (is_simple_power 1 4)\n;; true\n;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; true\n;; >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false",
    "  (let ((n_int (floor n)))\n    (and\n      (= n_int 1)\n      (= (mod x n) 0)\n      (= (mod x (expt n_int 2)) 0)\n      (= (mod x (expt n_int 3)) 0)\n      (= (mod x (expt n_int 4)) 0)\n      (= (mod x (expt n_int 5)) 0)\n      (= (mod x (expt n_int 6)) 0)\n      (= (mod x (expt n_int 7)) 0)\n      (= (mod x (expt n_int 8)) 0)\n      (= (mod x (expt n_int 9)) 0)\n      (= (mod x (expt n_int 10)) 0)\n      (= (mod x (expt n_int 11)) 0)\n      (= (mod x (expt n_int 12)) 0)\n      (= (mod x (expt n_int 13)) 0)\n      (= (mod x (expt n_int 14)) 0)\n      (= (mod x (expt n_int 15)) 0)\n      (= (mod x (expt n_int 16)) 0)\n      (= (mod x (expt n_int 17)) 0)\n      (= (mod x (expt n_int 18)) 0)\n      (= (mod x (expt n_int 19)) 0)\n      (= (mod x (expt n_int 20)) 0)\n      (= (mod x (expt n_int 21)) 0)\n      (= (mod x (expt n_int 22)) 0)\n      (= (mod x (expt n_int 23)) 0)\n      (= (mod x (expt n_int 24)) 0)\n      (= (mod x (expt n_int 25)) 0)\n      (= (mod x (expt n_int 26)) 0)\n      (= (mod x (expt n_int 27)) 0)\n      (= (mod x (expt n_int 28)) 0)\n      (= (mod x (expt n_int 29)) 0)\n",
    "  (cond\n    ((= x 1) true)\n    ((= x 0) false)\n    (else\n      (and\n        (= n 2)\n        (= x (expt n x)))\n      false)\n    ))\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of n and false in other cases.\n;; x is a simple power of n if n**int=x\n;; For example:\n;; >>> (is_simple_power 1 4)\n;; true\n;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; true\n;; >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false",
    "  (if (eq? n 0)\n    #t\n    (if (eq? x 1)\n      #t\n      (if (eq? n 1)\n        #t\n        (if (eq? x n)\n          #t\n          (if (and (integer? n) (integer? x))\n            (= (* n x) x)\n            (else\n              #f))))))))\n",
    "  (let ((n_int (floor n)))\n    (and\n      (= (modulo x n) 0)\n      (= n_int 1)\n      (= (modulo (square n_int) x) 0)))\n)\n\n;; Your task is to write a function that returns true if a number x is a\n;; perfect square and false in other cases.\n;; x is a perfect square if x=n**2\n;; For example:\n;; >>> (is_perfect_square 1)\n;; false\n;; >>> (is_perfect_square 2)\n;; true\n;; >>> (is_perfect_square 3)\n;; false\n;; >>> (is_perfect_square 4)\n;; true\n;; >>> (is_perfect_square 5)\n;; false\n;; >>> (is_perfect_square 6)\n;; true\n;; >>> (is_perfect_square 7)\n;; false\n;; >>> (is_perfect_square 8)\n;; true\n;; >>> (is_perfect_square 9)\n;; false\n;; >>> (is_perfect_square 10)\n;; true\n;; >>> (is_perfect_square 11)\n;; false\n;; >>> (is_perfect_square 12)\n;; true\n;; >>> (is_perfect_square 13)\n;; false\n;; >>> (is_perfect_square 14)\n;; true\n;; >>> (is_perfect_square 15)\n;; false",
    "  (cond\n    ((= n 1) true)\n    ((= n 2) true)\n    ((= n 3) true)\n    ((= n 4) true)\n    ((= n 5) true)\n    ((= n 6) true)\n    ((= n 7) true)\n    ((= n 8) true)\n    ((= n 9) true)\n    ((= n 10) true)\n    ((= n 11) true)\n    ((= n 12) true)\n    ((= n 13) true)\n    ((= n 14) true)\n    ((= n 15) true)\n    ((= n 16) true)\n    ((= n 17) true)\n    ((= n 18) true)\n    ((= n 19) true)\n    ((= n 20) true)\n    ((= n 21) true)\n    ((= n 22) true)\n    ((= n 23) true)\n    ((= n 24) true)\n    ((= n 25) true)\n    ((= n 26) true)\n    ((= n 27) true)\n    ((= n 28) true)\n    ((= n 29) true)\n    ((= n 30) true)\n    ((= n 31) true)\n    ((= n 32) true)\n    ((= n 33) true)\n    ((= n 34) true)\n    ((= n 35) true)\n    ((= n 36) true)\n    ((= n 37) true)\n    ((= n 38) true)\n    ((= n 39) true)\n    ((= n 40) true)\n    ((= n 41) true)\n    ((= n 42) true)\n    ((= n 43) true)\n    ((= n 44) true)\n    ((= n 45) true)\n    ((= n 46) true)\n    ((= n 47) true)\n    ((= n 48) true)\n    ((= n 49) true)\n    ((= n 50) true)\n    ((= n 51) true)\n    ((= n 52) true)\n    ((= n 53) true)\n    ((= n 54) true)\n    ((= n 55) true)\n    ((= n 56) true)\n    ((= n",
    "  (cond\n    ((= x 1) true)\n    ((= x 0) false)\n    ((= (mod x n) 0) false)\n    (else true)\n  )\n)\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of n and false in other cases.\n;; x is a simple power of n if n**int=x\n;; For example:\n;; >>> (is_simple_power 1 4)\n;; true\n;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; true\n;; >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false",
    "  (if (eq? n 0)\n    #t\n    (if (eq? x 1)\n      #t\n      (if (eq? n 1)\n        #t\n        (if (eq? x n)\n          #t\n          (if (and (integer? n) (integer? x))\n            (= (* x n) x)\n            (else\n              #f))))))))\n",
    "  (if (eq? n 0)\n    #t\n    (and\n      (eq? x 1)\n      (not (and (eq? n 2) (eq? x 1)))\n      (not (and (eq? n 3) (eq? x 1)))\n      (not (and (eq? n 4) (eq? x 1)))\n      (not (and (eq? n 5) (eq? x 1)))\n      (not (and (eq? n 6) (eq? x 1)))\n      (not (and (eq? n 7) (eq? x 1)))\n      (not (and (eq? n 8) (eq? x 1)))\n      (not (and (eq? n 9) (eq? x 1)))\n      (not (and (eq? n 10) (eq? x 1)))\n      (not (and (eq? n 11) (eq? x 1)))\n      (not (and (eq? n 12) (eq? x 1)))\n      (not (and (eq? n 13) (eq? x 1)))\n      (not (and (eq? n 14) (eq? x 1)))\n      (not (and (eq? n 15) (eq? x 1)))\n      (not (and (eq? n 16) (eq? x 1)))\n      (not (and (eq? n 17) (eq? x 1)))\n      (not (and (eq? n 18) (eq? x 1)))\n      (not (and (eq? n 19) (eq? x 1)))\n      (not (and (eq? n 20) (eq? x 1)))\n      (not (and (eq? n 21) (eq? x 1)))\n      (not (and (eq? n 22) (eq? x 1)))\n      (not (and (eq? n 23) (eq? x 1)))\n      (not (and (eq? n 24) (eq? x 1)))\n      (not (and (eq? n 25) (eq? x 1)))\n      (not (and (eq? n 26) (eq? x 1)))\n      (not (and (eq? n 27) (eq? x 1)))\n      (not (and (eq? n 28) (eq? x 1)))\n",
    "  (equal? (power n x) x))\n\n;; The function is_simple_power takes two arguments, x and n.\n;; The function returns true if x is a simple power of n and false in other cases.\n\n;; The function is_simple_power takes two arguments, x and n.\n;; The function returns true if x is a simple power of n and false in other cases.\n;; x is a simple power of n if n**int=x\n;; For example:\n;; >>> (is_simple_power 1 4)\n;; true\n;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; true\n;; >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false\n;; >>> (is_simple_power 5 2)\n;; false\n;; >>> (is_simple_power 5 1)\n;; false\n;; >>> (is_simple_power 5 0)\n;; false\n;; >>> (is_simple_power 5 -1)\n;; false\n;; >>> (is_simple_power 5 -2)\n;; false\n;; >>> (is_simple_power 5 -3)\n;; false\n;; >>> (is_simple_power 5 -4)\n;; false\n;; >>> (is_simple_power 5 -5)\n;; false\n;; >>> (is_simple_power 5 -6)\n;; false\n;; >>> (is_simple_power 5 -7)\n;; false\n;; >>> (is_simple_power 5 -8)\n;; false\n;; >>> (is_simple_power 5 -9)\n;; false\n;; >>> (is_simple_power 5 -10)\n;; false\n;; >>> (is_simple_power 5 -11)\n;; false\n;; >>> (is_simple_power 5 -12)\n;; false\n;; >>> (is_simple_power 5 -13)\n;; false\n;; >>> (is_simple_power 5 -14)\n;; false\n;; >>> (is_simple_power 5 -15)\n;; false\n;; >>> (is_simple_power 5 -16)\n;; false\n;; >>> (is_simple_power 5 -17)\n",
    "  (cond\n    ((= n 1) true)\n    ((= n 2) true)\n    ((= n 3) true)\n    ((= n 4) true)\n    ((= n 5) true)\n    ((= n 6) true)\n    ((= n 7) true)\n    ((= n 8) true)\n    ((= n 9) true)\n    ((= n 10) true)\n    ((= n 11) true)\n    ((= n 12) true)\n    ((= n 13) true)\n    ((= n 14) true)\n    ((= n 15) true)\n    ((= n 16) true)\n    ((= n 17) true)\n    ((= n 18) true)\n    ((= n 19) true)\n    ((= n 20) true)\n    ((= n 21) true)\n    ((= n 22) true)\n    ((= n 23) true)\n    ((= n 24) true)\n    ((= n 25) true)\n    ((= n 26) true)\n    ((= n 27) true)\n    ((= n 28) true)\n    ((= n 29) true)\n    ((= n 30) true)\n    ((= n 31) true)\n    ((= n 32) true)\n    ((= n 33) true)\n    ((= n 34) true)\n    ((= n 35) true)\n    ((= n 36) true)\n    ((= n 37) true)\n    ((= n 38) true)\n    ((= n 39) true)\n    ((= n 40) true)\n    ((= n 41) true)\n    ((= n 42) true)\n    ((= n 43) true)\n    ((= n 44) true)\n    ((= n 45) true)\n    ((= n 46) true)\n    ((= n 47) true)\n    ((= n 48) true)\n    ((= n 49) true)\n    ((= n 50) true)\n    ((= n 51) true)\n    ((= n 52) true)\n    ((= n 53) true)\n    ((= n 54) true)\n    ((= n 55) true)\n    ((= n 56) true)\n    ((= n",
    "  (cond\n    [(zero? n) true]\n    [(zero? x) false]\n    [(zero? (expt n x)) true]\n    [false]\n  )\n)\n",
    "  (cond\n    ((= x 1) true)\n    ((= x 0) false)\n    (else\n      (and\n        (= n 2)\n        (= x (expt n x)))\n      false)\n    (else\n      (and\n        (= n 2)\n        (= x (expt n x)))\n      true)\n    )\n  )\n)\n",
    "  (equal? (power n x) x))\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of n and false in other cases.\n;; x is a simple power of n if n**int=x\n;; For example:\n;; >>> (is_simple_power 1 4)\n;; true\n;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; true\n;; >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false",
    "  (if (eq? n 0)\n    true\n    (if (eq? x 1)\n      true\n      (and (eq? n 2)\n           (eq? x 2)))))\n\n;; Your task is to write a function that returns true if a number x is a square\n;; number and false in other cases.\n;; x is a square number if (x**2)=x\n;; For example:\n;; >>> (is_square_number 1)\n;; true\n;; >>> (is_square_number 2)\n;; true\n;; >>> (is_square_number 3)\n;; false\n;; >>> (is_square_number 4)\n;; true\n;; >>> (is_square_number 5)\n;; false",
    "  (cond\n    ((= x 1) true)\n    ((= x 0) false)\n    (else\n      (and\n        (= n 2)\n        (= (expt x n) x)))))\n\n;; Your task is to write a function that returns true if a number x is a\n;; perfect power of n and false in other cases.\n;; x is a perfect power of n if n**int=x and n**int is a prime number\n;; For example:\n;; >>> (is_perfect_power 2 4)\n;; true\n;; >>> (is_perfect_power 2 3)\n;; false\n;; >>> (is_perfect_power 2 2)\n;; false\n;; >>> (is_perfect_power 3 4)\n;; false\n;; >>> (is_perfect_power 3 3)\n;; true\n;; >>> (is_perfect_power 3 2)\n;; false\n;; >>> (is_perfect_power 5 4)\n;; false\n;; >>> (is_perfect_power 5 3)\n;; false\n;; >>> (is_perfect_power 5 2)\n;; false",
    "  (cond\n    [(zero? x) false]\n    [(zero? n) false]\n    [(zero? (expt n x)) true]\n    [false]\n  )\n)\n",
    "  (let ((n_int (floor n)))\n    (and\n      (= n_int 0)\n      (= (mod x n) 0))))\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of 2 and false in other cases.\n;; x is a simple power of 2 if 2**int=x\n;; For example:\n;; >>> (is_simple_power 2)\n;; true\n;; >>> (is_simple_power 3)\n;; false\n;; >>> (is_simple_power 4)\n;; false\n;; >>> (is_simple_power 5)\n;; false\n;; >>> (is_simple_power 6)\n;; false\n;; >>> (is_simple_power 7)\n;; false",
    "  (if (eq? x n)\n    true\n    false))\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of n and false in other cases.\n;; x is a simple power of n if n**int=x\n;; For example:\n;; >>> (is_simple_power 1 4)\n;; true\n;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; true\n;; >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false",
    "  (cond\n    ((= n 1) true)\n    ((= n 2) true)\n    ((= n 3) true)\n    ((= n 4) true)\n    ((= n 5) true)\n    ((= n 6) true)\n    ((= n 7) true)\n    ((= n 8) true)\n    ((= n 9) true)\n    ((= n 10) true)\n    ((= n 11) true)\n    ((= n 12) true)\n    ((= n 13) true)\n    ((= n 14) true)\n    ((= n 15) true)\n    ((= n 16) true)\n    ((= n 17) true)\n    ((= n 18) true)\n    ((= n 19) true)\n    ((= n 20) true)\n    ((= n 21) true)\n    ((= n 22) true)\n    ((= n 23) true)\n    ((= n 24) true)\n    ((= n 25) true)\n    ((= n 26) true)\n    ((= n 27) true)\n    ((= n 28) true)\n    ((= n 29) true)\n    ((= n 30) true)\n    ((= n 31) true)\n    ((= n 32) true)\n    ((= n 33) true)\n    ((= n 34) true)\n    ((= n 35) true)\n    ((= n 36) true)\n    ((= n 37) true)\n    ((= n 38) true)\n    ((= n 39) true)\n    ((= n 40) true)\n    ((= n 41) true)\n    ((= n 42) true)\n    ((= n 43) true)\n    ((= n 44) true)\n    ((= n 45) true)\n    ((= n 46) true)\n    ((= n 47) true)\n    ((= n 48) true)\n    ((= n 49) true)\n    ((= n 50) true)\n    ((= n 51) true)\n    ((= n 52) true)\n    ((= n 53) true)\n    ((= n 54) true)\n    ((= n 55) true)\n    ((= n 56) true)\n    ((= n",
    "  (equal? (square n) x))\n\n;; The function is_simple_power is used in the following example:",
    "  (equal? (power n x) x))\n\n;; Your task is to write a function that returns true if a number x is a\n;; perfect power of n and false in other cases.\n;; x is a perfect power of n if n**int=x and n is prime\n;; For example:\n;; >>> (is_perfect_power 2 4)\n;; true\n;; >>> (is_perfect_power 2 3)\n;; false\n;; >>> (is_perfect_power 2 2)\n;; false\n;; >>> (is_perfect_power 2 1)\n;; false\n;; >>> (is_perfect_power 3 4)\n;; false\n;; >>> (is_perfect_power 3 3)\n;; true\n;; >>> (is_perfect_power 3 2)\n;; false\n;; >>> (is_perfect_power 3 1)\n;; false\n;; >>> (is_perfect_power 5 4)\n;; false\n;; >>> (is_perfect_power 5 3)\n;; false\n;; >>> (is_perfect_power 5 2)\n;; false\n;; >>> (is_perfect_power 5 1)\n;; false",
    "  (equal? (pow n x) x))\n\n;; You can test your function with this command:\n;; (is_simple_power 3 2)\n;; true\n;; (is_simple_power 3 1)\n;; false\n;; (is_simple_power 5 3)\n;; false\n;; (is_simple_power 5 2)\n;; false\n;; (is_simple_power 2 2)\n;; true\n;; (is_simple_power 2 1)\n;; false\n;; (is_simple_power 1 2)\n;; true\n;; (is_simple_power 1 1)\n;; true\n;; (is_simple_power 2 3)\n;; false\n;; (is_simple_power 3 2)\n;; false\n;; (is_simple_power 3 1)\n;; false\n;; (is_simple_power 5 3)\n;; false\n;; (is_simple_power 5 2)\n;; false\n;; (is_simple_power 2 2)\n;; true\n;; (is_simple_power 2 1)\n;; false\n;; (is_simple_power 1 2)\n;; true\n;; (is_simple_power 1 1)\n;; true\n;; (is_simple_power 2 3)\n;; false\n;; (is_simple_power 3 2)\n;; false\n;; (is_simple_power 3 1)\n;; false\n;; (is_simple_power 5 3)\n;; false\n;; (is_simple_power 5 2)\n;; false\n;; (is_simple_power 2 2)\n;; true\n;; (is_simple_power 2 1)\n;; false\n;; (is_simple_power 1 2)\n;; true\n;; (is_simple_power 1 1)\n;; true\n;; (is_simple_power 2 3)\n;; false\n;; (is_simple_power 3 2)\n;; false\n;; (is_simple_power 3 1)\n;; false\n;; (is_simple_power 5 3)\n;; false\n;; (is_simple_power 5 2)\n;; false\n;; (is_simple_power 2 2)\n;; true\n;; (is_simple_power 2 1)\n;; false\n;; (is_simple_power 1 2)\n;; true\n;; (is_simple_power 1 1)\n",
    "  (let ((n_int (floor n)))\n    (and\n      (= n_int 1)\n      (= (mod x n) 0))))\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of two and false in other cases.\n;; x is a simple power of two if 2**int=x\n;; For example:\n;; >>> (is_simple_power 2)\n;; true\n;; >>> (is_simple_power 3)\n;; false\n;; >>> (is_simple_power 4)\n;; false\n;; >>> (is_simple_power 5)\n;; false\n;; >>> (is_simple_power 6)\n;; false\n;; >>> (is_simple_power 7)\n;; false\n;; >>> (is_simple_power 8)\n;; false\n;; >>> (is_simple_power 9)\n;; false\n;; >>> (is_simple_power 10)\n;; false\n;; >>> (is_simple_power 11)\n;; false\n;; >>> (is_simple_power 12)\n;; false\n;; >>> (is_simple_power 13)\n;; false\n;; >>> (is_simple_power 14)\n;; false\n;; >>> (is_simple_power 15)\n;; false\n;; >>> (is_simple_power 16)\n;; false\n;; >>> (is_simple_power 17)\n;; false\n;; >>> (is_simple_power 18)\n;; false\n;; >>> (is_simple_power 19)\n;; false\n;; >>> (is_simple_power 20)\n;; false\n;; >>> (is_simple_power 21)\n;; false\n;; >>> (is_simple_power 22)\n;; false\n;; >>> (is_simple_power 23)\n;; false\n;; >>> (is_simple_power 24)\n;; false\n;; >>> (is_simple_power 25)\n;; false\n;; >>> (is_simple_power 26)\n;; false\n;; >>> (is_simple_power 27)\n;; false\n;; >>> (is_simple_power 28)\n;; false\n;; >>> (is_simple_power 29)\n;; false\n;; >>> (is_simple_power 30)\n;; false\n;; >>> (is_simple_power 31)\n;; false\n;; >>> (is_",
    "  (let ((p (log x n)))\n    (and\n      (= (modulo p 2) 0)\n      (= (pow n p) x))))\n\n;; The function is_simple_power is already defined for you.\n;;\n;; You can call the function is_simple_power as follows:\n;; (is_simple_power 3 2)\n;; (is_simple_power 3 1)\n;; (is_simple_power 5 3)\n;; (is_simple_power 5 2)\n;; (is_simple_power 5 1)\n;; (is_simple_power 6 3)\n;; (is_simple_power 6 2)\n;; (is_simple_power 6 1)\n;; (is_simple_power 7 3)\n;; (is_simple_power 7 2)\n;; (is_simple_power 7 1)\n;; (is_simple_power 8 2)\n;; (is_simple_power 8 1)\n;; (is_simple_power 9 2)\n;; (is_simple_power 9 1)\n;; (is_simple_power 10 2)\n;; (is_simple_power 10 1)\n;; (is_simple_power 11 2)\n;; (is_simple_power 11 1)\n;; (is_simple_power 12 2)\n;; (is_simple_power 12 1)\n;; (is_simple_power 13 2)\n;; (is_simple_power 13 1)\n;; (is_simple_power 14 2)\n;; (is_simple_power 14 1)\n;; (is_simple_power 15 2)\n;; (is_simple_power 15 1)\n;; (is_simple_power 16 2)\n;; (is_simple_power 16 1)\n;; (is_simple_power 17 2)\n;; (is_simple_power 17 1)\n;; (is_simple_power 18 2)\n;; (is_simple_power 18 1)\n;; (is_simple_power 19 2)\n;; (is_simple_power 19 1)\n;; (is_simple_power 20 2)\n;; (is_simple_power 20 1)\n;; (is_simple_power 21 2)\n;; (is_simple_power 21 1)\n;; (is_simple_power 22 2)\n",
    "  (let ((n_int (floor n)))\n    (and\n      (= n_int 1)\n      (= n_int 2)\n      (= n_int 3)\n      (= n_int 4)\n      (= n_int 5)\n      (= n_int 6)\n      (= n_int 7)\n      (= n_int 8)\n      (= n_int 9)\n      (= n_int 10)\n      (= n_int 11)\n      (= n_int 12)\n      (= n_int 13)\n      (= n_int 14)\n      (= n_int 15)\n      (= n_int 16)\n      (= n_int 17)\n      (= n_int 18)\n      (= n_int 19)\n      (= n_int 20)\n      (= n_int 21)\n      (= n_int 22)\n      (= n_int 23)\n      (= n_int 24)\n      (= n_int 25)\n      (= n_int 26)\n      (= n_int 27)\n      (= n_int 28)\n      (= n_int 29)\n      (= n_int 30)\n      (= n_int 31)\n      (= n_int 32)\n      (= n_int 33)\n      (= n_int 34)\n      (= n_int 35)\n      (= n_int 36)\n      (= n_int 37)\n      (= n_int 38)\n      (= n_int 39)\n      (= n_int 40)\n      (= n_int 41)\n      (= n_int 42)\n      (= n_int 43)\n      (= n_int 44)\n      (= n_int 45)\n      (= n_int 46)\n      (= n_int 47)\n      (= n_int 48)\n      (= n_int 49)\n      (= n_int 50)\n      (= n_int 51)\n      (= n_int 52)\n      (= n_int 53)\n      (= n_int 54)\n      (= n_int 55)\n      ",
    "  (cond\n    [(zero? n) true]\n    [(zero? x) false]\n    [(zero? (expt n x)) true]\n    [false]\n  )\n)\n",
    "  (if (eq? x n)\n    true\n    false))\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of 2 and false in other cases.\n;; x is a simple power of 2 if 2**int=x\n;; For example:\n;; >>> (is_simple_power 2)\n;; true\n;; >>> (is_simple_power 3)\n;; false\n;; >>> (is_simple_power 4)\n;; false\n;; >>> (is_simple_power 5)\n;; false\n;; >>> (is_simple_power 6)\n;; false\n;; >>> (is_simple_power 7)\n;; false\n;; >>> (is_simple_power 8)\n;; false\n;; >>> (is_simple_power 9)\n;; false\n;; >>> (is_simple_power 10)\n;; false\n;; >>> (is_simple_power 11)\n;; false\n;; >>> (is_simple_power 12)\n;; false\n;; >>> (is_simple_power 13)\n;; false\n;; >>> (is_simple_power 14)\n;; false\n;; >>> (is_simple_power 15)\n;; false\n;; >>> (is_simple_power 16)\n;; false\n;; >>> (is_simple_power 17)\n;; false\n;; >>> (is_simple_power 18)\n;; false\n;; >>> (is_simple_power 19)\n;; false\n;; >>> (is_simple_power 20)\n;; false\n;; >>> (is_simple_power 21)\n;; false\n;; >>> (is_simple_power 22)\n;; false\n;; >>> (is_simple_power 23)\n;; false\n;; >>> (is_simple_power 24)\n;; false\n;; >>> (is_simple_power 25)\n;; false\n;; >>> (is_simple_power 26)\n;; false\n;; >>> (is_simple_power 27)\n;; false\n;; >>> (is_simple_power 28)\n;; false\n;; >>> (is_simple_power 29)\n;; false\n;; >>> (is_simple_power 30)\n;; false\n;; >>> (is_simple_power 31)\n;; false\n;; >>> (is_simple_power 32)\n;; false\n;; >>> (is_simple_power 33)",
    "  (let ((n_int (floor n)))\n    (and\n      (= n_int 0)\n      (= n_int 1)\n      (= n_int 2)\n      (= n_int 3)\n      (= n_int 4)\n      (= n_int 5)\n      (= n_int 6)\n      (= n_int 7)\n      (= n_int 8)\n      (= n_int 9)\n      (= n_int 10)\n      (= n_int 11)\n      (= n_int 12)\n      (= n_int 13)\n      (= n_int 14)\n      (= n_int 15)\n      (= n_int 16)\n      (= n_int 17)\n      (= n_int 18)\n      (= n_int 19)\n      (= n_int 20)\n      (= n_int 21)\n      (= n_int 22)\n      (= n_int 23)\n      (= n_int 24)\n      (= n_int 25)\n      (= n_int 26)\n      (= n_int 27)\n      (= n_int 28)\n      (= n_int 29)\n      (= n_int 30)\n      (= n_int 31)\n      (= n_int 32)\n      (= n_int 33)\n      (= n_int 34)\n      (= n_int 35)\n      (= n_int 36)\n      (= n_int 37)\n      (= n_int 38)\n      (= n_int 39)\n      (= n_int 40)\n      (= n_int 41)\n      (= n_int 42)\n      (= n_int 43)\n      (= n_int 44)\n      (= n_int 45)\n      (= n_int 46)\n      (= n_int 47)\n      (= n_int 48)\n      (= n_int 49)\n      (= n_int 50)\n      (= n_int 51)\n      (= n_int 52)\n      (= n_int 53)\n      (= n_int 54)\n      ",
    "  (let ((n_int (floor n)))\n    (and\n      (= n_int 0)\n      (= (mod x n) 0))))\n\n;; Your task is to write a function that returns true if a number x is a\n;; perfect power of n and false in other cases.\n;; x is a perfect power of n if n**int=x and n**int+1=x\n;; For example:\n;; >>> (is_perfect_power 2 4)\n;; true\n;; >>> (is_perfect_power 2 3)\n;; false\n;; >>> (is_perfect_power 2 2)\n;; false\n;; >>> (is_perfect_power 2 1)\n;; false\n;; >>> (is_perfect_power 3 4)\n;; false\n;; >>> (is_perfect_power 3 3)\n;; true\n;; >>> (is_perfect_power 3 2)\n;; false\n;; >>> (is_perfect_power 3 1)\n;; false\n;; >>> (is_perfect_power 5 4)\n;; false\n;; >>> (is_perfect_power 5 3)\n;; false\n;; >>> (is_perfect_power 5 2)\n;; false\n;; >>> (is_perfect_power 5 1)\n;; false",
    "  (cond\n    ((= x 1) true)\n    ((= x 0) false)\n    (else\n      (and\n        (= n 2)\n        (= x (expt n x)))\n      false)\n    (else\n      (and\n        (= n 2)\n        (= x (expt n (expt x n))))\n      true)\n  )\n)\n",
    "  (cond\n    [(zero? n) true]\n    [(zero? x) false]\n    [(zero? (expt n x)) true]\n    [false]\n  )\n)\n\n;; Your task is to write a function that returns true if a number x is a\n;; perfect power of n and false in other cases.\n;; x is a perfect power of n if n**int=x and n**int is a prime number\n;; For example:\n;; >>> (is_perfect_power 2 4)\n;; true\n;; >>> (is_perfect_power 2 3)\n;; false\n;; >>> (is_perfect_power 2 2)\n;; false\n;; >>> (is_perfect_power 3 4)\n;; false\n;; >>> (is_perfect_power 3 3)\n;; true\n;; >>> (is_perfect_power 3 2)\n;; false\n;; >>> (is_perfect_power 5 4)\n;; false\n;; >>> (is_perfect_power 5 3)\n;; false\n;; >>> (is_perfect_power 5 2)\n;; false",
    "  (cond\n    ((= n 1) true)\n    ((= n 2) true)\n    ((= n 3) true)\n    ((= n 4) true)\n    ((= n 5) true)\n    ((= n 6) true)\n    ((= n 7) true)\n    ((= n 8) true)\n    ((= n 9) true)\n    ((= n 10) true)\n    ((= n 11) true)\n    ((= n 12) true)\n    ((= n 13) true)\n    ((= n 14) true)\n    ((= n 15) true)\n    ((= n 16) true)\n    ((= n 17) true)\n    ((= n 18) true)\n    ((= n 19) true)\n    ((= n 20) true)\n    ((= n 21) true)\n    ((= n 22) true)\n    ((= n 23) true)\n    ((= n 24) true)\n    ((= n 25) true)\n    ((= n 26) true)\n    ((= n 27) true)\n    ((= n 28) true)\n    ((= n 29) true)\n    ((= n 30) true)\n    ((= n 31) true)\n    ((= n 32) true)\n    ((= n 33) true)\n    ((= n 34) true)\n    ((= n 35) true)\n    ((= n 36) true)\n    ((= n 37) true)\n    ((= n 38) true)\n    ((= n 39) true)\n    ((= n 40) true)\n    ((= n 41) true)\n    ((= n 42) true)\n    ((= n 43) true)\n    ((= n 44) true)\n    ((= n 45) true)\n    ((= n 46) true)\n    ((= n 47) true)\n    ((= n 48) true)\n    ((= n 49) true)\n    ((= n 50) true)\n    ((= n 51) true)\n    ((= n 52) true)\n    ((= n 53) true)\n    ((= n 54) true)\n    ((= n 55) true)\n    ((= n 56) true)\n    ((= n",
    "  (cond\n    [(zero? n) true]\n    [(zero? x) false]\n    [(zero? (expt n x)) true]\n    [false]\n  )\n)\n",
    "  (equal? (pow n x) x))\n\n;; The function is_simple_power takes two arguments, x and n.\n;; It returns true if x is a simple power of n and false otherwise.\n;; The function is_simple_power takes two arguments, x and n.\n;; It returns true if x is a simple power of n and false otherwise.\n;; x is a simple power of n if n**int=x\n;; For example:\n;; >>> (is_simple_power 1 4)\n;; true\n;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; true\n;; >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false\n;; >>> (is_simple_power 5 2)\n;; false\n;; >>> (is_simple_power 5 1)\n;; false\n;; >>> (is_simple_power 5 0)\n;; false\n;; >>> (is_simple_power 5 -1)\n;; false\n;; >>> (is_simple_power 5 -2)\n;; false\n;; >>> (is_simple_power 5 -3)\n;; false\n;; >>> (is_simple_power 5 -4)\n;; false\n;; >>> (is_simple_power 5 -5)\n;; false\n;; >>> (is_simple_power 5 -6)\n;; false\n;; >>> (is_simple_power 5 -7)\n;; false\n;; >>> (is_simple_power 5 -8)\n;; false\n;; >>> (is_simple_power 5 -9)\n;; false\n;; >>> (is_simple_power 5 -10)\n;; false\n;; >>> (is_simple_power 5 -11)\n;; false\n;; >>> (is_simple_power 5 -12)\n;; false\n;; >>> (is_simple_power 5 -13)\n;; false\n;; >>> (is_simple_power 5 -14)\n;; false\n;; >>> (is_simple_power 5 -15)\n;; false\n;; >>> (is_simple_power 5 -16)\n;; false\n;; >>> (is_simple_power 5 -17)\n;; false\n;; >>> (",
    "  (equal? (pow n x) x))\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of n and false in other cases.\n;; x is a simple power of n if n**int=x\n;; For example:\n;; >>> (is_simple_power 1 4)\n;; true\n;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; true\n;; >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false",
    "  (equal? (square n) x))\n\n;; Your task is to write a function that returns true if a number x is a square\n;; number and false in other cases.\n;; x is a square number if n**2=x\n;; For example:\n;; >>> (is_square_number 1)\n;; true\n;; >>> (is_square_number 2)\n;; true\n;; >>> (is_square_number 3)\n;; false\n;; >>> (is_square_number 4)\n;; true\n;; >>> (is_square_number 5)\n;; false",
    "  (equal? (power n x) x))\n\n;; Your task is to write a function that returns true if a number x is a\n;; perfect power of n and false in other cases.\n;; x is a perfect power of n if n**int=x and n**int is a prime number\n;; For example:\n;; >>> (is_perfect_power 2 4)\n;; true\n;; >>> (is_perfect_power 2 3)\n;; false\n;; >>> (is_perfect_power 2 2)\n;; false\n;; >>> (is_perfect_power 2 1)\n;; false\n;; >>> (is_perfect_power 3 4)\n;; false\n;; >>> (is_perfect_power 3 3)\n;; true\n;; >>> (is_perfect_power 3 2)\n;; false\n;; >>> (is_perfect_power 3 1)\n;; false\n;; >>> (is_perfect_power 5 4)\n;; false\n;; >>> (is_perfect_power 5 3)\n;; false\n;; >>> (is_perfect_power 5 2)\n;; false\n;; >>> (is_perfect_power 5 1)\n;; false",
    "  (cond\n    ((= n 1) true)\n    ((= n 2) true)\n    ((= n 3) true)\n    ((= n 4) true)\n    ((= n 5) true)\n    ((= n 6) true)\n    ((= n 7) true)\n    ((= n 8) true)\n    ((= n 9) true)\n    ((= n 10) true)\n    ((= n 11) true)\n    ((= n 12) true)\n    ((= n 13) true)\n    ((= n 14) true)\n    ((= n 15) true)\n    ((= n 16) true)\n    ((= n 17) true)\n    ((= n 18) true)\n    ((= n 19) true)\n    ((= n 20) true)\n    ((= n 21) true)\n    ((= n 22) true)\n    ((= n 23) true)\n    ((= n 24) true)\n    ((= n 25) true)\n    ((= n 26) true)\n    ((= n 27) true)\n    ((= n 28) true)\n    ((= n 29) true)\n    ((= n 30) true)\n    ((= n 31) true)\n    ((= n 32) true)\n    ((= n 33) true)\n    ((= n 34) true)\n    ((= n 35) true)\n    ((= n 36) true)\n    ((= n 37) true)\n    ((= n 38) true)\n    ((= n 39) true)\n    ((= n 40) true)\n    ((= n 41) true)\n    ((= n 42) true)\n    ((= n 43) true)\n    ((= n 44) true)\n    ((= n 45) true)\n    ((= n 46) true)\n    ((= n 47) true)\n    ((= n 48) true)\n    ((= n 49) true)\n    ((= n 50) true)\n    ((= n 51) true)\n    ((= n 52) true)\n    ((= n 53) true)\n    ((= n 54) true)\n    ((= n 55) true)\n    ((= n 56) true)\n    ((= n",
    "  (cond\n    ((= x 1) true)\n    ((= x 0) false)\n    (else\n      (and\n        (= n 1)\n        (= (expt x n) x)))))\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of n and false in other cases.\n;; x is a simple power of n if n**int=x\n;; For example:\n;; >>> (is_simple_power 1 4)\n;; true\n;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; true\n;; >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false",
    "  (if (eq? x n)\n    true\n    false))\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of n and false in other cases.\n;; x is a simple power of n if n**int=x\n;; For example:\n;; >>> (is_simple_power 1 4)\n;; true\n;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; true\n;; >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false",
    "  (cond\n    ((= x 1) true)\n    ((= x 0) false)\n    ((= x n) false)\n    ((= (expt x n) x) true)\n    (else false)\n  )\n)\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of n and false in other cases.\n;; x is a simple power of n if n**int=x\n;; For example:\n;; >>> (is_simple_power 1 4)\n;; true\n;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; true\n;; >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false",
    "  (cond\n    ((= n 1) true)\n    ((= n 2) true)\n    ((= n 3) true)\n    ((= n 4) true)\n    ((= n 5) true)\n    ((= n 6) true)\n    ((= n 7) true)\n    ((= n 8) true)\n    ((= n 9) true)\n    ((= n 10) true)\n    ((= n 11) true)\n    ((= n 12) true)\n    ((= n 13) true)\n    ((= n 14) true)\n    ((= n 15) true)\n    ((= n 16) true)\n    ((= n 17) true)\n    ((= n 18) true)\n    ((= n 19) true)\n    ((= n 20) true)\n    ((= n 21) true)\n    ((= n 22) true)\n    ((= n 23) true)\n    ((= n 24) true)\n    ((= n 25) true)\n    ((= n 26) true)\n    ((= n 27) true)\n    ((= n 28) true)\n    ((= n 29) true)\n    ((= n 30) true)\n    ((= n 31) true)\n    ((= n 32) true)\n    ((= n 33) true)\n    ((= n 34) true)\n    ((= n 35) true)\n    ((= n 36) true)\n    ((= n 37) true)\n    ((= n 38) true)\n    ((= n 39) true)\n    ((= n 40) true)\n    ((= n 41) true)\n    ((= n 42) true)\n    ((= n 43) true)\n    ((= n 44) true)\n    ((= n 45) true)\n    ((= n 46) true)\n    ((= n 47) true)\n    ((= n 48) true)\n    ((= n 49) true)\n    ((= n 50) true)\n    ((= n 51) true)\n    ((= n 52) true)\n    ((= n 53) true)\n    ((= n 54) true)\n    ((= n 55) true)\n    ((= n 56) true)\n    ((= n",
    "  (cond ((= x 1) true)\n        ((= x 0) false)\n        ((= (mod x n) 0) false)\n        (else true)))\n\n;; Your task is to write a function that returns true if a number x is a\n;; perfect power of n and false in other cases.\n;; x is a perfect power of n if n**int=x and n**int=x**int\n;; For example:\n;; >>> (is_perfect_power 1 4)\n;; false\n;; >>> (is_perfect_power 2 2)\n;; true\n;; >>> (is_perfect_power 8 2)\n;; false\n;; >>> (is_perfect_power 3 2)\n;; false\n;; >>> (is_perfect_power 3 1)\n;; false\n;; >>> (is_perfect_power 5 3)\n;; true",
    "  (cond\n    ((= x 1) true)\n    ((= x 0) false)\n    ((= n 0) false)\n    (and\n      (= (mod x n) 0)\n      (= n 1)\n      (= (quotient x n) x)))))\n",
    "  (cond\n    [(zero? n) true]\n    [(zero? x) false]\n    [(zero? (expt n x)) true]\n    [false]\n  )\n)\n",
    "  (let ((n_int (floor n)))\n    (and\n      (= (mod x n) 0)\n      (= (mod n_int n) 0)\n      (= (mod x (expt n n_int)) 0))))\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of n and false in other cases.\n;; x is a simple power of n if n**int=x\n;; For example:\n;; >>> (is_simple_power 1 4)\n;; true\n;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; true\n;; >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false",
    "  (and (number? x) (number? n)\n         (= (* n x) x)))\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of 2 and false in other cases.\n;; x is a simple power of 2 if 2**int=x\n;; For example:\n;; >>> (is_simple_power 2 4)\n;; false\n;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; false\n;; >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false",
    "  (let ((n_int (floor n)))\n    (and\n      (= (modulo x n) 0)\n      (= n_int 1)\n      (= (modulo x (pow n_int n)) 0)))\n)\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of 2 and false in other cases.\n;; x is a simple power of 2 if 2**int=x\n;; For example:\n;; >>> (is_simple_power 2 4)\n;; true\n;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; true\n;; >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false",
    "  (let ((n_int (floor n)))\n    (and\n      (= n_int 1)\n      (= (mod x n) 0))))\n\n;; Your task is to write a function that returns true if a number x is a\n;; perfect power of n and false in other cases.\n;; x is a perfect power of n if n**int=x and n**int is a perfect power of 2\n;; For example:\n;; >>> (is_perfect_power 1 4)\n;; false\n;; >>> (is_perfect_power 2 4)\n;; true\n;; >>> (is_perfect_power 2 2)\n;; false\n;; >>> (is_perfect_power 8 2)\n;; false\n;; >>> (is_perfect_power 3 2)\n;; false\n;; >>> (is_perfect_power 3 1)\n;; false\n;; >>> (is_perfect_power 5 3)\n;; true",
    "  (equal? (power n x) x))\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of 2 and false in other cases.\n;; x is a simple power of 2 if 2**int=x\n;; For example:\n;; >>> (is_simple_power 1 4)\n;; false\n;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; false\n;; >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false",
    "  (cond\n    ((= x 1) true)\n    ((= x 0) false)\n    (else\n      (and\n        (= n 2)\n        (= x (expt n x)))\n      false)\n  ))\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of n and false in other cases.\n;; x is a simple power of n if n**int=x\n;; For example:\n;; >>> (is_simple_power 1 4)\n;; true\n;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; true\n;; >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false",
    "  (cond\n    ((= x 1) true)\n    ((= x 0) false)\n    ((= (mod x n) 0) false)\n    (else\n      (and\n        (= (mod x n) 0)\n        (= (quotient x n) 1)))\n  )\n)\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of 2 and false in other cases.\n;; x is a simple power of 2 if 2**int=x\n;; For example:\n;; >>> (is_simple_power 2 4)\n;; true\n;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; true\n;; >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false",
    "  (cond\n    ((= x 1) true)\n    ((= x 0) false)\n    (else\n      (and\n        (= n 2)\n        (= x (expt n x)))\n      false)\n    ))\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of 2 and false in other cases.\n;; x is a simple power of 2 if 2**int=x\n;; For example:\n;; >>> (is_simple_power 2 4)\n;; true\n;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; true\n;; >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false",
    "  (and (eq? n 2) (eq? x 2)))\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of n and false in other cases.\n;; x is a simple power of n if n**int=x\n;; For example:\n;; >>> (is_simple_power 1 4)\n;; true\n;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; true\n;; >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false",
    "  (cond\n    ((= x 1) true)\n    ((= x 0) false)\n    ((= n 0) false)\n    (and\n      (> x 0)\n      (>= n 1)\n      (= (expt x n) x)))\n  )\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of n and false in other cases.\n;; x is a simple power of n if n**int=x\n;; For example:\n;; >>> (is_simple_power 1 4)\n;; true\n;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; true\n;; >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false",
    "  (let ((n_int (floor n)))\n    (and\n      (= (modulo x n) 0)\n      (= (modulo n n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo",
    "  (let ((n_int (floor n)))\n    (and\n      (= n_int 1)\n      (= n_int 2)\n      (= n_int 3)\n      (= n_int 4)\n      (= n_int 5)\n      (= n_int 6)\n      (= n_int 7)\n      (= n_int 8)\n      (= n_int 9)\n      (= n_int 10)\n      (= n_int 11)\n      (= n_int 12)\n      (= n_int 13)\n      (= n_int 14)\n      (= n_int 15)\n      (= n_int 16)\n      (= n_int 17)\n      (= n_int 18)\n      (= n_int 19)\n      (= n_int 20)\n      (= n_int 21)\n      (= n_int 22)\n      (= n_int 23)\n      (= n_int 24)\n      (= n_int 25)\n      (= n_int 26)\n      (= n_int 27)\n      (= n_int 28)\n      (= n_int 29)\n      (= n_int 30)\n      (= n_int 31)\n      (= n_int 32)\n      (= n_int 33)\n      (= n_int 34)\n      (= n_int 35)\n      (= n_int 36)\n      (= n_int 37)\n      (= n_int 38)\n      (= n_int 39)\n      (= n_int 40)\n      (= n_int 41)\n      (= n_int 42)\n      (= n_int 43)\n      (= n_int 44)\n      (= n_int 45)\n      (= n_int 46)\n      (= n_int 47)\n      (= n_int 48)\n      (= n_int 49)\n      (= n_int 50)\n      (= n_int 51)\n      (= n_int 52)\n      (= n_int 53)\n      (= n_int 54)\n      (= n_int 55)\n      ",
    "  (equal? (pow n x) x))\n\n;; Your task is to write a function that returns true if a number x is a square\n;; number and false in other cases.\n;; x is a square number if x=n**2\n;; For example:\n;; >>> (is_square_number 1)\n;; true\n;; >>> (is_square_number 2)\n;; true\n;; >>> (is_square_number 3)\n;; false\n;; >>> (is_square_number 4)\n;; true\n;; >>> (is_square_number 5)\n;; false",
    "  (let ((n_int (floor n)))\n    (and\n      (= (modulo x n) 0)\n      (= n_int 1)\n      (= (modulo (power n_int x)) 0)))\n)\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of n and false in other cases.\n;; x is a simple power of n if n**int=x\n;; For example:\n;; >>> (is_simple_power 1 4)\n;; true\n;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; true\n;; >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false",
    "  (let ((n_int (floor n)))\n    (and\n      (= n_int 0)\n      (= n_int 1)\n      (= n_int 2)\n      (= n_int 3)\n      (= n_int 4)\n      (= n_int 5)\n      (= n_int 6)\n      (= n_int 7)\n      (= n_int 8)\n      (= n_int 9)\n      (= n_int 10)\n      (= n_int 11)\n      (= n_int 12)\n      (= n_int 13)\n      (= n_int 14)\n      (= n_int 15)\n      (= n_int 16)\n      (= n_int 17)\n      (= n_int 18)\n      (= n_int 19)\n      (= n_int 20)\n      (= n_int 21)\n      (= n_int 22)\n      (= n_int 23)\n      (= n_int 24)\n      (= n_int 25)\n      (= n_int 26)\n      (= n_int 27)\n      (= n_int 28)\n      (= n_int 29)\n      (= n_int 30)\n      (= n_int 31)\n      (= n_int 32)\n      (= n_int 33)\n      (= n_int 34)\n      (= n_int 35)\n      (= n_int 36)\n      (= n_int 37)\n      (= n_int 38)\n      (= n_int 39)\n      (= n_int 40)\n      (= n_int 41)\n      (= n_int 42)\n      (= n_int 43)\n      (= n_int 44)\n      (= n_int 45)\n      (= n_int 46)\n      (= n_int 47)\n      (= n_int 48)\n      (= n_int 49)\n      (= n_int 50)\n      (= n_int 51)\n      (= n_int 52)\n      (= n_int 53)\n      (= n_int 54)\n      ",
    "  (let ((n_int (floor n)))\n    (and\n      (= n_int 0)\n      (= (mod x n) 0))))\n\n;; Your task is to write a function that returns true if a number x is a\n;; perfect power of n and false in other cases.\n;; x is a perfect power of n if n**int=x and n**int is a perfect power of 2\n;; For example:\n;; >>> (is_perfect_power 1 4)\n;; false\n;; >>> (is_perfect_power 2 4)\n;; true\n;; >>> (is_perfect_power 2 2)\n;; false\n;; >>> (is_perfect_power 8 2)\n;; true\n;; >>> (is_perfect_power 3 2)\n;; false\n;; >>> (is_perfect_power 3 1)\n;; false\n;; >>> (is_perfect_power 5 3)\n;; false",
    "  (let ((n_int (floor n)))\n    (and\n      (= n_int 1)\n      (= n_int 2)\n      (= n_int 3)\n      (= n_int 4)\n      (= n_int 5)\n      (= n_int 6)\n      (= n_int 7)\n      (= n_int 8)\n      (= n_int 9)\n      (= n_int 10)\n      (= n_int 11)\n      (= n_int 12)\n      (= n_int 13)\n      (= n_int 14)\n      (= n_int 15)\n      (= n_int 16)\n      (= n_int 17)\n      (= n_int 18)\n      (= n_int 19)\n      (= n_int 20)\n      (= n_int 21)\n      (= n_int 22)\n      (= n_int 23)\n      (= n_int 24)\n      (= n_int 25)\n      (= n_int 26)\n      (= n_int 27)\n      (= n_int 28)\n      (= n_int 29)\n      (= n_int 30)\n      (= n_int 31)\n      (= n_int 32)\n      (= n_int 33)\n      (= n_int 34)\n      (= n_int 35)\n      (= n_int 36)\n      (= n_int 37)\n      (= n_int 38)\n      (= n_int 39)\n      (= n_int 40)\n      (= n_int 41)\n      (= n_int 42)\n      (= n_int 43)\n      (= n_int 44)\n      (= n_int 45)\n      (= n_int 46)\n      (= n_int 47)\n      (= n_int 48)\n      (= n_int 49)\n      (= n_int 50)\n      (= n_int 51)\n      (= n_int 52)\n      (= n_int 53)\n      (= n_int 54)\n      (= n_int 55)\n      ",
    "  (let ((n_int (floor n)))\n    (and\n      (= n_int 0)\n      (= n_int 1)\n      (= n_int 2)\n      (= n_int 3)\n      (= n_int 4)\n      (= n_int 5)\n      (= n_int 6)\n      (= n_int 7)\n      (= n_int 8)\n      (= n_int 9)\n      (= n_int 10)\n      (= n_int 11)\n      (= n_int 12)\n      (= n_int 13)\n      (= n_int 14)\n      (= n_int 15)\n      (= n_int 16)\n      (= n_int 17)\n      (= n_int 18)\n      (= n_int 19)\n      (= n_int 20)\n      (= n_int 21)\n      (= n_int 22)\n      (= n_int 23)\n      (= n_int 24)\n      (= n_int 25)\n      (= n_int 26)\n      (= n_int 27)\n      (= n_int 28)\n      (= n_int 29)\n      (= n_int 30)\n      (= n_int 31)\n      (= n_int 32)\n      (= n_int 33)\n      (= n_int 34)\n      (= n_int 35)\n      (= n_int 36)\n      (= n_int 37)\n      (= n_int 38)\n      (= n_int 39)\n      (= n_int 40)\n      (= n_int 41)\n      (= n_int 42)\n      (= n_int 43)\n      (= n_int 44)\n      (= n_int 45)\n      (= n_int 46)\n      (= n_int 47)\n      (= n_int 48)\n      (= n_int 49)\n      (= n_int 50)\n      (= n_int 51)\n      (= n_int 52)\n      (= n_int 53)\n      (= n_int 54)\n      ",
    "  (equal? (power n x) x))\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of n and false in other cases.\n;; x is a simple power of n if n**int=x\n;; For example:\n;; >>> (is_simple_power 1 4)\n;; true\n;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; true\n;; >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false\n;; >>> (is_simple_power 5 2)\n;; false\n;; >>> (is_simple_power 5 1)\n;; false\n;; >>> (is_simple_power 5 0)\n;; false\n;; >>> (is_simple_power 5 -1)\n;; false\n;; >>> (is_simple_power 5 -2)\n;; false\n;; >>> (is_simple_power 5 -3)\n;; false\n;; >>> (is_simple_power 5 -4)\n;; false\n;; >>> (is_simple_power 5 -5)\n;; false\n;; >>> (is_simple_power 5 -6)\n;; false\n;; >>> (is_simple_power 5 -7)\n;; false\n;; >>> (is_simple_power 5 -8)\n;; false\n;; >>> (is_simple_power 5 -9)\n;; false\n;; >>> (is_simple_power 5 -10)\n;; false\n;; >>> (is_simple_power 5 -11)\n;; false\n;; >>> (is_simple_power 5 -12)\n;; false\n;; >>> (is_simple_power 5 -13)\n;; false\n;; >>> (is_simple_power 5 -14)\n;; false\n;; >>> (is_simple_power 5 -15)\n;; false\n;; >>> (is_simple_power 5 -16)\n;; false\n;; >>> (is_simple_power 5 -17)\n;; false\n;; >>> (is_simple_power 5 -18)\n;; false\n;; >>> (is_simple_power 5 -19)\n;; false\n;; >>> (is_simple_power 5 -",
    "  (cond\n    ((= n 1) true)\n    ((= n 2) true)\n    ((= n 3) true)\n    ((= n 4) true)\n    ((= n 5) true)\n    ((= n 6) true)\n    ((= n 7) true)\n    ((= n 8) true)\n    ((= n 9) true)\n    ((= n 10) true)\n    ((= n 11) true)\n    ((= n 12) true)\n    ((= n 13) true)\n    ((= n 14) true)\n    ((= n 15) true)\n    ((= n 16) true)\n    ((= n 17) true)\n    ((= n 18) true)\n    ((= n 19) true)\n    ((= n 20) true)\n    ((= n 21) true)\n    ((= n 22) true)\n    ((= n 23) true)\n    ((= n 24) true)\n    ((= n 25) true)\n    ((= n 26) true)\n    ((= n 27) true)\n    ((= n 28) true)\n    ((= n 29) true)\n    ((= n 30) true)\n    ((= n 31) true)\n    ((= n 32) true)\n    ((= n 33) true)\n    ((= n 34) true)\n    ((= n 35) true)\n    ((= n 36) true)\n    ((= n 37) true)\n    ((= n 38) true)\n    ((= n 39) true)\n    ((= n 40) true)\n    ((= n 41) true)\n    ((= n 42) true)\n    ((= n 43) true)\n    ((= n 44) true)\n    ((= n 45) true)\n    ((= n 46) true)\n    ((= n 47) true)\n    ((= n 48) true)\n    ((= n 49) true)\n    ((= n 50) true)\n    ((= n 51) true)\n    ((= n 52) true)\n    ((= n 53) true)\n    ((= n 54) true)\n    ((= n 55) true)\n    ((= n 56) true)\n    ((= n",
    "  (let ((n_int (floor n)))\n    (and\n      (= n_int 1)\n      (= n_int 2)\n      (= n_int 3)\n      (= n_int 4)\n      (= n_int 5)\n      (= n_int 6)\n      (= n_int 7)\n      (= n_int 8)\n      (= n_int 9)\n      (= n_int 10)\n      (= n_int 11)\n      (= n_int 12)\n      (= n_int 13)\n      (= n_int 14)\n      (= n_int 15)\n      (= n_int 16)\n      (= n_int 17)\n      (= n_int 18)\n      (= n_int 19)\n      (= n_int 20)\n      (= n_int 21)\n      (= n_int 22)\n      (= n_int 23)\n      (= n_int 24)\n      (= n_int 25)\n      (= n_int 26)\n      (= n_int 27)\n      (= n_int 28)\n      (= n_int 29)\n      (= n_int 30)\n      (= n_int 31)\n      (= n_int 32)\n      (= n_int 33)\n      (= n_int 34)\n      (= n_int 35)\n      (= n_int 36)\n      (= n_int 37)\n      (= n_int 38)\n      (= n_int 39)\n      (= n_int 40)\n      (= n_int 41)\n      (= n_int 42)\n      (= n_int 43)\n      (= n_int 44)\n      (= n_int 45)\n      (= n_int 46)\n      (= n_int 47)\n      (= n_int 48)\n      (= n_int 49)\n      (= n_int 50)\n      (= n_int 51)\n      (= n_int 52)\n      (= n_int 53)\n      (= n_int 54)\n      (= n_int 55)\n      ",
    "  (if (eq? x n)\n    true\n    false))\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of n and false in other cases.\n;; x is a simple power of n if n**int=x\n;; For example:\n;; >>> (is_simple_power 1 4)\n;; true\n;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; true\n;; >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false",
    "  (equal? (power n x) x))\n\n;; Your task is to write a function that returns true if a number x is a square\n;; number and false in other cases.\n;; x is a square number if n**2=x\n;; For example:\n;; >>> (is_square_number 1)\n;; true\n;; >>> (is_square_number 2)\n;; true\n;; >>> (is_square_number 3)\n;; false\n;; >>> (is_square_number 4)\n;; true\n;; >>> (is_square_number 5)\n;; false",
    "  (cond\n    ((= x 1) true)\n    ((= x 0) false)\n    ((= x n) false)\n    ((= (expt n x) x) true)\n    (else false)\n  )\n)\n\n;; Your task is to write a function that returns true if a number x is a\n;; perfect power of n and false in other cases.\n;; x is a perfect power of n if n**int=x and n**int is a prime number\n;; For example:\n;; >>> (is_perfect_power 2 4)\n;; true\n;; >>> (is_perfect_power 2 3)\n;; false\n;; >>> (is_perfect_power 2 2)\n;; false\n;; >>> (is_perfect_power 2 1)\n;; false\n;; >>> (is_perfect_power 3 4)\n;; false\n;; >>> (is_perfect_power 3 3)\n;; true\n;; >>> (is_perfect_power 3 2)\n;; false\n;; >>> (is_perfect_power 3 1)\n;; false\n;; >>> (is_perfect_power 5 4)\n;; false\n;; >>> (is_perfect_power 5 3)\n;; false\n;; >>> (is_perfect_power 5 2)\n;; false\n;; >>> (is_perfect_power 5 1)\n;; false",
    "  (cond\n    ((= x 1) true)\n    ((= x 0) false)\n    ((> x 0)\n      (and\n        (= n 1)\n        (= (expt x n) x)))\n    (< x 0)\n    (and\n      (= n -1)\n      (= (expt x n) x)))\n  false)\n\n;; Your task is to write a function that returns true if a number x is a\n;; perfect power of n and false in other cases.\n;; x is a perfect power of n if n**int=x and n**int=x**int\n;; For example:\n;; >>> (is_perfect_power 2 4)\n;; true\n;; >>> (is_perfect_power 2 2)\n;; false\n;; >>> (is_perfect_power 3 2)\n;; false\n;; >>> (is_perfect_power 3 3)\n;; true\n;; >>> (is_perfect_power 3 4)\n;; false",
    "  (cond\n    ((= n 1) true)\n    ((= n 2) true)\n    ((= n 3) false)\n    ((= n 4) true)\n    ((= n 5) false)\n    ((= n 6) false)\n    ((= n 7) false)\n    ((= n 8) true)\n    ((= n 9) false)\n    ((= n 10) false)\n    ((= n 11) false)\n    ((= n 12) false)\n    ((= n 13) false)\n    ((= n 14) false)\n    ((= n 15) false)\n    ((= n 16) false)\n    ((= n 17) false)\n    ((= n 18) false)\n    ((= n 19) false)\n    ((= n 20) false)\n    ((= n 21) false)\n    ((= n 22) false)\n    ((= n 23) false)\n    ((= n 24) false)\n    ((= n 25) false)\n    ((= n 26) false)\n    ((= n 27) false)\n    ((= n 28) false)\n    ((= n 29) false)\n    ((= n 30) false)\n    ((= n 31) false)\n    ((= n 32) false)\n    ((= n 33) false)\n    ((= n 34) false)\n    ((= n 35) false)\n    ((= n 36) false)\n    ((= n 37) false)\n    ((= n 38) false)\n    ((= n 39) false)\n    ((= n 40) false)\n    ((= n 41) false)\n    ((= n 42) false)\n    ((= n 43) false)\n    ((= n 44) false)\n    ((= n 45) false)\n    ((= n 46) false)\n    ((= n 47) false)\n    ((= n 48) false)\n    ((= n 49) false)\n    ((= n 50) false)\n    ((= n 51) false)\n    ((= n 52) false)\n    ((= n 53) false)\n    ((= n 54) false)\n    ((= n 55) false)\n    ((= n 56) false)\n    ((= n",
    "  (and\n    (= n 1)\n    (= x 1)\n    (= (expt n x) x)))\n\n;; Your task is to write a function that returns true if a number x is a square\n;; number and false in other cases.\n;; x is a square number if x**2=x\n;; For example:\n;; >>> (is_square_number 2)\n;; true\n;; >>> (is_square_number 3)\n;; false",
    "  (equal? (pow n x) x))\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of 2 and false in other cases.\n;; x is a simple power of 2 if 2**int=x\n;; For example:\n;; >>> (is_simple_power 2 4)\n;; true\n;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; true\n;; >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false",
    "  (let ((n_int (floor n)))\n    (and\n      (= (modulo x n) 0)\n      (= n_int 1)\n      (= (modulo (power n_int x)) 0)))\n)\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of 2 and false in other cases.\n;; x is a simple power of 2 if 2**int=x\n;; For example:\n;; >>> (is_simple_power 2 4)\n;; false\n;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; false\n;; >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false",
    "  (cond\n    ((= n 1) true)\n    ((= n 0) false)\n    (else\n      (and\n        (= (modulo x n) 0)\n        (= (quotient x n) 1)))\n  )\n)\n\n;; Your task is to write a function that returns true if a number x is a\n;; perfect power of n and false in other cases.\n;; x is a perfect power of n if n**int=x and n**int is also a perfect power\n;; For example:\n;; >>> (is_perfect_power 2 4)\n;; true\n;; >>> (is_perfect_power 2 2)\n;; false\n;; >>> (is_perfect_power 3 4)\n;; false\n;; >>> (is_perfect_power 3 2)\n;; false\n;; >>> (is_perfect_power 5 4)\n;; true\n;; >>> (is_perfect_power 5 2)\n;; false",
    "  (cond\n    ((= x 1) true)\n    ((= x 0) false)\n    ((> x 0)\n      (and\n        (= n 1)\n        (= (expt x n) x)))\n    (< x 0)\n    (and\n      (= n 2)\n      (= (expt x n) x))\n    (else\n      false)))\n",
    "  (if (eq? x n)\n    true\n    false))\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of n and false in other cases.\n;; x is a simple power of n if n**int=x\n;; For example:\n;; >>> (is_simple_power 1 4)\n;; true\n;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; true\n;; >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false",
    "  (if (eq? n 0)\n    true\n    (and (eq? x 1)\n         (eq? n 1))\n    (and (eq? x 2)\n         (eq? n 2))\n    (and (eq? x 4)\n         (eq? n 4))\n    (and (eq? x 8)\n         (eq? n 8))\n    (and (eq? x 16)\n         (eq? n 16))\n    (and (eq? x 32)\n         (eq? n 32))\n    (and (eq? x 64)\n         (eq? n 64))\n    (and (eq? x 128)\n         (eq? n 128))\n    (and (eq? x 256)\n         (eq? n 256))\n    (and (eq? x 512)\n         (eq? n 512))\n    (and (eq? x 1024)\n         (eq? n 1024))\n    (and (eq? x 2048)\n         (eq? n 2048))\n    (and (eq? x 4096)\n         (eq? n 4096))\n    (and (eq? x 8192)\n         (eq? n 8192))\n    (and (eq? x 16384)\n         (eq? n 16384))\n    (and (eq? x 32768)\n         (eq? n 32768))\n    (and (eq? x 65536)\n         (eq? n 65536))\n    (and (eq? x 131072)\n         (eq? n 131072))\n    (and (eq? x 262144)\n         (eq? n 262144))\n    (and (eq? x 524288)\n         (eq? n 524288))\n    (and (eq? x 1048576)\n         (eq? n 1048576))\n    (and (eq? x 2097152)\n         (eq? n 2097152))\n    (and (eq? x 4194304)\n         (eq? n 4194304))\n    (and (eq? x 8388608)\n         (eq? n 8388608))\n    (and (eq? x 16777216)\n         (eq? n 16777216))\n    (and (eq? x 3355",
    "  (equal? (pow n x) x))\n\n;; The function is_simple_power takes two arguments, x and n.\n;; The function returns true if x is a simple power of n and false otherwise.\n\n;; The function is_simple_power takes two arguments, x and n.\n;; The function returns true if x is a simple power of n and false otherwise.",
    "  (equal? (square x) n)\n)\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of n and false in other cases.\n;; x is a simple power of n if n**int=x\n;; For example:\n;; >>> (is_simple_power 1 4)\n;; true\n;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; true\n;; >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false",
    "  (equal? (power n x) x))\n\n;; Your task is to write a function that returns true if a number x is a\n;; perfect square and false in other cases.\n;; x is a perfect square if n**2=x\n;; For example:\n;; >>> (is_perfect_square 2)\n;; true\n;; >>> (is_perfect_square 3)\n;; false\n;; >>> (is_perfect_square 4)\n;; false\n;; >>> (is_perfect_square 9)\n;; true\n;; >>> (is_perfect_square 10)\n;; false\n;; >>> (is_perfect_square 16)\n;; true\n;; >>> (is_perfect_square 17)\n;; false\n;; >>> (is_perfect_square 18)\n;; false\n;; >>> (is_perfect_square 19)\n;; false\n;; >>> (is_perfect_square 20)\n;; false\n;; >>> (is_perfect_square 21)\n;; false\n;; >>> (is_perfect_square 22)\n;; false\n;; >>> (is_perfect_square 23)\n;; false\n;; >>> (is_perfect_square 24)\n;; false\n;; >>> (is_perfect_square 25)\n;; false\n;; >>> (is_perfect_square 26)\n;; false\n;; >>> (is_perfect_square 27)\n;; false\n;; >>> (is_perfect_square 28)\n;; false\n;; >>> (is_perfect_square 29)\n;; false\n;; >>> (is_perfect_square 30)\n;; false\n;; >>> (is_perfect_square 31)\n;; false\n;; >>> (is_perfect_square 32)\n;; false\n;; >>> (is_perfect_square 33)\n;; false\n;; >>> (is_perfect_square 34)\n;; false\n;; >>> (is_perfect_square 35)\n;; false\n;; >>> (is_perfect_square 36)\n;; false\n;; >>> (is_perfect_square 37)\n;; false\n;; >>> (is_perfect_square 38)\n;; false\n;; >>> (is_perfect_square 39)\n;; false\n;; >>> (is_perfect_square 40)\n;; false\n;; >>> (is_perfect_square 41)\n;; false\n;; >>> (is_perfect_square 42)\n;; false\n;; >>> (is_",
    "  (cond\n    ((= n 1) true)\n    ((= n 2) true)\n    ((= n 3) true)\n    ((= n 4) true)\n    ((= n 5) true)\n    ((= n 6) true)\n    ((= n 7) true)\n    ((= n 8) true)\n    ((= n 9) true)\n    ((= n 10) true)\n    ((= n 11) true)\n    ((= n 12) true)\n    ((= n 13) true)\n    ((= n 14) true)\n    ((= n 15) true)\n    ((= n 16) true)\n    ((= n 17) true)\n    ((= n 18) true)\n    ((= n 19) true)\n    ((= n 20) true)\n    ((= n 21) true)\n    ((= n 22) true)\n    ((= n 23) true)\n    ((= n 24) true)\n    ((= n 25) true)\n    ((= n 26) true)\n    ((= n 27) true)\n    ((= n 28) true)\n    ((= n 29) true)\n    ((= n 30) true)\n    ((= n 31) true)\n    ((= n 32) true)\n    ((= n 33) true)\n    ((= n 34) true)\n    ((= n 35) true)\n    ((= n 36) true)\n    ((= n 37) true)\n    ((= n 38) true)\n    ((= n 39) true)\n    ((= n 40) true)\n    ((= n 41) true)\n    ((= n 42) true)\n    ((= n 43) true)\n    ((= n 44) true)\n    ((= n 45) true)\n    ((= n 46) true)\n    ((= n 47) true)\n    ((= n 48) true)\n    ((= n 49) true)\n    ((= n 50) true)\n    ((= n 51) true)\n    ((= n 52) true)\n    ((= n 53) true)\n    ((= n 54) true)\n    ((= n 55) true)\n    ((= n 56) true)\n    ((= n",
    "  (equal? (power x n) x))\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of n and false in other cases.\n;; x is a simple power of n if n**int=x\n;; For example:\n;; >>> (is_simple_power 1 4)\n;; true\n;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; true\n;; >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false",
    "  (cond\n    ((= n 1) true)\n    ((= n 2) true)\n    ((= n 3) true)\n    ((= n 4) true)\n    ((= n 5) true)\n    ((= n 6) true)\n    ((= n 7) true)\n    ((= n 8) true)\n    ((= n 9) true)\n    ((= n 10) true)\n    ((= n 11) true)\n    ((= n 12) true)\n    ((= n 13) true)\n    ((= n 14) true)\n    ((= n 15) true)\n    ((= n 16) true)\n    ((= n 17) true)\n    ((= n 18) true)\n    ((= n 19) true)\n    ((= n 20) true)\n    ((= n 21) true)\n    ((= n 22) true)\n    ((= n 23) true)\n    ((= n 24) true)\n    ((= n 25) true)\n    ((= n 26) true)\n    ((= n 27) true)\n    ((= n 28) true)\n    ((= n 29) true)\n    ((= n 30) true)\n    ((= n 31) true)\n    ((= n 32) true)\n    ((= n 33) true)\n    ((= n 34) true)\n    ((= n 35) true)\n    ((= n 36) true)\n    ((= n 37) true)\n    ((= n 38) true)\n    ((= n 39) true)\n    ((= n 40) true)\n    ((= n 41) true)\n    ((= n 42) true)\n    ((= n 43) true)\n    ((= n 44) true)\n    ((= n 45) true)\n    ((= n 46) true)\n    ((= n 47) true)\n    ((= n 48) true)\n    ((= n 49) true)\n    ((= n 50) true)\n    ((= n 51) true)\n    ((= n 52) true)\n    ((= n 53) true)\n    ((= n 54) true)\n    ((= n 55) true)\n    ((= n 56) true)\n    ((= n",
    "  (cond\n    ((= x 1) true)\n    ((= x 0) false)\n    ((= x n) false)\n    ((= (expt x n) x) true)\n    (else false)\n  )\n)\n\n;; Your task is to write a function that returns true if a number x is a\n;; perfect power of n and false in other cases.\n;; x is a perfect power of n if n**int=x and n**int is a prime number\n;; For example:\n;; >>> (is_perfect_power 2 4)\n;; true\n;; >>> (is_perfect_power 2 3)\n;; false\n;; >>> (is_perfect_power 2 2)\n;; false\n;; >>> (is_perfect_power 3 2)\n;; false\n;; >>> (is_perfect_power 3 3)\n;; true\n;; >>> (is_perfect_power 3 4)\n;; false",
    "  (let ((n_int (floor n)))\n    (and\n      (= (modulo x n) 0)\n      (= (modulo n n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo n_int n_int) 0)\n      (= (modulo",
    "  (cond\n    ((= n 1) true)\n    ((= n 2) true)\n    ((= n 3) true)\n    ((= n 4) true)\n    ((= n 5) true)\n    ((= n 6) true)\n    ((= n 7) true)\n    ((= n 8) true)\n    ((= n 9) true)\n    ((= n 10) true)\n    ((= n 11) true)\n    ((= n 12) true)\n    ((= n 13) true)\n    ((= n 14) true)\n    ((= n 15) true)\n    ((= n 16) true)\n    ((= n 17) true)\n    ((= n 18) true)\n    ((= n 19) true)\n    ((= n 20) true)\n    ((= n 21) true)\n    ((= n 22) true)\n    ((= n 23) true)\n    ((= n 24) true)\n    ((= n 25) true)\n    ((= n 26) true)\n    ((= n 27) true)\n    ((= n 28) true)\n    ((= n 29) true)\n    ((= n 30) true)\n    ((= n 31) true)\n    ((= n 32) true)\n    ((= n 33) true)\n    ((= n 34) true)\n    ((= n 35) true)\n    ((= n 36) true)\n    ((= n 37) true)\n    ((= n 38) true)\n    ((= n 39) true)\n    ((= n 40) true)\n    ((= n 41) true)\n    ((= n 42) true)\n    ((= n 43) true)\n    ((= n 44) true)\n    ((= n 45) true)\n    ((= n 46) true)\n    ((= n 47) true)\n    ((= n 48) true)\n    ((= n 49) true)\n    ((= n 50) true)\n    ((= n 51) true)\n    ((= n 52) true)\n    ((= n 53) true)\n    ((= n 54) true)\n    ((= n 55) true)\n    ((= n 56) true)\n    ((= n",
    "  (cond\n    [(zero? n) true]\n    [(zero? x) false]\n    [(zero? (expt n x)) true]\n    [false]\n  )\n)\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of n and false in other cases.\n;; x is a simple power of n if n**int=x\n;; For example:\n;; >>> (is_simple_power 1 4)\n;; true\n;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; true\n;; >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false",
    "  (let ((n_int (floor n)))\n    (and\n      (= n_int 1)\n      (= n_int 2)\n      (= n_int 3)\n      (= n_int 4)\n      (= n_int 5)\n      (= n_int 6)\n      (= n_int 7)\n      (= n_int 8)\n      (= n_int 9)\n      (= n_int 10)\n      (= n_int 11)\n      (= n_int 12)\n      (= n_int 13)\n      (= n_int 14)\n      (= n_int 15)\n      (= n_int 16)\n      (= n_int 17)\n      (= n_int 18)\n      (= n_int 19)\n      (= n_int 20)\n      (= n_int 21)\n      (= n_int 22)\n      (= n_int 23)\n      (= n_int 24)\n      (= n_int 25)\n      (= n_int 26)\n      (= n_int 27)\n      (= n_int 28)\n      (= n_int 29)\n      (= n_int 30)\n      (= n_int 31)\n      (= n_int 32)\n      (= n_int 33)\n      (= n_int 34)\n      (= n_int 35)\n      (= n_int 36)\n      (= n_int 37)\n      (= n_int 38)\n      (= n_int 39)\n      (= n_int 40)\n      (= n_int 41)\n      (= n_int 42)\n      (= n_int 43)\n      (= n_int 44)\n      (= n_int 45)\n      (= n_int 46)\n      (= n_int 47)\n      (= n_int 48)\n      (= n_int 49)\n      (= n_int 50)\n      (= n_int 51)\n      (= n_int 52)\n      (= n_int 53)\n      (= n_int 54)\n      (= n_int 55)\n      ",
    "  (cond\n    ((= n 1) true)\n    ((= n 2) true)\n    ((= n 3) true)\n    ((= n 4) true)\n    ((= n 5) true)\n    ((= n 6) true)\n    ((= n 7) true)\n    ((= n 8) true)\n    ((= n 9) true)\n    ((= n 10) true)\n    ((= n 11) true)\n    ((= n 12) true)\n    ((= n 13) true)\n    ((= n 14) true)\n    ((= n 15) true)\n    ((= n 16) true)\n    ((= n 17) true)\n    ((= n 18) true)\n    ((= n 19) true)\n    ((= n 20) true)\n    ((= n 21) true)\n    ((= n 22) true)\n    ((= n 23) true)\n    ((= n 24) true)\n    ((= n 25) true)\n    ((= n 26) true)\n    ((= n 27) true)\n    ((= n 28) true)\n    ((= n 29) true)\n    ((= n 30) true)\n    ((= n 31) true)\n    ((= n 32) true)\n    ((= n 33) true)\n    ((= n 34) true)\n    ((= n 35) true)\n    ((= n 36) true)\n    ((= n 37) true)\n    ((= n 38) true)\n    ((= n 39) true)\n    ((= n 40) true)\n    ((= n 41) true)\n    ((= n 42) true)\n    ((= n 43) true)\n    ((= n 44) true)\n    ((= n 45) true)\n    ((= n 46) true)\n    ((= n 47) true)\n    ((= n 48) true)\n    ((= n 49) true)\n    ((= n 50) true)\n    ((= n 51) true)\n    ((= n 52) true)\n    ((= n 53) true)\n    ((= n 54) true)\n    ((= n 55) true)\n    ((= n 56) true)\n    ((= n",
    "  (cond\n    ((= x 1) true)\n    ((= x 0) false)\n    (else\n      (and\n        (= n 2)\n        (= x (expt n x)))\n      false)\n  ))\n",
    "  (cond\n    [(zero? n) true]\n    [(zero? x) false]\n    [(zero? (expt n x)) true]\n    [false]\n  )\n)\n",
    "  (equal? (pow n x) x))\n\n;; Your task is to write a function that returns true if a number x is a square\n;; number and false in other cases.\n;; x is a square number if n**2=x\n;; For example:\n;; >>> (is_square_number 1)\n;; true\n;; >>> (is_square_number 2)\n;; true\n;; >>> (is_square_number 3)\n;; false\n;; >>> (is_square_number 4)\n;; true\n;; >>> (is_square_number 5)\n;; false\n;; >>> (is_square_number 6)\n;; false\n;; >>> (is_square_number 7)\n;; false",
    "  (let ((n_int (floor n)))\n    (and\n      (= n_int 0)\n      (= n_int 1)\n      (= n_int 2)\n      (= n_int 3)\n      (= n_int 4)\n      (= n_int 5)\n      (= n_int 6)\n      (= n_int 7)\n      (= n_int 8)\n      (= n_int 9)\n      (= n_int 10)\n      (= n_int 11)\n      (= n_int 12)\n      (= n_int 13)\n      (= n_int 14)\n      (= n_int 15)\n      (= n_int 16)\n      (= n_int 17)\n      (= n_int 18)\n      (= n_int 19)\n      (= n_int 20)\n      (= n_int 21)\n      (= n_int 22)\n      (= n_int 23)\n      (= n_int 24)\n      (= n_int 25)\n      (= n_int 26)\n      (= n_int 27)\n      (= n_int 28)\n      (= n_int 29)\n      (= n_int 30)\n      (= n_int 31)\n      (= n_int 32)\n      (= n_int 33)\n      (= n_int 34)\n      (= n_int 35)\n      (= n_int 36)\n      (= n_int 37)\n      (= n_int 38)\n      (= n_int 39)\n      (= n_int 40)\n      (= n_int 41)\n      (= n_int 42)\n      (= n_int 43)\n      (= n_int 44)\n      (= n_int 45)\n      (= n_int 46)\n      (= n_int 47)\n      (= n_int 48)\n      (= n_int 49)\n      (= n_int 50)\n      (= n_int 51)\n      (= n_int 52)\n      (= n_int 53)\n      (= n_int 54)\n      ",
    "  (equal? (pow n x) x))\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of n and false in other cases.\n;; x is a simple power of n if n**int=x\n;; For example:\n;; >>> (is_simple_power 1 4)\n;; true\n;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; true\n;; >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false",
    "  (equal? (power n x) x))\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of n and false in other cases.\n;; x is a simple power of n if n**int=x\n;; For example:\n;; >>> (is_simple_power 1 4)\n;; true\n;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; true\n;; >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false",
    "  (if (eq? x n)\n    (return #t)\n    (if (eq? n (expt x 1))\n      (return #t)\n      (return #f))))\n",
    "  (let ((n_int (floor n)))\n    (and\n      (= (modulo x n) 0)\n      (= n_int 1)\n      (= (modulo (power n_int x)) 0)\n      (= (modulo (power n_int (power x n_int))) 0)\n      (= (modulo (power n_int (power x n_int))) x)))\n)\n\n;; Your task is to write a function that returns true if a number x is a square\n;; number and false in other cases.\n;; x is a square number if x=n**2\n;; For example:\n;; >>> (is_square_number 1)\n;; true\n;; >>> (is_square_number 2)\n;; false\n;; >>> (is_square_number 3)\n;; false\n;; >>> (is_square_number 4)\n;; true\n;; >>> (is_square_number 5)\n;; false",
    "  (equal? (pow n x) x))\n\n;; You can test your function with this command:\n;; (is_simple_power 1 4)\n;; (is_simple_power 2 2)\n;; (is_simple_power 8 2)\n;; (is_simple_power 3 2)\n;; (is_simple_power 3 1)\n;; (is_simple_power 5 3)\n;; (is_simple_power 5 5)\n;; (is_simple_power 5 6)\n;; (is_simple_power 5 7)\n;; (is_simple_power 5 8)\n;; (is_simple_power 5 9)\n;; (is_simple_power 5 10)\n;; (is_simple_power 5 11)\n;; (is_simple_power 5 12)\n;; (is_simple_power 5 13)\n;; (is_simple_power 5 14)\n;; (is_simple_power 5 15)\n;; (is_simple_power 5 16)\n;; (is_simple_power 5 17)\n;; (is_simple_power 5 18)\n;; (is_simple_power 5 19)\n;; (is_simple_power 5 20)\n;; (is_simple_power 5 21)\n;; (is_simple_power 5 22)\n;; (is_simple_power 5 23)\n;; (is_simple_power 5 24)\n;; (is_simple_power 5 25)\n;; (is_simple_power 5 26)\n;; (is_simple_power 5 27)\n;; (is_simple_power 5 28)\n;; (is_simple_power 5 29)\n;; (is_simple_power 5 30)\n;; (is_simple_power 5 31)\n;; (is_simple_power 5 32)\n;; (is_simple_power 5 33)\n;; (is_simple_power 5 34)\n;; (is_simple_power 5 35)\n;; (is_simple_power 5 36)\n;; (is_simple_power 5 37)\n;; (is_simple_power 5 38)\n;; (is_simple_power 5 39)\n;; (is_simple_power 5 40)\n;; (is_simple_power 5 41)\n;; (is_simple_power 5 42)\n;; (is",
    "  (cond\n    ((= x 1) true)\n    ((= x 0) false)\n    ((= x n) false)\n    ((= n 0) false)\n    (else\n      (and\n        (= n 1)\n        (= x (expt n x)))\n      false)\n    )\n  )\n)\n",
    "  (cond\n    ((= x 1) true)\n    ((= x 0) false)\n    (else\n      (and\n        (= n 2)\n        (= x (expt n x)))\n      false)\n    ))\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of n and false in other cases.\n;; x is a simple power of n if n**int=x\n;; For example:\n;; >>> (is_simple_power 1 4)\n;; true\n;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; true\n;; >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false",
    "  (and\n    (= x 1)\n    (= n 1)\n    (= (square n) x)))\n\n;; Your function should return true if x is a simple power of n and false in\n;; other cases.",
    "  (equal? (square n) x))\n\n;; The function is_simple_power takes two arguments, x and n.\n;; The function square takes one argument, x.\n;; The function equal? takes two arguments, x and y.\n;; The function square takes one argument, x.\n;; The function square takes one argument, x.\n;; The function square takes one argument, x.\n;; The function square takes one argument, x.\n;; The function square takes one argument, x.\n;; The function square takes one argument, x.\n;; The function square takes one argument, x.\n;; The function square takes one argument, x.\n;; The function square takes one argument, x.\n;; The function square takes one argument, x.\n;; The function square takes one argument, x.\n;; The function square takes one argument, x.\n;; The function square takes one argument, x.\n;; The function square takes one argument, x.\n;; The function square takes one argument, x.\n;; The function square takes one argument, x.\n;; The function square takes one argument, x.\n;; The function square takes one argument, x.\n;; The function square takes one argument, x.\n;; The function square takes one argument, x.\n;; The function square takes one argument, x.\n;; The function square takes one argument, x.\n;; The function square takes one argument, x.\n;; The function square takes one argument, x.\n;; The function square takes one argument, x.\n;; The function square takes one argument, x.\n;; The function square takes one argument, x.\n;; The function square takes one argument, x.\n;; The function square takes one argument, x.\n;; The function square takes one argument, x.\n;; The function square takes one argument, x.\n;; The function square takes one argument, x.\n;; The function square takes one argument, x.\n;; The function square takes one argument, x.\n;; The function square takes one argument, x.\n;; The function square takes one argument, x.\n;; The function square takes one argument, x.\n;; The function square takes one argument, x.\n;; The function square takes one argument, x.\n;; The function square takes one argument, x.\n;; The function square takes one argument, x.\n;; The function square takes one argument",
    "  (and\n    (= n 1)\n    (= x 1)\n    (= (expt x n) x)))\n\n;; Your task is to write a function that returns true if a number x is a\n;; perfect power of n and false in other cases.\n;; x is a perfect power of n if n**int=x and n**int is a perfect power of 2\n;; For example:\n;; >>> (is_perfect_power 1 4)\n;; false\n;; >>> (is_perfect_power 2 4)\n;; true\n;; >>> (is_perfect_power 2 2)\n;; false\n;; >>> (is_perfect_power 8 2)\n;; false\n;; >>> (is_perfect_power 3 2)\n;; false\n;; >>> (is_perfect_power 3 1)\n;; false\n;; >>> (is_perfect_power 5 3)\n;; true",
    "  (cond\n    [(zero? n) true]\n    [(zero? x) false]\n    [(zero? (expt n x)) true]\n    [false]\n  )\n)\n\n;; Your task is to write a function that returns true if a number x is a\n;; perfect square and false in other cases.\n;; x is a perfect square if int=x and (int)**2=x\n;; For example:\n;; >>> (is_perfect_square 1)\n;; true\n;; >>> (is_perfect_square 2)\n;; false\n;; >>> (is_perfect_square 3)\n;; false\n;; >>> (is_perfect_square 4)\n;; true\n;; >>> (is_perfect_square 5)\n;; false\n;; >>> (is_perfect_square 6)\n;; false\n;; >>> (is_perfect_square 7)\n;; false\n;; >>> (is_perfect_square 8)\n;; true\n;; >>> (is_perfect_square 9)\n;; false\n;; >>> (is_perfect_square 10)\n;; false\n;; >>> (is_perfect_square 11)\n;; false\n;; >>> (is_perfect_square 12)\n;; true\n;; >>> (is_perfect_square 13)\n;; false\n;; >>> (is_perfect_square 14)\n;; false\n;; >>> (is_perfect_square 15)\n;; false\n;; >>> (is_perfect_square 16)\n;; true\n;; >>> (is_perfect_square 17)\n;; false\n;; >>> (is_perfect_square 18)\n;; false\n;; >>> (is_perfect_square 19)\n;; false\n;; >>> (is_perfect_square 20)\n;; false\n;; >>> (is_perfect_square 21)\n;; false\n;; >>> (is_perfect_square 22)\n;; false\n;; >>> (is_perfect_square 23)\n;; false\n;; >>> (is_perfect_square 24)\n;; false\n;; >>> (is_perfect_square 25)\n;; false\n;; >>> (is_perfect_square 26)\n;; false\n;; >>> (is_perfect_square 27)\n;; false\n;; >>> (is_perfect_square 28)\n;; false\n;; >>> (is_perfect_square 29)\n;; false\n;; >>> (is_",
    "  (let ((n_int (floor n)))\n    (and\n      (= n_int 0)\n      (= n_int 1)\n      (= n_int 2)\n      (= n_int 3)\n      (= n_int 4)\n      (= n_int 5)\n      (= n_int 6)\n      (= n_int 7)\n      (= n_int 8)\n      (= n_int 9)\n      (= n_int 10)\n      (= n_int 11)\n      (= n_int 12)\n      (= n_int 13)\n      (= n_int 14)\n      (= n_int 15)\n      (= n_int 16)\n      (= n_int 17)\n      (= n_int 18)\n      (= n_int 19)\n      (= n_int 20)\n      (= n_int 21)\n      (= n_int 22)\n      (= n_int 23)\n      (= n_int 24)\n      (= n_int 25)\n      (= n_int 26)\n      (= n_int 27)\n      (= n_int 28)\n      (= n_int 29)\n      (= n_int 30)\n      (= n_int 31)\n      (= n_int 32)\n      (= n_int 33)\n      (= n_int 34)\n      (= n_int 35)\n      (= n_int 36)\n      (= n_int 37)\n      (= n_int 38)\n      (= n_int 39)\n      (= n_int 40)\n      (= n_int 41)\n      (= n_int 42)\n      (= n_int 43)\n      (= n_int 44)\n      (= n_int 45)\n      (= n_int 46)\n      (= n_int 47)\n      (= n_int 48)\n      (= n_int 49)\n      (= n_int 50)\n      (= n_int 51)\n      (= n_int 52)\n      (= n_int 53)\n      (= n_int 54)\n      ",
    "  (and\n    (= (modulo x n) 0)\n    (= (quotient x n) 1)))\n\n;; Your task is to write a function that returns true if a number x is a\n;; perfect power of n and false in other cases.\n;; x is a perfect power of n if n**int=x and n**int is a prime number\n;; For example:\n;; >>> (is_perfect_power 2 4)\n;; true\n;; >>> (is_perfect_power 2 3)\n;; false\n;; >>> (is_perfect_power 2 2)\n;; false\n;; >>> (is_perfect_power 3 2)\n;; true\n;; >>> (is_perfect_power 3 1)\n;; false\n;; >>> (is_perfect_power 5 3)\n;; true",
    "  (equal? (power n x) x))\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of 2 and false in other cases.\n;; x is a simple power of 2 if 2**int=x\n;; For example:\n;; >>> (is_simple_power 2 4)\n;; false\n;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; false\n;; >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false",
    "  (if (eq? x n)\n    (return #t)\n    (if (eq? n 2)\n      (return #t)\n      (if (eq? n 3)\n        (return #t)\n        (if (eq? n 4)\n          (return #t)\n          (if (eq? n 5)\n            (return #t)\n            (if (eq? n 6)\n              (return #t)\n              (if (eq? n 7)\n                (return #t)\n                (if (eq? n 8)\n                  (return #t)\n                  (if (eq? n 9)\n                    (return #t)\n                    (if (eq? n 10)\n                      (return #t)\n                      (if (eq? n 11)\n                        (return #t)\n                        (if (eq? n 12)\n                          (return #t)\n                          (if (eq? n 13)\n                            (return #t)\n                            (if (eq? n 14)\n                              (return #t)\n                              (if (eq? n 15)\n                                (return #t)\n                                (if (eq? n 16)\n                                  (return #t)\n                                  (if (eq? n 17)\n                                    (return #t)\n                                    (if (eq? n 18)\n                                      (return #t)\n                                      (if (eq? n 19)\n                                        (return #t)\n                                        (if (eq? n 20)\n                                          (return #t)\n                                          (if (eq? n 21)\n                                            (return #t)\n                                            (if (eq? n 22)\n                                              (return #t)\n                                              (if (eq? n 23)\n                                                (return #t)\n                                                (if (eq? n 24)\n                                                  (return #t)\n                                                  (if (eq? n 25)\n                                                    (return #t)\n                                                    (if (eq? n 26)\n                                                      (return #t)\n                                                      (",
    "  (and\n    (= (modulo x n) 0)\n    (= (quotient x n) 1)))\n\n;; Your function should take two numbers as arguments and return a boolean.\n;; The numbers are integers.",
    "  (cond\n    [(zero? n) true]\n    [(zero? x) false]\n    [(zero? (expt n x)) true]\n    [false]\n  )\n)\n",
    "  (equal? (power n x) x))\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of n and false in other cases.\n;; x is a simple power of n if n**int=x\n;; For example:\n;; >>> (is_simple_power 1 4)\n;; true\n;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; true\n;; >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false",
    "  (cond\n    [(zero? n) true]\n    [(zero? x) false]\n    [(zero? (expt n x)) true]\n    [false]\n  )\n)\n",
    "  (cond\n    ((= x 1) true)\n    ((= x 0) false)\n    (else\n      (and\n        (= n 1)\n        (= x (* x n)))\n      (else\n        (and\n          (= n 2)\n          (= x (* x (* x n))))\n        (else\n          (and\n            (= n 3)\n            (= x (* x (* x (* x n))))))))))\n",
    "  (if (eq? x n)\n    true\n    false))\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of 2 and false in other cases.\n;; x is a simple power of 2 if 2**int=x\n;; For example:\n;; >>> (is_simple_power 2)\n;; true\n;; >>> (is_simple_power 3)\n;; false\n;; >>> (is_simple_power 4)\n;; false\n;; >>> (is_simple_power 5)\n;; false\n;; >>> (is_simple_power 6)\n;; false\n;; >>> (is_simple_power 7)\n;; false\n;; >>> (is_simple_power 8)\n;; false\n;; >>> (is_simple_power 9)\n;; false\n;; >>> (is_simple_power 10)\n;; false\n;; >>> (is_simple_power 11)\n;; false\n;; >>> (is_simple_power 12)\n;; false\n;; >>> (is_simple_power 13)\n;; false\n;; >>> (is_simple_power 14)\n;; false\n;; >>> (is_simple_power 15)\n;; false\n;; >>> (is_simple_power 16)\n;; false\n;; >>> (is_simple_power 17)\n;; false\n;; >>> (is_simple_power 18)\n;; false\n;; >>> (is_simple_power 19)\n;; false\n;; >>> (is_simple_power 20)\n;; false\n;; >>> (is_simple_power 21)\n;; false\n;; >>> (is_simple_power 22)\n;; false\n;; >>> (is_simple_power 23)\n;; false\n;; >>> (is_simple_power 24)\n;; false\n;; >>> (is_simple_power 25)\n;; false\n;; >>> (is_simple_power 26)\n;; false\n;; >>> (is_simple_power 27)\n;; false\n;; >>> (is_simple_power 28)\n;; false\n;; >>> (is_simple_power 29)\n;; false\n;; >>> (is_simple_power 30)\n;; false\n;; >>> (is_simple_power 31)\n;; false\n;; >>> (is_simple_power 32)\n;; false\n;; >>> (is_simple_power 33)",
    "  (let ((n_int (floor n)))\n    (and\n      (= n_int 1)\n      (= n_int 2)\n      (= n_int 3)\n      (= n_int 4)\n      (= n_int 5)\n      (= n_int 6)\n      (= n_int 7)\n      (= n_int 8)\n      (= n_int 9)\n      (= n_int 10)\n      (= n_int 11)\n      (= n_int 12)\n      (= n_int 13)\n      (= n_int 14)\n      (= n_int 15)\n      (= n_int 16)\n      (= n_int 17)\n      (= n_int 18)\n      (= n_int 19)\n      (= n_int 20)\n      (= n_int 21)\n      (= n_int 22)\n      (= n_int 23)\n      (= n_int 24)\n      (= n_int 25)\n      (= n_int 26)\n      (= n_int 27)\n      (= n_int 28)\n      (= n_int 29)\n      (= n_int 30)\n      (= n_int 31)\n      (= n_int 32)\n      (= n_int 33)\n      (= n_int 34)\n      (= n_int 35)\n      (= n_int 36)\n      (= n_int 37)\n      (= n_int 38)\n      (= n_int 39)\n      (= n_int 40)\n      (= n_int 41)\n      (= n_int 42)\n      (= n_int 43)\n      (= n_int 44)\n      (= n_int 45)\n      (= n_int 46)\n      (= n_int 47)\n      (= n_int 48)\n      (= n_int 49)\n      (= n_int 50)\n      (= n_int 51)\n      (= n_int 52)\n      (= n_int 53)\n      (= n_int 54)\n      (= n_int 55)\n      ",
    "  (cond\n    ((= x 1) true)\n    ((= x 0) false)\n    (else\n      (and\n        (= n 1)\n        (= x (* x n)))\n      (else\n        (and\n          (= n 2)\n          (= x (* x (* n 1))))\n        (else\n          (and\n            (= n 3)\n            (= x (* x (* n 2)))\n            (= x (* x (* n 1)))\n            (= x (* x (* n 3)))\n            (= x (* x (* n 2)))\n            (= x (* x (* n 1)))\n            (= x (* x (* n 4)))\n            (= x (* x (* n 3)))\n            (= x (* x (* n 2)))\n            (= x (* x (* n 1)))\n            (= x (* x (* n 5)))\n            (= x (* x (* n 4)))\n            (= x (* x (* n 3)))\n            (= x (* x (* n 2)))\n            (= x (* x (* n 1)))\n            (= x (* x (* n 6)))\n            (= x (* x (* n 5)))\n            (= x (* x (* n 4)))\n            (= x (* x (* n 3)))\n            (= x (* x (* n 2)))\n            (= x (* x (* n 1)))\n            (= x (* x (* n 7)))\n            (= x (* x (* n 6)))\n            (= x (* x (* n 5)))\n            (= x (* x (* n 4)))\n            (= x (* x (* n 3)))\n            (= x (* x (* n 2)))\n            (= x (* x (* n 1)))\n            (= x (* x (* n 8)))\n            (= x (* x (* n 7)))\n            (= x (* x (* n 6)))\n            (= x (* x (* n 5)))\n            (= x (* x (* n 4)))\n            (= x (* x (* n 3)))\n            (= x (* x (* n 2)))\n            (= x (* x (* n 1)))\n            (= x (* x (* n 9)))\n            (= x (* x (* n 8)))\n            (= x (* x (* n 7)))\n            (= x (* x (*",
    "  (let ((n_int (floor n)))\n    (and\n      (= (modulo x n) 0)\n      (= (modulo n_int n) 0)\n      (= (modulo (quotient x n) n_int) 0)\n      (= (modulo (quotient n_int n) x) 0)\n      (= (modulo (quotient n x) n_int) 0)\n      (= (modulo (quotient n_int x) n) 0)\n      (= (modulo (quotient n_int n_int) x) 0)\n      (= (modulo (quotient n_int n_int) n) 0)\n      (= (modulo (quotient n x x) n_int) 0)\n      (= (modulo (quotient n_int x x) n) 0)\n      (= (modulo (quotient n_int n_int) x x) 0)\n      (= (modulo (quotient n x x) n_int) 0)\n      (= (modulo (quotient n_int x x) n) 0)\n      (= (modulo (quotient n_int n_int) x x) 0)\n      (= (modulo (quotient n x x) n_int) 0)\n      (= (modulo (quotient n_int x x) n) 0)\n      (= (modulo (quotient n_int n_int) x x) 0))))\n",
    "  (and\n    (= (modulo x n) 0)\n    (= (quotient x n) 1)))\n\n;; Your function should return true if x is a simple power of n and false in\n;; other cases.",
    "  (cond ((= x n) true)\n        ((< x 0) false)\n        ((= (expt x n) x) true)))\n",
    "  (let ((result (equal? (expt n x) x)))\n    (if result\n      (display \"true\" result)\n      (display \"false\" result))))\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of n and false in other cases.\n;; x is a simple power of n if n**int=x\n;; For example:\n;; >>> (is_simple_power 1 4)\n;; true\n;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; true\n;; >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false",
    "  (and\n    (= (modulo x n) 0)\n    (= (quotient x n) 1)))\n\n;; Your task is to write a function that returns true if a number x is a\n;; perfect power of n and false in other cases.\n;; x is a perfect power of n if n**int=x and n**int is a prime number\n;; For example:\n;; >>> (is_perfect_power 2 4)\n;; true\n;; >>> (is_perfect_power 2 3)\n;; false\n;; >>> (is_perfect_power 2 2)\n;; true\n;; >>> (is_perfect_power 3 2)\n;; false\n;; >>> (is_perfect_power 3 1)\n;; false\n;; >>> (is_perfect_power 5 3)\n;; false",
    "  (cond\n    [(zero? n) true]\n    [(zero? x) false]\n    [(zero? (expt n x)) true]\n    [false]\n  )\n)\n\n;; Your task is to write a function that returns true if a number x is a\n;; perfect power of n and false in other cases.\n;; x is a perfect power of n if n**int=x and n**int is a prime number\n;; For example:\n;; >>> (is_perfect_power 2 4)\n;; true\n;; >>> (is_perfect_power 2 3)\n;; false\n;; >>> (is_perfect_power 2 2)\n;; false\n;; >>> (is_perfect_power 3 4)\n;; false\n;; >>> (is_perfect_power 3 3)\n;; true\n;; >>> (is_perfect_power 3 2)\n;; false\n;; >>> (is_perfect_power 5 4)\n;; false\n;; >>> (is_perfect_power 5 3)\n;; false\n;; >>> (is_perfect_power 5 2)\n;; true",
    "  (cond\n    ((= x 1) true)\n    ((= x 0) false)\n    (else\n      (and\n        (= n 1)\n        (= (expt x n) x)))))\n",
    "  (equal? (pow n x) x))\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of two and false in other cases.\n;; x is a simple power of two if 2**int=x\n;; For example:\n;; >>> (is_simple_power 2)\n;; true\n;; >>> (is_simple_power 3)\n;; false\n;; >>> (is_simple_power 4)\n;; true\n;; >>> (is_simple_power 5)\n;; false\n;; >>> (is_simple_power 6)\n;; false\n;; >>> (is_simple_power 7)\n;; false\n;; >>> (is_simple_power 8)\n;; false\n;; >>> (is_simple_power 9)\n;; false\n;; >>> (is_simple_power 10)\n;; false\n;; >>> (is_simple_power 11)\n;; false\n;; >>> (is_simple_power 12)\n;; false\n;; >>> (is_simple_power 13)\n;; false\n;; >>> (is_simple_power 14)\n;; false\n;; >>> (is_simple_power 15)\n;; false\n;; >>> (is_simple_power 16)\n;; false\n;; >>> (is_simple_power 17)\n;; false\n;; >>> (is_simple_power 18)\n;; false\n;; >>> (is_simple_power 19)\n;; false\n;; >>> (is_simple_power 20)\n;; false\n;; >>> (is_simple_power 21)\n;; false\n;; >>> (is_simple_power 22)\n;; false\n;; >>> (is_simple_power 23)\n;; false\n;; >>> (is_simple_power 24)\n;; false\n;; >>> (is_simple_power 25)\n;; false\n;; >>> (is_simple_power 26)\n;; false\n;; >>> (is_simple_power 27)\n;; false\n;; >>> (is_simple_power 28)\n;; false\n;; >>> (is_simple_power 29)\n;; false\n;; >>> (is_simple_power 30)\n;; false\n;; >>> (is_simple_power 31)\n;; false\n;; >>> (is_simple_power 32)\n;; false\n;; >>> (is_simple_power 33)\n;; false\n",
    "  (let ((n_int (floor n)))\n    (and\n      (= n_int 1)\n      (= n_int 2)\n      (= n_int 3)\n      (= n_int 4)\n      (= n_int 5)\n      (= n_int 6)\n      (= n_int 7)\n      (= n_int 8)\n      (= n_int 9)\n      (= n_int 10)\n      (= n_int 11)\n      (= n_int 12)\n      (= n_int 13)\n      (= n_int 14)\n      (= n_int 15)\n      (= n_int 16)\n      (= n_int 17)\n      (= n_int 18)\n      (= n_int 19)\n      (= n_int 20)\n      (= n_int 21)\n      (= n_int 22)\n      (= n_int 23)\n      (= n_int 24)\n      (= n_int 25)\n      (= n_int 26)\n      (= n_int 27)\n      (= n_int 28)\n      (= n_int 29)\n      (= n_int 30)\n      (= n_int 31)\n      (= n_int 32)\n      (= n_int 33)\n      (= n_int 34)\n      (= n_int 35)\n      (= n_int 36)\n      (= n_int 37)\n      (= n_int 38)\n      (= n_int 39)\n      (= n_int 40)\n      (= n_int 41)\n      (= n_int 42)\n      (= n_int 43)\n      (= n_int 44)\n      (= n_int 45)\n      (= n_int 46)\n      (= n_int 47)\n      (= n_int 48)\n      (= n_int 49)\n      (= n_int 50)\n      (= n_int 51)\n      (= n_int 52)\n      (= n_int 53)\n      (= n_int 54)\n      (= n_int 55)\n      ",
    "  (let ((n_int (floor n)))\n    (and\n      (= (mod x n) 0)\n      (= n_int 1)\n      (= (mod x (expt n_int 2)) 0)\n      (= (mod x (expt n_int 3)) 0)\n      (= (mod x (expt n_int 4)) 0)\n      (= (mod x (expt n_int 5)) 0)\n      (= (mod x (expt n_int 6)) 0)\n      (= (mod x (expt n_int 7)) 0)\n      (= (mod x (expt n_int 8)) 0)\n      (= (mod x (expt n_int 9)) 0)\n      (= (mod x (expt n_int 10)) 0)\n      (= (mod x (expt n_int 11)) 0)\n      (= (mod x (expt n_int 12)) 0)\n      (= (mod x (expt n_int 13)) 0)\n      (= (mod x (expt n_int 14)) 0)\n      (= (mod x (expt n_int 15)) 0)\n      (= (mod x (expt n_int 16)) 0)\n      (= (mod x (expt n_int 17)) 0)\n      (= (mod x (expt n_int 18)) 0)\n      (= (mod x (expt n_int 19)) 0)\n      (= (mod x (expt n_int 20)) 0)\n      (= (mod x (expt n_int 21)) 0)\n      (= (mod x (expt n_int 22)) 0)\n      (= (mod x (expt n_int 23)) 0)\n      (= (mod x (expt n_int 24)) 0)\n      (= (mod x (expt n_int 25)) 0)\n      (= (mod x (expt n_int 26)) 0)\n      (= (mod x (expt n_int 27)) 0)\n      (= (mod x (expt n_int 28)) 0)\n      (= (mod x (expt n_int 29)) 0)\n",
    "  (cond\n    ((= x 1) true)\n    ((= x 0) false)\n    (else\n      (and\n        (= n 2)\n        (= x (expt n x)))\n      false)\n    (else\n      (and\n        (= n 2)\n        (= x (expt n x)))\n      true)\n  )\n)\n",
    "  (cond\n    ((= x 1) true)\n    ((= x 0) false)\n    (else\n      (and\n        (= n 2)\n        (= x (expt n x)))\n      (is_simple_power (expt x n) n))))\n",
    "  (cond\n    ((= x 1) true)\n    ((= x 0) false)\n    ((= x n) false)\n    (and\n      (= (modulo x n) 0)\n      (= (quotient x n) 1))\n    (else\n      (and\n        (<= x n)\n        (>= x 1))))\n\n;; Your function should return true if x is a simple power of n and false in\n;; other cases.",
    "  (and (integer? x) (integer? n)\n         (= (* n x) x)))\n\n;; Your task is to write a function that returns true if a number x is a square\n;; number and false in other cases.\n;; x is a square number if it is a perfect square or a square of a perfect\n;; square.\n;; For example:\n;; >>> (is_square_number 1)\n;; true\n;; >>> (is_square_number 2)\n;; true\n;; >>> (is_square_number 3)\n;; true\n;; >>> (is_square_number 4)\n;; true\n;; >>> (is_square_number 5)\n;; false\n;; >>> (is_square_number 6)\n;; true\n;; >>> (is_square_number 7)\n;; false\n;; >>> (is_square_number 8)\n;; false\n;; >>> (is_square_number 9)\n;; false\n;; >>> (is_square_number 10)\n;; false\n;; >>> (is_square_number 11)\n;; false\n;; >>> (is_square_number 12)\n;; false\n;; >>> (is_square_number 13)\n;; false\n;; >>> (is_square_number 14)\n;; false\n;; >>> (is_square_number 15)\n;; false\n;; >>> (is_square_number 16)\n;; false\n;; >>> (is_square_number 17)\n;; false\n;; >>> (is_square_number 18)\n;; false\n;; >>> (is_square_number 19)\n;; false\n;; >>> (is_square_number 20)\n;; false\n;; >>> (is_square_number 21)\n;; false\n;; >>> (is_square_number 22)\n;; false\n;; >>> (is_square_number 23)\n;; false\n;; >>> (is_square_number 24)\n;; false\n;; >>> (is_square_number 25)\n;; false\n;; >>> (is_square_number 26)\n;; false\n;; >>> (is_square_number 27)\n;; false\n;; >>> (is_square_number 28)\n;; false\n;; >>> (is_square_number 29)\n;; false\n;; >>> (is_square_number 30)\n;; false\n;; >>> (is_square_number 31)\n",
    "  (equal? (power n x) x))\n\n;; You can test your function with some values.",
    "  (cond\n    ((= x 1) true)\n    ((= x 0) false)\n    (else\n      (and\n        (= n 1)\n        (= (expt x n) x)))))\n\n;; Your task is to write a function that returns true if a number x is a square\n;; number and false in other cases.\n;; x is a square number if (x**2)=x\n;; For example:\n;; >>> (is_square_number 1)\n;; true\n;; >>> (is_square_number 2)\n;; true\n;; >>> (is_square_number 3)\n;; false\n;; >>> (is_square_number 4)\n;; true\n;; >>> (is_square_number 5)\n;; false",
    "  (if (eq? x n)\n    true\n    false))\n\n;; Your task is to write a function that returns true if a number x is a square\n;; number and false in other cases.\n;; x is a square number if n**2=x\n;; For example:\n;; >>> (is_square_number 1)\n;; true\n;; >>> (is_square_number 2)\n;; true\n;; >>> (is_square_number 3)\n;; false\n;; >>> (is_square_number 4)\n;; true\n;; >>> (is_square_number 5)\n;; false",
    "  (if (eq? n 0)\n    true\n    (and\n      (eq? x 1)\n      (eq? n 1)\n      (not (and\n        (eq? x 1)\n        (eq? n 1)))\n      (not (and\n        (eq? x 1)\n        (eq? n 2)))\n      (not (and\n        (eq? x 2)\n        (eq? n 2)))\n      (not (and\n        (eq? x 2)\n        (eq? n 3)))\n      (not (and\n        (eq? x 3)\n        (eq? n 3)))\n      (not (and\n        (eq? x 3)\n        (eq? n 4)))\n      (not (and\n        (eq? x 4)\n        (eq? n 4)))\n      (not (and\n        (eq? x 4)\n        (eq? n 5)))\n      (not (and\n        (eq? x 5)\n        (eq? n 5)))\n      (not (and\n        (eq? x 5)\n        (eq? n 6)))\n      (not (and\n        (eq? x 6)\n        (eq? n 6)))\n      (not (and\n        (eq? x 6)\n        (eq? n 7)))\n      (not (and\n        (eq? x 7)\n        (eq? n 7)))\n      (not (and\n        (eq? x 7)\n        (eq? n 8)))\n      (not (and\n        (eq? x 8)\n        (eq? n 8)))\n      (not (and\n        (eq? x 8)\n        (eq? n 9)))\n      (not (and\n        (eq? x 9)\n        (eq? n 9)))\n      (not (and\n        (eq? x 9)\n        (eq? n 10)))\n      (not (and\n        (eq? x 10)\n        (eq? n 10)))\n      (not (and\n        (eq? x 10)\n        (eq? n 11)))\n      (not (and\n        (eq? x 11)\n        (eq? n 11)))\n      (not (and\n        (eq? x 11)\n        (eq",
    "  (cond\n    ((= x 1) true)\n    ((= x 0) false)\n    (else\n      (and\n        (= n 2)\n        (= x (expt n x)))\n      false)\n    (else\n      (and\n        (= n 2)\n        (= x (expt n x)))\n      false)\n    (else\n      false)\n  )\n)\n\n;; Your task is to write a function that returns true if a number x is a square\n;; number and false in other cases.\n;; x is a square number if x=n**2\n;; For example:\n;; >>> (is_square_number 1)\n;; true\n;; >>> (is_square_number 2)\n;; true\n;; >>> (is_square_number 3)\n;; false\n;; >>> (is_square_number 4)\n;; true\n;; >>> (is_square_number 5)\n;; false",
    "  (let ((n_int (floor n)))\n    (and\n      (= (modulo x n) 0)\n      (= n_int 1))))\n\n;; Your task is to write a function that returns true if a number x is a\n;; perfect power of n and false in other cases.\n;; x is a perfect power of n if n**int=x and n**int is a perfect square\n;; For example:\n;; >>> (is_perfect_power 2 4)\n;; true\n;; >>> (is_perfect_power 2 3)\n;; false\n;; >>> (is_perfect_power 2 2)\n;; false\n;; >>> (is_perfect_power 3 4)\n;; false\n;; >>> (is_perfect_power 3 3)\n;; true\n;; >>> (is_perfect_power 3 2)\n;; false\n;; >>> (is_perfect_power 5 4)\n;; false\n;; >>> (is_perfect_power 5 3)\n;; false\n;; >>> (is_perfect_power 5 2)\n;; true\n;; >>> (is_perfect_power 5 1)\n;; false",
    "  (let ((n_int (floor n)))\n    (and\n      (= n_int 1)\n      (= x n_int)\n      (= (mod x n_int) 0)))\n)\n",
    "  (cond\n    ((= x 1) true)\n    ((= x 0) false)\n    (else\n      (and\n        (= n 1)\n        (= (expt x n) x)))\n  ))\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of n and false in other cases.\n;; x is a simple power of n if n**int=x\n;; For example:\n;; >>> (is_simple_power 1 4)\n;; true\n;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; true\n;; >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false",
    "  (if (eq? x n)\n    true\n    false))\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of 2 and false in other cases.\n;; x is a simple power of 2 if 2**int=x\n;; For example:\n;; >>> (is_simple_power 2)\n;; true\n;; >>> (is_simple_power 3)\n;; false\n;; >>> (is_simple_power 4)\n;; false\n;; >>> (is_simple_power 5)\n;; false\n;; >>> (is_simple_power 6)\n;; false\n;; >>> (is_simple_power 7)\n;; false\n;; >>> (is_simple_power 8)\n;; false\n;; >>> (is_simple_power 9)\n;; false\n;; >>> (is_simple_power 10)\n;; false\n;; >>> (is_simple_power 11)\n;; false\n;; >>> (is_simple_power 12)\n;; false\n;; >>> (is_simple_power 13)\n;; false\n;; >>> (is_simple_power 14)\n;; false\n;; >>> (is_simple_power 15)\n;; false\n;; >>> (is_simple_power 16)\n;; false\n;; >>> (is_simple_power 17)\n;; false\n;; >>> (is_simple_power 18)\n;; false\n;; >>> (is_simple_power 19)\n;; false\n;; >>> (is_simple_power 20)\n;; false\n;; >>> (is_simple_power 21)\n;; false\n;; >>> (is_simple_power 22)\n;; false\n;; >>> (is_simple_power 23)\n;; false\n;; >>> (is_simple_power 24)\n;; false\n;; >>> (is_simple_power 25)\n;; false\n;; >>> (is_simple_power 26)\n;; false\n;; >>> (is_simple_power 27)\n;; false\n;; >>> (is_simple_power 28)\n;; false\n;; >>> (is_simple_power 29)\n;; false\n;; >>> (is_simple_power 30)\n;; false\n;; >>> (is_simple_power 31)\n;; false\n;; >>> (is_simple_power 32)\n;; false\n;; >>> (is_simple_power 33)",
    "  (equal? (pow n x) x))\n\n;; The function is_simple_power takes two arguments, x and n.\n;; It returns true if x is a simple power of n and false otherwise.\n;; You should not use the built-in functions in this exercise.\n\n;; The function is_simple_power takes two arguments, x and n.\n;; It returns true if x is a simple power of n and false otherwise.\n;; You should not use the built-in functions in this exercise.\n\n;; The function is_simple_power takes two arguments, x and n.\n;; It returns true if x is a simple power of n and false otherwise.\n;; You should not use the built-in functions in this exercise.\n\n;; The function is_simple_power takes two arguments, x and n.\n;; It returns true if x is a simple power of n and false otherwise.\n;; You should not use the built-in functions in this exercise.\n\n;; The function is_simple_power takes two arguments, x and n.\n;; It returns true if x is a simple power of n and false otherwise.\n;; You should not use the built-in functions in this exercise.\n\n;; The function is_simple_power takes two arguments, x and n.\n;; It returns true if x is a simple power of n and false otherwise.\n;; You should not use the built-in functions in this exercise.\n\n;; The function is_simple_power takes two arguments, x and n.\n;; It returns true if x is a simple power of n and false otherwise.\n;; You should not use the built-in functions in this exercise.\n\n;; The function is_simple_power takes two arguments, x and n.\n;; It returns true if x is a simple power of n and false otherwise.\n;; You should not use the built-in functions in this exercise.\n\n;; The function is_simple_power takes two arguments, x and n.\n;; It returns true if x is a simple power of n and false otherwise.\n;; You should not use the built-in functions in this exercise.\n\n;; The function is_simple_power takes two arguments, x and n.\n;; It returns true if x is a simple power of n and false otherwise.\n;; You should not use the built-in functions in this exercise.",
    "  (let ((n_int (floor n)))\n    (and\n      (= n_int 0)\n      (= n_int 1)\n      (= n_int 2)\n      (= n_int 3)\n      (= n_int 4)\n      (= n_int 5)\n      (= n_int 6)\n      (= n_int 7)\n      (= n_int 8)\n      (= n_int 9)\n      (= n_int 10)\n      (= n_int 11)\n      (= n_int 12)\n      (= n_int 13)\n      (= n_int 14)\n      (= n_int 15)\n      (= n_int 16)\n      (= n_int 17)\n      (= n_int 18)\n      (= n_int 19)\n      (= n_int 20)\n      (= n_int 21)\n      (= n_int 22)\n      (= n_int 23)\n      (= n_int 24)\n      (= n_int 25)\n      (= n_int 26)\n      (= n_int 27)\n      (= n_int 28)\n      (= n_int 29)\n      (= n_int 30)\n      (= n_int 31)\n      (= n_int 32)\n      (= n_int 33)\n      (= n_int 34)\n      (= n_int 35)\n      (= n_int 36)\n      (= n_int 37)\n      (= n_int 38)\n      (= n_int 39)\n      (= n_int 40)\n      (= n_int 41)\n      (= n_int 42)\n      (= n_int 43)\n      (= n_int 44)\n      (= n_int 45)\n      (= n_int 46)\n      (= n_int 47)\n      (= n_int 48)\n      (= n_int 49)\n      (= n_int 50)\n      (= n_int 51)\n      (= n_int 52)\n      (= n_int 53)\n      (= n_int 54)\n      ",
    "  (and\n    (= n 1)\n    (= x 1)\n    (= (expt n x) x)))\n\n;; Your task is to write a function that returns true if a number x is a\n;; simple product of n and false in other cases.\n;; x is a simple product of n if n*x=x\n;; For example:\n;; >>> (is_simple_product 1 2)\n;; true\n;; >>> (is_simple_product 2 2)\n;; true\n;; >>> (is_simple_product 8 2)\n;; true\n;; >>> (is_simple_product 3 2)\n;; false\n;; >>> (is_simple_product 3 1)\n;; false\n;; >>> (is_simple_product 5 3)\n;; false",
    "  (if (eq? x n)\n    true\n    false))\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of n and false in other cases.\n;; x is a simple power of n if n**int=x\n;; For example:\n;; >>> (is_simple_power 1 4)\n;; true\n;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; true\n;; >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false",
    "  (let ((n_int (floor n)))\n    (and\n      (= n_int 0)\n      (= n_int 1)\n      (= n_int 2)\n      (= n_int 3)\n      (= n_int 4)\n      (= n_int 5)\n      (= n_int 6)\n      (= n_int 7)\n      (= n_int 8)\n      (= n_int 9)\n      (= n_int 10)\n      (= n_int 11)\n      (= n_int 12)\n      (= n_int 13)\n      (= n_int 14)\n      (= n_int 15)\n      (= n_int 16)\n      (= n_int 17)\n      (= n_int 18)\n      (= n_int 19)\n      (= n_int 20)\n      (= n_int 21)\n      (= n_int 22)\n      (= n_int 23)\n      (= n_int 24)\n      (= n_int 25)\n      (= n_int 26)\n      (= n_int 27)\n      (= n_int 28)\n      (= n_int 29)\n      (= n_int 30)\n      (= n_int 31)\n      (= n_int 32)\n      (= n_int 33)\n      (= n_int 34)\n      (= n_int 35)\n      (= n_int 36)\n      (= n_int 37)\n      (= n_int 38)\n      (= n_int 39)\n      (= n_int 40)\n      (= n_int 41)\n      (= n_int 42)\n      (= n_int 43)\n      (= n_int 44)\n      (= n_int 45)\n      (= n_int 46)\n      (= n_int 47)\n      (= n_int 48)\n      (= n_int 49)\n      (= n_int 50)\n      (= n_int 51)\n      (= n_int 52)\n      (= n_int 53)\n      (= n_int 54)\n      ",
    "  (equal? (pow n x) x))\n\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of n and false in other cases.\n;; x is a simple power of n if n**int=x\n;; For example:\n;; >>> (is_simple_power 1 4)\n;; true\n;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; true\n;; >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n;; >>> (is_simple_power 5 3)\n;; false",
    "  (cond\n    ((= x 1) true)\n    ((= x 0) false)\n    (else\n      (and\n        (= n 2)\n        (= x (expt n x)))\n      (else\n        (and\n          (= n 3)\n          (= x (expt n x)))\n        (else\n          (and\n            (= n 4)\n            (= x (expt n x)))\n          (else\n            (and\n              (= n 5)\n              (= x (expt n x)))\n            (else\n              (and\n                (= n 6)\n                (= x (expt n x)))\n              (else\n                (and\n                  (= n 7)\n                  (= x (expt n x)))\n                (else\n                  (and\n                    (= n 8)\n                    (= x (expt n x)))\n                  (else\n                    (and\n                      (= n 9)\n                      (= x (expt n x)))\n                    (else\n                      (and\n                        (= n 10)\n                        (= x (expt n x)))\n                      (else\n                        (and\n                          (= n 11)\n                          (= x (expt n x)))\n                        (else\n                          (and\n                            (= n 12)\n                            (= x (expt n x)))\n                          (else\n                            (and\n                              (= n 13)\n                              (= x (expt n x)))\n                            (else\n                              (and\n                                (= n 14)\n                                (= x (expt n x)))\n                              (else\n                                (and\n                                  (= n 15)\n                                  (= x (expt n x)))\n                                (else\n                                  (and\n                                    (= n 16)\n                                    (= x (expt n x)))\n                                  (else\n                                    (and\n                                      (= n 17)\n                                      (= x (expt n x)))\n                                    (else\n                                      (and\n                                        (= n 18)\n                                        (= x (expt n x)))\n                                      (else\n                                        (and\n                                          (=",
    "  (cond\n    ((= x 1) true)\n    ((= x 0) false)\n    ((= n 0) false)\n    (else\n      (and\n        (= n 1)\n        (= (* x n) x)))\n  )\n)\n",
    "  (let ((n_int (floor n)))\n    (and\n      (= n_int 0)\n      (= n_int 1)\n      (= n_int 2)\n      (= n_int 3)\n      (= n_int 4)\n      (= n_int 5)\n      (= n_int 6)\n      (= n_int 7)\n      (= n_int 8)\n      (= n_int 9)\n      (= n_int 10)\n      (= n_int 11)\n      (= n_int 12)\n      (= n_int 13)\n      (= n_int 14)\n      (= n_int 15)\n      (= n_int 16)\n      (= n_int 17)\n      (= n_int 18)\n      (= n_int 19)\n      (= n_int 20)\n      (= n_int 21)\n      (= n_int 22)\n      (= n_int 23)\n      (= n_int 24)\n      (= n_int 25)\n      (= n_int 26)\n      (= n_int 27)\n      (= n_int 28)\n      (= n_int 29)\n      (= n_int 30)\n      (= n_int 31)\n      (= n_int 32)\n      (= n_int 33)\n      (= n_int 34)\n      (= n_int 35)\n      (= n_int 36)\n      (= n_int 37)\n      (= n_int 38)\n      (= n_int 39)\n      (= n_int 40)\n      (= n_int 41)\n      (= n_int 42)\n      (= n_int 43)\n      (= n_int 44)\n      (= n_int 45)\n      (= n_int 46)\n      (= n_int 47)\n      (= n_int 48)\n      (= n_int 49)\n      (= n_int 50)\n      (= n_int 51)\n      (= n_int 52)\n      (= n_int 53)\n      (= n_int 54)\n      "
  ],
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ]
}