name: HumanEval_19_sort_numbers
language: rkt
prompt: "#lang racket\n\n;; Input is a space-delimited string of numberals from 'zero'\
  \ to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
  \ 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers sorted\
  \ from smallest to largest\n;; >>> (sort_numbers \"three one five\")\n;; \"one three\
  \ five\"\n(define (sort_numbers numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n\
  \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"three\"\
  ) \"three\")\n    (check-equal? (candidate \"three five nine\") \"three five nine\"\
  )\n    (check-equal? (candidate \"five zero four seven nine eight\") \"zero four\
  \ five seven eight nine\")\n    (check-equal? (candidate \"six five four three two\
  \ one zero\") \"zero one two three four five six\")\n))\n\n(test-humaneval)"
completions: ["  (define (sort_helper n)\n    (if (eq? n numbers)\n      n\n     \
    \ (if (eq? (car numbers) n)\n        (sort_helper (cdr numbers))\n        (sort_helper\
    \ (cdr (cdr numbers))))))\n  (sort_helper numbers))\n\n;; Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return\
    \ the string with numbers sorted from largest to smallest\n;; >>> (sort_numbers\
    \ \"three one five\")\n;; \"three five one\"", "  (let ((numbers (string-split\
    \ numbers \" \")))\n    (let ((numbers (map (lambda (n) (string-append n \" \"\
    )) numbers)))\n      (string-join (sort numbers) \" \")))\n)\n\n;; Input is a\
    \ space-delimited string of numberals from 'zero' to 'nine'.\n;; Valid choices\
    \ are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and\
    \ 'nine'.\n;; Return the string with numbers sorted from largest to smallest\n\
    ;; >>> (sort_numbers \"three one five\")\n;; \"three five one\"", "  (let ((numbers\
    \ (string-split numbers \" \")))\n    (let ((numbers (map (lambda (n) (string-to-number\
    \ n)) numbers)))\n      (string-join (sort numbers) \" \"))))\n\n;; Input is a\
    \ space-delimited string of numberals from 'zero' to 'nine'.\n;; Valid choices\
    \ are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and\
    \ 'nine'.\n;; Return the string with numbers sorted from largest to smallest\n\
    ;; >>> (sort_numbers \"three one five\")\n;; \"three five one\"", "  (define (sort-helper\
    \ n)\n    (cond\n      ((= n 'zero) 'zero)\n      ((= n 'one) 'one)\n      ((=\
    \ n 'two) 'two)\n      ((= n 'three) 'three)\n      ((= n 'four) 'four)\n    \
    \  ((= n 'five) 'five)\n      ((= n 'six) 'six)\n      ((= n 'seven) 'seven)\n\
    \      ((= n 'eight) 'eight)\n      ((= n 'nine) 'nine)\n      (else (error \"\
    Invalid number: \" n))))\n  (sort-helper (string-split numbers \" \")))\n  (string-join\
    \ \" \" (sort-helper (string-split numbers \" \"))))\n\n;; Input is a space-delimited\
    \ string of words from 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return\
    \ the string with words sorted from smallest to largest\n;; >>> (sort_words \"\
    three one five\")\n;; \"five three one\"", "  (let ((numbers (string-split numbers\
    \ \" \")))\n    (let ((numbers (map (lambda (n) (string-split n \" \")) numbers)))\n\
    \      (let ((numbers (map (lambda (n) (string-split n \" \")) numbers)))\n  \
    \      (let ((numbers (map (lambda (n) (string-split n \" \")) numbers)))\n  \
    \        (let ((numbers (map (lambda (n) (string-split n \" \")) numbers)))\n\
    \            (let ((numbers (map (lambda (n) (string-split n \" \")) numbers)))\n\
    \              (let ((numbers (map (lambda (n) (string-split n \" \")) numbers)))\n\
    \                (let ((numbers (map (lambda (n) (string-split n \" \")) numbers)))\n\
    \                  (let ((numbers (map (lambda (n) (string-split n \" \")) numbers)))\n\
    \                    (let ((numbers (map (lambda (n) (string-split n \" \")) numbers)))\n\
    \                      (let ((numbers (map (lambda (n) (string-split n \" \"))\
    \ numbers)))\n                        (let ((numbers (map (lambda (n) (string-split\
    \ n \" \")) numbers)))\n                          (let ((numbers (map (lambda\
    \ (n) (string-split n \" \")) numbers)))\n                            (let ((numbers\
    \ (map (lambda (n) (string-split n \" \")) numbers)))\n                      \
    \        (let ((numbers (map (lambda (n) (string-split n \" \")) numbers)))\n\
    \                                (let ((numbers (map (lambda (n) (string-split\
    \ n \" \")) numbers)))\n                                  (let ((numbers (map\
    \ (lambda (n) (string-split n \" \")) numbers)))\n                           \
    \         (let ((numbers (map (lambda (n) (string-split n \" \")) numbers)))\n\
    \                                      (let ((numbers (map (lambda (n) (string-split\
    \ n \" \")) numbers)))\n                                        (let ((numbers\
    \ (map (lambda (n) (string-split n \" \")) numbers)))\n                      \
    \                    (let ((numbers (map (lambda (n) (string-split n \" \")) numbers)))\n\
    \                                            (", "  (define (sort-helper l r)\n\
    \    (if (eq? l r)\n      (number->string l)\n      (sort-helper (number->string\
    \ l) (number->string r)))))", "  (define (sort_helper l r)\n    (if (eq? l r)\n\
    \      (number->string l)\n      (sort_helper (number->string l) (number->string\
    \ r)))))\n", "  (define (sort-helper n)\n    (if (eq? n numbers)\n      n\n  \
    \    (if (eq? (car numbers) n)\n        (sort-helper (cdr numbers))\n        (sort-helper\
    \ (cdr (cdr numbers))))))\n  (sort-helper numbers))\n\n;; Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return\
    \ the string with numbers sorted from largest to smallest\n;; >>> (sort_numbers\
    \ \"three one five\")\n;; \"three five one\"", "  (define (sort-helper n)\n  \
    \  (cond\n      [(< n 0) \"zero\"]\n      [(< n 1) \"one\"]\n      [(< n 2) \"\
    two\"]\n      [(< n 3) \"three\"]\n      [(< n 4) \"four\"]\n      [(< n 5) \"\
    five\"]\n      [(< n 6) \"six\"]\n      [(< n 7) \"seven\"]\n      [(< n 8) \"\
    eight\"]\n      [(< n 9) \"nine\"]\n      [else \"\"]\n    )\n    (sort-helper\
    \ (- n 1) (sort-helper (- n 2) (sort-helper (- n 3) (sort-helper (- n 4) (sort-helper\
    \ (- n 5) (sort-helper (- n 6) (sort-helper (- n 7) (sort-helper (- n 8) (sort-helper\
    \ (- n 9) \"nine\"))))))))\n  )\n  (string-append \" \" (sort-helper numbers)))\n\
    \n;; Input is a space-delimited string of numberals from 'zero' to 'nine'.\n;;\
    \ Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n;; Return the string with numbers sorted from largest to\
    \ smallest\n;; >>> (sort_numbers \"three one five\")\n;; \"three five one\"",
  "  (define (sort-helper n)\n    (if (eq? n numbers)\n      n\n      (if (eq? (car\
    \ numbers) n)\n        (sort-helper (cdr numbers))\n        (sort-helper (cdr\
    \ (cdr numbers))))))\n  (sort-helper numbers))\n\n;; Input is a string of words\
    \ separated by spaces.\n;; Return the string with words sorted alphabetically\n\
    ;; >>> (sort_words \"one three five\")\n;; \"five three one\"", "  (define (sort-helper\
    \ n)\n    (if (eq? n numbers)\n      n\n      (if (eq? (car numbers) n)\n    \
    \    (sort-helper (cdr numbers))\n        (sort-helper (cdr (cdr numbers))))))\n\
    \  (sort-helper numbers))\n\n;; Input is a space-delimited string of numberals\
    \ from 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with\
    \ numbers sorted from largest to smallest\n;; >>> (sort_numbers \"three one five\"\
    )\n;; \"three five one\"", "  (define (sort_helper n)\n    (if (eq? n numbers)\n\
    \      n\n      (if (lt? n numbers)\n        (sort_helper (sub1 n))\n        (sort_helper\
    \ (add1 n)))))\n  (sort_helper (sub1 numbers)))\n\n;; Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return\
    \ the string with numbers sorted from largest to smallest\n;; >>> (sort_numbers\
    \ \"three one five\")\n;; \"three five one\"", "  (let ((numbers (string-split\
    \ numbers \" \")))\n    (let ((numbers (map (lambda (n) (string-replace n \" \"\
    \ \"\")) numbers)))\n      (let ((numbers (map (lambda (n) (string-replace n \"\
    \ \" \"\")) numbers)))\n        (let ((numbers (map (lambda (n) (string-replace\
    \ n \" \" \"\")) numbers)))\n          (let ((numbers (map (lambda (n) (string-replace\
    \ n \" \" \"\")) numbers)))\n            (let ((numbers (map (lambda (n) (string-replace\
    \ n \" \" \"\")) numbers)))\n              (let ((numbers (map (lambda (n) (string-replace\
    \ n \" \" \"\")) numbers)))\n                (let ((numbers (map (lambda (n) (string-replace\
    \ n \" \" \"\")) numbers)))\n                  (let ((numbers (map (lambda (n)\
    \ (string-replace n \" \" \"\")) numbers)))\n                    (let ((numbers\
    \ (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n               \
    \       (let ((numbers (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n\
    \                        (let ((numbers (map (lambda (n) (string-replace n \"\
    \ \" \"\")) numbers)))\n                          (let ((numbers (map (lambda\
    \ (n) (string-replace n \" \" \"\")) numbers)))\n                            (let\
    \ ((numbers (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n     \
    \                         (let ((numbers (map (lambda (n) (string-replace n \"\
    \ \" \"\")) numbers)))\n                                (let ((numbers (map (lambda\
    \ (n) (string-replace n \" \" \"\")) numbers)))\n                            \
    \      (let ((numbers (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n\
    \                                    (let ((numbers (map (lambda (n) (string-replace\
    \ n \" \" \"\")) numbers)))\n                                      (let ((numbers\
    \ (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n               \
    \                         (let ((numbers (map (lambda (n) (string-replace n \"\
    \ \" \"\")) numbers)))\n                                          (let ((numbers\
    \ (map (lambda", "  (define (sort-helper l r)\n    (if (eq? l r)\n      (number->string\
    \ l)\n      (sort-helper (string->number l) (string->number r)))))", "  (define\
    \ (sort-helper l r)\n    (cond\n      ((< l r) (return l))\n      ((= l r) (return\
    \ r))\n      ((< l) (return r))\n      ((= l) (return l))\n      (else (sort-helper\
    \ (+ l 1) r))))\n  (sort-helper numbers numbers))\n\n;; Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return\
    \ the string with numbers sorted from smallest to largest\n;; >>> (sort_numbers\
    \ \"three one five\")\n;; \"one three five\"", "  (let ((numbers (string-split\
    \ numbers \" \")))\n    (let ((numbers (map (lambda (x) (string-to-number x))\
    \ numbers)))\n      (string-join (sort numbers) \" \")))\n)\n\n;; Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return\
    \ the string with numbers sorted from largest to smallest\n;; >>> (sort_numbers\
    \ \"three one five\")\n;; \"three five one\"", "  (let ((numbers (string-split\
    \ numbers \" \")))\n    (let ((numbers (string-map (lambda (x) (string-to-number\
    \ x)) numbers)))\n      (string-join (sort numbers) \" \")))\n)\n", "  (let ((numbers\
    \ (string-split numbers \" \")))\n    (let ((numbers (string-map (lambda (x) (string-to-number\
    \ x)) numbers)))\n      (string-join (sort numbers) \" \"))))\n\n;; Input is a\
    \ space-delimited string of numberals from 'zero' to 'nine'.\n;; Valid choices\
    \ are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and\
    \ 'nine'.\n;; Return the string with numbers sorted from largest to smallest\n\
    ;; >>> (sort_numbers \"three one five\")\n;; \"three five one\"", "  (define (sort-helper\
    \ n)\n    (if (eq? n numbers)\n      n\n      (sort-helper (sub1 n) (sub1 (car\
    \ numbers)))))\n  (sort-helper (sub1 9) (sub1 0) (car numbers)))\n\n;; Input is\
    \ a space-delimited string of numberals from 'zero' to 'nine'.\n;; Valid choices\
    \ are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and\
    \ 'nine'.\n;; Return the string with numbers sorted from largest to smallest\n\
    ;; >>> (sort_numbers \"three one five\")\n;; \"three five one\"", "  (let ((numbers\
    \ (string-split numbers \" \")))\n    (let ((numbers (map (lambda (x) (string-to-number\
    \ x)) numbers)))\n      (string-join (sort numbers) \" \"))))\n\n;; Input is a\
    \ space-delimited string of numberals from 'zero' to 'nine'.\n;; Valid choices\
    \ are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and\
    \ 'nine'.\n;; Return the string with numbers sorted from largest to smallest\n\
    ;; >>> (sort_numbers \"three one five\")\n;; \"three five one\"", "  (let ((numbers\
    \ (string-split numbers \" \")))\n    (let ((numbers (map (lambda (n) (string-replace\
    \ n \" \" \"\")) numbers)))\n      (let ((numbers (map (lambda (n) (string-replace\
    \ n \" \" \"\")) numbers)))\n        (let ((numbers (map (lambda (n) (string-replace\
    \ n \" \" \"\")) numbers)))\n          (let ((numbers (map (lambda (n) (string-replace\
    \ n \" \" \"\")) numbers)))\n            (let ((numbers (map (lambda (n) (string-replace\
    \ n \" \" \"\")) numbers)))\n              (let ((numbers (map (lambda (n) (string-replace\
    \ n \" \" \"\")) numbers)))\n                (let ((numbers (map (lambda (n) (string-replace\
    \ n \" \" \"\")) numbers)))\n                  (let ((numbers (map (lambda (n)\
    \ (string-replace n \" \" \"\")) numbers)))\n                    (let ((numbers\
    \ (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n               \
    \       (let ((numbers (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n\
    \                        (let ((numbers (map (lambda (n) (string-replace n \"\
    \ \" \"\")) numbers)))\n                          (let ((numbers (map (lambda\
    \ (n) (string-replace n \" \" \"\")) numbers)))\n                            (let\
    \ ((numbers (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n     \
    \                         (let ((numbers (map (lambda (n) (string-replace n \"\
    \ \" \"\")) numbers)))\n                                (let ((numbers (map (lambda\
    \ (n) (string-replace n \" \" \"\")) numbers)))\n                            \
    \      (let ((numbers (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n\
    \                                    (let ((numbers (map (lambda (n) (string-replace\
    \ n \" \" \"\")) numbers)))\n                                      (let ((numbers\
    \ (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n               \
    \                         (let ((numbers (map (lambda (n) (string-replace n \"\
    \ \" \"\")) numbers)))\n                                          (let ((numbers\
    \ (map (lambda", "  (let ((numbers (string-split numbers \" \")))\n    (let ((numbers\
    \ (map (lambda (x) (string-to-number x)) numbers)))\n      (string-join (sort\
    \ numbers) \" \")))\n)\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from largest to smallest\n;; >>> (sort_numbers \"three one five\")\n\
    ;; \"three five one\"", "  (define (sort-helper n)\n    (if (eq? n numbers)\n\
    \      n\n      (if (eq? (car numbers) n)\n        (sort-helper (cdr numbers))\n\
    \        (sort-helper (car numbers)))))\n  (sort-helper numbers))\n", "  (define\
    \ (sort-helper l r)\n    (cond\n      ((< l r) (return l))\n      ((= l r) (return\
    \ r))\n      ((< l) (return r))\n      (else (sort-helper (+ l 1) r))))\n  (sort-helper\
    \ numbers numbers))\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from largest to smallest\n;; >>> (sort_numbers \"three one five\")\n\
    ;; \"three five one\"", "  (define (sort-helper l r)\n    (cond\n      ((< l r)\
    \ (return l))\n      ((= l r) (return r))\n      ((< l) (return r))\n      (else\
    \ (sort-helper (+ l 1) r))))\n  (sort-helper numbers numbers))\n\n;; Input is\
    \ a space-delimited string of numberals from 'zero' to 'nine'.\n;; Valid choices\
    \ are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and\
    \ 'nine'.\n;; Return the string with numbers sorted from largest to smallest\n\
    ;; >>> (sort_numbers \"three one five\")\n;; \"three five one\"", "  (define (sort_helper\
    \ l r)\n    (if (eq? l r)\n      (number->string l)\n      (sort_helper (number->string\
    \ l) (number->string r)))))\n", "  (let ((numbers (string-split numbers \" \"\
    )))\n    (let ((numbers (map (lambda (x) (string-to-number x)) numbers)))\n  \
    \    (let ((numbers (sort numbers)))\n        (string-join numbers \" \"))))\n\
    \  )\n)\n\n;; Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    ;; Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n;; Return the string with numbers sorted from largest to\
    \ smallest\n;; >>> (sort_numbers \"three one five\")\n;; \"three five one\"",
  "  (let ((numbers (string-split numbers \" \")))\n    (let ((numbers (string-map\
    \ (lambda (x) (string-to-number x)) numbers))\n          (sorted (sort numbers)))\n\
    \      (string-join \" \" sorted numbers)))\n)\n\n;; Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return\
    \ the string with numbers sorted from largest to smallest\n;; >>> (sort_numbers\
    \ \"three one five\")\n;; \"three five one\"", "  (let ((numbers (split-string\
    \ numbers \" \")))\n    (let ((numbers (map (lambda (n) (string-to-number n))\
    \ numbers)))\n      (sort numbers)\n      (join \" \" numbers))))\n\n;; Input\
    \ is a space-delimited string of numberals from 'zero' to 'nine'.\n;; Valid choices\
    \ are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and\
    \ 'nine'.\n;; Return the string with numbers sorted from largest to smallest\n\
    ;; >>> (sort_numbers \"three one five\")\n;; \"three five one\"", "  (define (sort_helper\
    \ l r)\n    (cond\n      ((< l r) (return l))\n      ((= l r) (return r))\n  \
    \    ((< l) (return r))\n      ((>= l) (return l))\n      (else (error \"Invalid\
    \ input\"))))\n  (sort_helper numbers \"\")\n)\n", "  (let ((numbers (string-split\
    \ numbers \" \")))\n    (let ((numbers (string-map (lambda (x) (string-to-number\
    \ x)) numbers)))\n      (string-join (sort numbers) \" \"))))\n", "  (let ((numbers\
    \ (string->list numbers)))\n    (let ((numbers (string->list numbers)))\n    \
    \  (let ((numbers (string->list numbers)))\n        (let ((numbers (string->list\
    \ numbers)))\n          (let ((numbers (string->list numbers)))\n            (let\
    \ ((numbers (string->list numbers)))\n              (let ((numbers (string->list\
    \ numbers)))\n                (let ((numbers (string->list numbers)))\n      \
    \            (let ((numbers (string->list numbers)))\n                    (let\
    \ ((numbers (string->list numbers)))\n                      (let ((numbers (string->list\
    \ numbers)))\n                        (let ((numbers (string->list numbers)))\n\
    \                          (let ((numbers (string->list numbers)))\n         \
    \                   (let ((numbers (string->list numbers)))\n                \
    \              (let ((numbers (string->list numbers)))\n                     \
    \           (let ((numbers (string->list numbers)))\n                        \
    \          (let ((numbers (string->list numbers)))\n                         \
    \           (let ((numbers (string->list numbers)))\n                        \
    \              (let ((numbers (string->list numbers)))\n                     \
    \                   (let ((numbers (string->list numbers)))\n                \
    \                          (let ((numbers (string->list numbers)))\n         \
    \                                   (let ((numbers (string->list numbers)))\n\
    \                                              (let ((numbers (string->list numbers)))\n\
    \                                                (let ((numbers (string->list\
    \ numbers)))\n                                                  (let ((numbers\
    \ (string->list numbers)))\n                                                 \
    \   (let ((numbers (string->list numbers)))\n                                \
    \                      (let ((numbers (string->list numbers)))\n             \
    \                                           (let ((numbers (string->list numbers)))\n\
    \                                                          (let ((numbers (string->list\
    \ numbers)))\n                                                            (let\
    \ ((numbers (string->list numbers)))\n                                       \
    \                       (let ((numbers (string->list numbers)))\n            \
    \                                                    (let ((numbers (string->list\
    \ numbers)))\n                                                               \
    \   (let ((numbers (string->list numbers)))\n                                \
    \                                    (let ((numbers (string->list numbers)))\n\
    \                               ", "  (define (sort-helper l r)\n    (if (eq?\
    \ l r)\n      (number->string l)\n      (sort-helper (number->string l) (number->string\
    \ r))\n    )\n  )\n  (sort-helper numbers numbers)\n)\n", "  (define (sort-helper\
    \ l r)\n    (cond\n      ((< l r) (return l))\n      ((= l r) (return r))\n  \
    \    ((< l) (return r))\n      ((>= l) (return l))\n      (else (sort-helper (+\
    \ l 1) r))))\n  (sort-helper numbers numbers))\n\n;; Input is a string of words\
    \ separated by spaces.\n;; Return the string with words sorted from smallest to\
    \ largest\n;; >>> (sort_words \"one three five\")\n;; \"five three one\"", " \
    \ (let ((numbers (string-split numbers \" \")))\n    (let ((numbers (map (lambda\
    \ (x) (string-to-number x)) numbers)))\n      (string-join (sort numbers) \" \"\
    ))))\n\n;; Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    ;; Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n;; Return the string with numbers sorted from largest to\
    \ smallest\n;; >>> (sort_numbers \"three one five\")\n;; \"three five one\"",
  "  (define (sort_helper l r)\n    (cond\n      ((< l r) (return l))\n      ((= l\
    \ r) (return r))\n      ((< l) (return r))\n      (else (sort_helper (+ l 1) r))))\n\
    \  (sort_helper numbers numbers))\n\n;; Input is a space-delimited string of numberals\
    \ from 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with\
    \ numbers sorted from largest to smallest\n;; >>> (sort_numbers \"three one five\"\
    )\n;; \"three five one\"", "  (define (sort-helper n)\n    (cond\n      [(< n\
    \ 0) \"zero\"]\n      [(< n 1) \"one\"]\n      [(< n 2) \"two\"]\n      [(< n\
    \ 3) \"three\"]\n      [(< n 4) \"four\"]\n      [(< n 5) \"five\"]\n      [(<\
    \ n 6) \"six\"]\n      [(< n 7) \"seven\"]\n      [(< n 8) \"eight\"]\n      [(<\
    \ n 9) \"nine\"]\n      [else \"\"]\n    )\n  )\n  (string-append\n    (map sort-helper\
    \ numbers)\n    \" \"\n  )\n)\n", "  (define (sort-helper l r)\n    (if (eq? l\
    \ r)\n      (number->string (string->number l))\n      (sort-helper (string->number\
    \ l) (string->number r)))))\n", "  (define (sort_helper n)\n    (cond\n      [(<\
    \ n 9) (return (string-append n \" \"))]\n      [(< n 8) (return (string-append\
    \ n \" \"))]\n      [(< n 7) (return (string-append n \" \"))]\n      [(< n 6)\
    \ (return (string-append n \" \"))]\n      [(< n 5) (return (string-append n \"\
    \ \"))]\n      [(< n 4) (return (string-append n \" \"))]\n      [(< n 3) (return\
    \ (string-append n \" \"))]\n      [(< n 2) (return (string-append n \" \"))]\n\
    \      [(< n 1) (return (string-append n \" \"))]\n      [(< n 0) (return \"\"\
    )]\n      [else (return \"\")]\n    )\n  )\n  (string-join \" \" (map sort_helper\
    \ numbers))\n)\n", "  (let ((numbers (string-split numbers \" \")))\n    (let\
    \ ((numbers (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n     \
    \ (let ((numbers (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n\
    \        (let ((numbers (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n\
    \          (let ((numbers (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n\
    \            (let ((numbers (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n\
    \              (let ((numbers (map (lambda (n) (string-replace n \" \" \"\"))\
    \ numbers)))\n                (let ((numbers (map (lambda (n) (string-replace\
    \ n \" \" \"\")) numbers)))\n                  (let ((numbers (map (lambda (n)\
    \ (string-replace n \" \" \"\")) numbers)))\n                    (let ((numbers\
    \ (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n               \
    \       (let ((numbers (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n\
    \                        (let ((numbers (map (lambda (n) (string-replace n \"\
    \ \" \"\")) numbers)))\n                          (let ((numbers (map (lambda\
    \ (n) (string-replace n \" \" \"\")) numbers)))\n                            (let\
    \ ((numbers (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n     \
    \                         (let ((numbers (map (lambda (n) (string-replace n \"\
    \ \" \"\")) numbers)))\n                                (let ((numbers (map (lambda\
    \ (n) (string-replace n \" \" \"\")) numbers)))\n                            \
    \      (let ((numbers (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n\
    \                                    (let ((numbers (map (lambda (n) (string-replace\
    \ n \" \" \"\")) numbers)))\n                                      (let ((numbers\
    \ (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n               \
    \                         (let ((numbers (map (lambda (n) (string-replace n \"\
    \ \" \"\")) numbers)))\n                                          (let ((numbers\
    \ (map (lambda", "  (let ((numbers (string->list numbers)))\n    (let ((numbers\
    \ (string->list numbers)))\n      (let ((numbers (string->list numbers)))\n  \
    \      (let ((numbers (string->list numbers)))\n          (let ((numbers (string->list\
    \ numbers)))\n            (let ((numbers (string->list numbers)))\n          \
    \    (let ((numbers (string->list numbers)))\n                (let ((numbers (string->list\
    \ numbers)))\n                  (let ((numbers (string->list numbers)))\n    \
    \                (let ((numbers (string->list numbers)))\n                   \
    \   (let ((numbers (string->list numbers)))\n                        (let ((numbers\
    \ (string->list numbers)))\n                          (let ((numbers (string->list\
    \ numbers)))\n                            (let ((numbers (string->list numbers)))\n\
    \                              (let ((numbers (string->list numbers)))\n     \
    \                           (let ((numbers (string->list numbers)))\n        \
    \                          (let ((numbers (string->list numbers)))\n         \
    \                           (let ((numbers (string->list numbers)))\n        \
    \                              (let ((numbers (string->list numbers)))\n     \
    \                                   (let ((numbers (string->list numbers)))\n\
    \                                          (let ((numbers (string->list numbers)))\n\
    \                                            (let ((numbers (string->list numbers)))\n\
    \                                              (let ((numbers (string->list numbers)))\n\
    \                                                (let ((numbers (string->list\
    \ numbers)))\n                                                  (let ((numbers\
    \ (string->list numbers)))\n                                                 \
    \   (let ((numbers (string->list numbers)))\n                                \
    \                      (let ((numbers (string->list numbers)))\n             \
    \                                           (let ((numbers (string->list numbers)))\n\
    \                                                          (let ((numbers (string->list\
    \ numbers)))\n                                                            (let\
    \ ((numbers (string->list numbers)))\n                                       \
    \                       (let ((numbers (string->list numbers)))\n            \
    \                                                    (let ((numbers (string->list\
    \ numbers)))\n                                                               \
    \   (let ((numbers (string->list numbers)))\n                                \
    \                                    (let ((numbers (string->list numbers)))\n\
    \                               ", "  (let ((numbers (string-split numbers \"\
    \ \")))\n    (let ((numbers (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n\
    \      (let ((numbers (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n\
    \        (let ((numbers (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n\
    \          (let ((numbers (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n\
    \            (let ((numbers (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n\
    \              (let ((numbers (map (lambda (n) (string-replace n \" \" \"\"))\
    \ numbers)))\n                (let ((numbers (map (lambda (n) (string-replace\
    \ n \" \" \"\")) numbers)))\n                  (let ((numbers (map (lambda (n)\
    \ (string-replace n \" \" \"\")) numbers)))\n                    (let ((numbers\
    \ (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n               \
    \       (let ((numbers (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n\
    \                        (let ((numbers (map (lambda (n) (string-replace n \"\
    \ \" \"\")) numbers)))\n                          (let ((numbers (map (lambda\
    \ (n) (string-replace n \" \" \"\")) numbers)))\n                            (let\
    \ ((numbers (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n     \
    \                         (let ((numbers (map (lambda (n) (string-replace n \"\
    \ \" \"\")) numbers)))\n                                (let ((numbers (map (lambda\
    \ (n) (string-replace n \" \" \"\")) numbers)))\n                            \
    \      (let ((numbers (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n\
    \                                    (let ((numbers (map (lambda (n) (string-replace\
    \ n \" \" \"\")) numbers)))\n                                      (let ((numbers\
    \ (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n               \
    \                         (let ((numbers (map (lambda (n) (string-replace n \"\
    \ \" \"\")) numbers)))\n                                          (let ((numbers\
    \ (map (lambda", "  (define (sort-helper l r)\n    (if (eq? l r)\n      (number->string\
    \ (string->number l))\n      (if (eq? l (car l))\n        (sort-helper (cdr l)\
    \ (cdr r))\n        (sort-helper (car l) (cdr l)))))\n  (sort-helper numbers \"\
    \")\n)\n\n;; Input is a string of words separated by spaces.\n;; Return the string\
    \ with words sorted from smallest to largest\n;; >>> (sort_words \"one three five\"\
    )\n;; \"five one three\"", "  (define (sort-helper l r)\n    (if (eq? l r)\n \
    \     (number->string (car l))\n      (sort-helper (cdr l) (cdr r))))\n  (sort-helper\
    \ numbers \"\")\n)\n\n;; Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers sorted\
    \ from largest to smallest\n;; >>> (sort_numbers \"three one five\")\n;; \"three\
    \ five one\"", "  (let ((numbers (string->list numbers)))\n    (let ((numbers\
    \ (string->list numbers)))\n      (let ((numbers (string->list numbers)))\n  \
    \      (let ((numbers (string->list numbers)))\n          (let ((numbers (string->list\
    \ numbers)))\n            (let ((numbers (string->list numbers)))\n          \
    \    (let ((numbers (string->list numbers)))\n                (let ((numbers (string->list\
    \ numbers)))\n                  (let ((numbers (string->list numbers)))\n    \
    \                (let ((numbers (string->list numbers)))\n                   \
    \   (let ((numbers (string->list numbers)))\n                        (let ((numbers\
    \ (string->list numbers)))\n                          (let ((numbers (string->list\
    \ numbers)))\n                            (let ((numbers (string->list numbers)))\n\
    \                              (let ((numbers (string->list numbers)))\n     \
    \                           (let ((numbers (string->list numbers)))\n        \
    \                          (let ((numbers (string->list numbers)))\n         \
    \                           (let ((numbers (string->list numbers)))\n        \
    \                              (let ((numbers (string->list numbers)))\n     \
    \                                   (let ((numbers (string->list numbers)))\n\
    \                                          (let ((numbers (string->list numbers)))\n\
    \                                            (let ((numbers (string->list numbers)))\n\
    \                                              (let ((numbers (string->list numbers)))\n\
    \                                                (let ((numbers (string->list\
    \ numbers)))\n                                                  (let ((numbers\
    \ (string->list numbers)))\n                                                 \
    \   (let ((numbers (string->list numbers)))\n                                \
    \                      (let ((numbers (string->list numbers)))\n             \
    \                                           (let ((numbers (string->list numbers)))\n\
    \                                                          (let ((numbers (string->list\
    \ numbers)))\n                                                            (let\
    \ ((numbers (string->list numbers)))\n                                       \
    \                       (let ((numbers (string->list numbers)))\n            \
    \                                                    (let ((numbers (string->list\
    \ numbers)))\n                                                               \
    \   (let ((numbers (string->list numbers)))\n                                \
    \                                    (let ((numbers (string->list numbers)))\n\
    \                               ", "  (define (sort-helper l r)\n    (cond\n \
    \     ((< l r) (return l))\n      ((= l r) (return r))\n      ((< l) (return r))\n\
    \      (else (sort-helper (+ l 1) r))))\n  (sort-helper numbers numbers))\n\n\
    ;; Input is a space-delimited string of numberals from 'zero' to 'nine'.\n;; Valid\
    \ choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight'\
    \ and 'nine'.\n;; Return the string with numbers sorted from largest to smallest\n\
    ;; >>> (sort_numbers \"three one five\")\n;; \"three five one\"", "  (define (sort-helper\
    \ n)\n    (if (eq? n numbers)\n      n\n      (if (lt? n numbers)\n        (sort-helper\
    \ (sub1 n))\n        (sort-helper (add1 n)))))\n  (sort-helper (zero)))\n\n;;\
    \ Input is a space-delimited string of numberals from 'zero' to 'nine'.\n;; Valid\
    \ choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight'\
    \ and 'nine'.\n;; Return the string with numbers sorted from largest to smallest\n\
    ;; >>> (sort_numbers \"three one five\")\n;; \"three five one\"", "  (define (sort-helper\
    \ n)\n    (if (eq? n numbers)\n      n\n      (if (lt? n numbers)\n        (sort-helper\
    \ (sub1 n))\n        (sort-helper (add1 n))))))\n", "  (define (sort_helper n)\n\
    \    (if (eq? n numbers)\n      n\n      (if (eq? (car numbers) n)\n        (sort_helper\
    \ (cdr numbers))\n        (sort_helper (cdr (cdr numbers))))))\n  (sort_helper\
    \ numbers))\n\n;; Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers sorted\
    \ from largest to smallest\n;; >>> (sort_numbers \"three one five\")\n;; \"three\
    \ five one\"", "  (let ((numbers (string-split numbers \" \")))\n    (let ((numbers\
    \ (map (lambda (x) (string-to-number x)) numbers)))\n      (let ((numbers (sort\
    \ numbers)))\n        (string-join \" \" numbers))))\n  numbers)\n\n;; Input is\
    \ a space-delimited string of numberals from 'zero' to 'nine'.\n;; Valid choices\
    \ are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and\
    \ 'nine'.\n;; Return the string with numbers sorted from largest to smallest\n\
    ;; >>> (sort_numbers \"three one five\")\n;; \"three five one\"", "  (define (sort-helper\
    \ l r)\n    (cond\n      ((< l r) (return l))\n      ((= l r) (return r))\n  \
    \    ((< l) (return r))\n      (else (sort-helper (+ l 1) r))))\n  (sort-helper\
    \ numbers numbers))\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from largest to smallest\n;; >>> (sort_numbers \"three one five\")\n\
    ;; \"three five one\"", "  (let ((numbers (string-split numbers \" \")))\n   \
    \ (let ((numbers (map (lambda (x) (string-to-number x)) numbers)))\n      (string-join\
    \ (sort numbers) \" \"))))\n\n;; Input is a space-delimited string of numberals\
    \ from 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with\
    \ numbers sorted from largest to smallest\n;; >>> (sort_numbers \"three one five\"\
    )\n;; \"three five one\"", "  (let ((numbers (string-split numbers \" \")))\n\
    \    (let ((numbers (map (lambda (x) (string-to-number x)) numbers)))\n      (string-join\
    \ (sort numbers) \" \"))))\n\n;; Input is a space-delimited string of numberals\
    \ from 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with\
    \ numbers sorted from largest to smallest\n;; >>> (sort_numbers \"three one five\"\
    )\n;; \"three five one\"", "  (define (sort-helper n)\n    (if (eq? n numbers)\n\
    \      n\n      (if (eq? (car numbers) n)\n        (sort-helper (cdr numbers))\n\
    \        (sort-helper (cdr (cdr numbers))))))\n  (sort-helper numbers))\n\n;;\
    \ Input is a space-delimited string of numberals from 'zero' to 'nine'.\n;; Valid\
    \ choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight'\
    \ and 'nine'.\n;; Return the string with numbers sorted from largest to smallest\n\
    ;; >>> (sort_numbers \"three one five\")\n;; \"three five one\"", "  (define (sort-helper\
    \ l r)\n    (cond\n      ((< l r) (return l))\n      ((= l r) (return r))\n  \
    \    ((< l) (return r))\n      (else (sort-helper (+ l 1) r))))\n  (sort-helper\
    \ numbers numbers))\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from largest to smallest\n;; >>> (sort_numbers \"three one five\")\n\
    ;; \"three five one\"", "  (define (sort-helper l r)\n    (if (eq? l r)\n    \
    \  (number->string l)\n      (sort-helper (number->string l) (number->string r)))))\n",
  "  (define (sort_helper n)\n    (if (eq? n numbers)\n      n\n      (if (eq? (car\
    \ numbers) n)\n        (sort_helper (cdr numbers))\n        (sort_helper (cdr\
    \ (cdr numbers))))))\n  (sort_helper numbers))\n\n;; Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return\
    \ the string with numbers sorted from largest to smallest\n;; >>> (sort_numbers\
    \ \"three one five\")\n;; \"three five one\"", "  (let ((numbers (string->list\
    \ numbers)))\n    (let ((numbers (string->list numbers)))\n      (let ((numbers\
    \ (string->list numbers)))\n        (let ((numbers (string->list numbers)))\n\
    \          (let ((numbers (string->list numbers)))\n            (let ((numbers\
    \ (string->list numbers)))\n              (let ((numbers (string->list numbers)))\n\
    \                (let ((numbers (string->list numbers)))\n                  (let\
    \ ((numbers (string->list numbers)))\n                    (let ((numbers (string->list\
    \ numbers)))\n                      (let ((numbers (string->list numbers)))\n\
    \                        (let ((numbers (string->list numbers)))\n           \
    \               (let ((numbers (string->list numbers)))\n                    \
    \        (let ((numbers (string->list numbers)))\n                           \
    \   (let ((numbers (string->list numbers)))\n                                (let\
    \ ((numbers (string->list numbers)))\n                                  (let ((numbers\
    \ (string->list numbers)))\n                                    (let ((numbers\
    \ (string->list numbers)))\n                                      (let ((numbers\
    \ (string->list numbers)))\n                                        (let ((numbers\
    \ (string->list numbers)))\n                                          (let ((numbers\
    \ (string->list numbers)))\n                                            (let ((numbers\
    \ (string->list numbers)))\n                                              (let\
    \ ((numbers (string->list numbers)))\n                                       \
    \         (let ((numbers (string->list numbers)))\n                          \
    \                        (let ((numbers (string->list numbers)))\n           \
    \                                         (let ((numbers (string->list numbers)))\n\
    \                                                      (let ((numbers (string->list\
    \ numbers)))\n                                                        (let ((numbers\
    \ (string->list numbers)))\n                                                 \
    \         (let ((numbers (string->list numbers)))\n                          \
    \                                  (let ((numbers (string->list numbers)))\n \
    \                                                             (let ((numbers (string->list\
    \ numbers)))\n                                                               \
    \ (let ((numbers (string->list numbers)))\n                                  \
    \                                (let ((numbers (string->list numbers)))\n   \
    \                                                                 (let ((numbers\
    \ (string->list numbers)))\n                               ", "  (let ((numbers\
    \ (string-split numbers \" \")))\n    (let ((numbers (map (lambda (x) (string-to-number\
    \ x)) numbers)))\n      (sort numbers)\n      (string-join \" \" numbers)))\n\
    )\n\n;; Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    ;; Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n;; Return the string with numbers sorted from largest to\
    \ smallest\n;; >>> (sort_numbers \"three one five\")\n;; \"three five one\"",
  "  (let ((numbers (split-string numbers \" \")))\n    (let ((numbers (map (lambda\
    \ (n) (string-to-number n)) numbers)))\n      (sort numbers)\n      (join \" \"\
    \ numbers))))\n\n;; Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers sorted\
    \ from largest to smallest\n;; >>> (sort_numbers \"three one five\")\n;; \"three\
    \ five one\"", "  (define (sort-helper n)\n    (if (eq? n numbers)\n      n\n\
    \      (if (eq? (car numbers) n)\n        (sort-helper (cdr numbers))\n      \
    \  (sort-helper (car numbers)))))\n  (sort-helper numbers))\n\n;; Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return\
    \ the string with numbers sorted from smallest to largest\n;; >>> (sort_numbers\
    \ \"three one five\")\n;; \"one three five\"", "  (define (sort-helper l r)\n\
    \    (cond\n      ((< l r) (return l))\n      ((= l r) (return r))\n      ((<\
    \ l) (return (sort-helper (+ l 1) r)))\n      (else (return (sort-helper l (+\
    \ l 1)))))\n    (sort-helper numbers numbers)))\n", "  (let ((numbers (string-split\
    \ numbers \" \")))\n    (let ((numbers (map (lambda (x) (string-to-number x))\
    \ numbers)))\n      (string-join (sort numbers) \" \")))\n)\n\n;; Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return\
    \ the string with numbers sorted from largest to smallest\n;; >>> (sort_numbers\
    \ \"three one five\")\n;; \"three five one\"", "  (define (sort_helper n m)\n\
    \    (if (eq? n m)\n      (number->string n)\n      (sort_helper (sub1 n) (sub1\
    \ m))\n      )\n    )\n  (sort_helper numbers numbers)\n  )\n\n;; Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return\
    \ the string with numbers sorted from largest to smallest\n;; >>> (sort_numbers\
    \ \"three one five\")\n;; \"three five one\"", "  (let ((numbers (string->list\
    \ numbers)))\n    (let ((numbers (string->list numbers)))\n      (let ((numbers\
    \ (string->list numbers)))\n        (let ((numbers (string->list numbers)))\n\
    \          (let ((numbers (string->list numbers)))\n            (let ((numbers\
    \ (string->list numbers)))\n              (let ((numbers (string->list numbers)))\n\
    \                (let ((numbers (string->list numbers)))\n                  (let\
    \ ((numbers (string->list numbers)))\n                    (let ((numbers (string->list\
    \ numbers)))\n                      (let ((numbers (string->list numbers)))\n\
    \                        (let ((numbers (string->list numbers)))\n           \
    \               (let ((numbers (string->list numbers)))\n                    \
    \        (let ((numbers (string->list numbers)))\n                           \
    \   (let ((numbers (string->list numbers)))\n                                (let\
    \ ((numbers (string->list numbers)))\n                                  (let ((numbers\
    \ (string->list numbers)))\n                                    (let ((numbers\
    \ (string->list numbers)))\n                                      (let ((numbers\
    \ (string->list numbers)))\n                                        (let ((numbers\
    \ (string->list numbers)))\n                                          (let ((numbers\
    \ (string->list numbers)))\n                                            (let ((numbers\
    \ (string->list numbers)))\n                                              (let\
    \ ((numbers (string->list numbers)))\n                                       \
    \         (let ((numbers (string->list numbers)))\n                          \
    \                        (let ((numbers (string->list numbers)))\n           \
    \                                         (let ((numbers (string->list numbers)))\n\
    \                                                      (let ((numbers (string->list\
    \ numbers)))\n                                                        (let ((numbers\
    \ (string->list numbers)))\n                                                 \
    \         (let ((numbers (string->list numbers)))\n                          \
    \                                  (let ((numbers (string->list numbers)))\n \
    \                                                             (let ((numbers (string->list\
    \ numbers)))\n                                                               \
    \ (let ((numbers (string->list numbers)))\n                                  \
    \                                (let ((numbers (string->list numbers)))\n   \
    \                                                                 (let ((numbers\
    \ (string->list numbers)))\n                               ", "  (define (sort-helper\
    \ l r)\n    (if (eq? l r)\n      (number->string (car l))\n      (sort-helper\
    \ (cdr l) (cdr r))))\n  (sort-helper numbers \"\")\n)\n\n;; Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return\
    \ the string with numbers sorted from largest to smallest\n;; >>> (sort_numbers\
    \ \"three one five\")\n;; \"three five one\"", "  (define (sort_helper n)\n  \
    \  (cond\n      ((= n 'zero) 'zero)\n      ((= n 'one) 'one)\n      ((= n 'two)\
    \ 'two)\n      ((= n 'three) 'three)\n      ((= n 'four) 'four)\n      ((= n 'five)\
    \ 'five)\n      ((= n 'six) 'six)\n      ((= n 'seven) 'seven)\n      ((= n 'eight)\
    \ 'eight)\n      ((= n 'nine) 'nine)\n      (else 'error)\n    )\n  )\n  (reduce\
    \ (sort_helper numbers) 'zero)\n)\n", "  (define (sort-helper n)\n    (if (eq?\
    \ n numbers)\n      n\n      (if (lt? n numbers)\n        (sort-helper (sub1 n))\n\
    \        (sort-helper (add1 n)))))\n  (sort-helper (sub1 (string-to-number numbers))))\n\
    \n;; Input is a space-delimited string of numberals from 'zero' to 'nine'.\n;;\
    \ Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n;; Return the string with numbers sorted from largest to\
    \ smallest\n;; >>> (sort_numbers \"three one five\")\n;; \"three five one\"",
  "  (let ((numbers (string-split numbers \" \")))\n    (let ((numbers (map (lambda\
    \ (x) (string-to-number x)) numbers)))\n      (sort numbers)\n      (string-join\
    \ \" \" numbers))))\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from largest to smallest\n;; >>> (sort_numbers \"three one five\")\n\
    ;; \"three five one\"", "  (define (sort_helper n)\n    (if (eq? n numbers)\n\
    \      n\n      (if (eq? (car numbers) n)\n        (sort_helper (cdr numbers))\n\
    \        (sort_helper (cdr (cdr numbers))))))\n  (sort_helper numbers))\n\n;;\
    \ Input is a space-delimited string of numberals from 'zero' to 'nine'.\n;; Valid\
    \ choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight'\
    \ and 'nine'.\n;; Return the string with numbers sorted from largest to smallest\n\
    ;; >>> (sort_numbers \"three one five\")\n;; \"three five one\"", "  (let ((numbers\
    \ (string-split numbers \" \")))\n    (let ((numbers (string-split numbers \"\
    \ \")))\n      (let ((numbers (string-split numbers \" \")))\n        (let ((numbers\
    \ (string-split numbers \" \")))\n          (let ((numbers (string-split numbers\
    \ \" \")))\n            (let ((numbers (string-split numbers \" \")))\n      \
    \        (let ((numbers (string-split numbers \" \")))\n                (let ((numbers\
    \ (string-split numbers \" \")))\n                  (let ((numbers (string-split\
    \ numbers \" \")))\n                    (let ((numbers (string-split numbers \"\
    \ \")))\n                      (let ((numbers (string-split numbers \" \")))\n\
    \                        (let ((numbers (string-split numbers \" \")))\n     \
    \                     (let ((numbers (string-split numbers \" \")))\n        \
    \                    (let ((numbers (string-split numbers \" \")))\n         \
    \                     (let ((numbers (string-split numbers \" \")))\n        \
    \                        (let ((numbers (string-split numbers \" \")))\n     \
    \                             (let ((numbers (string-split numbers \" \")))\n\
    \                                    (let ((numbers (string-split numbers \" \"\
    )))\n                                      (let ((numbers (string-split numbers\
    \ \" \")))\n                                        (let ((numbers (string-split\
    \ numbers \" \")))\n                                          (let ((numbers (string-split\
    \ numbers \" \")))\n                                            (let ((numbers\
    \ (string-split numbers \" \")))\n                                           \
    \   (let ((numbers (string-split numbers \" \")))\n                          \
    \                      (let ((numbers (string-split numbers \" \")))\n       \
    \                                           (let ((numbers (string-split numbers\
    \ \" \")))\n                                                    (let ((numbers\
    \ (string-split numbers \" \")))\n                                           \
    \           (let ((numbers (string-split numbers \" \")))\n                  \
    \                                      (let ((numbers (string-split numbers \"\
    \ \")))\n                                                          (let ((numbers\
    \ (string-split numbers \" \")))\n                                           \
    \                 (let ((numbers (string-split numbers \" \")))\n            \
    \                                                  (", "  (let ((numbers (string-split\
    \ numbers \" \")))\n    (let ((numbers (string-split numbers \" \")))\n      (let\
    \ ((numbers (string-split numbers \" \")))\n        (let ((numbers (string-split\
    \ numbers \" \")))\n          (let ((numbers (string-split numbers \" \")))\n\
    \            (let ((numbers (string-split numbers \" \")))\n              (let\
    \ ((numbers (string-split numbers \" \")))\n                (let ((numbers (string-split\
    \ numbers \" \")))\n                  (let ((numbers (string-split numbers \"\
    \ \")))\n                    (let ((numbers (string-split numbers \" \")))\n \
    \                     (let ((numbers (string-split numbers \" \")))\n        \
    \                (let ((numbers (string-split numbers \" \")))\n             \
    \             (let ((numbers (string-split numbers \" \")))\n                \
    \            (let ((numbers (string-split numbers \" \")))\n                 \
    \             (let ((numbers (string-split numbers \" \")))\n                \
    \                (let ((numbers (string-split numbers \" \")))\n             \
    \                     (let ((numbers (string-split numbers \" \")))\n        \
    \                            (let ((numbers (string-split numbers \" \")))\n \
    \                                     (let ((numbers (string-split numbers \"\
    \ \")))\n                                        (let ((numbers (string-split\
    \ numbers \" \")))\n                                          (let ((numbers (string-split\
    \ numbers \" \")))\n                                            (let ((numbers\
    \ (string-split numbers \" \")))\n                                           \
    \   (let ((numbers (string-split numbers \" \")))\n                          \
    \                      (let ((numbers (string-split numbers \" \")))\n       \
    \                                           (let ((numbers (string-split numbers\
    \ \" \")))\n                                                    (let ((numbers\
    \ (string-split numbers \" \")))\n                                           \
    \           (let ((numbers (string-split numbers \" \")))\n                  \
    \                                      (let ((numbers (string-split numbers \"\
    \ \")))\n                                                          (let ((numbers\
    \ (string-split numbers \" \")))\n                                           \
    \                 (let ((numbers (string-split numbers \" \")))\n            \
    \                                                  (", "  (define (sort-helper\
    \ l r)\n    (cond\n      ((< l r) (return l))\n      ((= l r) (return r))\n  \
    \    ((< l) (return r))\n      (else (sort-helper (+ l 1) r))))\n  (sort-helper\
    \ numbers numbers))\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from largest to smallest\n;; >>> (sort_numbers \"three one five\")\n\
    ;; \"three five one\"", "  (let ((numbers (string-split numbers \" \")))\n   \
    \ (let ((numbers (map (lambda (x) (string-to-number x)) numbers)))\n      (sort\
    \ numbers)\n      (string-join \" \" numbers)))\n  )\n)\n", "  (define (sort_helper\
    \ n)\n    (if (eq? n numbers)\n      n\n      (if (eq? (car numbers) n)\n    \
    \    (sort_helper (cdr numbers))\n        (sort_helper (cdr (cdr numbers))))))\n\
    \  (sort_helper numbers))\n\n;; Input is a space-delimited string of numberals\
    \ from 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with\
    \ numbers sorted from largest to smallest\n;; >>> (sort_numbers \"three one five\"\
    )\n;; \"three five one\"", "  (let ((numbers (string-split numbers \" \")))\n\
    \    (let ((numbers (map (lambda (x) (string-to-number x)) numbers)))\n      (sort\
    \ numbers)\n      (string-join \" \" numbers)))\n)\n\n;; Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return\
    \ the string with numbers sorted from largest to smallest\n;; >>> (sort_numbers\
    \ \"three one five\")\n;; \"three five one\"", "  (define (sort-helper l r)\n\
    \    (if (eq? l r)\n      (number->string (car l))\n      (sort-helper (cdr l)\
    \ (cdr r))))\n  (sort-helper numbers \"\")\n)\n\n;; Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return\
    \ the string with numbers sorted from largest to smallest\n;; >>> (sort_numbers\
    \ \"three one five\")\n;; \"three five one\"", "  (let ((numbers (split-string\
    \ numbers \" \")))\n    (let ((numbers (map (lambda (n) (string->number n)) numbers)))\n\
    \      (let ((numbers (map (lambda (n) (string->number n)) numbers)))\n      \
    \  (let ((numbers (map (lambda (n) (string->number n)) numbers)))\n          (let\
    \ ((numbers (map (lambda (n) (string->number n)) numbers)))\n            (let\
    \ ((numbers (map (lambda (n) (string->number n)) numbers)))\n              (let\
    \ ((numbers (map (lambda (n) (string->number n)) numbers)))\n                (let\
    \ ((numbers (map (lambda (n) (string->number n)) numbers)))\n                \
    \  (let ((numbers (map (lambda (n) (string->number n)) numbers)))\n          \
    \          (let ((numbers (map (lambda (n) (string->number n)) numbers)))\n  \
    \                    (let ((numbers (map (lambda (n) (string->number n)) numbers)))\n\
    \                        (let ((numbers (map (lambda (n) (string->number n)) numbers)))\n\
    \                          (let ((numbers (map (lambda (n) (string->number n))\
    \ numbers)))\n                            (let ((numbers (map (lambda (n) (string->number\
    \ n)) numbers)))\n                              (let ((numbers (map (lambda (n)\
    \ (string->number n)) numbers)))\n                                (let ((numbers\
    \ (map (lambda (n) (string->number n)) numbers)))\n                          \
    \        (let ((numbers (map (lambda (n) (string->number n)) numbers)))\n    \
    \                                (let ((numbers (map (lambda (n) (string->number\
    \ n)) numbers)))\n                                      (let ((numbers (map (lambda\
    \ (n) (string->number n)) numbers)))\n                                       \
    \ (let ((numbers (map (lambda (n) (string->number n)) numbers)))\n           \
    \                               (let ((numbers (map (lambda (n) (string->number\
    \ n)) numbers)))\n                                            (let ((numbers (map\
    \ (lambda (n) (string->number n)) numbers)))\n                               \
    \               (let ((numbers (map (lambda (n) (string->", "  (let ((numbers\
    \ (string-split numbers \" \")))\n    (let ((numbers (map (lambda (x) (string-to-number\
    \ x)) numbers)))\n      (sort numbers)\n      (string-join \" \" numbers)))\n\
    )\n", "  (define (sort-helper n)\n    (cond\n      [(< n 9) (return \"nine\")]\n\
    \      [(< n 8) (return \"eight\")]\n      [(< n 7) (return \"seven\")]\n    \
    \  [(< n 6) (return \"six\")]\n      [(< n 5) (return \"five\")]\n      [(< n\
    \ 4) (return \"four\")]\n      [(< n 3) (return \"three\")]\n      [(< n 2) (return\
    \ \"two\")]\n      [(< n 1) (return \"one\")]\n      [(< n 0) (return \"zero\"\
    )]\n      [else (return \"error\")]))\n  (reduce (sort-helper numbers) \"\")\n\
    )\n\n;; Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    ;; Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n;; Return the string with numbers sorted from largest to\
    \ smallest\n;; >>> (sort_numbers \"three one five\")\n;; \"five three one\"",
  "  (define (sort-helper n)\n    (if (eq? n numbers)\n      n\n      (sort-helper\
    \ (sub1 n) (sub1 (car numbers)))))\n  (sort-helper (sub1 9) (sub1 0) (car numbers)))\n\
    \n;; Input is a space-delimited string of numberals from 'zero' to 'nine'.\n;;\
    \ Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n;; Return the string with numbers sorted from largest to\
    \ smallest\n;; >>> (sort_numbers \"three one five\")\n;; \"three five one\"",
  "  (let ((numbers (string-split numbers \" \")))\n    (let ((numbers (map (lambda\
    \ (n) (string-replace n \" \" \"\")) numbers)))\n      (let ((numbers (map (lambda\
    \ (n) (string-replace n \" \" \"\")) numbers)))\n        (let ((numbers (map (lambda\
    \ (n) (string-replace n \" \" \"\")) numbers)))\n          (let ((numbers (map\
    \ (lambda (n) (string-replace n \" \" \"\")) numbers)))\n            (let ((numbers\
    \ (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n              (let\
    \ ((numbers (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n     \
    \           (let ((numbers (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n\
    \                  (let ((numbers (map (lambda (n) (string-replace n \" \" \"\"\
    )) numbers)))\n                    (let ((numbers (map (lambda (n) (string-replace\
    \ n \" \" \"\")) numbers)))\n                      (let ((numbers (map (lambda\
    \ (n) (string-replace n \" \" \"\")) numbers)))\n                        (let\
    \ ((numbers (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n     \
    \                     (let ((numbers (map (lambda (n) (string-replace n \" \"\
    \ \"\")) numbers)))\n                            (let ((numbers (map (lambda (n)\
    \ (string-replace n \" \" \"\")) numbers)))\n                              (let\
    \ ((numbers (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n     \
    \                           (let ((numbers (map (lambda (n) (string-replace n\
    \ \" \" \"\")) numbers)))\n                                  (let ((numbers (map\
    \ (lambda (n) (string-replace n \" \" \"\")) numbers)))\n                    \
    \                (let ((numbers (map (lambda (n) (string-replace n \" \" \"\"\
    )) numbers)))\n                                      (let ((numbers (map (lambda\
    \ (n) (string-replace n \" \" \"\")) numbers)))\n                            \
    \            (let ((numbers (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n\
    \                                          (let ((numbers (map (lambda", "  (define\
    \ (sort-helper l r)\n    (cond\n      ((< l r) (return l))\n      ((= l r) (return\
    \ r))\n      ((< l) (return r))\n      (else (sort-helper (+ l 1) r))))\n  (sort-helper\
    \ numbers numbers))\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from largest to smallest\n;; >>> (sort_numbers \"three one five\")\n\
    ;; \"three five one\"", "  (define (sort-helper n)\n    (cond\n      [(< n 9)\
    \ (return \"nine\")]\n      [(< n 8) (return \"eight\")]\n      [(< n 7) (return\
    \ \"seven\")]\n      [(< n 6) (return \"six\")]\n      [(< n 5) (return \"five\"\
    )]\n      [(< n 4) (return \"four\")]\n      [(< n 3) (return \"three\")]\n  \
    \    [(< n 2) (return \"two\")]\n      [(< n 1) (return \"one\")]\n      [(< n\
    \ 0) (return \"zero\")]\n      [else (return \"error\")]))\n  (map sort-helper\
    \ numbers))\n\n;; Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers sorted\
    \ from largest to smallest\n;; >>> (sort_numbers \"three one five\")\n;; \"five\
    \ three one\"", "  (let ((numbers (string-split numbers \" \")))\n    (let ((numbers\
    \ (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n      (let ((numbers\
    \ (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n        (let ((numbers\
    \ (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n          (let ((numbers\
    \ (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n            (let\
    \ ((numbers (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n     \
    \         (let ((numbers (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n\
    \                (let ((numbers (map (lambda (n) (string-replace n \" \" \"\"\
    )) numbers)))\n                  (let ((numbers (map (lambda (n) (string-replace\
    \ n \" \" \"\")) numbers)))\n                    (let ((numbers (map (lambda (n)\
    \ (string-replace n \" \" \"\")) numbers)))\n                      (let ((numbers\
    \ (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n               \
    \         (let ((numbers (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n\
    \                          (let ((numbers (map (lambda (n) (string-replace n \"\
    \ \" \"\")) numbers)))\n                            (let ((numbers (map (lambda\
    \ (n) (string-replace n \" \" \"\")) numbers)))\n                            \
    \  (let ((numbers (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n\
    \                                (let ((numbers (map (lambda (n) (string-replace\
    \ n \" \" \"\")) numbers)))\n                                  (let ((numbers\
    \ (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n               \
    \                     (let ((numbers (map (lambda (n) (string-replace n \" \"\
    \ \"\")) numbers)))\n                                      (let ((numbers (map\
    \ (lambda (n) (string-replace n \" \" \"\")) numbers)))\n                    \
    \                    (let ((numbers (map (lambda (n) (string-replace n \" \" \"\
    \")) numbers)))\n                                          (let ((numbers (map\
    \ (lambda", "  (define (sort-helper l r)\n    (if (eq? l r)\n      (number->string\
    \ (string->number l))\n      (sort-helper (string->number l) (string->number r))\n\
    \      )))\n  (sort-helper numbers \"\")\n)\n", "  (let ((numbers (string->list\
    \ numbers)))\n    (let ((numbers (sort numbers)))\n      (string-join \" \" numbers)))\n\
    )\n\n;; Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    ;; Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n;; Return the string with numbers sorted from largest to\
    \ smallest\n;; >>> (sort_numbers \"three one five\")\n;; \"three five one\"",
  "  (define (sort_helper n)\n    (if (eq? n numbers)\n      n\n      (sort_helper\
    \ (sub1 n) (sub1 (sub1 n)))))\n  (sort_helper numbers))\n\n;; Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return\
    \ the string with numbers sorted from largest to smallest\n;; >>> (sort_numbers\
    \ \"three one five\")\n;; \"three five one\"", "  (define (sort-helper n)\n  \
    \  (if (eq? n numbers)\n      (return numbers)\n      (if (lt? n numbers)\n  \
    \      (sort-helper (sub1 n) (cdr numbers))\n        (sort-helper (sub1 n) (cdr\
    \ (cdr numbers)))\n        )))\n  (sort-helper numbers))\n\n;; Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return\
    \ the string with numbers sorted from largest to smallest\n;; >>> (sort_numbers\
    \ \"three one five\")\n;; \"three five one\"", "  (define (sort-helper l r)\n\
    \    (if (eq? l r)\n      (number->string l)\n      (sort-helper (number->string\
    \ l) (number->string r))\n    )\n  )\n  (sort-helper numbers numbers)\n)\n", " \
    \ (define (sort-helper n)\n    (cond\n      [(< n 0) \"zero\"]\n      [(< n 1)\
    \ \"one\"]\n      [(< n 2) \"two\"]\n      [(< n 3) \"three\"]\n      [(< n 4)\
    \ \"four\"]\n      [(< n 5) \"five\"]\n      [(< n 6) \"six\"]\n      [(< n 7)\
    \ \"seven\"]\n      [(< n 8) \"eight\"]\n      [(< n 9) \"nine\"]\n      [else\
    \ \"error\"]\n    )\n  )\n  (string-append\n    (map sort-helper numbers)\n  \
    \  \" \"\n  )\n)\n", "  (let ((numbers (string-split numbers \" \")))\n    (let\
    \ ((numbers (map (lambda (n) (string-to-number n)) numbers)))\n      (let ((numbers\
    \ (map (lambda (n) (string-to-number n)) numbers)))\n        (let ((numbers (map\
    \ (lambda (n) (string-to-number n)) numbers)))\n          (let ((numbers (map\
    \ (lambda (n) (string-to-number n)) numbers)))\n            (let ((numbers (map\
    \ (lambda (n) (string-to-number n)) numbers)))\n              (let ((numbers (map\
    \ (lambda (n) (string-to-number n)) numbers)))\n                (let ((numbers\
    \ (map (lambda (n) (string-to-number n)) numbers)))\n                  (let ((numbers\
    \ (map (lambda (n) (string-to-number n)) numbers)))\n                    (let\
    \ ((numbers (map (lambda (n) (string-to-number n)) numbers)))\n              \
    \        (let ((numbers (map (lambda (n) (string-to-number n)) numbers)))\n  \
    \                      (let ((numbers (map (lambda (n) (string-to-number n)) numbers)))\n\
    \                          (let ((numbers (map (lambda (n) (string-to-number n))\
    \ numbers)))\n                            (let ((numbers (map (lambda (n) (string-to-number\
    \ n)) numbers)))\n                              (let ((numbers (map (lambda (n)\
    \ (string-to-number n)) numbers)))\n                                (let ((numbers\
    \ (map (lambda (n) (string-to-number n)) numbers)))\n                        \
    \          (let ((numbers (map (lambda (n) (string-to-number n)) numbers)))\n\
    \                                    (let ((numbers (map (lambda (n) (string-to-number\
    \ n)) numbers)))\n                                      (let ((numbers (map (lambda\
    \ (n) (string-to-number n)) numbers)))\n                                     \
    \   (let ((numbers (map (lambda (n) (string-to-number n)) numbers)))\n       \
    \                                   (let ((numbers (map (lambda (n) (string-to-number\
    \ n)) numbers)))\n                                            (", "  (define (sort-helper\
    \ n)\n    (if (eq? n numbers)\n      n\n      (if (eq? (car numbers) n)\n    \
    \    (sort-helper (cdr numbers))\n        (sort-helper (cdr (cdr numbers))))))\n\
    \  (sort-helper numbers))\n\n;; Input is a space-delimited string of numberals\
    \ from 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with\
    \ numbers sorted from largest to smallest\n;; >>> (sort_numbers \"three one five\"\
    )\n;; \"three five one\"", "  (define (sort-helper n)\n    (if (eq? n numbers)\n\
    \      n\n      (if (lt? n numbers)\n        (sort-helper (sub1 n))\n        (sort-helper\
    \ (add1 n)))))\n  (sort-helper (sub1 (string-length numbers))))\n\n;; Input is\
    \ a space-delimited string of numberals from 'zero' to 'nine'.\n;; Valid choices\
    \ are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and\
    \ 'nine'.\n;; Return the string with numbers sorted from largest to smallest\n\
    ;; >>> (sort_numbers \"three one five\")\n;; \"three five one\"", "  (define (sort-helper\
    \ l r)\n    (if (null? l)\n      (reverse r)\n      (if (null? r)\n        l\n\
    \        (sort-helper (car l) (cdr l) (cdr r)))))\n  (sort-helper numbers \"\"\
    )\n)\n\n;; Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    ;; Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n;; Return the string with numbers sorted from smallest\
    \ to largest\n;; >>> (sort_numbers \"three one five\")\n;; \"one three five\"",
  "  (define (sort_helper n)\n    (if (eq? n numbers)\n      n\n      (if (eq? (car\
    \ numbers) n)\n        (sort_helper (cdr numbers))\n        (sort_helper (cdr\
    \ (cdr numbers))))))\n  (sort_helper numbers))\n\n;; Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return\
    \ the string with numbers sorted from largest to smallest\n;; >>> (sort_numbers\
    \ \"three one five\")\n;; \"five three one\"", "  (let ((numbers (string-split\
    \ numbers \" \")))\n    (let ((numbers (map (lambda (x) (string-to-number x))\
    \ numbers)))\n      (string-join (sort numbers) \" \")))\n)\n\n;; Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return\
    \ the string with numbers sorted from largest to smallest\n;; >>> (sort_numbers\
    \ \"three one five\")\n;; \"three five one\"", "  (let ((numbers (string-split\
    \ numbers \" \")))\n    (let ((numbers (map (lambda (n) (string-to-number n))\
    \ numbers)))\n      (string-join (sort numbers) \" \")))\n)\n\n;; Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return\
    \ the string with numbers sorted from largest to smallest\n;; >>> (sort_numbers\
    \ \"three one five\")\n;; \"three five one\"", "  (define (sort-helper n)\n  \
    \  (if (eq? n numbers)\n      (return numbers)\n      (if (eq? (car numbers) n)\n\
    \        (sort-helper (cdr numbers))\n        (sort-helper (cdr (cdr numbers))))))\n\
    \  (sort-helper numbers))\n\n;; Input is a space-delimited string of numberals\
    \ from 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with\
    \ numbers sorted from largest to smallest\n;; >>> (sort_numbers \"three one five\"\
    )\n;; \"three five one\"", "  (let ((numbers (split-string numbers \" \")))\n\
    \    (let ((numbers (map (lambda (x) (string->number x)) numbers)))\n      (let\
    \ ((numbers (sort numbers)))\n        (let ((numbers (map (lambda (x) (string->number\
    \ x)) numbers)))\n          (join-strings numbers \" \"))))))\n\n;; Input is a\
    \ space-delimited string of numberals from 'zero' to 'nine'.\n;; Valid choices\
    \ are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and\
    \ 'nine'.\n;; Return the string with numbers sorted from largest to smallest\n\
    ;; >>> (sort_numbers \"three one five\")\n;; \"three five one\"", "  (let ((numbers\
    \ (string->list numbers)))\n    (if (empty? numbers)\n      \"\")\n    (let ((numbers\
    \ (string->list numbers)))\n      (let ((numbers (string->list numbers)))\n  \
    \      (if (empty? numbers)\n          \"\")\n        (let ((numbers (string->list\
    \ numbers)))\n          (if (empty? numbers)\n            \"\")\n          (let\
    \ ((numbers (string->list numbers)))\n            (if (empty? numbers)\n     \
    \         \"\")\n            (let ((numbers (string->list numbers)))\n       \
    \       (if (empty? numbers)\n                \"\")\n              (let ((numbers\
    \ (string->list numbers)))\n                (if (empty? numbers)\n           \
    \       \"\")\n                (let ((numbers (string->list numbers)))\n     \
    \             (if (empty? numbers)\n                    \"\")\n              \
    \    (let ((numbers (string->list numbers)))\n                    (if (empty?\
    \ numbers)\n                      \"\")\n                    (let ((numbers (string->list\
    \ numbers)))\n                      (if (empty? numbers)\n                   \
    \     \"\")\n                      (let ((numbers (string->list numbers)))\n \
    \                       (if (empty? numbers)\n                          \"\")\n\
    \                        (let ((numbers (string->list numbers)))\n           \
    \               (if (empty? numbers)\n                            \"\")\n    \
    \                      (let ((numbers (string->list numbers)))\n             \
    \               (if (empty? numbers)\n                              \"\")\n  \
    \                          (let ((numbers (string->list numbers)))\n         \
    \                     (if (empty? numbers)\n                                \"\
    \"\n                                (let ((numbers (string->list numbers)))\n\
    \                                  (if (empty? numbers)\n                    \
    \                \"\"\n                                    (let ((numbers (string->list\
    \ numbers)))\n                                      (if (empty? numbers)\n   \
    \                                     \"\"\n                                 \
    \       (let ((numbers (string->list numbers)))\n                            \
    \              (if (empty? numbers)\n                                        \
    \    \"\"\n                                            (let ((numbers (string->list\
    \ numbers)))\n                                              (if (empty? numbers)\n\
    \                                                \"\"\n                      \
    \                          (let ((numbers (string->list numbers)))\n         \
    \                                         (if (empty? numbers)\n             \
    \                                       \"\"\n", "  (define (sort-helper l r)\n\
    \    (cond\n      ((< l r) (return l))\n      ((= l r) (return r))\n      ((<\
    \ l) (return r))\n      (else (sort-helper (+ l 1) r))))\n  (sort-helper numbers\
    \ numbers))\n\n;; Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers sorted\
    \ from largest to smallest\n;; >>> (sort_numbers \"three one five\")\n;; \"three\
    \ five one\"", "  (define (sort_helper l r)\n    (cond\n      ((< l r) (return\
    \ l))\n      ((= l r) (return r))\n      ((< l) (return r))\n      (else (sort_helper\
    \ (+ l 1) r))))\n  (sort_helper numbers numbers))\n\n;; Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return\
    \ the string with numbers sorted from largest to smallest\n;; >>> (sort_numbers\
    \ \"three one five\")\n;; \"three five one\"", "  (let ((numbers (string-split\
    \ numbers \" \")))\n    (let ((numbers (map (lambda (n) (string-to-number n))\
    \ numbers)))\n      (let ((numbers (sort numbers)))\n        (string-join numbers\
    \ \" \"))))\n  )\n)\n", "  (define (sort-helper l r)\n    (cond\n      ((< l r)\
    \ (return l))\n      ((= l r) (return r))\n      ((< l) (return r))\n      (else\
    \ (sort-helper (+ l 1) r))))\n  (sort-helper numbers numbers))\n\n;; Input is\
    \ a space-delimited string of numberals from 'zero' to 'nine'.\n;; Valid choices\
    \ are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and\
    \ 'nine'.\n;; Return the string with numbers sorted from largest to smallest\n\
    ;; >>> (sort_numbers \"three one five\")\n;; \"three five one\"", "  (define (sort-helper\
    \ n)\n    (cond\n      [(< n 9) (return (string-append n \" \"))]\n      [(= n\
    \ 9) (return \"nine\")]\n      [(< n 8) (return (string-append n \" \"))]\n  \
    \    [(= n 8) (return \"eight\")]\n      [(< n 7) (return (string-append n \"\
    \ \"))]\n      [(= n 7) (return \"seven\")]\n      [(< n 6) (return (string-append\
    \ n \" \"))]\n      [(= n 6) (return \"six\")]\n      [(< n 5) (return (string-append\
    \ n \" \"))]\n      [(= n 5) (return \"five\")]\n      [(< n 4) (return (string-append\
    \ n \" \"))]\n      [(= n 4) (return \"four\")]\n      [(< n 3) (return (string-append\
    \ n \" \"))]\n      [(= n 3) (return \"three\")]\n      [(< n 2) (return (string-append\
    \ n \" \"))]\n      [(= n 2) (return \"two\")]\n      [(< n 1) (return (string-append\
    \ n \" \"))]\n      [(= n 1) (return \"one\")]\n      [else (return \"zero\")]\n\
    \    )\n  )\n  (string-join \" \" (map sort-helper numbers)))\n\n;; Input is a\
    \ space-delimited string of numberals from 'zero' to 'nine'.\n;; Valid choices\
    \ are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and\
    \ 'nine'.\n;; Return the string with numbers sorted from largest to smallest\n\
    ;; >>> (sort_numbers \"three one five\")\n;; \"three five one\"", "  (define (sort-helper\
    \ l r)\n    (if (eq? l r)\n      (number->string l)\n      (sort-helper (string->number\
    \ l) (string->number r)))))", "  (let ((numbers (string-split numbers \" \")))\n\
    \    (let ((numbers (string-split numbers \" \")))\n      (let ((numbers (string-split\
    \ numbers \" \")))\n        (let ((numbers (string-split numbers \" \")))\n  \
    \        (let ((numbers (string-split numbers \" \")))\n            (let ((numbers\
    \ (string-split numbers \" \")))\n              (let ((numbers (string-split numbers\
    \ \" \")))\n                (let ((numbers (string-split numbers \" \")))\n  \
    \                (let ((numbers (string-split numbers \" \")))\n             \
    \       (let ((numbers (string-split numbers \" \")))\n                      (let\
    \ ((numbers (string-split numbers \" \")))\n                        (let ((numbers\
    \ (string-split numbers \" \")))\n                          (let ((numbers (string-split\
    \ numbers \" \")))\n                            (let ((numbers (string-split numbers\
    \ \" \")))\n                              (let ((numbers (string-split numbers\
    \ \" \")))\n                                (let ((numbers (string-split numbers\
    \ \" \")))\n                                  (let ((numbers (string-split numbers\
    \ \" \")))\n                                    (let ((numbers (string-split numbers\
    \ \" \")))\n                                      (let ((numbers (string-split\
    \ numbers \" \")))\n                                        (let ((numbers (string-split\
    \ numbers \" \")))\n                                          (let ((numbers (string-split\
    \ numbers \" \")))\n                                            (let ((numbers\
    \ (string-split numbers \" \")))\n                                           \
    \   (let ((numbers (string-split numbers \" \")))\n                          \
    \                      (let ((numbers (string-split numbers \" \")))\n       \
    \                                           (let ((numbers (string-split numbers\
    \ \" \")))\n                                                    (let ((numbers\
    \ (string-split numbers \" \")))\n                                           \
    \           (let ((numbers (string-split numbers \" \")))\n                  \
    \                                      (let ((numbers (string-split numbers \"\
    \ \")))\n                                                          (let ((numbers\
    \ (string-split numbers \" \")))\n                                           \
    \                 (let ((numbers (string-split numbers \" \")))\n            \
    \                                                  (", "  (let ((numbers (string-split\
    \ numbers \" \")))\n    (let ((numbers (string-split numbers \" \")))\n      (let\
    \ ((numbers (string-split numbers \" \")))\n        (let ((numbers (string-split\
    \ numbers \" \")))\n          (let ((numbers (string-split numbers \" \")))\n\
    \            (let ((numbers (string-split numbers \" \")))\n              (let\
    \ ((numbers (string-split numbers \" \")))\n                (let ((numbers (string-split\
    \ numbers \" \")))\n                  (let ((numbers (string-split numbers \"\
    \ \")))\n                    (let ((numbers (string-split numbers \" \")))\n \
    \                     (let ((numbers (string-split numbers \" \")))\n        \
    \                (let ((numbers (string-split numbers \" \")))\n             \
    \             (let ((numbers (string-split numbers \" \")))\n                \
    \            (let ((numbers (string-split numbers \" \")))\n                 \
    \             (let ((numbers (string-split numbers \" \")))\n                \
    \                (let ((numbers (string-split numbers \" \")))\n             \
    \                     (let ((numbers (string-split numbers \" \")))\n        \
    \                            (let ((numbers (string-split numbers \" \")))\n \
    \                                     (let ((numbers (string-split numbers \"\
    \ \")))\n                                        (let ((numbers (string-split\
    \ numbers \" \")))\n                                          (let ((numbers (string-split\
    \ numbers \" \")))\n                                            (let ((numbers\
    \ (string-split numbers \" \")))\n                                           \
    \   (let ((numbers (string-split numbers \" \")))\n                          \
    \                      (let ((numbers (string-split numbers \" \")))\n       \
    \                                           (let ((numbers (string-split numbers\
    \ \" \")))\n                                                    (let ((numbers\
    \ (string-split numbers \" \")))\n                                           \
    \           (let ((numbers (string-split numbers \" \")))\n                  \
    \                                      (let ((numbers (string-split numbers \"\
    \ \")))\n                                                          (let ((numbers\
    \ (string-split numbers \" \")))\n                                           \
    \                 (let ((numbers (string-split numbers \" \")))\n            \
    \                                                  (", "  (let ((numbers (string-split\
    \ numbers \" \")))\n    (let ((numbers (map (lambda (n) (string-replace n \" \"\
    \ \"\")) numbers)))\n      (string-join (sort numbers) \" \"))))\n\n;; Input is\
    \ a space-delimited string of numberals from 'zero' to 'nine'.\n;; Valid choices\
    \ are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and\
    \ 'nine'.\n;; Return the string with numbers sorted from largest to smallest\n\
    ;; >>> (sort_numbers \"three one five\")\n;; \"three five one\"", "  (define (sort-helper\
    \ l r)\n    (if (eq? l r)\n      (number->string (car l))\n      (sort-helper\
    \ (cdr l) (cdr r))))\n  (sort-helper numbers \"\")\n)\n", "  (define (sort-helper\
    \ l r)\n    (cond\n      ((< l r) (return l))\n      ((= l r) (return r))\n  \
    \    ((< l) (return r))\n      (else (sort-helper (+ l 1) r))))\n  (sort-helper\
    \ numbers numbers))\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from largest to smallest\n;; >>> (sort_numbers \"three one five\")\n\
    ;; \"three five one\"", "  (define (sort_helper n)\n    (if (eq? n numbers)\n\
    \      n\n      (if (eq? (car numbers) n)\n        (sort_helper (cdr numbers))\n\
    \        (sort_helper (car numbers))))))\n", "  (define (sort-helper l r)\n  \
    \  (if (null? l)\n      (reverse r)\n      (if (null? r)\n        l\n        (sort-helper\
    \ (car l) (cdr l) (cdr r)))))\n  (sort-helper numbers \"\")\n)\n\n;; Input is\
    \ a space-delimited string of numberals from 'zero' to 'nine'.\n;; Valid choices\
    \ are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and\
    \ 'nine'.\n;; Return the string with numbers sorted from largest to smallest\n\
    ;; >>> (sort_numbers \"three one five\")\n;; \"three five one\"", "  (define (sort-helper\
    \ l r)\n    (cond\n      ((= l 'zero) (return 'zero))\n      ((= l 'one) (return\
    \ 'one))\n      ((= l 'two) (return 'two))\n      ((= l 'three) (return 'three))\n\
    \      ((= l 'four) (return 'four))\n      ((= l 'five) (return 'five))\n    \
    \  ((= l 'six) (return 'six))\n      ((= l 'seven) (return 'seven))\n      ((=\
    \ l 'eight) (return 'eight))\n      ((= l 'nine) (return 'nine))\n      (else\
    \ (error \"Invalid number: \" l))))\n  (sort-helper numbers numbers)\n)\n\n;;\
    \ Input is a space-delimited string of numberals from 'zero' to 'nine'.\n;; Valid\
    \ choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight'\
    \ and 'nine'.\n;; Return the string with numbers sorted from largest to smallest\n\
    ;; >>> (sort_numbers \"three one five\")\n;; \"three five one\"", "  (let ((numbers\
    \ (string-split numbers \" \")))\n    (let ((numbers (map (lambda (n) (string-replace\
    \ n \" \" \"\")) numbers)))\n      (let ((numbers (map (lambda (n) (string-replace\
    \ n \" \" \"\")) numbers)))\n        (let ((numbers (map (lambda (n) (string-replace\
    \ n \" \" \"\")) numbers)))\n          (let ((numbers (map (lambda (n) (string-replace\
    \ n \" \" \"\")) numbers)))\n            (let ((numbers (map (lambda (n) (string-replace\
    \ n \" \" \"\")) numbers)))\n              (let ((numbers (map (lambda (n) (string-replace\
    \ n \" \" \"\")) numbers)))\n                (let ((numbers (map (lambda (n) (string-replace\
    \ n \" \" \"\")) numbers)))\n                  (let ((numbers (map (lambda (n)\
    \ (string-replace n \" \" \"\")) numbers)))\n                    (let ((numbers\
    \ (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n               \
    \       (let ((numbers (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n\
    \                        (let ((numbers (map (lambda (n) (string-replace n \"\
    \ \" \"\")) numbers)))\n                          (let ((numbers (map (lambda\
    \ (n) (string-replace n \" \" \"\")) numbers)))\n                            (let\
    \ ((numbers (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n     \
    \                         (let ((numbers (map (lambda (n) (string-replace n \"\
    \ \" \"\")) numbers)))\n                                (let ((numbers (map (lambda\
    \ (n) (string-replace n \" \" \"\")) numbers)))\n                            \
    \      (let ((numbers (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n\
    \                                    (let ((numbers (map (lambda (n) (string-replace\
    \ n \" \" \"\")) numbers)))\n                                      (let ((numbers\
    \ (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n               \
    \                         (let ((numbers (map (lambda (n) (string-replace n \"\
    \ \" \"\")) numbers)))\n                                          (let ((numbers\
    \ (map (lambda", "  (let ((numbers (string-split numbers \" \")))\n    (let ((numbers\
    \ (map (lambda (n) (string-to-number n)) numbers)))\n      (string-join (sort\
    \ numbers) \" \")))\n)\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from largest to smallest\n;; >>> (sort_numbers \"three one five\")\n\
    ;; \"three five one\"", "  (define (sort-helper n)\n    (cond\n      [(< n 9)\
    \ (return (string-append n \" \"))]\n      [(= n 9) (return \"nine\")]\n     \
    \ [(< n 8) (return (string-append n \" \"))]\n      [(= n 8) (return \"eight\"\
    )]\n      [(< n 7) (return (string-append n \" \"))]\n      [(= n 7) (return \"\
    seven\")]\n      [(< n 6) (return (string-append n \" \"))]\n      [(= n 6) (return\
    \ \"six\")]\n      [(< n 5) (return (string-append n \" \"))]\n      [(= n 5)\
    \ (return \"five\")]\n      [(< n 4) (return (string-append n \" \"))]\n     \
    \ [(= n 4) (return \"four\")]\n      [(< n 3) (return (string-append n \" \"))]\n\
    \      [(= n 3) (return \"three\")]\n      [(< n 2) (return (string-append n \"\
    \ \"))]\n      [(= n 2) (return \"two\")]\n      [(< n 1) (return (string-append\
    \ n \" \"))]\n      [(= n 1) (return \"one\")]\n      [else (return \"zero\")]\n\
    \    )\n  )\n  (string-join \" \" (map sort-helper numbers)))\n\n;; Input is a\
    \ space-delimited string of numberals from 'zero' to 'nine'.\n;; Valid choices\
    \ are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and\
    \ 'nine'.\n;; Return the string with numbers sorted from largest to smallest\n\
    ;; >>> (sort_numbers \"three one five\")\n;; \"three five one\"", "  (let ((numbers\
    \ (string-split numbers \" \")))\n    (let ((numbers (map (lambda (x) (string-to-number\
    \ x)) numbers)))\n      (string-join (sort numbers) \" \"))))\n\n;; Input is a\
    \ space-delimited string of numberals from 'zero' to 'nine'.\n;; Valid choices\
    \ are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and\
    \ 'nine'.\n;; Return the string with numbers sorted from largest to smallest\n\
    ;; >>> (sort_numbers \"three one five\")\n;; \"three five one\"", "  (let ((numbers\
    \ (split-string numbers \" \")))\n    (let ((numbers (map (lambda (x) (string->number\
    \ x)) numbers)))\n      (sort numbers)\n      (join-strings numbers \" \")))\n\
    )\n\n;; Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    ;; Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n;; Return the string with numbers sorted from largest to\
    \ smallest\n;; >>> (sort_numbers \"three one five\")\n;; \"three five one\"",
  "  (define (sort-helper l r)\n    (cond\n      ((< l r) (return l))\n      ((= l\
    \ r) (return r))\n      ((< l) (return r))\n      (else (sort-helper (+ l 1) r))))\n\
    \  (sort-helper numbers numbers))\n\n;; Input is a space-delimited string of numberals\
    \ from 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with\
    \ numbers sorted from largest to smallest\n;; >>> (sort_numbers \"three one five\"\
    )\n;; \"three five one\"", "  (define (sort-helper l r)\n    (if (eq? l r)\n \
    \     (number->string l)\n      (sort-helper (number->string l) (number->string\
    \ r))\n    )\n  )\n  (sort-helper numbers numbers)\n)\n", "  (define (sort-helper\
    \ l r)\n    (if (eq? l r)\n      (number->string (car l))\n      (sort-helper\
    \ (cdr l) (cdr r))))\n  (sort-helper numbers \"\")\n)\n\n;; Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return\
    \ the string with numbers sorted from largest to smallest\n;; >>> (sort_numbers\
    \ \"three one five\")\n;; \"three five one\"", "  (define (sort-helper l r)\n\
    \    (if (eq? l r)\n      (number->string l)\n      (sort-helper (number->string\
    \ l) (number->string r))\n    )\n  )\n  (sort-helper numbers numbers)\n)\n\n;;\
    \ Input is a space-delimited string of numberals from 'zero' to 'nine'.\n;; Valid\
    \ choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight'\
    \ and 'nine'.\n;; Return the string with numbers sorted from smallest to largest\n\
    ;; >>> (sort_numbers \"three one five\")\n;; \"one three five\"", "  (define (sort-helper\
    \ l r)\n    (cond\n      ((< l r) (return l))\n      ((= l r) (return r))\n  \
    \    ((< l) (return r))\n      (else (sort-helper (+ l 1) r))))\n  (sort-helper\
    \ numbers numbers))\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from largest to smallest\n;; >>> (sort_numbers \"three one five\")\n\
    ;; \"three five one\"", "  (define (sort-helper n)\n    (if (eq? n numbers)\n\
    \      n\n      (if (eq? (car numbers) n)\n        (sort-helper (cdr numbers))\n\
    \        (sort-helper (cdr (cdr numbers))))))\n  (sort-helper numbers))\n\n;;\
    \ Input is a space-delimited string of numberals from 'zero' to 'nine'.\n;; Valid\
    \ choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight'\
    \ and 'nine'.\n;; Return the string with numbers sorted from largest to smallest\n\
    ;; >>> (sort_numbers \"three one five\")\n;; \"three five one\"", "  (define (sort_helper\
    \ n)\n    (if (eq? n numbers)\n      n\n      (if (lt? n numbers)\n        (sort_helper\
    \ (sub1 n))\n        (sort_helper (add1 n))))))\n", "  (let ((numbers (string-split\
    \ numbers \" \")))\n    (let ((numbers (string-map (lambda (x) (string-to-number\
    \ x)) numbers)))\n      (string-join (sort numbers) \" \")))\n)\n\n;; Input is\
    \ a space-delimited string of numberals from 'zero' to 'nine'.\n;; Valid choices\
    \ are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and\
    \ 'nine'.\n;; Return the string with numbers sorted from largest to smallest\n\
    ;; >>> (sort_numbers \"three one five\")\n;; \"three five one\"", "  (define (sort-helper\
    \ n)\n    (if (eq? n numbers)\n      n\n      (if (eq? (car numbers) n)\n    \
    \    (sort-helper (cdr numbers))\n        (sort-helper (cdr (cdr numbers))))))\n\
    \  (sort-helper numbers))\n\n;; Input is a space-delimited string of numberals\
    \ from 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with\
    \ numbers sorted from largest to smallest\n;; >>> (sort_numbers \"three one five\"\
    )\n;; \"three five one\"", "  (define (sort-helper l r)\n    (if (eq? l r)\n \
    \     (number->string l)\n      (sort-helper (number->string l) (number->string\
    \ r))\n    )\n  )\n  (sort-helper numbers numbers)\n)\n", "  (let ((numbers (string-split\
    \ numbers \" \")))\n    (let ((numbers (map (lambda (x) (string-to-number x))\
    \ numbers)))\n      (string-join (sort numbers) \" \"))))\n\n;; Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return\
    \ the string with numbers sorted from largest to smallest\n;; >>> (sort_numbers\
    \ \"three one five\")\n;; \"three five one\"", "  (define (sort-helper l r)\n\
    \    (cond\n      ((< l r) (return l))\n      ((= l r) (return r))\n      ((<\
    \ l) (return r))\n      (else (sort-helper (+ l 1) r))))\n  (sort-helper numbers\
    \ numbers))\n\n;; Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers sorted\
    \ from largest to smallest\n;; >>> (sort_numbers \"three one five\")\n;; \"three\
    \ five one\"", "  (let ((numbers (split-string numbers \" \")))\n    (let ((numbers\
    \ (map (lambda (n) (string->number n)) numbers)))\n      (let ((numbers (sort\
    \ numbers)))\n        (join-strings numbers \" \"))))\n  )\n)\n", "  (let ((numbers\
    \ (string-split numbers \" \")))\n    (let ((numbers (map (lambda (x) (string-to-number\
    \ x)) numbers)))\n      (string-join (sort numbers) \" \"))))\n\n;; Input is a\
    \ space-delimited string of numberals from 'zero' to 'nine'.\n;; Valid choices\
    \ are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and\
    \ 'nine'.\n;; Return the string with numbers sorted from largest to smallest\n\
    ;; >>> (sort_numbers \"three one five\")\n;; \"three five one\"", "  (let ((numbers\
    \ (string-split numbers \" \")))\n    (let ((numbers (map (lambda (x) (string-to-number\
    \ x)) numbers)))\n      (let ((numbers (sort numbers)))\n        (string-join\
    \ numbers \" \"))))\n  )\n)\n", "  (define (sort-helper l r)\n    (if (eq? l r)\n\
    \      (number->string (car l))\n      (sort-helper (cdr l) (cdr r))))\n  (sort-helper\
    \ numbers \"\")\n)\n\n;; Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers sorted\
    \ from largest to smallest\n;; >>> (sort_numbers \"three one five\")\n;; \"three\
    \ five one\"", "  (define (sort-helper l r)\n    (cond\n      ((< l r) (return\
    \ l))\n      ((= l r) (return r))\n      ((< l) (return r))\n      (else (sort-helper\
    \ (+ l 1) r))))\n  (sort-helper numbers numbers))\n\n;; Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return\
    \ the string with numbers sorted from largest to smallest\n;; >>> (sort_numbers\
    \ \"three one five\")\n;; \"three five one\"", "  (define (sort-helper n)\n  \
    \  (cond\n      [(< n 9) (return (string-append (string-append \"one \") (string-append\
    \ (string-append \"two \") (string-append \"three \") (string-append \"four \"\
    ) (string-append \"five \") (string-append \"six \") (string-append \"seven \"\
    ) (string-append \"eight \") (string-append \"nine \"))) (return (string-append\
    \ \"zero \"))]\n      [else (return (string-append (string-append \"zero \") (string-append\
    \ \"one \") (string-append \"two \") (string-append \"three \") (string-append\
    \ \"four \") (string-append \"five \") (string-append \"six \") (string-append\
    \ \"seven \") (string-append \"eight \") (string-append \"nine \")))]))\n  (sort-helper\
    \ (string->number numbers))\n)\n", "  (let ((numbers (string-split numbers \"\
    \ \")))\n    (let ((numbers (map (lambda (x) (string-to-number x)) numbers)))\n\
    \      (string-join (sort numbers) \" \"))))\n\n;; Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return\
    \ the string with numbers sorted from largest to smallest\n;; >>> (sort_numbers\
    \ \"three one five\")\n;; \"three five one\"", "  (let ((numbers (string-split\
    \ numbers \" \")))\n    (let ((numbers (map (lambda (n) (string-replace n \" \"\
    \ \"\")) numbers)))\n      (let ((numbers (map (lambda (n) (string-replace n \"\
    \ \" \"\")) numbers)))\n        (let ((numbers (map (lambda (n) (string-replace\
    \ n \" \" \"\")) numbers)))\n          (let ((numbers (map (lambda (n) (string-replace\
    \ n \" \" \"\")) numbers)))\n            (let ((numbers (map (lambda (n) (string-replace\
    \ n \" \" \"\")) numbers)))\n              (let ((numbers (map (lambda (n) (string-replace\
    \ n \" \" \"\")) numbers)))\n                (let ((numbers (map (lambda (n) (string-replace\
    \ n \" \" \"\")) numbers)))\n                  (let ((numbers (map (lambda (n)\
    \ (string-replace n \" \" \"\")) numbers)))\n                    (let ((numbers\
    \ (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n               \
    \       (let ((numbers (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n\
    \                        (let ((numbers (map (lambda (n) (string-replace n \"\
    \ \" \"\")) numbers)))\n                          (let ((numbers (map (lambda\
    \ (n) (string-replace n \" \" \"\")) numbers)))\n                            (let\
    \ ((numbers (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n     \
    \                         (let ((numbers (map (lambda (n) (string-replace n \"\
    \ \" \"\")) numbers)))\n                                (let ((numbers (map (lambda\
    \ (n) (string-replace n \" \" \"\")) numbers)))\n                            \
    \      (let ((numbers (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n\
    \                                    (let ((numbers (map (lambda (n) (string-replace\
    \ n \" \" \"\")) numbers)))\n                                      (let ((numbers\
    \ (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n               \
    \                         (let ((numbers (map (lambda (n) (string-replace n \"\
    \ \" \"\")) numbers)))\n                                          (let ((numbers\
    \ (map (lambda", "  (let ((numbers (string->list numbers)))\n    (let ((numbers\
    \ (string->list numbers)))\n      (let ((numbers (string->list numbers)))\n  \
    \      (let ((numbers (string->list numbers)))\n          (let ((numbers (string->list\
    \ numbers)))\n            (let ((numbers (string->list numbers)))\n          \
    \    (let ((numbers (string->list numbers)))\n                (let ((numbers (string->list\
    \ numbers)))\n                  (let ((numbers (string->list numbers)))\n    \
    \                (let ((numbers (string->list numbers)))\n                   \
    \   (let ((numbers (string->list numbers)))\n                        (let ((numbers\
    \ (string->list numbers)))\n                          (let ((numbers (string->list\
    \ numbers)))\n                            (let ((numbers (string->list numbers)))\n\
    \                              (let ((numbers (string->list numbers)))\n     \
    \                           (let ((numbers (string->list numbers)))\n        \
    \                          (let ((numbers (string->list numbers)))\n         \
    \                           (let ((numbers (string->list numbers)))\n        \
    \                              (let ((numbers (string->list numbers)))\n     \
    \                                   (let ((numbers (string->list numbers)))\n\
    \                                          (let ((numbers (string->list numbers)))\n\
    \                                            (let ((numbers (string->list numbers)))\n\
    \                                              (let ((numbers (string->list numbers)))\n\
    \                                                (let ((numbers (string->list\
    \ numbers)))\n                                                  (let ((numbers\
    \ (string->list numbers)))\n                                                 \
    \   (let ((numbers (string->list numbers)))\n                                \
    \                      (let ((numbers (string->list numbers)))\n             \
    \                                           (let ((numbers (string->list numbers)))\n\
    \                                                          (let ((numbers (string->list\
    \ numbers)))\n                                                            (let\
    \ ((numbers (string->list numbers)))\n                                       \
    \                       (let ((numbers (string->list numbers)))\n            \
    \                                                    (let ((numbers (string->list\
    \ numbers)))\n                                                               \
    \   (let ((numbers (string->list numbers)))\n                                \
    \                                    (let ((numbers (string->list numbers)))\n\
    \                               ", "  (define (sort-helper l r)\n    (if (eq?\
    \ l r)\n      (number->string (string->number l))\n      (sort-helper (string->number\
    \ l) (string->number r))\n      )\n    )\n  (sort-helper numbers numbers)\n  )\n\
    \n;; Input is a space-delimited string of numberals from 'zero' to 'nine'.\n;;\
    \ Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n;; Return the string with numbers sorted from largest to\
    \ smallest\n;; >>> (sort_numbers \"three one five\")\n;; \"three five one\"",
  "  (define (sort-helper l r)\n    (cond\n      ((< l r) (return l))\n      ((= l\
    \ r) (return r))\n      ((< l) (return r))\n      (else (sort-helper (+ l 1) r))))\n\
    \  (sort-helper numbers numbers))\n\n;; Input is a space-delimited string of numberals\
    \ from 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with\
    \ numbers sorted from largest to smallest\n;; >>> (sort_numbers \"three one five\"\
    )\n;; \"three five one\"", "  (define (sort-helper n)\n    (if (eq? n numbers)\n\
    \      n\n      (if (lt? n numbers)\n        (sort-helper (sub1 n))\n        (sort-helper\
    \ (add1 n)))))\n  (sort-helper numbers))\n\n;; Input is a space-delimited string\
    \ of numberals from 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two',\
    \ 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the\
    \ string with numbers sorted from largest to smallest\n;; >>> (sort_numbers \"\
    three one five\")\n;; \"three five one\"", "  (define (sort_helper n)\n    (if\
    \ (eq? n numbers)\n      n\n      (if (eq? (car numbers) n)\n        (sort_helper\
    \ (cdr numbers))\n        (sort_helper (cdr (cdr numbers))))))\n  (sort_helper\
    \ numbers))\n\n;; Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers sorted\
    \ from largest to smallest\n;; >>> (sort_numbers \"three one five\")\n;; \"three\
    \ five one\"", "  (let ((numbers (string->list numbers)))\n    (let ((numbers\
    \ (string->list numbers)))\n      (let ((numbers (string->list numbers)))\n  \
    \      (let ((numbers (string->list numbers)))\n          (let ((numbers (string->list\
    \ numbers)))\n            (let ((numbers (string->list numbers)))\n          \
    \    (let ((numbers (string->list numbers)))\n                (let ((numbers (string->list\
    \ numbers)))\n                  (let ((numbers (string->list numbers)))\n    \
    \                (let ((numbers (string->list numbers)))\n                   \
    \   (let ((numbers (string->list numbers)))\n                        (let ((numbers\
    \ (string->list numbers)))\n                          (let ((numbers (string->list\
    \ numbers)))\n                            (let ((numbers (string->list numbers)))\n\
    \                              (let ((numbers (string->list numbers)))\n     \
    \                           (let ((numbers (string->list numbers)))\n        \
    \                          (let ((numbers (string->list numbers)))\n         \
    \                           (let ((numbers (string->list numbers)))\n        \
    \                              (let ((numbers (string->list numbers)))\n     \
    \                                   (let ((numbers (string->list numbers)))\n\
    \                                          (let ((numbers (string->list numbers)))\n\
    \                                            (let ((numbers (string->list numbers)))\n\
    \                                              (let ((numbers (string->list numbers)))\n\
    \                                                (let ((numbers (string->list\
    \ numbers)))\n                                                  (let ((numbers\
    \ (string->list numbers)))\n                                                 \
    \   (let ((numbers (string->list numbers)))\n                                \
    \                      (let ((numbers (string->list numbers)))\n             \
    \                                           (let ((numbers (string->list numbers)))\n\
    \                                                          (let ((numbers (string->list\
    \ numbers)))\n                                                            (let\
    \ ((numbers (string->list numbers)))\n                                       \
    \                       (let ((numbers (string->list numbers)))\n            \
    \                                                    (let ((numbers (string->list\
    \ numbers)))\n                                                               \
    \   (let ((numbers (string->list numbers)))\n                                \
    \                                    (let ((numbers (string->list numbers)))\n\
    \                               ", "  (define (sort-helper l r)\n    (cond\n \
    \     ((< l r) (return l))\n      ((= l r) (return r))\n      ((< l) (return r))\n\
    \      ((>= l) (return l))\n      (else (sort-helper (+ l 1) (- r 1))))\n    (sort-helper\
    \ numbers numbers)))\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from largest to smallest\n;; >>> (sort_numbers \"three one five\")\n\
    ;; \"three five one\"", "  (let ((numbers (string-split numbers \" \")))\n   \
    \ (let ((numbers (map (lambda (x) (string-to-number x)) numbers)))\n      (sort\
    \ numbers)\n      (string-join \" \" numbers)))\n  )\n)\n", "  (let ((numbers\
    \ (string-split numbers \" \")))\n    (let ((numbers (map (lambda (x) (string-to-number\
    \ x)) numbers)))\n      (let ((numbers (sort numbers)))\n        (string-join\
    \ numbers \" \"))))\n)\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from largest to smallest\n;; >>> (sort_numbers \"three one five\")\n\
    ;; \"three five one\"", "  (define (sort-helper l r)\n    (if (eq? l r)\n    \
    \  (number->string (car l))\n      (sort-helper (cdr l) (cdr r))))\n  (sort-helper\
    \ numbers \"\")\n)\n\n;; Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers sorted\
    \ from largest to smallest\n;; >>> (sort_numbers \"three one five\")\n;; \"three\
    \ five one\"", "  (let ((numbers (string->list numbers)))\n    (if (empty? numbers)\n\
    \      \"\")\n    (let ((numbers (string->list numbers)))\n      (if (empty? numbers)\n\
    \        \"\")\n      (let ((numbers (string->list numbers)))\n        (if (empty?\
    \ numbers)\n          \"\")\n        (let ((numbers (string->list numbers)))\n\
    \          (if (empty? numbers)\n            \"\")\n          (let ((numbers (string->list\
    \ numbers)))\n            (if (empty? numbers)\n              \"\")\n        \
    \    (let ((numbers (string->list numbers)))\n              (if (empty? numbers)\n\
    \                \"\")\n              (let ((numbers (string->list numbers)))\n\
    \                (if (empty? numbers)\n                  \"\")\n             \
    \   (let ((numbers (string->list numbers)))\n                  (if (empty? numbers)\n\
    \                    \"\")\n                  (let ((numbers (string->list numbers)))\n\
    \                    (if (empty? numbers)\n                      \"\")\n     \
    \               (let ((numbers (string->list numbers)))\n                    \
    \  (if (empty? numbers)\n                        \"\")\n                     \
    \ (let ((numbers (string->list numbers)))\n                        (if (empty?\
    \ numbers)\n                          \"\")\n                        (let ((numbers\
    \ (string->list numbers)))\n                          (if (empty? numbers)\n \
    \                           \"\")\n                          (let ((numbers (string->list\
    \ numbers)))\n                            (if (empty? numbers)\n             \
    \                 \"\")\n                            (let ((numbers (string->list\
    \ numbers)))\n                              (if (empty? numbers)\n           \
    \                     \"\"\n                                (let ((numbers (string->list\
    \ numbers)))\n                                  (if (empty? numbers)\n       \
    \                             \"\"\n                                    (let ((numbers\
    \ (string->list numbers)))\n                                      (if (empty?\
    \ numbers)\n                                        \"\"\n                   \
    \                     (let ((numbers (string->list numbers)))\n              \
    \                            (if (empty? numbers)\n                          \
    \                  \"\"\n                                            (let ((numbers\
    \ (string->list numbers)))\n                                              (if\
    \ (empty? numbers)\n                                                \"\"\n   \
    \                                             (let ((numbers (string->list numbers)))\n\
    \                                                  (if", "  (let ((numbers (string->list\
    \ numbers)))\n    (let ((numbers (string->list numbers)))\n      (let ((numbers\
    \ (string->list numbers)))\n        (let ((numbers (string->list numbers)))\n\
    \          (let ((numbers (string->list numbers)))\n            (let ((numbers\
    \ (string->list numbers)))\n              (let ((numbers (string->list numbers)))\n\
    \                (let ((numbers (string->list numbers)))\n                  (let\
    \ ((numbers (string->list numbers)))\n                    (let ((numbers (string->list\
    \ numbers)))\n                      (let ((numbers (string->list numbers)))\n\
    \                        (let ((numbers (string->list numbers)))\n           \
    \               (let ((numbers (string->list numbers)))\n                    \
    \        (let ((numbers (string->list numbers)))\n                           \
    \   (let ((numbers (string->list numbers)))\n                                (let\
    \ ((numbers (string->list numbers)))\n                                  (let ((numbers\
    \ (string->list numbers)))\n                                    (let ((numbers\
    \ (string->list numbers)))\n                                      (let ((numbers\
    \ (string->list numbers)))\n                                        (let ((numbers\
    \ (string->list numbers)))\n                                          (let ((numbers\
    \ (string->list numbers)))\n                                            (let ((numbers\
    \ (string->list numbers)))\n                                              (let\
    \ ((numbers (string->list numbers)))\n                                       \
    \         (let ((numbers (string->list numbers)))\n                          \
    \                        (let ((numbers (string->list numbers)))\n           \
    \                                         (let ((numbers (string->list numbers)))\n\
    \                                                      (let ((numbers (string->list\
    \ numbers)))\n                                                        (let ((numbers\
    \ (string->list numbers)))\n                                                 \
    \         (let ((numbers (string->list numbers)))\n                          \
    \                                  (let ((numbers (string->list numbers)))\n \
    \                                                             (let ((numbers (string->list\
    \ numbers)))\n                                                               \
    \ (let ((numbers (string->list numbers)))\n                                  \
    \                                (let ((numbers (string->list numbers)))\n   \
    \                                                                 (let ((numbers\
    \ (string->list numbers)))\n                               ", "  (define (sort-helper\
    \ n)\n    (if (eq? n numbers)\n      n\n      (if (lt? n numbers)\n        (sort-helper\
    \ (sub1 n))\n        (sort-helper (add1 n)))))\n  (sort-helper numbers))\n\n;;\
    \ Input is a space-delimited string of numberals from 'zero' to 'nine'.\n;; Valid\
    \ choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight'\
    \ and 'nine'.\n;; Return the string with numbers sorted from largest to smallest\n\
    ;; >>> (sort_numbers \"three one five\")\n;; \"three five one\"", "  (define (sort-helper\
    \ l r)\n    (if (eq? l r)\n      (number->string (car l))\n      (sort-helper\
    \ (cdr l) (cdr r))))\n  (sort-helper numbers \"\")\n)\n\n;; Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return\
    \ the string with numbers sorted from largest to smallest\n;; >>> (sort_numbers\
    \ \"three one five\")\n;; \"three five one\"", "  (define (sort-helper l r)\n\
    \    (if (eq? l r)\n      (number->string l)\n      (sort-helper (string->number\
    \ l) (string->number r)))))\n", "  (let ((numbers (string-split numbers \" \"\
    )))\n    (let ((numbers (map (lambda (x) (string-to-number x)) numbers)))\n  \
    \    (string-join (sort numbers) \" \")))\n)\n\n;; Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return\
    \ the string with numbers sorted from largest to smallest\n;; >>> (sort_numbers\
    \ \"three one five\")\n;; \"three five one\"", "  (let ((numbers (string-split\
    \ numbers \" \")))\n    (let ((numbers (map (lambda (n) (string-replace n \" \"\
    \ \"\")) numbers)))\n      (let ((numbers (map (lambda (n) (string-replace n \"\
    \ \" \"\")) numbers)))\n        (let ((numbers (map (lambda (n) (string-replace\
    \ n \" \" \"\")) numbers)))\n          (let ((numbers (map (lambda (n) (string-replace\
    \ n \" \" \"\")) numbers)))\n            (let ((numbers (map (lambda (n) (string-replace\
    \ n \" \" \"\")) numbers)))\n              (let ((numbers (map (lambda (n) (string-replace\
    \ n \" \" \"\")) numbers)))\n                (let ((numbers (map (lambda (n) (string-replace\
    \ n \" \" \"\")) numbers)))\n                  (let ((numbers (map (lambda (n)\
    \ (string-replace n \" \" \"\")) numbers)))\n                    (let ((numbers\
    \ (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n               \
    \       (let ((numbers (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n\
    \                        (let ((numbers (map (lambda (n) (string-replace n \"\
    \ \" \"\")) numbers)))\n                          (let ((numbers (map (lambda\
    \ (n) (string-replace n \" \" \"\")) numbers)))\n                            (let\
    \ ((numbers (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n     \
    \                         (let ((numbers (map (lambda (n) (string-replace n \"\
    \ \" \"\")) numbers)))\n                                (let ((numbers (map (lambda\
    \ (n) (string-replace n \" \" \"\")) numbers)))\n                            \
    \      (let ((numbers (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n\
    \                                    (let ((numbers (map (lambda (n) (string-replace\
    \ n \" \" \"\")) numbers)))\n                                      (let ((numbers\
    \ (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n               \
    \                         (let ((numbers (map (lambda (n) (string-replace n \"\
    \ \" \"\")) numbers)))\n                                          (let ((numbers\
    \ (map (lambda", "  (define (sort-helper l r)\n    (if (eq? l r)\n      (number->string\
    \ l)\n      (sort-helper (number->string l) (number->string r)))))", "  (define\
    \ (sort-helper n)\n    (if (eq? n numbers)\n      n\n      (if (lt? n numbers)\n\
    \        (sort-helper (sub1 n))\n        (sort-helper (add1 n)))))\n  (sort-helper\
    \ (sub1 (string-to-number numbers))))\n\n;; Input is a space-delimited string\
    \ of numberals from 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two',\
    \ 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the\
    \ string with numbers sorted from largest to smallest\n;; >>> (sort_numbers \"\
    three one five\")\n;; \"three five one\"", "  (define (sort-helper l r)\n    (if\
    \ (eq? l r)\n      (number->string l)\n      (sort-helper (string->number l) (string->number\
    \ r)))))", "  (define (sort-helper n)\n    (if (eq? n numbers)\n      (return\
    \ numbers)\n      (if (eq? (car numbers) n)\n        (sort-helper (cdr numbers))\n\
    \        (sort-helper (cdr (cdr numbers))))))\n  (sort-helper numbers))\n\n;;\
    \ Input is a string of words.\n;; Return the string with words sorted alphabetically.\n\
    ;; >>> (sort_words \"one two three\")\n;; \"one two three\"", "  (define (sort_helper\
    \ n)\n    (if (eq? n numbers)\n      n\n      (if (eq? (car numbers) n)\n    \
    \    (sort_helper (cdr numbers))\n        (sort_helper (cdr (cdr numbers))))))\n\
    \  (sort_helper numbers))\n\n;; Input is a space-delimited string of numberals\
    \ from 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with\
    \ numbers sorted from largest to smallest\n;; >>> (sort_numbers \"three one five\"\
    )\n;; \"three five one\"", "  (define (sort_helper l r)\n    (if (eq? l r)\n \
    \     (number->string (car l))\n      (sort_helper (cdr l) (cdr r))))\n  (sort_helper\
    \ numbers \"\")\n)\n", "  (define (sort_helper n)\n    (if (eq? n numbers)\n \
    \     n\n      (sort_helper (sub1 n))\n      (sort_helper (add1 n))))\n  (sort_helper\
    \ (zero)))\n\n;; Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers sorted\
    \ from largest to smallest\n;; >>> (sort_numbers \"three one five\")\n;; \"five\
    \ three one\"", "  (let ((numbers (string-split numbers \" \")))\n    (if (empty?\
    \ numbers)\n      \"\")\n    (let ((numbers (string-split numbers \" \")))\n \
    \     (let ((numbers (string-split numbers \" \")))\n        (if (empty? numbers)\n\
    \          \"\")\n        (let ((numbers (string-split numbers \" \")))\n    \
    \      (if (empty? numbers)\n            \"\")\n          (let ((numbers (string-split\
    \ numbers \" \")))\n            (if (empty? numbers)\n              \"\")\n  \
    \          (let ((numbers (string-split numbers \" \")))\n              (if (empty?\
    \ numbers)\n                \"\")\n              (let ((numbers (string-split\
    \ numbers \" \")))\n                (if (empty? numbers)\n                  \"\
    \")\n                (let ((numbers (string-split numbers \" \")))\n         \
    \         (if (empty? numbers)\n                    \"\")\n                  (let\
    \ ((numbers (string-split numbers \" \")))\n                    (if (empty? numbers)\n\
    \                      \"\")\n                    (let ((numbers (string-split\
    \ numbers \" \")))\n                      (if (empty? numbers)\n             \
    \           \"\")\n                      (let ((numbers (string-split numbers\
    \ \" \")))\n                        (if (empty? numbers)\n                   \
    \       \"\")\n                        (let ((numbers (string-split numbers \"\
    \ \")))\n                          (if (empty? numbers)\n                    \
    \        \"\")\n                          (let ((numbers (string-split numbers\
    \ \" \")))\n                            (if (empty? numbers)\n               \
    \               \"\")\n                            (let ((numbers (string-split\
    \ numbers \" \")))\n                              (if (empty? numbers)\n     \
    \                           \"\")\n                              (let ((numbers\
    \ (string-split numbers \" \")))\n                                (if (empty?\
    \ numbers)\n                                  \"\")\n                        \
    \        (let ((numbers (string-split numbers \" \")))\n                     \
    \             (if (empty? numbers)\n                                    \"\")\n\
    \                                  (let ((numbers (string-split numbers \" \"\
    )))\n                                    (if (empty? numbers)\n              \
    \                        \"\")\n                                    (let ((numbers\
    \ (string-split numbers \" \")))\n                                      (if (empty?\
    \ numbers)\n                                        \"\")\n                  \
    \             ", "  (define (sort-helper l r)\n    (if (eq? l r)\n      (number->string\
    \ (car l))\n      (sort-helper (cdr l) (cdr r))))\n  (sort-helper numbers \"\"\
    )\n)\n", "  (define (sort-helper l r)\n    (cond\n      ((< l r) (return l))\n\
    \      ((= l r) (return r))\n      ((< l) (return r))\n      (else (sort-helper\
    \ (+ l 1) r))))\n  (sort-helper numbers numbers))\n\n;; Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return\
    \ the string with numbers sorted from largest to smallest\n;; >>> (sort_numbers\
    \ \"three one five\")\n;; \"five three one\"", "  (define (sort-helper n)\n  \
    \  (if (eq? n numbers)\n      n\n      (if (eq? (car numbers) n)\n        (sort-helper\
    \ (cdr numbers))\n        (sort-helper (cdr (cdr numbers))))))\n  (sort-helper\
    \ numbers))\n\n;; Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers sorted\
    \ from largest to smallest\n;; >>> (sort_numbers \"three one five\")\n;; \"five\
    \ three one\"", "  (define (sort_helper n)\n    (if (eq? n numbers)\n      n\n\
    \      (if (eq? (car numbers) n)\n        (sort_helper (cdr numbers))\n      \
    \  (sort_helper (cdr (cdr numbers))))))\n  (sort_helper numbers))\n\n;; Input\
    \ is a space-delimited string of numberals from 'zero' to 'nine'.\n;; Valid choices\
    \ are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and\
    \ 'nine'.\n;; Return the string with numbers sorted from largest to smallest\n\
    ;; >>> (sort_numbers \"three one five\")\n;; \"three five one\"", "  (let ((numbers\
    \ (string-split numbers \" \")))\n    (let ((numbers (string-split numbers \"\
    \ \")))\n      (let ((numbers (string-split numbers \" \")))\n        (let ((numbers\
    \ (string-split numbers \" \")))\n          (let ((numbers (string-split numbers\
    \ \" \")))\n            (let ((numbers (string-split numbers \" \")))\n      \
    \        (let ((numbers (string-split numbers \" \")))\n                (let ((numbers\
    \ (string-split numbers \" \")))\n                  (let ((numbers (string-split\
    \ numbers \" \")))\n                    (let ((numbers (string-split numbers \"\
    \ \")))\n                      (let ((numbers (string-split numbers \" \")))\n\
    \                        (let ((numbers (string-split numbers \" \")))\n     \
    \                     (let ((numbers (string-split numbers \" \")))\n        \
    \                    (let ((numbers (string-split numbers \" \")))\n         \
    \                     (let ((numbers (string-split numbers \" \")))\n        \
    \                        (let ((numbers (string-split numbers \" \")))\n     \
    \                             (let ((numbers (string-split numbers \" \")))\n\
    \                                    (let ((numbers (string-split numbers \" \"\
    )))\n                                      (let ((numbers (string-split numbers\
    \ \" \")))\n                                        (let ((numbers (string-split\
    \ numbers \" \")))\n                                          (let ((numbers (string-split\
    \ numbers \" \")))\n                                            (let ((numbers\
    \ (string-split numbers \" \")))\n                                           \
    \   (let ((numbers (string-split numbers \" \")))\n                          \
    \                      (let ((numbers (string-split numbers \" \")))\n       \
    \                                           (let ((numbers (string-split numbers\
    \ \" \")))\n                                                    (let ((numbers\
    \ (string-split numbers \" \")))\n                                           \
    \           (let ((numbers (string-split numbers \" \")))\n                  \
    \                                      (let ((numbers (string-split numbers \"\
    \ \")))\n                                                          (let ((numbers\
    \ (string-split numbers \" \")))\n                                           \
    \                 (let ((numbers (string-split numbers \" \")))\n            \
    \                                                  (", "  (let ((numbers (string->list\
    \ numbers)))\n    (let ((numbers (string->list numbers)))\n      (let ((numbers\
    \ (string->list numbers)))\n        (let ((numbers (string->list numbers)))\n\
    \          (let ((numbers (string->list numbers)))\n            (let ((numbers\
    \ (string->list numbers)))\n              (let ((numbers (string->list numbers)))\n\
    \                (let ((numbers (string->list numbers)))\n                  (let\
    \ ((numbers (string->list numbers)))\n                    (let ((numbers (string->list\
    \ numbers)))\n                      (let ((numbers (string->list numbers)))\n\
    \                        (let ((numbers (string->list numbers)))\n           \
    \               (let ((numbers (string->list numbers)))\n                    \
    \        (let ((numbers (string->list numbers)))\n                           \
    \   (let ((numbers (string->list numbers)))\n                                (let\
    \ ((numbers (string->list numbers)))\n                                  (let ((numbers\
    \ (string->list numbers)))\n                                    (let ((numbers\
    \ (string->list numbers)))\n                                      (let ((numbers\
    \ (string->list numbers)))\n                                        (let ((numbers\
    \ (string->list numbers)))\n                                          (let ((numbers\
    \ (string->list numbers)))\n                                            (let ((numbers\
    \ (string->list numbers)))\n                                              (let\
    \ ((numbers (string->list numbers)))\n                                       \
    \         (let ((numbers (string->list numbers)))\n                          \
    \                        (let ((numbers (string->list numbers)))\n           \
    \                                         (let ((numbers (string->list numbers)))\n\
    \                                                      (let ((numbers (string->list\
    \ numbers)))\n                                                        (let ((numbers\
    \ (string->list numbers)))\n                                                 \
    \         (let ((numbers (string->list numbers)))\n                          \
    \                                  (let ((numbers (string->list numbers)))\n \
    \                                                             (let ((numbers (string->list\
    \ numbers)))\n                                                               \
    \ (let ((numbers (string->list numbers)))\n                                  \
    \                                (let ((numbers (string->list numbers)))\n   \
    \                                                                 (let ((numbers\
    \ (string->list numbers)))\n                               ", "  (define (sort_helper\
    \ l r)\n    (if (eq? l r)\n      (number->string l)\n      (if (eq? (number->string\
    \ l) (number->string r))\n        (sort_helper (number->string l) (number->string\
    \ r))\n        (sort_helper l (number->string r))))))\n", "  (define (sort-helper\
    \ n)\n    (cond\n      [(< n 0) \"zero\"]\n      [(< n 1) \"one\"]\n      [(<\
    \ n 2) \"two\"]\n      [(< n 3) \"three\"]\n      [(< n 4) \"four\"]\n      [(<\
    \ n 5) \"five\"]\n      [(< n 6) \"six\"]\n      [(< n 7) \"seven\"]\n      [(<\
    \ n 8) \"eight\"]\n      [(< n 9) \"nine\"]\n      [else \"\"]\n    )\n  )\n \
    \ (string-append (map sort-helper numbers) \"\")\n)\n", "  (define (sort-helper\
    \ n)\n    (if (eq? n numbers)\n      n\n      (if (eq? (car numbers) n)\n    \
    \    (sort-helper (cdr numbers))\n        (sort-helper (cdr (cdr numbers))))))\n\
    \  (sort-helper numbers))\n\n;; Input is a space-delimited string of numberals\
    \ from 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with\
    \ numbers sorted from largest to smallest\n;; >>> (sort_numbers \"three one five\"\
    )\n;; \"three five one\"", "  (let ((numbers (string-split numbers \" \")))\n\
    \    (let ((numbers (map (lambda (n) (string-append (string-append \" \" n) \"\
    \ \")) numbers)))\n      (string-join (sort numbers) \" \")))\n)\n", "  (define\
    \ (sort-helper n)\n    (if (eq? n numbers)\n      n\n      (if (lt? n numbers)\n\
    \        (sort-helper (sub1 n))\n        (sort-helper (add1 n)))))\n  (sort-helper\
    \ numbers))\n\n;; Input is a string of words separated by spaces.\n;; Return the\
    \ string with words sorted alphabetically\n;; >>> (sort_words \"one three five\"\
    )\n;; \"five three one\"", "  (let ((numbers (string->list numbers)))\n    (let\
    \ ((numbers (string->list numbers)))\n      (let ((numbers (string->list numbers)))\n\
    \        (let ((numbers (string->list numbers)))\n          (let ((numbers (string->list\
    \ numbers)))\n            (let ((numbers (string->list numbers)))\n          \
    \    (let ((numbers (string->list numbers)))\n                (let ((numbers (string->list\
    \ numbers)))\n                  (let ((numbers (string->list numbers)))\n    \
    \                (let ((numbers (string->list numbers)))\n                   \
    \   (let ((numbers (string->list numbers)))\n                        (let ((numbers\
    \ (string->list numbers)))\n                          (let ((numbers (string->list\
    \ numbers)))\n                            (let ((numbers (string->list numbers)))\n\
    \                              (let ((numbers (string->list numbers)))\n     \
    \                           (let ((numbers (string->list numbers)))\n        \
    \                          (let ((numbers (string->list numbers)))\n         \
    \                           (let ((numbers (string->list numbers)))\n        \
    \                              (let ((numbers (string->list numbers)))\n     \
    \                                   (let ((numbers (string->list numbers)))\n\
    \                                          (let ((numbers (string->list numbers)))\n\
    \                                            (let ((numbers (string->list numbers)))\n\
    \                                              (let ((numbers (string->list numbers)))\n\
    \                                                (let ((numbers (string->list\
    \ numbers)))\n                                                  (let ((numbers\
    \ (string->list numbers)))\n                                                 \
    \   (let ((numbers (string->list numbers)))\n                                \
    \                      (let ((numbers (string->list numbers)))\n             \
    \                                           (let ((numbers (string->list numbers)))\n\
    \                                                          (let ((numbers (string->list\
    \ numbers)))\n                                                            (let\
    \ ((numbers (string->list numbers)))\n                                       \
    \                       (let ((numbers (string->list numbers)))\n            \
    \                                                    (let ((numbers (string->list\
    \ numbers)))\n                                                               \
    \   (let ((numbers (string->list numbers)))\n                                \
    \                                    (let ((numbers (string->list numbers)))\n\
    \                               ", "  (define (sort-helper n)\n    (if (eq? n\
    \ numbers)\n      n\n      (if (eq? (car numbers) n)\n        (sort-helper (cdr\
    \ numbers))\n        (sort-helper (cdr (cdr numbers))))))\n  (sort-helper numbers))\n\
    \n;; Input is a space-delimited string of numberals from 'zero' to 'nine'.\n;;\
    \ Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n;; Return the string with numbers sorted from largest to\
    \ smallest\n;; >>> (sort_numbers \"three one five\")\n;; \"five three one\"",
  "  (let ((numbers (string-split numbers \" \")))\n    (let ((numbers (map (lambda\
    \ (x) (string-to-number x)) numbers)))\n      (string-join (sort numbers) \" \"\
    )))\n)\n\n;; Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    ;; Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n;; Return the string with numbers sorted from largest to\
    \ smallest\n;; >>> (sort_numbers_reverse \"three one five\")\n;; \"five three\
    \ one\"", "  (define (sort-helper l r)\n    (if (eq? l r)\n      (number->string\
    \ l)\n      (sort-helper (number->string l) (number->string r))\n    )\n  )\n\
    \  (sort-helper numbers numbers)\n)\n", "  (let ((numbers (string-split numbers\
    \ \" \")))\n    (let ((numbers (string-split numbers \" \")))\n      (let ((numbers\
    \ (string-split numbers \" \")))\n        (let ((numbers (string-split numbers\
    \ \" \")))\n          (let ((numbers (string-split numbers \" \")))\n        \
    \    (let ((numbers (string-split numbers \" \")))\n              (let ((numbers\
    \ (string-split numbers \" \")))\n                (let ((numbers (string-split\
    \ numbers \" \")))\n                  (let ((numbers (string-split numbers \"\
    \ \")))\n                    (let ((numbers (string-split numbers \" \")))\n \
    \                     (let ((numbers (string-split numbers \" \")))\n        \
    \                (let ((numbers (string-split numbers \" \")))\n             \
    \             (let ((numbers (string-split numbers \" \")))\n                \
    \            (let ((numbers (string-split numbers \" \")))\n                 \
    \             (let ((numbers (string-split numbers \" \")))\n                \
    \                (let ((numbers (string-split numbers \" \")))\n             \
    \                     (let ((numbers (string-split numbers \" \")))\n        \
    \                            (let ((numbers (string-split numbers \" \")))\n \
    \                                     (let ((numbers (string-split numbers \"\
    \ \")))\n                                        (let ((numbers (string-split\
    \ numbers \" \")))\n                                          (let ((numbers (string-split\
    \ numbers \" \")))\n                                            (let ((numbers\
    \ (string-split numbers \" \")))\n                                           \
    \   (let ((numbers (string-split numbers \" \")))\n                          \
    \                      (let ((numbers (string-split numbers \" \")))\n       \
    \                                           (let ((numbers (string-split numbers\
    \ \" \")))\n                                                    (let ((numbers\
    \ (string-split numbers \" \")))\n                                           \
    \           (let ((numbers (string-split numbers \" \")))\n                  \
    \                                      (let ((numbers (string-split numbers \"\
    \ \")))\n                                                          (let ((numbers\
    \ (string-split numbers \" \")))\n                                           \
    \                 (let ((numbers (string-split numbers \" \")))\n            \
    \                                                  (", "  (define (sort-helper\
    \ l r)\n    (cond\n      ((= l 'zero) (return 'zero))\n      ((< l 'one) (return\
    \ 'zero))\n      ((= l 'two) (return 'one))\n      ((< l 'three) (return 'two))\n\
    \      ((= l 'four) (return 'three))\n      ((< l 'five) (return 'four))\n   \
    \   ((= l 'six) (return 'five))\n      ((< l 'seven) (return 'six))\n      ((=\
    \ l 'eight) (return 'seven))\n      ((< l 'nine) (return 'eight))\n      ((< l\
    \ 'ten) (return 'nine))\n      ((< l 'eleven) (return 'ten))\n      ((< l 'twelve)\
    \ (return 'eleven))\n      ((< l 'thirteen) (return 'twelve))\n      ((< l 'fourteen)\
    \ (return 'thirteen))\n      ((< l 'fifteen) (return 'fourteen))\n      ((< l\
    \ 'sixteen) (return 'fifteen))\n      ((< l 'seventeen) (return 'sixteen))\n \
    \     ((< l 'eighteen) (return 'seventeen))\n      ((< l 'nineteen) (return 'eighteen))\n\
    \      ((< l 'twenty) (return 'nineteen))\n      ((< l 'thirty) (return 'twenty))\n\
    \      ((< l 'forty) (return 'thirty))\n      ((< l 'fifty) (return 'forty))\n\
    \      ((< l 'sixty) (return 'fifty))\n      ((< l 'seventy) (return 'sixty))\n\
    \      ((< l 'eighty) (return 'seventy))\n      ((< l 'ninety) (return 'eighty))\n\
    \      ((< l 'hundred) (return 'ninety))\n      ((< l 'thousand) (return 'hundred))\n\
    \      ((< l 'million) (return 'thousand))\n      ((< l 'billion) (return 'million))\n\
    \      ((< l 'trillion) (return 'billion))\n      ((< l 'quadrillion) (return\
    \ 'trillion))\n      ((< l 'quintillion", "  (define (sort-helper l r)\n    (cond\n\
    \      ((<= l 'zero) 'zero)\n      ((<= l 'one) 'one)\n      ((<= l 'two) 'two)\n\
    \      ((<= l 'three) 'three)\n      ((<= l 'four) 'four)\n      ((<= l 'five)\
    \ 'five)\n      ((<= l 'six) 'six)\n      ((<= l 'seven) 'seven)\n      ((<= l\
    \ 'eight) 'eight)\n      ((<= l 'nine) 'nine)\n      (else 'zero)\n    )\n  )\n\
    \  (define (sort-helper l r)\n    (sort-helper (substring l 1) (substring r 1))\n\
    \  )\n  (sort-helper numbers numbers)\n)\n", "  (define (sort_helper n)\n    (if\
    \ (eq? n numbers)\n      n\n      (if (eq? (car numbers) n)\n        (sort_helper\
    \ (cdr numbers))\n        (sort_helper (cdr (cdr numbers))))))\n  (sort_helper\
    \ numbers))\n\n;; Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers sorted\
    \ from largest to smallest\n;; >>> (sort_numbers \"three one five\")\n;; \"five\
    \ three one\"", "  (let ((numbers (string-split numbers \" \")))\n    (let ((numbers\
    \ (map (lambda (x) (string-to-number x)) numbers)))\n      (string-join (sort\
    \ numbers) \" \"))))\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from largest to smallest\n;; >>> (sort_numbers \"three one five\")\n\
    ;; \"three five one\"", "  (let ((numbers (string-split numbers \" \")))\n   \
    \ (let ((numbers (string-map (lambda (n) (string-replace n \" \" \"\")) numbers))\n\
    \          (numbers (sort numbers)))\n      (string-join \" \" numbers)))\n  )\n\
    )\n\n;; Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    ;; Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n;; Return the string with numbers sorted from largest to\
    \ smallest\n;; >>> (sort_numbers \"three one five\")\n;; \"three five one\"",
  "  (let ((numbers (string->list numbers)))\n    (let ((numbers (string->list numbers)))\n\
    \      (let ((numbers (string->list numbers)))\n        (let ((numbers (string->list\
    \ numbers)))\n          (let ((numbers (string->list numbers)))\n            (let\
    \ ((numbers (string->list numbers)))\n              (let ((numbers (string->list\
    \ numbers)))\n                (let ((numbers (string->list numbers)))\n      \
    \            (let ((numbers (string->list numbers)))\n                    (let\
    \ ((numbers (string->list numbers)))\n                      (let ((numbers (string->list\
    \ numbers)))\n                        (let ((numbers (string->list numbers)))\n\
    \                          (let ((numbers (string->list numbers)))\n         \
    \                   (let ((numbers (string->list numbers)))\n                \
    \              (let ((numbers (string->list numbers)))\n                     \
    \           (let ((numbers (string->list numbers)))\n                        \
    \          (let ((numbers (string->list numbers)))\n                         \
    \           (let ((numbers (string->list numbers)))\n                        \
    \              (let ((numbers (string->list numbers)))\n                     \
    \                   (let ((numbers (string->list numbers)))\n                \
    \                          (let ((numbers (string->list numbers)))\n         \
    \                                   (let ((numbers (string->list numbers)))\n\
    \                                              (let ((numbers (string->list numbers)))\n\
    \                                                (let ((numbers (string->list\
    \ numbers)))\n                                                  (let ((numbers\
    \ (string->list numbers)))\n                                                 \
    \   (let ((numbers (string->list numbers)))\n                                \
    \                      (let ((numbers (string->list numbers)))\n             \
    \                                           (let ((numbers (string->list numbers)))\n\
    \                                                          (let ((numbers (string->list\
    \ numbers)))\n                                                            (let\
    \ ((numbers (string->list numbers)))\n                                       \
    \                       (let ((numbers (string->list numbers)))\n            \
    \                                                    (let ((numbers (string->list\
    \ numbers)))\n                                                               \
    \   (let ((numbers (string->list numbers)))\n                                \
    \                                    (let ((numbers (string->list numbers)))\n\
    \                               ", "  (let ((numbers (string-split numbers \"\
    \ \")))\n    (let ((numbers (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n\
    \      (let ((numbers (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n\
    \        (let ((numbers (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n\
    \          (let ((numbers (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n\
    \            (let ((numbers (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n\
    \              (let ((numbers (map (lambda (n) (string-replace n \" \" \"\"))\
    \ numbers)))\n                (let ((numbers (map (lambda (n) (string-replace\
    \ n \" \" \"\")) numbers)))\n                  (let ((numbers (map (lambda (n)\
    \ (string-replace n \" \" \"\")) numbers)))\n                    (let ((numbers\
    \ (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n               \
    \       (let ((numbers (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n\
    \                        (let ((numbers (map (lambda (n) (string-replace n \"\
    \ \" \"\")) numbers)))\n                          (let ((numbers (map (lambda\
    \ (n) (string-replace n \" \" \"\")) numbers)))\n                            (let\
    \ ((numbers (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n     \
    \                         (let ((numbers (map (lambda (n) (string-replace n \"\
    \ \" \"\")) numbers)))\n                                (let ((numbers (map (lambda\
    \ (n) (string-replace n \" \" \"\")) numbers)))\n                            \
    \      (let ((numbers (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n\
    \                                    (let ((numbers (map (lambda (n) (string-replace\
    \ n \" \" \"\")) numbers)))\n                                      (let ((numbers\
    \ (map (lambda (n) (string-replace n \" \" \"\")) numbers)))\n               \
    \                         (let ((numbers (map (lambda (n) (string-replace n \"\
    \ \" \"\")) numbers)))\n                                          (let ((numbers\
    \ (map (lambda", "  (let ((numbers (string-split numbers \" \")))\n    (let ((numbers\
    \ (string-map (lambda (x) (string-to-number x)) numbers)))\n      (string-join\
    \ (sort numbers) \" \"))))\n\n;; Input is a space-delimited string of numberals\
    \ from 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with\
    \ numbers sorted from largest to smallest\n;; >>> (sort_numbers \"three one five\"\
    )\n;; \"three five one\"", "  (define (sort_helper l r)\n    (cond\n      ((=\
    \ l 'zero) (return 'zero))\n      ((= l 'one) (return 'one))\n      ((= l 'two)\
    \ (return 'two))\n      ((= l 'three) (return 'three))\n      ((= l 'four) (return\
    \ 'four))\n      ((= l 'five) (return 'five))\n      ((= l 'six) (return 'six))\n\
    \      ((= l 'seven) (return 'seven))\n      ((= l 'eight) (return 'eight))\n\
    \      ((= l 'nine) (return 'nine))\n      (else (error \"Invalid number: \" l))\n\
    \    ))\n  (sort_helper numbers numbers)\n)\n", "  (define (sort-helper l r)\n\
    \    (cond\n      ((< l r) (return l))\n      ((= l r) (return r))\n      ((<\
    \ l) (return r))\n      (else (sort-helper (+ l 1) r))))\n  (sort-helper numbers\
    \ numbers))\n\n;; Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers sorted\
    \ from largest to smallest\n;; >>> (sort_numbers \"three one five\")\n;; \"three\
    \ five one\"", "  (define (sort-helper l r)\n    (if (eq? l r)\n      (number->string\
    \ l)\n      (sort-helper (number->string l) (number->string r))\n    )\n  )\n\
    \  (sort-helper numbers numbers)\n)\n", "  (define (sort-helper n)\n    (if (eq?\
    \ n numbers)\n      n\n      (if (eq? (car numbers) n)\n        (sort-helper (cdr\
    \ numbers))\n        (sort-helper (cdr (cdr numbers))))))\n  (sort-helper numbers))\n\
    \n;; Input is a space-delimited string of numberals from 'zero' to 'nine'.\n;;\
    \ Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n;; Return the string with numbers sorted from largest to\
    \ smallest\n;; >>> (sort_numbers \"three one five\")\n;; \"five three one\"",
  "  (let ((numbers (string-split numbers \" \")))\n    (let ((numbers (string-map\
    \ (lambda (x) (string-to-number x)) numbers)))\n      (string-join (sort numbers)\
    \ \" \"))))\n\n;; Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers sorted\
    \ from largest to smallest\n;; >>> (sort_numbers \"three one five\")\n;; \"three\
    \ five one\"", "  (define (sort-helper l r)\n    (if (eq? l r)\n      (number->string\
    \ (car l))\n      (sort-helper (cdr l) (cdr r))))\n  (sort-helper numbers \"\"\
    )\n)\n\n;; Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    ;; Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n;; Return the string with numbers sorted from largest to\
    \ smallest\n;; >>> (sort_numbers \"three one five\")\n;; \"three five one\"",
  "  (define (sort_helper n)\n    (if (eq? n numbers)\n      n\n      (if (eq? (car\
    \ numbers) n)\n        (sort_helper (cdr numbers))\n        (sort_helper (cdr\
    \ (cdr numbers))))))\n  (sort_helper numbers))\n\n;; Input is a space-delimited\
    \ string of words from 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return\
    \ the string with words sorted from smallest to largest\n;; >>> (sort_words \"\
    three one five\")\n;; \"one three five\"", "  (let ((numbers (split-string numbers\
    \ \" \")))\n    (let ((numbers (map (lambda (x) (string->number x)) numbers)))\n\
    \      (let ((numbers (sort numbers)))\n        (join-strings numbers \" \"))))\n\
    \  )\n)\n\n;; Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    ;; Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n;; Return the string with numbers sorted from largest to\
    \ smallest\n;; >>> (sort_numbers \"three one five\")\n;; \"three five one\"",
  "  (let ((numbers (string-split numbers \" \")))\n    (let ((numbers (string-split\
    \ numbers \" \")))\n      (let ((numbers (string-split numbers \" \")))\n    \
    \    (let ((numbers (string-split numbers \" \")))\n          (let ((numbers (string-split\
    \ numbers \" \")))\n            (let ((numbers (string-split numbers \" \")))\n\
    \              (let ((numbers (string-split numbers \" \")))\n               \
    \ (let ((numbers (string-split numbers \" \")))\n                  (let ((numbers\
    \ (string-split numbers \" \")))\n                    (let ((numbers (string-split\
    \ numbers \" \")))\n                      (let ((numbers (string-split numbers\
    \ \" \")))\n                        (let ((numbers (string-split numbers \" \"\
    )))\n                          (let ((numbers (string-split numbers \" \")))\n\
    \                            (let ((numbers (string-split numbers \" \")))\n \
    \                             (let ((numbers (string-split numbers \" \")))\n\
    \                                (let ((numbers (string-split numbers \" \")))\n\
    \                                  (let ((numbers (string-split numbers \" \"\
    )))\n                                    (let ((numbers (string-split numbers\
    \ \" \")))\n                                      (let ((numbers (string-split\
    \ numbers \" \")))\n                                        (let ((numbers (string-split\
    \ numbers \" \")))\n                                          (let ((numbers (string-split\
    \ numbers \" \")))\n                                            (let ((numbers\
    \ (string-split numbers \" \")))\n                                           \
    \   (let ((numbers (string-split numbers \" \")))\n                          \
    \                      (let ((numbers (string-split numbers \" \")))\n       \
    \                                           (let ((numbers (string-split numbers\
    \ \" \")))\n                                                    (let ((numbers\
    \ (string-split numbers \" \")))\n                                           \
    \           (let ((numbers (string-split numbers \" \")))\n                  \
    \                                      (let ((numbers (string-split numbers \"\
    \ \")))\n                                                          (let ((numbers\
    \ (string-split numbers \" \")))\n                                           \
    \                 (let ((numbers (string-split numbers \" \")))\n            \
    \                                                  (", "  (let ((numbers (string->list\
    \ numbers)))\n    (let ((numbers (string->list numbers)))\n      (let ((numbers\
    \ (string->list numbers)))\n        (let ((numbers (string->list numbers)))\n\
    \          (let ((numbers (string->list numbers)))\n            (let ((numbers\
    \ (string->list numbers)))\n              (let ((numbers (string->list numbers)))\n\
    \                (let ((numbers (string->list numbers)))\n                  (let\
    \ ((numbers (string->list numbers)))\n                    (let ((numbers (string->list\
    \ numbers)))\n                      (let ((numbers (string->list numbers)))\n\
    \                        (let ((numbers (string->list numbers)))\n           \
    \               (let ((numbers (string->list numbers)))\n                    \
    \        (let ((numbers (string->list numbers)))\n                           \
    \   (let ((numbers (string->list numbers)))\n                                (let\
    \ ((numbers (string->list numbers)))\n                                  (let ((numbers\
    \ (string->list numbers)))\n                                    (let ((numbers\
    \ (string->list numbers)))\n                                      (let ((numbers\
    \ (string->list numbers)))\n                                        (let ((numbers\
    \ (string->list numbers)))\n                                          (let ((numbers\
    \ (string->list numbers)))\n                                            (let ((numbers\
    \ (string->list numbers)))\n                                              (let\
    \ ((numbers (string->list numbers)))\n                                       \
    \         (let ((numbers (string->list numbers)))\n                          \
    \                        (let ((numbers (string->list numbers)))\n           \
    \                                         (let ((numbers (string->list numbers)))\n\
    \                                                      (let ((numbers (string->list\
    \ numbers)))\n                                                        (let ((numbers\
    \ (string->list numbers)))\n                                                 \
    \         (let ((numbers (string->list numbers)))\n                          \
    \                                  (let ((numbers (string->list numbers)))\n \
    \                                                             (let ((numbers (string->list\
    \ numbers)))\n                                                               \
    \ (let ((numbers (string->list numbers)))\n                                  \
    \                                (let ((numbers (string->list numbers)))\n   \
    \                                                                 (let ((numbers\
    \ (string->list numbers)))\n                               ", "  (define (sort-helper\
    \ l r)\n    (if (eq? l r)\n      (number->string l)\n      (sort-helper (number->string\
    \ l) (number->string r)))))"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
