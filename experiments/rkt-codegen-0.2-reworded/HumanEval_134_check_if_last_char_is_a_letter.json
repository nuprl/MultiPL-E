{
  "name": "HumanEval_134_check_if_last_char_is_a_letter",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Create a function that returns #t if the last character\n;; of a given string is an alphabetical character and is not\n;; a part of a word, and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_letter \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_letter \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_letter \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_letter \"\")\n;; #f\n(define (check_if_last_char_is_a_letter txt)\n",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_if_last_char_is_a_letter))\n    (check-equal? (candidate \"apple\") #f)\n    (check-equal? (candidate \"apple pi e\") #t)\n    (check-equal? (candidate \"eeeee\") #f)\n    (check-equal? (candidate \"A\") #t)\n    (check-equal? (candidate \"Pumpkin pie \") #f)\n    (check-equal? (candidate \"Pumpkin pie 1\") #f)\n    (check-equal? (candidate \"\") #f)\n    (check-equal? (candidate \"eeeee e \") #f)\n    (check-equal? (candidate \"apple pie\") #f)\n    (check-equal? (candidate \"apple pi e \") #f)\n))\n\n(test-humaneval)",
  "completions": [
    "  (let ((last (string-end txt)))\n    (if (and\n         (<= last #\\\\a #\\\\z)\n         (not (string-contains-word last)))\n      #t\n      #f)))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string? txt)\n      (let ((last txt))\n        (string-length last))\n      (check_if_last_char_is_a_letter last)]\n    [(string? txt)\n      (let ((last txt))\n        (string-length last))\n      (check_if_last_char_is_a_letter last)]\n    [#f txt]))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string? txt)\n      (let ((last txt))\n        (if (string? last)\n            (string-tail? last)\n            (string-empty? last)))\n      (not (string-empty? txt))]\n    [#t #f]))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (let ((str (string-trim txt)))\n    (if (empty? str)\n      #f\n      (let ((last (string-trim (string-tail str))))\n        (if (empty? last)\n          #f\n          (let ((last-char (char-ci (string-upcase last))))\n            (if (char-ci? last-char)\n              #t\n              #f))))))))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string? txt)\n      (let ((last (string-end txt)))\n        (string-ref last (- (string-length txt) 1)))\n      (string-ref txt (- (string-length txt) 1))]\n    [#f #t]))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    ((null? txt) #f)\n    ((null? (cdr txt)) #f)\n    (let ((last (cdr (cdr txt))))\n      (cond\n        (not (string=? last \" \"))\n        (string=? last \" \")\n        (string=? last \".\")\n        (string=? last \",\")\n        (string=? last \"!\")\n        (string=? last \"?\")\n        (string=? last \"\\\"\")\n        (string=? last \"#\")\n        (string=? last \"$\")\n        (string=? last \"%\")\n        (string=? last \"&\")\n        (string=? last \"/\")\n        (string=? last \"(\")\n        (string=? last \")\")\n        (string=? last \"=\")\n        (string=? last \":\")\n        (string=? last \";\")\n        (string=? last \"?\")\n        (string=? last \"!\")\n        (string=? last \".\")\n        (string=? last \",\")\n        (string=? last \"\\\"\")\n        (string=? last \"#\")\n        (string=? last \"$\")\n        (string=? last \"%\")\n        (string=? last \"&\")\n        (string=? last \"/\")\n        (string=? last \"(\")\n        (string=? last \")\")\n        (string=? last \"=\")\n        (string=? last \":\")\n        (string=? last \";\")\n        (string=? last \"?\")\n        (string=? last \"!\")\n        (string=? last \".\")\n        (string=? last \",\")\n        (string=? last \"\\\"\")\n        (string=? last \"#\")\n        (string=? last \"$\")\n        (string=? last \"%\")\n        (string=? last \"&\")\n        (string=? last \"/\")\n        (string=? last \"(\")\n        (string=? last \")\")\n        (string=? last \"=\")\n        (string=? last \":\")\n        (string=? last \";\")\n        (string=? last \"?\")",
    "  (cond\n    [(string-length txt) 0]\n    [(string-char-ci txt #\"\\s\") #f]\n    [(string-char-ci txt #\"\\w\") #t]\n    [#f #t]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-char-ci txt #\"\\s\") #f]\n    [(string-char-ci txt #\"\\w\") #t]\n    [#f #t]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string? txt)\n      (let ((last txt))\n        (if (string? last)\n            (check_if_last_char_is_a_letter last)\n            (check_if_last_char_is_a_letter (cdr last))))]\n    [else\n      #f]))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-last-char txt)\n      (cond\n        [(string-contains? \" \" txt)\n          (string-split txt \" \")\n          (check_if_last_char_is_a_letter (first (second txt)))\n          (check_if_last_char_is_a_letter (first (third txt)))\n          (check_if_last_char_is_a_letter (first (fourth txt)))\n          (check_if_last_char_is_a_letter (first (fifth txt)))\n          (check_if_last_char_is_a_letter (first (sixth txt)))\n          (check_if_last_char_is_a_letter (first (seventh txt)))\n          (check_if_last_char_is_a_letter (first (eighth txt)))\n          (check_if_last_char_is_a_letter (first (ninth txt)))\n          (check_if_last_char_is_a_letter (first (tenth txt)))\n          (check_if_last_char_is_a_letter (first (eleventh txt)))\n          (check_if_last_char_is_a_letter (first (twelfth txt)))\n          (check_if_last_char_is_a_letter (first (thirteenth txt)))\n          (check_if_last_char_is_a_letter (first (fourteenth txt)))\n          (check_if_last_char_is_a_letter (first (fifteenth txt)))\n          (check_if_last_char_is_a_letter (first (sixteenth txt)))\n          (check_if_last_char_is_a_letter (first (seventeenth txt)))\n          (check_if_last_char_is_a_letter (first (eighteenth txt)))\n          (check_if_last_char_is_a_letter (first (nineteenth txt)))\n          (check_if_last_char_is_a",
    "  (cond\n    [(string? txt)\n      (let ((last (string-length txt)))\n        (string-ref txt last))]\n    [else\n      #f]))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-char-ci txt #\"a\" #\"z\") #t]\n    [(string-char-ci txt #\"A\" #\"Z\") #t]\n    [(string-char-ci txt #\"0\" #\"9\") #t]\n    [(string-char-ci txt #\" \") #t]\n    [#f txt]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-last-char txt) #f]\n    [(string-last-char txt)\n      (let ((word (string-split txt \" \")))\n        (and (string-length word)\n             (string-length word)\n             (string-index word #\" \")\n             (string-index word #\" \")\n             (string-index word #\" \")\n             (string-index word #\" \")\n             (string-index word #\" \")\n             (string-index word #\" \")\n             (string-index word #\" \")\n             (string-index word #\" \")\n             (string-index word #\" \")\n             (string-index word #\" \")\n             (string-index word #\" \")\n             (string-index word #\" \")\n             (string-index word #\" \")\n             (string-index word #\" \")\n             (string-index word #\" \")\n             (string-index word #\" \")\n             (string-index word #\" \")\n             (string-index word #\" \")\n             (string-index word #\" \")\n             (string-index word #\" \")\n             (string-index word #\" \")\n             (string-index word #\" \")\n             (string-index word #\" \")\n             (string-index word #\" \")\n             (string-index word #\" \")\n             (string-index word #\" \")\n             (string-index word #\" \")\n             (string-index word #\" \")\n             (string-index word #\" \")\n             (string-index word #\" \")\n             (string-index word #\" \")\n             (string-index word #\" \")\n             (string-index word #\" \")\n             (string-index word #\" \")\n             (string-index word #\" \")\n             (string-index word #\" \")\n             (string-index word #\" \")\n             (string-index word #\" \")\n             (string-index word #\" \")\n             (string-index word #",
    "  (cond\n    [(string? txt)\n      (let ((last (string-end txt)))\n        (if (not (in-word? last))\n            (return #t)\n            (return #f)))\n      ]\n    [(symbol? txt)\n      (let ((last (string-end txt)))\n        (if (not (in-word? last))\n            (return #t)\n            (return #f)))\n      ]\n    [(error \"Invalid argument\") txt]))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-char txt #\" \")]\n    [(string-char txt #\" \")\n      (let ((last-char (string-char-next txt)))\n        (cond\n          [(string-char-ci? last-char #\"a\") #t]\n          [(string-char-ci? last-char #\"A\") #t]\n          [(string-char-ci? last-char #\"b\") #t]\n          [(string-char-ci? last-char #\"B\") #t]\n          [(string-char-ci? last-char #\"c\") #t]\n          [(string-char-ci? last-char #\"C\") #t]\n          [(string-char-ci? last-char #\"d\") #t]\n          [(string-char-ci? last-char #\"D\") #t]\n          [(string-char-ci? last-char #\"e\") #t]\n          [(string-char-ci? last-char #\"E\") #t]\n          [(string-char-ci? last-char #\"f\") #t]\n          [(string-char-ci? last-char #\"F\") #t]\n          [(string-char-ci? last-char #\"g\") #t]\n          [(string-char-ci? last-char #\"G\") #t]\n          [(string-char-ci? last-char #\"h\") #t]\n          [(string-char-ci? last-char #\"H\") #t]\n          [(string-char-ci? last-char #\"i\") #t]\n          [(string-char-ci? last-char #\"I\") #t]\n          [(string-char-ci? last-char #\"j\") #t]\n          [(string-char-ci? last-char #\"J\") #t]\n          [(string-char-ci? last-char #\"k\") #t]\n          [(string-char-ci? last-char #\"K\") #",
    "  (cond\n    ((null? txt) #f)\n    (else\n      (let ((i (length txt)))\n        (cond\n          ((i = 1)\n            (not (string-ci=? (string-upcase (string-ref txt i)) #\"a\")))\n          ((i > 1)\n            (not (string-ci=? (string-upcase (string-ref txt i - 1)) #\"a\")))\n          (else\n            #t)))))))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-last txt) #f]\n    [(string-last txt) (string-contains txt #\" \")]\n    [#t]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-contains txt #\" \")]\n    [(string-contains txt #\" \")\n      (string-split txt #\" \")\n      (check_if_last_char_is_a_letter (car (cdr txt)))]\n    [#f]))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-contains txt #\" \")]\n    [(string-contains txt #\" \")\n      (string-split txt #\" \")\n      (string-length (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-char-ci txt #\"a\") #t]\n    [(string-char-ci txt #\"e\") #t]\n    [(string-char-ci txt #\"i\") #t]\n    [(string-char-ci txt #\"o\") #t]\n    [(string-char-ci txt #\"u\") #t]\n    [(string-char-ci txt #\"y\") #t]\n    [(string-char-ci txt #\" \") #t]\n    [(string-char-ci txt #\"p\") #t]\n    [(string-char-ci txt #\"i\") #t]\n    [(string-char-ci txt #\"e\") #t]\n    [(string-char-ci txt #\" \") #t]\n    [(string-char-ci txt #\"r\") #t]\n    [(string-char-ci txt #\"t\") #t]\n    [(string-char-ci txt #\"e\") #t]\n    [(string-char-ci ttex #\" \") #f]\n    [else #f]\n  )\n)\n\n;;; (check_if_last_char_is_a_letter \"apple pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pi e\")\n;;; #t\n;;; (check_if_last_char_is_a_letter \"apple pi e \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pie \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pie pi\")\n;;; #f\n;;; (check_if_last_char_is_a_letter",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-last-char txt)\n      (not (string-contains txt #\" \"))]\n    [#f]))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (let ((last (string-tail txt)))\n    (if (string-empty? last)\n      #f\n      (let ((last-char (string-ref last 0)))\n        (if (char-alphabetic? last-char)\n          #t\n          #f))))))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-char-ci txt #\"a\" #\"z\" #\"A\" #\"Z\") #t]\n    [(string-char-ci txt #\" \") #f]\n    [#f t]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-char txt #\" \") #t]\n    [(string-char txt #\" \") #f]\n    [(string-char txt #\"a\") #f]\n    [(string-char txt #\"A\") #t]\n    [(string-char txt #\"b\") #f]\n    [(string-char txt #\"B\") #t]\n    [(string-char txt #\"c\") #f]\n    [(string-char txt #\"C\") #t]\n    [(string-char txt #\"d\") #f]\n    [(string-char txt #\"D\") #t]\n    [(string-char txt #\"e\") #f]\n    [(string-char txt #\"E\") #t]\n    [(string-char txt #\"f\") #f]\n    [(string-char txt #\"F\") #t]\n    [(string-char txt #\"g\") #f]\n    [(string-char txt #\"G\") #t]\n    [(string-char txt #\"h\") #f]\n    [(string-char txt #\"H\") #t]\n    [(string-char txt #\"i\") #f]\n    [(string-char txt #\"I\") #t]\n    [(string-char txt #\"j\") #f]\n    [(string-char txt #\"J\") #t]\n    [(string-char txt #\"k\") #f]\n    [(string-char txt #\"K\") #t]\n    [(string-char txt #\"l\") #f]\n    [(string-char txt #\"L\") #t]\n    [(string-char txt #\"m\") #f]\n    [(string-char txt #\"M\") #t]\n    [(string-char txt #\"n\") #f]\n    [(string-char txt #\"N\") #t]\n    [(string",
    "  (let ((last (string-tail txt)))\n    (if (not (string-empty? last))\n      (and (string-ci=? (string-upcase last) #\"A\")\n           (not (string-ci=? last #\" \")))\n      #t\n      #f)))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-index-of txt #\" \") 0]\n    [(string-index-of txt #\" \") 1]\n    [(string-index-of txt #\" \") 2]\n    [(string-index-of txt #\" \") 3]\n    [(string-index-of txt #\" \") 4]\n    [(string-index-of txt #\" \") 5]\n    [(string-index-of txt #\" \") 6]\n    [(string-index-of txt #\" \") 7]\n    [(string-index-of txt #\" \") 8]\n    [(string-index-of txt #\" \") 9]\n    [(string-index-of txt #\" \") 10]\n    [(string-index-of txt #\" \") 11]\n    [(string-index-of txt #\" \") 12]\n    [(string-index-of txt #\" \") 13]\n    [(string-index-of txt #\" \") 14]\n    [(string-index-of txt #\" \") 15]\n    [(string-index-of txt #\" \") 16]\n    [(string-index-of txt #\" \") 17]\n    [(string-index-of txt #\" \") 18]\n    [(string-index-of txt #\" \") 19]\n    [(string-index-of txt #\" \") 20]\n    [(string-index-of txt #\" \") 21]\n    [(string-index-of txt #\" \") 22]\n    [(string-index-of txt #\" \") 23]\n    [(string-index-of txt #\" \") 24]\n    [(string-index-of txt #\" \") 25]\n    [(string-index-of txt #\" \") 26]\n    [(string-index-of txt #\" \") 27]\n    [(string-index-of",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-index-of txt #\" \") 0]\n    [(string-index-of txt #\" \") 1]\n    [(string-index-of txt #\" \") 2]\n    [(string-index-of txt #\" \") 3]\n    [(string-index-of txt #\" \") 4]\n    [(string-index-of txt #\" \") 5]\n    [(string-index-of txt #\" \") 6]\n    [(string-index-of txt #\" \") 7]\n    [(string-index-of txt #\" \") 8]\n    [(string-index-of txt #\" \") 9]\n    [(string-index-of txt #\" \") 10]\n    [(string-index-of txt #\" \") 11]\n    [(string-index-of txt #\" \") 12]\n    [(string-index-of txt #\" \") 13]\n    [(string-index-of txt #\" \") 14]\n    [(string-index-of txt #\" \") 15]\n    [(string-index-of txt #\" \") 16]\n    [(string-index-of txt #\" \") 17]\n    [(string-index-of txt #\" \") 18]\n    [(string-index-of txt #\" \") 19]\n    [(string-index-of txt #\" \") 20]\n    [(string-index-of txt #\" \") 21]\n    [(string-index-of txt #\" \") 22]\n    [(string-index-of txt #\" \") 23]\n    [(string-index-of txt #\" \") 24]\n    [(string-index-of txt #\" \") 25]\n    [(string-index-of txt #\" \") 26]\n    [(string-index-of txt #\" \") 27]\n    [(string-index-of",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-contains txt \" \") #f]\n    [(string-contains txt \" \") #t]\n    [#t (string-contains txt \" \") #f]\n    [#t (string-contains txt \" \") #t]\n    [#t (string-contains txt \" \") #f]\n    [#t (string-contains txt \" \") #t]\n    [#t (string-contains txt \" \") #f]\n    [#t (string-contains txt \" \") #t]\n    [#t (string-contains txt \" \") #f]\n    [#t (string-contains txt \" \") #t]\n    [#t (string-contains txt \" \") #f]\n    [#t (string-contains txt \" \") #t]\n    [#t (string-contains txt \" \") #f]\n    [#t (string-contains txt \" \") #t]\n    [#t (string-contains txt \" \") #f]\n    [#t (string-contains txt \" \") #t]\n    [#t (string-contains txt \" \") #f]\n    [#t (string-contains txt \" \") #t]\n    [#t (string-contains txt \" \") #f]\n    [#t (string-contains txt \" \") #t]\n    [#t (string-contains txt \" \") #f]\n    [#t (string-contains txt \" \") #t]\n    [#t (string-contains txt \" \") #f]\n    [#t (string-contains txt \" \") #t]\n    [#t (string-contains txt \" \") #f]\n    [#t (string-contains txt \" \") #t]\n    [#t (string-contains txt \" \") #f]\n    [",
    "  (cond\n    [(string? txt)\n      (let ((last txt))\n        (cond\n          [(char=? (last #\\\\space))\n            (let ((word (substring txt (length txt) -1)))\n              (not (string-ci=? word #\" \")))\n            (not (string-ci=? last #\" \"))]\n          [true true])))\n    [false true]))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string? txt)\n      (let ((last (string-end txt)))\n        (if (and\n              (not (string-empty? txt))\n              (char-alphabetic? (string-ref last -1)))\n          (string-set! last (- (string-length txt) 1))))\n      #t]\n    [#f txt]))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-last txt) #f]\n    [(string-last txt) (string-contains txt #\" \")]\n    [#t]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-contains txt \" \")]\n    [(string-contains txt \"-\" \" \")\n      (string-contains txt \".\" \" \")\n      (string-contains txt \",\" \" \")\n      (string-contains txt \"?\" \" \")\n      (string-contains txt \"!\" \" \")\n      (string-contains txt \";\" \" \")\n      (string-contains txt \":\" \" \")\n      (string-contains txt \"(\" \" \")\n      (string-contains txt \")\" \" \")\n      (string-contains txt \"{\" \" \")\n      (string-contains txt \"}\" \" \")\n      (string-contains txt \"|\" \" \")\n      (string-contains txt \"&\" \" \")\n      (string-contains txt \"~\" \" \")\n      (string-contains txt \"`\" \" \")\n      (string-contains txt \"^\" \" \")\n      (string-contains txt \"\\\"\" \" \")\n      (string-contains txt \"\\\\\" \" \")\n      (string-contains txt \"?\" \" \")\n      (string-contains txt \"!\" \" \")\n      (string-contains txt \";\" \" \")\n      (string-contains txt \":\" \" \")\n      (string-contains txt \"(\" \" \")\n      (string-contains txt \")\" \" \")\n      (string-contains txt \"{\" \" \")\n      (string-contains txt \"}\" \" \")\n      (string-contains txt \"|\" \" \")\n      (string-contains txt \"&\" \" \")\n      (string-contains txt \"~\" \" \")\n      (string-contains txt \"`\" \" \")\n      (string-contains txt \"^\" \" \")\n      (string-contains txt \"\\\"\" \" \")\n      (string-contains txt \"",
    "  (cond\n    [(string-length txt) 0]\n    [(string-char-ci txt #\" \") #f]\n    [(string-char-ci txt #\"a\" #\"z\") #t]\n    [(string-char-ci txt #\"A\" #\"Z\") #t]\n    [#f #t]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-contains txt #\" \") #f]\n    [(string-contains txt #\"\\t\") #f]\n    [(string-contains txt #\"\\n\") #f]\n    [(string-contains txt #\"\\r\") #f]\n    [(string-contains txt #\"\\f\") #f]\n    [(string-contains txt #\"\\v\") #f]\n    [(string-contains txt #\"\\b\") #f]\n    [(string-contains txt #\"\\a\") #f]\n    [(string-contains txt #\"\\e\") #f]\n    [(string-contains txt #\"\\c\") #f]\n    [(string-contains txt #\"\\u00A0\") #f]\n    [(string-contains txt #\"\\u00A1\") #f]\n    [(string-contains txt #\"\\u00A2\") #f]\n    [(string-contains txt #\"\\u00A3\") #f]\n    [(string-contains txt #\"\\u00A4\") #f]\n    [(string-contains txt #\"\\u00A5\") #f]\n    [(string-contains txt #\"\\u00A6\") #f]\n    [(string-contains txt #\"\\u00A7\") #f]\n    [(string-contains txt #\"\\u00A8\") #f]\n    [(string-contains txt #\"\\u00A9\") #f]\n    [(string-contains txt #\"\\u00AA\") #f]\n    [(string-contains txt #\"\\u00AB\") #f]\n    [(string-contains txt #\"\\u00AC\") #f]\n    [(string-contains txt #\"\\u00AD\") #f]\n    [(string-contains txt #\"\\u00AE",
    "  (let ((last_char (char-at txt (- (string-length txt) 1))))\n    (and\n      (char-alphabetic? last_char)\n      (not (string-contains-word last_char txt)))))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string? txt)\n      (let ((last txt))\n        (if (not (string? last))\n            (check_if_last_char_is_a_letter (cdr last)))\n          (check_if_last_char_is_a_letter (car last)))\n      ]\n    [else\n      #f\n      ]))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-char txt #\" \")]\n    [(string-char txt #\" \")\n      (let ((i (string-length txt)))\n        (string-copy txt i - 1))\n      (let ((i (string-length txt)))\n        (string-copy txt i - 1))\n      (string-trim txt)\n      (check_if_last_char_is_a_letter txt)]\n    [(string-char txt #\" \")\n      (let ((i (string-length txt)))\n        (string-copy txt i - 1))\n      (let ((i (string-length txt)))\n        (string-copy txt i - 1))\n      (string-trim txt)\n      (check_if_last_char_is_a_letter txt)]\n    [(string-char txt #\" \")\n      (let ((i (string-length txt)))\n        (string-copy txt i - 1))\n      (let ((i (string-length txt)))\n        (string-copy txt i - 1))\n      (string-trim txt)\n      (check_if_last_char_is_a_letter txt)]\n    [(string-char txt #\" \")\n      (let ((i (string-length txt)))\n        (string-copy txt i - 1))\n      (let ((i (string-length txt)))\n        (string-copy txt i - 1))\n      (string-trim txt)\n      (check_if_last_char_is_a_letter txt)]\n    [(string-char txt #\" \")\n      (let ((i (string-length txt)))\n        (string-copy txt i - 1))\n      (let ((i (string-length txt)))\n        (string-copy txt i - 1))\n      (string-trim txt)\n      (check_if_last_char_is_a_letter txt)]\n    [(string-char txt #\" \"",
    "  (let ((last (cdr txt)))\n    (if (null? last)\n      #f\n      (if (not (string=? last #\" \"))\n        (if (not (string=? last #\"\\n\"))\n          (if (not (string=? last #\"\\r\"))\n            (if (not (string=? last #\"\\t\"))\n              (if (not (string=? last #\"\\v\"))\n                (if (not (string=? last #\"\\f\"))\n                  (if (not (string=? last #\"\\b\"))\n                    (if (not (string=? last #\"\\a\"))\n                      #t\n                      #f
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-contains txt #\" \")]\n    [(string-contains txt #\" \")\n      (string-split txt #\" \")\n      (check_if_last_char_is_a_letter (cdr (last txt)))]\n    [#f]))\n\n;; Create a function that returns #t if the first character\n;; of a given string is an alphabetical character and is not\n;; a part of a word, and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_first_char_is_a_letter \"apple pie\")\n;; #f\n;; >>> (check_if_first_char_is_a_letter \"apple pi e\")\n;; #t\n;; >>> (check_if_first_char_is_a_letter \"apple pi e \")\n;; #f\n;; >>> (check_if_first_char_is_a_letter \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-contains txt \" \") #f]\n    [(string-contains txt \" \") #t]\n    [#f]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-contains txt #\" \") #f]\n    [(string-contains txt #\"\\t\") #f]\n    [(string-contains txt #\"\\n\") #f]\n    [(string-contains txt #\"\\r\") #f]\n    [(string-contains txt #\"\\f\") #f]\n    [(string-contains txt #\"\\v\") #f]\n    [(string-contains txt #\"\\b\") #f]\n    [(string-contains txt #\"\\a\") #f]\n    [(string-contains txt #\"\\e\") #f]\n    [(string-contains txt #\"\\c\") #f]\n    [(string-contains txt #\"\\d\") #f]\n    [(string-contains txt #\"\\p\") #f]\n    [(string-contains txt #\"\\s\") #f]\n    [(string-contains txt #\"\\r\") #f]\n    [(string-contains txt #\"\\n\") #f]\n    [(string-contains txt #\"\\t\") #f]\n    [(string-contains txt #\"\\f\") #f]\n    [(string-contains txt #\"\\v\") #f]\n    [(string-contains txt #\"\\b\") #f]\n    [(string-contains txt #\"\\a\") #f]\n    [(string-contains txt #\"\\e\") #f]\n    [(string-contains txt #\"\\c\") #f]\n    [(string-contains txt #\"\\d\") #f]\n    [(string-contains txt #\"\\p\") #f]\n    [(string-contains txt #\"\\s\") #f]\n    [(string-contains txt #\"\\r\") #f]\n    [(string-contains txt #\"\\n\") #f]",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-contains txt \" \")]\n    [(string-contains txt \" \")\n     (string-contains txt \" \")\n     (string-contains txt \" \")\n     (string-contains txt \" \")\n     (string-contains txt \" \")\n     (string-contains txt \" \")\n     (string-contains txt \" \")\n     (string-contains txt \" \")\n     (string-contains txt \" \")\n     (string-contains txt \" \")\n     (string-contains txt \" \")\n     (string-contains txt \" \")\n     (string-contains txt \" \")\n     (string-contains txt \" \")\n     (string-contains txt \" \")\n     (string-contains txt \" \")\n     (string-contains txt \" \")\n     (string-contains txt \" \")\n     (string-contains txt \" \")\n     (string-contains txt \" \")\n     (string-contains txt \" \")\n     (string-contains txt \" \")\n     (string-contains txt \" \")\n     (string-contains txt \" \")\n     (string-contains txt \" \")\n     (string-contains txt \" \")\n     (string-contains txt \" \")\n     (string-contains txt \" \")\n     (string-contains txt \" \")\n     (string-contains txt \" \")\n     (string-contains txt \" \")\n     (string-contains txt \" \")\n     (string-contains txt \" \")\n     (string-contains txt \" \")\n     (string-contains txt \" \")\n     (string-contains txt \" \")\n     (string-contains txt \" \")\n     (string-contains txt \" \")\n     (string-contains txt \" \")\n     (",
    "  (let ((last (string-tail txt)))\n    (if (not (string-empty? last))\n      (and (string-ci-caseless-match? last #\"a-zA-Z\")\n           (not (string-ci-caseless-match? last #\"\\\\s\")))\n      #t\n      #f)))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string? txt)\n      (let ((last (string-end txt)))\n        (if (and\n              (not (string-empty? txt))\n              (char-alphabetic? (string-ref last -1)))\n          (string-set! last (-1 #\\newline))\n          (string-set! last (-1 #\\space))\n          (string-set! last (-1 #\\space))\n          (string-set! last (-1 #\\space))\n          (string-set! last (-1 #\\space))\n          (string-set! last (-1 #\\space))\n          (string-set! last (-1 #\\space))\n          (string-set! last (-1 #\\space))\n          (string-set! last (-1 #\\space))\n          (string-set! last (-1 #\\space))\n          (string-set! last (-1 #\\space))\n          (string-set! last (-1 #\\space))\n          (string-set! last (-1 #\\space))\n          (string-set! last (-1 #\\space))\n          (string-set! last (-1 #\\space))\n          (string-set! last (-1 #\\space))\n          (string-set! last (-1 #\\space))\n          (string-set! last (-1 #\\space))\n          (string-set! last (-1 #\\space))\n          (string-set! last (-1 #\\space))\n          (string-set! last (-1 #\\space))\n          (string-set! last (-1 #\\space))\n          (string-set! last (-1 #\\space))\n          (string-set! last (-1 #\\space))\n          (string-set! last (-1 #\\space))\n          (string-set! last (-1 #\\space))\n          (string-set! last (-1 #\\space))\n          (string-set! last (-1 #\\space))\n          (string-set! last (-1 #\\space))\n          (string-set! last (-1 #\\space))\n          (string-set! last (-1 #\\space))\n          (string-set! last (-1 #\\space))\n          (string",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-contains txt #\" \")]\n    [(string-contains txt #\" \")\n      (string-split txt #\" \")\n      (string-length (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (last (",
    "  (let ((last (string-end txt)))\n    (if (char-alphabetic? (string-ref last -1))\n        (not (string-contains-word last))\n        #t\n      #f)))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-index-of txt #\" \") 0]\n    [(string-index-of txt #\" \") 1]\n    [(string-index-of txt #\" \") 2]\n    [(string-index-of txt #\" \") 3]\n    [(string-index-of txt #\" \") 4]\n    [(string-index-of txt #\" \") 5]\n    [(string-index-of txt #\" \") 6]\n    [(string-index-of txt #\" \") 7]\n    [(string-index-of txt #\" \") 8]\n    [(string-index-of txt #\" \") 9]\n    [(string-index-of txt #\" \") 10]\n    [(string-index-of txt #\" \") 11]\n    [(string-index-of txt #\" \") 12]\n    [(string-index-of txt #\" \") 13]\n    [(string-index-of txt #\" \") 14]\n    [(string-index-of txt #\" \") 15]\n    [(string-index-of txt #\" \") 16]\n    [(string-index-of txt #\" \") 17]\n    [(string-index-of txt #\" \") 18]\n    [(string-index-of txt #\" \") 19]\n    [(string-index-of txt #\" \") 20]\n    [(string-index-of txt #\" \") 21]\n    [(string-index-of txt #\" \") 22]\n    [(string-index-of txt #\" \") 23]\n    [(string-index-of txt #\" \") 24]\n    [(string-index-of txt #\" \") 25]\n    [(string-index-of txt #\" \") 26]\n    [(string-index-of txt #\" \") 27]\n    [(string-index-of",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-contains txt #\" \")]\n    [(string-contains txt #\" \")\n      (string-contains txt #\" \")\n      (string-contains txt #\" \")\n      (string-contains txt #\" \")\n      (string-contains txt #\" \")\n      (string-contains txt #\" \")\n      (string-contains txt #\" \")\n      (string-contains txt #\" \")\n      (string-contains txt #\" \")\n      (string-contains txt #\" \")\n      (string-contains txt #\" \")\n      (string-contains txt #\" \")\n      (string-contains txt #\" \")\n      (string-contains txt #\" \")\n      (string-contains txt #\" \")\n      (string-contains txt #\" \")\n      (string-contains txt #\" \")\n      (string-contains txt #\" \")\n      (string-contains txt #\" \")\n      (string-contains txt #\" \")\n      (string-contains txt #\" \")\n      (string-contains txt #\" \")\n      (string-contains txt #\" \")\n      (string-contains txt #\" \")\n      (string-contains txt #\" \")\n      (string-contains txt #\" \")\n      (string-contains txt #\" \")\n      (string-contains txt #\" \")\n      (string-contains txt #\" \")\n      (string-contains txt #\" \")\n      (string-contains txt #\" \")\n      (string-contains txt #\" \")\n      (string-contains txt #\" \")\n      (string-contains txt #\" \")\n      (string-contains txt #\" \")\n      (string-contains txt #\" \")\n      ",
    "  (cond\n    [(string-length txt) 0]\n    [(string-last txt) #f]\n    [(string-last txt) (string-join \" \" (string-split txt \" \"))]\n    [#t]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-char txt (string-length txt) -1) #f]\n    [(string-char txt (string-length txt) -1) (string-match \"\\\\w+\" (string-substring txt (string-length txt) -1)) #t]\n  ))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-index-of txt #\" \") 0]\n    [(string-index-of txt #\" \") 1]\n    [(string-index-of txt #\" \") 2]\n    [(string-index-of txt #\" \") 3]\n    [(string-index-of txt #\" \") 4]\n    [(string-index-of txt #\" \") 5]\n    [(string-index-of txt #\" \") 6]\n    [(string-index-of txt #\" \") 7]\n    [(string-index-of txt #\" \") 8]\n    [(string-index-of txt #\" \") 9]\n    [(string-index-of txt #\" \") 10]\n    [(string-index-of txt #\" \") 11]\n    [(string-index-of txt #\" \") 12]\n    [(string-index-of txt #\" \") 13]\n    [(string-index-of txt #\" \") 14]\n    [(string-index-of txt #\" \") 15]\n    [(string-index-of txt #\" \") 16]\n    [(string-index-of txt #\" \") 17]\n    [(string-index-of txt #\" \") 18]\n    [(string-index-of txt #\" \") 19]\n    [(string-index-of txt #\" \") 20]\n    [(string-index-of txt #\" \") 21]\n    [(string-index-of txt #\" \") 22]\n    [(string-index-of txt #\" \") 23]\n    [(string-index-of txt #\" \") 24]\n    [(string-index-of txt #\" \") 25]\n    [(string-index-of txt #\" \") 26]\n    [(string-index-of txt #\" \") 27]\n    [(string-index-of",
    "  (cond\n    [(string-length txt) 0]\n    [(string-char-ci txt #\" \") #f]\n    [(string-char-ci txt #\"a\") #f]\n    [(string-char-ci txt #\"e\") #f]\n    [(string-char-ci txt #\"i\") #f]\n    [(string-char-ci txt #\"o\") #f]\n    [(string-char-ci txt #\"u\") #f]\n    [(string-char-ci txt #\"y\") #f]\n    [(string-char-ci txt #\"A\") #f]\n    [(string-char-ci txt #\"E\") #f]\n    [(string-char-ci txt #\"I\") #f]\n    [(string-char-ci txt #\"O\") #f]\n    [(string-char-ci txt #\"U\") #f]\n    [(string-char-ci txt #\"Y\") #f]\n    [#t #f]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string? txt)\n      (let ((str (string-trim txt)))\n        (if (empty? str)\n            #f\n            (let ((last (string-trim (string-tail str))))\n              (if (char-alphabetic? last)\n                  #t\n                  #f))))]\n    [#f t]))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-index-of txt #\" \") < 0]\n    [(string-index-of txt #\" \") > 0]\n    [(string-index-of txt #\" \") > 0]\n    [(string-index-of txt #\" \") > 0]\n    [(string-index-of txt #\" \") > 0]\n    [(string-index-of txt #\" \") > 0]\n    [(string-index-of txt #\" \") > 0]\n    [(string-index-of txt #\" \") > 0]\n    [(string-index-of txt #\" \") > 0]\n    [(string-index-of txt #\" \") > 0]\n    [(string-index-of txt #\" \") > 0]\n    [(string-index-of txt #\" \") > 0]\n    [(string-index-of txt #\" \") > 0]\n    [(string-index-of txt #\" \") > 0]\n    [(string-index-of txt #\" \") > 0]\n    [(string-index-of txt #\" \") > 0]\n    [(string-index-of txt #\" \") > 0]\n    [(string-index-of txt #\" \") > 0]\n    [(string-index-of txt #\" \") > 0]\n    [(string-index-of txt #\" \") > 0]\n    [(string-index-of txt #\" \") > 0]\n    [(string-index-of txt #\" \") > 0]\n    [(string-index-of txt #\" \") > 0]\n    [(string-index-of txt #\" \") > 0]\n    [(string-index-of txt #\" \") > 0]\n    [(string-index-of txt #\" \") > 0]\n    [(string-index-of txt #\" \") > 0",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-char txt #\" \")]\n    [(string-char txt #\" \")\n     (string-length (string-split txt #\" \"))]\n    [#t]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (let ((last (string-tail txt)))\n    (if (not (string-empty? last))\n      (and (string-ci=? (string-upcase last) #\"A\")\n\t  (not (string-ci=? last #\" \"))\n\t  (not (string-ci=? last #\"-\"))\n\t  (not (string-ci=? last #\"_\"))\n\t  (not (string-ci=? last #\"\\n\"))))\n      #f\n      #t))))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-contains txt #\" \")]\n    [(string-contains txt #\" \")\n     (string-split txt #\" \")\n     (check_if_last_char_is_a_letter (car (cdr txt)))]\n    [#f]))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string? txt)\n      (let ((last txt))\n        (if (string? last)\n            (let ((last-char (char-ci (string-ref last last))))\n              (not (in-word? last-char))))\n          #t)\n      (else\n        #f))]))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-last txt) #f]\n    [(string-last txt) (string-join \" \" (string-split txt \" \"))]\n    [#t]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-char-ci txt #\" \") #f]\n    [(string-char-ci txt #\"a\") #f]\n    [(string-char-ci txt #\"e\") #f]\n    [(string-char-ci txt #\"i\") #f]\n    [(string-char-ci txt #\"o\") #f]\n    [(string-char-ci txt #\"u\") #f]\n    [(string-char-ci txt #\"y\") #f]\n    [(string-char-ci txt #\"A\") #f]\n    [(string-char-ci txt #\"E\") #f]\n    [(string-char-ci txt #\"I\") #f]\n    [(string-char-ci txt #\"O\") #f]\n    [(string-char-ci txt #\"U\") #f]\n    [(string-char-ci txt #\"Y\") #f]\n    [#t #f]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-contains txt #\" \")]\n    [(string-contains txt #\" \")\n      (string-split txt #\" \")\n      (check_if_last_char_is_a_letter (cdr (last txt)))\n      ]\n    )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-char-ci txt #\" \") #f]\n    [(string-char-ci txt #\"a\") #f]\n    [(string-char-ci txt #\"e\") #f]\n    [(string-char-ci txt #\"i\") #f]\n    [(string-char-ci txt #\"o\") #f]\n    [(string-char-ci txt #\"u\") #f]\n    [(string-char-ci txt #\"y\") #f]\n    [(string-char-ci txt #\"A\") #f]\n    [(string-char-ci txt #\"E\") #f]\n    [(string-char-ci txt #\"I\") #f]\n    [(string-char-ci txt #\"O\") #f]\n    [(string-char-ci txt #\"U\") #f]\n    [(string-char-ci txt #\"Y\") #f]\n    [#t #f]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-contains txt #\" \")]\n    [(string-contains txt #\" \")\n      (string-split txt #\" \")\n      (check_if_last_char_is_a_letter (cdr (last txt)))\n      (check_if_last_char_is_a_letter (car (last txt)))\n      (check_if_last_char_is_a_letter (car (cdr (last txt))))\n      (check_if_last_char_is_a_letter (cdr (cdr (last txt))))\n      (check_if_last_char_is_a_letter (car (cdr (last txt))))\n      (check_if_last_char_is_a_letter (car (cdr (cdr (last txt)))))]\n    [else #f])\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-contains txt #\" \") #f]\n    [(string-contains txt #\" \") #t]\n    [(string-contains txt #\"a\") #f]\n    [(string-contains txt #\"a\") #t]\n    [(string-contains txt #\"e\") #f]\n    [(string-contains txt #\"e\") #t]\n    [(string-contains txt #\"i\") #f]\n    [(string-contains txt #\"i\") #t]\n    [(string-contains txt #\"o\") #f]\n    [(string-contains txt #\"o\") #t]\n    [(string-contains txt #\"u\") #f]\n    [(string-contains txt #\"u\") #t]\n    [(string-contains txt #\"y\") #f]\n    [(string-contains txt #\"y\") #t]\n    [(string-contains txt #\" \") #f]\n    [(string-contains txt #\" \") #t]\n    [(string-contains txt #\"p\") #f]\n    [(string-contains txt #\"p\") #t]\n    [(string-contains txt #\"i\") #f]\n    [(string-contains txt #\"e\") #t]\n    [(string-contains txt #\" \") #f]\n    [(string-contains txt #\" \") #t]\n    [(string-contains txt #\"p\") #f]\n    [(string-contains txt #\"i\") #t]\n    [(string-contains txt #\"e\") #f]\n    [(string-contains txt #\" \") #t]\n    [(string-contains txt #\" \") #f]\n    [(string-contains txt #\"p\") #t]\n    [(string-contains t",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-contains txt \" \")]\n    [(string-contains txt \" \")\n      (string-split txt \" \")\n      (check_if_last_char_is_a_letter (car (cdr txt)))]\n    [#f]))\n\n;; Create a function that returns #t if the given string\n;; contains a word that starts with the given prefix and\n;; is followed by a space, and #f otherwise.\n;; Examples:\n;; >>> (check_if_string_contains_a_word \"apple pie\")\n;; #f\n;; >>> (check_if_string_contains_a_word \"apple pie \")\n;; #t\n;; >>> (check_if_string_contains_a_word \"apple pie \" \"pie\")\n;; #t\n;; >>> (check_if_string_contains_a_word \"apple pie \" \"pie \")\n;; #f\n;; >>> (check_if_string_contains_a_word \"apple pie \" \"pie \" \"pie\")\n;; #f\n;; >>> (check_if_string_contains_a_word \"apple pie \" \"pie \" \"pie \")\n;; #t\n;; >>> (check_if_string_contains_a_word \"apple pie \" \"pie \" \"pie \" \"pie\")\n;; #t\n;; >>> (check_if_string_contains_a_word \"apple pie \" \"pie \" \"pie \" \"pie \")\n;; #f\n;; >>> (check_if_string_contains_a_word \"apple pie \" \"pie \" \"pie \" \"pie \" \"pie\")\n;; #f\n;; >>> (check_if_string_contains_a_word \"apple pie \" \"pie \" \"pie \" \"pie \" \"pie \")\n;; #t\n;; >>> (check_if_string_contains_a_word \"apple pie \" \"pie \" \"pie \" \"pie \" \"pie \" \"pie\")\n;; #t\n;; >>> (check_if_string_contains_a_word \"apple pie \" \"pie \" \"pie \" \"pie \"",
    "  (cond\n    [(string-length txt) 0]\n    [(string-char txt (string-length txt) - 1) #f]\n    [(string-char txt (string-length txt) - 1) (string-match \"\\\\w\" (string-substring txt (string-length txt) - 1))]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string? txt)\n      (let ((last txt))\n        (if (string? last)\n            (string-tail? last)\n            (string-empty? last)))\n      (not (string-empty? txt))]\n    [else\n      #f]))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (let ((last_char (char-at txt (length txt) - 1)))\n    (if (char-alphabetic? last_char)\n      (not (string-contains? \" \" last_char))\n      #t)))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-char-ci txt #\" \") #f]\n    [(string-char-ci txt #\"a\" #\"z\") #t]\n    [#f]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (let ((last (string-end txt)))\n    (if (char-alphabetic? (string-ref last -1))\n      (not (string-contains-any-of txt \" \\n\\t\\r\"))\n      #t\n      #f)))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (let ((last (string-tail txt)))\n    (if (and (not (string-empty? last))\n\t    (string-ci=? (string-upcase last) \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\n      (string-ci=? last \"abcdefghijklmnopqrstuvwxyz\")\n      (string-ci=? last \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n      (string-ci=? last \"abcdefghijklmnopqrstuvwxyz\"))))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    ((null? txt) #f)\n    (else\n      (let ((last (cdr txt)))\n        (cond\n          ((null? last) #f)\n          (else\n            (let ((word (car last)))\n              (cond\n                ((null? word) #f)\n                (else\n                  (let ((letter (car word)))\n                    (cond\n                      ((eq? letter #\\\\space) #f)\n                      (else\n                        (let ((next (cdr word)))\n                          (cond\n                            ((null? next) #t)\n                            (else\n                              (let ((next-letter (car next)))\n                                (cond\n                                  ((eq? next-letter #\\\\space) #f)\n                                  (else\n                                    (let ((next-next (cdr next)))\n                                      (cond\n                                        ((null? next-next) #t)\n                                        (else\n                                          (let ((next-next-letter (car next-next)))\n                                            (cond\n                                              ((eq? next-next-letter #\\\\space) #f)\n                                              (else\n                                                (let ((next-next-next (cdr next-next)))\n                                                  (cond\n                                                    ((null? next-next-next) #t)\n                                                    (else\n                                                      (let ((next-next-next-letter (car next-next-next)))\n                                                        (cond\n                                                          ((eq? next-next-next-letter #\\\\space) #f)\n                                                          (else\n                                                           (let ((next-next-next-next (cdr next-next-next)))\n                                                              (cond\n                                                                ((null? next-next-next-next) #t)\n                                                                (else\n                                                                  (let ((next-next-next-next-letter (car next-next-next-next)))\n                                                                    (cond\n                                                                      ((eq? next-next-next-next-letter #",
    "  (let ((last (string-tail txt)))\n    (if (not (string-empty? last))\n      (and (string-ci=? (string-upcase last) #\"A\" #\"Z\")\n           (not (string-ci=? last #\" \"))\n           (not (string-ci=? last #\"-\")))\n      #t\n      #f)))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-last txt) #f]\n    [(string-last txt) (string-contains txt #\" \")]\n    [(string-last txt) (string-contains txt #\"\\t\")]\n    [(string-last txt) (string-contains txt #\"\\n\")]\n    [(string-last txt) (string-contains txt #\"\\r\")]\n    [(string-last txt) (string-contains txt #\"\\f\")]\n    [(string-last txt) (string-contains txt #\"\\v\")]\n    [(string-last txt) (string-contains txt #\"\\b\")]\n    [(string-last txt) (string-contains txt #\"\\a\")]\n    [(string-last txt) (string-contains txt #\"\\e\")]\n    [(string-last txt) (string-contains txt #\"\\c\")]\n    [(string-last txt) (string-contains txt #\"\\u\")]\n    [(string-last txt) (string-contains txt #\"\\U\")]\n    [(string-last txt) (string-contains txt #\"\\l\")]\n    [(string-last txt) (string-contains txt #\"\\L\")]\n    [(string-last txt) (string-contains txt #\"\\o\")]\n    [(string-last txt) (string-contains txt #\"\\O\")]\n    [(string-last txt) (string-contains txt #\"\\x\")]\n    [(string-last txt) (string-contains txt #\"\\X\")]\n    [(string-last txt) (string-contains txt #\"\\0\")]\n    [(string-last txt) (string-contains txt #\"\\1\")]\n    [(string-last txt) (string-contains txt #\"\\2\")]\n    [",
    "  (cond\n    ((null? txt) #f)\n    (else\n      (let ((last (cdr txt)))\n        (cond\n          ((null? last) #f)\n          (else\n            (let ((word (car last)))\n              (cond\n                ((null? word) #f)\n                (else\n                  (let ((letter (car word)))\n                    (cond\n                      ((eq? letter #\\\\space) #f)\n                      (else\n                        (let ((next (cdr word)))\n                          (eq? (car next) #\\\\space)\n                          (else\n                            (eq? (car letter) #\\\\space)\n                            (else\n                              (eq? (car next) #\\\\space)\n                              (else\n                                (eq? (car letter) #\\\\space)\n                                #t))))))))))))))))))))))\n\n;;; (check_if_last_char_is_a_letter \"apple pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pi e\")\n;;; #t\n;;; (check_if_last_char_is_a_letter \"apple pi e \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pie \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pie pi\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pie pi \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pie pi e\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pie pi e \")\n;;;",
    "  (cond\n    ((null? txt) #f)\n    ((char=? (cdr txt) #\\\\space) #t)\n    (else #f)\n  )\n)\n\n;; Create a function that returns #t if the first character\n;; of a given string is a letter and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_first_char_is_a_letter \"apple pie\")\n;; #f\n;; >>> (check_if_first_char_is_a_letter \"apple pi e\")\n;; #t\n;; >>> (check_if_first_char_is_a_letter \"apple pi e \")\n;; #f\n;; >>> (check_if_first_char_is_a_letter \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-contains txt #\" \") #f]\n    [(string-contains txt #\"\\n\") #f]\n    [(string-contains txt #\"\\r\") #f]\n    [(string-contains txt #\"\\t\") #f]\n    [(string-contains txt #\"\\v\") #f]\n    [(string-contains txt #\"\\f\") #f]\n    [(string-contains txt #\"\\b\") #f]\n    [(string-contains txt #\"\\a\") #f]\n    [(string-contains txt #\"\\e\") #f]\n    [(string-contains txt #\"\\d\") #f]\n    [(string-contains txt #\"\\s\") #f]\n    [(string-contains txt #\"\\w\") #f]\n    [(string-contains txt #\"\\W\") #f]\n    [(string-contains txt #\"\\c\") #f]\n    [(string-contains txt #\"\\C\") #f]\n    [(string-contains txt #\"\\l\") #f]\n    [(string-contains txt #\"\\L\") #f]\n    [(string-contains txt #\"\\u\") #f]\n    [(string-contains txt #\"\\U\") #f]\n    [(string-contains txt #\"\\n\") #f]\n    [(string-contains txt #\"\\r\") #f]\n    [(string-contains txt #\"\\t\") #f]\n    [(string-contains txt #\"\\v\") #f]\n    [(string-contains txt #\"\\f\") #f]\n    [(string-contains txt #\"\\b\") #f]\n    [(string-contains txt #\"\\a\") #f]\n    [(string-contains txt #\"\\e\") #f]",
    "  (let ((i (length txt)))\n    (if (eq i 0)\n      #f\n      (let ((c (char-ci (string-ci txt i))))\n        (if (char-alphabetic? c)\n          #t\n          (check_if_last_char_is_a_letter (string-drop txt i)))))))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    ((null? txt) #f)\n    (else\n      (let ((last (cdr txt)))\n        (cond\n          ((null? last) #f)\n          (else\n            (let ((c (car last)))\n              (cond\n                ((#\"A\" <= c) && (c <= #\"Z\"))\n                (else\n                  (let ((w (string-split c txt)))\n                    (and (car w) (cdr w)))))\n              (else\n                #f)))))))\n;;; (check_if_last_char_is_a_letter \"apple pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pi e\")\n;;; #t\n;;; (check_if_last_char_is_a_letter \"apple pi e \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"\")\n;;; #f\n))\n\n;;; (check_if_last_char_is_a_letter \"apple pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pi e\")\n;;; #t\n;;; (check_if_last_char_is_a_letter \"apple pi e \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pie \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pie \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pie \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pie \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pie \")\n;;; #f\n;;; (check_if_last_char_is_a_",
    "  (cond\n    [(string? txt)\n      (let ((last txt))\n        (if (string? last)\n            (string-tail? last)\n            (string-empty? last)))\n      (not (string-empty? txt))]\n    [#f t]))\n\n;; Create a function that returns #t if the given string\n;; contains a word and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_string_contains_a_word \"apple pie\")\n;; #t\n;; >>> (check_if_string_contains_a_word \"apple pie \")\n;; #f\n;; >>> (check_if_string_contains_a_word \"apple pie \")\n;; #f\n;; >>> (check_if_string_contains_a_word \"apple pie \")\n;; #f\n;; >>> (check_if_string_contains_a_word \"apple pie \")\n;; #f\n;; >>> (check_if_string_contains_a_word \"apple pie \")\n;; #f\n;; >>> (check_if_string_contains_a_word \"apple pie \")\n;; #f\n;; >>> (check_if_string_contains_a_word \"apple pie \")\n;; #f\n;; >>> (check_if_string_contains_a_word \"apple pie \")\n;; #f\n;; >>> (check_if_string_contains_a_word \"apple pie \")\n;; #f\n;; >>> (check_if_string_contains_a_word \"apple pie \")\n;; #f\n;; >>> (check_if_string_contains_a_word \"apple pie \")\n;; #f\n;; >>> (check_if_string_contains_a_word \"apple pie \")\n;; #f\n;; >>> (check_if_string_contains_a_word \"apple pie \")\n;; #f\n;; >>> (check_if_string_contains_a_word \"apple pie \")\n;; #f\n;; >>> (check_if_string_contains_a_word \"apple pie \")\n;; #f",
    "  (cond\n    [(string? txt)\n      (let ((str (string-trim txt)))\n        (if (string? str)\n            (let ((last (string-trim (string-tail str))))\n              (if (string? last)\n                  (string-ci=? last #\"a-zA-Z\")\n                  #t))))\n      #f]\n    [#f t]))\n\n;;; (check_if_last_char_is_a_letter \"apple pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pi e\")\n;;; #t\n;;; (check_if_last_char_is_a_letter \"apple pi e \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"\")\n;;; #f\n\n;;; (check_if_last_char_is_a_letter \"apple pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pi e\")\n;;; #t\n;;; (check_if_last_char_is_a_letter \"apple pi e \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"\")\n;;; #f\n\n;;; (check_if_last_char_is_a_letter \"apple pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pi e\")\n;;; #t\n;;; (check_if_last_char_is_a_letter \"apple pi e \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"\")\n;;; #f\n\n;;; (check_if_last_char_is_a_letter \"apple pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pi e\")\n;;; #t\n;;; (check_if_last_char_is_a_letter \"apple pi e \")\n;;; #f\n;;; (check_if_last_char_is_a",
    "  (cond\n    [(string? txt)\n      (let ((last txt))\n        (if (string? last)\n            (string-tail? last)\n            (string-empty? last)))\n      (not (string-empty? txt))]\n    [#f t]))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string? txt)\n      (let ((last txt))\n        (if (string-empty? last)\n            #f\n            (if (not (string-ci=? last #\"\\s\")))\n              #t\n              #f))]\n    [#f t]))\n\n;;; (check_if_last_char_is_a_letter \"apple pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pi e\")\n;;; #t\n;;; (check_if_last_char_is_a_letter \"apple pi e \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"\")\n;;; #f\n\n;;; (check_if_last_char_is_a_letter \"apple pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pi e\")\n;;; #t\n;;; (check_if_last_char_is_a_letter \"apple pi e \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"\")\n;;; #f\n\n;;; (check_if_last_char_is_a_letter \"apple pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pi e\")\n;;; #t\n;;; (check_if_last_char_is_a_letter \"apple pi e \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"\")\n;;; #f\n\n;;; (check_if_last_char_is_a_letter \"apple pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pi e\")\n;;; #t\n;;; (check_if_last_char_is_a_letter \"apple pi e \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"\")\n;;; #f\n\n;;; (check_if_last_char_is_",
    "  (cond\n    [(string? txt)\n      (let ((last txt))\n        (if (string? last)\n            (string-tail? last)\n            (check_if_last_char_is_a_letter (string-tail last))))]\n    [else\n      #f]))\n\n;;; (check_if_last_char_is_a_letter \"apple pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pi e\")\n;;; #t\n;;; (check_if_last_char_is_a_letter \"apple pi e \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"\")\n;;; #f\n\n;;; (check_if_last_char_is_a_letter \"apple pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pi e\")\n;;; #t\n;;; (check_if_last_char_is_a_letter \"apple pi e \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"\")\n;;; #f\n\n;;; (check_if_last_char_is_a_letter \"apple pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pi e\")\n;;; #t\n;;; (check_if_last_char_is_a_letter \"apple pi e \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"\")\n;;; #f\n\n;;; (check_if_last_char_is_a_letter \"apple pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pi e\")\n;;; #t\n;;; (check_if_last_char_is_a_letter \"apple pi e \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"\")\n;;; #f\n\n;;; (check_if_last_char_is_a",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-contains txt #\" \")]\n    [(string-contains txt #\" \")\n      (string-split txt #\" \")\n      (check_if_last_char_is_a_letter (string-join (first (rest txt))))]\n    [#t]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (let ((last_char (last txt)))\n    (if (char-alphabetic? last_char)\n      (not (string-split-at-last-char txt))\n      (#f))))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-contains txt #\" \")]\n    [(string-contains txt #\" \")\n      (string-split txt #\" \")\n      (string-length (last (last (string-split txt #\" \"))))\n      (not (string-contains (last (string-split txt #\" \")) #\" \"))]\n    [#t #f]))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string? txt)\n      (let ((len (string-length txt)))\n        (if (<= len 1)\n            #f\n            (let ((last (string-ref txt (string-length txt) - 1)))\n              (if (char-alphabetic? last)\n                  #t\n                  #f))))]\n    [#f txt]))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-char txt (string-length txt) - 1) #f]\n    [(string-char txt (string-length txt) - 1) (string-match \"\\\\w\" (string-substring txt (string-length txt) - 1))]\n    [#t txt]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-contains txt #\" \")]\n    [(string-contains txt #\" \")\n      (string-split txt \" \")\n      (check_if_last_char_is_a_letter (cdr (last txt)))]\n    [#t #f]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (let ((last (string-tail txt)))\n    (if (and (char-alphabetic? (car last))\n             (not (string-contains-word last)))\n      #t\n      #f)))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-last-char txt)\n      (cond\n        [(string-contains? \"abcdefghijklmnopqrstuvwxyz\"\n                  (string-to-list (string-trim txt)))\n          #t]\n        [#f]\n      )\n    ]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-last txt) #f]\n    [(string-last txt) (string-char-ci txt #\"a-zA-Z\")]\n    [#t]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-contains txt #\" \")]\n    [(string-contains txt #\"\\n\")]\n    [(string-contains txt #\"\\r\")]\n    [(string-contains txt #\"\\t\")]\n    [(string-contains txt #\"\\v\")]\n    [(string-contains txt #\"\\f\")]\n    [(string-contains txt #\"\\b\")]\n    [(string-contains txt #\"\\a\")]\n    [(string-contains txt #\"\\e\")]\n    [(string-contains txt #\"\\c\")]\n    [(string-contains txt #\"\\d\")]\n    [(string-contains txt #\"\\s\")]\n    [(string-contains txt #\"\\w\")]\n    [(string-contains txt #\"\\u\")]\n    [(string-contains txt #\"\\U\")]\n    [(string-contains txt #\"\\L\")]\n    [(string-contains txt #\"\\l\")]\n    [(string-contains txt #\"\\u\")]\n    [(string-contains txt #\"\\U\")]\n    [(string-contains txt #\"\\L\")]\n    [(string-contains txt #\"\\l\")]\n    [(string-contains txt #\"\\u\")]\n    [(string-contains txt #\"\\U\")]\n    [(string-contains txt #\"\\L\")]\n    [(string-contains txt #\"\\l\")]\n    [(string-contains txt #\"\\u\")]\n    [(string-contains txt #\"\\U\")]\n    [(string-contains txt #\"\\L\")]\n    [(string-contains txt #\"\\l\")]\n    [(string-contains txt #\"\\u\")]\n    [(string-cont",
    "  (cond\n    [(string-length txt) 0]\n    [(string-char-ci txt #\"\\s\") #f]\n    [(string-char-ci txt #\"\\w\") #t]\n    [#f #f]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string? txt)\n      (let ((last txt))\n        (if (string? last)\n            (let ((last-char (char-upcase last)))\n              (not (string-ci=? last-char \"a\" \"z\" \"A\" \"Z\"))))\n          #t)\n        #f)\n    ]\n    [#f t]))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-char-ci txt #\" \") #f]\n    [(string-char-ci txt #\"a\" #\"z\") #t]\n    [(string-char-ci txt #\"A\" #\"Z\") #t]\n    [#f #t]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-contains txt \" \") #f]\n    [(string-contains txt \" \") #t]\n    [#f]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-last txt) #f]\n    [(string-last txt) (string-join \" \" (string-split txt \" \"))]\n    [#t]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-char txt #\" \")]\n    [(string-char txt #\" \")\n     (string-join\n      (map (lambda (x) (string-substring x 0 (string-length x) -1))\n       (string-split txt \" \"))\n      \"\")]\n    [#t #f]))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-char txt #\" \") #f]\n    [(string-char txt #\" \") #t]\n    [#f #t]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (let ((last (string-end txt)))\n    (if (and\n         (char-alphabetic? (string-ref last -1))\n         (not (string-contains-any-of txt \" \\n\\t\\r\")))\n      #t\n      #f)))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string? txt)\n      (let ((len (string-length txt)))\n        (if (>= len 1)\n            (string-ref txt (string-length txt) - 1)\n            (string-ref txt 0)))]\n    [else\n      #f]))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-char-ci txt #\" \") #f]\n    [(string-char-ci txt #\"a\" #\"z\") #t]\n    [#f]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-char-ci txt #\" \") #f]\n    [(string-char-ci txt #\"a\" #\"z\") #t]\n    [#f]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-char txt #\" \")]\n    [(string-char txt #\" \")\n      (let ((i (string-length txt)))\n        (string-substring txt i -1))\n      (let ((i (string-length txt)))\n        (string-substring txt 0 i -1))\n      (let ((i (string-length txt)))\n        (string-substring txt 0 i)))\n    (let ((i (string-length txt)))\n      (string-substring txt 0 i -1))\n    (let ((i (string-length txt)))\n      (string-substring txt 0 i)))\n  #t))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-contains txt #\" \")]\n    [(string-contains txt #\"\\n\")]\n    [(string-contains txt #\"\\r\")]\n    [(string-contains txt #\"\\t\")]\n    [(string-contains txt #\"\\v\")]\n    [(string-contains txt #\"\\f\")]\n    [(string-contains txt #\"\\b\")]\n    [(string-contains txt #\"\\a\")]\n    [(string-contains txt #\"\\e\")]\n    [(string-contains txt #\"\\c\")]\n    [(string-contains txt #\"\\d\")]\n    [(string-contains txt #\"\\s\")]\n    [(string-contains txt #\"\\w\")]\n    [(string-contains txt #\"\\u\")]\n    [(string-contains txt #\"\\U\")]\n    [(string-contains txt #\"\\L\")]\n    [(string-contains txt #\"\\l\")]\n    [(string-contains txt #\"\\p\")]\n    [(string-contains txt #\"\\P\")]\n    [(string-contains txt #\"\\o\")]\n    [(string-contains txt #\"\\O\")]\n    [(string-contains txt #\"\\x\")]\n    [(string-contains txt #\"\\X\")]\n    [(string-contains txt #\"\\0\")]\n    [(string-contains txt #\"\\1\")]\n    [(string-contains txt #\"\\2\")]\n    [(string-contains txt #\"\\3\")]\n    [(string-contains txt #\"\\4\")]\n    [(string-contains txt #\"\\5\")]\n    [(string-contains txt #\"\\6\")]\n    [(string-cont",
    "  (cond\n    [(string? txt)\n      (let ((last txt))\n        (if (string? last)\n            (check_if_last_char_is_a_letter last)\n            (check_if_last_char_is_a_letter (cdr last))))]\n    [else\n      #f]))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string? txt)\n      (let ((last txt))\n        (cond\n          [(not (string? last))\n            (return #f)\n          ]\n          [(let ((last-char (string-ref last 0)))\n            (cond\n              [(char? last-char)\n                (return #t)\n              ]\n              [(char? last-char)\n                (return #f)\n              ]\n            )\n          ]\n        )\n      )\n    ]\n    [else\n      (return #f)\n    ]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (let ((last (cdr txt)))\n    (if (null? last)\n      #f\n      (if (not (string=? last #\\\\space))\n        (if (not (string=? last #\\\\space #\\\\space))\n          (if (string=? last #\\\\space #\\\\space #\\\\space)\n            #f\n            (if (string=? last #\\\\space #\\\\space #\\\\space #\\\\space)\n              #f\n              (if (string=? last #\\\\space #\\\\space #\\\\space #\\\\space #\\\\space)\n                #f\n                (if (string=? last #\\\\space #\\\\space #\\\\space #\\\\space #\\\\space #\\\\space)\n                  #f\n                  (if (string=? last #\\\\space #\\\\space #\\\\space #\\\\space #\\\\space #\\\\space #\\\\space)\n                    #f\n                    (if (string=? last #\\\\space #\\\\space #\\\\space #\\\\space #\\\\space #\\\\space #\\\\space #\\\\space)\n                      #f\n                      (if (string=? last #\\\\space #\\\\space #\\\\space #\\\\space #\\\\space #\\\\space #\\\\space #\\\\space #\\\\space)\n                        #f\n                        (if (string=? last #\\\\space #\\\\space #\\\\space #\\\\space #\\\\space #\\\\space #\\\\space #\\\\space #\\\\space #\\\\space)\n                          #f\n                          (if (string=? last #\\\\space #\\\\space #\\\\space #\\\\space #\\\\space #\\\\space #\\\\space #\\\\space #\\\\space #\\\\space #\\\\space)\n                            #f\n                            (if (string=? last #\\\\space #\\\\space #\\\\space #\\\\space #\\\\space #\\\\space #\\\\space #\\\\space #\\\\space #\\\\space #\\\\space #\\\\space)\n                              #f\n                              (if (string=? last #\\\\space #\\\\space #\\\\space #\\\\space #\\\\space #\\\\space #\\\\space #\\\\space #\\\\space #\\\\space #\\\\space #\\\\space #\\\\space)\n                                #f\n                                #f))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-contains txt #\" \")]\n    [(string-contains txt #\" \")\n      (string-split txt #\" \")\n      (check_if_last_char_is_a_letter (car (cdr txt)))]\n    [#f]))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-contains txt #\" \")]\n    [(string-contains txt #\"\\n\")]\n    [(string-contains txt #\"\\r\")]\n    [(string-contains txt #\"\\t\")]\n    [(string-contains txt #\"\\v\")]\n    [(string-contains txt #\"\\f\")]\n    [(string-contains txt #\"\\b\")]\n    [(string-contains txt #\"\\a\")]\n    [(string-contains txt #\"\\e\")]\n    [(string-contains txt #\"\\c\")]\n    [(string-contains txt #\"\\n\")]\n    [(string-contains txt #\"\\r\")]\n    [(string-contains txt #\"\\t\")]\n    [(string-contains txt #\"\\v\")]\n    [(string-contains txt #\"\\f\")]\n    [(string-contains txt #\"\\b\")]\n    [(string-contains txt #\"\\a\")]\n    [(string-contains txt #\"\\e\")]\n    [(string-contains txt #\"\\c\")]\n    [(string-contains txt #\"\\n\")]\n    [(string-contains txt #\"\\r\")]\n    [(string-contains txt #\"\\t\")]\n    [(string-contains txt #\"\\v\")]\n    [(string-contains txt #\"\\f\")]\n    [(string-contains txt #\"\\b\")]\n    [(string-contains txt #\"\\a\")]\n    [(string-contains txt #\"\\e\")]\n    [(string-contains txt #\"\\c\")]\n    [(string-contains txt #\"\\n\")]\n    [(string-contains txt #\"\\r\")]\n    [(string-cont",
    "  (cond\n    [(string-length txt) 0]\n    [(string-last-char txt) #f]\n    [(string-last-char txt) (string-join \" \" (string-split txt \" \"))]\n    [#t]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string? txt)\n      (let ((len (string-length txt)))\n        (if (>= len 1)\n            (string-ref txt (string-length txt) - 1)\n            (string-ref txt 0))\n        (not (string-match \"\\\\w\" (string-ref txt 0))))]\n    [else\n      #f]))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-char txt #\" \")]\n    [(string-char txt #\" \")\n      (let ((last-char (string-char-next txt #\" \")))\n        (cond\n          [(string-char-ci? last-char #\"a\")\n            (string-ci-cmp last-char #\"a\")]\n          [(string-char-ci? last-char #\"A\")\n            (string-ci-cmp last-char #\"A\")]\n          [(string-char-ci? last-char #\"b\")\n            (string-ci-cmp last-char #\"b\")]\n          [(string-char-ci? last-char #\"B\")\n            (string-ci-cmp last-char #\"B\")]\n          [(string-char-ci? last-char #\"c\")\n            (string-ci-cmp last-char #\"c\")]\n          [(string-char-ci? last-char #\"C\")\n            (string-ci-cmp last-char #\"C\")]\n          [(string-char-ci? last-char #\"d\")\n            (string-ci-cmp last-char #\"d\")]\n          [(string-char-ci? last-char #\"D\")\n            (string-ci-cmp last-char #\"D\")]\n          [(string-char-ci? last-char #\"e\")\n            (string-ci-cmp last-char #\"e\")]\n          [(string-char-ci? last-char #\"E\")\n            (string-ci-cmp last-char #\"E\")]\n          [(string-char-ci? last-char #\"f\")\n            (string-ci-cmp last-char #\"f\")]\n          [(string-char-ci? last-char #\"F\")\n            (string-ci-cmp last-char #\"F\")]\n          [(string-char-ci? last-char #\"g\")\n            (string-ci-cmp last-char #\"g\")]\n          [(string-",
    "  (cond\n    [(string? txt)\n      (let ((last txt))\n        (if (string? last)\n            (string-tail? last)\n            (string-empty? last)))\n      (not (string-empty? txt))]\n    [#t #f]))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (let ((last (cdr txt)))\n    (if (null? last)\n      #f\n      (if (char=? (car last) #\\\\space)\n        #f\n        (if (char=? (car last) #\\\\space)\n          #f\n          (if (char=? (car last) #\\\\space)\n            #f\n            (if (char=? (car last) #\\\\space)\n              #f\n              (if (char=? (car last) #\\\\space)\n                #f\n                (if (char=? (car last) #\\\\space)\n                  #f\n                  (if (char=? (car last) #\\\\space)\n                    #f\n                    (if (char=? (car last) #\\\\space)\n                      #f\n                      (if (char=? (car last) #\\\\space)\n                        #f\n                        (if (char=? (car last) #\\\\space)\n                          #f\n                          (if (char=? (car last) #\\\\space)\n                            #f\n                            (if (char=? (car last) #\\\\space)\n                              #f\n                              (if (char=? (car last) #\\\\space)\n                                #f\n                                #f
    "  (let ((str (string-trim txt)))\n    (if (string-empty? str)\n      #f\n      (let ((last (string-ref str (- (string-length str) 1))))\n        (if (not (string-empty? last))\n          (string-ci=? last #\"a-zA-Z\")\n          #f))))))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-index-of txt #\" \") 0]\n    [(string-index-of txt #\" \") 1]\n    [(string-index-of txt #\" \") 2]\n    [(string-index-of txt #\" \") 3]\n    [(string-index-of txt #\" \") 4]\n    [(string-index-of txt #\" \") 5]\n    [(string-index-of txt #\" \") 6]\n    [(string-index-of txt #\" \") 7]\n    [(string-index-of txt #\" \") 8]\n    [(string-index-of txt #\" \") 9]\n    [(string-index-of txt #\" \") 10]\n    [(string-index-of txt #\" \") 11]\n    [(string-index-of txt #\" \") 12]\n    [(string-index-of txt #\" \") 13]\n    [(string-index-of txt #\" \") 14]\n    [(string-index-of txt #\" \") 15]\n    [(string-index-of txt #\" \") 16]\n    [(string-index-of txt #\" \") 17]\n    [(string-index-of txt #\" \") 18]\n    [(string-index-of txt #\" \") 19]\n    [(string-index-of txt #\" \") 20]\n    [(string-index-of txt #\" \") 21]\n    [(string-index-of txt #\" \") 22]\n    [(string-index-of txt #\" \") 23]\n    [(string-index-of txt #\" \") 24]\n    [(string-index-of txt #\" \") 25]\n    [(string-index-of txt #\" \") 26]\n    [(string-index-of txt #\" \") 27]\n    [(string-index-of",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-contains txt #\" \")]\n    [(string-contains txt #\" \")\n     (string-split txt #\" \")\n     (check_if_last_char_is_a_letter (cdr (last txt)))\n     (not (string-contains (last txt) #\" \"))]\n    [#f]))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-contains txt #\" \")]\n    [(string-contains txt #\" \")\n      (string-split txt #\" \")\n      (check_if_last_char_is_a_letter (cdr (last txt)))\n      ]\n    [#t #f]\n    )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string? txt)\n      (let ((last txt))\n        (if (string? last)\n            (string-trim/tail last)\n            (string-trim/tail last)\n          )\n        (if (not (string? last))\n            (string-trim/tail txt)\n            (string-trim/tail txt)\n          )\n        (if (not (string? last))\n            (string-trim/tail txt)\n            (string-trim/tail txt)\n          )\n        (if (not (string? last))\n            (string-trim/tail txt)\n            (string-trim/tail txt)\n          )\n        (if (not (string? last))\n            (string-trim/tail txt)\n            (string-trim/tail txt)\n          )\n        (if (not (string? last))\n            (string-trim/tail txt)\n            (string-trim/tail txt)\n          )\n        (if (not (string? last))\n            (string-trim/tail txt)\n            (string-trim/tail txt)\n          )\n        (if (not (string? last))\n            (string-trim/tail txt)\n            (string-trim/tail txt)\n          )\n        (if (not (string? last))\n            (string-trim/tail txt)\n            (string-trim/tail txt)\n          )\n        (if (not (string? last))\n            (string-trim/tail txt)\n            (string-trim/tail txt)\n          )\n        (if (not (string? last))\n            (string-trim/tail txt)\n            (string-trim/tail txt)\n          )\n        (if (not (string? last))\n            (string-trim/tail txt)\n            (string-trim/tail txt)\n          )\n        (if (not (string? last))\n            (string-trim/tail txt)\n            (string-trim/tail txt)\n          )\n",
    "  (cond\n    [(string-length txt) 0]\n    [(string-char-ci txt #\"\\s\") #f]\n    [(string-char-ci txt #\"\\w\") #t]\n    [#f #f]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    ((null? txt) #f)\n    (else\n      (let ((last txt))\n        (cond\n          ((null? last) #f)\n          (else\n            (let ((last-char (char-ci last)))\n              (not (in-word? last-char))))))))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-last txt) #f]\n    [(string-last txt) (string-ci-caseless-up-initial txt)]\n    [(string-last txt) (string-ci-caseless-up txt)]\n    [(string-last txt) (string-ci-caseless-up-final txt)]\n    [(string-last txt) (string-ci-caseless txt)]\n    [(string-last txt) (string-ci txt)]\n    [(string-last txt) (string txt)]\n    [(string-last txt) #t]\n    [else #f]))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string? txt)\n      (let ((str (string-trim txt)))\n        (if (string? str)\n            (let ((last (string-trim (string-tail str))))\n              (if (not (string? last))\n                  (string-trim (string-tail last)))\n                (string-trim (string-tail last))))\n          #t)\n      (else\n        #f))\n  )\n\n;; >>> (check_if_last_char_is_a_letter \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_letter \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_letter \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_letter \"\")\n;; #f\n;; >>> (check_if_last_char_is_a_letter \"apple\")\n;; #f\n;; >>> (check_if_last_char_is_a_letter \"apple \")\n;; #f\n;; >>> (check_if_last_char_is_a_letter \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_letter \"apple pie \")\n;; #f\n;; >>> (check_if_last_char_is_a_letter \"apple pie pi\")\n;; #f\n;; >>> (check_if_last_char_is_a_letter \"apple pie pi \")\n;; #f\n;; >>> (check_if_last_char_is_a_letter \"apple pie pi e\")\n;; #f\n;; >>> (check_if_last_char_is_a_letter \"apple pie pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_letter \"apple pie pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_letter \"apple pie pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_letter \"apple pie pi e \")\n;; #f\n;; >>> (check_if_last_char_",
    "  (let ((last (string-end txt)))\n    (if (and\n          (char-alphabetic? (string-ref last -1))\n          (not (string-contains-word last)))\n      #t\n      #f)))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-char txt (string-length txt) -1)\n     (string-contains txt #\" \")]\n    [#t #f]))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-contains txt #\" \")]\n    [(string-contains txt #\" \")\n      (string-split txt #\" \")\n      (check_if_last_char_is_a_letter (car (cdr txt)))\n      ]\n    )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-char-ci txt #\" \") #f]\n    [(string-char-ci txt #\"a\" #\"z\") #t]\n    [#f]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-char-ci txt #\"a\") #t]\n    [(string-char-ci txt #\"e\") #t]\n    [(string-char-ci txt #\"i\") #t]\n    [(string-char-ci txt #\"o\") #t]\n    [(string-char-ci txt #\"u\") #t]\n    [(string-char-ci txt #\"y\") #t]\n    [(string-char-ci txt #\" \") #t]\n    [#f (string-append txt \" \") (string-char-ci txt #\"a\")]\n    ))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-contains txt \" \") #f]\n    [(string-contains txt \" \") #t]\n    [#f]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-char txt (string-length txt) -1) #f]\n    [(string-char txt (string-length txt) -1) (string-join \" \" (split-string txt \" \"))]\n    [#t #f]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-char-ci txt #\" \") #f]\n    [(string-char-ci txt #\"a\" #\"z\") #t]\n    [#f]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-char-ci txt #\" \") #f]\n    [(string-char-ci txt #\"a\" #\"z\") #t]\n    [#f]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-contains txt \" \") #f]\n    [(string-contains txt \" \") #t]\n    [#t #f]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (let ((last (cdr txt)))\n    (if (null? last)\n      #f\n      (if (char=? (car last) #\\\\space)\n        #f\n        (if (char=? (car last) #\\\\space)\n          #f\n          (if (char=? (car last) #\\\\space)\n            #f\n            (if (char=? (car last) #\\\\space)\n              #f\n              (if (char=? (car last) #\\\\space)\n                #f\n                (if (char=? (car last) #\\\\space)\n                  #f\n                  (if (char=? (car last) #\\\\space)\n                    #f\n                    (if (char=? (car last) #\\\\space)\n                      #f\n                      (if (char=? (car last) #\\\\space)\n                        #f\n                        (if (char=? (car last) #\\\\space)\n                          #f\n                          (if (char=? (car last) #\\\\space)\n                            #f\n                            (if (char=? (car last) #\\\\space)\n                              #f\n                              (if (char=? (car last) #\\\\space)\n                                #f\n                                #f
    "  (cond\n    [(string-length txt) 0]\n    [(string-char-ci txt #\" \") #f]\n    [(string-char-ci txt #\"a\" #\"z\") #t]\n    [#f]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string? txt)\n      (let ((last (string-end txt)))\n        (if (and\n              (not (string-empty? txt))\n              (char-alphabetic? (string-ref last -1)))\n          (string-set! txt (string-copy! txt (string-drop! txt 1))))\n          (string-set! txt (string-append! txt \" \")))\n        (string-set! txt (string-append! txt txt)))\n      (string-set! txt txt)]\n    [else\n      (string-set! txt txt)])\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string? txt)\n      (let ((last txt))\n        (if (string? last)\n            (string-tail? last)\n            (string-ci-caseless-tail? last)))\n      (not (string-ci-caseless-tail? last))]\n    [#f t]))\n\n;;; (check_if_last_char_is_a_letter \"apple pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pi e\")\n;;; #t\n;;; (check_if_last_char_is_a_letter \"apple pi e \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"\")\n;;; #f\n\n;;; (check_if_last_char_is_a_letter \"apple pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pi e\")\n;;; #t\n;;; (check_if_last_char_is_a_letter \"apple pi e \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"\")\n;;; #f\n\n;;; (check_if_last_char_is_a_letter \"apple pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pi e\")\n;;; #t\n;;; (check_if_last_char_is_a_letter \"apple pi e \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"\")\n;;; #f\n\n;;; (check_if_last_char_is_a_letter \"apple pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pi e\")\n;;; #t\n;;; (check_if_last_char_is_a_letter \"apple pi e \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"\")\n;;; #f\n\n;;; (check_if_last",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-contains txt #\" \") #f]\n    [(string-contains txt #\"\\n\") #f]\n    [(string-contains txt #\"\\r\") #f]\n    [(string-contains txt #\"\\t\") #f]\n    [(string-contains txt #\"\\v\") #f]\n    [(string-contains txt #\"\\f\") #f]\n    [(string-contains txt #\"\\b\") #f]\n    [(string-contains txt #\"\\a\") #f]\n    [(string-contains txt #\"\\e\") #f]\n    [(string-contains txt #\"\\c\") #f]\n    [(string-contains txt #\"\\d\") #f]\n    [(string-contains txt #\"\\n\") #f]\n    [(string-contains txt #\"\\r\") #f]\n    [(string-contains txt #\"\\t\") #f]\n    [(string-contains txt #\"\\v\") #f]\n    [(string-contains txt #\"\\f\") #f]\n    [(string-contains txt #\"\\b\") #f]\n    [(string-contains txt #\"\\a\") #f]\n    [(string-contains txt #\"\\e\") #f]\n    [(string-contains txt #\"\\c\") #f]\n    [(string-contains txt #\"\\d\") #f]\n    [(string-contains txt #\"\\n\") #f]\n    [(string-contains txt #\"\\r\") #f]\n    [(string-contains txt #\"\\t\") #f]\n    [(string-contains txt #\"\\v\") #f]\n    [(string-contains txt #\"\\f\") #f]\n    [(string-contains txt #\"\\b\") #f]",
    "  (cond\n    [(string-length txt) 0]\n    [(string-last txt) #f]\n    [(string-last txt) (string-contains txt #\" \")]\n    [#t]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (let ((last_char (last txt)))\n    (if (char-alphabetic? last_char)\n      (not (find-word-boundary last_char))\n      #f)))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-contains txt #\" \")]\n    [(string-contains txt #\" \")\n     (string-contains (string-split txt #\" \") #\" \")\n     (not (string-contains (string-split txt #\" \") #\" \"))]\n    [#t #f]))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-last txt) #f]\n    [(string-last txt) (string-join \" \" (string-split txt \" \"))]\n    [#t]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-char-ci txt #\" \") #f]\n    [(string-char-ci txt #\"a\") #t]\n    [(string-char-ci txt #\"A\") #t]\n    [(string-char-ci txt #\"b\") #t]\n    [(string-char-ci txt #\"B\") #t]\n    [(string-char-ci txt #\"c\") #t]\n    [(string-char-ci txt #\"C\") #t]\n    [(string-char-ci txt #\"d\") #t]\n    [(string-char-ci txt #\"D\") #t]\n    [(string-char-ci txt #\"e\") #t]\n    [(string-char-ci txt #\"E\") #t]\n    [(string-char-ci txt #\"f\") #t]\n    [(string-char-ci txt #\"F\") #t]\n    [(string-char-ci txt #\"g\") #t]\n    [(string-char-ci txt #\"G\") #t]\n    [(string-char-ci txt #\"h\") #t]\n    [(string-char-ci txt #\"H\") #t]\n    [(string-char-ci txt #\"i\") #t]\n    [(string-char-ci txt #\"I\") #t]\n    [(string-char-ci txt #\"j\") #t]\n    [(string-char-ci txt #\"J\") #t]\n    [(string-char-ci txt #\"k\") #t]\n    [(string-char-ci txt #\"K\") #t]\n    [(string-char-ci txt #\"l\") #t]\n    [(string-char-ci txt #\"L\") #t]\n    [(string-char-ci txt #\"m\") #t]\n    [(string-char-ci txt #\"M\") #t]\n    [(string-char-ci txt",
    "  (let ((last (string-tail txt)))\n    (if (string-empty? last)\n      #f\n      (let ((last-char (string-ref last 0)))\n        (if (char-alphabetic? last-char)\n          #t\n          #f))))))\n\n;; Create a function that returns #t if the given string\n;; is a palindrome and #f otherwise.\n;; Examples:\n;; >>> (check_if_string_is_a_palindrome \"a man, a plan, a canal: Panama\")\n;; #t\n;; >>> (check_if_string_is_a_palindrome \"race a car\")\n;; #f\n;; >>> (check_if_string_is_a_palindrome \"a man, a plan, a canal: Panama\")\n;; #f\n;; >>> (check_if_string_is_a_palindrome \"\")\n;; #f",
    "  (cond\n    [(string? txt)\n      (let ((last txt))\n        (cond\n          [(not (string? last))\n            (return #f)\n          ]\n          [(char? last)\n            (let ((c last))\n              (not (string? c))\n              (not (char-alphabetic? c))\n              (return #t)\n            )\n          ]\n        )\n      )\n    ]\n    [(string? txt)\n      (return #f)\n    ]\n  )\n)\n\n;;; (check_if_last_char_is_a_letter \"apple pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pi e\")\n;;; #t\n;;; (check_if_last_char_is_a_letter \"apple pi e \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pie \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pie pi\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pie pi e\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pie pi e \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pie pi e pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pie pi e pie pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pie pi e pie pie pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pie pi e pie pie pie pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple",
    "  (cond\n    [(string? txt)\n      (let ((len (string-length txt)))\n        (if (<= len 1)\n          #f\n          (let ((last (string-ref txt (string-length txt) - 1)))\n            (if (not (string-ci=? #\"a-zA-Z\" last))\n                (if (not (string-ci=? #\"a-zA-Z\" (string-upcase last)))\n                    #t\n                    #f)))))\n      ]\n    [#f t]))\n\n;;; (check_if_last_char_is_a_letter \"apple pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pi e\")\n;;; #t\n;;; (check_if_last_char_is_a_letter \"apple pi e \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"\")\n;;; #f\n\n;;; (check_if_last_char_is_a_letter \"apple pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pi e\")\n;;; #t\n;;; (check_if_last_char_is_a_letter \"apple pi e \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"\")\n;;; #f\n\n;;; (check_if_last_char_is_a_letter \"apple pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pi e\")\n;;; #t\n;;; (check_if_last_char_is_a_letter \"apple pi e \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"\")\n;;; #f\n\n;;; (check_if_last_char_is_a_letter \"apple pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pi e\")\n;;; #t\n;;; (check_if_",
    "  (let ((last (cdr txt)))\n    (if (null? last)\n      #f\n      (if (not (string=? last \" \"))\n        (let ((last-char (car last)))\n          (if (not (string=? last-char \" \"))\n            (if (string=? last-char \"a\" \"z\" \"A\" \"Z\")\n              #t\n              #f))))))))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (let ((last (string-end txt)))\n    (if (and\n         (not (string-empty? txt))\n         (not (string-empty? (string-upcase (string-downcase last))))\n         (string-ci=? (string-upcase (string-downcase last)) #\"a\" #\"z\")))\n      #t\n      #f))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-char txt (string-length txt) - 1) #f]\n    [(string-char txt (string-length txt) - 1)\n     (let ((i (string-length txt) - 1))\n       (while (< i 0)\n         [(string-char txt i - 1)\n          (if (not (string-match \"\\\\s\" (string-join \" \" txt i)))\n              (return #t))\n          (setq i (string-decode-coding-system\n                   (string-coding-system (string-join \" \" txt i)))\n            (setq i (string-decode-coding-system\n                     (string-coding-system (string-join \" \" txt i))))\n            (setq i (string-decode-coding-system\n                     (string-coding-system (string-join \" \" txt i))))\n            (setq i (string-decode-coding-system\n                     (string-coding-system (string-join \" \" txt i))))\n            (setq i (string-decode-coding-system\n                     (string-coding-system (string-join \" \" txt i))))\n            (setq i (string-decode-coding-system\n                     (string-coding-system (string-join \" \" txt i))))\n            (setq i (string-decode-coding-system\n                     (string-coding-system (string-join \" \" txt i))))\n            (setq i (string-decode-coding-system\n                     (string-coding-system (string-join \" \" txt i))))\n            (setq i (string-decode-coding-system\n                     (string-coding-system (string-join \" \" txt i))))\n            (setq i (string-decode-coding-system\n                     (string-coding-system (string-join \" \" txt i))))\n            (setq i (string-decode-coding-system\n                     (string-coding-system (string-join \" \" txt i))))\n            (",
    "  (cond\n    ((null? txt) #f)\n    ((char=? (cdr txt) #\\\\space) #f)\n    (else\n      (let ((last (cdr txt)))\n        (cond\n          ((char=? last #\\\\space) #f)\n          ((char=? last #\\\\space) #f)\n          (else\n            (let ((word (cdr (cdr last))))\n              (cond\n                ((char=? (car word) #\\\\space) #f)\n                (else\n                  (let ((letter (car word)))\n                    (char=? letter (car last)))))\n            )\n          )\n        )\n      )\n    )\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-char-ci txt #\" \")]\n    [(string-char-ci txt #\"a\")\n     (string-char-ci txt #\"b\")\n     (string-char-ci txt #\"c\")\n     (string-char-ci txt #\"d\")\n     (string-char-ci txt #\"e\")\n     (string-char-ci txt #\"f\")\n     (string-char-ci txt #\"g\")\n     (string-char-ci txt #\"h\")\n     (string-char-ci txt #\"i\")\n     (string-char-ci txt #\"j\")\n     (string-char-ci txt #\"k\")\n     (string-char-ci txt #\"l\")\n     (string-char-ci txt #\"m\")\n     (string-char-ci txt #\"n\")\n     (string-char-ci txt #\"o\")\n     (string-char-ci txt #\"p\")\n     (string-char-ci txt #\"q\")\n     (string-char-ci txt #\"r\")\n     (string-char-ci txt #\"s\")\n     (string-char-ci txt #\"t\")\n     (string-char-ci txt #\"u\")\n     (string-char-ci txt #\"v\")\n     (string-char-ci txt #\"w\")\n     (string-char-ci txt #\"x\")\n     (string-char-ci txt #\"y\")\n     (string-char-ci txt #\"z\")\n     (string-char-ci txt #\"A\")\n     (string-char-ci txt #\"B\")\n     (string-char-ci txt #\"C\")\n     (string-char-ci txt #\"D\")\n     (string-char-ci txt #\"E\")\n     (string-char-ci txt #\"F\")\n     (string-char-ci txt #\"G\")\n     (string-char-ci txt #\"H\")\n     (string-",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-char-ci txt #\"a\" #\"z\") #t]\n    [(string-char-ci txt #\"A\" #\"Z\") #t]\n    [(string-char-ci txt #\"0\" #\"9\") #t]\n    [(string-char-ci txt #\" \") #t]\n    [#f (error \"Invalid string\")]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string? txt)\n      (let ((last txt))\n        (if (string? last)\n            (string-tail? last)\n            (string-empty? last)))\n      (not (string-empty? txt))]\n    [#f t]))\n\n;;; (check_if_last_char_is_a_letter \"apple pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pi e\")\n;;; #t\n;;; (check_if_last_char_is_a_letter \"apple pi e \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"\")\n;;; #f\n\n;;; (check_if_last_char_is_a_letter \"apple pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pi e\")\n;;; #t\n;;; (check_if_last_char_is_a_letter \"apple pi e \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"\")\n;;; #f\n\n;;; (check_if_last_char_is_a_letter \"apple pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pi e\")\n;;; #t\n;;; (check_if_last_char_is_a_letter \"apple pi e \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"\")\n;;; #f\n\n;;; (check_if_last_char_is_a_letter \"apple pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pi e\")\n;;; #t\n;;; (check_if_last_char_is_a_letter \"apple pi e \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"\")\n;;; #f\n\n;;; (check_if_last_char_is_a_letter \"",
    "  (let ((str (string->list txt)))\n    (if (null? str)\n      #f\n      (let ((last (cdr str)))\n        (if (null? last)\n          #f\n          (if (not (string-ci=? (car last) #\\\\space))\n            #t\n            #f))))))\n\n;; >>> (check_if_last_char_is_a_letter \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_letter \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_letter \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_letter \"\")\n;; #f\n;; >>> (check_if_last_char_is_a_letter \"apple pie \")\n;; #f\n;; >>> (check_if_last_char_is_a_letter \"apple pie \")\n;; #f\n;; >>> (check_if_last_char_is_a_letter \"apple pie \")\n;; #f\n;; >>> (check_if_last_char_is_a_letter \"apple pie \")\n;; #f\n;; >>> (check_if_last_char_is_a_letter \"apple pie \")\n;; #f\n;; >>> (check_if_last_char_is_a_letter \"apple pie \")\n;; #f\n;; >>> (check_if_last_char_is_a_letter \"apple pie \")\n;; #f\n;; >>> (check_if_last_char_is_a_letter \"apple pie \")\n;; #f\n;; >>> (check_if_last_char_is_a_letter \"apple pie \")\n;; #f\n;; >>> (check_if_last_char_is_a_letter \"apple pie \")\n;; #f\n;; >>> (check_if_last_char_is_a_letter \"apple pie \")\n;; #f\n;; >>> (check_if_last_char_is_a_letter \"apple pie \")\n;; #f\n;; >>> (check_if_last_char_is_a_letter \"apple",
    "  (cond\n    [(string-length txt) 0]\n    [(string-last-char txt) #f]\n    [(string-last-char txt)\n      (let ((word (string-split txt \" \")))\n        (and\n          (string-length word)\n          (string-length word)\n          (not (string-contains word \" \"))\n          (not (string-contains word \"-\"))))]\n  ))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-index-of txt #\" \") < (string-length txt) - 1]\n    [(string-index-of txt #\" \") < (string-length txt) - 2]\n    [(string-index-of txt #\" \") < (string-length txt) - 3]\n    [(string-index-of txt #\" \") < (string-length txt) - 4]\n    [(string-index-of txt #\" \") < (string-length txt) - 5]\n    [(string-index-of txt #\" \") < (string-length txt) - 6]\n    [(string-index-of txt #\" \") < (string-length txt) - 7]\n    [(string-index-of txt #\" \") < (string-length txt) - 8]\n    [(string-index-of txt #\" \") < (string-length txt) - 9]\n    [(string-index-of txt #\" \") < (string-length txt) - 10]\n    [(string-index-of txt #\" \") < (string-length txt) - 11]\n    [(string-index-of txt #\" \") < (string-length txt) - 12]\n    [(string-index-of txt #\" \") < (string-length txt) - 13]\n    [(string-index-of txt #\" \") < (string-length txt) - 14]\n    [(string-index-of txt #\" \") < (string-length txt) - 15]\n    [(string-index-of txt #\" \") < (string-length txt) - 16]\n    [(string-index-of txt #\" \") < (string-length txt) - 17]\n    [(string-index-of txt #\" \") < (string-length txt) - 18]\n    [(string-index-of txt #\" \") < (",
    "  (cond\n    [(string-length txt) 0]\n    [(string-char-ci txt #\" \") #f]\n    [(string-char-ci txt #\"a\" #\"z\") #t]\n    [(string-char-ci txt #\"A\" #\"Z\") #t]\n    [#f #t]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-last-char txt) #f]\n    [(string-last-char txt)\n      (let ((word (string-split txt \" \")))\n        (and (string-length word)\n             (string-length (string-join \" \" word))\n             (string-contains word #\" \")\n             (not (string-contains word #\"-\"))))]\n  ))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (let ((last (string-end txt)))\n    (if (char=? (string-ref last) #\\\\space)\n      #f\n      (char-alphabetic? (string-ref last))))\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-char-ci txt #\"\\s\") #f]\n    [(string-char-ci txt #\"\\w\") #t]\n    [#f #t]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string? txt)\n      (let ((last (string-length txt)))\n        (string-ref txt last))\n      (not (string-match \"\\\\w\" (string-ref txt last)))\n      (string-ref txt last)]\n    [#f txt]))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string? txt)\n      (let ((last txt))\n        (if (string? last)\n            (string-tail? last)\n            (string-empty? last)))\n      (not (string-empty? txt))]\n    [#f t]))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    ((null? txt) #f)\n    (else\n      (let ((last txt))\n        (cond\n          ((null? last) #f)\n          (else\n            (let ((last-char (char-at-last last)))\n              (and\n                (char-alphabetic? last-char)\n                (not (string-contains? \" \" last-char)))))))))))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-char-ci txt #\"a\" #\"z\") #t]\n    [(string-char-ci txt #\"A\" #\"Z\") #t]\n    [(string-char-ci txt #\"0\" #\"9\") #t]\n    [(string-char-ci txt #\" \") #t]\n    [#f (string-char-ci txt #\" \") #t]\n    [#f #f]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (let ((last (string-tail txt)))\n    (if (and\n          (char=? last #\\\\space)\n          (not (string-contains last #\\\\space)))\n      #t\n      #f)))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (let ((i (length txt)))\n    (if (eq i 0)\n      #f\n      (let ((c (char-ci (string-ci txt i))))\n        (if (char-alphabetic? c)\n          #t\n          #f))))))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-last txt) #f]\n    [(string-last txt) (string-join \" \" (map (lambda (x) (string-split x \" \")) txt))]\n    [#t]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-index-of txt #\" \") < (string-length txt) - 1]\n    [(string-index-of txt #\" \") < (string-length txt) - 2]\n    [(string-index-of txt #\" \") < (string-length txt) - 3]\n    [(string-index-of txt #\" \") < (string-length txt) - 4]\n    [(string-index-of txt #\" \") < (string-length txt) - 5]\n    [(string-index-of txt #\" \") < (string-length txt) - 6]\n    [(string-index-of txt #\" \") < (string-length txt) - 7]\n    [(string-index-of txt #\" \") < (string-length txt) - 8]\n    [(string-index-of txt #\" \") < (string-length txt) - 9]\n    [(string-index-of txt #\" \") < (string-length txt) - 10]\n    [(string-index-of txt #\" \") < (string-length txt) - 11]\n    [(string-index-of txt #\" \") < (string-length txt) - 12]\n    [(string-index-of txt #\" \") < (string-length txt) - 13]\n    [(string-index-of txt #\" \") < (string-length txt) - 14]\n    [(string-index-of txt #\" \") < (string-length txt) - 15]\n    [(string-index-of txt #\" \") < (string-length txt) - 16]\n    [(string-index-of txt #\" \") < (string-length txt) - 17]\n    [(string-index-of txt #\" \") < (string-length txt) - 18]\n    [(string-index-of txt #\" \") < (",
    "  (cond\n    [(string-length txt) 0]\n    [(string-char txt (string-length txt) - 1) #f]\n    [(string-char txt (string-length txt) - 1) (string-match (string-append txt \" \") \"\\\\w+\")]\n    [#t txt]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-char-ci txt #\" \") #t]\n    [(string-char-ci txt #\" \") #f]\n    [(string-char-ci txt #\"a\") #f]\n    [(string-char-ci txt #\"A\") #t]\n    [(string-char-ci txt #\"b\") #f]\n    [(string-char-ci txt #\"B\") #t]\n    [(string-char-ci txt #\"c\") #f]\n    [(string-char-ci txt #\"C\") #t]\n    [(string-char-ci txt #\"d\") #f]\n    [(string-char-ci txt #\"D\") #t]\n    [(string-char-ci txt #\"e\") #f]\n    [(string-char-ci txt #\"E\") #t]\n    [(string-char-ci txt #\"f\") #f]\n    [(string-char-ci txt #\"F\") #t]\n    [(string-char-ci txt #\"g\") #f]\n    [(string-char-ci txt #\"G\") #t]\n    [(string-char-ci txt #\"h\") #f]\n    [(string-char-ci txt #\"H\") #t]\n    [(string-char-ci txt #\"i\") #f]\n    [(string-char-ci txt #\"I\") #t]\n    [(string-char-ci txt #\"j\") #f]\n    [(string-char-ci txt #\"J\") #t]\n    [(string-char-ci txt #\"k\") #f]\n    [(string-char-ci txt #\"K\") #t]\n    [(string-char-ci txt #\"l\") #f]\n    [(string-char-ci txt #\"L\") #t]\n    [(string-char-ci txt #\"m\") #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-last txt) #f]\n    [(string-last txt) (string-char-ci (string-split txt \" \"))]\n    [#t #f]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-last txt) #f]\n    [(string-last txt) (string-char-ci txt #\"a-zA-Z\")]\n    [#t]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    ((null? txt) #f)\n    (else\n      (let ((last txt))\n        (cond\n          (((char=? last #\\\\space) #t)\n            (check_if_last_char_is_a_letter (cdr last)))\n          ((char=? last #\\\\space) #f)\n          (else\n            (let ((word (split txt #\\\\space)))\n              (check_if_last_char_is_a_letter (car word))))))))))\n\n;;; (check_if_last_char_is_a_letter \"apple pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pi e\")\n;;; #t\n;;; (check_if_last_char_is_a_letter \"apple pi e \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"\")\n;;; #f\n\n;;; (check_if_last_char_is_a_letter \"apple pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pi e\")\n;;; #t\n;;; (check_if_last_char_is_a_letter \"apple pi e \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"\")\n;;; #f\n\n;;; (check_if_last_char_is_a_letter \"apple pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pi e\")\n;;; #t\n;;; (check_if_last_char_is_a_letter \"apple pi e \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"\")\n;;; #f\n\n;;; (check_if_last_char_is_a_letter \"apple pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pi e\")\n;;; #t\n;;; (check_if_last_char_is_a_letter \"apple",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-contains txt \" \") #f]\n    [(string-contains txt \" \") #t]\n    [#f]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    ((null? txt) #f)\n    (else\n      (let ((last txt))\n        (cond\n          ((null? last) #f)\n          (else\n            (let ((last-char (char-ci last)))\n              (not (in-word? last-char))))))))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string? txt)\n      (let ((last txt))\n        (if (string? last)\n            (check_if_last_char_is_a_letter last)\n            (check_if_last_char_is_a_letter (cdr last))))]\n    [else\n      #f]))\n\n;; Create a function that returns #t if the first character\n;; of a given string is an alphabetical character and is not\n;; a part of a word, and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_first_char_is_a_letter \"apple pie\")\n;; #f\n;; >>> (check_if_first_char_is_a_letter \"apple pi e\")\n;; #t\n;; >>> (check_if_first_char_is_a_letter \"apple pi e \")\n;; #f\n;; >>> (check_if_first_char_is_a_letter \"\")\n;; #f",
    "  (let ((last (string-end txt)))\n    (cond\n      ((and (not (string-empty? txt))\n\t  (char-alphabetic? (string-ref txt last)))\n\t(string-copy txt\n\t  (string-insert last \" \")))\n      (else txt))))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string? txt)\n      (let ((str (string-trim txt)))\n        (if (string-empty? str)\n            #f\n            (let ((last (string-ref str (- (string-length str) 1))))\n              (if (char-alphabetic? last)\n                  #t\n                  #f))))]\n    [#f t]))\n\n;;; (check_if_last_char_is_a_letter \"apple pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pi e\")\n;;; #t\n;;; (check_if_last_char_is_a_letter \"apple pi e \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"\")\n;;; #f\n\n;;; (check_if_last_char_is_a_letter \"apple pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pi e\")\n;;; #t\n;;; (check_if_last_char_is_a_letter \"apple pi e \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"\")\n;;; #f\n\n;;; (check_if_last_char_is_a_letter \"apple pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pi e\")\n;;; #t\n;;; (check_if_last_char_is_a_letter \"apple pi e \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"\")\n;;; #f\n\n;;; (check_if_last_char_is_a_letter \"apple pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pi e\")\n;;; #t\n;;; (check_if_last_char_is_a_letter \"apple pi e \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"\")\n;;",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-contains txt #\" \")]\n    [(string-contains txt #\"\\t\")]\n    [(string-contains txt #\"\\n\")]\n    [(string-contains txt #\"\\r\")]\n    [(string-contains txt #\"\\f\")]\n    [(string-contains txt #\"\\v\")]\n    [(string-contains txt #\"\\b\")]\n    [(string-contains txt #\"\\a\")]\n    [(string-contains txt #\"\\e\")]\n    [(string-contains txt #\"\\c\")]\n    [(string-contains txt #\"\\u00A0\")]\n    [(string-contains txt #\"\\u00A1\")]\n    [(string-contains txt #\"\\u00A2\")]\n    [(string-contains txt #\"\\u00A3\")]\n    [(string-contains txt #\"\\u00A4\")]\n    [(string-contains txt #\"\\u00A5\")]\n    [(string-contains txt #\"\\u00A6\")]\n    [(string-contains txt #\"\\u00A7\")]\n    [(string-contains txt #\"\\u00A8\")]\n    [(string-contains txt #\"\\u00A9\")]\n    [(string-contains txt #\"\\u00AA\")]\n    [(string-contains txt #\"\\u00AB\")]\n    [(string-contains txt #\"\\u00AC\")]\n    [(string-contains txt #\"\\u00AD\")]\n    [(string-contains txt #\"\\u00AE\")]\n    [(string-contains txt #\"\\u00AF\")]\n    [(string-contains txt #\"\\u00B0\")]\n    [(string-contains txt",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-contains txt \" \") #f]\n    [(string-contains txt \" \")\n      (let ((last-char (string-ref txt (string-length txt) - 1)))\n        (string-contains (string-upcase last-char) \"abcdefghijklmnopqrstuvwxyz\"))]\n    [#t #f]))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-last-char txt) #f]\n    [(string-last-char txt)\n      (let ((word (string-split txt \" \")))\n        (and\n          (string-length word)\n          (string-length word)\n          (string-index (string-join \" \" word) \" \")\n          (string-index word \" \")\n          (string-index word \" \")\n          (string-index word \" \")\n          (string-index word \" \")\n          (string-index word \" \")\n          (string-index word \" \")\n          (string-index word \" \")\n          (string-index word \" \")\n          (string-index word \" \")\n          (string-index word \" \")\n          (string-index word \" \")\n          (string-index word \" \")\n          (string-index word \" \")\n          (string-index word \" \")\n          (string-index word \" \")\n          (string-index word \" \")\n          (string-index word \" \")\n          (string-index word \" \")\n          (string-index word \" \")\n          (string-index word \" \")\n          (string-index word \" \")\n          (string-index word \" \")\n          (string-index word \" \")\n          (string-index word \" \")\n          (string-index word \" \")\n          (string-index word \" \")\n          (string-index word \" \")\n          (string-index word \" \")\n          (string-index word \" \")\n          (string-index word \" \")\n          (string-index word \" \")\n          (string-index word \" \")\n          (string-index word \" \")\n          (string-index word \" \")\n          (string-index word \" \")\n          (string-index word \" \")\n          (string-index word \" \")\n          (string-index word \" \")\n          (string-index word \" \")\n          (string-index word \" \")\n          (string-index word \" \")\n          (string-index word \"",
    "  (let ((i (length txt)))\n    (if (eq i 0)\n      #f\n      (let ((c (char-ci (string-ci txt i))))\n        (if (char-alphabetic? c)\n          #t\n          (let ((word (string-copy (string-left txt i))))\n            (if (not (string-ci word))\n              #t\n              #f))))))))\n\n;;; (check_if_last_char_is_a_letter \"apple pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pi e\")\n;;; #t\n;;; (check_if_last_char_is_a_letter \"apple pi e \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"\")\n;;; #f\n\n;;; (check_if_last_char_is_a_letter \"apple pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pi e\")\n;;; #t\n;;; (check_if_last_char_is_a_letter \"apple pi e \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"\")\n;;; #f\n\n;;; (check_if_last_char_is_a_letter \"apple pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pi e\")\n;;; #t\n;;; (check_if_last_char_is_a_letter \"apple pi e \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"\")\n;;; #f\n\n;;; (check_if_last_char_is_a_letter \"apple pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pi e\")\n;;; #t\n;;; (check_if_last_char_is_a_letter \"apple pi e \")\n;;; #f\n;;; (check_if_last_char_is_a",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-char txt #\" \")]\n    [(string-char txt #\" \")\n      (string-length txt)\n      (string-length (string-split txt #\" \"))\n      (string-length (string-split txt #\" \") - 1)]\n    [(string-char txt #\" \")\n      (string-length txt)\n      (string-length (string-split txt #\" \"))\n      (string-length (string-split txt #\" \") - 1)]\n    [#t #f]))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-contains txt \" \") #f]\n    [(string-contains txt \" \")\n      (let ((last_char (string-char-at-pos txt (- (string-length txt) 1))))\n        (string-contains (string-upcase last_char) \"abcdefghijklmnopqrstuvwxyz\"))]\n    [#t #f]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-char-ci txt #\"a\") #t]\n    [(string-char-ci txt #\"e\") #t]\n    [(string-char-ci txt #\"i\") #t]\n    [(string-char-ci txt #\"o\") #t]\n    [(string-char-ci txt #\"u\") #t]\n    [(string-char-ci txt #\"y\") #t]\n    [(string-char-ci txt #\" \") #t]\n    [(string-char-ci txt #\"p\") #t]\n    [(string-char-ci txt #\"i\") #t]\n    [(string-char-ci txt #\"e\") #t]\n    [(string-char-ci txt #\" \") #t]\n    [#f txt]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-index-of txt #\" \") 0]\n    [(string-index-of txt #\" \") 1]\n    [(string-index-of txt #\" \") 2]\n    [(string-index-of txt #\" \") 3]\n    [(string-index-of txt #\" \") 4]\n    [(string-index-of txt #\" \") 5]\n    [(string-index-of txt #\" \") 6]\n    [(string-index-of txt #\" \") 7]\n    [(string-index-of txt #\" \") 8]\n    [(string-index-of txt #\" \") 9]\n    [(string-index-of txt #\" \") 10]\n    [(string-index-of txt #\" \") 11]\n    [(string-index-of txt #\" \") 12]\n    [(string-index-of txt #\" \") 13]\n    [(string-index-of txt #\" \") 14]\n    [(string-index-of txt #\" \") 15]\n    [(string-index-of txt #\" \") 16]\n    [(string-index-of txt #\" \") 17]\n    [(string-index-of txt #\" \") 18]\n    [(string-index-of txt #\" \") 19]\n    [(string-index-of txt #\" \") 20]\n    [(string-index-of txt #\" \") 21]\n    [(string-index-of txt #\" \") 22]\n    [(string-index-of txt #\" \") 23]\n    [(string-index-of txt #\" \") 24]\n    [(string-index-of txt #\" \") 25]\n    [(string-index-of txt #\" \") 26]\n    [(string-index-of txt #\" \") 27]\n    [(string-index-of",
    "  (let ((last (cdr txt)))\n    (if (null? last)\n      #f\n      (if (char=? (car last) #\\\\space)\n        #f\n        (if (char=? (car last) #\\\\space)\n          #f\n          (if (char=? (car last) #\\\\space)\n            #f\n            (if (char=? (car last) #\\\\space)\n              #f\n              (if (char=? (car last) #\\\\space)\n                #f\n                (if (char=? (car last) #\\\\space)\n                  #f\n                  (if (char=? (car last) #\\\\space)\n                    #f\n                    (if (char=? (car last) #\\\\space)\n                      #f\n                      (if (char=? (car last) #\\\\space)\n                        #f\n                        (if (char=? (car last) #\\\\space)\n                          #f\n                          (if (char=? (car last) #\\\\space)\n                            #f\n                            (if (char=? (car last) #\\\\space)\n                              #f\n                              (if (char=? (car last) #\\\\space)\n                                #f\n                                #f
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-contains txt #\" \")]\n    [(string-contains txt #\" \")\n      (string-split txt #\" \")\n      (check_if_last_char_is_a_letter (cdr (last txt)))\n      (check_if_last_char_is_a_letter (car (last txt)))\n      (check_if_last_char_is_a_letter (car (cdr (last txt))))\n      (check_if_last_char_is_a_letter (cdr (cdr (last txt))))\n      (check_if_last_char_is_a_letter (cdr (cdr (cdr (last txt)))))]\n    [#f #f]))\n\n;;; (check_if_last_char_is_a_letter \"apple pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pi e\")\n;;; #t\n;;; (check_if_last_char_is_a_letter \"apple pi e \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pie \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pie pi\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pie pi e\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pie pi e \")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pie pi e pie\")\n;;; #f\n;;; (check_if_last_char_is_a_letter \"apple pie pi e pie pie\")\n;;; #f\n;;;",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-char txt #\" \")]\n    [(string-char txt #\" \")\n     (let ((last (string-char txt #\" \")))\n       (cond\n         [(string-char (string-tail txt) #\" \")\n          (string-tail txt)\n          (string-char (string-tail txt) #\" \")]\n         [(string-char (string-tail txt) #\" \")\n          (string-tail txt)\n          (string-char (string-tail txt) #\" \")]\n         [(string-char (string-tail txt) #\" \")\n          (string-tail txt)\n          (string-char (string-tail txt) #\" \")]\n         [(string-char (string-tail txt) #\" \")\n          (string-tail txt)\n          (string-char (string-tail txt) #\" \")]\n         [(string-char (string-tail txt) #\" \")\n          (string-tail txt)\n          (string-char (string-tail txt) #\" \")]\n         [(string-char (string-tail txt) #\" \")\n          (string-tail txt)\n          (string-char (string-tail txt) #\" \")]\n         [(string-char (string-tail txt) #\" \")\n          (string-tail txt)\n          (string-char (string-tail txt) #\" \")]\n         [(string-char (string-tail txt) #\" \")\n          (string-tail txt)\n          (string-char (string-tail txt) #\" \")]\n         [(string-char (string-tail txt) #\" \")\n          (string-tail txt)\n          (string-char (string-tail txt) #\" \")]\n         [(string-char (string-tail txt) #\" \")\n          (string-tail txt)\n          (string-char (string-tail txt) #\" \"",
    "  (cond\n    [(string-length txt) 0]\n    [(string-char-ci txt #\" \") #f]\n    [(string-char-ci txt #\"\\t\") #f]\n    [(string-char-ci txt #\"\\n\") #f]\n    [(string-char-ci txt #\"\\r\") #f]\n    [(string-char-ci txt #\"\\f\") #f]\n    [(string-char-ci txt #\"\\v\") #f]\n    [(string-char-ci txt #\"\\b\") #f]\n    [(string-char-ci txt #\"\\a\") #f]\n    [(string-char-ci txt #\"\\e\") #f]\n    [(string-char-ci txt #\"\\c\") #f]\n    [(string-char-ci txt #\"\\n\") #f]\n    [(string-char-ci txt #\"\\r\") #f]\n    [(string-char-ci txt #\"\\f\") #f]\n    [(string-char-ci txt #\"\\v\") #f]\n    [(string-char-ci txt #\"\\b\") #f]\n    [(string-char-ci txt #\"\\a\") #f]\n    [(string-char-ci txt #\"\\e\") #f]\n    [(string-char-ci txt #\"\\c\") #f]\n    [(string-char-ci txt #\"\\n\") #f]\n    [(string-char-ci txt #\"\\r\") #f]\n    [(string-char-ci tgex #\"\\f\") #f]\n    [(string-char-ci tgex #\"\\v\") #f]\n    [(string-char-ci tgex #\"\\b\") #f]\n    [(string-char-ci tgex #\"\\a\") #f]\n    [(string-char-ci tgex #\"\\e\") #f]\n    [(string-char-ci tgex #\"\\c\") #f]\n    [(",
    "  (cond\n    ((null? txt) #f)\n    (else\n      (let ((last txt))\n        (cond\n          ((char=? last #\\\\space) #f)\n          (else\n            (let ((word (split-string last)))\n              (char=? (last (last (cdr word))) #\\\\space)\n              (not (null? word))\n              (check_if_last_char_is_a_letter (cdr word))))))))))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-last txt) #f]\n    [(string-last txt) (string-contains txt #\" \")]\n    [#t]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    ((null? txt) #f)\n    (else\n      (let ((last (cdr txt)))\n        (cond\n          ((null? last) #f)\n          (else\n            (let ((letter (car last)))\n              (cond\n                (not (string=? letter #\\\\space))\n                (else\n                  (let ((word (cdr last)))\n                    (string=? (car word) #\\\\space)\n                    (string=? (car word) #\\\\space)\n                    (string=? (car word) #\\\\space)\n                    (string=? (car word) #\\\\space)\n                    (string=? (car word) #\\\\space)\n                    (string=? (car word) #\\\\space)\n                    (string=? (car word) #\\\\space)\n                    (string=? (car word) #\\\\space)\n                    (string=? (car word) #\\\\space)\n                    (string=? (car word) #\\\\space)\n                    (string=? (car word) #\\\\space)\n                    (string=? (car word) #\\\\space)\n                    (string=? (car word) #\\\\space)\n                    (string=? (car word) #\\\\space)\n                    (string=? (car word) #\\\\space)\n                    (string=? (car word) #\\\\space)\n                    (string=? (car word) #\\\\space)\n                    (string=? (car word) #\\\\space)\n                    (string=? (car word) #\\\\space)\n                    (string=? (car word) #\\\\space)\n                    (string=? (car word) #\\\\space)\n                    (string=? (car word) #\\\\space)\n                    (string=? (car word) #\\\\space)\n                    (string=? (car word) #\\\\space)\n                    (string=? (car word) #\\\\space)\n                    (string=? (car word) #\\\\space)\n                    (string=? (car word) #\\\\space)\n                    (string=? (car word) #\\\\space)\n                    (string=? (car word) #\\\\space)\n                    (string=? (car word) #\\\\space)\n                    ",
    "  (cond\n    [(string? txt)\n      (let ((last txt))\n        (cond\n          [(char? last)\n            (not (string? (cdr last)))\n            (not (string? (cdr (cdr last))))]\n          [(not (char? last))\n            (not (string? (cdr (cdr last))))]\n          [#t #f]))]\n    [#f t]))\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-last txt) #f]\n    [(string-last txt) (string-join \" \" (string-split txt \" \"))]\n    [#t]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f",
    "  (cond\n    [(string-length txt) 0]\n    [(string-length txt) 1]\n    [(string-contains txt \" \") #f]\n    [(string-contains txt \" \") #t]\n    [#t (string-char-ci txt #\"a\")]\n    [#t (string-char-ci txt #\"e\")]\n    [#t (string-char-ci txt #\"i\")]\n    [#t (string-char-ci txt #\"o\")]\n    [#t (string-char-ci txt #\"u\")]\n    [#t (string-char-ci txt #\"y\")]\n    [#t (string-char-ci txt #\"A\")]\n    [#t (string-char-ci txt #\"E\")]\n    [#t (string-char-ci txt #\"I\")]\n    [#t (string-char-ci txt #\"O\")]\n    [#t (string-char-ci txt #\"U\")]\n    [#t (string-char-ci txt #\"Y\")]\n    [#t (string-char-ci txt #\" \") #f]\n    [#t (string-char-ci txt #\".\") #f]\n    [#t (string-char-ci txt #\"_\") #f]\n    [#t (string-char-ci txt #\"#\") #f]\n    [#t (string-char-ci txt #\"$\") #f]\n    [#t (string-char-ci txt #\"%\") #f]\n    [#t (string-char-ci txt #\"&\") #f]\n    [#t (string-char-ci txt #\"*\") #f]\n    [#t (string-char-ci txt #\"+\") #f]\n    [#t (string-char-ci txt #\"/\") #f]\n    [#t (string-char-ci txt #\"=\") #f]\n    [#t (string-char-ci txt #\"?\") #",
    "  (cond\n    [(string-length txt) 0]\n    [(string-char-ci txt #\"\\s\") #f]\n    [(string-char-ci txt #\"\\w\") #t]\n    [#f #t]\n  )\n)\n\n;; Create a function that returns #t if the last character\n;; of a given string is a digit and is not a part of a word,\n;; and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_digit \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_digit \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_digit \"\")\n;; #f"
  ],
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ]
}