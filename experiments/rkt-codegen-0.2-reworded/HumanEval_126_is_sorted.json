{
  "name": "HumanEval_126_is_sorted",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in ascending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #t\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #f\n(define (is_sorted lst)\n",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_sorted))\n    (check-equal? (candidate (list 5)) #t)\n    (check-equal? (candidate (list 1 2 3 4 5)) #t)\n    (check-equal? (candidate (list 1 3 2 4 5)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 6)) #t)\n    (check-equal? (candidate (list 1 2 3 4 5 6 7)) #t)\n    (check-equal? (candidate (list 1 3 2 4 5 6 7)) #f)\n    (check-equal? (candidate (list )) #t)\n    (check-equal? (candidate (list 1)) #t)\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 2 2 3 4)) #f)\n    (check-equal? (candidate (list 1 2 3 3 3 4)) #f)\n    (check-equal? (candidate (list 1 2 2 3 3 4)) #t)\n    (check-equal? (candidate (list 1 2 3 4)) #t)\n))\n\n(test-humaneval)",
  "completions": [
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n          (if (eq? p (car (cdr lst))) #t)\n            #f\n            (is_sorted (cdr lst)))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((eq? (car lst) (car (cdr lst))) #f)\n    (else (is_sorted (cdr lst))))\n)\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted_desc (list 5))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 3 4 5))\n;; #t\n;; >>> (is_sorted_desc (list 1 3 2 4 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted_desc (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 3 3 4))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 2 2 3 4))\n;; #f",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((n (car lst)))\n        (if (eq? (car lst) n)\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst)))))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted_desc (list 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted_desc (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n            (if (eq? p (car (cdr lst))) #t)\n              #f\n            (else\n              (if (eq? p (car (cdr (cdr lst)))) #t)\n                #f\n              (else\n                (is_sorted (cdr lst)))))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n            (not (eqv? p (car (cdr lst))))\n            (not (eqv? p (car (cdr (cdr lst)))))))\n        (is_sorted (cdr lst))))))\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (eq? p (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst)))))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (let ((n (length lst)))\n    (if (eq? n 1)\n      (if (eq? lst 1)\n        #t\n        #f\n        (begin\n          (define (is_sorted lst)\n            (if (eq? lst 1)\n              #t\n              (begin\n                (define (is_sorted lst)\n                  (if (eq? lst 2)\n                    #f\n                    (begin\n                      (define (is_sorted lst)\n                        (if (eq? lst 3)\n                          #t\n                          (begin\n                            (define (is_sorted lst)\n                              (if (eq? lst 4)\n                                #t\n                                #f\n                                (begin\n                                  (define (is_sorted lst)\n                                    (if (eq? lst 5)\n                                      #t\n                                      #f\n                                      (begin\n                                        (define (is_sorted lst)\n                                          (if (eq? lst 6)\n                                            #t\n                                            #f\n                                            (begin\n                                              (define (is_sorted lst)\n                                                (if (eq? lst 7)\n                                                  #t\n                                                  #f\n                                                  #f
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst)) #t\n          (else\n            (if (eq? p (car (cdr lst))) #t\n              (else\n                #f))))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted_desc (list 5))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 3 4 5))\n;; #t\n;; >>> (is_sorted_desc (list 1 3 2 4 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted_desc (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 3 3 4))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 2 2 3 4))\n;; #f",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (eq? p (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst)))))))\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst)) #t\n          (else\n            (if (eq? p (car (cdr lst))) #t\n              (else\n                #f))))))))\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((lst (cdr lst)))\n        (if (null? (cdr (cdr lst)))\n            (if (null? (cdr (cdr (cdr lst))))\n                (car lst)\n                (car (cdr lst)))\n              (car (cdr (cdr lst))))\n          (is_sorted (cdr lst)))))))\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((n (car lst)))\n        (if (null? (cdr lst))\n            (if (eq? n (car (cdr lst))) #t)\n              #f\n            (else\n              (if (eq? n (car (cdr (cdr lst)))) #t)\n                #f\n              (else\n                (is_sorted (cdr lst))))))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (let ((numbers (mapcar (lambda (x) (integer->number x)) lst)))\n    (if (null? numbers)\n      #t\n      (let ((n (car numbers))\n            (rest (cdr numbers)))\n        (if (null? rest)\n          (if (eq? n (car rest))\n            #f\n            #t))))))\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n            (if (eq? p (car (cdr lst))) #t)\n              (else #f)\n            (else\n              (is_sorted (cdr lst)))))))\n)\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (let ((n (length lst)))\n    (if (< n 2)\n      (if (= (car lst) (cdr lst))\n        #t\n        #f)\n      (let ((p (car lst)))\n        (while (< (cdr lst) p)\n          (setq p (cdr lst)))\n        (if (= (car lst) (cdr lst))\n          #f\n          #t))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((n (car lst)))\n        (if (eq? (car lst) n)\n            (is_sorted (cdr lst))\n            (else\n              (return #f))))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((head (car lst)))\n        (if (null? (cdr lst))\n          (if (eq? head (car (cdr lst))) #f)\n            (is_sorted (cdr lst)))))))\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (eq? p (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst)))))\n    )\n  )\n)\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n            (not (eqv? p (car (cdr lst))))\n            (not (eqv? p (car (cdr (cdr lst)))))))\n        (is_sorted (cdr lst))))))\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((prev (car lst)))\n        (if (eq? prev (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst))))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (let ((n (length lst)))\n    (if (eq? n 1)\n      (if (eq? lst 1)\n        #t\n        #f\n        (let ((p (car lst)))\n          (if (eq? p (car (cdr lst)))\n            #f\n            (if (eq? (car lst) (car (cdr lst)))\n              #t\n              #f))))))\n    (if (eq? n 2)\n      (if (eq? lst 2)\n        #t\n        (if (eq? (car lst) (car (cdr lst)))\n          #f\n          (if (eq? (car (cdr lst)) (car (cdr (cdr lst))))\n            #t\n            #f))))))\n  lst)\n)\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n            (if (eq? p (car (cdr lst))) #t)\n              #f\n            (else\n              (if (eq? p (car (cdr (cdr lst)))) #t)\n                #f\n              (else\n                (is_sorted (cdr lst)))))))))\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (eq? p (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst)))))))\n)\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (let ((n (length lst)))\n    (if (eq? n 1)\n      (if (eq? lst 0)\n        #t\n        #f\n        (begin\n          (define (is_sorted lst)\n            (if (eq? lst 0)\n              #t\n              (begin\n                (define (is_sorted lst)\n                  (if (eq? lst 0)\n                    #t\n                    (begin\n                      (define (is_sorted lst)\n                        (if (eq? lst 0)\n                          #t\n                          (begin\n                            (define (is_sorted lst)\n                              (if (eq? lst 0)\n                                #t\n                                #f\n                                (begin\n                                  (define (is_sorted lst)\n                                    (if (eq? lst 0)\n                                      #t\n                                      #f\n                                      (begin\n                                        (define (is_sorted lst)\n                                          (if (eq? lst 0)\n                                            #t\n                                            #f\n                                            (begin\n                                              (define (is_sorted lst)\n                                                (if (eq? lst 0)\n                                                  #t\n                                                  #f\n                                                  (begin\n                                                   (define (is_sorted lst)\n                                                      (if (eq? lst 0)\n                                                        #t\n                                                        #f\n                                                        #f
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (eq? p (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst)))))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted_desc (list 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted_desc (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n            (if (eq? p (car (cdr lst))) #t)\n              #f\n            (else\n              (if (eq? p (car (cdr (cdr lst)))) #t)\n                #f\n              (else\n                (is_sorted (cdr lst)))))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted_desc (list 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted_desc (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n            (not (eqv? p (car (cdr lst))))\n            (not (eqv? p (car (cdr (cdr lst)))))))\n        (is_sorted (cdr lst))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (eq? p (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst)))))\n    )\n  )\n)\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (let ((n (length lst)))\n    (if (eq? n 1)\n      (if (eq? lst 0)\n        #t\n        #f\n        (begin\n          (define (compare x y)\n            (cond ((eq? x y) #t)\n                  ((< x y) #f)\n                  ((> x y) #t)\n                  ((= x y) #f)\n                  ((< x y) #t)\n                  ((> x y) #f)\n                  ((= x y) #t)\n                  ((< x y) #f)\n                  ((> x y) #t)\n                  ((= x y) #f)\n                  ((< x y) #t)\n                  ((> x y) #f)\n                  ((= x y) #t)\n                  ((< x y) #f)\n                  ((> x y) #t)\n                  ((= x y) #f)\n                  ((< x y) #t)\n                  ((> x y) #f)\n                  ((= x y) #t)\n                  ((< x y) #f)\n                  ((> x y) #t)\n                  ((= x y) #f)\n                  ((< x y) #t)\n                  ((> x y) #f)\n                  ((= x y) #t)\n                  ((< x y) #f)\n                  ((> x y) #t)\n                  ((= x y) #f)\n                  ((< x y) #t)\n                  ((> x y) #f)\n                  ((= x y) #t)\n                  ((< x y) #f)\n                  ((> x y) #t)\n                  ((= x y) #f)\n                  ((< x y) #t)\n                  ((> x y) #f)\n                  ((= x y) #t)\n                  ((< x y) #f)\n                  ((> x y) #t)\n                  ((= x y) #f)\n                  ((< x y) #t)\n                  ((> x y) #f)\n                  ((= x y) #t)\n                  ((< x y) #f)\n                  ((> x y) #t)\n                  ((= x y",
    "  (let ((n (length lst)))\n    (if (eq? n 1)\n      (if (eq? lst 0)\n        #t\n        #f\n        (begin\n          (define (is_sorted lst)\n            (if (eq? lst 0)\n              #t\n              (begin\n                (define (is_sorted lst)\n                  (if (eq? lst 0)\n                    #t\n                    (begin\n                      (define (is_sorted lst)\n                        (if (eq? lst 0)\n                          #t\n                          (begin\n                            (define (is_sorted lst)\n                              (if (eq? lst 0)\n                                #t\n                                #f\n                                (begin\n                                  (define (is_sorted lst)\n                                    (if (eq? lst 0)\n                                      #t\n                                      #f\n                                      (begin\n                                        (define (is_sorted lst)\n                                          (if (eq? lst 0)\n                                            #t\n                                            #f\n                                            (begin\n                                              (define (is_sorted lst)\n                                                (if (eq? lst 0)\n                                                  #t\n                                                  #f\n                                                  (begin\n                                                   (define (is_sorted lst)\n                                                     (if (eq? lst 0)\n                                                       #t\n                                                       #f\n                                                       (begin\n                                                         (define (is_sorted lst)\n                                                           (if (eq? lst 0)\n                                                              #t\n                                                              #f\n                                                              (begin\n                                                                (define (is_sorted lst)\n                                                                  (if (eq? lst 0)\n                                                                    #t\n                                                                    #f\n                                                                    (begin\n                                                                      (define (is_sorted lst)\n                                                                        (if (eq?",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n            (if (eq? p (car (cdr lst))) #t)\n              #f\n            (else\n              (if (eq? p (car (cdr (cdr lst)))) #t)\n                #f\n              (else\n                (is_sorted (cdr lst)))))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (eq? p (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst)))))))\n)\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (eq? p (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst)))))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (eq? p (car (cdr lst)))\n            #f\n            (else\n              (if (eq? p (car (cdr (cdr lst))))\n                  #f\n                  (else\n                    (is_sorted (cdr lst))))))))))\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((head (car lst)))\n        (if (eq? head (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst)))))))\n)\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted_desc (list 5))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 3 4 5))\n;; #t\n;; >>> (is_sorted_desc (list 1 3 2 4 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted_desc (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 3 3 4))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 2 2 3 4))\n;; #f",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((prev (car lst)))\n        (while (not (null? (cdr lst)))\n          (if (eqv? prev (car lst))\n              (return #f)\n              (prev (car lst)))\n            (prev (car lst)))))))\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (eq? p (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst)))))))\n)\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (let ((n (car lst)))\n    (if (null? (cdr lst))\n      (if (eq? n (first lst))\n        #t\n        #f)\n      (if (eq? n (first (cdr lst)))\n        #f\n        (is_sorted (cdr lst))))))\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (cond\n          ((null? (cdr p)) #f)\n          ((null? (cdr (cdr p))) #t)\n          (else\n            (if (eq? (car p) (car (cdr p)))\n                (is_sorted (cdr p))\n                (is_sorted (cdr (cdr p)))))))))))\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n            (if (eq? p (car (cdr lst))) #t)\n              (else #f)\n            (else\n              (is_sorted (cdr lst)))))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((n (car lst)))\n        (if (eq? (car lst) n)\n            (is_sorted (cdr lst))\n            (else\n              (return #f)))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted_desc (list 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted_desc (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n            (if (eq? p (car (cdr lst))) #t)\n              #f\n            (else\n              (if (eq? p (car (cdr (cdr lst)))) #t)\n                #f\n              (else\n                (is_sorted (cdr lst)))))))))\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((n (car lst)))\n        (if (null? (cdr lst))\n            (if (eq? n (car (cdr lst))) #t)\n              #f\n              (else\n                (is_sorted (cdr lst))))))))\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((lst1 (car lst)))\n        (let ((lst2 (car (cdr lst))))\n          (cond\n            ((>= lst1 lst2) #t)\n            ((<= lst1 lst2) #f)\n            ((= lst1 lst2) #f)\n            (else\n              (is_sorted (cdr lst))))))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #t\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #f",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst)) #t\n          (else\n            (if (eq? p (car (cdr lst))) #t\n              (else\n                #f))))))))\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((n (car lst)))\n        (if (eq? n (car (cdr lst)))\n            #f\n            (else\n              (if (lt? n (car (cdr lst)))\n                  #f\n                  (else\n                    (is_sorted (cdr lst))))))))))\n",
    "  (cond\n    [(null? lst) #t]\n    [(null? (cdr lst)) #f]\n    [(car lst)\n      (if (null? (cdr lst)) #t\n        (if (null? (cdr (cdr lst))) #t\n          (if (null? (cdr (cdr (cdr lst)))) #t\n            (if (null? (cdr (cdr (cdr (cdr lst)))))) #t\n              (if (null? (cdr (cdr (cdr (cdr (cdr lst)))))) #t\n                (if (null? (cdr (cdr (cdr (cdr (cdr (cdr lst)))))))) #t\n                  #f\n                  (if (null? (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst)))))))) #t\n                    #f\n                    (if (null? (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst)))))))))) #t\n                      #f\n                      (if (null? (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst)))))))))) #t\n                        #f\n                        (if (null? (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst)))))))))))) #t\n                          #f\n                          (if (null? (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst)))))))))))) #t\n                            #f\n                            (if (null? (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst)))))))))))))) #t\n                              #f\n                              (if (null? (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (eq? p (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst)))))))\n)\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((n (car lst)))\n        (if (eq? (car lst) n)\n            (is_sorted (cdr lst))\n            (else\n              (if (eq? (car lst) n)\n                  (is_sorted (cdr lst))\n                  (else\n                    (return #f))))))))\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n            (if (eq? p (car (cdr lst))) #t)\n              #f\n            (else\n              (if (eq? p (car (cdr (cdr lst)))) #t)\n                #f\n              (else\n                (is_sorted (cdr lst)))))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (let ((n (length lst)))\n    (if (eq? n 1)\n      (if (eq? lst 1)\n        #t\n        #f\n        )\n      (if (eq? n 2)\n        (if (eq? lst 2)\n          #t\n          #f\n          )\n        (if (eq? n 3)\n          (if (eq? lst 3)\n            #t\n            #f\n            )\n          (if (eq? n 4)\n            (if (eq? lst 4)\n              #t\n              #f\n              )\n            (if (eq? n 5)\n              (if (eq? lst 5)\n                #t\n                #f\n                )\n              (if (eq? n 6)\n                (if (eq? lst 6)\n                  #t\n                  #f\n                  )\n                (if (eq? n 7)\n                  (if (eq? lst 7)\n                    #t\n                    #f\n                    )\n                  (if (eq? n 8)\n                    (if (eq? lst 8)\n                      #t\n                      #f\n                      )\n                    (if (eq? n 9)\n                      (if (eq? lst 9)\n                        #t\n                        #f\n                        )\n                      (if (eq? n 10)\n                        (if (eq? lst 10)\n                          #t\n                          #f\n                          )\n                        (if (eq? n 11)\n                          (if (eq? lst 11)\n                            #t\n                            #f\n                            )\n                          (if (eq? n 12)\n                            (if (eq? lst 12)\n                              #t\n                              #f\n                              )\n                            (if (eq? n 13)\n                              (if (eq? lst 13)\n                                #t\n                                #f\n                                )\n                              (if (eq? n 14)\n                                (if (eq? lst 14)\n                                  #t\n                                  #f\n                                  )\n                                (if (eq? n 15)\n                                  (if (eq? lst 15)\n                                    #t\n                                    #f\n                                    )\n                                  (if (eq",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst)) #t\n          (else\n            (if (eq? (car (cdr lst)) p) #f\n                (else\n                  (is_sorted (cdr lst))))))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted_desc (list 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted_desc (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n          (if (eq? p (car (cdr lst))) #t)\n            #f\n            (is_sorted (cdr lst)))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted_desc (list 5))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 3 4 5))\n;; #t\n;; >>> (is_sorted_desc (list 1 3 2 4 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted_desc (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 3 3 4))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 2 2 3 4))\n;; #f",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((n (car lst)))\n        (if (eq? (car lst) n)\n            (is_sorted (cdr lst))\n            (else\n              (return #f)))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted_desc (list 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted_desc (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((eq? (car lst) (car (cdr lst))) #f)\n    (else (is_sorted (cdr lst))))\n)\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted_desc (list 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted_desc (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((head (car lst)))\n        (if (null? (cdr lst))\n          (if (eq? head (car (cdr lst))) #f)\n            (is_sorted (cdr lst))\n          )\n        (is_sorted (cdr lst))\n      )\n    )\n  )\n)\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((n (car lst)))\n        (if (eq? n (car (cdr lst))) #f\n              (is_sorted (cdr lst))\n              (else #f))))))\n",
    "  (let ((n (length lst)))\n    (if (eq? n 1)\n      (let ((x lst))\n        (if (eq? x x)\n          #t\n          #f))\n      (let ((x lst))\n        (if (eq? x x)\n          #f\n          (if (< x (car x))\n            (is_sorted (cdr lst))\n            (is_sorted (cdr (cdr lst))))))))))\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n            (if (eq? p (car (cdr lst))) #t)\n              #f\n            (else\n              (is_sorted (cdr lst)))))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (let ((lst-size (length lst)))\n    (if (eq? lst-size 0)\n      #t\n      (let ((i 0))\n        (while (< i lst-size)\n          (if (< (nth lst i) (nth lst (1+ i)))\n            (return #f)\n            (set! i (1+ i)))\n          (set! i (1+ i)))))))\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((head (car lst)))\n        (if (eq? head (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst)))))))\n)\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n            (not (eqv? p (car (cdr lst))))\n            (not (eqv? p (car (cdr (cdr lst)))))))\n        (is_sorted (cdr lst))))))\n",
    "  (let ((n (length lst)))\n    (if (eq? n 0)\n      #t\n      (let ((i 0))\n        (while (< i n)\n          (if (eq? (lst i) (lst (i + 1)))\n            #f\n            (else\n              (if (< (lst i) (lst (i + 1)))\n                #t\n                (else\n                  #f\n                  (setq i (i + 1)))))))))))\n",
    "  (let ((n (length lst)))\n    (if (eq? n 1)\n      (if (eq? lst 0)\n        #t\n        #f\n        (begin (define (is_sorted lst)\n          (if (eq? lst 0)\n            #t\n            (begin (define (is_sorted lst)\n              (if (eq? lst 0)\n                #t\n                (begin (define (is_sorted lst)\n                  (if (eq? lst 0)\n                    #t\n                    (begin (define (is_sorted lst)\n                      (if (eq? lst 0)\n                        #t\n                        (begin (define (is_sorted lst)\n                          (if (eq? lst 0)\n                            #t\n                            (begin (define (is_sorted lst)\n                              (if (eq? lst 0)\n                                #t\n                                #f\n                                #f
    "  (cond\n    ((null? lst) #t)\n    ((eq? (car lst) (car (cdr lst))) #f)\n    (else\n      (is_sorted (cdr lst)))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted_desc (list 5))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 3 4 5))\n;; #t\n;; >>> (is_sorted_desc (list 1 3 2 4 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted_desc (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 3 3 4))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 2 2 3 4))\n;; #f",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((head (car lst)))\n        (if (eq? head (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst)))))\n    )\n  )\n)\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (eq? p (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst)))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((prev (car lst)))\n        (if (eqv? prev (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst)))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (eq? p (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst)))))))\n)\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((head (car lst)))\n        (if (eq head (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst)))))\n    )\n  )\n)\n",
    "  (let ((n (length lst)))\n    (if (eq? n 1)\n      (if (eq? lst 0)\n        #t\n        #f)\n      (let ((i 0)\n            (j n))\n        (while (< i j)\n          (if (< (nth i) (nth j))\n            (return #f)\n            (set! i (i + 1))\n            (set! j (j - 1)))\n          (set! i (i + 1))\n          (set! j (j - 1)))\n        #t)))\n)\n",
    "  (cond\n    [(null? lst) #t]\n    [(null? (cdr lst)) #f]\n    [(car lst)\n      (if (null? (cdr lst)) #t\n        (if (null? (cdr (cdr lst))) #t\n          (if (null? (cdr (cdr (cdr lst)))) #t\n            (if (null? (cdr (cdr (cdr (cdr lst)))))) #t\n              #f\n              (car (cdr (cdr (cdr (cdr lst))))))\n          (car (cdr (cdr (cdr lst))))))\n      (car (cdr lst))]\n    (is_sorted (cdr lst))\n  )\n)\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted_desc (list 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted_desc (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (eq? p (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst)))))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted_desc (list 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted_desc (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 2 3 4))\n;; #t",
    "  (let ((n (length lst)))\n    (if (eq? n 0)\n      #t\n      (let ((i 0))\n        (while (< i n)\n          (if (eq? (lst i) (lst (i + 1)))\n            #f\n            (else\n              (if (< (lst i) (lst (i + 1)))\n                #t\n                (else\n                  #f\n                  (return #f))))\n              (setq i (i + 1)))))\n      #t))))\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    ((> (car lst) (car (cdr lst))) #f)\n    ((< (car lst) (car (cdr lst))) #t)\n    (else #f)\n  )\n)\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n            (if (eq? p (car (cdr lst))) #t)\n              #f\n            (else\n              (if (eq? p (car (cdr (cdr lst)))) #t)\n                #f\n              (else\n                (is_sorted (cdr lst))))))))))\n",
    "  (let ((n (length lst)))\n    (if (eq? n 1)\n      (if (eq? lst 0)\n        #t\n        #f\n        (begin\n          (define (is_sorted_helper lst)\n            (cond\n              [(<= lst 0) #f]\n              [(<= lst 1) #t]\n              [(< lst 0) (is_sorted_helper (- lst 1))]\n              [else (is_sorted_helper (- lst 2))]\n            )\n          )\n          (is_sorted_helper lst)\n        )\n      )\n    )\n  )\n)\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((head (car lst)))\n        (if (eq? head (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst)))))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n            (if (eq? p (car (cdr lst))) #t)\n              #f\n            (else\n              (if (eq? p (car (cdr (cdr lst)))) #t)\n                #f\n              (else\n                (is_sorted (cdr lst)))))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((n (car lst)))\n        (if (eq? (car lst) n)\n            (is_sorted (cdr lst))\n            (else\n              (if (eq? (car lst) n)\n                  (is_sorted (cdr lst))\n                  (else\n                    (return #f))))))))))\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n          (if (eq? p (car (cdr lst))) #t)\n            #f\n            (else\n              (is_sorted (cdr lst))))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted_desc (list 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted_desc (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    ((= (car lst) (car (cdr lst))) #t)\n    (else #f)\n  )\n)\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n            (if (eq? p (car (cdr lst))) #t)\n              #f\n            (else\n              (if (eq? p (car (cdr (cdr lst)))) #t)\n                #f\n              (else\n                (is_sorted (cdr lst))))))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((eq? (car lst) (car (cdr lst))) #f)\n    (else (is_sorted (cdr lst))))\n)\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n            (if (eq? p (car (cdr lst))) #t)\n              (else #f)\n            )\n          (else\n            (if (eq? p (car (cdr lst))) #f)\n              (else #t)\n            )\n          )\n      )\n    )\n  )\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (eq? p (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst)))))))\n)\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((head (car lst)))\n        (if (eq? head (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst)))))))\n)\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n          (if (eq? p (car (cdr lst))) #t)\n            #f\n            (else\n              (if (eq? p (car (cdr (cdr lst)))) #t)\n                #f\n                (else\n                  (is_sorted (cdr lst)))))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (let ((n (length lst)))\n    (if (eq? n 0)\n      #t\n      (let ((i 0))\n        (while (< i n)\n          (if (< (nth i lst) (nth (1+ i) lst))\n            (return #f)\n            (set! i (1+ i)))\n          (set! i n)))\n      #t))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (eq? p (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst)))))))\n",
    "  (let ((n (length lst)))\n    (if (< n 2)\n      (if (is_sorted_list lst)\n        #t\n        #f)\n      #f)\n    (if (< n 2)\n      #f\n      (let ((i 0))\n        (while (< i n)\n          (if (is_sorted_list lst)\n            #f\n            (set! i (+ i 1)))\n          (set! i (+ i 1)))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted_desc (list 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted_desc (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (cond\n          ((null? (cdr p)) #f)\n          ((= (car p) (car (cdr p))) #t)\n          (else\n            (is_sorted (cdr lst))))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted_desc (list 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted_desc (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (eq? p (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr (cdr lst)))))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((head (car lst)))\n        (if (null? (cdr lst))\n          (equal? head (car (cdr lst)))\n          (else\n            (equal? head (car (cdr (cdr lst)))))))\n        (is_sorted (cdr lst))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((eq? (car lst) (car (cdr lst))) #f)\n    (else (is_sorted (cdr lst))))\n)\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted_desc (list 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted_desc (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 3 3 4))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 2 2 3 4))\n;; #f",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst)) #t\n          (else\n            (if (null? (cdr (cdr lst))) #t\n              (else\n                (if (eq? p (car (cdr (cdr lst)))) #f\n                  (else\n                    (if (eq? p (car (cdr (cdr (cdr lst))))) #f\n                      (else\n                        (if (eq? p (car (cdr (cdr (cdr (cdr lst)))))) #f\n                          (else\n                            (if (eq? p (car (cdr (cdr (cdr (cdr (cdr lst)))))))) #f\n                              (else\n                                (if (eq? p (car (cdr (cdr (cdr (cdr (cdr (cdr lst)))))))) #f\n                                  (else\n                                    (if (eq? p (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst)))))))))) #f\n                                      (else\n                                        (if (eq? p (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst)))))))))))) #f\n                                          (else\n                                            (if (eq? p (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst)))))))))))))))) #f\n                                              (else\n                                                (if (eq? p (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst)))))))))))))))))))) #f\n                                                  (",
    "  (let ((n (length lst)))\n    (if (eq? n 0)\n      #t\n      (let ((i 0))\n        (while (< i n)\n          (if (eq? (lst i) (lst (i + 1)))\n              #f\n              (return #f)))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (eq? p (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr (cdr lst)))))))\n  )\n)\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((head (car lst)))\n        (if (eq? head (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr (cdr lst)))))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((eq? (car lst) (car (cdr lst))) #f)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n          (if (eq? p (car (cdr (cdr lst))))\n            #f\n            (else\n              (is_sorted (cdr lst))))\n          (else\n            (is_sorted (cdr lst)))))))\n)\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((n (car lst)))\n        (if (eq? n (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst)))))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted_desc (list 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted_desc (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 3 3 4))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 2 2 3 4))\n;; #f",
    "  (let ((n (length lst)))\n    (if (eq? n 1)\n      (if (eq? lst 0)\n        #t\n        #f\n        (let ((i 0)\n              (p (car lst)))\n          (while (< i n)\n            (if (eq? (car lst) (cdr lst))\n              #f\n              (setq p (car lst))\n              (setq lst (cdr lst))\n              (setq i (+ 1 i)))))\n          (if (eq? p (car lst))\n            #t\n            #f))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (eq? p (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst)))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (let ((n (length lst)))\n    (if (eq? n 0)\n      #t\n      (let ((i 0))\n        (while (< i n)\n          (if (eq? (lst i) (lst (i + 1)))\n              #f\n              (return #f)))\n          (set! i (i + 1))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (eq? p (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst))))))))\n",
    "  (cond\n    ((null? lst) #t)\n    ((eq? (car lst) (car (cdr lst))) #f)\n    (else (is_sorted (cdr lst))))\n)\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted_desc (list 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5))\n;; #t\n;; >>> (is_sorted_desc (list 1 3 2 4 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted_desc (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 3 3 4))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 2 2 3 4))\n;; #f",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (eq? p (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst)))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (let ((n (length lst)))\n    (if (eq? n 1)\n      (if (eq? lst 1)\n        #t\n        #f\n        (let ((i 0)\n              (p (car lst)))\n          (while (< i n)\n            (if (eq? (car lst) (cdr lst))\n              #f\n              (setq p (car lst))\n              (setq lst (cdr lst))\n              (setq i (1+ i)))\n            (if (eq? p (car lst))\n              #f\n              (return #f)))))))\n    (return #t)))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (let ((n (length lst)))\n    (if (eq? n 1)\n      (if (eq? lst 1)\n        #t\n        #f\n        (begin\n          (define (is_sorted lst)\n            (if (eq? lst 1)\n              #t\n              (begin\n                (define (is_sorted lst)\n                  (if (eq? lst 2)\n                    #f\n                    (begin\n                      (define (is_sorted lst)\n                        (if (eq? lst 3)\n                          #t\n                          (begin\n                            (define (is_sorted lst)\n                              (if (eq? lst 4)\n                                #t\n                                #f\n                                (begin\n                                  (define (is_sorted lst)\n                                    (if (eq? lst 5)\n                                      #t\n                                      #f\n                                      (begin\n                                        (define (is_sorted lst)\n                                          (if (eq? lst 6)\n                                            #t\n                                            #f\n                                            (begin\n                                              (define (is_sorted lst)\n                                                (if (eq? lst 7)\n                                                  #t\n                                                  #f\n                                                  #f
    "  (let ((n (length lst)))\n    (if (eq? n 0)\n      #t\n      (let ((i 0))\n        (while (< i n)\n          (if (eq? (lst i) (lst (i + 1)))\n              #f\n              (return #f)))\n          (set! i (i + 1))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted_desc (list 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted_desc (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (eq? p (car (cdr lst)))\n            #f\n            (else\n              (if (eq? p (car (cdr (cdr lst))))\n                  #f\n                  (else\n                    (is_sorted (cdr lst))))))))))\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((head (car lst)))\n        (if (eq? head (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr (cdr lst)))))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (let ((n (length lst)))\n    (if (< n 2)\n      (if (eqv? (car lst) (car (cdr lst)))\n        (return #t)\n        (return #f))\n      (let ((p (cdr lst)))\n        (while (< n 2)\n          (if (eqv? (car lst) (car p))\n            (return #f)\n            (setq lst (cdr lst))\n            (setq n (- n 1))\n            (setq p (cdr p)))\n          (setq lst (cdr lst)))\n        (return #t)))\n    (return #f)))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((n (car lst)))\n        (if (eq? n (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst)))))\n    )\n  )\n)\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((l (car lst)))\n        (if (eq? (car lst) l)\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst))))))))\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (eq? p (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst)))))))))\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((n (car lst)))\n        (if (eq? n (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst)))))))))\n",
    "  (let ((n (car lst)))\n    (if (null? (cdr lst))\n      (if (eq? n (first lst))\n        #t\n        #f)\n      (else\n        (if (eq? n (first lst))\n          #f\n          (is_sorted (cdr lst)))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (let ((numbers (mapcar (lambda (x) (integer->number x)) lst)))\n    (if (empty? numbers)\n      #t\n      (let ((i 0))\n        (while (< i (length numbers))\n          (if (< numbers/1 numbers/2)\n            (return #f)\n            (set! i (+ i 1)))))))\n)\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n          (if (eq? p (car (cdr lst))) #t)\n            #f\n            (is_sorted (cdr lst))))))\n\n;; >>> (is_sorted (list 1 2 3 4 5 6 7 8 9 10 11))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6 7 8 9 10 11 12))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7 8 9 10 11 12 13))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23))\n;; #f\n;;",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (eq? p (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr (cdr lst)))))))\n  )\n)\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n          (if (eq? p (car (cdr lst))) #t)\n            #f\n            (else\n              (is_sorted (cdr lst)))))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted_desc (list 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted_desc (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n            (if (eq? p (car (cdr lst))) #t)\n              #f\n            (else\n              (if (eq? p (car (cdr (cdr lst)))) #t)\n                #f\n              (else\n                (is_sorted (cdr lst)))))))))\n",
    "  (cond\n    ((null? lst) #t)\n    ((eq? (car lst) (car (cdr lst))) #f)\n    (else (is_sorted (cdr lst))))\n)\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted_desc (list 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted_desc (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((eq? (car lst) (car (cdr lst))) #f)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n          (eq? p (car (cdr (cdr lst))))\n          (else\n            (is_sorted (cdr lst)))))))\n)\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((n (car lst)))\n        (if (eq? n (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr (cdr lst)))))))))\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((head (car lst)))\n        (if (eq? head (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst)))))))\n)\n",
    "  (cond\n    ((null? lst) #t)\n    ((eq? (car lst) (car (cdr lst))) #f)\n    (else (is_sorted (cdr lst))))\n)\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted_desc (list 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted_desc (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 2 3 4))\n;; #t",
    "  (let ((n (length lst)))\n    (if (eq? n 0)\n      #t\n      (let ((i 0))\n        (while (< i n)\n          (if (eq? (lst i) (lst (i + 1)))\n              #f\n              (return #f)))\n          (set! i (i + 1))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted_desc (list 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted_desc (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((head (car lst)))\n        (if (null? (cdr lst))\n          (if (eqv? head (car (cdr lst))) #t)\n            #f\n            (else\n              (is_sorted (cdr lst)))))))\n)\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted_desc (list 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted_desc (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((prev (car lst)))\n        (if (eq prev (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst))\n              (not (eq prev (car (cdr lst))))))))))\n",
    "  (let ((n (length lst)))\n    (if (eq? n 1)\n      (if (eq? lst 0)\n        #t\n        #f\n        (begin\n          (define (compare x y)\n            (cond\n              ((eq? x y) #t)\n              ((< x y) #f)\n              ((> x y) #t)\n              ((<= x y) #t)\n              ((>= x y) #f)\n            )\n          )\n          (define (sort lst)\n            (let ((n (length lst)))\n              (if (eq? n 1)\n                lst\n                (begin\n                  (define (sort lst)\n                    (let ((n (length lst)))\n                      (if (eq? n 1)\n                        lst\n                        (begin\n                          (define (sort lst)\n                            (let ((n (length lst)))\n                              (if (eq? n 1)\n                                lst\n                                (begin\n                                  (define (sort lst)\n                                    (let ((n (length lst)))\n                                      (if (eq? n 1)\n                                        lst\n                                        (begin\n                                          (define (sort lst)\n                                            (let ((n (length lst)))\n                                              (if (eq? n 1)\n                                                lst\n                                                (begin\n                                                  (define (sort lst)\n                                                    (let ((n (length lst)))\n                                                      (if (eq? n 1)\n                                                        lst\n                                                        (begin\n                                                          (define (sort lst)\n                                                           (let ((n (length lst)))\n                                                            (if (eq? n 1)\n                                                              lst\n                                                              (begin\n                                                                (define (sort lst)\n                                                                  (let ((n (length lst)))\n                                                                    (if (eq? n 1)\n                                                                      lst\n                                                              ",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((n (car lst)))\n        (if (eq? n (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst)))))))\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((n (car lst)))\n        (if (eq? n (car (cdr lst))) #f\n          (else\n            (if (eq? n (car (cdr (cdr lst)))) #t\n              (else #f)))))))\n)\n",
    "  (let ((n (length lst)))\n    (if (< n 2)\n      (if (= lst (list 1))\n        (return #t)\n        (return #f))\n      (let ((i 0)\n            (j (1)))\n        (while (< i n)\n          (if (not (= lst (list (first lst) (first (cdr lst)))))\n            (return #f)\n            (setq i (i + 1))\n            (setq j (j + 1)))\n          (if (not (<= (first lst) (first (cdr lst)))\n              (return #f))\n            (setq i (i + 1))\n            (setq j (j + 1)))\n          (setq lst (cdr lst)))\n        (return #t))))\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (eq? p (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr (cdr lst)))))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted_desc (list 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted_desc (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((n (car lst)))\n        (if (eq? n (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst)))))))\n",
    "  (let ((n (length lst)))\n    (if (eq? n 1)\n      (if (eq? lst 1)\n        #t\n        #f\n        )\n      (if (eq? n 2)\n        (if (eq? lst 2)\n          #t\n          #f\n          )\n        (if (eq? n 3)\n          (if (eq? lst 3)\n            #t\n            #f\n            )\n          (if (eq? n 4)\n            (if (eq? lst 4)\n              #t\n              #f\n              )\n            (if (eq? n 5)\n              (if (eq? lst 5)\n                #t\n                #f\n                )\n              (if (eq? n 6)\n                (if (eq? lst 6)\n                  #t\n                  #f\n                  )\n                (if (eq? n 7)\n                  (if (eq? lst 7)\n                    #t\n                    #f\n                    )\n                  (if (eq? n 8)\n                    (if (eq? lst 8)\n                      #t\n                      #f\n                      )\n                    (if (eq? n 9)\n                      (if (eq? lst 9)\n                        #t\n                        #f\n                        )\n                      (if (eq? n 10)\n                        (if (eq? lst 10)\n                          #t\n                          #f\n                          )\n                        (if (eq? n 11)\n                          (if (eq? lst 11)\n                            #t\n                            #f\n                            )\n                          (if (eq? n 12)\n                            (if (eq? lst 12)\n                              #t\n                              #f\n                              )\n                            (if (eq? n 13)\n                              (if (eq? lst 13)\n                                #t\n                                #f\n                                )\n                              (if (eq? n 14)\n                                (if (eq? lst 14)\n                                  #t\n                                  #f\n                                  )\n                                (if (eq? n 15)\n                                  (if (eq? lst 15)\n                                    #t\n                                    #f\n                                    )\n                                  (if (eq",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (eq? p (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst)))))))))\n",
    "  (let ((n (length lst)))\n    (if (eq? n 1)\n      (if (eq? lst 1)\n        #t\n        #f\n        (begin\n          (define (is_sorted lst)\n            (if (eq? lst 1)\n              #t\n              (begin\n                (define (is_sorted lst)\n                  (if (eq? lst 2)\n                    #f\n                    (begin\n                      (define (is_sorted lst)\n                        (if (eq? lst 3)\n                          #t\n                          (begin\n                            (define (is_sorted lst)\n                              (if (eq? lst 4)\n                                #t\n                                #f\n                                (begin\n                                  (define (is_sorted lst)\n                                    (if (eq? lst 5)\n                                      #t\n                                      #f\n                                      (begin\n                                        (define (is_sorted lst)\n                                          (if (eq? lst 6)\n                                            #t\n                                            #f\n                                            (begin\n                                              (define (is_sorted lst)\n                                                (if (eq? lst 7)\n                                                  #t\n                                                  #f\n                                                  #f
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (eq? p (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst)))))))\n)\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (let ((numbers (mapcar (lambda (x) (integer->number x)) lst)))\n    (if (null? numbers)\n      #t\n      (let ((n (car numbers))\n            (i (1)))\n        (while (< (car numbers) (car (cdr numbers)))\n          (if (< (car numbers) n)\n            (return #f)\n          (setq i (+ i 1))\n          (setq n (car numbers))\n          (setq numbers (cdr numbers)))))\n      (return #t))))\n",
    "  (cond\n    [(null? lst) #t]\n    [(null? (cdr lst)) #f]\n    [(car lst)\n      (if (null? (cdr lst)) #t\n        (if (null? (cdr (cdr lst))) #t\n          (if (null? (cdr (cdr (cdr lst)))) #t\n            (if (null? (cdr (cdr (cdr (cdr lst)))))) #f\n            (if (null? (cdr (cdr (cdr (cdr (cdr lst)))))) #t)\n            (if (null? (cdr (cdr (cdr (cdr (cdr (cdr lst)))))))) #f)\n          (if (null? (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst)))))))) #t)\n            (if (null? (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst)))))))))) #f)\n            (if (null? (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst)))))))))) #t)\n              #f)\n            (if (null? (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst)))))))))))) #t)\n              #f)\n            (if (null? (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst)))))))))))))) #t)\n              #f)\n            (if (null? (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst)))))))))))))))))) #t)\n              #f)\n            (if (null? (cdr (cdr (cdr (cdr (cdr (cdr (cdr (c",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (eq? p (car (cdr lst)))\n            #f\n            (else\n              (if (eq? p (car (cdr (cdr lst))))\n                  #f\n                  (else\n                    (if (eq? p (car (cdr (cdr (cdr lst))))))\n                      #f\n                      (else\n                        (if (eq? p (car (cdr (cdr (cdr (cdr lst))))))\n                            #f\n                            (else\n                              (if (eq? p (car (cdr (cdr (cdr (cdr (cdr lst))))))))\n                                #f\n                                (else\n                                  (if (eq? p (car (cdr (cdr (cdr (cdr (cdr (cdr lst))))))))\n                                      #f\n                                      (else\n                                        (if (eq? p (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst))))))))))\n                                          #f\n                                          (else\n                                            (if (eq? p (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst))))))))))\n                                                #f\n                                                (else\n                                                  (if (eq? p (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst))))))))))))\n                                                  #f\n                                                  (else\n                                                    (if (eq? p (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst))))))))))))\n                                                      #f\n                                                      (else\n                                                        (if (eq? p (car (cdr (cdr (cdr (cdr (cdr (c",
    "  (let ((n (length lst)))\n    (if (eq? n 1)\n      (if (eq? lst 0)\n        #t\n        #f\n        (begin\n          (define (compare x y)\n            (cond\n              ((eq? x y) #t)\n              ((< x y) #f)\n              ((> x y) #t)\n              ((<= x y) #t)\n              ((>= x y) #f)\n              ((= x y) #f)\n              ((< x y) #t)\n              ((<= x y) #t)\n              ((> x y) #f)\n              ((>= x y) #f)\n              #f)))\n          (let ((i 0))\n            (while (< i n)\n              (let ((x lst[i]))\n                (let ((y lst[(i + 1)]))\n                  (compare x y)\n                  (set! i (+ i 1)))))\n            #t))))\n    (else\n      (begin\n        (define (compare x y)\n          (cond\n            ((eq? x y) #t)\n            ((< x y) #f)\n            ((> x y) #t)\n            ((<= x y) #t)\n            ((>= x y) #f)\n            ((= x y) #f)\n            ((< x y) #t)\n            ((<= x y) #t)\n            ((> x y) #f)\n            ((>= x y) #f)\n            #f)))\n        (let ((i 0))\n          (while (< i n)\n            (let ((x lst[i]))\n              (let ((y lst[(i + 1)]))\n                (compare x y)\n                (set! i (+ i 1)))))\n          #t)))))))\n\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #t\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2",
    "  (let ((n (length lst)))\n    (if (eq? n 1)\n      (if (eq? lst 0)\n        #t\n        #f\n        (begin\n          (define (sort lst)\n            (define (sort lst)\n              (if (eq? lst 0)\n                #t\n                (begin\n                  (define (sort lst)\n                    (if (eq? lst 0)\n                      #t\n                      (begin\n                        (define (sort lst)\n                          (if (eq? lst 0)\n                            #t\n                            (begin\n                              (define (sort lst)\n                                (if (eq? lst 0)\n                                  #t\n                                  (begin\n                                    (define (sort lst)\n                                      (if (eq? lst 0)\n                                        #t\n                                        (begin\n                                          (define (sort lst)\n                                            (if (eq? lst 0)\n                                              #t\n                                              (begin\n                                                (define (sort lst)\n                                                  (if (eq? lst 0)\n                                                    #t\n                                                    (begin\n                                                      (define (sort lst)\n                                                        (if (eq? lst 0)\n                                                          #t\n                                                          (begin\n                                                            (define (sort lst)\n                                                              (if (eq? lst 0)\n                                                                #t\n                                                                (begin\n                                                                  (define (sort lst)\n                                                                    (if (eq? lst 0)\n                                                                      #t\n                                                                      (begin\n                                                                        (define (sort lst)\n                                                                          (if (eq? lst 0)\n                                                                            #t\n                                                                            (begin\n                                                                              (define (sort lst)\n                                                                                (if (eq? lst 0)\n                                                                                    #t\n                                                                                    ",
    "  (cond\n    ((null? lst) #t)\n    ((eq? (car lst) (car (cdr lst))) #f)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n            #t\n            (else\n              (if (eq? (car (cdr lst)) p)\n                  #f\n                  (is_sorted (cdr lst))))))))\n",
    "  (let ((n (car lst)))\n    (if (eq? n (car (cdr lst)))\n      (return #f)\n      (if (eq? n (car (cdr (cdr lst))))\n        (return #t)\n        (return (is_sorted (cdr lst)))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n            (if (eq? p (car (cdr lst))) #t)\n              #f\n            (else\n              (if (eq? p (car (cdr (cdr lst)))) #t)\n                #f\n              (else\n                (is_sorted (cdr lst)))))))))\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((l (car lst)))\n        (if (null? (cdr lst))\n            (if (eq? l (car (cdr lst))) #t)\n              #f\n              (is_sorted (cdr lst)))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted_desc (list 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted_desc (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((head (car lst)))\n        (if (eq? head (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (is_sorted (cdr (cdr lst))))\n          (is_sorted (cdr (cdr lst)))))))\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (eq? p (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst)))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (let ((lst-size (length lst)))\n    (if (eq? lst-size 0)\n      #t\n      (let ((i 0))\n        (while (< i lst-size)\n          (if (< (nth lst i) (nth lst (1+ i)))\n            (return #f)\n            (set! i (1+ i)))\n          (set! i (1+ i)))\n        #t))))\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (eq? p (car (cdr lst)))\n            #f\n            (else\n              (if (eq? p (car (cdr (cdr lst))))\n                  #f\n                  (else\n                    (is_sorted (cdr lst))))))))))\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n            (if (eq? p (car (cdr lst))) #t)\n              #f\n            (else\n              (if (eq? p (car (cdr (cdr lst)))) #t)\n                #f\n              (else\n                (is_sorted (cdr lst))))))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n            (if (eq? p (car (cdr lst))) #t)\n              #f\n            (else\n              (if (eq? p (car (cdr (cdr lst)))) #t)\n                #f\n              (else\n                (is_sorted (cdr lst)))))))))\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n            (if (eq? p (car (cdr lst))) #f)\n              (else\n                (if (eq? p (car (cdr (cdr lst))))\n                    (is_sorted (cdr (cdr lst)))\n                    (else #f)))))))))\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((head (car lst)))\n        (if (eq? head (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst)))))))\n)\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n            (if (eq? p (car (cdr lst))) #f)\n              (else (is_sorted (cdr lst))))\n          (is_sorted (cdr lst)))))))\n",
    "  (let ((n lst))\n    (if (null? n)\n      #t\n      (let ((n (car n)))\n        (if (null? (cdr n))\n          #t\n          (if (< n (car (cdr n)))\n            #f\n            (is_sorted (cdr n))))))))\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n            (if (eq? p (car (cdr lst))) #t)\n              #f\n            (else\n              (if (eq? p (car (cdr (cdr lst)))) #t)\n                #f\n              (else\n                (is_sorted (cdr lst)))))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((eq? (car lst) (car (cdr lst))) #f)\n    (else (is_sorted (cdr lst))))\n)\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted_desc (list 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted_desc (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 2 3 4))\n;; #t",
    "  (let ((n (length lst)))\n    (if (eq? n 0)\n      #t\n      (let ((i 0))\n        (while (< i n)\n          (if (eq? (lst i) (lst (i + 1)))\n              #f\n              (return #f))))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (let ((n (length lst)))\n    (if (eq? n 0)\n      #t\n      (let ((i 0))\n        (while (< i n)\n          (if (< lst i)\n            (return #f)\n            (set! i (+ i 1)))))\n      #t)))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (eq? p (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst)))))))\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((c (car lst)))\n        (if (eq? c (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst)))))))\n)\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((head (car lst)))\n        (if (null? (cdr lst))\n          (if (eq? head (car (cdr lst))) #t)\n            #f\n            (else\n              (is_sorted (cdr lst))))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted_desc (list 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted_desc (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((eq? (car lst) (car (cdr lst))) #f)\n    (else (is_sorted (cdr lst))))\n)\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (eq? p (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr (cdr lst)))))))))\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (eq? p (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst))))))))\n",
    "  (let ((n (length lst)))\n    (if (< n 2)\n      (if (is_sorted_helper lst 0 n)\n\t  (begin\n\t    (define (is_sorted_helper lst start end)\n\t      (if (eqv? lst (list start end))\n\t\t  #t\n\t\t  (is_sorted_helper lst (+ start 1) end)))))))\n  (is_sorted_helper lst 0 n)))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted_desc (list 5))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 3 4 5))\n;; #t\n;; >>> (is_sorted_desc (list 1 3 2 4 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted_desc (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 3 3 4))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 2 2 3 4))\n;; #f",
    "  (let ((n (length lst)))\n    (if (eq? n 1)\n      (if (eq? lst 1)\n        #t\n        #f\n        )\n      (if (eq? n 2)\n        (if (eq? lst 2)\n          #t\n          #f\n          )\n        (if (eq? n 3)\n          (if (eq? lst 3)\n            #t\n            #f\n            )\n          (if (eq? n 4)\n            (if (eq? lst 4)\n              #t\n              #f\n              )\n            (if (eq? n 5)\n              (if (eq? lst 5)\n                #t\n                #f\n                )\n              (if (eq? n 6)\n                (if (eq? lst 6)\n                  #t\n                  #f\n                  )\n                (if (eq? n 7)\n                  (if (eq? lst 7)\n                    #t\n                    #f\n                    )\n                  (if (eq? n 8)\n                    (if (eq? lst 8)\n                      #t\n                      #f\n                      )\n                    (if (eq? n 9)\n                      (if (eq? lst 9)\n                        #t\n                        #f\n                        )\n                      (if (eq? n 10)\n                        (if (eq? lst 10)\n                          #t\n                          #f\n                          )\n                        (if (eq? n 11)\n                          (if (eq? lst 11)\n                            #t\n                            #f\n                            )\n                          (if (eq? n 12)\n                            (if (eq? lst 12)\n                              #t\n                              #f\n                              )\n                            (if (eq? n 13)\n                              (if (eq? lst 13)\n                                #t\n                                #f\n                                )\n                              (if (eq? n 14)\n                                (if (eq? lst 14)\n                                  #t\n                                  #f\n                                  )\n                                (if (eq? n 15)\n                                  (if (eq? lst 15)\n                                    #t\n                                    #f\n                                    )\n                                  (if (eq",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n          (not (eqv? p (car (cdr lst))))\n          (not (eqv? p (car (cdr (cdr lst)))))))\n        (is_sorted (cdr lst))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted_desc (list 5))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 3 4 5))\n;; #t\n;; >>> (is_sorted_desc (list 1 3 2 4 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted_desc (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 3 3 4))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 2 2 3 4))\n;; #f",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((head (car lst)))\n        (if (eq? head (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst)))))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((head (car lst)))\n        (if (eq? head (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst))))))))\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n            (if (eq? p (car (cdr lst))) #f)\n              (else (is_sorted (cdr lst))))\n          (is_sorted (cdr lst)))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((head (car lst)))\n        (if (eq? head (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr (cdr lst)))))))\n  )\n)\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n            (if (eq? p (car (cdr lst))) #t)\n              #f\n            (else\n              (if (eq? p (car (cdr (cdr lst)))) #t)\n                #f\n              (else\n                (is_sorted (cdr lst)))))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n            (eq p (car (cdr lst)))\n            (else\n              (if (eq p (car (cdr (cdr lst))))\n                  (is_sorted (cdr (cdr lst)))\n                  (else\n                    (is_sorted (cdr lst))))))))))\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n            (if (eq? p (car (cdr lst))) #f)\n              (else\n                (is_sorted (cdr lst))))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted_desc (list 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted_desc (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((c (car lst)))\n        (if (eq? c (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst)))))))\n)\n",
    "  (let ((n (length lst)))\n    (if (eq? n 1)\n      (if (eq? lst 0)\n        #t\n        #f)\n      (let ((i 0)\n            (p (car lst)))\n        (while (< i n)\n          (if (eq? p (car (cdr lst)))\n            #f\n            (setq p (car (cdr lst)))\n            (setq i (1+ i)))\n          (setq lst (cdr lst)))\n        #t)))\n  lst)\n)\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((prev (car lst)))\n        (if (eq? prev (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst)))))\n    )\n  )\n)\n",
    "  (let ((n (length lst)))\n    (if (eq? n 1)\n      (let ((x lst))\n        (if (eq? x x)\n          #t\n          #f)))\n    (let ((x lst))\n      (if (eq? x x)\n        #f\n        (if (< x (car x))\n          (is_sorted (cdr lst))\n          (is_sorted (cdr (cdr lst))))))))\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (eq? p (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst)))))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted_desc (list 5))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 3 4 5))\n;; #t\n;; >>> (is_sorted_desc (list 1 3 2 4 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted_desc (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 3 3 4))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 2 2 3 4))\n;; #f",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (eq? p (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst)))))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted_desc (list 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted_desc (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 2 3 4))\n;; #t",
    "  (let ((lst-size (length lst)))\n    (if (eq? lst-size 0)\n      #t\n      (let ((i 0)\n            (j 0)\n            (duplicate-count 0))\n        (while (< i lst-size)\n          (if (eq? (aref lst i) (aref lst j))\n            (set! duplicate-count (+ 1 duplicate-count))\n            (set! j (aref lst i))\n            (set! i (aref lst i) (+ 1 i)))\n          (set! i (aref lst j)))))\n  )\n)\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((eq? (car lst) (car (cdr lst))) #f)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n          (if (eq? p (car (cdr (cdr lst)))) #t)\n            (else #f))\n          (is_sorted (cdr lst)))))))\n",
    "  (let ((n (car lst)))\n    (if (null? (cdr lst))\n      (if (eq? n (first lst))\n        #t\n        #f)\n      (if (eq? n (last lst))\n        #t\n        #f)\n      (is_sorted (cdr lst))))\n)\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n            (if (eq? p (car (cdr lst))) #t)\n              #f\n            (else\n              (if (eq? p (car (cdr (cdr lst)))) #t)\n                #f\n              (else\n                (is_sorted (cdr lst))))))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted_desc (list 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted_desc (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted_desc (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted_desc (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (eq? p (car (cdr lst)))\n            (is_sorted (cdr lst))\n            (else\n              (is_sorted (cdr lst)))))))\n)\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n            (not (eqv? p (car (cdr lst))))\n            (not (eqv? p (car (cdr (cdr lst)))))))\n        (is_sorted (cdr lst))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (let ((numbers (mapcar #(lambda (x) (integer->number x)) lst)))\n    (if (empty? numbers)\n      #t\n      (let ((n (car numbers)))\n        (if (eq? n (car (cdr numbers)))\n            #f\n            (is_sorted (cdr numbers)))))))\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((c (car lst)))\n        (if (eq? c (car (cdr lst)))\n            #f\n            (else\n              (if (eq? c (car (cdr (cdr lst))))\n                  #f\n                  (else\n                    (is_sorted (cdr lst))))))))))\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n            (if (eq? p (car (cdr lst))) #f)\n              (if (eq? p (car (cdr (cdr lst)))) #t)\n                (is_sorted (cdr (cdr lst)))\n              )\n            (is_sorted (cdr lst))\n          )\n      )\n  )\n)\n",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n            (if (eq? p (car (cdr lst))) #t)\n              #f\n            (else\n              (if (eq? p (car (cdr (cdr lst)))) #t)\n                #f\n              (else\n                (is_sorted (cdr lst)))))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((n (car lst)))\n        (if (eq? n (car (cdr lst)))\n            #f\n            (else\n              (if (eq? n (car (cdr (cdr lst))))\n                  #f\n                  (else\n                    (if (eq? n (car (cdr (cdr (cdr lst))))))\n                      #f\n                      (else\n                        (if (eq? n (car (cdr (cdr (cdr (cdr lst))))))\n                            #f\n                            (else\n                              (if (eq? n (car (cdr (cdr (cdr (cdr (cdr lst))))))))\n                                #f\n                                (else\n                                  (if (eq? n (car (cdr (cdr (cdr (cdr (cdr (cdr lst))))))))\n                                      #f\n                                      (else\n                                        (if (eq? n (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst))))))))))\n                                          #f\n                                          (else\n                                            (if (eq? n (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst))))))))))\n                                                #f\n                                                (else\n                                                  (if (eq? n (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst))))))))))))\n                                                  #f\n                                                  (else\n                                                    (if (eq? n (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst))))))))))))\n                                                      #f\n                                                      (else\n                                                        (if (eq? n (car (cdr (cdr (cdr (cdr (cdr (c",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (cond\n          ((null? (cdr (cdr lst))) #t)\n          (else\n            (let ((q (car (cdr (cdr lst))))\n                   (lessp (car lst) q))\n              (not lessp)\n              #f)))))))))\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (let ((n (length lst)))\n    (if (< n 2)\n      (if (eq? (car lst) (cdr lst))\n        #t\n        #f)\n      (is_sorted (cdr lst)))\n    (if (eq? (car lst) (cdr lst))\n      #f\n      #t))\n)\n\n;; Given a list of numbers, return whether or not they are sorted\n;; in descending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #f\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #t",
    "  (cond\n    ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car lst)))\n        (if (eq? p (car (cdr lst)))\n            #f\n            (else\n              (if (lt? p (car (cdr lst)))\n                  #t\n                  (is_sorted (cdr lst))))))))\n"
  ],
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ]
}