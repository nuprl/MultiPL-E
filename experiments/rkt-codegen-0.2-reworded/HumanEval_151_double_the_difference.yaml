name: HumanEval_151_double_the_difference
language: rkt
prompt: "#lang racket\n\n;; Given a list of numbers, return the sum of squares of\
  \ the numbers\n;; in the list that are odd. Ignore numbers that are negative or\
  \ not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference\
  \ (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>>\
  \ (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return\
  \ 0.\n(define (double_the_difference lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n\
  \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0\
  \ 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
  \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0\
  \ -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
  \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)"
completions: ["  (if (null? lst)\n    0\n    (+ (* (* 2 (car lst)) (car lst))\n  \
    \    (* (* 2 (cdr lst)) (cdr lst))))))\n\n;; Given a list of numbers, return the\
    \ sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that\
    \ are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n\
    ;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.", "  (if (null? lst)\n    0\n    (+\n      (map\
    \ (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (modulo x 2)))\
    \ lst))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not\
    \ (modulo x 2))) lst))))\n)\n\n;; Given a list of numbers, return the sum of the\
    \ squares of the numbers\n;; in the list. Ignore numbers that are negative or\
    \ not integers.\n;; >>> (sum_of_squares (list 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares\
    \ (list -1 -2 0))\n;; 0\n;; >>> (sum_of_squares (list 9 -2))\n;; 81\n;; >>> (sum_of_squares\
    \ (list 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (null? lst)\n\
    \    0\n    (+ (* (* 2 (car lst)) (car lst))\n      (double_the_difference (cdr\
    \ lst))))\n)\n\n;; Given a list of numbers, return the sum of squares of the numbers\n\
    ;; in the list that are odd. Ignore numbers that are negative or not integers.\n\
    ;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference\
    \ (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;;\
    \ >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return\
    \ 0.", "  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n\
    \        (filter (lambda (x) (not (integer? x)) (not (negative? x)) (odd? x)))\n\
    \        lst)))\n  )\n\n;; Given a list of numbers, return the sum of the squares\
    \ of the numbers\n;; in the list. Ignore numbers that are negative or not integers.\n\
    ;; >>> (sum_of_squares (list 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1\
    \ -2 0))\n;; 0\n;; >>> (sum_of_squares (list 9 -2))\n;; 81\n;; >>> (sum_of_squares\
    \ (list 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (null? lst)\n\
    \    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda\
    \ (x) (not (even? x)))))\n      (map (lambda (x) (* x x))\n        (filter (lambda\
    \ (x) (not (even? x))))))))\n\n;; Given a list of numbers, return the sum of the\
    \ squares of the numbers\n;; in the list that are even. Ignore numbers that are\
    \ negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;;\
    \ >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n\
    ;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty,\
    \ return 0.", "  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (*\
    \ x x) x))\n        (filter (lambda (x) (not (modulo x 2)))\n          lst)))))\n\
    \n;; Given a list of numbers, return the sum of the squares of the numbers\n;;\
    \ in the list. Ignore numbers that are negative or not integers.\n;; >>> (sum-of-squares\
    \ (list 1 3 2 0))\n;; 10\n;; >>> (sum-of-squares (list -1 -2 0))\n;; 0\n;; >>>\
    \ (sum-of-squares (list 9 -2))\n;; 81\n;; >>> (sum-of-squares (list 0))\n;; 0\n\
    ;; If the input list is empty, return 0.", "  (if (null? lst)\n    0\n    (+\n\
    \      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even?\
    \ x)) (car lst))\n          (cdr lst)))\n      (map (lambda (x) (* (* x x) x))\n\
    \        (filter (lambda (x) (not (even? x)) (cdr lst))\n          (cdr lst)))))))\n\
    \n;; Given a list of numbers, return the sum of squares of the numbers\n;; in\
    \ the list that are even. Ignore numbers that are negative or not integers.\n\
    ;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1\
    \ -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum\
    \ (list 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (null? lst)\n\
    \    0\n    (+ (* (* 2 (car lst)) (car lst))\n      (* (* 2 (car lst)) (cdr lst)))))\n\
    \n;; Given a list of numbers, return the sum of squares of the numbers\n;; in\
    \ the list that are odd. Ignore numbers that are negative or not integers.\n;;\
    \ >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference\
    \ (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;;\
    \ >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return\
    \ 0.", "  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n\
    \        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* x x))\n\
    \        (filter (lambda (x) (not (even? x))))))))\n\n;; Given a list of numbers,\
    \ return the sum of the squares of the numbers\n;; in the list that are even.\
    \ Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list\
    \ 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input\
    \ list is empty, return 0.", "  (if (null? lst)\n    0\n    (+\n      (map (lambda\
    \ (x) (* (* x x) 2))\n        (filter (lambda (x) (not (even? x)))))\n      (map\
    \ (lambda (x) (* x x)) lst))))\n\n;; Given a list of numbers, return the sum of\
    \ the squares of the numbers\n;; in the list that are even. Ignore numbers that\
    \ are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n\
    ;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n\
    ;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty,\
    \ return 0.", "  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (*\
    \ x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda\
    \ (x) (* (* x x) x))\n        (filter (lambda (x) (not (negative? x)))))\n   \
    \   (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (integer?\
    \ x))))))))\n\n;; Given a list of numbers, return the sum of the squares of the\
    \ numbers\n;; in the list. Ignore numbers that are negative or not integers.\n\
    ;; >>> (sum_of_squares (list 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1\
    \ -2 0))\n;; 0\n;; >>> (sum_of_squares (list 9 -2))\n;; 81\n;; >>> (sum_of_squares\
    \ (list 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (null? lst)\n\
    \    0\n    (+ (* (* lst (car lst)) (* (car lst) (car lst))))))\n\n;; Given a\
    \ list of numbers, return the sum of squares of the numbers\n;; in the list that\
    \ are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference\
    \ (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n\
    ;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference\
    \ (list 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (null? lst)\n\
    \    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda\
    \ (x) (not (even? x)))))\n      (map (lambda (x) (* x x))\n        (filter (lambda\
    \ (x) (not (even? x))))))))\n\n;; Given a list of numbers, return the sum of the\
    \ squares of the numbers\n;; in the list that are even. Ignore numbers that are\
    \ negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;;\
    \ >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n\
    ;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty,\
    \ return 0.", "  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (*\
    \ x x) 2))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda\
    \ (x) (* x x))\n        (filter (lambda (x) (not (even? x))))))))\n\n;; Given\
    \ a list of numbers, return the sum of the squares of the numbers\n;; in the list\
    \ that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum\
    \ (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>>\
    \ (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n\
    ;; If the input list is empty, return 0.", "  (if (null? lst)\n    0\n    (+\n\
    \      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (integer?\
    \ x)) (not (negative? x)))\n          lst)))))\n\n;; Given a list of numbers,\
    \ return the sum of squares of the numbers\n;; in the list that are even. Ignore\
    \ numbers that are negative or not integers.\n;; >>> (double_the_difference (list\
    \ 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>>\
    \ (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list\
    \ 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (null? lst)\n \
    \   0\n    (+ (* (* 2 (car lst)) (car lst))\n      (* (* 2 (cdr lst)) (cdr lst))))))\n\
    \n;; Given a list of numbers, return the sum of squares of the numbers\n;; in\
    \ the list that are odd. Ignore numbers that are negative or not integers.\n;;\
    \ >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference\
    \ (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;;\
    \ >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return\
    \ 0.", "  (if (null? lst)\n    0\n    (+ (* (* 2 (car lst)) (car lst))\n     \
    \ (* (* 2 (cdr lst)) (cdr lst))))))\n\n;; Given a list of numbers, return the\
    \ sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that\
    \ are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n\
    ;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.", "  (if (null? lst)\n    0\n    (+\n      (map\
    \ (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (modulo x 2)))\n\
    \          lst)))))\n\n;; Given a list of numbers, return the sum of the squares\
    \ of the numbers\n;; in the list that are even. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum\
    \ (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum\
    \ (list 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (null? lst)\n\
    \    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda\
    \ (x) (not (even? x)))))\n      (map (lambda (x) (* x x)) lst))))\n", "  (if (null?\
    \ lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter\
    \ (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n    \
    \    (filter (lambda (x) (not (even? x))))))))\n\n;; Given a list of numbers,\
    \ return the sum of the squares of the numbers\n;; in the list that are even.\
    \ Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list\
    \ 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input\
    \ list is empty, return 0.", "  (if (null? lst)\n    0\n    (+\n      (map (lambda\
    \ (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map\
    \ (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n\
    \      )))\n\n;; Given a list of numbers, return the sum of the squares of the\
    \ numbers\n;; in the list. Ignore numbers that are negative or not integers.\n\
    ;; >>> (sum_of_squares (list 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1\
    \ -2 0))\n;; 0\n;; >>> (sum_of_squares (list 9 -2))\n;; 81\n;; >>> (sum_of_squares\
    \ (list 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (null? lst)\n\
    \    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda\
    \ (x) (not (integer? x)) (negative? x)) lst))\n      (map (lambda (x) (* (* x\
    \ x) x))\n        (filter (lambda (x) (integer? x)) lst))))\n)\n\n;; Given a list\
    \ of numbers, return the sum of the squares of the numbers\n;; in the list that\
    \ are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum\
    \ (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>>\
    \ (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n\
    ;; If the input list is empty, return 0.", "  (if (null? lst)\n    0\n    (let\
    \ ((sum (make-vector 0 (length lst))))\n      (for-each (lambda (x)\n        \
    \          (if (odd? x)\n                    (setf sum (+ (* x x) sum)))))\n \
    \     sum)))\n\n;; Given a list of numbers, return the sum of the squares of the\
    \ numbers\n;; in the list. Ignore numbers that are negative or not integers.\n\
    ;; >>> (sum-of-squares (list 1 3 2 0))\n;; 10\n;; >>> (sum-of-squares (list -1\
    \ -2 0))\n;; 0\n;; >>> (sum-of-squares (list 9 -2))\n;; 81\n;; >>> (sum-of-squares\
    \ (list 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (empty? lst)\n\
    \    0\n    (+ (* (* 2 (car lst)) (car lst))\n      (double_the_difference (cdr\
    \ lst))))\n)\n\n;; Given a list of numbers, return the sum of squares of the numbers\n\
    ;; in the list that are odd. Ignore numbers that are negative or not integers.\n\
    ;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference\
    \ (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;;\
    \ >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return\
    \ 0.", "  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n\
    \        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (*\
    \ x x) x))\n        (filter (lambda (x) (not (even? x))))))))\n\n;; Given a list\
    \ of numbers, return the sum of the squares of the numbers\n;; in the list that\
    \ are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum\
    \ (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>>\
    \ (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n\
    ;; If the input list is empty, return 0.", "  (if (null? lst)\n    0\n    (+ (*\
    \ (* 2 (car lst)) (car lst))\n       (* (* 2 (car lst)) (cdr lst)))))\n\n;; Given\
    \ a list of numbers, return the sum of the squares of the numbers\n;; in the list.\
    \ Ignore numbers that are negative or not integers.\n;; >>> (sum_of_squares (list\
    \ 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1 -2 0))\n;; 0\n;; >>> (sum_of_squares\
    \ (list 9 -2))\n;; 81\n;; >>> (sum_of_squares (list 0))\n;; 0\n;; If the input\
    \ list is empty, return 0.", "  (if (null? lst)\n    0\n    (+\n      (map (lambda\
    \ (x) (* (* x x) 2))\n        (filter (lambda (x) (not (modulo x 2)))\n      \
    \    lst)))))\n\n;; Given a list of numbers, return the sum of squares of the\
    \ numbers\n;; in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference\
    \ (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;;\
    \ >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return\
    \ 0.", "  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n\
    \        (filter (lambda (x) (not (integer? x)) (negative? x))\n          lst))\n\
    \      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (integer?\
    \ x))\n          lst))))\n)\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are even. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 0\n;; >>>\
    \ (double_the_difference (list -1 -2 0))\n;; 10\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.", "  (if (null? lst)\n    0\n    (+\n      (map\
    \ (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n\
    \      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even?\
    \ x))))))))\n", "  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (*\
    \ x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda\
    \ (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      )))\n\
    \n;; Given a list of numbers, return the sum of the squares of the numbers\n;;\
    \ in the list. Ignore numbers that are negative or not integers.\n;; >>> (sum_of_squares\
    \ (list 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1 -2 0))\n;; 0\n;; >>>\
    \ (sum_of_squares (list 9 -2))\n;; 81\n;; >>> (sum_of_squares (list 0))\n;; 0\n\
    ;; If the input list is empty, return 0.", "  (if (null? lst)\n    0\n    (+\n\
    \      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (modulo\
    \ x 2)))\n          lst)))))\n", "  (if (null? lst)\n    0\n    (+ (* (* lst (car\
    \ lst)) (* (car lst) (car lst))))))\n\n;; Given a list of numbers, return the\
    \ sum of the squares of the numbers\n;; in the list. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (sum_of_squares (list 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares\
    \ (list -1 -2 0))\n;; 0\n;; >>> (sum_of_squares (list 9 -2))\n;; 81\n;; >>> (sum_of_squares\
    \ (list 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (null? lst)\n\
    \    0\n    (+ (* (* 2 (car lst)) (car lst))\n      (* (* 2 (cdr lst)) (cdr lst))))))\n\
    \n;; Given a list of numbers, return the sum of squares of the numbers\n;; in\
    \ the list that are even. Ignore numbers that are negative or not integers.\n\
    ;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1\
    \ -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum\
    \ (list 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (null? lst)\n\
    \    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda\
    \ (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter\
    \ (lambda (x) (not (even? x)))))\n      )))\n\n;; Given a list of numbers, return\
    \ the sum of squares of the numbers\n;; in the list that are even. Ignore numbers\
    \ that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n\
    ;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list\
    \ 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list\
    \ is empty, return 0.", "  (if (null? lst)\n    0\n    (+ (* (* 2 (car lst)) (car\
    \ lst))\n      (* (* 2 (cdr lst)) (cdr lst))))))\n\n;; Given a list of numbers,\
    \ return the sum of squares of the numbers\n;; in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n;; >>> (double_the_difference (list\
    \ 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>>\
    \ (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list\
    \ 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (null? lst)\n \
    \   0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda\
    \ (x) (not (modulo x 2))\n                 (filter (lambda (y) (not (modulo y\
    \ 2))\n                          (cons y lst))))\n         lst)))\n    0)))\n",
  "  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n     \
    \   (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* x x))\n\
    \        (filter (lambda (x) (not (even? x))))))))\n\n;; Given a list of numbers,\
    \ return the sum of the squares of the numbers\n;; in the list that are even.\
    \ Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list\
    \ 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input\
    \ list is empty, return 0.", "  (if (null? lst)\n    0\n    (+\n      (map (lambda\
    \ (x) (* (* x x) 2))\n        (filter (lambda (x) (not (integer? x)) (not (negative?\
    \ x)))\n          lst)))))\n\n;; Given a list of numbers, return the sum of the\
    \ squares of the numbers\n;; in the list. Ignore numbers that are negative or\
    \ not integers.\n;; >>> (sum_of_squares (list 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares\
    \ (list -1 -2 0))\n;; 0\n;; >>> (sum_of_squares (list 9 -2))\n;; 81\n;; >>> (sum_of_squares\
    \ (list 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (null? lst)\n\
    \    0\n    (+ (* (* 2 (car lst)) (car lst))\n      (* (* 2 (cdr lst)) (cdr lst))))))\n\
    \n;; Given a list of numbers, return the sum of the squares of the numbers\n;;\
    \ in the list that are even. Ignore numbers that are negative or not integers.\n\
    ;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1\
    \ -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum\
    \ (list 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (null? lst)\n\
    \    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda\
    \ (x) (not (even? x))\n                 (filter (lambda (y) (not (even? y))\n\
    \                          (list y))))\n          lst)))))\n\n;; Given a list\
    \ of numbers, return the sum of the squares of the numbers\n;; in the list. Ignore\
    \ numbers that are negative or not integers.\n;; >>> (sum_of_squares (list 1 3\
    \ 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1 -2 0))\n;; 0\n;; >>> (sum_of_squares\
    \ (list 9 -2))\n;; 81\n;; >>> (sum_of_squares (list 0))\n;; 0\n;; If the input\
    \ list is empty, return 0.", "  (if (null? lst)\n    0\n    (+ (* (* 2 (car lst))\
    \ (car lst))\n      (double_the_difference (cdr lst))))\n)\n\n;; Given a list\
    \ of numbers, return the sum of squares of the numbers\n;; in the list that are\
    \ odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference\
    \ (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n\
    ;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference\
    \ (list 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (empty? lst)\n\
    \    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda\
    \ (x) (not (modulo x 2))\n                 (filter (lambda (y) (not (modulo y\
    \ 2))\n                          (list y))))\n          lst)))))\n", "  (if (null?\
    \ lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter\
    \ (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n    \
    \    (filter (lambda (x) (not (even? x))))))))\n", "  (if (null? lst)\n    0\n\
    \    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not\
    \ (modulo x 2)))\n          lst)))))\n\n;; Given a list of numbers, return the\
    \ sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that\
    \ are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n\
    ;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.", "  (if (null? lst)\n    0\n    (+ (* (* lst\
    \ (car lst)) (* (* (car lst) (cdr lst))))\n      (* (* (car lst) (cdr lst)) (*\
    \ (* (car lst) (car lst)))))))\n\n;; Given a list of numbers, return the sum of\
    \ squares of the numbers\n;; in the list that are even. Ignore numbers that are\
    \ negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;;\
    \ >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n\
    ;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty,\
    \ return 0.", "  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (*\
    \ x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda\
    \ (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      )))\n\
    \n;; Given a list of numbers, return the sum of the squares of the numbers\n;;\
    \ in the list. Ignore numbers that are negative or not integers.\n;; >>> (sum_of_squares\
    \ (list 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1 -2 0))\n;; 0\n;; >>>\
    \ (sum_of_squares (list 9 -2))\n;; 81\n;; >>> (sum_of_squares (list 0))\n;; 0\n\
    ;; If the input list is empty, return 0.", "  (if (null? lst)\n    0\n    (+\n\
    \      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (modulo\
    \ x 2)))\n          lst)))))\n\n;; Given a list of numbers, return the sum of\
    \ the squares of the numbers\n;; in the list that are even. Ignore numbers that\
    \ are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n\
    ;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.", "  (if (null? lst)\n    0\n    (+\n      (map\
    \ (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (modulo x 2)))\n\
    \          lst)))))\n\n;; Given a list of numbers, return the sum of the squares\
    \ of the numbers\n;; in the list that are even. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum\
    \ (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum\
    \ (list 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (null? lst)\n\
    \    0\n    (+\n      (map (lambda (n) (* (* n n) (* 2 n))) lst)\n      (filter\
    \ (lambda (n) (not (integer? n)) (not (negative? n))) lst))))\n", "  (if (null?\
    \ lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter\
    \ (lambda (x) (not (even? x))\n                 (filter (lambda (y) (not (negative?\
    \ y))\n                          (integer? y))))\n          lst)))\n      0)))\n",
  "  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n     \
    \   (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x)\
    \ x))\n        (filter (lambda (x) (not (even? x))))))))\n", "  (if (null? lst)\n\
    \    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda\
    \ (x) (not (even? x)))))\n      (map (lambda (x) (* x x)) lst))))\n\n;; Given\
    \ a list of numbers, return the sum of the squares of the numbers\n;; in the list\
    \ that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum\
    \ (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>>\
    \ (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n\
    ;; If the input list is empty, return 0.", "  (if (null? lst)\n    0\n    (+\n\
    \      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (modulo\
    \ x 2)))\n          lst)))))\n\n;; Given a list of numbers, return the sum of\
    \ the squares of the numbers\n;; in the list. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (sum-of-squares (list 1 3 2 0))\n;; 10\n;; >>> (sum-of-squares\
    \ (list -1 -2 0))\n;; 0\n;; >>> (sum-of-squares (list 9 -2))\n;; 81\n;; >>> (sum-of-squares\
    \ (list 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (null? lst)\n\
    \    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda\
    \ (x) (not (modulo x 2)))\n          lst)))))\n\n;; Given a list of numbers, return\
    \ the sum of squares of the numbers\n;; in the list that are even. Ignore numbers\
    \ that are negative or not integers.\n;; >>> (double_the_difference (list 1 3\
    \ 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.", "  (if (null? lst)\n    0\n    (+\n      (map\
    \ (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (modulo x 2)))\n\
    \          lst)))))\n\n;; Given a list of numbers, return the sum of the squares\
    \ of the numbers\n;; in the list that are even. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum\
    \ (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum\
    \ (list 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (null? lst)\n\
    \    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda\
    \ (x) (not (even? x))\n                 (filter (lambda (y) (not (even? y))\n\
    \                          (list (number? y) y))))\n          lst)))\n      0)))\n",
  "  (if (null? lst)\n    0\n    (let ((sum 0))\n      (for-each\n        (lambda\
    \ (x)\n          (if (odd? x)\n            (set! sum (+ (* x x) sum)))))\n   \
    \   sum)))\n\n;; Given a list of numbers, return the sum of the squares of the\
    \ numbers\n;; in the list. Ignore numbers that are negative or not integers.\n\
    ;; >>> (sum_of_squares (list 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1\
    \ -2 0))\n;; 0\n;; >>> (sum_of_squares (list 9 -2))\n;; 81\n;; >>> (sum_of_squares\
    \ (list 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (null? lst)\n\
    \    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda\
    \ (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter\
    \ (lambda (x) (not (even? x))))))))\n", "  (if (null? lst)\n    0\n    (+\n  \
    \    (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (modulo\
    \ x 2)))\n          lst)))))\n\n;; Given a list of numbers, return the sum of\
    \ squares of the numbers\n;; in the list that are even. Ignore numbers that are\
    \ negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;;\
    \ 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.", "  (if (null? lst)\n    0\n    (+\n      (map\
    \ (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (even? x)))))\n\
    \      (map (lambda (x) (* x x))\n        (filter (lambda (x) (not (even? x))))))))\n\
    \n;; Given a list of numbers, return the sum of the squares of the numbers\n;;\
    \ in the list that are even. Ignore numbers that are negative or not integers.\n\
    ;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1\
    \ -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum\
    \ (list 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (null? lst)\n\
    \    0\n    (+ (* (* 2 (car lst)) (car lst))\n      (* (* 2 (car lst)) (cdr lst)))))\n\
    \n;; Given a list of numbers, return the sum of the squares of the numbers\n;;\
    \ in the list. Ignore numbers that are negative or not integers.\n;; >>> (sum_of_squares\
    \ (list 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1 -2 0))\n;; 0\n;; >>>\
    \ (sum_of_squares (list 9 -2))\n;; 81\n;; >>> (sum_of_squares (list 0))\n;; 0\n\
    ;; If the input list is empty, return 0.", "  (if (null? lst)\n    0\n    (+\n\
    \      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even?\
    \ x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not\
    \ (even? x))))))))\n", "  (if (null? lst)\n    0\n    (+\n      (map (lambda (x)\
    \ (* (* x x) x))\n        (filter (lambda (x) (not (modulo x 2)))\n          (list\
    \ lst)))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not\
    \ (modulo x 2)))\n          (list (- lst)))))))\n", "  (if (empty? lst)\n    0\n\
    \    (+ (* (* lst (first lst)) (* (first lst)))\n      (* (* (rest lst) (* (first\
    \ lst))) (* (first lst)))))))\n\n;; Given a list of numbers, return the sum of\
    \ squares of the numbers\n;; in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;;\
    \ 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.", "  (if (null? lst)\n    0\n    (+\n      (map\
    \ (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n\
    \      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even?\
    \ x))))))))\n", "  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (*\
    \ x x) x))\n        (filter (lambda (x) (not (modulo x 2)))\n          (list lst)))\n\
    \      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (modulo\
    \ x 2)))\n          (list (- lst)))))))\n\n;; Given a list of numbers, return\
    \ the sum of the squares of the numbers\n;; in the list that are even. Ignore\
    \ numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3\
    \ 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input\
    \ list is empty, return 0.", "  (if (null? lst)\n    0\n    (+\n      (map (lambda\
    \ (x) (* (* x x) x))\n        (filter (lambda (x) (not (integer? x))\n       \
    \          (filter (lambda (y) (not (integer? y))\n                          (integer?\
    \ (abs y))))\n                 lst)))\n      (map (lambda (x) (* (* x x) x))\n\
    \         (filter (lambda (x) (integer? x))\n              lst)))\n    0)))\n",
  "  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n     \
    \   (filter (lambda (x) (not (integer? x)) (not (negative? x))))\n        lst)))\n\
    \  )\n)\n\n;; Given a list of numbers, return the sum of squares of the numbers\n\
    ;; in the list that are even. Ignore numbers that are negative or not integers.\n\
    ;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1\
    \ -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum\
    \ (list 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (null? lst)\n\
    \    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda\
    \ (x) (not (integer? x)) (negative? x)) lst))\n      (map (lambda (x) (* (* x\
    \ x) x))\n        (filter (lambda (x) (integer? x)) lst))))\n)\n\n;; Given a list\
    \ of numbers, return the sum of the squares of the numbers\n;; in the list. Ignore\
    \ numbers that are negative or not integers.\n;; >>> (sum_of_squares (list 1 3\
    \ 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1 -2 0))\n;; 0\n;; >>> (sum_of_squares\
    \ (list 9 -2))\n;; 81\n;; >>> (sum_of_squares (list 0))\n;; 0\n;; If the input\
    \ list is empty, return 0.", "  (if (null? lst)\n    0\n    (+ (* (* lst 2) 2)\n\
    \      (double_the_difference (cdr lst))))))\n\n;; Given a list of numbers, return\
    \ the sum of squares of the numbers\n;; in the list that are even. Ignore numbers\
    \ that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n\
    ;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list\
    \ 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list\
    \ is empty, return 0.", "  (if (null? lst)\n    0\n    (+\n      (map (lambda\
    \ (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x))\n          \
    \       (filter (lambda (y) (not (negative? y))\n                          (integer?\
    \ y))\n                       lst)))\n        lst)))\n  )\n)\n", "  (if (null?\
    \ lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter\
    \ (lambda (x) (not (integer? x)) (negative? x)) lst))\n      (map (lambda (x)\
    \ (* (* x x) x))\n        (filter (lambda (x) (integer? x)) lst))))\n)\n\n;; Given\
    \ a list of numbers, return the sum of the squares of the numbers\n;; in the list\
    \ that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference\
    \ (list 1 3 2 0))\n;; 0\n;; >>> (double_the_difference (list -1 -2 0))\n;; 81\n\
    ;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference\
    \ (list 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (null? lst)\n\
    \    0\n    (+ (* (* 2 (car lst)) (car lst))\n      (double_the_difference (cdr\
    \ lst))))\n)\n\n;; Given a list of numbers, return the sum of squares of the numbers\n\
    ;; in the list that are odd. Ignore numbers that are negative or not integers.\n\
    ;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference\
    \ (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;;\
    \ >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return\
    \ 0.", "  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n\
    \        (filter (lambda (x) (not (modulo x 2))) lst))\n      (map (lambda (x)\
    \ (* (* x x) x))\n        (filter (lambda (x) (not (modulo x 2))) lst))))\n)\n\
    \n;; Given a list of numbers, return the sum of the squares of the numbers\n;;\
    \ in the list that are even. Ignore numbers that are negative or not integers.\n\
    ;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1\
    \ -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum\
    \ (list 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (null? lst)\n\
    \    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda\
    \ (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter\
    \ (lambda (x) (not (even? x))))))))\n", "  (if (null? lst)\n    0\n    (+ (* (*\
    \ 2 (car lst)) (car lst))\n      (double_the_difference (cdr lst))))\n)\n\n;;\
    \ Given a list of numbers, return the sum of the squares of the numbers\n;; in\
    \ the list. Ignore numbers that are negative or not integers.\n;; >>> (sum_of_squares\
    \ (list 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1 -2 0))\n;; 0\n;; >>>\
    \ (sum_of_squares (list 9 -2))\n;; 81\n;; >>> (sum_of_squares (list 0))\n;; 0\n\
    ;; If the input list is empty, return 0.", "  (if (null? lst)\n    0\n    (+\n\
    \      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even?\
    \ x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not\
    \ (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda\
    \ (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter\
    \ (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n    \
    \    (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x)\
    \ x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x)\
    \ (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda\
    \ (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map\
    \ (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n\
    \      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even?\
    \ x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not\
    \ (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda\
    \ (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter\
    \ (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n    \
    \    (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x)\
    \ x))\n        (filter (lambda (x) (not (even? x)))))\n", "  (if (null? lst)\n\
    \    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda\
    \ (x) (not (even? x))\n                 (filter (lambda (y) (not (negative? y))\n\
    \                          (integer? y))))\n          lst)))))\n", "  (if (null?\
    \ lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter\
    \ (lambda (x) (not (even? x))\n                 (filter (lambda (y) (not (negative?\
    \ y))\n                          (integer? y))))\n          lst)))))\n", "  (if\
    \ (null? lst)\n    0\n    (+ (* (* lst (first lst)) (* (first lst)))\n      (*\
    \ (* (rest lst) (* (first lst))) (* (first lst)))))))\n\n;; Given a list of numbers,\
    \ return the sum of the squares of the numbers\n;; in the list that are even.\
    \ Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference\
    \ (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n\
    ;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference\
    \ (list 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (null? lst)\n\
    \    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda\
    \ (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter\
    \ (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n    \
    \    (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x)\
    \ x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x)\
    \ (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda\
    \ (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map\
    \ (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n\
    \      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even?\
    \ x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not\
    \ (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda\
    \ (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter\
    \ (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n    \
    \    (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x)\
    \ x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x)\
    \ (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda\
    \ (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n", "  (if\
    \ (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter\
    \ (lambda (x) (not (integer? x)) (negative? x)) lst))\n      (map (lambda (x)\
    \ (* (* x x) x))\n        (filter (lambda (x) (integer? x)) lst))))\n)\n\n;; Given\
    \ a list of numbers, return the sum of the squares of the numbers\n;; in the list\
    \ that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum\
    \ (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>>\
    \ (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n\
    ;; If the input list is empty, return 0.", "  (if (null? lst)\n    0\n    (+\n\
    \      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (integer?\
    \ x)) (negative? x)) lst))\n      (map (lambda (x) (* (* x x) x))\n        (filter\
    \ (lambda (x) (integer? x)) lst))))\n)\n\n;; Given a list of numbers, return the\
    \ sum of the squares of the numbers\n;; in the list. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (sum_of_squares (list 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares\
    \ (list -1 -2 0))\n;; 0\n;; >>> (sum_of_squares (list 9 -2))\n;; 81\n;; >>> (sum_of_squares\
    \ (list 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (null? lst)\n\
    \    0\n    (+ (* (* 2 (car lst)) (car lst))\n       (* (* 2 (cdr lst)) (cdr lst))))))\n\
    \n;; Given a list of numbers, return the sum of squares of the numbers\n;; in\
    \ the list that are odd. Ignore numbers that are negative or not integers.\n;;\
    \ >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference\
    \ (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;;\
    \ >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return\
    \ 0.", "  (if (null? lst)\n    0\n    (+ (* (* lst (car lst)) (* (* (car lst)\
    \ (cdr lst))))\n      (* (* (car lst) (cdr lst)) (* (* (car lst) (car lst)))))))\n\
    \n;; Given a list of numbers, return the sum of the squares of the numbers\n;;\
    \ in the list. Ignore numbers that are negative or not integers.\n;; >>> (sum_of_squares\
    \ (list 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1 -2 0))\n;; 0\n;; >>>\
    \ (sum_of_squares (list 9 -2))\n;; 81\n;; >>> (sum_of_squares (list 0))\n;; 0\n\
    ;; If the input list is empty, return 0.", "  (if (null? lst)\n    0\n    (+ (*\
    \ (* 2 (car lst)) (car lst))\n      (* (* 2 (car lst)) (cdr lst)))))\n\n;; Given\
    \ a list of numbers, return the sum of squares of the numbers\n;; in the list\
    \ that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference\
    \ (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n\
    ;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference\
    \ (list 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (null? lst)\n\
    \    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda\
    \ (x) (not (modulo x 2)))\n          lst)))))\n\n;; Given a list of numbers, return\
    \ the sum of the squares of the numbers\n;; in the list that are even. Ignore\
    \ numbers that are negative or not integers.\n;; >>> (double_the_difference (list\
    \ 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>>\
    \ (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list\
    \ 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (null? lst)\n \
    \   0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda\
    \ (x) (not (even? x))\n                 (filter (lambda (y) (not (negative? y))\n\
    \                          (integer? y))))\n          lst))))))\n\n;; Given a\
    \ list of numbers, return the sum of the squares of the numbers\n;; in the list\
    \ that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum\
    \ (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>>\
    \ (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n\
    ;; If the input list is empty, return 0.", "  (if (null? lst)\n    0\n    (+\n\
    \      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (integer?\
    \ x)) (negative? x))\n          lst))\n      (map (lambda (x) (* (* x x) x))\n\
    \        (filter (lambda (x) (integer? x))\n          lst))))\n)\n", "  (if (null?\
    \ lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter\
    \ (lambda (x) (not (even? x))\n                 (filter (lambda (y) (not (even?\
    \ y))\n                          (>= y 0))))\n          lst)))))\n", "  (if (null?\
    \ lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter\
    \ (lambda (x) (not (integer? x)) (negative? x))\n          (lst)))\n      (map\
    \ (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (integer? x))\n    \
    \      (lst))))))\n\n;; Given a list of numbers, return the sum of the squares\
    \ of the numbers\n;; in the list that are even. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>>\
    \ (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.", "  (if (null? lst)\n    0\n    (+\n      (map\
    \ (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (modulo x 2)))\n\
    \          lst)))))\n", "  (if (null? lst)\n    0\n    (+ (* (* 2 (car lst)) (car\
    \ lst))\n       (* (* 2 (cdr lst)) (cdr lst))))))\n\n;; Given a list of numbers,\
    \ return the sum of squares of the numbers\n;; in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n;; >>> (double_the_difference (list\
    \ 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>>\
    \ (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list\
    \ 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (null? lst)\n \
    \   0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda\
    \ (x) (not (integer? x)) (negative? x)) lst))\n      (map (lambda (x) (* (* x\
    \ x) x))\n        (filter (lambda (x) (integer? x)) lst))))\n)\n\n;; Given a list\
    \ of numbers, return the sum of the squares of the numbers\n;; in the list that\
    \ are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference\
    \ (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n\
    ;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference\
    \ (list 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (empty? lst)\n\
    \    0\n    (+ (* (* 2 (first lst)) (first lst))\n      (* (* 2 (second lst))\
    \ (second lst)))))\n\n;; Given a list of numbers, return the sum of squares of\
    \ the numbers\n;; in the list that are odd. Ignore numbers that are negative or\
    \ not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>>\
    \ (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.", "  (if (null? lst)\n    0\n    (+\n      (map\
    \ (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (integer? x)) (not\
    \ (negative? x))))\n        lst)))\n  )\n)\n\n;; Given a list of numbers, return\
    \ the sum of the squares of the numbers\n;; in the list that are even. Ignore\
    \ numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3\
    \ 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input\
    \ list is empty, return 0.", "  (if (null? lst)\n    0\n    (+ (* (* lst (car\
    \ lst)) (* (car lst) (car lst))))))\n\n;; Given a list of numbers, return the\
    \ sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that\
    \ are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n\
    ;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.", "  (if (null? lst)\n    0\n    (+\n      (map\
    \ (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n\
    \      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even?\
    \ x)))))\n      )))\n\n;; Given a list of numbers, return the sum of the squares\
    \ of the numbers\n;; in the list. Ignore numbers that are negative or not integers.\n\
    ;; >>> (sum_of_squares (list 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1\
    \ -2 0))\n;; 0\n;; >>> (sum_of_squares (list 9 -2))\n;; 81\n;; >>> (sum_of_squares\
    \ (list 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (null? lst)\n\
    \    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda\
    \ (x) (not (modulo x 2)))\n          lst)))))\n\n;; Given a list of numbers, return\
    \ the sum of the squares of the numbers\n;; in the list. Ignore numbers that are\
    \ negative or not integers.\n;; >>> (sum_of_squares (list 1 3 2 0))\n;; 10\n;;\
    \ >>> (sum_of_squares (list -1 -2 0))\n;; 0\n;; >>> (sum_of_squares (list 9 -2))\n\
    ;; 81\n;; >>> (sum_of_squares (list 0))\n;; 0\n;; If the input list is empty,\
    \ return 0.", "  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (*\
    \ x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda\
    \ (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x))))))))\n", " \
    \ (if (null? lst)\n    0\n    (+ (* (* 2 (+ (car lst) (cdr lst))) (car lst)))\n\
    \  )\n)\n\n;; Given a list of numbers, return the sum of squares of the numbers\n\
    ;; in the list that are odd. Ignore numbers that are negative or not integers.\n\
    ;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference\
    \ (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;;\
    \ >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return\
    \ 0.", "  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n\
    \        (filter (lambda (x) (not (even? x)) (car lst))\n          (cdr lst)))\n\
    \      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even?\
    \ x)) (cdr lst))\n          (cdr lst)))))))\n\n;; Given a list of numbers, return\
    \ the sum of squares of the numbers\n;; in the list that are even. Ignore numbers\
    \ that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n\
    ;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list\
    \ 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list\
    \ is empty, return 0.", "  (if (null? lst)\n    0\n    (+\n      (map (lambda\
    \ (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map\
    \ (lambda (x) (* x x))\n        (filter (lambda (x) (not (even? x))))))))\n\n\
    ;; Given a list of numbers, return the sum of squares of the numbers\n;; in the\
    \ list that are even. Ignore numbers that are negative or not integers.\n;; >>>\
    \ (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n\
    ;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list\
    \ 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (null? lst)\n \
    \   0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda\
    \ (x) (not (integer? x)) (not (negative? x))))\n        lst)))\n  )\n)\n\n;; Given\
    \ a list of numbers, return the sum of squares of the numbers\n;; in the list\
    \ that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference\
    \ (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n\
    ;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference\
    \ (list 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (null? lst)\n\
    \    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda\
    \ (x) (not (modulo x 2)))\n          (lst)))\n      (map (lambda (x) (* x x))\n\
    \        (filter (lambda (x) (not (modulo x 2)))\n          (lst))))))\n\n;; Given\
    \ a list of numbers, return the sum of the squares of the numbers\n;; in the list.\
    \ Ignore numbers that are negative or not integers.\n;; >>> (sum_of_squares (list\
    \ 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1 -2 0))\n;; 0\n;; >>> (sum_of_squares\
    \ (list 9 -2))\n;; 81\n;; >>> (sum_of_squares (list 0))\n;; 0\n;; If the input\
    \ list is empty, return 0.", "  (if (null? lst)\n    0\n    (+\n      (map (lambda\
    \ (x) (* (* x x) 2))\n        (filter (lambda (x) (not (integer? x)) (not (negative?\
    \ x)) (odd? x)))\n        lst)))\n  )\n\n;; Given a list of numbers, return the\
    \ sum of the squares of the numbers\n;; in the list that are even. Ignore numbers\
    \ that are negative or not integers.\n;; >>> (double_the_difference (list 1 3\
    \ 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.", "  (if (null? lst)\n    0\n    (+\n      (map\
    \ (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (integer? x)) (not\
    \ (negative? x)))\n          lst)))))\n\n;; Given a list of numbers, return the\
    \ sum of squares of the numbers\n;; in the list that are even. Ignore numbers\
    \ that are negative or not integers.\n;; >>> (double_the_difference (list 1 3\
    \ 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.", "  (if (empty? lst)\n    0\n    (+\n      (map\
    \ (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x))\n  \
    \               (filter (lambda (y) (not (negative? y))\n                    \
    \      (integer? y))))\n          lst)))))\n\n;; Given a list of numbers, return\
    \ the sum of squares of the numbers\n;; in the list that are even. Ignore numbers\
    \ that are negative or not integers.\n;; >>> (double_the_difference (list 1 3\
    \ 2 0))\n;; 0\n;; >>> (double_the_difference (list -1 -2 0))\n;; 10\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.", "  (if (null? lst)\n    0\n    (+\n      (map\
    \ (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (integer? x)) (not\
    \ (negative? x)))\n          lst)))))\n\n;; Given a list of numbers, return the\
    \ sum of the squares of the numbers\n;; in the list. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (sum_of_squares (list 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares\
    \ (list -1 -2 0))\n;; 0\n;; >>> (sum_of_squares (list 9 -2))\n;; 81\n;; >>> (sum_of_squares\
    \ (list 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (null? lst)\n\
    \    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda\
    \ (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter\
    \ (lambda (x) (not (negative? x)))))\n      (map (lambda (x) (* (* x x) x))\n\
    \        (filter (lambda (x) (not (integer? x))))))))\n\n;; Given a list of numbers,\
    \ return the sum of the squares of the numbers\n;; in the list that are even.\
    \ Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list\
    \ 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input\
    \ list is empty, return 0.", "  (if (null? lst)\n    0\n    (+ (* (* 2 (car lst))\
    \ (car lst))\n      (double_the_difference (cdr lst))))\n)\n\n;; Given a list\
    \ of numbers, return the sum of squares of the numbers\n;; in the list that are\
    \ odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference\
    \ (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n\
    ;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference\
    \ (list 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (null? lst)\n\
    \    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda\
    \ (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter\
    \ (lambda (x) (not (even? x))))))))\n", "  (if (null? lst)\n    0\n    (+\n  \
    \    (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (integer?\
    \ x)) (negative? x)) lst))\n      (map (lambda (x) (* (* x x) x))\n        (filter\
    \ (lambda (x) (integer? x)) lst))))\n)\n\n;; Given a list of numbers, return the\
    \ sum of squares of the numbers\n;; in the list that are even. Ignore numbers\
    \ that are negative or not integers.\n;; >>> (double_the_difference (list 1 3\
    \ 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.", "  (if (null? lst)\n    0\n    (+ (* (* 2 (car\
    \ lst)) (car lst))\n      (* (* 2 (cdr lst)) (cdr lst))))))\n\n;; Given a list\
    \ of numbers, return the sum of squares of the numbers\n;; in the list that are\
    \ odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference\
    \ (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n\
    ;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference\
    \ (list 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (null? lst)\n\
    \    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda\
    \ (x) (not (integer? x)) (not (negative? x))))\n        lst)))\n  )\n)\n\n;; Given\
    \ a list of numbers, return the sum of the squares of the numbers\n;; in the list\
    \ that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference\
    \ (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n\
    ;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference\
    \ (list 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (null? lst)\n\
    \    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda\
    \ (x) (not (modulo x 2)))\n          lst)))))\n\n;; Given a list of numbers, return\
    \ the sum of the squares of the numbers\n;; in the list. Ignore numbers that are\
    \ negative or not integers.\n;; >>> (sum-of-squares (list 1 3 2 0))\n;; 10\n;;\
    \ >>> (sum-of-squares (list -1 -2 0))\n;; 0\n;; >>> (sum-of-squares (list 9 -2))\n\
    ;; 81\n;; >>> (sum-of-squares (list 0))\n;; 0\n;; If the input list is empty,\
    \ return 0.", "  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (*\
    \ x x) 2))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda\
    \ (x) (* x x)) lst))))\n", "  (if (null? lst)\n    0\n    (+\n      (map (lambda\
    \ (n) (* (* n n) (* 2 n))) lst)\n      (filter (lambda (n) (not (even? n)))))\n\
    \  )\n)\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n\
    ;; in the list. Ignore numbers that are negative or not integers.\n;; >>> (sum_of_squares\
    \ (list 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1 -2 0))\n;; 0\n;; >>>\
    \ (sum_of_squares (list 9 -2))\n;; 81\n;; >>> (sum_of_squares (list 0))\n;; 0\n\
    ;; If the input list is empty, return 0.", "  (if (null? lst)\n    0\n    (+ (*\
    \ (* 2 (car lst)) (car lst))\n       (* (* 2 (cdr lst)) (cdr lst))))))\n\n;; Given\
    \ a list of numbers, return the sum of squares of the numbers\n;; in the list\
    \ that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference\
    \ (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n\
    ;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference\
    \ (list 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (null? lst)\n\
    \    0\n    (+\n      (map (lambda (n) (* (* n n) (* 2 n))) lst)\n      (filter\
    \ (lambda (n) (not (integer? n)) (not (negative? n)))))))\n\n;; Given a list of\
    \ numbers, return the sum of the squares of the numbers\n;; in the list. Ignore\
    \ numbers that are negative or not integers.\n;; >>> (sum_of_squares (list 1 3\
    \ 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1 -2 0))\n;; 0\n;; >>> (sum_of_squares\
    \ (list 9 -2))\n;; 81\n;; >>> (sum_of_squares (list 0))\n;; 0\n;; If the input\
    \ list is empty, return 0.", "  (if (null? lst)\n    0\n    (+\n      (map (lambda\
    \ (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map\
    \ (lambda (x) (* x x))\n        (filter (lambda (x) (not (even? x))))))))\n",
  "  (if (empty? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n    \
    \    (filter (lambda (x) (not (even? x)) (car lst))\n          (cdr lst)))\n \
    \     (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even?\
    \ x)) (cdr lst))\n          (cdr lst)))))))\n\n;; Given a list of numbers, return\
    \ the sum of squares of the numbers\n;; in the list that are even. Ignore numbers\
    \ that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n\
    ;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list\
    \ 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list\
    \ is empty, return 0.", "  (if (null? lst)\n    0\n    (+ (* (* 2 (car lst)) (car\
    \ lst))\n      (double_the_difference (cdr lst))))\n)\n\n;; Given a list of numbers,\
    \ return the sum of squares of the numbers\n;; in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n;; >>> (double_the_difference (list\
    \ 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>>\
    \ (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list\
    \ 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (null? lst)\n \
    \   0\n    (+ (* (* 2 (car lst)) (car lst))\n      (double_the_difference (cdr\
    \ lst))))\n)\n\n;; Given a list of numbers, return the sum of squares of the numbers\n\
    ;; in the list that are odd. Ignore numbers that are negative or not integers.\n\
    ;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference\
    \ (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;;\
    \ >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return\
    \ 0.", "  (if (null? lst)\n    0\n    (+ (* (* 2 (car lst)) (car lst))\n     \
    \ (double_the_difference (cdr lst))))\n)\n\n;; Given a list of numbers, return\
    \ the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers\
    \ that are negative or not integers.\n;; >>> (double_the_difference (list 1 3\
    \ 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.", "  (if (null? lst)\n    0\n    (+\n      (map\
    \ (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n\
    \      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even?\
    \ x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not\
    \ (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda\
    \ (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter\
    \ (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n    \
    \    (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x)\
    \ x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x)\
    \ (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda\
    \ (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map\
    \ (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n\
    \      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even?\
    \ x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not\
    \ (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda\
    \ (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter\
    \ (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n    \
    \    (filter (lambda (x) (not (even? x)))))\n", "  (if (null? lst)\n    0\n  \
    \  (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not\
    \ (modulo x 2)))\n          lst)))))\n", "  (if (null? lst)\n    0\n    (+ (*\
    \ (* lst) (* lst))\n      (if (null? lst)\n        0\n        (+ (* (* lst) (*\
    \ lst))\n          (if (null? lst)\n            0\n            (+ (* (* lst) (*\
    \ lst))\n              (if (null? lst)\n                0\n                (+\
    \ (* (* lst) (* lst))\n                  (if (null? lst)\n                   \
    \ 0\n                    (+ (* (* lst) (* lst))\n                      (if (null?\
    \ lst)\n                        0\n                        (+ (* (* lst) (* lst))\n\
    \                          (if (null? lst)\n                            0\n  \
    \                          (+ (* (* lst) (* lst))\n                          \
    \    (if (null? lst)\n                                0\n                    \
    \            (+ (* (* lst) (* lst))\n                                  (if (null?\
    \ lst)\n                                    0\n                              \
    \      (+ (* (* lst) (* lst))\n                                      (if (null?\
    \ lst)\n                                        0\n                          \
    \              (+ (* (* lst) (* lst))\n                                      \
    \    (if (null? lst)\n                                            0\n        \
    \                                    (+ (* (* lst) (* lst))\n                \
    \                              (if (null? lst)\n                             \
    \                   0\n                                                (+ (* (*\
    \ lst) (* lst))\n                                                  (if (null?\
    \ lst)\n                                                    0\n              \
    \                                      (+ (* (* lst) (* lst))\n              \
    \                                        (if (null? lst)\n                   \
    \                                     0\n                                    \
    \                    (+ (* (* lst) (* lst))\n                                \
    \                         (if (null? lst)\n                                  \
    \                         0\n                                                \
    \           (+ (* (* lst) (* lst))\n                                         \
    \                   (if (null? lst)\n                                        \
    \                      0\n                                                   \
    \           (+ (* (* lst) (* l", "  (if (null? lst)\n    0\n    (+\n      (map\
    \ (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (integer? x)) (not\
    \ (negative? x)) (odd? x)))\n        lst)))\n  )\n\n;; Given a list of numbers,\
    \ return the sum of squares of the numbers\n;; in the list that are even. Ignore\
    \ numbers that are negative or not integers.\n;; >>> (double_the_difference (list\
    \ 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>>\
    \ (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list\
    \ 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (null? lst)\n \
    \   0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda\
    \ (x) (not (modulo x 2)))\n          lst)))))\n\n;; Given a list of numbers, return\
    \ the sum of the squares of the numbers\n;; in the list that are even. Ignore\
    \ numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3\
    \ 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input\
    \ list is empty, return 0.", "  (if (null? lst)\n    0\n    (+\n      (map (lambda\
    \ (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map\
    \ (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x))))))))\n",
  "  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n     \
    \   (filter (lambda (x) (not (even? x))\n                 (filter (lambda (y)\
    \ (not (negative? y))\n                          (integer? y))))\n          lst)))\n\
    \      0)))\n\n;; Given a list of numbers, return the sum of the squares of the\
    \ numbers\n;; in the list that are even. Ignore numbers that are negative or not\
    \ integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum\
    \ (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum\
    \ (list 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (null? lst)\n\
    \    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda\
    \ (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter\
    \ (lambda (x) (not (even? x))))))))\n", "  (if (null? lst)\n    0\n    (+\n  \
    \    (map (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (integer?\
    \ x)) (not (negative? x)))\n          lst)))))\n\n;; Given a list of numbers,\
    \ return the sum of the squares of the numbers\n;; in the list. Ignore numbers\
    \ that are negative or not integers.\n;; >>> (sum_of_squares (list 1 3 2 0))\n\
    ;; 10\n;; >>> (sum_of_squares (list -1 -2 0))\n;; 0\n;; >>> (sum_of_squares (list\
    \ 9 -2))\n;; 81\n;; >>> (sum_of_squares (list 0))\n;; 0\n;; If the input list\
    \ is empty, return 0.", "  (if (null? lst)\n    0\n    (+\n      (map (lambda\
    \ (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map\
    \ (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n\
    \      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even?\
    \ x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not\
    \ (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda\
    \ (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter\
    \ (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n    \
    \    (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x)\
    \ x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x)\
    \ (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda\
    \ (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map\
    \ (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n\
    \      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even?\
    \ x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not\
    \ (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda\
    \ (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter\
    \ (lambda (x) (not (even? x)))))\n", "  (if (null? lst)\n    0\n    (+\n     \
    \ (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x))\
    \ (car lst))\n          (cdr lst)))\n      (map (lambda (x) (* (* x x) x))\n \
    \       (filter (lambda (x) (not (even? x)) (cdr lst))\n          (cdr lst)))))))\n",
  "  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n     \
    \   (filter (lambda (x) (not (integer? x)) (not (negative? x)) (odd? x)))\n  \
    \      lst)))\n  )\n\n;; Given a list of numbers, return the sum of the squares\
    \ of the numbers\n;; in the list that are even. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>>\
    \ (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.", "  (if (null? lst)\n    0\n    (+\n      (map\
    \ (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (modulo x 2)))\n\
    \          lst)))))\n\n;; Given a list of numbers, return the sum of the squares\
    \ of the numbers\n;; in the list. Ignore numbers that are negative or not integers.\n\
    ;; >>> (sum_of_squares (list 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1\
    \ -2 0))\n;; 0\n;; >>> (sum_of_squares (list 9 -2))\n;; 81\n;; >>> (sum_of_squares\
    \ (list 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (null? lst)\n\
    \    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda\
    \ (x) (not (even? x))\n                 (filter (lambda (y) (not (negative? y))\n\
    \                          (integer? y))))\n          lst)))\n      0)))\n", " \
    \ (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n    \
    \    (filter (lambda (x) (not (integer? x)) (not (negative? x))))\n        lst)))\n\
    \  )\n)\n", "  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x\
    \ x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x)\
    \ (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda\
    \ (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map\
    \ (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n\
    \      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even?\
    \ x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not\
    \ (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda\
    \ (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter\
    \ (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n    \
    \    (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x)\
    \ x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x)\
    \ (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda\
    \ (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map\
    \ (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n\
    \      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even?\
    \ x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not\
    \ (even? x)))))\n", "  (if (null? lst)\n    0\n    (+\n      (map (lambda (x)\
    \ (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda\
    \ (x) (* x x))\n        (filter (lambda (x) (not (even? x))))))))\n\n;; Given\
    \ a list of numbers, return the sum of the squares of the numbers\n;; in the list\
    \ that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum\
    \ (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>>\
    \ (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n\
    ;; If the input list is empty, return 0.", "  (if (null? lst)\n    0\n    (+ (*\
    \ (* 2 (car lst)) (car lst))\n      (double_the_difference (cdr lst))))\n)\n\n\
    ;; Given a list of numbers, return the sum of squares of the numbers\n;; in the\
    \ list that are odd. Ignore numbers that are negative or not integers.\n;; >>>\
    \ (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference\
    \ (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;;\
    \ >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return\
    \ 0.", "  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n\
    \        (filter (lambda (x) (not (modulo x 2)))\n          lst)))))\n\n;; Given\
    \ a list of numbers, return the sum of the squares of the numbers\n;; in the list.\
    \ Ignore numbers that are negative or not integers.\n;; >>> (sum_of_squares (list\
    \ 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1 -2 0))\n;; 0\n;; >>> (sum_of_squares\
    \ (list 9 -2))\n;; 81\n;; >>> (sum_of_squares (list 0))\n;; 0\n;; If the input\
    \ list is empty, return 0.", "  (if (null? lst)\n    0\n    (+ (* (* 2 (car lst))\
    \ (car lst))\n       (* (* 2 (cdr lst)) (cdr lst))))))\n\n;; Given a list of numbers,\
    \ return the sum of squares of the numbers\n;; in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n;; >>> (double_the_difference (list\
    \ 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>>\
    \ (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list\
    \ 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (null? lst)\n \
    \   0\n    (+ (* (* 2 (car lst)) (car lst))\n      (double_the_difference (cdr\
    \ lst))))\n)\n\n;; Given a list of numbers, return the sum of squares of the numbers\n\
    ;; in the list that are odd. Ignore numbers that are negative or not integers.\n\
    ;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference\
    \ (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;;\
    \ >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return\
    \ 0.", "  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n\
    \        (filter (lambda (x) (not (integer? x)) (not (negative? x)) (odd? x)))\n\
    \        lst)))\n  )\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are even. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>>\
    \ (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.", "  (if (null? lst)\n    0\n    (+\n      (map\
    \ (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (integer? x)) (not\
    \ (negative? x)) (odd? x)))\n        lst)))\n)\n\n;; Given a list of numbers,\
    \ return the sum of the squares of the numbers\n;; in the list. Ignore numbers\
    \ that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n\
    ;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list\
    \ 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list\
    \ is empty, return 0.", "  (if (null? lst)\n    0\n    (+\n      (map (lambda\
    \ (x) (* (* x x) x))\n        (filter (lambda (x) (not (modulo x 2))) lst))\n\
    \      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (modulo\
    \ x 2))) lst))))\n)\n\n;; Given a list of numbers, return the sum of the squares\
    \ of the numbers\n;; in the list that are even. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum\
    \ (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum\
    \ (list 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (null? lst)\n\
    \    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda\
    \ (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter\
    \ (lambda (x) (not (even? x))))))))\n\n;; Given a list of numbers, return the\
    \ sum of the squares of the numbers\n;; in the list that are even. Ignore numbers\
    \ that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n\
    ;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list\
    \ 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list\
    \ is empty, return 0.", "  (if (null? lst)\n    0\n    (+\n      (map (lambda\
    \ (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map\
    \ (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x))))))))\n\
    \n;; Given a list of numbers, return the sum of the squares of the numbers\n;;\
    \ in the list that are even. Ignore numbers that are negative or not integers.\n\
    ;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1\
    \ -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum\
    \ (list 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (null? lst)\n\
    \    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda\
    \ (x) (not (integer? x)) (not (negative? x)) (odd? x)))\n        lst)))\n  )\n\
    \n;; Given a list of numbers, return the sum of the squares of the numbers\n;;\
    \ in the list that are even. Ignore numbers that are negative or not integers.\n\
    ;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference\
    \ (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;;\
    \ >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return\
    \ 0.", "  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n\
    \        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* x x))\n\
    \        (filter (lambda (x) (not (even? x))))))))\n", "  (if (null? lst)\n  \
    \  0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x)\
    \ (not (even? x))\n                 (filter (lambda (y) (not (negative? y))\n\
    \                          (integer? y))))\n          lst)))\n      0)))\n", " \
    \ (if (empty? lst)\n    0\n    (+ (* (* 2 (car lst)) (car lst))\n      (double_the_difference\
    \ (cdr lst))))\n)\n\n;; Given a list of numbers, return the sum of the squares\
    \ of the numbers\n;; in the list. Ignore numbers that are negative or not integers.\n\
    ;; >>> (sum_of_squares (list 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1\
    \ -2 0))\n;; 0\n;; >>> (sum_of_squares (list 9 -2))\n;; 81\n;; >>> (sum_of_squares\
    \ (list 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (null? lst)\n\
    \    0\n    (+ (* (* 2 (car lst)) (car lst))\n      (* (* 2 (cdr lst)) (cdr lst))))))\n\
    \n;; Given a list of numbers, return the sum of squares of the numbers\n;; in\
    \ the list that are odd. Ignore numbers that are negative or not integers.\n;;\
    \ >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference\
    \ (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;;\
    \ >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return\
    \ 0.", "  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n\
    \        (filter (lambda (x) (not (even? x))\n                 (filter (lambda\
    \ (y) (not (negative? y))\n                          (integer? y))))\n       \
    \   lst)))\n      0)))\n\n;; Given a list of numbers, return the sum of the squares\
    \ of the numbers\n;; in the list. Ignore numbers that are negative or not integers.\n\
    ;; >>> (sum_of_squares (list 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1\
    \ -2 0))\n;; 0\n;; >>> (sum_of_squares (list 9 -2))\n;; 81\n;; >>> (sum_of_squares\
    \ (list 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (null? lst)\n\
    \    0\n    (+ (* (* 2 (car lst)) (car lst))\n      (* (* 2 (car lst)) (cdr lst)))))\n\
    \n;; Given a list of numbers, return the sum of the squares of the numbers\n;;\
    \ in the list. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum\
    \ (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>>\
    \ (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n\
    ;; If the input list is empty, return 0.", "  (if (null? lst)\n    0\n    (let\
    \ ((sum (make-vector 0 (length lst))))\n      (for-each\n        (lambda (n)\n\
    \          (if (odd? n)\n            (setf sum (vector-set! sum n (* n n)))\n\
    \            (setf sum 0)))\n        lst)))\n  sum)\n\n;; Given a list of numbers,\
    \ return the sum of the squares of the numbers\n;; in the list. Ignore numbers\
    \ that are negative or not integers.\n;; >>> (sum-of-squares (list 1 3 2 0))\n\
    ;; 10\n;; >>> (sum-of-squares (list -1 -2 0))\n;; 0\n;; >>> (sum-of-squares (list\
    \ 9 -2))\n;; 81\n;; >>> (sum-of-squares (list 0))\n;; 0\n;; If the input list\
    \ is empty, return 0.", "  (if (null? lst)\n    0\n    (+\n      (map (lambda\
    \ (x) (* (* x x) 2))\n        (filter (lambda (x) (not (even? x)))))\n      (map\
    \ (lambda (x) (* x x))\n        (filter (lambda (x) (not (even? x))))))))\n\n\
    ;; Given a list of numbers, return the sum of the squares of the numbers\n;; in\
    \ the list that are even. Ignore numbers that are negative or not integers.\n\
    ;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1\
    \ -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum\
    \ (list 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (null? lst)\n\
    \    0\n    (+\n      (map (lambda (n) (* (* n n) (* 2 n))) lst)\n      (filter\
    \ (lambda (n) (not (integer? n)) (not (negative? n))) lst))))\n", "  (if (null?\
    \ lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter\
    \ (lambda (x) (not (integer? x)) (negative? x)) lst))\n      (map (lambda (x)\
    \ (* (* x x) x))\n        (filter (lambda (x) (integer? x)) lst))))\n)\n\n;; Given\
    \ a list of numbers, return the sum of the squares of the numbers\n;; in the list.\
    \ Ignore numbers that are negative or not integers.\n;; >>> (sum_of_squares (list\
    \ 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1 -2 0))\n;; 0\n;; >>> (sum_of_squares\
    \ (list 9 -2))\n;; 81\n;; >>> (sum_of_squares (list 0))\n;; 0\n;; If the input\
    \ list is empty, return 0.", "  (if (null? lst)\n    0\n    (+\n      (map (lambda\
    \ (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x))\n          \
    \       (filter (lambda (y) (not (negative? y))\n                          (integer?\
    \ y))))\n          lst)))))\n\n;; Given a list of numbers, return the sum of the\
    \ squares of the numbers\n;; in the list that are even. Ignore numbers that are\
    \ negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;;\
    \ >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n\
    ;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty,\
    \ return 0.", "  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (*\
    \ x x) 2))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda\
    \ (x) (* x x))\n        (filter (lambda (x) (not (even? x))))))))\n\n;; Given\
    \ a list of numbers, return the sum of the squares of the numbers\n;; in the list\
    \ that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum\
    \ (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>>\
    \ (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n\
    ;; If the input list is empty, return 0.", "  (if (null? lst)\n    0\n    (+ (*\
    \ (* 2 (car lst)) (car lst))\n      (double_the_difference (cdr lst))))\n)\n\n\
    ;; Given a list of numbers, return the sum of squares of the numbers\n;; in the\
    \ list that are odd. Ignore numbers that are negative or not integers.\n;; >>>\
    \ (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference\
    \ (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;;\
    \ >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return\
    \ 0.", "  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n\
    \        (filter (lambda (x) (not (even? x)) (car lst))\n          (cdr lst)))\n\
    \      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even?\
    \ x)) (cdr lst))\n          (cdr lst)))))))\n\n;; Given a list of numbers, return\
    \ the sum of the squares of the numbers\n;; in the list that are even. Ignore\
    \ numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3\
    \ 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input\
    \ list is empty, return 0.", "  (if (null? lst)\n    0\n    (+\n      (map (lambda\
    \ (x) (* (* x x) 2))\n        (filter (lambda (x) (not (even? x))\n          \
    \       (filter (lambda (y) (not (negative? y))\n                          (integer?\
    \ y))))\n          lst))))))\n\n;; Given a list of numbers, return the sum of\
    \ the squares of the numbers\n;; in the list that are even. Ignore numbers that\
    \ are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n\
    ;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n\
    ;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty,\
    \ return 0.", "  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (*\
    \ x x) 2))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda\
    \ (x) (* x x))\n        (filter (lambda (x) (not (even? x))))))))\n", "  (if (null?\
    \ lst)\n    0\n    (+ (* (* lst (car lst)) (* (* (car lst) (car lst)))))\n  )\n\
    )\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;;\
    \ in the list that are even. Ignore numbers that are negative or not integers.\n\
    ;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference\
    \ (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;;\
    \ >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return\
    \ 0.", "  (if (null? lst)\n    0\n    (+ (* (* 2 (+ (car lst) (cdr lst))) (car\
    \ lst)))\n  )\n)\n\n;; Given a list of numbers, return the sum of squares of the\
    \ numbers\n;; in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference\
    \ (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;;\
    \ >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return\
    \ 0.", "  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n\
    \        (filter (lambda (x) (not (modulo x 2)))\n          lst)))))\n\n;; Given\
    \ a list of numbers, return the sum of the squares of the numbers\n;; in the list.\
    \ Ignore numbers that are negative or not integers.\n;; >>> (sum-of-squares (list\
    \ 1 3 2 0))\n;; 10\n;; >>> (sum-of-squares (list -1 -2 0))\n;; 0\n;; >>> (sum-of-squares\
    \ (list 9 -2))\n;; 81\n;; >>> (sum-of-squares (list 0))\n;; 0\n;; If the input\
    \ list is empty, return 0.", "  (if (null? lst)\n    0\n    (+\n      (map (lambda\
    \ (x) (* (* x x) 2))\n        (filter (lambda (x) (not (integer? x)) (not (negative?\
    \ x)))\n          lst)))))\n\n;; Given a list of numbers, return the sum of the\
    \ squares of the numbers\n;; in the list that are even. Ignore numbers that are\
    \ negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;;\
    \ >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n\
    ;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty,\
    \ return 0.", "  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (*\
    \ x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda\
    \ (x) (* x x)) lst))))\n", "  (if (null? lst)\n    0\n    (+ (* (* 2 (car lst))\
    \ (car lst))\n      (double_the_difference (cdr lst))))\n)\n\n;; Given a list\
    \ of numbers, return the sum of squares of the numbers\n;; in the list that are\
    \ odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference\
    \ (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n\
    ;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference\
    \ (list 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (null? lst)\n\
    \    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda\
    \ (x) (not (integer? x)) (not (negative? x)))\n          lst)))))\n\n;; Given\
    \ a list of numbers, return the sum of squares of the numbers\n;; in the list\
    \ that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference\
    \ (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n\
    ;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference\
    \ (list 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (null? lst)\n\
    \    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda\
    \ (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter\
    \ (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n    \
    \    (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x)\
    \ x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x)\
    \ (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda\
    \ (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map\
    \ (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n\
    \      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even?\
    \ x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not\
    \ (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda\
    \ (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter\
    \ (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n    \
    \    (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x)\
    \ x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x)\
    \ (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda\
    \ (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n", "  (if\
    \ (null? lst)\n    0\n    (+ (* (* 2 (car lst)) (car lst))\n      (* (* 2 (car\
    \ lst)) (cdr lst)))))\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>>\
    \ (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.", "  (if (null? lst)\n    0\n    (+ (* (* 2 (car\
    \ lst)) (car lst))\n      (* (* 2 (cdr lst)) (cdr lst))))))\n\n;; Given a list\
    \ of numbers, return the sum of squares of the numbers\n;; in the list that are\
    \ odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference\
    \ (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n\
    ;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference\
    \ (list 0))\n;; 0\n;; If the input list is empty, return 0.", "  (if (null? lst)\n\
    \    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda\
    \ (x) (not (modulo x 2)))\n          lst)))))\n\n;; Given a list of numbers, return\
    \ the sum of the squares of the numbers\n;; in the list that are even. Ignore\
    \ numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3\
    \ 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input\
    \ list is empty, return 0.", "  (if (null? lst)\n    0\n    (+\n      (map (lambda\
    \ (x) (* (* x x) x))\n        (filter (lambda (x) (not (modulo x 2)))\n      \
    \    lst)))))\n\n;; Given a list of numbers, return the sum of squares of the\
    \ numbers\n;; in the list that are even. Ignore numbers that are negative or not\
    \ integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference\
    \ (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;;\
    \ >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return\
    \ 0.", "  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n\
    \        (filter (lambda (x) (not (integer? x))\n                 (filter (lambda\
    \ (y) (not (integer? y))\n                          (integer? (abs y))))\n   \
    \              lst)))\n      (map (lambda (x) (* (* x x) x))\n         (filter\
    \ (lambda (x) (not (integer? x))\n                  (filter (lambda (y) (not (integer?\
    \ y))\n                           (integer? (abs y))))\n                  (filter\
    \ (lambda (z) (not (integer? z))\n                           (integer? z))))\n\
    \           lst)))\n      0)))\n", "  (if (null? lst)\n    0\n    (+\n      (map\
    \ (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (integer? x)) (negative?\
    \ x)) lst))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x)\
    \ (integer? x)) lst))))\n)\n\n;; Given a list of numbers, return the sum of the\
    \ squares of the numbers\n;; in the list that are even. Ignore numbers that are\
    \ negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;;\
    \ >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n\
    ;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty,\
    \ return 0.", "  (if (null? lst)\n    0\n    (+ (* (* lst (first lst)) (* (first\
    \ lst)))\n      (* (* (rest lst) (first lst)) (* (first lst)))\n      (* (* (rest\
    \ lst) (first lst)) (* (first lst)))\n      (* (* (rest lst) (first lst)) (* (first\
    \ lst)))\n      (* (* (rest lst) (first lst)) (* (first lst)))\n      (* (* (rest\
    \ lst) (first lst)) (* (first lst)))\n      (* (* (rest lst) (first lst)) (* (first\
    \ lst)))\n      (* (* (rest lst) (first lst)) (* (first lst)))\n      (* (* (rest\
    \ lst) (first lst)) (* (first lst)))\n      (* (* (rest lst) (first lst)) (* (first\
    \ lst)))\n      (* (* (rest lst) (first lst)) (* (first lst)))\n      (* (* (rest\
    \ lst) (first lst)) (* (first lst)))\n      (* (* (rest lst) (first lst)) (* (first\
    \ lst)))\n      (* (* (rest lst) (first lst)) (* (first lst)))\n      (* (* (rest\
    \ lst) (first lst)) (* (first lst)))\n      (* (* (rest lst) (first lst)) (* (first\
    \ lst)))\n      (* (* (rest lst) (first lst)) (* (first lst)))\n      (* (* (rest\
    \ lst) (first lst)) (* (first lst)))\n      (* (* (rest lst) (first lst)) (* (first\
    \ lst)))\n      (* (* (rest lst) (first lst)) (* (first lst)))\n      (* (* (rest\
    \ lst) (first lst)) (* (first lst)))\n      (* (* (rest lst) (first lst)) (* (first\
    \ lst)))\n      (* (* (rest lst) (first lst)) (* (first lst)))\n      (* (* (rest\
    \ lst) (first lst)) (* (first lst)))\n      (* (* (rest lst) (first lst)) (* (first\
    \ lst)))\n", "  (if (null? lst)\n    0\n    (+ (* (* 2 (car lst)) (car lst))\n\
    \      (* (* 2 (cdr lst)) (cdr lst))))))\n\n;; Given a list of numbers, return\
    \ the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers\
    \ that are negative or not integers.\n;; >>> (double_the_difference (list 1 3\
    \ 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.", "  (if (null? lst)\n    0\n    (+\n      (map\
    \ (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n\
    \      (map (lambda (x) (* x x)) lst))))\n", "  (if (null? lst)\n    0\n    (+\n\
    \      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even?\
    \ x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not\
    \ (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda\
    \ (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter\
    \ (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n    \
    \    (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x)\
    \ x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x)\
    \ (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda\
    \ (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map\
    \ (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n\
    \      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even?\
    \ x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not\
    \ (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda\
    \ (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter\
    \ (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n    \
    \    (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x)\
    \ x))\n        (filter (lambda (x) (not (even? x)))))\n", "  (if (null? lst)\n\
    \    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda\
    \ (x) (not (even? x))\n                 (filter (lambda (y) (not (negative? y))\n\
    \                          (integer? y))))\n          lst)))))\n", "  (if (null?\
    \ lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter\
    \ (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* x x)) lst))))\n",
  "  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n     \
    \   (filter (lambda (x) (not (even? x))\n                 (filter (lambda (y)\
    \ (not (negative? y))\n                          (integer? y))))\n          lst)))))\n\
    \n;; Given a list of numbers, return the sum of the squares of the numbers\n;;\
    \ in the list. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum\
    \ (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>>\
    \ (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n\
    ;; If the input list is empty, return 0.", "  (if (null? lst)\n    0\n    (+\n\
    \      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (even?\
    \ x))\n                 (filter (lambda (y) (not (negative? y))\n            \
    \              (integer? y))))\n          lst)))))\n\n;; Given a list of numbers,\
    \ return the sum of the squares of the numbers\n;; in the list that are even.\
    \ Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list\
    \ 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input\
    \ list is empty, return 0.", "  (if (null? lst)\n    0\n    (+\n      (map (lambda\
    \ (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map\
    \ (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x))))))))\n",
  "  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n     \
    \   (filter (lambda (x) (not (modulo x 2))\n                 (filter (lambda (y)\
    \ (not (modulo y 2))\n                          (< y 0))))\n          lst)))))\n",
  "  (if (null? lst)\n    0\n    (let ((sum (make-list 0)))\n      (for-each (lambda\
    \ (x)\n                  (if (odd? x)\n                    (setf sum (+ (* x x)\
    \ sum)))))\n      sum)))\n\n;; Given a list of numbers, return the sum of the\
    \ squares of the numbers\n;; in the list that are even. Ignore numbers that are\
    \ negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;;\
    \ >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n\
    ;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty,\
    \ return 0.", "  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (*\
    \ x x) x))\n        (filter (lambda (x) (not (integer? x)) (negative? x)) lst))\n\
    \      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (integer?\
    \ x)) lst))))\n)\n\n;; Given a list of numbers, return the sum of squares of the\
    \ numbers\n;; in the list that are even. Ignore numbers that are negative or not\
    \ integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference\
    \ (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;;\
    \ >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return\
    \ 0.", "  (if (null? lst)\n    0\n    (+ (* (* 2 (+ (car lst) (cdr lst))) (car\
    \ lst)))\n  )\n)\n\n;; Given a list of numbers, return the sum of squares of the\
    \ numbers\n;; in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference\
    \ (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;;\
    \ >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return\
    \ 0.", "  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n\
    \        (filter (lambda (x) (not (even? x))\n                 (filter (lambda\
    \ (y) (not (even? y))\n                          (list (number? y) (number? x)))\n\
    \                       lst)))\n        lst)))\n  )\n)\n\n;; Given a list of numbers,\
    \ return the sum of the squares of the numbers\n;; in the list that are even.\
    \ Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list\
    \ 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input\
    \ list is empty, return 0.", "  (if (null? lst)\n    0\n    (+\n      (map (lambda\
    \ (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x))\n          \
    \       (filter (lambda (y) (not (negative? y))\n                          (integer?\
    \ y))))\n          lst)))))\n\n;; Given a list of numbers, return the sum of the\
    \ squares of the numbers\n;; in the list that are even. Ignore numbers that are\
    \ negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;;\
    \ >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n\
    ;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty,\
    \ return 0.", "  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (*\
    \ x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda\
    \ (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      )))\n\
    \n;; Given a list of numbers, return the sum of the squares of the numbers\n;;\
    \ in the list. Ignore numbers that are negative or not integers.\n;; >>> (sum-of-squares\
    \ (list 1 3 2 0))\n;; 10\n;; >>> (sum-of-squares (list -1 -2 0))\n;; 0\n;; >>>\
    \ (sum-of-squares (list 9 -2))\n;; 81\n;; >>> (sum-of-squares (list 0))\n;; 0\n\
    ;; If the input list is empty, return 0.", "  (if (null? lst)\n    0\n    (+\n\
    \      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even?\
    \ x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not\
    \ (negative? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda\
    \ (x) (not (integer? x))))))))\n\n;; Given a list of numbers, return the sum of\
    \ squares of the numbers\n;; in the list that are even. Ignore numbers that are\
    \ negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;;\
    \ >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n\
    ;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty,\
    \ return 0.", "  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (*\
    \ x x) x))\n        (filter (lambda (x) (not (modulo x 2)))\n          (list lst)))\n\
    \      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (modulo\
    \ x 2)))\n          (list (- lst)))))))\n\n;; Given a list of numbers, return\
    \ the sum of the squares of the numbers\n;; in the list that are even. Ignore\
    \ numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3\
    \ 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input\
    \ list is empty, return 0."]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
