{
  "name": "HumanEval_3_below_zero",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; You're given a list of deposit and withdrawal operations on a bank account that starts with\n;; zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n;; at that point function should return #t. Otherwise it should return #f.\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n(define (below_zero operations)\n",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate below_zero))\n    (check-equal? (candidate (list )) #f)\n    (check-equal? (candidate (list 1 2 -3 1 2 -3)) #f)\n    (check-equal? (candidate (list 1 2 -4 5 6)) #t)\n    (check-equal? (candidate (list 1 -1 2 -2 5 -5 4 -4)) #f)\n    (check-equal? (candidate (list 1 -1 2 -2 5 -5 4 -5)) #t)\n    (check-equal? (candidate (list 1 -2 2 -2 5 -5 4 -4)) #t)\n))\n\n(test-humaneval)",
  "completions": [
    "  (cond\n    ((null? operations) #f)\n    ((= (car operations) 0) #t)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    ((null? (cdr operations)) #f)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n          #t\n          (else\n            (below_zero (cdr operations))))))))\n",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((= (car operations) 0) #t)\n    ((< (car operations) 0) #f)\n    (else (below_zero (cdr operations)))))\n\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang lisp\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang lisp\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang lisp\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang lisp\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang lisp\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang lisp\n;; >>> (below_",
    "  (let ((balance 0))\n    (while operations\n      (if (<= balance 0)\n        (return #t)\n        (let ((amount (car operations)))\n          (balance (+ balance (- amount))))\n        (cdr operations)))))\n\n;; #lang scheme",
    "  (cond\n    ((null? operations) #t)\n    ((null? (cdr operations)) #f)\n    (else\n      (if (< (car operations) 0)\n        #t\n        (else\n          (below_zero (cdr operations)))))\n  )\n)\n\n;; #lang scheme",
    "  (cond\n    ((null? operations) #t)\n    ((null? (cdr operations)) #f)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0) #t (else #f))))))\n\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else\n      (let ((result (below_zero (cdr operations))))\n        (if result\n          (begin\n            (set! operations (cdr operations))\n            #t)\n          (else\n            (set! operations (cdr operations))\n            #f))))))\n",
    "  (cond\n    ((>= (car operations) 0)\n      (cons (car operations) (below_zero (cdr operations))))\n    (else #f)))\n",
    "  (cond\n    ((>= (car operations) 0)\n      (return #f))\n    (else\n      (let ((balance (car operations)))\n        (if (<= balance 0)\n          (return #t)\n          (else\n            (return #f)\n            ))))\n  ))\n",
    "  (cond\n    ((null? operations) #t)\n    ((< 0 (car operations)) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n          #t\n          (else\n            (let ((next_operations (cdr operations)))\n              (below_zero next_operations))))))))\n",
    "  (cond\n    ((null? operations) #t)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n            #t\n            (else\n              (let ((next-operations (cdr operations)))\n                (below_zero next-operations))))))))\n",
    "  (cond\n    ((null? operations) #f)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n          #t\n          (else\n            (let ((next-operations (cdr operations)))\n              (below_zero next-operations)))))))\n",
    "  (cond\n    ((null? operations) #t)\n    ((null? (cdr operations)) #f)\n    (else\n      (if (< (car operations) 0)\n        #t\n        (below_zero (cdr operations)))))\n\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang lisp\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang lisp\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang lisp\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang lisp\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang lisp\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;;",
    "  (cond\n    ((null? operations) #t)\n    ((null? (cdr operations)) #f)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n          #t\n          (else\n            (below_zero (cdr operations))))))))\n",
    "  (cond\n    ((null? operations) #t)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n          #t\n          (else\n            (let ((next (cdr operations)))\n              (below_zero (cdr next))))))))\n",
    "  (cond\n    ((>= 0 (car operations))\n      (return #f))\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n          (return #t)\n          (else\n            (cdr operations)\n            (below_zero (cdr operations))))))))\n",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else\n      (let ((result (below_zero (cdr operations))))\n        (if result\n          (begin\n            (set! result #t)\n            (set! operations (cdr operations)))\n          (set! operations (cdr operations)))))))\n",
    "  (cond\n    ((null? operations) #t)\n    ((null? (cdr operations)) #f)\n    (else\n      (if (< (car operations) 0)\n        #t\n        (else\n          (below_zero (cdr operations)))))\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n            #t\n            (else\n              (let ((next_operations (cdr operations)))\n                (below_zero next_operations))))))))\n",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang lisp\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang lisp\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang lisp\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang lisp\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang lisp\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang lisp\n;; >>> (below",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((null? operations) #f)\n    ((< 0 (car operations)) #t)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((= (car operations) 0) #t)\n    (else #f)\n  ))\n\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang lisp\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2",
    "  (cond\n    ((null? operations) #t)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n            #t\n            (else\n              (let ((next_operations (cdr operations)))\n                (below_zero next_operations))))))))\n",
    "  (cond\n    ((null? operations) #t)\n    ((null? (cdr operations)) #f)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n            #t\n            (else\n              (below_zero (cdr operations))))))))\n",
    "  (cond\n    ((null? operations) #t)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n          #t\n          (else\n            (let ((next (cdr operations)))\n              (below_zero (cdr next))))))))\n",
    "  (cond\n    ((null? operations) #f)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n          #t\n          (else\n            (let ((next (cdr operations)))\n              (below_zero (cdr next))))))))\n",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))))\n",
    "  (cond\n    ((null? operations) #t)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n            #t\n            (else\n              (let ((next_operations (cdr operations)))\n                (below_zero next_operations))))))))\n",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n          #t\n          (else\n            (let ((next (cdr operations)))\n              (below_zero (cdr next))))))))\n",
    "  (cond\n    ((null? operations) #t)\n    ((null? (cdr operations)) #f)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n          #t\n          (else\n            (let ((next_balance (car (cdr operations))))\n              (if (< next_balance 0)\n                #t\n                (else\n                  (below_zero (cdr (cdr operations)))\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    ((null? (cdr operations)) #f)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n            #t\n            (else\n              (below_zero (cdr operations))))))))\n",
    "  (cond\n    ((null? operations) #t)\n    ((null? (cdr operations)) #f)\n    (else\n      (if (< (car operations) 0)\n        #t\n        (else\n          (below_zero (cdr operations)))))\n  )\n)\n",
    "  (cond\n    ((= 0 (car operations))\n      (return #t))\n    (else\n      (let ((balance (car operations)))\n        (if (< balance (cdr operations))\n          (return #t)\n          (else\n            (return #f))))))\n\n;; #lang scheme",
    "  (cond\n    ((null? operations) #f)\n    ((= (car operations) 0) #t)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #t\n;; >>> (below_zero (list 1 2 -4 -5 -6))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5 -6 -7))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5 -6 -7 -8))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5 -6 -7 -8 -9))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5 -6 -7 -8 -9 -10))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5 -6 -7 -8 -9 -10 -11))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5 -6 -7 -8 -9 -10 -11 -12))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 -15))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 -15 -16))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 -15 -16 -17))\n;; #f\n;; >>> (below_zero (list 1",
    "  (cond\n    ((null? operations) #t)\n    ((null? (cdr operations)) #f)\n    (else\n      (if (< (car operations) 0)\n        #t\n        (else\n          (below_zero (cdr operations)))))\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    ((null? (cdr operations)) #f)\n    (else\n      (if (< (car operations) 0)\n        #t\n        (else\n          (below_zero (cdr operations)))))\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n          #t\n          (else\n            (let ((next_operations (cdr operations)))\n              (below_zero next_operations)))))))\n",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((null? operations) #f)\n    ((= (car operations) 0) #t)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else\n      (let ((result (below_zero (cdr operations))))\n        (if result\n          (begin\n            (set! result #t)\n            (set! operations (cdr operations)))\n          (set! operations (cdr operations)))))))\n",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n          #t\n          (else\n            (let ((next_operations (cdr operations)))\n              (below_zero next_operations))))))))\n",
    "  (cond\n    ((null? operations) #t)\n    ((< 0 (car operations)) #f)\n    (else (below_zero (cdr operations)))))\n",
    "  (cond\n    ((= (car operations) 0) #t)\n    ((< (car operations) 0) #f)\n    (else (below_zero (cdr operations)))))\n\n;; #lang scheme",
    "  (cond\n    ((null? operations) #t)\n    ((null? (cdr operations)) #f)\n    (else\n      (if (< (car operations) 0)\n        #t\n        (else\n          (below_zero (cdr operations)))))\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n          #t\n          (else\n            (let ((next-operations (cdr operations)))\n              (below_zero next-operations))))))))\n",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance (cdr operations))\n          #t\n          (else\n            (below_zero (cdr operations))))))))\n",
    "  (cond\n    ((null? operations) #t)\n    (else\n      (let ((balance (get-balance operations)))\n        (if (< balance 0) #t (else #f))))))\n",
    "  (cond\n    ((>= (car operations) 0)\n      (cons operations (below_zero (cdr operations))))\n    (else #f)))\n\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #t\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance (cdr operations))\n          #t\n          (else\n            (below_zero (cdr operations)))))\n    )\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n\n;; #lang scheme",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n          #t\n          (else\n            (let ((next (cdr operations)))\n              (below_zero (cdr next))))))))\n",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))))\n",
    "  (cond\n    ((null? operations) #t)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n          #t\n          (else\n            (let ((next_operations (cdr operations)))\n              (below_zero next_operations))))))))\n",
    "  (cond\n    ((null? operations) #t)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n          #t\n          (else\n            (let ((next_operations (cdr operations)))\n              (below_zero next_operations)))))))\n",
    "  (cond\n    ((null? operations) #f)\n    ((= (car operations) 0) #t)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((null? operations) #f)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n          #t\n          (else\n            (let ((next_operations (cdr operations)))\n              (below_zero next_operations))))))))\n",
    "  (cond\n    ((>= (car operations) 0)\n      (return #f))\n    ((< (car operations) 0)\n      (return #t))\n    (else\n      (return #f))\n  ))\n\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; >>> (below_zero (list -1 -2 -4 -5))\n;; #t\n;; >>> (below_zero (list -1 -2 -4 -5))\n;; #f\n;; >>> (below_zero (list -1 -2 -4 -5))\n;; #f\n;; >>> (below_zero (list -1 -2 -4 -5))\n;; #f\n;; >>> (below_zero (list -1 -2 -4 -5))\n;; #f\n;; >>> (below_zero (list -1 -2 -4 -5))\n;; #f\n;; >>> (below_zero (list -1 -2 -4 -5))\n;; #f\n;; >>> (below_zero (list -1 -2 -4 -5))\n;; #f\n;; >>> (below_zero (list -1 -2 -4 -5))\n;; #f\n;; >>> (below_zero (list -1 -2 -4 -5))\n;; #f\n;; >>> (below_zero (list -1 -2 -4 -5))\n;; #f\n;; >>> (below_zero (list -1 -2 -4 -5))\n;; #f\n;; >>> (below_zero (list -1 -2 -4 -5))\n;; #f\n;; >>> (below_zero (list -1 -2 -4 -5))\n;; #f\n;; >>> (below_zero (list -1 -2 -4 -5))\n;; #f\n;; >>> (below_zero (list -1 -2 -4 -5))\n;; #f\n;; >>> (below_zero (list -1 -2 -4 -5))\n;; #f\n;; >>> (below_zero (list -1 -2 -4 -5))\n;; #f\n;; >>> (below_zero (list -1 -2 -4 -5))\n;; #f",
    "  (cond\n    ((null? operations) #t)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n            #t\n            (else\n              (let ((next (cdr operations)))\n                (below_zero (cdr next))))))))\n\n;; #lang scheme",
    "  (cond\n    ((null? operations) #t)\n    ((null? (cdr operations)) #f)\n    (else\n      (if (< (car operations) 0)\n        #t\n        (else\n          (below_zero (cdr operations)))))\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    ((< 0 (car operations)) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n            #t\n            (else\n              (let ((next_operations (cdr operations)))\n                (below_zero next_operations))))))))\n",
    "  (cond\n    ((null? operations) #t)\n    ((null? (cdr operations)) #f)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n          #t\n          (else\n            (let ((next_balance (cdr (cdr operations))))\n              (if (< next_balance 0)\n                #t\n                (else\n                  (below_zero (cdr (cdr (cdr operations))))))))))))\n",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    ((null? (cdr operations)) #f)\n    (else\n      (if (< (car operations) 0)\n        #t\n        (else\n          (below_zero (cdr operations)))))\n  )\n)\n\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang lisp\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -",
    "  (cond\n    ((>= (car operations) 0)\n      (return #f))\n    ((< (car operations) 0)\n      (return #t))\n    (else\n      (return #f)))\n)\n\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #t\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n          #t\n          (else\n            (let ((next (cdr operations)))\n              (below_zero (cdr next))))))))\n",
    "  (cond\n    ((null? operations) #f)\n    ((< 0 (car operations)) #t)\n    (else (below_zero (cdr operations)))))\n",
    "  (cond\n    ((null? operations) #f)\n    ((< 0 (car operations)) #t)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    ((< 0 (car operations)) #f)\n    (else (below_zero (cdr operations)))))\n",
    "  (cond\n    ((>= (car operations) 0)\n      (return #f))\n    (else\n      (let ((result (below_zero (cdr operations))))\n        (return (cond\n                 ((= result #t) result)\n                 ((< result #f) result)))))))\n",
    "  (cond\n    ((>= (car operations) 0)\n      (return #f))\n    (else\n      (let ((balance (car operations)))\n        (while (<= (car operations) 0)\n          (let ((new_balance (car operations)))\n            (set! balance new_balance)\n            (set! operations (cdr operations))\n            (if (<= balance 0)\n              (return #t)\n              (else\n                (set! operations (cdr operations))\n                (return #f))))))))\n",
    "  (cond\n    ((null? operations) #t)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n          #t\n          (else\n            (let ((next (cdr operations)))\n              (below_zero (cdr next))))))))\n",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t",
    "  (cond\n    ((>= 0 (car operations))\n      (return #f))\n    (else\n      (let ((result (below_zero (cdr operations))))\n        (return (cond\n                 ((= 0 (car result))\n                   (return #t))\n                 (else\n                   (return #f))))))))\n",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n          #t\n          (else\n            (let ((next (cdr operations)))\n              (below_zero (cdr next))))))))\n",
    "  (let ((balance (make-balance 0)))\n    (while operations\n      (if (negative? (balance (- (car operations) (cdr operations))))\n        (return #t)\n        (balance (- (car operations) (cdr operations)))))\n    (return #f)))\n\n;; #lang scheme",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang lisp\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1",
    "  (cond\n    ((null? operations) #t)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n            #t\n            (else\n              (let ((next_operations (cdr operations)))\n                (below_zero next_operations))))))))\n",
    "  (cond\n    ((null? operations) #f)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n            #t\n            (else\n              (let ((next_operations (cdr operations)))\n                (below_zero next_operations))))))))\n",
    "  (cond\n    ((null? operations) #t)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n          #t\n          (else\n            (let ((next (cdr operations)))\n              (below_zero (cdr next))))))))\n",
    "  (cond\n    ((null? operations) #t)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0) #t\n          (else\n            (let ((next_operations (cdr operations)))\n              (below_zero next_operations)))))))\n",
    "  (cond\n    ((null? operations) #t)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n          #t\n          (else\n            (let ((next_operations (cdr operations)))\n              (below_zero next_operations))))))))\n",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((null? operations) #f)\n    ((< 0 (car operations)) #t)\n    (else (below_zero (cdr operations)))))\n",
    "  (cond\n    ((null? operations) #f)\n    ((< 0 (car operations)) #t)\n    (else (below_zero (cdr operations)))\n  )\n)\n\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang lisp\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2",
    "  (cond\n    ((null? operations) #t)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n          #t\n          (else\n            (let ((next_operations (cdr operations)))\n              (below_zero next_operations))))))))\n",
    "  (cond\n    ((= (car operations) 0)\n      (return #t))\n    (else\n      (let ((balance (car operations)))\n        (let (((rest (cdr operations))))\n          (if (below_zero (rest))\n            (return #t)\n            (else\n              (return #f))))))))\n",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    ((null? (cdr operations)) #f)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n          #t\n          (else\n            (below_zero (cdr operations))))))))\n",
    "  (cond\n    ((null? operations) #t)\n    ((null? (cdr operations)) #f)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n            #t\n            (else\n              (below_zero (cdr operations))))))))\n",
    "  (cond\n    ((= (car operations) 0) #t)\n    (else #f)\n  ))\n\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang lisp\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #t\n;; >>> (below_zero (list 1 2 -4 -5 -6))\n;; #t\n;; >>> (below_zero (list 1 2 -4 -5 -6 -7))\n;; #t\n;; >>> (below_zero (list 1 2 -4 -5 -6 -7 -8))\n;; #t\n;; >>> (below_zero (list 1 2 -4 -5 -6 -7 -8 -9))\n;; #t\n;; >>> (below_zero (list 1 2 -4 -5 -6 -7 -8 -9 -10))\n;; #t\n;; >>> (below_zero (list 1 2 -4 -5 -6 -7 -8 -9 -10 -11))\n;; #t\n;; >>> (below_zero (list 1 2 -4 -5 -6 -7 -8 -9 -10 -11 -12))\n;; #t\n;; >>> (below_zero (list 1 2 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13))\n;; #t\n;; >>> (below_zero (list 1 2 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14))\n;; #t\n;; >>> (below_zero (list 1 2 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 -15))\n;; #t\n;; >>> (below_zero (list 1 2 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 -15 -16))\n;; #t\n;; >>> (below_zero (list 1 2 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 -15 -16 -17))\n;; #t\n;; >>> (below_zero (list 1",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    ((< (car operations) 0) #f)\n    (else\n      (let ((result (below_zero (cdr operations))))\n        (if result\n          (begin\n            (set! operations (cdr operations))\n            #t)\n          (else\n            (set! operations (cdr operations))\n            #f))))))\n",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (let ((balance 0))\n    (while operations\n      (if (<= balance 0)\n        (return #t)\n        (let ((amount (car operations)))\n          (balance (+ balance (- amount))))\n        (cdr operations)))))\n\n;; #lang scheme",
    "  (cond\n    ((null? operations) #t)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n          #t\n          (else\n            (let ((next-operations (cdr operations)))\n              (below_zero next-operations))))))))\n",
    "  (cond\n    ((= (car operations) 0) #t)\n    ((< (car operations) 0) #f)\n    (else (below_zero (cdr operations)))))\n\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang lisp\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2",
    "  (let ((balance 0))\n    (for-each (lambda (op)\n                (if (<= balance (car op))\n                  (return #t)\n                  (setq balance (- (car op) balance))))\n      operations))\n)\n\n;; #lang scheme",
    "  (cond\n    ((null? operations) #f)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n            #t\n            (else\n              (let ((next_operations (cdr operations)))\n                (below_zero next_operations))))))))\n",
    "  (cond\n    ((>= 0 (car operations))\n      (return #f))\n    (else\n      (let ((result (below_zero (cdr operations))))\n        (return (cond\n                 ((= 0 (car result))\n                   (return #t))\n                 (else\n                   (return #f))))))))\n",
    "  (cond\n    ((null? operations) #t)\n    ((null? (cdr operations)) #f)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n          #t\n          (else\n            (let ((next_balance (cdr (cdr operations))))\n              (if (< next_balance 0)\n                #t\n                (else\n                  (below_zero (cdr (cdr (cdr operations)))))))))))\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((null? operations) #f)\n    ((< 0 (car operations)) #t)\n    (else (below_zero (cdr operations)))))\n\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #t\n;; >>> (below_zero (list 1 2 -4 -5 -6))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5 -6 -7))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5 -6 -7 -8))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5 -6 -7 -8 -9))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5 -6 -7 -8 -9 -10))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5 -6 -7 -8 -9 -10 -11))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5 -6 -7 -8 -9 -10 -11 -12))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 -15))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 -15 -16))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 -15 -16 -17))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else\n      (let ((result (below_zero (cdr operations))))\n        (if result\n          (begin (set! result #t) (car operations))\n          (else (set! result #f)))))))\n",
    "  (cond\n    ((null? operations) #t)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n          #t\n          (else\n            (let ((next_operations (cdr operations)))\n              (below_zero next_operations))))))))\n",
    "  (cond\n    ((null? operations) #t)\n    ((negative? (car operations)) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((>= (car operations) 0)\n      (return #f))\n    (else\n      (let ((balance (car operations)))\n        (while (< (car (cdr operations)) 0)\n          (balance (car (cdr operations)))\n          (set! (car (cdr operations)) (- (car (cdr operations)) balance))\n          (set! balance 0))\n        (return #t))))\n\n;; #lang scheme",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((>= (car operations) 0)\n      (return #f))\n    ((<= (car operations) 0)\n      (return #t))\n    (else\n      (let ((result (below_zero (cdr operations))))\n        (if result\n          (return #t)\n          (return #f))))))\n",
    "  (cond\n    ((>= (car operations) 0)\n      (return #f))\n    ((< (car operations) 0)\n      (return #t))\n    (else\n      (return #f)))\n)\n\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t",
    "  (cond\n    ((null? operations) #t)\n    ((< 0 (car operations)) #f)\n    (else (below_zero (cdr operations)))))\n",
    "  (cond\n    ((null? operations) #t)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n          #t\n          (else\n            (let ((next_operations (cdr operations)))\n              (below_zero next_operations)))))))\n",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (let ((balance (make-vector 0 operations)))\n    (for-each\n      (lambda (op)\n        (if (<= balance op)\n          (set! balance (- balance op))\n          (else\n            (set! balance balance))))\n      operations))\n\n;; #lang scheme",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else\n      (let ((result (below_zero (cdr operations))))\n        (if result\n          (begin (set! result #t) (car operations))\n          (car operations))))))\n",
    "  (cond\n    ((null? operations) #f)\n    ((< 0 (car operations)) #t)\n    (else (below_zero (cdr operations)))))\n",
    "  (cond\n    ((null? operations) #t)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n          #t\n          (else\n            (let ((next_operations (cdr operations)))\n              (below_zero next_operations))))))))\n",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    ((< 0 (car operations)) #f)\n    (else (below_zero (cdr operations)))))\n\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #t\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4 -5))\n;; #f\n;; >>> (below_zero (list 1 2 -4",
    "  (cond\n    ((>= (car operations) 0)\n      (cons (car operations) (below_zero (cdr operations))))\n    (else #f)))\n",
    "  (let ((balance (make-vector 0 (length operations))))\n    (for-each\n      (lambda (op)\n        (if (<= (car op) 0)\n          (set-vector-elt balance (cdr op) -1)\n          (set-vector-elt balance (cdr op) 0))\n      operations)\n    (if (<= (vector-ref balance 0) 0)\n      #t\n      #f)))\n",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    ((null? (cdr operations)) #f)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n          #t\n          (else\n            (let ((next_balance (car (cdr operations))))\n              (if (< next_balance 0)\n                #t\n                (else\n                  (below_zero (cdr (cdr operations)))\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    ((null? (cdr operations)) #f)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n          #t\n          (else\n            (let ((next_balance (cdr (cdr operations))))\n              (if (< next_balance 0)\n                #t\n                (else\n                  (below_zero (cdr (cdr (cdr operations))))))))))))\n",
    "  (cond\n    ((null? operations) #t)\n    ((null? (cdr operations)) #f)\n    (else\n      (if (< (car operations) 0)\n        #t\n        (below_zero (cdr operations)))))\n\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang lisp\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;;",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang lisp\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1",
    "  (cond\n    ((null? operations) #t)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n            #t\n            (else\n              (let ((next_operations (cdr operations)))\n                (below_zero next_operations))))))))\n",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance (cdr operations))\n          #t\n          (below_zero (cdr operations)))))\n  )\n)\n",
    "  (cond\n    ((null? operations) #f)\n    ((= (car operations) 0) #t)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    ((null? (cdr operations)) #f)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n          #t\n          (else\n            (below_zero (cdr operations))))))))\n",
    "  (cond\n    ((null? operations) #f)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n          #t\n          (else\n            (let ((next_operations (cdr operations)))\n              (below_zero next_operations))))))))\n",
    "  (cond\n    ((null? operations) #t)\n    (else\n      (let ((balance (get-balance operations)))\n        (if (< balance 0) #t (else #f))))))\n",
    "  (cond\n    ((null? operations) #t)\n    ((negative? (car operations)) #f)\n    (else (below_zero (cdr operations)))))\n",
    "  (cond\n    ((>= (car operations) 0)\n      (return #f))\n    ((< (car operations) 0)\n      (return #t))\n    (else\n      (return #f))\n  )\n)\n\n;; #lang scheme\n\n;; You're given a list of deposit and withdrawal operations on a bank account that starts with\n;; zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n;; at that point function should return #t. Otherwise it should return #f.\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t",
    "  (cond\n    ((null? operations) #t)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n          #t\n          (else\n            (let ((next_operations (cdr operations)))\n              (below_zero next_operations))))))))\n",
    "  (cond\n    ((null? operations) #t)\n    ((null? (cdr operations)) #f)\n    (else\n      (if (< (car operations) 0)\n        #t\n        (else\n          (below_zero (cdr operations)))))\n  )\n)\n\n;; #lang scheme",
    "  (cond\n    ((null? operations) #t)\n    ((null? (cdr operations)) #f)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n          #t\n          (else\n            (let ((next_operations (cdr operations)))\n              (below_zero next_operations))))))))\n",
    "  (cond\n    ((>= (car operations) 0)\n      (return #f))\n    (else\n      (let ((balance (car operations)))\n        (if (<= balance 0)\n          (return #t)\n          (else\n            (let ((next_operations (cdr operations)))\n              (below_zero next_operations))))))))\n",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((null? operations) #f)\n    ((< 0 (car operations)) #t)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    ((< 0 (car operations)) #f)\n    (else (below_zero (cdr operations)))\n  ))\n\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang lisp\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang lisp\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang lisp\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang lisp\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang lisp\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang lisp\n;; >>> (below_zero (",
    "  (cond\n    ((null? operations) #t)\n    ((null? (cdr operations)) #f)\n    (else\n      (if (< (car operations) 0)\n        #t\n        (else\n          (below_zero (cdr operations)))))\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    ((null? (cdr operations)) #f)\n    (else\n      (if (< (car operations) 0)\n        #t\n        (else\n          (below_zero (cdr operations)))))\n  )\n)\n\n;; #lang scheme",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n          #t\n          (else\n            (let ((next-operations (cdr operations)))\n              (below_zero next-operations))))))))\n",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((= (car operations) 0)\n      (return #t))\n    (else\n      (let ((result (below_zero (cdr operations))))\n        (return result))))\n)\n\n;; #lang scheme",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    ((null? (cdr operations)) #f)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n          #t\n          (else\n            (below_zero (cdr operations))))))))\n",
    "  (cond\n    ((null? operations) #t)\n    ((< 0 (car operations)) #f)\n    (else (below_zero (cdr operations)))))\n",
    "  (cond\n    ((null? operations) #t)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n            #t\n            (else\n              (let ((next_operations (cdr operations)))\n                (below_zero next_operations))))))))\n",
    "  (cond\n    ((null? operations) #t)\n    ((< 0 (car operations)) #f)\n    (else (below_zero (cdr operations)))))\n\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang lisp\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang lisp\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang lisp\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang lisp\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang lisp\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang scheme\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n;; #lang lisp\n;; >>> (below_zero (list 1",
    "  (cond\n    ((null? operations) #t)\n    ((null? (cdr operations)) #f)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n            #t\n            (else\n              (let ((next_balance (cdr (cdr operations))))\n                (if (< next_balance 0)\n                    #t\n                    (else\n                      (below_zero (cdr (cdr (cdr operations))))))))))))\n",
    "  (cond\n    ((null? operations) #t)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n          #t\n          (else\n            (let ((next-operations (cdr operations)))\n              (below_zero next-operations))))))))\n",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n          #t\n          (else\n            (let ((next_operations (cdr operations)))\n              (below_zero next_operations))))))))\n",
    "  (cond\n    ((null? operations) #t)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n          #t\n          (else\n            (let ((next (cdr operations)))\n              (below_zero (cdr next))))))))\n",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n            #t\n            (else\n              (let ((next (cdr operations)))\n                (below_zero (cdr next))))))))\n",
    "  (cond\n    ((>= (car operations) 0)\n      (return #f))\n    (else\n      (let ((balance (car operations)))\n        (while (<= (car (cdr operations)) 0)\n          (balance (- balance (car (cdr (cdr operations))))\n            (cdr (cdr operations))))\n        (return #t))))\n\n;; #lang scheme\n;; (below-zero (list 1 2 3))\n;; #f\n;; (below-zero (list 1 2 -4 5))\n;; #t",
    "  (cond\n    ((>= 0 (car operations))\n      (return #f))\n    (else\n      (let ((result (below_zero (cdr operations))))\n        (return (cond\n                 ((= 0 (car result))\n                   (return #t))\n                 (else\n                   (return result))))))))\n",
    "  (cond\n    ((null? operations) #t)\n    ((< 0 (car operations)) #f)\n    (else (below_zero (cdr operations)))))\n",
    "  (cond\n    ((null? operations) #t)\n    ((null? (cdr operations)) #f)\n    (else\n      (if (< (car operations) 0)\n        #t\n        (else\n          (below_zero (cdr operations)))))\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n          #t\n          (else\n            (let ((next_operations (cdr operations)))\n              (below_zero next_operations))))))))\n",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    ((null? (cdr operations)) #f)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n            #t\n            (else\n              (below_zero (cdr operations))))))))\n",
    "  (cond\n    ((null? operations) #f)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n          #t\n          (else\n            (let ((next_operations (cdr operations)))\n              (below_zero next_operations))))))))\n",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    ((< (car operations) 0) #f)\n    (else\n      (let ((result (below_zero (cdr operations))))\n        (if result\n          (begin\n            (set! operations (cdr operations))\n            (return #t)\n          )\n          (return #f)\n        )\n      )\n    )\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    ((< 0 (car operations)) #f)\n    (else (below_zero (cdr operations)))))\n",
    "  (cond\n    ((null? operations) #t)\n    ((null? (cdr operations)) #f)\n    (else\n      (if (< (car operations) 0)\n        (below_zero (cdr operations))\n        (else\n          (below_zero (cdr (cdr operations))))))))\n",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((null? operations) #t)\n    ((= (car operations) 0) #f)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((null? operations) #f)\n    ((< 0 (car operations)) #t)\n    (else (below_zero (cdr operations)))\n  )\n)\n",
    "  (cond\n    ((null? operations) #f)\n    (else\n      (let ((balance (car operations)))\n        (if (< balance 0)\n          #t\n          (else\n            (let ((next_operations (cdr operations)))\n              (below_zero next_operations)))))))\n"
  ],
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ]
}