{
  "name": "HumanEval_29_filter_by_prefix",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n(define (filter_by_prefix strings prefix)\n",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)",
  "completions": [
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s ()))\n                    ()))\n               strings))\n  result)\n",
    "  (let* ([result (list)])\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (append result s))\n                    ()))\n      strings))\n)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let* ([result (list)])\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (append result s))\n                    ()))\n      strings))\n)\n",
    "  (let* ([(result (list))]\n         [(prefix_len (length prefix))]\n         [(prefix_str prefix)])\n    (for-each (lambda (s)\n               (if (string-prefix? s prefix_str)\n                   (result (cons s (result)))\n                   (result)))\n      strings))\n)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"ab\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"cde\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"cde\" \"array\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"cde\" \"array\" \"bcd\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"cde\" \"array\" \"bcd\" \"cde\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"cde\" \"array\" \"bcd\" \"cde\" \"array\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"cde\" \"array\" \"bcd\" \"cde\" \"array",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s (result)))\n                    (result)))\n               strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (cons s s))\n                    (result ()))\n                )\n              strings\n              (reverse result)\n              ))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s (result)))\n                    (result)))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s (result)))\n                    ()))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s (result)))\n                    (result)))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s (result)))\n                    ()))\n               strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s ()))\n                    ()))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s ()))\n                    ()))\n               strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s (result)))\n                    (result)))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (cons s ()))\n                    ()))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\")",
    "  (let* ([prefix_len (length prefix)])\n    (if (null? strings)\n      (list)\n      (let* ([i (0)])\n        (while (< i prefix_len)\n          (if (string=? (first strings) prefix)\n            (list (first (rest strings)) (first (rest (rest strings))))\n            (set! i (1+ i))\n            (rest strings))))))))\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"ab\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s (result)))\n                    (result)))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s (result)))\n                    (result)))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (cons s s))\n                    (result ()))\n                )\n              strings\n              (reverse result)\n              ))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"ab\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s ()))\n                    ()))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s ()))\n                    ()))\n                strings))\n  result)\n",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s (result)))\n                    (result)))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let* ([result (list)])\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (append result s))\n                    ()))\n      strings))\n)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s ()))\n                    ()))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s (result)))\n                    (result)))\n               strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s ()))\n                    ()))\n                strings))\n  result)\n",
    "  (if (null? strings)\n    []\n    (cons (first strings) (filter_by_prefix (rest strings) prefix))))\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"ab\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bc\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcde\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcde\" \"cde\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcde\" \"cde\" \"array\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcde\" \"cde\" \"array\" \"abc\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcde\" \"cde\" \"array\" \"abc\" \"bcd\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcde\" \"cde\" \"array\" \"abc\" \"bcd\" \"cde\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s ()))\n                    ()))\n               strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s (result)))\n                    (result)))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s ()))\n                    ()))\n                strings))\n  result)\n",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s (result)))\n                    (result ()))\n                )\n              strings\n              (result ()))\n    result)\n)\n\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"ab\")\n;; (list \"abc\" \"bcd\" \"array\")\n\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\" \"bcd\")\n\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"cde\")\n;; (list \"abc\" \"bcd\")\n\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"cde\" \"array\")\n;; (list \"abc\" \"bcd\")\n\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"cde\" \"array\" \"bcd\")\n;; (list \"abc\" \"bcd\")\n\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"cde\" \"array\" \"bcd\" \"cde\")\n;; (list \"abc\" \"bcd\")\n\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"cde\" \"array\" \"bcd\" \"cde\" \"array\")\n;; (list \"abc\" \"bcd\")\n\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"cde\" \"array\" \"bcd\" \"cde\" \"array\" \"bcd\")\n;; (list \"abc\" \"bcd\")\n\n;; >>>",
    "  (if (null? strings)\n    (list)\n    (cons (car strings)\n      (filter_by_prefix (cdr strings) prefix))))\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s ()))\n                    ()))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s (result)))\n                    (result)))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s (result)))\n                    (result)))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that end with a given suffix.\n;; >>> (filter_by_suffix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_suffix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"bcd\" \"cde\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s (result)))\n                    (result ()))\n                )\n              strings\n              (result ()))\n    result))\n",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (cons s s))\n                    (result ()))\n                )\n              strings\n              (reverse result)\n              ))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let* ([result (])\n         (for-each (lambda (s)\n                     (if (string= s prefix)\n                          (result (append result s))\n                          ()))\n             strings))\n  result)\n",
    "  (let* ([result (list)])\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (append result s))\n                    )\n                )\n          strings\n          )\n    result\n  )\n)\n",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s (result)))\n                    (result)))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s (result)))\n                    (result)))\n               strings))\n  result)\n",
    "  (if (null? strings)\n    (list)\n    (cons (car strings) (filter_by_prefix (cdr strings) prefix))))\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"ab\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\"",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s ()))\n                    ()))\n               strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s (result)))\n                    (result)))\n               strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s ()))\n                    ()))\n               strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s ()))\n                    ()))\n               strings))\n  result)\n",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s (result)))\n                    (result)))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s (result)))\n                    (result)))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s ()))\n                    ()))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s (result)))\n                    (result)))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (cons s s))\n                    (result ()))\n                )\n              strings\n              (reverse result)\n              ))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"ab\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcde\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcde\" \"cde\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcde\" \"cde\" \"array\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcde\" \"cde\" \"array\" \"abcd\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcde\" \"cde\" \"array\" \"abcd\" \"bcde\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcde\" \"cde\" \"array\" \"abcd\" \"bcde\" \"cde\")\n;; (list",
    "  (if (null? strings)\n    (list)\n    (cons (car strings) (filter_by_prefix (cdr strings) prefix))))\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"ab\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"b\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\" \"c\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\" \"cde\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\" \"cde\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-starts-with s prefix)\n                    (result (cons s (result)))\n                    (result ()))\n                )\n              strings\n              (result ()))\n    result))\n",
    "  (let ((result ()))\n    (for-each (lambda (x)\n                (if (string= x prefix)\n                    (result (cons x result)))))\n    result))\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s (result)))\n                    (result)))\n               strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (cons s s))\n                    (result ()))\n                )\n              strings\n              (reverse result)\n              ))\n  result)\n",
    "  (if (null? strings)\n    ()\n    (cons (car strings) (filter_by_prefix (cdr strings) prefix))))\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"ab\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"b\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bc\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\" \"c\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\" \"cde\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\" \"cde\" \"d\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\" \"cde\" \"d\" \"e\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\" \"cde\" \"d\" \"e\" \"f\")",
    "  (let* ([result (list)])\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (append result s))\n                    ))\n       strings))\n)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s (result)))\n                    (result)))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"ab\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcde\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcde\" \"cde\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcde\" \"cde\" \"array\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcde\" \"cde\" \"array\" \"bcd\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcde\" \"cde\" \"array\" \"bcd\" \"cde\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcde\" \"cde\" \"array\" \"bcd\" \"cde\" \"array\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_",
    "  (let* ([result (list)])\n    (for-each (lambda (string)\n                (if (string-starts-with? string prefix)\n                    (result (append result string))\n                    )\n                )\n          strings\n          )\n    result\n  )\n)\n",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s ()))\n                    ()))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s ()))\n                    ()))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let* ([prefix_len (length prefix)])\n    (if (null? strings)\n      []\n      (let* ([i (0)])\n        (while (< i prefix_len)\n          (if (< (car strings) prefix)\n            (list (car strings) (cdr strings))\n            (set! i (1+ i))\n          )\n        )\n      )\n    )\n  )\n)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"ab\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s ()))\n                    ()))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (cons s s))\n                    ()))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s ()))\n                    ()))\n               strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"ab\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\" \"cde\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\" \"cde\" \"array\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\" \"cde\" \"array\" \"bcd\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\" \"cde\" \"array\" \"bcd\" \"cde\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\" \"cde\" \"array\" \"bcd\" \"cde\" \"array\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s (result)))\n                    (result)))\n               strings))\n  result)\n",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (cons s s))\n                    (result ()))\n                )\n              strings\n              (reverse result)\n              ))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"ab\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcde\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcde\" \"cde\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcde\" \"cde\" \"array\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcde\" \"cde\" \"array\" \"array\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcde\" \"cde\" \"array\" \"array\" \"array\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcde\" \"cde\" \"array\" \"array\" \"array\" \"array\")\n;; (list \"abc\" \"bcd",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s ()))\n                    ()))\n               strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (cons s s))\n                    (result ()))\n                )\n              strings\n              (reverse result)\n              )\n    result)\n)\n",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s ()))\n                    ()))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (if (null? strings)\n    (list)\n    (cons (car strings) (filter_by_prefix (cdr strings) prefix))))\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s (result)))\n                    (result)))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (cons s s))\n                    (result ()))\n                )\n              strings\n              (reverse result)\n              ))\n  result)\n",
    "  (if (null? strings)\n    (list)\n    (let ((result ()))\n      (for-each (lambda (s)\n                  (if (string-prefix? s prefix)\n                    (result (cons s ()))\n                    ()))\n        strings)))\n  result)\n",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (cons s s))\n                    (result ()))\n                )\n              strings\n              (reverse result)\n              )\n    result)\n)\n",
    "  (let* ([(result (list))]\n         [(prefix_len (length prefix))]\n         [(prefix_str prefix)])\n    (for-each (lambda (str)\n               (if (string=? str prefix_str)\n                   (result (append result (str)))\n                   (result ()))\n               )\n          strings)\n    result)\n)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s (result)))\n                    (result)))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let* ([result (list)])\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (append result s))\n                    ()))\n      strings))\n)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s ()))\n                    ()))\n               strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let* ([result (list)])\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (append result s))\n                    ))\n      strings))\n)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s ()))\n                    ()))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (cons s ()))\n                    ()))\n                strings))\n  result)\n",
    "  (if (null? strings)\n    (list)\n    (let ((result ()))\n      (for-each (lambda (s)\n                  (if (string=? s prefix)\n                    (result (cons s ()))\n                    ()))\n        strings)))\n  (if (null? result)\n    (list)\n    result))\n",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (cons s s))\n                    (result ()))\n                )\n              strings\n              (reverse result)\n              ))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let* ([result (list)])\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (append result s))\n                    ()))\n          strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (cons s s))\n                    ()))\n               strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (cons s s))\n                    (result ()))\n                )\n              strings\n              (reverse result)\n              ))\n  result)\n\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"ab\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bc\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bc\" \"cd\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bc\" \"cd\" \"de\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bc\" \"cd\" \"de\" \"e\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bc\" \"cd\" \"de\" \"e\" \"f\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bc\" \"cd\" \"de\" \"e\" \"f\" \"",
    "  (let* ([(result (list))]\n         [(prefix_len (length prefix))]\n         [(prefix_str prefix)])\n    (for-each (lambda (s)\n               (if (string-prefix? s prefix_str)\n                   (result (append result (list s)))\n                   (result ()))\n               strings)\n      result))\n  (filter_by_prefix strings prefix))\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (if (null? strings)\n    (list)\n    (let ((result ()))\n      (for-each (lambda (s)\n                  (if (string-prefix? s prefix)\n                    (result (cons s ()))\n                    ()))\n        strings)))\n  (if (null? result)\n    (list)\n    result))\n\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"ab\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"b\")\n;; (list \"abc\" \"b\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\" \"c\")\n;; (list \"abc\" \"bcd\" \"c\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\" \"cde\")\n;; (list \"abc\" \"bcd\" \"cde\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\" \"cde\" \"d\")\n;; (list \"abc\" \"bcd\" \"cde\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\" \"cde\" \"d\" \"e\")\n;; (list \"abc\" \"bcd\" \"cde\")\n;; >>> (filter_by_prefix (list \"abc\" \"b",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s (result)))\n                    (result)))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let* ([result (list)])\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (append result s))\n                    ()))\n          strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s ()))\n                    ()))\n                strings))\n  result)\n",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s ()))\n                    ()))\n                strings))\n  result)\n",
    "  (let* ([result (list)])\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (append result s))\n                    ()))\n      strings))\n)\n",
    "  (if (null? strings)\n    (list)\n    (cons (first strings)\n      (filter_by_prefix (rest strings) prefix))))\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;;",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s ()))\n                    ()))\n                strings))\n  result)\n",
    "  (if (null? strings)\n    (list)\n    (let* ([(result (list))]\n           [(prefix_len (length prefix))]\n           [(prefix_str prefix)])\n      (for-each (lambda (s)\n                 (if (string-prefix? s prefix_str)\n                     (result (append result (list s)))\n                     ()))\n         strings)))))\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s ()))\n                    ()))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (cons s ()))\n                    ()))\n               strings))\n  result)\n\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\" \"b\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\" \"b\" \"c\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\" \"b\" \"c\" \"d\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\" \"b\" \"c\" \"d\" \"e\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\" \"b\" \"c\" \"d\" \"e\" \"f\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\" \"b",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (cons s s))\n                    (result ()))\n                )\n              strings\n              (reverse result)\n              ))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s (result)))\n                    (result)))\n               strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s (result)))\n                    ()))\n                strings))\n  result)\n",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (cons s s))\n                    (result ()))\n                )\n              strings\n              (reverse result)\n              ))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s ()))\n                    ()))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that end with a given suffix.\n;; >>> (filter_by_suffix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_suffix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"bcd\" \"cde\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s (result)))\n                    (result)))\n                strings))\n  result)\n",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s ()))\n                    ()))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (cons s s))\n                    (result ()))\n                )\n              strings\n              (reverse result)\n              ))\n  result)\n",
    "  (if (null? strings)\n    (list)\n    (cons (car strings) (filter_by_prefix (cdr strings) prefix))))\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (cons s s))\n                    (result ()))\n                )\n              strings\n              (reverse result)\n              ))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s (result)))\n                    (result)))\n                strings))\n  result)\n\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"ab\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"b\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\" \"cde\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\" \"cde\" \"array\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\" \"cde\" \"array\" \"bcd\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\" \"cde\" \"array\" \"bcd\" \"cde\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\" \"cde\" \"array\" \"bcd",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s (result)))\n                    (result)))\n               strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s (result)))\n                    (result)))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s (result)))\n                    (result)))\n               strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"ab\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"b\")\n;; (list \"abc\" \"b\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\" \"c\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\" \"cde\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\" \"cde\" \"d\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\" \"cde\" \"d\" \"e\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\" \"cde\" \"d\" \"e\" \"f\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (",
    "  (let* ([result (list)])\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (append result s))\n                    ()))\n      strings))\n)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s ()))\n                    ()))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that end with a given suffix.\n;; >>> (filter_by_suffix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_suffix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"bcd\" \"cde\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (cons s s))\n                    (result ()))\n                )\n              strings\n              (reverse result)\n              ))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"ab\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\" \"cde\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\" \"cde\" \"array\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\" \"cde\" \"array\" \"cde\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\" \"cde\" \"array\" \"cde\" \"array\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\" \"cde\" \"array\" \"cde\" \"array\" \"cde\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s (result)))\n                    (result)))\n               strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s (result)))\n                    (result)))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"ab\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bc\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bc\" \"cd\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bc\" \"cd\" \"de\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bc\" \"cd\" \"de\" \"ef\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bc\" \"cd\" \"de\" \"ef\" \"gh\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bc\" \"cd\" \"de\" \"ef\" \"gh\" \"ij\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"c",
    "  (let* ([result (list)])\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (append result s))\n                    ()))\n      strings))\n)\n",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s (result)))\n                    (result)))\n               strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s (result)))\n                    (result)))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (cons s s))\n                    (result)))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s ()))\n                    ()))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s ()))\n                    ()))\n               strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s (result)))\n                    (result)))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (cons s s))\n                    (result ()))\n                )\n              strings)\n    result))\n",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s (result)))\n                    (result)))\n               strings))\n  result)\n",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s ()))\n                    ()))\n                strings))\n  result)\n",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (cons s s))\n                    (result ()))\n                )\n              strings\n              (reverse result)\n              ))\n  result)\n\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"ab\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"b\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\" \"c\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\" \"cde\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\" \"cde\" \"d\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\" \"cde\" \"d\" \"e\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\" \"cde\" \"d\" \"e\" \"f\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s ()))\n                    ()))\n                strings))\n  result)\n",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (cons s ()))\n                    ()))\n               strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (cons s ()))\n                    ()))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"ab\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"cde\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"cde\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"cde\" \"array\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"cde\" \"array\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"cde\" \"array\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"cde\" \"array\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\"",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (cons s s))\n                    (result ()))\n                )\n              strings\n              (reverse result)\n              ))\n  result)\n\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"ab\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"cde\")\n;; (list \"abc\" \"cde\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"cde\" \"array\")\n;; (list \"abc\" \"cde\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"cde\" \"array\" \"bcd\")\n;; (list \"abc\" \"cde\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"cde\" \"array\" \"bcd\" \"cde\")\n;; (list \"abc\" \"cde\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"cde\" \"array\" \"bcd\" \"cde\" \"array\")\n;; (list \"abc\" \"cde\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"cde\" \"array\" \"bcd\" \"cde\" \"array\" \"bcd\")\n;; (list \"abc\" \"cde\" \"array\")\n;; >>>",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s ()))\n                    ()))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s (result)))\n                    (result)))\n               strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s (result)))\n                    (result)))\n               strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s ()))\n                    ()))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (cons s ()))\n                    ()))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s ()))\n                    ()))\n               strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s ()))\n                    ()))\n                strings))\n  result)\n\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\" \"b\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\" \"b\" \"c\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\" \"b\" \"c\" \"d\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\" \"b\" \"c\" \"d\" \"e\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\" \"b\" \"c\" \"d\" \"e\" \"f\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s (result)))\n                    (result)))\n               strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s ()))\n                    ()))\n                strings))\n  result)\n\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"ab\")\n;; (list \"abc\" \"bcd\" \"array\")\n\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\" \"bcd\")\n\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\")\n;; (list \"abc\" \"bcd\")\n\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\" \"cde\")\n;; (list \"abc\" \"bcd\" \"cde\")\n\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\" \"cde\" \"array\")\n;; (list \"abc\" \"bcd\" \"cde\" \"array\")\n\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\" \"cde\" \"array\" \"bcd\")\n;; (list \"abc\" \"bcd\" \"cde\" \"array\")\n\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\" \"cde\" \"array\" \"bcd\" \"cde\")\n;; (list \"abc\" \"bcd\" \"cde\" \"array\")\n\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcd\" \"cde\" \"array\" \"bcd\" \"cde\" \"array",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s (result)))\n                    (result ()))\n                )\n              strings)\n    result))\n",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s ()))\n                    ()))\n                strings))\n  result)\n",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s (result)))\n                    (result)))\n                strings))\n  result)\n",
    "  (if (null? strings)\n    (list)\n    (cons (string-prefix? prefix) (filter_by_prefix (cdr strings) prefix))))\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"b\")\n;; (list \"bcd\" \"cde\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"c\")\n;; (list \"cde\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"d\")\n;; (list)\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"e\")\n;; (list)\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"f\")\n;; (list)\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"g\")\n;; (list)\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"h\")\n;; (list)\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"i\")\n;; (list)\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"j\")\n;; (list)\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"k\")\n;; (list)\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"l\")\n;; (list)\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"m\")\n;; (list)\n;; >>> (filter_by_prefix (list \"",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s ()))\n                    ()))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"ab\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"cde\")\n;; (list \"abc\" \"bcd\" \"cde\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"cde\" \"array\")\n;; (list \"abc\" \"bcd\" \"cde\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"cde\" \"array\" \"bcd\")\n;; (list \"abc\" \"bcd\" \"cde\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"cde\" \"array\" \"bcd\" \"cde\")\n;; (list \"abc\" \"bcd\" \"cde\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"cde\" \"array\" \"bcd\" \"cde\" \"array\")\n;; (list \"abc\" \"bcd\" \"cde\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"cde\" \"array\" \"bcd\" \"cde\" \"",
    "  (let* ([result (])\n         (for-each (lambda (s)\n                     (if (string=? s prefix)\n                          (result (append result s))\n                         ()))\n             strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s (result)))\n                    (result)))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let* ([result (list)])\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (append result s))\n                    ()))\n      strings))\n)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s ()))\n                    ()))\n                strings))\n  result)\n",
    "  (let* ([prefix_len (length prefix)])\n    (if (null? strings)\n      (list)\n      (let* ([i (0)])\n        (while (< i prefix_len)\n          (if (< (car strings) prefix)\n            (list (car strings))\n            (set! i (1+ i))\n            (else\n              (set! i (1+ i))\n              (cdr strings)))))))\n\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"ab\")\n;; (list \"abc\" \"bcd\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\" \"bcd\" \"cde\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"abc\")\n;; (list \"abc\" \"bcd\" \"cde\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"ab\")\n;; (list \"abc\" \"bcd\" \"cde\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"abcd\")\n;; (list \"abc\" \"bcd\" \"cde\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"abcd\" \"abc\")\n;; (list \"abc\" \"bcd\" \"cde\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"abcd\" \"ab\")\n;; (list \"abc\" \"bcd\" \"cde\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"abcd\" \"abcd\")\n;; (list \"",
    "  (let* ([result (list)])\n    (for-each (lambda (s)\n                (if (string-starts-with? s prefix)\n                    (result (append result s))\n                    ))\n      strings))\n)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let* ([result (list)])\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (append result s))\n                    ()))\n      strings))\n)\n",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s ()))\n                    ()))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s (result)))\n                    (result)))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (if (null? strings)\n    (list)\n    (let ((result ()))\n      (for-each (lambda (s)\n                  (if (string-prefix? s prefix)\n                    (result (cons s ()))\n                    ()))\n        strings)))\n  result)\n",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (cons s s))\n                    (result ()))\n                )\n              strings\n              (reverse result)\n              ))\n  result)\n",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s ()))\n                    ()))\n               strings))\n  result)\n",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-starts-with? s prefix)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (cons s s))\n                    (result ()))\n                )\n              strings\n              (reverse result)\n              )\n    result)\n)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s (result)))\n                    (result)))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s ()))\n                    ()))\n               strings))\n  result)\n\n;; Filter an input list of strings only for ones that end with a given suffix.\n;; >>> (filter_by_suffix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_suffix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"bcd\" \"cde\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s ()))\n                    ()))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (if (null? strings)\n    (list)\n    (let* ([result (list)])\n      (for-each (lambda (s)\n                  (if (string-prefix? s prefix)\n                    (result (append result s))\n                    ))\n        strings)))))\n",
    "  (if (null? strings)\n    (list)\n    (let ((result ()))\n      (for-each (lambda (s)\n                  (if (string-prefix? s prefix)\n                    (result (cons s ()))\n                    ()))\n        strings)))\n  result)\n",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s ()))\n                    ()))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s ()))\n                    ()))\n               strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s ()))\n                    ()))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (if (null? strings)\n    []\n    (cons (first strings) (filter_by_prefix (rest strings) prefix))))\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s ()))\n                    ()))\n                strings))\n  result)\n",
    "  (if (null? strings)\n    (list)\n    (cons (car strings) (filter_by_prefix (cdr strings) prefix))))\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let* ([result (list)])\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (append result s))\n                    )\n                )\n          strings\n          ))\n  )\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (cons s s))\n                    ()))\n      strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s (result)))\n                    (result)))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (cons s s))\n                    (result ()))\n                )\n              strings\n              (reverse result)\n              ))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-starts-with? s prefix)\n                    (result (cons s ()))\n                    ()))\n                strings))\n  result)\n",
    "  (let* ([result (list)])\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (append result s))\n                    ()))\n      strings))\n)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s (result)))\n                    (result)))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (if (null? strings)\n    (list)\n    (let* ([(result) (list)])\n      (for-each (lambda (string)\n                  (if (string-starts-with? string prefix)\n                    (result)\n                    (result (append result (list string))))\n                strings))\n      (result))))\n",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (cons s ()))\n                    ()))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s ()))\n                    ()))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s (result)))\n                    (result)))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (cons s s))\n                    (result ()))\n                )\n              strings\n              (reverse result)\n              ))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s (result)))\n                    (result)))\n               strings))\n  result)\n",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s ()))\n                    ()))\n               strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (cons s s))\n                    (result ()))\n                )\n              strings\n              (reverse result)\n              ))\n  result)\n",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (cons s s))\n                    (result ()))\n                )\n              strings)\n    result))\n",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s ()))\n                    ()))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s ()))\n                    ()))\n               strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s ()))\n                    ()))\n               strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let* ([(result (list))]\n         [(prefix_len (length prefix))]\n         [(prefix_str prefix)])\n    (for-each (lambda (s)\n               (if (string-prefix? s prefix_str)\n                   (result (append result s))\n                   ()))\n      strings))\n)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s (result)))\n                    (result)))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let* ([result (list)])\n    (for-each (lambda (string)\n                (if (string-starts-with? string prefix)\n                    (result (append result string))\n                    ))\n      strings\n      ))\n  )\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"ab\")\n;; (list \"abc\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcde\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcde\" \"cde\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcde\" \"cde\" \"array\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcde\" \"cde\" \"array\" \"bcd\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcde\" \"cde\" \"array\" \"bcd\" \"cde\")\n;; (list \"abc\" \"bcd\")\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"abcd\" \"bcde\" \"cde\" \"array\" \"bcd\" \"cde\" \"array\")\n;; (list \"abc\" \"bcd\")\n;; >>> (",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string-prefix? s prefix)\n                    (result (cons s ()))\n                    ()))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (cons s ()))\n                    ()))\n               strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let* ([(result (list))]\n         [(prefix_len (length prefix))]\n         [(prefix_str prefix)])\n    (for-each (lambda (string)\n               (if (string-starts-with? string prefix_str)\n                   (result (append result (list string)))\n                   ; do nothing\n                   ))\n         (string-split-at-first-char strings \"\")\n         ))\n  (result))\n\n;; Filter an input list of strings only for ones that end with a given suffix.\n;; >>> (filter_by_suffix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_suffix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let ((result ()))\n    (for-each (lambda (s)\n                (if (string= s prefix)\n                    (result (cons s (result)))\n                    (result)))\n                strings))\n  result)\n\n;; Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")",
    "  (let* ([result (list)])\n    (for-each (lambda (s)\n                (if (string=? s prefix)\n                    (result (append result s))\n                    ()))\n      strings))\n)\n"
  ],
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ]
}