{
  "name": "HumanEval_152_compare",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; I think we all remember that feeling when the result of some long-awaited\n;; event is finally known. The feelings and thoughts you have at that moment are\n;; definitely worth noting down and comparing.\n;; Your task is to determine if a person correctly guessed the results of a number of matches.\n;; You are given two lists of scores and guesses of equal length, where each index shows a match. \n;; Return a list of the same length denoting how far off each guess was. If they have guessed correctly,\n;; the value is 0, and if not, the value is the absolute difference between the guess and the score.\n;; example:\n;; >>> (compare (list 1 2 3 4 5 1) (list 1 2 3 4 2 -2))\n;; (list 0 0 0 0 3 3)\n;; >>> (compare (list 0 5 0 0 0 4) (list 4 1 1 0 0 -2))\n;; (list 4 4 1 0 0 6)\n(define (compare game guess)\n",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate compare))\n    (check-equal? (candidate (list 1 2 3 4 5 1) (list 1 2 3 4 2 -2)) (list 0 0 0 0 3 3))\n    (check-equal? (candidate (list 0 0 0 0 0 0) (list 0 0 0 0 0 0)) (list 0 0 0 0 0 0))\n    (check-equal? (candidate (list 1 2 3) (list -1 -2 -3)) (list 2 4 6))\n    (check-equal? (candidate (list 1 2 3 5) (list -1 2 3 4)) (list 2 0 0 1))\n))\n\n(test-humaneval)",
  "completions": [
    "  (let ((score (list (map (lambda (x) (+ x game)) game))))\n    (let ((guess (list (map (lambda (x) (+ x guess)) game))))\n      (map (lambda (x) (abs (- x score) (- x guess))) game))))\n",
    "  (map (lambda (g) (abs (g - game))) guess))\n",
    "  (let ((score (list (map (lambda (x) (+ x game)) game)))))\n  (let ((guess (list (map (lambda (x) (+ x guess)) guess))))\n    (map (lambda (x) (- x score)) guess)))\n)\n",
    "  (map (lambda (score guess)\n         (if (eq? score guess)\n           0\n           (abs (score - guess))))\n    game guess))\n",
    "  (let ((score-list (list (map (lambda (x) (list (car game) (car x))) score-list)))\n         (guess-list (list (map (lambda (x) (list (car game) (car x))) guess-list)))\n         (difference (map (lambda (x) (list (car game) (car x))) guess-list) score-list)))\n  (map (lambda (x) (list (car game) (car x))) guess))\n",
    "  (let ((score (list)))\n    (for-each score game (lambda (score)\n      (let ((guess (list)))\n        (for-each guess score (lambda (guess)\n          (let ((diff (abs (sub (car guess) (car score)))))\n            (setf (cdr guess) (cdr score) diff))))))))))\n",
    "  (let ((score (list (map (lambda (x) (+ x game)) game)))))\n  (let ((guess (list (map (lambda (x) (+ x guess)) game)))))\n  (map (lambda (x) (abs (- x score x) (- x guess x))))))\n",
    "  (map (lambda (g) (if (eq? g guess) 0 (abs (g - game)))) guess))\n",
    "  (map (lambda (g) (if (eq? g guess) 0 (abs (g - game)))) guess))\n",
    "  (let ((score-list (list (map (lambda (x) (car x)) game) (map (lambda (x) (cdr x)) game)))\n        (guess-list (list (map (lambda (x) (car x)) guess) (map (lambda (x) (cdr x)) guess)))\n        (difference (map (lambda (x) (car x)) score-list) (map (lambda (x) (car x)) guess-list)))\n  (map (lambda (x) (car x)) difference))\n",
    "  (let ((score-list (list (map (lambda (x) (list x x)) game)))))\n  (let ((guess-list (list (map (lambda (x) (list x x)) guess)))))\n  (map (lambda (x) (abs (- (car x) (car (cdr x))))) (zip score-list guess-list))\n)\n",
    "  (let ((score (list (map (lambda (x) (list x x)) game)))))\n  (let ((guess (list (map (lambda (x) (list x x)) guess)))\n        (diff (map (lambda (x) (list (- x score) (- x guess))) guess)))\n    (map (lambda (x) (list (abs x) (abs diff))) diff)))\n",
    "  (let ((score (list (map (lambda (x) (+ x game)) game) (map (lambda (x) (- x game)) game))))\n    (let ((guess (list (map (lambda (x) (+ x guess)) game) (map (lambda (x) (- x guess)) game))))\n      (map (lambda (x) (abs (- x score) (- x guess))) game))))\n",
    "  (let ((score (list (map (lambda (x) (list x x)) game)))))\n  (let ((guess (list (map (lambda (x) (list x x)) guess))))\n    (map (lambda (x) (list (sub1 x) (sub1 score) (sub1 guess))))))\n",
    "  (let ((score (list (map (lambda (x) (car x)) game) (map (lambda (x) (cdr x)) game))))\n    (let ((guess (list (map (lambda (x) (car x)) guess) (map (lambda (x) (cdr x)) guess))))\n      (map (lambda (x) (abs (cdr x) (car x))) (zip score guess))))\n",
    "  (map (lambda (score guess)\n         (if (eq? score guess)\n           0\n           (abs (score - guess))))\n    game guess))\n",
    "  (let ((score (list (map (lambda (x) (+ x game)) game) game))\n        (guess (list (map (lambda (x) (+ x guess)) guess)))))\n  (map (lambda (x) (- x guess score)) guess))\n",
    "  (let ((score (list (map (lambda (x) (list x x)) game) (map (lambda (x) (list x x)) guess)))\n        (diff (map (lambda (x) (list x x)) game) (map (lambda (x) (list x x)) guess)))\n    (map (lambda (x) (list x (diff x score))))))\n",
    "  (let ((score (list (map (lambda (x) (list x x)) game)))))\n  (let ((guess (list (map (lambda (x) (list x x)) guess)))\n        (diff (map (lambda (x) (list (- x score) (- x guess))) guess))))\n  (list (map (lambda (x) (list x 0)) diff)))\n",
    "  (let ((score (list)))\n    (for-each (lambda (score guess)\n      (if (eq? score guess)\n        0\n        (+ (abs score - guess) (score))))\n      score))\n  game)\n",
    "  (let ((score (list (map (lambda (x) (car x)) game) (map (lambda (x) (cdr x)) game))))\n    (let ((guess (list (map (lambda (x) (car x)) guess) (map (lambda (x) (cdr x)) guess))))\n      (map (lambda (x) (abs (cdr x) (cdr (car x)))))\n    )\n  )\n)\n",
    "  (let ((score (list (map (lambda (x) (car x)) game))\n         (guess (list (map (lambda (x) (car x)) guess))))\n    (map (lambda (x) (abs (cdr x) - score (car x))))))\n",
    "  (map (lambda (score guess)\n         (if (eq? score guess) 0\n             (abs (score - guess))))\n    (zip game guess)))\n",
    "  (let ((score (list)))\n    (for-each score game (lambda (score)\n      (let ((guess (list)))\n        (for-each guess score (lambda (guess)\n          (let ((diff (abs (sub (car guess) (car score)))))\n            (setf score (cons diff score))))))))))\n",
    "  (let ((score-list (list (map (lambda (x) (list x (score x))) game) (map (lambda (x) (list x (score x))) guess)))\n         (guess-list (list (map (lambda (x) (list x (guess x))) game) (map (lambda (x) (list x (guess x))) guess)))\n         (score-length (length score-list))\n         (guess-length (length guess-list)))\n  (map (lambda (x) (abs (- (car x) (car (cdr x))))) (zip score-list guess-list)))\n)\n",
    "  (let ((score-list (list (map (lambda (x) (list x x)) game)))))\n  (let ((guess-list (list (map (lambda (x) (list x x)) guess)))\n        (difference (list (map (lambda (x) (list x x)) guess-list)) score-list)))\n  (list (map (lambda (x) (list x 0)) difference)))\n",
    "  (let ((score-list (list (map (lambda (x) (list x (score x))) game) (map (lambda (x) (list x (score x))) guess)))\n         (guess-list (list (map (lambda (x) (list x (score x))) guess)))\n         (diff-list (list (map (lambda (x) (list x (score x))) (difference score-list guess-list))))))\n",
    "  (let ((score-list (list (map (lambda (x) (car x)) game) (map (lambda (x) (cdr x)) game)))\n        (guess-list (list (map (lambda (x) (car x)) guess) (map (lambda (x) (cdr x)) guess)))\n        (diff-list (list (map (lambda (x) (car x)) (difference score-list guess-list)))))\n  (map (lambda (x) (car x)) diff-list)))\n",
    "  (let ((score-list (list (map (lambda (score) (score)) game)))))\n  (let ((guess-list (list (map (lambda (guess) (guess)) game)))))\n  (map (lambda (score guess)\n        (cond\n          ((= score guess) 0)\n          ((< score guess) (- score guess))\n          (else (abs (- score guess)))))))\n",
    "  (let ((score (list (map (lambda (x) (list x x)) game)))))\n  (let ((guess (list (map (lambda (x) (list x x)) guess)))\n        (diff (map (lambda (x) (list (- x score) (- x guess))) guess)))\n    (list (map (lambda (x) (list x 0)) diff)))\n)\n",
    "  (let ((score (list (map (lambda (x) (+ x game)) game)))))\n  (let ((guess (list (map (lambda (x) (+ x guess)) guess))))\n    (map (lambda (x) (- x score) (guess x)))))\n",
    "  (let ((score (list (map (lambda (x) (+ x game)) game) (list 0))))\n    (let ((guess (list (map (lambda (x) (+ x guess)) game) (list 0))))\n      (map (lambda (x) (abs (- x score - x guess)))))))\n",
    "  (let ((score-list (list (map (lambda (x) (score-guess x)) game) guess)))\n    (map (lambda (x) (abs (score-guess x) - score-list x)) score-list)))\n",
    "  (let ((score-list (list (map (lambda (x) (x * -1)) game) (map (lambda (x) (x * -1)) guess)))\n         (guess-list (list (map (lambda (x) (x * -1)) game) (map (lambda (x) (x * -1)) guess)))\n         (guess-list-length (length guess-list))\n         (score-list-length (length score-list)))\n  (map (lambda (x) (abs (x - (car score-list)))))\n  (map (lambda (x) (abs (x - (car guess-list)))))\n  (map (lambda (x) (abs (x - (car score-list)))))\n  (map (lambda (x) (abs (x - (car guess-list)))))\n  (map (lambda (x) (abs (x - (car score-list)))))\n  (map (lambda (x) (abs (x - (car guess-list)))))\n  (map (lambda (x) (abs (x - (car score-list)))))\n  (map (lambda (x) (abs (x - (car guess-list)))))\n  (map (lambda (x) (abs (x - (car score-list)))))\n  (map (lambda (x) (abs (x - (car guess-list)))))\n  (map (lambda (x) (abs (x - (car score-list)))))\n  (map (lambda (x) (abs (x - (car guess-list)))))\n  (map (lambda (x) (abs (x - (car score-list)))))\n  (map (lambda (x) (abs (x - (car guess-list)))))\n  (map (lambda (x) (abs (x - (car score-list)))))\n  (map (lambda (x) (abs (x - (car guess-list)))))\n  (map (lambda (x) (abs (x - (car score-list)))))\n  (map (lambda (x) (abs (x - (car guess-list)))))\n  (map (lambda (x) (abs (x - (car score-list)))))\n  (map (lambda",
    "  (let ((score (list (map (lambda (x) (car x)) game))\n         (guess (list (map (lambda (x) (car x)) guess))))\n    (map (lambda (x) (abs (cdr x) - cdr score)) guess)))\n",
    "  (let ((score (list (map (lambda (x) (+ x game)) game) (map (lambda (x) (- x game)) game))))\n    (let ((guess (list (map (lambda (x) (+ x guess)) game) (map (lambda (x) (- x guess)) game))))\n      (map (lambda (x) (abs (- x score x) (- x guess x))) score)))\n)\n",
    "  (let ((score (list (map (lambda (x) (car x)) game))\n         (guess (list (map (lambda (x) (car x)) guess))))\n    (map (lambda (x) (abs (cdr x) - (cdr score))) guess)))\n)\n",
    "  (let ((score (list (map (lambda (x) (car x)) game) (map (lambda (x) (cdr x)) game))))\n    (let ((guess (list (map (lambda (x) (car x)) guess) (map (lambda (x) (cdr x)) guess))))\n      (map (lambda (x) (abs (cdr x) (car x))) (zip score guess))))\n)\n",
    "  (map (lambda (g) (if (eq? g guess) 0 (abs (g - game)))) guess))\n",
    "  (map (lambda (score guess)\n         (if (eq? score guess) 0\n           (abs (score - guess))))\n    game guess))\n",
    "  (let ((score (list (map (lambda (x) (list x x)) game) (map (lambda (x) (list x x)) guess)))\n        (diff (map (lambda (x) (list x x)) game) (map (lambda (x) (list x x)) guess)))\n    (map (lambda (x) (list x 0)) diff)))\n",
    "  (let ((score (list (map (lambda (x) (+ x game)) game)))))\n  (let ((guess (list (map (lambda (x) (+ x guess)) game)))))\n  (map (lambda (x) (- (abs (score[x]) - (guess[x])))))\n)\n",
    "  (let ((score-list (list (map (lambda (score) (score)) game)))))\n  (let ((guess-list (list (map (lambda (guess) (guess)) game)))))\n  (map (lambda (score guess)\n        (let ((diff (abs (- score guess))))\n          (if (eq? score guess) 0 diff))))\n)\n",
    "  (let ((score (list (map (lambda (x) (car x)) game))\n         (guess (list (map (lambda (x) (car x)) guess))))\n    (map (lambda (x) (abs (cdr x) - (cdr score))) guess)))\n)\n",
    "  (let ((score (car game)))\n    (let ((guess (car guess)))\n      (let ((diff (abs (cdr guess) (cdr score))))\n        (if (eq? diff 0)\n          (list 0 0 0 0 diff diff)\n          (list diff diff diff diff diff diff)))))\n)\n",
    "  (let ((score (list (map (lambda (x) (list x x)) game) (map (lambda (x) (list x x)) guess))))\n    (map (lambda (x) (list (- (car x) (car score)) (abs (- (car x) (car score))))) guess)))\n",
    "  (let ((score (list (map (lambda (x) (+ x game)) game)))))\n  (let ((guess (list (map (lambda (x) (+ x guess)) game)))))\n  (map (lambda (x) (- x score) (- x guess)) game))\n",
    "  (let ((score (list (map (lambda (x) (list x x)) game) (map (lambda (x) (list x x)) guess)))\n        (diff (map (lambda (x) (list x x)) score) (map (lambda (x) (list x x)) guess)))\n    (map (lambda (x) (list x x)) diff)))\n",
    "  (let ((score (list (map (lambda (x) (+ x game)) game)))))\n  (let ((guess (list (map (lambda (x) (+ x guess)) game)))))\n  (map (lambda (x) (abs (- x score) (- x guess))) game)))\n",
    "  (let ((score (list (map (lambda (x) (+ x game)) game)))))\n  (let ((guess (list (map (lambda (x) (+ x guess)) game)))))\n  (map (lambda (x) (abs (- x score - x guess))))))\n",
    "  (let ((score-list (list (map (lambda (x) (list x (score x))) game) guess)))\n    (map (lambda (x) (list (map (lambda (y) (- (abs (y) (score y)))) x) (score x))) score-list)))\n",
    "  (let ((score (list)))\n    (for-each score game (lambda (score)\n      (let ((guess (list)))\n        (for-each guess score (lambda (guess)\n          (let ((diff (abs (sub (list) guess))))\n            (if (eq? diff 0) 0 (list diff))))))))))\n",
    "  (let ((score-list (list (map (lambda (x) (list x x)) game)))))\n  (let ((guess-list (list (map (lambda (x) (list x x)) guess)))))\n  (map (lambda (x) (list (map (lambda (y) (abs (y - x)))))) (zip score-list guess-list)))\n)\n",
    "  (let ((score (list (map (lambda (x) (list x x)) game)))))\n  (let ((guess (list (map (lambda (x) (list x x)) guess)))\n        (diff (map (lambda (x) (list (- x score) (- x guess))) guess)))\n    (map (lambda (x) (list x 0)) diff)))\n",
    "  (map (lambda (g) (+ (abs (- (game g) (guess g))) 0)) game))\n",
    "  (let ((score (list (map (lambda (x) (car x)) game))\n         (guess (list (map (lambda (x) (car x)) guess))))\n    (map (lambda (x) (abs (cdr x) - cdr score)) guess)))\n",
    "  (map (lambda (score guess)\n         (if (eq? score guess)\n           0\n           (abs (score - guess))))\n    game guess))\n",
    "  (let ((score (list (map (lambda (x) (list x x)) game)))))\n  (let ((guess (list (map (lambda (x) (list x x)) guess))))\n    (map (lambda (x) (list (map (lambda (y) (abs (y - x)))) x)))\n  )\n)\n",
    "  (let ((score (list (map (lambda (x) (+ x game)) game)))))\n  (let ((guess (list (map (lambda (x) (+ x guess)) game)))))\n  (map (lambda (x) (abs (- x score guess))))))\n",
    "  (let ((score (list (map (lambda (x) (list x x)) game)))))\n  (let ((guess (list (map (lambda (x) (list x x)) guess)))\n        (diff (map (lambda (x) (list (- x score) (- x guess))) guess)))\n    (list (map (lambda (x) (list x 0)) diff)))\n)\n",
    "  (let ((score (list (map (lambda (x) (car x)) game) (map (lambda (x) (cdr x)) game))))\n    (let ((guess (list (map (lambda (x) (car x)) guess) (map (lambda (x) (cdr x)) guess))))\n      (map (lambda (x) (abs (+ (car x) (car guess)))))\n    )\n  )\n)\n",
    "  (let ((score (list (map (lambda (x) (+ x game)) game) (map (lambda (x) (- x game)) game))))\n    (let ((guess (list (map (lambda (x) (+ x guess)) game) (map (lambda (x) (- x guess)) game))))\n      (map (lambda (x) (abs (- x score) (- x guess))) game))))\n",
    "  (let ((score (list (map (lambda (x) (car x)) game) (map (lambda (x) (car x)) guess)))\n         (diff (map (lambda (x) (cdr x)) score) (map (lambda (x) (cdr x)) guess)))\n    (map (lambda (x) (car x)) diff)))\n",
    "  (let ((score (car game))\n        (guess (car guess)))\n    (if (eq? score guess)\n      (list 0 0 0 0 0 0)\n      (let ((diff (abs (- score guess))))\n        (list diff diff diff diff diff diff)))))\n",
    "  (let ((score (list (map (lambda (x) (car x)) game) (map (lambda (x) (car x)) guess)))\n         (diff (map (lambda (x) (cdr x)) score) (map (lambda (x) (cdr x)) guess)))\n    (map (lambda (x) (car x)) diff)))\n",
    "  (let ((score (car game))\n        (guess (car guess)))\n    (if (eq? score guess)\n      (list 0 0 0 0 0 0)\n      (let ((diff (abs (- score guess))))\n        (list diff diff diff diff diff diff)))))\n",
    "  (let ((score (list (map (lambda (x) (list x x)) game)))))\n  (let ((guess (list (map (lambda (x) (list x x)) guess)))))\n  (map (lambda (x) (list (- (car x) (car guess)) (abs (- (car x) (car guess))))) score)\n)\n",
    "  (let ((score (list (map (lambda (x) (car x)) game))\n         (guess (list (map (lambda (x) (car x)) guess))))\n    (map (lambda (x) (abs (cdr x) - (car x))))))\n",
    "  (let ((score (list (map (lambda (x) (+ x game)) game)))))\n  (let ((guess (list (map (lambda (x) (+ x guess)) game)))))\n  (map (lambda (x) (abs (- x score) (- x guess))) game))\n",
    "  (let ((score (list (map (lambda (x) (+ x game)) game))))\n    (let ((guess (list (map (lambda (x) (+ x guess)) game))))\n      (list (map (lambda (x) (- x guess)) score) (map (lambda (x) (- x guess)) score))))))\n",
    "  (let ((score (list (map (lambda (x) (+ x game)) game)))))\n  (let ((guess (list (map (lambda (x) (+ x guess)) game)))))\n  (map (lambda (x) (abs (- x score) (- x guess))) game))\n",
    "  (let ((score (list)))\n    (for-each score game (lambda (score)\n      (let ((guess (list)))\n        (for-each guess score (lambda (guess)\n          (let ((diff (abs (list))))\n            (if (eq? (car guess) (car score))\n              (diff (cdr guess) (cdr score))\n              (diff (car guess) (car score)))))\n          (set! diff (cons 0 diff)))))\n      (set! score (cons 0 score))))))\n",
    "  (let ((score (list (map (lambda (x) (list x x)) game) (map (lambda (x) (list x x)) guess)))\n        (diff (map (lambda (x) (list x x)) game) (map (lambda (x) (list x x)) guess)))\n    (map (lambda (x) (list x (diff x score))))))\n",
    "  (let ((score (list (map (lambda (x) (list x x)) game) (map (lambda (x) (list x x)) guess))))\n    (map (lambda (x) (list (- (car x) (car score)) (abs (- (car x) (car score))))) guess)))\n",
    "  (let ((score (list (map (lambda (x) (list x x)) game)))))\n  (let ((guess (list (map (lambda (x) (list x x)) guess)))\n        (diff (map (lambda (x) (list (- x score) (- x guess))) guess))))\n  (list (map (lambda (x) (list x 0)) diff)))\n",
    "  (let ((score (list (map (lambda (x) (car x)) game))\n         (guess (list (map (lambda (x) (car x)) guess))))\n    (map (lambda (x) (abs (cdr x) - (cdr score))))))\n",
    "  (let ((score-list (list (map (lambda (x) (list x x)) game) (map (lambda (x) (list x x)) guess)))\n         (guess-list (list (map (lambda (x) (list x x)) game) (map (lambda (x) (list x x)) guess)))\n         (difference (list (map (lambda (x) (list x x)) game) (map (lambda (x) (list x x)) guess)))\n         (guess-list-length (list (map (lambda (x) (list x x)) game) (map (lambda (x) (list x x)) guess)))\n         (score-list-length (list (map (lambda (x) (list x x)) game) (map (lambda (x) (list x x)) guess))))\n  (map (lambda (x) (list (map (lambda (y) (list y y)) x) (map (lambda (y) (list y y)) x))) difference)\n  (map (lambda (x) (list (map (lambda (y) (list y y)) x) (map (lambda (y) (list y y)) x))) difference)\n  (map (lambda (x) (list (map (lambda (y) (list y y)) x) (map (lambda (y) (list y y)) x))) difference)\n  (map (lambda (x) (list (map (lambda (y) (list y y)) x) (map (lambda (y) (list y y)) x))) difference)\n  (map (lambda (x) (list (map (lambda (y) (list y y)) x) (map (lambda (y) (list y y)) x))) difference)\n  (map (lambda (x) (list (map (lambda (y) (list y y)) x) (map (lambda (y) (list y y)) x))) difference)\n  (map (lambda (x) (list (map (lambda (y) (list y y)) x) (map (lambda (y) (list y y)) x))) difference)\n  (map (lambda (x) (list (map (lambda (y) (list y y)) x) (map (lambda (y) (list y y)) x)))",
    "  (let ((score (list (map (lambda (x) (car x)) game))\n         (guess (list (map (lambda (x) (car x)) guess))))\n    (map (lambda (x) (abs (cdr x) - (car x))))))\n",
    "  (let ((score (list (map (lambda (x) (+ x game)) game) game)))\n    (let ((guess (list (map (lambda (x) (+ x guess)) guess) guess)))\n      (map (lambda (x) (- x score) (guess x)) guess))))\n",
    "  (let ((score (list (map (lambda (x) (car x)) game) (map (lambda (x) (cdr x)) game))))\n    (let ((guess (list (map (lambda (x) (car x)) guess) (map (lambda (x) (cdr x)) guess))))\n      (map (lambda (x) (abs (cdr x) (car x))) (zip score guess))))\n",
    "  (let ((score (list (map (lambda (x) (list x x)) game)))))\n  (let ((guess (list (map (lambda (x) (list x x)) guess))))\n    (map (lambda (x) (list (sub1 x) (sub1 (list (car x) (car (cdr x)))))) guess)))\n",
    "  (let ((score (list (map (lambda (x) (list x x)) game))))\n    (let ((guess (list (map (lambda (x) (list x x)) guess))))\n      (map (lambda (x) (list (sub1 x) (sub1 (list (car x) (car guess))))) score)))\n)\n",
    "  (let ((score (list (map (lambda (x) (list x x)) game) (map (lambda (x) (list x x)) guess)))\n        (diff (map (lambda (x) (list x x)) game) (map (lambda (x) (list x x)) guess)))\n    (map (lambda (x) (list x (diff x score))))))\n",
    "  (let ((score-list (list (map (lambda (x) (list x (score x))) game) guess)))\n    (map (lambda (x) (list (map (lambda (y) (- (abs (y) (score y)))) x) (score x))) score-list)))\n",
    "  (let ((score (list (map (lambda (x) (list x x)) game) (map (lambda (x) (list x x)) guess)))\n        (diff (map (lambda (x) (list x x)) game) (map (lambda (x) (list x x)) guess)))\n    (map (lambda (x) (list x 0)) diff)))\n",
    "  (let ((score (list (map (lambda (x) (car x)) game))\n         (guess (list (map (lambda (x) (car x)) guess))))\n    (map (lambda (x) (abs (cdr x) - (car x))) (zip score guess))))\n",
    "  (let ((score (list)))\n    (for-each (lambda (i) (score (list)))\n      (if (eq? (car game) (car guess))\n        (set! score (cdr score))\n        (set! score (cons (sub (car game) (car guess)) score))))))\n",
    "  (let ((score (list (map (lambda (x) (car x)) game))\n         (guess (list (map (lambda (x) (car x)) guess))))\n    (map (lambda (x) (abs (cdr x) - (cdr score))))))\n",
    "  (let ((score-list (list (map (lambda (x) (list (car game) (car x))) score) (map (lambda (x) (list (car game) (car x))) guess)))\n        (guess-list (list (map (lambda (x) (list (car game) (car x))) guess)))\n        (difference (list (map (lambda (x) (list (car game) (car x))) score) (map (lambda (x) (list (car game) (car x))) guess)))\n        (length score-list)\n        (length guess-list)))\n)\n",
    "  (let ((score (list (map (lambda (x) (+ x game)) game))))\n    (let ((guess (list (map (lambda (x) (+ x guess)) game))))\n      (map (lambda (x) (- x score) (guess x)) guess))))\n",
    "  (let ((score (list)))\n    (for-each (lambda (i) (score (list)))\n      (if (eq? (car game) (car guess))\n        (set! score (cdr score))\n        (set! score (cons (sub (car game) (car guess)) score))))\n    score))\n",
    "  (let ((score-list (list (map (lambda (x) (list x x)) game) (map (lambda (x) (list x x)) game))))\n    (let ((guess-list (list (map (lambda (x) (list x x)) guess) (map (lambda (x) (list x x)) guess))))\n      (map (lambda (x) (list (abs (- (car x) (car score-list)) (abs (- (car x) (car guess-list)))))) score-list))))\n",
    "  (let ((score (list (map (lambda (x) (+ x (game x))) game) (list 0))))\n    (let ((guess (list (map (lambda (x) (+ x (guess x))) guess))))\n      (let ((diff (list (map (lambda (x) (- x (score x)))) guess)))\n        (list (map (lambda (x) (abs x)) diff))))))\n",
    "  (let ((score (list (map (lambda (x) (car x)) game))\n         (guess (list (map (lambda (x) (car x)) guess))))\n    (map (lambda (x) (abs (cdr x) - (cdr score))))))\n",
    "  (let ((score (list (map (lambda (x) (list x x)) game)))))\n  (let ((guess (list (map (lambda (x) (list x x)) guess))))\n    (map (lambda (x) (list (- (car x) (car score)) (abs (- (car x) (car score))))) guess)))\n",
    "  (let ((score (list (map (lambda (x) (+ x game)) game))))\n    (let ((guess (list (map (lambda (x) (+ x guess)) game))))\n      (map (lambda (x) (abs (- x score x) (- x guess x)))))\n    ))\n",
    "  (let ((score (list (map (lambda (x) (car x)) game) (map (lambda (x) (cdr x)) game))))\n    (let ((guess (list (map (lambda (x) (car x)) guess) (map (lambda (x) (cdr x)) guess))))\n      (map (lambda (x) (abs (- (car x) (car guess)) (car score))) guess))))\n",
    "  (let ((score (list (map (lambda (x) (+ x game)) game)))))\n  (let ((guess (list (map (lambda (x) (+ x guess)) guess))))\n    (map (lambda (x) (- x score x)) guess)))\n)\n",
    "  (let ((score (list (map (lambda (x) (list x x)) game) (map (lambda (x) (list x x)) guess)))\n        (diff (map (lambda (x) (list (- x (car x)) (- x (cdr x)))) score)))\n    (map (lambda (x) (list (car x) (cdr x) (car diff x))) score)))\n",
    "  (let ((score-list (list (map (lambda (x) (car x)) game) (map (lambda (x) (cdr x)) game)))\n        (guess-list (list (map (lambda (x) (car x)) guess) (map (lambda (x) (cdr x)) guess)))\n        (difference (map (lambda (x) (car x)) score-list) (map (lambda (x) (car x)) guess-list)))\n  (list (map (lambda (x) (car x)) difference) (map (lambda (x) (cdr x)) difference)))\n",
    "  (let ((score-list (list (map (lambda (x) (x * -1)) game) (map (lambda (x) (x * -1)) guess)))\n         (guess-list (list (map (lambda (x) (x * -1)) guess)))\n         (difference (list (map (lambda (x) (x * -1)) game) (map (lambda (x) (x * -1)) guess)))\n         (guess-list-length (length guess-list)))\n  (list (map (lambda (x) (abs (difference (list (map (lambda (y) (y * -1)) game) (map (lambda (y) (y * -1)) guess))))) guess-list))\n)\n",
    "  (map (lambda (score guess)\n         (if (eq? score guess)\n           0\n           (abs (score - guess))))\n    game guess))\n",
    "  (let ((score (list (map (lambda (x) (car x)) game))\n         (guess (list (map (lambda (x) (car x)) guess))))\n    (map (lambda (x) (abs (cdr x) - (cdr score))))))\n",
    "  (let ((score (list (map (lambda (x) (car x)) game))\n         (guess (list (map (lambda (x) (car x)) guess))))\n    (map (lambda (x) (abs (- (car x) (car score)) - (car x) (car guess))) guess)))\n)\n",
    "  (let ((score-list (list (map (lambda (x) (list x x)) game) (map (lambda (x) (list x x)) guess)))\n         (guess-list (list (map (lambda (x) (list x x)) game) (map (lambda (x) (list x x)) guess)))\n         (difference (map (lambda (x) (list x x)) score-list) (map (lambda (x) (list x x)) guess-list)))\n  (list (map (lambda (x) (list x x)) difference))\n)\n",
    "  (let ((score (list (map (lambda (x) (+ x game)) game)))))\n  (let ((guess (list (map (lambda (x) (+ x guess)) game)))))\n  (map (lambda (x) (abs (- x score guess))))))\n",
    "  (let ((score (list)))\n    (for-each score game (lambda (score)\n      (for-each guess score (lambda (guess)\n        (if (eq? (car guess) (car score))\n          (set! score (cdr score))\n          (set! score (cons (car guess) (cdr score))))))))))\n",
    "  (let ((score (list (map (lambda (x) (list x x)) game)))))\n  (let ((guess (list (map (lambda (x) (list x x)) guess))))\n    (map (lambda (x) (list (sub1 x) (sub1 (list (car x) (car guess))))) score)))\n",
    "  (map (lambda (g)\n         (lambda (g)\n           (if (eq? g g) 0\n               (abs (+ (game g) (guess g)))))))\n  (map game guess))\n",
    "  (let ((score (list (map (lambda (x) (+ x game)) game) (map (lambda (x) (- x game)) game))))\n    (map (lambda (x) (abs (- x score x))) (zip game guess))))\n",
    "  (map (lambda (g) (if (eq? g guess) 0 (abs (g - game)))) guess))\n",
    "  (let ((score (list (map (lambda (x) (list x x)) game) (map (lambda (x) (list x x)) guess)))\n        (difference (map (lambda (x) (list x x)) game) (map (lambda (x) (list x x)) guess)))\n    (map (lambda (x) (list x (difference x score))))))\n",
    "  (map (lambda (score guess)\n         (if (eq? score guess)\n           0\n           (abs (score - guess))))\n    game guess))\n",
    "  (let ((score-list (list (map (lambda (x) (list x x)) game)))))\n  (let ((guess-list (list (map (lambda (x) (list x x)) guess)))))\n  (map (lambda (x) (abs (- score-list x - guess-list x))))\n)\n",
    "  (let ((score (list (map (lambda (x) (list x x)) game) (map (lambda (x) (list x x)) guess)))\n        (diff (map (lambda (x) (list x x)) game) (map (lambda (x) (list x x)) guess)))\n    (map (lambda (x) (list x 0)) diff)))\n",
    "  (let ((score-list (list (map (lambda (x) (score x)) game) (map (lambda (x) (score x)) guess)))\n         (guess-list (list (map (lambda (x) (guess x)) game) (map (lambda (x) (guess x)) guess)))\n         (difference (list (map (lambda (x) (- x (car score-list))) score-list)\n                      (map (lambda (x) (- x (car guess-list))) guess-list)))\n         (map (lambda (x) (if (eq? (car difference) 0) 0 (abs (car difference) (car x)))) score-list))\n  (list 0 0 0 0 0 0)))\n",
    "  (let ((score-list (list (map (lambda (x) (list x x)) game) (map (lambda (x) (list x x)) game)))\n        (guess-list (list (map (lambda (x) (list x x)) guess) (map (lambda (x) (list x x)) guess)))\n        (diff-list (list (map (lambda (x) (list x x)) score-list) (map (lambda (x) (list x x)) guess-list)))\n        (map (lambda (x) (list x x)) diff-list)))\n",
    "  (let ((score (list (map (lambda (x) (list x x)) game) (map (lambda (x) (list x x)) guess)))\n        (diff (map (lambda (x) (list x x)) game) (map (lambda (x) (list x x)) guess)))\n    (map (lambda (x) (list x 0)) diff)))\n",
    "  (map (lambda (score guess)\n        (cond\n          ((= score guess) 0)\n          ((< score guess) (abs (- score guess)))\n          ((> score guess) (abs (- score guess)))\n          (else (abs (- score guess) (abs (- guess)))))))\n  game\n  guess)\n",
    "  (let ((score (list (map (lambda (x) (+ x game)) game) (map (lambda (x) (- x game)) game))))\n    (map (lambda (x) (abs (x - guess))) score)))\n",
    "  (let ((score (list (map (lambda (x) (car x)) game) (map (lambda (x) (car x)) guess)))\n        (diff (map (lambda (x) (cdr x)) score) (map (lambda (x) (cdr x)) guess)))\n    (map (lambda (x) (car x)) diff)))\n",
    "  (let ((score-list (list (map (lambda (x) (list x x)) game) (map (lambda (x) (list x x)) guess)))\n         (guess-list (list (map (lambda (x) (list x x)) game) (map (lambda (x) (list x x)) guess)))\n         (guess-list-length (length guess-list))\n         (score-list-length (length score-list)))\n  (map (lambda (x) (list (map (lambda (y) (- (abs (y) (list y game)) (list y guess)))) x))\n  (list guess-list-length score-list-length)))\n",
    "  (let ((score (list)))\n    (for-each (lambda (score guess)\n      (if (eq? score guess)\n        0\n        (+ (abs score - guess) (abs score - guess))))\n      score))\n  (list)))\n",
    "  (let ((score (list (map (lambda (x) (car x)) game))\n         (guess (list (map (lambda (x) (car x)) guess))))\n    (map (lambda (x) (abs (cdr x) - cdr score)) guess)))\n)\n",
    "  (let ((score-list (list (map (lambda (x) (list x x)) game) (map (lambda (x) (list x x)) game))))\n    (let ((guess-list (list (map (lambda (x) (list x x)) guess) (map (lambda (x) (list x x)) guess))))\n      (map (lambda (x) (list (abs (sub (car x) (car score-list)) (sub (car x) (car guess-list)))))))\n  )\n)\n",
    "  (map (lambda (g) (if (eq? g guess) 0 (abs (g - game)))) guess))\n",
    "  (let ((score (list (map (lambda (x) (car x)) game))\n         (guess (list (map (lambda (x) (car x)) guess))))\n    (map (lambda (x) (abs (cdr x) - (cdr score))) guess)))\n)\n",
    "  (let ((score (list (map (lambda (x) (+ x game)) game) (map (lambda (x) (- x game)) game))))\n    (let ((guess (list (map (lambda (x) (+ x guess)) game) (map (lambda (x) (- x guess)) game))))\n      (map (lambda (x) (abs (- x score x) (- x guess x))) game))))\n",
    "  (map (lambda (g) (if (eq? g guess) 0 (abs (- g guess)))) game guess))\n",
    "  (let ((score (list (map (lambda (x) (car x)) game) (map (lambda (x) (cdr x)) game))))\n    (let ((guess (list (map (lambda (x) (car x)) guess) (map (lambda (x) (cdr x)) guess))))\n      (map (lambda (x) (abs (cdr x) (car x))) (zip score guess))))\n)\n",
    "  (let ((score (list (map (lambda (x) (car x)) game) (map (lambda (x) (cdr x)) game))))\n    (let ((guess (list (map (lambda (x) (car x)) guess) (map (lambda (x) (cdr x)) guess))))\n      (map (lambda (x) (abs (+ (car x) (car guess)))))\n    )\n  )\n)\n",
    "  (let ((score (list (map (lambda (x) (+ x game)) game)))))\n  (let ((guess (list (map (lambda (x) (+ x guess)) game)))))\n  (map (lambda (x) (abs (- x score guess))))))\n",
    "  (let ((score (list (map (lambda (x) (+ x game)) game) game)))\n    (let ((guess (list (map (lambda (x) (+ x guess)) guess) guess)))\n      (map (lambda (x) (- x score) (guess x)) guess))))\n",
    "  (let ((score (list (map (lambda (x) (list x x)) game)))))\n  (let ((guess (list (map (lambda (x) (list x x)) guess)))))\n  (map (lambda (x) (list (- (car x) (car guess)) (abs (- (car x) (car guess))))) score)\n)\n",
    "  (let ((score (list)))\n    (for-each (lambda (score guess)\n      (if (eq? score guess)\n        0\n        (+ (abs score - guess) (abs score - guess))))\n      score))\n  (list))\n",
    "  (let ((score (list (map (lambda (x) (list x x)) game))))\n    (let ((guess (list (map (lambda (x) (list x x)) guess))))\n      (map (lambda (x) (list (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub1 x) (sub",
    "  (let ((score (list)))\n    (for-each (lambda (score guess)\n      (if (eq? score guess)\n        0\n        (+ (abs score - guess) score))))))\n",
    "  (let ((score (list (map (lambda (x) (+ x game)) game)))))\n  (let ((guess (list (map (lambda (x) (+ x guess)) guess))))\n    (map (lambda (x) (- x score x)) guess)))\n)\n",
    "  (let ((score (list (map (lambda (x) (+ x game)) game)))))\n  (let ((guess (list (map (lambda (x) (+ x guess)) game)))))\n  (map (lambda (x) (- x score) (- x guess)) game))\n",
    "  (let ((score (list (map (lambda (x) (car x)) game))\n         (guess (list (map (lambda (x) (car x)) guess))))\n    (map (lambda (x) (abs (cdr x) - (cdr score))))))\n",
    "  (let ((score-list (list (map (lambda (x) (car x)) game) (map (lambda (x) (cdr x)) game)))\n        (guess-list (list (map (lambda (x) (car x)) guess) (map (lambda (x) (cdr x)) guess)))\n        (difference (map (lambda (x) (car x)) score-list) (map (lambda (x) (car x)) guess-list)))\n  (list (map (lambda (x) (car x)) difference))\n)\n",
    "  (map (lambda (g) (if (eq? g guess) 0 (abs (g - game)))) guess))\n",
    "  (let ((score-list (list (map (lambda (x) (score x)) game) (map (lambda (x) (score x)) guess)))\n         (guess-list (list (map (lambda (x) (guess x)) game) (map (lambda (x) (guess x)) guess)))\n         (difference (map (lambda (x) (- x (score x))) score-list) (map (lambda (x) (- x (guess x))) guess-list)))\n  (list (map (lambda (x) (abs x)) difference))\n)\n",
    "  (let ((score (list (map (lambda (x) (list x x)) game)))))\n  (let ((guess (list (map (lambda (x) (list x x)) guess)))\n        (diff (map (lambda (x) (list (- x score) (- x guess))) guess)))\n    (map (lambda (x) (list x 0)) diff)))\n",
    "  (map (lambda (g) (if (eq? g guess) 0 (abs (- g guess)))) game)\n)\n",
    "  (let ((score (list (map (lambda (x) (car x)) game))\n         (guess (list (map (lambda (x) (car x)) guess))))\n    (map (lambda (x) (abs (cdr x) - (cdr score))))))\n",
    "  (let ((score (list (map (lambda (x) (list x x)) game))))\n    (let ((guess (list (map (lambda (x) (list x x)) guess))))\n      (map (lambda (x) (list (map (lambda (y) (- (abs (y) (list (car x) (car y)))) (cdr x) (cdr y)))) guess score))))\n)\n",
    "  (let ((score-list (list (map (lambda (x) (x - game)) game) game))\n         (guess-list (list (map (lambda (x) (x - guess)) game) game)))\n    (map (lambda (x) (abs (score-list x) (guess-list x))) guess)))\n",
    "  (let ((score (list (map (lambda (x) (+ x game)) game)))))\n  (let ((guess (list (map (lambda (x) (+ x guess)) game)))))\n  (map (lambda (x) (- x score) (- x guess)) game))\n",
    "  (let ((score (list)))\n    (for-each (lambda (i) (score (list)))\n      (lambda (score)\n        (if (eq? score guess)\n          (list 0)\n          (list (abs (+ score guess)))))\n      (score)))))\n",
    "  (map (lambda (g) (if (eq? g guess) 0 (abs (g - game)))) guess))\n",
    "  (let ((score (list (map (lambda (x) (+ x (game x))) game) (list 0))))\n    (let ((guess (list (map (lambda (x) (+ x (guess x))) game) (list 0))))\n      (list (map (lambda (x) (- (score x) (guess x))))))))\n",
    "  (let ((score (list (map (lambda (x) (+ x game)) game) (map (lambda (x) (- x game)) game))))\n    (let ((guess (list (map (lambda (x) (+ x guess)) game) (map (lambda (x) (- x guess)) game))))\n      (map (lambda (x) (abs (- x score) (- x guess))) game))))\n",
    "  (map (lambda (g)\n         (cond\n           [(= (car game) (car guess)) (car (cdr game)) (car (cdr guess)) (car (cdr (cdr game))) (car (cdr (cdr guess))) (car (cdr (cdr (cdr game)))) (car (cdr (cdr (cdr guess)))) (car (cdr (cdr (cdr (cdr game))))))\n           [(< (car game) (car guess)) (-1)]\n           [(< (car game) (car (cdr guess))) (-1)]\n           [(< (car (cdr game)) (car guess)) (-1)]\n           [(< (car (cdr game)) (car (cdr guess))) (-1)]\n           [(< (car (cdr (cdr game)) (car guess)) (-1))]\n           [(< (car (cdr (cdr game)) (car (cdr guess))) (-1))]\n           [(< (car (cdr (cdr (cdr game)) (car guess)) (-1)))]\n           [(< (car (cdr (cdr (cdr game)) (car (cdr guess))) (-1)))]\n           [(< (car (cdr (cdr (cdr (cdr game)))) (car guess)) (-1))]\n           [(< (car (cdr (cdr (cdr (cdr game)))) (car (cdr guess))) (-1))]\n           [(< (car (cdr (cdr (cdr (cdr (cdr game)))) (car guess)) (-1)))]\n           [(< (car (cdr (cdr (cdr (cdr (cdr game)))) (car (cdr guess))) (-1)))]\n           [(< (car (cdr (cdr (cdr (cdr (cdr (cdr game)))) (car guess)) (-1)))]\n           [(< (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr game)))) (car (cdr guess))) (-1))))]\n           [(< (car (cdr (cdr (cdr (cdr (cdr (cdr (",
    "  (let ((score (list)))\n    (for-each (lambda (score guess)\n      (if (eq? score guess)\n        0\n        (+ (abs (- score guess)))))\n      score))\n  (list)))\n",
    "  (let ((score-list (list (map (lambda (x) (list x (game x))) game)))))\n  (let ((guess-list (list (map (lambda (x) (list x (guess x))) game)))))\n  (map (lambda (x) (abs (- (car guess-list) (car score-list) (car x)))) guess-list))\n",
    "  (let ((score (list (map (lambda (x) (+ x game)) game) (map (lambda (x) (- x game)) game))))\n    (map (lambda (x) (abs (- x score x))))))\n",
    "  (let ((score (list (map (lambda (x) (car x)) game))\n         (guess (list (map (lambda (x) (car x)) guess))))\n    (map (lambda (x) (abs (cdr x) - cdr score)) guess)))\n",
    "  (let ((score-list (list (map (lambda (x) (list x (score-list x))) game) guess)))\n    (map (lambda (x) (list (map (lambda (y) (- (abs (y) (score-list y)))) x) (score-list x))) score-list)))\n",
    "  (let ((score (list (map (lambda (x) (car x)) game) (map (lambda (x) (cdr x)) game))))\n    (let ((guess (list (map (lambda (x) (car x)) guess) (map (lambda (x) (cdr x)) guess))))\n      (map (lambda (x) (abs (- (car x) (car guess)))))\n    )\n  )\n)\n",
    "  (let ((score (list)))\n    (for-each (lambda (x) (score (list)))\n      (lambda (score)\n        (if (eq? (car game) (car guess))\n          (car score)\n          (cdr score)\n          (car score)\n          (cdr score)\n          (car score)\n          (cdr score)\n          (car score)\n          (cdr score)\n          (car score)\n          (cdr score)\n          (car score)\n          (cdr score)\n          (car score)\n          (cdr score)\n          (car score)\n          (cdr score)\n          (car score)\n          (cdr score)\n          (car score)\n          (cdr score)\n          (car score)\n          (cdr score)\n          (car score)\n          (cdr score)\n          (car score)\n          (cdr score)\n          (car score)\n          (cdr score)\n          (car score)\n          (cdr score)\n          (car score)\n          (cdr score)\n          (car score)\n          (cdr score)\n          (car score)\n          (cdr score)\n          (car score)\n          (cdr score)\n          (car score)\n          (cdr score)\n          (car score)\n          (cdr score)\n          (car score)\n          (cdr score)\n          (car score)\n          (cdr score)\n          (car score)\n          (cdr score)\n          (car score)\n          (cdr score)\n          (car score)\n          (cdr score)\n          (car score)\n          (cdr score)\n          (car score)\n          (cdr score)\n          (car score)\n          (cdr score)\n          (car score)\n          (cdr score)\n          (car score)\n          (cdr score)\n          (car score)\n          (cdr score)\n          (car score)\n          (cdr score)\n          (car score)\n          (cdr score)\n          (car score)\n          (cdr score)\n          (car score)\n          (cdr",
    "  (let ((score (list)))\n    (for-each ((i (in-range 0 (length game))))\n      (set! score (append score (list (sub (list game i) (list guess i)))))\n    (return (map (lambda (x) (abs (sub (list guess x) (list score x))))) (list)))\n  )\n)\n",
    "  (let ((score (list (map (lambda (x) (car game)) (list (map (lambda (x) (car guess)) (list (map (lambda (x) (car x)) (list (map (lambda (x) (car x)) (list (map (lambda (x) (car x)) (list (map (lambda (x) (car x)) (list (map (lambda (x) (car x)) (list (map (lambda (x) (car x)) (list (map (lambda (x) (car x)) (list (map (lambda (x) (car x)) (list (map (lambda (x) (car x)) (list (map (lambda (x) (car x)) (list (map (lambda (x) (car x)) (list (map (lambda (x) (car x)) (list (map (lambda (x) (car x)) (list (map (lambda (x) (car x)) (list (map (lambda (x) (car x)) (list (map (lambda (x) (car x)) (list (map (lambda (x) (car x)) (list (map (lambda (x) (car x)) (list (map (lambda (x) (car x)) (list (map (lambda (x) (car x)) (list (map (lambda (x) (car x)) (list (map (lambda (x) (car x)) (list (map (lambda (x) (car x)) (list (map (lambda (x) (car x)) (list (map (lambda (x) (car x)) (list (map (lambda (x) (car x)) (list (map (lambda (x) (car x)) (list (map (lambda (x) (car x)) (list (map (lambda (x) (car x)) (list (map (lambda (x) (car x)) (list (map (lambda (x) (car x)) (list (map (lambda (x) (car x)) (list (map (lambda (x) (car x)) (list (map (lambda (x) (car x)) (list (map (lambda (x) (car x)) (list (map (lambda (x) (car x)) (list (map (lambda (x) (car x))",
    "  (map (lambda (score guess)\n         (if (eq? score guess)\n           0\n           (abs (score - guess))))\n    game guess))\n",
    "  (let ((score-list (list (map (lambda (x) (list x x)) game)))))\n  (let ((guess-list (list (map (lambda (x) (list x x)) guess)))))\n  (map (lambda (x) (list (- (car x) (car guess-list)) (abs (- (car x) (car score-list))))) guess-list)\n)\n",
    "  (let ((score (list)))\n    (for-each score game (lambda (score)\n      (let ((guess (list)))\n        (for-each guess score (lambda (guess)\n          (let ((diff (abs (sub (car guess) (car score)))))\n            (setf (car guess) (car score))\n            (setf (cdr guess) (cdr score))\n            (setf diff (diff))))))))))\n",
    "  (map (lambda (g) (if (eq? g guess) 0 (abs (g - game)))) guess))\n",
    "  (let ((score-list (list (map (lambda (x) (score x)) game)))))\n  (let ((guess-list (list (map (lambda (x) (guess x)) game)))))\n  (map (lambda (x) (abs (- (car guess-list) (car score-list) (car x)))) guess-list))\n",
    "  (map (lambda (g) (if (eq? g guess) 0 (abs (g - game)))) guess))\n",
    "  (let ((score (list (map (lambda (x) (+ x game)) game) (map (lambda (x) (- x game)) game))))\n    (map (lambda (x) (abs (x - guess) - score)) guess)))\n",
    "  (let ((score (list)))\n    (for-each (lambda (i) (score (list)))\n      (lambda (score)\n        (let ((guess (list)))\n          (for-each (lambda (j) (guess (list)))\n            (lambda (guess)\n              (let ((diff (abs (list))))\n                (if (eq? (list) (list))\n                  (list 0)\n                  (list diff))))))))))\n",
    "  (map (lambda (score guess)\n        (if (eq? score guess)\n            0\n            (abs (score - guess))))\n    game guess))\n",
    "  (let ((score-list (list (map (lambda (x) (x (game x))) game)))))\n  (let ((guess-list (list (map (lambda (x) (x (guess x))) game)))))\n  (map (lambda (x) (abs (score-list x) - (guess-list x))))\n)\n",
    "  (let ((score (list (map (lambda (x) (car x)) game) (map (lambda (x) (car x)) guess)))\n         (diff (map (lambda (x) (cdr x)) score) (map (lambda (x) (cdr x)) guess)))\n    (map (lambda (x) (cdr x)) diff)))\n",
    "  (let ((score-list (list (map (lambda (x) (list (car game) (car x))) score-list)))\n         (guess-list (list (map (lambda (x) (list (car game) (car x))) guess-list)))\n         (difference (list (map (lambda (x) (list (car game) (car x))) guess-list)))\n         (difference (list (map (lambda (x) (list (car game) (car x))) score-list)))\n         (map (lambda (x) (list (car game) (car x))) difference))\n  (list (map (lambda (x) (list (car game) (car x))) difference))\n)\n",
    "  (let ((score-list (list (map (lambda (x) (list x (score x))) game) (map (lambda (x) (list x (score x))) guess)))\n         (guess-list (list (map (lambda (x) (list x (score x))) guess)))\n         (difference (list (map (lambda (x) (list x (score x))) guess)) (list (map (lambda (x) (list x (score x))) guess)))\n         (difference (list (map (lambda (x) (list x (score x))) guess)) (list (map (lambda (x) (list x (score x))) guess)))\n         (difference (list (map (lambda (x) (list x (score x))) guess)) (list (map (lambda (x) (list x (score x))) guess)))\n         (difference (list (map (lambda (x) (list x (score x))) guess)) (list (map (lambda (x) (list x (score x))) guess)))\n         (difference (list (map (lambda (x) (list x (score x))) guess)) (list (map (lambda (x) (list x (score x))) guess)))\n         (difference (list (map (lambda (x) (list x (score x))) guess)) (list (map (lambda (x) (list x (score x))) guess)))\n         (difference (list (map (lambda (x) (list x (score x))) guess)) (list (map (lambda (x) (list x (score x))) guess)))\n         (difference (list (map (lambda (x) (list x (score x))) guess)) (list (map (lambda (x) (list x (score x))) guess)))\n         (difference (list (map (lambda (x) (list x (score x))) guess)) (list (map (lambda (x) (list x (score x))) guess)))\n         (difference (list (map (lambda (x) (list x (score x))) guess)) (list (map (lambda (x) (list x (score x))) guess)))\n         (difference (list (map (lambda (x) (list x (score x))) guess)) (list (map (lambda (x) (list x (",
    "  (let ((score (list (map (lambda (x) (car x)) game) (map (lambda (x) (cdr x)) game))))\n    (let ((guess (list (map (lambda (x) (car x)) guess) (map (lambda (x) (cdr x)) guess))))\n      (map (lambda (x) (abs (cdr x) (car x)))))))\n",
    "  (map (lambda (g) (+ (abs (- game g) guess)))))\n",
    "  (let ((score-list (list (map (lambda (score) (+ score (game score))) game)))))\n  (let ((guess-list (list (map (lambda (guess) (+ guess (game guess))) game)))))\n  (map (lambda (score guess) (if (eq score guess) 0 (abs (- score guess)))) score-list guess-list))\n",
    "  (let ((score (list (map (lambda (x) (list x x)) game)))))\n  (let ((guess (list (map (lambda (x) (list x x)) guess))))\n    (map (lambda (x) (list (sub1 x) (sub1 (list (car x) (car guess))))) score)))\n",
    "  (map (lambda (g)\n         (lambda (g)\n           (if (eq? g gguess)\n               0\n               (abs (+ g (- gguess game)))))))\n  (map game guess))\n",
    "  (let ((score (list (map (lambda (x) (car x)) game) (map (lambda (x) (cdr x)) game))))\n    (let ((guess (list (map (lambda (x) (car x)) guess) (map (lambda (x) (cdr x)) guess))))\n      (map (lambda (x) (abs (- (car x) (car guess)))))\n    )\n  )\n)\n",
    "  (map (lambda (g) (if (eq? g guess) 0 (abs (g - game)))) guess))\n",
    "  (let ((score (list (map (lambda (x) (list x x)) game)))))\n  (let ((guess (list (map (lambda (x) (list x x)) guess)))\n        (diff (map (lambda (x) (list (- x (car guess)) (- x (car score)))) guess)))\n    (list (map (lambda (x) (list x 0)) diff)))\n)\n",
    "  (let ((score (list (map (lambda (x) (car x)) game) (map (lambda (x) (cdr x)) game))))\n    (let ((guess (list (map (lambda (x) (car x)) guess) (map (lambda (x) (cdr x)) guess))))\n      (map (lambda (x) (abs (cdr x) (cdr (car x)))) (zip score guess))))\n)\n",
    "  (let ((score (list (map (lambda (x) (list x x)) game) (map (lambda (x) (list x x)) guess)))\n        (difference (map (lambda (x) (list x x)) game) (map (lambda (x) (list x x)) guess)))\n    (map (lambda (x) (list x difference)) score)))\n",
    "  (let ((score (list (map (lambda (x) (list x x)) game) (map (lambda (x) (list x x)) guess)))\n        (diff (map (lambda (x) (list x x)) score) (map (lambda (x) (list x x)) guess)))\n    (map (lambda (x) (list x 0)) diff)))\n",
    "  (let ((score (list (map (lambda (x) (car x)) game))\n         (guess (list (map (lambda (x) (car x)) guess))))\n    (map (lambda (x) (abs (cdr x) - (cdr score))))))\n",
    "  (let ((score-list (list (map (lambda (x) (x * -1)) game) (map (lambda (x) (x * -1)) guess)))\n         (guess-list (list (map (lambda (x) (x * -1)) game) guess)))\n    (map (lambda (x) (abs (x - score-list[x]) - guess-list[x])) (range 0 (length score-list))))\n)\n",
    "  (map (lambda (score guess)\n         (if (eq? score guess)\n           0\n           (abs (score - guess))))\n    game guess))\n",
    "  (let ((score-list (list (map (lambda (x) (x (car game))) (cdr game)))))\n    (let ((guess-list (list (map (lambda (x) (x (car guess))) (cdr guess))))\n          (difference (map (lambda (x) (abs (cdr x) - (car x)))) (list score-list guess-list))))\n    (list (map (lambda (x) (if (eq (car x) 0) 0 (car x))) difference))))\n",
    "  (let ((score-list (list (map (lambda (x) (list x (score x))) game) guess)))\n    (map (lambda (x) (list (map (lambda (y) (- (abs (y) (score y)) (guess y)))) x)) score-list)))\n",
    "  (let ((score-list (list (map (lambda (x) (list x x)) game) (map (lambda (x) (list x x)) game))))\n    (let ((guess-list (list (map (lambda (x) (list x x)) guess) (map (lambda (x) (list x x)) guess))))\n      (map (lambda (x) (list (abs (- x (car guess-list) - (car score-list)) (car guess-list) (car score-list)))) guess))))\n",
    "  (let ((score-list (list (map (lambda (x) (list x (game x))) game)))))\n  (let ((guess-list (list (map (lambda (x) (list x (guess x))) game)))))\n  (map (lambda (x) (abs (- (car guess-list) (car score-list) (car x)))) guess-list))\n",
    "  (let ((score-list (list (map (lambda (x) (x * -1)) game) (map (lambda (x) (x * -1)) guess)))\n         (guess-list (list (map (lambda (x) (x * -1)) game) guess)))\n    (map (lambda (x) (abs (score-list x) - abs (guess-list x))) score-list)))\n",
    "  (let ((score (list (map (lambda (x) (+ x game)) game)))))\n  (let ((guess (list (map (lambda (x) (+ x guess)) game)))))\n  (map (lambda (x) (abs (- x score guess))))))\n",
    "  (map (lambda (g)\n         (cond\n           ((= (car game) (car guess)) (0))\n           ((< (car game) (car guess)) (- (car game) (car guess)))\n           (else (car game) (car guess))))\n    (cdr game)))\n",
    "  (let ((score (list (map (lambda (x) (+ x game)) game)))))\n  (let ((guess (list (map (lambda (x) (+ x guess)) guess)))))\n  (map (lambda (x) (abs (- x score (car guess)) - x score (car game)))))\n)\n",
    "  (let ((score-list (list (map (lambda (x) (car x)) game) (map (lambda (x) (cdr x)) game))))\n    (let ((guess-list (list (map (lambda (x) (car x)) guess) (map (lambda (x) (cdr x)) guess))))\n      (map (lambda (x) (abs (number? x) (number? (car guess-list x)) (number? (car score-list x)) - (car guess-list x) (car score-list x)))))))\n",
    "  (let ((score-list (list (map (lambda (x) (list x x)) game) (map (lambda (x) (list x x)) guess)))\n         (guess-list (list (map (lambda (x) (list x x)) game) (map (lambda (x) (list x x)) guess)))\n         (guess-list-length (length guess-list))\n         (score-list-length (length score-list)))\n  (map (lambda (x) (list (map (lambda (y) (abs (y - x)))) x)) (zip score-list guess-list))))\n"
  ],
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ]
}