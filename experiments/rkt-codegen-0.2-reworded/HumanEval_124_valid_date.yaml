name: HumanEval_124_valid_date
language: rkt
prompt: "#lang racket\n\n;; You have to write a function which validates a given date\
  \ string and\n;; returns #t if the date is valid otherwise #f.\n;; The date is valid\
  \ if all of the following rules are satisfied:\n;; 1. The date string is not empty.\n\
  ;; 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\
  \ And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11.\
  \ And, the number of days is not less than 1 or higher than 29 for the month 2.\n\
  ;; 3. The months should not be less than 1 or higher than 12.\n;; 4. The date should\
  \ be in the format: mm-dd-yyyy\n;; >>> (valid_date \"03-11-2000\")\n;; #t\n;; >>>\
  \ (valid_date \"15-01-2012\")\n;; #f\n;; >>> (valid_date \"04-0-2040\")\n;; #f\n\
  ;; >>> (valid_date \"06-04-2020\")\n;; #t\n;; >>> (valid_date \"06/04/2020\")\n\
  ;; #f\n(define (valid_date date)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate valid_date))\n\
  \    (check-equal? (candidate \"03-11-2000\") #t)\n    (check-equal? (candidate\
  \ \"15-01-2012\") #f)\n    (check-equal? (candidate \"04-0-2040\") #f)\n    (check-equal?\
  \ (candidate \"06-04-2020\") #t)\n    (check-equal? (candidate \"01-01-2007\") #t)\n\
  \    (check-equal? (candidate \"03-32-2011\") #f)\n    (check-equal? (candidate\
  \ \"\") #f)\n    (check-equal? (candidate \"04-31-3000\") #f)\n    (check-equal?\
  \ (candidate \"06-06-2005\") #t)\n    (check-equal? (candidate \"21-31-2000\") #f)\n\
  \    (check-equal? (candidate \"04-12-2003\") #t)\n    (check-equal? (candidate\
  \ \"04122003\") #f)\n    (check-equal? (candidate \"20030412\") #f)\n    (check-equal?\
  \ (candidate \"2003-04\") #f)\n    (check-equal? (candidate \"2003-04-12\") #f)\n\
  \    (check-equal? (candidate \"04-2003\") #f)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    ((not (string? date)) #f)\n    ((string? date)\n     \
    \ (let ((day (string-split/char date \"-\" 0)))\n        (if (string? day)\n \
    \         (cond\n            ((string-length day)\n              (let ((month\
    \ (string-split/char day \"-\" 0)))\n                (if (string? month)\n   \
    \               (cond\n                    ((string-length month)\n          \
    \            (let ((year (string-split/char month \"-\" 0)))\n               \
    \         (if (string? year)\n                          (cond\n              \
    \              ((string-length year)\n                              (if (>= (string-length\
    \ day) 2)\n                                (if (>= (string-length month) 2)\n\
    \                                  (if (>= (string-length year) 4)\n         \
    \                           (if (>= (string-length year) 2)\n                \
    \                      (if (>= (string-length year) 2)\n                     \
    \                   (if (>= (string-length year) 2)\n                        \
    \                  (if (>= (string-length year) 2)\n                         \
    \                   (if (>= (string-length year) 2)\n                        \
    \                      (if (>= (string-length year) 2)\n                     \
    \                           (if (>= (string-length year) 2)\n                \
    \                                  (if (>= (string-length year) 2)\n         \
    \                                           (if (>= (string-length year) 2)\n\
    \                                                      (if (>= (string-length\
    \ year) 2)\n                                                        (if (>= (string-length\
    \ year) 2)\n                                                          (if (>=\
    \ (string-length year) 2)\n                                                  \
    \          (if (>= (string-length year) 2)\n                                 \
    \                             (if (>= (string-length year) 2)\n              \
    \                                                  (if (>= (string-length year)\
    \ 2)\n                                                                  (if (>=\
    \ (string-length year) 2)\n                                                  \
    \                  (if (>= (string-length year) 2)\n                         \
    \                                             (if (>= (string-length year) 2)\n\
    \                                                                        (if (>=\
    \ (", "  (cond\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string", "  (cond\n    ((not (string? date)) #f)\n    ((string? date)\n\
    \      (let ((month (string->number (substring date 0 2))))\n        (let ((day\
    \ (string->number (substring date 3 2))))\n          (let ((year (string->number\
    \ (substring date 6 2))))\n            (cond\n              ((month < 1) #f)\n\
    \              ((month > 12) #f)\n              ((day < 1) #f)\n             \
    \ ((day > 31) #f)\n              ((month == 2)\n                (let ((leap (modulo\
    \ year 4)))\n                  (cond\n                    ((leap)\n          \
    \            (day > 29)\n                    (else\n                      (day\
    \ > 28)))\n                  (else #f))))\n              (else #t)))))))\n  (else\
    \ #f)))\n", "  (cond\n    ((not (string? date)) #f)\n    ((string? date)\n   \
    \   (let ((month (string->number (substring date 0 2))))\n        (let ((day (string->number\
    \ (substring date 3 2))))\n          (let ((year (string->number (substring date\
    \ 6 2))))\n            (cond\n              ((= month 1)\n                (cond\n\
    \                  ((= day 1)\n                    (= year 2000))\n          \
    \        ((= day 2)\n                    (= year 2001))\n                  ((=\
    \ day 3)\n                    (= year 2002))\n                  ((= day 4)\n \
    \                   (= year 2003))\n                  ((= day 5)\n           \
    \         (= year 2004))\n                  ((= day 6)\n                    (=\
    \ year 2005))\n                  ((= day 7)\n                    (= year 2006))\n\
    \                  ((= day 8)\n                    (= year 2007))\n          \
    \        ((= day 9)\n                    (= year 2008))\n                  ((=\
    \ day 10)\n                    (= year 2009))\n                  ((= day 11)\n\
    \                    (= year 2010))\n                  ((= day 12)\n         \
    \           (= year 2011))\n                  ((= day 13)\n                  \
    \  (= year 2012))\n                  ((= day 14)\n                    (= year\
    \ 2013))\n                  ((= day 15)\n                    (= year 2014))\n\
    \                  ((= day 16)\n                    (= year 2015))\n         \
    \         ((= day 17)\n                    (= year 2016))\n                  ((=\
    \ day 18)\n                    (= year 2017))\n                  ((= day 19)\n\
    \                    (= year 2018))\n                  ((= day 20)\n         \
    \           (= year 2019))\n                  ((= day 21)\n                  \
    \  (= year 2020))\n                  ((= day 22)\n                    (= year\
    \ 2021))\n                  ((= day 23)\n                    (= year 2022))\n\
    \                  ((= day 24)\n                    (= year 2023))\n         \
    \         ((= day 25)\n                    (= year 2024))\n                  ((=\
    \ day 26)\n                    (= year 2025))\n                  ((= day 27)\n\
    \                    (= year 2026))\n                  ((= day 28)\n         \
    \           (= year 2027))\n                  ((= day 29)\n                  \
    \  (= year 2028))\n                  ((= day 30)\n                    (= year\
    \ 2029", "  (cond\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string", "  (cond\n    ((not (string? date)) #f)\n    ((string? date)\n\
    \      (let ((day (string-split/all date \"-\")))\n        (cond\n          ((>=\
    \ (length day) 2)\n            (let ((month (string-split/all day 1)))\n     \
    \         (cond\n                ((>= (length month) 2)\n                  (let\
    \ ((year (string-split/all day 2)))\n                    (cond\n             \
    \         ((>= (length year) 4)\n                        (let ((day_of_month (string-split/all\
    \ year 2)))\n                          (cond\n                            ((>=\
    \ (length day_of_month) 2)\n                              (let ((month_of_year\
    \ (string-split/all year 3)))\n                                (cond\n       \
    \                           ((>= (length month_of_year) 2)\n                 \
    \                   (let ((day_of_week (string-split/all year 4)))\n         \
    \                             (cond\n                                        ((>=\
    \ (length day_of_week) 2)\n                                          (let ((year_of_century\
    \ (string-split/all year 5)))\n                                            (cond\n\
    \                                              ((>= (length year_of_century) 4)\n\
    \                                                (let ((year_of_decade (string-split/all\
    \ year 6)))\n                                                  (cond\n       \
    \                                             ((>= (length year_of_decade) 2)\n\
    \                                                      (let ((day_of_year (string-split/all\
    \ year 7)))\n                                                        (cond\n \
    \                                                         ((>= (length day_of_year)\
    \ 2)\n                                                           (let ((year_of_century_decade\
    \ (string-split/all year 8)))\n                                              \
    \                (cond\n                                                     \
    \           ((>= (length year_of_century_decade) 2)\n                        \
    \                                          (let ((day_of_century (string-split/all\
    \ year 9)))\n                                                                \
    \    (cond\n                                                                 \
    \     ((>= (length day_of_century) 2)\n                                      \
    \                                  (let ((year_of_century_decade", "  (cond\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string",
  "  (cond\n    ((not (string? date)) #f)\n    ((string? date)\n      (cond\n    \
    \    ((string=? date \"\") #f)\n        ((string=? date \"0\") #f)\n        ((string=?\
    \ date \"00\") #f)\n        ((string=? date \"01\") #f)\n        ((string=? date\
    \ \"02\") #f)\n        ((string=? date \"03\") #f)\n        ((string=? date \"\
    04\") #f)\n        ((string=? date \"05\") #f)\n        ((string=? date \"06\"\
    ) #f)\n        ((string=? date \"07\") #f)\n        ((string=? date \"08\") #f)\n\
    \        ((string=? date \"09\") #f)\n        ((string=? date \"10\") #f)\n  \
    \      ((string=? date \"11\") #f)\n        ((string=? date \"12\") #f)\n    \
    \    ((string=? date \"13\") #f)\n        ((string=? date \"14\") #f)\n      \
    \  ((string=? date \"15\") #f)\n        ((string=? date \"16\") #f)\n        ((string=?\
    \ date \"17\") #f)\n        ((string=? date \"18\") #f)\n        ((string=? date\
    \ \"19\") #f)\n        ((string=? date \"20\") #f)\n        ((string=? date \"\
    21\") #f)\n        ((string=? date \"22\") #f)\n        ((string=? date \"23\"\
    ) #f)\n        ((string=? date \"24\") #f)\n        ((string=? date \"25\") #f)\n\
    \        ((string=? date \"26\") #f)\n        ((string=? date \"27\") #f)\n  \
    \      ((string=? date \"28\") #f)\n        ((string=? date \"29\") #f)\n    \
    \    ((string=? date \"30\") #f)\n        ((string=? date \"31\") #f)\n      \
    \  ((string=? date \"32\") #f)\n        ((string=? date \"33\") #f)\n        ((string=?\
    \ date \"34\") #f)\n        ((string=?", "  (let* ([day (string-to-integer (substring\
    \ date 0 2))]\n         [month (string-to-integer (substring date 3 2))]\n   \
    \      [year (string-to-integer (substring date 6 4))])\n    (and\n      (>= 1\
    \ day)\n      (<= 31 (if (modulo month 2)\n                (if (modulo month 3)\n\
    \                    (if (modulo month 4)\n                        (if (modulo\
    \ month 5)\n                            (if (modulo month 6)\n               \
    \                 (if (modulo month 7)\n                                    (if\
    \ (modulo month 8)\n                                        (if (modulo month\
    \ 9)\n                                            (if (modulo month 10)\n    \
    \                                            (if (modulo month 11)\n         \
    \                                           (if (modulo month 12)\n          \
    \                                              (>= 1 day)\n                  \
    \                                      (<= 30 (if (modulo month 1)\n         \
    \                                                         (if (modulo month 2)\n\
    \                                                                      (if (modulo\
    \ month 3)\n                                                                 \
    \         (if (modulo month 4)\n                                             \
    \                                 (if (modulo month 5)\n                     \
    \                                                             (if (modulo month\
    \ 6)\n                                                                       \
    \             (if (modulo month 7)\n                                         \
    \                                               (if (modulo month 8)\n       \
    \                                                                            \
    \         (if (modulo month 9)\n                                             \
    \                                                (if (modulo month 10)\n     \
    \                                                                            \
    \               (if (modulo month 11)\n                                      \
    \                                                              (if (modulo month\
    \ 12)\n                                                                      \
    \                                  (>= 1 day)\n                              \
    \                                                                          (<=\
    \ 30))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
  "  (cond\n    ((not (string? date)) #f)\n    ((string? date)\n      (cond\n    \
    \    ((string=? date \"\") #f)\n        ((string=? date \"0\") #f)\n        ((string=?\
    \ date \"00\") #f)\n        ((string=? date \"000\") #f)\n        ((string=? date\
    \ \"0000\") #f)\n        ((string=? date \"0000-00-00\") #f)\n        ((string=?\
    \ date \"0000-00-00 00:00:00\") #f)\n        ((string=? date \"0000-00-00 00:00:00.000\"\
    ) #f)\n        ((string=? date \"0000-00-00 00:00:00.000-00:00\") #f)\n      \
    \  ((string=? date \"0000-00-00 00:00:00.000-00:00:00\") #f)\n        ((string=?\
    \ date \"0000-00-00 00:00:00.000-00:00:00.000\") #f)\n        ((string=? date\
    \ \"0000-00-00 00:00:00.000-00:00:00.000-00:00\") #f)\n        ((string=? date\
    \ \"0000-00-00 00:00:00.000-00:00:00.000-00:00:00\") #f)\n        ((string=? date\
    \ \"0000-00-00 00:00:00.000-00:00:00.000-00:00:00.000\") #f)\n        ((string=?\
    \ date \"0000-00-00 00:00:00.000-00:00:00.000-00:00:00.000-00:00\") #f)\n    \
    \    ((string=? date \"0000-00-00 00:00:00.000-00:00:00.000-00:00:00.000-00:00:00\"\
    ) #f)\n        ((string=? date \"0000-00-00 00:00:00.000-00:00:00.000-00:00:00.000-00:00:00.000\"\
    ) #f)\n        ((string=? date \"0000-00-00 00:00:", "  (cond\n    ((not (string?\
    \ date)) #f)\n    ((string? date)\n      (let ((day (string-split/all date \"\
    -\")))\n        (if (null? day) #f\n          (if (>= (length day) 2)\n      \
    \      (let ((month (string-split/all day 1)))\n              (if (>= (length\
    \ month) 2)\n                (let ((year (string-split/all day 2)))\n        \
    \          (if (>= (length year) 4)\n                    (if (>= (first month)\
    \ 1)\n                      (if (>= (first month) 3)\n                       \
    \ (if (>= (first month) 5)\n                          (if (>= (first month) 7)\n\
    \                            (if (>= (first month) 8)\n                      \
    \        (if (>= (first month) 10)\n                                (if (>= (first\
    \ month) 12)\n                                  (if (>= (first month) 4)\n   \
    \                                 (if (>= (first month) 6)\n                 \
    \                     (if (>= (first month) 9)\n                             \
    \           (if (>= (first month) 11)\n                                      \
    \    (if (>= (first month) 2)\n                                            (if\
    \ (>= (length year) 4)\n                                              (return\
    \ #t
  "  (let* ((month (string->number (first date)))\n          (day (string->number\
    \ (second date)))\n          (year (string->number (third date)))\n          (valid\
    \ (and (>= 1 month) (<= 12 month)\n                      (>= 1 day) (<= 31 day)\n\
    \                      (>= 1 year) (<= 31 year)\n                      (>= 1 month)\
    \ (<= 12 month))))\n    (cond\n      ((and (not valid) (not (string->number date)))\n\
    \       (return #f))\n      ((and (not valid) (not (string->number date)))\n \
    \      (return #f))\n      ((and (not valid) (not (string->number date)))\n  \
    \     (return #f))\n      ((and (not valid) (not (string->number date)))\n   \
    \    (return #f))\n      ((and (not valid) (not (string->number date)))\n    \
    \   (return #f))\n      ((and (not valid) (not (string->number date)))\n     \
    \  (return #f))\n      ((and (not valid) (not (string->number date)))\n      \
    \ (return #f))\n      ((and (not valid) (not (string->number date)))\n       (return\
    \ #f))\n      ((and (not valid) (not (string->number date)))\n       (return #f))\n\
    \      ((and (not valid) (not (string->number date)))\n       (return #f))\n \
    \     ((and (not valid) (not (string->number date)))\n       (return #f))\n  \
    \    ((and (not valid) (not (string->number date)))\n       (return #f))\n   \
    \   ((and (not valid) (not (string->number date)))\n       (return #f))\n    \
    \  ((and (not valid) (not (string->number date)))\n       (return #f))\n     \
    \ ((and (not valid) (not (string->number date)))\n       (return #f))\n      ((and\
    \ (not valid) (not (string->number date)))\n       (return #f))\n      ((and (not\
    \ valid) (not (string->number date)))\n       (return #f))\n      ((and (not valid)\
    \ (not (string->number date)))\n       (return #f))\n", "  (cond\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string", "  (cond\n  \
    \  [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string",
  "  (cond\n    ((not (string? date)) #f)\n    ((string? date)\n      (cond\n    \
    \    ((string-length date) == 0) #f\n        ((string-length date) > 3) #f\n \
    \       (let ((month (string->integer (substring date 0 2))))\n          (let\
    \ ((day (string->integer (substring date 3 2))))\n            (let ((year (string->integer\
    \ (substring date 6 2))))\n              (cond\n                ((month < 1) #f)\n\
    \                ((month > 12) #f)\n                ((day < 1) #f)\n         \
    \       ((day > 31) #f)\n                ((month == 2)\n                  (let\
    \ ((leap_year (year % 4 == 0)))\n                    (cond\n                 \
    \     ((day < 29) #t)\n                      ((day > 29) #f)\n               \
    \       (#f))))\n                (#t)))))))\n  ))\n)\n", "  (cond\n    ((not (string?\
    \ date)) #f)\n    ((string? date)\n      (let ((day (string-split date \"-\")))\n\
    \        (cond\n          ((>= (length day) 2)\n            (let ((month (string-split\
    \ day 1)))\n              (cond\n                ((>= (length month) 2)\n    \
    \              (let ((year (string-split day 2)))\n                    (cond\n\
    \                      ((>= (length year) 4)\n                        (let ((day_of_month\
    \ (string-split day 2 2)))\n                          (let ((month_of_year (string-split\
    \ year 2)))\n                            (cond\n                             \
    \ ((>= (length month_of_year) 2)\n                                (let ((day_of_week\
    \ (string-split year 2 3)))\n                                  (let ((year_of_century\
    \ (string-split year 2 4)))\n                                    (let ((year_of_decade\
    \ (string-split year 2 5)))\n                                      (let ((day_of_year\
    \ (string-split year 2 6)))\n                                        (cond\n \
    \                                         ((>= (length day_of_year) 4)\n     \
    \                                       (let ((hour (string-split day_of_year\
    \ 2)))\n                                              (let ((minute (string-split\
    \ day_of_year 3)))\n                                                (let ((second\
    \ (string-split day_of_year 4)))\n                                           \
    \       (let ((time_of_day (string-split hour 2)))))\n                       \
    \                         (let ((year_of_century (string-split time_of_day 2)))\n\
    \                                                  (let ((year_of_decade (string-split\
    \ time_of_day 3)))\n                                                    (let ((day_of_month\
    \ (string-split time_of_day 4)))\n                                           \
    \           (let ((month_of_year (string-split year_of_decade 2)))\n         \
    \                                               (let ((day_of_week (string-split\
    \ year_of_decade 3)))\n                                                      \
    \    (let ((year_of_century (string-split year_of_decade 4)))\n              \
    \                     ", "  (cond\n    ((not (string? date)) #f)\n    ((not (string?\
    \ (cdr date))) #f)\n    ((string? (car date))\n      (cond\n        ((string?\
    \ (car (cdr date))) #t)\n        (else\n          (cond\n            ((= (car\
    \ (cdr date)) \"01\") #t)\n            (else\n              (cond\n          \
    \      ((= (car (cdr date)) \"02\") #t)\n                (else\n             \
    \     (cond\n                    ((= (car (cdr date)) \"03\") #t)\n          \
    \          (else\n                      (cond\n                        ((= (car\
    \ (cdr date)) \"04\") #t)\n                        (else\n                   \
    \       (cond\n                            ((= (car (cdr date)) \"05\") #t)\n\
    \                            (else\n                              (cond\n    \
    \                            ((= (car (cdr date)) \"06\") #t)\n              \
    \                  (else\n                                  (cond\n          \
    \                          ((= (car (cdr date)) \"07\") #t)\n                \
    \                    (else\n                                      (cond\n    \
    \                                    ((= (car (cdr date)) \"08\") #t)\n      \
    \                                  (else\n                                   \
    \       (cond\n                                            ((= (car (cdr date))\
    \ \"09\") #t)\n                                            (else\n           \
    \                                   (cond\n                                  \
    \              ((= (car (cdr date)) \"10\") #t)\n                            \
    \                    (else\n                                                 \
    \ (cond\n                                                    ((= (car (cdr date))\
    \ \"11\") #t)\n                                                    (else\n   \
    \                                                   (cond\n                  \
    \                                      ((= (car (cdr date)) \"12\") #t)\n    \
    \                                                    (else\n                 \
    \                                         #f))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
  "  (cond\n    ((not (string? date)) #f)\n    ((string? date)\n      (let ((day (string-split/all\
    \ date \"-\")))\n        (cond\n          ((>= (length day) 2)\n            (let\
    \ ((month (string-split/all (first day) \"-\")))\n              (cond\n      \
    \          ((>= (length month) 2)\n                  (let ((year (string-split/all\
    \ (last day) \"-\")))\n                    (cond\n                      ((>= (length\
    \ year) 4)\n                        (let ((day_of_month (string-split/all (first\
    \ year) \"-\")))\n                          (cond\n                          \
    \  ((>= (length day_of_month) 2)\n                              (let ((month_of_year\
    \ (string-split/all (last year) \"-\")))\n                                (cond\n\
    \                                  ((= (length month_of_year) 2)\n           \
    \                         (let ((year_of_century (string-split/all (first month_of_year)\
    \ \"-\")))\n                                      (cond\n                    \
    \                    ((= (length year_of_century) 4)\n                       \
    \                   (let ((day_of_year (string-split/all (last month_of_year)\
    \ \"-\")))\n                                            (cond\n              \
    \                                ((= (length day_of_year) 4)\n               \
    \                                 (let ((year_of_decade (string-split/all (first\
    \ day_of_year) \"-\")))\n                                                  (cond\n\
    \                                                    ((= (length year_of_decade)\
    \ 4)\n                                                      (let ((day_of_decade\
    \ (string-split/all (last day_of_year) \"-\")))\n                            \
    \                            (cond\n                                         \
    \                 ((= (length day_of_decade) 2)\n                            \
    \                               (let ((year_of_century_decade (string-split/all\
    \ (first day_of_decade) \"-\")))\n                                           \
    \                   (cond\n                                                  \
    \              ((= (length year_of_century_decade) 4)\n                      \
    \                                            (let ((day_of", "  (let* ((month\
    \ (string->number (first date)))\n          (day (string->number (second date)))\n\
    \          (year (string->number (third date)))\n          (result (and\n    \
    \               (>= 1 month)\n                   (<= 12 month)\n             \
    \      (>= 1 day)\n                   (<= 31 day)\n                   (>= 1 year)\n\
    \                   (<= 31 year)\n                   (>= 1 day)\n            \
    \       (<= 30 day)\n                   (>= 1 day)\n                   (<= 29\
    \ day)\n                   (>= 1 month)\n                   (<= 12 month)\n  \
    \                 (>= 1 year)\n                   (<= 12 year)\n             \
    \      (= month 2)\n                   (= year 2000)))\n            (not result))\n\
    \  result)\n)\n", "  (cond\n    ((not (string? date)) #f)\n    ((= (length date)\
    \ 8) #f)\n    ((= (string-substring date 0 2) \"01\") #f)\n    ((= (string-substring\
    \ date 3 5) \"01\") #f)\n    ((= (string-substring date 6 8) \"01\") #t)\n   \
    \ ((= (string-substring date 0 2) \"02\") #f)\n    ((= (string-substring date\
    \ 3 5) \"02\") #f)\n    ((= (string-substring date 6 8) \"02\") #f)\n    ((= (string-substring\
    \ date 0 2) \"03\") #t)\n    ((= (string-substring date 3 5) \"03\") #t)\n   \
    \ ((= (string-substring date 6 8) \"03\") #t)\n    ((= (string-substring date\
    \ 0 2) \"04\") #f)\n    ((= (string-substring date 3 5) \"04\") #f)\n    ((= (string-substring\
    \ date 6 8) \"04\") #f)\n    ((= (string-substring date 0 2) \"05\") #f)\n   \
    \ ((= (string-substring date 3 5) \"05\") #f)\n    ((= (string-substring date\
    \ 6 8) \"05\") #f)\n    ((= (string-substring date 0 2) \"06\") #t)\n    ((= (string-substring\
    \ date 3 5) \"06\") #t)\n    ((= (string-substring date 6 8) \"06\") #t)\n   \
    \ ((= (string-substring date 0 2) \"07\") #f)\n    ((= (string-substring date\
    \ 3 5) \"07\") #f)\n    ((= (string-substring date 6 8) \"07\") #f)\n    ((= (string-substring\
    \ date 0 2) \"08\") #f)\n    ((= (string-substring date 3 5) \"08\") #f)\n   \
    \ ((= (string-substring date 6 8) \"08\") #f)\n    ((= (string-substring date\
    \ 0 2) \"09\") #f)\n    ((= (string-substring", "  (cond\n    [(string? date)\n\
    \      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string", "  (cond\n  \
    \  ((not (string? date)) #f)\n    ((string? date)\n      (let ((day (string-split/all\
    \ date \"-\")))\n        (cond\n          ((>= (length day) 2)\n            (let\
    \ ((month (string-split/all day 1)))\n              (cond\n                ((>=\
    \ (length month) 2)\n                  (let ((year (string-split/all day 2)))\n\
    \                    (cond\n                      ((>= (length year) 4)\n    \
    \                    (let ((day-of-month (string-split/all year 2)))\n       \
    \                   (cond\n                            ((= day-of-month \"0\"\
    )\n                              (let ((day-of-month (string-split/all year 3)))\n\
    \                                (cond\n                                  ((=\
    \ day-of-month \"0\")\n                                    (let ((day-of-month\
    \ (string-split/all year 4)))\n                                      (cond\n \
    \                                       ((= day-of-month \"0\")\n            \
    \                              (let ((day-of-month (string-split/all year 5)))\n\
    \                                            (cond\n                         \
    \                     ((= day-of-month \"0\")\n                              \
    \                  (let ((day-of-month (string-split/all year 6)))\n         \
    \                                         (cond\n                            \
    \                        ((= day-of-month \"0\")\n                           \
    \                           (let ((day-of-month (string-split/all year 7)))\n\
    \                                                        (cond\n             \
    \                                             ((= day-of-month \"0\")\n      \
    \                                                      (let ((day-of-month (string-split/all\
    \ year 8)))\n                                                              (cond\n\
    \                                                                ((= day-of-month\
    \ \"0\")\n                                                                  (let\
    \ ((day-of-month (string-split/all year 9)))\n                               \
    \                                     (cond\n                                \
    \                                      ((= day-of-month \"0\")\n             \
    \                                                           (let ((day-of-month\
    \ (string-split/all year 10)))\n                                             \
    \                             (cond\n                                        \
    \                                    ((= day-of-month \"0\")\n", "  (cond\n  \
    \  ((not (string? date)) #f)\n    ((string? date)\n      (let ((day (string-split/char\
    \ date \"-\" 0)))\n        (if (string? day)\n          (let ((month (string-split/char\
    \ day \"-\" 0)))\n            (if (string? month)\n              (let ((year (string-split/char\
    \ month \"-\" 0)))\n                (if (string? year)\n                  (if\
    \ (string? year)\n                    (if (string? year)\n                   \
    \   (if (string? year)\n                        (if (string? year)\n         \
    \                 (if (string? year)\n                            (if (string?\
    \ year)\n                              (if (string? year)\n                  \
    \              (if (string? year)\n                                  (if (string?\
    \ year)\n                                    (if (string? year)\n            \
    \                          (if (string? year)\n                              \
    \          (if (string? year)\n                                          (if (string?\
    \ year)\n                                            (if (string? year)\n    \
    \                                          (if (string? year)\n              \
    \                                  (if (string? year)\n                      \
    \                            (if (string? year)\n                            \
    \                        (if (string? year)\n                                \
    \                      (if (string? year)\n                                  \
    \                      (if (string? year)\n                                  \
    \                        (if (string? year)\n                                \
    \                            (if (string? year)\n                            \
    \                                  (if (string? year)\n                      \
    \                                          (if (string? year)\n              \
    \                                                    (if (string? year)\n    \
    \                                                                (if (string?\
    \ year)\n                                                                    \
    \  (if (string? year)\n                                                      \
    \                  (if (string? year)\n                                      \
    \                                    (if (string? year)\n                    \
    \                                                        (if (string? year)\n\
    \                                                                            \
    \  (if (string? year)\n                                                      \
    \                          (if (string? year)\n                              \
    \                                                    (if (string? year)\n    \
    \                                                                            \
    \    (if (string? year)\n                                                    \
    \                                  (if", "  (let* ((day (string->number date)))\n\
    \    (let* ((month (string->number (string->list date 2 3)))\n           (year\
    \ (string->number (string->list date 3 4))))\n      (and\n        (>= 1 (modulo\
    \ month 2))\n        (<= 12 (modulo month 12))\n        (>= 1 (modulo day 1))\n\
    \        (<= 31 (modulo day 31))\n        (>= 1 (modulo day 1))\n        (<= 30\
    \ (modulo day 30))\n        (>= 1 (modulo day 1))\n        (<= 29 (modulo day\
    \ 29))\n        (>= 1 (modulo day 1))\n        (<= 12 (modulo day 12))))))\n)\n",
  "  (let* ([date_str (string->date date)])\n    (and\n      (not (empty? date_str))\n\
    \      (let* ([month (string->number (substring date_str 0 2))]\n            \
    \ [day (string->number (substring date_str 3 2))]\n             [year (string->number\
    \ (substring date_str 6 2))])\n        (and\n          (= month 1)\n         \
    \ (= day 1)\n          (= year 2000)\n          (= (modulo month 12) 1)\n    \
    \      (= (modulo day 31) 1)\n          (= (modulo day 30) 1)\n          (= (modulo\
    \ day 29) 1)\n          (= (modulo month 12) 1)\n          (= (modulo month 2)\
    \ 1)))\n      (= (modulo day 31) 1)\n      (= (modulo day 30) 1)\n      (= (modulo\
    \ day 29) 1)\n      (= (modulo month 12) 1)\n      (= (modulo month 2) 1))))\n\
    )\n", "  (cond\n    ((not (string? date)) #f)\n    ((string? date)\n      (cond\n\
    \        ((string-length date) != 3)\n        ((string-length date) != 6)\n  \
    \      ((string-length date) != 8)\n        ((string-length date) != 10)\n   \
    \     ((string-length date) != 12)\n        ((string-length date) != 14)\n   \
    \     ((string-length date) != 16)\n        ((string-length date) != 18)\n   \
    \     ((string-length date) != 20)\n        ((string-length date) != 22)\n   \
    \     ((string-length date) != 24)\n        ((string-length date) != 26)\n   \
    \     ((string-length date) != 28)\n        ((string-length date) != 30)\n   \
    \     ((string-length date) != 32)\n        ((string-length date) != 34)\n   \
    \     ((string-length date) != 36)\n        ((string-length date) != 38)\n   \
    \     ((string-length date) != 40)\n        ((string-length date) != 42)\n   \
    \     ((string-length date) != 44)\n        ((string-length date) != 46)\n   \
    \     ((string-length date) != 48)\n        ((string-length date) != 50)\n   \
    \     ((string-length date) != 52)\n        ((string-length date) != 54)\n   \
    \     ((string-length date) != 56)\n        ((string-length date) != 58)\n   \
    \     ((string-length date) != 60)\n        ((string-length date) != 62)\n   \
    \     ((string-length date) != 64)\n        ((string-length date) != 66)\n   \
    \     ((string-length date) != 68)\n        ((string-length date) != 70)\n   \
    \     ((string-length date) != 72)\n        ((string-length date) != 74)\n   \
    \     ((string-length date) != 76)\n        ((string-length date) != 78)\n   \
    \     ((string-length date) != 80)\n        ((string-length date) != 82)\n   \
    \     ((string-length date) != 84)\n        ((string-length date) != 86)\n   \
    \     ((string-length date) != 88)\n        ((string-length date) != 90)\n   \
    \     ", "  (cond\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string", "  (cond\n    ((not (string? date)) #f)\n    ((string? date)\n\
    \      (let ((day (string-split date \"-\")))\n        (cond\n          ((= (length\
    \ day) 3)\n            (let ((month (string-split day 1)))\n              (cond\n\
    \                ((= (length month) 2)\n                  (let ((year (string-split\
    \ day 2)))\n                    (cond\n                      ((= (length year)\
    \ 4)\n                        (let ((day-of-month (string-split day 2 2)))\n \
    \                         (cond\n                            ((= (length day-of-month)\
    \ 2)\n                              (let ((month-of-year (string-split day-of-month\
    \ 2)))\n                                (cond\n                              \
    \    ((= (length month-of-year) 2)\n                                    (let ((year-of-month\
    \ (string-split day-of-month 2 2)))\n                                      (cond\n\
    \                                        ((= (length year-of-month) 4)\n     \
    \                                     (let ((day-of-year (string-split day-of-month\
    \ 2 3)))\n                                            (cond\n                \
    \                              ((= (length day-of-year) 2)\n                 \
    \                               (let ((month-of-day (string-split day-of-year\
    \ 2)))\n                                                  (cond\n            \
    \                                        ((= (length month-of-day) 2)\n      \
    \                                                (let ((year-of-day (string-split\
    \ day-of-year 2 2)))\n                                                       \
    \ (cond\n                                                          ((= (length\
    \ year-of-day) 4)\n                                                          \
    \ (let ((day-of-year (string-split day-of-year 2 3)))\n                      \
    \                                        (cond\n                             \
    \                                   ((= (length day-of-year) 2)\n            \
    \                                                      (let ((month-of-day (string-split\
    \ day-of-year 2 2)))\n                                                       \
    \             (cond\n                                                        \
    \              ((= (length month-of-day) 2)\n                                \
    \                                        (let ((year-of-day (string-split day-of-year\
    \ 2", "  (cond\n    ((not (string? date)) #f)\n    ((string? date)\n      (let\
    \ ((month (string->number (substring date 0 2))))\n        (let ((day (string->number\
    \ (substring date 3 2))))\n          (let ((year (string->number (substring date\
    \ 6 2))))\n            (cond\n              ((month < 1) #f)\n              ((month\
    \ > 12) #f)\n              ((day < 1) #f)\n              ((day > 31) #f)\n   \
    \           ((month = 2)\n                (day > 29)\n                (day < 30)\n\
    \                (year >= 2040)\n                (year < 2000)\n             \
    \   (year >= 1900)\n                (year < 1800)\n                (year >= 1600)\n\
    \                (year < 1500)\n                (year >= 1400)\n             \
    \   (year < 1300)\n                (year >= 1200)\n                (year < 1100)\n\
    \                (year >= 1000)\n                (year < 900)\n              \
    \  (year >= 800)\n                (year < 700)\n                (year >= 600)\n\
    \                (year < 500)\n                (year < 400)\n                (year\
    \ < 300)\n                (year < 200)\n                (year < 100)\n       \
    \         (year < 90)\n                (year < 80)\n                (year < 70)\n\
    \                (year < 60)\n                (year < 50)\n                (year\
    \ < 40)\n                (year < 30)\n                (year < 20)\n          \
    \      (year < 10)\n                (year < 9)\n                (year < 8)\n \
    \               (year < 7)\n                (year < 6)\n                (year\
    \ < 5)\n                (year < 4)\n                (year < 3)\n             \
    \   (year < 2)\n                (year < 1)\n                #t))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
  "  (cond\n    ((not (string? date)) #f)\n    ((string? date)\n      (let ((month\
    \ (string->number (substring date 0 2))))\n        (let ((day (string->number\
    \ (substring date 3 2))))\n          (let ((year (string->number (substring date\
    \ 6 2))))\n            (cond\n              ((month < 1) #f)\n              ((month\
    \ > 12) #f)\n              ((day < 1) #f)\n              ((day > 31) #f)\n   \
    \           ((month == 2)\n                (let ((leap_year (year % 4 == 0)))\n\
    \                  (cond\n                    ((day < 29) #t)\n              \
    \      ((day > 29) #f)\n                    (#f (format \"Invalid date: %s\" date))))))\n\
    \              (#t (format \"Invalid date: %s\" date)))))))))\n", "  (let* ((date-str\
    \ (string->list date)))\n    (if (empty? date-str)\n      #f\n      (let* ((month\
    \ (first date-str)))\n        (let* ((day (second date-str)))\n          (let*\
    \ ((year (third date-str)))\n            (if (and (integer? month) (integer? day)\
    \ (integer? year))\n              (if (and (integer? 1) (integer? 1) (integer?\
    \ 1) (integer? 12))\n                (if (and (integer? 1) (integer? 1) (integer?\
    \ 1) (integer? 31))\n                  (if (and (integer? 1) (integer? 1) (integer?\
    \ 1) (integer? 30))\n                    (if (and (integer? 1) (integer? 1) (integer?\
    \ 1) (integer? 29))\n                      (if (and (integer? 1) (integer? 1)\
    \ (integer? 1) (integer? 28))\n                        (if (and (integer? 1) (integer?\
    \ 1) (integer? 1) (integer? 27))\n                          (if (and (integer?\
    \ 1) (integer? 1) (integer? 1) (integer? 26))\n                            (if\
    \ (and (integer? 1) (integer? 1) (integer? 1) (integer? 25))\n               \
    \               (if (and (integer? 1) (integer? 1) (integer? 1) (integer? 24))\n\
    \                                (if (and (integer? 1) (integer? 1) (integer?\
    \ 1) (integer? 23))\n                                  (if (and (integer? 1) (integer?\
    \ 1) (integer? 1) (integer? 22))\n                                    (if (and\
    \ (integer? 1) (integer? 1) (integer? 1) (integer? 21))\n                    \
    \                  (if (and (integer? 1) (integer? 1) (integer? 1) (integer? 20))\n\
    \                                        (if (and (integer? 1) (integer? 1) (integer?\
    \ 1) (integer? 19))\n                                          (if (and (integer?\
    \ 1) (integer? 1) (integer? 1) (integer? 18))\n                              \
    \              (if (and (integer? 1) (integer? 1) (integer", "  (cond\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string", "  (let* ((day\
    \ (string->number date)))\n    (let* ((month (string->number (string-replace/all\
    \ date \"-\" 0))))\n      (let* ((year (string->number (string-replace/all date\
    \ \"-\" 0))))\n        (and (>= month 1) (<= month 12)\n               (>= day\
    \ 1) (<= day 31)\n               (= month (modulo month 12) 1)\n             \
    \  (= day (modulo day 30) 1)\n               (= month (modulo month 2) 1)\n  \
    \             (= day (modulo day 29) 1)\n               (= year (modulo year 1000)\
    \ 0)\n               (= year (modulo year 100) 0)\n               (= year (modulo\
    \ year 10) 0)\n               (= year (modulo year 1) 0)))\n        (and (>= month\
    \ 1) (<= month 12)\n               (>= day 1) (<= day 31)\n               (= month\
    \ (modulo month 12) 1)\n               (= day (modulo day 30) 1)\n           \
    \    (= month (modulo month 2) 1)\n               (= day (modulo day 29) 1)\n\
    \               (= year (modulo year 1000) 0)\n               (= year (modulo\
    \ year 100) 0)\n               (= year (modulo year 10) 0)\n               (=\
    \ year (modulo year 1) 0))))))\n  (and (not (empty? date))\n         (not (empty?\
    \ (string-replace/all date \"-\" 0)))\n         (not (empty? (string-replace/all\
    \ date \"-\" 0)))\n         (not (empty? (string-replace/all date \"-\" 0)))\n\
    \         (not (empty? (string-replace/all date \"-\" 0)))\n         (not (empty?\
    \ (string-replace/all date \"-\" 0)))\n         (not (empty? (string-replace/all\
    \ date \"-\" 0)))\n         (not (empty? (string-replace/all date \"-\" 0)))\n\
    \         (not (empty? (string-replace/all date \"-\" 0)))\n         (not (empty?\
    \ (string-replace/all date \"-\" 0)))\n         (not (empty? (string-replace/all\
    \ date \"-\" 0)))\n         ", "  (cond\n    ((not (string? date)) #f)\n    ((string?\
    \ date)\n      (let ((day (string-split date \"-\")))\n        (cond\n       \
    \   ((= (length day) 3)\n            (let ((month (string-split day 1)))\n   \
    \           (cond\n                ((= (length month) 2)\n                  (let\
    \ ((year (string-split day 2)))\n                    (cond\n                 \
    \     ((= (length year) 4)\n                        (= (string-to-integer month\
    \ 1) 1)\n                        (= (string-to-integer month 2) 3)\n         \
    \               (= (string-to-integer month 3) 5)\n                        (=\
    \ (string-to-integer month 4) 7)\n                        (= (string-to-integer\
    \ month 5) 8)\n                        (= (string-to-integer month 6) 10)\n  \
    \                      (= (string-to-integer month 7) 12)\n                  \
    \      (= (string-to-integer month 8) #f)\n                        (= (string-to-integer\
    \ month 9) #f)\n                        (= (string-to-integer month 10) #f)\n\
    \                        (= (string-to-integer month 11) #f)\n               \
    \         (= (string-to-integer month 12) #f)\n                        (#t))))\n\
    \                  (#f)))\n            (#f)))\n        (#f)))\n    (#f)))\n)\n",
  "  (let* ([day (string-to-integer date/1)]\n         [month (string-to-integer date/2)]\n\
    \         [year (string-to-integer date/3)]\n         [day_of_week (string-to-integer\
    \ date/4)]\n         [day_of_month (string-to-integer date/5)]\n         [month_of_year\
    \ (string-to-integer date/6)]\n         [year_of_century (string-to-integer date/7)]\n\
    \         [century (string-to-integer date/8)]\n         [century_of_era (string-to-integer\
    \ date/9)]\n         [era (string-to-integer date/10)]\n         [year_of_era\
    \ (string-to-integer date/11)]\n         [era_of_year (string-to-integer date/12)])\n\
    \    (and\n      (not (empty? date))\n      (and\n        (>= 1 day)\n       \
    \ (<= 31 day_of_month)\n        (>= 1 month)\n        (<= 12 month_of_year)\n\
    \        (>= 1 year)\n        (<= 99 year_of_century)\n        (>= 0 century)\n\
    \        (<= 99 century_of_era)\n        (>= 0 era)\n        (<= 99 year_of_era)\n\
    \        (>= 0 era_of_year)))\n  ))\n)\n", "  (cond\n    ((not (string? date))\
    \ #f)\n    ((string? date)\n      (let ((day (string-split/all date \"-\")))\n\
    \        (cond\n          ((= (length day) 3)\n            (let ((month (string-split/all\
    \ day \"-\")))\n              (cond\n                ((= (length month) 2)\n \
    \                 (let ((year (string-split/all day \"-\")))\n               \
    \     (cond\n                      ((= (length year) 4)\n                    \
    \    (let ((day_of_month (string-split/all year \"-\")))\n                   \
    \       (cond\n                            ((= (length day_of_month) 2)\n    \
    \                          (let ((month_of_year (string-split/all day_of_month\
    \ \"-\")))\n                                (cond\n                          \
    \        ((= (length month_of_year) 2)\n                                    (let\
    \ ((year_of_century (string-split/all year_of_century \"-\")))\n             \
    \                         (cond\n                                        ((= (length\
    \ year_of_century) 4)\n                                          (let ((day_of_year\
    \ (string-split/all year_of_century \"-\")))\n                               \
    \             (cond\n                                              ((= (length\
    \ day_of_year) 2)\n                                                (let ((year_of_decade\
    \ (string-split/all year_of_decade \"-\")))\n                                \
    \                  (cond\n                                                   \
    \ ((= (length year_of_decade) 4)\n                                           \
    \           (let ((day_of_decade (string-split/all year_of_decade \"-\")))\n \
    \                                                       (cond\n              \
    \                                            ((= (length day_of_decade) 2)\n \
    \                                                          (let ((year_of_century_decade\
    \ (string-split/all year_of_century_decade \"-\")))\n                        \
    \                                      (cond\n                               \
    \                                 ((= (length year_of_century_decade) 4)\n   \
    \                                                               (let ((day_of_century_decade\
    \ (string-split/all year_of_century_decade \"-\")))\n", "  (cond\n    ((not (string?\
    \ date)) #f)\n    ((string? date)\n      (let ((day (string-split/char date \"\
    -\" 0)))\n        (cond\n          ((= (length day) 3)\n            (let ((month\
    \ (string-split/char day \"-\" 1)))\n              (cond\n                ((=\
    \ (length month) 2)\n                  (let ((year (string-split/char day \"-\"\
    \ 2)))\n                    (cond\n                      ((= (length year) 4)\n\
    \                        (= (string-to-integer month) 1)\n                   \
    \     (= (string-to-integer day) 1)\n                        (= (string-to-integer\
    \ year) 2000)\n                        (= (string-to-integer year) 2012)\n   \
    \                     (= (string-to-integer year) 2020)\n                    \
    \    (= (string-to-integer year) 2020)\n                        (= (string-to-integer\
    \ year) 2020)\n                        (= (string-to-integer year) 2020)\n   \
    \                     (= (string-to-integer year) 2020)\n                    \
    \    (= (string-to-integer year) 2020)\n                        (= (string-to-integer\
    \ year) 2020)\n                        (= (string-to-integer year) 2020)\n   \
    \                     (= (string-to-integer year) 2020)\n                    \
    \    (= (string-to-integer year) 2020)\n                        (= (string-to-integer\
    \ year) 2020)\n                        (= (string-to-integer year) 2020)\n   \
    \                     (= (string-to-integer year) 2020)\n                    \
    \    (= (string-to-integer year) 2020)\n                        (= (string-to-integer\
    \ year) 2020)\n                        (= (string-to-integer year) 2020)\n   \
    \                     (= (string-to-integer year) 2020)\n                    \
    \    (= (string-to-integer year) 2020)\n                        (= (string-to-integer\
    \ year) 2020)\n                        (= (string-to-integer year) 2020)\n   \
    \                     (= (string-to-integer year) 2020)\n                    \
    \    (= (string-to-integer year) 2020)\n                        (= (string-to-integer\
    \ year) 2020)\n                        (= (string-to-integer year) 2020)\n   \
    \                     (= (", "  (cond\n    ((not (string? date)) #f)\n    ((string?\
    \ date)\n      (let ((day (string-split date \"-\")))\n        (if (string? day)\n\
    \          (cond\n            ((string-length day) 3)\n            ((string-length\
    \ day) 2)\n            ((string-length day) 1)\n            (else #f))\n     \
    \     (let ((month (string-split day \"-\")))\n            (if (string? month)\n\
    \              (cond\n                ((string-length month) 2)\n            \
    \    ((string-length month) 1)\n                (else #f))\n              (let\
    \ ((year (string-split month \"-\")))\n                (if (string? year)\n  \
    \                (cond\n                    ((string-length year) 4)\n       \
    \             ((string-length year) 2)\n                    ((string-length year)\
    \ 1)\n                    (else #f))\n                  (let ((day_of_month (string-split\
    \ year \"-\")))\n                    (if (string? day_of_month)\n            \
    \          (cond\n                        ((string-length day_of_month) 2)\n \
    \                       ((string-length day_of_month) 1)\n                   \
    \     (else #f))\n                      (let ((month_of_year (string-split day_of_month\
    \ \"-\")))\n                        (if (string? month_of_year)\n            \
    \              (cond\n                            ((string-length month_of_year)\
    \ 2)\n                            ((string-length month_of_year) 1)\n        \
    \                    (else #f))\n                          (let ((year_of_century\
    \ (string-split month_of_year \"-\")))\n                            (if (string?\
    \ year_of_century)\n                              (cond\n                    \
    \            ((string-length year_of_century) 4)\n                           \
    \     ((string-length year_of_century) 2)\n                                ((string-length\
    \ year_of_century) 1)\n                                (else #f))\n          \
    \                    (let ((day_of_year (string-split year_of_century \"-\")))\n\
    \                                (if (string? day_of_year)\n                 \
    \                 (cond\n                                    ((string-length day_of_year)\
    \ 2)\n                                    ((string-length day_of_year) 1)\n  \
    \                              ", "  (cond\n    ((not (string? date)) #f)\n  \
    \  ((string? date)\n      (let ((day (string-split/all date \"-\")))\n       \
    \ (if (string? day)\n          (cond\n            ((string? day)\n           \
    \   (let ((month (string-split/all day \"-\")))\n                (if (string?\
    \ month)\n                  (cond\n                    ((string? month)\n    \
    \                  (let ((year (string-split/all month \"-\")))\n            \
    \            (if (string? year)\n                          (cond\n           \
    \                 ((string? year)\n                              (let ((day_of_month\
    \ (string-split/all year \"-\")))\n                                (if (string?\
    \ day_of_month)\n                                  (let ((month_of_year (string-split/all\
    \ day_of_month \"-\")))\n                                    (if (string? month_of_year)\n\
    \                                      (cond\n                               \
    \         ((string? month_of_year)\n                                         \
    \ (let ((year_of_century (string-split/all month_of_year \"-\")))\n          \
    \                                  (if (string? year_of_century)\n           \
    \                                   (cond\n                                  \
    \              ((string? year_of_century)\n                                  \
    \                (let ((day_of_year (string-split/all year_of_century \"-\")))\n\
    \                                                   (if (string? day_of_year)\n\
    \                                                      (let ((year_of_decade (string-split/all\
    \ day_of_year \"-\")))\n                                                     \
    \   (if (string? year_of_decade)\n                                           \
    \               (cond\n                                                      \
    \     ((string? year_of_decade)\n                                            \
    \                (let ((day_of_decade (string-split/all year_of_decade \"-\")))\n\
    \                                                              (if (string? day_of_decade)\n\
    \                                                                (let ((year_of_century_decade\
    \ (string-split/all year_of_decade \"-\")))\n                                \
    \                                  (if (string? year_of_", "  (cond\n    ((not\
    \ (string? date)) #f)\n    ((not (string? (cdr date))) #f)\n    ((not (string?\
    \ (car date))) #f)\n    ((not (string? (cdr (car date)))) #f)\n    ((not (string?\
    \ (car (car date)))) #f)\n    ((not (string? (cdr (car (car date))))))\n    ((not\
    \ (string? (car (cdr (car date))))))\n    ((not (string? (cdr (cdr (car date))))))\n\
    \    ((not (string? (car (cdr (cdr (car date)))))))\n    ((not (string? (cdr (cdr\
    \ (cdr (car date)))))))\n    ((not (string? (car (cdr (cdr (cdr (car date))))))))\n\
    \    ((not (string? (cdr (cdr (cdr (cdr (car date))))))))\n    ((not (string?\
    \ (car (cdr (cdr (cdr (cdr (car date))))))))))\n    ((not (string? (cdr (cdr (cdr\
    \ (cdr (cdr (car date))))))))))\n    ((not (string? (car (cdr (cdr (cdr (cdr (cdr\
    \ (car date))))))))))\n    ((not (string? (cdr (cdr (cdr (cdr (cdr (cdr (car date))))))))))\n\
    \    ((not (string? (car (cdr (cdr (cdr (cdr (cdr (cdr (car date))))))))))))\n\
    \    ((not (string? (cdr (cdr (cdr (cdr (cdr (cdr (cdr (car date))))))))))))\n\
    \    ((not (string? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (car date))))))))))))))\n\
    \    ((not (string? (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (car date))))))))))))))\n\
    \    ((not (string? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (car date))))",
  "  (let* ([day (string->number date/1)]\n         [month (string->number date/2)]\n\
    \         [year (string->number date/3)])\n    (and\n      (not (empty? date))\n\
    \      (or\n        (and\n          (and\n            (<= 1 day)\n           \
    \ (<= 31 (if month = 1 3 5 7 8 10 12))\n            (>= 1 day)\n            (<=\
    \ 30 (if month = 4 6 9 11)))\n          (and\n            (<= 1 day)\n       \
    \     (<= 29 (if month = 2))\n            (>= 1 day)\n            (<= 30 (if month\
    \ = 3 4 6 9 11)))\n          (and\n            (<= 1 day)\n            (<= 12\
    \ (if month = 1 2 3 4 6 9 10 11))\n            (>= 1 day)\n            (<= 31\
    \ (if month = 5 6 7 8 10 12)))\n          (and\n            (<= 1 day)\n     \
    \       (<= 12 (if month = 4 5 6 7 8 9 10 11))\n            (>= 1 day)\n     \
    \       (<= 30 (if month = 2))))\n      (and\n        (<= 1 month)\n        (>=\
    \ 1 month)\n        (<= 12)))))\n)\n", "  (cond\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string", "  (cond\n    ((not (string?\
    \ date)) #f)\n    ((string? date)\n      (let ((month (string->number (substring\
    \ date 0 2))))\n        (let ((day (string->number (substring date 3 2))))\n \
    \         (let ((year (string->number (substring date 6 2))))\n            (cond\n\
    \              ((month < 1) #f)\n              ((month > 12) #f)\n           \
    \   ((day < 1) #f)\n              ((day > 31) #f)\n              ((month = 2)\n\
    \                (day > 29)\n                (day < 30)\n                (year\
    \ >= 2040)\n                (year < 2000)\n                (year >= 1800)\n  \
    \              (year < 1900)\n                (year >= 1600)\n               \
    \ (year < 1500)\n                (year >= 1400)\n                (year < 1300)\n\
    \                (year >= 1200)\n                (year < 1000)\n             \
    \   (year >= 900)\n                (year < 800)\n                (year >= 700)\n\
    \                (year < 600)\n                (year >= 500)\n               \
    \ (year < 400)\n                (year >= 300)\n                (year < 200)\n\
    \                (year >= 100)\n                (year < 90)\n                (year\
    \ < 80)\n                (year < 70)\n                (year < 60)\n          \
    \      (year < 50)\n                (year < 40)\n                (year < 30)\n\
    \                (year < 20)\n                (year < 10)\n                (year\
    \ < 9)\n                (year < 8)\n                (year < 7)\n             \
    \   (year < 6)\n                (year < 5)\n                (year < 4)\n     \
    \           (year < 3)\n                (year < 2)\n                (year < 1)\n\
    \                #t))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
  "  (cond\n    ((not (string? date)) #f)\n    ((not (string? (first date))) #f)\n\
    \    ((not (string? (second date))) #f)\n    ((not (string? (third date))) #f)\n\
    \    ((not (string? (fourth date))) #f)\n    ((not (string? (fifth date))) #f)\n\
    \    ((not (string? (sixth date))) #f)\n    ((not (string? (seventh date))) #f)\n\
    \    ((not (string? (eighth date))) #f)\n    ((not (string? (ninth date))) #f)\n\
    \    ((not (string? (tenth date))) #f)\n    ((not (string? (eleventh date))) #f)\n\
    \    ((not (string? (twelfth date))) #f)\n    ((not (string? (thirteenth date)))\
    \ #f)\n    ((not (string? (fourteenth date))) #f)\n    ((not (string? (fifteenth\
    \ date))) #f)\n    ((not (string? (sixteenth date))) #f)\n    ((not (string? (seventeenth\
    \ date))) #f)\n    ((not (string? (eighteenth date))) #f)\n    ((not (string?\
    \ (nineteenth date))) #f)\n    ((not (string? (twentieth date))) #f)\n    ((not\
    \ (string? (twenty-first date))) #f)\n    ((not (string? (twenty-second date)))\
    \ #f)\n    ((not (string? (twenty-third date))) #f)\n    ((not (string? (twenty-fourth\
    \ date))) #f)\n    ((not (string? (twenty-fifth date))) #f)\n    ((not (string?\
    \ (twenty-sixth date))) #f)\n    ((not (string? (twenty-seventh date))) #f)\n\
    \    ((not (string? (twenty-eighth date))) #f)\n    ((not (string? (twenty-ninth\
    \ date))) #f)\n    ((not (string? (thirtieth date))) #f)\n    ((not (string? (thirty-first\
    \ date))) #f)\n    ((not (string? (th", "  (cond\n    ((not (string? date)) #f)\n\
    \    ((not (string? (cdr date))) #f)\n    ((string? (car date))\n      (cond\n\
    \        ((string? (car (cdr date))) #f)\n        (\n          (and\n        \
    \    (string? (car (cdr (cdr date))))\n            (string? (car (cdr (cdr (cdr\
    \ date))))))\n          (\n            (and\n              (string? (car (cdr\
    \ (cdr (cdr (cdr date)))))))\n            (\n              (and\n            \
    \    (string? (car (cdr (cdr (cdr (cdr (cdr date))))))))\n              (\n  \
    \              (and\n                  (string? (car (cdr (cdr (cdr (cdr (cdr\
    \ (cdr date))))))))\n                  (string? (car (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr date))))))))))\n                (\n                  (and\n      \
    \              (string? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr date)))))))))))\n\
    \                    (string? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr date))))))))))))))\n                (\n                  (and\n  \
    \                  (string? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr date))))))))))))))))))))\n\
    \                    (string? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr", "  (cond\n   \
    \ ((not (string? date)) #f)\n    ((string? date)\n      (let ((day (string-split/all\
    \ date \"-\")))\n        (cond\n          ((= (length day) 3)\n            (let\
    \ ((month (string-split/all day \"-\")))\n              (cond\n              \
    \  ((= (length month) 2)\n                  (let ((year (string-split/all day\
    \ \"-\")))\n                    (cond\n                      ((= (length year)\
    \ 4)\n                        (let ((day-of-month (string-split/all year \"-\"\
    )))\n                          (cond\n                            ((= (length\
    \ day-of-month) 2)\n                              (let ((month-of-year (string-split/all\
    \ day-of-month \"-\")))\n                                (cond\n             \
    \                     ((= (length month-of-year) 2)\n                        \
    \            (let ((year-of-month (string-split/all month-of-year \"-\")))\n \
    \                                     (cond\n                                \
    \        ((= (length year-of-month) 4)\n                                     \
    \     (let ((day-of-year (string-split/all year-of-month \"-\")))\n          \
    \                                  (cond\n                                   \
    \           ((= (length day-of-year) 2)\n                                    \
    \            (let ((month-of-day (string-split/all day-of-year \"-\")))\n    \
    \                                              (cond\n                       \
    \                             ((= (length month-of-day) 2)\n                 \
    \                                     (let ((year-of-day (string-split/all month-of-day\
    \ \"-\")))\n                                                        (cond\n  \
    \                                                        ((= (length year-of-day)\
    \ 4)\n                                                           (let ((day-of-year\
    \ (string-split/all year-of-day \"-\")))\n                                   \
    \                           (cond\n                                          \
    \                      ((= (length day-of-year) 2)\n                         \
    \                                         (let ((month-of-day (string-split/all\
    \ day-of-year \"-\")))\n                                                     \
    \               (cond\n                                                      \
    \                ((= (length month-of-day", "  (cond\n    ((not (string? date))\
    \ #f)\n    ((= (length date) 0) #f)\n    ((>= (string-length date) 8) #f)\n  \
    \  ((<= (string-length date) 12)\n      (let ((month (string->number (substring\
    \ date 0 2))))\n        (cond\n          ((<= month 1) #f)\n          ((>= month\
    \ 12) #f)\n          ((<= (month-of-year date) 1) #f)\n          ((>= (month-of-year\
    \ date) 12) #f)\n          (let ((day (string->number (substring date 3 4))))\n\
    \            (cond\n              ((<= day 1) #f)\n              ((>= day 31)\
    \ #f)\n              ((<= (day-of-month date) 1) #f)\n              ((>= (day-of-month\
    \ date) 31) #f)\n              ((<= (day-of-month date) 29) #f)\n            \
    \  ((>= (day-of-month date) 30) #t)\n              (#t))))))))))\n  (#t)))\n",
  "  (cond\n    ((not (string? date)) #f)\n    ((string? date)\n      (let ((month\
    \ (string->number date/1)))\n        (let ((day (string->number date/2)))\n  \
    \        (let ((year (string->number date/3)))\n            (cond\n          \
    \    ((month < 1) #f)\n              ((month > 12) #f)\n              ((day <\
    \ 1) #f)\n              ((day > 31) #f)\n              ((month == 2)\n       \
    \         (let ((leap_year (year % 4 == 0)))\n                  (let ((days_in_month\
    \ (leap_year ? 29 : 28)))\n                    (cond\n                      ((day\
    \ < 1) #f)\n                      ((day > days_in_month) #f)\n               \
    \       (t #t))))\n                (t #f))\n              (t #t)))))))\n  (t #t)))\n",
  "  (let* ((month (string->number (first date)))\n          (day (string->number\
    \ (second date)))\n          (year (string->number (third date)))\n          (valid\
    \ (and\n                  (not (empty? date))\n                  (and\n      \
    \              (month >= 1)\n                    (month <= 12)\n             \
    \       (day >= 1)\n                    (day <= 31)\n                    (month\
    \ >= 1)\n                    (month <= 12)\n                    (day >= 1)\n \
    \                   (day <= 31)\n                    (month >= 1)\n          \
    \          (month <= 12)\n                    (day >= 1)\n                   \
    \ (day <= 30)\n                    (month >= 1)\n                    (month <=\
    \ 12)\n                    (day >= 1)\n                    (day <= 29)\n     \
    \             )\n                  (month >= 1)\n                  (month <= 12)\n\
    \                  (day >= 1)\n                  (day <= 31)\n               \
    \   (year >= 1900)\n                  (year <= 2100)\n                )))\n  \
    \  (if valid\n      (return #t)\n      (else\n        (format t \"Invalid date:\
    \ ~a\" date)\n        (return #f))))\n)\n", "  (cond\n    ((not (string? date))\
    \ #f)\n    ((empty? date) #f)\n    ((= (length date) 8) #f)\n    ((<= (string-to-integer\
    \ date #\"-\" #\"0\") 2) #f)\n    ((<= (string-to-integer date #\"-\" #\"1\")\
    \ 12) #f)\n    ((<= (string-to-integer date #\"-\" #\"2\") 29) #f)\n    ((<= (string-to-integer\
    \ date #\"-\" #\"3\") 31) #f)\n    ((<= (string-to-integer date #\"-\" #\"4\"\
    ) 30) #f)\n    ((<= (string-to-integer date #\"-\" #\"5\") 31) #f)\n    ((<= (string-to-integer\
    \ date #\"-\" #\"6\") 30) #f)\n    ((<= (string-to-integer date #\"-\" #\"7\"\
    ) 31) #f)\n    ((<= (string-to-integer date #\"-\" #\"8\") 30) #f)\n    ((<= (string-to-integer\
    \ date #\"-\" #\"9\") 31) #f)\n    ((<= (string-to-integer date #\"-\" #\"0\"\
    ) 12) #f)\n    ((>= (string-to-integer date #\"-\" #\"1\") 1) #f)\n    ((>= (string-to-integer\
    \ date #\"-\" #\"2\") 1) #f)\n    ((>= (string-to-integer date #\"-\" #\"3\")\
    \ 1) #f)\n    ((>= (string-to-integer date #\"-\" #\"4\") 1) #f)\n    ((>= (string-to-integer\
    \ date #\"-\" #\"5\") 1) #f)\n    ((>= (string-to-integer date #\"-\" #\"6\")\
    \ 1) #f)\n    ((>= (string-to-integer date #\"-\" #\"7\") 1) #f)\n    ((>= (string-to-integer\
    \ date #\"-\" #\"8\") 1) #f)\n    ((>= (string-to-integer date #\"-\" #\"9", " \
    \ (cond\n    ((not (string? date)) #f)\n    ((empty? date) #f)\n    (((string-length\
    \ date) != 6) #f)\n    (((string-length date) != 8) #f)\n    (((string-length\
    \ date) != 10) #f)\n    (((string-length date) != 12) #f)\n    (((string-length\
    \ date) != 14) #f)\n    (((string-length date) != 16) #f)\n    (((string-length\
    \ date) != 18) #f)\n    (((string-length date) != 20) #f)\n    (((string-length\
    \ date) != 22) #f)\n    (((string-length date) != 24) #f)\n    (((string-length\
    \ date) != 26) #f)\n    (((string-length date) != 28) #f)\n    (((string-length\
    \ date) != 30) #f)\n    (((string-length date) != 32) #f)\n    (((string-length\
    \ date) != 34) #f)\n    (((string-length date) != 36) #f)\n    (((string-length\
    \ date) != 38) #f)\n    (((string-length date) != 40) #f)\n    (((string-length\
    \ date) != 42) #f)\n    (((string-length date) != 44) #f)\n    (((string-length\
    \ date) != 46) #f)\n    (((string-length date) != 48) #f)\n    (((string-length\
    \ date) != 50) #f)\n    (((string-length date) != 52) #f)\n    (((string-length\
    \ date) != 54) #f)\n    (((string-length date) != 56) #f)\n    (((string-length\
    \ date) != 58) #f)\n    (((string-length date) != 60) #f)\n    (((string-length\
    \ date) != 62) #f)\n    (((string-length date) != 64) #f)\n    (((string-length\
    \ date) != 66) #f)\n    (((string-length date) != 68) #f)\n    (((string-length",
  "  (let* ([month (string->number (string-split/char date \"-\" 0))]\n         [day\
    \ (string->number (string-split/char date \"-\" 1))]\n         [year (string->number\
    \ (string-split/char date \"-\" 2))])\n    (and\n      (>= 1 month)\n      (<=\
    \ 12 month)\n      (>= 1 day)\n      (<= 31 day)\n      (>= 1 year)\n      (<=\
    \ 31 year)\n      (>= 1 day)\n      (<= 30 day)\n      (>= 1 day)\n      (<= 29\
    \ day)\n      (= month 1)\n      (= month 3)\n      (= month 5)\n      (= month\
    \ 7)\n      (= month 8)\n      (= month 10)\n      (= month 12)\n      (= day\
    \ 1)\n      (= day 4)\n      (= day 6)\n      (= day 9)\n      (= day 11)\n  \
    \    (= day 2))))\n)\n", "  (cond\n    ((not (string? date)) #f)\n    ((empty?\
    \ date) #f)\n    (((string-length date) != 6) #f)\n    (((string-length date)\
    \ != 8) #f)\n    (((string-length date) != 10) #f)\n    (((string-length date)\
    \ != 12) #f)\n    (((string-length date) != 14) #f)\n    (((string-length date)\
    \ != 16) #f)\n    (((string-length date) != 18) #f)\n    (((string-length date)\
    \ != 20) #f)\n    (((string-length date) != 22) #f)\n    (((string-length date)\
    \ != 24) #f)\n    (((string-length date) != 26) #f)\n    (((string-length date)\
    \ != 28) #f)\n    (((string-length date) != 30) #f)\n    (((string-length date)\
    \ != 32) #f)\n    (((string-length date) != 34) #f)\n    (((string-length date)\
    \ != 36) #f)\n    (((string-length date) != 38) #f)\n    (((string-length date)\
    \ != 40) #f)\n    (((string-length date) != 42) #f)\n    (((string-length date)\
    \ != 44) #f)\n    (((string-length date) != 46) #f)\n    (((string-length date)\
    \ != 48) #f)\n    (((string-length date) != 50) #f)\n    (((string-length date)\
    \ != 52) #f)\n    (((string-length date) != 54) #f)\n    (((string-length date)\
    \ != 56) #f)\n    (((string-length date) != 58) #f)\n    (((string-length date)\
    \ != 60) #f)\n    (((string-length date) != 62) #f)\n    (((string-length date)\
    \ != 64) #f)\n    (((string-length date) != 66) #f)\n    (((string-length date)\
    \ != 68) #f)\n    (((string-length", "  (cond\n    ((not (string? date)) #f)\n\
    \    ((string? date)\n      (let ((day (string-split/all date \"-\")))\n     \
    \   (cond\n          ((>= (length day) 2)\n            (let ((month (string-split/all\
    \ day 1)))\n              (cond\n                ((>= (length month) 2)\n    \
    \              (let ((year (string-split/all day 2)))\n                    (cond\n\
    \                      ((>= (length year) 4)\n                        (>= (first\
    \ month) 1)\n                        (<= (first month) 12)\n                 \
    \       (>= (first day) 1)\n                        (<= (first day) 31)\n    \
    \                    (>= (second month) 1)\n                        (<= (second\
    \ month) 12)\n                        (>= (second day) 1)\n                  \
    \      (<= (second day) 30)\n                        (>= (third month) 1)\n  \
    \                      (<= (third month) 12)\n                        (>= (third\
    \ day) 1)\n                        (<= (third day) 29)\n                     \
    \   (>= (forth month) 1)\n                        (<= (forth month) 12)\n    \
    \                    (>= (forth day) 1)\n                        (<= (forth day)\
    \ 30)\n                        (>= (fifth month) 1)\n                        (<=\
    \ (fifth month) 12)\n                        (>= (fifth day) 1)\n            \
    \            (<= (fifth day) 30)\n                        (>= (sixth month) 1)\n\
    \                        (<= (sixth month) 12)\n                        (>= (sixth\
    \ day) 1)\n                        (<= (sixth day) 30)\n                     \
    \   (>= (seventh month) 1)\n                        (<= (seventh month) 12)\n\
    \                        (>= (seventh day) 1)\n                        (<= (seventh\
    \ day) 30)\n                        (>= (eighth month) 1)\n                  \
    \      (<= (eighth month) 12)\n                        (>= (eighth day) 1)\n \
    \                       (<= (eighth day) 30)\n                        (>= (ninth\
    \ month) 1)\n                        (<= (ninth month) 12)\n                 \
    \       (>= (ninth day) 1", "  (cond\n    ((not (string? date)) #f)\n    ((string?\
    \ date)\n      (let ((day (string-split/char date \"-\" 0 2)))\n        (cond\n\
    \          ((= (length day) 3)\n            (let ((month (string-split/char day\
    \ \"-\" 0 1)))\n              (cond\n                ((= (length month) 2)\n \
    \                 (let ((year (string-split/char day \"-\" 0 3)))\n          \
    \          (cond\n                      ((= (length year) 4)\n               \
    \         (let ((year (string-split/char year \"/\" 0 2)))\n                 \
    \         (cond\n                            ((= (length year) 2)\n          \
    \                    (let ((year (string-split/char year \"/\" 0 1)))\n      \
    \                          (cond\n                                  ((= (length\
    \ year) 1)\n                                    (let ((year (string-split/char\
    \ year \"/\" 0 0)))\n                                      (cond\n           \
    \                             ((= (length year) 0)\n                         \
    \                 (let ((year (string-split/char day \"-\" 0 0)))\n          \
    \                                  (cond\n                                   \
    \           ((= (length year) 0)\n                                           \
    \     (let ((year (string-split/char day \"-\" 0 0)))\n                      \
    \                            (cond\n                                         \
    \           ((= (length year) 0)\n                                           \
    \           (let ((year (string-split/char day \"-\" 0 0)))\n                \
    \                                        (cond\n                             \
    \                             ((= (length year) 0)\n                         \
    \                                  (let ((year (string-split/char day \"-\" 0\
    \ 0)))\n                                                              (cond\n\
    \                                                                ((= (length year)\
    \ 0)\n                                                                  (let ((year\
    \ (string-split/char day \"-\" 0 0)))\n                                      \
    \                              (cond\n                                       \
    \                               ((= (length year) 0)\n                       \
    \                                                 (let ((year (string-split/char\
    \ day \"-\" 0 0)))\n                                                         \
    \                 (cond\n                                                    \
    \                        ((= (length year) 0)\n                              \
    \                                                (let ((year (string-split/char\
    \ day \"-\" 0 0)))\n                               ", "  (cond\n    ((not (string?\
    \ date)) #f)\n    ((empty? date) #f)\n    ((= (length date) 8) #f)\n    ((>= (string-to-integer\
    \ date) 1) #f)\n    ((<= (string-to-integer date) 31) #f)\n    ((>= (string-to-integer\
    \ date) 1) #f)\n    ((<= (string-to-integer date) 30) #f)\n    ((>= (string-to-integer\
    \ date) 1) #f)\n    ((<= (string-to-integer date) 29) #f)\n    ((>= (string-to-integer\
    \ date) 1) #f)\n    ((<= (string-to-integer date) 12) #f)\n    ((>= (string-to-integer\
    \ date) 1) #f)\n    ((<= (string-to-integer date) 12) #f)\n    ((>= (string-to-integer\
    \ date) 1) #f)\n    ((<= (string-to-integer date) 12) #f)\n    ((>= (string-to-integer\
    \ date) 1) #f)\n    ((<= (string-to-integer date) 12) #f)\n    ((>= (string-to-integer\
    \ date) 1) #f)\n    ((<= (string-to-integer date) 12) #f)\n    ((>= (string-to-integer\
    \ date) 1) #f)\n    ((<= (string-to-integer date) 12) #f)\n    ((>= (string-to-integer\
    \ date) 1) #f)\n    ((<= (string-to-integer date) 12) #f)\n    ((>= (string-to-integer\
    \ date) 1) #f)\n    ((<= (string-to-integer date) 12) #f)\n    ((>= (string-to-integer\
    \ date) 1) #f)\n    ((<= (string-to-integer date) 12) #f)\n    ((>= (string-to-integer\
    \ date) 1) #f)\n    ((<= (string-to-integer date) 12) #f)\n    ((>= (", "  (cond\n\
    \    ((not (string? date)) #f)\n    ((empty? date) #f)\n    (((string-length date)\
    \ != 6) #f)\n    (((string-length date) != 8) #f)\n    (((string-length date)\
    \ != 10) #f)\n    (((string-length date) != 12) #f)\n    (((string-length date)\
    \ != 14) #f)\n    (((string-length date) != 16) #f)\n    (((string-length date)\
    \ != 18) #f)\n    (((string-length date) != 20) #f)\n    (((string-length date)\
    \ != 22) #f)\n    (((string-length date) != 24) #f)\n    (((string-length date)\
    \ != 26) #f)\n    (((string-length date) != 28) #f)\n    (((string-length date)\
    \ != 30) #f)\n    (((string-length date) != 32) #f)\n    (((string-length date)\
    \ != 34) #f)\n    (((string-length date) != 36) #f)\n    (((string-length date)\
    \ != 38) #f)\n    (((string-length date) != 40) #f)\n    (((string-length date)\
    \ != 42) #f)\n    (((string-length date) != 44) #f)\n    (((string-length date)\
    \ != 46) #f)\n    (((string-length date) != 48) #f)\n    (((string-length date)\
    \ != 50) #f)\n    (((string-length date) != 52) #f)\n    (((string-length date)\
    \ != 54) #f)\n    (((string-length date) != 56) #f)\n    (((string-length date)\
    \ != 58) #f)\n    (((string-length date) != 60) #f)\n    (((string-length date)\
    \ != 62) #f)\n    (((string-length date) != 64) #f)\n    (((string-length date)\
    \ != 66) #f)\n    (((string-length date) != 68) #f)\n    (((string-length", " \
    \ (cond\n    ((not (string? date)) #f)\n    ((not (string? (first date))) #f)\n\
    \    ((not (string? (second date))) #f)\n    ((not (string? (third date))) #f)\n\
    \    ((not (string? (fourth date))) #f)\n    ((not (string? (fifth date))) #f)\n\
    \    ((not (string? (sixth date))) #f)\n    ((not (string? (seventh date))) #f)\n\
    \    ((not (string? (eighth date))) #f)\n    ((not (string? (ninth date))) #f)\n\
    \    ((not (string? (tenth date))) #f)\n    ((not (string? (eleventh date))) #f)\n\
    \    ((not (string? (twelfth date))) #f)\n    ((not (string? (thirteenth date)))\
    \ #f)\n    ((not (string? (fourteenth date))) #f)\n    ((not (string? (fifteenth\
    \ date))) #f)\n    ((not (string? (sixteenth date))) #f)\n    ((not (string? (seventeenth\
    \ date))) #f)\n    ((not (string? (eighteenth date))) #f)\n    ((not (string?\
    \ (nineteenth date))) #f)\n    ((not (string? (twentieth date))) #f)\n    ((not\
    \ (string? (twenty-first date))) #f)\n    ((not (string? (twenty-second date)))\
    \ #f)\n    ((not (string? (twenty-third date))) #f)\n    ((not (string? (twenty-fourth\
    \ date))) #f)\n    ((not (string? (twenty-fifth date))) #f)\n    ((not (string?\
    \ (twenty-sixth date))) #f)\n    ((not (string? (twenty-seventh date))) #f)\n\
    \    ((not (string? (twenty-eighth date))) #f)\n    ((not (string? (twenty-ninth\
    \ date))) #f)\n    ((not (string? (thirtieth date))) #f)\n    ((not (string? (thirty-first\
    \ date))) #f)\n    ((not (string? (th", "  (cond\n    ((not (string? date)) #f)\n\
    \    ((string? date)\n      (let ((day (string-split/all date \"-\")))\n     \
    \   (cond\n          ((>= (length day) 2)\n            (let ((month (string-split/all\
    \ day 1)))\n              (cond\n                ((>= (length month) 2)\n    \
    \              (let ((year (string-split/all day 2)))\n                    (cond\n\
    \                      ((>= (length year) 4)\n                        (let ((day_of_month\
    \ (string-split/all year 2)))\n                          (cond\n             \
    \               ((>= (length day_of_month) 2)\n                              (let\
    \ ((month_of_year (string-split/all day_of_month 2)))\n                      \
    \          (cond\n                                  ((= (length month_of_year)\
    \ 2)\n                                    (let ((year_of_century (string-split/all\
    \ year 2)))\n                                      (cond\n                   \
    \                     ((= (length year_of_century) 4)\n                      \
    \                    (let ((day_of_year (string-split/all year 3)))\n        \
    \                                    (cond\n                                 \
    \             ((= (length day_of_year) 4)\n                                  \
    \              (let ((year_of_decade (string-split/all year 4)))\n           \
    \                                       (cond\n                              \
    \                      ((= (length year_of_decade) 4)\n                      \
    \                                (let ((day_of_decade (string-split/all year 5)))\n\
    \                                                        (cond\n             \
    \                                             ((= (length day_of_decade) 4)\n\
    \                                                           (let ((year_of_century_decade\
    \ (string-split/all year 6)))\n                                              \
    \                (cond\n                                                     \
    \           ((= (length year_of_century_decade) 4)\n                         \
    \                                         (let ((day_of_century_decade (string-split/all\
    \ year 7)))\n                                                                \
    \    (cond\n                                                                 \
    \     ((= (length day_of_century_decade) 4)\n                                \
    \                                        (let ((year_of", "  (cond\n    ((not\
    \ (string? date)) #f)\n    ((string? date)\n      (let ((day (string-split/all\
    \ date \"-\")))\n        (cond\n          ((>= (length day) 2)\n            (let\
    \ ((month (string-split/all day 1)))\n              (cond\n                ((>=\
    \ (length month) 2)\n                  (let ((year (string-split/all day 2)))\n\
    \                    (cond\n                      ((>= (length year) 4)\n    \
    \                    (>= (first month) 1)\n                        (<= (first\
    \ month) 12)\n                        (>= (first day) 1)\n                   \
    \     (<= (first day) 31)\n                        (>= (second month) 1)\n   \
    \                     (<= (second month) 12)\n                        (>= (second\
    \ day) 1)\n                        (<= (second day) 30)\n                    \
    \    (>= (third month) 1)\n                        (<= (third month) 12)\n   \
    \                     (>= (third day) 1)\n                        (<= (third day)\
    \ 29)\n                        (>= (forth month) 1)\n                        (<=\
    \ (forth month) 12)\n                        (>= (forth day) 1)\n            \
    \            (<= (forth day) 30)\n                        (>= (fifth month) 1)\n\
    \                        (<= (fifth month) 12)\n                        (>= (fifth\
    \ day) 1)\n                        (<= (fifth day) 30)\n                     \
    \   (>= (sixth month) 1)\n                        (<= (sixth month) 12)\n    \
    \                    (>= (sixth day) 1)\n                        (<= (sixth day)\
    \ 30)\n                        (>= (seventh month) 1)\n                      \
    \  (<= (seventh month) 12)\n                        (>= (seventh day) 1)\n   \
    \                     (<= (seventh day) 30)\n                        (>= (eighth\
    \ month) 1)\n                        (<= (eighth month) 12)\n                \
    \        (>= (eighth day) 1)\n                        (<= (eighth day) 30)\n \
    \                       (>= (ninth month) 1)\n                        (<= (ninth\
    \ month) 12)\n                        (>= (ninth day) 1", "  (cond\n    ((not\
    \ (string? date)) #f)\n    ((not (string? (cdr date))) #f)\n    ((not (string?\
    \ (car date))) #f)\n    ((not (string? (cdr (car date)))) #f)\n    ((not (string?\
    \ (car (car date)))) #f)\n    ((not (string? (cdr (car (car date))))))\n    ((not\
    \ (string? (cdr (car (cdr date))))))\n    ((not (string? (car (cdr (car (car date)))))))\n\
    \    ((not (string? (cdr (car (cdr (car date)))))))\n    ((not (string? (car (cdr\
    \ (cdr (car (car date))))))))\n    ((not (string? (cdr (car (cdr (cdr (car date))))))))\n\
    \    ((not (string? (car (cdr (cdr (cdr (car (car date))))))))))\n    ((not (string?\
    \ (car (cdr (cdr (cdr (cdr (car date))))))))))\n    ((not (string? (car (cdr (cdr\
    \ (cdr (cdr (car (car date))))))))))\n    ((not (string? (car (cdr (cdr (cdr (cdr\
    \ (car (car date))))))))))\n    ((not (string? (car (cdr (cdr (cdr (cdr (car (car\
    \ (car date))))))))))))\n    ((not (string? (car (cdr (cdr (cdr (cdr (car (car\
    \ (car (car date))))))))))))))\n    ((not (string? (car (cdr (cdr (cdr (cdr (car\
    \ (car (car (car (car (car date)))))))))))))))))\n  )\n)\n", "  (cond\n    ((not\
    \ (string? date)) #f)\n    ((string? date)\n      (let ((month (string->number\
    \ (substring date 0 2))))\n        (let ((day (string->number (substring date\
    \ 3 2))))\n          (let ((year (string->number (substring date 6 2))))\n   \
    \         (cond\n              ((= month 1)\n                (cond\n         \
    \         ((= day 1)\n                    (cond\n                      ((= year\
    \ 2000)\n                        (cond\n                          ((= year 2012)\n\
    \                            (cond\n                              ((= year 2020)\n\
    \                                (return #t))\n                              (else\
    \ #f)))\n                        (else #f)))\n                      (else #f)))\n\
    \                  (else #f)))\n              (cond\n                ((= month\
    \ 3)\n                  (cond\n                    ((= day 1)\n              \
    \        (cond\n                        ((= year 2000)\n                     \
    \     (cond\n                            ((= year 2012)\n                    \
    \          (cond\n                                ((= year 2020)\n           \
    \                       (return #t))\n                                (else #f)))\n\
    \                            (else #f)))\n                        (else #f)))\n\
    \                    (else #f)))\n                (cond\n                  ((=\
    \ month 5)\n                    (cond\n                      ((= day 1)\n    \
    \                    (cond\n                          ((= year 2000)\n       \
    \                     (cond\n                              ((= year 2012)\n  \
    \                              (cond\n                                  ((= year\
    \ 2020)\n                                    (return #t))\n                  \
    \                (else #f)))\n                              (else #f)))\n    \
    \                      (else #f)))\n                      (else #f)))\n      \
    \            (cond\n                    ((= month 7)\n                      (cond\n\
    \                        ((= day 1)\n                          (cond\n       \
    \                     ((= year 2000)\n                              (cond\n  \
    \                              ((= year 2012)\n                              \
    \    (cond\n                                    ((= year 2020)\n             \
    \                         (return #t))\n                                    (else\
    \ #f)))\n                                (else #f)))\n                       \
    \     (else #f)))\n                        (else #f)))\n                    (cond\n\
    \                      ((= month 8)\n                        (cond\n         \
    \                 ((= day 1)\n                            (cond\n            \
    \                  ((= year 2000)\n                                (cond\n   \
    \                               ((= year 2012)\n                             \
    \       (cond\n                                      ((= year 2020)", "  (cond\n\
    \    ((not (string? date)) #f)\n    ((string? date)\n      (let ((day (string-split/all\
    \ date \"-\")))\n        (cond\n          ((= (length day) 3)\n            (let\
    \ ((month (string-split/all day \"-\")))\n              (cond\n              \
    \  ((= (length month) 2)\n                  (let ((year (string-split/all day\
    \ \"-\")))\n                    (cond\n                      ((= (length year)\
    \ 4)\n                        (let ((day_of_month (string-split/all year \"-\"\
    )))\n                          (cond\n                            ((= (length\
    \ day_of_month) 2)\n                              (let ((month_of_year (string-split/all\
    \ day_of_month \"-\")))\n                                (cond\n             \
    \                     ((= (length month_of_year) 2)\n                        \
    \            (let ((year_of_century (string-split/all year_of_century \"-\")))\n\
    \                                      (cond\n                               \
    \         ((= (length year_of_century) 4)\n                                  \
    \        (let ((day_of_year (string-split/all year_of_century \"-\")))\n     \
    \                                       (cond\n                              \
    \                ((= (length day_of_year) 2)\n                               \
    \                 (let ((year_of_decade (string-split/all year_of_decade \"-\"\
    )))\n                                                  (cond\n               \
    \                                     ((= (length year_of_decade) 4)\n       \
    \                                               (let ((day_of_decade (string-split/all\
    \ year_of_decade \"-\")))\n                                                  \
    \      (cond\n                                                          ((= (length\
    \ day_of_decade) 2)\n                                                        \
    \   (let ((year_of_century_decade (string-split/all year_of_century_decade \"\
    -\")))\n                                                              (cond\n\
    \                                                                ((= (length year_of_century_decade)\
    \ 4)\n                                                                  (let ((day_of_century_decade\
    \ (string-split/all year_of_century_decade \"-\")))\n", "  (let* ([day (string-to-integer\
    \ (substring date 0 2))]\n         [month (string-to-integer (substring date 3\
    \ 2))]\n         [year (string-to-integer (substring date 6 2))])\n    (and\n\
    \      (>= 1 day)\n      (<= 31 (if month = 1 3 5 7 8 10 12\n               (>=\
    \ 1 (if month = 2\n                      (<= 29 (if month = 4 6 9 11\n       \
    \                        (<= 30)))))))\n      (>= 1 month)\n      (<= 12 month)\n\
    \      (>= 1 year)\n      (<= 31 year)\n      (= (string-to-integer (substring\
    \ date 0 2)) \"00\")\n      (= (string-to-integer (substring date 3 2)) \"00\"\
    )\n      (= (string-to-integer (substring date 6 2)) \"00\")\n      (= (string-to-integer\
    \ (substring date 9 2)) \"00\")\n      (= (string-to-integer (substring date 11\
    \ 2)) \"00\")\n      (= (string-to-integer (substring date 14 2)) \"00\")\n  \
    \    (= (string-to-integer (substring date 17 2)) \"00\")\n      (= (string-to-integer\
    \ (substring date 19 2)) \"00\")\n      (= (string-to-integer (substring date\
    \ 21 2)) \"00\")\n      (= (string-to-integer (substring date 24 2)) \"00\")\n\
    \      (= (string-to-integer (substring date 26 2)) \"00\")\n      (= (string-to-integer\
    \ (substring date 28 2)) \"00\")\n      (= (string-to-integer (substring date\
    \ 30 2)) \"00\")\n      (= (string-to-integer (substring date 32 2)) \"00\")\n\
    \      (= (string-to-integer (substring date 34 2)) \"00\")\n      (= (string-to-integer\
    \ (substring date 36 2)) \"00\")\n      (= (string-to-integer (substring date\
    \ 38 2)) \"00\")\n      (= (string-to-integer (substring date 40 2)) \"00\")\n\
    \      ", "  (cond\n    ((not (string? date)) #f)\n    ((string? date)\n     \
    \ (cond\n        ((string-length date) == 0)\n          #f\n        ((string-length\
    \ date) > 0)\n          (let ((day (string-split/char date \"-\" 0)))\n      \
    \      (cond\n              ((string-length day) == 2)\n                (let ((month\
    \ (string-split/char day \"-\" 0)))\n                  (cond\n               \
    \     ((string-length month) == 2)\n                      (let ((year (string-split/char\
    \ month \"-\" 0)))\n                        (cond\n                          ((string-length\
    \ year) == 4)\n                            (let ((day_of_month (string-split/char\
    \ year \"-\" 0)))\n                              (cond\n                     \
    \           ((string-length day_of_month) == 2)\n                            \
    \      (let ((month_of_year (string-split/char day_of_month \"-\" 0)))\n     \
    \                               (cond\n                                      ((string-length\
    \ month_of_year) == 2)\n                                        (let ((year_of_century\
    \ (string-split/char month_of_year \"-\" 0)))\n                              \
    \            (cond\n                                            ((string-length\
    \ year_of_century) == 2)\n                                              (let ((year_of_decade\
    \ (string-split/char year_of_century \"-\" 0)))\n                            \
    \                    (cond\n                                                 \
    \ ((string-length year_of_decade) == 2)\n                                    \
    \                (let ((day_of_year (string-split/char year_of_decade \"-\" 0)))\n\
    \                                                      (cond\n               \
    \                                         ((string-length day_of_year) == 2)\n\
    \                                                          (let ((month_of_day\
    \ (string-split/char day_of_year \"-\" 0)))\n                                \
    \                            (cond\n                                         \
    \                     ((string-length month_of_day) == 2)\n                  \
    \                                              (let ((day_of_month (string-split/char\
    \ month_of_day \"-\" 0)))\n                                                  \
    \                (cond\n                                                     \
    \               ((", "  (cond\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string", "  (cond\n    ((not (string? date)) #f)\n  \
    \  ((string? date)\n      (let ((month (string->number (substring date 0 2))))\n\
    \        (let ((day (string->number (substring date 3 2))))\n          (let ((year\
    \ (string->number (substring date 6 2))))\n            (cond\n              ((month\
    \ < 1) #f)\n              ((month > 12) #f)\n              ((day < 1) #f)\n  \
    \            ((day > 31) #f)\n              ((month = 2)\n                (let\
    \ ((leap_year (mod year 4)))\n                  (cond\n                    ((leap_year\
    \ = 0)\n                      (day > 29))\n                    (else\n       \
    \               (day > 28))))\n                (else\n                  (day >\
    \ 30)))\n              (else\n                (day > 29)))))))\n  (else\n    #f)))\n",
  "  (cond\n    ((not (string? date)) #f)\n    ((not (string? (cdr date))) #f)\n \
    \   ((not (string? (car date))) #f)\n    ((not (string? (cdr (car date)))) #f)\n\
    \    ((not (string? (car (car date)))) #f)\n    ((not (string? (cdr (car (car\
    \ date))))))\n    ((not (string? (cdr (car (car (car date)))))))\n    ((not (string?\
    \ (car (cdr (car (car date)))))))\n    ((not (string? (cdr (car (cdr (car (car\
    \ date))))))))\n    ((not (string? (car (cdr (cdr (car (car date))))))))\n   \
    \ ((not (string? (cdr (car (cdr (cdr (car (car date))))))))))\n    ((not (string?\
    \ (car (cdr (cdr (cdr (car (car date))))))))))\n    ((not (string? (cdr (car (cdr\
    \ (cdr (cdr (car (car date))))))))))\n    ((not (string? (car (cdr (cdr (cdr (cdr\
    \ (car (car date))))))))))\n    ((not (string? (cdr (car (cdr (cdr (cdr (cdr (car\
    \ (car date))))))))))))\n    ((not (string? (car (cdr (cdr (cdr (cdr (cdr (car\
    \ (car date))))))))))))\n    ((not (string? (car (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (car (car date))))))))))))))\n    ((not (string? (car (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (car (car date))))))))))))))\n    ((not (string? (car (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (car (car date))))))))))))))\n    ((not (string? (car (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (car (car date))))))))))))))\n    ((not (string? (car (cdr (cdr\
    \ (cdr", "  (cond\n    ((not (string? date)) #f)\n    ((string? date)\n      (let\
    \ ((day (string-split/char date \"-\" 0)))\n        (cond\n          ((= (length\
    \ day) 3)\n            (let ((month (string-split/char day \"-\" 1)))\n      \
    \        (cond\n                ((= (length month) 2)\n                  (let\
    \ ((year (string-split/char day \"-\" 2)))\n                    (cond\n      \
    \                ((= (length year) 4)\n                        (= (string-to-integer\
    \ month) 1)\n                        (= (string-to-integer day) 1)\n         \
    \               (= (string-to-integer year) 2000)\n                        (=\
    \ (string-to-integer year) 2012)\n                        (= (string-to-integer\
    \ year) 2020)\n                        (= (string-to-integer year) 2040)\n   \
    \                     (t #t))))\n                    (else #f)))\n           \
    \     (else #f)))\n          (else #f)))\n      #f)))\n)\n", "  (cond\n    ((not\
    \ (string? date)) #f)\n    ((string? date)\n      (let ((day (string->number date)))\n\
    \        (cond\n          ((= day 1) #t)\n          ((<= day 31) #t)\n       \
    \   ((<= day 30) #t)\n          ((<= day 29) #t)\n          ((<= day 28) #t)\n\
    \          ((<= day 27) #t)\n          ((<= day 26) #t)\n          ((<= day 25)\
    \ #t)\n          ((<= day 24) #t)\n          ((<= day 23) #t)\n          ((<=\
    \ day 22) #t)\n          ((<= day 21) #t)\n          ((<= day 20) #t)\n      \
    \    ((<= day 19) #t)\n          ((<= day 18) #t)\n          ((<= day 17) #t)\n\
    \          ((<= day 16) #t)\n          ((<= day 15) #t)\n          ((<= day 14)\
    \ #t)\n          ((<= day 13) #t)\n          ((<= day 12) #t)\n          ((<=\
    \ day 11) #t)\n          ((<= day 10) #t)\n          ((<= day 9) #t)\n       \
    \   ((<= day 8) #t)\n          ((<= day 7) #t)\n          ((<= day 6) #t)\n  \
    \        ((<= day 5) #t)\n          ((<= day 4) #t)\n          ((<= day 3) #t)\n\
    \          ((<= day 2) #t)\n          ((<= day 1) #t)\n          (else #f)))))))\n\
    \  (else #f)))\n", "  (cond\n    ((not (string? date)) #f)\n    ((string? date)\n\
    \      (cond\n        ((string? (string->list date))\n          (cond\n      \
    \      ((string? (first (string->list date)))\n              (cond\n         \
    \       ((string? (second (string->list date)))\n                  (cond\n   \
    \                 ((string? (third (string->list date)))\n                   \
    \   (cond\n                        ((string? (fourth (string->list date)))\n \
    \                         (cond\n                            ((string? (fifth\
    \ (string->list date)))\n                              (cond\n               \
    \                 ((string? (sixth (string->list date)))\n                   \
    \               (cond\n                                    ((string? (seventh\
    \ (string->list date)))\n                                      (cond\n       \
    \                                 ((string? (eighth (string->list date)))\n  \
    \                                        (cond\n                             \
    \               ((string? (ninth (string->list date)))\n                     \
    \                         (cond\n                                            \
    \    ((string? (tenth (string->list date)))\n                                \
    \                  (cond\n                                                   \
    \ ((string? (eleventh (string->list date)))\n                                \
    \                      (cond\n                                               \
    \         ((string? (twelfth (string->list date)))\n                         \
    \                                 (cond\n                                    \
    \                        ((string? (thirteenth (string->list date)))\n       \
    \                                                       (cond\n              \
    \                                                  ((string? (fourteenth (string->list\
    \ date)))\n                                                                  (cond\n\
    \                                                                    ((string?\
    \ (fifteenth (string->list date)))\n                                         \
    \                             (cond\n                                        \
    \                                ((string? (sixteenth (string->list date)))\n\
    \                                                                          (cond\n\
    \                                                                            ((string?\
    \ (seventeenth (string->list date)))\n                                       \
    \                                       (cond\n                              \
    \                                                  ((string? (eighteenth (string->list\
    \ date)))\n                                                                  \
    \                (cond\n                                                     \
    \                               ((string? (nineteenth (string->list date)))\n\
    \                                                                            \
    \          (cond\n                                                           \
    \                             ((string? (twentieth (string->list date)))\n   \
    \                                                                            \
    \           (cond\n                                                          \
    \    ", "  (cond\n    ((not (string? date)) #f)\n    ((string? date)\n      (cond\n\
    \        ((string-length date) != 3)\n        ((string-length date) != 6)\n  \
    \      ((string-length date) != 8)\n        ((string-length date) != 10)\n   \
    \     ((string-length date) != 12)\n        ((string-length date) != 14)\n   \
    \     ((string-length date) != 16)\n        ((string-length date) != 18)\n   \
    \     ((string-length date) != 20)\n        ((string-length date) != 22)\n   \
    \     ((string-length date) != 24)\n        ((string-length date) != 26)\n   \
    \     ((string-length date) != 28)\n        ((string-length date) != 30)\n   \
    \     ((string-length date) != 32)\n        ((string-length date) != 34)\n   \
    \     ((string-length date) != 36)\n        ((string-length date) != 38)\n   \
    \     ((string-length date) != 40)\n        ((string-length date) != 42)\n   \
    \     ((string-length date) != 44)\n        ((string-length date) != 46)\n   \
    \     ((string-length date) != 48)\n        ((string-length date) != 50)\n   \
    \     ((string-length date) != 52)\n        ((string-length date) != 54)\n   \
    \     ((string-length date) != 56)\n        ((string-length date) != 58)\n   \
    \     ((string-length date) != 60)\n        ((string-length date) != 62)\n   \
    \     ((string-length date) != 64)\n        ((string-length date) != 66)\n   \
    \     ((string-length date) != 68)\n        ((string-length date) != 70)\n   \
    \     ((string-length date) != 72)\n        ((string-length date) != 74)\n   \
    \     ((string-length date) != 76)\n        ((string-length date) != 78)\n   \
    \     ((string-length date) != 80)\n        ((string-length date) != 82)\n   \
    \     ((string-length date) != 84)\n        ((string-length date) != 86)\n   \
    \     ((string-length date) != 88)\n        ((string-length date) != 90)\n   \
    \     ", "  (cond\n    ((not (string? date)) #f)\n    ((empty? date) #f)\n   \
    \ (((string-length date) != 6) #f)\n    (((string-length date) != 8) #f)\n   \
    \ (((string-length date) != 10) #f)\n    (((string-length date) != 12) #f)\n \
    \   (((string-length date) != 14) #f)\n    (((string-length date) != 16) #f)\n\
    \    (((string-length date) != 18) #f)\n    (((string-length date) != 20) #f)\n\
    \    (((string-length date) != 22) #f)\n    (((string-length date) != 24) #f)\n\
    \    (((string-length date) != 26) #f)\n    (((string-length date) != 28) #f)\n\
    \    (((string-length date) != 30) #f)\n    (((string-length date) != 32) #f)\n\
    \    (((string-length date) != 34) #f)\n    (((string-length date) != 36) #f)\n\
    \    (((string-length date) != 38) #f)\n    (((string-length date) != 40) #f)\n\
    \    (((string-length date) != 42) #f)\n    (((string-length date) != 44) #f)\n\
    \    (((string-length date) != 46) #f)\n    (((string-length date) != 48) #f)\n\
    \    (((string-length date) != 50) #f)\n    (((string-length date) != 52) #f)\n\
    \    (((string-length date) != 54) #f)\n    (((string-length date) != 56) #f)\n\
    \    (((string-length date) != 58) #f)\n    (((string-length date) != 60) #f)\n\
    \    (((string-length date) != 62) #f)\n    (((string-length date) != 64) #f)\n\
    \    (((string-length date) != 66) #f)\n    (((string-length date) != 68) #f)\n\
    \    (((string-length", "  (cond\n    ((not (string? date)) #f)\n    ((not (string?\
    \ (cdr date))) #f)\n    ((not (string? (car date))) #f)\n    ((not (string? (cdr\
    \ (car date)))) #f)\n    ((not (string? (car (car date)))) #f)\n    ((not (string?\
    \ (cdr (car (car date))))))\n    ((not (string? (car (cdr (car date))))))\n  \
    \  ((not (string? (cdr (cdr (car date))))))\n    ((not (string? (car (cdr (cdr\
    \ date))))))\n    ((not (string? (cdr (cdr (cdr date))))))\n    ((not (string?\
    \ (car (cdr (cdr (car date))))))\n    ((not (string? (cdr (cdr (cdr (car date))))))\n\
    \    ((not (string? (car (cdr (cdr (cdr date))))))\n    ((not (string? (cdr (cdr\
    \ (cdr (cdr date))))))\n    ((not (string? (car (cdr (cdr (cdr (car date))))))\n\
    \    ((not (string? (cdr (cdr (cdr (cdr (car date))))))\n    ((not (string? (car\
    \ (cdr (cdr (cdr (cdr date))))))\n    ((not (string? (cdr (cdr (cdr (cdr (cdr\
    \ date))))))\n    ((not (string? (car (cdr (cdr (cdr (cdr (car date))))))\n  \
    \  ((not (string? (cdr (cdr (cdr (cdr (cdr (car date))))))\n    ((not (string?\
    \ (car (cdr (cdr (cdr (cdr (cdr date))))))\n    ((not (string? (cdr (cdr (cdr\
    \ (cdr (cdr (cdr date))))))\n    ((not (string? (car (cdr (cdr (cdr (cdr (cdr\
    \ (car date))))))))\n    ((not (string? (cdr (cdr (cdr (cdr (cdr (cdr (car date))))",
  "  (cond\n    ((not (string? date)) #f)\n    ((string? date)\n      (let ((day (string-split/all\
    \ date \"-\")))\n        (if (length day)\n          (if (> (length day) 2)\n\
    \            (if (> (first day) 31)\n              (if (> (first day) 30)\n  \
    \              (if (> (first day) 29)\n                  (if (> (first day) 28)\n\
    \                    (if (> (first day) 27)\n                      (if (> (first\
    \ day) 26)\n                        (if (> (first day) 25)\n                 \
    \         (if (> (first day) 24)\n                            (if (> (first day)\
    \ 23)\n                              (if (> (first day) 22)\n                \
    \                (if (> (first day) 21)\n                                  (if\
    \ (> (first day) 20)\n                                    (if (> (first day) 19)\n\
    \                                      (if (> (first day) 18)\n              \
    \                          (if (> (first day) 17)\n                          \
    \                (if (> (first day) 16)\n                                    \
    \        (if (> (first day) 15)\n                                            \
    \  (if (> (first day) 14)\n                                                (if\
    \ (> (first day) 13)\n                                                  (if (>\
    \ (first day) 12)\n                                                    #t\n  \
    \                                                  #f
  "  (cond\n    ((not (string? date)) #f)\n    ((string? date)\n      (let ((day (string-split/all\
    \ date \"-\")))\n        (cond\n          ((= (length day) 3)\n            (let\
    \ ((month (string-split/all day \"-\")))\n              (cond\n              \
    \  ((= (length month) 2)\n                  (let ((year (string-split/all day\
    \ \"-\")))\n                    (cond\n                      ((= (length year)\
    \ 4)\n                        (let ((day-of-month (string-split/all year \"-\"\
    )))\n                          (cond\n                            ((= (length\
    \ day-of-month) 2)\n                              (let ((month-of-year (string-split/all\
    \ day-of-month \"-\")))\n                                (cond\n             \
    \                     ((= (length month-of-year) 2)\n                        \
    \            (let ((year-of-month (string-split/all month-of-year \"-\")))\n \
    \                                     (cond\n                                \
    \        ((= (length year-of-month) 4)\n                                     \
    \     (let ((day-of-year (string-split/all year-of-month \"-\")))\n          \
    \                                  (cond\n                                   \
    \           ((= (length day-of-year) 2)\n                                    \
    \            (let ((year-of-day (string-split/all day-of-year \"-\")))\n     \
    \                                             (cond\n                        \
    \                            ((= (length year-of-day) 4)\n                   \
    \                                   (let ((day-of-year (string-split/all year-of-day\
    \ \"-\")))\n                                                        (cond\n  \
    \                                                        ((= (length day-of-year)\
    \ 2)\n                                                           (let ((month-of-day\
    \ (string-split/all day-of-year \"-\")))\n                                   \
    \                           (cond\n                                          \
    \                      ((= (length month-of-day) 2)\n                        \
    \                                          (let ((year-of-month (string-split/all\
    \ month-of-day \"-\")))\n                                                    \
    \                (cond\n                                                     \
    \                 ((= (length year-of-month", "  (let* ([date_str (string->date\
    \ date)])\n    (if (not (empty? date_str))\n      (let* ([month (string->integer\
    \ (substring date_str 0 2))]\n             [day (string->integer (substring date_str\
    \ 3 2))]\n             [year (string->integer (substring date_str 6 2))])\n  \
    \      (if (>= month 1 12)\n          (return #f)\n        (if (>= month 3 4 6\
    \ 9 11)\n          (if (<= day 31)\n            (return #t)\n          (if (<=\
    \ day 30)\n            (return #t)\n          (if (<= day 29)\n            (return\
    \ #t)\n          (return #f)))\n        (if (>= month 2)\n          (if (<= day\
    \ 31)\n            (return #t)\n          (return #f)))\n        (return #f)))\n\
    \    (return #f)))\n", "  (cond\n    ((not (string? date)) #f)\n    ((string?\
    \ date)\n      (let ((month (string->number (substring date 0 2))))\n        (let\
    \ ((day (string->number (substring date 3 2))))\n          (let ((year (string->number\
    \ (substring date 6 2))))\n            (cond\n              ((month < 1) #f)\n\
    \              ((month > 12) #f)\n              ((day < 1) #f)\n             \
    \ ((day > 31) #f)\n              ((month == 2)\n                (let ((leap_year\
    \ (year % 4 == 0)))\n                  (let ((days_in_month (leap_year ?day ?month)))\n\
    \                    (cond\n                      ((day < 1) #f)\n           \
    \           ((day > days_in_month) #f)\n                      (t #t))))\n    \
    \            (else #f)))\n              (t #t)))))))))\n", "  (cond\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(number? date)\n      (let ((day (day-of-month\
    \ date))\n            (month (month-of-year date))\n            (year (year-of-date\
    \ date)))\n        (and\n          (>= 1 day)\n          (<= 31 (if month = 1\
    \ 3 5 7 8 10 12\n                  (+ (modulo month 4 6 9 11 2) 1)))\n       \
    \   (>= 1 day)\n          (<= 30 (if month = 4 6 9 11 2\n                  (+\
    \ (modulo month 3 5 7 8 10 12) 1)))\n          (>= 1 day)\n          (<= 29 (if\
    \ month = 2\n                  (+ (modulo month 1 2 3 4 5 6 7 8 9 10 11 12) 1)))\n\
    \          (= month 1 2 3 4 5 6 7 8 9 10 11 12)\n          (= year 1900 2000 2100\
    \ 2200 2300 2400 2500 2600 2700 2800 2900 3000 3100 3200 3300 3400 3500 3600 3700\
    \ 3800 3900 4000 4100 4200 4300 4400 4500 4600 4700 4800 4900 5000 5100 5200 5300\
    \ 5400 5500 5600 5700 5800 5900 6000 6100 6200 6300 6400 6500 6600 6700 6800 6900\
    \ 7000 7100 7200 7300 7400 7500 7600 7700 7800 7900 8000 8100 8200 8300 8400 8500\
    \ 8600 8700 8800 8900 9000 9100 9200 9300 9400 9500 9600 9700 9800 9900)\n   \
    \       (= year 2000 2100 2200 2300 2400 2500 2600 2700 2800 2900 3000 3100 3200\
    \ 3300 3400 3500 3600 3700 3800 3900 4000 4100 4200 4300 4400 4500 4600 4700 4800\
    \ 4900 5000 5100 5200 5300 5400 5500 5600 5700 5800 5900 6000 6100 6200 6300 6400\
    \ 6500 6600 6700 6800 6900 7000 7100 7200 7300 7400 7500 7600 7700 7800 7900 8000\
    \ 8100 8200 8300 8400 8500 8600 8700 8800 8900 9000 9100 9200 9300 9400 9500",
  "  (cond\n    ((not (string? date)) #f)\n    ((not (string? (cdr date))) #f)\n \
    \   ((string? (car date))\n      (cond\n        ((string? (car (cdr date))) #f)\n\
    \        ((string? (car (cdr (cdr date)))) #f)\n        ((string? (car (cdr (cdr\
    \ (cdr date))))))\n          (let ((month (car (cdr (cdr (cdr (cdr date)))))))\n\
    \            (cond\n              ((= (car month) \"01\") #t)\n              ((=\
    \ (car month) \"02\") #f)\n              ((= (car month) \"03\") #t)\n       \
    \       ((= (car month) \"04\") #t)\n              ((= (car month) \"05\") #t)\n\
    \              ((= (car month) \"06\") #t)\n              ((= (car month) \"07\"\
    ) #t)\n              ((= (car month) \"08\") #t)\n              ((= (car month)\
    \ \"09\") #t)\n              ((= (car month) \"10\") #t)\n              ((= (car\
    \ month) \"11\") #t)\n              ((= (car month) \"12\") #t)\n            \
    \  #f\n              )))\n        )))\n    ))\n)\n", "  (cond\n    ((not (string?\
    \ date)) #f)\n    ((string? date)\n      (let ((day (string-split/char date \"\
    -\" 1)))\n        (if (number? day)\n          (let ((month (string-split/char\
    \ date \"-\" 2)))\n            (if (number? month)\n              (let ((year\
    \ (string-split/char date \"-\" 4)))\n                (if (number? year)\n   \
    \               (if (>= (number? day) 1)\n                    (if (<= (number?\
    \ day) 31)\n                      (if (>= (number? month) 1)\n               \
    \         (if (<= (number? month) 12)\n                          (if (>= (number?\
    \ year) 1900)\n                            (if (<= (number? year) 2040)\n    \
    \                          #t\n                              #f))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
  "  (let* ((date-str (string->list date)))\n    (and\n      (not (empty? date-str))\n\
    \      (let* ((month (first date-str))\n             (day (second date-str))\n\
    \             (year (third date-str)))\n        (and\n          (>= 1 (number->integer\
    \ month))\n          (<= 12 (number->integer month))\n          (>= 1 (number->integer\
    \ day))\n          (<= 31 (number->integer day))\n          (>= 1 (number->integer\
    \ year))\n          (<= 31 (number->integer year))\n          (>= 1 (number->integer\
    \ year))\n          (<= 12 (number->integer year))\n          (= (number->integer\
    \ year) (number->integer 1900))\n          (= (number->integer year) (number->integer\
    \ 2000))\n          (= (number->integer year) (number->integer 2100))\n      \
    \    (= (number->integer year) (number->integer 2200))\n          (= (number->integer\
    \ year) (number->integer 2300))\n          (= (number->integer year) (number->integer\
    \ 2400))\n          (= (number->integer year) (number->integer 2500))\n      \
    \    (= (number->integer year) (number->integer 2600))\n          (= (number->integer\
    \ year) (number->integer 2700))\n          (= (number->integer year) (number->integer\
    \ 2800))\n          (= (number->integer year) (number->integer 2900))\n      \
    \    (= (number->integer year) (number->integer 3000))\n          (= (number->integer\
    \ year) (number->integer 3100))\n          (= (number->integer year) (number->integer\
    \ 3200))\n          (= (number->integer year) (number->integer 3300))\n      \
    \    (= (number->integer year) (number->integer 3400))\n          (= (number->integer\
    \ year) (number->integer 3500))\n          (= (number->integer year) (number->integer\
    \ 3600))\n          (= (number->integer year) (number->integer 3700))\n      \
    \    (= (number->integer year) (number->integer 3800))\n          (= (number->integer\
    \ year) (number->integer 3900))", "  (cond\n    [(string? date)\n      (not (empty?\
    \ date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n\
    \      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string", "  (let* ((date-str (string->list\
    \ date))\n          (month (car date-str))\n          (day (car (cdr date-str)))\n\
    \          (year (car (cdr (cdr date-str))))\n          (month-num (month->number\
    \ month))\n          (day-num (day->number day))\n          (year-num (year->number\
    \ year)))\n    (and\n      (not (empty? date-str))\n      (or\n        (and\n\
    \          (>= 1 month-num)\n          (<= 12 month-num))\n        (and\n    \
    \      (>= 1 day-num)\n          (<= 31 day-num))\n        (= 2 month-num))\n\
    \      (= 2 year-num)\n      (>= 1 year-num)\n      (<= 31 year-num)))\n)\n",
  "  (cond\n    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n\
    \      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string", "  (cond\n    [(string? date)\n      (not (empty? date))]\n  \
    \  [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string", "  (cond\n    ((not (string? date)) #f)\n  \
    \  ((string? date)\n      (let ((day (string->number date)))\n        (cond\n\
    \          ((= day 1) #t)\n          ((<= day 31) #t)\n          ((<= day 30)\
    \ #t)\n          ((= day 29) #t)\n          ((<= day 28) #t)\n          ((<= day\
    \ 27) #t)\n          ((<= day 26) #t)\n          ((<= day 25) #t)\n          ((<=\
    \ day 24) #t)\n          ((<= day 23) #t)\n          ((<= day 22) #t)\n      \
    \    ((<= day 21) #t)\n          ((<= day 20) #t)\n          ((<= day 19) #t)\n\
    \          ((<= day 18) #t)\n          ((<= day 17) #t)\n          ((<= day 16)\
    \ #t)\n          ((<= day 15) #t)\n          ((<= day 14) #t)\n          ((<=\
    \ day 13) #t)\n          ((<= day 12) #t)\n          ((<= day 11) #t)\n      \
    \    ((<= day 10) #t)\n          ((<= day 9) #t)\n          ((<= day 8) #t)\n\
    \          ((<= day 7) #t)\n          ((<= day 6) #t)\n          ((<= day 5) #t)\n\
    \          ((<= day 4) #t)\n          ((<= day 3) #t)\n          ((<= day 2) #t)\n\
    \          ((<= day 1) #t)\n          #f))))))))))\n  ))\n", "  (let* ((month\
    \ (string->number (first (string->list date))))\n          (day (string->number\
    \ (second (string->list date))))\n          (year (string->number (third (string->list\
    \ date))))\n          (result (and\n                   (not (empty? date))\n \
    \                  (not (<= month 1) (month month))\n                   (not (<=\
    \ month 3) (month month))\n                   (not (<= month 5) (month month))\n\
    \                   (not (<= month 7) (month month))\n                   (not\
    \ (<= month 8) (month month))\n                   (not (<= month 10) (month month))\n\
    \                   (not (<= month 12) (month month))\n                   (not\
    \ (<= day 1) (day day))\n                   (not (<= day 30) (day day))\n    \
    \               (not (<= day 29) (day day))\n                   (not (<= month\
    \ 1) (month month))\n                   (not (<= month 12) (month month))\n  \
    \                 (not (<= year 1900) (year year))\n                   (not (>=\
    \ year 2100) (year year))\n                   (not (string->number (first (string->list\
    \ date))))\n                   (not (string->number (second (string->list date))))\n\
    \                   (not (string->number (third (string->list date))))\n     \
    \              )))\n    (result)))\n", "  (cond\n    ((not (string? date)) #f)\n\
    \    ((string? date)\n      (let ((month (string->number date)))\n        (cond\n\
    \          ((= month 1)\n            (let ((day (string->number (substring date\
    \ 2 2))))\n              (cond\n                ((= day 1)\n                 \
    \ (let ((year (string->number (substring date 4 4))))\n                    (cond\n\
    \                      ((= year 2000)\n                        (return #t))\n\
    \                      ((= year 2012)\n                        (return #f))\n\
    \                      ((= year 2020)\n                        (return #t))))))\n\
    \                (else\n                  (return #f))))\n          (else\n  \
    \          (let ((day (string->number (substring date 2 2))))\n              (cond\n\
    \                ((= month 3)\n                  (let ((year (string->number (substring\
    \ date 4 4))))\n                    (cond\n                      ((= year 2000)\n\
    \                        (return #f))\n                      ((= year 2012)\n\
    \                        (return #t))\n                      ((= year 2020)\n\
    \                        (return #f))))))\n              (else\n             \
    \   (let ((day (string->number (substring date 2 2))))\n                  (cond\n\
    \                    ((= month 6)\n                      (let ((year (string->number\
    \ (substring date 4 4))))\n                        (cond\n                   \
    \       ((= year 2000)\n                            (return #f))\n           \
    \               ((= year 2012)\n                            (return #t))\n   \
    \                       ((= year 2020)\n                            (return #f))))))\n\
    \                  (else\n                    (let ((day (string->number (substring\
    \ date 2 2))))\n                      (cond\n                        ((= month\
    \ 9)\n                          (let ((year (string->number (substring date 4\
    \ 4))))\n                            (cond\n                              ((=\
    \ year 2000)\n                                (return #f))\n                 \
    \             ((= year 2012)\n                                (return #t))\n \
    \                             ((= year 2020)\n                               \
    \ (return #f))))))\n                      (else\n                        (let\
    \ ((day (string->number (substring date 2 2))))\n                          (cond\n\
    \                            ((= month 11)\n                              (let\
    \ ((year (string->number (substring date 4 4))))\n                           \
    \     (cond\n                                  ((= year 2000)\n              \
    \                      (return #f))\n                                  ((", " \
    \ (cond\n    ((not (string? date)) #f)\n    ((string? date)\n      (let ((month\
    \ (string->number (substring date 0 2))))\n        (let ((day (string->number\
    \ (substring date 3 2))))\n          (let ((year (string->number (substring date\
    \ 6 2))))\n            (cond\n              ((month < 1) #f)\n              ((month\
    \ > 12) #f)\n              ((day < 1) #f)\n              ((day > 31) #f)\n   \
    \           ((month = 2)\n                (let ((leap (modulo year 4)))\n    \
    \              (cond\n                    ((leap = 0)\n                      (day\
    \ > 29)\n                    (else\n                      (day > 28))))))\n  \
    \            ((month = 4)\n                (let ((leap (modulo year 4)))\n   \
    \               (cond\n                    ((leap = 0)\n                     \
    \ (day > 30))\n                    (else\n                      (day > 29))))))\n\
    \              (else\n                (day > 30)))))))))\n", "  (cond\n    ((not\
    \ (string? date)) #f)\n    ((string? date)\n      (let ((day (string-split date\
    \ \"-\")))\n        (cond\n          ((= (length day) 3)\n            (let ((month\
    \ (string-split day 1)))\n              (let ((year (string-split day 2)))\n \
    \               (cond\n                  ((= (length month) 2)\n             \
    \       (let ((day_of_month (string-split day 2)))\n                      (cond\n\
    \                        ((= (length day_of_month) 2)\n                      \
    \    (let ((day_of_week (string-split day_of_month 1)))\n                    \
    \        (cond\n                              ((= (length day_of_week) 2)\n  \
    \                              (let ((month_of_year (string-split day_of_week\
    \ 2)))\n                                  (cond\n                            \
    \        ((= (length month_of_year) 2)\n                                     \
    \ (let ((year_of_century (string-split month_of_year 2)))\n                  \
    \                      (cond\n                                          ((= (length\
    \ year_of_century) 4)\n                                            (let ((year_of_decade\
    \ (string-split year_of_century 2)))\n                                       \
    \       (cond\n                                                ((= (length year_of_decade)\
    \ 2)\n                                                  (let ((year_of_year (string-split\
    \ year_of_decade 2)))\n                                                    (cond\n\
    \                                                      ((= (length year_of_year)\
    \ 4)\n                                                        (let ((year_of_month\
    \ (string-split year_of_year 2)))\n                                          \
    \                (cond\n                                                     \
    \       ((= (length year_of_month) 2)\n                                      \
    \                        (let ((day_of_year (string-split year_of_month 2)))\n\
    \                                                                (cond\n     \
    \                                                             ((= (length day_of_year)\
    \ 2)\n                                                                    (let\
    \ ((day_of_month (string-split day_of_year 2)))\n                            \
    \                                          (cond\n                           \
    \                                             ((= (length day_of_month", "  (cond\n\
    \    ((not (string? date)) #f)\n    ((string? date)\n      (let ((month (string->number\
    \ (substring date 0 2))))\n        (let ((day (string->number (substring date\
    \ 3 2))))\n          (let ((year (string->number (substring date 6 2))))\n   \
    \         (cond\n              ((month < 1) #f)\n              ((month > 12) #f)\n\
    \              ((day < 1) #f)\n              ((day > 31) #f)\n              ((month\
    \ == 2)\n                (let ((leap_year (year % 4 == 0)))\n                \
    \  (let ((days (if leap_year #f (if leap_year #f (day - 1))))\n              \
    \          (if leap_year #t (day + 29)))\n                    (if leap_year #f\
    \ (day + 28))))\n                (if day < days #f)))\n              ((month ==\
    \ 4)\n                (let ((days (if day < 30 #f (day + 30))))\n            \
    \      (if day < days #f)))\n              ((month == 6)\n                (let\
    \ ((days (if day < 30 #f (day + 30))))\n                  (if day < days #f)))\n\
    \              ((month == 9)\n                (let ((days (if day < 30 #f (day\
    \ + 30))))\n                  (if day < days #f)))\n              ((month == 11)\n\
    \                (let ((days (if day < 30 #f (day + 30))))\n                 \
    \ (if day < days #f)))\n              ((month == 1)\n                (let ((days\
    \ (if day < 31 #f (day + 31))))\n                  (if day < days #f)))\n    \
    \          ((month == 3)\n                (let ((days (if day < 31 #f (day + 31))))\n\
    \                  (if day < days #f)))\n              ((month == 5)\n       \
    \         (let ((days (if day < 31 #f (day + 31))))\n                  (if day\
    \ < days #f)))\n              ((month == 7)\n                (let ((days (if day\
    \ < 31 #f (day + 31))))\n                  (if day < days #f)))\n            \
    \  ((month == 8)\n                (let ((days (if day < 31 #f (day + 31))))\n\
    \                  (if", "  (cond\n    ((not (string? date)) #f)\n    ((string?\
    \ date)\n      (let ((day (string-split date \"-\")))\n        (cond\n       \
    \   ((= (length day) 3)\n            (let ((month (string-split day 1)))\n   \
    \           (let ((year (string-split day 2)))\n                (cond\n      \
    \            ((= (length month) 2)\n                    (let ((day_of_month (string-split\
    \ day 2)))\n                      (cond\n                        ((= (length day_of_month)\
    \ 2)\n                          (let ((day_of_week (string-split day_of_month\
    \ 1)))\n                            (cond\n                              ((= (length\
    \ day_of_week) 2)\n                                (let ((month_of_year (string-split\
    \ day_of_week 2)))\n                                  (cond\n                \
    \                    ((= (length month_of_year) 2)\n                         \
    \             (let ((day_of_year (string-split day_of_month 2)))\n           \
    \                             (cond\n                                        \
    \  ((= (length day_of_year) 4)\n                                            (let\
    \ ((year_of_century (string-split day_of_year 2)))\n                         \
    \                     (let ((year_of_decade (string-split year_of_century 2)))\n\
    \                                                (let ((year_of_month (string-split\
    \ year_of_decade 2)))\n                                                  (let\
    \ ((year_of_day (string-split year_of_month 2)))\n                           \
    \                         (cond\n                                            \
    \          ((= (length year_of_day) 2)\n                                     \
    \                   (let ((year (string-split year_of_day 2)))\n             \
    \                                             (cond\n                        \
    \                                    ((= (length year) 4)\n                  \
    \                                            (let ((month_of_year (string-split\
    \ year 2)))\n                                                                (cond\n\
    \                                                                  ((= (length\
    \ month_of_year) 2)\n                                                        \
    \            (let ((day_of_year (string-split year_of_month 2)))\n           \
    \                                                           (cond\n          \
    \                                                    ", "  (cond\n    ((not (string?\
    \ date)) #f)\n    ((string? date)\n      (let ((day (string-split/all date \"\
    -\")))\n        (if (string? (first day))\n          (if (string? (second day))\n\
    \            (if (string? (third day))\n              (if (string? (fourth day))\n\
    \                (if (string? (fifth day))\n                  (if (string? (sixth\
    \ day))\n                    (if (string? (seventh day))\n                   \
    \   (if (string? (eighth day))\n                        (if (string? (ninth day))\n\
    \                          (if (string? (tenth day))\n                       \
    \     (if (string? (eleventh day))\n                              (if (string?\
    \ (twelfth day))\n                                (if (string? (thirteenth day))\n\
    \                                  (if (string? (fourteenth day))\n          \
    \                          (if (string? (fifteenth day))\n                   \
    \                   (if (string? (sixteenth day))\n                          \
    \              (if (string? (seventeenth day))\n                             \
    \             (if (string? (eighteenth day))\n                               \
    \             (if (string? (nineteenth day))\n                               \
    \               (if (string? (twentieth day))\n                              \
    \                  (if (string? (twenty-first day))\n                        \
    \                          (if (string? (twenty-second day))\n               \
    \                                     (if (string? (twenty-third day))\n     \
    \                                                 (if (string? (twenty-fourth\
    \ day))\n                                                        (if (string?\
    \ (twenty-fifth day))\n                                                      \
    \    (if (string? (twenty-sixth day))\n                                      \
    \                      (if (string? (twenty-seventh day))\n                  \
    \                                            (if (string? (twenty-eighth day))\n\
    \                                                                (if (string?\
    \ (twenty-ninth day))\n                                                      \
    \            (if (string? (thirtieth day))\n                                 \
    \                                   (if (string? (thirty-first day))\n       \
    \                                                               (if (string?",
  "  (cond\n    ((not (string? date)) #f)\n    ((string? date)\n      (let ((month\
    \ (string->number date)))\n        (cond\n          ((= month 1)\n           \
    \ (let ((day (string->number (substring date (1))))\n                  (>= 1 (if\
    \ (modulo day 30) (modulo day 29) (modulo day 28)))\n                  (<= 31\
    \ (if (modulo day 30) (modulo day 29) (modulo day 28))))\n              (>= 1\
    \ (if (modulo day 30) (modulo day 29) (modulo day 28))))\n          ((= month\
    \ 2)\n            (let ((day (string->number (substring date (1))))\n        \
    \          (>= 1 (if (modulo day 29) (modulo day 28))))\n              (>= 1 (if\
    \ (modulo day 29) (modulo day 28))))\n          ((= month 3)\n            (let\
    \ ((day (string->number (substring date (1))))\n                  (>= 1 (if (modulo\
    \ day 30) (modulo day 29))))\n              (>= 1 (if (modulo day 30) (modulo\
    \ day 29))))\n          ((= month 4)\n            (let ((day (string->number (substring\
    \ date (1))))\n                  (>= 1 (if (modulo day 30) (modulo day 29))))\n\
    \              (>= 1 (if (modulo day 30) (modulo day 29))))\n          ((= month\
    \ 5)\n            (let ((day (string->number (substring date (1))))\n        \
    \          (>= 1 (if (modulo day 31) (modulo day 30))))\n              (>= 1 (if\
    \ (modulo day 31) (modulo day 30))))\n          ((= month 6)\n            (let\
    \ ((day (string->number (substring date (1))))\n                  (>= 1 (if (modulo\
    \ day 31) (modulo day 30))))\n              (>= 1 (if (modulo day 31) (modulo\
    \ day 30))))\n          ((= month 7)\n            (let ((day (string->number (substring\
    \ date (1))))\n                  (>= 1 (if (modulo day 31) (modulo day 30))))\n\
    \              (>= 1 (if", "  (cond\n    ((not (string? date)) #f)\n    ((string?\
    \ date)\n      (let ((date_str (string->list date)))\n        (cond\n        \
    \  ((not (string? date_str)) #f)\n          ((string? date_str)\n            (let\
    \ ((date_list (string->list date_str)))\n              (cond\n               \
    \ (((length date_list) < 2) #f)\n                (((length date_list) > 3) #f)\n\
    \                (((length date_list) == 3)\n                  (let ((month (string->list\
    \ (first date_list)))\n                        (day (string->list (second date_list)))\n\
    \                        (year (string->list (third date_list))))\n          \
    \          (cond\n                      (((length month) < 1) #f)\n          \
    \            (((length month) > 12) #f)\n                      (((length day)\
    \ < 1) #f)\n                      (((length day) > 31) #f)\n                 \
    \     (((length year) < 1) #f)\n                      (((length year) > 31) #f)\n\
    \                      (((length year) == 4)\n                        (let ((day_of_month\
    \ (day->integer day)))\n                          (cond\n                    \
    \        ((day_of_month < 1) #f)\n                            ((day_of_month >\
    \ 30) #f)\n                            (t #t))))\n                      (((length\
    \ year) == 2)\n                        (let ((day_of_month (day->integer day)))\n\
    \                          (cond\n                            ((day_of_month <\
    \ 1) #f)\n                            ((day_of_month > 29) #f)\n             \
    \               (t #t))))\n                      (t #t)))))))\n          (t #t)))))))\n\
    \  (t #t)))\n", "  (cond\n    ((not (string? date)) #f)\n    ((string? date)\n\
    \      (let ((day (string-split/all date \"-\")))\n        (if (empty? day) #f\n\
    \          (if (>= (length day) 2)\n            (let ((month (string-split/all\
    \ day 1)))\n              (if (>= (length month) 2)\n                (let ((year\
    \ (string-split/all day 2)))\n                  (if (>= (length year) 4)\n   \
    \                 (if (>= (first month) 1)\n                      (if (>= (first\
    \ month) 3)\n                        (if (>= (first month) 5)\n              \
    \            (if (>= (first month) 7)\n                            (if (>= (first\
    \ month) 8)\n                              (if (>= (first month) 10)\n       \
    \                         (if (>= (first month) 12)\n                        \
    \          (if (>= (first month) 4)\n                                    (if (>=\
    \ (first month) 6)\n                                      (if (>= (first month)\
    \ 9)\n                                        (if (>= (first month) 11)\n    \
    \                                      (if (>= (first month) 2)\n            \
    \                                (if (>= (length year) 4)\n                  \
    \                            (return #t
  "  (cond\n    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n\
    \      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string", "  (cond\n    ((not (string? date)) #f)\n    ((string? date)\n\
    \      (let ((month (string->number date/1)))\n        (let ((day (string->number\
    \ date/2)))\n          (let ((year (string->number date/3)))\n            (cond\n\
    \              ((month < 1) #f)\n              ((month > 12) #f)\n           \
    \   ((day < 1) #f)\n              ((day > 31) (month = 2) #f)\n              ((day\
    \ > 30) (month = 4) (day = 29) #f)\n              ((month = 1) (day > 31) #f)\n\
    \              ((month = 3) (day > 31) #f)\n              ((month = 5) (day >\
    \ 31) #f)\n              ((month = 7) (day > 31) #f)\n              ((month =\
    \ 8) (day > 31) #f)\n              ((month = 10) (day > 31) #f)\n            \
    \  ((month = 12) (day > 31) #f)\n              (#t #f))))))))))\n)\n", "  (cond\n\
    \    ((not (string? date)) #f)\n    ((string? date)\n      (let ((day (string-split/char\
    \ date \"-\" 0 2)))\n        (if (string? day)\n          (cond\n            ((string-split/char\
    \ day \"0\") #f)\n            ((string-split/char day \"1\")\n              (let\
    \ ((month (string-split/char day \"-\" 0 2)))\n                (if (string? month)\n\
    \                  (cond\n                    ((string-split/char month \"0\"\
    ) #f)\n                    ((string-split/char month \"1\")\n                \
    \      (let ((year (string-split/char day \"-\" 0 4)))\n                     \
    \   (if (string? year)\n                          (cond\n                    \
    \        ((string-split/char year \"0\") #f)\n                            ((string-split/char\
    \ year \"1\")\n                              (let ((day (string-split/char year\
    \ \"-\" 0 2)))\n                                (if (string? day)\n          \
    \                        (cond\n                                    ((string-split/char\
    \ day \"0\") #f)\n                                    ((string-split/char day\
    \ \"1\")\n                                      (let ((month (string-split/char\
    \ day \"-\" 0 2)))\n                                        (if (string? month)\n\
    \                                          (cond\n                           \
    \                 ((string-split/char month \"0\") #f)\n                     \
    \                       ((string-split/char month \"1\")\n                   \
    \                           (let ((year (string-split/char day \"-\" 0 4)))\n\
    \                                                (if (string? year)\n        \
    \                                          (cond\n                           \
    \                         ((string-split/char year \"0\") #f)\n              \
    \                                      ((string-split/char year \"1\")\n     \
    \                                                 (let ((day (string-split/char\
    \ year \"-\" 0 2)))\n                                                        (if\
    \ (string? day)\n                                                          (cond\n\
    \                                                           ((string-split/char\
    \ day \"0\") #f)\n                                                           ((string-split/char\
    \ day \"1\")\n                                     ", "  (cond\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string", "  (cond\n  \
    \  ((not (string? date)) #f)\n    ((empty? date) #f)\n    (((string-length date)\
    \ != 6) #f)\n    (((string-length date) != 8) #f)\n    (((string-length date)\
    \ != 10) #f)\n    (((string-length date) != 12) #f)\n    (((string-length date)\
    \ != 14) #f)\n    (((string-length date) != 16) #f)\n    (((string-length date)\
    \ != 18) #f)\n    (((string-length date) != 20) #f)\n    (((string-length date)\
    \ != 22) #f)\n    (((string-length date) != 24) #f)\n    (((string-length date)\
    \ != 26) #f)\n    (((string-length date) != 28) #f)\n    (((string-length date)\
    \ != 30) #f)\n    (((string-length date) != 32) #f)\n    (((string-length date)\
    \ != 34) #f)\n    (((string-length date) != 36) #f)\n    (((string-length date)\
    \ != 38) #f)\n    (((string-length date) != 40) #f)\n    (((string-length date)\
    \ != 42) #f)\n    (((string-length date) != 44) #f)\n    (((string-length date)\
    \ != 46) #f)\n    (((string-length date) != 48) #f)\n    (((string-length date)\
    \ != 50) #f)\n    (((string-length date) != 52) #f)\n    (((string-length date)\
    \ != 54) #f)\n    (((string-length date) != 56) #f)\n    (((string-length date)\
    \ != 58) #f)\n    (((string-length date) != 60) #f)\n    (((string-length date)\
    \ != 62) #f)\n    (((string-length date) != 64) #f)\n    (((string-length date)\
    \ != 66) #f)\n    (((string-length date) != 68) #f)\n    (((string-length", " \
    \ (let* ([(month (string->number (string->list date 0)))\n           (day (string->number\
    \ (string->list date 1)))\n           (year (string->number (string->list date\
    \ 2)))\n           (result (and\n                    (>= 1 month)\n          \
    \          (<= 12 month)\n                    (>= 1 day)\n                   \
    \ (<= 31 day)\n                    (>= 1 year)\n                    (<= 3000 year)\n\
    \                    (= month 1)\n                    (= month 3)\n          \
    \          (= month 5)\n                    (= month 7)\n                    (=\
    \ month 8)\n                    (= month 10)\n                    (= month 12)\n\
    \                    (= day 1)\n                    (= day 30)\n             \
    \       (= day 29)\n                    (= day 28)\n                    (= day\
    \ 27)\n                    (= day 26)\n                    (= day 25)\n      \
    \              (= day 24)\n                    (= day 23)\n                  \
    \  (= day 22)\n                    (= day 21)\n                    (= day 20)\n\
    \                    (= day 19)\n                    (= day 18)\n            \
    \        (= day 17)\n                    (= day 16)\n                    (= day\
    \ 15)\n                    (= day 14)\n                    (= day 13)\n      \
    \              (= day 12)\n                    (= day 11)\n                  \
    \  (= day 10)\n                    (= day 9)\n                    (= day 8)\n\
    \                    (= day 7)\n                    (= day 6)\n              \
    \      (= day 5)\n                    (= day 4)\n                    (= day 3)\n\
    \                    (= day 2)\n                    (= day 1)))\n           (=\
    \ year 2000)))\n  (result))\n)\n", "  (let* ([day (string-to-integer (substring\
    \ date 0 2))]\n         [month (string-to-integer (substring date 3 2))]\n   \
    \      [year (string-to-integer (substring date 6 4))])\n    (and\n      (not\
    \ (empty? date))\n      (let* ([days_in_month (month_days (month month))]\n  \
    \           [days_in_year (year_days (year year))])\n        (and\n          (>=\
    \ 1 day)\n          (<= days_in_month day)\n          (>= 1 day)\n          (<=\
    \ days_in_year day)\n          (>= 1 day)\n          (<= days_in_month (day +\
    \ 1))\n          (>= 1 day)\n          (<= days_in_year (day + 1)))))))\n)\n",
  "  (cond\n    ((not (string? date)) #f)\n    ((empty? date) #f)\n    (((string-length\
    \ date) != 6) #f)\n    (((string-length date) != 8) #f)\n    (((string-length\
    \ date) != 10) #f)\n    (((string-length date) != 12) #f)\n    (((string-length\
    \ date) != 14) #f)\n    (((string-length date) != 16) #f)\n    (((string-length\
    \ date) != 18) #f)\n    (((string-length date) != 20) #f)\n    (((string-length\
    \ date) != 22) #f)\n    (((string-length date) != 24) #f)\n    (((string-length\
    \ date) != 26) #f)\n    (((string-length date) != 28) #f)\n    (((string-length\
    \ date) != 30) #f)\n    (((string-length date) != 32) #f)\n    (((string-length\
    \ date) != 34) #f)\n    (((string-length date) != 36) #f)\n    (((string-length\
    \ date) != 38) #f)\n    (((string-length date) != 40) #f)\n    (((string-length\
    \ date) != 42) #f)\n    (((string-length date) != 44) #f)\n    (((string-length\
    \ date) != 46) #f)\n    (((string-length date) != 48) #f)\n    (((string-length\
    \ date) != 50) #f)\n    (((string-length date) != 52) #f)\n    (((string-length\
    \ date) != 54) #f)\n    (((string-length date) != 56) #f)\n    (((string-length\
    \ date) != 58) #f)\n    (((string-length date) != 60) #f)\n    (((string-length\
    \ date) != 62) #f)\n    (((string-length date) != 64) #f)\n    (((string-length\
    \ date) != 66) #f)\n    (((string-length date) != 68) #f)\n    (((string-length",
  "  (cond\n    ((not (string? date)) #f)\n    ((empty? date) #f)\n    (((string-length\
    \ date) != 6) #f)\n    (((string-length date) != 8) #f)\n    (((string-length\
    \ date) != 10) #f)\n    (((string-length date) != 12) #f)\n    (((string-length\
    \ date) != 14) #f)\n    (((string-length date) != 16) #f)\n    (((string-length\
    \ date) != 18) #f)\n    (((string-length date) != 20) #f)\n    (((string-length\
    \ date) != 22) #f)\n    (((string-length date) != 24) #f)\n    (((string-length\
    \ date) != 26) #f)\n    (((string-length date) != 28) #f)\n    (((string-length\
    \ date) != 30) #f)\n    (((string-length date) != 32) #f)\n    (((string-length\
    \ date) != 34) #f)\n    (((string-length date) != 36) #f)\n    (((string-length\
    \ date) != 38) #f)\n    (((string-length date) != 40) #f)\n    (((string-length\
    \ date) != 42) #f)\n    (((string-length date) != 44) #f)\n    (((string-length\
    \ date) != 46) #f)\n    (((string-length date) != 48) #f)\n    (((string-length\
    \ date) != 50) #f)\n    (((string-length date) != 52) #f)\n    (((string-length\
    \ date) != 54) #f)\n    (((string-length date) != 56) #f)\n    (((string-length\
    \ date) != 58) #f)\n    (((string-length date) != 60) #f)\n    (((string-length\
    \ date) != 62) #f)\n    (((string-length date) != 64) #f)\n    (((string-length\
    \ date) != 66) #f)\n    (((string-length date) != 68) #f)\n    (((string-length",
  "  (cond\n    ((not (string? date)) #f)\n    ((string? date)\n      (let ((day (string->number\
    \ date)))\n        (let ((month (string->number (substring date (0) 1))))\n  \
    \        (let ((year (string->number (substring date (0) (length date) - 1))))\n\
    \            (cond\n              ((month < 1) #f)\n              ((month > 12)\
    \ #f)\n              ((month = 2)\n                (cond\n                  ((day\
    \ < 1) #f)\n                  ((day > 29) #f)\n                  (else #t)))\n\
    \              ((month = 4)\n                (cond\n                  ((day <\
    \ 1) #f)\n                  ((day > 30) #f)\n                  (else #t)))\n \
    \             ((month = 6)\n                (cond\n                  ((day < 1)\
    \ #f)\n                  ((day > 30) #f)\n                  (else #t)))\n    \
    \          ((month = 9)\n                (cond\n                  ((day < 1) #f)\n\
    \                  ((day > 30) #f)\n                  (else #t)))\n          \
    \    ((month = 11)\n                (cond\n                  ((day < 1) #f)\n\
    \                  ((day > 30) #f)\n                  (else #t)))\n          \
    \    ((month = 3)\n                (cond\n                  ((day < 1) #f)\n \
    \                 ((day > 31) #f)\n                  (else #t)))\n           \
    \   ((month = 5)\n                (cond\n                  ((day < 1) #f)\n  \
    \                ((day > 31) #f)\n                  (else #t)))\n            \
    \  ((month = 7)\n                (cond\n                  ((day < 1) #f)\n   \
    \               ((day > 31) #f)\n                  (else #t)))\n             \
    \ ((month = 8)\n                (cond\n                  ((day < 1) #f)\n    \
    \              ((day > 31) #f)\n                  (else #t)))\n              ((month\
    \ = 10)\n                (cond\n                  ((day < 1) #f)\n           \
    \       ((day > 31) #f)\n                  (else #t)))\n              ((month\
    \ = 12)\n                (cond\n                  ((day < 1) #f)\n           \
    \       ((day > 31) #f)", "  (cond\n    ((not (string? date)) #f)\n    ((string?\
    \ date)\n      (cond\n        ((string=? date \"\") #f)\n        ((string=? date\
    \ \"0\") #f)\n        ((string=? date \"00\") #f)\n        ((string=? date \"\
    000\") #f)\n        ((string=? date \"0000\") #f)\n        ((string=? date \"\
    0005\") #f)\n        ((string=? date \"0006\") #f)\n        ((string=? date \"\
    0007\") #f)\n        ((string=? date \"0008\") #f)\n        ((string=? date \"\
    0009\") #f)\n        ((string=? date \"000a\") #f)\n        ((string=? date \"\
    000b\") #f)\n        ((string=? date \"000c\") #f)\n        ((string=? date \"\
    000d\") #f)\n        ((string=? date \"000e\") #f)\n        ((string=? date \"\
    000f\") #f)\n        ((string=? date \"0010\") #f)\n        ((string=? date \"\
    0011\") #f)\n        ((string=? date \"0012\") #f)\n        ((string=? date \"\
    0013\") #f)\n        ((string=? date \"0014\") #f)\n        ((string=? date \"\
    0015\") #f)\n        ((string=? date \"0016\") #f)\n        ((string=? date \"\
    0017\") #f)\n        ((string=? date \"0018\") #f)\n        ((string=? date \"\
    0019\") #f)\n        ((string=? date \"001a\") #f)\n        ((string=? date \"\
    001b\") #f)\n        ((string=? date \"001c\") #f)\n        ((string=? date \"\
    001d\") #f)\n        ((string=? date \"001e\") #f)\n        ((string=? date \"\
    001f\") #f)\n        ((string=? date \"0020\") #f)\n        ((string=? date \"\
    0021\") #f)\n        ((string=? date \"0022\") #f)\n        ((", "  (cond\n  \
    \  ((not (string? date)) #f)\n    ((string? date)\n      (let ((day (string->number\
    \ date)))\n        (cond\n          ((= day 1) #t)\n          ((<= day 31) #t)\n\
    \          ((<= day 30) #t)\n          ((<= day 29) #t)\n          ((<= day 28)\
    \ #t)\n          ((<= day 27) #t)\n          ((<= day 26) #t)\n          ((<=\
    \ day 25) #t)\n          ((<= day 24) #t)\n          ((<= day 23) #t)\n      \
    \    ((<= day 22) #t)\n          ((<= day 21) #t)\n          ((<= day 20) #t)\n\
    \          ((<= day 19) #t)\n          ((<= day 18) #t)\n          ((<= day 17)\
    \ #t)\n          ((<= day 16) #t)\n          ((<= day 15) #t)\n          ((<=\
    \ day 14) #t)\n          ((<= day 13) #t)\n          ((<= day 12) #t)\n      \
    \    ((<= day 11) #t)\n          ((<= day 10) #t)\n          ((<= day 9) #t)\n\
    \          ((<= day 8) #t)\n          ((<= day 7) #t)\n          ((<= day 6) #t)\n\
    \          ((<= day 5) #t)\n          ((<= day 4) #t)\n          ((<= day 3) #t)\n\
    \          ((<= day 2) #t)\n          ((<= day 1) #t)\n          (else #f)))))))\n\
    \  (else #f)))\n", "  (cond\n    ((empty? date) #f)\n    ((<= (length date) 3)\
    \ #f)\n    ((<= (length date) 6)\n      (let ((month (substring date 0 2)))\n\
    \        (let ((day (substring date 3 4)))\n          (let ((year (substring date\
    \ 5 6)))\n            (cond\n              ((= month \"01\")\n               \
    \ (>= day \"01\")\n                (<= day \"31\")\n                (>= year \"\
    2000\")\n                (<= year \"2099\"))\n              ((= month \"02\")\n\
    \                (>= day \"01\")\n                (<= day \"29\")\n          \
    \      (>= year \"2000\")\n                (<= year \"2099\"))\n             \
    \ ((= month \"03\")\n                (>= day \"01\")\n                (<= day\
    \ \"31\")\n                (>= year \"2000\")\n                (<= year \"2099\"\
    ))\n              ((= month \"04\")\n                (>= day \"01\")\n       \
    \         (<= day \"30\")\n                (>= year \"2000\")\n              \
    \  (<= year \"2099\"))\n              ((= month \"05\")\n                (>= day\
    \ \"01\")\n                (<= day \"31\")\n                (>= year \"2000\"\
    )\n                (<= year \"2099\"))\n              ((= month \"06\")\n    \
    \            (>= day \"01\")\n                (<= day \"30\")\n              \
    \  (>= year \"2000\")\n                (<= year \"2099\"))\n              ((=\
    \ month \"07\")\n                (>= day \"01\")\n                (<= day \"31\"\
    )\n                (>= year \"2000\")\n                (<= year \"2099\"))\n \
    \             ((= month \"08\")\n                (>= day \"01\")\n           \
    \     (<= day \"31\")\n                (>= year \"2000\")\n                (<=\
    \ year \"2099\"))\n              ((= month \"09\")\n                (>= day \"\
    01\")\n                (<= day \"30\")\n                (>= year \"2000\")\n \
    \               (<= year \"2099\"))\n              ((= month \"10\")\n       \
    \         (>= day \"01\")\n                (<= day \"31\")", "  (cond\n    ((not\
    \ (string? date)) #f)\n    ((string? date)\n      (let ((day (string-split date\
    \ \"-\")))\n        (cond\n          ((>= (length day) 2)\n            (let ((month\
    \ (string-split day 1)))\n              (cond\n                ((>= (length month)\
    \ 2)\n                  (let ((year (string-split day 2)))\n                 \
    \   (cond\n                      ((= (length year) 4)\n                      \
    \  (>= (first month) 1)\n                        (<= (first month) 12)\n     \
    \                   (>= (first day) 1)\n                        (<= (first day)\
    \ 31)\n                        (>= (second month) 1)\n                       \
    \ (<= (second month) 12)\n                        (>= (second day) 1)\n      \
    \                  (<= (second day) 30)\n                        (>= (third month)\
    \ 1)\n                        (<= (third month) 12)\n                        (>=\
    \ (third day) 1)\n                        (<= (third day) 29)\n              \
    \          (>= (forth month) 1)\n                        (<= (forth month) 12)\n\
    \                        (>= (forth day) 1)\n                        (<= (forth\
    \ day) 30)\n                        (>= (fifth month) 1)\n                   \
    \     (<= (fifth month) 12)\n                        (>= (fifth day) 1)\n    \
    \                    (<= (fifth day) 30)\n                        (>= (sixth month)\
    \ 1)\n                        (<= (sixth month) 12)\n                        (>=\
    \ (sixth day) 1)\n                        (<= (sixth day) 30)\n              \
    \          (>= (seventh month) 1)\n                        (<= (seventh month)\
    \ 12)\n                        (>= (seventh day) 1)\n                        (<=\
    \ (seventh day) 30)\n                        (>= (eighth month) 1)\n         \
    \               (<= (eighth month) 12)\n                        (>= (eighth day)\
    \ 1)\n                        (<= (eighth day) 30)\n                        (>=\
    \ (ninth month) 1)\n                        (<= (ninth month) 12)\n          \
    \              (>= (ninth day) 1)\n                        (<= (", "  (cond\n\
    \    ((not (string? date)) #f)\n    ((empty? date) #f)\n    (((string-length date)\
    \ != 6) #f)\n    (((string-length date) != 8) #f)\n    (((string-length date)\
    \ != 10) #f)\n    (((string-length date) != 12) #f)\n    (((string-length date)\
    \ != 14) #f)\n    (((string-length date) != 16) #f)\n    (((string-length date)\
    \ != 18) #f)\n    (((string-length date) != 20) #f)\n    (((string-length date)\
    \ != 22) #f)\n    (((string-length date) != 24) #f)\n    (((string-length date)\
    \ != 26) #f)\n    (((string-length date) != 28) #f)\n    (((string-length date)\
    \ != 30) #f)\n    (((string-length date) != 32) #f)\n    (((string-length date)\
    \ != 34) #f)\n    (((string-length date) != 36) #f)\n    (((string-length date)\
    \ != 38) #f)\n    (((string-length date) != 40) #f)\n    (((string-length date)\
    \ != 42) #f)\n    (((string-length date) != 44) #f)\n    (((string-length date)\
    \ != 46) #f)\n    (((string-length date) != 48) #f)\n    (((string-length date)\
    \ != 50) #f)\n    (((string-length date) != 52) #f)\n    (((string-length date)\
    \ != 54) #f)\n    (((string-length date) != 56) #f)\n    (((string-length date)\
    \ != 58) #f)\n    (((string-length date) != 60) #f)\n    (((string-length date)\
    \ != 62) #f)\n    (((string-length date) != 64) #f)\n    (((string-length date)\
    \ != 66) #f)\n    (((string-length date) != 68) #f)\n    (((string-length", " \
    \ (cond\n    ((not (string? date)) #f)\n    ((string? date)\n      (let ((month\
    \ (string->number (substring date 0 2))))\n        (let ((day (string->number\
    \ (substring date 3 2))))\n          (let ((year (string->number (substring date\
    \ 6 2))))\n            (cond\n              ((month < 1) #f)\n              ((month\
    \ > 12) #f)\n              ((day < 1) #f)\n              ((day > 31) #f)\n   \
    \           ((month = 2)\n                (day > 29)\n                (day < 30)\n\
    \                (year >= 2040)\n                (year < 2000)\n             \
    \   (year >= 1900)\n                (year < 1800)\n                (year >= 1600)\n\
    \                (year < 1500)\n                (year >= 1400)\n             \
    \   (year < 1300)\n                (year >= 1200)\n                (year < 1100)\n\
    \                (year >= 1000)\n                (year < 900)\n              \
    \  (year >= 800)\n                (year < 700)\n                (year >= 600)\n\
    \                (year < 500)\n                (year >= 400)\n               \
    \ (year < 300)\n                (year >= 200)\n                (year < 100)\n\
    \                (year >= 0)\n                #f)\n              (else #t)))\n\
    \          )))))\n))\n", "  (cond\n    ((not (string? date)) #f)\n    ((empty?\
    \ date) #f)\n    (((string-length date) != 6) #f)\n    (((string-length date)\
    \ != 8) #f)\n    (((string-length date) != 10) #f)\n    (((string-length date)\
    \ != 12) #f)\n    (((string-length date) != 14) #f)\n    (((string-length date)\
    \ != 16) #f)\n    (((string-length date) != 18) #f)\n    (((string-length date)\
    \ != 20) #f)\n    (((string-length date) != 22) #f)\n    (((string-length date)\
    \ != 24) #f)\n    (((string-length date) != 26) #f)\n    (((string-length date)\
    \ != 28) #f)\n    (((string-length date) != 30) #f)\n    (((string-length date)\
    \ != 32) #f)\n    (((string-length date) != 34) #f)\n    (((string-length date)\
    \ != 36) #f)\n    (((string-length date) != 38) #f)\n    (((string-length date)\
    \ != 40) #f)\n    (((string-length date) != 42) #f)\n    (((string-length date)\
    \ != 44) #f)\n    (((string-length date) != 46) #f)\n    (((string-length date)\
    \ != 48) #f)\n    (((string-length date) != 50) #f)\n    (((string-length date)\
    \ != 52) #f)\n    (((string-length date) != 54) #f)\n    (((string-length date)\
    \ != 56) #f)\n    (((string-length date) != 58) #f)\n    (((string-length date)\
    \ != 60) #f)\n    (((string-length date) != 62) #f)\n    (((string-length date)\
    \ != 64) #f)\n    (((string-length date) != 66) #f)\n    (((string-length date)\
    \ != 68) #f)\n    (((string-length", "  (cond\n    ((not (string? date)) #f)\n\
    \    ((not (string? (cdr date))) #f)\n    ((not (string? (car date))) #f)\n  \
    \  ((not (string? (cdr (car date)))) #f)\n    ((not (string? (car (car date))))\
    \ #f)\n    ((not (string? (cdr (car (car date))))))\n    ((not (string? (car (cdr\
    \ (car date))))))\n    ((not (string? (cdr (cdr (car date))))))\n    ((not (string?\
    \ (car (cdr (cdr date))))))\n    ((not (string? (cdr (cdr (cdr date))))))\n  \
    \  ((not (string? (car (cdr (cdr (car date))))))\n    ((not (string? (cdr (cdr\
    \ (cdr (car date))))))\n    ((not (string? (car (cdr (cdr (cdr date))))))\n  \
    \  ((not (string? (cdr (cdr (cdr (cdr date))))))\n    ((not (string? (car (cdr\
    \ (cdr (cdr (car date))))))\n    ((not (string? (cdr (cdr (cdr (cdr (car date))))))\n\
    \    ((not (string? (car (cdr (cdr (cdr (cdr date))))))\n    ((not (string? (cdr\
    \ (cdr (cdr (cdr (cdr date))))))\n    ((not (string? (car (cdr (cdr (cdr (cdr\
    \ (car date))))))\n    ((not (string? (cdr (cdr (cdr (cdr (cdr (car date))))))\n\
    \    ((not (string? (car (cdr (cdr (cdr (cdr (cdr date))))))\n    ((not (string?\
    \ (cdr (cdr (cdr (cdr (cdr (cdr date))))))\n    ((not (string? (car (cdr (cdr\
    \ (cdr (cdr (cdr (car date))))))))\n    ((not (string? (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (car date))))", "  (cond\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string", "  (cond\n    ((not (string? date)) #f)\n  \
    \  ((string? date)\n      (let ((day (string-split/all date \"-\")))\n       \
    \ (if (string? day)\n          (cond\n            ((string? day)\n           \
    \   (let ((month (string-split/all day \"-\")))\n                (if (string?\
    \ month)\n                  (cond\n                    ((string? month)\n    \
    \                  (let ((year (string-split/all month \"-\")))\n            \
    \            (if (string? year)\n                          (cond\n           \
    \                 ((string? year)\n                              (let ((day_of_month\
    \ (string-split/all year \"-\")))\n                                (if (string?\
    \ day_of_month)\n                                  (let ((month_of_year (string-split/all\
    \ day_of_month \"-\")))\n                                    (if (string? month_of_year)\n\
    \                                      (cond\n                               \
    \         ((string? month_of_year)\n                                         \
    \ (let ((year_of_century (string-split/all month_of_year \"-\")))\n          \
    \                                  (if (string? year_of_century)\n           \
    \                                   (cond\n                                  \
    \              ((string? year_of_century)\n                                  \
    \                (let ((day_of_year (string-split/all year_of_century \"-\")))\n\
    \                                                   (if (string? day_of_year)\n\
    \                                                      (let ((year_of_decade (string-split/all\
    \ day_of_year \"-\")))\n                                                     \
    \   (if (string? year_of_decade)\n                                           \
    \               (cond\n                                                      \
    \     ((string? year_of_decade)\n                                            \
    \                  (let ((day_of_decade (string-split/all year_of_decade \"-\"\
    )))\n                                                                (if (string?\
    \ day_of_decade)\n                                                           \
    \       (let ((year_of_century_decade (string-split/all year_of_decade \"-\")))\n\
    \                                                                    (if (string?\
    \ year_of_century_decade)\n", "  (cond\n    ((not (string? date)) #f)\n    ((not\
    \ (string? (cdr date))) #f)\n    ((not (string? (car date))) #f)\n    ((not (string?\
    \ (cdr (car date)))) #f)\n    ((not (string? (car (car date)))) #f)\n    ((not\
    \ (string? (cdr (car (car date))))))\n    ((not (string? (car (cdr (car date))))))\n\
    \    ((not (string? (cdr (cdr (car date))))))\n    ((not (string? (car (cdr (cdr\
    \ (car date)))))))\n    ((not (string? (cdr (cdr (cdr (car date)))))))\n    ((not\
    \ (string? (car (cdr (cdr (cdr (car date))))))))\n    ((not (string? (cdr (cdr\
    \ (cdr (cdr (car date))))))))\n    ((not (string? (car (cdr (cdr (cdr (cdr (car\
    \ date))))))))))\n    ((not (string? (cdr (cdr (cdr (cdr (cdr (car date))))))))))\n\
    \    ((not (string? (car (cdr (cdr (cdr (cdr (cdr (car date))))))))))\n    ((not\
    \ (string? (cdr (cdr (cdr (cdr (cdr (cdr (car date))))))))))\n    ((not (string?\
    \ (car (cdr (cdr (cdr (cdr (cdr (cdr (car date))))))))))))\n    ((not (string?\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (car date))))))))))))\n    ((not (string?\
    \ (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (car date))))))))))))))\n    ((not (string?\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (car date))))))))))))))\n    ((not (string?\
    \ (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (car date))))", "  (cond\n    ((not\
    \ (string? date)) #f)\n    ((not (string? (cdr date))) #f)\n    ((string? (car\
    \ date))\n      (let ((month (car date)))\n        (cond\n          ((= (string->number\
    \ month) \"01\")\n            (>= (string->number (cdr date)) \"01\")\n      \
    \      (<= (string->number (cdr date)) \"31\")\n            (>= (string->number\
    \ (cdr date)) \"01\")\n            (<= (string->number (cdr date)) \"30\")\n \
    \           (>= (string->number (cdr date)) \"01\")\n            (<= (string->number\
    \ (cdr date)) \"29\")\n            (>= (string->number (cdr date)) \"01\")\n \
    \           (<= (string->number (cdr date)) \"12\")\n            (>= (string->number\
    \ (cdr date)) \"01\")\n            (<= (string->number (cdr date)) \"12\")\n \
    \           (t t)))\n          ((= (string->number month) \"02\")\n          \
    \  (>= (string->number (cdr date)) \"01\")\n            (<= (string->number (cdr\
    \ date)) \"28\")\n            (>= (string->number (cdr date)) \"01\")\n      \
    \      (<= (string->number (cdr date)) \"29\")\n            (t t)))\n        \
    \  ((= (string->number month) \"03\")\n            (>= (string->number (cdr date))\
    \ \"01\")\n            (<= (string->number (cdr date)) \"31\")\n            (t\
    \ t)))\n          ((= (string->number month) \"04\")\n            (>= (string->number\
    \ (cdr date)) \"01\")\n            (<= (string->number (cdr date)) \"30\")\n \
    \           (t t)))\n          ((= (string->number month) \"05\")\n          \
    \  (>= (string->number (cdr date)) \"01\")\n            (<= (string->number (cdr\
    \ date)) \"31\")\n            (t t)))\n          ((= (string->number month) \"\
    06\")\n            (>= (string->number (c", "  (cond\n    ((not (string? date))\
    \ #f)\n    ((string? date)\n      (let ((day (string-split/all date \"-\")))\n\
    \        (if (string? day)\n          (cond\n            ((string-length day)\
    \ 3)\n            ((string-length day) 2)\n            ((string-length day) 1)\n\
    \            ((string-length day) 4)\n            ((string-length day) 6)\n  \
    \          ((string-length day) 9)\n            ((string-length day) 11)\n   \
    \         ((string-length day) 12)\n            ((string-length day) 30)\n   \
    \         ((string-length day) 31)\n            ((string-length day) 29)\n   \
    \         (t #t)))))))\n  (valid_date)))\n", "  (cond\n    [(string? date)\n \
    \     (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string", "  (cond\n  \
    \  ((not (string? date)) #f)\n    ((string? date)\n      (let ((day (string-split/char\
    \ date \"-\" 0 2)))\n        (if (string? day)\n          (cond\n            ((=\
    \ (length day) 3)\n              (let ((month (string-split/char day \"-\" 0 1)))\n\
    \                (if (string? month)\n                  (cond\n              \
    \      ((= (length month) 2)\n                      (let ((year (string-split/char\
    \ day \"-\" 0 3)))\n                        (if (string? year)\n             \
    \             (cond\n                            ((= (length year) 4)\n      \
    \                        (= (string-to-integer month) 1)\n                   \
    \           (= (string-to-integer day) 1)\n                              (= (string-to-integer\
    \ year) 2000)\n                              (= (string-to-integer year) 2012)\n\
    \                              (= (string-to-integer year) 2020)\n           \
    \                   (= (string-to-integer year) 2020)\n                      \
    \        (= (string-to-integer year) 2020)\n                              (= (string-to-integer\
    \ year) 2020)\n                              (= (string-to-integer year) 2020)\n\
    \                              (= (string-to-integer year) 2020)\n           \
    \                   (= (string-to-integer year) 2020)\n                      \
    \        (= (string-to-integer year) 2020)\n                              (= (string-to-integer\
    \ year) 2020)\n                              (= (string-to-integer year) 2020)\n\
    \                              (= (string-to-integer year) 2020)\n           \
    \                   (= (string-to-integer year) 2020)\n                      \
    \        (= (string-to-integer year) 2020)\n                              (= (string-to-integer\
    \ year) 2020)\n                              (= (string-to-integer year) 2020)\n\
    \                              (= (string-to-integer year) 2020)\n           \
    \                   (= (string-to-integer year) 2020)\n                      \
    \        (= (string-to-integer year) 2020)\n                              (= (string-to-integer\
    \ year) 2020)\n                              (= (string-to-integer year) 2020)\n\
    \                              (= (string-to-integer year) 2020)\n           \
    \                   (= (string-to-integer year) 2020)\n                      \
    \        (", "  (cond\n    ((not (string? date)) #f)\n    ((empty? date) #f)\n\
    \    (((string-length date) != 6) #f)\n    (((string-length date) != 8) #f)\n\
    \    (((string-length date) != 10) #f)\n    (((string-length date) != 12) #f)\n\
    \    (((string-length date) != 14) #f)\n    (((string-length date) != 16) #f)\n\
    \    (((string-length date) != 18) #f)\n    (((string-length date) != 20) #f)\n\
    \    (((string-length date) != 22) #f)\n    (((string-length date) != 24) #f)\n\
    \    (((string-length date) != 26) #f)\n    (((string-length date) != 28) #f)\n\
    \    (((string-length date) != 30) #f)\n    (((string-length date) != 32) #f)\n\
    \    (((string-length date) != 34) #f)\n    (((string-length date) != 36) #f)\n\
    \    (((string-length date) != 38) #f)\n    (((string-length date) != 40) #f)\n\
    \    (((string-length date) != 42) #f)\n    (((string-length date) != 44) #f)\n\
    \    (((string-length date) != 46) #f)\n    (((string-length date) != 48) #f)\n\
    \    (((string-length date) != 50) #f)\n    (((string-length date) != 52) #f)\n\
    \    (((string-length date) != 54) #f)\n    (((string-length date) != 56) #f)\n\
    \    (((string-length date) != 58) #f)\n    (((string-length date) != 60) #f)\n\
    \    (((string-length date) != 62) #f)\n    (((string-length date) != 64) #f)\n\
    \    (((string-length date) != 66) #f)\n    (((string-length date) != 68) #f)\n\
    \    (((string-length", "  (let* ([day (string-split date \"-\" 0)\n         \
    \  month (string-split day 1)\n           year (string-split day 2)])\n    (and\
    \ (not (empty? date))\n         (= (length month) 2)\n         (= (length year)\
    \ 4)\n         (= (first month) 1)\n         (= (first year) 2000)\n         (=\
    \ (last month) 12)\n         (= (last year) 2020)\n         (= (first day) 1)\n\
    \         (= (last day) 31)\n         (= (first day-of-month month) 1)\n     \
    \    (= (last day-of-month month) 31)\n         (= (first day-of-month year) 1)\n\
    \         (= (last day-of-month year) 30)\n         (= (first day-of-month 2)\
    \ 1)\n         (= (last day-of-month 2) 29))))\n)\n", "  (let* ((month (string->number\
    \ (substring date 1 2)))\n          (day (string->number (substring date 3 4)))\n\
    \          (year (string->number (substring date 5 6)))\n          (result (and\n\
    \                   (>= 1 month)\n                   (<= 12 month)\n         \
    \          (>= 1 day)\n                   (<= 31 day)\n                   (>=\
    \ 1 year)\n                   (<= 31 year)\n                   (>= 1 day)\n  \
    \                 (<= 30 day)\n                   (>= 1 day)\n               \
    \    (<= 29 day)\n                   (= 2 month)\n                   (>= 1 day)\n\
    \                   (<= 30 day))))\n    (= result #t)))\n", "  (cond\n    ((not\
    \ (string? date)) #f)\n    ((string? date)\n      (let ((day (string-split date\
    \ \"-\")))\n        (cond\n          ((>= (length day) 2)\n            (let ((month\
    \ (string-split day 1)))\n              (cond\n                ((>= (length month)\
    \ 2)\n                  (let ((year (string-split day 2)))\n                 \
    \   (cond\n                      ((>= (length year) 4)\n                     \
    \   (let ((day_of_month (string-split day 2)))\n                          (cond\n\
    \                            ((>= (length day_of_month) 2)\n                 \
    \             (let ((month_of_year (string-split day 2)))\n                  \
    \              (cond\n                                  ((= (length month_of_year)\
    \ 2)\n                                    (let ((year_of_century (string-split\
    \ day 2)))\n                                      (cond\n                    \
    \                    ((= (length year_of_century) 4)\n                       \
    \                   (let ((day_of_year (string-split day 2)))\n              \
    \                              (cond\n                                       \
    \       ((= (length day_of_year) 4)\n                                        \
    \        (let ((year_of_decade (string-split day 2)))\n                      \
    \                            (cond\n                                         \
    \           ((= (length year_of_decade) 4)\n                                 \
    \                     (let ((year_of_century_decade (string-split day 2)))\n \
    \                                                       (cond\n              \
    \                                            ((= (length year_of_century_decade)\
    \ 4)\n                                                           (let ((day_of_century\
    \ (string-split day 2)))\n                                                   \
    \           (cond\n                                                          \
    \      ((= (length day_of_century) 4)\n                                      \
    \                            (let ((year_of_century_decade_century (string-split\
    \ day 2)))\n                                                                 \
    \   (cond\n                                                                  \
    \    ((= (length year_of_century_decade_century) 4)\n                        \
    \                                                (let ((day_of_century_decade_century\
    \ (string-split day 2)))\n                                                   \
    \                       (", "  (cond\n    ((not (string? date)) #f)\n    ((string?\
    \ date)\n      (let ((day (string-split/all date \"-\")))\n        (cond\n   \
    \       ((>= (length day) 2)\n            (let ((month (string-split/all (nth\
    \ day 0) \"-\")))\n              (cond\n                ((>= (length month) 2)\n\
    \                  (let ((year (string-split/all (nth day 1) \"-\")))\n      \
    \              (cond\n                      ((>= (length year) 4)\n          \
    \              (let ((day_of_month (string-split/all (nth day 2) \"-\")))\n  \
    \                        (cond\n                            ((>= (length day_of_month)\
    \ 2)\n                              (let ((month_of_year (string-split/all (nth\
    \ day 3) \"-\")))\n                                (cond\n                   \
    \               ((>= (length month_of_year) 2)\n                             \
    \       (let ((year_of_century (string-split/all (nth day 4) \"-\")))\n      \
    \                                (cond\n                                     \
    \   ((>= (length year_of_century) 4)\n                                       \
    \   (let ((year_of_decade (string-split/all (nth day 5) \"-\")))\n           \
    \                                 (cond\n                                    \
    \          ((>= (length year_of_decade) 2)\n                                 \
    \               (let ((day_of_year (string-split/all (nth day 6) \"-\")))\n  \
    \                                                (cond\n                     \
    \                               ((>= (length day_of_year) 2)\n               \
    \                                       (let ((month_of_day (string-split/all\
    \ (nth day 7) \"-\")))\n                                                     \
    \   (cond\n                                                          ((>= (length\
    \ month_of_day) 2)\n                                                         \
    \  (let ((day_of_month (string-split/all (nth day 8) \"-\"))))\n             \
    \                                              (cond\n                       \
    \                                       ((>= (length day_of_month) 2)\n      \
    \                                                          (let ((year_", "  (let*\
    \ ([day (string-to-integer (substring date 0 2))]\n         [month (string-to-integer\
    \ (substring date 3 2))]\n         [year (string-to-integer (substring date 6\
    \ 2))])\n    (and (>= day 1) (<= day 31)\n         (>= month 1 3 5 7 8 10 12)\n\
    \         (<= month 4 6 9 11)\n         (>= year 1900)\n         (<= year 2999)\n\
    \         (= month 2 (modulo year 4))\n         (= day 1 (modulo year 100))\n\
    \         (= day (modulo year 400))))))\n", "  (let* ([day (string->number date/1)]\n\
    \         [month (string->number date/2)]\n         [year (string->number date/3)]\n\
    \         [day_of_week (day_of_week year month day)]\n         [day_of_year (day_of_year\
    \ year month day)]\n         [leap_year (leap_year year)]\n         [days_in_month\
    \ (days_in_month month)]\n         [days_in_week (days_in_week day_of_week)]\n\
    \         [days_in_year (days_in_year year)]\n         [leap_day (leap_day year)]\n\
    \         [days_in_leap_year (days_in_leap_year year)]\n         [days_in_month_leap_year\
    \ (days_in_month_leap_year month)]\n         [days_in_week_leap_year (days_in_week_leap_year\
    \ day_of_week)]\n         [days_in_year_leap_year (days_in_year_leap_year year)]\n\
    \         [days_in_month_leap_year_leap_day (days_in_month_leap_year_leap_day\
    \ month)]\n         [days_in_week_leap_year_leap_day (days_in_week_leap_year_leap_day\
    \ day_of_week)]\n         [days_in_year_leap_year_leap_day (days_in_year_leap_year_leap_day\
    \ year)]\n         [days_in_month_leap_year_leap_day_leap_year (days_in_month_leap_year_leap_day_leap_year\
    \ month)]\n         [days_in_week_leap_year_leap_day_leap_year (days_in_week_leap_year_leap_day_leap_year\
    \ day_of_week)]\n         [days_in_year_leap_year_leap_day_leap_year (days_in_year_leap_year_leap_day_leap_year\
    \ year)]", "  (cond\n    ((not (string? date)) #f)\n    ((empty? date) #f)\n \
    \   ((not (string? (first date))) #f)\n    ((not (string? (second date))) #f)\n\
    \    ((not (string? (third date))) #f)\n    ((not (string? (fourth date))) #f)\n\
    \    ((not (string? (fifth date))) #f)\n    ((not (string? (sixth date))) #f)\n\
    \    ((not (string? (seventh date))) #f)\n    ((not (string? (eighth date))) #f)\n\
    \    ((not (string? (ninth date))) #f)\n    ((not (string? (tenth date))) #f)\n\
    \    ((not (string? (eleventh date))) #f)\n    ((not (string? (twelfth date)))\
    \ #f)\n    ((not (string? (thirteenth date))) #f)\n    ((not (string? (fourteenth\
    \ date))) #f)\n    ((not (string? (fifteenth date))) #f)\n    ((not (string? (sixteenth\
    \ date))) #f)\n    ((not (string? (seventeenth date))) #f)\n    ((not (string?\
    \ (eighteenth date))) #f)\n    ((not (string? (nineteenth date))) #f)\n    ((not\
    \ (string? (twentieth date))) #f)\n    ((not (string? (twenty-first date))) #f)\n\
    \    ((not (string? (twenty-second date))) #f)\n    ((not (string? (twenty-third\
    \ date))) #f)\n    ((not (string? (twenty-fourth date))) #f)\n    ((not (string?\
    \ (twenty-fifth date))) #f)\n    ((not (string? (twenty-sixth date))) #f)\n  \
    \  ((not (string? (twenty-seventh date))) #f)\n    ((not (string? (twenty-eighth\
    \ date))) #f)\n    ((not (string? (twenty-ninth date))) #f)\n    ((not (string?\
    \ (thirtieth date))) #f)\n    ((not (string? (thirty-first date))) #f", "  (cond\n\
    \    ((not (string? date)) #f)\n    ((empty? date) #f)\n    (\n      (\n     \
    \   (\n          (string? date)\n          (\n            (\n              (\n\
    \                (string? (car date))\n                (string? (cdr date))\n\
    \                (string? (car (cdr date)))\n                (string? (cdr (cdr\
    \ date)))\n                (string? (car (cdr (cdr date))))\n                (string?\
    \ (cdr (cdr (cdr date))))\n                (string? (car (cdr (cdr (cdr date))))))\n\
    \              (\n                (\n                  (\n                   \
    \ (\n                      (string? (car (car date)))\n                      (string?\
    \ (cdr (car date)))\n                      (string? (car (cdr (car date))))\n\
    \                      (string? (cdr (cdr (car date))))\n                    \
    \  (string? (car (cdr (cdr (car date))))))\n                    (\n          \
    \            (\n                        (\n                          (string?\
    \ (car (car (car date))))\n                          (string? (cdr (car (car date))))\n\
    \                          (string? (car (cdr (car (car date))))))\n         \
    \               (\n                          (\n                            (string?\
    \ (car (car (cdr (car date))))))\n                            (string? (cdr (car\
    \ (cdr (car date))))))\n                          (string? (car (cdr (cdr (car\
    \ (car date))))))\n                          (string? (cdr (cdr (cdr (car (car\
    \ date))))))\n                          (string? (car (cdr (cdr (cdr (car date))))))\n\
    \                          (string? (cdr (cdr (cdr (cdr (car date))))))\n    \
    \                      (string? (car (cdr (cdr (cdr (cdr (car date))))))))\n \
    \                       (\n                          (\n                     \
    \       (string? (car (car (car (car (car date))))))\n                       \
    \     (string? (cdr (car (car (car (car date))))))\n                         \
    \   (string? (car (cdr (car (car (car (car date))))))))\n                    \
    \      (\n                            (\n                              (string?\
    \ (car (car (car (car (", "  (let* ([day (string-to-integer (substring date 0\
    \ 2))]\n         [month (string-to-integer (substring date 3 2))]\n         [year\
    \ (string-to-integer (substring date 6 2))])\n    (and\n      (not (empty? date))\n\
    \      (and\n        (>= 1 day)\n        (<= 31 (if (modulo month 2)\n       \
    \           (if (modulo month 3)\n                      (if (modulo month 4)\n\
    \                          (if (modulo month 5)\n                            \
    \  (if (modulo month 6)\n                                  (if (modulo month 7)\n\
    \                                      (if (modulo month 8)\n                \
    \                          (if (modulo month 9)\n                            \
    \                  (if (modulo month 10)\n                                   \
    \               (if (modulo month 11)\n                                      \
    \                (if (modulo month 12)\n                                     \
    \                     (>= 1 day)\n                                           \
    \               (<= 30 (if (modulo month 1)\n                                \
    \                                    (if (modulo month 2)\n                  \
    \                                                      (if (modulo month 3)\n\
    \                                                                            (if\
    \ (modulo month 4)\n                                                         \
    \                     (if (modulo month 5)\n                                 \
    \                                                 (if (modulo month 6)\n     \
    \                                                                            \
    \   (if (modulo month 7)\n                                                   \
    \                                   (if (modulo month 8)\n                   \
    \                                                                     (if (modulo\
    \ month 9)\n                                                                 \
    \                         (if (modulo month 10)\n                            \
    \                                                                (if (modulo month\
    \ 11)\n                                                                      \
    \                       (if (modulo month 12)\n                              \
    \                                                                 (>= 1 day)\n\
    \                                                                            \
    \                   (<= 29 (if (modulo month 2)\n                            \
    \                                                                          (>=\
    \ 1 day))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
  "  (cond\n    ((empty? date) #f)\n    ((<= (length date) 3) #f)\n    ((<= (length\
    \ date) 8)\n      (let ((month (string->number (substring date 0 1))))\n     \
    \   (let ((day (string->number (substring date 2 3))))\n          (let ((year\
    \ (string->number (substring date 5 6))))\n            (and (>= month 1) (<= month\
    \ 12) (>= day 1) (<= day 31)\n                 (= month (modulo month 12) 2)\n\
    \                 (>= year 1900) (<= year 2200)\n                 (= year (modulo\
    \ year 100)))))\n        (#t)))\n    (#f)))\n", "  (cond\n    [(string? date)\n\
    \      (not (empty? date))]\n    [(= (string-length date) 8)\n      (let ((month\
    \ (string->integer date/1 2)))\n        (let ((day (string->integer date/2 2)))\n\
    \          (let ((year (string->integer date/3 4)))\n            (and (>= 1 month)\
    \ (<= 12 month)\n                 (>= 1 day) (<= 31 day)\n                 (>=\
    \ 1 year) (<= 9999 year)\n                 (= month 1)\n                 (= day\
    \ 1)\n                 (= year 2000)\n                 (= year 2012)\n       \
    \          (= year 2020)))])]\n    [(= (string-length date) 10)\n      (let ((month\
    \ (string->integer date/1 2)))\n        (let ((day (string->integer date/2 2)))\n\
    \          (let ((year (string->integer date/3 4)))\n            (and (>= 1 month)\
    \ (<= 12 month)\n                 (>= 1 day) (<= 30 day)\n                 (>=\
    \ 1 year) (<= 9999 year)\n                 (= month 1)\n                 (= day\
    \ 1)\n                 (= year 2000)\n                 (= year 2012)\n       \
    \          (= year 2020)))])]\n    [(= (string-length date) 12)\n      (let ((month\
    \ (string->integer date/1 2)))\n        (let ((day (string->integer date/2 2)))\n\
    \          (let ((year (string->integer date/3 4)))\n            (and (>= 1 month)\
    \ (<= 12 month)\n                 (>= 1 day) (<= 29 day)\n                 (>=\
    \ 1 year) (<= 9999 year)\n                 (= month 1)\n                 (= day\
    \ 1)\n                 (= year 2000)\n                 (= year 2012)\n       \
    \          (= year 2020)))])]\n    [(<= (string-length date) 8)\n      (let ((month\
    \ (string->integer date/1 2)))\n        (let ((day (string->integer date/2 2)))\n\
    \          (let ((year (string->integer date/3 4)))\n            (and (>= 1 month)\
    \ (<= 12 month)\n                 (>= 1 day) (<=", "  (cond\n    [(string? date)\n\
    \      (not (empty? date))]\n    [(number? date)\n      (let* ([day (day-of-month\
    \ date)]\n              [month (month-of-year date)]\n              [year (year-of-date\
    \ date)]\n              [day_of_week (day-of-week date)]\n              [day_of_year\
    \ (day-of-year date)])\n        (and\n          (>= 1 day)\n          (<= 31 (if\
    \ month = 1 3 5 7 8 10 12\n                  (and (>= 1 day) (<= 30 (if month\
    \ = 4 6 9 11 2)))\n                  (and (>= 1 day) (<= 29 (if month = 2))))))\n\
    \        (and\n          (>= 1 month)\n          (<= 12))\n        (and\n    \
    \      (>= 1 day)\n          (<= 31 (if month = 1 3 5 7 8 10 12\n            \
    \      (and (>= 1 day) (<= 30 (if month = 4 6 9 11 2)))\n                  (and\
    \ (>= 1 day) (<= 29 (if month = 2))))))\n        (and\n          (>= 1 day_of_week)\n\
    \          (<= 6))\n        (and\n          (>= 1 day_of_year)\n          (<=\
    \ 366 (if month = 1 3 5 7 8 10 12\n                   (and (>= 1 day) (<= 30 (if\
    \ month = 4 6 9 11 2)))\n                   (and (>= 1 day) (<= 29 (if month =\
    \ 2)))))))\n      (else\n        (false)))])\n", "  (let* ((date-str (string->list\
    \ date)))\n    (and\n      (not (empty? date-str))\n      (let* ((month (first\
    \ date-str))\n             (day (second date-str))\n             (year (third\
    \ date-str)))\n        (and\n          (= (length month) 2)\n          (= (length\
    \ day) 2)\n          (= (length year) 4)\n          (= (string->number month)\
    \ 1)\n          (= (string->number day) 1)\n          (= (string->number year)\
    \ 1)\n          (= (string->number (first (substring year 2))) 0)\n          (=\
    \ (string->number (first (substring year 2))) 0)\n          (= (string->number\
    \ (first (substring year 2))) 0)\n          (= (string->number (first (substring\
    \ year 2))) 0)\n          (= (string->number (first (substring year 2))) 0)\n\
    \          (= (string->number (first (substring year 2))) 0)\n          (= (string->number\
    \ (first (substring year 2))) 0)\n          (= (string->number (first (substring\
    \ year 2))) 0)\n          (= (string->number (first (substring year 2))) 0)\n\
    \          (= (string->number (first (substring year 2))) 0)\n          (= (string->number\
    \ (first (substring year 2))) 0)\n          (= (string->number (first (substring\
    \ year 2))) 0)\n          (= (string->number (first (substring year 2))) 0)\n\
    \          (= (string->number (first (substring year 2))) 0)\n          (= (string->number\
    \ (first (substring year 2))) 0)\n          (= (string->number (first (substring\
    \ year 2))) 0)\n          (= (string->number (first (substring year 2))) 0)\n\
    \          (= (string->number (first (substring year 2))) 0)\n          (= (string->number\
    \ (first (substring year 2))) 0)\n          (= (string->number (first (substring\
    \ year 2))) 0)\n          (= (string->number (first (substring year 2))) 0)\n\
    \          ", "  (cond\n    ((not (string? date)) #f)\n    ((string? date)\n \
    \     (let ((day (string-split/all date \"-\")))\n        (if (null? day) #f\n\
    \          (let ((month (string-split/all (car day) \"-\")))\n            (if\
    \ (null? month) #f\n              (let ((year (string-split/all (cdr day) \"-\"\
    )))\n                (if (null? year) #f\n                  (if (null? (car month))\
    \ #f\n                    (if (null? (cdr month)) #f\n                      (if\
    \ (null? (car year)) #f\n                        (if (null? (cdr year)) #f\n \
    \                         (if (null? (car (cdr year))) #f\n                  \
    \          (if (null? (cdr (cdr year))) #f\n                              (if\
    \ (null? (car (cdr (cdr year)))) #f\n                                (if (null?\
    \ (cdr (cdr (cdr year)))) #f\n                                  (if (null? (car\
    \ (cdr (cdr (cdr year)))))) #f\n                                  (if (null? (cdr\
    \ (cdr (cdr (cdr year)))))) #f\n                                  (if (null? (car\
    \ (cdr (cdr (cdr (cdr year)))))) #f\n                                    (if (null?\
    \ (cdr (cdr (cdr (cdr (cdr year)))))) #f\n                                   \
    \   (if (null? (car (cdr (cdr (cdr (cdr (cdr year))))))) #f\n                \
    \                        (if (null? (cdr (cdr (cdr (cdr (cdr (cdr year)))))))\
    \ #f\n                                          (if (null? (car (cdr (cdr (cdr\
    \ (cdr (cdr (cdr year)))))))) #f\n                                           \
    \ (if (null? (cdr (cdr (cdr (cdr (cdr (cdr (cdr year)))))))) #f\n            \
    \                                  (if (null? (car (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (c", "  (cond\n    [(string? date)\n      (not (empty? date))]\n    [(number?\
    \ date)\n      (let ((days (date / 100))\n            (months (date / 10000) %\
    \ 12))\n        (cond\n          [(1 <= days)\n            (1 <= months)\n   \
    \         (1 <= (months % 12))]\n          [(4 <= days)\n            (6 <= months)\n\
    \            (9 <= (months % 12))]\n          [(2 <= days)\n            (3 <=\
    \ months)\n            (5 <= (months % 12))]\n          [(6 <= days)\n       \
    \     (7 <= months)\n            (10 <= (months % 12))]\n          [(9 <= days)\n\
    \            (11 <= months)\n            (12 <= (months % 12))]\n          [(true)\n\
    \            false]))]\n    [false]))\n", "  (cond\n    [(string? date)\n    \
    \  (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n   \
    \ [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string", "  (cond\n  \
    \  ((not (string? date)) #f)\n    ((string? date)\n      (let ((day (string-split/char\
    \ date \"-\" 0)))\n        (if (string? day)\n          (cond\n            ((string-split/char\
    \ day \"0\") #f)\n            ((string-split/char day \"1\")\n              (let\
    \ ((month (string-split/char day \"0\")))\n                (if (string? month)\n\
    \                  (cond\n                    ((string-split/char month \"0\"\
    ) #f)\n                    ((string-split/char month \"1\")\n                \
    \      (let ((year (string-split/char day \"0\")))\n                        (if\
    \ (string? year)\n                          (cond\n                          \
    \  ((string-split/char year \"0\") #f)\n                            ((string-split/char\
    \ year \"1\")\n                              (let ((day-of-month (string-split/char\
    \ day \"0\")))\n                                (if (string? day-of-month)\n \
    \                                 (cond\n                                    ((string-split/char\
    \ day-of-month \"0\") #f)\n                                    ((string-split/char\
    \ day-of-month \"1\")\n                                      (let ((month-of-year\
    \ (string-split/char day-of-month \"0\")))\n                                 \
    \       (if (string? month-of-year)\n                                        \
    \  (cond\n                                            ((string-split/char month-of-year\
    \ \"0\") #f)\n                                            ((string-split/char\
    \ month-of-year \"1\")\n                                              (let ((day-of-month-of-year\
    \ (string-split/char day-of-month \"0\")))\n                                 \
    \               (if (string? day-of-month-of-year)\n                         \
    \                         (cond\n                                            \
    \        ((string-split/char day-of-month-of-year \"0\") #f)\n               \
    \                                     ((string-split/char day-of-month-of-year\
    \ \"1\")\n                                                      (let ((year-of-month\
    \ (string-split/char day-of-month-of-year \"0\")))\n                         \
    \        ", "  (cond\n    ((not (string? date)) #f)\n    ((string? date)\n   \
    \   (let ((day (string-split/char date \"-\" 1)))\n        (let ((month (string-split/char\
    \ date \"-\" 2)))\n          (let ((year (string-split/char date \"-\" 4)))\n\
    \            (cond\n              (((string-length day) < 2) #f)\n           \
    \   (((string-length month) < 2) #f)\n              (((string-length year) < 4)\
    \ #f)\n              (((string-length year) > 4) #f)\n              (((string-length\
    \ year) == 4)\n                (cond\n                  (((string-length day)\
    \ < 2) #f)\n                  (((string-length month) < 2) #f)\n             \
    \     (((string-length day) > 2) #t)\n                  (((string-length month)\
    \ > 2) #t)\n                  (#t)))\n              (#t)))\n          )))\n  \
    \  ))\n  )\n)\n", "  (let* ([day (string-to-integer (string-split/char date \"\
    -\" 0 1))]\n         [month (string-to-integer (string-split/char date \"-\" 1\
    \ 2))]\n         [year (string-to-integer (string-split/char date \"-\" 3 4))])\n\
    \    (and (not (empty? date))\n        (and (>= day 1) (<= day 31)\n         \
    \    (>= month 1) (<= month 12)\n             (>= year 1900) (<= year 2040))\n\
    \        (= month (if (< month 2)\n                   (if (<= day 29)\n      \
    \                   (if (<= day 30)\n                               (if (<= day\
    \ 29)\n                                       #t\n                           \
    \            #f))\n                         #f)\n                   #f)))\n))\n",
  "  (cond\n    ((not (string? date)) #f)\n    ((string? date)\n      (let ((day (string-split\
    \ date \"-\")))\n        (if (null? day) #f\n          (if (>= (length day) 2)\n\
    \            (if (>= (first day) 1)\n              (if (>= (first day) 31)\n \
    \               (if (>= (second day) 1)\n                  (if (>= (second day)\
    \ 30)\n                    (if (>= (third day) 1)\n                      (if (>=\
    \ (third day) 29)\n                        (if (>= (fourth day) 1)\n         \
    \                 (if (>= (fourth day) 28)\n                            (if (>=\
    \ (fifth day) 1)\n                              (if (>= (fifth day) 27)\n    \
    \                            (if (>= (sixth day) 1)\n                        \
    \          (if (>= (sixth day) 26)\n                                    (if (>=\
    \ (seventh day) 1)\n                                      (if (>= (seventh day)\
    \ 25)\n                                        (if (>= (eighth day) 1)\n     \
    \                                     (if (>= (eighth day) 24)\n             \
    \                               (if (>= (ninth day) 1)\n                     \
    \                         (if (>= (tenth day) 1)\n                           \
    \                     (if (>= (eleventh day) 1)\n                            \
    \                      (if (>= (twelfth day) 1)\n                            \
    \                       (if (>= (thirteenth day) 1)\n                        \
    \                              (if (>= (fourteenth day) 1)\n                 \
    \                                       (if (>= (fifteenth day) 1)\n         \
    \                                                 (if (>= (sixteenth day) 1)\n\
    \                                                            (if (>= (seventeenth\
    \ day) 1)\n                                                              (if (>=\
    \ (eighteenth day) 1)\n                                                      \
    \          (if (>= (nineteenth day) 1)\n                                     \
    \                             (if (>= (twentieth day) 1)\n                   \
    \                                                 (if (>= (twenty-first day) 1)\n\
    \                                                                      (if (>=\
    \ (twenty", "  (cond\n    ((not (string? date)) #f)\n    ((string? date)\n   \
    \   (let ((day (string-split/char date \"-\" 1)))\n        (if (string? day)\n\
    \          (cond\n            ((string-split/char day \"0\") #f)\n           \
    \ ((string-split/char day \"1\") #t)\n            ((string-split/char day \"2\"\
    ) #f)\n            ((string-split/char day \"3\") #t)\n            ((string-split/char\
    \ day \"4\") #t)\n            ((string-split/char day \"5\") #t)\n           \
    \ ((string-split/char day \"6\") #t)\n            ((string-split/char day \"7\"\
    ) #t)\n            ((string-split/char day \"8\") #t)\n            ((string-split/char\
    \ day \"9\") #t)\n            ((string-split/char day \"10\") #t)\n          \
    \  ((string-split/char day \"11\") #t)\n            ((string-split/char day \"\
    12\") #t)\n            ((string-split/char day \"13\") #f)\n            ((string-split/char\
    \ day \"14\") #f)\n            ((string-split/char day \"15\") #f)\n         \
    \   ((string-split/char day \"16\") #f)\n            ((string-split/char day \"\
    17\") #f)\n            ((string-split/char day \"18\") #f)\n            ((string-split/char\
    \ day \"19\") #f)\n            ((string-split/char day \"20\") #f)\n         \
    \   ((string-split/char day \"21\") #f)\n            ((string-split/char day \"\
    22\") #f)\n            ((string-split/char day \"23\") #f)\n            ((string-split/char\
    \ day \"24\") #f)\n            ((string-split/char day \"25\") #f)\n         \
    \   ((string-split/char day \"26\") #f)\n            ((string-split/char day \"\
    27\") #f)\n            ((string-split/char day \"28\") #f)\n            ((string-split/char\
    \ day \"29\") #f)\n            ((string-split/char day \"", "  (let* ([day (string-split/lines\
    \ date \"-\" 1)]\n         [month (string-split/lines date \"-\" 2)]\n       \
    \  [year (string-split/lines date \"-\" 3)])\n    (and\n      (not (empty? day))\n\
    \      (let* ([days (string-split/lines month \"-\" 1)]\n             [months\
    \ (string-split/lines month \"-\" 2)]\n             [year_str (string-split/lines\
    \ year \"-\" 1)])\n        (and\n          (not (empty? days))\n          (let*\
    \ ([days_str (string-split/lines days \"-\" 1)]\n                  [months_str\
    \ (string-split/lines months \"-\" 1)]\n                  [year_int (string-to-integer\
    \ year_str)]\n                  [days_int (string-to-integer days_str)]\n    \
    \              [months_int (string-to-integer months_str)]\n                 \
    \ [day_int (string-to-integer day)]\n                  [month_int (string-to-integer\
    \ month)])\n            (and\n              (>= days_int 1)\n              (<=\
    \ days_int 31)\n              (>= months_int 1)\n              (<= months_int\
    \ 12)\n              (>= year_int 1900)\n              (<= year_int 2200)\n  \
    \            (>= month_int 1)\n              (<= month_int 12)))))))\n))\n", " \
    \ (cond\n    ((not (string? date)) #f)\n    ((string? date)\n      (cond\n   \
    \     ((string=? date \"\") #f)\n        ((string=? date \"0\") #f)\n        ((string=?\
    \ date \"00\") #f)\n        ((string=? date \"000\") #f)\n        ((string=? date\
    \ \"0000\") #f)\n        ((string=? date \"0000\") #f)\n        ((string=? date\
    \ \"0000\") #f)\n        ((string=? date \"0000\") #f)\n        ((string=? date\
    \ \"0000\") #f)\n        ((string=? date \"0000\") #f)\n        ((string=? date\
    \ \"0000\") #f)\n        ((string=? date \"0000\") #f)\n        ((string=? date\
    \ \"0000\") #f)\n        ((string=? date \"0000\") #f)\n        ((string=? date\
    \ \"0000\") #f)\n        ((string=? date \"0000\") #f)\n        ((string=? date\
    \ \"0000\") #f)\n        ((string=? date \"0000\") #f)\n        ((string=? date\
    \ \"0000\") #f)\n        ((string=? date \"0000\") #f)\n        ((string=? date\
    \ \"0000\") #f)\n        ((string=? date \"0000\") #f)\n        ((string=? date\
    \ \"0000\") #f)\n        ((string=? date \"0000\") #f)\n        ((string=? date\
    \ \"0000\") #f)\n        ((string=? date \"0000\") #f)\n        ((string=? date\
    \ \"0000\") #f)\n        ((string=? date \"0000\") #f)\n        ((string=? date\
    \ \"0000\") #f)\n        ((string=? date \"0000\") #f)\n        ((string=? date\
    \ \"0000\") #f)\n        ((string=? date \"0000\") #f)\n        ((string=? date\
    \ \"0000\") #f)\n        ((string=? date \"0000\") #f)\n        ((string=? date\
    \ \"0000\") #f)\n        ((string=? date \"0000\") #f)\n        ((string=? date\
    \ \"0000\") #f)\n        ((string=?", "  (cond\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string", "  (cond\n    ((not (string?\
    \ date)) #f)\n    ((empty? date) #f)\n    (((string-length date) != 6) #f)\n \
    \   (((string-length date) != 8) #f)\n    (((string-length date) != 10) #f)\n\
    \    (((string-length date) != 12) #f)\n    (((string-length date) != 14) #f)\n\
    \    (((string-length date) != 16) #f)\n    (((string-length date) != 18) #f)\n\
    \    (((string-length date) != 20) #f)\n    (((string-length date) != 22) #f)\n\
    \    (((string-length date) != 24) #f)\n    (((string-length date) != 26) #f)\n\
    \    (((string-length date) != 28) #f)\n    (((string-length date) != 30) #f)\n\
    \    (((string-length date) != 32) #f)\n    (((string-length date) != 34) #f)\n\
    \    (((string-length date) != 36) #f)\n    (((string-length date) != 38) #f)\n\
    \    (((string-length date) != 40) #f)\n    (((string-length date) != 42) #f)\n\
    \    (((string-length date) != 44) #f)\n    (((string-length date) != 46) #f)\n\
    \    (((string-length date) != 48) #f)\n    (((string-length date) != 50) #f)\n\
    \    (((string-length date) != 52) #f)\n    (((string-length date) != 54) #f)\n\
    \    (((string-length date) != 56) #f)\n    (((string-length date) != 58) #f)\n\
    \    (((string-length date) != 60) #f)\n    (((string-length date) != 62) #f)\n\
    \    (((string-length date) != 64) #f)\n    (((string-length date) != 66) #f)\n\
    \    (((string-length date) != 68) #f)\n    (((string-length", "  (cond\n    ((not\
    \ (string? date)) #f)\n    ((not (string? (cdr date))) #f)\n    ((not (string?\
    \ (car date))) #f)\n    ((not (string? (cdr (car date)))) #f)\n    ((not (string?\
    \ (car (car date)))) #f)\n    ((not (string? (cdr (car (car date))))))\n    ((not\
    \ (string? (cdr (cdr (car date))))))\n    ((not (string? (car (cdr (car date))))))\n\
    \    ((not (string? (cdr (cdr (cdr date))))))\n    ((not (string? (car (cdr (cdr\
    \ (car date)))))))\n    ((not (string? (cdr (cdr (cdr (car date)))))))\n    ((not\
    \ (string? (car (cdr (cdr (cdr (car date))))))))\n    ((not (string? (cdr (cdr\
    \ (cdr (cdr (car date))))))))\n    ((not (string? (car (cdr (cdr (cdr (cdr (car\
    \ date))))))))))\n    ((not (string? (cdr (cdr (cdr (cdr (cdr (car date))))))))))\n\
    \    ((not (string? (car (cdr (cdr (cdr (cdr (cdr (car date))))))))))\n    ((not\
    \ (string? (cdr (cdr (cdr (cdr (cdr (cdr (car date))))))))))\n    ((not (string?\
    \ (car (cdr (cdr (cdr (cdr (cdr (cdr (car date))))))))))))\n    ((not (string?\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (car date))))))))))))\n    ((not (string?\
    \ (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (car date))))))))))))))\n    ((not (string?\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (car date))))))))))))))\n    ((not (string?\
    \ (car (cdr (cdr (cdr", "  (cond\n    ((not (string? date)) #f)\n    ((not (string?\
    \ (cdr date))) #f)\n    ((string? (car date))\n      (cond\n        ((string?\
    \ (car (cdr date))) #t)\n        ((string? (car (cdr (cdr date)))) #f)\n     \
    \   (else #f)))\n    (else #f)))\n", "  (cond\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string", "  (cond\n    ((not (string?\
    \ date)) #f)\n    ((string? date)\n      (let ((day (string-split/char date \"\
    -\" 0 2)))\n        (let ((month (string-split/char date \"-\" 1 2)))\n      \
    \    (let ((year (string-split/char date \"-\" 2 4)))\n            (cond\n   \
    \           ((= (length day) 2)\n                (let ((day_num (string-to-number\
    \ day 1)))\n                  (cond\n                    ((= day_num 1)\n    \
    \                  (let ((month_num (string-to-number month 1)))\n           \
    \             (cond\n                          ((= month_num 1)\n            \
    \                (let ((day_num (string-to-number day 2)))\n                 \
    \             (cond\n                                ((= day_num 1)\n        \
    \                          (let ((month_num (string-to-number month 2)))\n   \
    \                                 (cond\n                                    \
    \  ((= month_num 1)\n                                        (let ((day_num (string-to-number\
    \ day 3)))\n                                          (cond\n                \
    \                            ((= day_num 1)\n                                \
    \              (let ((month_num (string-to-number month 3)))\n               \
    \                                 (cond\n                                    \
    \              ((= month_num 1)\n                                            \
    \       (let ((day_num (string-to-number day 4)))\n                          \
    \                            (cond\n                                         \
    \               ((= day_num 1)\n                                             \
    \            (let ((month_num (string-to-number month 4)))\n                 \
    \                                          (cond\n                           \
    \                                   ((= month_num 1)\n                       \
    \                                         (let ((day_num (string-to-number day\
    \ 5)))\n                                                                  (cond\n\
    \                                                                    ((= day_num\
    \ 1)\n                                                                      (let\
    \ ((month_num (string-to-number month 5)))\n                                 \
    \                                       (cond\n                              \
    \                                            ((= month_num 1)\n              \
    \                                                              (let ((day_num\
    \ (string-to-number day 6)))\n                                               \
    \                               (cond\n                                      \
    \                                          ((= day_num 1)\n                  \
    \             ", "  (cond\n    ((empty? date) #f)\n    ((<= (length date) 3) #f)\n\
    \    ((<= (length date) 8)\n      (let ((month (string->number (substring date\
    \ 0 2))))\n        (let ((day (string->number (substring date 3 2))))\n      \
    \    (let ((year (string->number (substring date 6 2))))\n            (cond\n\
    \              ((<= month 1)\n                (<= day 1)\n                (>=\
    \ day 31))\n              ((= month 3)\n                (<= day 1)\n         \
    \       (>= day 30))\n              ((= month 5)\n                (<= day 1)\n\
    \                (>= day 31))\n              ((= month 7)\n                (<=\
    \ day 1)\n                (>= day 30))\n              ((= month 8)\n         \
    \       (<= day 1)\n                (>= day 31))\n              ((= month 10)\n\
    \                (<= day 1)\n                (>= day 30))\n              ((= month\
    \ 12)\n                (<= day 1)\n                (>= day 31))\n            \
    \  (else #f))))))\n    (else #f)))\n", "  (cond\n    ((not (string? date)) #f)\n\
    \    ((= (length date) 8) #f)\n    ((= (string-ci-caseless-upcase date 0) \"0\"\
    ) #f)\n    ((= (string-ci-caseless-upcase date 1) \"1\") #t)\n    ((= (string-ci-caseless-upcase\
    \ date 2) \"2\") #f)\n    ((= (string-ci-caseless-upcase date 3) \"3\") #t)\n\
    \    ((= (string-ci-caseless-upcase date 4) \"4\") #f)\n    ((= (string-ci-caseless-upcase\
    \ date 5) \"5\") #t)\n    ((= (string-ci-caseless-upcase date 6) \"6\") #f)\n\
    \    ((= (string-ci-caseless-upcase date 7) \"7\") #t)\n    ((= (string-ci-caseless-upcase\
    \ date 8) \"8\") #f)\n    ((= (string-ci-caseless-upcase date 9) \"9\") #t)\n\
    \    ((= (string-ci-caseless-upcase date 10) \"10\") #f)\n    ((= (string-ci-caseless-upcase\
    \ date 11) \"11\") #t)\n    ((= (string-ci-caseless-upcase date 12) \"12\") #f)\n\
    \    #f\n  ))\n", "  (cond\n    ((not (string? date)) #f)\n    ((not (string?\
    \ (cdr date))) #f)\n    ((string? (car date))\n      (cond\n        ((string?\
    \ (car (cdr date))) #t)\n        ((string? (car (cdr (cdr date)))) #f)\n     \
    \   ((string? (car (cdr (cdr (cdr date))))))\n          (cond\n            ((string?\
    \ (car (cdr (cdr (cdr (cdr date)))))))\n              (cond\n                ((string?\
    \ (car (cdr (cdr (cdr (cdr (cdr date))))))))\n                  (cond\n      \
    \              ((string? (car (cdr (cdr (cdr (cdr (cdr (cdr date))))))))))\n \
    \                     (cond\n                        ((string? (car (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr date))))))))))\n                          (cond\n \
    \                           ((string? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr date))))))))))))\n                            (cond\n                 \
    \             ((string? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ date))))))))))))))\n                              (cond\n                  \
    \              ((string? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr date))))))))))))))))))))))))))\n\
    \                                (cond\n                                  ((string?\
    \ (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (c", "  (cond\n    ((not (string? date)) #f)\n    ((empty?\
    \ date) #f)\n    (((string-length date) != 6) #f)\n    (((string-nth date 0) <\
    \ 1) or ((string-nth date 0) > 12) #f)\n    (((string-nth date 1) < 1) or ((string-nth\
    \ date 1) > 31) #f)\n    (((string-nth date 2) < 1) or ((string-nth date 2) >\
    \ 30) #f)\n    (((string-nth date 3) < 1) or ((string-nth date 3) > 29) #f)\n\
    \    (((string-nth date 4) < 1) or ((string-nth date 4) > 31) #f)\n    (((string-nth\
    \ date 5) < 1) or ((string-nth date 5) > 30) #f)\n    (((string-nth date 6) <\
    \ 1) or ((string-nth date 6) > 31) #f)\n    (((string-nth date 7) < 1) or ((string-nth\
    \ date 7) > 30) #f)\n    (((string-nth date 8) < 1) or ((string-nth date 8) >\
    \ 31) #f)\n    (((string-nth date 9) < 1) or ((string-nth date 9) > 30) #f)\n\
    \    (((string-nth date 10) < 1) or ((string-nth date 10) > 31) #f)\n    (((string-nth\
    \ date 11) < 1) or ((string-nth date 11) > 30) #f)\n    (((string-nth date 12)\
    \ < 1) or ((string-nth date 12) > 31) #f)\n    (((string-nth date 13) < 1) or\
    \ ((string-nth date 13) > 30) #f)\n    (((string-nth date 14) < 1) or ((string-nth\
    \ date 14) > 31) #f)\n    (((string-nth date 15) < 1) or ((string-nth date 15)\
    \ > 30) #f)\n    (((string-nth", "  (cond\n    ((not (string? date)) #f)\n   \
    \ ((string? date)\n      (let ((day (string-split/all date \"-\")))\n        (cond\n\
    \          ((= (length day) 3)\n            (let ((month (string-split/all day\
    \ \"-\")))\n              (cond\n                ((= (length month) 2)\n     \
    \             (let ((year (string-split/all day \"-\")))\n                   \
    \ (cond\n                      ((= (length year) 4)\n                        (let\
    \ ((day-of-month (string-split/all year \"-\")))\n                          (cond\n\
    \                            ((= (length day-of-month) 2)\n                  \
    \            (let ((month-of-day (string-split/all day-of-month \"-\")))\n   \
    \                             (cond\n                                  ((= (length\
    \ month-of-day) 2)\n                                    (let ((year-of-month (string-split/all\
    \ month-of-day \"-\")))\n                                      (cond\n       \
    \                                 ((= (length year-of-month) 4)\n            \
    \                              (let ((day-of-year (string-split/all year-of-month\
    \ \"-\")))\n                                            (cond\n              \
    \                                ((= (length day-of-year) 2)\n               \
    \                                 (let ((month-of-year (string-split/all day-of-year\
    \ \"-\")))\n                                                  (cond\n        \
    \                                            ((= (length month-of-year) 2)\n \
    \                                                     (let ((year-of-year (string-split/all\
    \ month-of-year \"-\")))\n                                                   \
    \     (cond\n                                                          ((= (length\
    \ year-of-year) 4)\n                                                         \
    \  (let ((day-of-century (string-split/all year-of-year \"-\")))\n           \
    \                                                   (cond\n                  \
    \                                              ((= (length day-of-century) 2)\n\
    \                                                                  (let ((month-of-century\
    \ (string-split/all day-of-century \"-\")))\n                                \
    \                                    (cond\n                                 \
    \                                     ((= (length month-of-century", "  (cond\n\
    \    ((empty? date) #f)\n    ((<= (length date) 3) #f)\n    ((<= (length date)\
    \ 8)\n      (let ((month (string->number (substring date 1 1))))\n        (<=\
    \ month 1 12)\n        (>= month 3 4)\n        (<= month 6 9)\n        (>= month\
    \ 7 10)\n        (<= month 8 11)\n        (>= month 9 12)\n        (<= month 2\
    \ 29)\n        (>= month 4 30)\n        (<= month 5 31)\n        (>= month 6 30)\n\
    \        (<= month 7 31)\n        (>= month 8 31)\n        (<= month 9 30)\n \
    \       (>= month 10 31)\n        (<= month 11 30)\n        (>= month 12 31)\n\
    \        #t))\n    (<= (string->number (substring date 1 1)) 31)\n    (>= (string->number\
    \ (substring date 1 1)) 1)\n    (<= (string->number (substring date 2 2)) 12)\n\
    \    (>= (string->number (substring date 2 2)) 1)))\n", "  (cond\n    ((not (string?\
    \ date)) #f)\n    ((= (length date) 3) #t)\n    ((= (string-ci-caseless-upcase\
    \ date 1) \"01\") #t)\n    ((= (string-ci-caseless-upcase date 2) \"02\") #f)\n\
    \    ((= (string-ci-caseless-upcase date 3) \"03\") #t)\n    ((= (string-ci-caseless-upcase\
    \ date 4) \"04\") #t)\n    ((= (string-ci-caseless-upcase date 5) \"05\") #t)\n\
    \    ((= (string-ci-caseless-upcase date 6) \"06\") #t)\n    ((= (string-ci-caseless-upcase\
    \ date 7) \"07\") #t)\n    ((= (string-ci-caseless-upcase date 8) \"08\") #t)\n\
    \    ((= (string-ci-caseless-upcase date 9) \"09\") #t)\n    ((= (string-ci-caseless-upcase\
    \ date 10) \"10\") #t)\n    ((= (string-ci-caseless-upcase date 11) \"11\") #t)\n\
    \    ((= (string-ci-caseless-upcase date 12) \"12\") #t)\n    ((<= (string-ci-caseless-upcase\
    \ date 1) \"13\") #f)\n    ((<= (string-ci-caseless-upcase date 2) \"14\") #f)\n\
    \    ((<= (string-ci-caseless-upcase date 3) \"15\") #f)\n    ((<= (string-ci-caseless-upcase\
    \ date 4) \"16\") #f)\n    ((<= (string-ci-caseless-upcase date 5) \"17\") #f)\n\
    \    ((<= (string-ci-caseless-upcase date 6) \"18\") #f)\n    ((<= (string-ci-caseless-upcase\
    \ date 7) \"19\") #f)\n    ((<= (string-ci-caseless-upcase date 8) \"20\") #f)\n\
    \    ((<= (string-ci-caseless-upcase date", "  (cond\n    ((not (string? date))\
    \ #f)\n    ((string? date)\n      (let ((month (string->number (substring date\
    \ 0 2))))\n        (let ((day (string->number (substring date 3 2))))\n      \
    \    (let ((year (string->number (substring date 5 2))))\n            (cond\n\
    \              ((month < 1) #f)\n              ((month > 12) #f)\n           \
    \   ((day < 1) #f)\n              ((day > 31) #f)\n              ((month = 2)\n\
    \                (let ((leap_year (year % 4 == 0)))\n                  (let ((days_in_month\
    \ (leap_year ?day ?month)))\n                    (cond\n                     \
    \ ((day < 1) #f)\n                      ((day > days_in_month) #f)\n         \
    \             (else #t))))\n                (else #t)))\n              (else #t)))))))))\n",
  "  (cond\n    ((not (string? date)) #f)\n    ((string? date)\n      (let ((day (string-split/all\
    \ date \"-\")))\n        (if (empty? day) #f\n          (let ((month (string-split/all\
    \ (first day) \"-\")))\n            (if (empty? month) #f\n              (let\
    \ ((year (string-split/all (last day) \"-\")))\n                (if (empty? year)\
    \ #f\n                  (if (number? (first month))\n                    (if (>\
    \ (first month) 1) #f\n                      (if (< (first month) 12) #f\n   \
    \                     (if (> (last month) 1) #f\n                          (if\
    \ (< (last month) 12) #f\n                            (if (> (first day) 1) #f\n\
    \                              (if (< (last day) 31) #f\n                    \
    \            (if (> (last day) 30) #f\n                                  (if (>\
    \ (first year) 2000) #f\n                                    (if (< (first year)\
    \ 2020) #f\n                                      (if (> (last year) 2000) #f\n\
    \                                        (if (< (last year) 2020) #f\n       \
    \                                   (if (> (first day) 1) #f\n               \
    \                             (if (< (last day) 30) #f\n                     \
    \                         (if (> (first month) 1) #f\n                       \
    \                         (if (< (last month) 12) #f\n                       \
    \                           (if (> (first year) 2000) #f\n                   \
    \                                 (if (< (last year) 2020) #f\n              \
    \                                        (if (> (first month) 1) #f\n        \
    \                                                (if (< (last month) 12) #f\n\
    \                                                          (if (> (first day)\
    \ 1) #f\n                                                            (if (< (last\
    \ day) 31) #f\n                                                              (if\
    \ (> (first year) 2000) #f\n                                                 \
    \               (if (< (last year) 2020) #f\n                                \
    \                                  (return #t))))))))))))))))))))))))))))))))))))))))))))))))",
  "  (cond\n    ((not (string? date)) #f)\n    ((string? date)\n      (let ((day (string-split\
    \ date \"-\")))\n        (cond\n          ((>= (length day) 2)\n            (let\
    \ ((month (string-split day 1)))\n              (cond\n                ((>= (length\
    \ month) 2)\n                  (let ((year (string-split day 2)))\n          \
    \          (cond\n                      ((>= (length year) 4)\n              \
    \          (let ((day-of-month (string-split day 2 2)))\n                    \
    \      (cond\n                            ((>= (length day-of-month) 2)\n    \
    \                          (let ((month-of-year (string-split day-of-month 2)))\n\
    \                                (cond\n                                  ((>=\
    \ (length month-of-year) 2)\n                                    (let ((day-of-year\
    \ (string-split day-of-month 2 2)))\n                                      (cond\n\
    \                                        ((>= (length day-of-year) 2)\n      \
    \                                    (let ((year-of-century (string-split day-of-year\
    \ 2)))\n                                            (cond\n                  \
    \                            ((>= (length year-of-century) 4)\n              \
    \                                  (let ((year-of-decade (string-split year-of-century\
    \ 2)))\n                                                  (cond\n            \
    \                                        ((>= (length year-of-decade) 4)\n   \
    \                                                   (let ((year-of-year (string-split\
    \ year-of-decade 2)))\n                                                      \
    \  (cond\n                                                          ((>= (length\
    \ year-of-year) 4)\n                                                         \
    \  (let ((day-of-century (string-split year-of-year 2 2)))\n                 \
    \                                             (cond\n                        \
    \                                        ((>= (length day-of-century) 2)\n   \
    \                                                               (let ((month-of-century\
    \ (string-split day-of-century 2)))\n                                        \
    \                            (cond\n                                         \
    \                             ((>= (length month-of-century) 2)\n            \
    \                                                            (let ((day-of-",
  "  (cond\n    ((not (string? date)) #f)\n    ((string? date)\n      (let ((day (string->number\
    \ date)))\n        (cond\n          ((= day 1) #t)\n          ((<= day 31) #t)\n\
    \          ((<= day 30) #t)\n          ((<= day 29) #t)\n          ((<= day 28)\
    \ #t)\n          ((<= day 27) #t)\n          ((<= day 26) #t)\n          ((<=\
    \ day 25) #t)\n          ((<= day 24) #t)\n          ((<= day 23) #t)\n      \
    \    ((<= day 22) #t)\n          ((<= day 21) #t)\n          ((<= day 20) #t)\n\
    \          ((<= day 19) #t)\n          ((<= day 18) #t)\n          ((<= day 17)\
    \ #t)\n          ((<= day 16) #t)\n          ((<= day 15) #t)\n          ((<=\
    \ day 14) #t)\n          ((<= day 13) #t)\n          ((<= day 12) #t)\n      \
    \    ((<= day 11) #t)\n          ((<= day 10) #t)\n          ((<= day 9) #t)\n\
    \          ((<= day 8) #t)\n          ((<= day 7) #t)\n          ((<= day 6) #t)\n\
    \          ((<= day 5) #t)\n          ((<= day 4) #t)\n          ((<= day 3) #t)\n\
    \          ((<= day 2) #t)\n          ((<= day 1) #t)\n          (else #f)))))))))\n\
    \  (else #f)))\n", "  (cond\n    ((not (string? date)) #f)\n    ((string? date)\n\
    \      (let ((month (string->number date/1)))\n        (let ((day (string->number\
    \ date/2)))\n          (let ((year (string->number date/3)))\n            (cond\n\
    \              ((month < 1) #f)\n              ((month > 12) #f)\n           \
    \   ((day < 1) #f)\n              ((day > 31) #f)\n              ((month = 2)\n\
    \                (cond\n                  ((day < 1) #f)\n                  ((day\
    \ > 29) #f)\n                  (else #t)))\n              ((month = 4)\n     \
    \           (cond\n                  ((day < 1) #f)\n                  ((day >\
    \ 30) #f)\n                  (else #t)))\n              ((month = 6)\n       \
    \         (cond\n                  ((day < 1) #f)\n                  ((day > 30)\
    \ #f)\n                  (else #t)))\n              ((month = 9)\n           \
    \     (cond\n                  ((day < 1) #f)\n                  ((day > 30) #f)\n\
    \                  (else #t)))\n              ((month = 11)\n                (cond\n\
    \                  ((day < 1) #f)\n                  ((day > 30) #f)\n       \
    \           (else #t)))\n              ((month = 3)\n                (cond\n \
    \                 ((day < 1) #f)\n                  ((day > 31) #f)\n        \
    \          (else #t)))\n              ((month = 5)\n                (cond\n  \
    \                ((day < 1) #f)\n                  ((day > 31) #f)\n         \
    \         (else #t)))\n              ((month = 7)\n                (cond\n   \
    \               ((day < 1) #f)\n                  ((day > 31) #f)\n          \
    \        (else #t)))\n              ((month = 8)\n                (cond\n    \
    \              ((day < 1) #f)\n                  ((day > 31) #f)\n           \
    \       (else #t)))\n              ((month = 10)\n                (cond\n    \
    \              ((day < 1) #f)\n                  ((day > 31) #f)\n           \
    \       (else #t)))\n              ((month = 12)\n                (cond\n    \
    \              ((day < 1) #f)\n                  ((", "  (let* ((month (string->number\
    \ (substring date 0 2)))\n          (day (string->number (substring date 3 5)))\n\
    \          (year (string->number (substring date 6 9))))\n    (and (>= month 1)\
    \ (<= month 12)\n         (>= day 1) (<= day 31)\n         (>= year 1900) (<=\
    \ year 2200)\n         (= month (modulo 12 month)))))\n", "  (cond\n    [(string?\
    \ date)\n      (not (empty? date))\n      (let ((month (string->number date/1)))\n\
    \        (let ((day (string->number date/2)))\n          (let ((year (string->number\
    \ date/3)))\n            (cond\n              [(month < 1)\n                (return\
    \ #f)\n              ]\n              [(month > 12)\n                (return #f)\n\
    \              ]\n              [(day < 1)\n                (return #f)\n    \
    \          ]\n              [(day > 31)\n                (return #f)\n       \
    \       ]\n              [(month == 2)\n                (let ((days_in_month (month_days\
    \ (month))))\n                  (if (day < 1)\n                      (return #f)\n\
    \                    (if (day > days_in_month)\n                        (return\
    \ #f)\n                      )\n                    (return #t)\n            \
    \      )\n                )\n              ]\n              [(day > 30)\n    \
    \            (let ((days_in_month (month_days (month))))\n                  (if\
    \ (day < 1)\n                      (return #f)\n                    (if (day >\
    \ days_in_month)\n                        (return #f)\n                      )\n\
    \                    (return #t)\n                  )\n                )\n   \
    \           ]\n              [(day > 29)\n                (let ((days_in_month\
    \ (month_days (month))))\n                  (if (day < 1)\n                  \
    \    (return #f)\n                    (if (day > days_in_month)\n            \
    \            (return #f)\n                      )\n                    (return\
    \ #t)\n                  )\n                )\n              ]\n             \
    \ [(day == 29)\n                (let ((days_in_month (month_days (month))))\n\
    \                  (if (day < 1)\n                      (return #f)\n        \
    \            (if (day > days_in_month)\n                        (return #f)\n\
    \                      )\n                    (return #t)\n                  )\n\
    \                )\n              ]\n              [(day == 30)\n            \
    \    (let ((days_in_month (month_days (month))))\n                  (if (day <\
    \ 1)\n                      (return #f)\n                    (if (day > days_in_month)",
  "  (cond\n    ((not (string? date)) #f)\n    ((string? date)\n      (let ((day (string-split/char\
    \ date \"-\" 0 2)))\n        (let ((month (string-split/char date \"-\" 1 2)))\n\
    \          (let ((year (string-split/char date \"-\" 2 4)))\n            (cond\n\
    \              ((= (length day) 3)\n                (cond\n                  ((=\
    \ (first day) \"0\") #f)\n                  ((= (first day) \"1\")\n         \
    \           (let ((days (string-split/char day \"-\" 2 2)))\n                \
    \      (cond\n                        ((= (first days) \"0\") #f)\n          \
    \              ((= (first days) \"1\")\n                          (let ((months\
    \ (string-split/char month \"-\" 1 2)))\n                            (cond\n \
    \                             ((= (first months) \"1\") #t)\n                \
    \              ((= (first months) \"3\") #f)\n                              ((=\
    \ (first months) \"5\") #t)\n                              ((= (first months)\
    \ \"7\") #t)\n                              ((= (first months) \"8\") #t)\n  \
    \                            ((= (first months) \"10\") #t)\n                \
    \              ((= (first months) \"12\") #t)\n                              (#f)))))))))\n\
    \                (#f)))\n            (#f)))\n        (#f)))\n    (#f)))\n)\n",
  "  (let* ([day (string-to-integer (substring date 0 2))]\n         [month (string-to-integer\
    \ (substring date 3 2))]\n         [year (string-to-integer (substring date 6\
    \ 2))])\n    (and (not (empty? date))\n        (and (>= day 1) (<= day 31)\n \
    \            (>= month 1 3 5 7 8 10 12)\n             (>= month 4 6 9 11)\n  \
    \           (>= month 2)\n             (<= month 12))\n        (and (>= year 1900)\
    \ (<= year 2100)))))\n", "  (cond\n    ((not (string? date)) #f)\n    ((not (string?\
    \ (cdr date))) #f)\n    ((not (string? (car date))) #f)\n    ((not (string? (cdr\
    \ (car date)))) #f)\n    ((not (string? (car (car date)))) #f)\n    ((not (string?\
    \ (cdr (car (car date))))))\n    ((not (string? (cdr (car (cdr date))))))\n  \
    \  ((not (string? (car (cdr (car date))))))\n    ((not (string? (cdr (cdr (car\
    \ date))))))\n    ((not (string? (car (cdr (cdr (car date)))))))\n    ((not (string?\
    \ (cdr (cdr (cdr (car date)))))))\n    ((not (string? (car (cdr (cdr (cdr (car\
    \ date))))))))\n    ((not (string? (cdr (cdr (cdr (cdr (car date))))))))\n   \
    \ ((not (string? (car (cdr (cdr (cdr (cdr (car date))))))))))\n    ((not (string?\
    \ (cdr (cdr (cdr (cdr (cdr (car date))))))))))\n    ((not (string? (car (cdr (cdr\
    \ (cdr (cdr (cdr (car date))))))))))\n    ((not (string? (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (car date))))))))))\n    ((not (string? (car (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (car date))))))))))))\n    ((not (string? (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (car date))))))))))))\n    ((not (string? (car (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (car date))))))))))))))\n    ((not (string? (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (car date))))))))))))))\n    ((not (string? (car (cdr (cdr (cdr (",
  "  (cond\n    ((not (string? date)) #f)\n    ((string? date)\n      (let ((month\
    \ (string->number (substring date 0 2))))\n        (let ((day (string->number\
    \ (substring date 3 2))))\n          (let ((year (string->number (substring date\
    \ 6 2))))\n            (cond\n              ((month < 1) #f)\n              ((month\
    \ > 12) #f)\n              ((day < 1) #f)\n              ((day > 31) #f)\n   \
    \           ((month == 2)\n                (let ((leap_year (year % 4 == 0)))\n\
    \                  (let ((days_in_month (if leap_year #f\n                   \
    \                       (if month == 2 #f\n                                  \
    \            (if leap_year #f\n                                              \
    \    29\n                                                  28))\n            \
    \                              31)))\n                    (day > days_in_month)\
    \ #f)))\n              ((month == 4)\n                (let ((leap_year (year %\
    \ 4 == 0)))\n                  (let ((days_in_month (if leap_year #f\n       \
    \                                   (if month == 4 #f\n                      \
    \                        30)))\n                        (day > days_in_month)\
    \ #f)))\n                (day > 30)))\n            (#t)))))))\n  (#t)))\n", " \
    \ (cond\n    ((not (string? date)) #f)\n    ((string? date)\n      (let ((date_str\
    \ (string->list date)))\n        (cond\n          ((= (length date_str) 3)\n \
    \           (let ((month (string->list (first date_str)))\n                  (day\
    \ (string->list (second date_str)))\n                  (year (string->list (third\
    \ date_str))))\n              (cond\n                ((= (length month) 2)\n \
    \                 (cond\n                    ((= (length day) 2)\n           \
    \           (cond\n                        ((= (first month) 1)\n            \
    \              (cond\n                            ((= (first day) 1)\n       \
    \                       (cond\n                                ((= (first year)\
    \ 2000)\n                                  (cond\n                           \
    \         ((= (second month) 3)\n                                      (cond\n\
    \                                        ((= (second day) 11)\n              \
    \                            (return #t)))))\n                               \
    \     (else\n                                      (return #f))))\n          \
    \                      (else\n                                  (return #f))))\n\
    \                          (else\n                            (return #f))))\n\
    \                      (else\n                        (return #f))))\n       \
    \         (else\n                  (return #f))))\n          (else\n         \
    \   (return #f)))))))\n  (else\n    (return #f))))\n", "  (cond\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string", "  (let* ([day\
    \ (string->number date/1)]\n         [month (string->number date/2)]\n       \
    \  [year (string->number date/3)]\n         [valid? (and\n                  (>=\
    \ 1 day)\n                  (<= 31 (if month = 1 3 5 7 8 10 12\n             \
    \             (>= 1)\n                          (<= 30)))\n                  (>=\
    \ 1 (if month = 2 4 6 9 11\n                         (>= 1)\n                \
    \         (<= 29)))\n                  (>= 1 month)\n                  (<= 12))\n\
    \                  (= month 1 2 3 4 6 9 11))\n                  (= month 3 4 5\
    \ 6))\n                  (= month 6))\n                  (= month 9))\n      \
    \            (= month 11))\n                  (= month 2))\n                 \
    \ (= month 4))\n                  (= month 6))\n                  (= month 8))\n\
    \                  (= month 10))\n                  (= month 12))\n          \
    \        (= month 5))\n                  (= month 7))\n                  (= month\
    \ 8))\n                  (= month 10))\n                  (= month 12))\n    \
    \              (= month 5))\n                  (= month 7))\n                \
    \  (= month 8))\n                  (= month 10))\n                  (= month 12))\n\
    \                  (= month 5))\n                  (= month 7))\n            \
    \      (= month 8))\n                  (= month 10))\n                  (= month\
    \ 12))\n                  (= month 5))\n                  (= month 7))\n     \
    \             (= month 8))\n                  (= month 10))\n                \
    \  (= month 12))\n                  (= month 5))\n                  (= month 7))\n\
    \                  (= month 8))\n                  (= month 10))\n           \
    \       (= month 12))\n                  (= month 5))\n                  (= month\
    \ 7))\n                  (= month 8))\n                  (= month 10))\n     \
    \             (= month 12))\n                  (= month 5))\n                \
    \  (= month 7))\n                  (= month 8))\n                  (= month 10))\n\
    \                  (= month 12))\n                  (= month 5))\n           \
    \       (= month 7))\n                  (= month 8))\n                  (= month\
    \ 10))\n                  (= month 12))\n                  (= month 5))\n    \
    \              (= month 7))\n                  (=", "  (cond\n    ((not (string?\
    \ date)) #f)\n    ((string? date)\n      (let ((day (string-split/char date \"\
    -\" 0)))\n        (let ((month (string-split/char day \"-\" 0)))\n          (let\
    \ ((year (string-split/char day \"-\" 0)))\n            (cond\n              (((length\
    \ day) < 2) #f)\n              (((length month) < 2) #f)\n              (((length\
    \ year) < 4) #f)\n              (((length year) > 4) #f)\n              (((length\
    \ year) == 4)\n                (cond\n                  (((length month) == 2)\n\
    \                    (cond\n                      (((length day) == 2)\n     \
    \                   (month > 12) #f)\n                      (((length day) ==\
    \ 3)\n                        (month > 12) #f)\n                      (month >\
    \ 12) #f)\n                    (month > 12) #f)\n                  (month > 12)\
    \ #f)\n                (month > 12) #f)))\n            (month > 12) #f)))\n  \
    \    (month > 12) #f)))\n  #t))\n", "  (cond\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string", "  (cond\n    ((not (string?\
    \ date)) #f)\n    ((string? date)\n      (let ((day (string-split/all date \"\
    -\")))\n        (cond\n          ((>= (length day) 2)\n            (let ((month\
    \ (string-split/all day 1)))\n              (cond\n                ((>= (length\
    \ month) 2)\n                  (let ((year (string-split/all day 2)))\n      \
    \              (cond\n                      ((>= (length year) 4)\n          \
    \              (let ((day-of-month (string-split/all year 2)))\n             \
    \             (cond\n                            ((= (length day-of-month) 2)\n\
    \                              (let ((month-of-day (string-split/all day-of-month\
    \ 1)))\n                                (cond\n                              \
    \    ((= (length month-of-day) 2)\n                                    (let ((year-of-month\
    \ (string-split/all day-of-month 2)))\n                                      (cond\n\
    \                                        ((= (length year-of-month) 4)\n     \
    \                                     (let ((day-of-year (string-split/all year-of-month\
    \ 2)))\n                                            (cond\n                  \
    \                            ((= (length day-of-year) 4)\n                   \
    \                             (let ((year-of-year (string-split/all day-of-year\
    \ 2)))\n                                                  (cond\n            \
    \                                        ((= (length year-of-year) 4)\n      \
    \                                                (let ((day-of-century (string-split/all\
    \ year-of-year 2)))\n                                                        (cond\n\
    \                                                          ((= (length day-of-century)\
    \ 4)\n                                                           (let ((year-of-century\
    \ (string-split/all year-of-century 2)))\n                                   \
    \                           (cond\n                                          \
    \                      ((= (length year-of-century) 4)\n                     \
    \                                             (let ((day-of-century-of-year (string-split/all\
    \ year-of-century 2)))\n                                                     \
    \               (cond\n                                                      \
    \                ((= (length day-of-century-of-", "  (cond\n    ((not (string?\
    \ date)) #f)\n    ((not (string? (first date))) #f)\n    ((not (string? (second\
    \ date))) #f)\n    ((not (string? (third date))) #f)\n    ((not (string? (fourth\
    \ date))) #f)\n    ((not (string? (fifth date))) #f)\n    ((not (string? (sixth\
    \ date))) #f)\n    ((not (string? (seventh date))) #f)\n    ((not (string? (eighth\
    \ date))) #f)\n    ((not (string? (ninth date))) #f)\n    ((not (string? (tenth\
    \ date))) #f)\n    ((not (string? (eleventh date))) #f)\n    ((not (string? (twelfth\
    \ date))) #f)\n    ((not (string? (thirteenth date))) #f)\n    ((not (string?\
    \ (fourteenth date))) #f)\n    ((not (string? (fifteenth date))) #f)\n    ((not\
    \ (string? (sixteenth date))) #f)\n    ((not (string? (seventeenth date))) #f)\n\
    \    ((not (string? (eighteenth date))) #f)\n    ((not (string? (nineteenth date)))\
    \ #f)\n    ((not (string? (twentieth date))) #f)\n    ((not (string? (twenty-first\
    \ date))) #f)\n    ((not (string? (twenty-second date))) #f)\n    ((not (string?\
    \ (twenty-third date))) #f)\n    ((not (string? (twenty-fourth date))) #f)\n \
    \   ((not (string? (twenty-fifth date))) #f)\n    ((not (string? (twenty-sixth\
    \ date))) #f)\n    ((not (string? (twenty-seventh date))) #f)\n    ((not (string?\
    \ (twenty-eighth date))) #f)\n    ((not (string? (twenty-ninth date))) #f)\n \
    \   ((not (string? (thirtieth date))) #f)\n    ((not (string? (thirty-first date)))\
    \ #f)\n    ((not (string? (th", "  (cond\n    ((not (string? date)) #f)\n    ((string?\
    \ date)\n      (let ((day (string->number date)))\n        (let ((month (string->number\
    \ (string-split/char date \"-\"))))\n          (let ((year (string->number (string-split/char\
    \ date \"-\"))))\n            (cond\n              ((month < 1) #f)\n        \
    \      ((month > 12) #f)\n              ((month = 2)\n                (cond\n\
    \                  ((day < 1) #f)\n                  ((day > 29) #f)\n       \
    \           (else #t)))\n              ((month = 3)\n                (cond\n \
    \                 ((day < 1) #f)\n                  ((day > 31) #f)\n        \
    \          (else #t)))\n              ((month = 4)\n                (cond\n  \
    \                ((day < 1) #f)\n                  ((day > 30) #f)\n         \
    \         (else #t)))\n              ((month = 5)\n                (cond\n   \
    \               ((day < 1) #f)\n                  ((day > 31) #f)\n          \
    \        (else #t)))\n              ((month = 6)\n                (cond\n    \
    \              ((day < 1) #f)\n                  ((day > 30) #f)\n           \
    \       (else #t)))\n              ((month = 7)\n                (cond\n     \
    \             ((day < 1) #f)\n                  ((day > 31) #f)\n            \
    \      (else #t)))\n              ((month = 8)\n                (cond\n      \
    \            ((day < 1) #f)\n                  ((day > 31) #f)\n             \
    \     (else #t)))\n              ((month = 9)\n                (cond\n       \
    \           ((day < 1) #f)\n                  ((day > 30) #f)\n              \
    \    (else #t)))\n              ((month = 10)\n                (cond\n       \
    \           ((day < 1) #f)\n                  ((day > 31) #f)\n              \
    \    (else #t)))\n              ((month = 11)\n                (cond\n       \
    \           ((day < 1) #f)\n                  ((day > 30) #f)\n              \
    \    (else #t)))\n              ((month = 12)\n                (cond\n       \
    \           ((day < 1) #f)\n                  ((day > 31) #f)\n              \
    \    (", "  (cond\n    ((not (string? date)) #f)\n    ((not (string? (cdr date)))\
    \ #f)\n    ((string? (car date))\n      (let ((month (car date)))\n        (cond\n\
    \          ((= month \"01\")\n            (let ((day (cadr date)))\n         \
    \     (cond\n                ((= day \"01\")\n                  (let ((year (caddr\
    \ date)))\n                    (cond\n                      ((= year \"2000\"\
    )\n                        (return #t))\n                      ((= year \"2012\"\
    )\n                        (return #f))\n                      ((= year \"2020\"\
    )\n                        (return #t)))))))))\n          ((= month \"02\")\n\
    \            (let ((day (cadr date)))\n              (cond\n                ((=\
    \ day \"01\")\n                  (let ((year (caddr date)))\n                \
    \    (cond\n                      ((= year \"2000\")\n                       \
    \ (return #f))\n                      ((= year \"2012\")\n                   \
    \     (return #t))\n                      ((= year \"2020\")\n               \
    \         (return #f)))))))))\n          ((= month \"03\")\n            (let ((day\
    \ (cadr date)))\n              (cond\n                ((= day \"01\")\n      \
    \            (let ((year (caddr date)))\n                    (cond\n         \
    \             ((= year \"2000\")\n                        (return #f))\n     \
    \                 ((= year \"2012\")\n                        (return #t))\n \
    \                     ((= year \"2020\")\n                        (return #f)))))))))\n\
    \          ((= month \"04\")\n            (let ((day (cadr date)))\n         \
    \     (cond\n                ((= day \"01\")\n                  (let ((year (caddr\
    \ date)))\n                    (cond\n                      ((= year \"2000\"\
    )\n                        (return #f))\n                      ((= year \"2012\"\
    )\n                        (return #t))\n                      ((= year \"2020\"\
    )\n                        (return #f)))))))))\n          ((= month \"05\")\n\
    \            (let ((day (cadr date)))\n              (cond\n                ((=\
    \ day \"01\")\n                  (let ((year (caddr date)))\n                \
    \    (cond\n                      ((= year \"2000\")\n                       \
    \ (return #f))\n                      ((= year \"2012\")\n                   \
    \     (return #t))\n                      ((= year \"2020\")\n               \
    \         (", "  (cond\n    ((not (string? date)) #f)\n    ((string? date)\n \
    \     (let ((month (string->number date/1)))\n        (let ((day (string->number\
    \ date/2)))\n          (let ((year (string->number date/3)))\n            (cond\n\
    \              ((month < 1) #f)\n              ((month > 12) #f)\n           \
    \   ((day < 1) #f)\n              ((day > 31)\n                (cond\n       \
    \           ((month == 1)\n                    (day > 29))\n                 \
    \ ((month == 2)\n                    (day > 28))\n                  ((month ==\
    \ 3)\n                    (day > 31))\n                  ((month == 4)\n     \
    \               (day > 30))\n                  ((month == 5)\n               \
    \     (day > 31))\n                  ((month == 6)\n                    (day >\
    \ 30))\n                  ((month == 7)\n                    (day > 31))\n   \
    \               ((month == 8)\n                    (day > 31))\n             \
    \     ((month == 9)\n                    (day > 30))\n                  ((month\
    \ == 10)\n                    (day > 31))\n                  ((month == 11)\n\
    \                    (day > 30))\n                  ((month == 12)\n         \
    \           (day > 31))\n                  (#f))))\n            (#t)))))))\n \
    \ (#f)))\n", "  (let* ([(day (string->number (substring date 0 2)))\n        \
    \   (month (string->number (substring date 3 2)))\n           (year (string->number\
    \ (substring date 6 4)))\n           (day_of_week (string->number (substring date\
    \ 9 2)))\n           (day_of_month (string->number (substring date 11 2)))\n \
    \          (month_of_year (string->number (substring date 14 2))))\n    (and\n\
    \      (not (empty? date))\n      (and\n        (>= 1 day)\n        (<= 31 (if\
    \ month = 1 3 5 7 8 10 12\n                (>= 1 (if month = 2\n             \
    \          (<= 29 (if month = 4 6 9 11\n                               (<= 30)))))))\n\
    \        (>= 1 day)\n        (<= 30 (if month = 4 6 9 11\n                (>=\
    \ 1 (if month = 2\n                       (<= 29)))))))\n      (and\n        (>=\
    \ 1 month)\n        (<= 12 month))\n      (>= 1 year)\n      (<= 9999 year)))\n\
    \  (and\n    (>= 1 day_of_week)\n    (<= 7 day_of_week))\n  (and\n    (>= 1 day_of_month)\n\
    \    (<= 31 day_of_month))\n  (and\n    (>= 1 month_of_year)\n    (<= 12 month_of_year))))\n",
  "  (cond\n    ((not (string? date)) #f)\n    ((not (string? (cdr date))) #f)\n \
    \   ((not (string? (car date))) #f)\n    ((not (string? (cdr (car date)))) #f)\n\
    \    ((not (string? (car (car date)))) #f)\n    ((not (string? (cdr (car (car\
    \ date))))))\n    ((not (string? (car (cdr (car date))))))\n    ((not (string?\
    \ (cdr (cdr (car date))))))\n    ((not (string? (car (cdr (cdr (car date)))))))\n\
    \    ((not (string? (cdr (cdr (cdr (car date)))))))\n    ((not (string? (car (cdr\
    \ (cdr (cdr (car date))))))))\n    ((not (string? (cdr (cdr (cdr (cdr (car date))))))))\n\
    \    ((not (string? (car (cdr (cdr (cdr (cdr (car date))))))))))\n    ((not (string?\
    \ (cdr (cdr (cdr (cdr (cdr (car date))))))))))\n    ((not (string? (car (cdr (cdr\
    \ (cdr (cdr (cdr (car date))))))))))\n    ((not (string? (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (car date))))))))))\n    ((not (string? (car (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (car date))))))))))))\n    ((not (string? (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (car date))))))))))))\n    ((not (string? (car (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (car date))))))))))))))\n    ((not (string? (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (car date))))))))))))))\n    ((not (string? (car (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (car date))))", "  (let (([year month day] (string->list\
    \ date)))\n    (and\n      (>= 1 (number->integer month))\n      (<= 12 (number->integer\
    \ month))\n      (>= 1 (number->integer day))\n      (<= 31 (number->integer day))\n\
    \      (>= 1 (number->integer year))\n      (<= 31 (number->integer year))\n \
    \     (>= 1 (number->integer year))\n      (<= 12 (number->integer year))\n  \
    \    (>= 1 (number->integer year))\n      (<= 30 (number->integer year))\n   \
    \   (>= 1 (number->integer year))\n      (<= 29 (number->integer year))\n    \
    \  (>= 1 (number->integer year))\n      (<= 12 (number->integer year))\n     \
    \ (>= 1 (number->integer year))\n      (<= 30 (number->integer year))\n      (>=\
    \ 1 (number->integer year))\n      (<= 29 (number->integer year))\n      (>= 1\
    \ (number->integer year))\n      (<= 12 (number->integer year))))))\n", "  (cond\n\
    \    ((not (string? date)) #f)\n    ((string? date)\n      (let ((month (string->number\
    \ (substring date 0 2))))\n        (let ((day (string->number (substring date\
    \ 3 2))))\n          (let ((year (string->number (substring date 6 2))))\n   \
    \         (cond\n              ((= month 1)\n                (cond\n         \
    \         ((= day 1)\n                    (= year 2000))\n                  ((=\
    \ day 2)\n                    (= year 2000))\n                  ((= day 3)\n \
    \                   (= year 2000))\n                  ((= day 4)\n           \
    \         (= year 2000))\n                  ((= day 5)\n                    (=\
    \ year 2000))\n                  ((= day 6)\n                    (= year 2000))\n\
    \                  ((= day 7)\n                    (= year 2000))\n          \
    \        ((= day 8)\n                    (= year 2000))\n                  ((=\
    \ day 9)\n                    (= year 2000))\n                  ((= day 10)\n\
    \                    (= year 2000))\n                  ((= day 11)\n         \
    \           (= year 2000))\n                  ((= day 12)\n                  \
    \  (= year 2000))\n                  (else\n                    (= year 2012))))\n\
    \              ((= month 2)\n                (cond\n                  ((= day\
    \ 1)\n                    (= year 2012))\n                  ((= day 2)\n     \
    \               (= year 2012))\n                  ((= day 3)\n               \
    \     (= year 2012))\n                  ((= day 4)\n                    (= year\
    \ 2012))\n                  ((= day 5)\n                    (= year 2012))\n \
    \                 ((= day 6)\n                    (= year 2012))\n           \
    \       ((= day 7)\n                    (= year 2012))\n                  ((=\
    \ day 8)\n                    (= year 2012))\n                  ((= day 9)\n \
    \                   (= year 2012))\n                  ((= day 10)\n          \
    \          (= year 2012))\n                  ((= day 11)\n                   \
    \ (= year 2012))\n                  ((= day 12)\n                    (= year 2012))\n\
    \                  (else\n                    (= year 2020))))\n             \
    \ ((= month 3)\n                (cond\n                  ((= day 1)\n        \
    \            (= year 2020))\n                  ((= day 2)\n                  \
    \  (= year 2020))\n                  ((= day 3)\n                    (= year 2020))\n\
    \                  ", "  (cond\n    ((not (string? date)) #f)\n    ((empty? date)\
    \ #f)\n    (((string-length date) != 6) #f)\n    (((string-length date) != 8)\
    \ #f)\n    (((string-length date) != 10) #f)\n    (((string-length date) != 12)\
    \ #f)\n    (((string-length date) != 14) #f)\n    (((string-length date) != 16)\
    \ #f)\n    (((string-length date) != 18) #f)\n    (((string-length date) != 20)\
    \ #f)\n    (((string-length date) != 22) #f)\n    (((string-length date) != 24)\
    \ #f)\n    (((string-length date) != 26) #f)\n    (((string-length date) != 28)\
    \ #f)\n    (((string-length date) != 30) #f)\n    (((string-length date) != 32)\
    \ #f)\n    (((string-length date) != 34) #f)\n    (((string-length date) != 36)\
    \ #f)\n    (((string-length date) != 38) #f)\n    (((string-length date) != 40)\
    \ #f)\n    (((string-length date) != 42) #f)\n    (((string-length date) != 44)\
    \ #f)\n    (((string-length date) != 46) #f)\n    (((string-length date) != 48)\
    \ #f)\n    (((string-length date) != 50) #f)\n    (((string-length date) != 52)\
    \ #f)\n    (((string-length date) != 54) #f)\n    (((string-length date) != 56)\
    \ #f)\n    (((string-length date) != 58) #f)\n    (((string-length date) != 60)\
    \ #f)\n    (((string-length date) != 62) #f)\n    (((string-length date) != 64)\
    \ #f)\n    (((string-length date) != 66) #f)\n    (((string-length date) != 68)\
    \ #f)\n    (((string-length", "  (cond\n    ((not (string? date)) #f)\n    ((string?\
    \ date)\n      (let ((day (string->number date)))\n        (let ((month (string->number\
    \ (string-replace/all date \"-\" 0))))\n          (let ((year (string->number\
    \ (string-replace/all (string-replace/all date \"/\" \"\") \"-\" 0))))\n     \
    \       (cond\n              ((month < 1) #f)\n              ((month > 12) #f)\n\
    \              ((day < 1) #f)\n              ((day > 31) #f)\n              ((month\
    \ == 2)\n                (let ((leap_year (modulo year 4)))\n                \
    \  (cond\n                    ((leap_year == 0)\n                      (day >\
    \ 29))\n                    (else\n                      (day > 28))))\n     \
    \           (else\n                  (day > 30)))\n              (else\n     \
    \           (day > 29)))\n            (else\n              (day > 30)))))))\n\
    \  (else\n    #f)))\n", "  (cond\n    ((not (string? date)) #f)\n    ((string?\
    \ date)\n      (let ((day (string-split/char date \"-\" 0)))\n        (if (string-length\
    \ day)\n          (let ((month (string-split/char day \"-\" 0)))\n           \
    \ (if (string-length month)\n              (let ((year (string-split/char month\
    \ \"-\" 0)))\n                (if (string-length year)\n                  (if\
    \ (>= (string-length day) 2)\n                    (if (>= (string-length month)\
    \ 2)\n                      (if (>= (string-length year) 4)\n                \
    \        (if (>= (string-length year) 2)\n                          (if (>= (string-length\
    \ year) 4)\n                            (if (>= (string-length year) 2)\n    \
    \                          (if (>= (string-length year) 4)\n                 \
    \               (if (>= (string-length year) 2)\n                            \
    \      (if (>= (string-length year) 4)\n                                    (if\
    \ (>= (string-length year) 2)\n                                      (if (>= (string-length\
    \ year) 4)\n                                        (if (>= (string-length year)\
    \ 2)\n                                          (if (>= (string-length year) 4)\n\
    \                                            (if (>= (string-length year) 2)\n\
    \                                              (if (>= (string-length year) 4)\n\
    \                                                (if (>= (string-length year)\
    \ 2)\n                                                  (if (>= (string-length\
    \ year) 4)\n                                                    (if (>= (string-length\
    \ year) 2)\n                                                      (if (>= (string-length\
    \ year) 4)\n                                                        (if (>= (string-length\
    \ year) 2)\n                                                          (if (>=\
    \ (string-length year) 4)\n                                                  \
    \          (if (>= (string-length year) 2)\n                                 \
    \                             (if (>= (string-length year) 4)\n              \
    \                                                  (if (>= (string-length year)\
    \ 2)\n                                                                  (if (>=\
    \ (string", "  (cond\n    [(string? date)\n      (not (empty? date))]\n    [(number?\
    \ date)\n      (let* ([day (day-of-month date)]\n              [month (month-of-year\
    \ date)]\n              [year (year-of-date date)]\n              [day-of-week\
    \ (day-of-week date)]\n              [day-of-year (day-of-year date)]\n      \
    \        [leap-year (leap-year date)]\n              [days-in-month (days-in-month\
    \ date)]\n              [days-in-week (days-in-week date)]\n              [days-in-year\
    \ (days-in-year date)])\n        (and\n          (>= 1 day)\n          (<= 31\
    \ days* (month-of-year + 1))\n          (>= 1 day)\n          (<= 30 days* (month-of-year\
    \ + 3))\n          (>= 1 day)\n          (<= 29 days* (month-of-year + 2))\n \
    \         (>= 1 day)\n          (<= 12 days* (month-of-year + 12))\n         \
    \ (>= 1 day)\n          (<= days-in-month)\n          (>= 1 day)\n          (<=\
    \ days-in-week)\n          (>= 1 day)\n          (<= days-in-year)\n         \
    \ (>= 1 day)\n          (<= 31 days* (month-of-year + 1))\n          (>= 1 day)\n\
    \          (<= 30 days* (month-of-year + 3))\n          (>= 1 day)\n         \
    \ (<= 29 days* (month-of-year + 2))\n          (>= 1 day)\n          (<= 12 days*\
    \ (month-of-year + 12))\n          (>= 1 day)\n          (<= days-in-month)\n\
    \          (>= 1 day)\n          (<= days-in-week)\n          (>= 1 day)\n   \
    \       (<= days-in-year)\n          (>= 1 day)\n          (<= 31 days* (month-of-year\
    \ + 1))\n          (>= 1", "  (cond\n    ((not (string? date)) #f)\n    ((string?\
    \ date)\n      (let ((month (string->number date/1)))\n        (let ((day (string->number\
    \ date/2)))\n          (let ((year (string->number date/3)))\n            (cond\n\
    \              ((month < 1) #f)\n              ((month > 12) #f)\n           \
    \   ((day < 1) #f)\n              ((day > 31) #f)\n              ((month = 2)\n\
    \                (cond\n                  ((day < 1) #f)\n                  ((day\
    \ > 29) #f)\n                  (#t)\n                  (#f)))\n              ((month\
    \ = 4)\n                (cond\n                  ((day < 1) #f)\n            \
    \      ((day > 30) #f)\n                  (#t)\n                  (#f)))\n   \
    \           ((month = 6)\n                (cond\n                  ((day < 1)\
    \ #f)\n                  ((day > 30) #f)\n                  (#t)\n           \
    \       (#f)))\n              ((month = 9)\n                (cond\n          \
    \        ((day < 1) #f)\n                  ((day > 30) #f)\n                 \
    \ (#t)\n                  (#f)))\n              ((month = 11)\n              \
    \  (cond\n                  ((day < 1) #f)\n                  ((day > 30) #f)\n\
    \                  (#t)\n                  (#f)))\n              ((month = 3)\n\
    \                (cond\n                  ((day < 1) #f)\n                  ((day\
    \ > 31) #f)\n                  (#t)\n                  (#f)))\n              ((month\
    \ = 5)\n                (cond\n                  ((day < 1) #f)\n            \
    \      ((day > 31) #f)\n                  (#t)\n                  (#f)))\n   \
    \           ((month = 7)\n                (cond\n                  ((day < 1)\
    \ #f)\n                  ((day > 31) #f)\n                  (#t)\n           \
    \       (#f)))\n              ((month = 8)\n                (cond\n          \
    \        ((day < 1) #f)\n                  ((day > 31) #f)\n                 \
    \ (#t)\n                  (#f)))\n              ((month = 10)\n              \
    \  (cond\n                  ((day < 1", "  (cond\n    ((not (string? date)) #f)\n\
    \    ((not (string? (cdr date))) #f)\n    ((not (string? (car date))) #f)\n  \
    \  ((not (string? (cdr (car date)))) #f)\n    ((not (string? (car (car date))))\
    \ #f)\n    ((not (string? (cdr (car (car date))))))\n    ((not (string? (car (cdr\
    \ (car date))))))\n    ((not (string? (cdr (cdr (car date))))))\n    ((not (string?\
    \ (car (cdr (cdr (car date)))))))\n    ((not (string? (cdr (cdr (cdr (car date)))))))\n\
    \    ((not (string? (car (cdr (cdr (cdr (car date))))))))\n    ((not (string?\
    \ (cdr (cdr (cdr (cdr (car date))))))))\n    ((not (string? (car (cdr (cdr (cdr\
    \ (cdr (car date))))))))))\n    ((not (string? (cdr (cdr (cdr (cdr (cdr (car date))))))))))\n\
    \    ((not (string? (car (cdr (cdr (cdr (cdr (cdr (car date))))))))))\n    ((not\
    \ (string? (cdr (cdr (cdr (cdr (cdr (cdr (car date))))))))))\n    ((not (string?\
    \ (car (cdr (cdr (cdr (cdr (cdr (cdr (car date))))))))))))\n    ((not (string?\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (car date))))))))))))\n    ((not (string?\
    \ (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (car date))))))))))))))\n    ((not (string?\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (car date))))))))))))))\n    ((not (string?\
    \ (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (car date))))", "  (cond\n    ((not\
    \ (string? date)) #f)\n    ((= (length date) 8) #f)\n    ((= (string-ci-caseless-upcase\
    \ date 0) \"0\") #f)\n    ((= (string-ci-caseless-upcase date 1) \"1\") #t)\n\
    \    ((= (string-ci-caseless-upcase date 2) \"2\") #t)\n    ((= (string-ci-caseless-upcase\
    \ date 3) \"3\") #t)\n    ((= (string-ci-caseless-upcase date 4) \"4\") #t)\n\
    \    ((= (string-ci-caseless-upcase date 5) \"5\") #t)\n    ((= (string-ci-caseless-upcase\
    \ date 6) \"6\") #t)\n    ((= (string-ci-caseless-upcase date 7) \"7\") #t)\n\
    \    ((= (string-ci-caseless-upcase date 8) \"8\") #t)\n    ((= (string-ci-caseless-upcase\
    \ date 9) \"9\") #t)\n    ((= (string-ci-caseless-upcase date 10) \"10\") #t)\n\
    \    ((= (string-ci-caseless-upcase date 11) \"11\") #t)\n    ((= (string-ci-caseless-upcase\
    \ date 12) \"12\") #t)\n    ((= (string-ci-caseless-upcase date 13) \"13\") #f)\n\
    \    ((= (string-ci-caseless-upcase date 14) \"14\") #f)\n    ((= (string-ci-caseless-upcase\
    \ date 15) \"15\") #f)\n    ((= (string-ci-caseless-upcase date 16) \"16\") #f)\n\
    \    ((= (string-ci-caseless-upcase date 17) \"17\") #f)\n    ((= (string-ci-caseless-upcase\
    \ date 18) \"18\") #f)\n    ((= (string-ci-caseless-upcase date 19) \"19\") #f)\n\
    \    ((= (string-ci-caseless-upcase date 20) \"20\") #f)\n", "  (cond\n    ((not\
    \ (string? date)) #f)\n    ((not (string? (cdr date))) #f)\n    ((not (string?\
    \ (car date))) #f)\n    ((not (string? (cdr (car date)))) #f)\n    ((not (string?\
    \ (car (car date)))) #f)\n    ((not (string? (cdr (car (car date))))))\n    ((not\
    \ (string? (cdr (cdr (car date))))))\n    ((not (string? (car (cdr (car date))))))\n\
    \    ((not (string? (cdr (cdr (cdr date))))))\n    ((not (string? (car (cdr (cdr\
    \ (car date)))))))\n    ((not (string? (cdr (cdr (cdr (car date)))))))\n    ((not\
    \ (string? (car (cdr (cdr (cdr (car date))))))))\n    ((not (string? (cdr (cdr\
    \ (cdr (cdr (car date))))))))\n    ((not (string? (car (cdr (cdr (cdr (cdr (car\
    \ date))))))))))\n    (t #t)))\n", "  (let* ([day (string-to-integer (string-split/char\
    \ date \"-\" 0 1))]\n         [month (string-to-integer (string-split/char date\
    \ \"-\" 1 2))]\n         [year (string-to-integer (string-split/char date \"-\"\
    \ 3 4))])\n    (and (not (empty? date))\n        (and (in-range 1 31 (month))\n\
    \            (in-range 1 30 (month))\n            (in-range 1 29 (month))\n  \
    \          (in-range 1 12 (month))\n            (in-range 1 31 (day))\n      \
    \      (in-range 1 30 (day))\n            (in-range 1 29 (day)))))\n)\n", "  (let*\
    \ ((month (string->number (substring date 0 2)))\n          (day (string->number\
    \ (substring date 3 5)))\n          (year (string->number (substring date 6 9))))\n\
    \    (and\n      (not (empty? date))\n      (or\n        (and\n          (= month\
    \ 1)\n          (= day 1)\n          (= year 2000))\n        (and\n          (=\
    \ month 3)\n          (= day 11)\n          (= year 2000))\n        (and\n   \
    \       (= month 5)\n          (= day 15)\n          (= year 2012))\n        (and\n\
    \          (= month 7)\n          (= day 4)\n          (= year 2020))\n      \
    \  (and\n          (= month 9)\n          (= day 6)\n          (= year 2020))\n\
    \        (= month 2)\n        (= day 4)\n        (= year 2020))\n      (and\n\
    \        (<= month 12)\n        (>= month 1))\n      (<= day 31)\n      (>= day\
    \ 1))\n    (and\n      (<= month 12)\n      (>= month 1))\n      (<= day 30)\n\
    \      (>= day 1)))\n  #t))\n", "  (let* ([date-str (string->date date)])\n  \
    \  (and\n      (not (empty? date-str))\n      (let* ([day (day-of-month date-str)])\n\
    \        (and\n          (= day 1)\n          (or\n            (= day 31)\n  \
    \          (= day 30)\n            (= day 29)\n            (= day 28)\n      \
    \      (= day 27)\n            (= day 26)\n            (= day 25)\n          \
    \  (= day 24)\n            (= day 23)\n            (= day 22)\n            (=\
    \ day 21)\n            (= day 20)\n            (= day 19)\n            (= day\
    \ 18)\n            (= day 17)\n            (= day 16)\n            (= day 15)\n\
    \            (= day 14)\n            (= day 13)\n            (= day 12)\n    \
    \        (= day 11)\n            (= day 10)\n            (= day 9)\n         \
    \   (= day 8)\n            (= day 7)\n            (= day 6)\n            (= day\
    \ 5)\n            (= day 4)\n            (= day 3)\n            (= day 2)\n  \
    \          (= day 1)))\n      (let* ([month (month-of-year date-str)])\n     \
    \   (and\n          (= month 1)\n          (= month 3)\n          (= month 5)\n\
    \          (= month 7)\n          (= month 8)\n          (= month 10)\n      \
    \    (= month 12)\n          (<= month 12)))))))\n)\n", "  (cond\n    ((not (string?\
    \ date)) #f)\n    ((string? date)\n      (let ((day (string-split date \"-\")))\n\
    \        (cond\n          ((= (length day) 3)\n            (let ((month (string-split\
    \ day 1)))\n              (let ((year (string-split day 2)))\n               \
    \ (cond\n                  ((= (length month) 2)\n                    (cond\n\
    \                      ((= (length year) 4)\n                        (let ((day_of_month\
    \ (string-split day 2 2)))\n                          (let ((month_of_year (string-split\
    \ year 2 2)))\n                            (cond\n                           \
    \   ((= (length month_of_year) 2)\n                                (let ((day_of_week\
    \ (string-split year 2 3)))\n                                  (cond\n       \
    \                             ((= (length day_of_week) 2)\n                  \
    \                    (let ((day_of_year (string-split year 2 4)))\n          \
    \                              (cond\n                                       \
    \   ((= (length day_of_year) 4)\n                                            (let\
    \ ((month_of_day (string-split day_of_year 2 2)))\n                          \
    \                    (let ((day_of_month (string-split month_of_day 2 2)))\n \
    \                                               (let ((year_of_day (string-split\
    \ day_of_month 2 2)))\n                                                  (cond\n\
    \                                                    ((= (length year_of_day)\
    \ 4)\n                                                      (let ((day_of_year\
    \ (string-split year_of_day 2 2)))\n                                         \
    \               (let ((month_of_year (string-split year_of_day 2 3)))\n      \
    \                                                    (cond\n                 \
    \                                           ((= (length month_of_year) 2)\n  \
    \                                                            (let ((day_of_week\
    \ (string-split year_of_day 2 4)))\n                                         \
    \                       (cond\n                                              \
    \                    ((= (length day_of_week) 2)\n                           \
    \                                         (let ((day_of_month (string-split year_of_day\
    \ 2 5)))\n                                                                   \
    \   ", "  (cond\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string? date)\n      (not (empty? date))]\n    [(string? date)\n      (not\
    \ (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n    [(string?\
    \ date)\n      (not (empty? date))]\n    [(string? date)\n      (not (empty? date))]\n\
    \    [(string", "  (cond\n    ((not (string? date)) #f)\n    ((string? date)\n\
    \      (let ((day (string-split/char date \"-\" 0)))\n        (let ((month (string-split/char\
    \ date \"-\" 1)))\n          (let ((year (string-split/char date \"-\" 2)))\n\
    \            (cond\n              ((= (length day) 2)\n                (cond\n\
    \                  ((= (first day) \"0\") #f)\n                  ((= (first day)\
    \ \"1\")\n                    (cond\n                      ((= (first month) \"\
    0\") #f)\n                      ((= (first month) \"1\")\n                   \
    \     (cond\n                          ((= (first year) \"0\") #f)\n         \
    \                 ((= (first year) \"1\")\n                            (cond\n\
    \                              ((= (first year) \"4\") #t)\n                 \
    \             ((= (first year) \"5\") #f)\n                              ((= (first\
    \ year) \"6\") #t)\n                              ((= (first year) \"7\") #f)\n\
    \                              ((= (first year) \"8\") #t)\n                 \
    \             ((= (first year) \"9\") #f)\n                              ((= (first\
    \ year) \"10\") #t)\n                              ((= (first year) \"11\") #f)\n\
    \                              ((= (first year) \"12\") #t
  "  (cond\n    ((not (string? date)) #f)\n    ((not (string? (cdr date))) #f)\n \
    \   ((not (string? (car date))) #f)\n    ((not (string? (cdr (car date)))) #f)\n\
    \    ((not (string? (car (car date)))) #f)\n    ((not (string? (cdr (car (car\
    \ date))))))\n    ((not (string? (cdr (cdr (car date))))))\n    ((not (string?\
    \ (car (cdr (car date))))))\n    ((not (string? (cdr (cdr (cdr date))))))\n  \
    \  ((not (string? (car (cdr (cdr (car date))))))))\n    ((not (string? (cdr (cdr\
    \ (cdr (car date))))))))\n    ((not (string? (car (cdr (cdr (cdr (car date))))))))))\n\
    )\n", "  (cond\n    ((not (string? date)) #f)\n    ((string? date)\n      (cond\n\
    \        ((string? (first date)) #f)\n        ((string? (second date)) #f)\n \
    \       ((string? (third date)) #f)\n        ((string? (fourth date)) #f)\n  \
    \      ((string? (fifth date)) #f)\n        ((string? (sixth date)) #f)\n    \
    \    ((string? (seventh date)) #f)\n        ((string? (eighth date)) #f)\n   \
    \     ((string? (ninth date)) #f)\n        ((string? (tenth date)) #f)\n     \
    \   ((string? (eleventh date)) #f)\n        ((string? (twelfth date)) #f)\n  \
    \      ((string? (thirteenth date)) #f)\n        ((string? (fourteenth date))\
    \ #f)\n        ((string? (fifteenth date)) #f)\n        ((string? (sixteenth date))\
    \ #f)\n        ((string? (seventeenth date)) #f)\n        ((string? (eighteenth\
    \ date)) #f)\n        ((string? (nineteenth date)) #f)\n        ((string? (twentieth\
    \ date)) #f)\n        ((string? (twenty-first date)) #f)\n        ((string? (twenty-second\
    \ date)) #f)\n        ((string? (twenty-third date)) #f)\n        ((string? (twenty-fourth\
    \ date)) #f)\n        ((string? (twenty-fifth date)) #f)\n        ((string? (twenty-sixth\
    \ date)) #f)\n        ((string? (twenty-seventh date)) #f)\n        ((string?\
    \ (twenty-eighth date)) #f)\n        ((string? (twenty-ninth date)) #f)\n    \
    \    ((string? (thirtieth date)) #f)\n        ((string? (thirty-first date)) #f)\n\
    \        ((string? (thirty-second date)) #f)\n        ((string? (thirty-third\
    \ date)) #f)\n        ((string? (thirty-fourth date)) #f)\n        ((string? (thirty-fifth\
    \ date)) #f)"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
