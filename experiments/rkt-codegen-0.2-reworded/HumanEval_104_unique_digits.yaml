name: HumanEval_104_unique_digits
language: rkt
prompt: "#lang racket\n\n;; Given a list of positive integers x. return a sorted list\
  \ of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should\
  \ be sorted in increasing order.\n;; For example:\n;; >>> (unique_digits (list 15\
  \ 33 1422 1))\n;; (list 1 15 33)\n;; >>> (unique_digits (list 152 323 1422 10))\n\
  ;; (list )\n(define (unique_digits x)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n\
  \    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal?\
  \ (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list\
  \ 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103\
  \ 31)) (list 31 135))\n))\n\n(test-humaneval)"
completions: ["  (let ((result ()))\n    (for-each (lambda (x)\n                (if\
    \ (even? (car x))\n                    (return result)\n                    (result\
    \ (cons (car x) result))))\n      x x))\n  result)\n", "  (let ((result ()))\n\
    \    (for-each (lambda (x)\n                (if (odd? (car x))\n             \
    \       (append result (car x))\n                    (append result (cdr x))))\n\
    \      x))\n  (sort result)\n)\n", "  (let ((result ()))\n    (for-each (lambda\
    \ (x)\n      (if (even? (car x))\n        (return result)\n        (result (cons\
    \ (car x) result))))\n      x))\n    result)\n", "  (let ((result ()))\n    (for-each\
    \ (lambda (x)\n                (if (even? (car x))\n                    (return\
    \ result)\n                    (result (cons (car x) result))))\n            \
    \    x)\n      result))\n", "  (let ((result ()))\n    (for-each (lambda (x)\n\
    \                (if (even? (car x))\n                    (return result)\n  \
    \                  (result (cons (car x) result))))\n      x x))\n  result)\n",
  "  (let ((result ()))\n    (for-each (lambda (x)\n                (if (odd? (car\
    \ x))\n                    (append result (car x)))\n                (cdr x))\n\
    \              x)\n    (sort result)\n    result))\n", "  (let ((result ()))\n\
    \    (let ((i 0))\n      (while (< i (length x))\n        (if (even? (car x i))\n\
    \            (set-car! result (car x i))\n            (set-cdr! result (cdr x\
    \ i)))\n          (set-cdr! result (cons (car x i) result))\n          (set-car!\
    \ result (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car!\
    \ result (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car!\
    \ result (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car!\
    \ result (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car!\
    \ result (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car!\
    \ result (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car!\
    \ result (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car!\
    \ result (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car!\
    \ result (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car!\
    \ result (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car!\
    \ result (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car!\
    \ result (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car!\
    \ result (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car!\
    \ result (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car!\
    \ result (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car!\
    \ result (", "  (let ((result ()))\n    (let ((i 0))\n      (while (< i (length\
    \ x))\n        (if (even? (car x i))\n            (return result)\n          \
    \  (set! result (append result (car x i)))\n            (set! i (1+ i)))\n   \
    \     (set! i (1+ i))))\n    result))\n", "  (let ((result ()))\n    (for-each\
    \ (lambda (x)\n                (if (even? (car x))\n                    (result)\n\
    \                    (append result (car x))))\n      x))\n  (sort result)\n)\n",
  "  (let ((result ()))\n    (let ((i 0))\n      (while (< i (length x))\n       \
    \ (if (even? (car x i))\n            (set-cdr! result (cdr x i)))\n          (set-car!\
    \ result (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car!\
    \ result (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car!\
    \ result (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car!\
    \ result (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car!\
    \ result (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car!\
    \ result (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car!\
    \ result (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car!\
    \ result (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car!\
    \ result (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car!\
    \ result (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car!\
    \ result (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car!\
    \ result (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car!\
    \ result (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car!\
    \ result (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car!\
    \ result (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car!\
    \ result (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car!\
    \ result (car x i", "  (let ((result ()))\n    (let ((p (car x)))\n      (while\
    \ (not (even? p))\n        (let ((q (cdr x)))\n          (if (null? q)\n     \
    \       (append result p)\n            (set! p (car q))\n            (set! x (cdr\
    \ q)))\n          (set! x (cdr x)))\n        (set! x (car x)))\n      (set! x\
    \ (car x)))\n    (reverse result)))\n", "  (let ((result ()))\n    (for-each (lambda\
    \ (y)\n                (if (even? y)\n                    (return result)\n  \
    \                  (result (append result y))))\n      x))\n  result)\n", "  (let\
    \ ((result ()))\n    (for-each (lambda (x)\n                (if (even? (car x))\n\
    \                    (return result)\n                    (result (cons (car x)\
    \ result))))\n                x)\n    result))\n", "  (let ((result ()))\n   \
    \ (let ((i 0))\n      (while (< i (length x))\n        (if (even? (car x i))\n\
    \            (set-car! result (car x i))\n            (set-cdr! result (cdr x\
    \ i)))\n          (set-cdr! result (cons (car x i) result))\n          (set-car!\
    \ result (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car!\
    \ result (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car!\
    \ result (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car!\
    \ result (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car!\
    \ result (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car!\
    \ result (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car!\
    \ result (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car!\
    \ result (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car!\
    \ result (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car!\
    \ result (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car!\
    \ result (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car!\
    \ result (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car!\
    \ result (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car!\
    \ result (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car!\
    \ result (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car!\
    \ result (", "  (let ((result ()))\n    (let ((p (car x)))\n      (while (not\
    \ (even? p))\n        (let ((q (cdr x)))\n          (if (null? q)\n          \
    \  (append result p)\n            (append result p q))))\n      (append result\
    \ p)))\n  (sort result))\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that has only one even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> (unique_even_digits\
    \ (list 15 33 1422 1))\n;; (list 1 15)\n;; >>> (unique_even_digits (list 152 323\
    \ 1422 10))\n;; (list 10)", "  (let ((result ()))\n    (if (null? x)\n      result\n\
    \      (if (even? (car x))\n        (append result (cdr x))\n        (append result\
    \ x))))))\n", "  (let ((result ()))\n    (for-each (lambda (x)\n             \
    \   (if (even? (car x))\n                    (return result)\n               \
    \     (result (cons (car x) result))))\n      x x))\n  result)\n", "  (let ((result\
    \ ()))\n    (let ((i 0))\n      (while (< i (length x))\n        (if (even? (car\
    \ x i))\n          (set! result (append result (cdr x i)))\n          (set! i\
    \ (+ i 1)))))\n    (reverse result)))\n", "  (let ((result ()))\n    (for-each\
    \ (lambda (x)\n                (if (even? (car x))\n                    (return\
    \ result)\n                    (result (cons (car x) result))))\n           x))\n\
    \  result)\n", "  (let ((result ()))\n    (for-each (lambda (x)\n            \
    \    (if (even? (car x))\n                    (return result)\n              \
    \      (result (cons (car x) result))))\n      x x))\n  result)\n", "  (let ((result\
    \ ()))\n    (for-each (lambda (y)\n                (if (even? y)\n           \
    \         (return result)\n                    (result (append result y))))\n\
    \      x))\n  result)\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that has only one digit.\n;; Note: Returned list should\
    \ be sorted in increasing order.\n;; For example:\n;; >>> (unique_digits (list\
    \ 15 33 1422 1))\n;; (list 1 15 33)\n;; >>> (unique_digits (list 152 323 1422\
    \ 10))\n;; (list 10)", "  (let ((result ()))\n    (for-each (lambda (y)\n    \
    \            (if (even? y)\n                    (return result)\n            \
    \        (result (cons y y))))\n      x))\n  result)\n\n;; Given a list of positive\
    \ integers x. return a sorted list of all \n;; elements that has only one digit.\n\
    ;; Note: Returned list should be sorted in increasing order.\n;; For example:\n\
    ;; >>> (unique_digits (list 15 33 1422 1))\n;; (list 1 15)\n;; >>> (unique_digits\
    \ (list 152 323 1422 10))\n;; (list 10)", "  (let ((result ()))\n    (for-each\
    \ (lambda (x)\n                (if (even? (car x))\n                    (return\
    \ result)\n                    (result (cons (car x) result))))\n            \
    \ x))\n  result)\n", "  (let ((result ()))\n    (for-each (lambda (x)\n      \
    \          (if (even? (car x))\n                    (return result)\n        \
    \            (result (cons (car x) result))))\n            x))\n  result)\n",
  "  (let ((result ()))\n    (for-each (lambda (x)\n                (if (even? (car\
    \ x))\n                  (return result)\n                  (result (cons (car\
    \ x) result))))\n      x x))\n  result)\n", "  (let ((result ()))\n    (let ((i\
    \ 0))\n      (while (< i (length x))\n        (if (even? (car x i))\n        \
    \    (set-car! result (car x i))\n            (set-cdr! result (cdr x i)))\n \
    \         (set-cdr! result (cons (car x i) result))\n          (set-car! result\
    \ (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car! result\
    \ (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car! result\
    \ (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car! result\
    \ (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car! result\
    \ (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car! result\
    \ (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car! result\
    \ (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car! result\
    \ (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car! result\
    \ (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car! result\
    \ (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car! result\
    \ (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car! result\
    \ (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car! result\
    \ (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car! result\
    \ (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car! result\
    \ (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car! result\
    \ (", "  (let ((result ()))\n    (for-each (lambda (y)\n                (if (even?\
    \ y)\n                    (return result)\n                    (result (cons y\
    \ y))))\n      x)\n    (sort result)\n    result))\n", "  (let ((result ()))\n\
    \    (let ((i 0))\n      (while (< i (length x))\n        (if (even? (car x i))\n\
    \            (return result)\n            (set! result (append result (car x i)))\n\
    \            (set! i (1+ i)))\n        (set! i (1+ i))))\n    (reverse result)))\n",
  "  (let ((result ()))\n    (for-each (lambda (x)\n                (if (even? (car\
    \ x))\n                    (return result)\n                    (result (cons\
    \ (car x) result))))\n      x x))\n  result)\n", "  (let ((result ()))\n    (let\
    \ ((i 0))\n      (while (< i (length x))\n        (if (even? (car x i))\n    \
    \        (set-car! result (car x i))\n            (set-cdr! result (cdr x i)))\n\
    \          (set-cdr! result (cons (car x i) result))\n          (set-car! result\
    \ (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car! result\
    \ (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car! result\
    \ (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car! result\
    \ (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car! result\
    \ (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car! result\
    \ (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car! result\
    \ (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car! result\
    \ (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car! result\
    \ (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car! result\
    \ (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car! result\
    \ (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car! result\
    \ (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car! result\
    \ (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car! result\
    \ (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car! result\
    \ (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car! result\
    \ (", "  (let ((result ()))\n    (for-each (lambda (y)\n                (if (even?\
    \ y)\n                    (return result)\n                    (result (append\
    \ result y))))\n      x))\n  result)\n", "  (let ((result ()))\n    (for-each\
    \ (lambda (x)\n                (if (even? (car x))\n                    (result)\n\
    \                    (result (cons x (unique_digits (cdr x))))))\n           \
    \    x))\n  result)\n", "  (let ((result ()))\n    (if (null? x)\n      (list)\n\
    \      (if (even? (car x))\n        (append result (cdr x))\n        (append result\
    \ x)\n        (unique_digits (cdr x))))))\n", "  (let ((result ()))\n    (let\
    \ ((i 0))\n      (while (< i (length x))\n        (if (even? (car x i))\n    \
    \        (set-car! result (car x i))\n            (set-cdr! result (cdr x i)))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i",
  "  (let ((result ()))\n    (let ((i 0))\n      (while (< i (length x))\n       \
    \ (if (even? (car x i))\n            (set! result (append result (car x i)))\n\
    \            (set! i (1+ i)))\n        (set! i (1+ i)))\n      result))\n  result)\n",
  "  (let ((result ()))\n    (for-each (lambda (x)\n                (if (even? (car\
    \ x))\n                    (return result)\n                    (result (cons\
    \ (car x) result))))\n                x)\n      result))\n", "  (let ((result\
    \ ()))\n    (for-each (lambda (y)\n                (if (even? y)\n           \
    \         (return result)\n                    (append result y)))\n      x)\n\
    \    (sort result)\n    result))\n", "  (let ((result ()))\n    (for-each (lambda\
    \ (x)\n                (if (even? (car x))\n                    (result)\n   \
    \                 (result (cons (car x) result))))\n      x))\n  (sort result))\n\
    \n;; Given a list of positive integers x. return a sorted list of all \n;; elements\
    \ that has only one even digit.\n;; Note: Returned list should be sorted in increasing\
    \ order.\n;; For example:\n;; >>> (unique_even_digits (list 15 33 1422 1))\n;;\
    \ (list 1 15)\n;; >>> (unique_even_digits (list 152 323 1422 10))\n;; (list )",
  "  (let ((result ()))\n    (for-each (lambda (y)\n                (if (even? y)\n\
    \                    (return result)\n                    (result (append result\
    \ y))))\n      x))\n  result)\n\n;; Given a list of positive integers x. return\
    \ a sorted list of all \n;; elements that has only one even digit.\n;; Note: Returned\
    \ list should be sorted in increasing order.\n;; For example:\n;; >>> (unique_even_digits\
    \ (list 15 33 1422 1))\n;; (list 1 15)\n;; >>> (unique_even_digits (list 152 323\
    \ 1422 10))\n;; (list 10)", "  (let ((result ()))\n    (for-each (lambda (y)\n\
    \                (if (even? y)\n                    (return result)\n        \
    \            (append result y)))\n      x)\n    result))\n", "  (let ((result\
    \ ()))\n    (for-each (lambda (x)\n                (if (even? (car x))\n     \
    \             (return result)\n                  (result (cons (car x) result))))\n\
    \           x))\n  result)\n", "  (let ((result ()))\n    (for-each (lambda (y)\n\
    \                (if (even? y)\n                    (return result)\n        \
    \            (result (append result y))))\n      x))\n  result)\n", "  (let ((result\
    \ ()))\n    (for-each (lambda (y)\n                (if (even? y)\n           \
    \         (return result)\n                    (result (cons y y))))\n      x))\n\
    \  result)\n", "  (let ((result ()))\n    (for-each (lambda (x)\n      (if (even?\
    \ (car x))\n        (return result)\n        (result (cons (car x) result))))\n\
    \      x))\n    result)\n", "  (let ((result ()))\n    (for-each (lambda (y)\n\
    \                (if (even? y)\n                    (return result)\n        \
    \            (result (append result y))))\n      x))\n  result)\n", "  (let ((result\
    \ ()))\n    (for-each (lambda (x)\n                (if (even? (car x))\n     \
    \               (return result)\n                    (result (cons (car x) result))))\n\
    \                x)\n      result))\n", "  (let ((result ()))\n    (for-each (lambda\
    \ (x)\n                (if (even? (car x))\n                    (return result)\n\
    \                    (result (cons (car x) result))))\n           x))\n  result)\n",
  "  (let ((result ()))\n    (for-each (lambda (y)\n                (if (even? y)\n\
    \                    (return result)\n                    (result (cons y y))))\n\
    \      x)\n    result))\n", "  (let ((result ()))\n    (for-each (lambda (y)\n\
    \                (if (even? y)\n                    (return result)\n        \
    \            (append result y)))\n      x)\n    result))\n", "  (let ((result\
    \ ()))\n    (for-each (lambda (x)\n                (if (even? (car x))\n     \
    \               (result)\n                    (result (cons x result))))\n   \
    \   x))\n  (sort result))\n", "  (let ((result ()))\n    (for-each (lambda (x)\n\
    \                (if (even? (car x))\n                    (return result)\n  \
    \                  (result (cons (car x) result))))\n              x))\n  result)\n",
  "  (let ((result ()))\n    (for-each (lambda (y)\n                (if (even? y)\n\
    \                    (return result)\n                    (result (append result\
    \ y))))\n      x))\n  result)\n", "  (let ((result ()))\n    (for-each (lambda\
    \ (y)\n                (if (even? y)\n                    (return result)\n  \
    \                  (result (append result y))))\n      x))\n  result)\n", "  (let\
    \ ((result ()))\n    (let ((p (car x)))\n      (while (not (even? p))\n      \
    \  (let ((q (cdr x)))\n          (if (null? q)\n            (append result p)\n\
    \            (append result p q))))\n      (append result p)))\n  (sort result))\n\
    \n;; Given a list of positive integers x. return a sorted list of all \n;; elements\
    \ that has only one odd digit.\n;; Note: Returned list should be sorted in increasing\
    \ order.\n;; For example:\n;; >>> (unique_odd_digits (list 15 33 1422 1))\n;;\
    \ (list 1 3 1422)\n;; >>> (unique_odd_digits (list 152 323 1422 10))\n;; (list\
    \ )", "  (let ((result ()))\n    (let ((i 0))\n      (while (< i (length x))\n\
    \        (if (even? (car x i))\n          (set-car! result (car x i))\n      \
    \    (set-cdr! result (cdr x i)))\n        (set-car! result (car x i))\n     \
    \   (set-cdr! result (cdr x i))\n        (set-car! result (car x i))\n       \
    \ (set-cdr! result (cdr x i))\n        (set-car! result (car x i))\n        (set-cdr!\
    \ result (cdr x i))\n        (set-car! result (car x i))\n        (set-cdr! result\
    \ (cdr x i))\n        (set-car! result (car x i))\n        (set-cdr! result (cdr\
    \ x i))\n        (set-car! result (car x i))\n        (set-cdr! result (cdr x\
    \ i))\n        (set-car! result (car x i))\n        (set-cdr! result (cdr x i))\n\
    \        (set-car! result (car x i))\n        (set-cdr! result (cdr x i))\n  \
    \      (set-car! result (car x i))\n        (set-cdr! result (cdr x i))\n    \
    \    (set-car! result (car x i))\n        (set-cdr! result (cdr x i))\n      \
    \  (set-car! result (car x i))\n        (set-cdr! result (cdr x i))\n        (set-car!\
    \ result (car x i))\n        (set-cdr! result (cdr x i))\n        (set-car! result\
    \ (car x i))\n        (set-cdr! result (cdr x i))\n        (set-car! result (car\
    \ x i))\n        (set-cdr! result (cdr x i))\n        (set-car! result (car x\
    \ i))\n        (set-cdr! result (cdr x i))\n        (set-car! result (car x i))\n\
    \        (set-cdr! result (cdr x i", "  (let ((result ()))\n    (for-each (lambda\
    \ (x)\n                (if (even? (car x))\n                    (return result)\n\
    \                    (result (cons (car x) result))))\n               x))\n  result)\n",
  "  (let ((result ()))\n    (for-each (lambda (x)\n                (if (even? (car\
    \ x))\n                  (return result)\n                  (result (cons (car\
    \ x) result))))\n      x))\n  (sort result))\n", "  (let ((result ()))\n    (if\
    \ (null? x)\n      (list)\n      (let ((i (car x)))\n        (if (even? i)\n \
    \         (append result i)\n          (let ((next (cdr x)))\n            (if\
    \ (null? next)\n              (append result i)\n              (unique_digits\
    \ next)\n            )\n          )\n        )\n      )\n    )\n  )\n)\n", " \
    \ (let ((result ()))\n    (for-each (lambda (x)\n                (if (even? (car\
    \ x))\n                    (return result)\n                    (result (cons\
    \ (car x) result))))\n      x))\n  result)\n", "  (let ((result ()))\n    (if\
    \ (null? x)\n      result\n    (if (even? (car x))\n      (append result (cdr\
    \ x))\n    (append result x))))\n)\n\n;; Given a list of positive integers x.\
    \ return a sorted list of all \n;; elements that has only one digit.\n;; Note:\
    \ Returned list should be sorted in increasing order.\n;; For example:\n;; >>>\
    \ (unique_digits (list 15 33 1422 1))\n;; (list 1 15 33)\n;; >>> (unique_digits\
    \ (list 152 323 1422 10))\n;; (list 10)", "  (let ((result ()))\n    (for-each\
    \ (lambda (y)\n                (if (even? y)\n                    (return result)\n\
    \                    (result (append result y))))\n      x))\n  result)\n", " \
    \ (let ((result ()))\n    (for-each (lambda (x)\n                (if (even? (car\
    \ x))\n                  (return result)\n                  (append result (car\
    \ x))))\n      x))\n  (sort result)\n)\n\n;; Given a list of positive integers\
    \ x. return a sorted list of all \n;; elements that has only one even digit.\n\
    ;; Note: Returned list should be sorted in increasing order.\n;; For example:\n\
    ;; >>> (unique_even_digits (list 15 33 1422 1))\n;; (list 1 15)\n;; >>> (unique_even_digits\
    \ (list 152 323 1422 10))\n;; (list 10)", "  (let ((result ()))\n    (for-each\
    \ (lambda (x)\n                (if (even? (car x))\n                    (result)\n\
    \                    (result (cons (car x) result))))\n      x))\n  (sort result))\n",
  "  (let ((result ()))\n    (let ((i 0))\n      (while (< i (length x))\n       \
    \ (if (even? (car x i))\n            (set-car! result (car x i))\n           \
    \ (set-cdr! result (cdr x i)))\n          (set-cdr! result (cons (car x i) result))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (", "  (let ((result ()))\n    (let ((p (car x)))\n\
    \      (while (not (even? p))\n        (let ((q (cdr x)))\n          (if (null?\
    \ q)\n            (append result p)\n            (set! p (car q))\n          \
    \  (set! x (cdr q)))\n          (set! x (cdr x)))\n        (set! x (car x)))\n\
    \      (set! x (car x)))\n    (reverse result)))\n\n;; Given a list of positive\
    \ integers x. return a sorted list of all \n;; elements that has only one even\
    \ digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For\
    \ example:\n;; >>> (unique_even_digits (list 15 33 1422 1))\n;; (list 1 15)\n\
    ;; >>> (unique_even_digits (list 152 323 1422 10))\n;; (list 10)", "  (let ((result\
    \ ()))\n    (for-each (lambda (x)\n                (if (even? (car x))\n     \
    \             (return result)\n                  (result (cons (car x) result))))\n\
    \           x)\n      result))\n", "  (let ((result ()))\n    (for-each (lambda\
    \ (x)\n                (if (even? x)\n                    (return result)\n  \
    \                  (result (append result x))))\n       x))\n  result)\n", " \
    \ (let ((result ()))\n    (for-each (lambda (y)\n                (if (even? y)\n\
    \                    (return result)\n                    (result (cons y y))))\n\
    \      x))\n  result)\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that has only one even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> (unique_even_digits\
    \ (list 15 33 1422 1))\n;; (list 1 15)\n;; >>> (unique_even_digits (list 152 323\
    \ 1422 10))\n;; (list 10)", "  (let ((result ()))\n    (for-each (lambda (x)\n\
    \                (if (even? (car x))\n                    (return result)\n  \
    \                  (result (cons (car x) result))))\n      x))\n  result)\n",
  "  (let ((result ()))\n    (for-each (lambda (x)\n                (if (even? (car\
    \ x))\n                    (return result)\n                    (result (cons\
    \ (car x) result))))\n              x)\n    (reverse result)))\n", "  (let ((result\
    \ ()))\n    (let ((p (car x)))\n      (while (not (even? p))\n        (let ((q\
    \ (cdr x)))\n          (if (null? q)\n            (append result p)\n        \
    \    (set! p (car q))\n            (set! x (cdr q))))))\n    (reverse result)))\n",
  "  (let ((result ()))\n    (for-each (lambda (x)\n      (if (even? (car x))\n  \
    \      (return result)\n        (result (cons (car x) result))))\n      x))\n\
    \    result)\n", "  (let ((result ()))\n    (for-each (lambda (x)\n          \
    \      (if (even? (car x))\n                    (return result)\n            \
    \        (result (cons (car x) result))))\n            x))\n  result)\n", "  (let\
    \ ((result ()))\n    (for-each (lambda (x)\n                (if (even? (car x))\n\
    \                  (return result)\n                  (result (cons (car x) result))))\n\
    \      x))\n  result)\n", "  (let ((result ()))\n    (for-each (lambda (x)\n \
    \               (if (even? (car x))\n                    (result)\n          \
    \          (result (cons (car x) result))))\n            x))\n  (sort result))\n\
    \n;; Given a list of positive integers x. return a sorted list of all \n;; elements\
    \ that has only one digit.\n;; Note: Returned list should be sorted in increasing\
    \ order.\n;; For example:\n;; >>> (unique_digits (list 15 33 1422 1))\n;; (list\
    \ 1 15 33)\n;; >>> (unique_digits (list 152 323 1422 10))\n;; (list 10)", "  (let\
    \ ((result ()))\n    (let ((i 0))\n      (while (< i (length x))\n        (if\
    \ (even? (car x i))\n            (set-car! result (car x i))\n            (set-car!\
    \ result (car x i)))))\n    (reverse result)))\n", "  (let ((result ()))\n   \
    \ (for-each (lambda (x)\n                (if (even? (car x))\n               \
    \   (return result)\n                  (result (cons (car x) result))))\n    \
    \         x)\n    (reverse result)))\n", "  (let ((result ()))\n    (for-each\
    \ (lambda (y)\n                (if (even? y)\n                    (return result)\n\
    \                    (result (append result y))))\n      x))\n  result)\n", " \
    \ (let ((result ()))\n    (let ((p (car x)))\n      (while (not (even? p))\n \
    \       (let ((q (cdr x)))\n          (if (null? q)\n            (append result\
    \ p)\n            (set! p (car q))\n            (set! x (cdr q)))\n          (set!\
    \ x (cdr x)))\n        (set! x (car x)))\n      (set! x (car x)))\n    (reverse\
    \ result)))\n\n;; Given a list of positive integers x. return a sorted list of\
    \ all \n;; elements that has only one even digit.\n;; Note: Returned list should\
    \ be sorted in increasing order.\n;; For example:\n;; >>> (unique_even_digits\
    \ (list 15 33 1422 1))\n;; (list 1 1422)\n;; >>> (unique_even_digits (list 152\
    \ 323 1422 10))\n;; (list )", "  (let ((result ()))\n    (let ((i 0))\n      (while\
    \ (< i (length x))\n        (if (even? (car x i))\n            (set-cdr! result\
    \ (cdr x i)))\n          (set-cdr! result (cons (car x i) result))\n         \
    \ (set-car! x (car x i))\n          (set-cdr! x (cdr x i))\n          (set-cdr!\
    \ i (cdr i))\n          (set-car! i (car i))\n          (set-cdr! i (cdr i))\n\
    \        )\n      )\n    (reverse result)\n  )\n)\n", "  (let ((result ()))\n\
    \    (for-each (lambda (x)\n                (if (even? (car x))\n            \
    \        (return result)\n                    (result (cons (car x) result))))\n\
    \      x x))\n  result)\n", "  (let ((result ()))\n    (for-each (lambda (x)\n\
    \                (if (even? (car x))\n                    (return result)\n  \
    \                  (result (cons (car x) result))))\n                x)\n    (reverse\
    \ result)))\n", "  (let ((result ()))\n    (for-each (lambda (y)\n           \
    \     (if (even? y)\n                    (return result)\n                   \
    \ (result (append result y))))\n      x)\n    (sort result)\n    result))\n",
  "  (let ((result ()))\n    (for-each (lambda (x)\n                (if (even? (car\
    \ x))\n                    (return result)\n                    (result (cons\
    \ (car x) result))))\n      x))\n  result)\n", "  (let ((result ()))\n    (let\
    \ ((i 0))\n      (while (< i (length x))\n        (if (even? (car x i))\n    \
    \        (set-car! result (car x i))\n            (set-cdr! result (cdr x i)))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i",
  "  (let ((result ()))\n    (for-each (lambda (y)\n                (if (even? y)\n\
    \                    (return result)\n                    (result (append result\
    \ y))))\n      x))\n  result)\n", "  (let ((result ()))\n    (let ((i 0))\n  \
    \    (while (< i (length x))\n        (if (odd? (car x i))\n            (return\
    \ (append result (car x i)))\n            (set! i (+ i 1))))\n        (append\
    \ result (car x i))))\n  result)\n", "  (let ((result ()))\n    (for-each (lambda\
    \ (x)\n                (if (even? (car x))\n                  (return result)\n\
    \                  (append result (car x))))\n      x))\n  (sort result))\n\n\
    ;; Given a list of positive integers x. return a sorted list of all \n;; elements\
    \ that has only one digit.\n;; Note: Returned list should be sorted in increasing\
    \ order.\n;; For example:\n;; >>> (unique_digits (list 15 33 1422 1))\n;; (list\
    \ 1 15 33)\n;; >>> (unique_digits (list 152 323 1422 10))\n;; (list 10)", "  (let\
    \ ((result ()))\n    (for-each (lambda (x)\n                (if (even? (car x))\n\
    \                    (return result)\n                    (result (cons (car x)\
    \ result))))\n           x)\n      result))\n", "  (let ((result ()))\n    (let\
    \ ((i 0))\n      (while (< i (length x))\n        (if (even? (car x i))\n    \
    \        (set-car! result (car x i))\n            (set-cdr! result (cdr x i)))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i",
  "  (let ((result ()))\n    (for-each (lambda (x)\n                (if (even? (car\
    \ x))\n                    (return result)\n                    (result (cons\
    \ (car x) result))))\n      x x))\n  result)\n", "  (let ((result ()))\n    (for-each\
    \ (lambda (y)\n                (if (even? y)\n                    (return result)\n\
    \                    (result (append result y))))\n      x))\n  result)\n\n;;\
    \ Given a list of positive integers x. return a sorted list of all \n;; elements\
    \ that has only one even digit.\n;; Note: Returned list should be sorted in increasing\
    \ order.\n;; For example:\n;; >>> (unique_even_digits (list 15 33 1422 1))\n;;\
    \ (list 1 15)\n;; >>> (unique_even_digits (list 152 323 1422 10))\n;; (list 10)",
  "  (let ((result ()))\n    (for-each (lambda (y)\n                (if (even? y)\n\
    \                    (return result)\n                    (result (append result\
    \ y))))\n      x))\n  result)\n", "  (let ((result ()))\n    (for-each (lambda\
    \ (x)\n                (if (even? (car x))\n                    (return result)\n\
    \                    (result (cons (car x) result))))\n      x x))\n  result)\n",
  "  (let ((result ()))\n    (for-each (lambda (y)\n                (if (even? y)\n\
    \                    (return result)\n                    (result (append result\
    \ y))))\n      x))\n  result)\n", "  (let ((result ()))\n    (for-each (lambda\
    \ (x)\n                (if (even? (car x))\n                    (return result)\n\
    \                    (result (cons (car x) result))))\n      x x))\n  result)\n",
  "  (let ((result ()))\n    (for-each (lambda (y)\n                (if (even? y)\n\
    \                    (return result)\n                    (result (cons y y))))\n\
    \      x))\n  result)\n", "  (let ((result ()))\n    (for-each (lambda (y)\n \
    \               (if (even? y)\n                    (return result)\n         \
    \           (result (cons y y))))\n      x))\n  result)\n", "  (let ((result ()))\n\
    \    (for-each (lambda (x)\n                (if (even? x)\n                  \
    \  (return result)\n                    (result (cons x))))\n      x x)))\n",
  "  (let ((result ()))\n    (for-each (lambda (y)\n                (if (even? y)\n\
    \                    (return result)\n                    (result (append result\
    \ y))))\n      x))\n  result)\n", "  (let ((result ()))\n    (for-each (lambda\
    \ (x)\n                (if (even? (car x))\n                    (return result)\n\
    \                    (result (cons (car x) result))))\n                x))\n \
    \ result)\n", "  (let ((result ()))\n    (for-each (lambda (y)\n             \
    \   (if (odd? y)\n                    (append result y)))\n      x))\n  (sort\
    \ result)\n)\n\n;; Given a list of positive integers x. return a sorted list of\
    \ all \n;; elements that has only one even digit.\n;; Note: Returned list should\
    \ be sorted in increasing order.\n;; For example:\n;; >>> (unique_even_digits\
    \ (list 15 33 1422 1))\n;; (list 1 1422)\n;; >>> (unique_even_digits (list 152\
    \ 323 1422 10))\n;; (list 10)", "  (let ((result ()))\n    (for-each (lambda (y)\n\
    \                (if (even? y)\n                    (return result)\n        \
    \            (result (append result y))))\n      x))\n  result)\n", "  (let ((result\
    \ ()))\n    (for-each (lambda (y)\n                (if (even? y)\n           \
    \         (return result)\n                    (result (append result y))))\n\
    \      x))\n  result)\n", "  (let ((result ()))\n    (for-each (lambda (x)\n \
    \     (if (even? (car x))\n        (return result)\n        (result (cons (car\
    \ x) result))))\n      x))\n    result)\n", "  (let ((result ()))\n    (let ((i\
    \ 0))\n      (while (< i (length x))\n        (if (even? (car x i))\n        \
    \    (set-car! result (car x i))\n            (set-cdr! result (cdr x i)))\n \
    \         (set-cdr! result (cons (car x i) result))\n          (set-car! result\
    \ (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car! result\
    \ (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car! result\
    \ (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car! result\
    \ (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car! result\
    \ (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car! result\
    \ (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car! result\
    \ (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car! result\
    \ (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car! result\
    \ (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car! result\
    \ (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car! result\
    \ (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car! result\
    \ (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car! result\
    \ (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car! result\
    \ (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car! result\
    \ (car x i))\n          (set-cdr! result (cdr x i))\n          (set-car! result\
    \ (", "  (let ((result ()))\n    (for-each (lambda (x)\n                (if (even?\
    \ (car x))\n                    (result)\n                    (result (cons (car\
    \ x) result))))\n      x))\n  result)\n", "  (let ((result ()))\n    (for-each\
    \ (lambda (x)\n      (if (even? x)\n        (return result)\n        (result (cons\
    \ x))))\n      x))\n  result)\n", "  (let ((result ()))\n    (for-each (lambda\
    \ (x)\n                (if (even? (car x))\n                    (return result)\n\
    \                    (result (cons (car x) result))))\n                x)\n  \
    \  result))\n", "  (let ((result ()))\n    (let ((i 0))\n      (while (< i (length\
    \ x))\n        (if (even? (car x i))\n          (set! result (append result (car\
    \ x i)))\n          (set! i (1+ i)))))\n    (reverse result)))\n", "  (let ((result\
    \ ()))\n    (for-each (lambda (y)\n                (if (even? y)\n           \
    \         (return result)\n                    (result (append result y))))\n\
    \      x))\n  result)\n", "  (let ((result ()))\n    (for-each (lambda (y)\n \
    \               (if (even? y)\n                    (return result)\n         \
    \           (result (append result y))))\n      x))\n  result)\n", "  (let ((result\
    \ ()))\n    (for-each (lambda (x)\n                (if (even? (car x))\n     \
    \               (return result)\n                    (result (cons (car x) result))))\n\
    \                x)\n    (reverse result)))\n", "  (let ((result ()))\n    (for-each\
    \ (lambda (x)\n                (if (even? (car x))\n                  (return\
    \ result)\n                  (result (cons (car x) result))))\n           x))\n\
    \  result)\n", "  (let ((result ()))\n    (let ((p (car x)))\n      (while (not\
    \ (even? p))\n        (let ((q (car x)))\n          (if (even? q)\n          \
    \  (error \"Invalid input\")\n            (result (append result p q))))\n   \
    \       (setq x (cdr x))))\n    (reverse result)))\n", "  (let ((result ()))\n\
    \    (for-each (lambda (x)\n                (if (even? (car x))\n            \
    \      (return result)\n                  (result (cons (car x) result))))\n \
    \            x))\n  result)\n", "  (let ((result ()))\n    (let ((i 0))\n    \
    \  (while (< i (length x))\n        (if (even? (car x i))\n            (set-car!\
    \ result (car x i))\n            (set-car! result (car x i))\n            (set-cdr!\
    \ result (cdr x i)))\n          (set-cdr! result (cons (car x i) (cdr x i)))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr", "  (let ((result\
    \ ()))\n    (for-each (lambda (x)\n                (if (even? (car x))\n     \
    \               (return result)\n                    (result (cons (car x) result))))\n\
    \               x))\n  result)\n", "  (let ((result ()))\n    (let ((p (car x)))\n\
    \      (while (not (even? p))\n        (let ((q (cdr x)))\n          (if (null?\
    \ q)\n            (append result p)\n            (append result p)\n         \
    \   (append result p))))\n        (append result p)))\n    (reverse result)))\n",
  "  (let ((result ()))\n    (for-each (lambda (y)\n                (if (even? y)\n\
    \                    (return result)\n                    (result (cons y y))))\n\
    \      x))\n  result)\n", "  (let ((result ()))\n    (for-each (lambda (x)\n \
    \               (if (even? (car x))\n                    (return result)\n   \
    \                 (result (cons (car x) result))))\n      x x))\n  result)\n",
  "  (let ((result ()))\n    (for-each (lambda (y)\n                (if (even? y)\n\
    \                    (return result)\n                    (append result y)))\n\
    \      x)\n    result))\n", "  (let ((result ()))\n    (for-each (lambda (x)\n\
    \                (if (even? (car x))\n                    (return result)\n  \
    \                  (result (cons (car x) result))))\n      x x))\n  result)\n",
  "  (let ((result ()))\n    (for-each (lambda (x)\n      (if (even? (car x))\n  \
    \      (return result)\n        (result (cons (car x) result))))\n      x))\n\
    \    result)\n", "  (let ((result ()))\n    (for-each (lambda (x)\n          \
    \      (if (even? (car x))\n                    (result)\n                   \
    \ (append result (car x))))\n      x))\n  (sort result))\n\n;; Given a list of\
    \ positive integers x. return a sorted list of all \n;; elements that has only\
    \ one even digit.\n;; Note: Returned list should be sorted in increasing order.\n\
    ;; For example:\n;; >>> (unique_even_digits (list 15 33 1422 1))\n;; (list 1 15)\n\
    ;; >>> (unique_even_digits (list 152 323 1422 10))\n;; (list 10)", "  (let ((result\
    \ ()))\n    (for-each (lambda (x)\n                (if (even? (car x))\n     \
    \             (return result)\n                  (result (cons (car x) result))))\n\
    \      x))\n  result)\n", "  (let ((result ()))\n    (for-each (lambda (x)\n \
    \               (if (even? (car x))\n                    (return result)\n   \
    \                 (result (cons (car x) result))))\n           x))\n  result)\n",
  "  (let ((result ()))\n    (for-each (lambda (x)\n                (if (even? (car\
    \ x))\n                  (return result)\n                  (result (cons (car\
    \ x) result))))\n             x))\n  result)\n", "  (let ((result ()))\n    (let\
    \ ((p (car x)))\n      (while (not (even? p))\n        (let ((q (cdr x)))\n  \
    \        (if (null? q)\n            (append result p)\n            (set! p (car\
    \ q))\n            (set! x (cdr q))))))\n    (reverse result)))\n\n;; Given a\
    \ list of positive integers x. return a sorted list of all \n;; elements that\
    \ has only one odd digit.\n;; Note: Returned list should be sorted in increasing\
    \ order.\n;; For example:\n;; >>> (unique_odd_digits (list 15 33 1422 1))\n;;\
    \ (list 1 15)\n;; >>> (unique_odd_digits (list 152 323 1422 10))\n;; (list 10)",
  "  (let ((result ()))\n    (for-each (lambda (y)\n                (if (even? y)\n\
    \                    (return result)\n                    (result (append result\
    \ y))))\n      x))\n  result)\n", "  (let ((result ()))\n    (for-each (lambda\
    \ (y)\n                (if (even? y)\n                    (return result)\n  \
    \                  (result (cons y y))))\n      x))\n  result)\n\n;; Given a list\
    \ of positive integers x. return a sorted list of all \n;; elements that has only\
    \ one digit.\n;; Note: Returned list should be sorted in increasing order.\n;;\
    \ For example:\n;; >>> (unique_digits (list 15 33 1422 1))\n;; (list 1 15 33)\n\
    ;; >>> (unique_digits (list 152 323 1422 10))\n;; (list 10)", "  (let ((result\
    \ ()))\n    (for-each (lambda (x)\n                (if (even? (car x))\n     \
    \               (return result)\n                    (result (cons (car x) result))))\n\
    \              x))\n  result)\n", "  (let ((result ()))\n    (for-each (lambda\
    \ (x)\n                (if (even? (car x))\n                  (return result)\n\
    \                  (result (cons (car x) result))))\n      x))\n  result)\n",
  "  (let ((result ()))\n    (for-each (lambda (x)\n                (if (even? (car\
    \ x))\n                    (return result)\n                    (result (cons\
    \ (car x) result))))\n      x x))\n  result)\n", "  (let ((result ()))\n    (let\
    \ ((i 0))\n      (while (< i (length x))\n        (if (even? (car x i))\n    \
    \        (return result)\n            (set! result (append result (car x i)))\n\
    \            (set! i (1+ i)))\n        (set! i (1+ i)))\n      result))\n  x)\n",
  "  (let ((result ()))\n    (for-each (lambda (y)\n                (if (even? y)\n\
    \                    (return result)\n                    (result (append result\
    \ y))))\n      x))\n  result)\n", "  (let ((result ()))\n    (let ((i 0))\n  \
    \    (while (< i (length x))\n        (if (even? (car x i))\n          (set-car!\
    \ result (car x i))\n          (set-cdr! result (cdr x i))\n          (set-cdr!\
    \ result (cons (car x i) (cdr x i))))\n        (set-cdr! result (cons (car x i)\
    \ (cdr x i))))\n      (set-cdr! result (cons (car x i) (cdr x i))))\n    (cdr\
    \ result)))\n\n;; Given a list of positive integers x. return a sorted list of\
    \ all \n;; elements that has only one odd digit.\n;; Note: Returned list should\
    \ be sorted in increasing order.\n;; For example:\n;; >>> (odd_digits (list 15\
    \ 33 1422 1))\n;; (list 1 15)\n;; >>> (odd_digits (list 152 323 1422 10))\n;;\
    \ (list 10)", "  (let ((result ()))\n    (for-each (lambda (y)\n             \
    \   (if (even? y)\n                    (return result)\n                    (result\
    \ (append result y))))\n      x))\n  result)\n", "  (let ((result ()))\n    (for-each\
    \ (lambda (y)\n                (if (even? y)\n                    (return result)\n\
    \                    (result (append result y))))\n      x))\n  result)\n\n;;\
    \ Given a list of positive integers x. return a sorted list of all \n;; elements\
    \ that has only one digit.\n;; Note: Returned list should be sorted in increasing\
    \ order.\n;; For example:\n;; >>> (unique_digits (list 15 33 1422 1))\n;; (list\
    \ 1 15 33)\n;; >>> (unique_digits (list 152 323 1422 10))\n;; (list 10)", "  (let\
    \ ((result ()))\n    (for-each (lambda (y)\n                (if (even? y)\n  \
    \                  (return result)\n                    (result (append result\
    \ y))))\n      x)\n    (sort result)\n    result))\n", "  (let ((result ()))\n\
    \    (for-each (lambda (x)\n                (if (even? (car x))\n            \
    \        (return result)\n                    (result (cons (car x) result))))\n\
    \             x))\n  result)\n", "  (let ((result ()))\n    (let ((i 0))\n   \
    \   (while (< i (length x))\n        (if (even? (car x i))\n            (set-car!\
    \ result (car x i))\n            (set-car! result (cdr x i))\n            (set-cdr!\
    \ result (cdr x i))\n            (set-cdr! result (cons (car x i) (cdr x i))))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-cdr! result (cons (car x i) (cdr x i))))\n        (set-car! result\
    \ (car x i))\n        (set-cdr! result (cdr x i))\n        (set-cdr! result (cons\
    \ (car x i) (cdr x i))))\n        (set-car! result (car x i))\n        (set-cdr!\
    \ result (cdr x i))\n        (set-cdr! result (cons (car x i) (cdr x i))))\n \
    \       (set-car! result (car x i))\n        (set-cdr! result (cdr x i))\n   \
    \     (set-cdr! result (cons (car x i) (cdr x i))))\n        (set-car! result\
    \ (car x i))\n        (set-cdr! result (cdr x i))\n        (set-cdr! result (cons\
    \ (car x i) (cdr x i))))\n        (set-car! result (car x i))\n        (set-cdr!\
    \ result (cdr x i))\n        (set-cdr! result (cons (car x i) (cdr x i))))\n \
    \       (set-car! result (car x i))\n        (set-cdr! result (cdr x i))\n   \
    \     (set-cdr! result (cons (car x i) (cdr x i))))\n        (set-car! result\
    \ (car x i))\n        (set-cdr! result (cdr x i))\n        (set-cdr! result (cons\
    \ (car x i) (cdr x i))))\n        (set-car! result (car x", "  (let ((result ()))\n\
    \    (for-each (lambda (y)\n                (if (even? y)\n                  \
    \  (return result)\n                    (result (append result y))))\n      x))\n\
    \  result)\n", "  (let ((result ()))\n    (for-each (lambda (y)\n            \
    \    (if (even? y)\n                    (return result)\n                    (append\
    \ result y)))\n      x)\n    result))\n\n;; Given a list of positive integers\
    \ x. return a sorted list of all \n;; elements that has only one even digit.\n\
    ;; Note: Returned list should be sorted in increasing order.\n;; For example:\n\
    ;; >>> (unique_even_digits (list 15 33 1422 1))\n;; (list 1 15)\n;; >>> (unique_even_digits\
    \ (list 152 323 1422 10))\n;; (list 10)", "  (let ((result ()))\n    (for-each\
    \ (lambda (x)\n      (if (even? (car x))\n        (return result)\n        (result\
    \ (cons (car x) result))))\n      x))\n    result))\n", "  (let ((result ()))\n\
    \    (for-each (lambda (y)\n                (if (even? y)\n                  \
    \  (return result)\n                    (result (append result y))))\n      x))\n\
    \  result)\n", "  (let ((result ()))\n    (for-each (lambda (x)\n            \
    \    (if (even? (car x))\n                    (result)\n                    (append\
    \ result (car x))))\n      x))\n  (sort result)\n)\n\n;; Given a list of positive\
    \ integers x. return a sorted list of all \n;; elements that has only one even\
    \ digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For\
    \ example:\n;; >>> (unique_even_digits (list 15 33 1422 1))\n;; (list 1 15)\n\
    ;; >>> (unique_even_digits (list 152 323 1422 10))\n;; (list 10)", "  (let ((result\
    \ ()))\n    (for-each (lambda (x)\n                (if (even? (car x))\n     \
    \               (return result)\n                    (result (cons (car x) result))))\n\
    \      x x))\n  result)\n", "  (let ((result ()))\n    (let ((i 0))\n      (while\
    \ (< i (length x))\n        (if (even? (car x i))\n            (set-car! result\
    \ (car x i))\n            (set-cdr! result (cdr x i)))\n          (set-cdr! result\
    \ (cons (car x i) result))\n          (set-car! result (car x i))\n          (set-cdr!\
    \ result (cdr x i))\n          (set-car! result (car x i))\n          (set-cdr!\
    \ result (cdr x i))\n          (set-car! result (car x i))\n          (set-cdr!\
    \ result (cdr x i))\n          (set-car! result (car x i))\n          (set-cdr!\
    \ result (cdr x i))\n          (set-car! result (car x i))\n          (set-cdr!\
    \ result (cdr x i))\n          (set-car! result (car x i))\n          (set-cdr!\
    \ result (cdr x i))\n          (set-car! result (car x i))\n          (set-cdr!\
    \ result (cdr x i))\n          (set-car! result (car x i))\n          (set-cdr!\
    \ result (cdr x i))\n          (set-car! result (car x i))\n          (set-cdr!\
    \ result (cdr x i))\n          (set-car! result (car x i))\n          (set-cdr!\
    \ result (cdr x i))\n          (set-car! result (car x i))\n          (set-cdr!\
    \ result (cdr x i))\n          (set-car! result (car x i))\n          (set-cdr!\
    \ result (cdr x i))\n          (set-car! result (car x i))\n          (set-cdr!\
    \ result (cdr x i))\n          (set-car! result (car x i))\n          (set-cdr!\
    \ result (cdr x i))\n          (set-car! result (car x i))\n          (set-cdr!\
    \ result (cdr x i))\n          (set-car! result (", "  (let ((result ()))\n  \
    \  (for-each (lambda (y)\n                (if (even? y)\n                    (return\
    \ result)\n                    (append result y)))\n      x)\n    (sort result)\n\
    \    result))\n", "  (let ((result ()))\n    (let ((i 0))\n      (while (< i (length\
    \ x))\n        (if (even? (car x i))\n          (set! result (append result (car\
    \ x i)))\n          (set! i (1+ i))))\n        (set! i 0)\n      )\n      (reverse\
    \ result)\n    )\n  )\n)\n", "  (let ((result ()))\n    (for-each (lambda (x)\n\
    \      (if (even? (car x))\n        (return result)\n        (result (cons (car\
    \ x) result))))\n      x))\n    result)\n", "  (let ((result ()))\n    (for-each\
    \ (lambda (x)\n                (if (even? (car x))\n                    (return\
    \ result)\n                    (result (cons (car x) result))))\n      x x))\n\
    \  result)\n", "  (let ((result ()))\n    (for-each (lambda (y)\n            \
    \    (if (even? y)\n                    (return result)\n                    (result\
    \ (append result y))))\n      x))\n  result)\n", "  (let ((result ()))\n    (for-each\
    \ (lambda (x)\n                (if (even? (car x))\n                    (return\
    \ result)\n                    (result (cons (car x) result))))\n            x)\n\
    \      result))\n", "  (let ((result ()))\n    (for-each (lambda (y)\n       \
    \         (if (even? y)\n                    (return result)\n               \
    \     (result (append result y))))\n      x))\n  result)\n", "  (let ((result\
    \ ()))\n    (let ((i 0))\n      (while (< i (length x))\n        (if (even? (car\
    \ x i))\n            (set-car! result (car x i))\n            (set-cdr! result\
    \ (cdr x i)))\n          (set-cdr! result (cons (car x i) result))\n         \
    \ (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n       \
    \   (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n     \
    \     (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n   \
    \       (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n \
    \         (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (car x i))\n          (set-cdr! result (cdr x i))\n\
    \          (set-car! result (", "  (let ((result ()))\n    (for-each (lambda (y)\n\
    \                (if (even? y)\n                    (return result)\n        \
    \            (append result y)))\n      x)\n    result))\n", "  (let ((result\
    \ ()))\n    (for-each (lambda (y)\n                (if (even? y)\n           \
    \         (return result)\n                    (result (append result y))))\n\
    \      x))\n  result)\n", "  (let ((result ()))\n    (if (null? x)\n      (list)\n\
    \      (let ((i 0))\n        (while (< i (length x))\n          (if (even? (car\
    \ x i))\n            (set-car! result (car x i))\n            (set-cdr! result\
    \ (cdr x i))\n            (set-cdr! result (cons (car x i) (cdr x i))))\n    \
    \      (set-cdr! result (cons (car x i) (cdr x i)))))))\n  (sort result)\n)\n\n\
    ;; Given a list of positive integers x. return a sorted list of all \n;; elements\
    \ that has only one even digit.\n;; Note: Returned list should be sorted in increasing\
    \ order.\n;; For example:\n;; >>> (unique_even_digits (list 15 33 1422 1))\n;;\
    \ (list 1)\n;; >>> (unique_even_digits (list 152 323 1422 10))\n;; (list 10)",
  "  (let ((result ()))\n    (for-each (lambda (y)\n                (if (even? y)\n\
    \                    (return result)\n                    (append result y)))\n\
    \      x)\n    (sort result)\n    result))\n", "  (let ((result ()))\n    (for-each\
    \ (lambda (y)\n                (if (even? y)\n                    (return result)\n\
    \                    (append result y)))\n      x)\n    (sort result)\n    result))\n",
  "  (let ((result ()))\n    (for-each (lambda (x)\n                (if (even? (car\
    \ x))\n                    (return result)\n                    (result (cons\
    \ (car x) result))))\n             x))\n  result)\n", "  (let ((result ()))\n\
    \    (for-each (lambda (y)\n                (if (even? y)\n                  \
    \  (return result)\n                    (result (append result y))))\n      x))\n\
    \  result)\n", "  (let ((result ()))\n    (for-each (lambda (x)\n            \
    \    (if (odd? x)\n                    (append result x)))\n      x))\n  (sort\
    \ result)\n)\n\n;; Given a list of positive integers x. return a sorted list of\
    \ all \n;; elements that has only one even digit.\n;; Note: Returned list should\
    \ be sorted in increasing order.\n;; For example:\n;; >>> (unique_even_digits\
    \ (list 15 33 1422 1))\n;; (list 1 15)\n;; >>> (unique_even_digits (list 152 323\
    \ 1422 10))\n;; (list 10)", "  (let ((result ()))\n    (for-each (lambda (x)\n\
    \                (if (even? (car x))\n                    (return result)\n  \
    \                  (result (cons (car x) result))))\n              x))\n  result)\n",
  "  (let ((result ()))\n    (for-each (lambda (x)\n                (if (even? (car\
    \ x))\n                  (return result)\n                  (result (cons (car\
    \ x) result))))\n      x x))\n  result)\n", "  (let ((result ()))\n    (for-each\
    \ (lambda (y)\n                (if (even? y)\n                    (return result)\n\
    \                    (result (cons y y))))\n      x))\n  result)\n", "  (let ((result\
    \ ()))\n    (for-each (lambda (x)\n                (if (even? (car x))\n     \
    \               (return result)\n                    (result (cons (car x) result))))\n\
    \              x)\n    (reverse result)))\n\n;; Given a list of positive integers\
    \ x. return a sorted list of all \n;; elements that has exactly one even digit.\n\
    ;; Note: Returned list should be sorted in increasing order.\n;; For example:\n\
    ;; >>> (unique_even_digits (list 15 33 1422 1))\n;; (list 1)\n;; >>> (unique_even_digits\
    \ (list 152 323 1422 10))\n;; (list 10)", "  (let ((result ()))\n    (for-each\
    \ (lambda (y)\n                (if (even? y)\n                    (return result)\n\
    \                    (append result y)))\n      x)\n    result))\n", "  (let ((result\
    \ ()))\n    (for-each (lambda (x)\n      (if (even? (car x))\n        (return\
    \ result)\n        (result (cons (car x) result))))\n      x))\n    result)\n",
  "  (let ((result ()))\n    (for-each (lambda (y)\n                (if (even? y)\n\
    \                    (return result)\n                    (result (cons y y))))\n\
    \      x))\n  result)\n", "  (let ((result ()))\n    (for-each (lambda (x)\n \
    \     (if (even? (car x))\n        (return result)\n        (result (cons (car\
    \ x) result))))\n      x))\n    result)\n", "  (let ((result ()))\n    (for-each\
    \ (lambda (x)\n      (if (even? (car x))\n        (return result)\n        (result\
    \ (cons (car x) result))))\n      x))\n    result)\n", "  (let ((result ()))\n\
    \    (for-each (lambda (x)\n                (if (even? (car x))\n            \
    \        (return result)\n                    (result (cons (car x) result))))\n\
    \      x x))\n  result)\n", "  (let ((result ()))\n    (for-each (lambda (y)\n\
    \                (if (odd? y)\n                    (append result y)\n       \
    \             ()))\n      x))\n  (sort result)\n  (reverse result))\n", "  (let\
    \ ((result ()))\n    (for-each (lambda (y)\n                (if (even? y)\n  \
    \                  (return result)\n                    (result (cons y y))))\n\
    \      x)\n    result))\n", "  (let ((result ()))\n    (let ((i 0))\n      (while\
    \ (< i (length x))\n        (if (even? (car x i))\n            (set-cdr! result\
    \ (car x i)))\n          (set-car! result (car x i))\n          (set-cdr! result\
    \ (cdr x i))\n          (set-car! result (car x i))\n          (set-cdr! result\
    \ (cdr x i))\n          (set-car! result (car x i))\n          (set-cdr! result\
    \ (cdr x i))\n          (set-car! result (car x i))\n          (set-cdr! result\
    \ (cdr x i))\n          (set-car! result (car x i))\n          (set-cdr! result\
    \ (cdr x i))\n          (set-car! result (car x i))\n          (set-cdr! result\
    \ (cdr x i))\n          (set-car! result (car x i))\n          (set-cdr! result\
    \ (cdr x i))\n          (set-car! result (car x i))\n          (set-cdr! result\
    \ (cdr x i))\n          (set-car! result (car x i))\n          (set-cdr! result\
    \ (cdr x i))\n          (set-car! result (car x i))\n          (set-cdr! result\
    \ (cdr x i))\n          (set-car! result (car x i))\n          (set-cdr! result\
    \ (cdr x i))\n          (set-car! result (car x i))\n          (set-cdr! result\
    \ (cdr x i))\n          (set-car! result (car x i))\n          (set-cdr! result\
    \ (cdr x i))\n          (set-car! result (car x i))\n          (set-cdr! result\
    \ (cdr x i))\n          (set-car! result (car x i))\n          (set-cdr! result\
    \ (cdr x i))\n          (set-car! result (car x i))\n          (set-cdr! result\
    \ (cdr x i))\n          (set-car! result (car x i))", "  (let ((result ()))\n\
    \    (let ((i 0))\n      (while (< i (length x))\n        (if (even? (car x i))\n\
    \            (return result)\n            (set! result (append result (car x i)))\n\
    \            (set! i (1+ i))))\n        (set! i 0)))\n    result)\n", "  (let\
    \ ((result ()))\n    (for-each (lambda (x)\n                (if (even? (car x))\n\
    \                    (result)\n                    (result (cons x (unique_digits\
    \ (cdr x))))))\n               x x))\n  result)\n", "  (let ((result ()))\n  \
    \  (let ((i 0))\n      (while (< i (length x))\n        (if (even? (car x i))\n\
    \            (set-car! result (car x i))\n            (set-cdr! result (cdr x\
    \ i)))\n          (set-car! result (car x i))\n          (set-cdr! result (cdr\
    \ x i))\n          (set-car! result (car x i))\n          (set-cdr! result (cdr\
    \ x i))\n          (set-car! result (car x i))\n          (set-cdr! result (cdr\
    \ x i))\n          (set-car! result (car x i))\n          (set-cdr! result (cdr\
    \ x i))\n          (set-car! result (car x i))\n          (set-cdr! result (cdr\
    \ x i))\n          (set-car! result (car x i))\n          (set-cdr! result (cdr\
    \ x i))\n          (set-car! result (car x i))\n          (set-cdr! result (cdr\
    \ x i))\n          (set-car! result (car x i))\n          (set-cdr! result (cdr\
    \ x i))\n          (set-car! result (car x i))\n          (set-cdr! result (cdr\
    \ x i))\n          (set-car! result (car x i))\n          (set-cdr! result (cdr\
    \ x i))\n          (set-car! result (car x i))\n          (set-cdr! result (cdr\
    \ x i))\n          (set-car! result (car x i))\n          (set-cdr! result (cdr\
    \ x i))\n          (set-car! result (car x i))\n          (set-cdr! result (cdr\
    \ x i))\n          (set-car! result (car x i))\n          (set-cdr! result (cdr\
    \ x i))\n          (set-car! result (car x i))\n          (set-cdr! result (cdr\
    \ x i))\n          (set-car! result (car x i))\n          (set-cdr! result (cdr\
    \ x i", "  (let ((result ()))\n    (for-each (lambda (y)\n                (if\
    \ (even? y)\n                    (return result)\n                    (append\
    \ result y)))\n               x)\n    (sort result)\n    result))\n", "  (let\
    \ ((result ()))\n    (for-each (lambda (y)\n                (if (even? y)\n  \
    \                  (return result)\n                    (result (append result\
    \ y))))\n      x)\n    (sort result)\n    result))\n", "  (let ((result ()))\n\
    \    (for-each (lambda (y)\n                (if (even? y)\n                  \
    \  (return result)\n                    (append result y)))\n      x)\n    result))\n",
  "  (let ((result ()))\n    (for-each (lambda (x)\n                (if (even? (car\
    \ x))\n                    (return result)\n                    (result (cons\
    \ (car x) result))))\n           x)\n      result))\n", "  (let ((result ()))\n\
    \    (let ((i 0))\n      (while (< i (length x))\n        (if (even? (car x i))\n\
    \            (return result)\n            (set! result (append result (car x i))))\n\
    \        (set! i (1+ i))))\n    result))\n", "  (let ((result ()))\n    (for-each\
    \ (lambda (y)\n                (if (even? y)\n                    (return result)\n\
    \                    (result (cons y y))))\n      x)\n    (reverse result)))\n",
  "  (let ((result ()))\n    (for-each (lambda (x)\n                (if (even? (car\
    \ x))\n                    (return result)\n                    (result (cons\
    \ (car x) result))))\n      x))\n  result)\n", "  (let ((result ()))\n    (for-each\
    \ (lambda (y)\n                (if (even? y)\n                    (return result)\n\
    \                    (result (append result y))))\n      x)\n    (sort result)\n\
    \    result))\n", "  (let ((result ()))\n    (for-each (lambda (y)\n         \
    \       (if (even? y)\n                    (return result)\n                 \
    \   (append result y)))\n               x)\n    (sort result)\n    result))\n",
  "  (let ((result ()))\n    (let ((i (car x)))\n      (while (not (even? i))\n  \
    \      (let ((next (cdr x)))\n          (if (null? next)\n            (append\
    \ result i)\n            (set! x next)))\n          (set! i (car x)))\n      \
    \  (set! x (cdr x)))\n      (reverse result)))\n)\n", "  (let ((result ()))\n\
    \    (for-each (lambda (y)\n                (if (even? y)\n                  \
    \  (return result)\n                    (result (cons y y))))\n      x))\n  result)\n",
  "  (let ((result ()))\n    (let ((p (car x)))\n      (while (not (even? p))\n  \
    \      (let ((q (car x)))\n          (if (not (even? q))\n            (cons p\
    \ q)\n            (cons q p)\n          )\n        )\n        (set! result (cons\
    \ p result))\n        (set! x (cdr x))\n      )\n      (set! x (cdr x))\n    \
    \  (set! p (car x))\n    )\n    (reverse result)\n  )\n)\n\n;; Given a list of\
    \ positive integers x. return a sorted list of all \n;; elements that has only\
    \ one even digit.\n;; Note: Returned list should be sorted in increasing order.\n\
    ;; For example:\n;; >>> (unique_even_digits (list 15 33 1422 1))\n;; (list 1 15)\n\
    ;; >>> (unique_even_digits (list 152 323 1422 10))\n;; (list 10)", "  (let ((result\
    \ ()))\n    (for-each (lambda (x)\n                (if (even? (car x))\n     \
    \             (return result)\n                  (result (cons (car x) result))))\n\
    \      x))\n  result)\n", "  (let ((result ()))\n    (for-each (lambda (x)\n \
    \     (if (even? (car x))\n        (return result)\n        (result (cons (car\
    \ x) result))))\n      x))\n    result)\n", "  (let ((result ()))\n    (for-each\
    \ (lambda (y)\n                (if (even? y)\n                    (return result)\n\
    \                    (append result y)))\n      x)\n    (sort result)\n    result))\n",
  "  (let ((result ()))\n    (for-each (lambda (x)\n                (if (even? (car\
    \ x))\n                    (return result)\n                    (result (cons\
    \ (car x) result))))\n      x x))\n  result)\n", "  (let ((result ()))\n    (for-each\
    \ (lambda (x)\n      (if (even? (car x))\n        (return result)\n        (result\
    \ (cons (car x) result))))\n      x))\n    result))\n", "  (let ((result ()))\n\
    \    (for-each (lambda (y)\n                (if (even? y)\n                  \
    \  (return result)\n                    (result (cons y y))))\n      x))\n  result)\n",
  "  (let ((result ()))\n    (for-each (lambda (x)\n                (if (even? (car\
    \ x))\n                    (return result)\n                    (result (cons\
    \ (car x) result))))\n      x x))\n  result)\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
