name: HumanEval_121_solution
language: rkt
prompt: "#lang racket\n\n;; Given a non-empty list of integers, return the sum of\
  \ all of the odd elements that are in even positions.\n;; Examples\n;; >>> (solution\
  \ (list 5 8 7 1))\n;; 12\n;; >>> (solution (list 3 3 3 3 3))\n;; 9\n;; >>> (solution\
  \ (list 30 13 24 321))\n;; 0\n(define (solution lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
  \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
  \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n \
  \   (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
  \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
  \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    ((null? lst) 0)\n    ((even? (car lst)) (car lst))\n \
    \   (else (solution (cdr lst)))\n  )\n)\n\n;; Given a list of non-negative integers,\
    \ return the sum of all of the even elements in the list.\n;; Examples\n;; >>>\
    \ (solution (list 2 4 6 8 10))\n;; 6\n;; >>> (solution (list 1 2 3 4 5 6 7 8 9\
    \ 10))\n;; 30", "  (cond\n    ((null? lst) 0)\n    ((even? (car lst)) (solution\
    \ (cdr lst)))\n    (else (sum (map odd? (cdr lst))))))\n\n;; Given a non-empty\
    \ list of integers, return the sum of all of the even elements that are in odd\
    \ positions.\n;; Examples\n;; >>> (solution (list 5 8 7 1))\n;; 12\n;; >>> (solution\
    \ (list 3 3 3 3 3))\n;; 9\n;; >>> (solution (list 30 13 24 321))\n;; 0", "  (let\
    \ ((result 0))\n    (for-each\n      (lambda (x)\n        (if (even? (car x))\n\
    \          (result (+ (car x) (cdr x)))\n          (result (cdr x))))\n      lst))\n\
    )\n", "  (cond\n    ((null? lst) 0)\n    ((even? (car lst)) (car lst))\n    (else\
    \ (solution (cdr lst)))))\n\n;; Given a list of lists, each sublist is a list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    ;; Examples\n;; >>> (solution (list (list 5 8 7 1) (list 3 3 3 3 3) (list 30 13\
    \ 24 321)))\n;; 12\n;; >>> (solution (list (list 5 8 7 1) (list 3 3 3 3 3) (list\
    \ 30 13 24 321) (list 1 2 3 4 5)))\n;; 9\n;; >>> (solution (list (list 5 8 7 1)\
    \ (list 3 3 3 3 3) (list 30 13 24 321) (list 1 2 3 4 5) (list 1 2 3 4 5)))\n;;\
    \ 0", "  (cond\n    ((null? lst) 0)\n    ((even? (car lst)) (car lst))\n    (else\
    \ (solution (cdr lst)))))\n\n;; Given a non-empty list of integers, return the\
    \ sum of all of the even elements that are in odd positions.\n;; Examples\n;;\
    \ >>> (solution (list 5 8 7 1))\n;; 12\n;; >>> (solution (list 3 3 3 3 3))\n;;\
    \ 9\n;; >>> (solution (list 30 13 24 321))\n;; 0", "  (cond\n    ((null? lst)\
    \ 0)\n    ((even? (car lst)) (car lst))\n    (else (solution (cdr lst)))))\n\n\
    ;;; (solution (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\
    \ 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49\
    \ 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75\
    \ 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\
    \ 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119\
    \ 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138\
    \ 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157\
    \ 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176\
    \ 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195\
    \ 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214\
    \ 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233\
    \ 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252\
    \ 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271\
    \ 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290\
    \ 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309\
    \ 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328\
    \ 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347\
    \ 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366\
    \ 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385\
    \ 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404\
    \ 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423\
    \ 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442\
    \ 443 444 445 446", "  (let ((sum 0))\n    (for-each\n      (lambda (x)\n    \
    \    (if (odd? x)\n          (sum (+ x (first (cdr x))))\n          (sum (+ x\
    \ (first (cdr x)))))))\n    sum))\n", "  (cond\n    ((null? lst) 0)\n    ((even?\
    \ (car lst)) (car lst))\n    (else (solution (cdr lst)))\n  )\n)\n\n;; Given a\
    \ non-empty list of integers, return the sum of all of the even elements that\
    \ are in odd positions.\n;; Examples\n;; >>> (solution (list 5 8 7 1))\n;; 12\n\
    ;; >>> (solution (list 3 3 3 3 3))\n;; 9\n;; >>> (solution (list 30 13 24 321))\n\
    ;; 0", "  (cond\n    ((null? lst) 0)\n    ((even? (car lst)) (car lst))\n    (else\
    \ (solution (cdr lst)))))\n\n;; Given a non-empty list of integers, return the\
    \ sum of all of the even elements that are in odd positions.\n;; Examples\n;;\
    \ >>> (solution (list 5 8 7 1))\n;; 12\n;; >>> (solution (list 3 3 3 3 3))\n;;\
    \ 9\n;; >>> (solution (list 30 13 24 321))\n;; 0", "  (let ((result 0))\n    (for-each\n\
    \      (lambda (x)\n        (if (odd? x)\n          (result (+ x (first (even?\
    \ x))))\n          (result x)))\n      lst)\n    result))\n", "  (let ((sum 0))\n\
    \    (for-each (lambda (x)\n                (if (even? (car x))\n            \
    \      (sum (+ (car x) (car (cdr x))))\n                  (sum (car x))))\n  \
    \    lst))\n  sum)\n", "  (cond\n    ((null? lst) 0)\n    ((even? (car lst)) (solution\
    \ (cdr lst)))\n    (else (sum (map odd? (cdr lst))) (solution (cdr lst))))\n)\n\
    \n;; Given a non-empty list of integers, return the sum of all of the even elements\
    \ that are in odd positions.\n;; Examples\n;; >>> (solution (list 5 8 7 1))\n\
    ;; 9\n;; >>> (solution (list 3 3 3 3 3))\n;; 0\n;; >>> (solution (list 30 13 24\
    \ 321))\n;; 12", "  (let ((sum (0)))\n    (for-each\n      (lambda (x)\n     \
    \   (if (odd? x)\n          (sum (+ x (first (even? lst))))\n          (sum (+\
    \ x (first (odd? lst)))))))\n    sum))\n", "  (let ((result 0))\n    (for-each\
    \ (lambda (x)\n                (if (odd? x)\n                    (+ result (even?\
    \ x)))\n                )\n             lst)\n    result)\n)\n", "  (cond\n  \
    \  ((null? lst) 0)\n    ((even? (car lst)) (car lst))\n    (else (solution (cdr\
    \ lst)))\n  )\n)\n\n;; Given a non-empty list of integers, return the sum of all\
    \ of the even elements that are in odd positions.\n;; Examples\n;; >>> (solution\
    \ (list 5 8 7 1))\n;; 12\n;; >>> (solution (list 3 3 3 3 3))\n;; 9\n;; >>> (solution\
    \ (list 30 13 24 321))\n;; 30", "  (cond\n    ((null? lst) 0)\n    ((even? (car\
    \ lst)) (car lst))\n    (else (solution (cdr lst)))))\n\n;; Given a non-empty\
    \ list of integers, return the sum of all of the even elements that are in odd\
    \ positions.\n;; Examples\n;; >>> (solution (list 5 8 7 1))\n;; 12\n;; >>> (solution\
    \ (list 3 3 3 3 3))\n;; 9\n;; >>> (solution (list 30 13 24 321))\n;; 0", "  (let\
    \ ((sum 0))\n    (for-each\n      (lambda (x)\n        (if (even? (car x))\n \
    \         (sum (+ (car x) (car (cdr x))))\n          (sum (car x))))\n      lst))\n\
    \  sum)\n", "  (cond\n    ((null? lst) 0)\n    ((even? (car lst)) (car lst))\n\
    \    (else (solution (cdr lst))))\n)\n\n;; Given a list of lists, return a list\
    \ of the elements that are the same in all of the lists.\n;; Examples\n;; >>>\
    \ (solution (list (list 1 2 3) (list 1 2 3) (list 1 2 3)))\n;; (list 1 2 3)\n\
    ;; >>> (solution (list (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3)))\n\
    ;; (list 1 2 3)\n;; >>> (solution (list (list 1 2 3) (list 1 2 3) (list 1 2 3)\
    \ (list 1 2 3) (list 1 2 3)))\n;; (list 1 2 3)\n;; >>> (solution (list (list 1\
    \ 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3)))\n;;\
    \ (list 1 2 3)\n;; >>> (solution (list (list 1 2 3) (list 1 2 3) (list 1 2 3)\
    \ (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3)))\n;; (list 1 2 3)\n;; >>>\
    \ (solution (list (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1\
    \ 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3)))\n;; (list 1 2 3)\n;; >>> (solution\
    \ (list (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list\
    \ 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3)))\n;; (list 1 2 3)\n;; >>> (solution\
    \ (list (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list\
    \ 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3)))\n;; (list 1 2 3)\n",
  "  (cond\n    ((null? lst) 0)\n    ((even? (car lst)) (car lst))\n    (else (solution\
    \ (cdr lst)))))\n\n;; Given a non-empty list of integers, return the sum of all\
    \ of the even elements that are in odd positions.\n;; Examples\n;; >>> (solution\
    \ (list 5 8 7 1))\n;; 12\n;; >>> (solution (list 3 3 3 3 3))\n;; 9\n;; >>> (solution\
    \ (list 30 13 24 321))\n;; 0", "  (cond\n    ((null? lst) 0)\n    ((even? (car\
    \ lst)) (car lst))\n    (else (solution (cdr lst)))\n  )\n)\n\n;; Given a non-empty\
    \ list of integers, return the sum of all of the even elements that are in odd\
    \ positions.\n;; Examples\n;; >>> (solution (list 5 8 7 1))\n;; 9\n;; >>> (solution\
    \ (list 3 3 3 3 3))\n;; 0\n;; >>> (solution (list 30 13 24 321))\n;; 12", "  (cond\n\
    \    ((null? lst) 0)\n    ((even? (car lst)) (car lst))\n    (else (solution (cdr\
    \ lst)))\n  )\n)\n\n;; Given a non-empty list of integers, return the sum of all\
    \ of the even elements that are in odd positions.\n;; Examples\n;; >>> (solution\
    \ (list 5 8 7 1))\n;; 9\n;; >>> (solution (list 3 3 3 3 3))\n;; 0\n;; >>> (solution\
    \ (list 30 13 24 321))\n;; 30", "  (cond\n    ((null? lst) 0)\n    ((even? (car\
    \ lst)) (car lst))\n    (else (solution (cdr lst)))))\n\n;; Given a non-empty\
    \ list of integers, return the sum of all of the even elements that are in odd\
    \ positions.\n;; Examples\n;; >>> (solution (list 5 8 7 1))\n;; 12\n;; >>> (solution\
    \ (list 3 3 3 3 3))\n;; 9\n;; >>> (solution (list 30 13 24 321))\n;; 30", "  (let\
    \ ((result 0))\n    (for-each\n      (lambda (x)\n        (if (odd? x)\n     \
    \     (result (+ result x))\n          (result (+ result (even? x))))\n      lst)\n\
    \      result))\n)\n", "  (let ((result 0))\n    (for-each (lambda (x)\n     \
    \           (if (odd? x)\n                    (result (+ x (first (even? lst))))\n\
    \                    (result x)))\n               lst))\n  result)\n", "  (let\
    \ ((result 0))\n    (for-each\n      (lambda (x)\n        (if (odd? x)\n     \
    \     (result (+ result (odd? x))))))\n    result))\n", "  (cond\n    ((null?\
    \ lst) 0)\n    ((even? (car lst)) (car lst))\n    (else (solution (cdr lst)))))\n\
    \n;; Given a non-empty list of integers, return the sum of all of the even elements\
    \ that are in odd positions.\n;; Examples\n;; >>> (solution (list 5 8 7 1))\n\
    ;; 9\n;; >>> (solution (list 3 3 3 3 3))\n;; 0\n;; >>> (solution (list 30 13 24\
    \ 321))\n;; 12", "  (let ((result 0))\n    (for-each\n      (lambda (x)\n    \
    \    (if (odd? x)\n          (result (+ result (odd? x))))))\n    result))\n",
  "  (cond\n    ((null? lst) 0)\n    ((even? (car lst)) (car lst))\n    (else (solution\
    \ (cdr lst)))))\n\n;;; (solution (list 5 8 7 1))\n;;; 12\n;;; (solution (list\
    \ 3 3 3 3 3))\n;;; 9\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution\
    \ (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;;\
    \ (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n\
    ;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24\
    \ 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list\
    \ 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution\
    \ (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;;\
    \ (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n\
    ;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24\
    \ 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list\
    \ 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution\
    \ (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;;\
    \ (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n\
    ;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24\
    \ 321))\n;;; 0\n;;; (solution (list 30", "  (let ((result 0))\n    (for-each (lambda\
    \ (x)\n                (if (even? (car x))\n                  (result (+ (car\
    \ x) (car (cdr x))))))\n      lst))\n)\n", "  (cond\n    ((null? lst) 0)\n   \
    \ ((even? (car lst)) (car lst))\n    (else (solution (cdr lst)))))\n\n;; Given\
    \ a list of non-negative integers, return the sum of all of the even elements\
    \ in the list.\n;; Examples\n;; >>> (even? (list 1 2 3 4 5 6 7 8 9 10))\n;; 6\n\
    ;; >>> (even? (list 1 2 3 4 5 6 7 8 9))\n;; 0\n;; >>> (even? (list 1 2 3 4 5 6\
    \ 7))\n;; 0\n;; >>> (even? (list 1 2 3 4 5 6))\n;; 0\n;; >>> (even? (list 1 2\
    \ 3 4 5))\n;; 0\n;; >>> (even? (list 1 2 3 4))\n;; 0\n;; >>> (even? (list 1 2\
    \ 3))\n;; 0\n;; >>> (even? (list 1))\n;; 0\n;; >>> (even? (list))\n;; 0\n;; >>>\
    \ (even? (list 1 2 3 4 5 6 7 8 9 10))\n;; 0\n;; >>> (even? (list 1 2 3 4 5 6 7\
    \ 8 9 10 11))\n;; 0\n;; >>> (even? (list 1 2 3 4 5 6 7 8 9 10 11 12))\n;; 0\n\
    ;; >>> (even? (list 1 2 3 4 5 6 7 8 9 10 11 12 13))\n;; 0\n;; >>> (even? (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14))\n;; 0\n;; >>> (even? (list 1 2 3 4 5 6 7\
    \ 8 9 10 11 12 13 14 15))\n;; 0\n;; >>> (even? (list 1 2 3 4 5 6 7 8 9 10 11 12\
    \ 13 14 15 16))\n;; 0\n;; >>> (even? (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\
    \ 16 17))\n;; 0\n;; >>> (even? (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\
    \ 18))\n;; 0\n;; >>> (even? (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\
    \ 19))\n;; 0\n;; >>> (even? (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16", " \
    \ (cond\n    ((null? lst) 0)\n    ((even? (car lst)) (car lst))\n    (else (solution\
    \ (cdr lst)))))\n\n;; Given a list of words, return a list of all of the words\
    \ that appear in the same position in the list.\n;; Examples\n;; >>> (solution\
    \ (list \"cat\" \"dog\" \"cat\" \"dog\" \"cat\"))\n;; (list \"cat\" \"dog\")\n\
    ;; >>> (solution (list \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\"))\n;; (list\
    \ \"cat\" \"dog\")\n;; >>> (solution (list \"cat\" \"dog\" \"cat\" \"dog\" \"\
    cat\" \"dog\" \"cat\" \"dog\"))\n;; (list \"cat\" \"dog\")\n;; >>> (solution (list\
    \ \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\"\
    ))\n;; (list \"cat\" \"dog\")\n;; >>> (solution (list \"cat\" \"dog\" \"cat\"\
    \ \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\"))\n\
    ;; (list \"cat\" \"dog\")\n;; >>> (solution (list \"cat\" \"dog\" \"cat\" \"dog\"\
    \ \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\"\
    \ \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\"\
    \ \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\"\
    \ \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\"\
    \ \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\"\
    \ \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\"\
    \ \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\"", " \
    \ (let ((sum 0))\n    (for-each\n      (lambda (x)\n        (if (even? x)\n  \
    \        (sum (+ x (first lst)))\n          (sum (+ x (second lst)))\n       \
    \   (sum (+ x (third lst)))\n          (sum (+ x (fourth lst)))\n          (sum\
    \ (+ x (fifth lst))))\n      lst)\n      (+ sum 1)))\n)\n\n;;; (solution (list\
    \ 5 8 7 1))\n;;; 12\n;;; (solution (list 3 3 3 3 3))\n;;; 9\n;;; (solution (list\
    \ 30 13 24 321))\n;;; 0\n;;; (solution (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14\
    \ 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30))\n;;; 0\n;;; (solution (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\
    \ 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55\
    \ 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81\
    \ 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105\
    \ 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124\
    \ 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143\
    \ 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162\
    \ 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181\
    \ 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200\
    \ 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219\
    \ 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238\
    \ 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257\
    \ 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276\
    \ 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295\
    \ 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310", "  (cond\n   \
    \ ((null? lst) 0)\n    ((even? (car lst)) (car lst))\n    (else (solution (cdr\
    \ lst)))))\n\n;; Given a non-empty list of integers, return the sum of all of\
    \ the even elements that are in odd positions.\n;; Examples\n;; >>> (solution\
    \ (list 5 8 7 1))\n;; 12\n;; >>> (solution (list 3 3 3 3 3))\n;; 9\n;; >>> (solution\
    \ (list 30 13 24 321))\n;; 30", "  (let ((sum (0)))\n    (if (null? lst)\n   \
    \   (+ sum (first lst)))\n    (for-each\n      (lambda (x)\n        (if (odd?\
    \ x)\n          (+ sum (first (sublist lst 2))))\n        (if (even? x)\n    \
    \      (+ sum (first (sublist lst 2))))\n        (+ sum x)))\n    sum)\n)\n\n\
    ;;; (solution (list 5 8 7 1))\n;;; 12\n;;; (solution (list 3 3 3 3 3))\n;;; 9\n\
    ;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list 1 2 3 4 5 6 7 8\
    \ 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30))\n;;; 45\n\
    ;;; (solution (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\
    \ 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45))\n;;; 0\n\
    ;;; (solution (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\
    \ 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49\
    \ 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75\
    \ 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\
    \ 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119\
    \ 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138\
    \ 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157\
    \ 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176\
    \ 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195\
    \ 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214\
    \ 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233\
    \ 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250", "  (cond\n\
    \    ((null? lst) 0)\n    ((even? (car lst)) (car lst))\n    (else (solution (cdr\
    \ lst)))\n  )\n)\n\n;; Given a non-empty list of integers, return the sum of all\
    \ of the even elements that are in odd positions.\n;; Examples\n;; >>> (solution\
    \ (list 5 8 7 1))\n;; 9\n;; >>> (solution (list 3 3 3 3 3))\n;; 0\n;; >>> (solution\
    \ (list 30 13 24 321))\n;; 12", "  (let ((result 0))\n    (for-each\n      (lambda\
    \ (x)\n        (if (even? (car x))\n          (result (+ (car x) (car (cdr x))))))\n\
    \      lst))\n)\n", "  (let ((sum 0))\n    (for-each\n      (lambda (x)\n    \
    \    (if (odd? x)\n          (sum (+ x (first (cdr x))))\n          (sum (+ x\
    \ (first (cdr x)))))))\n      lst))\n", "  (let ((result 0))\n    (for-each (lambda\
    \ (x)\n                (if (odd? x)\n                    (+ result (even? x)))\n\
    \                )\n             lst)\n    result)\n)\n", "  (cond\n    ((null?\
    \ lst) 0)\n    ((even? (car lst)) (solution (cdr lst)))\n    (else (car lst) (solution\
    \ (cdr lst)))\n  )\n)\n\n;;; (solution (list 5 8 7 1))\n;;; 12\n;;; (solution\
    \ (list 3 3 3 3 3))\n;;; 9\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution\
    \ (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;;\
    \ (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n\
    ;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24\
    \ 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list\
    \ 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution\
    \ (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;;\
    \ (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n\
    ;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24\
    \ 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list\
    \ 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution\
    \ (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;;\
    \ (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n\
    ;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24\
    \ 321))", "  (cond\n    ((null? lst) 0)\n    ((even? (car lst)) (car lst))\n \
    \   (else (solution (cdr lst)))))\n\n;; Given a non-empty list of integers, return\
    \ the sum of all of the even elements that are in odd positions.\n;; Examples\n\
    ;; >>> (solution (list 5 8 7 1))\n;; 12\n;; >>> (solution (list 3 3 3 3 3))\n\
    ;; 9\n;; >>> (solution (list 30 13 24 321))\n;; 0", "  (let ((sum (0)))\n    (for-each\
    \ (lambda (x)\n                (if (even? (car x))\n                  (sum (+\
    \ (car x) (cdr x)))\n                  (sum (cdr x))))\n      lst))\n)\n\n;; Given\
    \ a non-empty list of integers, return the sum of all of the even elements that\
    \ are in odd positions.\n;; Examples\n;; >>> (solution (list 5 8 7 1))\n;; 9\n\
    ;; >>> (solution (list 3 3 3 3 3))\n;; 0\n;; >>> (solution (list 30 13 24 321))\n\
    ;; 12", "  (cond\n    ((null? lst) 0)\n    ((even? (car lst)) (car lst))\n   \
    \ (else (solution (cdr lst)))\n  )\n)\n\n;; Given a non-empty list of integers,\
    \ return the sum of all of the even elements that are in odd positions.\n;; Examples\n\
    ;; >>> (solution (list 5 8 7 1))\n;; 9\n;; >>> (solution (list 3 3 3 3 3))\n;;\
    \ 0\n;; >>> (solution (list 30 13 24 321))\n;; 12", "  (let ((result 0))\n   \
    \ (for-each\n      (lambda (x)\n        (if (even? x)\n          (result (+ x\
    \ (first lst)))\n          (result 0))\n      lst)\n      lst))\n)\n", "  (cond\n\
    \    ((null? lst) 0)\n    ((even? (car lst)) (car lst))\n    (else (solution (cdr\
    \ lst)))\n  )\n)\n\n;; Given a list of strings, return a list of all of the strings\
    \ that are palindromes.\n;; Examples\n;; >>> (solution (list \"abcd\" \"abcd\"\
    \ \"abcd\"))\n;; \"abcd\"\n;; >>> (solution (list \"abcd\" \"abcd\" \"abcd\" \"\
    abcd\" \"abcd\"))\n;; \"abcd\"\n;; >>> (solution (list \"abcd\" \"abcd\" \"abcd\"\
    \ \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\"\
    \ \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\"\
    \ \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\"\
    \ \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\"\
    \ \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\"\
    \ \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\"\
    \ \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\"\
    \ \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\"\
    \ \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\"\
    \ \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd\" \"abcd",
  "  (let ((result 0))\n    (for-each (lambda (x)\n                (if (odd? x)\n\
    \                    (result (+ x (first (even? lst))))\n                    (result\
    \ x)))\n      lst))\n  result)\n", "  (cond\n    ((null? lst) 0)\n    ((even?\
    \ (car lst)) (car lst))\n    (else (solution (cdr lst)))))\n\n;; Given a list\
    \ of non-negative integers, return the sum of all of the even elements in the\
    \ list.\n;; Examples\n;; >>> (solution (list 2 3 4 5 6))\n;; 6\n;; >>> (solution\
    \ (list 1 2 3 4 5))\n;; 0\n;; >>> (solution (list 1 2 3 4 5 6 7))\n;; 6\n;; >>>\
    \ (solution (list 1 2 3 4 5 6 7 8))\n;; 0\n;; >>> (solution (list 1 2 3 4 5 6\
    \ 7 8 9))\n;; 0\n;; >>> (solution (list 1 2 3 4 5 6 7 8 9 10))\n;; 0\n;; >>> (solution\
    \ (list 1 2 3 4 5 6 7 8 9 10 11))\n;; 0\n;; >>> (solution (list 1 2 3 4 5 6 7\
    \ 8 9 10 11 12))\n;; 0\n;; >>> (solution (list 1 2 3 4 5 6 7 8 9 10 11 12 13))\n\
    ;; 0\n;; >>> (solution (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14))\n;; 0\n;; >>>\
    \ (solution (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15))\n;; 0\n;; >>> (solution\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16))\n;; 0\n;; >>> (solution (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17))\n;; 0\n;; >>> (solution (list 1\
    \ 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18))\n;; 0\n;; >>> (solution (list 1\
    \ 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19))\n;; 0\n;; >>> (solution (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20))\n;; 0\n;; >>> (solution\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21))\n;; 0\n;; >>>\
    \ (solution (list 1 2 3 4 5 6 7 8 9 10", "  (cond\n    ((null? lst) 0)\n    ((even?\
    \ (car lst)) (solution (cdr lst)))\n    (else (sum (odd? (car lst))) (solution\
    \ (cdr lst)))\n  )\n)\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the even elements that are in odd positions.\n;; Examples\n;; >>>\
    \ (solution (list 5 8 7 1))\n;; 9\n;; >>> (solution (list 3 3 3 3 3))\n;; 0\n\
    ;; >>> (solution (list 30 13 24 321))\n;; 30", "  (cond\n    ((null? lst) 0)\n\
    \    ((even? (car lst)) (solution (cdr lst)))\n    (else (car lst) (solution (cdr\
    \ lst)))\n  )\n)\n\n;; Given a non-empty list of integers, return the sum of all\
    \ of the even elements that are in odd positions.\n;; Examples\n;; >>> (solution\
    \ (list 5 8 7 1))\n;; 9\n;; >>> (solution (list 3 3 3 3 3))\n;; 0\n;; >>> (solution\
    \ (list 30 13 24 321))\n;; 30", "  (let ((result 0))\n    (for-each (lambda (x)\n\
    \                (if (odd? x)\n                    (result (+ x (first (even?\
    \ lst))))))\n      lst))\n  result)\n", "  (cond\n    ((null? lst) 0)\n    ((even?\
    \ (car lst)) (solution (cdr lst)))\n    (else (solution (cdr lst))))\n)\n\n;;\
    \ Given a list of non-negative integers, return the number of pairs of integers\
    \ that sum to 0.\n;; Examples\n;; >>> (solution (list 1 2 3 4 5))\n;; 2\n;; >>>\
    \ (solution (list 1 1 1 1 1))\n;; 1\n;; >>> (solution (list 1 1 1 1 1 1))\n;;\
    \ 0", "  (cond\n    ((null? lst) 0)\n    ((even? (car lst)) (car lst))\n    (else\
    \ (solution (cdr lst)))))\n\n;; Given a non-empty list of integers, return the\
    \ sum of all of the even elements that are in odd positions.\n;; Examples\n;;\
    \ >>> (solution (list 5 8 7 1))\n;; 9\n;; >>> (solution (list 3 3 3 3 3))\n;;\
    \ 0\n;; >>> (solution (list 30 13 24 321))\n;; 12", "  (cond\n    ((null? lst)\
    \ 0)\n    ((even? (car lst)) (car lst))\n    (else (solution (cdr lst)))))\n\n\
    ;; Given a non-empty list of integers, return the sum of all of the even elements\
    \ that are in odd positions.\n;; Examples\n;; >>> (solution (list 5 8 7 1))\n\
    ;; 12\n;; >>> (solution (list 3 3 3 3 3))\n;; 9\n;; >>> (solution (list 30 13\
    \ 24 321))\n;; 30", "  (let ((sum 0))\n    (for-each\n      (lambda (x)\n    \
    \    (if (even? (car x))\n          (sum (+ (car x) (cdr x)))\n          (sum\
    \ (cdr x))))\n      lst))\n)\n", "  (cond\n    ((null? lst) 0)\n    ((even? (car\
    \ lst)) (car lst))\n    (else (solution (cdr lst)))\n  )\n)\n\n;; Given a non-empty\
    \ list of integers, return the sum of all of the even elements that are in odd\
    \ positions.\n;; Examples\n;; >>> (solution (list 5 8 7 1))\n;; 12\n;; >>> (solution\
    \ (list 3 3 3 3 3))\n;; 9\n;; >>> (solution (list 30 13 24 321))\n;; 0", "  (cond\n\
    \    ((null? lst) 0)\n    ((even? (car lst)) (car lst))\n    (else (solution (cdr\
    \ lst)))))\n\n;; Given a list of non-negative integers, return the number of pairs\
    \ of elements that sum to 0.\n;; Examples\n;; >>> (solution (list 1 2 3 4))\n\
    ;; 2\n;; >>> (solution (list 1 2 3 4 5))\n;; 1\n;; >>> (solution (list 1 2 3 4\
    \ 5 6))\n;; 0", "  (cond\n    ((null? lst) 0)\n    ((even? (car lst)) (car lst))\n\
    \    (else (solution (cdr lst)))))\n\n;; Given a non-empty list of integers, return\
    \ the sum of all of the even elements that are in odd positions.\n;; Examples\n\
    ;; >>> (solution (list 5 8 7 1))\n;; 9\n;; >>> (solution (list 3 3 3 3 3))\n;;\
    \ 0\n;; >>> (solution (list 30 13 24 321))\n;; 30", "  (let ((result 0))\n   \
    \ (for-each\n      (lambda (x)\n        (if (modulo x 2)\n            (+ result\
    \ x)\n            (result)))\n      lst))\n)\n", "  (cond\n    ((null? lst) 0)\n\
    \    ((even? (car lst)) (car lst))\n    (else (solution (cdr lst)))))\n\n;; Given\
    \ a non-empty list of integers, return the sum of all of the even elements that\
    \ are in odd positions.\n;; Examples\n;; >>> (solution (list 5 8 7 1))\n;; 12\n\
    ;; >>> (solution (list 3 3 3 3 3))\n;; 9\n;; >>> (solution (list 30 13 24 321))\n\
    ;; 30", "  (cond\n    ((null? lst) 0)\n    ((even? (car lst)) (car lst))\n   \
    \ (else (solution (cdr lst)))))\n", "  (let ((result 0))\n    (for-each (lambda\
    \ (x)\n                (if (odd? x)\n                    (+ result (even? x)))\n\
    \                (cons x result))\n      lst))\n)\n", "  (cond\n    ((null? lst)\
    \ 0)\n    ((even? (car lst)) (car lst))\n    (else (solution (cdr lst)))))\n\n\
    ;; Given a non-empty list of integers, return the sum of all of the even elements\
    \ that are in odd positions.\n;; Examples\n;; >>> (solution (list 5 8 7 1))\n\
    ;; 12\n;; >>> (solution (list 3 3 3 3 3))\n;; 9\n;; >>> (solution (list 30 13\
    \ 24 321))\n;; 30", "  (let ((result 0))\n    (for-each\n      (lambda (x)\n \
    \       (if (even? (car x))\n          (result (+ (car x) (cdr x)))\n        \
    \  (result 0))\n      lst)\n      result))\n)\n", "  (cond\n    ((null? lst) 0)\n\
    \    ((even? (car lst)) (solution (cdr lst)))\n    (else (sum (odd? (car lst))))))\n",
  "  (let ((result 0))\n    (for-each\n      (lambda (x)\n        (if (odd? x)\n \
    \         (result (+ x (first (even? x))))\n          (result x))\n      lst)\n\
    \      result))\n)\n", "  (cond\n    ((null? lst) 0)\n    ((even? (car lst)) (car\
    \ lst))\n    (else (solution (cdr lst)))))\n\n;; Given a list of non-negative\
    \ integers, return the sum of all of the even elements in the list.\n;; Examples\n\
    ;; >>> (solution (list 1 2 3 4 5))\n;; 8\n;; >>> (solution (list 1 2 3 4 5 6 7\
    \ 8 9))\n;; 0\n;; >>> (solution (list 1 2 3 4 5 6 7 8 9 10))\n;; 10\n;; >>> (solution\
    \ (list 1 2 3 4 5 6 7 8 9 10 11))\n;; 0\n;; >>> (solution (list 1 2 3 4 5 6 7\
    \ 8 9 10 11 12))\n;; 12\n;; >>> (solution (list 1 2 3 4 5 6 7 8 9 10 11 12 13))\n\
    ;; 0\n;; >>> (solution (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14))\n;; 14\n;; >>>\
    \ (solution (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15))\n;; 0\n;; >>> (solution\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16))\n;; 16\n;; >>> (solution (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17))\n;; 0\n;; >>> (solution (list 1\
    \ 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18))\n;; 18\n;; >>> (solution (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19))\n;; 0\n;; >>> (solution (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20))\n;; 20\n;; >>> (solution\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21))\n;; 0\n;; >>>\
    \ (solution (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22))\n\
    ;; 22\n;; >>> (solution (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\
    \ 20 21 22 23))\n;; 0\n;; >>> (s", "  (cond\n    ((null? lst) 0)\n    ((even?\
    \ (car lst)) (solution (cdr lst)))\n    (else (car lst) (solution (cdr lst)))\n\
    \  )\n)\n\n;; Given a list of strings, return a list of all the strings that are\
    \ of the same length as the first string.\n;; Examples\n;; >>> (solution (list\
    \ \"abc\" \"abd\" \"abf\"))\n;; [\"abc\", \"abd\"]\n;; >>> (solution (list \"\
    abc\" \"abd\" \"abf\" \"abg\"))\n;; [\"abc\", \"abd\", \"abf\"]\n;; >>> (solution\
    \ (list \"abc\" \"abd\" \"abf\" \"abg\" \"abh\"))\n;; [\"abc\", \"abd\", \"abf\"\
    , \"abg\"]\n;; >>> (solution (list \"abc\" \"abd\" \"abf\" \"abg\" \"abh\" \"\
    abj\"))\n;; [\"abc\", \"abd\", \"abf\", \"abg\"]\n;; >>> (solution (list \"abc\"\
    \ \"abd\" \"abf\" \"abg\" \"abh\" \"abj\" \"abk\"))\n;; [\"abc\", \"abd\", \"\
    abf\", \"abg\"]\n;; >>> (solution (list \"abc\" \"abd\" \"abf\" \"abg\" \"abh\"\
    \ \"abj\" \"abk\" \"abl\"))\n;; [\"abc\", \"abd\", \"abf\", \"abg\"]\n;; >>> (solution\
    \ (list \"abc\" \"abd\" \"abf\" \"abg\" \"abh\" \"abj\" \"abk\" \"abl\" \"abm\"\
    ))\n;; [\"abc\", \"abd\", \"abf\", \"abg\"]\n;; >>> (solution (list \"abc\" \"\
    abd\" \"abf\" \"abg\" \"abh\" \"abj\" \"abk\" \"abl\" \"abm\" \"abn\"))\n;; [\"\
    abc\", \"abd\", \"abf\", \"abg\"]\n;; >>> (solution (list \"abc\" \"abd\" \"abf\"\
    \ \"abg\" \"abh\" \"abj\" \"abk\" \"abl\"", "  (let ((sum (reduce (lambda (x y)\
    \ (+ (car x) (car y))) lst)))\n    (if (even? sum)\n      sum\n      (+ sum (odd?\
    \ sum))))\n)\n", "  (let* ((evens (filter odd lst))\n         (odds (filter even\
    \ lst))\n         (sum (foldl (lambda (a b) (+ a b)) 0 odds)))\n    (+ sum evens)))\n\
    \n;; Given a list of non-negative integers, return the sum of all the even elements\
    \ in the list.\n;; Examples\n;; >>> (solution (list 1 2 3 4 5 6 7 8 9))\n;; 30\n\
    ;; >>> (solution (list 1 2 3 4 5 6 7 8 9 10))\n;; 30\n;; >>> (solution (list 1\
    \ 2 3 4 5 6 7 8 9 10 11))\n;; 30\n;; >>> (solution (list 1 2 3 4 5 6 7 8 9 10\
    \ 11 12))\n;; 30\n;; >>> (solution (list 1 2 3 4 5 6 7 8 9 10 11 12 13))\n;; 30\n\
    ;; >>> (solution (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14))\n;; 30\n;; >>> (solution\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15))\n;; 30\n;; >>> (solution (list 1\
    \ 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16))\n;; 30\n;; >>> (solution (list 1 2 3\
    \ 4 5 6 7 8 9 10 11 12 13 14 15 16 17))\n;; 30\n;; >>> (solution (list 1 2 3 4\
    \ 5 6 7 8 9 10 11 12 13 14 15 16 17 18))\n;; 30\n;; >>> (solution (list 1 2 3\
    \ 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19))\n;; 30\n;; >>> (solution (list 1\
    \ 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20))\n;; 30\n;; >>> (solution\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21))\n;; 30\n;; >>>\
    \ (solution (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22))\n\
    ;; 30\n;; >>> (solution (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\
    \ 20 21 22 23))\n;; 30\n;; >>> (solution (list 1 2 3 4", "  (let ((sum (make-list\
    \ 0)))\n    (for-each\n      (lambda (x)\n        (if (even? x)\n          (set-car!\
    \ sum (car x))\n          (set-cdr! sum (cdr x)))\n      lst)\n      sum))\n)\n",
  "  (cond\n    ((null? lst) 0)\n    ((even? (car lst)) (car lst))\n    (else (solution\
    \ (cdr lst)))))\n\n;; Given a list of numbers, return a list of the even numbers\
    \ in the list.\n;; Examples\n;; >>> (even? (list 1 2 3 4 5 6 7 8 9 10))\n;; (list\
    \ 2 4 6 8)\n;; >>> (even? (list 1 2 3 4 5 6 7 8 9 10 11))\n;; (list 2 4 6 8 10)\n\
    ;; >>> (even? (list 1 2 3 4 5 6 7 8 9 10 11 12))\n;; (list 2 4 6 8 10 12)\n;;\
    \ >>> (even? (list 1 2 3 4 5 6 7 8 9 10 11 12 13))\n;; (list 2 4 6 8 10 12)\n\
    ;; >>> (even? (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14))\n;; (list 2 4 6 8 10 12)\n\
    ;; >>> (even? (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15))\n;; (list 2 4 6 8 10\
    \ 12)\n;; >>> (even? (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16))\n;; (list\
    \ 2 4 6 8 10 12)\n;; >>> (even? (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17))\n\
    ;; (list 2 4 6 8 10 12)\n;; >>> (even? (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14\
    \ 15 16 17 18))\n;; (list 2 4 6 8 10 12)\n;; >>> (even? (list 1 2 3 4 5 6 7 8\
    \ 9 10 11 12 13 14 15 16 17 18 19))\n;; (list 2 4 6 8 10 12)\n;; >>> (even? (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20))\n;; (list 2 4 6 8 10 12)\n\
    ;; >>> (even? (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21))\n\
    ;; (list 2 4 6 8 10 12)\n;; >>> (even? (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14\
    \ 15 16", "  (cond\n    ((null? lst) 0)\n    ((even? (car lst)) (car lst))\n \
    \   (else (solution (cdr lst)))\n  )\n)\n\n;; Given a non-empty list of integers,\
    \ return the sum of all of the even elements that are in odd positions.\n;; Examples\n\
    ;; >>> (solution (list 5 8 7 1))\n;; 12\n;; >>> (solution (list 3 3 3 3 3))\n\
    ;; 9\n;; >>> (solution (list 30 13 24 321))\n;; 0", "  (let ((result 0))\n   \
    \ (for-each\n      (lambda (x)\n        (if (odd? x)\n          (result (+ x (first\
    \ (cdr x))))\n          (result 0)))\n      lst))\n  result)\n", "  (cond\n  \
    \  ((null? lst) 0)\n    ((even? (car lst)) (car lst))\n    (else (solution (cdr\
    \ lst)))))\n\n;; Given a non-empty list of integers, return the sum of all of\
    \ the even elements that are in odd positions.\n;; Examples\n;; >>> (solution\
    \ (list 5 8 7 1))\n;; 12\n;; >>> (solution (list 3 3 3 3 3))\n;; 9\n;; >>> (solution\
    \ (list 30 13 24 321))\n;; 0", "  (let ((result 0))\n    (for-each\n      (lambda\
    \ (x)\n        (if (even? (car x))\n            (result (+ (car x) (car (cdr x))))))\n\
    \      lst))\n)\n", "  (let ((result 0))\n    (for-each\n      (lambda (x)\n \
    \       (if (odd? x)\n          (result (+ x (first (even? lst))))\n         \
    \ (result x)))\n      lst)\n    result))\n", "  (cond\n    ((null? lst) 0)\n \
    \   ((even? (car lst)) (car lst))\n    (else (solution (cdr lst)))))\n\n;; Given\
    \ a non-empty list of integers, return the sum of all of the even elements that\
    \ are in odd positions.\n;; Examples\n;; >>> (solution (list 5 8 7 1))\n;; 12\n\
    ;; >>> (solution (list 3 3 3 3 3))\n;; 9\n;; >>> (solution (list 30 13 24 321))\n\
    ;; 30", "  (cond\n    ((null? lst) 0)\n    ((even? (car lst)) (car lst))\n   \
    \ (else (solution (cdr lst)))))\n\n;; Given a non-empty list of integers, return\
    \ the sum of all of the even elements that are in odd positions.\n;; Examples\n\
    ;; >>> (solution (list 5 8 7 1))\n;; 9\n;; >>> (solution (list 3 3 3 3 3))\n;;\
    \ 0\n;; >>> (solution (list 30 13 24 321))\n;; 12", "  (cond\n    ((null? lst)\
    \ 0)\n    ((even? (car lst)) (solution (cdr lst)))\n    (else (sum (filter odd?\
    \ (cdr lst))) (solution (cdr lst))))\n)\n\n;; Given a non-empty list of integers,\
    \ return the sum of all of the even elements that are in odd positions.\n;; Examples\n\
    ;; >>> (solution (list 5 8 7 1))\n;; 9\n;; >>> (solution (list 3 3 3 3 3))\n;;\
    \ 0\n;; >>> (solution (list 30 13 24 321))\n;; 12", "  (cond\n    ((null? lst)\
    \ 0)\n    ((even? (car lst)) (car lst))\n    (else (solution (cdr lst)))\n  )\n\
    )\n\n;; Given a non-empty list of integers, return the sum of all of the even\
    \ elements that are in odd positions.\n;; Examples\n;; >>> (solution (list 5 8\
    \ 7 1))\n;; 9\n;; >>> (solution (list 3 3 3 3 3))\n;; 0\n;; >>> (solution (list\
    \ 30 13 24 321))\n;; 12", "  (let ((result 0))\n    (for-each\n      (lambda (x)\n\
    \        (if (even? (car x))\n          (result (+ (car x) (cdr x)))\n       \
    \   (result (cdr x))))\n      lst))\n)\n", "  (let ((result 0))\n    (for-each\
    \ (lambda (x)\n                (if (odd? x)\n                    (result (+ x\
    \ (first (even? lst))))))\n      lst))\n  result)\n", "  (cond\n    ((null? lst)\
    \ 0)\n    ((even? (car lst)) (car lst))\n    (else (solution (cdr lst)))\n  )\n\
    )\n\n;; Given a non-empty list of integers, return the sum of all of the even\
    \ elements that are in odd positions.\n;; Examples\n;; >>> (solution (list 5 8\
    \ 7 1))\n;; 12\n;; >>> (solution (list 3 3 3 3 3))\n;; 9\n;; >>> (solution (list\
    \ 30 13 24 321))\n;; 0", "  (let ((result 0))\n    (for-each (lambda (x)\n   \
    \             (if (odd? x)\n                    (result (+ x (first (even? lst))))))\n\
    \      lst))\n  result)\n", "  (cond\n    ((null? lst) 0)\n    ((even? (car lst))\
    \ (car lst))\n    (else (solution (cdr lst)))\n  )\n)\n\n;; Given a non-empty\
    \ list of integers, return the sum of all of the even elements that are in odd\
    \ positions.\n;; Examples\n;; >>> (solution (list 5 8 7 1))\n;; 9\n;; >>> (solution\
    \ (list 3 3 3 3 3))\n;; 0\n;; >>> (solution (list 30 13 24 321))\n;; 30", "  (let\
    \ ((result 0))\n    (for-each\n      (lambda (x)\n        (if (odd? x)\n     \
    \     (result (+ result x))\n        )\n      )\n      lst)\n    result)\n)\n",
  "  (cond\n    ((null? lst) 0)\n    ((even? (car lst)) (solution (cdr lst)))\n  \
    \  (else (car lst) (solution (cdr lst)))\n  )\n)\n\n;; Given a list of words,\
    \ return a list of all the words that appear in the same position in the list.\n\
    ;; Examples\n;; >>> (solution (list \"cat\" \"dog\" \"cat\" \"dog\"))\n;; (list\
    \ \"cat\" \"dog\")\n;; >>> (solution (list \"cat\" \"cat\" \"dog\" \"dog\"))\n\
    ;; (list \"cat\" \"dog\")\n;; >>> (solution (list \"cat\" \"cat\" \"dog\" \"cat\"\
    \ \"dog\"))\n;; (list \"cat\" \"dog\")\n;; >>> (solution (list \"cat\" \"cat\"\
    \ \"dog\" \"cat\" \"dog\" \"cat\" \"dog\"))\n;; (list \"cat\" \"dog\")\n;; >>>\
    \ (solution (list \"cat\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\"\
    \ \"dog\"))\n;; (list \"cat\" \"dog\")\n;; >>> (solution (list \"cat\" \"cat\"\
    \ \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\"))\n\
    ;; (list \"cat\" \"dog\")\n;; >>> (solution (list \"cat\" \"cat\" \"dog\" \"cat\"\
    \ \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\"))\n\
    ;; (list \"cat\" \"dog\")\n;; >>> (solution (list \"cat\" \"cat\" \"dog\" \"cat\"\
    \ \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\"\
    \ \"dog\"))\n;; (list \"cat\" \"dog\")\n;; >>> (solution (list \"cat\" \"cat\"\
    \ \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\"\
    \ \"dog\" \"cat\" \"dog\" \"cat\" \"dog\"))\n;; (list \"cat\" \"dog\")\n;; >>>\
    \ (solution (list \"cat\"", "  (cond\n    ((null? lst) 0)\n    ((even? (car lst))\
    \ (car lst))\n    (else (solution (cdr lst)))\n  )\n)\n\n;; Given a list of words,\
    \ return a list of all of the words that are anagrams of each other.\n;; Examples\n\
    ;; >>> (anagrams (list \"dog\" \"cat\" \"goat\"))\n;; #f\n;; >>> (anagrams (list\
    \ \"dog\" \"dog\" \"dog\"))\n;; #f\n;; >>> (anagrams (list \"dog\" \"dog\" \"\
    dog\" \"dog\"))\n;; #f\n;; >>> (anagrams (list \"dog\" \"dog\" \"dog\" \"dog\"\
    \ \"dog\"))\n;; #f\n;; >>> (anagrams (list \"dog\" \"dog\" \"dog\" \"dog\" \"\
    dog\" \"dog\"))\n;; #f\n;; >>> (anagrams (list \"dog\" \"dog\" \"dog\" \"dog\"\
    \ \"dog\" \"dog\" \"dog\"))\n;; #f\n;; >>> (anagrams (list \"dog\" \"dog\" \"\
    dog\" \"dog\" \"dog\" \"dog\" \"dog\" \"dog\"))\n;; #f\n;; >>> (anagrams (list\
    \ \"dog\" \"dog\" \"dog\" \"dog\" \"dog\" \"dog\" \"dog\" \"dog\" \"dog\"))\n\
    ;; #f\n;; >>> (anagrams (list \"dog\" \"dog\" \"dog\" \"dog\" \"dog\" \"dog\"\
    \ \"dog\" \"dog\" \"dog\" \"dog\"))\n;; #f\n;; >>> (anagrams (list \"dog\" \"\
    dog\" \"dog\" \"dog\" \"dog\" \"dog\" \"dog\" \"dog\" \"dog\" \"dog\" \"dog\"\
    ))\n;; #f\n;; >>> (anagrams (list \"dog\" \"dog\" \"dog\" \"dog\" \"dog\" \"dog\"\
    \ \"dog\" \"dog\" \"dog\" \"dog\" \"dog\" \"dog\"))\n;; #f\n;; >>> (anagrams (list\
    \ \"dog\" \"dog\" \"dog\" \"dog\" \"dog\" \"dog\" \"dog\" \"dog\" \"dog\" \"dog\"\
    \ \"dog\" \"dog\" \"dog\"))\n;; #f\n;; >>> (anagrams", "  (cond\n    ((null? lst)\
    \ 0)\n    ((even? (car lst)) (car lst))\n    (else (solution (cdr lst)))))\n\n\
    ;; Given a list of non-negative integers, return the sum of all of the even elements\
    \ in the list.\n;; Examples\n;; >>> (solution (list 1 2 3 4 5 6))\n;; 6\n;; >>>\
    \ (solution (list 2 3 4 5 6))\n;; 0\n;; >>> (solution (list 1 2 3 4 5))\n;; 4\n\
    ;; >>> (solution (list 1 2 3 4))\n;; 2\n;; >>> (solution (list 1 2 3))\n;; 0\n\
    ;; >>> (solution (list 1))\n;; 1\n;; >>> (solution (list))\n;; 0\n;; >>> (solution\
    \ (list 1 2 3 4 5 6 7 8 9 10 11))\n;; 0\n;; >>> (solution (list 1 2 3 4 5 6 7\
    \ 8 9 10 11 12))\n;; 0\n;; >>> (solution (list 1 2 3 4 5 6 7 8 9 10 11 12 13))\n\
    ;; 0\n;; >>> (solution (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14))\n;; 0\n;; >>>\
    \ (solution (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15))\n;; 0\n;; >>> (solution\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16))\n;; 0\n;; >>> (solution (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17))\n;; 0\n;; >>> (solution (list 1\
    \ 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18))\n;; 0\n;; >>> (solution (list 1\
    \ 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19))\n;; 0\n;; >>> (solution (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20))\n;; 0\n;; >>> (solution\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21))\n;; 0\n;; >>>\
    \ (solution (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18", "  (let ((result\
    \ 0))\n    (for-each (lambda (x)\n                (if (odd? x)\n             \
    \       (result (+ x (first (even? lst))))))\n      lst))\n  result)\n", "  (cond\n\
    \    ((null? lst) 0)\n    ((even? (car lst)) (solution (cdr lst)))\n    (else\
    \ (sum (map odd? (cdr lst))) (solution (cdr lst))))\n)\n\n;; Given a list of lists,\
    \ return the sum of the elements in the list of lists.\n;; Examples\n;; >>> (solution\
    \ (list (list 1 2 3) (list 4 5 6)))\n;; 15\n;; >>> (solution (list (list 1 2 3)\
    \ (list 4 5 6) (list 7 8 9)))\n;; 27\n;; >>> (solution (list (list 1 2 3) (list\
    \ 4 5 6) (list 7 8 9) (list 10 11 12)))\n;; 30\n;; >>> (solution (list (list 1\
    \ 2 3) (list 4 5 6) (list 7 8 9) (list 10 11 12) (list 13 14 15)))\n;; 0", " \
    \ (cond\n    ((null? lst) 0)\n    ((even? (car lst)) (car lst))\n    (else (solution\
    \ (cdr lst)))))\n\n;; Given a non-empty list of integers, return the sum of all\
    \ of the even elements that are in odd positions.\n;; Examples\n;; >>> (solution\
    \ (list 5 8 7 1))\n;; 12\n;; >>> (solution (list 3 3 3 3 3))\n;; 9\n;; >>> (solution\
    \ (list 30 13 24 321))\n;; 30", "  (cond\n    ((null? lst) 0)\n    ((even? (car\
    \ lst)) (solution (cdr lst)))\n    (else (sum (odd? (car lst))))))\n\n;;; (solution\
    \ (list 5 8 7 1))\n;;; 12\n;;; (solution (list 3 3 3 3 3))\n;;; 9\n;;; (solution\
    \ (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;;\
    \ (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n\
    ;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24\
    \ 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list\
    \ 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution\
    \ (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;;\
    \ (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n\
    ;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24\
    \ 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list\
    \ 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution\
    \ (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;;\
    \ (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n\
    ;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24\
    \ 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (", "  (cond\n\
    \    ((null? lst) 0)\n    ((even? (car lst)) (car lst))\n    (else (solution (cdr\
    \ lst)))))\n", "  (cond\n    ((null? lst) 0)\n    ((even? (car lst)) (car lst))\n\
    \    (else (solution (cdr lst)))))\n\n;;; (solution (list 1 2 3 4 5 6 7 8 9 10))\n\
    ;;; 12\n;;; (solution (list 1 2 3 4 5 6 7 8 9 10 11))\n;;; 9\n;;; (solution (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12))\n;;; 0\n;;; (solution (list 1 2 3 4 5 6 7 8 9 10\
    \ 11 12 13))\n;;; 0\n;;; (solution (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14))\n\
    ;;; 0\n;;; (solution (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15))\n;;; 0\n;;; (solution\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16))\n;;; 0\n;;; (solution (list 1\
    \ 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17))\n;;; 0\n;;; (solution (list 1 2 3\
    \ 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18))\n;;; 0\n;;; (solution (list 1 2 3 4\
    \ 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19))\n;;; 0\n;;; (solution (list 1 2 3\
    \ 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20))\n;;; 0\n;;; (solution (list 1\
    \ 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21))\n;;; 0\n;;; (solution\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22))\n;;; 0\n;;;\
    \ (solution (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23))\n\
    ;;; 0\n;;; (solution (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\
    \ 21 22 23 24))\n;;; 0\n;;; (solution (list 1 2 3 4 5 6 7 8 9 10 11", "  (cond\n\
    \    ((null? lst) 0)\n    ((even? (car lst)) (car lst))\n    (else (solution (cdr\
    \ lst)))))\n\n;; Given a list of words, return a list of all the words that appear\
    \ in the same position in the list.\n;; Examples\n;; >>> (solution (list \"a\"\
    \ \"b\" \"c\" \"a\"))\n;; [\"a\", \"a\"]\n;; >>> (solution (list \"a\" \"b\" \"\
    c\" \"b\"))\n;; [\"b\"]\n;; >>> (solution (list \"a\" \"b\" \"c\" \"b\" \"a\"\
    \ \"b\"))\n;; [\"b\", \"b\"]\n;; >>> (solution (list \"a\" \"b\" \"c\" \"b\" \"\
    a\" \"b\" \"c\" \"b\" \"a\" \"b\" \"c\" \"b\" \"a\" \"b\" \"c\" \"b\" \"a\" \"\
    b\" \"c\" \"b\" \"a\" \"b\" \"c\" \"b\" \"a\" \"b\" \"c\" \"b\" \"a\" \"b\" \"\
    c\" \"b\" \"a\" \"b\" \"c\" \"b\" \"a\" \"b\" \"c\" \"b\" \"a\" \"b\" \"c\" \"\
    b\" \"a\" \"b\" \"c\" \"b\" \"a\" \"b\" \"c\" \"b\" \"a\" \"b\" \"c\" \"b\" \"\
    a\" \"b\" \"c\" \"b\" \"a\" \"b\" \"c\" \"b\" \"a\" \"b\" \"c\" \"b\" \"a\" \"\
    b\" \"c\" \"b\" \"a\" \"b\" \"c\" \"b\" \"a\" \"b\" \"c\" \"b\" \"a\" \"b\" \"\
    c\" \"b\" \"a\" \"b\" \"c\" \"b\" \"a\" \"b\" \"c\" \"b\" \"a\" \"b\" \"c\" \"\
    b\" \"a\" \"b\" \"c\" \"b\" \"a\" \"b\" \"c\" \"b\" \"a\" \"b\" \"c\" \"b\" \"\
    a\" \"b\" \"c\" \"b\" \"a\" \"b\" \"c\" \"", "  (cond\n    ((null? lst) 0)\n \
    \   ((even? (car lst)) (car lst))\n    (else (solution (cdr lst)))))\n\n;;; (even?\
    \ (car lst))\n;;; (car lst)\n;;; (cdr lst)\n;;; (solution (cdr lst))\n;;; (solution\
    \ (cdr lst))\n;;; (solution (cdr lst))\n;;; (solution (cdr lst))\n;;; (solution\
    \ (cdr lst))\n;;; (solution (cdr lst))\n;;; (solution (cdr lst))\n;;; (solution\
    \ (cdr lst))\n;;; (solution (cdr lst))\n;;; (solution (cdr lst))\n;;; (solution\
    \ (cdr lst))\n;;; (solution (cdr lst))\n;;; (solution (cdr lst))\n;;; (solution\
    \ (cdr lst))\n;;; (solution (cdr lst))\n;;; (solution (cdr lst))\n;;; (solution\
    \ (cdr lst))\n;;; (solution (cdr lst))\n;;; (solution (cdr lst))\n;;; (solution\
    \ (cdr lst))\n;;; (solution (cdr lst))\n;;; (solution (cdr lst))\n;;; (solution\
    \ (cdr lst))\n;;; (solution (cdr lst))\n;;; (solution (cdr lst))\n;;; (solution\
    \ (cdr lst))\n;;; (solution (cdr lst))\n;;; (solution (cdr lst))\n;;; (solution\
    \ (cdr lst))\n;;; (solution (cdr lst))\n;;; (solution (cdr lst))\n;;; (solution\
    \ (cdr lst))\n;;; (solution (cdr lst))\n;;; (solution (cdr lst))\n;;; (solution\
    \ (cdr lst))\n;;; (solution (cdr lst))\n;;; (solution (cdr", "  (cond\n    ((null?\
    \ lst) 0)\n    ((even? (car lst)) (solution (cdr lst)))\n    (else (sum (odd?\
    \ (car lst))) (solution (cdr lst)))\n  )\n)\n\n;;; (solution (list 5 8 7 1))\n\
    ;;; 12\n;;; (solution (list 3 3 3 3 3))\n;;; 9\n;;; (solution (list 30 13 24 321))\n\
    ;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24\
    \ 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list\
    \ 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution\
    \ (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;;\
    \ (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n\
    ;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24\
    \ 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list\
    \ 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution\
    \ (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;;\
    \ (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n\
    ;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24\
    \ 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list\
    \ 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution\
    \ (list", "  (let ((result 0))\n    (for-each\n      (lambda (x)\n        (if\
    \ (even? (car x))\n          (result (+ (car x) (car (cdr x))))\n          (result\
    \ (car x))))\n      lst)\n    result))\n", "  (cond\n    ((null? lst) 0)\n   \
    \ ((even? (car lst)) (solution (cdr lst)))\n    (else (sum (filter odd? (cdr lst))))))\n\
    \n;; Given a list of lists, return a list of the elements of the inner lists.\n\
    ;; Examples\n;; >>> (solution (list (list 1 2 3) (list 4 5 6) (list 7 8 9)))\n\
    ;; (list 1 2 3 4 5 6 7 8 9)\n;; >>> (solution (list (list 1 2 3) (list 4 5 6)\
    \ (list 7 8 9) (list 10 11 12)))\n;; (list 1 2 3 4 5 6 7 8 9 10 11 12)\n;; >>>\
    \ (solution (list (list 1 2 3) (list 4 5 6) (list 7 8 9) (list 10 11 12) (list\
    \ 13 14 15)))\n;; (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)\n;; >>> (solution\
    \ (list (list 1 2 3) (list 4 5 6) (list 7 8 9) (list 10 11 12) (list 13 14 15)\
    \ (list 16 17 18)))\n;; (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)\n\
    ;; >>> (solution (list (list 1 2 3) (list 4 5 6) (list 7 8 9) (list 10 11 12)\
    \ (list 13 14 15) (list 16 17 18) (list 19 20 21)))\n;; (list 1 2 3 4 5 6 7 8\
    \ 9 10 11 12 13 14 15 16 17 18 19 20 21)\n;; >>> (solution (list (list 1 2 3)\
    \ (list 4 5 6) (list 7 8 9) (list 10 11 12) (list 13 14 15) (list 16 17 18) (list\
    \ 19 20 21) (list 22 23 24)))\n;; (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\
    \ 17 18 19 20 21 22 23 24)\n;; >>> (solution (list (list 1 2 3) (list 4 5 6) (list\
    \ 7 8 9) (list 10 11 12) (list 13 14 15) (list 16 17 18) (list 19 20 21) (list\
    \ 22 23 24) (list 25 26 27)))\n;; (", "  (cond\n    ((null? lst) 0)\n    ((even?\
    \ (car lst)) (car lst))\n    (else (solution (cdr lst)))\n  )\n)\n\n;; Given a\
    \ non-empty list of integers, return the sum of all of the even elements that\
    \ are in odd positions.\n;; Examples\n;; >>> (solution (list 5 8 7 1))\n;; 12\n\
    ;; >>> (solution (list 3 3 3 3 3))\n;; 9\n;; >>> (solution (list 30 13 24 321))\n\
    ;; 0", "  (cond\n    ((null? lst) 0)\n    ((even? (car lst)) (solution (cdr lst)))\n\
    \    (else (sum (filter odd? (cdr lst))))))\n\n;; Given a non-empty list of integers,\
    \ return the sum of all of the even elements that are in odd positions.\n;; Examples\n\
    ;; >>> (solution (list 5 8 7 1))\n;; 9\n;; >>> (solution (list 3 3 3 3 3))\n;;\
    \ 0\n;; >>> (solution (list 30 13 24 321))\n;; 12", "  (let ((result 0))\n   \
    \ (for-each\n      (lambda (x)\n        (if (even? (car x))\n          (result\
    \ (+ (car x) (cdr x)))\n          (result (cdr x))))\n      lst))\n)\n", "  (let\
    \ ((result 0))\n    (for-each (lambda (x)\n                (if (even? (car x))\n\
    \                    (result (+ (car x) (car (cdr x))))))\n      lst))\n)\n",
  "  (cond\n    ((null? lst) 0)\n    ((even? (car lst)) (car lst))\n    (else (solution\
    \ (cdr lst)))))\n\n;;; (solution (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\
    \ 17 18 19 20 21 22 23 24 25 26 27 28 29 30))\n;;; 12\n;;; 9\n;;; 0\n;;; (solution\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27\
    \ 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53\
    \ 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79\
    \ 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103\
    \ 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122\
    \ 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141\
    \ 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160\
    \ 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179\
    \ 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198\
    \ 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217\
    \ 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236\
    \ 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255\
    \ 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274\
    \ 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293\
    \ 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312\
    \ 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331\
    \ 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350\
    \ 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369\
    \ 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388\
    \ 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403", "  (let ((result\
    \ 0))\n    (for-each\n      (lambda (x)\n        (if (odd? x)\n          (result\
    \ (+ x (first (even? x))))\n          (result x)))\n      lst)\n    result))\n",
  "  (let ((sum 0))\n    (for-each (lambda (x)\n                (if (odd? x)\n   \
    \                 (sum (+ x (first (even? lst))))\n                    (sum x)))\n\
    \              lst))\n  sum)\n\n;;; (solution (list 5 8 7 1))\n;;; 12\n;;; (solution\
    \ (list 3 3 3 3 3))\n;;; 9\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27\
    \ 28 29 30))\n;;; 0\n;;; (solution (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\
    \ 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42\
    \ 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68\
    \ 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94\
    \ 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115\
    \ 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134\
    \ 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153\
    \ 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172\
    \ 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191\
    \ 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210\
    \ 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229\
    \ 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248\
    \ 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267\
    \ 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286\
    \ 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305\
    \ 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324\
    \ 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343\
    \ 344 345 346 347 348 349 350 351 352", "  (cond\n    ((null? lst) 0)\n    ((even?\
    \ (car lst)) (solution (cdr lst)))\n    (else (solution (cdr lst)))))\n\n;; Given\
    \ a list of non-negative integers, return the sum of all of the even elements\
    \ in the list.\n;; Examples\n;; >>> (even? (list 1 2 3 4 5 6 7 8 9 10))\n;; 10\n\
    ;; >>> (even? (list 1 2 3 4 5 6 7 8 9))\n;; 0\n;; >>> (even? (list 1 2 3 4 5 6\
    \ 7 8))\n;; 0\n;; >>> (even? (list 1 2 3 4 5 6))\n;; 0\n;; >>> (even? (list 1\
    \ 2 3 4 5))\n;; 0\n;; >>> (even? (list 1 2 3 4))\n;; 0\n;; >>> (even? (list 1\
    \ 2 3))\n;; 0\n;; >>> (even? (list 1))\n;; 0\n;; >>> (even? (list))\n;; 0\n;;\
    \ >>> (even? (list 1 2 3 4 5 6 7 8 9 10))\n;; 10\n;; >>> (even? (list 1 2 3 4\
    \ 5 6 7 8 9))\n;; 9\n;; >>> (even? (list 1 2 3 4 5 6 7 8))\n;; 8\n;; >>> (even?\
    \ (list 1 2 3 4 5 6))\n;; 6\n;; >>> (even? (list 1 2 3 4 5))\n;; 4\n;; >>> (even?\
    \ (list 1 2 3 4))\n;; 2\n;; >>> (even? (list 1 2 3))\n;; 1\n;; >>> (even? (list\
    \ 1))\n;; 1\n;; >>> (even? (list))\n;; 0\n;; >>> (even? (list 1 2 3 4 5 6 7 8\
    \ 9 10))\n;; 10\n;; >>> (even? (list 1 2 3 4 5 6 7 8 9))\n;; 9\n;; >>> (even?\
    \ (list 1 2 3 4 5 6 7 8))\n;; 8\n;; >>> (even? (list 1 2 3 4 5 6))\n;; 6\n;; >>>\
    \ (even? (list 1 2 3 4 5))\n;; 4\n;; >>> (even? (list 1 2 3 4))\n;; 2\n;; >>>\
    \ (even? (list 1 2 3))\n;; 1\n", "  (cond\n    ((null? lst) 0)\n    ((even? (car\
    \ lst)) (car lst))\n    (else (solution (cdr lst)))\n  )\n)\n\n;; Given a non-empty\
    \ list of integers, return the sum of all of the even elements that are in odd\
    \ positions.\n;; Examples\n;; >>> (solution (list 5 8 7 1))\n;; 12\n;; >>> (solution\
    \ (list 3 3 3 3 3))\n;; 9\n;; >>> (solution (list 30 13 24 321))\n;; 0", "  (cond\n\
    \    ((null? lst) 0)\n    ((even? (car lst)) (car lst))\n    (else (solution (cdr\
    \ lst)))\n  )\n)\n\n;; Given a list of words, return a list of all the words that\
    \ appear in the same position in the list.\n;; Examples\n;; >>> (solution (list\
    \ \"cat\" \"dog\" \"cat\" \"dog\"))\n;; [\"dog\" \"cat\"]\n;; >>> (solution (list\
    \ \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\"))\n;; [\"cat\" \"dog\"]\n;;\
    \ >>> (solution (list \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\"\
    \ \"dog\"))\n;; [\"cat\" \"dog\"]\n;; >>> (solution (list \"cat\" \"dog\" \"cat\"\
    \ \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\"))\n;; [\"cat\" \"dog\"\
    ]\n;; >>> (solution (list \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\"\
    \ \"dog\" \"cat\" \"dog\" \"cat\" \"dog\"))\n;; [\"cat\" \"dog\"]\n;; >>> (solution\
    \ (list \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\"\
    \ \"dog\" \"cat\" \"dog\" \"cat\" \"dog\"))\n;; [\"cat\" \"dog\"]\n;; >>> (solution\
    \ (list \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\"\
    \ \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\"))\n;; [\"cat\" \"dog\"\
    ]\n;; >>> (solution (list \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\"\
    \ \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\"\
    \ \"dog\"))\n;; [\"cat\" \"dog\"]\n;; >>> (solution (list \"cat\" \"dog\" \"cat\"\
    \ \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"",
  "  (let ((result 0))\n    (while (not (null? lst))\n      (if (odd? (car lst))\n\
    \        (result (+ (car lst) (cdr lst)))\n        (result (car lst)))\n     \
    \ (cdr lst))\n    result))\n", "  (cond\n    ((null? lst) 0)\n    ((even? (car\
    \ lst)) (car lst))\n    (else (solution (cdr lst)))))\n\n;; Given a non-empty\
    \ list of integers, return the sum of all of the even elements that are in odd\
    \ positions.\n;; Examples\n;; >>> (solution (list 5 8 7 1))\n;; 12\n;; >>> (solution\
    \ (list 3 3 3 3 3))\n;; 9\n;; >>> (solution (list 30 13 24 321))\n;; 0", "  (cond\n\
    \    ((null? lst) 0)\n    ((even? (car lst)) (car lst))\n    (else (solution (cdr\
    \ lst)))))\n", "  (cond\n    ((null? lst) 0)\n    ((even? (car lst)) (car lst))\n\
    \    (else (solution (cdr lst)))\n  )\n)\n\n;; Given a non-empty list of integers,\
    \ return the sum of all of the even elements that are in odd positions.\n;; Examples\n\
    ;; >>> (solution (list 5 8 7 1))\n;; 9\n;; >>> (solution (list 3 3 3 3 3))\n;;\
    \ 0\n;; >>> (solution (list 30 13 24 321))\n;; 12", "  (cond\n    ((null? lst)\
    \ 0)\n    ((even? (car lst)) (solution (cdr lst)))\n    (else (sum (map odd? (cdr\
    \ lst))) (solution (cdr lst))))\n)\n\n;; Given a list of words, return a list\
    \ of all the words that appear in the same position in the list.\n;; Examples\n\
    ;; >>> (solution (list \"a\" \"b\" \"c\" \"a\"))\n;; \"a\"\n;; >>> (solution (list\
    \ \"a\" \"b\" \"c\" \"b\"))\n;; \"b\"\n;; >>> (solution (list \"a\" \"b\" \"c\"\
    \ \"c\"))\n;; \"c\"\n;; >>> (solution (list \"a\" \"b\" \"c\" \"d\"))\n;; nil",
  "  (cond\n    ((null? lst) 0)\n    ((even? (car lst)) (solution (cdr lst)))\n  \
    \  (else (car lst) (solution (cdr lst)))\n  )\n)\n\n;;; (solution (list 1 2 3\
    \ 4 5 6 7 8 9 10))\n;;; 12\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution\
    \ (list 3 3 3 3 3))\n;;; 9\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution\
    \ (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;;\
    \ (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n\
    ;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24\
    \ 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list\
    \ 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution\
    \ (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;;\
    \ (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n\
    ;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24\
    \ 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list\
    \ 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution\
    \ (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;;\
    \ (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n\
    ;;; 0\n;;; (solution (", "  (cond\n    ((null? lst) 0)\n    ((even? (car lst))\
    \ (car lst))\n    (else (solution (cdr lst)))\n  )\n)\n\n;; Given a non-empty\
    \ list of integers, return the sum of all of the even elements that are in odd\
    \ positions.\n;; Examples\n;; >>> (solution (list 5 8 7 1))\n;; 12\n;; >>> (solution\
    \ (list 3 3 3 3 3))\n;; 9\n;; >>> (solution (list 30 13 24 321))\n;; 0", "  (let\
    \ ((result 0))\n    (for-each\n      (lambda (x)\n        (if (odd? x)\n     \
    \     (result (+ x (first (even? x))))\n          (result x)))\n      lst)\n \
    \   result))\n", "  (cond\n    ((null? lst) 0)\n    ((even? (car lst)) (solution\
    \ (cdr lst)))\n    (else (car lst) (solution (cdr lst)))\n  )\n)\n\n;; Given a\
    \ non-empty list of integers, return the sum of all of the even elements that\
    \ are in odd positions.\n;; Examples\n;; >>> (solution (list 5 8 7 1))\n;; 12\n\
    ;; >>> (solution (list 3 3 3 3 3))\n;; 9\n;; >>> (solution (list 30 13 24 321))\n\
    ;; 30", "  (cond\n    ((null? lst) 0)\n    ((even? (car lst)) (solution (cdr lst)))\n\
    \    (else (sum (odd? (car lst))) (solution (cdr lst)))\n  )\n)\n\n;; Given a\
    \ list of lists, return a list of the elements that are in all of the lists.\n\
    ;; Examples\n;; >>> (solution (list (list 1 2 3) (list 4 5 6) (list 7 8 9)))\n\
    ;; (list 1 2 3 4 5 6 7 8 9)\n;; >>> (solution (list (list 1 2 3) (list 4 5 6)\
    \ (list 7 8 9) (list 10 11 12)))\n;; (list 1 2 3 4 5 6 7 8 9 10 11 12)\n;; >>>\
    \ (solution (list (list 1 2 3) (list 4 5 6) (list 7 8 9) (list 10 11 12) (list\
    \ 13 14 15)))\n;; (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)\n;; >>> (solution\
    \ (list (list 1 2 3) (list 4 5 6) (list 7 8 9) (list 10 11 12) (list 13 14 15)\
    \ (list 16 17 18)))\n;; (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)\n\
    ;; >>> (solution (list (list 1 2 3) (list 4 5 6) (list 7 8 9) (list 10 11 12)\
    \ (list 13 14 15) (list 16 17 18) (list 19 20 21)))\n;; (list 1 2 3 4 5 6 7 8\
    \ 9 10 11 12 13 14 15 16 17 18 19 20 21)\n;; >>> (solution (list (list 1 2 3)\
    \ (list 4 5 6) (list 7 8 9) (list 10 11 12) (list 13 14 15) (list 16 17 18) (list\
    \ 19 20 21) (list 22 23 24)))\n;; (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\
    \ 17 18 19 20 21 22 23 24)\n;; >>> (solution (list (list 1 2 3) (list 4 5 6) (list\
    \ 7 8 9) (list 10 11 12) (list 13 14 15) (list 16 17 18) (list 19 20 21) (", " \
    \ (cond\n    ((null? lst) 0)\n    ((even? (car lst)) (car lst))\n    (else (solution\
    \ (cdr lst)))\n  )\n)\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the even elements that are in odd positions.\n;; Examples\n;; >>>\
    \ (solution (list 5 8 7 1))\n;; 12\n;; >>> (solution (list 3 3 3 3 3))\n;; 9\n\
    ;; >>> (solution (list 30 13 24 321))\n;; 0", "  (cond\n    ((null? lst) 0)\n\
    \    ((even? (car lst)) (solution (cdr lst)))\n    (else (sum (odd? (car lst)))\
    \ (solution (cdr lst)))\n  )\n)\n\n;; Given a list of non-negative integers, return\
    \ the number of pairs of elements that sum to 0.\n;; Examples\n;; >>> (solution\
    \ (list 1 2 3 4 5))\n;; 2\n;; >>> (solution (list 1 2 3 4 5 6))\n;; 1\n;; >>>\
    \ (solution (list 1 2 3 4 5 6 7))\n;; 0", "  (let ((result 0))\n    (for-each\n\
    \      (lambda (i)\n        (if (even? i)\n          (result (+ i (first lst)\
    \ (second lst))))\n        lst)\n      (first lst)))\n  result)\n", "  (let ((sum\
    \ 0))\n    (for-each\n      (lambda (x)\n        (if (odd? x)\n          (sum\
    \ (+ x (first (even? lst))))\n          sum)\n      )\n      lst)\n    sum)\n\
    )\n", "  (cond\n    ((null? lst) 0)\n    ((even? (car lst)) (car lst))\n    (else\
    \ (solution (cdr lst)))))\n\n;;; (solution (list 5 8 7 1))\n;;; 12\n;;; (solution\
    \ (list 3 3 3 3 3))\n;;; 9\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution\
    \ (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;;\
    \ (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n\
    ;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24\
    \ 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list\
    \ 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution\
    \ (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;;\
    \ (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n\
    ;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24\
    \ 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list\
    \ 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution\
    \ (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;;\
    \ (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n\
    ;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24\
    \ 321))\n;;; 0\n;;; (solution (list 30", "  (cond\n    ((null? lst) 0)\n    ((even?\
    \ (car lst)) (car lst))\n    (else (solution (cdr lst)))))\n\n;; Given a non-empty\
    \ list of integers, return the sum of all of the even elements that are in odd\
    \ positions.\n;; Examples\n;; >>> (solution (list 5 8 7 1))\n;; 9\n;; >>> (solution\
    \ (list 3 3 3 3 3))\n;; 0\n;; >>> (solution (list 30 13 24 321))\n;; 30", "  (let\
    \ ((sum 0))\n    (for-each\n      (lambda (x)\n        (if (even? (car x))\n \
    \         (sum (+ (car x) (cdr x)))\n          (sum (+ (car x) (cdr x))))\n  \
    \    lst)\n      sum))\n)\n", "  (cond\n    ((null? lst) 0)\n    ((even? (car\
    \ lst)) (car lst))\n    (else (solution (cdr lst)))\n  )\n)\n\n;; Given a list\
    \ of non-negative integers, return the sum of all the even elements in the list.\n\
    ;; Examples\n;; >>> (even-sum (list 1 2 3 4 5))\n;; 6\n;; >>> (even-sum (list\
    \ 1 2 3 4 5 6))\n;; 0", "  (let ((result 0))\n    (for-each\n      (lambda (x)\n\
    \        (if (even? (car x))\n          (result (+ (car x) (car (cdr x))))))\n\
    \      lst))\n)\n", "  (cond\n    ((null? lst) 0)\n    ((even? (car lst)) (solution\
    \ (cdr lst)))\n    (else (car lst) (solution (cdr lst)))\n  )\n)\n\n;;; (solution\
    \ (list 5 8 7 1))\n;;; 12\n;;; (solution (list 3 3 3 3 3))\n;;; 9\n;;; (solution\
    \ (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;;\
    \ (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n\
    ;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24\
    \ 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list\
    \ 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution\
    \ (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;;\
    \ (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n\
    ;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24\
    \ 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list\
    \ 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution\
    \ (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;;\
    \ (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n\
    ;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24\
    \ 321))\n;;; 0\n;;; (solution (list 30 13 24 321))", "  (let ((sum 0))\n    (for-each\
    \ (lambda (x)\n                (if (even? (car x))\n                  (+ sum (car\
    \ x)))\n                (cdr x))\n      lst))\n)\n", "  (cond\n    ((null? lst)\
    \ 0)\n    ((even? (car lst)) (car lst))\n    (else (solution (cdr lst)))))\n\n\
    ;; Given a non-empty list of integers, return the sum of all of the even elements\
    \ that are in odd positions.\n;; Examples\n;; >>> (solution (list 5 8 7 1))\n\
    ;; 12\n;; >>> (solution (list 3 3 3 3 3))\n;; 9\n;; >>> (solution (list 30 13\
    \ 24 321))\n;; 30", "  (cond\n    ((null? lst) 0)\n    ((even? (car lst)) (solution\
    \ (cdr lst)))\n    (else (car lst) (solution (cdr lst))))\n)\n\n;; Given a list\
    \ of non-negative integers, return the sum of all of the even elements in the\
    \ list.\n;; Examples\n;; >>> (even? (list 1 2 3 4 5))\n;; 6\n;; >>> (even? (list\
    \ 1 2 3 4 5 6))\n;; 0\n;; >>> (even? (list 1 2 3 4 5 6 7))\n;; 6\n;; >>> (even?\
    \ (list 1 2 3 4 5 6 7 8))\n;; 0\n;; >>> (even? (list 1 2 3 4 5 6 7 8 9))\n;; 0\n\
    ;; >>> (even? (list 1 2 3 4 5 6 7 8 9 10))\n;; 6\n;; >>> (even? (list 1 2 3 4\
    \ 5 6 7 8 9 10 11))\n;; 0\n;; >>> (even? (list 1 2 3 4 5 6 7 8 9 10 11 12))\n\
    ;; 6\n;; >>> (even? (list 1 2 3 4 5 6 7 8 9 10 11 12 13))\n;; 0\n;; >>> (even?\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14))\n;; 6\n;; >>> (even? (list 1 2 3 4\
    \ 5 6 7 8 9 10 11 12 13 14 15))\n;; 0\n;; >>> (even? (list 1 2 3 4 5 6 7 8 9 10\
    \ 11 12 13 14 15 16))\n;; 6\n;; >>> (even? (list 1 2 3 4 5 6 7 8 9 10 11 12 13\
    \ 14 15 16 17))\n;; 0\n;; >>> (even? (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\
    \ 16 17 18))\n;; 6\n;; >>> (even? (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\
    \ 17 18 19))\n;; 0\n;; >>> (even? (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\
    \ 17 18 19 20))\n;; 6\n;; >>> (even? (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\
    \ 16 17 18 19 20 21))\n;; 0\n;; >>> (even? (", "  (let ((evens (even lst)))\n\
    \    (if (empty? evens)\n      0\n      (+ (first evens) (solution (rest evens))))))\n",
  "  (cond\n    ((null? lst) 0)\n    ((even? (car lst)) (car lst))\n    (else (solution\
    \ (cdr lst)))\n  )\n)\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the even elements that are in odd positions.\n;; Examples\n;; >>>\
    \ (solution (list 5 8 7 1))\n;; 12\n;; >>> (solution (list 3 3 3 3 3))\n;; 9\n\
    ;; >>> (solution (list 30 13 24 321))\n;; 30", "  (let ((result 0))\n    (for-each\
    \ (lambda (x)\n                (if (even? (car x))\n                  (result\
    \ (+ (car x) (cdr x)))\n                  (result (cdr x))))\n      lst))\n)\n",
  "  (cond\n    ((null? lst) 0)\n    ((even? (car lst)) (car lst))\n    (else (solution\
    \ (cdr lst)))))\n\n;; Given a non-empty list of integers, return the sum of all\
    \ of the even elements that are in odd positions.\n;; Examples\n;; >>> (solution\
    \ (list 5 8 7 1))\n;; 12\n;; >>> (solution (list 3 3 3 3 3))\n;; 9\n;; >>> (solution\
    \ (list 30 13 24 321))\n;; 0", "  (let ((sum 0))\n    (for-each (lambda (x)\n\
    \                (if (odd? x)\n                    (sum (+ x (first (cdr x))))\n\
    \                    (sum (+ x (first (cdr x)))))))\n      lst))\n", "  (cond\n\
    \    ((null? lst) 0)\n    ((even? (car lst)) (solution (cdr lst)))\n    (else\
    \ (sum (odd? (car lst))) (solution (cdr lst)))\n  )\n)\n\n;; Given a non-empty\
    \ list of integers, return the sum of all of the even elements that are in odd\
    \ positions.\n;; Examples\n;; >>> (solution (list 5 8 7 1))\n;; 9\n;; >>> (solution\
    \ (list 3 3 3 3 3))\n;; 0\n;; >>> (solution (list 30 13 24 321))\n;; 12", "  (cond\n\
    \    ((null? lst) 0)\n    ((even? (car lst)) (solution (cdr lst)))\n    (else\
    \ (solution (cdr lst)))))\n\n;;; (solution (list 5 8 7 1))\n;;; 12\n;;; (solution\
    \ (list 3 3 3 3 3))\n;;; 9\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution\
    \ (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;;\
    \ (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n\
    ;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24\
    \ 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list\
    \ 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution\
    \ (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;;\
    \ (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n\
    ;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24\
    \ 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list\
    \ 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution\
    \ (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;;\
    \ (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24 321))\n\
    ;;; 0\n;;; (solution (list 30 13 24 321))\n;;; 0\n;;; (solution (list 30 13 24\
    \ 321))\n;;; 0\n;;; (s", "  (cond\n    ((null? lst) 0)\n    ((even? (car lst))\
    \ (car lst))\n    (else (solution (cdr lst)))))\n\n;; Given a non-empty list of\
    \ integers, return the sum of all of the even elements that are in odd positions.\n\
    ;; Examples\n;; >>> (solution (list 5 8 7 1))\n;; 12\n;; >>> (solution (list 3\
    \ 3 3 3 3))\n;; 9\n;; >>> (solution (list 30 13 24 321))\n;; 30", "  (let ((result\
    \ 0))\n    (for-each (lambda (x)\n                (if (odd? x)\n             \
    \       (result (+ x (first (even? lst))))))\n      lst))\n  result)\n", "  (cond\n\
    \    ((null? lst) 0)\n    ((even? (car lst)) (car lst))\n    (else (solution (cdr\
    \ lst)))\n  )\n)\n\n;; Given a non-empty list of integers, return the sum of all\
    \ of the even elements that are in odd positions.\n;; Examples\n;; >>> (solution\
    \ (list 5 8 7 1))\n;; 12\n;; >>> (solution (list 3 3 3 3 3))\n;; 9\n;; >>> (solution\
    \ (list 30 13 24 321))\n;; 30", "  (let ((result 0))\n    (for-each\n      (lambda\
    \ (x)\n        (if (odd? x)\n            (result (+ x (first (cdr lst))))\n  \
    \          (result 0)))\n      lst))\n  result)\n", "  (cond\n    ((null? lst)\
    \ 0)\n    ((even? (car lst)) (car lst))\n    (else (solution (cdr lst)))))\n\n\
    ;; Given a non-empty list of integers, return the sum of all of the even elements\
    \ that are in odd positions.\n;; Examples\n;; >>> (solution (list 5 8 7 1))\n\
    ;; 9\n;; >>> (solution (list 3 3 3 3 3))\n;; 0\n;; >>> (solution (list 30 13 24\
    \ 321))\n;; 12", "  (cond\n    ((null? lst) 0)\n    ((even? (car lst)) (car lst))\n\
    \    (else (solution (cdr lst)))))\n\n;; Given a non-empty list of integers, return\
    \ the sum of all of the even elements that are in odd positions.\n;; Examples\n\
    ;; >>> (solution (list 5 8 7 1))\n;; 12\n;; >>> (solution (list 3 3 3 3 3))\n\
    ;; 9\n;; >>> (solution (list 30 13 24 321))\n;; 0", "  (let ((result 0))\n   \
    \ (for-each\n      (lambda (x)\n        (if (even? (car x))\n          (result\
    \ (+ (car x) (cdr x)))\n          (result (cdr x))))\n      lst))\n)\n", "  (cond\n\
    \    ((null? lst) 0)\n    ((even? (car lst)) (solution (cdr lst)))\n    (else\
    \ (car lst) (solution (cdr lst)))\n  )\n)\n\n;; Given a non-empty list of integers,\
    \ return the sum of all of the even elements that are in odd positions.\n;; Examples\n\
    ;; >>> (solution (list 5 8 7 1))\n;; 9\n;; >>> (solution (list 3 3 3 3 3))\n;;\
    \ 0\n;; >>> (solution (list 30 13 24 321))\n;; 12", "  (cond\n    ((null? lst)\
    \ 0)\n    ((even? (car lst)) (car lst))\n    (else (solution (cdr lst)))))\n",
  "  (cond\n    ((null? lst) 0)\n    ((even? (car lst)) (car lst))\n    (else (solution\
    \ (cdr lst)))))\n\n;; Given a non-empty list of integers, return the sum of all\
    \ of the even elements that are in odd positions.\n;; Examples\n;; >>> (solution\
    \ (list 5 8 7 1))\n;; 12\n;; >>> (solution (list 3 3 3 3 3))\n;; 9\n;; >>> (solution\
    \ (list 30 13 24 321))\n;; 0", "  (cond\n    ((null? lst) 0)\n    ((even? (car\
    \ lst)) (car lst))\n    (else (solution (cdr lst)))\n  )\n)\n\n;; Given a non-empty\
    \ list of integers, return the sum of all of the even elements that are in odd\
    \ positions.\n;; Examples\n;; >>> (solution (list 5 8 7 1))\n;; 9\n;; >>> (solution\
    \ (list 3 3 3 3 3))\n;; 0\n;; >>> (solution (list 30 13 24 321))\n;; 12", "  (cond\n\
    \    ((null? lst) 0)\n    ((even? (car lst)) (solution (cdr lst)))\n    (else\
    \ (car lst) (solution (cdr lst)))\n  )\n)\n\n;; Given a non-empty list of integers,\
    \ return the sum of all of the even elements that are in odd positions.\n;; Examples\n\
    ;; >>> (solution (list 5 8 7 1))\n;; 9\n;; >>> (solution (list 3 3 3 3 3))\n;;\
    \ 0\n;; >>> (solution (list 30 13 24 321))\n;; 12", "  (let ((result 0))\n   \
    \ (for-each\n      (lambda (x)\n        (if (odd? x)\n          (result (+ x (first\
    \ (even? x))))\n          (result x)))\n      lst))\n  result)\n", "  (let ((result\
    \ 0))\n    (for-each\n      (lambda (x)\n        (if (odd? x)\n          (result\
    \ (+ result x))\n        )\n      )\n      lst)\n    result)\n)\n", "  (cond\n\
    \    ((null? lst) 0)\n    ((even? (car lst)) (car lst))\n    (else (solution (cdr\
    \ lst)))))\n\n;; Given a non-empty list of integers, return the sum of all of\
    \ the even elements that are in odd positions.\n;; Examples\n;; >>> (solution\
    \ (list 5 8 7 1))\n;; 9\n;; >>> (solution (list 3 3 3 3 3))\n;; 0\n;; >>> (solution\
    \ (list 30 13 24 321))\n;; 12", "  (cond\n    ((null? lst) 0)\n    ((even? (car\
    \ lst)) (solution (cdr lst)))\n    (else (sum (map odd? (cdr lst))) (solution\
    \ (cdr lst))))\n)\n\n;; Given a non-empty list of integers, return the sum of\
    \ all of the even elements that are in odd positions.\n;; Examples\n;; >>> (solution\
    \ (list 5 8 7 1))\n;; 9\n;; >>> (solution (list 3 3 3 3 3))\n;; 0\n;; >>> (solution\
    \ (list 30 13 24 321))\n;; 12", "  (cond\n    ((null? lst) 0)\n    ((even? (car\
    \ lst)) (solution (cdr lst)))\n    (else (sum (map odd? (cdr lst))))))\n\n;; Given\
    \ a non-empty list of integers, return the sum of all of the even elements that\
    \ are in odd positions.\n;; Examples\n;; >>> (solution (list 5 8 7 1))\n;; 12\n\
    ;; >>> (solution (list 3 3 3 3 3))\n;; 9\n;; >>> (solution (list 30 13 24 321))\n\
    ;; 0", "  (let ((result 0))\n    (for-each\n      (lambda (x)\n        (if (even?\
    \ (car x))\n          (result (+ (car x) (car (cdr x))))\n          (result 0))\n\
    \      lst)\n      result))\n)\n", "  (let ((result 0))\n    (for-each\n     \
    \ (lambda (x)\n        (if (odd? x)\n          (result (+ x (first (even? x))))\n\
    \          (result x)))\n      lst)\n    result))\n", "  (let ((result 0))\n \
    \   (for-each\n      (lambda (x)\n        (if (even? (car x))\n            (result\
    \ (+ (car x) (cdr x)))\n            (result (cdr x))))\n      lst))\n)\n", " \
    \ (let ((result 0))\n    (for-each\n      (lambda (x)\n        (if (even? (car\
    \ x))\n          (result (+ (car x) (car (cdr x))))\n          (result 0)))\n\
    \      lst))\n  result)\n", "  (cond\n    ((null? lst) 0)\n    ((even? (car lst))\
    \ (car lst))\n    (else (solution (cdr lst))))\n)\n\n;; Given a non-empty list\
    \ of integers, return the sum of all of the even elements that are in odd positions.\n\
    ;; Examples\n;; >>> (solution (list 5 8 7 1))\n;; 12\n;; >>> (solution (list 3\
    \ 3 3 3 3))\n;; 9\n;; >>> (solution (list 30 13 24 321))\n;; 30", "  (let ((sum\
    \ (0)))\n    (for-each\n      (lambda (x)\n        (if (odd? x)\n          (sum\
    \ (+ x (first (even? lst))))\n          (sum (+ x (first (odd? lst)))))))\n  \
    \  sum))\n", "  (let ((result 0))\n    (for-each (lambda (x)\n               \
    \ (if (even? (car x))\n                  (result (+ (car x) (cdr x)))\n      \
    \          )\n              )\n             lst\n             (set! result (result\
    \ (car x))))\n    result))\n", "  (cond\n    ((null? lst) 0)\n    ((even? (car\
    \ lst)) (car lst))\n    (else (solution (cdr lst)))))\n\n;; Given a non-empty\
    \ list of integers, return the sum of all of the even elements that are in odd\
    \ positions.\n;; Examples\n;; >>> (solution (list 5 8 7 1))\n;; 9\n;; >>> (solution\
    \ (list 3 3 3 3 3))\n;; 0\n;; >>> (solution (list 30 13 24 321))\n;; 12", "  (let\
    \ ((result 0))\n    (for-each\n      (lambda (x)\n        (if (odd? x)\n     \
    \     (result (+ result (car x)))\n          (else\n            (result (+ result\
    \ (cdr x))))))\n      lst))\n)\n", "  (let ((evens (even lst)))\n    (if (empty?\
    \ evens)\n      0\n      (+ (first evens) (solution (rest evens))))))\n", "  (cond\n\
    \    ((null? lst) 0)\n    ((even? (car lst)) (car lst))\n    (else (solution (cdr\
    \ lst)))))\n\n;; Given a non-empty list of integers, return the sum of all of\
    \ the even elements that are in odd positions.\n;; Examples\n;; >>> (solution\
    \ (list 5 8 7 1))\n;; 9\n;; >>> (solution (list 3 3 3 3 3))\n;; 0\n;; >>> (solution\
    \ (list 30 13 24 321))\n;; 30", "  (cond\n    ((null? lst) 0)\n    ((even? (car\
    \ lst)) (car lst))\n    (else (solution (cdr lst)))))\n", "  (cond\n    ((null?\
    \ lst) 0)\n    ((even? (car lst)) (car lst))\n    (else (solution (cdr lst)))\n\
    \  )\n)\n\n;; Given a non-empty list of integers, return the sum of all of the\
    \ even elements that are in odd positions.\n;; Examples\n;; >>> (solution (list\
    \ 5 8 7 1))\n;; 9\n;; >>> (solution (list 3 3 3 3 3))\n;; 0\n;; >>> (solution\
    \ (list 30 13 24 321))\n;; 30", "  (let ((result 0))\n    (for-each\n      (lambda\
    \ (i)\n        (if (odd? i)\n          (result (+ i (car lst) (cdr lst))))\n \
    \     (cdr lst))\n      lst))\n)\n", "  (cond\n    ((null? lst) 0)\n    ((even?\
    \ (car lst)) (solution (cdr lst)))\n    (else (sum (odd? (car lst))))))\n", " \
    \ (cond\n    ((null? lst) 0)\n    ((even? (car lst)) (car lst))\n    (else (solution\
    \ (cdr lst)))))\n\n;; Given a non-empty list of integers, return the sum of all\
    \ of the even elements that are in odd positions.\n;; Examples\n;; >>> (solution\
    \ (list 5 8 7 1))\n;; 12\n;; >>> (solution (list 3 3 3 3 3))\n;; 9\n;; >>> (solution\
    \ (list 30 13 24 321))\n;; 0", "  (cond\n    ((null? lst) 0)\n    ((even? (car\
    \ lst)) (car lst))\n    (else (solution (cdr lst)))\n  )\n)\n\n;; Given a non-empty\
    \ list of integers, return the sum of all of the even elements that are in odd\
    \ positions.\n;; Examples\n;; >>> (solution (list 5 8 7 1))\n;; 9\n;; >>> (solution\
    \ (list 3 3 3 3 3))\n;; 0\n;; >>> (solution (list 30 13 24 321))\n;; 12", "  (let\
    \ ((result 0))\n    (for-each\n      (lambda (x)\n        (if (odd? x)\n     \
    \     (result (+ x (first (even? lst))))\n          (result x)))\n      lst)\n\
    \    result))\n", "  (cond\n    ((null? lst) 0)\n    ((even? (car lst)) (car lst))\n\
    \    (else (solution (cdr lst)))))\n\n;; Given a list of words, return a list\
    \ of all of the words that appear in the same position in the list.\n;; Examples\n\
    ;; >>> (solution (list \"cat\" \"dog\" \"cat\" \"dog\"))\n;; [\"dog\" \"cat\"\
    ]\n;; >>> (solution (list \"cat\" \"dog\" \"cat\" \"dog\" \"cat\"))\n;; [\"cat\"\
    ]\n;; >>> (solution (list \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\"))\n\
    ;; [\"dog\"]\n;; >>> (solution (list \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"\
    dog\" \"cat\"))\n;; [\"cat\"]\n;; >>> (solution (list \"cat\" \"dog\" \"cat\"\
    \ \"dog\" \"cat\" \"dog\" \"cat\" \"dog\"))\n;; [\"cat\"]\n;; >>> (solution (list\
    \ \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\"))\n\
    ;; [\"dog\"]\n;; >>> (solution (list \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"\
    dog\" \"cat\" \"dog\" \"cat\" \"dog\"))\n;; [\"cat\"]\n;; >>> (solution (list\
    \ \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\"\
    \ \"cat\"))\n;; [\"dog\"]\n;; >>> (solution (list \"cat\" \"dog\" \"cat\" \"dog\"\
    \ \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\"))\n;; [\"cat\"\
    ]\n;; >>> (solution (list \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\"\
    \ \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\"))\n;; [\"dog\"]\n;; >>> (solution\
    \ (list \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\" \"dog\" \"cat\"\
    \ \"dog\" \"cat\" \"dog\" \"cat\" \"dog\"))\n;;", "  (let ((result 0))\n    (for-each\n\
    \      (lambda (i)\n        (if (even? i)\n          (result (+ (car lst) (car\
    \ i)))\n          (result (result (+ (car lst) (car i))))))\n      lst)\n    result))\n",
  "  (cond\n    ((null? lst) 0)\n    ((even? (car lst)) (car lst))\n    (else (solution\
    \ (cdr lst)))))\n\n;; Given a non-empty list of integers, return the sum of all\
    \ of the even elements that are in odd positions.\n;; Examples\n;; >>> (solution\
    \ (list 5 8 7 1))\n;; 9\n;; >>> (solution (list 3 3 3 3 3))\n;; 0\n;; >>> (solution\
    \ (list 30 13 24 321))\n;; 12", "  (let ((result 0))\n    (for-each\n      (lambda\
    \ (x)\n        (if (even? (car x))\n          (result (+ (car x) (car (cdr x))))\n\
    \          (result 0)))\n      lst))\n  result)\n", "  (cond\n    ((null? lst)\
    \ 0)\n    ((even? (car lst)) (car lst))\n    (else (solution (cdr lst)))))\n\n\
    ;; Given a non-empty list of integers, return the sum of all of the even elements\
    \ that are in odd positions.\n;; Examples\n;; >>> (solution (list 5 8 7 1))\n\
    ;; 9\n;; >>> (solution (list 3 3 3 3 3))\n;; 0\n;; >>> (solution (list 30 13 24\
    \ 321))\n;; 30", "  (let ((result 0))\n    (for-each\n      (lambda (x)\n    \
    \    (if (odd? x)\n          (result (+ x (first (cdr x))))\n          (result\
    \ 0)))\n      lst))\n  result)\n", "  (let ((result 0))\n    (for-each\n     \
    \ (lambda (x)\n        (if (even? (car x))\n          (result (+ (car x) (cdr\
    \ x)))))\n      lst))\n)\n", "  (let ((result 0))\n    (for-each (lambda (x)\n\
    \                (if (even? (car x))\n                    (result (+ (car x) (cdr\
    \ x)))\n                    (result (cdr x))))\n      lst))\n)\n", "  (let ((sum\
    \ 0))\n    (for-each\n      (lambda (x)\n        (if (even? (car x))\n       \
    \     (sum (+ (car x) (car (cdr x))))\n            (sum (car x))))\n      lst))\n\
    \  sum)\n", "  (let ((sum (reduce (lambda (a b) (+ a b)) 0 lst)))\n    (if (even?\
    \ sum)\n      sum\n      0)))\n", "  (let ((result 0))\n    (for-each\n      (lambda\
    \ (x)\n        (if (odd? x)\n          (result (+ x (first (even? lst))))\n  \
    \        (result x))\n      lst)\n      lst)\n    result))\n", "  (cond\n    ((null?\
    \ lst) 0)\n    ((even? (car lst)) (car lst))\n    (else (solution (cdr lst)))))\n\
    \n;; Given a list of strings, return a list of all of the strings that are in\
    \ alphabetical order.\n;; Examples\n;; >>> (solution (list \"a\" \"b\" \"c\" \"\
    d\" \"e\"))\n;; [\"a\", \"b\", \"c\", \"d\", \"e\"]\n;; >>> (solution (list \"\
    a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"\
    n\" \"o\" \"p\" \"q\" \"r\" \"s\" \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"))\n\
    ;; [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\"]\n;; >>> (solution (list \"a\" \"b\" \"c\" \"d\"\
    \ \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\"\
    \ \"r\" \"s\" \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\" \"1\" \"2\" \"3\" \"4\"\
    \ \"5\" \"6\" \"7\" \"8\" \"9\" \"10\" \"11\" \"12\" \"13\" \"14\" \"15\" \"16\"\
    \ \"17\" \"18\" \"19\" \"20\" \"21\" \"22\" \"23\" \"24\" \"25\" \"26\" \"27\"\
    \ \"28\" \"29\" \"30\"))\n;; [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"\
    , \"s\", \"t", "  (let ((result 0))\n    (for-each (lambda (x)\n             \
    \   (if (even? (car x))\n                    (result (+ (car x) (cdr x)))\n  \
    \                  (result (cdr x))))\n      lst))\n)\n", "  (let ((result 0))\n\
    \    (for-each\n      (lambda (i)\n        (if (odd? i)\n            (result (+\
    \ i (car lst) (cdr lst))))\n      )\n      lst))\n)\n", "  (let ((sum 0))\n  \
    \  (for-each\n      (lambda (x)\n        (if (even? (car x))\n          (sum (+\
    \ (car x) (car (cdr x))))\n          (sum (car x))))\n      lst))\n  sum)\n",
  "  (cond\n    ((null? lst) 0)\n    ((even? (car lst)) (car lst))\n    (else (solution\
    \ (cdr lst)))\n  )\n)\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the even elements that are in odd positions.\n;; Examples\n;; >>>\
    \ (solution (list 5 8 7 1))\n;; 12\n;; >>> (solution (list 3 3 3 3 3))\n;; 9\n\
    ;; >>> (solution (list 30 13 24 321))\n;; 0", "  (cond\n    ((null? lst) 0)\n\
    \    ((even? (car lst)) (car lst))\n    (else (solution (cdr lst)))\n  )\n)\n\n\
    ;; Given a non-empty list of integers, return the sum of all of the even elements\
    \ that are in odd positions.\n;; Examples\n;; >>> (solution (list 5 8 7 1))\n\
    ;; 12\n;; >>> (solution (list 3 3 3 3 3))\n;; 9\n;; >>> (solution (list 30 13\
    \ 24 321))\n;; 0", "  (cond\n    ((null? lst) 0)\n    ((even? (car lst)) (car\
    \ lst))\n    (else (solution (cdr lst)))))\n\n;; Given a non-empty list of integers,\
    \ return the sum of all of the even elements that are in odd positions.\n;; Examples\n\
    ;; >>> (solution (list 5 8 7 1))\n;; 12\n;; >>> (solution (list 3 3 3 3 3))\n\
    ;; 9\n;; >>> (solution (list 30 13 24 321))\n;; 30", "  (let ((result 0))\n  \
    \  (for-each\n      (lambda (x)\n        (if (odd? x)\n          (result (+ result\
    \ x))\n          (result (+ result (/ x 2))))\n      lst)\n      result))\n)\n",
  "  (cond\n    ((null? lst) 0)\n    ((even? (car lst)) (car lst))\n    (else (solution\
    \ (cdr lst)))\n  )\n)\n\n;; Given a list of non-negative integers, return the\
    \ sum of all of the even elements in the list.\n;; Examples\n;; >>> (solution\
    \ (list 1 2 3 4 5))\n;; 6\n;; >>> (solution (list 2 3 4 5))\n;; 0\n;; >>> (solution\
    \ (list 1 2 3 4))\n;; 4\n;; >>> (solution (list 1 2 3))\n;; 3\n;; >>> (solution\
    \ (list 1))\n;; 1\n;; >>> (solution (list))\n;; 0", "  (let ((result 0))\n   \
    \ (for-each (lambda (x)\n                (if (odd? x)\n                    (result\
    \ (+ x (first (even? lst))))))\n      lst))\n  result)\n", "  (let ((result 0))\n\
    \    (for-each (lambda (x)\n                (if (even? (car x))\n            \
    \        (+ result (car x)))\n                (cdr x))\n               lst))\n\
    \  result)\n", "  (let ((evens (even lst)))\n    (reduce (lambda (a b) (+ a b))\
    \ evens)))\n", "  (let ((sum (make-list 0)))\n    (for-each\n      (lambda (x)\n\
    \        (if (even? (car x))\n            (set-car! sum (car x))\n           \
    \ (set-car! sum (cdr x))\n          (set-car! sum x)))\n      lst))\n  (car sum))\n",
  "  (let ((result 0))\n    (for-each (lambda (x)\n                (if (odd? x)\n\
    \                    (result (+ x (first (even? x))))\n                    (result\
    \ x)))\n      lst))\n  result)\n", "  (cond\n    ((null? lst) 0)\n    ((even?\
    \ (car lst)) (car lst))\n    (else (solution (cdr lst)))))\n\n;; Given a non-empty\
    \ list of integers, return the sum of all of the even elements that are in odd\
    \ positions.\n;; Examples\n;; >>> (solution (list 5 8 7 1))\n;; 12\n;; >>> (solution\
    \ (list 3 3 3 3 3))\n;; 9\n;; >>> (solution (list 30 13 24 321))\n;; 30"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
