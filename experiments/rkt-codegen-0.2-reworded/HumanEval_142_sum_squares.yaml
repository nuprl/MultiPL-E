name: HumanEval_142_sum_squares
language: rkt
prompt: "#lang racket\n\n;; \"\n;; This function will take a list of integers. For\
  \ all entries in the list, the function shall square the integer entry if its index\
  \ is a \n;; multiple of 3 and will cube the integer entry if its index is a multiple\
  \ of 4 and not a multiple of 3. The function will not \n;; change the entries in\
  \ the list whose indexes are not a multiple of 3 or 4. The function shall then return\
  \ the sum of all entries. \n;; Examples:\n;; >>> lst\n;; (list 1 2 3)\n;; >>> lst\n\
  ;; (list )\n;; >>> lst\n;; (list -1 -5 2 -1 -5)\n(define (sum_squares lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
  \    (check-equal? (candidate (list 1 2 3)) 6)\n    (check-equal? (candidate (list\
  \ 1 4 9)) 14)\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate\
  \ (list 1 1 1 1 1 1 1 1 1)) 9)\n    (check-equal? (candidate (list -1 -1 -1 -1 -1\
  \ -1 -1 -1 -1)) -3)\n    (check-equal? (candidate (list 0)) 0)\n    (check-equal?\
  \ (candidate (list -1 -5 2 -1 -5)) -126)\n    (check-equal? (candidate (list -56\
  \ -99 1 0 -2)) 3030)\n    (check-equal? (candidate (list -1 0 0 0 0 0 0 0 -1)) 0)\n\
  \    (check-equal? (candidate (list -16 -9 -2 36 36 26 -20 25 -40 20 -4 12 -26 35\
  \ 37)) -14196)\n    (check-equal? (candidate (list -1 -3 17 -1 -15 13 -1 14 -14\
  \ -12 -5 14 -14 6 13 11 16 16 4 10)) -1448)\n))\n\n(test-humaneval)"
completions: ["  (let ((sum (0)))\n    (for-each (lambda (x)\n                (if\
    \ (modulo (car x) 3)\n                  (+ (car x) (car x))\n                \
    \  (+ (car x) (car x) (car x)))))\n      lst\n    (+ sum (car lst))))\n\n;; >>>\
    \ sum_squares (list 1 2 3)\n;; 6\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;;\
    \ -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list\
    \ -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>>\
    \ sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1\
    \ -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squ", "  (let ((result 0))\n    (for-each\
    \ (lambda (x)\n                (if (modulo x 3)\n                  (+ result (*\
    \ x x)))\n                (if (modulo x 4)\n                  (+ result (* x (*\
    \ x x))))\n                (set! result 0)))\n      lst))\n", "  (let ((result\
    \ 0))\n    (for-each (lambda (x)\n                (if (modulo x 3)\n         \
    \         (+ result (* x x)))\n                (if (modulo x 4)\n            \
    \      (+ result (* x (* x x))))\n                (set! result (* x x))))\n  \
    \    lst))\n", "  (let ((result 0))\n    (for-each (lambda (x)\n             \
    \   (if (modulo x 3)\n                  (+ result (* x x)))\n                (if\
    \ (modulo x 4)\n                  (+ result (* x x x)))\n                (set!\
    \ result 0)))\n      lst))\n;; >>> sum_squares (list 1 2 3)\n;; (list )\n;; >>>\
    \ sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\
    \ (list 1 2 3 4 5 6)\n;; (list )\n;; >>> sum_squares (list -1 -5 2 -1 -5 6)\n\
    ;; (list -1 -5 2 -1 -5 6)\n;; >>> sum_squares (list 1 2 3 4 5 6 7)\n;; (list )\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5 6 7)\n;; (list -1 -5 2 -1 -5 6 7)\n;; >>>\
    \ sum_squares (list 1 2 3 4 5 6 7 8)\n;; (list )\n;; >>> sum_squares (list -1\
    \ -5 2 -1 -5 6 7 8)\n;; (list -1 -5 2 -1 -5 6 7 8)\n;; >>> sum_squares (list 1\
    \ 2 3 4 5 6 7 8 9)\n;; (list )\n;; >>> sum_squares (list -1 -5 2 -1 -5 6 7 8 9)\n\
    ;; (list -1 -5 2 -1 -5 6 7 8 9)\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10)\n\
    ;; (list )\n;; >>> sum_squares (list -1 -5 2 -1 -5 6 7 8 9 10)\n;; (list -1 -5\
    \ 2 -1 -5 6 7 8 9 10)\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11)\n;; (list\
    \ )\n;; >>> sum_squares (list -1 -5 2 -1 -5 6 7 8 9 10 11)\n;; (list -1 -5 2 -1\
    \ -5 6 7 8 9 10 11)\n;; >>> sum_squares (list 1", "  (let ((i (0)))\n    (while\
    \ (< i (length lst))\n      (let ((entry (aref lst i)))\n        (if (modulo (i)\
    \ 3)\n            (setf entry (* entry entry))\n          (if (modulo (i) 4)\n\
    \              (setf entry (* entry entry))\n            (setf entry (* entry\
    \ entry)))))\n      (setf i (+ i 1)))\n    (+ (first lst) (second lst) (third\
    \ lst) (fourth lst) (fifth lst) (sixth lst) (seventh lst) (eighth lst) (ninth\
    \ lst)\n      (tenth lst) (eleventh lst) (twelfth lst) (thirteenth lst) (fourteenth\
    \ lst) (fifteenth lst) (sixteenth lst) (seventeenth lst)\n      (eighteenth lst)\
    \ (nineteenth lst) (twentieth lst) (twenty-first lst) (twenty-second lst) (twenty-third\
    \ lst) (twenty-fourth lst)\n      (twenty-fifth lst) (twenty-sixth lst) (twenty-seventh\
    \ lst) (twenty-eighth lst) (twenty-ninth lst) (thirtieth lst) (thirty-first lst)))\n\
    \  lst)\n)\n", "  (let ((result 0))\n    (for-each (lambda (x)\n             \
    \   (if (modulo x 3)\n                  (+ (* x x) result)\n                (if\
    \ (modulo x 4)\n                  (+ (* x x) (* x x))\n                (+ (* x\
    \ x) (* x x)))))\n      lst))\n", "  (let ((sum (0)))\n    (for-each (lambda (x)\n\
    \      (if (modulo (car x) 3)\n        (+ (car x) (car x))\n        (+ (car x)\
    \ (car x) (car x)))\n      (+ sum (car x))))\n    (+ sum (car lst))))\n", "  (let\
    \ ((result 0))\n    (for-each (lambda (x)\n                (if (modulo x 3)\n\
    \                  (+ (* x x) result)\n                (if (modulo x 4)\n    \
    \              (+ (* x x) (* x x))\n                (+ (* x x) result))))\n  \
    \    lst))\n\n;; >>> sum_squares (list 1 2 3)\n;; 6\n;; >>> sum_squares (list\
    \ -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>>\
    \ sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1\
    \ -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squ", "  (let ((sum\
    \ (0)))\n    (for-each (lambda (x)\n                (if (modulo x 3)\n       \
    \           (+ (* x x) sum)\n                (if (modulo x 4)\n              \
    \    (+ (* x x) (* x x))\n                (+ (* x x) (* x x)))))\n      lst))\n\
    ;; >>> sum_squares (list 1 2 3)\n;; -1\n;; >>> sum_squares (list )\n;; 0\n;; >>>\
    \ sum_squares (list -1 -5 2 -1 -5)\n;; -6\n;; >>> sum_squares (list -1 -5 2 -1\
    \ -5)\n;; -6\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -6\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -6\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -6\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -6\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -6\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -6\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -6\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -6\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -6\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -6\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -6\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -6\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -6\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -6\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -6\n;; >>> sum_squares (list -1 -", "  (define (square x) (* x\
    \ x))\n  (define (cube x) (* x (* x x)))\n  (define (sum_squares_helper lst)\n\
    \    (if (null? lst)\n      0\n    (+ (square (car lst))\n      (sum_squares_helper\
    \ (cdr lst)))))\n  (sum_squares_helper lst))\n;; >>> sum_squares lst\n;; (list\
    \ -1 -5 2 -1 -5)\n;; >>> sum_squares_helper lst\n;; (list -1 -5 2 -1 -5)\n;; >>>\
    \ sum_squares_helper lst\n;; 0\n;; >>> sum_squares_helper lst\n;; 0\n;; >>> sum_squares_helper\
    \ lst\n;; 0\n;; >>> sum_squares_helper lst\n;; 0\n;; >>> sum_squares_helper lst\n\
    ;; 0\n;; >>> sum_squares_helper lst\n;; 0\n;; >>> sum_squares_helper lst\n;; 0\n\
    ;; >>> sum_squares_helper lst\n;; 0\n;; >>> sum_squares_helper lst\n;; 0\n;; >>>\
    \ sum_squares_helper lst\n;; 0\n;; >>> sum_squares_helper lst\n;; 0\n;; >>> sum_squares_helper\
    \ lst\n;; 0\n;; >>> sum_squares_helper lst\n;; 0\n;; >>> sum_squares_helper lst\n\
    ;; 0\n;; >>> sum_squares_helper lst\n;; 0\n;; >>> sum_squares_helper lst\n;; 0\n\
    ;; >>> sum_squares_helper lst\n;; 0\n;; >>> sum_squares_helper lst\n;; 0\n;; >>>\
    \ sum_squares_helper lst\n;; 0\n;; >>> sum_squares_helper lst\n;; 0\n;; >>> sum_squares_helper\
    \ lst\n;; 0\n;; >>> sum_squares_helper lst\n;; 0\n;; >>> sum_squares_helper lst\n\
    ;; 0\n;; >>> sum_squares_helper lst\n;; 0\n;; >>> sum_squares_hel", "  (let ((result\
    \ 0))\n    (for-each (lambda (x)\n                (if (modulo x 3)\n         \
    \         (+ (* x x) result)\n                (if (modulo x 4)\n             \
    \     (+ (* x x) (* x x))\n                (+ (* x x) (* x x)))))\n      lst))\n\
    ;; >>> sum_squares (list 1 2 3)\n;; 3\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n\
    ;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list\
    \ -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>>\
    \ sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1\
    \ -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum", "  (let ((sum (0)))\n    (for-each\
    \ (lambda (x)\n                (if (modulo x 3)\n                  (+ (* x x)\
    \ sum)\n                (if (modulo x 4)\n                  (+ (* x x) (* x x))\n\
    \                (+ (* x x) (* x x)))))\n      lst))\n\n;; >>> sum_squares (list\
    \ 1 2 3)\n;; (list )\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5\
    \ -1 -5 -1 -5)\n;; >>> sum_squares (list 1 2 3 4 5 6)\n;; (list )\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5 6)\n;; (list -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5)\n;; >>>\
    \ sum_squares (list 1 2 3 4 5 6 7)\n;; (list )\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5 6 7)\n;; (list -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8)\n;; (list\
    \ )\n;; >>> sum_squares (list -1 -5 2 -1 -5 6 7 8)\n;; (list -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -", "  (define\
    \ (square n)\n    (if (modulo n 3)\n      (+ n (* n n))\n      (* n (* n n))))\n\
    \  (define (cube n)\n    (if (modulo n 4)\n      (+ n (* n n))\n      (* n (*\
    \ n n))))\n  (define (sum_squares lst)\n    (define (square n)\n      (if (modulo\
    \ n 3)\n        (+ n (* n n))\n        (* n (* n n))))\n    (define (cube n)\n\
    \      (if (modulo n 4)\n        (+ n (* n n))\n        (* n (* n n))))\n    (+\
    \ (reduce (lambda (a b) (square a) (square b)) lst)\n      (reduce (lambda (a\
    \ b) (cube a) (cube b)) lst)))\n  (reduce (lambda (a b) (square a) (square b))\
    \ lst))\n  (+ (reduce (lambda (a b) (square a) (square b)) lst)\n    (reduce (lambda\
    \ (a b) (cube a) (cube b)) lst)))\n  (+ (reduce (lambda (a b) (square a) (square\
    \ b)) lst)\n    (reduce (lambda (a b) (cube a) (cube b)) lst)))\n  (+ (reduce\
    \ (lambda (a b) (square a) (square b)) lst)\n    (reduce (lambda (a b) (cube a)\
    \ (cube b)) lst)))\n  (+ (reduce (lambda (a b) (square a) (square b)) lst)\n \
    \   (reduce (lambda (a b) (cube a) (cube b)) lst)))\n  (+ (reduce (lambda (a b)\
    \ (square a) (square b)) lst)\n    (reduce (lambda (a b) (cube a) (cube b)) lst)))\n\
    \  (+ (reduce (lambda (a b) (square a) (square b)) lst)\n    (reduce (lambda (a\
    \ b) (cube a) (cube b)) lst)))\n  (+ (reduce (lambda (a b) (square a)", "  (let\
    \ ((sum (0)))\n    (for-each (lambda (x)\n      (if (modulo (car x) 3)\n     \
    \   (+ (car x) (car x))\n        (+ (car x) (car x) (car x)))))\n      lst))\n",
  "  (let ((result 0))\n    (for-each (lambda (x)\n                (if (modulo x 3)\n\
    \                  (+ result (* x x)))\n                (if (modulo x 4)\n   \
    \               (+ result (* x (* x x))))\n                (set! result (* x x)))\n\
    \              lst))\n  result)\n", "  (define (square n)\n    (if (modulo n 3)\n\
    \      (+ n (* n n))\n      (* n n)))\n  (define (cube n)\n    (if (modulo n 4)\n\
    \      (+ n (* n (* n n))))\n    (* n n))\n  (+ (map square lst) (map cube lst))\n\
    )", "  (let ((sum (0)))\n    (for-each (lambda (x)\n                (if (modulo\
    \ (car x) 3)\n                  (+ (car x) (car x))\n                  (+ (car\
    \ x) (car x) (car x))))\n              lst\n              (setf sum (+ sum (car\
    \ x))))\n    sum))\n\n;; >>> sum_squares (list 1 2 3)\n;; 6\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n", "  (let ((result 0))\n    (for-each\
    \ (lambda (x)\n                (if (modulo x 3)\n                  (+ (square\
    \ x) result)\n                  (if (modulo x 4)\n                    (+ (cube\
    \ x) result)\n                    (+ (square x) result))))\n      lst))\n  result)\n\
    ;; >>> sum_squares (list 1 2 3)\n;; 6\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n\
    ;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6)\n;; 6\n;; >>> sum_squares (list 1\
    \ 2 3 4 5 6 7)\n;; 6\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8)\n;; 6\n;; >>>\
    \ sum_squares (list 1 2 3 4 5 6 7 8 9)\n;; 6\n;; >>> sum_squares (list 1 2 3 4\
    \ 5 6 7 8 9 10)\n;; 6\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11)\n;; 6\n\
    ;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12)\n;; 6\n;; >>> sum_squares\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13)\n;; 6\n;; >>> sum_squares (list 1 2 3 4\
    \ 5 6 7 8 9 10 11 12 13 14)\n;; 6\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9\
    \ 10 11 12 13 14 15)\n;; 6\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12\
    \ 13 14 15 16)\n;; 6\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14\
    \ 15 16 17)\n;; 6\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\
    \ 16 17 18)\n;; 6\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\
    \ 16 17 18 19)\n;; 6\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14\
    \ 15 16 17 18 19 20)\n;; 6\n;; >>> sum_squ", "  (define (square n)\n    (if (modulo\
    \ n 3)\n      (+ n (* n n))\n      (* n n)))\n  (define (cube n)\n    (if (modulo\
    \ n 4)\n      (+ n (* n (* n n)))\n      (* n n)))\n  (+ (map square lst) (map\
    \ cube lst))\n)\n\n;; >>> sum_squares (list 1 2 3)\n;; (list )\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; (list -1 -25)\n;; >>> sum_squares (list -1 -5 2 -1\
    \ -5)\n;; (list -1 -25)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1\
    \ -25)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -25)\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; (list -1 -25)\n;; >>> sum_squares (list -1 -5 2 -1\
    \ -5)\n;; (list -1 -25)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1\
    \ -25)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -25)\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; (list -1 -25)\n;; >>> sum_squares (list -1 -5 2 -1\
    \ -5)\n;; (list -1 -25)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1\
    \ -25)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -25)\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; (list -1 -25)\n;; >>> sum_squares (list -1 -5 2 -1\
    \ -5)\n;; (list -1 -25)\n;; >>> sum_squares (list -1 -5 2 -1", "  (let ((sum (0)))\n\
    \    (for-each (lambda (x)\n                (if (modulo (car x) 3)\n         \
    \         (+ (square (car x)) sum)\n                  (if (modulo (car x) 4)\n\
    \                    (+ (cube (car x)) sum)\n                    (sum))))\n  \
    \    lst))\n  )\n;; >>> sum_squares (list 1 2 3)\n;; (list )\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; (list -1 -25)\n;; >>> sum_squares (list -1 -5 2 -1\
    \ -5)\n;; (list -1 -25)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1\
    \ -25)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -25)\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; (list -1 -25)\n;; >>> sum_squares (list -1 -5 2 -1\
    \ -5)\n;; (list -1 -25)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1\
    \ -25)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -25)\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; (list -1 -25)\n;; >>> sum_squares (list -1 -5 2 -1\
    \ -5)\n;; (list -1 -25)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1\
    \ -25)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -25)\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; (list -1 -25)\n;; >>> sum_squares (list -1 -5 2 -1\
    \ -5)\n;; (list -1 -25)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n", "  (let ((sum\
    \ (0)))\n    (for-each (lambda (x)\n                (if (modulo x 3)\n       \
    \           (+ (* x x) sum)\n                (if (modulo x 4)\n              \
    \    (+ (* x x) (* x x))\n                (+ (* x x) (* x x)))))\n      lst))\n\
    \n;; >>> sum_squares (list 1 2 3)\n;; (list )\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; (list -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares (list 1 2 3 4 5 6\
    \ 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\
    \ 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59\
    \ 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85\
    \ 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100)\n;; (list -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5", "  (define\
    \ (square x) (* x x))\n  (define (cube x) (* x (* x x)))\n  (define (square_and_cube\
    \ x)\n    (if (modulo x 3)\n      (+ (square x) (* x x))\n      (+ (cube x) (*\
    \ x (* x x))))))\n  (sum_squares lst))\n;; >>> sum_squares lst\n;; (list -1 -5\
    \ 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\
    \ lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n\
    ;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list\
    \ -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\
    \ lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n\
    ;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list\
    \ -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\
    \ lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n\
    ;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list\
    \ -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\
    \ lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -", "  (define\
    \ (square x) (* x x))\n  (define (cube x) (* x (* x x)))\n  (define (sum_squares_helper\
    \ lst)\n    (if (null? lst)\n      0\n    (+ (square (car lst))\n      (sum_squares_helper\
    \ (cdr lst))))))\n;; >>> sum_squares lst\n;; (list -1 -5 -1 -5)\n;; >>> sum_squares_helper\
    \ lst\n;; (list -1 -5 -1 -5)\n;; >>> sum_squares_helper (list 1 2 3)\n;; 0\n;;\
    \ >>> sum_squares_helper (list 1 2 3 4 5 6)\n;; 0\n;; >>> sum_squares_helper (list\
    \ 1 2 3 4 5 6 7 8 9)\n;; 0\n;; >>> sum_squares_helper (list 1 2 3 4 5 6 7 8 9\
    \ 10 11 12)\n;; 0\n;; >>> sum_squares_helper (list 1 2 3 4 5 6 7 8 9 10 11 12\
    \ 13 14 15 16)\n;; 0\n;; >>> sum_squares_helper (list 1 2 3 4 5 6 7 8 9 10 11\
    \ 12 13 14 15 16 17 18 19 20)\n;; 0\n;; >>> sum_squares_helper (list 1 2 3 4 5\
    \ 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32\
    \ 33 34 35 36 37 38 39 40)\n;; 0\n;; >>> sum_squares_helper (list 1 2 3 4 5 6\
    \ 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\
    \ 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50)\n;; 0\n;; >>> sum_squares_helper\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27\
    \ 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53\
    \ 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79\
    \ 80)\n;; 0\n;; >>> sum", "  (let ((result 0))\n    (for-each (lambda (x)\n  \
    \              (if (modulo x 3)\n                  (+ result (* x x)))\n     \
    \           (if (modulo x 4)\n                  (+ result (* x x) (* x x)))))\n\
    \    (+ result lst)))\n\n;; >>> sum_squares (list 1 2 3)\n;; 6\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -",
  "  (let ((result 0))\n    (for-each (lambda (x)\n                (if (modulo x 3)\n\
    \                  (+ result (* x x)))\n                (if (modulo x 4)\n   \
    \               (+ result (* x (* x x))))\n                (set! result (* x x))\n\
    \                ))\n      lst))\n\n;; >>> sum_squares (list 1 2 3)\n;; 3\n;;\
    \ >>> sum_squares (list )\n;; 0\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -3\n\
    ;; >>> sum_squares (list 1 2 3 4 5 6)\n;; -3\n;; >>> sum_squares (list 1 2 3 4\
    \ 5 6 7)\n;; -3\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8)\n;; -3\n;; >>> sum_squares\
    \ (list 1 2 3 4 5 6 7 8 9)\n;; -3\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9\
    \ 10)\n;; -3\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11)\n;; -3\n;; >>>\
    \ sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12)\n;; -3\n;; >>> sum_squares (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13)\n;; -3\n;; >>> sum_squares (list 1 2 3 4 5 6\
    \ 7 8 9 10 11 12 13 14)\n;; -3\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10\
    \ 11 12 13 14 15)\n;; -3\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12\
    \ 13 14 15 16)\n;; -3\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13\
    \ 14 15 16 17)\n;; -3\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13\
    \ 14 15 16 17 18)\n;; -3\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12\
    \ 13 14 15 16 17 18 19)\n;; -3\n;; >>> sum_squares (list 1 2 3", "  (let ((result\
    \ 0))\n    (for-each (lambda (x)\n                (if (modulo x 3)\n         \
    \         (+ result (* x x)))\n                (if (modulo x 4)\n            \
    \      (+ result (* x x x)))\n                (set! result 0)))\n      lst))\n\
    \n;; >>> sum_squares (list 1 2 3)\n;; 6\n;; >>> sum_squares (list )\n;; 0\n;;\
    \ >>> sum_squares (list -1 -5 2 -1 -5)\n;; -3\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n\
    ;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n\
    ;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n\
    ;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n\
    ;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n\
    ;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n\
    ;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n\
    ;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n\
    ;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;", "  (let ((sum (0)))\n\
    \    (for-each (lambda (x)\n      (if (modulo x 3)\n        (+ (* x x) sum)\n\
    \      (if (modulo x 4)\n        (+ (* x x) (* x x))\n      (sum (+ (* x x) (*\
    \ x x)))))))\n    (+ sum lst)))\n\n;; >>> sum_squares (list 1 2 3)\n;; 6\n;; >>>\
    \ sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1\
    \ -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;;", "  (let ((result\
    \ 0))\n    (for-each (lambda (x)\n                (if (modulo (car x) 3)\n   \
    \               (set! result (+ result (car x) (car x) (car x)))\n           \
    \     (if (modulo (car x) 4)\n                  (set! result (+ result (car x)\
    \ (car x) (car x) (car x)))\n                (set! result (+ result (car x))))))\n\
    \      lst))\n  result)\n\n;; >>> sum_squares (list 1 2 3)\n;; 6\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -6\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -6\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -6\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -6\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -6\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -6\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -6\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -6\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -6\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -6\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -6\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -6\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -6\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -6\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -6\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -6\n;; >>> sum_squares (list -1 -5 2 -1 -", "  (let\
    \ ((sum (0)))\n    (for-each (lambda (x)\n                (if (modulo x 3)\n \
    \                 (+ (* x x) sum)\n                (if (modulo x 4)\n        \
    \          (+ (* x x) (* x x))\n                (+ (* x x) (* x x)))))\n     \
    \ lst))\n\n;; >>> sum_squares (list 1 2 3)\n;; (list )\n;; >>> sum_squares (list\
    \ -1 -5 2 -1 -5)\n;; (list -1 -5 -1 -5)\n;; >>> sum_squares (list 1 2 3 4 5 6)\n\
    ;; (list )\n;; >>> sum_squares (list 1 2 3 4 5 6 7)\n;; (list )\n;; >>> sum_squares\
    \ (list 1 2 3 4 5 6 7 8)\n;; (list )\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8\
    \ 9)\n;; (list )\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10)\n;; (list )\n\
    ;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11)\n;; (list )\n;; >>> sum_squares\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12)\n;; (list )\n;; >>> sum_squares (list 1 2\
    \ 3 4 5 6 7 8 9 10 11 12 13)\n;; (list )\n;; >>> sum_squares (list 1 2 3 4 5 6\
    \ 7 8 9 10 11 12 13 14)\n;; (list )\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8\
    \ 9 10 11 12 13 14 15)\n;; (list )\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9\
    \ 10 11 12 13 14 15 16)\n;; (list )\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8\
    \ 9 10 11 12 13 14 15 16 17)\n;; (list )\n;; >>> sum_squares (list 1 2 3 4 5 6\
    \ 7 8 9 10 11 12 13 14 15 16 17 18)\n;; (list )\n;; >>> sum_squares (list 1 2\
    \ 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)\n;;", "  (let ((sum (0)))\n   \
    \ (for-each (lambda (x)\n      (if (modulo x 3)\n        (+ (* x x) sum)\n   \
    \   (if (modulo x 4)\n        (+ (* x x) (* x x))\n      (+ (* x x) (* x x)))))\n\
    \      lst))\n;; >>> sum_squares (list 1 2 3)\n;; (list )\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; (list -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares (list\
    \ 1 2 3 4 5 6)\n;; (list -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -", "  (define (square x) (* x x))\n  (define (cube x) (* x (*\
    \ x x)))\n  (define (sum_squares_helper lst)\n    (if (null? lst)\n      0\n \
    \   (+ (square (car lst))\n      (sum_squares_helper (cdr lst)))))\n  (sum_squares_helper\
    \ lst))\n", "  (let ((result 0))\n    (for-each (lambda (x)\n                (if\
    \ (modulo x 3)\n                  (+ result (* x x)))\n                (if (modulo\
    \ x 4)\n                  (+ result (* x (* x x))))\n                (set! result\
    \ 0))\n      lst))\n)\n", "  (let ((sum 0))\n    (for-each (lambda (x)\n     \
    \           (if (modulo x 3)\n                  (+ (* x x) sum)\n            \
    \    (if (modulo x 4)\n                  (+ (* x x) (* x x) sum)\n           \
    \     (+ (* x x) (* x x) (* x x) sum))))\n      lst))\n", "  (let ((result 0))\n\
    \    (for-each (lambda (x)\n                (if (modulo x 3)\n               \
    \   (+ result (* x x)))\n                (if (modulo x 4)\n                  (+\
    \ result (* x x x)))\n                (set! result 0)))\n      lst))\n\n;; >>>\
    \ sum_squares (list 1 2 3)\n;; 3\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;;\
    \ -1\n;; >>> sum_squares (list 1 2 3 4 5 6)\n;; -1\n;; >>> sum_squares (list 1\
    \ 2 3 4 5 6 7)\n;; 0\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8)\n;; 0\n;; >>>\
    \ sum_squares (list 1 2 3 4 5 6 7 8 9)\n;; 0\n;; >>> sum_squares (list 1 2 3 4\
    \ 5 6 7 8 9 10)\n;; 0\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11)\n;; 0\n\
    ;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12)\n;; 0\n;; >>> sum_squares\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13)\n;; 0\n;; >>> sum_squares (list 1 2 3 4\
    \ 5 6 7 8 9 10 11 12 13 14)\n;; 0\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9\
    \ 10 11 12 13 14 15)\n;; 0\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12\
    \ 13 14 15 16)\n;; 0\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14\
    \ 15 16 17)\n;; 0\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\
    \ 16 17 18)\n;; 0\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\
    \ 16 17 18 19)\n;; 0\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14\
    \ 15 16 17 18 19 20)\n;; 0\n;; >>> sum_squares (list 1 2", "  (let ((result 0))\n\
    \    (for-each (lambda (x)\n                (if (modulo x 3)\n               \
    \   (+ result (* x x)))\n                (if (modulo x 4)\n                  (+\
    \ result (* x (* x x))))\n                (set! result 0)))\n      lst))\n;; >>>\
    \ sum_squares (list 1 2 3)\n;; (list )\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10)\n;; (list\
    \ -1 -5 2 -1 -5)\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\
    \ 16 17 18 19 20)\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares (list 1 2 3 4 5\
    \ 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32\
    \ 33 34 35 36 37 38 39 40)\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\
    \ 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55\
    \ 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81\
    \ 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100)\n;; (list -1 -5 2\
    \ -1 -5)\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\
    \ 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44\
    \ 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70\
    \ 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96\
    \ 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115", " \
    \ (define (square x) (* x x))\n  (define (cube x) (* x (* x x)))\n  (define (sum_squares_helper\
    \ lst)\n    (if (null? lst)\n      0\n    (+ (square (car lst))\n      (sum_squares_helper\
    \ (cdr lst)))))\n  (sum_squares_helper lst))\n;; >>> sum_squares (list 1 2 3)\n\
    ;; 6\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -6\n;; >>> sum_squares (list\
    \ -1 -5 2 -1 -5)\n;; -6\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -6\n;; >>>\
    \ sum_squares (list -1 -5 2 -1 -5)\n;; -6\n;; >>> sum_squares (list -1 -5 2 -1\
    \ -5)\n;; -6\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -6\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -6\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -6\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -6\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -6\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -6\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -6\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -6\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -6\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -6\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -6\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -6\n;; >>> sum_squares (list -1", "  (let ((sum (0)))\n\
    \    (for-each (lambda (x)\n                (if (modulo (car x) 3)\n         \
    \         (+ (car x) (car x))\n                  (+ (car x) (car x) (car x)))))\n\
    \      lst))\n", "  (define (square x) (* x x))\n  (define (cube x) (* x (* x\
    \ x)))\n  (define (sum_squares_helper lst)\n    (if (null? lst)\n      0\n   \
    \ (+ (square (car lst))\n      (sum_squares_helper (cdr lst)))))\n  (sum_squares_helper\
    \ lst))\n;; >>> sum_squares lst\n;; -1\n;; >>> sum_squares lst\n;; 0\n;; >>> sum_squares\
    \ lst\n;; -1\n;; >>> sum_squares lst\n;; -5\n;; >>> sum_squares lst\n;; -1\n;;\
    \ >>> sum_squares lst\n;; -5\n;; >>> sum_squares lst\n;; -1\n;; >>> sum_squares\
    \ lst\n;; -5\n;; >>> sum_squares lst\n;; -1\n;; >>> sum_squares lst\n;; -5\n;;\
    \ >>> sum_squares lst\n;; -1\n;; >>> sum_squares lst\n;; -5\n;; >>> sum_squares\
    \ lst\n;; -1\n;; >>> sum_squares lst\n;; -5\n;; >>> sum_squares lst\n;; -1\n;;\
    \ >>> sum_squares lst\n;; -5\n;; >>> sum_squares lst\n;; -1\n;; >>> sum_squares\
    \ lst\n;; -5\n;; >>> sum_squares lst\n;; -1\n;; >>> sum_squares lst\n;; -5\n;;\
    \ >>> sum_squares lst\n;; -1\n;; >>> sum_squares lst\n;; -5\n;; >>> sum_squares\
    \ lst\n;; -1\n;; >>> sum_squares lst\n;; -5\n;; >>> sum_squares lst\n;; -1\n;;\
    \ >>> sum_squares lst\n;; -5\n;; >>> sum_squares lst\n;; -1\n;; >>> sum_squares\
    \ lst\n;; -5\n;; >>> sum_squares lst\n;; -1\n;; >>> sum_squares lst\n;; -5\n;;\
    \ >>> sum_squares lst\n;; -1\n;; >>> sum_squares lst\n;; -5\n;; >>>", "  (define\
    \ sum (0))\n  (define squares (0))\n  (define cubes (0))\n  (for ([index (first\
    \ lst)])\n    (if (modulo index 3)\n      (setq sum (+ (square index) squares))\n\
    \      (setq squares (+ (square index) cubes)))\n    (setq cubes (+ (cube index)\
    \ squares)))\n  (setq sum (+ sum squares cubes)))\n  (setq sum (+ sum squares\
    \ cubes)))\n  (setq sum (+ sum squares cubes)))\n  (setq sum (+ sum squares cubes)))\n\
    \  (setq sum (+ sum squares cubes)))\n  (setq sum (+ sum squares cubes)))\n  (setq\
    \ sum (+ sum squares cubes)))\n  (setq sum (+ sum squares cubes)))\n  (setq sum\
    \ (+ sum squares cubes)))\n  (setq sum (+ sum squares cubes)))\n  (setq sum (+\
    \ sum squares cubes)))\n  (setq sum (+ sum squares cubes)))\n  (setq sum (+ sum\
    \ squares cubes)))\n  (setq sum (+ sum squares cubes)))\n  (setq sum (+ sum squares\
    \ cubes)))\n  (setq sum (+ sum squares cubes)))\n  (setq sum (+ sum squares cubes)))\n\
    \  (setq sum (+ sum squares cubes)))\n  (setq sum (+ sum squares cubes)))\n  (setq\
    \ sum (+ sum squares cubes)))\n  (setq sum (+ sum squares cubes)))\n  (setq sum\
    \ (+ sum squares cubes)))\n  (setq sum (+ sum squares cubes)))\n  (setq sum (+\
    \ sum squares cubes)))\n  (setq sum (+ sum squares cubes)))\n  (setq sum (+ sum\
    \ squares cubes)))\n  (setq sum (+ sum squares cubes)))\n  (setq sum (+ sum squares\
    \ cubes)))\n  (setq sum (+ sum squares cubes)))\n  (setq sum (+ sum squares cubes)))\n\
    \  (setq sum (+ sum squares cubes)))\n  (setq sum (+ sum squares cubes)))\n  (setq\
    \ sum (+ sum squares cubes)))\n  (setq sum (+ sum squares cubes)))\n  (setq sum\
    \ (+ sum squares cubes)))\n  (setq sum (+ sum squares cubes)))\n  (setq sum (+\
    \ sum squares cubes)))\n  (setq sum (+ sum squares cubes)))\n  (setq sum (+ sum\
    \ squares cubes", "  (let ((result 0))\n    (for-each (lambda (x)\n      (if (modulo\
    \ x 3)\n        (+ result (* x x)))\n      (if (modulo x 4)\n        (+ result\
    \ (* x x x)))\n      (set! result 0)))\n    lst))\n;; >>> sum_squares lst\n;;\
    \ (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list )\n;; >>> sum_squares\
    \ lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n\
    ;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list\
    \ -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\
    \ lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n\
    ;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list\
    \ -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\
    \ lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n\
    ;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list\
    \ -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\
    \ lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n\
    ;; >>> sum_squares lst\n;; (list -", "  (let ((result 0))\n    (for-each (lambda\
    \ (x)\n      (if (modulo x 3)\n        (+ result (* x x)))\n      (if (modulo\
    \ x 4)\n        (+ result (* x (* x x))))))\n    lst))\n;; >>> sum_squares (list\
    \ 1 2 3)\n;; (list )\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5\
    \ 2 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1\
    \ -5 2 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1\
    \ -5 2 -1 -5)\n", "  (let ((sum (0)))\n    (for-each (lambda (x)\n           \
    \     (if (modulo x 3)\n                  (+ (* x x) sum)\n                (if\
    \ (modulo x 4)\n                  (+ (* x x) (* x x))\n                (+ (* x\
    \ x) (* x x)))))\n      lst))\n\n;; >>> sum_squares (list 1 2 3)\n;; -1\n;; >>>\
    \ sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5\
    \ 6)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7)\n;; -1\n;; >>> sum_squares\
    \ (list 1 2 3 4 5 6 7 8 9)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9\
    \ 10)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11)\n;; -1\n;; >>>\
    \ sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12)\n;; -1\n;; >>> sum_squares (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6\
    \ 7 8 9 10 11 12 13 14)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10\
    \ 11 12 13 14 15)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12\
    \ 13 14 15 16)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13\
    \ 14 15 16 17)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13\
    \ 14 15 16 17 18)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12\
    \ 13 14 15 16 17 18 19)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10\
    \ 11 12 13 14 15 16 17 18 19 20)\n;; -1\n;; >>> sum_squares (list", "  (let ((result\
    \ 0))\n    (for-each (lambda (x)\n      (if (modulo x 3)\n        (+ (square x)\
    \ result)\n        (if (modulo x 4)\n          (+ (cube x) result)\n         \
    \ (+ x result))))\n      lst))\n  result)\n;; >>> lst\n;; (list )\n;; >>> lst\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 -1 -5)\n;; >>>\
    \ sum_squares (list 1 2 3)\n;; (list 1 9)\n;; >>> sum_squares (list 1 2 3 4 5\
    \ 6)\n;; (list 1 9 16)\n;; >>> sum_squares (list 1 2 3 4 5 6 7)\n;; (list 1 9\
    \ 16 25)\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11)\n;; (list 1 9 16 25\
    \ 36 49 64 81 100 121)\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13\
    \ 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39\
    \ 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65\
    \ 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91\
    \ 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112\
    \ 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131\
    \ 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150\
    \ 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169\
    \ 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188\
    \ 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207\
    \ 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226\
    \ 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245\
    \ 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264\
    \ 265 266 267 268 269 270 271 272", "  (let ((result 0))\n    (for-each (lambda\
    \ (x)\n      (if (modulo x 3)\n        (+ result (* x x)))\n      (if (modulo\
    \ x 4)\n        (+ result (* x (* x x)))\n      (set! result 0)))\n      lst))\n\
    \  )\n\n;; >>> sum_squares (list 1 2 3)\n;; 6\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list)\n;; 0\n;; >>> sum_squares (list -1\
    \ -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6)\n;; 30\n;; >>> sum_squares\
    \ (list 1 2 3 4 5 6 7)\n;; 56\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8)\n;; 120\n\
    ;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9)\n;; 210\n;; >>> sum_squares (list\
    \ 1 2 3 4 5 6 7 8 9 10)\n;; 252\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)\n;; 300\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12)\n;; 360\n\
    ;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13)\n;; 420\n;; >>> sum_squares\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14)\n;; 552\n;; >>> sum_squares (list 1\
    \ 2 3 4 5 6 7 8 9 10 11 12 13 14 15)\n;; 684\n;; >>> sum_squares (list 1 2 3 4\
    \ 5 6 7 8 9 10 11 12 13 14 15 16)\n;; 816\n;; >>> sum_squares (list 1 2 3 4 5\
    \ 6 7 8 9 10 11 12 13 14 15 16 17)\n;; 948\n;; >>> sum_squares (list 1 2 3 4 5\
    \ 6 7 8 9 10 11 12 13 14 15 16 17 18)\n;; 1080\n;; >>> sum_squares (list 1 2 3\
    \ 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)\n;; 1212", "  (let ((result 0))\n\
    \    (for-each (lambda (x)\n                (if (modulo x 3)\n               \
    \   (+ result (* x x)))\n                (if (modulo x 4)\n                  (+\
    \ result (* x x x))))\n               lst\n               (set! result (+ result\
    \ x)))))\n", "  (let ((result 0))\n    (for-each (lambda (x)\n      (if (modulo\
    \ x 3)\n        (+ (* x x) result)\n        (if (modulo x 4)\n          (+ (*\
    \ x x) (* x x))\n          (+ (* x x) result)))))\n    result))\n;; >>> sum_squares\
    \ (list 1 2 3)\n;; 6\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares", "  (let ((sum (0)))\n    (for-each (lambda (x)\n      (if\
    \ (modulo (car x) 3)\n        (+ (car x) (car x))\n        (+ (car x) (car x)\
    \ (car x))\n        (+ (car x) (car x) (car x) (car x))\n        (+ (car x) (car\
    \ x) (car x) (car x) (car x))\n        (+ (car x) (car x) (car x) (car x) (car\
    \ x) (car x))\n        (+ (car x) (car x) (car x) (car x) (car x) (car x) (car\
    \ x))\n        (+ (car x) (car x) (car x) (car x) (car x) (car x) (car x) (car\
    \ x))\n        (+ (car x) (car x) (car x) (car x) (car x) (car x) (car x) (car\
    \ x) (car x))\n        (+ (car x) (car x) (car x) (car x) (car x) (car x) (car\
    \ x) (car x) (car x) (car x))\n        (+ (car x) (car x) (car x) (car x) (car\
    \ x) (car x) (car x) (car x) (car x) (car x) (car x))\n        (+ (car x) (car\
    \ x) (car x) (car x) (car x) (car x) (car x) (car x) (car x) (car x) (car x) (car\
    \ x))\n        (+ (car x) (car x) (car x) (car x) (car x) (car x) (car x) (car\
    \ x) (car x) (car x) (car x) (car x) (car x))\n        (+ (car x) (car x) (car\
    \ x) (car x) (car x) (car x) (car x) (car x) (car x) (car x) (car x) (car x) (car\
    \ x) (car x))\n        (+ (car x) (car x)", "  (define (square x) (* x x))\n \
    \ (define (cube x) (* x (* x x)))\n  (define (sum_squares_helper lst)\n    (if\
    \ (null? lst)\n      0\n    (+ (square (car lst))\n      (sum_squares_helper (cdr\
    \ lst))))))\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares_helper\
    \ lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares_helper (cdr lst)\n;; 0\n;;\
    \ >>> sum_squares_helper (cdr (cdr lst))\n;; 0\n;; >>> sum_squares_helper (cdr\
    \ (cdr (cdr lst)))\n;; 0\n;; >>> sum_squares_helper (cdr (cdr (cdr (cdr lst)))))\n\
    ;; 0\n;; >>> sum_squares_helper (cdr (cdr (cdr (cdr (cdr lst)))))\n;; 0\n;; >>>\
    \ sum_squares_helper (cdr (cdr (cdr (cdr (cdr (cdr lst)))))))\n;; 0\n;; >>> sum_squares_helper\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst))))))))\n;; 0\n;; >>> sum_squares_helper\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst))))))))))\n;; 0\n;; >>> sum_squares_helper\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst))))))))))\n;; 0\n;; >>> sum_squares_helper\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst))))))))))))\n;; 0\n;;\
    \ >>> sum_squares_helper (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ lst))))", "  (let ((sum (0)))\n    (for-each (lambda (x)\n      (if (modulo\
    \ x 3)\n        (+ (* x x) sum)\n      (if (modulo x 4)\n        (+ (* x x) (*\
    \ x x))\n      (sum (+ (* x x) (* x x))))))\n      lst))\n  )\n\n;; >>> sum_squares\
    \ (list 1 2 3)\n;; -1\n;; >>> sum_squares (list )\n;; 0\n;; >>> sum_squares (list\
    \ -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6)\n;; -1\n;; >>>\
    \ sum_squares (list 1 2 3 4 5 6 7)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5\
    \ 6 7 8)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9)\n;; -1\n;; >>> sum_squares\
    \ (list 1 2 3 4 5 6 7 8 9 10)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8\
    \ 9 10 11)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12)\n;; -1\n\
    ;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13)\n;; -1\n;; >>> sum_squares\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14)\n;; -1\n;; >>> sum_squares (list 1 2\
    \ 3 4 5 6 7 8 9 10 11 12 13 14 15)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5\
    \ 6 7 8 9 10 11 12 13 14 15 16)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7\
    \ 8 9 10 11 12 13 14 15 16 17)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7\
    \ 8 9 10 11 12 13 14 15 16 17 18)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6\
    \ 7 8 9 10 11 12 13 14 15 16 17 18 19)\n;; -1\n;; >>> sum", "  (let ((sum (0)))\n\
    \    (for-each (lambda (x)\n                (if (modulo (car x) 3)\n         \
    \         (+ (car x) (car x))\n                  (+ (car x) (car x) (car x)))))\n\
    \      lst\n    (+ sum (car lst))))\n\n;; >>> sum_squares (list 1 2 3)\n;; (list\
    \ )\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 -1 -5 -1 -5 -1 -5)\n\
    ;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9)\n;; (list -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -", "  (define (square x) (* x x))\n\
    \  (define (cube x) (* x (* x x)))\n  (define (sum_squares_helper lst)\n    (if\
    \ (null? lst)\n      0\n    (+ (square (car lst))\n      (sum_squares_helper (cdr\
    \ lst)))))\n  (sum_squares_helper lst))\n;; >>> sum_squares lst\n;; (list -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -", "  (let ((result 0))\n\
    \    (for-each (lambda (x)\n                (if (modulo x 3)\n               \
    \   (+ (* x x) result)\n                (if (modulo x 4)\n                  (+\
    \ (* x x) (* x x))\n                (+ (* x x) result))))\n      lst))\n;; >>>\
    \ sum_squares '(1 2 3 4 5 6 7 8 9 10)\n;; -1\n;; >>> sum_squares '(1 2 3 4 5 6\
    \ 7 8 9 10)\n;; -1\n;; >>> sum_squares '(1 2 3 4 5 6 7 8 9 10)\n;; -1\n;; >>>\
    \ sum_squares '(1 2 3 4 5 6 7 8 9 10)\n;; -1\n;; >>> sum_squares '(1 2 3 4 5 6\
    \ 7 8 9 10)\n;; -1\n;; >>> sum_squares '(1 2 3 4 5 6 7 8 9 10)\n;; -1\n;; >>>\
    \ sum_squares '(1 2 3 4 5 6 7 8 9 10)\n;; -1\n;; >>> sum_squares '(1 2 3 4 5 6\
    \ 7 8 9 10)\n;; -1\n;; >>> sum_squares '(1 2 3 4 5 6 7 8 9 10)\n;; -1\n;; >>>\
    \ sum_squares '(1 2 3 4 5 6 7 8 9 10)\n;; -1\n;; >>> sum_squares '(1 2 3 4 5 6\
    \ 7 8 9 10)\n;; -1\n;; >>> sum_squares '(1 2 3 4 5 6 7 8 9 10)\n;; -1\n;; >>>\
    \ sum_squares '(1 2 3 4 5 6 7 8 9 10)\n;; -1\n;; >>> sum_squares '(1 2 3 4 5 6\
    \ 7 8 9 10)\n;; -1\n;; >>> sum_squares '(1 2 3 4 5 6 7 8 9 10)\n;; -1\n;; >>>\
    \ sum_squares '(1 2 3 4 5 6 7 8 9 10)\n;; -1\n;; >>> sum_squares '(1 2 3 4 5 6\
    \ 7 8 9 10)\n;; -1\n;; >>> sum_squares '(1 2 3 4 5 6 7 8 9 10)\n;; -1\n;; >>>\
    \ sum_squares '(1 2 3 4 5 6 7 8 9 10)\n;; -1", "  (let ((result 0))\n    (for-each\
    \ (lambda (x)\n                (if (modulo x 3)\n                  (+ result (*\
    \ x x)))\n                (if (modulo x 4)\n                  (+ result (* x x)\
    \ (* x x)))))\n    (+ result lst)))\n\n;; >>> sum_squares (list 1 2 3)\n;; 6\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -", "  (define (square x) (* x x))\n  (define (cube x) (* x (* x x)))\n\
    \  (define (sum_squares_helper lst)\n    (if (null? lst)\n      0\n    (+ (square\
    \ (car lst))\n      (sum_squares_helper (cdr lst)))))\n  (sum_squares_helper lst))\n",
  "  (let ((sum (0)))\n    (for-each (lambda (x)\n      (if (modulo (car x) 3)\n \
    \       (+ (car x) (car x))\n        (+ (car x) (car x) (car x)))))\n      lst))\n\
    ;; >>> sum_squares (list 1 2 3)\n;; (list )\n;; >>> sum_squares (list -1 -5 2\
    \ -1 -5)\n;; (list -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n\
    ;; (list -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list\
    \ -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5\
    \ -1 -5 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 -1 -5\
    \ -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 -1 -5 -1 -5)\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; (list -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares (list\
    \ -1 -5 2 -1 -5)\n;; (list -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; (list -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n\
    ;; (list -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list\
    \ -1 -5 -1 -5 -", "  (let ((sum 0))\n    (for-each (lambda (x)\n             \
    \   (if (modulo x 3)\n                  (+ (* x x) sum)\n                (if (modulo\
    \ x 4)\n                  (+ (* x x) (* x x))\n                (+ (* x x) (* x\
    \ x)))))\n      lst))\n\n;; >>> sum_squares (list 1 2 3)\n;; -1\n;; >>> sum_squares\
    \ (list )\n;; 0\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -", "  (let ((sum (0)))\n\
    \    (for-each (lambda (x)\n                (if (modulo x 3)\n               \
    \   (+ (* x x) sum)\n                (if (modulo x 4)\n                  (+ (*\
    \ x x) (* x x))\n                (+ (* x x) (* x x)))))\n      lst)))\n", "  (let\
    \ ((result 0))\n    (for-each (lambda (x)\n                (if (modulo x 3)\n\
    \                  (+ result (* x x)))\n                (if (modulo x 4)\n   \
    \               (+ result (* x x) (* x x)))))\n    (+ result lst)))\n\n;; >>>\
    \ sum_squares (list 1 2 3)\n;; 6\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;;\
    \ -3\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -3\n;; >>> sum_squares (list\
    \ -1 -5 2 -1 -5)\n;; -3\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -3\n;; >>>\
    \ sum_squares (list -1 -5 2 -1 -5)\n;; -3\n;; >>> sum_squares (list -1 -5 2 -1\
    \ -5)\n;; -3\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -3\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -3\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -3\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -3\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -3\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -3\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -3\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -3\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -3\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -3\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -3\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -3\n;; >>> sum_squares (list -1 -", "  (define (square\
    \ x) (* x x))\n  (define (cube x) (* x (* x x)))\n  (define (sum_squares_helper\
    \ lst)\n    (if (null? lst)\n      0\n    (+ (square (car lst))\n      (sum_squares_helper\
    \ (cdr lst)))))\n  (sum_squares_helper lst))\n\n;; >>> sum_squares lst\n;; (list\
    \ -1 -5 2 -1 -5)\n;; >>> sum_squares_helper lst\n;; (list -1 -5 2 -1 -5)\n;; >>>\
    \ sum_squares_helper (cdr lst)\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares_helper\
    \ (cdr (cdr lst))\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares_helper (cdr (cdr\
    \ (cdr lst)))\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares_helper (cdr (cdr (cdr\
    \ (cdr lst))))\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares_helper (cdr (cdr (cdr\
    \ (cdr (cdr lst))))))\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares_helper (cdr\
    \ (cdr (cdr (cdr (cdr (cdr lst))))))\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares_helper\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst))))))))\n;; (list -1 -5 2 -1 -5)\n;;\
    \ >>> sum_squares_helper (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst))))))))))\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares_helper (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr lst", "  (define (square x) (* x x))\n  (define (cube x) (* x\
    \ (* x x)))\n  (define (sum_squares_helper lst)\n    (if (null? lst)\n      0\n\
    \    (+ (square (car lst))\n      (sum_squares_helper (cdr lst))))\n  (sum_squares_helper\
    \ lst))\n;; >>> sum_squares (list 1 2 3)\n;; 6\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6)\n;; -1\n;; >>> sum_squares\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27\
    \ 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53\
    \ 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79\
    \ 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100)\n;; -1\n;;\
    \ >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\
    \ 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47\
    \ 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73\
    \ 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\
    \ 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\
    \ 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\
    \ 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\
    \ 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\
    \ 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\
    \ 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\
    \ 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\
    \ 100 100 100 100 100", "  (let ((result 0))\n    (for-each (lambda (x)\n    \
    \            (if (modulo x 3)\n                  (+ (* x x) result)\n        \
    \          (if (modulo x 4)\n                    (+ (* x x) (* x x))\n       \
    \             result)))\n      lst))\n;; >>> sum_squares (list 1 2 3)\n;; 3\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list)\n;;\
    \ 0\n;; >>> sum_squares (list 1 2 3 4 5 6)\n;; 0\n;; >>> sum_squares (list 1 2\
    \ 3 4 5 6 7)\n;; 0\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8)\n;; 0\n;; >>> sum_squares\
    \ (list 1 2 3 4 5 6 7 8 9)\n;; 0\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10)\n\
    ;; 0\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11)\n;; 0\n;; >>> sum_squares\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12)\n;; 0\n;; >>> sum_squares (list 1 2 3 4 5\
    \ 6 7 8 9 10 11 12 13)\n;; 0\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11\
    \ 12 13 14)\n;; 0\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)\n\
    ;; 0\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)\n;; 0\n\
    ;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)\n;; 0\n;;\
    \ >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)\n;; 0\n\
    ;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)\n;;\
    \ 0\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\
    \ 20)\n;; 0\n", "  (let ((result 0))\n    (for-each (lambda (x)\n            \
    \    (if (modulo (car x) 3)\n                  (+ (car x) (car x))\n         \
    \         (+ (car x) (car x) (car x))))\n      lst\n      (setf result (+ result\
    \ (car x))))\n    result))\n", "  (define (square x) (* x x))\n  (define (cube\
    \ x) (* x (* x x)))\n  (define (sum_squares_helper lst)\n    (if (null? lst)\n\
    \      0\n    (+ (square (car lst))\n      (sum_squares_helper (cdr lst)))))\n\
    \  (sum_squares_helper lst))\n", "  (let ((result 0))\n    (for-each (lambda (x)\n\
    \                (if (modulo x 3)\n                  (+ result (* x x)))\n   \
    \             (if (modulo x 4)\n                  (+ result (* x x) (* x x)))))\n\
    \    (+ result lst)))\n\n;; >>> sum_squares lst\n;; 6\n;; >>> sum_squares (list\
    \ 1 2 3)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list 1 2 3 4 5 6)\n;; 6\n;; >>> sum_squares (list 1 2 3 4 5 6 7)\n;; -1\n;;\
    \ >>> sum_squares (list 1 2 3 4 5 6 7 8)\n;; -1\n;; >>> sum_squares (list 1 2\
    \ 3 4 5 6 7 8 9)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10)\n;; -1\n\
    ;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11)\n;; -1\n;; >>> sum_squares (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8\
    \ 9 10 11 12 13)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13\
    \ 14)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)\n\
    ;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)\n;; -1\n\
    ;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)\n;; -1\n;;\
    \ >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)\n;; -1\n\
    ;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)\n;;\
    \ -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11", "  (define (square x)\
    \ (* x x))\n  (define (cube x) (* x (* x x)))\n  (define (sum_squares_helper lst)\n\
    \    (if (null? lst)\n      0\n    (+ (square (car lst))\n      (sum_squares_helper\
    \ (cdr lst)))))\n  (sum_squares_helper lst))\n", "  (let ((sum (0)))\n    (for-each\
    \ (lambda (x)\n      (if (modulo (car x) 3)\n        (+ (car x) (car x))\n   \
    \     (+ (car x) (car x) (car x))\n      )\n    )\n    lst)\n    sum)\n)\n\n;;\
    \ >>> sum_squares (list 1 2 3)\n;; 6\n;; >>> sum_squares (list )\n;; 0\n;; >>>\
    \ sum_squares (list -1 -5 2 -1 -5)\n;; -3\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n\
    ;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n\
    ;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n\
    ;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n\
    ;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n\
    ;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n\
    ;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n\
    ;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n\
    ;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n", "  (let ((result 0))\n    (for-each\
    \ (lambda (x)\n                (if (modulo x 3)\n                  (+ (* x x)\
    \ result)\n                (if (modulo x 4)\n                  (+ (* x x) (* x\
    \ x))\n                (+ (* x x) result))))\n      lst))\n;; >>> sum_squares\
    \ (list 1 2 3)\n;; (list )\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list\
    \ -1 -5 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 -1 -5)\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 -1 -5)\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; (list -1 -5 -1 -5)\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; (list -1 -5 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;;\
    \ (list -1 -5 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5\
    \ -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 -1 -5)\n;; >>>\
    \ sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 -1 -5)\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; (list -1 -5 -1 -5)\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; (list -1 -5 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;;\
    \ (list -1 -5 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5\
    \ -1 -5)\n;; >>>", "  (let ((result 0))\n    (for-each (lambda (x)\n      (if\
    \ (modulo x 3)\n        (+ result (* x x)))\n      (if (modulo x 4)\n        (+\
    \ result (* x (* x x)))))\n      lst))\n  result)\n;; >>> sum_squares (list 1\
    \ 2 3)\n;; 3\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2", "  (let ((result 0))\n    (for-each (lambda\
    \ (x)\n                (if (modulo x 3)\n                  (+ (* x x) result)\n\
    \                  (if (modulo x 4)\n                    (+ (* x x) (* x x))\n\
    \                    (+ (* x x) (* x x)))))\n      lst))\n", "  (let ((sum (0)))\n\
    \    (for-each (lambda (x)\n      (if (modulo (car x) 3)\n        (+ (square (car\
    \ x)) sum)\n        (if (modulo (car x) 4)\n          (+ (cube (car x)) sum)\n\
    \          (sum))))\n      lst))\n;; >>> sum_squares (list 1 2 3)\n;; 6\n;; >>>\
    \ sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1\
    \ -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>>", " \
    \ (define sum (0))\n  (define squares (0))\n  (define cube (0))\n  (for ([i (first\
    \ lst)])\n    (if (modulo i 3)\n      (set! sum (+ sum (square i)))\n      (set!\
    \ squares (+ squares (square i)))\n      (set! cube (+ cube (cube i))))\n    (set!\
    \ lst (cdr lst))))\n  (+ sum squares cube))\n\n;; >>> sum_squares (list 1 2 3)\n\
    ;; 6\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -3\n;; >>> sum_squares (list\
    \ -1 -5 2 -1 -5)\n;; -3\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -3\n;; >>>\
    \ sum_squares (list -1 -5 2 -1 -5)\n;; -3\n;; >>> sum_squares (list -1 -5 2 -1\
    \ -5)\n;; -3\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -3\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -3\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -3\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -3\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -3\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -3\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -3\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -3\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -3\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -3\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -3\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -3\n;;", "  (let ((sum (0)))\n    (for-each (lambda\
    \ (x)\n                (if (modulo x 3)\n                  (+ (* x x) sum)\n \
    \               (if (modulo x 4)\n                  (+ (* x x) (* x x))\n    \
    \            (+ (* x x) (* x x)))))\n      lst))\n\n;; >>> sum_squares (list 1\
    \ 2 3)\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list\
    \ -1 -5 2 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 2 -1\
    \ -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n;; >>>\
    \ sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1\
    \ -5 2 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares (list", "  (let ((result\
    \ 0))\n    (for-each (lambda (x)\n                (if (modulo x 3)\n         \
    \         (+ (* x x) result)\n                (if (modulo x 4)\n             \
    \     (+ (* x x) (* x x))\n                (+ (* x x) (* x x)))))\n      lst))\n\
    ;; >>> sum_squares '(1 2 3 4 5 6 7 8 9)\n;; (list -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5", "  (let ((sum (0)))\n    (for-each\
    \ (lambda (x)\n                (if (modulo (car x) 3)\n                  (+ (car\
    \ x) (car x))\n                  (+ (car x) (car x) (car x))))\n          lst)\n\
    \      (+ sum (car lst))))\n\n;; >>> sum_squares (list 1 2 3)\n;; 6\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6)\n;; -1\n\
    ;; >>> sum_squares (list 1 2 3 4 5 6 7)\n;; -1\n;; >>> sum_squares (list 1 2 3\
    \ 4 5 6 7 8)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9)\n;; -1\n;; >>>\
    \ sum_squares (list 1 2 3 4 5 6 7 8 9 10)\n;; -1\n;; >>> sum_squares (list 1 2\
    \ 3 4 5 6 7 8 9 10 11)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11\
    \ 12)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13)\n;; -1\n\
    ;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14)\n;; -1\n;; >>> sum_squares\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)\n;; -1\n;; >>> sum_squares (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)\n;; -1\n;; >>> sum_squares (list 1 2\
    \ 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)\n;; -1\n;; >>> sum_squares (list 1 2\
    \ 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)\n;; -1\n;; >>> sum_squares (list 1\
    \ 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)\n;; -1\n;; >>> sum_squares (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17", "  (let ((result 0))\n    (for-each\
    \ (lambda (x)\n      (if (modulo x 3)\n        (+ (* x x) result)\n        (if\
    \ (modulo x 4)\n          (+ (* x x) (* x x))\n          (+ (* x x) (* x x)))))\n\
    \      lst))\n  )\n  \n;; >>> sum_squares (list 1 2 3)\n;; (list )\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; (list -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares (list\
    \ 1 2 3 4 5 6)\n;; (list )\n;; >>> sum_squares (list -1 -5 2 -1 -5 6)\n;; (list\
    \ -1 -5 -1 -5 -1 -5 6)\n;; >>> sum_squares (list 1 2 3 4 5 6 7)\n;; (list )\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5 6 7)\n;; (list -1 -5 -1 -5 -1 -5 6 7)\n\
    ;; >>> sum_squares (list 1 2 3 4 5 6 7 8)\n;; (list )\n;; >>> sum_squares (list\
    \ -1 -5 2 -1 -5 6 7 8)\n;; (list -1 -5 -1 -5 -1 -5 6 7 8)\n;; >>> sum_squares\
    \ (list 1 2 3 4 5 6 7 8 9)\n;; (list )\n;; >>> sum_squares (list -1 -5 2 -1 -5\
    \ 6 7 8 9)\n;; (list -1 -5 -1 -5 -1 -5 6 7 8 9)\n;; >>> sum_squares (list 1 2\
    \ 3 4 5 6 7 8 9 10)\n;; (list )\n;; >>> sum_squares (list -1 -5 2 -1 -5 6 7 8\
    \ 9 10)\n;; (list -1 -5 -1 -5 -1 -5 6 7 8 9 10)\n;; >>> sum_squares (list 1 2\
    \ 3 4 5 6 7 8 9 10 11)\n;; (list )\n;; >>> sum_squares (list -1 -5 2 -1 -5 6 7\
    \ 8 9 10 11", "  (let ((sum (0)))\n    (for-each (lambda (x)\n      (if (modulo\
    \ x 3)\n        (+ (* x x) sum)\n      (if (modulo x 4)\n        (+ (* x x) (*\
    \ x x))\n      (+ (* x x) (* x x)))))\n      lst))\n;; >>> sum_squares (list 1\
    \ 2 3)\n;; (list )\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 -1\
    \ -5 -1 -5)\n;; >>> sum_squares (list 1 2 3 4 5 6)\n;; (list )\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5 6)\n;; (list -1 -5 -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares\
    \ (list 1 2 3 4 5 6 7)\n;; (list )\n;; >>> sum_squares (list -1 -5 2 -1 -5 6 7)\n\
    ;; (list -1 -5 -1 -5 -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares (list 1 2 3 4 5 6\
    \ 7 8)\n;; (list )\n;; >>> sum_squares (list -1 -5 2 -1 -5 6 7 8)\n;; (list -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8\
    \ 9)\n;; (list )\n;; >>> sum_squares (list -1 -5 2 -1 -5 6 7 8 9)\n;; (list -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares (list 1 2 3 4 5\
    \ 6 7 8 9 10)\n;; (list )\n;; >>> sum_squares (list -1 -5 2 -1 -5 6 7 8 9 10)\n\
    ;; (list -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares\
    \ (list", "  (let ((sum 0))\n    (for-each (lambda (x)\n                (if (modulo\
    \ x 3)\n                  (+ (* x x) sum)\n                (if (modulo x 4)\n\
    \                  (+ (* x x) (* x x))\n                (+ (* x x) (* x x)))))\n\
    \      lst))\n", "  (let ((sum (0)))\n    (for-each (lambda (x)\n            \
    \    (if (modulo x 3)\n                  (+ (* x x) sum)\n                (if\
    \ (modulo x 4)\n                  (+ (* x x) (* x x))\n                (+ (* x\
    \ x) (* x x)))))\n      lst))\n\n;; >>> sum_squares (list 1 2 3)\n;; 6\n;; >>>\
    \ sum_squares (list )\n;; 0\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -5\n\
    ;; >>> sum_squares (list 1 2 3 4 5 6)\n;; -5\n;; >>> sum_squares (list 1 2 3 4\
    \ 5 6 7)\n;; -5\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8)\n;; -5\n;; >>> sum_squares\
    \ (list 1 2 3 4 5 6 7 8 9)\n;; -5\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9\
    \ 10)\n;; -5\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11)\n;; -5\n;; >>>\
    \ sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12)\n;; -5\n;; >>> sum_squares (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13)\n;; -5\n;; >>> sum_squares (list 1 2 3 4 5 6\
    \ 7 8 9 10 11 12 13 14)\n;; -5\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10\
    \ 11 12 13 14 15)\n;; -5\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12\
    \ 13 14 15 16)\n;; -5\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13\
    \ 14 15 16 17)\n;; -5\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13\
    \ 14 15 16 17 18)\n;; -5\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12\
    \ 13 14 15 16 17 18 19)\n;; -5\n;; >>> sum_squares (list", "  (let ((result 0))\n\
    \    (for-each (lambda (x)\n                (if (modulo x 3)\n               \
    \   (+ result (* x x)))\n                (if (modulo x 4)\n                  (+\
    \ result (* x x) (* x x)))))\n    (+ result lst)))\n\n;; >>> sum_squares (list\
    \ 1 2 3)\n;; 6\n;; >>> sum_squares (list )\n;; 0\n;; >>> sum_squares (list -1\
    \ -5 2 -1 -5)\n;; -1\n;; \"\"\"\n\ndef sum_squares(lst):\n    result = 0\n   \
    \ for x in lst:\n        if modulo(x, 3) == 0:\n            result += x * x\n\
    \        elif modulo(x, 4) == 0 and modulo(x, 3) != 0:\n            result +=\
    \ x * x * x\n    return result + lst\n\ndef modulo(x, y):\n    return x % y\n\n\
    print sum_squares([1, 2, 3])\nprint sum_squares([])\nprint sum_squares([-1, -5,\
    \ 2, -1, -5])\n", "  (let ((sum (0)))\n    (for-each (lambda (x)\n      (if (modulo\
    \ x 3)\n        (+ (* x x) sum)\n      (if (modulo x 4)\n        (+ (* x x) (*\
    \ x x) sum)\n      (sum (+ (* x x) (* x x) (* x x))))))\n      lst))\n  sum_squares\
    \ lst)\n\n;; >>> sum_squares (list 1 2 3)\n;; 6\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list", "  (let ((result 0))\n    (for-each (lambda (x)\n                (if\
    \ (modulo x 3)\n                  (+ result (* x x)))\n                (if (modulo\
    \ x 4)\n                  (+ result (* x (* x x))))\n                (set! result\
    \ 0))\n               lst))\n  result)\n", "  (let ((sum (0)))\n    (for-each\
    \ (lambda (x)\n      (if (modulo (car x) 3)\n        (+ (car x) (car x))\n   \
    \     (+ (car x) (car x) (car x))\n      )\n    )\n    lst)\n    (+ sum (car lst)))\n\
    )\n", "  (let ((result 0))\n    (for-each (lambda (x)\n                (if (modulo\
    \ x 3)\n                  (+ result (* x x)))\n                (if (modulo x 4)\n\
    \                  (+ result (* x (* x x))))\n                (set! result (*\
    \ x x)))))\n  lst)\n\n;; >>> sum_squares (list 1 2 3)\n;; (list )\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1\
    \ -5 2 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1\
    \ -5 2 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; (list", "  (let ((result 0))\n    (for-each (lambda\
    \ (x)\n                (if (modulo x 3)\n                  (+ result (* x x)))\n\
    \                (if (modulo x 4)\n                  (+ result (* x x x)))\n \
    \               (set! result 0)))\n      lst))\n;; >>> sum_squares\n;; (list -1\
    \ -5 2 -1 -5)\n;; >>> sum_squares\n;; (list )\n;; >>> sum_squares\n;; (list -1\
    \ -5 2 -1 -5)\n;; >>> sum_squares\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n;; (", "  (let ((result 0))\n   \
    \ (for-each (lambda (x)\n                (if (modulo x 3)\n                  (+\
    \ (square x) result)\n                  (if (modulo x 4)\n                   \
    \ (+ (cube x) result)\n                    (+ x result))))\n      lst))\n  )\n\
    ;; >>> sum_squares (list 1 2 3)\n;; 3\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n\
    ;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list\
    \ -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>>\
    \ sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1\
    \ -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list", "  (let ((sum 0))\n\
    \    (for-each (lambda (x)\n                (if (modulo x 3)\n               \
    \   (+ (* x x) sum)\n                (if (modulo x 4)\n                  (+ (*\
    \ x x) (* x x))\n                (+ (* x x) (* x x)))))\n      lst))\n\n;; >>>\
    \ sum_squares (list 1 2 3)\n;; 3\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;;\
    \ -6\n;; >>> sum_squares (list 1 2 3 4 5 6)\n;; -6\n;; >>> sum_squares (list 1\
    \ 2 3 4 5 6 7)\n;; -6\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8)\n;; -6\n;; >>>\
    \ sum_squares (list 1 2 3 4 5 6 7 8 9)\n;; -6\n;; >>> sum_squares (list 1 2 3\
    \ 4 5 6 7 8 9 10)\n;; -6\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11)\n\
    ;; -6\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12)\n;; -6\n;; >>> sum_squares\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13)\n;; -6\n;; >>> sum_squares (list 1 2 3\
    \ 4 5 6 7 8 9 10 11 12 13 14)\n;; -6\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8\
    \ 9 10 11 12 13 14 15)\n;; -6\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11\
    \ 12 13 14 15 16)\n;; -6\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12\
    \ 13 14 15 16 17)\n;; -6\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12\
    \ 13 14 15 16 17 18)\n;; -6\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11\
    \ 12 13 14 15 16 17 18 19)\n;; -6\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9\
    \ 10 11 12 13 14", "  (let ((sum (0)))\n    (for-each (lambda (x)\n          \
    \      (if (modulo x 3)\n                  (+ (* x x) sum)\n                (if\
    \ (modulo x 4)\n                  (+ (* x x) (* x x))\n                (+ (* x\
    \ x) (* x x)))))\n      lst))\n\n;; >>> sum_squares (list 1 2 3)\n;; -1\n;; >>>\
    \ sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1\
    \ -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n", "  (let\
    \ ((result 0))\n    (for-each (lambda (x)\n                (if (modulo x 3)\n\
    \                  (+ result (* x x)))\n                (if (modulo x 4)\n   \
    \               (+ result (* x (* x x))))\n                (set! result (* x x))))\n\
    \      lst))\n\n;; >>> sum_squares (list 1 2 3)\n;; 2\n;; >>> sum_squares (list\
    \ -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>>\
    \ sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1\
    \ -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (", "  (define\
    \ (square n) (* n n))\n  (define (cube n) (* n (* n n)))\n  (define (sum_squares_helper\
    \ lst)\n    (if (null? lst)\n      0\n    (+ (square (car lst))\n      (sum_squares_helper\
    \ (cdr lst)))))\n  (sum_squares_helper lst))\n\n;; >>> sum_squares lst\n;; -1\n\
    ;; >>> sum_squares_helper lst\n;; -1\n;; >>> sum_squares_helper (cdr lst)\n;;\
    \ -5\n;; >>> sum_squares_helper (cdr (cdr lst))\n;; -1\n;; >>> sum_squares_helper\
    \ (cdr (cdr (cdr lst)))\n;; -5\n;; >>> sum_squares_helper (cdr (cdr (cdr (cdr\
    \ lst))))\n;; -1\n;; >>> sum_squares_helper (cdr (cdr (cdr (cdr (cdr lst))))))\n\
    ;; -5\n;; >>> sum_squares_helper (cdr (cdr (cdr (cdr (cdr (cdr lst))))))))\n;;\
    \ -1\n;; >>> sum_squares_helper (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst))))))))\n\
    ;; -5\n;; >>> sum_squares_helper (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst))))))))))\n\
    ;; -1\n;; >>> sum_squares_helper (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ lst))))))))))\n;; -5\n;; >>> sum_squares_helper (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr lst))))))))))))\n;; -1\n;; >>> sum_squares_helper (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l", "  (let ((result 0))\n    (for-each\
    \ (lambda (x)\n                (if (modulo x 3)\n                  (+ (* x x)\
    \ result)\n                (if (modulo x 4)\n                  (+ (* x x) result)\n\
    \                (+ (* x x) result))))\n      lst))\n\n;; >>> sum_squares (list\
    \ 1 2 3)\n;; 6\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list 1 2 3)\n;; 6\n;; >>> sum_squares\
    \ (list 1 2 3 4)\n;; 24\n;; >>> sum_squares (list 1 2 3 4 5)\n;; 30\n;; >>> sum_squares\
    \ (list 1 2 3 4 5 6)\n;; 36\n;; >>> sum_squares (list 1 2 3 4 5 6 7)\n;; 42\n\
    ;; >>> sum_squares (list 1 2 3 4 5 6 7 8)\n;; 48\n;; >>> sum_squares (list 1 2\
    \ 3 4 5 6 7 8 9)\n;; 54\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10)\n;; 60\n\
    ;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11)\n;; 66\n;; >>> sum_squares (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12)\n;; 72\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8\
    \ 9 10 11 12 13)\n;; 78\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13\
    \ 14)\n;; 84\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)\n\
    ;; 90\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)\n;; 96\n\
    ;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)\n;; 102\n\
    ;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)\n;; 108",
  "  (define (square n) (* n n))\n  (define (cube n) (* n (* n n)))\n  (define (sum_squares_helper\
    \ lst)\n    (if (null? lst)\n      0\n    (+ (square (car lst))\n      (sum_squares_helper\
    \ (cdr lst))))\n  (sum_squares_helper lst))\n\n;; >>> sum_squares lst\n;; -1\n\
    ;; >>> sum_squares_helper lst\n;; -1\n;; >>> sum_squares_helper lst\n;; -1\n;;\
    \ >>> sum_squares_helper lst\n;; -1\n;; >>> sum_squares_helper lst\n;; -1\n;;\
    \ >>> sum_squares_helper lst\n;; -1\n;; >>> sum_squares_helper lst\n;; -1\n;;\
    \ >>> sum_squares_helper lst\n;; -1\n;; >>> sum_squares_helper lst\n;; -1\n;;\
    \ >>> sum_squares_helper lst\n;; -1\n;; >>> sum_squares_helper lst\n;; -1\n;;\
    \ >>> sum_squares_helper lst\n;; -1\n;; >>> sum_squares_helper lst\n;; -1\n;;\
    \ >>> sum_squares_helper lst\n;; -1\n;; >>> sum_squares_helper lst\n;; -1\n;;\
    \ >>> sum_squares_helper lst\n;; -1\n;; >>> sum_squares_helper lst\n;; -1\n;;\
    \ >>> sum_squares_helper lst\n;; -1\n;; >>> sum_squares_helper lst\n;; -1\n;;\
    \ >>> sum_squares_helper lst\n;; -1\n;; >>> sum_squares_helper lst\n;; -1\n;;\
    \ >>> sum_squares_helper lst\n;; -1\n;; >>> sum_squares_helper lst\n;; -1\n;;\
    \ >>> sum_squares_helper lst\n;; -1\n;; >>> sum_squares_helper lst\n;; -1\n;;\
    \ >>> sum_squares_helper lst\n;; -1\n;; >>> sum_", "  (let ((result 0))\n    (for-each\
    \ (lambda (x)\n      (if (modulo x 3)\n        (+ (* x x) result)\n        (if\
    \ (modulo x 4)\n          (+ (* x x) (* x x))\n          (+ (* x x) result))))\n\
    \      lst))\n  )\n  ", "  (let ((result 0))\n    (for-each (lambda (x)\n    \
    \            (if (modulo x 3)\n                  (+ (* x x) result)\n        \
    \        (if (modulo x 4)\n                  (+ (* x x) (* x x))\n           \
    \     (+ (* x x) result))))\n      lst))\n;; >>> sum_squares '(1 2 3 4 5 6 7 8\
    \ 9 10)\n;; -1\n;; >>> sum_squares '(1 2 3 4 5 6 7 8 9 10)\n;; -1\n;; >>> sum_squares\
    \ '(1 2 3 4 5 6 7 8 9 10)\n;; -1\n;; >>> sum_squares '(1 2 3 4 5 6 7 8 9 10)\n\
    ;; -1\n;; >>> sum_squares '(1 2 3 4 5 6 7 8 9 10)\n;; -1\n;; >>> sum_squares '(1\
    \ 2 3 4 5 6 7 8 9 10)\n;; -1\n;; >>> sum_squares '(1 2 3 4 5 6 7 8 9 10)\n;; -1\n\
    ;; >>> sum_squares '(1 2 3 4 5 6 7 8 9 10)\n;; -1\n;; >>> sum_squares '(1 2 3\
    \ 4 5 6 7 8 9 10)\n;; -1\n;; >>> sum_squares '(1 2 3 4 5 6 7 8 9 10)\n;; -1\n\
    ;; >>> sum_squares '(1 2 3 4 5 6 7 8 9 10)\n;; -1\n;; >>> sum_squares '(1 2 3\
    \ 4 5 6 7 8 9 10)\n;; -1\n;; >>> sum_squares '(1 2 3 4 5 6 7 8 9 10)\n;; -1\n\
    ;; >>> sum_squares '(1 2 3 4 5 6 7 8 9 10)\n;; -1\n;; >>> sum_squares '(1 2 3\
    \ 4 5 6 7 8 9 10)\n;; -1\n;; >>> sum_squares '(1 2 3 4 5 6 7 8 9 10)\n;; -1\n\
    ;; >>> sum_squares '(1 2 3 4 5 6 7 8 9 10)\n;; -1\n;; >>> sum_squares '(1 2 3\
    \ 4 5 6 7 8 9 10)\n;; -1\n;; >>> sum_squares '(1 2 3 4 5 6 7 8 9 10)\n;; -1",
  "  (let ((sum (0)))\n    (for-each (lambda (x)\n                (if (modulo x 3)\n\
    \                  (+ (* x x) sum)\n                (if (modulo x 4)\n       \
    \           (+ (* x x) (* x x))\n                (+ (* x x) (* x x)))))\n    \
    \  lst))\n\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\
    \ lst\n;; (list )\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\
    \ lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n\
    ;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list\
    \ -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\
    \ lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n\
    ;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list\
    \ -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\
    \ lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n\
    ;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list\
    \ -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\
    \ lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum", "  (let ((sum (0)))\n    (for-each\
    \ (lambda (x)\n                (if (modulo x 3)\n                  (+ (* x x)\
    \ sum)\n                (if (modulo x 4)\n                  (+ (* x x) (* x x))\n\
    \                (+ (* x x) (* x x)))))\n      lst))\n\n;; >>> sum_squares (list\
    \ 1 2 3)\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;;\
    \ (list -1 -5 2 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5\
    \ 2 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1\
    \ -5 2 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares (list", "  (define (square\
    \ x) (* x x))\n  (define (cube x) (* x (* x x)))\n  (define (sum_squares_helper\
    \ lst)\n    (if (null? lst)\n      0\n    (+ (square (car lst))\n      (sum_squares_helper\
    \ (cdr lst)))))\n  (sum_squares_helper lst))\n;; >>> sum_squares (list 1 2 3)\n\
    ;; 6\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list\
    \ -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>>\
    \ sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1\
    \ -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1", "  (let ((result\
    \ 0))\n    (for-each (lambda (x)\n                (if (modulo x 3)\n         \
    \         (+ result (* x x)))\n                (if (modulo x 4)\n            \
    \      (+ result (* x x x)))\n                (set! result 0)))\n      lst))\n\
    ;; >>> sum_squares lst\n;; (list )\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1\
    \ -5)\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>>\
    \ sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1\
    \ -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\
    \ lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n\
    ;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list\
    \ -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\
    \ lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n\
    ;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list\
    \ -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\
    \ lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -", "  (let ((sum\
    \ (0)))\n    (for-each (lambda (x)\n      (if (modulo (car x) 3)\n        (+ (square\
    \ (car x)) sum)\n      (if (modulo (car x) 4)\n        (+ (cube (car x)) sum)\n\
    \      (sum (+ (car x) sum)))))\n    lst))\n;; >>> sum_squares (list 1 2 3)\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1\
    \ -5 2 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1\
    \ -5 2 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>>", "  (let ((sum (0)))\n    (for-each (lambda (x)\n\
    \      (if (modulo x 3)\n        (+ (* x x) sum)\n      (if (modulo x 4)\n   \
    \     (+ (* x x) (* x x) sum)\n      (sum (+ (* x x) (* x x) (* x x))))))\n  \
    \  lst))\n;; >>> sum_squares (list 1 2 3)\n;; -1\n;; >>> sum_squares (list )\n\
    ;; 0\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list\
    \ 1 2 3 4 5 6)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7)\n;; -1\n;; >>>\
    \ sum_squares (list 1 2 3 4 5 6 7 8)\n;; -1\n;; >>> sum_squares (list 1 2 3 4\
    \ 5 6 7 8 9)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10)\n;; -1\n;;\
    \ >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11)\n;; -1\n;; >>> sum_squares (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8\
    \ 9 10 11 12 13)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13\
    \ 14)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)\n\
    ;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)\n;; -1\n\
    ;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)\n;; -1\n;;\
    \ >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)\n;; -1\n\
    ;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)\n;;\
    \ -1\n;;", "  (define (square x) (* x x))\n  (define (cube x) (* x (* x x)))\n\
    \  (define (sum_squares_helper lst)\n    (if (null? lst)\n      0\n    (+ (square\
    \ (car lst))\n      (sum_squares_helper (cdr lst))))))\n", "  (let ((sum (0)))\n\
    \    (for-each (lambda (x)\n                (if (modulo x 3)\n               \
    \   (+ (* x x) sum)\n                (if (modulo x 4)\n                  (+ (*\
    \ x x) (* x x))\n                (+ (* x x) (* x x)))))\n      lst))\n\n;; >>>\
    \ sum_squares (list 1 2 3)\n;; -1\n;; >>> sum_squares (list )\n;; 0\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6)\n;; -1\n\
    ;; >>> sum_squares (list 1 2 3 4 5 6 7)\n;; -1\n;; >>> sum_squares (list 1 2 3\
    \ 4 5 6 7 8 9)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10)\n;; -1\n\
    ;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11)\n;; -1\n;; >>> sum_squares (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8\
    \ 9 10 11 12 13)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13\
    \ 14)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)\n\
    ;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)\n;; -1\n\
    ;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)\n;; -1\n;;\
    \ >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)\n;; -1\n\
    ;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)\n;;\
    \ -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\
    \ 20)", "  (let ((sum (0)))\n    (for-each (lambda (x)\n      (if (modulo x 3)\n\
    \        (+ (* x x) sum)\n      (if (modulo x 4)\n        (+ (* x x) (* x x))\n\
    \      (sum (+ (* x x) (* x x))))))\n    lst))\n;; >>> sum_squares (list 1 2 3)\n\
    ;; (list )\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 -1 -5 -1 -5)\n\
    ;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\
    \ 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47\
    \ 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73\
    \ 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\
    \ 100)\n;; (list -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5", "  (let ((result 0))\n    (for-each (lambda (x)\n   \
    \             (if (modulo x 3)\n                  (+ result (* x x)))\n      \
    \          (if (modulo x 4)\n                  (+ result (* x (* x x))))\n   \
    \             (set! result 0)))\n      lst))\n;; >>> sum_squares (list 1 2 3)\n\
    ;; (list )\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n\
    ;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13\
    \ 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39\
    \ 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65\
    \ 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91\
    \ 92 93 94 95 96 97 98 99 100)\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\
    \ 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55\
    \ 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81\
    \ 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105\
    \ 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124\
    \ 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143\
    \ 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162\
    \ 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181\
    \ 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200\
    \ 201 202 203 204 205 206 207 208 209 210 211 212 213", "  (define sum (0))\n\
    \  (define squares (0))\n  (define cubes (0))\n  (for ([i (first lst)])\n    (if\
    \ (modulo i 3)\n      (+ (square i) squares)\n      (+ (cube i) cubes))\n    (set!\
    \ sum (+ sum squares cubes)))\n  (+ sum squares cubes))\n;; >>> sum_squares (list\
    \ 1 2 3)\n;; 6\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;;", " \
    \ (let ((sum 0))\n    (for-each (lambda (x)\n                (if (modulo x 3)\n\
    \                  (+ (* x x) sum)\n                (if (modulo x 4)\n       \
    \           (+ (* x x) (* x x))\n                (+ (* x x) (* x x)))))\n    \
    \  lst))\n\n;; >>> sum_squares (list 1 2 3)\n;; 6\n;; >>> sum_squares (list -1\
    \ -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6)\n;; -1\n;; >>> sum_squares\
    \ (list 1 2 3 4 5 6 7)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8)\n;; -1\n\
    ;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9)\n;; -1\n;; >>> sum_squares (list 1\
    \ 2 3 4 5 6 7 8 9 10)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11)\n\
    ;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12)\n;; -1\n;; >>> sum_squares\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13)\n;; -1\n;; >>> sum_squares (list 1 2 3\
    \ 4 5 6 7 8 9 10 11 12 13 14)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8\
    \ 9 10 11 12 13 14 15)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11\
    \ 12 13 14 15 16)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12\
    \ 13 14 15 16 17)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12\
    \ 13 14 15 16 17 18)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11\
    \ 12 13 14 15 16 17 18 19)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9\
    \ 10 11 12 13 14", "  (let ((result 0))\n    (for-each (lambda (x)\n         \
    \       (if (modulo x 3)\n                  (+ (* x x) result)\n             \
    \   (if (modulo x 4)\n                  (+ (* x x) (* x x))\n                (+\
    \ (* x x) result))))\n      lst))\n;; >>> sum_squares '(1 2 3)\n;; 3\n;; >>> sum_squares\
    \ '(-1 -5 2 -1 -5)\n;; -2\n;; >>> sum_squares '(1 2 3 4 5 6)\n;; -1\n;; >>> sum_squares\
    \ '(1 2 3 4 5 6 7)\n;; 0\n;; >>> sum_squares '(1 2 3 4 5 6 7 8)\n;; 0\n;; >>>\
    \ sum_squares '(1 2 3 4 5 6 7 8 9)\n;; 0\n;; >>> sum_squares '(1 2 3 4 5 6 7 8\
    \ 9 10)\n;; 0\n;; >>> sum_squares '(1 2 3 4 5 6 7 8 9 10 11)\n;; 0\n;; >>> sum_squares\
    \ '(1 2 3 4 5 6 7 8 9 10 11 12)\n;; 0\n;; >>> sum_squares '(1 2 3 4 5 6 7 8 9\
    \ 10 11 12 13)\n;; 0\n;; >>> sum_squares '(1 2 3 4 5 6 7 8 9 10 11 12 13 14)\n\
    ;; 0\n;; >>> sum_squares '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)\n;; 0\n;; >>>\
    \ sum_squares '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)\n;; 0\n;; >>> sum_squares\
    \ '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)\n;; 0\n;; >>> sum_squares '(1 2\
    \ 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)\n;; 0\n;; >>> sum_squares '(1 2 3\
    \ 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)\n;; 0\n;; >>> sum_squares '(1 2 3\
    \ 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)\n;; 0\n;; >>> sum_squares '(1\
    \ 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16", "  (let ((sum (0)))\n    (for-each (lambda\
    \ (x)\n                (if (modulo (car x) 3)\n                  (+ (car x) (car\
    \ x))\n                  (+ (car x) (car x) (car x))))\n              lst\n  \
    \            (setf sum (+ sum (car x))))\n    sum))\n;; >>> sum_squares (list\
    \ 1 2 3)\n;; -1\n;; >>> sum_squares (list )\n;; 0\n;; >>> sum_squares (list -1\
    \ -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6)\n;; -1\n;; >>> sum_squares\
    \ (list 1 2 3 4 5 6 7)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8)\n;; -1\n\
    ;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9)\n;; -1\n;; >>> sum_squares (list 1\
    \ 2 3 4 5 6 7 8 9 10)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11)\n\
    ;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12)\n;; -1\n;; >>> sum_squares\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13)\n;; -1\n;; >>> sum_squares (list 1 2 3\
    \ 4 5 6 7 8 9 10 11 12 13 14)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8\
    \ 9 10 11 12 13 14 15)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11\
    \ 12 13 14 15 16)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12\
    \ 13 14 15 16 17)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12\
    \ 13 14 15 16 17 18)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11\
    \ 12 13 14 15 16 17 18 19)\n;; -1\n;; >>> sum_squares (", "  (let ((sum (0)))\n\
    \    (for-each (lambda (x)\n      (if (modulo x 3)\n        (+ (* x x) sum)\n\
    \      (if (modulo x 4)\n        (+ (* x x) (* x x))\n      (+ (* x x) (* x x)))))\n\
    \      lst))\n;; >>> sum_squares (list 1 2 3)\n;; -1\n;; >>> sum_squares (list\
    \ )\n;; 0\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list 1 2 3 4 5 6)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7)\n;; -1\n\
    ;; >>> sum_squares (list 1 2 3 4 5 6 7 8)\n;; -1\n;; >>> sum_squares (list 1 2\
    \ 3 4 5 6 7 8 9)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10)\n;; -1\n\
    ;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11)\n;; -1\n;; >>> sum_squares (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8\
    \ 9 10 11 12 13)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13\
    \ 14)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)\n\
    ;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)\n;; -1\n\
    ;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)\n;; -1\n;;\
    \ >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)\n;; -1\n\
    ;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)\n;;\
    \ -1\n;; >>> sum_squares (list", "  (let ((result 0))\n    (for-each (lambda (x)\n\
    \                (if (modulo x 3)\n                  (+ (* x x) result)\n    \
    \            (if (modulo x 4)\n                  (+ (* x x) (* x x))\n       \
    \         (+ (* x x) (* x x)))))\n      lst))\n", "  (let ((sum (0)))\n    (for-each\
    \ (lambda (x)\n      (if (modulo x 3)\n        (+ (* x x) sum)\n      (if (modulo\
    \ x 4)\n        (+ (* x x) (* x x))\n      (+ (* x x) (* x x)))))\n      lst))\n\
    ;; >>> sum_squares (list 1 2 3)\n;; (list )\n;; >>> sum_squares (list -1 -5 2\
    \ -1 -5)\n;; (list -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares (list 1 2 3 4 5 6 7\
    \ 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\
    \ 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59\
    \ 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85\
    \ 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100)\n;; (list -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -", "  (let ((sum\
    \ (0)))\n    (for-each (lambda (x)\n                (if (modulo (car x) 3)\n \
    \                 (+ (* (car x) (car x)))\n                  (+ (* (car x) (car\
    \ x)) (* (car x) (car x))))\n                (+ sum (* (car x) (car x))))\n  \
    \    lst))\n)\n", "  (let ((result 0))\n    (for-each (lambda (x)\n          \
    \      (if (modulo x 3)\n                  (+ result (* x x)))\n             \
    \   (if (modulo x 4)\n                  (+ result (* x (* x x)))))\n      lst))\n\
    \  result)\n", "  (let ((result 0))\n    (for-each (lambda (x)\n             \
    \   (if (modulo x 3)\n                  (+ (* x x) result)\n                 \
    \ (if (modulo x 4)\n                    (+ (* x x) (* x x))\n                \
    \    result)))\n      lst))\n;; >>> sum_squares (list 1 2 3)\n;; (list )\n;; >>>\
    \ sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\
    \ (list 1 2 3 4 5 6)\n;; (list )\n;; >>> sum_squares (list 1 2 3 4 5 6 7)\n;;\
    \ (list )\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8)\n;; (list )\n;; >>> sum_squares\
    \ (list 1 2 3 4 5 6 7 8 9)\n;; (list )\n;; >>> sum_squares (list 1 2 3 4 5 6 7\
    \ 8 9 10)\n;; (list )\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11)\n;; (list\
    \ )\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12)\n;; (list )\n;; >>>\
    \ sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13)\n;; (list )\n;; >>> sum_squares\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14)\n;; (list )\n;; >>> sum_squares (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)\n;; (list )\n;; >>> sum_squares (list 1\
    \ 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)\n;; (list )\n;; >>> sum_squares (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)\n;; (list )\n;; >>> sum_squares (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)\n;; (list )\n;; >>> sum_squares\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)\n;; (list )\n;; >>> sum_squares",
  "  (let ((sum (0)))\n    (for-each (lambda (x)\n                (if (modulo x 3)\n\
    \                  (+ (* x x) sum)\n                (if (modulo x 4)\n       \
    \           (+ (* x x) (* x x))\n                (+ (* x x) (* x x)))))\n    \
    \  lst))\n\n;; >>> sum_squares (list 1 2 3)\n;; -1\n;; >>> sum_squares (list )\n\
    ;; 0\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list\
    \ 1 2 3 4 5 6)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7)\n;; -1\n;; >>>\
    \ sum_squares (list 1 2 3 4 5 6 7 8)\n;; -1\n;; >>> sum_squares (list 1 2 3 4\
    \ 5 6 7 8 9)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10)\n;; -1\n;;\
    \ >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11)\n;; -1\n;; >>> sum_squares (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8\
    \ 9 10 11 12 13)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13\
    \ 14)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)\n\
    ;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)\n;; -1\n\
    ;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)\n;; -1\n;;\
    \ >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)\n;; -1\n\
    ;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)\n;;\
    \ -1\n;; >>> sum_squares (", "  (let ((result 0))\n    (for-each (lambda (x)\n\
    \      (if (modulo (car x) 3)\n        (set! result (+ result (car x) (car x)\
    \ (car x)))\n      (if (modulo (car x) 4)\n        (set! result (+ result (car\
    \ x) (car x) (car x) (car x)))\n      (set! result (+ result (car x))))))\n  \
    \  lst))\n;; >>> sum_squares (list 1 2 3)\n;; (list )\n;; >>> sum_squares (list\
    \ -1 -5 2 -1 -5)\n;; (list -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; (list -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n\
    ;; (list -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list\
    \ -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5\
    \ -1 -5 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 -1 -5\
    \ -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 -1 -5 -1 -5)\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; (list -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares (list\
    \ -1 -5 2 -1 -5)\n;; (list -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; (list -1 -5 -", "  (let ((sum (0)))\n    (for-each (lambda (x)\n\
    \      (if (modulo (car x) 3)\n        (+ (car x) (car x))\n        (+ (car x)\
    \ (car x) (car x))\n      )\n    )\n    lst)\n    (+ sum (car lst)))\n)\n\n;;\
    \ >>> sum_squares (list 1 2 3)\n;; 6\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n\
    ;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list\
    \ -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>>\
    \ sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1\
    \ -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;;", "  (let ((sum (0)))\n    (for-each (lambda (x)\n\
    \      (if (modulo (car x) 3)\n        (+ (square (car x)) sum)\n        (if (modulo\
    \ (car x) 4)\n          (+ (cube (car x)) sum)\n          (sum))))\n      lst))\n\
    ;; >>> sum_squares (list 1 2 3)\n;; (list )\n;; >>> sum_squares (list -1 -5 2\
    \ -1 -5)\n;; (list -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares (list 1 2 3 4 5 6)\n\
    ;; (list )\n;; >>> sum_squares (list -1 -5 2 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5", "  (let ((result 0))\n    (for-each (lambda (x)\n         \
    \       (if (modulo x 3)\n                  (+ result (* x x)))\n            \
    \    (if (modulo x 4)\n                  (+ result (* x x x)))\n             \
    \   (set! result 0)))\n      lst))\n\n;; >>> sum_squares (list 1 2 3)\n;; (list\
    \ )\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n;; >>>\
    \ sum_squares (list 1 2 3 4 5 6)\n;; (list )\n;; >>> sum_squares (list -1 -5 2\
    \ -1 -5 6)\n;; (list -1 -5 2 -1 -5 6)\n;; >>> sum_squares (list 1 2 3 4 5 6 7)\n\
    ;; (list )\n;; >>> sum_squares (list -1 -5 2 -1 -5 6 7)\n;; (list -1 -5 2 -1 -5\
    \ 6 7)\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8)\n;; (list )\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5 6 7 8)\n;; (list -1 -5 2 -1 -5 6 7 8)\n;; >>> sum_squares\
    \ (list 1 2 3 4 5 6 7 8 9)\n;; (list )\n;; >>> sum_squares (list -1 -5 2 -1 -5\
    \ 6 7 8 9)\n;; (list -1 -5 2 -1 -5 6 7 8 9)\n;; >>> sum_squares (list 1 2 3 4\
    \ 5 6 7 8 9 10)\n;; (list )\n;; >>> sum_squares (list -1 -5 2 -1 -5 6 7 8 9 10)\n\
    ;; (list -1 -5 2 -1 -5 6 7 8 9 10)\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9\
    \ 10 11)\n;; (list )\n;; >>> sum_squares (list -1 -5 2 -1 -5 6 7 8 9 10 11)\n\
    ;; (list -1 -5 2 -1 -5 6 7 8 9 10 11)\n;; >>> sum_squares (list", "  (let ((sum\
    \ (0)))\n    (for-each (lambda (x)\n                (if (modulo x 3)\n       \
    \           (+ (* x x) sum)\n                (if (modulo x 4)\n              \
    \    (+ (* x x) (* x x) sum)\n                (+ (* x x) (* x x) (* x x) sum))))\n\
    \      lst))\n;; >>> sum_squares (list 1 2 3)\n;; (list )\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; (list -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares (list\
    \ 1 2 3 4 5 6)\n;; (list )\n;; >>> sum_squares (list -1 -5 2 -1 -5 6)\n;; (list\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -", "  (let ((result 0))\n    (for-each (lambda (x)\n \
    \     (if (modulo x 3)\n        (+ result (* x x)))\n      (if (modulo x 4)\n\
    \        (+ result (* x x x)))\n      (set! result 0)))\n    lst))\n\n;; >>> sum_squares\
    \ (list 1 2 3)\n;; (list )\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list\
    \ -1 -5 2 -1 -5)\n;; >>> sum_squares (list 1 2 3 4 5 6)\n;; (list )\n;; >>> sum_squares\
    \ (list 1 2 3 4 5 6 7)\n;; (list )\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8)\n\
    ;; (list )\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9)\n;; (list )\n;; >>> sum_squares\
    \ (list 1 2 3 4 5 6 7 8 9 10)\n;; (list )\n;; >>> sum_squares (list 1 2 3 4 5\
    \ 6 7 8 9 10 11)\n;; (list )\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11\
    \ 12)\n;; (list )\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13)\n;;\
    \ (list )\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14)\n;; (list\
    \ )\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)\n;; (list )\n\
    ;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)\n;; (list )\n\
    ;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)\n;; (list\
    \ )\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)\n\
    ;; (list )\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\
    \ 18 19)\n;; (list )\n;; >>> sum_", "  (let ((sum (0)))\n    (for-each (lambda\
    \ (x)\n      (if (modulo x 3)\n        (+ (* x x) sum)\n      (if (modulo x 4)\n\
    \        (+ (* x x) (* x x))\n      (sum (+ (* x x) (* x x)))))\n      lst))\n\
    \  sum)\n\n;; >>> sum_squares (list 1 2 3)\n;; -1\n;; >>> sum_squares (list )\n\
    ;; 0\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list\
    \ -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>>\
    \ sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1\
    \ -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squ", "  (define (square n)\n    (if\
    \ (modulo n 3)\n      (+ n (* n n))\n      (* n n)))\n  (define (cube n)\n   \
    \ (if (modulo n 4)\n      (+ n (* n (* n n))))\n    (* n n))\n  (+ (reduce (lambda\
    \ (a b) (square a) (square b)) lst)\n     (reduce (lambda (a b) (cube a) (cube\
    \ b)) lst)))\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\
    \ (list 1 2 3)\n;; (list 1 2 9)\n;; >>> sum_squares (list 1 2 3 4 5 6)\n;; (list\
    \ 1 2 9 16 25 36)\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9)\n;; (list 1 2 9\
    \ 16 25 36 49 64 81)\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14\
    \ 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40\
    \ 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66\
    \ 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92\
    \ 93 94 95 96 97 98 99 100)\n;; (list 1 2 9 16 25 36 49 64 81 100 121 144 169\
    \ 196 225 256 289 324 361 494 649 796 1025 1296 1625)\n;; >>> sum_squares (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\
    \ 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55\
    \ 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81\
    \ 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105\
    \ 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124\
    \ 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140", "  (let ((result\
    \ 0))\n    (for-each (lambda (x)\n                (if (modulo x 3)\n         \
    \         (+ (* x x) result)\n                  (if (modulo x 4)\n           \
    \         (+ (* x x) (* x x))\n                    (+ (* x x) result)))))\n  \
    \  (+ result lst)))\n\n;; >>> sum_squares '(1 2 3 4 5 6 7 8 9 10)\n;; (list -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -", "  (define\
    \ sum (0))\n  (define squares (0))\n  (define multiples (0))\n  (define multiples_sum\
    \ (0))\n  (define multiples_squares (0))\n  (define lst (lst))\n  (while (not\
    \ (null? lst))\n    (if (zero? (modulo (car lst) 3))\n      (sum_squares (cdr\
    \ lst))\n      (if (zero? (modulo (car lst) 4))\n        (multiples_sum (cdr lst))\n\
    \        (multiples_squares (cdr lst))))\n    (setq lst (cdr lst))))\n;; >>> sum_squares\
    \ (list 1 2 3)\n;; (list )\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list\
    \ -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares (list 1 2 3 4 5 6)\n;; (list -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1", "  (let ((i (0)))\n    (while (< i (length lst))\n\
    \      (if (modulo (car lst) 3)\n        (setq i (+ i 1))\n        (else\n   \
    \       (setq i (+ i 2))\n          (setq lst (cdr lst)))))))\n;; >>> sum_squares\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n;; (list )\n;; >>> sum_squares\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n;;", "  (define sum (0))\n  (define\
    \ squares (0))\n  (define cubed (0))\n  (for ([index (first lst)])\n    (if (modulo\
    \ index 3)\n      (set! sum (+ sum (square index)))\n      (set! squares (+ squares\
    \ (square index)))\n      (set! cubed (+ cubed (cube index))))\n    (set! lst\
    \ (cdr lst)))\n  (+ sum squares cubed))\n\n;; >>> sum_squares (list 1 2 3)\n;;\
    \ 6\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -3\n;; >>> sum_squares (list)\n\
    ;; 0\n;; >>> sum_squares (list 1 2 3 4 5 6)\n;; 6\n;; >>> sum_squares (list 1\
    \ 2 3 4 5 6 7)\n;; 7\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8)\n;; 8\n;; >>>\
    \ sum_squares (list 1 2 3 4 5 6 7 8 9)\n;; 9\n;; >>> sum_squares (list 1 2 3 4\
    \ 5 6 7 8 9 10)\n;; 10\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11)\n;;\
    \ 11\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12)\n;; 12\n;; >>> sum_squares\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13)\n;; 13\n;; >>> sum_squares (list 1 2 3\
    \ 4 5 6 7 8 9 10 11 12 13 14)\n;; 14\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8\
    \ 9 10 11 12 13 14 15)\n;; 15\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11\
    \ 12 13 14 15 16)\n;; 16\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12\
    \ 13 14 15 16 17)\n;; 17\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12\
    \ 13 14 15 16 17 18)\n;; 18\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11\
    \ 12 13 14 15 16 17 18 19", "  (define (square x) (* x x))\n  (define (cube x)\
    \ (* x (* x x)))\n  (define (sum_squares_helper lst)\n    (if (null? lst)\n  \
    \    0\n    (+ (square (car lst))\n      (sum_squares_helper (cdr lst)))))\n \
    \ (sum_squares_helper lst))\n", "  (let ((lst (lst)))\n    (let ((lst (lst)))\n\
    \      (let ((lst (lst)))\n        (let ((lst (lst)))\n          (let ((lst (lst)))\n\
    \            (let ((lst (lst)))\n              (let ((lst (lst)))\n          \
    \      (let ((lst (lst)))\n                  (let ((lst (lst)))\n            \
    \        (let ((lst (lst)))\n                      (let ((lst (lst)))\n      \
    \                  (let ((lst (lst)))\n                          (let ((lst (lst)))\n\
    \                            (let ((lst (lst)))\n                            \
    \  (let ((lst (lst)))\n                                (let ((lst (lst)))\n  \
    \                                (let ((lst (lst)))\n                        \
    \            (let ((lst (lst)))\n                                      (let ((lst\
    \ (lst)))\n                                        (let ((lst (lst)))\n      \
    \                                    (let ((lst (lst)))\n                    \
    \                        (let ((lst (lst)))\n                                \
    \              (let ((lst (lst)))\n                                          \
    \      (let ((lst (lst)))\n                                                  (let\
    \ ((lst (lst)))\n                                                    (let ((lst\
    \ (lst)))\n                                                      (let ((lst (lst)))\n\
    \                                                        (let ((lst (lst)))\n\
    \                                                          (let ((lst (lst)))\n\
    \                                                            (let ((lst (lst)))\n\
    \                                                              (let ((lst (lst)))\n\
    \                                                                (let ((lst (lst)))\n\
    \                                                                  (let ((lst\
    \ (lst)))\n                                                                  \
    \  (let ((lst (lst)))\n                                                      \
    \                (let ((lst (lst)))\n                                        \
    \                                (let ((lst (lst)))\n                        \
    \                                                  (let ((lst (lst)))\n      \
    \                                                                      (let ((lst\
    \ (lst)))\n                                                                  \
    \            (let ((lst (", "  (let ((sum 0))\n    (for-each (lambda (x)\n   \
    \   (if (modulo x 3)\n        (+ (* x x) sum)\n      (if (modulo x 4)\n      \
    \  (+ (* x x) (* x x))\n      (+ (* x x) (* x x)))))\n      lst))\n\n;; >>> sum_squares\
    \ (list 1 2 3)\n;; 6\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>>", "  (let ((sum (0)))\n    (for-each (lambda (x)\n      (if (modulo x 3)\n\
    \        (+ (* x x) sum)\n      (if (modulo x 4)\n        (+ (* x x) (* x x))\n\
    \      (+ (* x x) sum))))\n      lst))\n  )\n\n;; >>> sum_squares (list 1 2 3)\n\
    ;; -1\n;; >>> sum_squares (list )\n;; 0\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n\
    ;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\
    \ 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45\
    \ 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71\
    \ 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97\
    \ 98 99 100)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14\
    \ 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40\
    \ 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66\
    \ 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92\
    \ 93 94 95 96 97 98 99 100 100 100 100 100 100 100 100 100 100 100 100 100 100\
    \ 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\
    \ 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\
    \ 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\
    \ 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\
    \ 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\
    \ 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\
    \ 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\
    \ 100 100 100 100 100 100 100 100 100 100", "  (define (square x) (* x x))\n \
    \ (define (cube x) (* x (* x x)))\n  (define (sum_squares_helper lst)\n    (if\
    \ (null? lst)\n      0\n    (+ (square (car lst))\n      (sum_squares_helper (cdr\
    \ lst)))))\n  (sum_squares_helper lst))\n", "  (let ((lst (lst)))\n    (let ((lst\
    \ (lst)))\n      (let ((lst (lst)))\n        (let ((lst (lst)))\n          (let\
    \ ((lst (lst)))\n            (let ((lst (lst)))\n              (let ((lst (lst)))\n\
    \                (let ((lst (lst)))\n                  (let ((lst (lst)))\n  \
    \                  (let ((lst (lst)))\n                      (let ((lst (lst)))\n\
    \                        (let ((lst (lst)))\n                          (let ((lst\
    \ (lst)))\n                            (let ((lst (lst)))\n                  \
    \            (let ((lst (lst)))\n                                (let ((lst (lst)))\n\
    \                                  (let ((lst (lst)))\n                      \
    \              (let ((lst (lst)))\n                                      (let\
    \ ((lst (lst)))\n                                        (let ((lst (lst)))\n\
    \                                          (let ((lst (lst)))\n              \
    \                              (let ((lst (lst)))\n                          \
    \                    (let ((lst (lst)))\n                                    \
    \            (let ((lst (lst)))\n                                            \
    \      (let ((lst (lst)))\n                                                  \
    \  (let ((lst (lst)))\n                                                      (let\
    \ ((lst (lst)))\n                                                        (let\
    \ ((lst (lst)))\n                                                          (let\
    \ ((lst (lst)))\n                                                            (let\
    \ ((lst (lst)))\n                                                            \
    \  (let ((lst (lst)))\n                                                      \
    \          (let ((lst (lst)))\n                                              \
    \                    (let ((lst (lst)))\n                                    \
    \                                (let ((lst (lst)))\n                        \
    \                                              (let ((lst (lst)))\n          \
    \                                                              (let ((lst (lst)))\n\
    \                                                                          (let\
    \ ((lst (lst)))\n                                                            \
    \                (let ((lst (lst)))\n                                        \
    \                                      (let ((lst (", "  (define (square x) (*\
    \ x x))\n  (define (cube x) (* x (* x x)))\n  (define (square_cube x)\n    (if\
    \ (modulo x 3)\n      (+ (square x) (square x))\n      (+ (cube x) (cube x))))\n\
    \  (+ (sum_squares lst)\n     (sum_squares (cdr lst))))\n", "  (let ((result 0))\n\
    \    (for-each (lambda (x)\n                (if (modulo x 3)\n               \
    \   (+ (* x x) result)\n                (if (modulo x 4)\n                  (+\
    \ (* x x) (* x x))\n                (+ (* x x) result))))\n      lst))\n", " \
    \ (let ((sum (0)))\n    (for-each (lambda (x)\n                (if (modulo x 3)\n\
    \                  (+ (* x x) sum)\n                (if (modulo x 4)\n       \
    \           (+ (* x x) (* x x))\n                (+ (* x x) (* x x)))))\n    \
    \  lst))\n", "  (define (square x) (* x x))\n  (define (cube x) (* x (* x x)))\n\
    \  (define (sum_squares_helper lst)\n    (if (null? lst)\n      0\n    (+ (square\
    \ (car lst))\n      (sum_squares_helper (cdr lst)))))\n  (sum_squares_helper lst))\n",
  "  (let ((result 0))\n    (for-each (lambda (x)\n      (if (modulo (car x) 3)\n\
    \        (+ (square (car x)) result)\n        (if (modulo (car x) 4)\n       \
    \   (+ (cube (car x)) result)\n          (+ (car x) result))))\n      lst))\n\
    \  result)\n;; >>> sum_squares (list 1 2 3)\n;; 6\n;; >>> sum_squares (list -1\
    \ -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5", "  (define (square n) (* n n))\n  (define (cube n) (*\
    \ n (* n n)))\n  (define (sum_squares_helper lst)\n    (if (null? lst)\n     \
    \ 0\n    (+ (square (car lst))\n      (sum_squares_helper (cdr lst)))))\n  (sum_squares_helper\
    \ lst))\n\n;; >>> sum_squares (list 1 2 3)\n;; (list )\n;; >>> sum_squares (list\
    \ -1 -5 2 -1 -5)\n;; (list -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; (list -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n\
    ;; (list -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list\
    \ -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5\
    \ -1 -5 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 -1 -5\
    \ -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 -1 -5 -1 -5)\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; (list -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares (list\
    \ -1 -5 2 -1 -5)\n;; (list -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; (list -1 -5 -1 -5 -1 -5)\n;; >>>", "  (let ((sum (0)))\n    (for-each\
    \ (lambda (x)\n      (if (modulo (car x) 3)\n        (+ (car x) (car x))\n   \
    \     (+ (car x) (car x) (car x))\n      )\n    )\n    lst)\n    sum)\n)\n", " \
    \ (let ((result 0))\n    (for-each (lambda (x)\n                (if (modulo x\
    \ 3)\n                  (+ result (* x x)))\n                (if (modulo x 4)\n\
    \                  (+ result (* x x) (* x x)))))\n    (+ result lst)))\n;; >>>\
    \ sum_squares lst\n;; (list -1 -5 -1 -5)\n;; >>> sum_squares lst\n;; (list )\n\
    ;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)", "  (define (square x) (* x x))\n\
    \  (define (cube x) (* x (* x x)))\n  (define (sum_squares_helper lst)\n    (if\
    \ (null? lst)\n      0\n    (+ (square (car lst))\n      (sum_squares_helper (cdr\
    \ lst)))))\n  (sum_squares_helper lst))\n;; >>> sum_squares (list 1 2 3)\n;; 6\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list 1 2 3\
    \ 4 5 6)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7)\n;; -1\n;; >>> sum_squares\
    \ (list 1 2 3 4 5 6 7 8)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9)\n\
    ;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10)\n;; -1\n;; >>> sum_squares\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6\
    \ 7 8 9 10 11 12)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12\
    \ 13)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14)\n;; -1\n\
    ;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)\n;; -1\n;; >>> sum_squares\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)\n;; -1\n;; >>> sum_squares (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)\n;; -1\n;; >>> sum_squares (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)\n;; -1\n;; >>> sum_squares (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)\n;; -1\n;; >>> sum_squares\
    \ (", "  (let ((lst (lst)))\n    (let ((lst (lst)))\n      (let ((lst (lst)))\n\
    \        (let ((lst (lst)))\n          (let ((lst (lst)))\n            (let ((lst\
    \ (lst)))\n              (let ((lst (lst)))\n                (let ((lst (lst)))\n\
    \                  (let ((lst (lst)))\n                    (let ((lst (lst)))\n\
    \                      (let ((lst (lst)))\n                        (let ((lst\
    \ (lst)))\n                          (let ((lst (lst)))\n                    \
    \        (let ((lst (lst)))\n                              (let ((lst (lst)))\n\
    \                                (let ((lst (lst)))\n                        \
    \          (let ((lst (lst)))\n                                    (let ((lst\
    \ (lst)))\n                                      (let ((lst (lst)))\n        \
    \                                (let ((lst (lst)))\n                        \
    \                  (let ((lst (lst)))\n                                      \
    \      (let ((lst (lst)))\n                                              (let\
    \ ((lst (lst)))\n                                                (let ((lst (lst)))\n\
    \                                                  (let ((lst (lst)))\n      \
    \                                              (let ((lst (lst)))\n          \
    \                                            (let ((lst (lst)))\n            \
    \                                            (let ((lst (lst)))\n            \
    \                                              (let ((lst (lst)))\n          \
    \                                                  (let ((lst (lst)))\n      \
    \                                                        (let ((lst (lst)))\n\
    \                                                                (let ((lst (lst)))\n\
    \                                                                  (let ((lst\
    \ (lst)))\n                                                                  \
    \  (let ((lst (lst)))\n                                                      \
    \                (let ((lst (lst)))\n                                        \
    \                                (let ((lst (lst)))\n                        \
    \                                                  (let ((lst (lst)))\n      \
    \                                                                      (let ((lst\
    \ (lst)))\n                                                                  \
    \            (let ((lst (", "  (let ((result 0))\n    (for-each (lambda (x)\n\
    \                (if (modulo x 3)\n                  (+ (* x x) result)\n    \
    \            (if (modulo x 4)\n                  (+ (* x x) (* x x))\n       \
    \         (+ (* x x) result))))\n      lst))\n\n;; >>> sum_squares (list 1 2 3)\n\
    ;; 6\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list\
    \ 1 2 3 4 5 6)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7)\n;; -1\n;; >>>\
    \ sum_squares (list 1 2 3 4 5 6 7 8)\n;; -1\n;; >>> sum_squares (list 1 2 3 4\
    \ 5 6 7 8 9)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10)\n;; -1\n;;\
    \ >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11)\n;; -1\n;; >>> sum_squares (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8\
    \ 9 10 11 12 13)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13\
    \ 14)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)\n\
    ;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)\n;; -1\n\
    ;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)\n;; -1\n;;\
    \ >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)\n;; -1\n\
    ;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)\n;;\
    \ -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17", " \
    \ (define sum (0))\n  (define squares (0))\n  (define cube (0))\n  (for ([i (first\
    \ lst)])\n    (if (modulo i 3)\n      (set! sum (+ sum (square i)))\n      (set!\
    \ squares (+ squares (square i)))\n      (set! cube (+ cube (cube i))))\n    (set!\
    \ lst (cdr lst))\n    (set! sum (sum squares))\n    (set! squares (squares cube))\n\
    \    (set! cube (cube lst)))\n  (+ sum squares cube))\n\n;; >>> sum_squares (list\
    \ 1 2 3)\n;; 6\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -6\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -6\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -6\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -6\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -6\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -6\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -6\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -6\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -6\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -6\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -6\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -6\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -6\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -6\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -6\n;; >>> sum_squares (list -1 -5 2 -1", "  (let ((result 0))\n\
    \    (for-each (lambda (x)\n                (if (modulo x 3)\n               \
    \   (+ (* x x) result)\n                  (if (modulo x 4)\n                 \
    \   (+ (* x x) (* x x))\n                    (+ (* x x) (* x x)))))\n      lst))\n\
    ;; >>> sum_squares '(1 2 3 4 5 6)\n;; (list -1 -5 -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares\
    \ '(1 2 3 4 5 6)\n;; (list -1 -5 -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares '(1 2\
    \ 3 4 5 6)\n;; (list -1 -5 -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares '(1 2 3 4 5\
    \ 6)\n;; (list -1 -5 -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares '(1 2 3 4 5 6)\n;;\
    \ (list -1 -5 -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares '(1 2 3 4 5 6)\n;; (list\
    \ -1 -5 -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares '(1 2 3 4 5 6)\n;; (list -1 -5\
    \ -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares '(1 2 3 4 5 6)\n;; (list -1 -5 -1 -5\
    \ -1 -5 -1 -5)\n;; >>> sum_squares '(1 2 3 4 5 6)\n;; (list -1 -5 -1 -5 -1 -5\
    \ -1 -5)\n;; >>> sum_squares '(1 2 3 4 5 6)\n;; (list -1 -5 -1 -5 -1 -5 -1 -5)\n\
    ;; >>> sum_squares '(1 2 3 4 5 6)\n;; (list -1 -5 -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares\
    \ '(1 2 3 4 5 6)\n;; (list -1 -5 -1 -5 -1 -5 -1 -5)\n;;", "  (let ((sum (0)))\n\
    \    (for-each (lambda (x)\n      (if (modulo (car x) 3)\n        (+ (car x) (car\
    \ x))\n        (+ (car x) (car x) (car x)))))\n      lst))\n\n;; >>> sum_squares\
    \ (list 1 2 3)\n;; 6\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list 1 2 3 4 5 6)\n;; 6\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9)\n;; 24\n\
    ;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\
    \ 22 23 24)\n;; 100\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14\
    \ 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40\
    \ 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66\
    \ 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92\
    \ 93 94 95 96 97 98 99)\n;; 100\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10\
    \ 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36\
    \ 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62\
    \ 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88\
    \ 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110\
    \ 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129\
    \ 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148\
    \ 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167\
    \ 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186\
    \ 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205\
    \ 206 207", "  (define (square x) (* x x))\n  (define (cube x) (* x (* x x)))\n\
    \  (define (sum_squares_helper lst)\n    (if (null? lst)\n      0\n    (+ (square\
    \ (car lst))\n      (sum_squares_helper (cdr lst)))))\n  (sum_squares_helper lst))\n\
    ;; >>> sum_squares (list 1 2 3)\n;; 6\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n\
    ;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list\
    \ -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>>\
    \ sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1\
    \ -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1", "  (let ((i (0)))\n    (while (< i (length lst))\n      (if (modulo\
    \ (car lst) 3)\n        (set! lst (cdr lst))\n        (set! lst (cons (car lst)\
    \ (cons (car lst) (cons (car lst) (cons (car lst) (cons (car lst) (cons (car lst)\
    \ (cons (car lst) (cons (car lst) (cons (car lst) (cons (car lst) (cons (car lst)\
    \ (cons (car lst) (cons (car lst) (cons (car lst) (cons (car lst) (cons (car lst)\
    \ (cons (car lst) (cons (car lst) (cons (car lst) (cons (car lst) (cons (car lst)\
    \ (cons (car lst) (cons (car lst) (cons (car lst) (cons (car lst) (cons (car lst)\
    \ (cons (car lst) (cons (car lst) (cons (car lst) (cons (car lst) (cons (car lst)\
    \ (cons (car lst) (cons (car lst) (cons (car lst) (cons (car lst) (cons (car lst)\
    \ (cons (car lst) (cons (car lst) (cons (car lst) (cons (car lst) (cons (car lst)\
    \ (cons (car lst) (cons (car lst) (cons (car lst) (cons (car lst) (cons (car lst)\
    \ (cons (car lst) (cons (car lst) (cons (car lst) (cons (car lst) (cons (car lst)\
    \ (cons (car lst) (cons (car lst) (cons (car lst) (cons (car lst) (cons (car lst)\
    \ (cons (car lst) (cons (car lst) (cons (car lst) (cons (car lst) (cons (car lst)\
    \ (cons (car lst) (cons (car lst) (cons (car lst) (cons (car lst) (cons (car",
  "  (let ((sum (0)))\n    (for-each (lambda (x)\n                (if (modulo x 3)\n\
    \                  (+ (* x x) sum)\n                (if (modulo x 4)\n       \
    \           (+ (* x x) (* x x))\n                (+ (* x x) (* x x)))))\n    \
    \  lst))\n\n;; >>> sum_squares (list 1 2 3)\n;; (list )\n;; >>> sum_squares (list\
    \ -1 -5 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1\
    \ -5)\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list\
    \ -1 -5 2 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 2 -1\
    \ -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n;; >>>\
    \ sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1\
    \ -5 2 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5", "  (define (square x) (* x x))\n  (define (cube x) (*\
    \ x (* x x)))\n  (define (sum_squares_helper lst)\n    (if (null? lst)\n     \
    \ 0\n    (+ (square (car lst))\n      (sum_squares_helper (cdr lst)))))\n  (sum_squares_helper\
    \ lst))\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>>\
    \ sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1\
    \ -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\
    \ lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n\
    ;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list\
    \ -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\
    \ lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n\
    ;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list\
    \ -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\
    \ lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n\
    ;; >>> sum", "  (let ((result 0))\n    (for-each (lambda (x)\n      (if (modulo\
    \ (car x) 3)\n        (+ (car x) (car x))\n        (+ (car x) (car x) (car x))\n\
    \      )\n    )\n    lst))\n)\n\n;; >>> sum_squares (list 1 2 3)\n;; (list )\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; (list -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares (list\
    \ -1 -5 2 -1 -5)\n;; (list -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; (list -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n\
    ;; (list -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list\
    \ -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5\
    \ -1 -5 -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 -1 -5\
    \ -1 -5)\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 -1 -5 -1 -5)\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; (list -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares (list\
    \ -1 -5 2 -1 -5)\n;; (list -1", "  (let ((sum (0)))\n    (for-each (lambda (x)\n\
    \      (if (modulo (car x) 3)\n        (+ (car x) (car x))\n        (+ (car x)\
    \ (car x) (car x))\n      )\n    )\n    lst)\n    sum)\n)\n", "  (let ((sum (0)))\n\
    \    (for-each (lambda (x)\n      (if (modulo (car x) 3)\n        (+ (car x) (car\
    \ x))\n        (+ (car x) (car x) (car x))\n      )\n    )\n    lst)\n    (+ sum\
    \ sum))\n)\n", "  (define (square n)\n    (if (modulo n 3)\n      (+ n (* n n))\n\
    \      (* n n)))\n  (define (cube n)\n    (if (modulo n 4)\n      (+ n (* n n))\n\
    \      (* n n)))\n  (+ (map square lst) (map cube lst))\n)\n", "  (let ((result\
    \ 0))\n    (for-each (lambda (x)\n      (if (modulo (car x) 3)\n        (+ (car\
    \ x) (car x))\n        (+ (car x) (car x) (car x))\n      )\n    )\n    lst)\n\
    \    result))\n;; >>> sum_squares (list 1 2 3)\n;; 3\n;; >>> sum_squares (list\
    \ -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>>\
    \ sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1\
    \ -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (", "  (let\
    \ ((result 0))\n    (for-each (lambda (x)\n                (if (modulo x 3)\n\
    \                  (+ (* x x) result)\n                (if (modulo x 4)\n    \
    \              (+ (* x x) (* x x))\n                (+ (* x x) result))))\n  \
    \    lst))\n;; >>> sum_squares (list 1 2 3)\n;; 6\n;; >>> sum_squares (list -1\
    \ -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares", "  (define (square n) (* n\
    \ n))\n  (define (cube n) (* n (* n n)))\n  (define (sum_squares_helper lst)\n\
    \    (if (null? lst)\n      0\n    (+ (square (car lst))\n      (sum_squares_helper\
    \ (cdr lst)))))\n  (sum_squares_helper lst))\n;; >>> sum_squares lst\n;; (list\
    \ -1 -5 2 -1 -5)\n;; >>> sum_squares_helper lst\n;; (list -1 -5 2 -1 -5)\n;; >>>\
    \ sum_squares_helper (cdr lst)\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares_helper\
    \ (cdr (cdr lst))\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares_helper (cdr (cdr\
    \ (cdr lst)))\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares_helper (cdr (cdr (cdr\
    \ (cdr lst))))\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares_helper (cdr (cdr (cdr\
    \ (cdr (cdr lst))))))\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares_helper (cdr\
    \ (cdr (cdr (cdr (cdr (cdr lst))))))\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares_helper\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst))))))))\n;; (list -1 -5 2 -1 -5)\n;;\
    \ >>> sum_squares_helper (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst))))))))))\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares_helper (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr lst))))", "  (define (square x) (* x x))\n  (define (cube x)\
    \ (* x (* x x)))\n  (define (sum_squares_helper lst)\n    (if (null? lst)\n  \
    \    0\n    (+ (square (car lst))\n      (sum_squares_helper (cdr lst)))))\n \
    \ (sum_squares_helper lst))\n", "  (let ((result 0))\n    (for-each (lambda (x)\n\
    \                (if (modulo x 3)\n                  (+ (* x x) result)\n    \
    \              (if (modulo x 4)\n                    (+ (* x x) (* x x))\n   \
    \                 (+ (* x x) (* x x)))))\n      lst))\n)\n\n;; >>> sum_squares\
    \ (list 1 2 3)\n;; 3\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list 1 2 3 4 5 6)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7)\n;; -1\n\
    ;; >>> sum_squares (list 1 2 3 4 5 6 7 8)\n;; -1\n;; >>> sum_squares (list 1 2\
    \ 3 4 5 6 7 8 9)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10)\n;; -1\n\
    ;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11)\n;; -1\n;; >>> sum_squares (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8\
    \ 9 10 11 12 13)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13\
    \ 14)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)\n\
    ;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)\n;; -1\n\
    ;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)\n;; -1\n;;\
    \ >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)\n;; -1\n\
    ;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)\n;;\
    \ -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12", "  (define (square\
    \ x) (* x x))\n  (define (cube x) (* x (* x x)))\n  (define (sum_squares_helper\
    \ lst)\n    (if (null? lst)\n      (+ 0)\n    (+ (square (car lst))\n      (sum_squares_helper\
    \ (cdr lst)))))\n  (sum_squares_helper lst))\n", "  (let ((sum 0))\n    (for-each\
    \ (lambda (x)\n                (if (modulo x 3)\n                  (+ (* x x)\
    \ sum)\n                (if (modulo x 4)\n                  (+ (* x x) (* x x))\n\
    \                (+ (* x x) (* x x)))))\n      lst))\n;; >>> sum_squares (list\
    \ 1 2 3)\n;; -1\n;; >>> sum_squares (list )\n;; 0\n;; >>> sum_squares (list -1\
    \ -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5", "  (let ((result 0))\n    (for-each (lambda (x)\n            \
    \    (if (modulo x 3)\n                  (+ result (* x x)))\n               \
    \ (if (modulo x 4)\n                  (+ result (* x (* x x))))\n            \
    \    (set! result 0)))\n      lst))\n", "  (define (square n)\n    (if (modulo\
    \ n 3)\n      (+ n (* n n))\n      (* n n)))\n  (define (cube n)\n    (if (modulo\
    \ n 4)\n      (+ n (* n (* n n)))\n      (* n n)))\n  (+ (map square lst) (map\
    \ cube lst))\n)\n;; >>> sum_squares (list 1 2 3)\n;; (list )\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; (list -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1", "  (define\
    \ (square x) (* x x))\n  (define (cube x) (* x (* x x)))\n  (define (sum_squares_helper\
    \ lst)\n    (if (null? lst)\n      0\n    (+ (square (car lst))\n      (sum_squares_helper\
    \ (cdr lst)))))\n  (sum_squares_helper lst))\n", "  (let ((sum (0)))\n    (for-each\
    \ (lambda (x)\n      (if (modulo x 3)\n        (+ (* x x) sum)\n      (if (modulo\
    \ x 4)\n        (+ (* x x) (* x x))\n      (sum (+ (* x x) (* x x)))))))\n   \
    \ (+ sum lst)))\n\n;; >>> sum_squares lst\n;; -1\n;; >>> sum_squares lst\n;; 0\n\
    ;; >>> sum_squares lst\n;; -1\n;; >>> sum_squares lst\n;; -5\n;; >>> sum_squares\
    \ lst\n;; -1\n;; >>> sum_squares lst\n;; -5\n;; >>> sum_squares lst\n;; -1\n;;\
    \ >>> sum_squares lst\n;; -5\n;; >>> sum_squares lst\n;; -1\n;; >>> sum_squares\
    \ lst\n;; -5\n;; >>> sum_squares lst\n;; -1\n;; >>> sum_squares lst\n;; -5\n;;\
    \ >>> sum_squares lst\n;; -1\n;; >>> sum_squares lst\n;; -5\n;; >>> sum_squares\
    \ lst\n;; -1\n;; >>> sum_squares lst\n;; -5\n;; >>> sum_squares lst\n;; -1\n;;\
    \ >>> sum_squares lst\n;; -5\n;; >>> sum_squares lst\n;; -1\n;; >>> sum_squares\
    \ lst\n;; -5\n;; >>> sum_squares lst\n;; -1\n;; >>> sum_squares lst\n;; -5\n;;\
    \ >>> sum_squares lst\n;; -1\n;; >>> sum_squares lst\n;; -5\n;; >>> sum_squares\
    \ lst\n;; -1\n;; >>> sum_squares lst\n;; -5\n;; >>> sum_squares lst\n;; -1\n;;\
    \ >>> sum_squares lst\n;; -5\n;; >>> sum_squares lst\n;; -1\n;; >>> sum_squares\
    \ lst\n;; -5\n;; >>> sum_squares lst\n;; -1\n;; >>> sum_squares lst\n;; -5\n;;\
    \ >>> sum_squares lst\n;; -1", "  (define (square x) (* x x))\n  (define (cube\
    \ x) (* x (* x x)))\n  (define (sum_squares_helper lst)\n    (if (null? lst)\n\
    \      0\n    (+ (square (car lst))\n      (sum_squares_helper (cdr lst))))))",
  "  (let ((result 0))\n    (for-each (lambda (x)\n                (if (modulo x 3)\n\
    \                  (+ result (* x x)))\n                (if (modulo x 4)\n   \
    \               (+ result (* x (* x x))))\n                (set! result (* x x)))\n\
    \              lst))\n  result)\n\n;; >>> sum_squares (list 1 2 3)\n;; 6\n;; >>>\
    \ sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1\
    \ -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum",
  "  (let ((sum (0)))\n    (for-each (lambda (x)\n      (if (modulo (car x) 3)\n \
    \       (+ (square (car x)) sum)\n        (if (modulo (car x) 4)\n          (+\
    \ (cube (car x)) sum)\n          (sum))))\n      lst))\n;; >>> sum_squares (list\
    \ 1 2 3)\n;; (list )\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5", "  (let ((result 0))\n    (for-each (lambda\
    \ (x)\n                (if (modulo x 3)\n                  (+ (* x x) result)\n\
    \                (if (modulo x 4)\n                  (+ (* x x) (* x x))\n   \
    \             (+ (* x x) result))))\n      lst))\n;; >>> sum_squares '(1 2 3 4\
    \ 5 6 7 8 9 10)\n;; (list -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1", "  (let ((result 0))\n    (for-each (lambda (x)\n   \
    \             (if (modulo x 3)\n                    (+ (* x x) result)\n     \
    \               (if (modulo x 4)\n                        (+ (* x x) (* x x))\n\
    \                        (+ (* x x) (* x x)))))\n      lst))\n;; >>> sum_squares\
    \ '(1 2 3 4 5 6 7 8 9)\n;; (list -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1\
    \ -5 -1 -5 -1 -5 -1 -5 -1 -5", "  (let ((i (0)))\n    (while (< i (length lst))\n\
    \      (let ((entry (aref lst i)))\n        (if (= (modulo i 3) 0)\n         \
    \   (setf entry (* entry entry))\n          (if (= (modulo i 4) 0)\n         \
    \   (setf entry (* entry entry))\n            (setf entry (* entry entry))\n \
    \         )\n        )\n        (setf i (+ i 1))\n      )\n    )\n    (+ (first\
    \ lst) (second lst) (third lst) (fourth lst) (fifth lst))\n  )\n)", "  (define\
    \ (square x) (* x x))\n  (define (cube x) (* x (* x x)))\n  (define (sum_squares_helper\
    \ lst)\n    (if (null? lst)\n      0\n    (+ (square (car lst))\n      (sum_squares_helper\
    \ (cdr lst)))))\n  (sum_squares_helper lst))\n\n;; >>> sum_squares lst\n;; (list\
    \ -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\
    \ lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n\
    ;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list\
    \ -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\
    \ lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n\
    ;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list\
    \ -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\
    \ lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n\
    ;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list\
    \ -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\
    \ lst\n;; (list -1 -5 2 -1 -5)\n;; >>>", "  (define (square x) (* x x))\n  (define\
    \ (cube x) (* x (* x x)))\n  (define (sum_squares_helper lst)\n    (if (null?\
    \ lst)\n      0\n    (+ (square (car lst))\n      (sum_squares_helper (cdr lst)))))\n\
    \  (sum_squares_helper lst))\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n\
    ;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list\
    \ -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\
    \ lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n\
    ;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list\
    \ -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\
    \ lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n\
    ;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list\
    \ -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\
    \ lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n\
    ;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares lst\n;; (list\
    \ -1 -5 2 -1 -5)\n;; >>> sum", "  (let ((sum (0)))\n    (for-each (lambda (x)\n\
    \      (if (modulo x 3)\n        (+ (* x x) sum)\n      (if (modulo x 4)\n   \
    \     (+ (* x x) (* x x))\n      (sum (+ (* x x) (* x x)))))))\n    (+ sum lst)))\n\
    \n;; >>> sum_squares (list 1 2 3)\n;; 6\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n\
    ;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6)\n;; -1\n;; >>> sum_squares (list\
    \ 1 2 3 4 5 6 7)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8)\n;; -1\n;;\
    \ >>> sum_squares (list 1 2 3 4 5 6 7 8 9)\n;; -1\n;; >>> sum_squares (list 1\
    \ 2 3 4 5 6 7 8 9 10)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11)\n\
    ;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12)\n;; -1\n;; >>> sum_squares\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13)\n;; -1\n;; >>> sum_squares (list 1 2 3\
    \ 4 5 6 7 8 9 10 11 12 13 14)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8\
    \ 9 10 11 12 13 14 15)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11\
    \ 12 13 14 15 16)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12\
    \ 13 14 15 16 17)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11 12\
    \ 13 14 15 16 17 18)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11\
    \ 12 13 14 15 16 17 18 19)\n;; -1\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9",
  "  (define (square x) (* x x))\n  (define (cube x) (* x (* x x)))\n  (define (sum_squares_helper\
    \ lst)\n    (if (null? lst)\n      0\n    (+ (square (car lst))\n      (sum_squares_helper\
    \ (cdr lst)))))\n  (sum_squares_helper lst))\n\n;; >>> sum_squares (list 1 2 3)\n\
    ;; 6\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list\
    \ -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>>\
    \ sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1\
    \ -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -", "  (let ((result 0))\n\
    \    (for-each (lambda (x)\n                (if (modulo x 3)\n               \
    \   (+ result (* x x)))\n                (if (modulo x 4)\n                  (+\
    \ result (* x x) (* x x)))))\n    (+ result lst)))\n", "  (let ((lst (lst)))\n\
    \    (let ((lst (lst)))\n      (let ((lst (lst)))\n        (let ((lst (lst)))\n\
    \          (let ((lst (lst)))\n            (let ((lst (lst)))\n              (let\
    \ ((lst (lst)))\n                (let ((lst (lst)))\n                  (let ((lst\
    \ (lst)))\n                    (let ((lst (lst)))\n                      (let\
    \ ((lst (lst)))\n                        (let ((lst (lst)))\n                \
    \          (let ((lst (lst)))\n                            (let ((lst (lst)))\n\
    \                              (let ((lst (lst)))\n                          \
    \      (let ((lst (lst)))\n                                  (let ((lst (lst)))\n\
    \                                    (let ((lst (lst)))\n                    \
    \                  (let ((lst (lst)))\n                                      \
    \  (let ((lst (lst)))\n                                          (let ((lst (lst)))\n\
    \                                            (let ((lst (lst)))\n            \
    \                                  (let ((lst (lst)))\n                      \
    \                          (let ((lst (lst)))\n                              \
    \                    (let ((lst (lst)))\n                                    \
    \                (let ((lst (lst)))\n                                        \
    \              (let ((lst (lst)))\n                                          \
    \              (let ((lst (lst)))\n                                          \
    \                (let ((lst (lst)))\n                                        \
    \                    (let ((lst (lst)))\n                                    \
    \                          (let ((lst (lst)))\n                              \
    \                                  (let ((lst (lst)))\n                      \
    \                                            (let ((lst (lst)))\n            \
    \                                                        (let ((lst (lst)))\n\
    \                                                                      (let ((lst\
    \ (lst)))\n                                                                  \
    \      (let ((lst (lst)))\n                                                  \
    \                        (let ((lst (lst)))\n                                \
    \                                            (let ((lst (lst)))\n            \
    \                                                                  (let ((lst\
    \ (", "  (let ((i (0)))\n    (while (< i (length lst))\n      (if (modulo (car\
    \ lst) 3)\n        (set! i (+ i 2))\n        (else\n          (set! i (+ i 3))\n\
    \          (set! lst (cdr lst))))))\n  (+ (map (lambda (x) (* x x)) lst) (sum_squares\
    \ lst)))\n;; >>> sum_squares\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n;;\
    \ (list )\n;; >>> sum_squares\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n;;\
    \ (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>> sum", "  (define (square x) (* x x))\n  (define\
    \ (cube x) (* x (* x x)))\n  (define (sum_squares_helper lst)\n    (if (null?\
    \ lst)\n      0\n    (+ (square (car lst))\n      (sum_squares_helper (cdr lst)))))\n\
    \  (sum_squares_helper lst))\n;; >>> sum_squares (list 1 2 3)\n;; 6\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1", "  (let ((sum (0)))\n    (for-each (lambda (x)\n\
    \                (if (modulo x 3)\n                  (+ (* x x) sum)\n       \
    \         (if (modulo x 4)\n                  (+ (* x x) (* x x))\n          \
    \      (+ (* x x) (* x x)))))\n      lst))\n\n;; >>> sum_squares (list 1 2 3)\n\
    ;; 6\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list\
    \ -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>>\
    \ sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1\
    \ -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;;", "  (let ((sum (0)))\n    (for-each (lambda (x)\n                (if (modulo\
    \ x 3)\n                  (+ (* x x) sum)\n                (if (modulo x 4)\n\
    \                  (+ (* x x) (* x x))\n                (+ (* x x) (* x x)))))\n\
    \      lst))\n;; >>> sum_squares (list 1 2 3)\n;; (list )\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; (list -1 -5 -1 -5 -1 -5)\n;; >>> sum_squares (list\
    \ 1 2 3 4 5 6)\n;; (list -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5 -1 -5\
    \ -1 -5 -1 -5 -1 -", "  (let ((i (0)))\n    (let ((result (0)))\n      (while\
    \ (< i (length lst))\n        (if (< (modulo i 3) 0)\n          (set! result (+\
    \ (square (car lst)) result))\n          (set! result (+ (cube (car lst)) result))\n\
    \          (set! i (i + 1)))\n        (set! i (i + 1))))\n    result))\n", " \
    \ (let ((sum (0)))\n    (for-each (lambda (x)\n      (if (modulo (car x) 3)\n\
    \        (+ (car x) (car x))\n        (+ (car x) (car x) (car x))\n      )\n \
    \   )\n    lst)\n    sum)\n)\n", "  (let ((sum (0)))\n    (for-each (lambda (x)\n\
    \      (if (modulo (car x) 3)\n        (set! sum (+ sum (car x) (car x)))\n  \
    \    (if (modulo (car x) 4)\n        (set! sum (+ sum (car x) (car x) (car x)))\n\
    \      (set! sum (+ sum (car x))))\n    lst))\n    sum))\n\n;; >>> sum_squares\
    \ (list 1 2 3)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>>\
    \ sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1\
    \ -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n", "  (define (square x) (* x\
    \ x))\n  (define (cube x) (* x (* x x)))\n  (define (square_cube x) (* x (* x\
    \ (* x x))))\n  (define (sum_squares_helper lst)\n    (if (null? lst)\n      (+\
    \ (square_cube (first lst)) (sum_squares_helper (rest lst)))\n      (+ (square_cube\
    \ (first lst)) (sum_squares_helper (rest lst))))\n    (sum_squares_helper lst)))\n\
    ;; >>> sum_squares lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares_helper lst\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares_helper (list 1 2 3)\n;; (list 1 2\
    \ 3)\n;; >>> sum_squares_helper (list 1 2 3 4)\n;; (list 1 2 3 4)\n;; >>> sum_squares_helper\
    \ (list 1 2 3 4 5)\n;; (list 1 2 3 4 5)\n;; >>> sum_squares_helper (list 1 2 3\
    \ 4 5 6)\n;; (list 1 2 3 4 5 6)\n;; >>> sum_squares_helper (list 1 2 3 4 5 6 7)\n\
    ;; (list 1 2 3 4 5 6 7)\n;; >>> sum_squares_helper (list 1 2 3 4 5 6 7 8)\n;;\
    \ (list 1 2 3 4 5 6 7 8)\n;; >>> sum_squares_helper (list 1 2 3 4 5 6 7 8 9)\n\
    ;; (list 1 2 3 4 5 6 7 8 9)\n;; >>> sum_squares_helper (list 1 2 3 4 5 6 7 8 9\
    \ 10)\n;; (list 1 2 3 4 5 6 7 8 9 10)\n;; >>> sum_squares_helper (list 1 2 3 4\
    \ 5 6 7 8 9 10 11)\n;; (list 1 2 3 4 5 6 7 8 9 10 11)\n;; >>> sum_squares_helper\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12)\n;; (list 1 2 3 4 5 6 7 8 9 10 11 12)", " \
    \ (let ((sum (0)))\n    (for-each (lambda (x)\n                (if (modulo x 3)\n\
    \                  (+ (* x x) sum)\n                (if (modulo x 4)\n       \
    \           (+ (* x x) (* x x))\n                (+ (* x x) (* x x)))))\n    \
    \  lst)))\n", "  (let ((result 0))\n    (for-each (lambda (x)\n              \
    \  (if (modulo x 3)\n                  (+ result (* x x)))\n                (if\
    \ (modulo x 4)\n                  (+ result (* x (* x x))))\n                (set!\
    \ result (* x x)))\n              lst))\n  result)\n", "  (let ((result 0))\n\
    \    (for-each (lambda (x)\n                (if (modulo x 3)\n               \
    \   (+ (* x x) result)\n                (if (modulo x 4)\n                  (+\
    \ (* x x) (* x x))\n                (+ (* x x) result))))\n      lst))\n\n;; >>>\
    \ sum_squares (list 1 2 3)\n;; 6\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;;\
    \ -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list\
    \ -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>>\
    \ sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1\
    \ -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squ", "  (let ((result 0))\n    (for-each\
    \ (lambda (x)\n                (if (modulo x 3)\n                  (+ (* x x)\
    \ result)\n                  (if (modulo x 4)\n                    (+ (* x x)\
    \ (* x x))\n                    (+ (* x x) result))))\n      lst))\n)\n", "  (define\
    \ (square x) (* x x))\n  (define (cube x) (* x (* x x)))\n  (define (sum_squares_helper\
    \ lst)\n    (if (null? lst)\n      0\n    (+ (square (car lst))\n      (sum_squares_helper\
    \ (cdr lst)))))\n  (sum_squares_helper lst))\n;; >>> sum_squares lst\n;; (list\
    \ -1 -5 2 -1 -5)\n;; >>> sum_squares_helper lst\n;; (list -1 -5 2 -1 -5)\n;; >>>\
    \ sum_squares_helper (cdr lst)\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares_helper\
    \ (cdr (cdr lst))\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares_helper (cdr (cdr\
    \ (cdr lst)))\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares_helper (cdr (cdr (cdr\
    \ (cdr lst))))\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares_helper (cdr (cdr (cdr\
    \ (cdr (cdr lst))))))\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares_helper (cdr\
    \ (cdr (cdr (cdr (cdr (cdr lst))))))\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares_helper\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst))))))))\n;; (list -1 -5 2 -1 -5)\n;;\
    \ >>> sum_squares_helper (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst))))))))))\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares_helper (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr lst))))", "  (let ((sum (0)))\n    (for-each (lambda (x)\n  \
    \              (if (modulo x 3)\n                  (+ (* x x) sum)\n         \
    \       (if (modulo x 4)\n                  (+ (* x x) (* x x))\n            \
    \    (+ (* x x) (* x x)))))\n      lst))\n", "  (define (square x) (* x x))\n\
    \  (define (cube x) (* x (* x x)))\n  (define (sum_squares_helper lst)\n    (if\
    \ (null? lst)\n      0\n    (+ (square (car lst))\n      (sum_squares_helper (cdr\
    \ lst)))))\n  (sum_squares_helper lst))\n;; >>> sum_squares lst\n;; (list -1 -5\
    \ 2 -1 -5)\n;; >>> sum_squares_helper lst\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares_helper\
    \ (cdr lst)\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares_helper (cdr (cdr lst))\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares_helper (cdr (cdr (cdr lst)))\n;; (list\
    \ -1 -5 2 -1 -5)\n;; >>> sum_squares_helper (cdr (cdr (cdr (cdr lst)))))\n;; (list\
    \ -1 -5 2 -1 -5)\n;; >>> sum_squares_helper (cdr (cdr (cdr (cdr (cdr lst))))))\n\
    ;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares_helper (cdr (cdr (cdr (cdr (cdr (cdr\
    \ lst))))))))\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares_helper (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr lst))))))))))\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares_helper\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst)))))))))))))\n;; (list -1 -5 2 -1\
    \ -5)\n;; >>> sum_squares_helper (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (c",
  "  (let ((sum 0))\n    (for-each (lambda (x)\n      (if (modulo x 3)\n        (+\
    \ (* x x) sum)\n        (if (modulo x 4)\n          (+ (* x x) (* x x) sum)\n\
    \          (sum))))\n      lst))\n;; >>> sum_squares (list 1 2 3)\n;; (list )\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; (list -1 -5 2 -1 -5)\n;; >>> sum_squares\
    \ (list 1 2 3 4 5 6)\n;; (list )\n;; >>> sum_squares (list -1 -5 2 -1 -5 6)\n\
    ;; (list -1 -5 2 -1 -5 6)\n;; >>> sum_squares (list 1 2 3 4 5 6 7)\n;; (list )\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5 6 7)\n;; (list -1 -5 2 -1 -5 6 7)\n;; >>>\
    \ sum_squares (list 1 2 3 4 5 6 7 8)\n;; (list )\n;; >>> sum_squares (list -1\
    \ -5 2 -1 -5 6 7 8)\n;; (list -1 -5 2 -1 -5 6 7 8)\n;; >>> sum_squares (list 1\
    \ 2 3 4 5 6 7 8 9)\n;; (list )\n;; >>> sum_squares (list -1 -5 2 -1 -5 6 7 8 9)\n\
    ;; (list -1 -5 2 -1 -5 6 7 8 9)\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10)\n\
    ;; (list )\n;; >>> sum_squares (list -1 -5 2 -1 -5 6 7 8 9 10)\n;; (list -1 -5\
    \ 2 -1 -5 6 7 8 9 10)\n;; >>> sum_squares (list 1 2 3 4 5 6 7 8 9 10 11)\n;; (list\
    \ )\n;; >>> sum_squares (list -1 -5 2 -1 -5 6 7 8 9 10 11)\n;; (list -1 -5 2 -1\
    \ -5 6 7 8 9 10 11)\n;; >>> sum_squares (", "  (define (square x) (* x x))\n \
    \ (define (cube x) (* x (* x x)))\n  (define (sum_squares_helper lst)\n    (if\
    \ (null? lst)\n      0\n    (+ (square (car lst))\n      (sum_squares_helper (cdr\
    \ lst)))))\n  (sum_squares_helper lst))\n;; >>> sum_squares lst\n;; -1\n;; >>>\
    \ sum_squares lst\n;; 0\n;; >>> sum_squares lst\n;; -1\n;; >>> sum_squares lst\n\
    ;; 0\n;; >>> sum_squares lst\n;; -1\n;; >>> sum_squares lst\n;; 0\n;; >>> sum_squares\
    \ lst\n;; -1\n;; >>> sum_squares lst\n;; 0\n;; >>> sum_squares lst\n;; -1\n;;\
    \ >>> sum_squares lst\n;; 0\n;; >>> sum_squares lst\n;; -1\n;; >>> sum_squares\
    \ lst\n;; 0\n;; >>> sum_squares lst\n;; -1\n;; >>> sum_squares lst\n;; 0\n;; >>>\
    \ sum_squares lst\n;; -1\n;; >>> sum_squares lst\n;; 0\n;; >>> sum_squares lst\n\
    ;; -1\n;; >>> sum_squares lst\n;; 0\n;; >>> sum_squares lst\n;; -1\n;; >>> sum_squares\
    \ lst\n;; 0\n;; >>> sum_squares lst\n;; -1\n;; >>> sum_squares lst\n;; 0\n;; >>>\
    \ sum_squares lst\n;; -1\n;; >>> sum_squares lst\n;; 0\n;; >>> sum_squares lst\n\
    ;; -1\n;; >>> sum_squares lst\n;; 0\n;; >>> sum_squares lst\n;; -1\n;; >>> sum_squares\
    \ lst\n;; 0\n;; >>> sum_squares lst\n;; -1\n;; >>> sum_squares lst\n;; 0\n;; >>>\
    \ sum_squares lst\n;; -1\n;; >>> sum_squares lst\n;; 0\n;; >>> sum_squares lst\n\
    ;; -1\n;; >>> sum_", "  (let ((result 0))\n    (for-each (lambda (x)\n       \
    \         (if (modulo x 3)\n                  (+ (* x x) result)\n           \
    \     (if (modulo x 4)\n                  (+ (* x x) (* x x))\n              \
    \  (+ (* x x) result))))\n      lst))\n\n;; >>> sum_squares (list 1 2 3)\n;; 6\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squ",
  "  (define (square x) (* x x))\n  (define (cube x) (* x (* x x)))\n  (define (sum_squares_helper\
    \ lst)\n    (if (null? lst)\n      0\n    (+ (square (car lst))\n      (sum_squares_helper\
    \ (cdr lst)))))\n  (sum_squares_helper lst))\n", "  (let ((sum (0)))\n    (for-each\
    \ (lambda (x)\n      (if (modulo (car x) 3)\n        (set! sum (+ sum (car x)\
    \ (car x)))\n      (if (modulo (car x) 4)\n        (set! sum (+ sum (car x) (car\
    \ x) (car x)))\n      (set! sum (+ sum (car x))))\n    lst))\n    sum))\n\n;;\
    \ >>> sum_squares (list 1 2 3)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n\
    ;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list\
    \ -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>>\
    \ sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1\
    \ -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares\
    \ (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n\
    ;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5\
    \ 2 -1 -5)\n;; -1\n;; >>> sum_squares (list -1 -5 2 -1 -5)\n;; -1\n", "  (let\
    \ ((lst_copy (copy lst)))\n    (let ((lst_copy_new (copy lst_copy)))\n      (let\
    \ ((lst_copy_new_new (copy lst_copy_new)))\n        (let ((lst_copy_new_new_new\
    \ (copy lst_copy_new_new)))\n          (let ((lst_copy_new_new_new_new (copy lst_copy_new_new_new_new)))\n\
    \            (let ((lst_copy_new_new_new_new_new (copy lst_copy_new_new_new_new_new_new)))\n\
    \              (let ((lst_copy_new_new_new_new_new_new_new (copy lst_copy_new_new_new_new_new_new_new_new))\n\
    \                    (sum (map (lambda (x) (* (* x x) x))))\n                \
    \    (sum (map (lambda (x) (* (* x x) x)) (filter (lambda (x) (modulo x 3)) lst_copy_new_new_new_new_new_new_new_new
  "  (define (square n)\n    (if (modulo n 3)\n      (+ n (* n n))\n      (* n n)))\n\
    \  (define (cube n)\n    (if (modulo n 4)\n      (+ n (* n (* n n)))\n      (*\
    \ n n)))\n  (define (sum_squares lst)\n    (define (square n)\n      (if (modulo\
    \ n 3)\n        (+ n (* n n))\n        (* n n)))\n    (define (cube n)\n     \
    \ (if (modulo n 4)\n        (+ n (* n (* n n)))\n        (* n n)))\n    (+ (reduce\
    \ (lambda (a b) (square a) (square b)) lst)\n      (reduce (lambda (a b) (cube\
    \ a) (cube b)) lst)))\n  (reduce (lambda (a b) (square a) (square b)) lst))",
  "  (let ((sum (0)))\n    (for-each (lambda (x)\n      (if (modulo x 3)\n       \
    \ (+ (* x x) sum)\n      (if (modulo x 4)\n        (+ (* x x) (* x x))\n     \
    \ (+ (* x x) (* x x)))))\n      lst))\n\n;; >>> sum_squares lst\n;; (list -1 -5\
    \ -1 -5)\n;; >>> sum_squares lst\n;; (list )\n;; >>> sum_squares lst\n;; (list\
    \ -1 -5 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 -1 -5)\n;; >>> sum_squares\
    \ lst\n;; (list -1 -5 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 -1 -5)\n\
    ;; >>> sum_squares lst\n;; (list -1 -5 -1 -5)\n;; >>> sum_squares lst\n;; (list\
    \ -1 -5 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 -1 -5)\n;; >>> sum_squares\
    \ lst\n;; (list -1 -5 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 -1 -5)\n\
    ;; >>> sum_squares lst\n;; (list -1 -5 -1 -5)\n;; >>> sum_squares lst\n;; (list\
    \ -1 -5 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 -1 -5)\n;; >>> sum_squares\
    \ lst\n;; (list -1 -5 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 -1 -5)\n\
    ;; >>> sum_squares lst\n;; (list -1 -5 -1 -5)\n;; >>> sum_squares lst\n;; (list\
    \ -1 -5 -1 -5)\n;; >>> sum_squares lst\n;; (list -1 -5 -1 -5)\n;; >>> sum_squares\
    \ lst\n;; (list -1 -5 -1 -5)"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
