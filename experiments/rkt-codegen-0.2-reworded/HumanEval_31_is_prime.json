{
  "name": "HumanEval_31_is_prime",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Return true if a given number is prime, and false otherwise.\n;; >>> (is_prime 6)\n;; #f\n;; >>> (is_prime 101)\n;; #t\n;; >>> (is_prime 11)\n;; #t\n;; >>> (is_prime 13441)\n;; #t\n;; >>> (is_prime 61)\n;; #t\n;; >>> (is_prime 4)\n;; #f\n;; >>> (is_prime 1)\n;; #f\n(define (is_prime n)\n",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_prime))\n    (check-equal? (candidate 6) #f)\n    (check-equal? (candidate 101) #t)\n    (check-equal? (candidate 11) #t)\n    (check-equal? (candidate 13441) #t)\n    (check-equal? (candidate 61) #t)\n    (check-equal? (candidate 4) #f)\n    (check-equal? (candidate 1) #f)\n    (check-equal? (candidate 5) #t)\n    (check-equal? (candidate 11) #t)\n    (check-equal? (candidate 17) #t)\n    (check-equal? (candidate 85) #f)\n    (check-equal? (candidate 77) #f)\n    (check-equal? (candidate 255379) #f)\n))\n\n(test-humaneval)",
  "completions": [
    "  (cond\n    ((zero? n) #t)\n    ((zero? (modulo n 2)) #f)\n    (else\n      (and\n        (not (zero? (modulo n 2)))\n        (not (zero? (modulo (modulo n 2) 7)))\n        (not (zero? (modulo (modulo n 2) 11)))\n        (not (zero? (modulo (modulo n 2) 13)))\n        (not (zero? (modulo (modulo n 2) 17)))\n        (not (zero? (modulo (modulo n 2) 19)))\n        (not (zero? (modulo (modulo n 2) 23)))\n        (not (zero? (modulo (modulo n 2) 29)))\n        (not (zero? (modulo (modulo n 2) 31)))\n        (not (zero? (modulo (modulo n 2) 37)))\n        (not (zero? (modulo (modulo n 2) 41)))\n        (not (zero? (modulo (modulo n 2) 43)))\n        (not (zero? (modulo (modulo n 2) 47)))\n        (not (zero? (modulo (modulo n 2) 53)))\n        (not (zero? (modulo (modulo n 2) 59)))\n        (not (zero? (modulo (modulo n 2) 61)))))))\n)\n\n;; Return true if a given number is prime, and false otherwise.\n;; >>> (is_prime? 6)\n;; #f\n;; >>> (is_prime? 101)\n;; #t\n;; >>> (is_prime? 11)\n;; #t\n;; >>> (is_prime? 13441)\n;; #t\n;; >>> (is_prime? 61)\n;; #t\n;; >>> (is_prime? 4)\n;; #f\n;; >>> (is_prime? 1)\n;; #f",
    "  (let ((limit (sqrt n)))\n    (if (<= limit 2)\n      (= n 1)\n      (else\n        (and\n          (<= n 2)\n          (not (modulo n 2)))))\n  )\n)\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 0)\n;; 0\n;; >>> (count_primes 1)\n;; 0\n;; >>> (count_primes 2)\n;; 1\n;; >>> (count_primes 3)\n;; 2\n;; >>> (count_primes 4)\n;; 3\n;; >>> (count_primes 5)\n;; 4\n;; >>> (count_primes 6)\n;; 5\n;; >>> (count_primes 7)\n;; 6\n;; >>> (count_primes 8)\n;; 7\n;; >>> (count_primes 9)\n;; 8\n;; >>> (count_primes 10)\n;; 9\n;; >>> (count_primes 11)\n;; 10\n;; >>> (count_primes 12)\n;; 11\n;; >>> (count_primes 13)\n;; 12\n;; >>> (count_primes 14)\n;; 13\n;; >>> (count_primes 15)\n;; 14\n;; >>> (count_primes 16)\n;; 15\n;; >>> (count_primes 17)\n;; 16\n;; >>> (count_primes 18)\n;; 17\n;; >>> (count_primes 19)\n;; 18\n;; >>> (count_primes 20)\n;; 19\n;; >>> (count_primes 21)\n;; 20\n;; >>> (count_primes 22)\n;; 21\n;; >>> (count_primes 23)\n;; 22\n;; >>> (count_primes 24)\n;; 23\n;; >>> (count_primes 25)\n;; 24\n;; >>> (count_primes 26)\n;; 25\n;; >>> (count_primes 27)\n;; 26\n;; >>> (count_primes 28)\n;; 27\n;; >>> (count_primes 29)\n;; 28\n;; >>> (count_primes 30)\n;; 29\n;; >>> (count_primes 31)\n;; 30\n;; >>> (count_primes 32)\n;; 31\n;; >>> (count_pr",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (modulo i 2))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 101)\n;; 11\n;; >>> (count_primes 11)\n;; 1\n;; >>> (count_primes 13441)\n;; 4\n;; >>> (count_primes 61)\n;; 2\n;; >>> (count_primes 4)\n;; 0\n;; >>> (count_primes 1)\n;; 0",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (let ((d (modulo n (car i)))\n            (r (cdr i)))\n        (if (zero? d)\n          #t\n          (if (zero? r)\n            #f\n            (is_prime (modulo d (car r)))))\n        (is_prime (modulo d (car r)))))\n    #f))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 0)\n;; 0\n;; >>> (count_primes 1)\n;; 0\n;; >>> (count_primes 2)\n;; 1\n;; >>> (count_primes 3)\n;; 2\n;; >>> (count_primes 4)\n;; 2\n;; >>> (count_primes 5)\n;; 3\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 7)\n;; 4\n;; >>> (count_primes 8)\n;; 4\n;; >>> (count_primes 9)\n;; 5\n;; >>> (count_primes 10)\n;; 5\n;; >>> (count_primes 11)\n;; 6\n;; >>> (count_primes 12)\n;; 6\n;; >>> (count_primes 13)\n;; 7\n;; >>> (count_primes 14)\n;; 7\n;; >>> (count_primes 15)\n;; 8\n;; >>> (count_primes 16)\n;; 8\n;; >>> (count_primes 17)\n;; 9\n;; >>> (count_primes 18)\n;; 9\n;; >>> (count_primes 19)\n;; 10\n;; >>> (count_primes 20)\n;; 10\n;; >>> (count_primes 21)\n;; 11\n;; >>> (count_primes 22)\n;; 11\n;; >>> (count_primes 23)\n;; 12\n;; >>> (count_primes 24)\n;; 12\n;; >>> (count_primes 25)\n;; 13\n;; >>> (count_primes 26)\n;; 13\n;; >>> (count_primes 27)\n;; 14\n;; >>> (count_primes 28)\n;; 14\n;; >>> (count_primes 29)\n",
    "  (cond\n    ((zero? n) #t)\n    ((zero? (modulo n 2)) #f)\n    ((zero? (modulo n 3)) #f)\n    ((zero? (modulo n 5)) #f)\n    ((zero? (modulo n 7)) #f)\n    ((zero? (modulo n 11)) #f)\n    ((zero? (modulo n 13)) #f)\n    ((zero? (modulo n 17)) #f)\n    ((zero? (modulo n 19)) #f)\n    ((zero? (modulo n 23)) #f)\n    ((zero? (modulo n 29)) #f)\n    ((zero? (modulo n 31)) #f)\n    ((zero? (modulo n 37)) #f)\n    ((zero? (modulo n 41)) #f)\n    ((zero? (modulo n 43)) #f)\n    ((zero? (modulo n 47)) #f)\n    ((zero? (modulo n 53)) #f)\n    ((zero? (modulo n 59)) #f)\n    ((zero? (modulo n 61)) #f)\n    ((zero? (modulo n 67)) #f)\n    ((zero? (modulo n 71)) #f)\n    ((zero? (modulo n 73)) #f)\n    ((zero? (modulo n 79)) #f)\n    ((zero? (modulo n 83)) #f)\n    ((zero? (modulo n 89)) #f)\n    ((zero? (modulo n 97)) #f)\n    ((zero? (modulo n 101)) #f)\n    #t))))\n\n;; Return true if a given number is even, and false otherwise.\n;; >>> (even? 6)\n;; #f\n;; >>> (even? -6)\n;; #f\n;; >>> (even? 0)\n;; #t\n;; >>> (even? 1)\n;; #t\n;; >>> (even? 2)\n;; #t\n;; >>> (even? 3)\n;; #t\n;; >>> (even? 4)\n;; #t\n;; >>> (even? 5)\n;; #t\n;; >>> (even? 6)\n;; #t\n;; >>> (even",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and\n          (zero? (modulo n 2))\n          (not (modulo i 2))\n          (not (modulo (modulo i 3) 2))\n          (not (modulo (modulo i 5) 2))\n          (not (modulo (modulo i 7) 2))\n          (not (modulo (modulo i 11) 2))\n          (not (modulo (modulo i 13) 2))\n          (not (modulo (modulo i 17) 2))\n          (not (modulo (modulo i 19) 2))\n          (not (modulo (modulo i 23) 2))\n          (not (modulo (modulo i 29) 2))\n          (not (modulo (modulo i 31) 2))\n          (not (modulo (modulo i 37) 2))\n          (not (modulo (modulo i 41) 2))\n          (not (modulo (modulo i 43) 2))\n          (not (modulo (modulo i 47) 2))\n          (not (modulo (modulo i 53) 2))\n          (not (modulo (modulo i 59) 2))\n          (not (modulo (modulo i 61) 2))\n          (not (modulo (modulo i 67) 2))\n          (not (modulo (modulo i 71) 2))\n          (not (modulo (modulo i 73) 2))\n          (not (modulo (modulo i 79) 2))\n          (not (modulo (modulo i 83) 2))\n          (not (modulo (modulo i 89) 2))\n          (not (modulo (modulo i 97) 2))))))))))))\n\n;; Return true if a given number is prime, and false otherwise.\n;; >>> (is_prime 6)\n;; #f\n;; >>> (is_prime 101)\n;; #t\n;; >>> (is_prime 11)\n;; #t\n;; >>> (is_prime 13441)\n;; #t\n;; >>> (is_prime 61)\n;; #t\n;; >>> (is_prime 4)\n;; #f\n;; >>>",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (- i 1))))))))\n\n;; Return true if a given number is even, and false otherwise.\n;; >>> (is_even 6)\n;; #f\n;; >>> (is_even 101)\n;; #t\n;; >>> (is_even 11)\n;; #f\n;; >>> (is_even 13441)\n;; #t\n;; >>> (is_even 61)\n;; #f\n;; >>> (is_even 4)\n;; #t\n;; >>> (is_even 1)\n;; #f",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (- i 1))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 101)\n;; 6\n;; >>> (count_primes 11)\n;; 2\n;; >>> (count_primes 13441)\n;; 5\n;; >>> (count_primes 61)\n;; 3\n;; >>> (count_primes 4)\n;; 0\n;; >>> (count_primes 1)\n;; 0",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and (>= n 1)\n             (not (= n 1))\n             (not (= n 2))\n             (is_prime (- n 1))\n             (is_prime (- n 2))\n             (is_prime (- i))\n             (is_prime (- (mul i 2)))\n             (is_prime (- (mul i 3)))\n             (is_prime (- (mul i 4)))\n             (is_prime (- (mul i 5)))\n             (is_prime (- (mul i 6)))\n             (is_prime (- (mul i 7)))\n             (is_prime (- (mul i 8)))\n             (is_prime (- (mul i 9)))\n             (is_prime (- (mul i 10))))))))))\n\n;; Return true if a given number is even, and false otherwise.\n;; >>> (even? 6)\n;; #f\n;; >>> (even? 101)\n;; #t\n;; >>> (even? 11)\n;; #f\n;; >>> (even? 13441)\n;; #f\n;; >>> (even? 61)\n;; #f\n;; >>> (even? 4)\n;; #t\n;; >>> (even? 1)\n;; #t\n;; >>> (even? -1)\n;; #f\n;; >>> (even? -2)\n;; #f\n;; >>> (even? -3)\n;; #f\n;; >>> (even? -4)\n;; #t\n;; >>> (even? -5)\n;; #f\n;; >>> (even? -6)\n;; #f\n;; >>> (even? -7)\n;; #f\n;; >>> (even? -8)\n;; #f\n;; >>> (even? -9)\n;; #f\n;; >>> (even? -10)\n;; #f\n;; >>> (even? -11)\n;; #f\n;; >>> (even? -12)\n;; #f\n;; >>> (even? -13)\n;; #f\n;; >>> (even? -14)\n;; #f\n;; >>> (even? -15)\n;; #f\n;; >>> (even? -16)\n;; #f\n;; >>>",
    "  (cond\n    ((zero? n) #t)\n    ((zero? (modulo n 2)) #f)\n    ((zero? (modulo n 3)) #f)\n    ((zero? (modulo n 5)) #f)\n    ((zero? (modulo n 7)) #f)\n    ((zero? (modulo n 11)) #f)\n    ((zero? (modulo n 13)) #f)\n    ((zero? (modulo n 17)) #f)\n    ((zero? (modulo n 19)) #f)\n    ((zero? (modulo n 23)) #f)\n    ((zero? (modulo n 29)) #f)\n    ((zero? (modulo n 31)) #f)\n    ((zero? (modulo n 37)) #f)\n    ((zero? (modulo n 41)) #f)\n    ((zero? (modulo n 43)) #f)\n    ((zero? (modulo n 47)) #f)\n    ((zero? (modulo n 53)) #f)\n    ((zero? (modulo n 59)) #f)\n    ((zero? (modulo n 61)) #f)\n    ((zero? (modulo n 67)) #f)\n    ((zero? (modulo n 71)) #f)\n    ((zero? (modulo n 73)) #f)\n    ((zero? (modulo n 79)) #f)\n    ((zero? (modulo n 83)) #f)\n    ((zero? (modulo n 89)) #f)\n    ((zero? (modulo n 97)) #f)\n    ((zero? (modulo n 101)) #f)\n    ((#f #t))))\n\n;; Return true if a given number is prime, and false otherwise.\n;; >>> (is_prime? 6)\n;; #f\n;; >>> (is_prime? 101)\n;; #t\n;; >>> (is_prime? 11)\n;; #t\n;; >>> (is_prime? 13441)\n;; #t\n;; >>> (is_prime? 61)\n;; #t\n;; >>> (is_prime? 4)\n;; #f\n;; >>> (is_prime? 1)\n;; #f",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (modulo i 2))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 0)\n;; 0\n;; >>> (count_primes 1)\n;; 0\n;; >>> (count_primes 2)\n;; 1\n;; >>> (count_primes 3)\n;; 2\n;; >>> (count_primes 4)\n;; 2\n;; >>> (count_primes 5)\n;; 3\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 7)\n;; 4\n;; >>> (count_primes 8)\n;; 4\n;; >>> (count_primes 9)\n;; 5\n;; >>> (count_primes 10)\n;; 5\n;; >>> (count_primes 11)\n;; 6\n;; >>> (count_primes 12)\n;; 6\n;; >>> (count_primes 13)\n;; 7\n;; >>> (count_primes 14)\n;; 7\n;; >>> (count_primes 15)\n;; 8\n;; >>> (count_primes 16)\n;; 8\n;; >>> (count_primes 17)\n;; 9\n;; >>> (count_primes 18)\n;; 9\n;; >>> (count_primes 19)\n;; 10\n;; >>> (count_primes 20)\n;; 10\n;; >>> (count_primes 21)\n;; 11\n;; >>> (count_primes 22)\n;; 11\n;; >>> (count_primes 23)\n;; 12\n;; >>> (count_primes 24)\n;; 12\n;; >>> (count_primes 25)\n;; 13\n;; >>> (count_primes 26)\n;; 13\n;; >>> (count_primes 27)\n;; 14\n;; >>> (count_primes 28)\n;; 14\n;; >>> (count_primes 29)\n;; 15\n;; >>> (count_primes 30)\n;; 15\n;; >>> (count_primes 31)\n;; 16\n;; >>> (count_primes 32)\n;; 16\n;; >>> (",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and\n          (zero? (modulo n (car i)))\n          (not (is_prime (cdr i))))))))\n\n;; Return the prime factors of a given number.\n;; >>> (prime_factors 6)\n;; #()\n;; >>> (prime_factors 101)\n;; #(101)\n;; >>> (prime_factors 11)\n;; #(11)\n;; >>> (prime_factors 13441)\n;; #(13, 41)\n;; >>> (prime_factors 61)\n;; #(61)\n;; >>> (prime_factors 4)\n;; #()\n;; >>> (prime_factors 1)\n;; #()",
    "  (cond\n    ((zero? n) #t)\n    ((negative? n) #f)\n    (else\n      (let ((d (quotient n 2)))\n        (and\n          (zero? d)\n          (not\n            (remainder n 2))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 101)\n;; 5\n;; >>> (count_primes 11)\n;; 2\n;; >>> (count_primes 13441)\n;; 4\n;; >>> (count_primes 61)\n;; 2\n;; >>> (count_primes 4)\n;; 0\n;; >>> (count_primes 1)\n;; 0",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (is_prime (modulo i 2)))))\n  )\n)\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 101)\n;; 4\n;; >>> (count_primes 11)\n;; 2\n;; >>> (count_primes 13441)\n;; 4\n;; >>> (count_primes 61)\n;; 2\n;; >>> (count_primes 4)\n;; 0\n;; >>> (count_primes 1)\n;; 0",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (- i 1))))))))\n\n;; Return true if a given number is even, and false otherwise.\n;; >>> (is_even 6)\n;; #f\n;; >>> (is_even 101)\n;; #t\n;; >>> (is_even 11)\n;; #f\n;; >>> (is_even 13441)\n;; #f\n;; >>> (is_even 61)\n;; #f\n;; >>> (is_even 4)\n;; #t\n;; >>> (is_even 1)\n;; #f",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (- i 1))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 0)\n;; 0\n;; >>> (count_primes 1)\n;; 0\n;; >>> (count_primes 2)\n;; 1\n;; >>> (count_primes 3)\n;; 2\n;; >>> (count_primes 4)\n;; 2\n;; >>> (count_primes 5)\n;; 3\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 7)\n;; 4\n;; >>> (count_primes 8)\n;; 4\n;; >>> (count_primes 9)\n;; 5\n;; >>> (count_primes 10)\n;; 5\n;; >>> (count_primes 11)\n;; 6\n;; >>> (count_primes 12)\n;; 6\n;; >>> (count_primes 13)\n;; 7\n;; >>> (count_primes 14)\n;; 7\n;; >>> (count_primes 15)\n;; 8\n;; >>> (count_primes 16)\n;; 8\n;; >>> (count_primes 17)\n;; 9\n;; >>> (count_primes 18)\n;; 9\n;; >>> (count_primes 19)\n;; 10\n;; >>> (count_primes 20)\n;; 10\n;; >>> (count_primes 21)\n;; 11\n;; >>> (count_primes 22)\n;; 11\n;; >>> (count_primes 23)\n;; 12\n;; >>> (count_primes 24)\n;; 12\n;; >>> (count_primes 25)\n;; 13\n;; >>> (count_primes 26)\n;; 13\n;; >>> (count_primes 27)\n;; 14\n;; >>> (count_primes 28)\n;; 14\n;; >>> (count_primes 29)\n;; 15\n;; >>> (count_primes 30)\n;; 15\n;; >>> (count_primes 31)\n;; 16\n;; >>> (count_primes 32)\n;; 16\n;; >>> (count_",
    "  (cond\n    ((zero? n) #t)\n    ((negative? n) #f)\n    (else\n      (let ((i (quotient n 2)))\n        (and\n          (zero? i)\n          (not (modulo n (quotient i 2)))\n          (not (modulo n (quotient (quotient i 3) 2)))\n          (not (modulo n (quotient (quotient i 5) 2)))\n          (not (modulo n (quotient (quotient i 7) 2)))\n          (not (modulo n (quotient (quotient i 11) 2)))\n          (not (modulo n (quotient (quotient i 13) 2)))\n          (not (modulo n (quotient (quotient i 17) 2)))\n          (not (modulo n (quotient (quotient i 19) 2)))\n          (not (modulo n (quotient (quotient i 23) 2)))\n          (not (modulo n (quotient (quotient i 29) 2)))\n          (not (modulo n (quotient (quotient i 31) 2)))\n          (not (modulo n (quotient (quotient i 37) 2)))\n          (not (modulo n (quotient (quotient i 41) 2)))\n          (not (modulo n (quotient (quotient i 43) 2)))\n          (not (modulo n (quotient (quotient i 47) 2)))\n          (not (modulo n (quotient (quotient i 53) 2)))\n          (not (modulo n (quotient (quotient i 59) 2)))\n          (not (modulo n (quotient (quotient i 61) 2)))\n          (not (modulo n (quotient (quotient i 67) 2)))\n          (not (modulo n (quotient (quotient i 71) 2)))\n          (not (modulo n (quotient (quotient i 73) 2)))\n          (not (modulo n (quotient (quotient i 79) 2)))\n          (not (",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (modulo i 2))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 101)\n;; 11\n;; >>> (count_primes 11)\n;; 2\n;; >>> (count_primes 13441)\n;; 4\n;; >>> (count_primes 61)\n;; 2\n;; >>> (count_primes 4)\n;; 0\n;; >>> (count_primes 1)\n;; 0",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and\n          (zero? (modulo n (car i)))\n          (not (is_prime (car i)))\n          (not (is_prime (cdr i)))\n          (is_prime (cdr (cdr i))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 101)\n;; 11\n;; >>> (count_primes 11)\n;; 1\n;; >>> (count_primes 13441)\n;; 4\n;; >>> (count_primes 61)\n;; 2\n;; >>> (count_primes 4)\n;; 0\n;; >>> (count_primes 1)\n;; 0",
    "  (let ((limit (sqrt n)))\n    (cond\n      ((= n 1) #t)\n      ((< n 2) #f)\n      ((<= n 0) #f)\n      (else\n        (and\n          (>= n 0)\n          (not (modulo n 2))\n          (not (modulo n 3))\n          (not (modulo n 5))\n          (not (modulo n 7))\n          (not (modulo n 11))\n          (not (modulo n 13))\n          (not (modulo n 17))\n          (not (modulo n 19))\n          (not (modulo n 23))\n          (not (modulo n 29))\n          (not (modulo n 31))\n          (not (modulo n 37))\n          (not (modulo n 41))\n          (not (modulo n 43))\n          (not (modulo n 47))\n          (not (modulo n 53))\n          (not (modulo n 59))\n          (not (modulo n 61))\n          (not (modulo n 67))\n          (not (modulo n 71))\n          (not (modulo n 73))\n          (not (modulo n 79))\n          (not (modulo n 83))\n          (not (modulo n 89))\n          (not (modulo n 97))\n          (not (modulo n 101))))))))))\n\n;; Return true if a given number is prime, and false otherwise.\n;; >>> (is_prime? 6)\n;; #f\n;; >>> (is_prime? 101)\n;; #t\n;; >>> (is_prime? 11)\n;; #t\n;; >>> (is_prime? 13441)\n;; #t\n;; >>> (is_prime? 61)\n;; #t\n;; >>> (is_prime? 4)\n;; #f\n;; >>> (is_prime? 1)\n;; #f",
    "  (cond\n    ((zero? n) #t)\n    ((negative? n) #f)\n    (else\n      (let ((i (quotient n 2)))\n        (and\n          (zero? i)\n          (not (modulo n (quotient i 2)))\n          (not (modulo n (remainder i 2)))\n          (is_prime (quotient n i)))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 101)\n;; 11\n;; >>> (count_primes 11)\n;; 2\n;; >>> (count_primes 13441)\n;; 5\n;; >>> (count_primes 61)\n;; 2\n;; >>> (count_primes 4)\n;; 0\n;; >>> (count_primes 1)\n;; 0",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and\n          (zero? (modulo n 2))\n          (not (modulo i 2))\n          (not (modulo (modulo i 3) 2))\n          (not (modulo (modulo i 5) 2))\n          (not (modulo (modulo i 7) 2))\n          (not (modulo (modulo i 11) 2))\n          (not (modulo (modulo i 13) 2))\n          (not (modulo (modulo i 17) 2))\n          (not (modulo (modulo i 19) 2))\n          (not (modulo (modulo i 23) 2))\n          (not (modulo (modulo i 29) 2))\n          (not (modulo (modulo i 31) 2))\n          (not (modulo (modulo i 37) 2))\n          (not (modulo (modulo i 41) 2))\n          (not (modulo (modulo i 43) 2))\n          (not (modulo (modulo i 47) 2))\n          (not (modulo (modulo i 53) 2))\n          (not (modulo (modulo i 59) 2))\n          (not (modulo (modulo i 61) 2))\n          (not (modulo (modulo i 67) 2))\n          (not (modulo (modulo i 71) 2))\n          (not (modulo (modulo i 73) 2))\n          (not (modulo (modulo i 79) 2))\n          (not (modulo (modulo i 83) 2))\n          (not (modulo (modulo i 89) 2))\n          (not (modulo (modulo i 97) 2))))))))))))\n",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (modulo i 2))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 101)\n;; 6\n;; >>> (count_primes 11)\n;; 2\n;; >>> (count_primes 13441)\n;; 6\n;; >>> (count_primes 61)\n;; 3\n;; >>> (count_primes 4)\n;; 0\n;; >>> (count_primes 1)\n;; 0",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (- i 1))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 101)\n;; 6\n;; >>> (count_primes 11)\n;; 2\n;; >>> (count_primes 13441)\n;; 7\n;; >>> (count_primes 61)\n;; 3\n;; >>> (count_primes 4)\n;; 0\n;; >>> (count_primes 1)\n;; 0",
    "  (cond\n    ((zero? n) #t)\n    ((negative? n) #f)\n    (else\n      (let ((d (quotient n 2)))\n        (and\n          (zero? d)\n          (not\n            (remainder n 2)))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 0)\n;; 0\n;; >>> (count_primes 1)\n;; 0\n;; >>> (count_primes 2)\n;; 1\n;; >>> (count_primes 3)\n;; 2\n;; >>> (count_primes 4)\n;; 2\n;; >>> (count_primes 5)\n;; 3\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 7)\n;; 4\n;; >>> (count_primes 8)\n;; 4\n;; >>> (count_primes 9)\n;; 5\n;; >>> (count_primes 10)\n;; 5\n;; >>> (count_primes 11)\n;; 6\n;; >>> (count_primes 12)\n;; 6\n;; >>> (count_primes 13)\n;; 7\n;; >>> (count_primes 14)\n;; 7\n;; >>> (count_primes 15)\n;; 8\n;; >>> (count_primes 16)\n;; 8\n;; >>> (count_primes 17)\n;; 9\n;; >>> (count_primes 18)\n;; 9\n;; >>> (count_primes 19)\n;; 10\n;; >>> (count_primes 20)\n;; 10\n;; >>> (count_primes 21)\n;; 11\n;; >>> (count_primes 22)\n;; 11\n;; >>> (count_primes 23)\n;; 12\n;; >>> (count_primes 24)\n;; 12\n;; >>> (count_primes 25)\n;; 13\n;; >>> (count_primes 26)\n;; 13\n;; >>> (count_primes 27)\n;; 14\n;; >>> (count_primes 28)\n;; 14\n;; >>> (count_primes 29)\n;; 15\n;; >>> (count_primes 30)\n;; 15\n;; >>> (count_primes 31)\n;; 16\n;; >>> (count_primes 32)\n;; 16",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and\n          (zero? (modulo n (car i)))\n          (not (is_prime (car i)))\n          (not (is_prime (cdr i)))\n          (is_prime (cdr (cdr i))))))))\n\n;; Return the prime factors of a given number.\n;; >>> (prime_factors 6)\n;; #()\n;; >>> (prime_factors 101)\n;; #(101)\n;; >>> (prime_factors 11)\n;; #(11)\n;; >>> (prime_factors 13441)\n;; #(13, 41)\n;; >>> (prime_factors 61)\n;; #(61)\n;; >>> (prime_factors 4)\n;; #()\n;; >>> (prime_factors 1)\n;; #()",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and (>= n 1)\n             (not (modulo i 2))\n             (not (modulo (remainder n 2) 2))\n             (not (modulo (remainder n 3) 3))\n             (not (modulo (remainder n 5) 5))\n             (not (modulo (remainder n 7) 7))\n             (not (modulo (remainder n 11) 11))\n             (not (modulo (remainder n 13) 13))\n             (not (modulo (remainder n 17) 17))\n             (not (modulo (remainder n 19) 19))\n             (not (modulo (remainder n 23) 23))\n             (not (modulo (remainder n 29) 29))\n             (not (modulo (remainder n 31) 31))\n             (not (modulo (remainder n 37) 37))\n             (not (modulo (remainder n 41) 41))\n             (not (modulo (remainder n 43) 43))\n             (not (modulo (remainder n 47) 47))\n             (not (modulo (remainder n 53) 53))\n             (not (modulo (remainder n 59) 59))\n             (not (modulo (remainder n 61) 61))\n             (not (modulo (remainder n 67) 67))\n             (not (modulo (remainder n 71) 71))\n             (not (modulo (remainder n 73) 73))\n             (not (modulo (remainder n 79) 79))\n             (not (modulo (remainder n 83) 83))\n             (not (modulo (remainder n 89) 89))\n             (not (modulo (remainder n 97) 97))))))))))))))\n",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (- i 1))))))))\n\n;; Return the prime factors of a given number.\n;; >>> (prime_factors 6)\n;; #f\n;; >>> (prime_factors 101)\n;; #f\n;; >>> (prime_factors 11)\n;; #f\n;; >>> (prime_factors 13441)\n;; #f\n;; >>> (prime_factors 61)\n;; #f\n;; >>> (prime_factors 4)\n;; #f\n;; >>> (prime_factors 1)\n;; #f",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and\n          (zero? (modulo n 2))\n          (not (modulo i 2))\n          (not (modulo (modulo i 3) 2))\n          (not (modulo (modulo i 5) 2))\n          (not (modulo (modulo i 7) 2))\n          (not (modulo (modulo i 11) 2))\n          (not (modulo (modulo i 13) 2))\n          (not (modulo (modulo i 17) 2))\n          (not (modulo (modulo i 19) 2))\n          (not (modulo (modulo i 23) 2))\n          (not (modulo (modulo i 29) 2))\n          (not (modulo (modulo i 31) 2))\n          (not (modulo (modulo i 37) 2))\n          (not (modulo (modulo i 41) 2))\n          (not (modulo (modulo i 43) 2))\n          (not (modulo (modulo i 47) 2))\n          (not (modulo (modulo i 53) 2))\n          (not (modulo (modulo i 59) 2))\n          (not (modulo (modulo i 61) 2))\n          (not (modulo (modulo i 67) 2))\n          (not (modulo (modulo i 71) 2))\n          (not (modulo (modulo i 73) 2))\n          (not (modulo (modulo i 79) 2))\n          (not (modulo (modulo i 83) 2))\n          (not (modulo (modulo i 89) 2))\n          (not (modulo (modulo i 97) 2))))))))))\n\n;; Return true if a given number is prime, and false otherwise.\n;; >>> (is_prime? 6)\n;; #f\n;; >>> (is_prime? 101)\n;; #t\n;; >>> (is_prime? 11)\n;; #t\n;; >>> (is_prime? 13441)\n;; #t\n;; >>> (is_prime? 61)\n;; #t\n;; >>> (is_prime? 4)\n",
    "  (if (zero? n)\n      #t\n      (if (zero? (modulo n 2))\n          #f\n          (is_prime (quotient n 2))))))\n\n;; Return the prime factors of a given number.\n;; >>> (prime_factors 6)\n;; #()\n;; >>> (prime_factors 101)\n;; #(101)\n;; >>> (prime_factors 11)\n;; #(11)\n;; >>> (prime_factors 13441)\n;; #(13, 41)\n;; >>> (prime_factors 61)\n;; #(61)\n;; >>> (prime_factors 4)\n;; #()\n;; >>> (prime_factors 1)\n;; #()",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and\n          (zero? (modulo n (car i)))\n          (not (is_prime (car i)))\n          (not (is_prime (cdr i)))\n          (is_prime (cdr (cdr i))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 0)\n;; 0\n;; >>> (count_primes 1)\n;; 0\n;; >>> (count_primes 2)\n;; 1\n;; >>> (count_primes 3)\n;; 2\n;; >>> (count_primes 4)\n;; 2\n;; >>> (count_primes 5)\n;; 3\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 7)\n;; 4\n;; >>> (count_primes 8)\n;; 4\n;; >>> (count_primes 9)\n;; 5\n;; >>> (count_primes 10)\n;; 5\n;; >>> (count_primes 11)\n;; 6\n;; >>> (count_primes 12)\n;; 6\n;; >>> (count_primes 13)\n;; 7\n;; >>> (count_primes 14)\n;; 7\n;; >>> (count_primes 15)\n;; 8\n;; >>> (count_primes 16)\n;; 8\n;; >>> (count_primes 17)\n;; 9\n;; >>> (count_primes 18)\n;; 9\n;; >>> (count_primes 19)\n;; 10\n;; >>> (count_primes 20)\n;; 10\n;; >>> (count_primes 21)\n;; 11\n;; >>> (count_primes 22)\n;; 11\n;; >>> (count_primes 23)\n;; 12\n;; >>> (count_primes 24)\n;; 12\n;; >>> (count_primes 25)\n;; 13\n;; >>> (count_primes 26)\n;; 13\n;; >>> (count_primes 27)\n;; 14\n;; >>> (count_primes 28)\n;; 14\n;; >>> (count_primes 29)\n;; 15\n;; >>> (count_primes 30)\n;; 15\n;; >>> (count_pr",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and (>= n 1)\n             (not (modulo i 2))\n             (not (modulo (sub1 i) 2))\n             (is_prime (sub1 i)))))))\n\n;; Return true if a given number is even, and false otherwise.\n;; >>> (is_even 6)\n;; #f\n;; >>> (is_even 101)\n;; #t\n;; >>> (is_even 11)\n;; #f\n;; >>> (is_even 13441)\n;; #f\n;; >>> (is_even 61)\n;; #f\n;; >>> (is_even 4)\n;; #t\n;; >>> (is_even 1)\n;; #f",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      (= n 1)\n      (else\n        (and (>= n 1) (<= n i)\n               (not (modulo n i)))))))\n\n;; Return the prime factors of a given number.\n;; >>> (prime_factors 6)\n;; #(6)\n;; >>> (prime_factors 101)\n;; #(101)\n;; >>> (prime_factors 11)\n;; #(11)\n;; >>> (prime_factors 13441)\n;; #(13, 41)\n;; >>> (prime_factors 61)\n;; #(61)\n;; >>> (prime_factors 4)\n;; #()\n;; >>> (prime_factors 1)\n;; #()",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and (>= n 1)\n             (not (modulo i 2))\n             (not (modulo (sub1 i) 2))\n             (is_prime (sub1 i)))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 0)\n;; 0\n;; >>> (count_primes 1)\n;; 0\n;; >>> (count_primes 2)\n;; 1\n;; >>> (count_primes 3)\n;; 2\n;; >>> (count_primes 4)\n;; 2\n;; >>> (count_primes 5)\n;; 3\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 7)\n;; 4\n;; >>> (count_primes 8)\n;; 4\n;; >>> (count_primes 9)\n;; 5\n;; >>> (count_primes 10)\n;; 5\n;; >>> (count_primes 11)\n;; 6\n;; >>> (count_primes 12)\n;; 6\n;; >>> (count_primes 13)\n;; 7\n;; >>> (count_primes 14)\n;; 7\n;; >>> (count_primes 15)\n;; 8\n;; >>> (count_primes 16)\n;; 8\n;; >>> (count_primes 17)\n;; 9\n;; >>> (count_primes 18)\n;; 9\n;; >>> (count_primes 19)\n;; 10\n;; >>> (count_primes 20)\n;; 10\n;; >>> (count_primes 21)\n;; 11\n;; >>> (count_primes 22)\n;; 11\n;; >>> (count_primes 23)\n;; 12\n;; >>> (count_primes 24)\n;; 12\n;; >>> (count_primes 25)\n;; 13\n;; >>> (count_primes 26)\n;; 13\n;; >>> (count_primes 27)\n;; 14\n;; >>> (count_primes 28)\n;; 14\n;; >>> (count_primes 29)\n;; 15\n;; >>> (count_primes 30)\n;; 15\n;; >>> (count_primes 31)\n;; 16\n;; >>> (count_",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and (>= n 1)\n             (not (= n 1))\n             (not (= n 2))\n             (is_prime (- n 1))\n             (is_prime (- n 2))\n             (is_prime (- i))\n             (is_prime (- (add1 i)))\n             (is_prime (- (add1 (mul1 i)))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 0)\n;; 0\n;; >>> (count_primes 1)\n;; 0\n;; >>> (count_primes 2)\n;; 1\n;; >>> (count_primes 3)\n;; 2\n;; >>> (count_primes 4)\n;; 2\n;; >>> (count_primes 5)\n;; 3\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 7)\n;; 4\n;; >>> (count_primes 8)\n;; 4\n;; >>> (count_primes 9)\n;; 5\n;; >>> (count_primes 10)\n;; 5\n;; >>> (count_primes 11)\n;; 6\n;; >>> (count_primes 12)\n;; 6\n;; >>> (count_primes 13)\n;; 7\n;; >>> (count_primes 14)\n;; 7\n;; >>> (count_primes 15)\n;; 8\n;; >>> (count_primes 16)\n;; 8\n;; >>> (count_primes 17)\n;; 9\n;; >>> (count_primes 18)\n;; 9\n;; >>> (count_primes 19)\n;; 10\n;; >>> (count_primes 20)\n;; 10\n;; >>> (count_primes 21)\n;; 11\n;; >>> (count_primes 22)\n;; 11\n;; >>> (count_primes 23)\n;; 12\n;; >>> (count_primes 24)\n;; 12\n;; >>> (count_primes 25)\n;; 13\n;; >>> (count_primes 26)\n;; 13\n;; >>> (count_primes 27)\n;; 14\n;; >>> (count_primes 28)\n;; 14\n;; >>> (count_",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and\n          (zero? (modulo n (car i)))\n          (is_prime (cdr i)))))))\n\n;; Return the prime factors of a given number.\n;; >>> (prime_factors 6)\n;; #f\n;; >>> (prime_factors 101)\n;; #f\n;; >>> (prime_factors 11)\n;; #f\n;; >>> (prime_factors 13441)\n;; #f\n;; >>> (prime_factors 61)\n;; #f\n;; >>> (prime_factors 4)\n;; #f\n;; >>> (prime_factors 1)\n;; #f",
    "  (cond\n    ((zero? n) #t)\n    ((zero? (modulo n 2)) #f)\n    ((zero? (modulo n 3)) #f)\n    ((zero? (modulo n 5)) #f)\n    ((zero? (modulo n 7)) #f)\n    ((zero? (modulo n 11)) #f)\n    ((zero? (modulo n 13)) #f)\n    ((zero? (modulo n 17)) #f)\n    ((zero? (modulo n 19)) #f)\n    ((zero? (modulo n 23)) #f)\n    ((zero? (modulo n 29)) #f)\n    ((zero? (modulo n 31)) #f)\n    ((zero? (modulo n 37)) #f)\n    ((zero? (modulo n 41)) #f)\n    ((zero? (modulo n 43)) #f)\n    ((zero? (modulo n 47)) #f)\n    ((zero? (modulo n 53)) #f)\n    ((zero? (modulo n 59)) #f)\n    ((zero? (modulo n 61)) #f)\n    ((zero? (modulo n 67)) #f)\n    ((zero? (modulo n 71)) #f)\n    ((zero? (modulo n 73)) #f)\n    ((zero? (modulo n 79)) #f)\n    ((zero? (modulo n 83)) #f)\n    ((zero? (modulo n 89)) #f)\n    ((zero? (modulo n 97)) #f)\n    ((zero? (modulo n 101)) #f)\n    #t))))\n\n;; Return true if a given number is even, and false otherwise.\n;; >>> (is_even 6)\n;; #f\n;; >>> (is_even 101)\n;; #t\n;; >>> (is_even 11)\n;; #f\n;; >>> (is_even 13441)\n;; #f\n;; >>> (is_even 61)\n;; #f\n;; >>> (is_even 4)\n;; #f\n;; >>> (is_even 1)\n;; #t",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and\n          (zero? (modulo n (car i)))\n          (not (is_prime (car i)))\n          (not (is_prime (cdr i)))\n          (is_prime (cdr (cdr i))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 101)\n;; 11\n;; >>> (count_primes 11)\n;; 2\n;; >>> (count_primes 13441)\n;; 4\n;; >>> (count_primes 61)\n;; 2\n;; >>> (count_primes 4)\n;; 0\n;; >>> (count_primes 1)\n;; 0",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and\n          (zero? (modulo n (car i)))\n          (not (is_prime (cdr i))))))))\n\n;; Return the prime factors of a given number.\n;; >>> (prime_factors 6)\n;; #(6)\n;; >>> (prime_factors 101)\n;; #(101)\n;; >>> (prime_factors 11)\n;; #(11)\n;; >>> (prime_factors 13441)\n;; #(13, 41)\n;; >>> (prime_factors 61)\n;; #(61)\n;; >>> (prime_factors 4)\n;; #()\n;; >>> (prime_factors 1)\n;; #()",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (modulo i 2))))))))\n\n;; Return the prime factors of a given number.\n;; >>> (prime_factors 6)\n;; #()\n;; >>> (prime_factors 101)\n;; #(101)\n;; >>> (prime_factors 11)\n;; #(11)\n;; >>> (prime_factors 13441)\n;; #(13, 41)\n;; >>> (prime_factors 61)\n;; #(61)\n;; >>> (prime_factors 4)\n;; #()\n;; >>> (prime_factors 1)\n;; #()",
    "  (cond\n    [(zero? n) #f]\n    [(zero? (modulo n 2)) #t]\n    [else (is_prime (modulo n 2))]\n  ))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 5)\n;; 3\n;; >>> (count_primes 100)\n;; 11\n;; >>> (count_primes 1000)\n;; 101\n;; >>> (count_primes 1000000)\n;; 1047\n;; >>> (count_primes 1000000000)\n;; 1047\n;; >>> (count_primes 1000000000000)\n;; 1047\n;; >>> (count_primes 1000000000000000)\n;; 1047\n;; >>> (count_primes 10000000000000000)\n;; 1047\n;; >>> (count_primes 100000000000000000)\n;; 1047\n;; >>> (count_primes 1000000000000000000)\n;; 1047\n;; >>> (count_primes 10000000000000000000)\n;; 1047\n;; >>> (count_primes 100000000000000000000)\n;; 1047\n;; >>> (count_primes 1000000000000000000000)\n;; 1047\n;; >>> (count_primes 10000000000000000000000)\n;; 1047\n;; >>> (count_primes 100000000000000000000000)\n;; 1047\n;; >>> (count_primes 1000000000000000000000000)\n;; 1047\n;; >>> (count_primes 10000000000000000000000000)\n;; 1047\n;; >>> (count_primes 100000000000000000000000000)\n;; 1047\n;; >>> (count_primes 1000000000000000000000000000)\n;; 1047\n;; >>> (count_primes 10000000000000000000000000000)\n;; 1047\n;; >>> (count_primes 100000000000000000000000000000)\n;; 1047\n;; >>> (count_primes 1000000000000000000000000000000)\n;; 1047\n;; >>> (count_primes 10000000000000000000000000000000)\n;; 1047\n;; >>> (count_primes 100000000000000000000000000000000)\n;; 1047\n;; >>> (count_primes 1000000000000000000000000000000000)\n;; 1047\n;; >>> (count_primes 10000000000000000000000000000000000)\n;; 1047\n;; >>> (count_primes 100000000000000000000000000000000000)\n;; 1047\n;; >>> (count_primes 1000000000000000000000000000000000000)\n;; 1047",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (modulo i 2))))))))\n\n;; Return true if a given number is even, and false otherwise.\n;; >>> (is_even 6)\n;; #f\n;; >>> (is_even 101)\n;; #t\n;; >>> (is_even 11)\n;; #f\n;; >>> (is_even 13441)\n;; #f\n;; >>> (is_even 61)\n;; #f\n;; >>> (is_even 4)\n;; #t\n;; >>> (is_even 1)\n;; #f",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and (>= n 1)\n             (not (modulo i 2))\n             (not (modulo (sub1 i) 2))\n             (is_prime (sub1 i)))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 101)\n;; 6\n;; >>> (count_primes 11)\n;; 2\n;; >>> (count_primes 13441)\n;; 5\n;; >>> (count_primes 61)\n;; 3\n;; >>> (count_primes 4)\n;; 0\n;; >>> (count_primes 1)\n;; 0",
    "  (let ((limit (sqrt n)))\n    (cond\n      ((= n 1) #t)\n      ((< n 2) #f)\n      ((<= n 0) #f)\n      (else\n        (and\n          (>= n 2)\n          (not\n            (and\n              (<= limit (+ n 1))\n              (is_prime (- n 1)))))\n      )\n    )\n  )\n)\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 0)\n;; 0\n;; >>> (count_primes 1)\n;; 0\n;; >>> (count_primes 2)\n;; 1\n;; >>> (count_primes 3)\n;; 2\n;; >>> (count_primes 4)\n;; 3\n;; >>> (count_primes 5)\n;; 4\n;; >>> (count_primes 6)\n;; 5\n;; >>> (count_primes 7)\n;; 6\n;; >>> (count_primes 8)\n;; 7\n;; >>> (count_primes 9)\n;; 8\n;; >>> (count_primes 10)\n;; 9\n;; >>> (count_primes 11)\n;; 10\n;; >>> (count_primes 12)\n;; 11\n;; >>> (count_primes 13)\n;; 12\n;; >>> (count_primes 14)\n;; 13\n;; >>> (count_primes 15)\n;; 14\n;; >>> (count_primes 16)\n;; 15\n;; >>> (count_primes 17)\n;; 16\n;; >>> (count_primes 18)\n;; 17\n;; >>> (count_primes 19)\n;; 18\n;; >>> (count_primes 20)\n;; 19\n;; >>> (count_primes 21)\n;; 20\n;; >>> (count_primes 22)\n;; 21\n;; >>> (count_primes 23)\n;; 22\n;; >>> (count_primes 24)\n;; 23\n;; >>> (count_primes 25)\n;; 24\n;; >>> (count_primes 26)\n;; 25\n;; >>> (count_primes 27)\n;; 26\n;; >>> (count_primes 28)\n;; 27\n;; >>> (count_primes 29)\n;; 28\n;; >>>",
    "  (cond\n    ((zero? n) #t)\n    ((zero? (remainder n 2)))\n    ((zero? (remainder n 3)))\n    ((zero? (remainder n 5)))\n    ((zero? (remainder n 7)))\n    ((zero? (remainder n 11)))\n    ((zero? (remainder n 13)))\n    ((zero? (remainder n 17)))\n    ((zero? (remainder n 19)))\n    ((zero? (remainder n 23)))\n    ((zero? (remainder n 29)))\n    ((zero? (remainder n 31)))\n    ((zero? (remainder n 37)))\n    ((zero? (remainder n 41)))\n    ((zero? (remainder n 43)))\n    ((zero? (remainder n 47)))\n    ((zero? (remainder n 53)))\n    ((zero? (remainder n 59)))\n    ((zero? (remainder n 61)))\n    ((zero? (remainder n 67)))\n    ((zero? (remainder n 71)))\n    ((zero? (remainder n 73)))\n    ((zero? (remainder n 79)))\n    ((zero? (remainder n 83)))\n    ((zero? (remainder n 89)))\n    ((zero? (remainder n 97)))\n    ((zero? (remainder n 101)))\n    #f\n  )\n)\n\n;; Return true if a given number is even, and false otherwise.\n;; >>> (is_even 6)\n;; #f\n;; >>> (is_even 101)\n;; #t\n;; >>> (is_even 11)\n;; #f\n;; >>> (is_even 13441)\n;; #f\n;; >>> (is_even 61)\n;; #f\n;; >>> (is_even 4)\n;; #t\n;; >>> (is_even 1)\n;; #f",
    "  (let ((limit (sqrt n)))\n    (cond\n      ((= n 1) #t)\n      ((< n 2) #f)\n      ((<= limit (+ limit 1)) #f)\n      (else\n        (and\n          (<= n (modulo limit 2))\n          (not (modulo n 2))\n          (is_prime (- n 1)))))\n  ))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 5)\n;; 3\n;; >>> (count_primes 100)\n;; 11\n;; >>> (count_primes 1000)\n;; 101\n;; >>> (count_primes 1000000)\n;; 1047\n;; >>> (count_primes 1000000000)\n;; 1047\n;; >>> (count_primes 1000000000000)\n;; 1047\n;; >>> (count_primes 1000000000000000)\n;; 1047\n;; >>> (count_primes 10000000000000000)\n;; 1047\n;; >>> (count_primes 100000000000000000)\n;; 1047\n;; >>> (count_primes 1000000000000000000)\n;; 1047\n;; >>> (count_primes 10000000000000000000)\n;; 1047\n;; >>> (count_primes 100000000000000000000)\n;; 1047\n;; >>> (count_primes 1000000000000000000000)\n;; 1047\n;; >>> (count_primes 10000000000000000000000)\n;; 1047\n;; >>> (count_primes 100000000000000000000000)\n;; 1047\n;; >>> (count_primes 1000000000000000000000000)\n;; 1047\n;; >>> (count_primes 10000000000000000000000000)\n;; 1047\n;; >>> (count_primes 100000000000000000000000000)\n;; 1047\n;; >>> (count_primes 1000000000000000000000000000)\n;; 1047\n;; >>> (count_primes 10000000000000000000000000000)\n;; 1047\n;; >>> (count_primes 100000000000000000000000000000)\n;; 1047\n;; >>> (count_primes 1000000000000000000000000000000)\n;; 1047\n;; >>> (count_primes 10000000000000000000000000000000)\n;; 1047\n;; >>> (count_primes 100000000000000000000000000000000)\n;; 1047\n;; >>> (count_primes 1000000000000000000000000000000000)\n;; 1047\n;; >>> (count_pr",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (let ((d (div n (car i)))\n            (r (cdr i)))\n        (if (zero? d)\n          #f\n          (if (zero? r)\n            #t\n            (is_prime (car r))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 101)\n;; 6\n;; >>> (count_primes 11)\n;; 2\n;; >>> (count_primes 13441)\n;; 6\n;; >>> (count_primes 61)\n;; 3\n;; >>> (count_primes 4)\n;; 0\n;; >>> (count_primes 1)\n;; 0",
    "  (let ((limit (sqrt n)))\n    (cond\n      ((= n 1) #t)\n      ((< n 2) #f)\n      ((= n 0) #f)\n      ((<= n limit) (begin\n        (define (is_prime_helper n)\n          (cond\n            ((= n 1) #t)\n            ((< n 2) #f)\n            ((= n 0) #f)\n            ((<= n limit) (is_prime_helper (+ n 2)))\n            (else #f)))))))\n    (is_prime_helper n)))\n\n;; Return the prime factors of a given number.\n;; >>> (prime_factors 6)\n;; #f\n;; >>> (prime_factors 101)\n;; #f\n;; >>> (prime_factors 11)\n;; #f\n;; >>> (prime_factors 13441)\n;; #f\n;; >>> (prime_factors 61)\n;; #f\n;; >>> (prime_factors 4)\n;; #f\n;; >>> (prime_factors 1)\n;; #f",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      (= n 1)\n      (else\n        (and (>= n 1) (<= n i))\n        (not (modulo n i)))))\n)\n\n;; Return the prime factors of a given number.\n;; >>> (prime_factors 6)\n;; #f\n;; >>> (prime_factors 101)\n;; #f\n;; >>> (prime_factors 11)\n;; #f\n;; >>> (prime_factors 13441)\n;; #f\n;; >>> (prime_factors 61)\n;; #f\n;; >>> (prime_factors 4)\n;; #f\n;; >>> (prime_factors 1)\n;; #f",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and\n          (zero? (modulo n 2))\n          (not (modulo i 2))\n          (not (modulo (modulo i 3) 2))\n          (not (modulo (modulo i 5) 2))\n          (not (modulo (modulo i 7) 2))\n          (not (modulo (modulo i 11) 2))\n          (not (modulo (modulo i 13) 2))\n          (not (modulo (modulo i 17) 2))\n          (not (modulo (modulo i 19) 2))\n          (not (modulo (modulo i 23) 2))\n          (not (modulo (modulo i 29) 2))\n          (not (modulo (modulo i 31) 2))\n          (not (modulo (modulo i 37) 2))\n          (not (modulo (modulo i 41) 2))\n          (not (modulo (modulo i 43) 2))\n          (not (modulo (modulo i 47) 2))\n          (not (modulo (modulo i 53) 2))\n          (not (modulo (modulo i 59) 2))\n          (not (modulo (modulo i 61) 2))\n          (not (modulo (modulo i 67) 2))\n          (not (modulo (modulo i 71) 2))\n          (not (modulo (modulo i 73) 2))\n          (not (modulo (modulo i 79) 2))\n          (not (modulo (modulo i 83) 2))\n          (not (modulo (modulo i 89) 2))\n          (not (modulo (modulo i 97) 2))))))))))\n\n;; Return true if a given number is prime, and false otherwise.\n;; >>> (is_prime? 6)\n;; #f\n;; >>> (is_prime? 101)\n;; #t\n;; >>> (is_prime? 11)\n;; #t\n;; >>> (is_prime? 13441)\n;; #t\n;; >>> (is_prime? 61)\n;; #t\n;; >>> (is_prime? 4)\n",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      (= n 1)\n      (else\n        (and (>= n 2)\n             (not (modulo n 2)))))\n  )\n)\n\n;; Return the prime factors of a given number.\n;; >>> (prime_factors 6)\n;; #(6)\n;; >>> (prime_factors 101)\n;; #(101)\n;; >>> (prime_factors 11)\n;; #(11)\n;; >>> (prime_factors 13441)\n;; #(13, 41)\n;; >>> (prime_factors 61)\n;; #(61)\n;; >>> (prime_factors 4)\n;; #()\n;; >>> (prime_factors 1)\n;; #()",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (is_prime (modulo i 2)))))\n  )\n)\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 0)\n;; 0\n;; >>> (count_primes 1)\n;; 0\n;; >>> (count_primes 2)\n;; 1\n;; >>> (count_primes 3)\n;; 2\n;; >>> (count_primes 4)\n;; 2\n;; >>> (count_primes 5)\n;; 3\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 7)\n;; 4\n;; >>> (count_primes 8)\n;; 4\n;; >>> (count_primes 9)\n;; 5\n;; >>> (count_primes 10)\n;; 5\n;; >>> (count_primes 11)\n;; 6\n;; >>> (count_primes 12)\n;; 6\n;; >>> (count_primes 13)\n;; 7\n;; >>> (count_primes 14)\n;; 7\n;; >>> (count_primes 15)\n;; 8\n;; >>> (count_primes 16)\n;; 8\n;; >>> (count_primes 17)\n;; 9\n;; >>> (count_primes 18)\n;; 9\n;; >>> (count_primes 19)\n;; 10\n;; >>> (count_primes 20)\n;; 10\n;; >>> (count_primes 21)\n;; 11\n;; >>> (count_primes 22)\n;; 11\n;; >>> (count_primes 23)\n;; 12\n;; >>> (count_primes 24)\n;; 12\n;; >>> (count_primes 25)\n;; 13\n;; >>> (count_primes 26)\n;; 13\n;; >>> (count_primes 27)\n;; 14\n;; >>> (count_primes 28)\n;; 14\n;; >>> (count_primes 29)\n;; 15\n;; >>> (count_primes 30)\n;; 15\n;; >>> (count_primes 31)\n;; 16\n;; >>> (count_primes 32)\n;; 16\n;; >>> (",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (modulo i 2))))))))\n\n;; Return true if a given number is even, and false otherwise.\n;; >>> (is_even 6)\n;; #f\n;; >>> (is_even 101)\n;; #t\n;; >>> (is_even 11)\n;; #f\n;; >>> (is_even 13441)\n;; #f\n;; >>> (is_even 61)\n;; #f\n;; >>> (is_even 4)\n;; #f\n;; >>> (is_even 1)\n;; #t",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (- i 1))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 101)\n;; 11\n;; >>> (count_primes 11)\n;; 2\n;; >>> (count_primes 13441)\n;; 5\n;; >>> (count_primes 61)\n;; 2\n;; >>> (count_primes 4)\n;; 0\n;; >>> (count_primes 1)\n;; 0",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and\n          (zero? (modulo n 2))\n          (not (modulo i 2))\n          (not (modulo (modulo i 3) 2))\n          (not (modulo (modulo i 5) 2))\n          (not (modulo (modulo i 7) 2))\n          (not (modulo (modulo i 11) 2))\n          (not (modulo (modulo i 13) 2))\n          (not (modulo (modulo i 17) 2))\n          (not (modulo (modulo i 19) 2))\n          (not (modulo (modulo i 23) 2))\n          (not (modulo (modulo i 29) 2))\n          (not (modulo (modulo i 31) 2))\n          (not (modulo (modulo i 37) 2))\n          (not (modulo (modulo i 41) 2))\n          (not (modulo (modulo i 43) 2))\n          (not (modulo (modulo i 47) 2))\n          (not (modulo (modulo i 53) 2))\n          (not (modulo (modulo i 59) 2))\n          (not (modulo (modulo i 61) 2))\n          (not (modulo (modulo i 67) 2))\n          (not (modulo (modulo i 71) 2))\n          (not (modulo (modulo i 73) 2))\n          (not (modulo (modulo i 79) 2))\n          (not (modulo (modulo i 83) 2))\n          (not (modulo (modulo i 89) 2))\n          (not (modulo (modulo i 97) 2))))))))))\n",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (modulo i 2))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 101)\n;; 5\n;; >>> (count_primes 11)\n;; 2\n;; >>> (count_primes 13441)\n;; 6\n;; >>> (count_primes 61)\n;; 3\n;; >>> (count_primes 4)\n;; 0\n;; >>> (count_primes 1)\n;; 0",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and (>= n 1)\n             (not (modulo i 2))\n             (not (modulo (remainder n 2) 2))\n             (not (modulo (remainder n 3) 2))\n             (not (modulo (remainder n 5) 2))\n             (not (modulo (remainder n 7) 2))\n             (not (modulo (remainder n 11) 2))\n             (not (modulo (remainder n 13) 2))\n             (not (modulo (remainder n 17) 2))\n             (not (modulo (remainder n 19) 2))\n             (not (modulo (remainder n 23) 2))\n             (not (modulo (remainder n 29) 2))\n             (not (modulo (remainder n 31) 2))\n             (not (modulo (remainder n 37) 2))\n             (not (modulo (remainder n 41) 2))\n             (not (modulo (remainder n 43) 2))\n             (not (modulo (remainder n 47) 2))\n             (not (modulo (remainder n 53) 2))\n             (not (modulo (remainder n 59) 2))\n             (not (modulo (remainder n 61) 2))\n             (not (modulo (remainder n 67) 2))\n             (not (modulo (remainder n 71) 2))\n             (not (modulo (remainder n 73) 2))\n             (not (modulo (remainder n 79) 2))\n             (not (modulo (remainder n 83) 2))\n             (not (modulo (remainder n 89) 2))\n             (not (modulo (remainder n 97) 2))))))))))))\n",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo n i))\n          #f\n          (is_prime (modulo n i)))))\n  )\n)\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 101)\n;; 4\n;; >>> (count_primes 11)\n;; 2\n;; >>> (count_primes 13441)\n;; 5\n;; >>> (count_primes 61)\n;; 3\n;; >>> (count_primes 4)\n;; 0\n;; >>> (count_primes 1)\n;; 0",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (- i 1))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 5)\n;; 3\n;; >>> (count_primes 100)\n;; 11\n;; >>> (count_primes 1000)\n;; 101\n;; >>> (count_primes 100000)\n;; 1021\n;; >>> (count_primes 1000000)\n;; 1047\n;; >>> (count_primes 10000000)\n;; 1087\n;; >>> (count_primes 100000000)\n;; 1097\n;; >>> (count_primes 1000000000)\n;; 1103\n;; >>> (count_primes 10000000000)\n;; 1105\n;; >>> (count_primes 100000000000)\n;; 1105\n;; >>> (count_primes 1000000000000)\n;; 1105\n;; >>> (count_primes 10000000000000)\n;; 1105\n;; >>> (count_primes 100000000000000)\n;; 1105\n;; >>> (count_primes 1000000000000000)\n;; 1105\n;; >>> (count_primes 10000000000000000)\n;; 1105\n;; >>> (count_primes 100000000000000000)\n;; 1105\n;; >>> (count_primes 1000000000000000000)\n;; 1105\n;; >>> (count_primes 10000000000000000000)\n;; 1105\n;; >>> (count_primes 100000000000000000000)\n;; 1105\n;; >>> (count_primes 1000000000000000000000)\n;; 1105\n;; >>> (count_primes 10000000000000000000000)\n;; 1105\n;; >>> (count_primes 100000000000000000000000)\n;; 1105\n;; >>> (count_primes 1000000000000000000000000)\n;; 1105\n;; >>> (count_primes 10000000000000000000000000)\n;; 1105\n;; >>> (count_primes 100000000000000000000000000)\n;; 1105\n;; >>> (count_primes 1000000000000000000000000000)\n;; 1105\n;; >>> (count_primes 10000000000000000000000000000)\n;; 1105\n;; >>> (count_primes 100000000000000000000000000000)\n;; 110",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (modulo i 2))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 101)\n;; 5\n;; >>> (count_primes 11)\n;; 2\n;; >>> (count_primes 13441)\n;; 4\n;; >>> (count_primes 61)\n;; 2\n;; >>> (count_primes 4)\n;; 0\n;; >>> (count_primes 1)\n;; 0",
    "  (cond\n    ((zero? n) #t)\n    ((zero? (quotient n 2)))\n    (else\n      (and\n        (not (zero? (modulo n 2)))\n        (is_prime (quotient n 2)))))\n)\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; #f\n;; >>> (count_primes 101)\n;; #f\n;; >>> (count_primes 11)\n;; #f\n;; >>> (count_primes 13441)\n;; #f\n;; >>> (count_primes 61)\n;; #f\n;; >>> (count_primes 4)\n;; #f\n;; >>> (count_primes 1)\n;; #f",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and\n          (zero? (modulo n (car i)))\n          (not (is_prime (car i)))\n          (not (is_prime (cdr i)))))))\n  )\n)\n\n;; Return true if a given number is even, and false otherwise.\n;; >>> (is_even 6)\n;; #f\n;; >>> (is_even 101)\n;; #f\n;; >>> (is_even 11)\n;; #t\n;; >>> (is_even 13441)\n;; #f\n;; >>> (is_even 61)\n;; #f\n;; >>> (is_even 4)\n;; #t\n;; >>> (is_even 1)\n;; #f",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (modulo i 2))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 0)\n;; 0\n;; >>> (count_primes 1)\n;; 0\n;; >>> (count_primes 2)\n;; 1\n;; >>> (count_primes 3)\n;; 2\n;; >>> (count_primes 4)\n;; 2\n;; >>> (count_primes 5)\n;; 3\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 7)\n;; 4\n;; >>> (count_primes 8)\n;; 4\n;; >>> (count_primes 9)\n;; 5\n;; >>> (count_primes 10)\n;; 5\n;; >>> (count_primes 11)\n;; 6\n;; >>> (count_primes 12)\n;; 6\n;; >>> (count_primes 13)\n;; 7\n;; >>> (count_primes 14)\n;; 7\n;; >>> (count_primes 15)\n;; 8\n;; >>> (count_primes 16)\n;; 8\n;; >>> (count_primes 17)\n;; 9\n;; >>> (count_primes 18)\n;; 9\n;; >>> (count_primes 19)\n;; 10\n;; >>> (count_primes 20)\n;; 10\n;; >>> (count_primes 21)\n;; 11\n;; >>> (count_primes 22)\n;; 11\n;; >>> (count_primes 23)\n;; 12\n;; >>> (count_primes 24)\n;; 12\n;; >>> (count_primes 25)\n;; 13\n;; >>> (count_primes 26)\n;; 13\n;; >>> (count_primes 27)\n;; 14\n;; >>> (count_primes 28)\n;; 14\n;; >>> (count_primes 29)\n;; 15\n;; >>> (count_primes 30)\n;; 15\n;; >>> (count_primes 31)\n;; 16\n;; >>> (count_primes 32)\n;; 16\n;; >>> (",
    "  (cond\n    ((zero? n) #t)\n    ((zero? (modulo n 2)) #f)\n    ((zero? (modulo n 3)) #f)\n    ((zero? (modulo n 5)) #f)\n    ((zero? (modulo n 7)) #f)\n    ((zero? (modulo n 11)) #f)\n    ((zero? (modulo n 13)) #f)\n    ((zero? (modulo n 17)) #f)\n    ((zero? (modulo n 19)) #f)\n    ((zero? (modulo n 23)) #f)\n    ((zero? (modulo n 29)) #f)\n    ((zero? (modulo n 31)) #f)\n    ((zero? (modulo n 37)) #f)\n    ((zero? (modulo n 41)) #f)\n    ((zero? (modulo n 43)) #f)\n    ((zero? (modulo n 47)) #f)\n    ((zero? (modulo n 53)) #f)\n    ((zero? (modulo n 59)) #f)\n    ((zero? (modulo n 61)) #f)\n    ((zero? (modulo n 67)) #f)\n    ((zero? (modulo n 71)) #f)\n    ((zero? (modulo n 73)) #f)\n    ((zero? (modulo n 79)) #f)\n    ((zero? (modulo n 83)) #f)\n    ((zero? (modulo n 89)) #f)\n    ((zero? (modulo n 97)) #f)\n    ((zero? (modulo n 101)) #f)\n    #t))))\n\n;; Return true if a given number is even, and false otherwise.\n;; >>> (is_even 6)\n;; #f\n;; >>> (is_even 101)\n;; #t\n;; >>> (is_even 11)\n;; #f\n;; >>> (is_even 13441)\n;; #f\n;; >>> (is_even 61)\n;; #f\n;; >>> (is_even 4)\n;; #f\n;; >>> (is_even 1)\n;; #t",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and\n          (zero? (modulo n (car i)))\n          (not (is_prime (cdr i))))))))\n\n;; Return the prime factors of a given number.\n;; >>> (prime_factors 6)\n;; #()\n;; >>> (prime_factors 101)\n;; #(101)\n;; >>> (prime_factors 11)\n;; #(11)\n;; >>> (prime_factors 13441)\n;; #(13, 41)\n;; >>> (prime_factors 61)\n;; #(61)\n;; >>> (prime_factors 4)\n;; #()\n;; >>> (prime_factors 1)\n;; #()",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and (>= n 1)\n             (not (modulo i 2))\n             (not (modulo (modulo i 3) 2))\n             (not (modulo (modulo i 5) 2))\n             (not (modulo (modulo i 7) 2))\n             (not (modulo (modulo i 11) 2))\n             (not (modulo (modulo i 13) 2))\n             (not (modulo (modulo i 17) 2))\n             (not (modulo (modulo i 19) 2))\n             (not (modulo (modulo i 23) 2))\n             (not (modulo (modulo i 29) 2))\n             (not (modulo (modulo i 31) 2))\n             (not (modulo (modulo i 37) 2))\n             (not (modulo (modulo i 41) 2))\n             (not (modulo (modulo i 43) 2))\n             (not (modulo (modulo i 47) 2))\n             (not (modulo (modulo i 53) 2))\n             (not (modulo (modulo i 59) 2))\n             (not (modulo (modulo i 61) 2))\n             (not (modulo (modulo i 67) 2))\n             (not (modulo (modulo i 71) 2))\n             (not (modulo (modulo i 73) 2))\n             (not (modulo (modulo i 79) 2))\n             (not (modulo (modulo i 83) 2))\n             (not (modulo (modulo i 89) 2))\n             (not (modulo (modulo i 97) 2))))))))))))\n",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and\n          (zero? (modulo n 2))\n          (not (modulo i 2))\n          (not (modulo (modulo i 3) 2))\n          (not (modulo (modulo i 5) 2))\n          (not (modulo (modulo i 7) 2))\n          (not (modulo (modulo i 11) 2))\n          (not (modulo (modulo i 13) 2))\n          (not (modulo (modulo i 17) 2))\n          (not (modulo (modulo i 19) 2))\n          (not (modulo (modulo i 23) 2))\n          (not (modulo (modulo i 29) 2))\n          (not (modulo (modulo i 31) 2))\n          (not (modulo (modulo i 37) 2))\n          (not (modulo (modulo i 41) 2))\n          (not (modulo (modulo i 43) 2))\n          (not (modulo (modulo i 47) 2))\n          (not (modulo (modulo i 53) 2))\n          (not (modulo (modulo i 59) 2))\n          (not (modulo (modulo i 61) 2))\n          (not (modulo (modulo i 67) 2))\n          (not (modulo (modulo i 71) 2))\n          (not (modulo (modulo i 73) 2))\n          (not (modulo (modulo i 79) 2))\n          (not (modulo (modulo i 83) 2))\n          (not (modulo (modulo i 89) 2))\n          (not (modulo (modulo i 97) 2))))))))))\n\n;; Return true if a given number is a perfect square, and false otherwise.\n;; >>> (is_square 6)\n;; #f\n;; >>> (is_square 101)\n;; #f\n;; >>> (is_square 11)\n;; #f\n;; >>> (is_square 13441)\n;; #f\n;; >>> (is_square 61)\n;; #f\n;; >>> (is_square 4)\n;; #f\n",
    "  (cond\n    ((zero? n) #t)\n    ((zero? (quotient n 2)))\n    (else\n      (and\n        (not (zero? (modulo n 2)))\n        (not (zero? (modulo (quotient n 2) 2)))\n        (is_prime (quotient n 2)))))\n)\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 0)\n;; #f\n;; >>> (count_primes 1)\n;; #f\n;; >>> (count_primes 2)\n;; #f\n;; >>> (count_primes 3)\n;; #f\n;; >>> (count_primes 4)\n;; #f\n;; >>> (count_primes 5)\n;; #f\n;; >>> (count_primes 6)\n;; #f\n;; >>> (count_primes 7)\n;; #f\n;; >>> (count_primes 8)\n;; #f\n;; >>> (count_primes 9)\n;; #f\n;; >>> (count_primes 10)\n;; #f\n;; >>> (count_primes 11)\n;; #f\n;; >>> (count_primes 12)\n;; #f\n;; >>> (count_primes 13)\n;; #f\n;; >>> (count_primes 14)\n;; #f\n;; >>> (count_primes 15)\n;; #f\n;; >>> (count_primes 16)\n;; #f\n;; >>> (count_primes 17)\n;; #f\n;; >>> (count_primes 18)\n;; #f\n;; >>> (count_primes 19)\n;; #f\n;; >>> (count_primes 20)\n;; #f\n;; >>> (count_primes 21)\n;; #f\n;; >>> (count_primes 22)\n;; #f\n;; >>> (count_primes 23)\n;; #f\n;; >>> (count_primes 24)\n;; #f\n;; >>> (count_primes 25)\n;; #f\n;; >>> (count_primes 26)\n;; #f\n;; >>> (count_primes 27)\n;; #f\n;; >>> (count_primes 28)\n;; #f\n;; >>> (count_pr",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and\n          (zero? (modulo n (car i)))\n          (not (is_prime (cdr i))))))))\n\n;; Return true if a given number is even, and false otherwise.\n;; >>> (is_even 6)\n;; #f\n;; >>> (is_even 101)\n;; #f\n;; >>> (is_even 11)\n;; #t\n;; >>> (is_even 13441)\n;; #f\n;; >>> (is_even 61)\n;; #f\n;; >>> (is_even 4)\n;; #f\n;; >>> (is_even 1)\n;; #t",
    "  (cond\n    ((zero? n) #t)\n    ((negative? n) #f)\n    (else\n      (let ((i (quotient n 2)))\n        (and\n          (zero? i)\n          (not\n            (remainder n (quotient i 2)))\n          (is_prime (quotient n i)))))\n  )\n)\n\n;; Return the prime factors of a given number.\n;; >>> (prime_factors 6)\n;; #()\n;; >>> (prime_factors 101)\n;; #(101)\n;; >>> (prime_factors 11)\n;; #(11)\n;; >>> (prime_factors 13441)\n;; #(13, 41)\n;; >>> (prime_factors 61)\n;; #(61)\n;; >>> (prime_factors 4)\n;; #()\n;; >>> (prime_factors 1)\n;; #()",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (- i 1))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 0)\n;; 0\n;; >>> (count_primes 1)\n;; 0\n;; >>> (count_primes 2)\n;; 1\n;; >>> (count_primes 3)\n;; 2\n;; >>> (count_primes 4)\n;; 3\n;; >>> (count_primes 5)\n;; 4\n;; >>> (count_primes 6)\n;; 5\n;; >>> (count_primes 7)\n;; 6\n;; >>> (count_primes 8)\n;; 7\n;; >>> (count_primes 9)\n;; 8\n;; >>> (count_primes 10)\n;; 9\n;; >>> (count_primes 11)\n;; 10\n;; >>> (count_primes 12)\n;; 11\n;; >>> (count_primes 13)\n;; 12\n;; >>> (count_primes 14)\n;; 13\n;; >>> (count_primes 15)\n;; 14\n;; >>> (count_primes 16)\n;; 15\n;; >>> (count_primes 17)\n;; 16\n;; >>> (count_primes 18)\n;; 17\n;; >>> (count_primes 19)\n;; 18\n;; >>> (count_primes 20)\n;; 19\n;; >>> (count_primes 21)\n;; 20\n;; >>> (count_primes 22)\n;; 21\n;; >>> (count_primes 23)\n;; 22\n;; >>> (count_primes 24)\n;; 23\n;; >>> (count_primes 25)\n;; 24\n;; >>> (count_primes 26)\n;; 25\n;; >>> (count_primes 27)\n;; 26\n;; >>> (count_primes 28)\n;; 27\n;; >>> (count_primes 29)\n;; 28\n;; >>> (count_primes 30)\n;; 29\n;; >>> (count_primes 31)\n;; 30\n;; >>> (count_primes 32)\n;; 31\n;; >>> (count_",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (modulo i 2))))))))\n\n;; Return the prime factors of a given number.\n;; >>> (prime_factors 6)\n;; #(6)\n;; >>> (prime_factors 101)\n;; #(101)\n;; >>> (prime_factors 11)\n;; #(11)\n;; >>> (prime_factors 13441)\n;; #(13, 41)\n;; >>> (prime_factors 61)\n;; #(61)\n;; >>> (prime_factors 4)\n;; #()\n;; >>> (prime_factors 1)\n;; #()",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and (>= n 1)\n             (not (modulo n 2))\n             (not (modulo n 3))\n             (every\n               [(lambda (j) (modulo (modulo n (quotient j i)) 2))]\n               (range 1 i - 1)))\n      )\n    )\n  )\n)\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 0)\n;; 0\n;; >>> (count_primes 1)\n;; 0\n;; >>> (count_primes 2)\n;; 1\n;; >>> (count_primes 3)\n;; 2\n;; >>> (count_primes 4)\n;; 2\n;; >>> (count_primes 5)\n;; 3\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 7)\n;; 4\n;; >>> (count_primes 8)\n;; 4\n;; >>> (count_primes 9)\n;; 5\n;; >>> (count_primes 10)\n;; 5\n;; >>> (count_primes 11)\n;; 6\n;; >>> (count_primes 12)\n;; 6\n;; >>> (count_primes 13)\n;; 7\n;; >>> (count_primes 14)\n;; 7\n;; >>> (count_primes 15)\n;; 8\n;; >>> (count_primes 16)\n;; 8\n;; >>> (count_primes 17)\n;; 9\n;; >>> (count_primes 18)\n;; 9\n;; >>> (count_primes 19)\n;; 10\n;; >>> (count_primes 20)\n;; 10\n;; >>> (count_primes 21)\n;; 11\n;; >>> (count_primes 22)\n;; 11\n;; >>> (count_primes 23)\n;; 12\n;; >>> (count_primes 24)\n;; 12\n;; >>> (count_primes 25)\n;; 13\n;; >>> (count_primes 26)\n;; 13\n;; >>> (count_primes 27)\n;; 14\n;; >>> (count_primes 28)\n;; 14\n;; >>> (count_primes 29)\n;;",
    "  (cond\n    ((zero? n) #t)\n    ((zero? (modulo n 2)) #f)\n    ((not (zero? (modulo n 3))) #t)\n    (else #f)\n  )\n)\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 5)\n;; 3\n;; >>> (count_primes 100)\n;; 11\n;; >>> (count_primes 100000)\n;; 16\n;; >>> (count_primes 1000000)\n;; 17\n;; >>> (count_primes 10000000)\n;; 18\n;; >>> (count_primes 100000000)\n;; 19\n;; >>> (count_primes 1000000000)\n;; 20\n;; >>> (count_primes 10000000000)\n;; 21\n;; >>> (count_primes 100000000000)\n;; 22\n;; >>> (count_primes 1000000000000)\n;; 23\n;; >>> (count_primes 10000000000000)\n;; 24\n;; >>> (count_primes 100000000000000)\n;; 25\n;; >>> (count_primes 1000000000000000)\n;; 26\n;; >>> (count_primes 10000000000000000)\n;; 27\n;; >>> (count_primes 100000000000000000)\n;; 28\n;; >>> (count_primes 1000000000000000000)\n;; 29\n;; >>> (count_primes 10000000000000000000)\n;; 30\n;; >>> (count_primes 100000000000000000000)\n;; 31\n;; >>> (count_primes 1000000000000000000000)\n;; 32\n;; >>> (count_primes 10000000000000000000000)\n;; 33\n;; >>> (count_primes 100000000000000000000000)\n;; 34\n;; >>> (count_primes 1000000000000000000000000)\n;; 35\n;; >>> (count_primes 10000000000000000000000000)\n;; 36\n;; >>> (count_primes 100000000000000000000000000)\n;; 37\n;; >>> (count_primes 1000000000000000000000000000)\n;; 38\n;; >>> (count_primes 10000000000000000000000000000)\n;; 39\n;; >>> (count_primes 100000000000000000000000000000)\n;; 40\n;; >>> (count_primes 1000000000000000000000000000000)\n;; 41\n;; >>> (count_primes 10000000000000000000000000000000)\n;; 42\n;; >>> (count_primes 100",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (is_prime (modulo i 2)))))\n    ))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 0)\n;; 0\n;; >>> (count_primes 1)\n;; 0\n;; >>> (count_primes 2)\n;; 1\n;; >>> (count_primes 3)\n;; 2\n;; >>> (count_primes 4)\n;; 2\n;; >>> (count_primes 5)\n;; 3\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 7)\n;; 4\n;; >>> (count_primes 8)\n;; 4\n;; >>> (count_primes 9)\n;; 5\n;; >>> (count_primes 10)\n;; 5\n;; >>> (count_primes 11)\n;; 6\n;; >>> (count_primes 12)\n;; 6\n;; >>> (count_primes 13)\n;; 7\n;; >>> (count_primes 14)\n;; 7\n;; >>> (count_primes 15)\n;; 8\n;; >>> (count_primes 16)\n;; 8\n;; >>> (count_primes 17)\n;; 9\n;; >>> (count_primes 18)\n;; 9\n;; >>> (count_primes 19)\n;; 10\n;; >>> (count_primes 20)\n;; 10\n;; >>> (count_primes 21)\n;; 11\n;; >>> (count_primes 22)\n;; 11\n;; >>> (count_primes 23)\n;; 12\n;; >>> (count_primes 24)\n;; 12\n;; >>> (count_primes 25)\n;; 13\n;; >>> (count_primes 26)\n;; 13\n;; >>> (count_primes 27)\n;; 14\n;; >>> (count_primes 28)\n;; 14\n;; >>> (count_primes 29)\n;; 15\n;; >>> (count_primes 30)\n;; 15\n;; >>> (count_primes 31)\n;; 16\n;; >>> (count_primes 32)\n;; 16\n;; >>> (count_",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (modulo i 2))))))))\n\n;; Return the prime factors of a given number.\n;; >>> (prime_factors 6)\n;; #()\n;; >>> (prime_factors 101)\n;; #(101)\n;; >>> (prime_factors 11)\n;; #(11)\n;; >>> (prime_factors 13441)\n;; #(13, 41)\n;; >>> (prime_factors 61)\n;; #(61)\n;; >>> (prime_factors 4)\n;; #()\n;; >>> (prime_factors 1)\n;; #()",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and (>= n 1)\n             (not (modulo i 2))\n             (not (modulo (sub1 i) 2))\n             (is_prime (sub1 i)))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 0)\n;; 0\n;; >>> (count_primes 1)\n;; 0\n;; >>> (count_primes 2)\n;; 1\n;; >>> (count_primes 3)\n;; 2\n;; >>> (count_primes 4)\n;; 3\n;; >>> (count_primes 5)\n;; 4\n;; >>> (count_primes 6)\n;; 5\n;; >>> (count_primes 7)\n;; 6\n;; >>> (count_primes 8)\n;; 7\n;; >>> (count_primes 9)\n;; 8\n;; >>> (count_primes 10)\n;; 9\n;; >>> (count_primes 11)\n;; 10\n;; >>> (count_primes 12)\n;; 11\n;; >>> (count_primes 13)\n;; 12\n;; >>> (count_primes 14)\n;; 13\n;; >>> (count_primes 15)\n;; 14\n;; >>> (count_primes 16)\n;; 15\n;; >>> (count_primes 17)\n;; 16\n;; >>> (count_primes 18)\n;; 17\n;; >>> (count_primes 19)\n;; 18\n;; >>> (count_primes 20)\n;; 19\n;; >>> (count_primes 21)\n;; 20\n;; >>> (count_primes 22)\n;; 21\n;; >>> (count_primes 23)\n;; 22\n;; >>> (count_primes 24)\n;; 23\n;; >>> (count_primes 25)\n;; 24\n;; >>> (count_primes 26)\n;; 25\n;; >>> (count_primes 27)\n;; 26\n;; >>> (count_primes 28)\n;; 27\n;; >>> (count_primes 29)\n;; 28\n;; >>> (count_primes 30)\n;; 29\n;; >>> (count_primes 31)\n;; 30\n;; >>> (count_",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (modulo i 2))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 1)\n;; 1\n;; >>> (count_primes 2)\n;; 1\n;; >>> (count_primes 3)\n;; 2\n;; >>> (count_primes 4)\n;; 2\n;; >>> (count_primes 5)\n;; 3\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 7)\n;; 4\n;; >>> (count_primes 8)\n;; 4\n;; >>> (count_primes 9)\n;; 5\n;; >>> (count_primes 10)\n;; 5\n;; >>> (count_primes 11)\n;; 6\n;; >>> (count_primes 12)\n;; 6\n;; >>> (count_primes 13)\n;; 7\n;; >>> (count_primes 14)\n;; 7\n;; >>> (count_primes 15)\n;; 8\n;; >>> (count_primes 16)\n;; 8\n;; >>> (count_primes 17)\n;; 9\n;; >>> (count_primes 18)\n;; 9\n;; >>> (count_primes 19)\n;; 10\n;; >>> (count_primes 20)\n;; 10\n;; >>> (count_primes 21)\n;; 11\n;; >>> (count_primes 22)\n;; 11\n;; >>> (count_primes 23)\n;; 12\n;; >>> (count_primes 24)\n;; 12\n;; >>> (count_primes 25)\n;; 13\n;; >>> (count_primes 26)\n;; 13\n;; >>> (count_primes 27)\n;; 14\n;; >>> (count_primes 28)\n;; 14\n;; >>> (count_primes 29)\n;; 15\n;; >>> (count_primes 30)\n;; 15\n;; >>> (count_primes 31)\n;; 16\n;; >>> (count_primes 32)\n;; 16\n;; >>> (count_primes 33)\n;; 17\n;; >>> (",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      (= n 1)\n      (else\n        (and (>= n 1) (<= n i)\n               (not (modulo n i)))))))\n\n;; Return the prime factors of a given number.\n;; >>> (prime_factors 6)\n;; #f\n;; >>> (prime_factors 101)\n;; #f\n;; >>> (prime_factors 11)\n;; #f\n;; >>> (prime_factors 13441)\n;; #f\n;; >>> (prime_factors 61)\n;; #f\n;; >>> (prime_factors 4)\n;; #f\n;; >>> (prime_factors 1)\n;; #f",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and\n          (zero? (modulo n 2))\n          (not (modulo i 2))\n          (not (modulo (modulo i 3) 2))\n          (not (modulo (modulo i 5) 2))\n          (not (modulo (modulo i 7) 2))\n          (not (modulo (modulo i 11) 2))\n          (not (modulo (modulo i 13) 2))\n          (not (modulo (modulo i 17) 2))\n          (not (modulo (modulo i 19) 2))\n          (not (modulo (modulo i 23) 2))\n          (not (modulo (modulo i 29) 2))\n          (not (modulo (modulo i 31) 2))\n          (not (modulo (modulo i 37) 2))\n          (not (modulo (modulo i 41) 2))\n          (not (modulo (modulo i 43) 2))\n          (not (modulo (modulo i 47) 2))\n          (not (modulo (modulo i 53) 2))\n          (not (modulo (modulo i 59) 2))\n          (not (modulo (modulo i 61) 2))\n          (not (modulo (modulo i 67) 2))\n          (not (modulo (modulo i 71) 2))\n          (not (modulo (modulo i 73) 2))\n          (not (modulo (modulo i 79) 2))\n          (not (modulo (modulo i 83) 2))\n          (not (modulo (modulo i 89) 2))\n          (not (modulo (modulo i 97) 2))))))))))))\n\n;; Return true if a given number is prime, and false otherwise.\n;; >>> (is_prime? 6)\n;; #f\n;; >>> (is_prime? 101)\n;; #t\n;; >>> (is_prime? 11)\n;; #t\n;; >>> (is_prime? 13441)\n;; #t\n;; >>> (is_prime? 61)\n;; #t\n;; >>> (is_prime? 4)\n",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and (>= n 1)\n             (not (modulo i 2))\n             (not (modulo (sub1 i) 2))\n             (is_prime (sub1 i)))))\n  )\n)\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 0)\n;; 0\n;; >>> (count_primes 1)\n;; 0\n;; >>> (count_primes 2)\n;; 1\n;; >>> (count_primes 3)\n;; 2\n;; >>> (count_primes 4)\n;; 2\n;; >>> (count_primes 5)\n;; 3\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 7)\n;; 4\n;; >>> (count_primes 8)\n;; 4\n;; >>> (count_primes 9)\n;; 5\n;; >>> (count_primes 10)\n;; 5\n;; >>> (count_primes 11)\n;; 6\n;; >>> (count_primes 12)\n;; 6\n;; >>> (count_primes 13)\n;; 7\n;; >>> (count_primes 14)\n;; 7\n;; >>> (count_primes 15)\n;; 8\n;; >>> (count_primes 16)\n;; 8\n;; >>> (count_primes 17)\n;; 9\n;; >>> (count_primes 18)\n;; 9\n;; >>> (count_primes 19)\n;; 10\n;; >>> (count_primes 20)\n;; 10\n;; >>> (count_primes 21)\n;; 11\n;; >>> (count_primes 22)\n;; 11\n;; >>> (count_primes 23)\n;; 12\n;; >>> (count_primes 24)\n;; 12\n;; >>> (count_primes 25)\n;; 13\n;; >>> (count_primes 26)\n;; 13\n;; >>> (count_primes 27)\n;; 14\n;; >>> (count_primes 28)\n;; 14\n;; >>> (count_primes 29)\n;; 15\n;; >>> (count_primes 30)\n;; 15\n;; >>> (count_primes 31)\n;; 16\n",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and (>= n 1)\n             (not (modulo i 2))\n             (not (modulo (modulo i 3) 2))\n             (not (modulo (modulo i 5) 2))\n             (not (modulo (modulo i 7) 2))\n             (not (modulo (modulo i 11) 2))\n             (not (modulo (modulo i 13) 2))\n             (not (modulo (modulo i 17) 2))\n             (not (modulo (modulo i 19) 2))\n             (not (modulo (modulo i 23) 2))\n             (not (modulo (modulo i 29) 2))\n             (not (modulo (modulo i 31) 2))\n             (not (modulo (modulo i 37) 2))\n             (not (modulo (modulo i 41) 2))\n             (not (modulo (modulo i 43) 2))\n             (not (modulo (modulo i 47) 2))\n             (not (modulo (modulo i 53) 2))\n             (not (modulo (modulo i 59) 2))\n             (not (modulo (modulo i 61) 2))\n             (not (modulo (modulo i 67) 2))\n             (not (modulo (modulo i 71) 2))\n             (not (modulo (modulo i 73) 2))\n             (not (modulo (modulo i 79) 2))\n             (not (modulo (modulo i 83) 2))\n             (not (modulo (modulo i 89) 2))\n             (not (modulo (modulo i 97) 2))))))))))\n\n;; Return true if a given number is prime, and false otherwise.\n;; >>> (is_prime? 6)\n;; #f\n;; >>> (is_prime? 101)\n;; #t\n;; >>> (is_prime? 11)\n;; #t\n;; >>> (is_prime? 13441)\n;; #t\n;; >>> (is_prime? 61)\n;; #t\n;; >>> (is_prime? 4)\n;; #f\n;; >>>",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (modulo i 2))))))))\n\n;; Return true if a given number is even, and false otherwise.\n;; >>> (is_even 6)\n;; #f\n;; >>> (is_even 101)\n;; #t\n;; >>> (is_even 11)\n;; #f\n;; >>> (is_even 13441)\n;; #f\n;; >>> (is_even 61)\n;; #f\n;; >>> (is_even 4)\n;; #t\n;; >>> (is_even 1)\n;; #f",
    "  (cond\n    ((zero? n) #t)\n    ((zero? (modulo n 2)) #f)\n    ((zero? (modulo n 3)) #f)\n    ((zero? (modulo n 5)) #f)\n    ((zero? (modulo n 7)) #f)\n    ((zero? (modulo n 11)) #f)\n    ((zero? (modulo n 13)) #f)\n    ((zero? (modulo n 17)) #f)\n    ((zero? (modulo n 19)) #f)\n    ((zero? (modulo n 23)) #f)\n    ((zero? (modulo n 29)) #f)\n    ((zero? (modulo n 31)) #f)\n    ((zero? (modulo n 37)) #f)\n    ((zero? (modulo n 41)) #f)\n    ((zero? (modulo n 43)) #f)\n    ((zero? (modulo n 47)) #f)\n    ((zero? (modulo n 53)) #f)\n    ((zero? (modulo n 59)) #f)\n    ((zero? (modulo n 61)) #f)\n    ((zero? (modulo n 67)) #f)\n    ((zero? (modulo n 71)) #f)\n    ((zero? (modulo n 73)) #f)\n    ((zero? (modulo n 79)) #f)\n    ((zero? (modulo n 83)) #f)\n    ((zero? (modulo n 89)) #f)\n    ((zero? (modulo n 97)) #f)\n    ((zero? (modulo n 101)) #f)\n    #t))))\n\n;; Return true if a given number is prime, and false otherwise.\n;; >>> (is_prime? 6)\n;; #f\n;; >>> (is_prime? 101)\n;; #t\n;; >>> (is_prime? 11)\n;; #t\n;; >>> (is_prime? 13441)\n;; #t\n;; >>> (is_prime? 61)\n;; #t\n;; >>> (is_prime? 4)\n;; #f\n;; >>> (is_prime? 1)\n;; #f",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (is_prime (modulo i 2)))\n          (is_prime (modulo i 3))\n          (is_prime (modulo i 5))\n          (is_prime (modulo i 7))\n          (is_prime (modulo i 11))\n          (is_prime (modulo i 13))\n          (is_prime (modulo i 17))\n          (is_prime (modulo i 19))\n          (is_prime (modulo i 23))\n          (is_prime (modulo i 29))\n          (is_prime (modulo i 31))\n          (is_prime (modulo i 37))\n          (is_prime (modulo i 41))\n          (is_prime (modulo i 43))\n          (is_prime (modulo i 47))\n          (is_prime (modulo i 53))\n          (is_prime (modulo i 59))\n          (is_prime (modulo i 61))\n          (is_prime (modulo i 67))\n          (is_prime (modulo i 71))\n          (is_prime (modulo i 73))\n          (is_prime (modulo i 79))\n          (is_prime (modulo i 83))\n          (is_prime (modulo i 89))\n          (is_prime (modulo i 97))\n          (is_prime (modulo i 101))))))))))))\n",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and (>= n 1)\n             (not (modulo n 2))\n             (not (modulo n 3))\n             (not (modulo n 5))\n             (not (modulo n 7))\n             (not (modulo n 11))\n             (not (modulo n 13))\n             (not (modulo n 17))\n             (not (modulo n 19))\n             (not (modulo n 23))\n             (not (modulo n 29))\n             (not (modulo n 31))\n             (not (modulo n 37))\n             (not (modulo n 41))\n             (not (modulo n 43))\n             (not (modulo n 47))\n             (not (modulo n 53))\n             (not (modulo n 59))\n             (not (modulo n 61))))))))\n\n;; Return true if a given number is prime, and false otherwise.\n;; >>> (is_prime? 6)\n;; #f\n;; >>> (is_prime? 101)\n;; #t\n;; >>> (is_prime? 11)\n;; #t\n;; >>> (is_prime? 13441)\n;; #t\n;; >>> (is_prime? 61)\n;; #t\n;; >>> (is_prime? 4)\n;; #f\n;; >>> (is_prime? 1)\n;; #f",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (modulo i 2))))))))\n\n;; Return true if a given number is even, and false otherwise.\n;; >>> (is_even 6)\n;; #f\n;; >>> (is_even 101)\n;; #t\n;; >>> (is_even 11)\n;; #f\n;; >>> (is_even 13441)\n;; #f\n;; >>> (is_even 61)\n;; #f\n;; >>> (is_even 4)\n;; #t\n;; >>> (is_even 1)\n;; #f",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and (>= n 1)\n             (not (modulo i 2))\n             (not (modulo (modulo i 3) 2))\n             (not (modulo (modulo i 5) 2))\n             (not (modulo (modulo i 7) 2))\n             (not (modulo (modulo i 11) 2))\n             (not (modulo (modulo i 13) 2))\n             (not (modulo (modulo i 17) 2))\n             (not (modulo (modulo i 19) 2))\n             (not (modulo (modulo i 23) 2))\n             (not (modulo (modulo i 29) 2))\n             (not (modulo (modulo i 31) 2))\n             (not (modulo (modulo i 37) 2))\n             (not (modulo (modulo i 41) 2))\n             (not (modulo (modulo i 43) 2))\n             (not (modulo (modulo i 47) 2))\n             (not (modulo (modulo i 53) 2))\n             (not (modulo (modulo i 59) 2))\n             (not (modulo (modulo i 61) 2))\n             (not (modulo (modulo i 67) 2))\n             (not (modulo (modulo i 71) 2))\n             (not (modulo (modulo i 73) 2))\n             (not (modulo (modulo i 79) 2))\n             (not (modulo (modulo i 83) 2))\n             (not (modulo (modulo i 89) 2))\n             (not (modulo (modulo i 97) 2))))))))))))\n",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and\n          (zero? (modulo n i))\n          (not (modulo n (multiply i i)))\n          (is_prime (sub1 i)))))\n    ))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count-primes 5)\n;; 3\n;; >>> (count-primes 100)\n;; 11\n;; >>> (count-primes 100000)\n;; 1629\n;; >>> (count-primes 1000000)\n;; 163097\n;; >>> (count-primes 10000000)\n;; 16309871\n;; >>> (count-primes 100000000)\n;; 16309871\n;; >>> (count-primes 1000000000)\n;; 16309871\n;; >>> (count-primes 10000000000)\n;; 16309871\n;; >>> (count-primes 100000000000)\n;; 16309871\n;; >>> (count-primes 1000000000000)\n;; 16309871\n;; >>> (count-primes 10000000000000)\n;; 16309871\n;; >>> (count-primes 100000000000000)\n;; 16309871\n;; >>> (count-primes 1000000000000000)\n;; 16309871\n;; >>> (count-primes 10000000000000000)\n;; 16309871\n;; >>> (count-primes 100000000000000000)\n;; 16309871\n;; >>> (count-primes 1000000000000000000)\n;; 16309871\n;; >>> (count-primes 10000000000000000000)\n;; 16309871\n;; >>> (count-primes 100000000000000000000)\n;; 16309871\n;; >>> (count-primes 1000000000000000000000)\n;; 16309871\n;; >>> (count-primes 10000000000000000000000)\n;; 16309871\n;; >>> (count-primes 100000000000000000000000)\n;; 16309871\n;; >>> (count-primes 1000000000000000000000000)\n;; 16309871\n;; >>> (count-primes 10000000000000000000000000)\n;; 16309871\n;; >>> (count-primes 100000000000000000000000000)\n;; 16309871\n;; >>> (count-primes 100",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (modulo i 2))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 0)\n;; 0\n;; >>> (count_primes 1)\n;; 0\n;; >>> (count_primes 2)\n;; 1\n;; >>> (count_primes 3)\n;; 2\n;; >>> (count_primes 4)\n;; 2\n;; >>> (count_primes 5)\n;; 3\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 7)\n;; 4\n;; >>> (count_primes 8)\n;; 4\n;; >>> (count_primes 9)\n;; 5\n;; >>> (count_primes 10)\n;; 5\n;; >>> (count_primes 11)\n;; 6\n;; >>> (count_primes 12)\n;; 6\n;; >>> (count_primes 13)\n;; 7\n;; >>> (count_primes 14)\n;; 7\n;; >>> (count_primes 15)\n;; 8\n;; >>> (count_primes 16)\n;; 8\n;; >>> (count_primes 17)\n;; 9\n;; >>> (count_primes 18)\n;; 9\n;; >>> (count_primes 19)\n;; 10\n;; >>> (count_primes 20)\n;; 10\n;; >>> (count_primes 21)\n;; 11\n;; >>> (count_primes 22)\n;; 11\n;; >>> (count_primes 23)\n;; 12\n;; >>> (count_primes 24)\n;; 12\n;; >>> (count_primes 25)\n;; 13\n;; >>> (count_primes 26)\n;; 13\n;; >>> (count_primes 27)\n;; 14\n;; >>> (count_primes 28)\n;; 14\n;; >>> (count_primes 29)\n;; 15\n;; >>> (count_primes 30)\n;; 15\n;; >>> (count_primes 31)\n;; 16\n;; >>> (count_primes 32)\n;; 16\n;; >>> (",
    "  (cond\n    ((zero? n) #f)\n    ((negative? n) #f)\n    ((zero? (modulo n 2)))\n    (else\n      (and (>= n 2)\n           (not (modulo n 2)))\n      )\n    )\n  )\n\n;; Return the prime factors of a given number.\n;; >>> (prime_factors 6)\n;; #(6)\n;; >>> (prime_factors 101)\n;; #(101)\n;; >>> (prime_factors 11)\n;; #(11)\n;; >>> (prime_factors 13441)\n;; #(13, 41)\n;; >>> (prime_factors 61)\n;; #(61)\n;; >>> (prime_factors 4)\n;; #()\n;; >>> (prime_factors 1)\n;; #()\n;; >>> (prime_factors 0)\n;; #()\n;; >>> (prime_factors -1)\n;; #()\n;; >>> (prime_factors -2)\n;; #()\n;; >>> (prime_factors -3)\n;; #()\n;; >>> (prime_factors -4)\n;; #()\n;; >>> (prime_factors -5)\n;; #()\n;; >>> (prime_factors -6)\n;; #()\n;; >>> (prime_factors -7)\n;; #()\n;; >>> (prime_factors -8)\n;; #()\n;; >>> (prime_factors -9)\n;; #()\n;; >>> (prime_factors -10)\n;; #()\n;; >>> (prime_factors -11)\n;; #()\n;; >>> (prime_factors -12)\n;; #()\n;; >>> (prime_factors -13)\n;; #()\n;; >>> (prime_factors -14)\n;; #()\n;; >>> (prime_factors -15)\n;; #()\n;; >>> (prime_factors -16)\n;; #()\n;; >>> (prime_factors -17)\n;; #()\n;; >>> (prime_factors -18)\n;; #()\n;; >>> (prime_factors -19)\n;; #()\n;; >>> (prime_factors -20)\n;; #()\n;; >>> (prime_factors -",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and\n          (zero? (modulo n (car i)))\n          (not (is_prime (cdr i))))))))\n\n;; Return the prime factors of a given number.\n;; >>> (prime_factors 6)\n;; #f\n;; >>> (prime_factors 101)\n;; #f\n;; >>> (prime_factors 11)\n;; #f\n;; >>> (prime_factors 13441)\n;; #f\n;; >>> (prime_factors 61)\n;; #f\n;; >>> (prime_factors 4)\n;; #f\n;; >>> (prime_factors 1)\n;; #f",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (modulo i 2))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 0)\n;; 0\n;; >>> (count_primes 1)\n;; 0\n;; >>> (count_primes 2)\n;; 1\n;; >>> (count_primes 3)\n;; 2\n;; >>> (count_primes 4)\n;; 3\n;; >>> (count_primes 5)\n;; 4\n;; >>> (count_primes 6)\n;; 5\n;; >>> (count_primes 7)\n;; 6\n;; >>> (count_primes 8)\n;; 7\n;; >>> (count_primes 9)\n;; 8\n;; >>> (count_primes 10)\n;; 9\n;; >>> (count_primes 11)\n;; 10\n;; >>> (count_primes 12)\n;; 11\n;; >>> (count_primes 13)\n;; 12\n;; >>> (count_primes 14)\n;; 13\n;; >>> (count_primes 15)\n;; 14\n;; >>> (count_primes 16)\n;; 15\n;; >>> (count_primes 17)\n;; 16\n;; >>> (count_primes 18)\n;; 17\n;; >>> (count_primes 19)\n;; 18\n;; >>> (count_primes 20)\n;; 19\n;; >>> (count_primes 21)\n;; 20\n;; >>> (count_primes 22)\n;; 21\n;; >>> (count_primes 23)\n;; 22\n;; >>> (count_primes 24)\n;; 23\n;; >>> (count_primes 25)\n;; 24\n;; >>> (count_primes 26)\n;; 25\n;; >>> (count_primes 27)\n;; 26\n;; >>> (count_primes 28)\n;; 27\n;; >>> (count_primes 29)\n;; 28\n;; >>> (count_primes 30)\n;; 29\n;; >>> (count_primes 31)\n;; 30\n;; >>> (count_primes 32)\n;; 31\n;; >>> (",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (- i 1))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 10)\n;; 6\n;; >>> (count_primes 100)\n;; 25\n;; >>> (count_primes 1000)\n;; 168\n;; >>> (count_primes 1000000)\n;; 2,097,151\n;; >>> (count_primes 1000000000)\n;; 2,147,483,647\n;; >>> (count_primes 1000000000000)\n;; 2,147,483,647\n;; >>> (count_primes 1000000000000000)\n;; 2,147,483,647\n;; >>> (count_primes 10000000000000000)\n;; 2,147,483,647\n;; >>> (count_primes 100000000000000000)\n;; 2,147,483,647\n;; >>> (count_primes 1000000000000000000)\n;; 2,147,483,647\n;; >>> (count_primes 10000000000000000000)\n;; 2,147,483,647\n;; >>> (count_primes 10000000000000000000)\n;; 2,147,483,647\n;; >>> (count_primes 10000000000000000000)\n;; 2,147,483,647\n;; >>> (count_primes 10000000000000000000)\n;; 2,147,483,647\n;; >>> (count_primes 10000000000000000000)\n;; 2,147,483,647\n;; >>> (count_primes 10000000000000000000)\n;; 2,147,483,647\n;; >>> (count_primes 10000000000000000000)\n;; 2,147,483,647\n;; >>> (count_primes 10000000000000000000)\n;; 2,147,483,647\n;; >>> (count_primes 10000000000000000000)\n;; 2,147,483,647\n;; >>> (count_primes 10000000000000000000)\n;; 2,147,483,647\n;; >>> (count_primes 10000000000000000000)\n;; 2,147,483,647\n;; >>> (count_primes 10000000000000000",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (modulo i 2))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 101)\n;; 4\n;; >>> (count_primes 11)\n;; 2\n;; >>> (count_primes 13441)\n;; 5\n;; >>> (count_primes 61)\n;; 3\n;; >>> (count_primes 4)\n;; 0\n;; >>> (count_primes 1)\n;; 0",
    "  (cond\n    ((zero? n) #t)\n    ((zero? (modulo n 2)) #f)\n    ((zero? (modulo n 3)) #f)\n    ((zero? (modulo n 5)) #f)\n    ((zero? (modulo n 7)) #f)\n    ((zero? (modulo n 11)) #f)\n    ((zero? (modulo n 13)) #f)\n    ((zero? (modulo n 17)) #f)\n    ((zero? (modulo n 19)) #f)\n    ((zero? (modulo n 23)) #f)\n    ((zero? (modulo n 29)) #f)\n    ((zero? (modulo n 31)) #f)\n    ((zero? (modulo n 37)) #f)\n    ((zero? (modulo n 41)) #f)\n    ((zero? (modulo n 43)) #f)\n    ((zero? (modulo n 47)) #f)\n    ((zero? (modulo n 53)) #f)\n    ((zero? (modulo n 59)) #f)\n    ((zero? (modulo n 61)) #f)\n    ((zero? (modulo n 67)) #f)\n    ((zero? (modulo n 71)) #f)\n    ((zero? (modulo n 73)) #f)\n    ((zero? (modulo n 79)) #f)\n    ((zero? (modulo n 83)) #f)\n    ((zero? (modulo n 89)) #f)\n    ((zero? (modulo n 97)) #f)\n    ((zero? (modulo n 101)) #f)\n    #t))))\n\n;; Return true if a given number is prime, and false otherwise.\n;; >>> (is_prime? 6)\n;; #f\n;; >>> (is_prime? 101)\n;; #t\n;; >>> (is_prime? 11)\n;; #t\n;; >>> (is_prime? 13441)\n;; #t\n;; >>> (is_prime? 61)\n;; #t\n;; >>> (is_prime? 4)\n;; #f\n;; >>> (is_prime? 1)\n;; #f",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and (>= n 1)\n             (not (= n 1))\n             (not (= n 2))\n             (<= i 2)\n             (is_prime (- n 1) (mod n)))))\n  )\n)\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 0)\n;; 0\n;; >>> (count_primes 1)\n;; 0\n;; >>> (count_primes 2)\n;; 1\n;; >>> (count_primes 3)\n;; 2\n;; >>> (count_primes 4)\n;; 2\n;; >>> (count_primes 5)\n;; 3\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 7)\n;; 4\n;; >>> (count_primes 8)\n;; 4\n;; >>> (count_primes 9)\n;; 5\n;; >>> (count_primes 10)\n;; 5\n;; >>> (count_primes 11)\n;; 6\n;; >>> (count_primes 12)\n;; 6\n;; >>> (count_primes 13)\n;; 7\n;; >>> (count_primes 14)\n;; 7\n;; >>> (count_primes 15)\n;; 8\n;; >>> (count_primes 16)\n;; 8\n;; >>> (count_primes 17)\n;; 9\n;; >>> (count_primes 18)\n;; 9\n;; >>> (count_primes 19)\n;; 10\n;; >>> (count_primes 20)\n;; 10\n;; >>> (count_primes 21)\n;; 11\n;; >>> (count_primes 22)\n;; 11\n;; >>> (count_primes 23)\n;; 12\n;; >>> (count_primes 24)\n;; 12\n;; >>> (count_primes 25)\n;; 13\n;; >>> (count_primes 26)\n;; 13\n;; >>> (count_primes 27)\n;; 14\n;; >>> (count_primes 28)\n;; 14\n;; >>> (count_primes 29)\n;; 15\n;; >>> (count_primes 30)\n;; 15\n;; >>> (count_primes 31)\n",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (- i 1))))))))\n\n;; Return true if a given number is even, and false otherwise.\n;; >>> (is_even 6)\n;; #f\n;; >>> (is_even 101)\n;; #f\n;; >>> (is_even 11)\n;; #t\n;; >>> (is_even 13441)\n;; #f\n;; >>> (is_even 61)\n;; #f\n;; >>> (is_even 4)\n;; #t\n;; >>> (is_even 1)\n;; #f",
    "  (cond\n    ((zero? n) #t)\n    ((zero? (modulo n 2)) #f)\n    ((zero? (modulo n 3)) #f)\n    ((zero? (modulo n 5)) #f)\n    ((zero? (modulo n 7)) #f)\n    ((zero? (modulo n 11)) #f)\n    ((zero? (modulo n 13)) #f)\n    ((zero? (modulo n 17)) #f)\n    ((zero? (modulo n 19)) #f)\n    ((zero? (modulo n 23)) #f)\n    ((zero? (modulo n 29)) #f)\n    ((zero? (modulo n 31)) #f)\n    ((zero? (modulo n 37)) #f)\n    ((zero? (modulo n 41)) #f)\n    ((zero? (modulo n 43)) #f)\n    ((zero? (modulo n 47)) #f)\n    ((zero? (modulo n 53)) #f)\n    ((zero? (modulo n 59)) #f)\n    ((zero? (modulo n 61)) #f)\n    ((zero? (modulo n 67)) #f)\n    ((zero? (modulo n 71)) #f)\n    ((zero? (modulo n 73)) #f)\n    ((zero? (modulo n 79)) #f)\n    ((zero? (modulo n 83)) #f)\n    ((zero? (modulo n 89)) #f)\n    ((zero? (modulo n 97)) #f)\n    ((zero? (modulo n 101)) #f)\n    #t))))\n\n;; Return true if a given number is prime, and false otherwise.\n;; >>> (is_prime? 6)\n;; #f\n;; >>> (is_prime? 101)\n;; #t\n;; >>> (is_prime? 11)\n;; #t\n;; >>> (is_prime? 13441)\n;; #t\n;; >>> (is_prime? 61)\n;; #t\n;; >>> (is_prime? 4)\n;; #f\n;; >>> (is_prime? 1)\n;; #f",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and\n          (zero? (modulo n 2))\n          (not (modulo i 2))\n          (not (modulo (modulo i 3) 2))\n          (not (modulo (modulo i 5) 2))\n          (not (modulo (modulo i 7) 2))\n          (not (modulo (modulo i 11) 2))\n          (not (modulo (modulo i 13) 2))\n          (not (modulo (modulo i 17) 2))\n          (not (modulo (modulo i 19) 2))\n          (not (modulo (modulo i 23) 2))\n          (not (modulo (modulo i 29) 2))\n          (not (modulo (modulo i 31) 2))\n          (not (modulo (modulo i 37) 2))\n          (not (modulo (modulo i 41) 2))\n          (not (modulo (modulo i 43) 2))\n          (not (modulo (modulo i 47) 2))\n          (not (modulo (modulo i 53) 2))\n          (not (modulo (modulo i 59) 2))\n          (not (modulo (modulo i 61) 2))\n          (not (modulo (modulo i 67) 2))\n          (not (modulo (modulo i 71) 2))\n          (not (modulo (modulo i 73) 2))\n          (not (modulo (modulo i 79) 2))\n          (not (modulo (modulo i 83) 2))\n          (not (modulo (modulo i 89) 2))\n          (not (modulo (modulo i 97) 2))))))))))\n\n;; Return true if a given number is prime, and false otherwise.\n;; >>> (is_prime? 6)\n;; #f\n;; >>> (is_prime? 101)\n;; #t\n;; >>> (is_prime? 11)\n;; #t\n;; >>> (is_prime? 13441)\n;; #t\n;; >>> (is_prime? 61)\n;; #t\n;; >>> (is_prime? 4)\n",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (modulo i 2))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 101)\n;; 6\n;; >>> (count_primes 11)\n;; 2\n;; >>> (count_primes 13441)\n;; 5\n;; >>> (count_primes 61)\n;; 3\n;; >>> (count_primes 4)\n;; 0\n;; >>> (count_primes 1)\n;; 0",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and (>= n 1)\n             (not (modulo i 2))\n             (not (modulo i 3))\n             (not (modulo i 5))\n             (not (modulo i 7))\n             (not (modulo i 11))\n             (not (modulo i 13))\n             (not (modulo i 17))\n             (not (modulo i 19))\n             (not (modulo i 23))\n             (not (modulo i 29))\n             (not (modulo i 31))\n             (not (modulo i 37))\n             (not (modulo i 41))\n             (not (modulo i 43))\n             (not (modulo i 47))\n             (not (modulo i 53))\n             (not (modulo i 59))\n             (not (modulo i 61))))))))\n\n;; Return true if a given number is prime, and false otherwise.\n;; >>> (is_prime? 6)\n;; #f\n;; >>> (is_prime? 101)\n;; #t\n;; >>> (is_prime? 11)\n;; #t\n;; >>> (is_prime? 13441)\n;; #t\n;; >>> (is_prime? 61)\n;; #t\n;; >>> (is_prime? 4)\n;; #f\n;; >>> (is_prime? 1)\n;; #f",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and (>= n 1)\n             (not (modulo i 2))\n             (is_prime (- n 1)))))\n  )\n)\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 0)\n;; 0\n;; >>> (count_primes 1)\n;; 0\n;; >>> (count_primes 2)\n;; 1\n;; >>> (count_primes 3)\n;; 2\n;; >>> (count_primes 4)\n;; 2\n;; >>> (count_primes 5)\n;; 3\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 7)\n;; 4\n;; >>> (count_primes 8)\n;; 4\n;; >>> (count_primes 9)\n;; 5\n;; >>> (count_primes 10)\n;; 5\n;; >>> (count_primes 11)\n;; 6\n;; >>> (count_primes 12)\n;; 6\n;; >>> (count_primes 13)\n;; 7\n;; >>> (count_primes 14)\n;; 7\n;; >>> (count_primes 15)\n;; 8\n;; >>> (count_primes 16)\n;; 8\n;; >>> (count_primes 17)\n;; 9\n;; >>> (count_primes 18)\n;; 9\n;; >>> (count_primes 19)\n;; 10\n;; >>> (count_primes 20)\n;; 10\n;; >>> (count_primes 21)\n;; 11\n;; >>> (count_primes 22)\n;; 11\n;; >>> (count_primes 23)\n;; 12\n;; >>> (count_primes 24)\n;; 12\n;; >>> (count_primes 25)\n;; 13\n;; >>> (count_primes 26)\n;; 13\n;; >>> (count_primes 27)\n;; 14\n;; >>> (count_primes 28)\n;; 14\n;; >>> (count_primes 29)\n;; 15\n;; >>> (count_primes 30)\n;; 15\n;; >>> (count_primes 31)\n;; 16\n;; >>> (count_primes 32)\n;; 16\n;; >>>",
    "  (cond\n    [(zero? n) #f]\n    [(zero? (modulo n 2)) #f]\n    [(zero? (modulo n 3)) #f]\n    [(zero? (modulo n 5)) #f]\n    [(zero? (modulo n 7)) #f]\n    [(zero? (modulo n 11)) #f]\n    [(zero? (modulo n 13)) #f]\n    [(zero? (modulo n 17)) #f]\n    [(zero? (modulo n 19)) #f]\n    [(zero? (modulo n 23)) #f]\n    [(zero? (modulo n 29)) #f]\n    [(zero? (modulo n 31)) #f]\n    [(zero? (modulo n 37)) #f]\n    [(zero? (modulo n 41)) #f]\n    [(zero? (modulo n 43)) #f]\n    [(zero? (modulo n 47)) #f]\n    [(zero? (modulo n 53)) #f]\n    [(zero? (modulo n 59)) #f]\n    [(zero? (modulo n 61)) #f]\n    [(zero? (modulo n 67)) #f]\n    [(zero? (modulo n 71)) #f]\n    [(zero? (modulo n 73)) #f]\n    [(zero? (modulo n 79)) #f]\n    [(zero? (modulo n 83)) #f]\n    [(zero? (modulo n 89)) #f]\n    [(zero? (modulo n 97)) #f]\n    [(zero? (modulo n 101)) #f]\n    [#t #t]\n  )\n)\n\n;; Return true if a given number is even, and false otherwise.\n;; >>> (is_even 6)\n;; #f\n;; >>> (is_even 101)\n;; #t\n;; >>> (is_even 11)\n;; #f\n;; >>> (is_even 13441)\n;; #f\n;; >>> (is_even 61)\n;; #f\n;; >>> (is_even 4)\n;; #f",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and\n          (zero? (modulo n (car i)))\n          (not (is_prime (cdr i))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 101)\n;; 6\n;; >>> (count_primes 11)\n;; 2\n;; >>> (count_primes 13441)\n;; 6\n;; >>> (count_primes 61)\n;; 3\n;; >>> (count_primes 4)\n;; 0\n;; >>> (count_primes 1)\n;; 0",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (is_prime (modulo i 2)))))\n    ))\n\n;; Return true if a given number is even, and false otherwise.\n;; >>> (is_even 6)\n;; #f\n;; >>> (is_even 101)\n;; #t\n;; >>> (is_even 11)\n;; #f\n;; >>> (is_even 13441)\n;; #f\n;; >>> (is_even 61)\n;; #f\n;; >>> (is_even 4)\n;; #t\n;; >>> (is_even 1)\n;; #f",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (modulo i 2))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 0)\n;; 0\n;; >>> (count_primes 1)\n;; 0\n;; >>> (count_primes 2)\n;; 1\n;; >>> (count_primes 3)\n;; 2\n;; >>> (count_primes 4)\n;; 2\n;; >>> (count_primes 5)\n;; 3\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 7)\n;; 4\n;; >>> (count_primes 8)\n;; 4\n;; >>> (count_primes 9)\n;; 5\n;; >>> (count_primes 10)\n;; 5\n;; >>> (count_primes 11)\n;; 6\n;; >>> (count_primes 12)\n;; 6\n;; >>> (count_primes 13)\n;; 7\n;; >>> (count_primes 14)\n;; 7\n;; >>> (count_primes 15)\n;; 8\n;; >>> (count_primes 16)\n;; 8\n;; >>> (count_primes 17)\n;; 9\n;; >>> (count_primes 18)\n;; 9\n;; >>> (count_primes 19)\n;; 10\n;; >>> (count_primes 20)\n;; 10\n;; >>> (count_primes 21)\n;; 11\n;; >>> (count_primes 22)\n;; 11\n;; >>> (count_primes 23)\n;; 12\n;; >>> (count_primes 24)\n;; 12\n;; >>> (count_primes 25)\n;; 13\n;; >>> (count_primes 26)\n;; 13\n;; >>> (count_primes 27)\n;; 14\n;; >>> (count_primes 28)\n;; 14\n;; >>> (count_primes 29)\n;; 15\n;; >>> (count_primes 30)\n;; 15\n;; >>> (count_primes 31)\n;; 16\n;; >>> (count_primes 32)\n;; 16\n;; >>> (",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (let ((d (quotient n (expt i 2))))\n        (and (>= d 1) (<= d 2)\n             (not (modulo i 2)))))\n    #f))\n\n;; Return the number of prime factors of a given number.\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 101)\n;; 2\n;; >>> (count_primes 11)\n;; 2\n;; >>> (count_primes 13441)\n;; 3\n;; >>> (count_primes 61)\n;; 2\n;; >>> (count_primes 4)\n;; 1\n;; >>> (count_primes 1)\n;; 0",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and\n          (zero? (modulo n 2))\n          (not (modulo i 2))\n          (not (modulo (modulo i 3) 2))\n          (not (modulo (modulo i 5) 2))\n          (not (modulo (modulo i 7) 2))\n          (not (modulo (modulo i 11) 2))\n          (not (modulo (modulo i 13) 2))\n          (not (modulo (modulo i 17) 2))\n          (not (modulo (modulo i 19) 2))\n          (not (modulo (modulo i 23) 2))\n          (not (modulo (modulo i 29) 2))\n          (not (modulo (modulo i 31) 2))\n          (not (modulo (modulo i 37) 2))\n          (not (modulo (modulo i 41) 2))\n          (not (modulo (modulo i 43) 2))\n          (not (modulo (modulo i 47) 2))\n          (not (modulo (modulo i 53) 2))\n          (not (modulo (modulo i 59) 2))\n          (not (modulo (modulo i 61) 2))\n          (not (modulo (modulo i 67) 2))\n          (not (modulo (modulo i 71) 2))\n          (not (modulo (modulo i 73) 2))\n          (not (modulo (modulo i 79) 2))\n          (not (modulo (modulo i 83) 2))\n          (not (modulo (modulo i 89) 2))\n          (not (modulo (modulo i 97) 2))))))))))))\n\n;; Return true if a given number is a perfect square, and false otherwise.\n;; >>> (is_square 6)\n;; #f\n;; >>> (is_square 101)\n;; #f\n;; >>> (is_square 11)\n;; #f\n;; >>> (is_square 13441)\n;; #f\n;; >>> (is_square 61)\n;; #f\n;; >>> (is_square 4)\n;; #f\n",
    "  (cond\n    ((zero? n) #t)\n    ((zero? (modulo n 2)) #f)\n    ((zero? (modulo n 3)) #f)\n    ((zero? (modulo n 5)) #f)\n    ((zero? (modulo n 7)) #f)\n    ((zero? (modulo n 11)) #f)\n    ((zero? (modulo n 13)) #f)\n    ((zero? (modulo n 17)) #f)\n    ((zero? (modulo n 19)) #f)\n    ((zero? (modulo n 23)) #f)\n    ((zero? (modulo n 29)) #f)\n    ((zero? (modulo n 31)) #f)\n    ((zero? (modulo n 37)) #f)\n    ((zero? (modulo n 41)) #f)\n    ((zero? (modulo n 43)) #f)\n    ((zero? (modulo n 47)) #f)\n    ((zero? (modulo n 53)) #f)\n    ((zero? (modulo n 59)) #f)\n    ((zero? (modulo n 61)) #f)\n    ((zero? (modulo n 67)) #f)\n    ((zero? (modulo n 71)) #f)\n    ((zero? (modulo n 73)) #f)\n    ((zero? (modulo n 79)) #f)\n    ((zero? (modulo n 83)) #f)\n    ((zero? (modulo n 89)) #f)\n    ((zero? (modulo n 97)) #f)\n    ((zero? (modulo n 101)) #f)\n    #t))))\n\n;; Return true if a given number is even, and false otherwise.\n;; >>> (even? 6)\n;; #f\n;; >>> (even? 4)\n;; #t\n;; >>> (even? -4)\n;; #f\n;; >>> (even? 0)\n;; #t\n;; >>> (even? -0)\n;; #t\n;; >>> (even? 1)\n;; #f\n;; >>> (even? -1)\n;; #f\n;; >>> (even? 2)\n;; #t\n;; >>> (even? -2)\n;; #f\n;;",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (is_prime (modulo i 2)))))\n  )\n)\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 0)\n;; 0\n;; >>> (count_primes 1)\n;; 0\n;; >>> (count_primes 2)\n;; 1\n;; >>> (count_primes 3)\n;; 2\n;; >>> (count_primes 4)\n;; 2\n;; >>> (count_primes 5)\n;; 3\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 7)\n;; 4\n;; >>> (count_primes 8)\n;; 4\n;; >>> (count_primes 9)\n;; 5\n;; >>> (count_primes 10)\n;; 5\n;; >>> (count_primes 11)\n;; 6\n;; >>> (count_primes 12)\n;; 6\n;; >>> (count_primes 13)\n;; 7\n;; >>> (count_primes 14)\n;; 7\n;; >>> (count_primes 15)\n;; 8\n;; >>> (count_primes 16)\n;; 8\n;; >>> (count_primes 17)\n;; 9\n;; >>> (count_primes 18)\n;; 9\n;; >>> (count_primes 19)\n;; 10\n;; >>> (count_primes 20)\n;; 10\n;; >>> (count_primes 21)\n;; 11\n;; >>> (count_primes 22)\n;; 11\n;; >>> (count_primes 23)\n;; 12\n;; >>> (count_primes 24)\n;; 12\n;; >>> (count_primes 25)\n;; 13\n;; >>> (count_primes 26)\n;; 13\n;; >>> (count_primes 27)\n;; 14\n;; >>> (count_primes 28)\n;; 14\n;; >>> (count_primes 29)\n;; 15\n;; >>> (count_primes 30)\n;; 15\n;; >>> (count_primes 31)\n;; 16\n;; >>> (count_primes 32)\n;; 16\n;; >>> (",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (modulo i 2))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 0)\n;; 0\n;; >>> (count_primes 1)\n;; 0\n;; >>> (count_primes 2)\n;; 1\n;; >>> (count_primes 3)\n;; 2\n;; >>> (count_primes 4)\n;; 3\n;; >>> (count_primes 5)\n;; 4\n;; >>> (count_primes 6)\n;; 5\n;; >>> (count_primes 7)\n;; 6\n;; >>> (count_primes 8)\n;; 7\n;; >>> (count_primes 9)\n;; 8\n;; >>> (count_primes 10)\n;; 9\n;; >>> (count_primes 11)\n;; 10\n;; >>> (count_primes 12)\n;; 11\n;; >>> (count_primes 13)\n;; 12\n;; >>> (count_primes 14)\n;; 13\n;; >>> (count_primes 15)\n;; 14\n;; >>> (count_primes 16)\n;; 15\n;; >>> (count_primes 17)\n;; 16\n;; >>> (count_primes 18)\n;; 17\n;; >>> (count_primes 19)\n;; 18\n;; >>> (count_primes 20)\n;; 19\n;; >>> (count_primes 21)\n;; 20\n;; >>> (count_primes 22)\n;; 21\n;; >>> (count_primes 23)\n;; 22\n;; >>> (count_primes 24)\n;; 23\n;; >>> (count_primes 25)\n;; 24\n;; >>> (count_primes 26)\n;; 25\n;; >>> (count_primes 27)\n;; 26\n;; >>> (count_primes 28)\n;; 27\n;; >>> (count_primes 29)\n;; 28\n;; >>> (count_primes 30)\n;; 29\n;; >>> (count_primes 31)\n;; 30\n;; >>> (count_primes 32)\n;; 31\n;; >>> (",
    "  (cond\n    ((zero? n) #t)\n    ((negative? n) #f)\n    (else\n      (let ((i (quotient n 2)))\n        (and\n          (zero? i)\n          (not (modulo n (quotient i 2)))\n          (is_prime (quotient n i)))))\n  )\n)\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 101)\n;; 11\n;; >>> (count_primes 11)\n;; 2\n;; >>> (count_primes 13441)\n;; 5\n;; >>> (count_primes 61)\n;; 2\n;; >>> (count_primes 4)\n;; 0\n;; >>> (count_primes 1)\n;; 0",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (modulo i 2))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 101)\n;; 4\n;; >>> (count_primes 11)\n;; 2\n;; >>> (count_primes 13441)\n;; 4\n;; >>> (count_primes 61)\n;; 2\n;; >>> (count_primes 4)\n;; 0\n;; >>> (count_primes 1)\n;; 0",
    "  (cond\n    ((zero? n) #t)\n    ((zero? (quotient n 2)))\n    (else\n      (and\n        (not (zero? (modulo n 2)))\n        (is_prime (- n 1))))))\n\n;; Return true if a given number is even, and false otherwise.\n;; >>> (is_even 6)\n;; #f\n;; >>> (is_even 101)\n;; #t\n;; >>> (is_even 11)\n;; #f\n;; >>> (is_even 13441)\n;; #f\n;; >>> (is_even 61)\n;; #f\n;; >>> (is_even 4)\n;; #t\n;; >>> (is_even 1)\n;; #f",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      (= n 1)\n      (else\n        (and (>= n 2)\n             (not (modulo i 2))\n             (not (modulo (sub1 i) 2))\n             (is_prime (sub1 i)))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 0)\n;; 0\n;; >>> (count_primes 1)\n;; 0\n;; >>> (count_primes 2)\n;; 1\n;; >>> (count_primes 3)\n;; 2\n;; >>> (count_primes 4)\n;; 3\n;; >>> (count_primes 5)\n;; 4\n;; >>> (count_primes 6)\n;; 5\n;; >>> (count_primes 7)\n;; 6\n;; >>> (count_primes 8)\n;; 7\n;; >>> (count_primes 9)\n;; 8\n;; >>> (count_primes 10)\n;; 9\n;; >>> (count_primes 11)\n;; 10\n;; >>> (count_primes 12)\n;; 11\n;; >>> (count_primes 13)\n;; 12\n;; >>> (count_primes 14)\n;; 13\n;; >>> (count_primes 15)\n;; 14\n;; >>> (count_primes 16)\n;; 15\n;; >>> (count_primes 17)\n;; 16\n;; >>> (count_primes 18)\n;; 17\n;; >>> (count_primes 19)\n;; 18\n;; >>> (count_primes 20)\n;; 19\n;; >>> (count_primes 21)\n;; 20\n;; >>> (count_primes 22)\n;; 21\n;; >>> (count_primes 23)\n;; 22\n;; >>> (count_primes 24)\n;; 23\n;; >>> (count_primes 25)\n;; 24\n;; >>> (count_primes 26)\n;; 25\n;; >>> (count_primes 27)\n;; 26\n;; >>> (count_primes 28)\n;; 27\n;; >>> (count_primes 29)\n;; 28\n;; >>> (count_primes 30)\n;; 29\n;; >>> (count_primes 31)\n;; 30\n;; >>>",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      (= n 1)\n      (else\n        (and (>= n 1) (<= n i))\n        (not (modulo n i)))))\n)\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 101)\n;; 4\n;; >>> (count_primes 11)\n;; 2\n;; >>> (count_primes 13441)\n;; 5\n;; >>> (count_primes 61)\n;; 2\n;; >>> (count_primes 4)\n;; 0\n;; >>> (count_primes 1)\n;; 0",
    "  (cond\n    [(zero? n) #f]\n    [(zero? (modulo n 2)) #t]\n    [else (is_prime (modulo n 2))]))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 0)\n;; #f\n;; >>> (count_primes 1)\n;; #f\n;; >>> (count_primes 2)\n;; #f\n;; >>> (count_primes 3)\n;; #f\n;; >>> (count_primes 4)\n;; #f\n;; >>> (count_primes 5)\n;; #f\n;; >>> (count_primes 6)\n;; #f\n;; >>> (count_primes 7)\n;; #f\n;; >>> (count_primes 8)\n;; #f\n;; >>> (count_primes 9)\n;; #f\n;; >>> (count_primes 10)\n;; #f\n;; >>> (count_primes 11)\n;; #f\n;; >>> (count_primes 12)\n;; #f\n;; >>> (count_primes 13)\n;; #f\n;; >>> (count_primes 14)\n;; #f\n;; >>> (count_primes 15)\n;; #f\n;; >>> (count_primes 16)\n;; #f\n;; >>> (count_primes 17)\n;; #f\n;; >>> (count_primes 18)\n;; #f\n;; >>> (count_primes 19)\n;; #f\n;; >>> (count_primes 20)\n;; #f\n;; >>> (count_primes 21)\n;; #f\n;; >>> (count_primes 22)\n;; #f\n;; >>> (count_primes 23)\n;; #f\n;; >>> (count_primes 24)\n;; #f\n;; >>> (count_primes 25)\n;; #f\n;; >>> (count_primes 26)\n;; #f\n;; >>> (count_primes 27)\n;; #f\n;; >>> (count_primes 28)\n;; #f\n;; >>> (count_primes 29)\n;; #f\n;; >>> (count_primes 30)\n;; #f\n;; >>> (count_primes 31)\n;; #f\n",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and\n          (zero? (modulo n (car i)))\n          (not (is_prime (cdr i))))))))\n\n;; Return true if a given number is even, and false otherwise.\n;; >>> (is_even 6)\n;; #f\n;; >>> (is_even 101)\n;; #t\n;; >>> (is_even 11)\n;; #f\n;; >>> (is_even 13441)\n;; #f\n;; >>> (is_even 61)\n;; #f\n;; >>> (is_even 4)\n;; #t\n;; >>> (is_even 1)\n;; #f",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (modulo i 2))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; #f\n;; >>> (count_primes 101)\n;; #f\n;; >>> (count_primes 11)\n;; #f\n;; >>> (count_primes 13441)\n;; #f\n;; >>> (count_primes 61)\n;; #f\n;; >>> (count_primes 4)\n;; #f\n;; >>> (count_primes 1)\n;; #f",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo n (car i)))\n          #f\n          (is_prime (cdr i)))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 101)\n;; 6\n;; >>> (count_primes 11)\n;; 2\n;; >>> (count_primes 13441)\n;; 7\n;; >>> (count_primes 61)\n;; 3\n;; >>> (count_primes 4)\n;; 0\n;; >>> (count_primes 1)\n;; 0",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (modulo i 2))))))))\n\n;; Return true if a given number is even, and false otherwise.\n;; >>> (is_even 6)\n;; #f\n;; >>> (is_even 101)\n;; #t\n;; >>> (is_even 11)\n;; #f\n;; >>> (is_even 13441)\n;; #f\n;; >>> (is_even 61)\n;; #f\n;; >>> (is_even 4)\n;; #t\n;; >>> (is_even 1)\n;; #f",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (modulo i 2))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 0)\n;; 0\n;; >>> (count_primes 1)\n;; 0\n;; >>> (count_primes 2)\n;; 1\n;; >>> (count_primes 3)\n;; 2\n;; >>> (count_primes 4)\n;; 3\n;; >>> (count_primes 5)\n;; 4\n;; >>> (count_primes 6)\n;; 5\n;; >>> (count_primes 7)\n;; 6\n;; >>> (count_primes 8)\n;; 7\n;; >>> (count_primes 9)\n;; 8\n;; >>> (count_primes 10)\n;; 9\n;; >>> (count_primes 11)\n;; 10\n;; >>> (count_primes 12)\n;; 11\n;; >>> (count_primes 13)\n;; 12\n;; >>> (count_primes 14)\n;; 13\n;; >>> (count_primes 15)\n;; 14\n;; >>> (count_primes 16)\n;; 15\n;; >>> (count_primes 17)\n;; 16\n;; >>> (count_primes 18)\n;; 17\n;; >>> (count_primes 19)\n;; 18\n;; >>> (count_primes 20)\n;; 19\n;; >>> (count_primes 21)\n;; 20\n;; >>> (count_primes 22)\n;; 21\n;; >>> (count_primes 23)\n;; 22\n;; >>> (count_primes 24)\n;; 23\n;; >>> (count_primes 25)\n;; 24\n;; >>> (count_primes 26)\n;; 25\n;; >>> (count_primes 27)\n;; 26\n;; >>> (count_primes 28)\n;; 27\n;; >>> (count_primes 29)\n;; 28\n;; >>> (count_primes 30)\n;; 29\n;; >>> (count_primes 31)\n;; 30\n;; >>> (count_primes 32)\n;; 31\n;; >>> (",
    "  (cond\n    ((zero? n) #t)\n    ((negative? n) #f)\n    (else\n      (if (zero? (modulo n 2))\n\t  (not (modulo n 2))\n\t  (is_prime (modulo n 2))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; #f\n;; >>> (count_primes 101)\n;; #t\n;; >>> (count_primes 11)\n;; #t\n;; >>> (count_primes 13441)\n;; #t\n;; >>> (count_primes 61)\n;; #t\n;; >>> (count_primes 4)\n;; #f\n;; >>> (count_primes 1)\n;; #f",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (modulo i 2))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 0)\n;; 0\n;; >>> (count_primes 1)\n;; 0\n;; >>> (count_primes 2)\n;; 1\n;; >>> (count_primes 3)\n;; 2\n;; >>> (count_primes 4)\n;; 2\n;; >>> (count_primes 5)\n;; 3\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 7)\n;; 4\n;; >>> (count_primes 8)\n;; 4\n;; >>> (count_primes 9)\n;; 5\n;; >>> (count_primes 10)\n;; 5\n;; >>> (count_primes 11)\n;; 6\n;; >>> (count_primes 12)\n;; 6\n;; >>> (count_primes 13)\n;; 7\n;; >>> (count_primes 14)\n;; 7\n;; >>> (count_primes 15)\n;; 8\n;; >>> (count_primes 16)\n;; 8\n;; >>> (count_primes 17)\n;; 9\n;; >>> (count_primes 18)\n;; 9\n;; >>> (count_primes 19)\n;; 10\n;; >>> (count_primes 20)\n;; 10\n;; >>> (count_primes 21)\n;; 11\n;; >>> (count_primes 22)\n;; 11\n;; >>> (count_primes 23)\n;; 12\n;; >>> (count_primes 24)\n;; 12\n;; >>> (count_primes 25)\n;; 13\n;; >>> (count_primes 26)\n;; 13\n;; >>> (count_primes 27)\n;; 14\n;; >>> (count_primes 28)\n;; 14\n;; >>> (count_primes 29)\n;; 15\n;; >>> (count_primes 30)\n;; 15\n;; >>> (count_primes 31)\n;; 16\n;; >>> (count_primes 32)\n;; 16\n;; >>> (",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (modulo i 2))))))))\n\n;; Return the prime factors of a given number.\n;; >>> (prime_factors 6)\n;; #f\n;; >>> (prime_factors 101)\n;; #f\n;; >>> (prime_factors 11)\n;; #f\n;; >>> (prime_factors 13441)\n;; #f\n;; >>> (prime_factors 61)\n;; #f\n;; >>> (prime_factors 4)\n;; #f\n;; >>> (prime_factors 1)\n;; #f",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (- i 1))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 101)\n;; 11\n;; >>> (count_primes 11)\n;; 1\n;; >>> (count_primes 13441)\n;; 4\n;; >>> (count_primes 61)\n;; 2\n;; >>> (count_primes 4)\n;; 0\n;; >>> (count_primes 1)\n;; 0",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (modulo i 2))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; #f\n;; >>> (count_primes 101)\n;; #f\n;; >>> (count_primes 11)\n;; #f\n;; >>> (count_primes 13441)\n;; #f\n;; >>> (count_primes 61)\n;; #f\n;; >>> (count_primes 4)\n;; #f\n;; >>> (count_primes 1)\n;; #f",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      (= n 1)\n      (else\n        (and (>= n 1) (<= n i))\n        (not (modulo n i)))))\n)\n\n;; Return the prime factors of a given number.\n;; >>> (prime_factors 6)\n;; #(6)\n;; >>> (prime_factors 101)\n;; #(101)\n;; >>> (prime_factors 11)\n;; #(11)\n;; >>> (prime_factors 13441)\n;; #(13, 41)\n;; >>> (prime_factors 61)\n;; #(61)\n;; >>> (prime_factors 4)\n;; #()\n;; >>> (prime_factors 1)\n;; #()",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and\n          (zero? (modulo n 2))\n          (not (modulo i 2))\n          (not (modulo (modulo i 3) 2))\n          (not (modulo (modulo i 5) 2))\n          (not (modulo (modulo i 7) 2))\n          (not (modulo (modulo i 11) 2))\n          (not (modulo (modulo i 13) 2))\n          (not (modulo (modulo i 17) 2))\n          (not (modulo (modulo i 19) 2))\n          (not (modulo (modulo i 23) 2))\n          (not (modulo (modulo i 29) 2))\n          (not (modulo (modulo i 31) 2))\n          (not (modulo (modulo i 37) 2))\n          (not (modulo (modulo i 41) 2))\n          (not (modulo (modulo i 43) 2))\n          (not (modulo (modulo i 47) 2))\n          (not (modulo (modulo i 53) 2))\n          (not (modulo (modulo i 59) 2))\n          (not (modulo (modulo i 61) 2))\n          (not (modulo (modulo i 67) 2))\n          (not (modulo (modulo i 71) 2))\n          (not (modulo (modulo i 73) 2))\n          (not (modulo (modulo i 79) 2))\n          (not (modulo (modulo i 83) 2))\n          (not (modulo (modulo i 89) 2))\n          (not (modulo (modulo i 97) 2))))))))))\n\n;; Return true if a given number is prime, and false otherwise.\n;; >>> (is_prime? 6)\n;; #f\n;; >>> (is_prime? 101)\n;; #t\n;; >>> (is_prime? 11)\n;; #t\n;; >>> (is_prime? 13441)\n;; #t\n;; >>> (is_prime? 61)\n;; #t\n;; >>> (is_prime? 4)\n",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (- i 1))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 0)\n;; 0\n;; >>> (count_primes 1)\n;; 0\n;; >>> (count_primes 2)\n;; 1\n;; >>> (count_primes 3)\n;; 2\n;; >>> (count_primes 4)\n;; 2\n;; >>> (count_primes 5)\n;; 3\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 7)\n;; 4\n;; >>> (count_primes 8)\n;; 4\n;; >>> (count_primes 9)\n;; 5\n;; >>> (count_primes 10)\n;; 5\n;; >>> (count_primes 11)\n;; 6\n;; >>> (count_primes 12)\n;; 6\n;; >>> (count_primes 13)\n;; 7\n;; >>> (count_primes 14)\n;; 7\n;; >>> (count_primes 15)\n;; 8\n;; >>> (count_primes 16)\n;; 8\n;; >>> (count_primes 17)\n;; 9\n;; >>> (count_primes 18)\n;; 9\n;; >>> (count_primes 19)\n;; 10\n;; >>> (count_primes 20)\n;; 10\n;; >>> (count_primes 21)\n;; 11\n;; >>> (count_primes 22)\n;; 11\n;; >>> (count_primes 23)\n;; 12\n;; >>> (count_primes 24)\n;; 12\n;; >>> (count_primes 25)\n;; 13\n;; >>> (count_primes 26)\n;; 13\n;; >>> (count_primes 27)\n;; 14\n;; >>> (count_primes 28)\n;; 14\n;; >>> (count_primes 29)\n;; 15\n;; >>> (count_primes 30)\n;; 15\n;; >>> (count_primes 31)\n;; 16\n;; >>> (count_primes 32)\n;; 16\n;; >>> (count_",
    "  (cond\n    ((zero? n) #t)\n    ((negative? n) #f)\n    (else\n      (let ((i (quotient n 2)))\n        (and\n          (zero? i)\n          (not (modulo n (quotient i 2)))\n          (is_prime (quotient n i)))))))\n\n;; Return the number of prime factors of a given number.\n;; >>> (count_primes 6)\n;; 2\n;; >>> (count_primes 101)\n;; 2\n;; >>> (count_primes 11)\n;; 2\n;; >>> (count_primes 13441)\n;; 3\n;; >>> (count_primes 61)\n;; 2\n;; >>> (count_primes 4)\n;; 1\n;; >>> (count_primes 1)\n;; 0",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and\n          (zero? (modulo n 2))\n          (not (modulo i 2))\n          (not (modulo (modulo i 3) 2))\n          (not (modulo (modulo i 5) 2))\n          (not (modulo (modulo i 7) 2))\n          (not (modulo (modulo i 11) 2))\n          (not (modulo (modulo i 13) 2))\n          (not (modulo (modulo i 17) 2))\n          (not (modulo (modulo i 19) 2))\n          (not (modulo (modulo i 23) 2))\n          (not (modulo (modulo i 29) 2))\n          (not (modulo (modulo i 31) 2))\n          (not (modulo (modulo i 37) 2))\n          (not (modulo (modulo i 41) 2))\n          (not (modulo (modulo i 43) 2))\n          (not (modulo (modulo i 47) 2))\n          (not (modulo (modulo i 53) 2))\n          (not (modulo (modulo i 59) 2))\n          (not (modulo (modulo i 61) 2))\n          (not (modulo (modulo i 67) 2))\n          (not (modulo (modulo i 71) 2))\n          (not (modulo (modulo i 73) 2))\n          (not (modulo (modulo i 79) 2))\n          (not (modulo (modulo i 83) 2))\n          (not (modulo (modulo i 89) 2))\n          (not (modulo (modulo i 97) 2))))))))))))\n\n;; Return true if a given number is a perfect square, and false otherwise.\n;; >>> (is_square 6)\n;; #f\n;; >>> (is_square 101)\n;; #t\n;; >>> (is_square 11)\n;; #f\n;; >>> (is_square 13441)\n;; #t\n;; >>> (is_square 61)\n;; #f\n;; >>> (is_square 4)\n;; #f\n",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and\n          (zero? (modulo n 2))\n          (not (modulo i 2))\n          (not (modulo (modulo i 3) 2))\n          (not (modulo (modulo i 5) 2))\n          (not (modulo (modulo i 7) 2))\n          (not (modulo (modulo i 11) 2))\n          (not (modulo (modulo i 13) 2))\n          (not (modulo (modulo i 17) 2))\n          (not (modulo (modulo i 19) 2))\n          (not (modulo (modulo i 23) 2))\n          (not (modulo (modulo i 29) 2))\n          (not (modulo (modulo i 31) 2))\n          (not (modulo (modulo i 37) 2))\n          (not (modulo (modulo i 41) 2))\n          (not (modulo (modulo i 43) 2))\n          (not (modulo (modulo i 47) 2))\n          (not (modulo (modulo i 53) 2))\n          (not (modulo (modulo i 59) 2))\n          (not (modulo (modulo i 61) 2))\n          (not (modulo (modulo i 67) 2))\n          (not (modulo (modulo i 71) 2))\n          (not (modulo (modulo i 73) 2))\n          (not (modulo (modulo i 79) 2))\n          (not (modulo (modulo i 83) 2))\n          (not (modulo (modulo i 89) 2))\n          (not (modulo (modulo i 97) 2))))))))))))\n\n;; Return true if a given number is a perfect square, and false otherwise.\n;; >>> (is_square 6)\n;; #f\n;; >>> (is_square 101)\n;; #t\n;; >>> (is_square 11)\n;; #f\n;; >>> (is_square 13441)\n;; #f\n;; >>> (is_square 61)\n;; #t\n;; >>> (is_square 4)\n;; #f\n",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (- i 1))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 101)\n;; 6\n;; >>> (count_primes 11)\n;; 2\n;; >>> (count_primes 13441)\n;; 6\n;; >>> (count_primes 61)\n;; 3\n;; >>> (count_primes 4)\n;; 0\n;; >>> (count_primes 1)\n;; 0",
    "  (let ((limit (sqrt n)))\n    (cond\n      ((= n 1) #t)\n      ((< n 2) #f)\n      ((<= limit (+ n 1)) #f)\n      (else\n        (and\n          (and\n            (>= n 2)\n            (not (modulo n 2))\n          )\n          (>= n 3)\n          (not (modulo n 3))\n          (>= n 5)\n          (not (modulo n 5))\n          (>= n 7)\n          (not (modulo n 7))\n          (>= n 11)\n          (not (modulo n 11))\n          (>= n 13)\n          (not (modulo n 13))\n          (>= n 17)\n          (not (modulo n 17))\n          (>= n 19)\n          (not (modulo n 19))\n          (>= n 23)\n          (not (modulo n 23))\n          (>= n 29)\n          (not (modulo n 29))\n          (>= n 31)\n          (not (modulo n 31))\n          (>= n 37)\n          (not (modulo n 37))\n          (>= n 41)\n          (not (modulo n 41))\n          (>= n 43)\n          (not (modulo n 43))\n          (>= n 47)\n          (not (modulo n 47))\n          (>= n 53)\n          (not (modulo n 53))\n          (>= n 59)\n          (not (modulo n 59))\n          (>= n 61)\n          (not (modulo n 61))\n          (>= n 67)\n          (not (modulo n 67))\n          (>= n 71)\n          (not (modulo n 71))\n          (>= n 73)\n          (not (modulo n 73))\n          (>= n 79)\n          (not (modulo n 79))\n          (>= n 83)\n          (not (modulo n 83))\n          (>= n 89)\n          (not (modulo n 89))\n          (>= n 97)\n          (not (modulo n 97))",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (- i 1))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 0)\n;; 0\n;; >>> (count_primes 1)\n;; 0\n;; >>> (count_primes 2)\n;; 1\n;; >>> (count_primes 3)\n;; 2\n;; >>> (count_primes 4)\n;; 2\n;; >>> (count_primes 5)\n;; 3\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 7)\n;; 4\n;; >>> (count_primes 8)\n;; 4\n;; >>> (count_primes 9)\n;; 5\n;; >>> (count_primes 10)\n;; 5\n;; >>> (count_primes 11)\n;; 6\n;; >>> (count_primes 12)\n;; 6\n;; >>> (count_primes 13)\n;; 7\n;; >>> (count_primes 14)\n;; 7\n;; >>> (count_primes 15)\n;; 8\n;; >>> (count_primes 16)\n;; 8\n;; >>> (count_primes 17)\n;; 9\n;; >>> (count_primes 18)\n;; 9\n;; >>> (count_primes 19)\n;; 10\n;; >>> (count_primes 20)\n;; 10\n;; >>> (count_primes 21)\n;; 11\n;; >>> (count_primes 22)\n;; 11\n;; >>> (count_primes 23)\n;; 12\n;; >>> (count_primes 24)\n;; 12\n;; >>> (count_primes 25)\n;; 13\n;; >>> (count_primes 26)\n;; 13\n;; >>> (count_primes 27)\n;; 14\n;; >>> (count_primes 28)\n;; 14\n;; >>> (count_primes 29)\n;; 15\n;; >>> (count_primes 30)\n;; 15\n;; >>> (count_primes 31)\n;; 16\n;; >>> (count_primes 32)\n;; 16\n;; >>> (count_",
    "  (cond\n    ((zero? n) #t)\n    ((negative? n) #f)\n    (else\n      (let ((i (quotient n 2)))\n        (and\n          (zero? i)\n          (not (modulo n (quotient i 2)))\n          (is_prime (quotient n i))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 101)\n;; 11\n;; >>> (count_primes 11)\n;; 1\n;; >>> (count_primes 13441)\n;; 4\n;; >>> (count_primes 61)\n;; 2\n;; >>> (count_primes 4)\n;; 0\n;; >>> (count_primes 1)\n;; 0",
    "  (cond\n    ((zero? n) #t)\n    ((negative? n) #f)\n    (else\n      (let ((i (quotient n 2)))\n        (and\n          (zero? i)\n          (not (modulo n (quotient i 2)))\n          (is_prime (quotient n i)))))\n  )\n)\n\n;; Return true if a given number is even, and false otherwise.\n;; >>> (is_even 6)\n;; #f\n;; >>> (is_even 101)\n;; #t\n;; >>> (is_even 11)\n;; #f\n;; >>> (is_even 13441)\n;; #f\n;; >>> (is_even 61)\n;; #t\n;; >>> (is_even 4)\n;; #f\n;; >>> (is_even 1)\n;; #t",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo n i))\n          #f\n          (else\n            (is_prime (- n) (modulo (- n) i))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; #f\n;; >>> (count_primes 101)\n;; #f\n;; >>> (count_primes 11)\n;; #f\n;; >>> (count_primes 13441)\n;; #f\n;; >>> (count_primes 61)\n;; #f\n;; >>> (count_primes 4)\n;; #f\n;; >>> (count_primes 1)\n;; #f",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and (>= n 1)\n             (not (modulo i 2))\n             (not (modulo (remainder n 2) 2))\n             (not (modulo (remainder n 3) 3))\n             (not (modulo (remainder n 5) 5))\n             (not (modulo (remainder n 7) 7))\n             (not (modulo (remainder n 11) 11))\n             (not (modulo (remainder n 13) 13))\n             (not (modulo (remainder n 17) 17))\n             (not (modulo (remainder n 19) 19))\n             (not (modulo (remainder n 23) 23))\n             (not (modulo (remainder n 29) 29))\n             (not (modulo (remainder n 31) 31))\n             (not (modulo (remainder n 37) 37))\n             (not (modulo (remainder n 41) 41))\n             (not (modulo (remainder n 43) 43))\n             (not (modulo (remainder n 47) 47))\n             (not (modulo (remainder n 53) 53))\n             (not (modulo (remainder n 59) 59))\n             (not (modulo (remainder n 61) 61))\n             (not (modulo (remainder n 67) 67))\n             (not (modulo (remainder n 71) 71))\n             (not (modulo (remainder n 73) 73))\n             (not (modulo (remainder n 79) 79))\n             (not (modulo (remainder n 83) 83))\n             (not (modulo (remainder n 89) 89))\n             (not (modulo (remainder n 97) 97))))))))))\n",
    "  (cond\n    ((zero? n) #t)\n    ((negative? n) #f)\n    ((zero? (remainder n 2)))\n    (else\n      (and\n        (not (zero? (remainder n 2)))\n        (not (zero? (remainder (remainder n 2) 2)))\n        (is_prime (quotient n 2)))))\n)\n\n;; Return true if a given number is even, and false otherwise.\n;; >>> (is_even 6)\n;; #f\n;; >>> (is_even 101)\n;; #t\n;; >>> (is_even 11)\n;; #f\n;; >>> (is_even 13441)\n;; #f\n;; >>> (is_even 61)\n;; #f\n;; >>> (is_even 4)\n;; #f\n;; >>> (is_even 1)\n;; #t",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (let ((d (quotient n (expt i 2))))\n        (and (>= d 1) (<= d 2)\n             (not (modulo i 2)))))\n    #f))\n\n;; Return the number of prime factors of a given number.\n;; >>> (count_prime_factors 6)\n;; 3\n;; >>> (count_prime_factors 101)\n;; 2\n;; >>> (count_prime_factors 11)\n;; 1\n;; >>> (count_prime_factors 13441)\n;; 2\n;; >>> (count_prime_factors 61)\n;; 1\n;; >>> (count_prime_factors 4)\n;; 0\n;; >>> (count_prime_factors 1)\n;; 0",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      (= n 1)\n      (else\n        (and (>= n 2)\n             (not (modulo n 2)))))\n  )\n)\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 101)\n;; 11\n;; >>> (count_primes 11)\n;; 2\n;; >>> (count_primes 13441)\n;; 4\n;; >>> (count_primes 61)\n;; 2\n;; >>> (count_primes 4)\n;; 0\n;; >>> (count_primes 1)\n;; 0",
    "  (let ((limit (sqrt n)))\n    (if (zero? limit)\n      (return #t)\n      (else\n        (return (not (modulo n (car limit)))\n               (is_prime (modulo n (cdr limit)))))))\n\n;; Return the prime factors of a given number.\n;; >>> (prime_factors 6)\n;; #f\n;; >>> (prime_factors 101)\n;; #f\n;; >>> (prime_factors 11)\n;; #f\n;; >>> (prime_factors 13441)\n;; #f\n;; >>> (prime_factors 61)\n;; #f\n;; >>> (prime_factors 4)\n;; #f\n;; >>> (prime_factors 1)\n;; #f",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and (>= n 1)\n             (not (modulo i 2))\n             (not (modulo (modulo i 3) 2))\n             (not (modulo (modulo i 5) 2))\n             (not (modulo (modulo i 7) 2))\n             (not (modulo (modulo i 11) 2))\n             (not (modulo (modulo i 13) 2))\n             (not (modulo (modulo i 17) 2))\n             (not (modulo (modulo i 19) 2))\n             (not (modulo (modulo i 23) 2))\n             (not (modulo (modulo i 29) 2))\n             (not (modulo (modulo i 31) 2))\n             (not (modulo (modulo i 37) 2))\n             (not (modulo (modulo i 41) 2))\n             (not (modulo (modulo i 43) 2))\n             (not (modulo (modulo i 47) 2))\n             (not (modulo (modulo i 53) 2))\n             (not (modulo (modulo i 59) 2))\n             (not (modulo (modulo i 61) 2))\n             (not (modulo (modulo i 67) 2))\n             (not (modulo (modulo i 71) 2))\n             (not (modulo (modulo i 73) 2))\n             (not (modulo (modulo i 79) 2))\n             (not (modulo (modulo i 83) 2))\n             (not (modulo (modulo i 89) 2))\n             (not (modulo (modulo i 97) 2))))))))))))\n",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and (>= n 1)\n             (not (modulo n 2))\n             (not (modulo n 3))\n             (every-predicate (lambda (p) (modulo n p)) (range 2 i)))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count-primes 6)\n;; 3\n;; >>> (count-primes 101)\n;; 11\n;; >>> (count-primes 11)\n;; 2\n;; >>> (count-primes 13441)\n;; 6\n;; >>> (count-primes 61)\n;; 3\n;; >>> (count-primes 4)\n;; 0\n;; >>> (count-primes 1)\n;; 0",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (modulo i 2))))))))\n\n;; Return the prime factors of a given number.\n;; >>> (prime_factors 6)\n;; #(6)\n;; >>> (prime_factors 101)\n;; #(101)\n;; >>> (prime_factors 11)\n;; #(11)\n;; >>> (prime_factors 13441)\n;; #(13, 41)\n;; >>> (prime_factors 61)\n;; #(61)\n;; >>> (prime_factors 4)\n;; #()\n;; >>> (prime_factors 1)\n;; #()",
    "  (cond\n    ((zero? n) #t)\n    ((negative? n) #f)\n    (else\n      (let ((i (quotient n 2)))\n        (and\n          (zero? i)\n          (not (modulo n (quotient i 2)))\n          (is_prime (quotient n i)))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 101)\n;; 11\n;; >>> (count_primes 11)\n;; 2\n;; >>> (count_primes 13441)\n;; 6\n;; >>> (count_primes 61)\n;; 3\n;; >>> (count_primes 4)\n;; 0\n;; >>> (count_primes 1)\n;; 0",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and (>= n 1)\n             (not (modulo i 2))\n             (not (modulo i 3))\n             (not (modulo i 5))\n             (not (modulo i 7))\n             (not (modulo i 11))\n             (not (modulo i 13))\n             (not (modulo i 17))\n             (not (modulo i 19))\n             (not (modulo i 23))\n             (not (modulo i 29))\n             (not (modulo i 31))\n             (not (modulo i 37))\n             (not (modulo i 41))\n             (not (modulo i 43))\n             (not (modulo i 47))\n             (not (modulo i 53))\n             (not (modulo i 59))\n             (not (modulo i 61))))))))\n)\n\n;; Return true if a given number is even, and false otherwise.\n;; >>> (is_even 6)\n;; #f\n;; >>> (is_even 101)\n;; #f\n;; >>> (is_even 11)\n;; #t\n;; >>> (is_even 13441)\n;; #f\n;; >>> (is_even 61)\n;; #f\n;; >>> (is_even 4)\n;; #f\n;; >>> (is_even 1)\n;; #t",
    "  (cond\n    ((zero? n) #t)\n    ((zero? (modulo n 2)) #f)\n    (else\n      (let ((d (quotient n 2)))\n        (and\n          (not (zero? d))\n          (not (modulo d 2))\n          (not (modulo (modulo d 2) 2))\n          (= (modulo (modulo d 2) 2) 0))))))\n\n;; Return the number of times a given number occurs in a given list.\n;; >>> (count 5 [1 2 3 4 5])\n;; 3\n;; >>> (count 5 [1 2 3 4 5 5])\n;; 2\n;; >>> (count 5 [1 2 3 4 5 5 6])\n;; 1\n;; >>> (count 5 [1 2 3 4 5 6])\n;; 0\n;; >>> (count 5 [])\n;; 0\n;; >>> (count 5 [1])\n;; 0\n;; >>> (count 5 [1 2 3 4 5 6])\n;; 0\n;; >>> (count 5 [1 2 3 4 5 6 7])\n;; 0\n;; >>> (count 5 [1 2 3 4 5 6 7 8])\n;; 0\n;; >>> (count 5 [1 2 3 4 5 6 7 8 9])\n;; 0\n;; >>> (count 5 [1 2 3 4 5 6 7 8 9 10])\n;; 0\n;; >>> (count 5 [1 2 3 4 5 6 7 8 9 10 11])\n;; 0\n;; >>> (count 5 [1 2 3 4 5 6 7 8 9 10 11 12])\n;; 0\n;; >>> (count 5 [1 2 3 4 5 6 7 8 9 10 11 12 13])\n;; 0\n;; >>> (count 5 [1 2 3 4 5 6 7 8 9 10 11 12 13 14])\n;; 0\n;; >>> (count 5 [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15])\n;; 0\n;; >>> (count 5 [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16])\n;; 0\n;; >>> (count 5 [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17])\n;; 0\n;; >>> (count 5 [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18])\n;; 0\n;; >>> (count",
    "  (let ((limit (sqrt n)))\n    (cond\n      ((= n 1) #t)\n      ((< n 2) #f)\n      ((= n 0) #f)\n      (else\n        (and\n          (>= n 2)\n          (let ((d (floor n)))\n            (and\n              (>= d 2)\n              (<= d limit)\n              (not (modulo d n))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 101)\n;; 11\n;; >>> (count_primes 11)\n;; 2\n;; >>> (count_primes 13441)\n;; 4\n;; >>> (count_primes 61)\n;; 2\n;; >>> (count_primes 4)\n;; 0\n;; >>> (count_primes 1)\n;; 0",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and (>= n 1)\n             (not (modulo n 2))\n             (not (modulo n 3))\n             (every-predicate (lambda (p) (modulo n p)) (range 2 i - 1)))))))\n\n;; Return the prime factors of a given number.\n;; >>> (prime-factors 6)\n;; #(6)\n;; >>> (prime-factors 101)\n;; #(101)\n;; >>> (prime-factors 11)\n;; #(11)\n;; >>> (prime-factors 13441)\n;; #(13, 41)\n;; >>> (prime-factors 61)\n;; #(61)\n;; >>> (prime-factors 4)\n;; #()\n;; >>> (prime-factors 1)\n;; #()",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (modulo i 2))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 0)\n;; 0\n;; >>> (count_primes 1)\n;; 0\n;; >>> (count_primes 2)\n;; 1\n;; >>> (count_primes 3)\n;; 2\n;; >>> (count_primes 4)\n;; 2\n;; >>> (count_primes 5)\n;; 3\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 7)\n;; 4\n;; >>> (count_primes 8)\n;; 4\n;; >>> (count_primes 9)\n;; 5\n;; >>> (count_primes 10)\n;; 5\n;; >>> (count_primes 11)\n;; 6\n;; >>> (count_primes 12)\n;; 6\n;; >>> (count_primes 13)\n;; 7\n;; >>> (count_primes 14)\n;; 7\n;; >>> (count_primes 15)\n;; 8\n;; >>> (count_primes 16)\n;; 8\n;; >>> (count_primes 17)\n;; 9\n;; >>> (count_primes 18)\n;; 9\n;; >>> (count_primes 19)\n;; 10\n;; >>> (count_primes 20)\n;; 10\n;; >>> (count_primes 21)\n;; 11\n;; >>> (count_primes 22)\n;; 11\n;; >>> (count_primes 23)\n;; 12\n;; >>> (count_primes 24)\n;; 12\n;; >>> (count_primes 25)\n;; 13\n;; >>> (count_primes 26)\n;; 13\n;; >>> (count_primes 27)\n;; 14\n;; >>> (count_primes 28)\n;; 14\n;; >>> (count_primes 29)\n;; 15\n;; >>> (count_primes 30)\n;; 15\n;; >>> (count_primes 31)\n;; 16\n;; >>> (count_primes 32)\n;; 16\n;; >>> (",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (modulo i 2))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 0)\n;; 0\n;; >>> (count_primes 1)\n;; 0\n;; >>> (count_primes 2)\n;; 1\n;; >>> (count_primes 3)\n;; 2\n;; >>> (count_primes 4)\n;; 2\n;; >>> (count_primes 5)\n;; 3\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 7)\n;; 4\n;; >>> (count_primes 8)\n;; 4\n;; >>> (count_primes 9)\n;; 5\n;; >>> (count_primes 10)\n;; 5\n;; >>> (count_primes 11)\n;; 6\n;; >>> (count_primes 12)\n;; 6\n;; >>> (count_primes 13)\n;; 7\n;; >>> (count_primes 14)\n;; 7\n;; >>> (count_primes 15)\n;; 8\n;; >>> (count_primes 16)\n;; 8\n;; >>> (count_primes 17)\n;; 9\n;; >>> (count_primes 18)\n;; 9\n;; >>> (count_primes 19)\n;; 10\n;; >>> (count_primes 20)\n;; 10\n;; >>> (count_primes 21)\n;; 11\n;; >>> (count_primes 22)\n;; 11\n;; >>> (count_primes 23)\n;; 12\n;; >>> (count_primes 24)\n;; 12\n;; >>> (count_primes 25)\n;; 13\n;; >>> (count_primes 26)\n;; 13\n;; >>> (count_primes 27)\n;; 14\n;; >>> (count_primes 28)\n;; 14\n;; >>> (count_primes 29)\n;; 15\n;; >>> (count_primes 30)\n;; 15\n;; >>> (count_primes 31)\n;; 16\n;; >>> (count_primes 32)\n;; 16\n;; >>> (",
    "  (cond\n    ((zero? n) #t)\n    ((negative? n) #f)\n    (else\n      (let ((i (quotient n 2)))\n        (and\n          (zero? i)\n          (not (modulo n (quotient i 2)))\n          (is_prime (quotient n i)))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 101)\n;; 6\n;; >>> (count_primes 11)\n;; 2\n;; >>> (count_primes 13441)\n;; 6\n;; >>> (count_primes 61)\n;; 3\n;; >>> (count_primes 4)\n;; 0\n;; >>> (count_primes 1)\n;; 0",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and (>= n 1)\n             (not (modulo n 2))\n             (not (modulo n 3))\n             (every-predicate (lambda (p) (modulo n p)) (range 2 i)))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count-primes 6)\n;; 3\n;; >>> (count-primes 101)\n;; 11\n;; >>> (count-primes 11)\n;; 2\n;; >>> (count-primes 13441)\n;; 6\n;; >>> (count-primes 61)\n;; 3\n;; >>> (count-primes 4)\n;; 0\n;; >>> (count-primes 1)\n;; 0",
    "  (cond\n    ((zero? n) #t)\n    ((negative? n) #f)\n    (else\n      (let ((d (quotient n 2)))\n        (and\n          (zero? d)\n          (not (modulo n 2)))))\n  )\n)\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 101)\n;; 4\n;; >>> (count_primes 11)\n;; 2\n;; >>> (count_primes 13441)\n;; 5\n;; >>> (count_primes 61)\n;; 3\n;; >>> (count_primes 4)\n;; 0\n;; >>> (count_primes 1)\n;; 0",
    "  (cond\n    ((zero? n) #t)\n    ((negative? n) #f)\n    (else\n      (let ((i (quotient n 2)))\n        (and\n          (zero? i)\n          (not (modulo n (quotient i 2)))\n          (is_prime (quotient n i)))))))\n\n;; Return the number of prime factors of a given number.\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 101)\n;; 2\n;; >>> (count_primes 11)\n;; 2\n;; >>> (count_primes 13441)\n;; 3\n;; >>> (count_primes 61)\n;; 2\n;; >>> (count_primes 4)\n;; 1\n;; >>> (count_primes 1)\n;; 0",
    "  (cond\n    ((zero? n) #f)\n    ((negative? n) #f)\n    ((zero? (remainder n 2)))\n    (else\n      (and\n        (not (zero? (remainder n 2)))\n        (not (zero? (remainder (remainder n 2) 2)))\n        (is_prime (quotient n 2))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 0)\n;; #f\n;; >>> (count_primes 1)\n;; #f\n;; >>> (count_primes 2)\n;; #f\n;; >>> (count_primes 3)\n;; #f\n;; >>> (count_primes 4)\n;; #f\n;; >>> (count_primes 5)\n;; #f\n;; >>> (count_primes 6)\n;; #f\n;; >>> (count_primes 7)\n;; #f\n;; >>> (count_primes 8)\n;; #f\n;; >>> (count_primes 9)\n;; #f\n;; >>> (count_primes 10)\n;; #f\n;; >>> (count_primes 11)\n;; #f\n;; >>> (count_primes 12)\n;; #f\n;; >>> (count_primes 13)\n;; #f\n;; >>> (count_primes 14)\n;; #f\n;; >>> (count_primes 15)\n;; #f\n;; >>> (count_primes 16)\n;; #f\n;; >>> (count_primes 17)\n;; #f\n;; >>> (count_primes 18)\n;; #f\n;; >>> (count_primes 19)\n;; #f\n;; >>> (count_primes 20)\n;; #f\n;; >>> (count_primes 21)\n;; #f\n;; >>> (count_primes 22)\n;; #f\n;; >>> (count_primes 23)\n;; #f\n;; >>> (count_primes 24)\n;; #f\n;; >>> (count_primes 25)\n;; #f\n;; >>> (count_primes 26)\n;; #f\n;; >>> (count_primes 27)\n;; #f\n;; >>> (count_primes 28)\n",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo n (car i)))\n          #f\n          (is_prime (modulo n (car i)))))\n      )))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; #f\n;; >>> (count_primes 101)\n;; #f\n;; >>> (count_primes 11)\n;; #f\n;; >>> (count_primes 13441)\n;; #f\n;; >>> (count_primes 61)\n;; #f\n;; >>> (count_primes 4)\n;; #f\n;; >>> (count_primes 1)\n;; #f",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and\n          (zero? (modulo n 2))\n          (not (modulo i 2))\n          (not (modulo (modulo i 3) 2))\n          (not (modulo (modulo i 5) 2))\n          (not (modulo (modulo i 7) 2))\n          (not (modulo (modulo i 11) 2))\n          (not (modulo (modulo i 13) 2))\n          (not (modulo (modulo i 17) 2))\n          (not (modulo (modulo i 19) 2))\n          (not (modulo (modulo i 23) 2))\n          (not (modulo (modulo i 29) 2))\n          (not (modulo (modulo i 31) 2))\n          (not (modulo (modulo i 37) 2))\n          (not (modulo (modulo i 41) 2))\n          (not (modulo (modulo i 43) 2))\n          (not (modulo (modulo i 47) 2))\n          (not (modulo (modulo i 53) 2))\n          (not (modulo (modulo i 59) 2))\n          (not (modulo (modulo i 61) 2))\n          (not (modulo (modulo i 67) 2))\n          (not (modulo (modulo i 71) 2))\n          (not (modulo (modulo i 73) 2))\n          (not (modulo (modulo i 79) 2))\n          (not (modulo (modulo i 83) 2))\n          (not (modulo (modulo i 89) 2))\n          (not (modulo (modulo i 97) 2))))))))))\n\n;; Return true if a given number is a perfect square, and false otherwise.\n;; >>> (is_square 6)\n;; #f\n;; >>> (is_square 101)\n;; #t\n;; >>> (is_square 11)\n;; #f\n;; >>> (is_square 13441)\n;; #t\n;; >>> (is_square 61)\n;; #f\n;; >>> (is_square 4)\n;; #f\n",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and (>= n 1)\n             (not (modulo n 2))\n             (not (modulo n 3))\n             (every-predicate (lambda (p) (modulo n p)) (range 2 i)))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count-primes 6)\n;; 3\n;; >>> (count-primes 101)\n;; 11\n;; >>> (count-primes 11)\n;; 2\n;; >>> (count-primes 13441)\n;; 4\n;; >>> (count-primes 61)\n;; 2\n;; >>> (count-primes 4)\n;; 0\n;; >>> (count-primes 1)\n;; 0",
    "  (cond\n    [(zero? n) #f]\n    [(zero? (modulo n 2)) #f]\n    [(zero? (modulo n 3)) #f]\n    [(zero? (modulo n 5)) #f]\n    [(zero? (modulo n 7)) #f]\n    [(zero? (modulo n 11)) #f]\n    [(zero? (modulo n 13)) #f]\n    [(zero? (modulo n 17)) #f]\n    [(zero? (modulo n 19)) #f]\n    [(zero? (modulo n 23)) #f]\n    [(zero? (modulo n 29)) #f]\n    [(zero? (modulo n 31)) #f]\n    [(zero? (modulo n 37)) #f]\n    [(zero? (modulo n 41)) #f]\n    [(zero? (modulo n 43)) #f]\n    [(zero? (modulo n 47)) #f]\n    [(zero? (modulo n 53)) #f]\n    [(zero? (modulo n 59)) #f]\n    [(zero? (modulo n 61)) #f]\n    [(zero? (modulo n 67)) #f]\n    [(zero? (modulo n 71)) #f]\n    [(zero? (modulo n 73)) #f]\n    [(zero? (modulo n 79)) #f]\n    [(zero? (modulo n 83)) #f]\n    [(zero? (modulo n 89)) #f]\n    [(zero? (modulo n 97)) #f]\n    [(zero? (modulo n 101)) #f]\n    [#t #t]\n  )\n)\n\n;; Return true if a given number is prime, and false otherwise.\n;; >>> (is_prime? 6)\n;; #f\n;; >>> (is_prime? 101)\n;; #t\n;; >>> (is_prime? 11)\n;; #t\n;; >>> (is_prime? 13441)\n;; #t\n;; >>> (is_prime? 61)\n;; #t\n;; >>> (is_prime?",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (- i 1))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 10)\n;; 6\n;; >>> (count_primes 100)\n;; 25\n;; >>> (count_primes 1000)\n;; 168\n;; >>> (count_primes 1000000)\n;; 2,817\n;; >>> (count_primes 10000000)\n;; 2,817,743\n;; >>> (count_primes 1000000000)\n;; 2,817,743,591\n;; >>> (count_primes 1000000000000)\n;; 2,817,743,591,823\n;; >>> (count_primes 1000000000000000)\n;; 2,817,743,591,823,971\n;; >>> (count_primes 10000000000000000)\n;; 2,817,743,591,823,971,873\n;; >>> (count_primes 100000000000000000)\n;; 2,817,743,591,823,971,873,851\n;; >>> (count_primes 1000000000000000000)\n;; 2,817,743,591,823,971,873,851,769\n;; >>> (count_primes 10000000000000000000)\n;; 2,817,743,591,823,971,873,851,769,763\n;; >>> (count_primes 100000000000000000)\n;; 2,817,743,591,823,971,873,851,769,763,745\n;; >>> (count_primes 100000000000000000000)\n;; 2,817,743,591,823,971,873,851,769,763,745,691\n;; >>> (count_primes 100000000000000000000000)\n;; 2,817,743,591,823,971,873,851,769,763,745,691,631\n;; >>> (",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo n i))\n          #f\n          (is_prime (- n) (modulo (- n) i)))))\n  )\n)\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 101)\n;; 4\n;; >>> (count_primes 11)\n;; 2\n;; >>> (count_primes 13441)\n;; 4\n;; >>> (count_primes 61)\n;; 2\n;; >>> (count_primes 4)\n;; 0\n;; >>> (count_primes 1)\n;; 0",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and\n          (zero? (modulo n 2))\n          (not (modulo i 2))\n          (not (modulo (modulo i 3) 2))\n          (not (modulo (modulo i 5) 2))\n          (not (modulo (modulo i 7) 2))\n          (not (modulo (modulo i 11) 2))\n          (not (modulo (modulo i 13) 2))\n          (not (modulo (modulo i 17) 2))\n          (not (modulo (modulo i 19) 2))\n          (not (modulo (modulo i 23) 2))\n          (not (modulo (modulo i 29) 2))\n          (not (modulo (modulo i 31) 2))\n          (not (modulo (modulo i 37) 2))\n          (not (modulo (modulo i 41) 2))\n          (not (modulo (modulo i 43) 2))\n          (not (modulo (modulo i 47) 2))\n          (not (modulo (modulo i 53) 2))\n          (not (modulo (modulo i 59) 2))\n          (not (modulo (modulo i 61) 2))\n          (not (modulo (modulo i 67) 2))\n          (not (modulo (modulo i 71) 2))\n          (not (modulo (modulo i 73) 2))\n          (not (modulo (modulo i 79) 2))\n          (not (modulo (modulo i 83) 2))\n          (not (modulo (modulo i 89) 2))\n          (not (modulo (modulo i 97) 2))))))))))))\n",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and (>= n 1)\n             (not (modulo i 2))\n             (not (modulo (remainder n 2) 2))\n             (not (modulo (remainder n 3) 3))\n             (not (modulo (remainder n 5) 5))\n             (not (modulo (remainder n 7) 7))\n             (not (modulo (remainder n 11) 11))\n             (not (modulo (remainder n 13) 13))\n             (not (modulo (remainder n 17) 17))\n             (not (modulo (remainder n 19) 19))\n             (not (modulo (remainder n 23) 23))\n             (not (modulo (remainder n 29) 29))\n             (not (modulo (remainder n 31) 31))\n             (not (modulo (remainder n 37) 37))\n             (not (modulo (remainder n 41) 41))\n             (not (modulo (remainder n 43) 43))\n             (not (modulo (remainder n 47) 47))\n             (not (modulo (remainder n 53) 53))\n             (not (modulo (remainder n 59) 59))\n             (not (modulo (remainder n 61) 61))\n             (not (modulo (remainder n 67) 67))\n             (not (modulo (remainder n 71) 71))\n             (not (modulo (remainder n 73) 73))\n             (not (modulo (remainder n 79) 79))\n             (not (modulo (remainder n 83) 83))\n             (not (modulo (remainder n 89) 89))\n             (not (modulo (remainder n 97) 97))))))))))\n\n;; Return true if a given number is prime, and false otherwise.\n;; >>> (is_prime? 6)\n;; #f\n;; >>> (is_prime? 101)\n;; #t\n;; >>> (is_prime? 11)\n;; #t\n;; >>> (is_",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and (>= n 1)\n             (not (modulo i 2))\n             (not (modulo (sub1 i) 2))\n             (is_prime (sub1 i)))))\n  )\n)\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 101)\n;; 11\n;; >>> (count_primes 11)\n;; 2\n;; >>> (count_primes 13441)\n;; 5\n;; >>> (count_primes 61)\n;; 2\n;; >>> (count_primes 4)\n;; 0\n;; >>> (count_primes 1)\n;; 0",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (let ((d (div n (car i)))\n            (r (rem n (car i)))\n            (m (modulo n (car i))))\n        (and\n          (zero? d)\n          (zero? r)\n          (not (zero? m))\n          (not (modulo (car i) (car i)))\n          (not (modulo (car i) (car i)))))\n      #f))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 0)\n;; 0\n;; >>> (count_primes 1)\n;; 0\n;; >>> (count_primes 2)\n;; 1\n;; >>> (count_primes 3)\n;; 2\n;; >>> (count_primes 4)\n;; 2\n;; >>> (count_primes 5)\n;; 3\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 7)\n;; 4\n;; >>> (count_primes 8)\n;; 4\n;; >>> (count_primes 9)\n;; 5\n;; >>> (count_primes 10)\n;; 5\n;; >>> (count_primes 11)\n;; 6\n;; >>> (count_primes 12)\n;; 6\n;; >>> (count_primes 13)\n;; 7\n;; >>> (count_primes 14)\n;; 7\n;; >>> (count_primes 15)\n;; 8\n;; >>> (count_primes 16)\n;; 8\n;; >>> (count_primes 17)\n;; 9\n;; >>> (count_primes 18)\n;; 9\n;; >>> (count_primes 19)\n;; 10\n;; >>> (count_primes 20)\n;; 10\n;; >>> (count_primes 21)\n;; 11\n;; >>> (count_primes 22)\n;; 11\n;; >>> (count_primes 23)\n;; 12\n;; >>> (count_primes 24)\n;; 12\n;; >>> (count_primes 25)\n;; 13\n;; >>> (count_primes 26)\n;; 13\n;; >>> (count_primes 27)\n;; 14\n;; >>> (count_primes 28",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo n (car i)))\n          #f\n          (is_prime (cdr i)))))))\n\n;; Return the prime factors of a given number.\n;; >>> (prime_factors 6)\n;; #(6)\n;; >>> (prime_factors 101)\n;; #(101)\n;; >>> (prime_factors 11)\n;; #(11)\n;; >>> (prime_factors 13441)\n;; #(13, 41)\n;; >>> (prime_factors 61)\n;; #(61)\n;; >>> (prime_factors 4)\n;; #()\n;; >>> (prime_factors 1)\n;; #()",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (modulo i 2))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 0)\n;; 0\n;; >>> (count_primes 1)\n;; 0\n;; >>> (count_primes 2)\n;; 1\n;; >>> (count_primes 3)\n;; 2\n;; >>> (count_primes 4)\n;; 2\n;; >>> (count_primes 5)\n;; 3\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 7)\n;; 4\n;; >>> (count_primes 8)\n;; 4\n;; >>> (count_primes 9)\n;; 5\n;; >>> (count_primes 10)\n;; 5\n;; >>> (count_primes 11)\n;; 6\n;; >>> (count_primes 12)\n;; 6\n;; >>> (count_primes 13)\n;; 7\n;; >>> (count_primes 14)\n;; 7\n;; >>> (count_primes 15)\n;; 8\n;; >>> (count_primes 16)\n;; 8\n;; >>> (count_primes 17)\n;; 9\n;; >>> (count_primes 18)\n;; 9\n;; >>> (count_primes 19)\n;; 10\n;; >>> (count_primes 20)\n;; 10\n;; >>> (count_primes 21)\n;; 11\n;; >>> (count_primes 22)\n;; 11\n;; >>> (count_primes 23)\n;; 12\n;; >>> (count_primes 24)\n;; 12\n;; >>> (count_primes 25)\n;; 13\n;; >>> (count_primes 26)\n;; 13\n;; >>> (count_primes 27)\n;; 14\n;; >>> (count_primes 28)\n;; 14\n;; >>> (count_primes 29)\n;; 15\n;; >>> (count_primes 30)\n;; 15\n;; >>> (count_primes 31)\n;; 16\n;; >>> (count_primes 32)\n;; 16\n;; >>> (",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (modulo i 2))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; #f\n;; >>> (count_primes 101)\n;; #f\n;; >>> (count_primes 11)\n;; #f\n;; >>> (count_primes 13441)\n;; #f\n;; >>> (count_primes 61)\n;; #f\n;; >>> (count_primes 4)\n;; #f\n;; >>> (count_primes 1)\n;; #f",
    "  (cond\n    ((zero? n) #f)\n    ((negative? n) #f)\n    ((zero? (modulo n 2)))\n    (else\n      (let ((d (quotient n 2)))\n        (and\n          (zero? (modulo d 2))\n          (not (modulo d 2))\n          (not (modulo (modulo d 2) 2))\n          (= d 1)\n          (= n 1)\n          (= (modulo n 2) 0))))))\n\n;; Return true if a given number is even, and false otherwise.\n;; >>> (is_even 6)\n;; #f\n;; >>> (is_even 101)\n;; #t\n;; >>> (is_even 11)\n;; #f\n;; >>> (is_even 13441)\n;; #f\n;; >>> (is_even 61)\n;; #f\n;; >>> (is_even 4)\n;; #t\n;; >>> (is_even 1)\n;; #f",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and (>= n 1)\n             (not (modulo n 2))\n             (not (modulo n 3))\n             (not (modulo n 5))\n             (not (modulo n 7))\n             (not (modulo n 11))\n             (not (modulo n 13))\n             (not (modulo n 17))\n             (not (modulo n 19))\n             (not (modulo n 23))\n             (not (modulo n 29))\n             (not (modulo n 31))\n             (not (modulo n 37))\n             (not (modulo n 41))\n             (not (modulo n 43))\n             (not (modulo n 47))\n             (not (modulo n 53))\n             (not (modulo n 59))\n             (not (modulo n 61))))))))\n\n;; Return true if a given number is prime, and false otherwise.\n;; >>> (is_prime? 6)\n;; #f\n;; >>> (is_prime? 101)\n;; #t\n;; >>> (is_prime? 11)\n;; #t\n;; >>> (is_prime? 13441)\n;; #t\n;; >>> (is_prime? 61)\n;; #t\n;; >>> (is_prime? 4)\n;; #f\n;; >>> (is_prime? 1)\n;; #f",
    "  (cond\n    ((zero? n) #t)\n    ((negative? n) #f)\n    ((zero? (remainder n 2)))\n    (else\n      (and\n        (not (zero? (remainder n 2)))\n        (not (zero? (remainder (remainder n 2) 2)))\n        (is_prime (quotient n 2)))))\n)\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count-primes 6)\n;; #f\n;; >>> (count-primes 101)\n;; #f\n;; >>> (count-primes 11)\n;; #f\n;; >>> (count-primes 13441)\n;; #f\n;; >>> (count-primes 61)\n;; #f\n;; >>> (count-primes 4)\n;; #f\n;; >>> (count-primes 1)\n;; #f",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and (>= n 1)\n             (not (modulo n 2))\n             (not (modulo n 3))\n             (every-predicate (lambda (p) (modulo n p)) (range 2 i)))))))\n\n;; Return true if a given number is even, and false otherwise.\n;; >>> (is_even 6)\n;; #f\n;; >>> (is_even 101)\n;; #t\n;; >>> (is_even 11)\n;; #f\n;; >>> (is_even 13441)\n;; #t\n;; >>> (is_even 61)\n;; #f\n;; >>> (is_even 4)\n;; #t\n;; >>> (is_even 1)\n;; #f",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (- i 1))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; #f\n;; >>> (count_primes 101)\n;; #f\n;; >>> (count_primes 11)\n;; #f\n;; >>> (count_primes 13441)\n;; #f\n;; >>> (count_primes 61)\n;; #f\n;; >>> (count_primes 4)\n;; #f\n;; >>> (count_primes 1)\n;; #f",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (modulo i 2))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 101)\n;; 6\n;; >>> (count_primes 11)\n;; 2\n;; >>> (count_primes 13441)\n;; 6\n;; >>> (count_primes 61)\n;; 3\n;; >>> (count_primes 4)\n;; 0\n;; >>> (count_primes 1)\n;; 0",
    "  (cond\n    ((zero? n) #t)\n    ((zero? (modulo n 2)) #f)\n    ((zero? (modulo n 3)) #f)\n    ((zero? (modulo n 5)) #f)\n    ((zero? (modulo n 7)) #f)\n    ((zero? (modulo n 11)) #f)\n    ((zero? (modulo n 13)) #f)\n    ((zero? (modulo n 17)) #f)\n    ((zero? (modulo n 19)) #f)\n    ((zero? (modulo n 23)) #f)\n    ((zero? (modulo n 29)) #f)\n    ((zero? (modulo n 31)) #f)\n    ((zero? (modulo n 37)) #f)\n    ((zero? (modulo n 41)) #f)\n    ((zero? (modulo n 43)) #f)\n    ((zero? (modulo n 47)) #f)\n    ((zero? (modulo n 53)) #f)\n    ((zero? (modulo n 59)) #f)\n    ((zero? (modulo n 61)) #f)\n    ((zero? (modulo n 67)) #f)\n    ((zero? (modulo n 71)) #f)\n    ((zero? (modulo n 73)) #f)\n    ((zero? (modulo n 79)) #f)\n    ((zero? (modulo n 83)) #f)\n    ((zero? (modulo n 89)) #f)\n    ((zero? (modulo n 97)) #f)\n    ((zero? (modulo n 101)) #f)\n    #t))))\n\n;; Return true if a given number is even, and false otherwise.\n;; >>> (even? 6)\n;; #f\n;; >>> (even? -6)\n;; #f\n;; >>> (even? 0)\n;; #t\n;; >>> (even? 1)\n;; #f\n;; >>> (even? 2)\n;; #t\n;; >>> (even? -2)\n;; #t\n;; >>> (even? 4)\n;; #f\n;; >>> (even? -4)\n;; #f\n;; >>> (even? 5)\n;; #f\n;; >>>",
    "  (cond\n    ((zero? n) #t)\n    ((negative? n) #f)\n    ((zero? (remainder n 2)))\n    (else\n      (and\n        (not (zero? (remainder n 2)))\n        (not (zero? (remainder (remainder n 2) 2)))\n        (is_prime (- n 1)))))\n  )\n)\n\n;; Return the prime factors of a given number.\n;; >>> (prime_factors 6)\n;; #f\n;; >>> (prime_factors 101)\n;; #f\n;; >>> (prime_factors 11)\n;; #f\n;; >>> (prime_factors 13441)\n;; #f\n;; >>> (prime_factors 61)\n;; #f\n;; >>> (prime_factors 4)\n;; #f\n;; >>> (prime_factors 1)\n;; #f",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (is_prime (modulo i 2)))))\n  )\n)\n\n;; Return the prime factors of a given number.\n;; >>> (prime_factors 6)\n;; #(6)\n;; >>> (prime_factors 101)\n;; #(101)\n;; >>> (prime_factors 11)\n;; #(11)\n;; >>> (prime_factors 13441)\n;; #(13, 41)\n;; >>> (prime_factors 61)\n;; #(61)\n;; >>> (prime_factors 4)\n;; #()\n;; >>> (prime_factors 1)\n;; #()",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (modulo i 2))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 101)\n;; 6\n;; >>> (count_primes 11)\n;; 2\n;; >>> (count_primes 13441)\n;; 7\n;; >>> (count_primes 61)\n;; 3\n;; >>> (count_primes 4)\n;; 0\n;; >>> (count_primes 1)\n;; 0",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (- i 1))))))))\n\n;; Return true if a given number is even, and false otherwise.\n;; >>> (is_even 6)\n;; #f\n;; >>> (is_even 101)\n;; #t\n;; >>> (is_even 11)\n;; #f\n;; >>> (is_even 13441)\n;; #f\n;; >>> (is_even 61)\n;; #f\n;; >>> (is_even 4)\n;; #t\n;; >>> (is_even 1)\n;; #f",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (- i 1))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 101)\n;; 11\n;; >>> (count_primes 11)\n;; 1\n;; >>> (count_primes 13441)\n;; 5\n;; >>> (count_primes 61)\n;; 2\n;; >>> (count_primes 4)\n;; 0\n;; >>> (count_primes 1)\n;; 0",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and (>= n 1)\n             (not (modulo n 2))\n             (not (modulo n 3))\n             (every-predicate (lambda (p) (modulo n p)) (range 2 i)))))))\n\n;; Return true if a given number is even, and false otherwise.\n;; >>> (is_even 6)\n;; #f\n;; >>> (is_even 101)\n;; #t\n;; >>> (is_even 11)\n;; #f\n;; >>> (is_even 13441)\n;; #f\n;; >>> (is_even 61)\n;; #f\n;; >>> (is_even 4)\n;; #t\n;; >>> (is_even 1)\n;; #f",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (- i 1))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 101)\n;; 6\n;; >>> (count_primes 11)\n;; 2\n;; >>> (count_primes 13441)\n;; 6\n;; >>> (count_primes 61)\n;; 3\n;; >>> (count_primes 4)\n;; 0\n;; >>> (count_primes 1)\n;; 0",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (is_prime (modulo i 2)))))\n    ))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 101)\n;; 11\n;; >>> (count_primes 11)\n;; 1\n;; >>> (count_primes 13441)\n;; 4\n;; >>> (count_primes 61)\n;; 2\n;; >>> (count_primes 4)\n;; 0\n;; >>> (count_primes 1)\n;; 0",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (modulo i 2))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 0)\n;; 0\n;; >>> (count_primes 1)\n;; 0\n;; >>> (count_primes 2)\n;; 1\n;; >>> (count_primes 3)\n;; 2\n;; >>> (count_primes 4)\n;; 2\n;; >>> (count_primes 5)\n;; 3\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 7)\n;; 4\n;; >>> (count_primes 8)\n;; 4\n;; >>> (count_primes 9)\n;; 5\n;; >>> (count_primes 10)\n;; 5\n;; >>> (count_primes 11)\n;; 6\n;; >>> (count_primes 12)\n;; 6\n;; >>> (count_primes 13)\n;; 7\n;; >>> (count_primes 14)\n;; 7\n;; >>> (count_primes 15)\n;; 8\n;; >>> (count_primes 16)\n;; 8\n;; >>> (count_primes 17)\n;; 9\n;; >>> (count_primes 18)\n;; 9\n;; >>> (count_primes 19)\n;; 10\n;; >>> (count_primes 20)\n;; 10\n;; >>> (count_primes 21)\n;; 11\n;; >>> (count_primes 22)\n;; 11\n;; >>> (count_primes 23)\n;; 12\n;; >>> (count_primes 24)\n;; 12\n;; >>> (count_primes 25)\n;; 13\n;; >>> (count_primes 26)\n;; 13\n;; >>> (count_primes 27)\n;; 14\n;; >>> (count_primes 28)\n;; 14\n;; >>> (count_primes 29)\n;; 15\n;; >>> (count_primes 30)\n;; 15\n;; >>> (count_primes 31)\n;; 16\n;; >>> (count_primes 32)\n;; 16\n;; >>> (",
    "  (cond\n    ((zero? n) #t)\n    ((negative? n) #f)\n    (else\n      (let ((d (quotient n 2)))\n        (and\n          (zero? d)\n          (not (modulo n 2)))))\n  )\n)\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 101)\n;; 4\n;; >>> (count_primes 11)\n;; 2\n;; >>> (count_primes 13441)\n;; 4\n;; >>> (count_primes 61)\n;; 3\n;; >>> (count_primes 4)\n;; 0\n;; >>> (count_primes 1)\n;; 0",
    "  (cond\n    ((zero? n) #t)\n    ((zero? (quotient n 2)))\n    (else\n      (and\n        (not (zero? (modulo n 2)))\n        (is_prime (- n 1))))))\n\n;; Return the prime factors of a given number.\n;; >>> (prime_factors 6)\n;; #f\n;; >>> (prime_factors 101)\n;; #f\n;; >>> (prime_factors 11)\n;; #f\n;; >>> (prime_factors 13441)\n;; #f\n;; >>> (prime_factors 61)\n;; #f\n;; >>> (prime_factors 4)\n;; #f\n;; >>> (prime_factors 1)\n;; #f\n;; >>> (prime_factors 2)\n;; #f\n;; >>> (prime_factors 3)\n;; #f\n;; >>> (prime_factors 4)\n;; #f\n;; >>> (prime_factors 5)\n;; #f\n;; >>> (prime_factors 6)\n;; #f\n;; >>> (prime_factors 7)\n;; #f\n;; >>> (prime_factors 8)\n;; #f\n;; >>> (prime_factors 9)\n;; #f\n;; >>> (prime_factors 10)\n;; #f\n;; >>> (prime_factors 11)\n;; #f\n;; >>> (prime_factors 12)\n;; #f\n;; >>> (prime_factors 13)\n;; #f\n;; >>> (prime_factors 14)\n;; #f\n;; >>> (prime_factors 15)\n;; #f\n;; >>> (prime_factors 16)\n;; #f\n;; >>> (prime_factors 17)\n;; #f\n;; >>> (prime_factors 18)\n;; #f\n;; >>> (prime_factors 19)\n;; #f\n;; >>> (prime_factors 20)\n;; #f\n;; >>> (prime_factors 21)\n;; #f\n;; >>> (prime_factors 22)\n;; #f\n;; >>> (prime_factors 23)\n;; #f\n;; >>> (prime_factors 24)\n;; #f\n;; >>> (prime_factors 25)\n;; #f\n;; >>> (prime_factors",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and (>= n 1)\n             (not (modulo i 2))\n             (not (modulo (sub1 i) 2))\n             (is_prime (sub1 i)))))))\n\n;; Return true if a given number is even, and false otherwise.\n;; >>> (is_even 6)\n;; #f\n;; >>> (is_even 101)\n;; #f\n;; >>> (is_even 11)\n;; #t\n;; >>> (is_even 13441)\n;; #f\n;; >>> (is_even 61)\n;; #f\n;; >>> (is_even 4)\n;; #t\n;; >>> (is_even 1)\n;; #f",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (is_prime (modulo i 2)))))\n    ))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 101)\n;; 11\n;; >>> (count_primes 11)\n;; 1\n;; >>> (count_primes 13441)\n;; 5\n;; >>> (count_primes 61)\n;; 2\n;; >>> (count_primes 4)\n;; 0\n;; >>> (count_primes 1)\n;; 0",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and (>= n 1)\n             (not (modulo i 2))\n             (not (modulo (modulo i 3) 2))\n             (not (modulo (modulo i 5) 2))\n             (not (modulo (modulo i 7) 2))\n             (not (modulo (modulo i 11) 2))\n             (not (modulo (modulo i 13) 2))\n             (not (modulo (modulo i 17) 2))\n             (not (modulo (modulo i 19) 2))\n             (not (modulo (modulo i 23) 2))\n             (not (modulo (modulo i 29) 2))\n             (not (modulo (modulo i 31) 2))\n             (not (modulo (modulo i 37) 2))\n             (not (modulo (modulo i 41) 2))\n             (not (modulo (modulo i 43) 2))\n             (not (modulo (modulo i 47) 2))\n             (not (modulo (modulo i 53) 2))\n             (not (modulo (modulo i 59) 2))\n             (not (modulo (modulo i 61) 2))\n             (not (modulo (modulo i 67) 2))\n             (not (modulo (modulo i 71) 2))\n             (not (modulo (modulo i 73) 2))\n             (not (modulo (modulo i 79) 2))\n             (not (modulo (modulo i 83) 2))\n             (not (modulo (modulo i 89) 2))\n             (not (modulo (modulo i 97) 2))))))))))\n\n;; Return true if a given number is prime, and false otherwise.\n;; >>> (is_prime? 6)\n;; #f\n;; >>> (is_prime? 101)\n;; #t\n;; >>> (is_prime? 11)\n;; #t\n;; >>> (is_prime? 13441)\n;; #t\n;; >>> (is_prime? 61)\n;; #t\n;; >>> (is_prime? 4)\n;; #f\n;; >>>",
    "  (let ((i (sqrt n)))\n    (if (zero? i)\n      #t\n      (else\n        (and\n          (zero? (modulo n (car i)))\n          (not (is_prime (cdr i))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 101)\n;; 4\n;; >>> (count_primes 11)\n;; 2\n;; >>> (count_primes 13441)\n;; 4\n;; >>> (count_primes 61)\n;; 3\n;; >>> (count_primes 4)\n;; 1\n;; >>> (count_primes 1)\n;; 0",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (modulo i 2))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 0)\n;; 0\n;; >>> (count_primes 1)\n;; 0\n;; >>> (count_primes 2)\n;; 1\n;; >>> (count_primes 3)\n;; 2\n;; >>> (count_primes 4)\n;; 2\n;; >>> (count_primes 5)\n;; 3\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 7)\n;; 4\n;; >>> (count_primes 8)\n;; 4\n;; >>> (count_primes 9)\n;; 5\n;; >>> (count_primes 10)\n;; 5\n;; >>> (count_primes 11)\n;; 6\n;; >>> (count_primes 12)\n;; 6\n;; >>> (count_primes 13)\n;; 7\n;; >>> (count_primes 14)\n;; 7\n;; >>> (count_primes 15)\n;; 8\n;; >>> (count_primes 16)\n;; 8\n;; >>> (count_primes 17)\n;; 9\n;; >>> (count_primes 18)\n;; 9\n;; >>> (count_primes 19)\n;; 10\n;; >>> (count_primes 20)\n;; 10\n;; >>> (count_primes 21)\n;; 11\n;; >>> (count_primes 22)\n;; 11\n;; >>> (count_primes 23)\n;; 12\n;; >>> (count_primes 24)\n;; 12\n;; >>> (count_primes 25)\n;; 13\n;; >>> (count_primes 26)\n;; 13\n;; >>> (count_primes 27)\n;; 14\n;; >>> (count_primes 28)\n;; 14\n;; >>> (count_primes 29)\n;; 15\n;; >>> (count_primes 30)\n;; 15\n;; >>> (count_primes 31)\n;; 16\n;; >>> (count_primes 32)\n;; 16\n;; >>> (",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (else\n            (is_prime (modulo i 2))))))))\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 101)\n;; 4\n;; >>> (count_primes 11)\n;; 2\n;; >>> (count_primes 13441)\n;; 4\n;; >>> (count_primes 61)\n;; 3\n;; >>> (count_primes 4)\n;; 0\n;; >>> (count_primes 1)\n;; 0",
    "  (cond\n    ((zero? n) #t)\n    ((negative? n) #f)\n    (else\n      (let ((i (quotient n 2)))\n        (and\n          (zero? i)\n          (not (modulo n (quotient i 2)))\n          (is_prime (quotient n i)))))))\n\n;; Return true if a given number is even, and false otherwise.\n;; >>> (even? 6)\n;; #f\n;; >>> (even? 101)\n;; #t\n;; >>> (even? 11)\n;; #f\n;; >>> (even? 13441)\n;; #f\n;; >>> (even? 61)\n;; #f\n;; >>> (even? 4)\n;; #t\n;; >>> (even? 1)\n;; #t",
    "  (let ((i (floor n)))\n    (if (zero? i)\n      #t\n      (else\n        (if (zero? (modulo i 2))\n          #f\n          (is_prime (- i 1)))))\n  )\n)\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 101)\n;; 6\n;; >>> (count_primes 11)\n;; 2\n;; >>> (count_primes 13441)\n;; 7\n;; >>> (count_primes 61)\n;; 3\n;; >>> (count_primes 4)\n;; 0\n;; >>> (count_primes 1)\n;; 0",
    "  (cond\n    ((zero? n) #t)\n    ((negative? n) #f)\n    (else\n      (let ((i (quotient n 2)))\n        (and\n          (zero? i)\n          (not (modulo n (quotient i 2)))\n          (is_prime (quotient n i)))))\n  )\n)\n\n;; Return the number of prime numbers less than or equal to a given number.\n;; >>> (count_primes 0)\n;; 0\n;; >>> (count_primes 1)\n;; 0\n;; >>> (count_primes 2)\n;; 1\n;; >>> (count_primes 3)\n;; 2\n;; >>> (count_primes 4)\n;; 2\n;; >>> (count_primes 5)\n;; 3\n;; >>> (count_primes 6)\n;; 3\n;; >>> (count_primes 7)\n;; 4\n;; >>> (count_primes 8)\n;; 4\n;; >>> (count_primes 9)\n;; 5\n;; >>> (count_primes 10)\n;; 5\n;; >>> (count_primes 11)\n;; 6\n;; >>> (count_primes 12)\n;; 6\n;; >>> (count_primes 13)\n;; 7\n;; >>> (count_primes 14)\n;; 7\n;; >>> (count_primes 15)\n;; 8\n;; >>> (count_primes 16)\n;; 8\n;; >>> (count_primes 17)\n;; 9\n;; >>> (count_primes 18)\n;; 9\n;; >>> (count_primes 19)\n;; 10\n;; >>> (count_primes 20)\n;; 10\n;; >>> (count_primes 21)\n;; 11\n;; >>> (count_primes 22)\n;; 11\n;; >>> (count_primes 23)\n;; 12\n;; >>> (count_primes 24)\n;; 12\n;; >>> (count_primes 25)\n;; 13\n;; >>> (count_primes 26)\n;; 13\n;; >>> (count_primes 27)\n;; 14\n;; >>> (count_primes 28)\n;; 14\n;; >>> (count_primes 29)\n;; 15\n;; >>> (count_primes 30)\n;; 15\n;; >>> (count_"
  ],
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ]
}