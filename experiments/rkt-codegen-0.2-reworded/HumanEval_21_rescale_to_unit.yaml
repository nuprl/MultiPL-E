name: HumanEval_21_rescale_to_unit
language: rkt
prompt: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
  \ a linear transform to that list,\n;; such that the smallest number will become\
  \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
  \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
  \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
  \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list\
  \ 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate\
  \ (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
  \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
completions: ["  (let* ([min (car numbers) max (cdr numbers)]\n         [scale (max\
    \ -min)])\n    (map (lambda (x) (* x scale)) (cons min (cons max (map (lambda\
    \ (x) (* x scale)) (cons x numbers)))))))\n\n;; Given a list of numbers, return\
    \ a list of the same length, where each number is the\n;; difference between the\
    \ original number and the number in the same position in the list\n;; >>> (diff_list\
    \ (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)", "  (let* ([min\
    \ (car numbers) max (cdr numbers)]\n         [scale (max -min)])\n    (map (lambda\
    \ (x) (* x scale)) (list min max))))\n\n;; Given a list of numbers, return a list\
    \ of the same length, where each element\n;; is the difference between the element\
    \ and the next element in the list.\n;; >>> (diff_list (list 1 2 3 4 5))\n;; (list\
    \ 1 2 1 2 1)", "  (let ((min (car numbers))\n         (max (car numbers)))\n \
    \   (map (lambda (x) (* x (max - min))))\n  )\n)\n\n;; Given a list of numbers,\
    \ return a list of the same length,\n;; where each element is the sum of the previous\
    \ and next elements\n;; >>> (sum_pair_list (list 1 2 3 4 5))\n;; (list 1 3 6 10)",
  "  (let* ([min (car numbers) max (cdr numbers)]\n         [scale (max -min)])\n\
    \    (map (lambda (x) (* x scale)) (list min max))))\n\n;; Given a list of numbers,\
    \ return a list of the same length, where each number is\n;; scaled to the range\
    \ [0, 1]\n;; >>> (rescale (list 1 2 3 4 5))\n;; (list 0.25 0.5 0.75 1.0)", " \
    \ (let ((min (car numbers))\n         (max (car numbers)))\n    (map (lambda (x)\
    \ (* x (max - min))))\n  )\n)\n\n;; Given a list of numbers, return a list of\
    \ the same length,\n;; where each element is the product of the original elements\n\
    ;; >>> (product_list (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 1.0 2.0 6.0 24.0 120.0)",
  "  (let ((min (car numbers))\n         (max (car numbers)))\n    (map (lambda (x)\
    \ (* x (max - min))))\n  )\n)\n\n;; Given a list of numbers, return a list of\
    \ the same length,\n;; where each element is the product of the original elements\n\
    ;; >>> (product_list (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 1.0 2.0 6.0 24.0 120.0)",
  "  (let* ([min (car numbers) max (cdr numbers)]\n         [scale (max -min)])\n\
    \    (map (lambda (x) (* x scale)) (list min max))))\n\n;; Given a list of numbers,\
    \ return the sum of those numbers\n;; >>> (sum (list 1 2 3 4 5))\n;; 15", "  (let*\
    \ ([min (car numbers) max (cdr numbers)]\n         [scale (max -min)])\n    (map\
    \ (lambda (x) (* x scale)) (list min max))))\n\n;; Given a list of numbers, return\
    \ the sum of those numbers\n;; >>> (sum (list 1 2 3 4 5))\n;; 15", "  (let* ([min\
    \ (car numbers) max (cdr numbers)]\n         [scale (max -min)])\n    (map (lambda\
    \ (x) (* x scale)) (list min max))))\n\n;; Given a list of numbers, return the\
    \ sum of those numbers\n;; >>> (sum (list 1 2 3 4 5))\n;; 15", "  (let* ([min\
    \ (car numbers) max (cdr numbers)]\n         [scale (max -min)])\n    (map (lambda\
    \ (x) (* x scale)) (numbers))))\n\n;; Given a list of numbers, return a list of\
    \ the same length, where each element is the\n;; sum of the previous and next\
    \ elements in the list\n;; >>> (sum_list (list 1.0 2.0 3.0 4.0 5.0))\n;; (list\
    \ 1.0 3.0 6.0 10.0 15.0)", "  (let* ([min (car numbers) max (cdr numbers)]\n \
    \        [scale (max -min)])\n    (map (lambda (x) (* x scale)) (list min max))\n\
    \  )\n)\n\n;; Given a list of numbers, return a list of the same length, where\
    \ each element is the\n;; average of the elements before and after it in the list\n\
    ;; >>> (average_list (list 1 2 3 4 5))\n;; (list 2.0 3.0 4.0 5.0)", "  (let* ([min\
    \ (car numbers) max (cdr numbers)]\n         [scale (max -min)])\n    (map (lambda\
    \ (x) (* x scale)) (cons min (cons max (map (lambda (x) (* x scale)) numbers))))))\n\
    \n;; Given a list of numbers, return the sum of those numbers\n;; >>> (sum (list\
    \ 1 2 3 4 5))\n;; 10", "  (let ((min (min numbers))\n         (max (max numbers)))\n\
    \    (map (lambda (x) (* x (max - min))) numbers)))\n\n;; Given a list of numbers,\
    \ return a list of the same length,\n;; where each number is the product of the\
    \ original number and the\n;; corresponding index in the list.\n;; >>> (product_list\
    \ (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 1.0 2.0 6.0 24.0 120.0)", "  (let* ([min\
    \ (car numbers) max (cdr numbers)]\n         [scale (max -min)])\n    (map (lambda\
    \ (x) (* x scale)) (list min max))))\n\n;; Given a list of numbers, return a list\
    \ of the same length,\n;; where each number is the product of the original number\
    \ and the scale factor\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0 5.0))\n\
    ;; (list 0.0 0.25 0.5 0.75 1.0)", "  (let ((min (car numbers))\n         (max\
    \ (car numbers)))\n    (if (< min 0)\n      (let ((scale (1.0 / (min - 1))))\n\
    \        (map (lambda (x) (* scale x)) numbers))\n      (let ((scale (1.0 / (max\
    \ - min))))\n        (map (lambda (x) (* scale (x - min))) numbers)))\n    numbers))\n\
    \n;; Given a list of numbers, return a list of the same length, where each element\n\
    ;; is the product of the elements before it\n;; >>> (product_list (list 1.0 2.0\
    \ 3.0 4.0 5.0))\n;; (list 1.0 2.0 6.0 24.0 120.0)", "  (let* ([min (car numbers)\
    \ max (cdr numbers)]\n         [scale (max -min)])\n    (map (lambda (x) (* x\
    \ scale)) (list min max)))\n)\n\n;; Given a list of numbers, return a list of\
    \ the same length, where each element is the\n;; product of the corresponding\
    \ elements in the original list.\n;; >>> (product (list 1 2 3 4 5))\n;; (list\
    \ 1 2 6 24 120)", "  (let ((min (min numbers))\n         (max (max numbers)))\n\
    \    (map (lambda (x) (* x (max - min))) numbers)))\n\n;; Given a list of numbers,\
    \ return a list of the same length, where each number\n;; is the product of the\
    \ numbers in the original list.\n;; >>> (product_list (list 1 2 3 4 5))\n;; (list\
    \ 1 2 6 24 120)", "  (let* ([min (car numbers) max (car numbers)])\n    (if (null?\
    \ numbers)\n      (list 0.0)\n      (let* ([scale (max -min)])\n        (map (lambda\
    \ (x) (/ x scale)) numbers))))\n)\n\n;; Given a list of numbers, return a list\
    \ of the same length, where each element is the\n;; sum of the preceding two elements\
    \ in the list.\n;; >>> (sum-of-two-preceding (list 1 2 3 4 5))\n;; (list 2 3 6\
    \ 10)", "  (let ((min (car numbers))\n         (max (car numbers)))\n    (map\
    \ (lambda (x) (* x (max - min))))\n  )\n)\n\n;; Given a list of numbers, return\
    \ the sum of the squares of those numbers\n;; >>> (sum_of_squares (list 1 2 3\
    \ 4 5))\n;; 25", "  (let* ([min (car numbers) max (cdr numbers)]\n         [scale\
    \ (max -min)])\n    (map (lambda (x) (* x scale)) (numbers))))\n\n;; Given a list\
    \ of numbers, return a list of the same length, where each element\n;; is the\
    \ product of the original elements and the given scale factor.\n;; >>> (scale_to_unit\
    \ (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 1.0 2.0 6.0 24.0 120.0)", "  (let* ([min\
    \ (car numbers) max (car numbers)])\n    (if (null? numbers)\n      (list 0.0)\n\
    \      (let* ([scale (max -min)])\n        (map (lambda (x) (/ x scale)) numbers))))\n\
    )\n\n;; Given a list of numbers, return a list of the same length, where each\
    \ element is the\n;; sum of the elements before it in the list.\n;; >>> (sum-before\
    \ (list 1 2 3 4 5))\n;; (list 1 2 3 4 5)", "  (let* ([min (car numbers) max (cdr\
    \ numbers)]\n         [scale (max -min)])\n    (map (lambda (x) (* x scale)) (list\
    \ min max))))\n\n;; Given a list of numbers, return the sum of the squares of\
    \ those numbers\n;; >>> (sum_of_squares (list 1.0 2.0 3.0 4.0 5.0))\n;; 25.0",
  "  (let* ([min (car numbers) max (car numbers)])\n    (if (eq? min max)\n      (list\
    \ 0.0)\n      (let* ([scale (max - min)])\n        (map (lambda (x) (/ x scale))\
    \ numbers))))\n)\n\n;; Given a list of numbers, return a list of the same length,\
    \ where each number is\n;; the product of the numbers in the original list.\n\
    ;; >>> (product_list (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 1.0 2.0 6.0 24.0 120.0)",
  "  (let* ([min (car numbers) max (cdr numbers)]\n         [scale (max -min)])\n\
    \    (map (lambda (x) (* x scale)) (list min max))))\n\n;; Given a list of numbers,\
    \ return a list of the same length, where each number\n;; is the product of the\
    \ numbers in the original list\n;; >>> (product_list (list 1.0 2.0 3.0 4.0 5.0))\n\
    ;; (list 1.0 2.0 6.0 24.0 120.0)", "  (let* ([min (car numbers) max (car numbers)])\n\
    \    (if (null? numbers)\n      (list 0.0)\n      (let* ([scale (max -min)])\n\
    \        (map (lambda (x) (/ x scale)) numbers))))\n)\n\n;; Given a list of numbers,\
    \ return a list of the same length, where each element is the\n;; product of the\
    \ elements before it in the list.\n;; >>> (product_list (list 1 2 3 4 5))\n;;\
    \ (list 1 2 6 24 120)", "  (let* ([min (car numbers) max (car numbers)])\n   \
    \ (if (eq? min max)\n      (list 0.0)\n      (let* ([scale (max - min)])\n   \
    \     (map (lambda (x) (/ x scale)) numbers))))\n)\n\n;; Given a list of numbers,\
    \ return a list of the same length, where each number is\n;; the product of the\
    \ numbers in the original list\n;; >>> (product_list (list 1 2 3 4 5))\n;; (list\
    \ 1 2 6 24 120)", "  (let ((min (car numbers))\n         (max (car numbers)))\n\
    \    (map (lambda (x) (* x (max - min))))\n  )\n)\n\n;; Given a list of numbers,\
    \ return a list of the same length, where each number is the\n;; sum of the numbers\
    \ in the original list.\n;; >>> (sum_list (list 1 2 3 4 5))\n;; (list 6 10 15\
    \ 20 25)", "  (let* ([min (car numbers) max (car numbers)])\n    (if (eq? min\
    \ max)\n      (list 0.0)\n      (let* ([factor (max - min)])\n        (map (lambda\
    \ (x) (/ x factor)) numbers))))\n\n;; Given a list of numbers, return a list of\
    \ the same length, where each number is\n;; the product of the numbers in the\
    \ original list.\n;; >>> (product_list (list 1 2 3 4 5))\n;; (list 1 2 6 24 120)",
  "  (let* ([min (car numbers) max (car numbers)])\n    (if (< min 0)\n      (let*\
    \ ([scale (abs (min (max (abs min) (abs max)))))\n        (let* ([scaled (map\
    \ (lambda (x) (* scale x)) numbers)])\n          (list (- min scaled) (max scaled))))\n\
    \      (list 0.0)))\n)\n\n;; Given a list of numbers, return a list of the same\
    \ length, where each element\n;; is the product of the element and the given number\n\
    ;; >>> (scale_by (list 1.0 2.0 3.0 4.0 5.0) 2.0)\n;; (list 2.0 4.0 6.0 8.0 10.0)",
  "  (let* ([min (car numbers) max (cdr numbers)]\n         [scale (max -min)])\n\
    \    (map (lambda (x) (* x scale)) (list min max))\n  )\n)\n\n;; Given a list\
    \ of numbers, return a list of the same length,\n;; where each number is the product\
    \ of the original number and the scale factor\n;; >>> (rescale_to_unit (list 1.0\
    \ 2.0 3.0 4.0 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)", "  (let ((min (car numbers))\n\
    \         (max (car numbers)))\n    (map (lambda (x) (* x (max - min))))\n  )\n\
    )\n\n;; Given a list of numbers, return a list of the same length, where each\
    \ number is\n;; divided by the sum of all the numbers in the list\n;; >>> (divide_by_sum\
    \ (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 0.2 0.4 0.6 0.8 1.0)", "  (let* ([min\
    \ (car numbers) max (cdr numbers)]\n         [scale (max -min)])\n    (map (lambda\
    \ (x) (* x scale)) (numbers))))\n\n;; Given a list of numbers, return the sum\
    \ of the squares of those numbers\n;; >>> (sum_of_squares (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; 25.0", "  (let* ([min (car numbers) max (cdr numbers)]\n         [scale\
    \ (max -min)])\n    (map (lambda (x) (* x scale)) (cons min (cdr numbers))))\n\
    )\n\n;; Given a list of numbers, return a list of the same length, where each\
    \ element is the\n;; sum of the elements before it in the list.\n;; >>> (sum_before\
    \ (list 1 2 3 4 5))\n;; (list 1 3 6 10)", "  (let* ([min (car numbers) max (cdr\
    \ numbers)]\n         [scale (max -min)])\n    (map (lambda (x) (* x scale)) (list\
    \ min max)))\n)\n\n;; Given a list of numbers, return a list of the same length,\n\
    ;; where each element is the product of the element and the given scale factor\n\
    ;; >>> (scale_to_unit (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 1.0 2.0 6.0 24.0 120.0)",
  "  (let* ([min (car numbers) max (cdr numbers)]\n         [scale (max -min)])\n\
    \    (map (lambda (x) (* x scale)) (list min max))))\n\n;; Given a list of numbers,\
    \ return a list of the same length,\n;; where each element is the product of the\
    \ previous element and the next element\n;; >>> (product_list (list 1.0 2.0 3.0\
    \ 4.0 5.0))\n;; (list 1.0 2.0 6.0 24.0 120.0)", "  (let ((min (car numbers))\n\
    \         (max (car numbers)))\n    (map (lambda (x) (cons (min (max (car x) (cdr\
    \ x)) (max (car x) (cdr x)))) (cdr x)))\n      (cdr numbers)))\n\n;; Given a list\
    \ of numbers, return the sum of the squares of the elements\n;; >>> (sum_of_squares\
    \ (list 1.0 2.0 3.0 4.0 5.0))\n;; 25.0", "  (let ((min (car numbers))\n      \
    \   (max (car numbers)))\n    (map (lambda (x) (if (< x min) (min x) (if (> x\
    \ max) (max x) (+ (* x (max x) (min x)))))\n           (cdr numbers)))\n    (car\
    \ numbers)))\n\n;; Given a list of numbers, return a list of the same length,\
    \ where each number is the\n;; product of the numbers in the original list.\n\
    ;; >>> (product_list (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 1.0 2.0 6.0 24.0 120.0)",
  "  (let* ([min (car numbers) max (cdr numbers)]\n         [scale (max -min)])\n\
    \    (map (lambda (x) (* x scale)) (numbers))))\n\n;; Given a list of numbers,\
    \ return a list of the same length,\n;; where each number is divided by the sum\
    \ of the numbers in the list\n;; >>> (divide_by_sum (list 1.0 2.0 3.0 4.0 5.0))\n\
    ;; (list 0.2 0.4 0.6 0.8 1.0)", "  (let* ([min (car numbers) max (cdr numbers)]\n\
    \         [scale (max -min)])\n    (map (lambda (x) (* x scale)) (list min max))))\n\
    \n;; Given a list of numbers, return a list of the same length, where each number\
    \ is\n;; divided by the sum of all numbers in the list\n;; >>> (divide_by_sum\
    \ (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 0.2 0.4 0.6 0.8 1.0)", "  (let* ([min\
    \ (car numbers) max (cdr numbers)]\n         [scale (max -min)])\n    (map (lambda\
    \ (x) (* x scale)) (numbers))))\n\n;; Given a list of numbers, return a list of\
    \ the same length, where each number\n;; is scaled by the given scale factor\n\
    ;; >>> (rescale (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)",
  "  (let* ([min (car numbers) max (cdr numbers)]\n         [scale (max -min)])\n\
    \    (map (lambda (x) (* x scale)) (numbers))))\n\n;; Given a list of numbers,\
    \ return the sum of those numbers\n;; >>> (sum (list 1 2 3 4 5))\n;; 15", "  (let*\
    \ ([min (car numbers) max (cdr numbers)]\n         [scale (max -min)])\n    (map\
    \ (lambda (x) (* x scale)) (list min max))))\n\n;; Given a list of numbers, return\
    \ the sum of those numbers\n;; >>> (sum (list 1 2 3 4 5))\n;; 15", "  (let ((min\
    \ (car numbers))\n         (max (car numbers)))\n    (if (null? numbers)\n   \
    \   (list 0.0)\n      (list (min (sub1 min) (sub1 max)) (max (sub1 min) (sub1\
    \ max))))))\n\n;; Given a list of numbers, return a list of the same length, where\
    \ each number is the\n;; difference between the original number and the number\
    \ in the previous position in the list\n;; >>> (diff_list (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)", "  (let* ([min (car numbers) max (cdr\
    \ numbers)]\n         [scale (max -min)])\n    (map (lambda (x) (* x scale)) (list\
    \ min max))\n  )\n)\n\n;; Given a list of numbers, return a list of the same length,\
    \ where each number is\n;; scaled to the range [0, 1]\n;; >>> (rescale (list 1.0\
    \ 2.0 3.0 4.0 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)", "  (let ((min (car numbers))\n\
    \         (max (car numbers)))\n    (map (lambda (x) (* x (max - min))))\n  )\n\
    )\n\n;; Given a list of numbers, return a list of the same length, where each\
    \ element is the\n;; difference between the element and the next element in the\
    \ list\n;; >>> (diff_list (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 1.0 2.0 3.0 4.0)",
  "  (let* ([min (car numbers) max (car numbers)])\n    (if (null? numbers)\n    \
    \  (list 0.0)\n      (let* ([scale (max -min)])\n        (map (lambda (x) (/ x\
    \ scale)) numbers))))\n)\n\n;; Given a list of numbers, return a list of the same\
    \ length, where each number is\n;; the product of the numbers in the original\
    \ list.\n;; >>> (product_list (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 1.0 2.0 6.0\
    \ 24.0 120.0)", "  (let* ([min (car numbers) max (car numbers)])\n    (if (null?\
    \ numbers)\n      (list 0.0)\n      (let* ([scale (max -min)])\n        (map (lambda\
    \ (x) (/ x scale)) numbers))))\n)\n\n;; Given a list of numbers, return a list\
    \ of the same length,\n;; where each number is the product of the original number\
    \ and the\n;; corresponding index in the list.\n;; >>> (product_list (list 1 2\
    \ 3 4 5))\n;; (list 1 2 6 24 120)", "  (let* ([min (car numbers) max (car numbers)])\n\
    \    (if (null? numbers)\n      (list 0.0)\n      (let* ([factor (max -min)])\n\
    \        (map (lambda (x) (/ x factor)) numbers))))\n)\n\n;; Given a list of numbers,\
    \ return the sum of the squares of those numbers\n;; >>> (sum_of_squares (list\
    \ 1 2 3 4 5))\n;; 25", "  (let* ([min (car numbers) max (cdr numbers)]\n     \
    \    [scale (max -min)])\n    (map (lambda (x) (* x scale)) (list min max))\n\
    \  )\n)\n\n;; Given a list of numbers, return a list of the same length,\n;; where\
    \ each element is the product of the original element and the given scale factor\n\
    ;; >>> (rescale (list 1.0 2.0 3.0 4.0 5.0) 2.0)\n;; (list 2.0 6.0 12.0 20.0 30.0)",
  "  (let* ([min (car numbers) max (car numbers)])\n    (if (null? numbers)\n    \
    \  (list 0.0)\n      (let* ([factor (max -min)])\n        (map (lambda (x) (/\
    \ x factor)) numbers))))\n)\n\n;; Given a list of numbers, return a list of the\
    \ same length, where each element is the\n;; sum of the elements before it in\
    \ the list.\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9))\n;; (list 1 2 3 4 5 6\
    \ 7 8 9)", "  (let* ([min (car numbers) max (cdr numbers)]\n         [scale (max\
    \ -min)])\n    (map (lambda (x) (* x scale)) (list min max))))\n\n;; Given a list\
    \ of numbers, return a list of the same length, where each element is the\n;;\
    \ difference between the element and the next element in the list.\n;; >>> (diff_list\
    \ (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 1.0 2.0 3.0 4.0)", "  (let* ([min (car\
    \ numbers) max (cdr numbers)]\n         [scale (max -min)])\n    (map (lambda\
    \ (x) (* x scale)) (list min max))\n  )\n)\n\n;; Given a list of numbers, return\
    \ a list of the same length, where each number has been\n;; multiplied by a constant\
    \ factor.\n;; >>> (scale_by_constant (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 1.0\
    \ 2.0 3.0 4.0 5.0)", "  (let ((min (car numbers))\n         (max (car numbers)))\n\
    \    (map (lambda (x) (* x (max - min))))\n  )\n)\n\n;; Given a list of numbers,\
    \ return a list of the same length, where each element\n;; is the product of the\
    \ elements before it\n;; >>> (product_list (list 1.0 2.0 3.0 4.0 5.0))\n;; (list\
    \ 1.0 2.0 6.0 24.0 120.0)", "  (let* ([min (car numbers) max (car numbers)])\n\
    \    (if (eq? min max)\n      (list 0.0)\n      (let* ([scale (abs (max - min))])\n\
    \        (map (lambda (x) (/ x scale)) numbers))))\n)\n\n;; Given a list of numbers,\
    \ return a list of the same length, where each element is the\n;; sum of the previous\
    \ and next elements in the list.\n;; >>> (sum_pair_list (list 1 2 3 4 5))\n;;\
    \ (list 1 2 3 4 5)", "  (let* ([min (car numbers) max (cdr numbers)]\n       \
    \  [scale (max -min)])\n    (map (lambda (x) (* x scale)) (list min max))\n  )\n\
    )\n\n;; Given a list of numbers, return a list of the same length,\n;; where each\
    \ element is the difference between the element and the next element\n;; >>> (diff_list\
    \ (list 1 2 3 4 5))\n;; (list 1 2 1 2 1)", "  (let* ([min (car numbers) max (cdr\
    \ numbers)]\n         [scale (max -min)])\n    (map (lambda (x) (* x scale)) (list\
    \ min max))))\n\n;; Given a list of numbers, return a list of the same length,\
    \ where each number is divided by the sum of all numbers\n;; >>> (divide_by_sum\
    \ (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 0.2 0.4 0.6 0.8 1.0)", "  (let* ([min\
    \ (car numbers) max (cdr numbers)]\n         [scale (max -min)])\n    (map (lambda\
    \ (x) (* x scale)) (list min max))))\n\n;; Given a list of numbers, return a list\
    \ of the same length,\n;; where each number is the difference between the original\
    \ number and the number to the left of it\n;; >>> (diff_list (list 1 2 3 4 5))\n\
    ;; (list 1 2 1 2 1)", "  (let* ([min (car numbers) max (cdr numbers)]\n      \
    \   [scale (max -min)])\n    (map (lambda (x) (* x scale)) (list min max))))\n\
    \n;; Given a list of numbers, return a list of the same length, where each element\
    \ is the\n;; difference between the element and the next element in the list.\n\
    ;; >>> (diff_list (list 1 2 3 4 5))\n;; (list 1 2 1 2 1)", "  (let ((min (car\
    \ numbers))\n         (max (car numbers)))\n    (map (lambda (x) (* x (max - min))))\n\
    \  )\n)\n\n;; Given a list of numbers, return a list of the same length, where\
    \ each number has been\n;; scaled so that the minimum value is 0 and the maximum\
    \ value is 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 0.0\
    \ 0.25 0.5 0.75 1.0)", "  (let* ([min (car numbers) max (cdr numbers)]\n     \
    \    [scale (max -min)])\n    (map (lambda (x) (* x scale)) (list min max)))\n\
    )\n\n;; Given a list of numbers, return a list of the same length, where each\
    \ number is divided by the sum of the numbers in the list\n;; >>> (divide_by_sum\
    \ (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 0.25 0.5 0.75 1.0)", "  (let* ([min (car\
    \ numbers) max (car numbers)])\n    (if (null? numbers)\n      (list 0.0)\n  \
    \    (let* ([scale (max -min)])\n        (map (lambda (x) (/ x scale)) numbers))))\n\
    )\n\n;; Given a list of numbers, return a list of the same length, where each\
    \ element is the\n;; sum of the previous two elements.\n;; >>> (sum_prev_two (list\
    \ 1 2 3 4 5))\n;; (list 2 6 10 14)", "  (let* ([min (car numbers) max (cdr numbers)]\n\
    \         [scale (max -min)])\n    (map (lambda (x) (* x scale)) (list min max))))\n\
    \n;; Given a list of numbers, return a list of the same length, where each element\n\
    ;; is the product of the previous and next elements in the list\n;; >>> (product_list\
    \ (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 1.0 2.0 6.0 24.0 120.0)", "  (let ((min\
    \ (car numbers))\n         (max (car numbers)))\n    (if (< min 0.0)\n      (let\
    \ ((factor (abs (min 1.0))))\n        (map (lambda (x) (* x factor)) numbers))\n\
    \    (if (> max 1.0)\n      (let ((factor (abs (max 1.0))))\n        (map (lambda\
    \ (x) (* x factor)) numbers))\n    (map (lambda (x) (* x (max (-1.0 (min x 1.0))\
    \ (min x 1.0))))\n      numbers))))\n\n;; Given a list of numbers, return the\
    \ sum of those numbers\n;; >>> (sum (list 1.0 2.0 3.0 4.0 5.0))\n;; 10.0", " \
    \ (let* ([min (car numbers) max (car numbers)])\n    (if (eq? min max)\n     \
    \ (list 0.0)\n      (let* ([scale (max - min)])\n        (map (lambda (x) (/ x\
    \ scale)) numbers))))\n)\n\n;; Given a list of numbers, return a list of the same\
    \ length, where each number is\n;; divided by the sum of all numbers in the list.\n\
    ;; >>> (divide_by_sum (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 0.2 0.4 0.6 0.8 1.0)",
  "  (let ((min (car numbers))\n         (max (car numbers)))\n    (if (< min 0)\n\
    \      (let ((factor (abs (min 1.0))))\n        (map (lambda (x) (* x factor))\
    \ numbers))\n      (let ((factor (abs (max 1.0))))\n        (map (lambda (x) (*\
    \ x factor)) numbers))\n      (car numbers)))))\n\n;; Given a list of numbers,\
    \ return the sum of those numbers\n;; >>> (sum (list 1 2 3 4 5))\n;; 10", "  (let*\
    \ ([min (car numbers) max (car numbers)])\n    (if (null? numbers)\n      (list\
    \ 0.0)\n      (let* ([factor (abs (max -min))])\n        (map (lambda (x) (/ x\
    \ factor)) numbers))))\n)\n\n;; Given a list of numbers, return a list of the\
    \ same length, where each number is the\n;; sum of the numbers in the original\
    \ list, starting with the first number.\n;; >>> (sum_list (list 1 2 3 4 5))\n\
    ;; (list 1 3 6 10 15)", "  (let* ([min (car numbers) max (cdr numbers)]\n    \
    \     [scale (max -min)])\n    (map (lambda (x) (* x scale)) (list min max)))\n\
    )\n\n;; Given a list of numbers, return a list of the same length, where each\
    \ number is\n;; the product of the original number and the given factor.\n;; >>>\
    \ (scale_by_factor (list 1.0 2.0 3.0 4.0 5.0) 2.0)\n;; (list 2.0 4.0 6.0 8.0 10.0)",
  "  (let* ([min (car numbers) max (car numbers)])\n    (if (null? numbers)\n    \
    \  (list 0.0)\n      (let* ([scale (max -min)])\n        (map (lambda (x) (* x\
    \ scale)) numbers))))\n)\n\n;; Given a list of numbers, return the sum of the\
    \ squares of those numbers\n;; >>> (sum_of_squares (list 1 2 3 4 5))\n;; 25",
  "  (let* ([min (car numbers) max (cdr numbers)]\n         [scale (max -min)])\n\
    \    (map (lambda (x) (* x scale)) (numbers))))\n\n;; Given a list of numbers,\
    \ return the sum of those numbers\n;; >>> (sum (list 1 2 3 4 5))\n;; 15", "  (let\
    \ ((min (car numbers))\n         (max (car numbers)))\n    (map (lambda (x) (*\
    \ x (max - min))))\n  )\n)\n\n;; Given a list of numbers, return a list of the\
    \ same length, where each element is the\n;; product of the elements before it\
    \ in the list.\n;; >>> (product_list (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 1.0\
    \ 2.0 6.0 24.0 120.0)", "  (let* ([min (car numbers) max (cdr numbers)]\n    \
    \     [scale (max -min)])\n    (map (lambda (x) (* x scale)) (numbers))))\n\n\
    ;; Given a list of numbers, return the sum of the squares of those numbers\n;;\
    \ >>> (sum_of_squares (list 1.0 2.0 3.0 4.0 5.0))\n;; 25.0", "  (let* ([min (car\
    \ numbers) max (cdr numbers)]\n         [scale (max -min)])\n    (map (lambda\
    \ (x) (* x scale)) (list min max))))\n\n;; Given a list of numbers, return a list\
    \ of the same length,\n;; where each number is divided by the sum of all numbers\
    \ in the list\n;; >>> (divide_by_sum (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 0.2\
    \ 0.4 0.6 0.8 1.0)", "  (let* ([min (car numbers) max (car numbers)])\n    (if\
    \ (null? numbers)\n      (list 0.0)\n      (let* ([factor (max -min)])\n     \
    \   (map (lambda (x) (/ x factor)) numbers))))\n)\n\n;; Given a list of numbers,\
    \ return the sum of the squares of those numbers\n;; >>> (sum_of_squares (list\
    \ 1 2 3 4 5))\n;; 25", "  (let* ([min (car numbers) max (car numbers)])\n    (if\
    \ (null? numbers)\n      (list 0.0)\n      (let* ([factor (max -min)])\n     \
    \   (map (lambda (x) (/ x factor)) numbers))))\n)\n\n;; Given a list of numbers,\
    \ return a list of the same length,\n;; where each number is the sum of the numbers\
    \ before it in the list\n;; >>> (sum_before (list 1.0 2.0 3.0 4.0 5.0))\n;; (list\
    \ 1.0 3.0 6.0 10.0)", "  (let* ([min (car numbers) max (car numbers)])\n    (if\
    \ (null? numbers)\n      (list 0.0)\n      (let* ([scale (max -min)])\n      \
    \  (map (lambda (x) (/ x scale)) numbers))))\n)\n\n;; Given a list of numbers,\
    \ return a list of the same length,\n;; where each number is the sum of the numbers\
    \ before it in the list\n;; >>> (sum_before (list 1 2 3 4 5))\n;; (list 1 3 6\
    \ 10 15)", "  (map (lambda (x) (/ x (max-float (min-float x numbers)))))\n  numbers)\n\
    \n;; Given a list of numbers, return a list of the same length, where each element\
    \ is the\n;; sum of the elements before it in the list.\n;; >>> (sum-list (list\
    \ 1 2 3 4 5))\n;; (list 1 2 3 4 5)", "  (let ((min (min numbers))\n         (max\
    \ (max numbers)))\n    (map (lambda (x) (* x (max - min))) numbers)))\n\n;; Given\
    \ a list of numbers, return a list of the same length, where each number\n;; is\
    \ the sum of the numbers before it in the list\n;; >>> (sum_before (list 1 2 3\
    \ 4 5))\n;; (list 1 3 6 10 15)", "  (let ((min (car numbers))\n         (max (car\
    \ numbers)))\n    (map (lambda (x) (* x (max - min))))\n  )\n)\n\n;; Given a list\
    \ of numbers, return the sum of the squares of those numbers\n;; >>> (sum_of_squares\
    \ (list 1 2 3 4 5 6))\n;; (list 1.0 2.0 9.0 16.0 25.0 36.0 49.0 64.0)", "  (let*\
    \ ([min (car numbers) max (cdr numbers)]\n         [scale (max -min)])\n    (map\
    \ (lambda (x) (* x scale)) (list min max))))\n\n;; Given a list of numbers, return\
    \ a list of the same length, where each number\n;; is scaled to the range [0,\
    \ 1]\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 0.0 0.25 0.5\
    \ 0.75 1.0)", "  (let* ([min (car numbers) max (car numbers)])\n    (if (null?\
    \ numbers)\n      (list 0.0)\n      (let* ([factor (max -min)])\n        (map\
    \ (lambda (x) (/ x factor)) numbers))))\n)\n\n;; Given a list of numbers, return\
    \ a list of the same length,\n;; where each element is the product of the previous\
    \ and next elements\n;; >>> (product_list (list 1 2 3 4 5))\n;; (list 1 2 6 24\
    \ 120)", "  (let* ([min (car numbers) max (cdr numbers)]\n         [scale (max\
    \ -min)])\n    (map (lambda (x) (* x scale)) (list min max))))\n\n;; Given a list\
    \ of numbers, return a list of the same length, where each number\n;; is multiplied\
    \ by a constant factor.\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0 5.0))\n\
    ;; (list 0.0 0.25 0.5 0.75 1.0)", "  (let* ([min (car numbers) max (cdr numbers)]\n\
    \         [scale (max -min)])\n    (map (lambda (x) (* x scale)) (list min max))))\n\
    \n;; Given a list of numbers, return a list of the same length, where each element\n\
    ;; is the product of the previous element and the next element in the list\n;;\
    \ >>> (product_list (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 1.0 2.0 6.0 24.0 120.0)",
  "  (let ((min (car numbers))\n         (max (car numbers)))\n    (map (lambda (x)\
    \ (* x (max - min))))\n  )\n)\n\n;; Given a list of numbers, return a list of\
    \ the same length, where each element\n;; is the product of the corresponding\
    \ element in the input list and a constant\n;; factor.\n;; >>> (rescale_factor\
    \ (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 1.0 2.0 6.0 12.0 20.0)", "  (let ((min\
    \ (car numbers))\n         (max (car numbers)))\n    (if (< min 0)\n      (list\
    \ (- min) (* (- min) (1.0 / (max - min))))\n    (else\n      (list 0.0))))\n\n\
    ;; Given a list of numbers, return a list of the same length, where each element\
    \ is the\n;; product of the elements in the original list\n;; >>> (product_list\
    \ (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 1.0 2.0 6.0 24.0 120.0)", "  (let ((min\
    \ (car numbers))\n         (max (car numbers)))\n    (if (eq? min max)\n     \
    \ (list min)\n      (let ((factor (abs (max - min))))\n        (map (lambda (x)\
    \ (/ x factor)) numbers))))\n)\n\n;; Given a list of numbers, return a list of\
    \ the same length, where each number\n;; is the product of the numbers in the\
    \ original list.\n;; >>> (product_list (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 1.0\
    \ 2.0 6.0 24.0 120.0)", "  (let* ([min (car numbers) max (cdr numbers)]\n    \
    \     [scale (max -min)])\n    (map (lambda (x) (* x scale)) (numbers))))\n\n\
    ;; Given a list of numbers, return a list of the same length,\n;; where each number\
    \ is the product of the original number and the scale factor\n;; >>> (rescale_to_unit\
    \ (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 1.0 2.0 6.0 24.0 120.0)", "  (let* ([min\
    \ (car numbers) max (car numbers)])\n    (if (< min 0)\n      (let* ([factor (abs\
    \ (min 1.0))])\n        (list (/ factor min) (/ factor max)))\n      (list 0.0\
    \ 1.0)))\n)\n\n;; Given a list of numbers, return a list of the same length, where\
    \ each number is the\n;; sum of the numbers in the original list.\n;; >>> (sum_list\
    \ (list 1 2 3 4 5))\n;; (list 6 9 12 15)", "  (let* ([min (car numbers) max (cdr\
    \ numbers)]\n         [scale (max -min)])\n    (map (lambda (x) (* x scale)) (cons\
    \ min (cdr numbers))))\n)\n\n;; Given a list of numbers, return the sum of the\
    \ squares of those numbers\n;; >>> (sum_of_squares (list 1.0 2.0 3.0 4.0 5.0))\n\
    ;; 25.0", "  (let* ([min (car numbers) max (cdr numbers)]\n         [scale (max\
    \ -min)])\n    (map (lambda (x) (* x scale)) (list min max))))\n\n;; Given a list\
    \ of numbers, return the sum of those numbers\n;; >>> (sum (list 1 2 3 4 5))\n\
    ;; 10", "  (let* ([min (car numbers) max (car numbers)])\n    (if (null? numbers)\n\
    \      (list 0.0)\n      (let* ([factor (max -min)])\n        (map (lambda (x)\
    \ (/ x factor)) numbers))))\n)\n\n;; Given a list of numbers, return a list of\
    \ the same length, where each number is the\n;; sum of the numbers in the original\
    \ list.\n;; >>> (sum_of_numbers (list 1 2 3 4 5))\n;; (list 6 10 15 20 25)", " \
    \ (let* ([min (car numbers) max (cdr numbers)]\n         [scale (max -min)])\n\
    \    (map (lambda (x) (* x scale)) (list min max))))\n\n;; Given a list of numbers,\
    \ return the sum of the squares of those numbers\n;; >>> (sum_of_squares (list\
    \ 1 2 3 4 5))\n;; 25", "  (let* ([min (car numbers) max (cdr numbers)]\n     \
    \    [scale (max -min)])\n    (map (lambda (x) (* x scale)) (numbers))))\n\n;;\
    \ Given a list of numbers, return a list of the same length,\n;; where each element\
    \ is the difference between the element and the next element\n;; >>> (diff_list\
    \ (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 0.0 1.0 2.0 3.0 4.0)", "  (let* ([min\
    \ (car numbers) max (car numbers)])\n    (if (null? numbers)\n      (list 0.0)\n\
    \      (let* ([scale (max -min)])\n        (map (lambda (x) (/ x scale)) numbers))))\n\
    )\n\n;; Given a list of numbers, return a list of the same length, where each\
    \ element is the\n;; sum of the elements before it in the list.\n;; >>> (sum-list\
    \ (list 1 2 3 4 5))\n;; (list 1 3 6 10 15)", "  (let* ([min (car numbers) max\
    \ (cdr numbers)]\n         [scale (max -min)])\n    (map (lambda (x) (* x scale))\
    \ (list min max))))\n\n;; Given a list of numbers, return a list of the same length,\
    \ where each element\n;; is the product of the previous element and the next element\
    \ in the list.\n;; >>> (product_list (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 1.0\
    \ 2.0 6.0 24.0 120.0)", "  (let* ([min (car numbers) max (cdr numbers)]\n    \
    \     [scale (max -min)])\n    (map (lambda (x) (* x scale)) (numbers))))\n\n\
    ;; Given a list of numbers, return a list of the same length, where each element\
    \ is the\n;; difference between the element and the next element in the list.\n\
    ;; >>> (diff_list (list 1 2 3 4 5))\n;; (list 1 2 1 2 1)", "  (let* ([min (car\
    \ numbers) max (cdr numbers)]\n         [scale (max -min)])\n    (map (lambda\
    \ (x) (* x scale)) (list min max)))\n)\n\n;; Given a list of numbers, return a\
    \ list of the same length,\n;; where each element is the product of the previous\
    \ element and the next element\n;; >>> (product_list (list 1.0 2.0 3.0 4.0 5.0))\n\
    ;; (list 1.0 2.0 6.0 24.0 120.0)", "  (let* ([min (car numbers) max (car numbers)])\n\
    \    (if (eq? min max)\n      (list 0.0)\n      (let* ([scale (max - min)])\n\
    \        (map (lambda (x) (/ x scale)) numbers))))\n\n;; Given a list of numbers,\
    \ return the sum of those numbers\n;; >>> (sum (list 1 2 3 4 5))\n;; 10", "  (let\
    \ ((min (car numbers))\n         (max (car numbers)))\n    (map (lambda (x) (*\
    \ x (max - min))))\n  )\n)\n\n;; Given a list of numbers, return a list of the\
    \ same length,\n;; where each element is the sum of the elements before it\n;;\
    \ >>> (sum_before (list 1 2 3 4 5))\n;; (list 6 9 12 15)", "  (let ((min (car\
    \ numbers))\n         (max (car numbers)))\n    (map (lambda (x) (if (< x min)\
    \ (min x) (if (> x max) (max x) (+ (x - min) (max - min)))))\n         (cdr numbers))))\n\
    \n;; Given a list of numbers, return the sum of the squares of the elements\n\
    ;; >>> (sum_of_squares (list 1.0 2.0 3.0 4.0 5.0))\n;; 25.0", "  (let* ([min (car\
    \ numbers) max (cdr numbers)]\n         [scale (max -min)])\n    (map (lambda\
    \ (x) (* x scale)) (list min max))))\n\n;; Given a list of numbers, return a list\
    \ of the same length,\n;; containing the same numbers, but with the first element\
    \ set to 0\n;; and the last element set to 1\n;; >>> (rescale_to_unit (list 1.0\
    \ 2.0 3.0 4.0 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)", "  (let* ([min (car numbers)\
    \ max (car numbers)])\n    (if (eq? min max)\n      (list 0.0)\n      (let* ([scale\
    \ (max - min)])\n        (map (lambda (x) (* x scale)) numbers))))\n)\n\n;; Given\
    \ a list of numbers, return a list of the same length, where each number is\n\
    ;; the product of the corresponding numbers in the original list.\n;; >>> (product_list\
    \ (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 1.0 2.0 6.0 24.0 120.0)", "  (let* ([min\
    \ (car numbers) max (cdr numbers)]\n         [scale (max -min)])\n    (map (lambda\
    \ (x) (* x scale)) (list min max))))\n\n;; Given a list of numbers, return a list\
    \ of the same length,\n;; where each number is the product of the original number\
    \ and the index\n;; in the list.\n;; >>> (product_list (list 1.0 2.0 3.0 4.0 5.0))\n\
    ;; (list 1.0 2.0 6.0 24.0 120.0)", "  (let ((min (car numbers))\n         (max\
    \ (car numbers)))\n    (if (null? numbers)\n      (list 0.0)\n      (let ((factor\
    \ (abs (max -min))))\n        (map (lambda (x) (/ x factor)) numbers))))\n)\n\n\
    ;; Given a list of numbers, return a list of the same length,\n;; where each number\
    \ is the product of the original number and the\n;; corresponding index in the\
    \ list.\n;; >>> (product_list (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 1.0 2.0 6.0\
    \ 24.0 120.0)", "  (let* ([min (car numbers) max (cdr numbers)]\n         [scale\
    \ (max -min)])\n    (map (lambda (x) (* x scale)) (list min max))))\n\n;; Given\
    \ a list of numbers, return a list of the same length, where each number is\n\
    ;; divided by the sum of all numbers in the list.\n;; >>> (normalize (list 1.0\
    \ 2.0 3.0 4.0 5.0))\n;; (list 0.2 0.4 0.6 0.8 1.0)", "  (let* ([min (car numbers)\
    \ max (cdr numbers)]\n         [scale (max -min)])\n    (map (lambda (x) (* x\
    \ scale)) (list min max))))\n\n;; Given a list of numbers, return a list of the\
    \ same length, where each element is the\n;; difference between the element and\
    \ the next element in the list.\n;; >>> (diff_list (list 1 2 3 4 5))\n;; (list\
    \ 1 2 1 2 1)", "  (let* ([min (car numbers) max (car numbers)])\n    (if (eq?\
    \ min max)\n      (list 0.0)\n      (let* ([scale (max - min)])\n        (map\
    \ (lambda (x) (/ x scale)) numbers))))\n\n;; Given a list of numbers, return a\
    \ list of the same length, where each number is\n;; multiplied by the given factor.\n\
    ;; >>> (scale_list 2.0 (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 2.0 4.0 6.0 8.0 10.0)",
  "  (let* ([min (car numbers) max (car numbers)])\n    (if (< min 0.0)\n      (let*\
    \ ([factor (1.0 / (- min 0.0))])\n        (map (lambda (x) (* factor x)) numbers))\n\
    \      (let* ([factor (1.0 / (max 0.0))])\n        (map (lambda (x) (* factor\
    \ x)) numbers)))))\n\n;; Given a list of numbers, return a list of the same length,\
    \ where each number is the\n;; difference between the original number and the\
    \ number to the left of it in the list.\n;; >>> (diff_list (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list -1.0 -1.0 -1.0 -1.0 -1.0)", "  (let* ([min (car numbers) max\
    \ (car numbers)])\n    (if (eq? min max)\n      (list 0.0)\n      (let* ([scale\
    \ (max - min)])\n        (map (lambda (x) (/ x scale)) numbers))))\n\n;; Given\
    \ a list of numbers, return a list of the same length, where each number is\n\
    ;; the product of the corresponding numbers in the original list\n;; >>> (product_list\
    \ (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 1.0 2.0 6.0 24.0 120.0)", "  (let* ([min\
    \ (car numbers) max (car numbers)])\n    (if (null? numbers)\n      (list 0.0)\n\
    \      (let* ([factor (abs (max -min))])\n        (map (lambda (x) (/ x factor))\
    \ numbers))))\n)\n\n;; Given a list of numbers, return a list of the same length,\
    \ where each number is the\n;; sum of the numbers in the original list that are\
    \ less than it.\n;; >>> (sum_less (list 1 2 3 4 5))\n;; (list 0 1 2 3 4 5)", " \
    \ (let ((min (min numbers))\n         (max (max numbers)))\n    (if (< min 0.0)\n\
    \      (let ((scale (1.0 / (min - max))))\n        (map (lambda (x) (* scale x))\
    \ numbers))\n      (map (lambda (x) (* x scale)) numbers)))))\n\n;; Given a list\
    \ of numbers, return a list of the same length, where each element is the\n;;\
    \ sum of the elements before it in the list.\n;; >>> (sum_before (list 1.0 2.0\
    \ 3.0 4.0 5.0))\n;; (list 0.0 2.0 6.0 12.0 20.0)", "  (let* ([min (car numbers)\
    \ max (car numbers)])\n    (if (null? numbers)\n      (list 0.0)\n      (let*\
    \ ([scale (max -min)])\n        (map (lambda (x) (/ x scale)) numbers))))\n)\n\
    \n;; Given a list of numbers, return the sum of the squares of those numbers\n\
    ;; >>> (sum_of_squares (list 1 2 3 4 5))\n;; 25", "  (let* ([min (car numbers)\
    \ max (car numbers)])\n    (if (null? numbers)\n      (list 0.0)\n      (let*\
    \ ([factor (max -min)])\n        (map (lambda (x) (/ x factor)) numbers))))\n\
    )\n\n;; Given a list of numbers, return a list of the same length, where each\
    \ number\n;; is the sum of the numbers before it in the list\n;; >>> (sum_before\
    \ (list 1 2 3 4 5))\n;; (list 1 3 6 10 15)", "  (let* ([min (car numbers) max\
    \ (cdr numbers)]\n         [scale (max -min)])\n    (map (lambda (x) (* x scale))\
    \ (list min max))))\n\n;; Given a list of numbers, return a list of the same length,\
    \ where each number has been\n;; multiplied by a constant factor.\n;; >>> (scale_list\
    \ (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 1.0 2.0 6.0 12.0 20.0)", "  (let ((min\
    \ (car numbers))\n         (max (car numbers)))\n    (map (lambda (x) (* x (max\
    \ - min))))\n  )\n)\n\n;; Given a list of numbers, return a list of the same length,\
    \ where each element is the\n;; sum of the preceding two elements.\n;; >>> (sum-of-two-preceding\
    \ (list 1 2 3 4 5))\n;; (list 2 6 10 14)", "  (let ((min (car numbers))\n    \
    \     (max (car numbers)))\n    (map (lambda (x) (if (< x min) (set! min x) (if\
    \ (> x max) (set! max x) (+ (x - min) (max - min)))))\n         (cdr numbers)))\n\
    )\n\n;; Given a list of numbers, return a list of the same length,\n;; where each\
    \ element is the difference between the element and the next element.\n;; >>>\
    \ (diff_list (list 1 2 3 4 5))\n;; (list 1 2 1 2 1)", "  (let ((min (car numbers))\n\
    \         (max (car numbers)))\n    (if (< min 0.0)\n      (list (- min) (* (-\
    \ min) (1.0 / (max - min))))\n    (else\n      (list 0.0)\n    )\n  )\n)\n\n;;\
    \ Given a list of numbers, return a list of the same length, where each element\
    \ is the\n;; difference between the element and the next element in the list.\n\
    ;; >>> (diff_list (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 1.0 2.0 3.0 4.0 5.0)",
  "  (let* ([min (car numbers) max (cdr numbers)]\n         [scale (max -min)])\n\
    \    (map (lambda (x) (* x scale)) (list min max))))\n\n;; Given a list of numbers,\
    \ return a list of the same length, where each element\n;; is the product of the\
    \ original element and the given scale factor\n;; >>> (scale_to_unit (list 1.0\
    \ 2.0 3.0 4.0 5.0))\n;; (list 1.0 2.0 6.0 24.0 120.0)", "  (let ((min (car numbers))\n\
    \         (max (car numbers)))\n    (if (eq? min max)\n      (list min)\n    \
    \  (list (min min) (max max) (+ (min max) (abs (- min max)))))))\n\n;; Given a\
    \ list of numbers, return a list of the same length, where each element is the\n\
    ;; product of the elements before it in the list.\n;; >>> (product-list (list\
    \ 1 2 3 4 5))\n;; (list 1 2 6 24 120)", "  (let ((min (car numbers))\n       \
    \  (max (car numbers)))\n    (map (lambda (x) (+ (car x) (* (cdr x) (max (- (car\
    \ x) min))))))\n    (cdr numbers)))\n\n;; Given a list of numbers, return the\
    \ sum of the squares of the elements\n;; >>> (sum_of_squares (list 1 2 3 4 5))\n\
    ;; 25", "  (let ((min (car numbers))\n         (max (car numbers)))\n    (map\
    \ (lambda (x) (* x (max - min))))\n  )\n)\n\n;; Given a list of numbers, return\
    \ a list of the same length, where each number\n;; is multiplied by a constant.\n\
    ;; >>> (rescale (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 1.0 2.0 3.0 4.0 5.0)", " \
    \ (let* ([min (car numbers) max (car numbers)])\n    (if (null? numbers)\n   \
    \   (list 0.0)\n      (let* ([scale (max -min)])\n        (map (lambda (x) (/\
    \ x scale)) numbers))))\n)\n\n;; Given a list of numbers, return a list of the\
    \ same length, where each number has been\n;; scaled to the range [0, 1]\n;; >>>\
    \ (rescale_to_unit (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)",
  "  (let* ([min (car numbers) max (cdr numbers)]\n         [scale (max -min)])\n\
    \    (map (lambda (x) (* x scale)) (list min max)))\n)\n\n;; Given a list of numbers,\
    \ return a list of the same length, where each element is the\n;; difference between\
    \ the element and the next element in the list.\n;; >>> (diff_list (list 1 2 3\
    \ 4 5))\n;; (list 1 2 1 2 1)", "  (let ((min (car numbers))\n         (max (car\
    \ numbers)))\n    (if (eq? min max)\n      (list 0.0)\n      (let ((factor (abs\
    \ (max - min))))\n        (map (lambda (x) (/ x factor)) numbers))))\n)\n\n;;\
    \ Given a list of numbers, return the sum of those numbers\n;; >>> (sum (list\
    \ 1 2 3 4 5))\n;; 10", "  (let* ([min (car numbers) max (cdr numbers)]\n     \
    \    [scale (max -min)]))\n  (map (lambda (x) (* x scale)) numbers))\n\n;; Given\
    \ a list of numbers, return a list of the same length, where each element is the\n\
    ;; sum of the previous and next elements in the list\n;; >>> (sum_list (list 1.0\
    \ 2.0 3.0 4.0 5.0))\n;; (list 1.0 3.0 6.0 10.0 15.0)", "  (let* ([min (car numbers)\
    \ max (cdr numbers)]\n         [scale (max -min)])\n    (map (lambda (x) (* x\
    \ scale)) (list min max))))\n\n;; Given a list of numbers, return a list of the\
    \ same length, where each number\n;; is scaled to the range [0, 1]\n;; >>> (rescale\
    \ (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)", "  (let ((min\
    \ (car numbers))\n         (max (car numbers)))\n    (map (lambda (x) (cons (sub1\
    \ x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x)\
    \ (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons\
    \ (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1\
    \ x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x)\
    \ (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons\
    \ (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1\
    \ x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x)\
    \ (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons\
    \ (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1\
    \ x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x)\
    \ (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons\
    \ (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1\
    \ x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (", " \
    \ (let* ([min (car numbers) max (car numbers)])\n    (if (null? numbers)\n   \
    \   (list 0.0)\n      (let* ([factor (max -min)])\n        (map (lambda (x) (/\
    \ x factor)) numbers))))\n)\n\n;; Given a list of numbers, return a list of the\
    \ same length, where each element is the\n;; sum of the previous and next elements\
    \ in the list.\n;; >>> (sum_list (list 1 2 3 4 5))\n;; (list 1 3 6 10 15)", " \
    \ (let* ([min (car numbers) max (cdr numbers)]\n         [scale (max -min)])\n\
    \    (map (lambda (x) (* x scale)) (list min max))))\n\n;; Given a list of numbers,\
    \ return a list of the same length, where each number is the\n;; difference between\
    \ the original number and the number in the same position in the\n;; original\
    \ list.\n;; >>> (diff_list (list 1 2 3 4 5))\n;; (list 1 2 1 2 1)", "  (let* ([min\
    \ (car numbers) max (car numbers)])\n    (if (null? numbers)\n      (list 0.0)\n\
    \      (let* ([scale (max -min)])\n        (map (lambda (x) (/ x scale)) numbers))))\n\
    )\n\n;; Given a list of numbers, return a list of the same length, where each\
    \ number is the\n;; product of the numbers in the original list.\n;; >>> (product_list\
    \ (list 1 2 3 4 5))\n;; (list 1 2 6 24 120)", "  (let* ([min (car numbers) max\
    \ (cdr numbers)]\n         [scale (max -min)])\n    (map (lambda (x) (* x scale))\
    \ numbers)))\n\n;; Given a list of numbers, return a list of the same length,\
    \ where each number is\n;; scaled by the given scale factor.\n;; >>> (rescale\
    \ (list 1.0 2.0 3.0 4.0 5.0) 2.0)\n;; (list 0.0 2.0 6.0 12.0 20.0)", "  (let*\
    \ ([min (car numbers) max (cdr numbers)]\n         [scale (max -min)])\n    (map\
    \ (lambda (x) (* x scale)) (cons min (cdr numbers))))\n)\n\n;; Given a list of\
    \ numbers, return a list of the same length,\n;; where each number has been scaled\
    \ so that the minimum value is 0 and the maximum is 1\n;; >>> (rescale_to_unit\
    \ (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)", "  (let* ([min\
    \ (car numbers) max (cdr numbers)]\n         [scale (max -min)])\n    (map (lambda\
    \ (x) (* x scale)) (list min max))))\n\n;; Given a list of numbers, return a list\
    \ of the same length, where each number is\n;; multiplied by the given factor\n\
    ;; >>> (rescale numbers 2.0)\n;; (list 2.0 4.0 6.0 8.0 10.0)", "  (let* ([min\
    \ (car numbers) max (car numbers)])\n    (if (null? numbers)\n      (list 0.0)\n\
    \      (let* ([scale (max -min)])\n        (map (lambda (x) (/ x scale)) numbers))))\n\
    )\n\n;; Given a list of numbers, return a list of the same length,\n;; where each\
    \ element is the product of the original elements\n;; >>> (product_list (list\
    \ 1 2 3 4 5))\n;; (list 1 2 6 24 120)", "  (let* ([min (car numbers) max (cdr\
    \ numbers)]\n         [scale (max -min)])\n    (map (lambda (x) (* x scale)) (list\
    \ min max))))\n\n;; Given a list of numbers, return a list of the same length,\
    \ where each number\n;; is multiplied by a constant factor.\n;; >>> (scale_list\
    \ (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 1.0 2.0 3.0 4.0 5.0)", "  (let* ([min\
    \ (car numbers) max (cdr numbers)]\n         [scale (max -min)])\n    (map (lambda\
    \ (x) (* x scale)) (list min max))))\n\n;; Given a list of numbers, return a list\
    \ of the same length,\n;; where each element is the product of the original element\
    \ and the given scale factor\n;; >>> (scale_to_unit (list 1.0 2.0 3.0 4.0 5.0))\n\
    ;; (list 1.0 2.0 6.0 24.0 120.0)", "  (let* ([min (car numbers) max (car numbers)])\n\
    \    (if (null? numbers)\n      (list 0.0)\n      (let* ([scale (max -min)])\n\
    \        (map (lambda (x) (/ x scale)) numbers))))\n)\n\n;; Given a list of numbers,\
    \ return the sum of those numbers\n;; >>> (sum (list 1 2 3 4 5))\n;; 10", "  (let*\
    \ ([min (car numbers) max (cdr numbers)]\n         [scale (max -min)])\n    (map\
    \ (lambda (x) (* x scale)) (cons min (cdr numbers))))\n)\n\n;; Given a list of\
    \ numbers, return a list of the same length, where each number is\n;; divided\
    \ by the number in the first position of the list\n;; >>> (divide_by_first (list\
    \ 1.0 2.0 3.0 4.0 5.0))\n;; (list 0.5 1.0 1.5 2.0 2.5 3.0)", "  (let* ([min (car\
    \ numbers) max (cdr numbers)]\n         [scale (max -min)])\n    (map (lambda\
    \ (x) (* x scale)) (numbers))))\n\n;; Given a list of numbers, return a list of\
    \ the same length, where each number is\n;; scaled to the range [0, 1]\n;; >>>\
    \ (rescale (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 0.25 0.5 0.75 1.0)", "  (let*\
    \ ([min (car numbers) max (car numbers)])\n    (if (null? numbers)\n      (list\
    \ 0.0)\n      (let* ([scale (max -min)])\n        (map (lambda (x) (/ x scale))\
    \ numbers))))\n)\n\n;; Given a list of numbers, return a list of the same length,\
    \ containing the same numbers\n;; but rescaled to the unit interval, such that\
    \ the smallest number will become 0 and the\n;; largest will become 1\n;; >>>\
    \ (rescale_to_unit (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)",
  "  (let ((min (car numbers))\n         (max (car numbers)))\n    (map (lambda (x)\
    \ (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons\
    \ (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1\
    \ x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x)\
    \ (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons\
    \ (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1\
    \ x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x)\
    \ (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons\
    \ (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1\
    \ x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x)\
    \ (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons\
    \ (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1\
    \ x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x)\
    \ (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons\
    \ (", "  (let ((min (car numbers))\n         (max (car numbers)))\n    (if (null?\
    \ numbers)\n      (list 0.0)\n      (let ((factor (abs (max -min))))\n       \
    \ (map (lambda (x) (/ x factor)) numbers))))\n)\n\n;; Given a list of numbers,\
    \ return the sum of those numbers\n;; >>> (sum (list 1 2 3 4 5))\n;; 10", "  (let*\
    \ ([min (car numbers) max (cdr numbers)]\n         [scale (max -min)])\n    (map\
    \ (lambda (x) (* x scale)) (list min max))))\n\n;; Given a list of numbers, return\
    \ a list of the same length, where each element is the\n;; sum of the previous\
    \ and next elements in the list.\n;; >>> (sum_list (list 1 2 3 4 5))\n;; (list\
    \ 1 3 6 10 15)", "  (let* ([min (car numbers) max (cdr numbers)]\n         [scale\
    \ (max -min)])\n    (map (lambda (x) (* x scale)) (numbers))))\n\n;; Given a list\
    \ of numbers, return the sum of those numbers\n;; >>> (sum (list 1 2 3 4 5))\n\
    ;; 15", "  (let* ([min (car numbers) max (cdr numbers)]\n         [scale (max\
    \ -min)])\n    (map (lambda (x) (* x scale)) (list min max))))\n\n;; Given a list\
    \ of numbers, return a list of the same length, where each number\n;; is the product\
    \ of the original number and the given scale factor\n;; >>> (rescale_to_unit (list\
    \ 1.0 2.0 3.0 4.0 5.0) 2.0)\n;; (list 0.0 2.0 0.0 8.0 0.0)", "  (let* ([min (car\
    \ numbers) max (cdr numbers)]\n         [scale (max -min)])\n    (map (lambda\
    \ (x) (* x scale)) (list min max))))\n\n;; Given a list of numbers, return a list\
    \ of the same length, where each number has been\n;; multiplied by a constant\
    \ factor.\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 1.0 2.0\
    \ 3.0 4.0 5.0)", "  (let ((min (car numbers))\n         (max (car numbers)))\n\
    \    (map (lambda (x) (apply (lambda (a b) (+ a (- b x)) min max)) (cdr numbers)))))\n\
    \n;; Given a list of numbers, return the sum of the squares of those numbers\n\
    ;; >>> (sum_of_squares (list 1.0 2.0 3.0 4.0 5.0))\n;; 25.0", "  (let* ([min (car\
    \ numbers) max (cdr numbers)]\n         [scale (max -min)])\n    (map (lambda\
    \ (x) (* x scale)) (numbers))))\n\n;; Given a list of numbers, return a list of\
    \ the same length, where each element is the\n;; sum of the elements before it\
    \ in the list.\n;; >>> (sum_before (list 1 2 3 4 5))\n;; (list 1 3 6 10 15)",
  "  (let* ([min (car numbers) max (cdr numbers)]\n         [scale (max -min)])\n\
    \    (map (lambda (x) (* x scale)) (list min max))))\n\n;; Given a list of numbers,\
    \ return a list of the same length, where each number is\n;; scaled to the range\
    \ [0, 1]\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 0.0 0.25\
    \ 0.5 0.75 1.0)", "  (let* ([min (car numbers) max (cdr numbers)]\n         [scale\
    \ (max -min)])\n    (map (lambda (x) (* x scale)) (list min max))))\n\n;; Given\
    \ a list of numbers, return the sum of the squares of those numbers\n;; >>> (sum_of_squares\
    \ (list 1 2 3 4 5 6))\n;; 25", "  (let* ([min (car numbers) max (cdr numbers)]\n\
    \         [scale (max -min)])\n    (map (lambda (x) (* x scale)) (list min max))))\n\
    \n;; Given a list of numbers, return a list of the same length, where each number\
    \ is\n;; scaled to the range [0, 1]\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0\
    \ 4.0 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)", "  (let* ([min (car numbers) max\
    \ (cdr numbers)]\n         [scale (max -min)])\n    (map (lambda (x) (* x scale))\
    \ (list min max))))\n\n;; Given a list of numbers, return a list of the same length,\
    \ where each number\n;; is the product of the numbers in the original list.\n\
    ;; >>> (product_list (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 1.0 2.0 6.0 24.0 120.0)",
  "  (let* ([min (car numbers) max (cdr numbers)]\n         [scale (max -min)])\n\
    \    (map (lambda (x) (* x scale)) (list min max))))\n\n;; Given a list of numbers,\
    \ return a list of the same length, where each element is the\n;; product of the\
    \ elements in the original list.\n;; >>> (product_list (list 1.0 2.0 3.0 4.0 5.0))\n\
    ;; (list 1.0 2.0 6.0 24.0 120.0)", "  (let* ([min (car numbers) max (cdr numbers)]\n\
    \         [scale (max -min)])\n    (map (lambda (x) (* x scale)) (numbers))))\n\
    \n;; Given a list of numbers, return a list of the same length, where each number\n\
    ;; is the product of the original number and the given scale factor.\n;; >>> (scale_to_unit\
    \ (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 1.0 2.0 6.0 24.0 120.0)", "  (let ((min\
    \ (min numbers))\n         (max (max numbers)))\n    (map (lambda (x) (* x (max\
    \ - min))) numbers)))\n\n;; Given a list of numbers, return a list of the same\
    \ length, where each number\n;; is the sum of the numbers in the list before it.\n\
    ;; >>> (sum_before (list 1 2 3 4 5))\n;; (list 1 2 3 4 5)", "  (let* ([min (car\
    \ numbers) max (cdr numbers)]\n         [scale (max -min)])\n    (map (lambda\
    \ (x) (* x scale)) (list min max))))\n\n;; Given a list of numbers, return a list\
    \ of the same length, where each element is the\n;; difference between the element\
    \ and the next element in the list.\n;; >>> (diff_list (list 1 2 3 4 5))\n;; (list\
    \ 1 2 1 2 1)", "  (let ((min (car numbers))\n         (max (car numbers)))\n \
    \   (map (lambda (x) (* x (max - min))))\n  )\n)\n\n;; Given a list of numbers,\
    \ return a list of the same length, where each number is\n;; divided by the number\
    \ of elements in the list.\n;; >>> (divide_by_length (list 1 2 3 4 5))\n;; (list\
    \ 0.2 0.4 0.6 0.8 1.0)", "  (let ((min (car numbers))\n         (max (car numbers)))\n\
    \    (map (lambda (x) (if (< x min) (min x) (if (> x max) (max x) x))\n      \
    \    (cdr numbers)))))\n\n;; Given a list of numbers, return a list of the same\
    \ length, where each number is\n;; the product of the original numbers.\n;; >>>\
    \ (product_list (list 1 2 3 4 5))\n;; (list 1 2 6 24 120)", "  (let* ([min (car\
    \ numbers) max (cdr numbers)]\n         [scale (max -min)])\n    (map (lambda\
    \ (x) (* x scale)) (list min max))))\n\n;; Given a list of numbers, return the\
    \ sum of the squares of the elements\n;; >>> (sum_of_squares (list 1.0 2.0 3.0\
    \ 4.0 5.0))\n;; 25.0", "  (let ((min (car numbers))\n         (max (car numbers)))\n\
    \    (if (< min 0.0)\n      (let ((factor (1.0 / (abs min))))\n        (map (lambda\
    \ (x) (* x factor)) numbers))\n      (map (lambda (x) (* x (1.0 / (abs max))))\
    \ numbers))\n    numbers))\n\n;; Given a list of numbers, return a list of the\
    \ same length, where each element\n;; is the product of the previous and next\
    \ element in the list\n;; >>> (product_list (list 1.0 2.0 3.0 4.0 5.0))\n;; (list\
    \ 1.0 2.0 6.0 24.0 120.0)", "  (let* ([min (car numbers) max (cdr numbers)]\n\
    \         [scale (max -min)])\n    (map (lambda (x) (* x scale)) (list min max))\n\
    \  )\n)\n\n;; Given a list of numbers, return a list of the same length, where\
    \ each number is\n;; scaled by a factor of 2.\n;; >>> (rescale_to_unit (list 1.0\
    \ 2.0 3.0 4.0 5.0))\n;; (list 2.0 4.0 6.0 8.0 10.0)", "  (let* ([min (car numbers)\
    \ max (cdr numbers)]\n         [scale (max -min)])\n    (map (lambda (x) (* x\
    \ scale)) (list min max))))\n\n;; Given a list of numbers, return the sum of those\
    \ numbers\n;; >>> (sum (list 1 2 3 4 5))\n;; 10", "  (let ((min (car numbers))\n\
    \         (max (car numbers)))\n    (if (null? numbers)\n      (list 0.0)\n  \
    \    (let ((factor (abs (max -min))))\n        (map (lambda (x) (/ x factor))\
    \ numbers))))\n)\n\n;; Given a list of numbers, return a list of the same length,\
    \ where each number is the\n;; sum of the numbers in the original list.\n;; >>>\
    \ (sum_list (list 1 2 3 4 5))\n;; (list 6 10 15 20 25)", "  (let* ([min (car numbers)\
    \ max (cdr numbers)]\n         [scale (max -min)])\n    (map (lambda (x) (* x\
    \ scale)) (numbers))))\n\n;; Given a list of numbers, return the sum of the squares\
    \ of those numbers\n;; >>> (sum-of-squares (list 1.0 2.0 3.0 4.0 5.0))\n;; 25.0",
  "  (let* ([min (car numbers) max (car numbers)])\n    (if (eq? min max)\n      (list\
    \ 0.0)\n      (let* ([scale (max - min)])\n        (map (lambda (x) (/ x scale))\
    \ numbers))))\n)\n\n;; Given a list of numbers, return the sum of the squares\
    \ of those numbers\n;; >>> (sum_of_squares (list 1 2 3 4 5))\n;; 25", "  (let*\
    \ ([min (car numbers) max (car numbers)])\n    (if (null? numbers)\n      (list\
    \ 0.0)\n      (let* ([scale (max -min)])\n        (map (lambda (x) (/ x scale))\
    \ numbers))))\n)\n\n;; Given a list of numbers, return a list of the same length,\
    \ where each number is\n;; scaled to the range [0, 1]\n;; >>> (rescale (list 1.0\
    \ 2.0 3.0 4.0 5.0))\n;; (list 0.25 0.5 0.75 1.0)", "  (let* ([min (car numbers)\
    \ max (cdr numbers)]\n         [scale (max -min)])\n    (map (lambda (x) (* x\
    \ scale)) (list min max)))\n)\n\n;; Given a list of numbers, return a list of\
    \ the same length, where each element is the\n;; difference between the original\
    \ element and the next element in the list.\n;; >>> (diff_list (list 1.0 2.0 3.0\
    \ 4.0 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)", "  (let ((min (car numbers))\n\
    \         (max (car numbers)))\n    (map (lambda (x) (* x (max - min))))\n  )\n\
    )\n\n;; Given a list of numbers, return the sum of the squares of those numbers\n\
    ;; >>> (sum_of_squares (list 1 2 3 4 5))\n;; 25", "  (let* ([min (car numbers)\
    \ max (cdr numbers)]\n         [scale (max -min)])\n    (map (lambda (x) (* x\
    \ scale)) (list min max))))\n\n;; Given a list of numbers, return a list of the\
    \ same length, where each element\n;; is the difference between the element and\
    \ the next element in the list.\n;; >>> (diff_list (list 1 2 3 4 5))\n;; (list\
    \ 1 2 3 4 5)", "  (let ((min (car numbers))\n         (max (car numbers)))\n \
    \   (map (lambda (x) (* x (max - min))))\n  )\n)\n\n;; Given a list of numbers,\
    \ return a list of the same length,\n;; where each element is the product of the\
    \ previous element and the next element\n;; >>> (product_list (list 1.0 2.0 3.0\
    \ 4.0 5.0))\n;; (list 1.0 2.0 6.0 24.0 120.0)", "  (let* ([min (car numbers) max\
    \ (cdr numbers)]\n         [scale (max -min)])\n    (map (lambda (x) (* x scale))\
    \ (list min max))\n  )\n)\n\n;; Given a list of numbers, return a list of the\
    \ same length containing the product of each pair of numbers\n;; >>> (product_of_pairs\
    \ (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 1.0 2.0 6.0 24.0 120.0)", "  (let* ([min\
    \ (car numbers) max (cdr numbers)]\n         [scale (max -min)])\n    (map (lambda\
    \ (x) (* x scale)) (list min max))))\n\n;; Given a list of numbers, return the\
    \ sum of the squares of those numbers\n;; >>> (sum_of_squares (list 1.0 2.0 3.0\
    \ 4.0 5.0))\n;; 25.0", "  (let* ([min (car numbers) max (cdr numbers)]\n     \
    \    [scale (max -min)])\n    (map (lambda (x) (* x scale)) (list min max))))\n\
    \n;; Given a list of numbers, return a list of the same length,\n;; where each\
    \ element is the product of the original elements\n;; >>> (product (list 1.0 2.0\
    \ 3.0 4.0 5.0))\n;; (list 1.0 2.0 6.0 24.0 120.0)", "  (let* ([min (car numbers)\
    \ max (car numbers)])\n    (if (< min 0)\n      (let* ([scale (abs (min 1 (abs\
    \ (- min 0) max)))])\n        (map (lambda (x) (* x scale)) numbers))\n      (map\
    \ (lambda (x) (* x scale)) numbers)))))\n", "  (let* ([min (car numbers) max (cdr\
    \ numbers)]\n         [scale (max -min)]))\n  (map (lambda (x) (* x scale)) numbers))\n\
    \n;; Given a list of numbers, return a list of the same length,\n;; where each\
    \ number has been scaled by a factor of 2.\n;; >>> (rescale_to_unit (list 1.0\
    \ 2.0 3.0 4.0 5.0))\n;; (list 2.0 4.0 6.0 8.0 10.0)", "  (let* ([min (car numbers)\
    \ max (cdr numbers)]\n         [scale (max -min)])\n    (map (lambda (x) (* x\
    \ scale)) (list min max))\n  )\n)\n\n;; Given a list of numbers, return a list\
    \ of the same length, where each number is the\n;; ratio of the value in the original\
    \ list to the value in the original list\n;; >>> (rescale_to_unit (list 1.0 2.0\
    \ 3.0 4.0 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)", "  (let* ([min (car numbers)\
    \ max (car numbers)])\n    (if (eq? min max)\n      (list 0.0)\n      (let* ([scale\
    \ (max - min)])\n        (map (lambda (x) (/ x scale)) numbers))))\n\n;; Given\
    \ a list of numbers, return the sum of those numbers\n;; >>> (sum (list 1 2 3\
    \ 4 5))\n;; 10", "  (let* ([min (car numbers) max (cdr numbers)]\n         [scale\
    \ (max -min)])\n    (map (lambda (x) (* x scale)) (list min max))))\n\n;; Given\
    \ a list of numbers, return a list of the same length, where each number is divided\
    \ by the sum of all numbers\n;; >>> (divide_by_sum (list 1.0 2.0 3.0 4.0 5.0))\n\
    ;; (list 0.2 0.4 0.6 0.8 1.0)", "  (let* ([min (car numbers) max (car numbers)])\n\
    \    (if (null? numbers)\n      (list 0.0)\n      (let* ([scale (max -min)])\n\
    \        (map (lambda (x) (/ x scale)) numbers))))\n)\n\n;; Given a list of numbers,\
    \ return a list of the same length, where each element is the\n;; sum of the previous\
    \ and next elements in the list.\n;; >>> (sum_list (list 1 2 3 4 5))\n;; (list\
    \ 1 3 6 10 15)", "  (let* ([min (car numbers) max (cdr numbers)]\n         [scale\
    \ (max -min)])\n    (map (lambda (x) (* x scale)) (list min max))))\n\n;; Given\
    \ a list of numbers, return a list of the same length, where each element is the\n\
    ;; product of the corresponding element in the input list and a constant factor\n\
    ;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 1.0 2.0 6.0 24.0\
    \ 120.0)", "  (let* ([min (car numbers) max (cdr numbers)]\n         [scale (max\
    \ -min)])\n    (map (lambda (x) (* x scale)) (list min max))))\n\n;; Given a list\
    \ of numbers, return a list of the same length, where each element is the\n;;\
    \ difference between the element and the next element in the list.\n;; >>> (diff_list\
    \ (list 1 2 3 4 5))\n;; (list 1 2 1 2 1)", "  (let ((min (car numbers))\n    \
    \     (max (car numbers)))\n    (map (lambda (x) (cons (sub1 x) (cons (sub1 x)\
    \ (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons\
    \ (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1\
    \ x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x)\
    \ (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons\
    \ (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1\
    \ x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x)\
    \ (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons\
    \ (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1\
    \ x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x)\
    \ (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons\
    \ (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1\
    \ x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x)\
    \ (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (", "  (let* ([min (car numbers)\
    \ max (car numbers)])\n    (if (< min 0)\n      (let* ([scale (1.0 / (abs min))])\n\
    \        (map (lambda (x) (* scale x)) numbers))\n      (map (lambda (x) (* x\
    \ scale)) numbers))\n    (cdr numbers)))\n\n;; Given a list of numbers, return\
    \ a list of the same length, where each element is the\n;; sum of the elements\
    \ preceding it in the list.\n;; >>> (sum_preceding (list 1 2 3 4 5))\n;; (list\
    \ 1 3 6 10 15)", "  (let* ([min (car numbers) max (car numbers)])\n    (if (null?\
    \ numbers)\n      (list 0.0)\n      (let* ([factor (max -min)])\n        (map\
    \ (lambda (x) (/ x factor)) numbers))))\n)\n\n;; Given a list of numbers, return\
    \ a list of the same length,\n;; where each element is the product of the original\
    \ elements\n;; >>> (product_list (list 1 2 3 4 5))\n;; (list 1 2 6 24 120)", " \
    \ (let ((min (car numbers))\n         (max (car numbers)))\n    (map (lambda (x)\
    \ (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons\
    \ (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1\
    \ x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x)\
    \ (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons\
    \ (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1\
    \ x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x)\
    \ (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons\
    \ (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1\
    \ x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x)\
    \ (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons\
    \ (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1\
    \ x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x)\
    \ (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons (sub1 x) (cons\
    \ (", "  (let* ([min (car numbers) max (cdr numbers)]\n         [scale (max -min)])\n\
    \    (map (lambda (x) (* x scale)) (numbers))))\n\n;; Given a list of numbers,\
    \ return a list of the same length, where each element\n;; is the product of the\
    \ previous and next elements in the list\n;; >>> (product_list (list 1.0 2.0 3.0\
    \ 4.0 5.0))\n;; (list 1.0 2.0 6.0 24.0 120.0)", "  (let* ([min (car numbers) max\
    \ (cdr numbers)]\n         [scale (max -min)])\n    (map (lambda (x) (/ x scale))\
    \ numbers)))\n\n;; Given a list of numbers, return a list of the same length,\n\
    ;; where each element is the product of the original elements\n;; >>> (product_list\
    \ (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 1.0 2.0 6.0 24.0 120.0)", "  (let* ([min\
    \ (car numbers) max (cdr numbers)]\n         [scale (max -min)])\n    (map (lambda\
    \ (x) (* x scale)) (list min max)))\n)\n\n;; Given a list of numbers, return a\
    \ list of the same length,\n;; where each element is the difference between the\
    \ element and the next element\n;; >>> (diff_list (list 1.0 2.0 3.0 4.0 5.0))\n\
    ;; (list 1.0 2.0 3.0 4.0)", "  (let* ([min (car numbers) max (car numbers)])\n\
    \    (if (eq? min max)\n      (list 0.0)\n      (let* ([scale (max - min)])\n\
    \        (map (lambda (x) (/ x scale)) numbers))))\n\n;; Given a list of numbers,\
    \ return a list of the same length, where each element is the\n;; sum of the elements\
    \ before it in the list.\n;; >>> (sum_to_previous (list 1 2 3 4 5))\n;; (list\
    \ 1 2 3 4 5)", "  (let* ([min (car numbers) max (cdr numbers)]\n         [scale\
    \ (max -min)])\n    (map (lambda (x) (* x scale)) (list min max))))\n\n;; Given\
    \ a list of numbers, return the sum of the squares of those numbers\n;; >>> (sum_of_squares\
    \ (list 1.0 2.0 3.0 4.0 5.0))\n;; 25.0", "  (let* ([min (car numbers) max (cdr\
    \ numbers)]\n         [scale (max -min)])\n    (map (lambda (x) (* x scale)) (list\
    \ min max))))\n\n;; Given a list of numbers, return a list of the same length,\n\
    ;; where each number is the product of the original number and the scale factor\n\
    ;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 0.0 0.25 0.5 0.75\
    \ 1.0)", "  (let* ([min (car numbers) max (cdr numbers)]\n         [scale (max\
    \ -min)])\n    (map (lambda (x) (/ x scale)) numbers)))\n\n;; Given a list of\
    \ numbers, return a list of the same length, where each element is the\n;; difference\
    \ between the element and the next element in the list\n;; >>> (diff_list (list\
    \ 1 2 3 4 5))\n;; (list 1 2 1 2 1)", "  (let ((min (car numbers))\n         (max\
    \ (car numbers)))\n    (map (lambda (x) (* x (max - min))))\n  )\n)\n\n;; Given\
    \ a list of numbers, return the sum of the squares of those numbers\n;; >>> (sum_of_squares\
    \ (list 1.0 2.0 3.0 4.0 5.0))\n;; 25.0", "  (let ((min (car numbers))\n      \
    \   (max (car numbers)))\n    (map (lambda (x) (* x (max - min))))\n  )\n)\n\n\
    ;; Given a list of numbers, return a list of the same length, where each number\
    \ is\n;; scaled to the range [0, 1]\n;; >>> (rescale (list 1.0 2.0 3.0 4.0 5.0))\n\
    ;; (list 0.0 0.25 0.5 0.75 1.0)", "  (let* ([min (car numbers) max (cdr numbers)]\n\
    \         [scale (max -min)])\n    (map (lambda (x) (* x scale)) (list min max))))\n\
    \n;; Given a list of numbers, return a list of the same length,\n;; where each\
    \ number is the difference between the original number and the number\n;; in the\
    \ same position in the list.\n;; >>> (diff_list (list 1 2 3 4 5))\n;; (list 1\
    \ 2 1 2 1)", "  (let* ([min (car numbers) max (cdr numbers)]\n         [scale\
    \ (max -min)])\n    (map (lambda (x) (* x scale)) (list min max))))\n\n;; Given\
    \ a list of numbers, return a list of the same length, where each element\n;;\
    \ is the product of the element in the original list and the given factor\n;;\
    \ >>> (scale_list (list 1.0 2.0 3.0 4.0 5.0) 2.0)\n;; (list 2.0 6.0 12.0 20.0\
    \ 30.0)", "  (let* ([min (car numbers) max (cdr numbers)]\n         [scale (max\
    \ -min)])\n    (map (lambda (x) (* x scale)) (numbers))))\n\n;; Given a list of\
    \ numbers, return a list of the same length, where each element is the\n;; product\
    \ of the corresponding element in the input list and the given scale factor\n\
    ;; >>> (scale_to_unit (list 1.0 2.0 3.0 4.0 5.0) 2.0)\n;; (list 2.0 6.0 12.0 20.0\
    \ 30.0)", "  (let* ([min (car numbers) max (cdr numbers)]\n         [scale (max\
    \ -min)])\n    (map (lambda (x) (* x scale)) (list min max))))\n\n;; Given a list\
    \ of numbers, return a list of the same length, where each element\n;; is the\
    \ difference between the element and the next element in the list.\n;; >>> (diff_list\
    \ (list 1 2 3 4 5))\n;; (list 1 2 3 4 5)", "  (let* ([min (car numbers) max (cdr\
    \ numbers)]\n         [scale (max -min)])\n    (map (lambda (x) (* x scale)) (list\
    \ min max))))\n\n;; Given a list of numbers, return a list of the same length,\
    \ where each number\n;; is multiplied by a constant factor.\n;; >>> (scale_by_constant\
    \ (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 1.0 2.0 3.0 4.0 5.0)", "  (let* ([min\
    \ (car numbers) max (cdr numbers)]\n         [scale (max -min)])\n    (map (lambda\
    \ (x) (* x scale)) (list min max))))\n\n;; Given a list of numbers, return a list\
    \ of the same length, where each element is the\n;; difference between the element\
    \ and the next element in the list.\n;; >>> (diff_list (list 1 2 3 4 5))\n;; (list\
    \ 1 2 1 2 1)", "  (let ((min (car numbers))\n         (max (car numbers)))\n \
    \   (map (lambda (x) (* x (max - min))))\n  )\n)\n\n;; Given a list of numbers,\
    \ return a list of the same length, where each element is the\n;; sum of the elements\
    \ before it in the list.\n;; >>> (sum_before (list 1 2 3 4 5))\n;; (list 1 2 3\
    \ 4 5)"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
