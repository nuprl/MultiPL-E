name: HumanEval_71_triangle_area
language: rkt
prompt: "#lang racket\n\n;; Given the lengths of the three sides of a triangle. Return\
  \ the area of\n;; the triangle rounded to 2 decimal points if the three sides form\
  \ a valid triangle. \n;; Otherwise return -1\n;; Three sides make a valid triangle\
  \ when the sum of any two sides is greater \n;; than the third side.\n;; Example:\n\
  ;; >>> (triangle_area 3 4 5)\n;; 6.0\n;; >>> (triangle_area 1 2 10)\n;; -1\n(define\
  \ (triangle_area a b c)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate triangle_area))\n\
  \    (check-equal? (candidate 3 4 5) 6.0)\n    (check-equal? (candidate 1 2 10)\
  \ -1)\n    (check-equal? (candidate 4 8 5) 8.18)\n    (check-equal? (candidate 2\
  \ 2 2) 1.73)\n    (check-equal? (candidate 1 2 3) -1)\n    (check-equal? (candidate\
  \ 10 5 7) 16.25)\n    (check-equal? (candidate 2 6 3) -1)\n    (check-equal? (candidate\
  \ 1 1 1) 0.43)\n    (check-equal? (candidate 2 2 10) -1)\n))\n\n(test-humaneval)"
completions: ["  (let ((s (sqrt (+ (* a b) (* a c)))))\n    (if (> (* a b) (* a c))\n\
    \      (+ (* a b) (* a c) (* a b) (* a c))\n      (-1))))\n", "  (if (> (+ a b)\
    \ c)\n    (+ (+ (+ a b) c) (* 3 0.5))\n    -1))\n", "  (if (> (+ a b) c)\n   \
    \ (+ (+ (+ a b) c) (* 2.0 (/ (sqrt (+ (* a 2) (* b 2) (* c 2)) 2))))\n    -1))\n",
  "  (cond\n    ((>= a b) (>= b c))\n    ((>= a c) (>= b c))\n    ((>= a b) (>= c\
    \ b))\n    ((>= a c) (>= b c))\n    ((>= a b) (>= c b))\n    ((>= a c) (>= b c))\n\
    \    (else -1)\n  )\n)\n", "  (let ((s (sqrt (+ (* a b) (* a c))))\n        (t\
    \ (sqrt (+ (* b c) (* a b)))))\n    (if (>= s t)\n      (+ (* a b) (* a c) (*\
    \ b c))\n      (-1)))\n)\n", "  (let ((s (sqrt (+ (* a b) (* a c))))\n       \
    \ (t (sqrt (+ (* b c) (* a b))))\n        (u (sqrt (+ (* c a) (* b c))))\n   \
    \     (v (sqrt (+ (* c b) (* a c))))\n        (area (sqrt (+ (* s t) (* s u) (*\
    \ s v))))\n        (area (sqrt (+ (* t u) (* t v) (* u v))))\n        (area (sqrt\
    \ (+ (* u v) (* u v))))\n        (area (sqrt (+ (* v v) (* v v))))\n        (area\
    \ (sqrt (+ (* s s) (* s s))))\n        (area (sqrt (+ (* t t) (* t t))))\n   \
    \     (area (sqrt (+ (* u u) (* u u))))\n        (area (sqrt (+ (* v v) (* v v))))\n\
    \        (area (sqrt (+ (* s s) (* s s))))\n        (area (sqrt (+ (* t t) (*\
    \ t t))))\n        (area (sqrt (+ (* u u) (* u u))))\n        (area (sqrt (+ (*\
    \ v v) (* v v))))\n        (area (sqrt (+ (* s s) (* s s))))\n        (area (sqrt\
    \ (+ (* t t) (* t t))))\n        (area (sqrt (+ (* u u) (* u u))))\n        (area\
    \ (sqrt (+ (* v v) (* v v))))\n        (area (sqrt (+ (* s s) (* s s))))\n   \
    \     (area (sqrt (+ (* t t) (* t t))))\n        (area (sqrt (+ (* u u) (* u u))))\n\
    \        (area (sqrt (+ (* v v) (* v v))))\n        (area (sqrt (+ (* s s) (*\
    \ s s))))\n        (area (sqrt (+ (* t t) (* t t))))\n        (area (sqrt (+ (*\
    \ u u) (* u u))))\n        (area (sqrt (+ (* v v) (* v v))))\n        (area (sqrt\
    \ (+ (* s s) (* s s))))\n        (area (sqrt (+ (* t t) (* t t))))\n        (area\
    \ (sqrt (+ (* u u) (* u u))))\n        (area (sqrt", "  (if (> (+ a b) c)\n  \
    \  (+ (+ (+ (* a b) c) (* a c)) (* b c))\n    -1))\n", "  (if (> (+ a b) c)\n\
    \    (+ (+ (+ a b) c) (* 2.0 (/ (+ a b) c))))\n  -1)\n", "  (let ((s (sqrt (+\
    \ (* a b) (* a c)))))\n    (if (> (* a b) (* a c))\n      (+ (* a b) (* a c) (*\
    \ a c) (* a b) (* a b) (* a c))\n      (- 1 s)))\n)\n", "  (if (> (+ a b) c)\n\
    \    (+ (+ (+ a b) c) (* 2.0 (/ (sqrt (+ (* a 2) (* b 2) (* c 2)) 2))))\n    -1))\n",
  "  (let ((s (sqrt (+ (* a b) (* a c))))\n        (t (sqrt (+ (* b c) (* a b))))\n\
    \        (u (sqrt (+ (* c a) (* b c))))\n        (v (sqrt (+ (* c b) (* a c))))\n\
    \        (area (sqrt (+ (* s t) (* s u) (* s v))))\n        (area (sqrt (+ (*\
    \ t u) (* t v) (* u v))))\n        (area (sqrt (+ (* u v) (* u v))))\n       \
    \ (area (sqrt (+ (* v v) (* v v))))\n        (area (sqrt (+ (* s s) (* s s))))\n\
    \        (area (sqrt (+ (* t t) (* t t))))\n        (area (sqrt (+ (* u u) (*\
    \ u u))))\n        (area (sqrt (+ (* v v) (* v v))))\n        (area (sqrt (+ (*\
    \ s s) (* s s))))\n        (area (sqrt (+ (* t t) (* t t))))\n        (area (sqrt\
    \ (+ (* u u) (* u u))))\n        (area (sqrt (+ (* v v) (* v v))))\n        (area\
    \ (sqrt (+ (* s s) (* s s))))\n        (area (sqrt (+ (* t t) (* t t))))\n   \
    \     (area (sqrt (+ (* u u) (* u u))))\n        (area (sqrt (+ (* v v) (* v v))))\n\
    \        (area (sqrt (+ (* s s) (* s s))))\n        (area (sqrt (+ (* t t) (*\
    \ t t))))\n        (area (sqrt (+ (* u u) (* u u))))\n        (area (sqrt (+ (*\
    \ v v) (* v v))))\n        (area (sqrt (+ (* s s) (* s s))))\n        (area (sqrt\
    \ (+ (* t t) (* t t))))\n        (area (sqrt (+ (* u u) (* u u))))\n        (area\
    \ (sqrt (+ (* v v) (* v v))))\n        (area (sqrt (+ (* s s) (* s s))))\n   \
    \     (area (sqrt (+ (* t t) (* t t))))\n        (area (sqrt (+ (* u u) (* u u))))\n\
    \        (area (sqrt", "  (let* ([s1 (sqrt (+ (* a b) (* a c)))]\n         [s2\
    \ (sqrt (+ (* b c) (* a b)))]\n         [s3 (sqrt (+ (* c a) (* b c))))\n    \
    \   [area (sqrt (+ s1 s2 s3))])\n  (if (eq? (round area) area)\n    area\n   \
    \ -1))\n", "  (let ((s1 (sqrt (+ (* a b) (* a c))))\n        (s2 (sqrt (+ (* b\
    \ c) (* a b))))\n        (s3 (sqrt (+ (* c a) (* b c))))\n        (area (sqrt\
    \ (+ s1 s2 s3))))\n  (if (and (>= s1 s2) (>= s2 s3))\n    (+ area (* a b c) /\
    \ 2)\n    (-1)))\n", "  (if (> (+ a b) c)\n    (+ (+ (+ a b) c) (* 2.0 (/ (+ a\
    \ b) c))))\n  -1)\n", "  (let ((a (floor a)))\n    (let ((b (floor b)))\n    \
    \  (let ((c (floor c)))\n        (+ (+ a b) c))))\n  )\n)\n", "  (let ((s (sqrt\
    \ (+ (* a b) (* a c)))))\n    (if (>= (* a b) (* a c))\n      (+ (* a b) (* a\
    \ c) (* a b) (* a c) (* a b) (* a c))\n      (- 1 s)))\n)\n", "  (cond\n    ((>=\
    \ a b) (+ a b))\n    ((>= a c) (+ a c))\n    ((>= b c) (+ b c))\n    (else (-1))\n\
    \  )\n)\n", "  (if (> (+ a b) c)\n    (+ (+ (+ a b) c) (* 2.0 (/ (+ a b) c))))\n\
    \  -1)\n", "  (if (> (+ a b) c)\n    (+ (+ (+ a b) c) (* 2.0 (/ (sqrt (+ a b c))\
    \ 2.0))))\n)\n", "  (let ((a (abs a)))\n    (let ((b (abs b)))\n      (let ((c\
    \ (abs c)))\n        (if (> (+ a b) c)\n          (+ (+ (+ a b) c) (* a b c))\n\
    \          (-1)))\n      )))\n)\n", "  (let* ([s1 (sqrt (+ (* a b) (* a c)))]\n\
    \         [s2 (sqrt (+ (* b c) (* a c)))]\n         [s3 (sqrt (+ (* c a) (* b\
    \ a))))\n    (+ s1 s2 s3)))\n", "  (if (> (+ a b) c)\n    (+ (+ (+ a b) c) (*\
    \ 2.0 (/ (+ a b) c))))\n  -1)\n", "  (let ((s (sqrt (+ (* a b) (* a c)))))\n \
    \   (if (> (* a b) (* a c))\n      (+ (* a b) (* a c) (* a c) (* a b) (* a b)\
    \ (* a c))\n      (- 1 s)))\n)\n", "  (let ((s1 (sqrt (+ (* a b) (* a c))))\n\
    \        (s2 (sqrt (+ (* b c) (* a b))))\n        (s3 (sqrt (+ (* c a) (* b c))))\n\
    \        (area (sqrt (+ (* s1 s2) (* s1 s3))))\n        (if (and (>= (* s1 s2)\
    \ (* s1 s3)) (= (* s2 s3) (* s1 s2)))\n            (+ area (* (/ (* a b) 2) (*\
    \ (/ (* a c) 2) (* c a))))\n            (-1)))\n  )\n)\n", "  (if (> (+ a b) c)\n\
    \    (+ (+ (+ a b) c) (* 2.0 (/ (+ a b) c))))\n  -1)\n", "  (if (> (+ a b) c)\n\
    \    (+ (+ (+ a b) c) (* 2.0 (/ (+ a b) c))))\n  -1)\n", "  (let ((s (sqrt (+\
    \ (* a b) (* a c))))\n        (t (sqrt (+ (* b c) (* a b))))\n        (u (sqrt\
    \ (+ (* c a) (* b c))))\n        (v (sqrt (+ (* c b) (* a c))))\n        (area\
    \ (sqrt (+ (* s t) (* s u) (* s v))))\n        (error (- area 0.01) \"Invalid\
    \ triangle\")))\n", "  (let ((s1 (sqrt (* (a * a) + (* (b * b) + (* (c * c)))))\n\
    \         (s2 (sqrt (* (a * a) + (* (b * b) + (* (c * c)))))\n         (s3 (sqrt\
    \ (* (a * a) + (* (b * b) + (* (c * c)))))\n         (if (and (>= s1 s2) (>= s2\
    \ s3))\n             (+ s1 s2 s3)\n             (-1)))\n         ))\n  (if (eq?\
    \ (round (s1)) (round (s2)) (round (s3)))\n     (round (s1))\n     (-1)))\n)\n",
  "  (if (> (+ a b) c)\n    (+ (+ (+ a b) c) (* 2.0 (/ (sqrt (+ a b c)) 2)))\n   \
    \ -1))\n", "  (let ((a (abs a))\n        (b (abs b))\n        (c (abs c)))\n \
    \   (if (> (+ a b) c)\n      (+ (+ (+ a b) c) (* 2.0 (/ a b c)))\n      (-1)))\n\
    )\n", "  (if (> (+ a b) c)\n    (+ (+ (+ a b) c) (* 3 0.5))\n    -1))\n", "  (cond\n\
    \    ((>= a b) (+ a b))\n    ((>= a c) (+ a c))\n    ((>= b c) (+ b c))\n    (else\
    \ (-1))\n  )\n)\n", "  (let ((s (sqrt (+ (* a b) (* a c))))\n        (t (sqrt\
    \ (+ (* b c) (* a b))))\n        (u (sqrt (+ (* c a) (* b c))))\n        (v (sqrt\
    \ (+ (* c b) (* a c))))\n        (area (sqrt (+ (* s t) (* s u) (* s v))))\n \
    \       (round (area 2)))\n  (if (and (>= a b c) (= (+ a b) c)) (= area (+ a b\
    \ c)) -1))\n)\n", "  (let ((s (sqrt (+ (* a b) (* a c))))\n        (t (sqrt (+\
    \ (* b c) (* a b))))\n        (u (sqrt (+ (* c a) (* b c))))\n        (v (sqrt\
    \ (+ (* c b) (* a c))))\n        (area (sqrt (+ (* s t) (* s u) (* s v))))\n \
    \       (valid (and (>= (* a b) (* a c)) (>= (* b c) (* a b)) (>= (* c a) (* b\
    \ c)) (>= (* c b) (* a c)))))\n  (if valid\n    (format \"~f\" area)\n    (format\
    \ \"~f\" -1)))\n", "  (let ((s (sqrt (+ (* a b) (* a c)))))\n    (if (> (* a b)\
    \ (* a c))\n      (+ (* a b) (* a c) (* a c) (* a b) (* a b) (* a c))\n      (-\
    \ 1 s)))\n)\n", "  (cond\n    ((>= a b) (>= b c))\n    ((>= a c) (>= b c))\n \
    \   ((>= a b) (>= c b))\n    ((>= a c) (>= b c))\n    (else -1)\n  )\n)\n", " \
    \ (cond\n    ((>= a b) (+ a b))\n    ((>= a c) (+ a c))\n    ((>= b c) (+ b c))\n\
    \    (else (-1))\n  )\n)\n", "  (cond\n    ((>= a b) (+ a b))\n    ((>= a c) (+\
    \ a c))\n    ((>= b c) (+ b c))\n    (else (-1))\n  )\n)\n", "  (if (> (+ a b)\
    \ c)\n    (+ (+ (+ a b) c) (* 2.0 (/ (+ a b) c))))\n  -1)\n", "  (if (> (+ a b)\
    \ c)\n    (+ (+ (+ a b) c) (* 2.0 (/ (+ a b) c))))\n  -1)\n", "  (if (> (+ a b)\
    \ c)\n    (+ (+ (+ a b) c) (* 2.0 (/ (+ a b) c))))\n  -1)\n", "  (if (> (+ a b)\
    \ c)\n    (+ (+ (+ a b) c) (* 2.0 (/ (+ a b) c))))\n  -1)\n", "  (let ((s (sqrt\
    \ (+ (* a b) (* a c)))))\n    (if (>= (* a b) (* a c))\n      (+ (* a b) (* a\
    \ c) (* a c) (* a b) (* a b) (* a c))\n      (- 1 s)))\n)\n", "  (cond\n    ((>=\
    \ a b) (+ a b))\n    ((>= a c) (+ a c))\n    ((>= b c) (+ b c))\n    ((= a b)\
    \ (- a c))\n    ((= a c) (- a b))\n    ((= b c) (- b a))\n    (else (-1 0))\n\
    \  )\n)\n", "  (if (> (+ a b) c)\n    (+ (+ (+ a b) c) (* 2.0 (/ (sqrt (+ (* a\
    \ 2) (* b 2) (* c 2)) 2))))\n    -1))\n", "  (let ((s1 (sqrt (+ (* a b) (* a c))))\n\
    \        (s2 (sqrt (+ (* b c) (* a c))))\n        (s3 (sqrt (+ (* c a) (* b c))))\n\
    \        (area (sqrt (+ (* s1 s2) (* s2 s3))))\n        (if (<= area 0.0) (-1.0)\
    \ area))\n)\n", "  (cond\n    ((>= a b) (+ a b))\n    ((>= a c) (+ a c))\n   \
    \ ((>= b c) (+ b c))\n    (else (-1))\n  )\n)\n", "  (let ((s (+ a b)))\n    (if\
    \ (>= s c)\n      (+ (/ a b) (/ c s))\n      (-1)))\n)\n", "  (if (> (+ a b) c)\n\
    \    (+ (+ (+ a b) c) (* 2.0 (/ (+ a b) c))))\n  -1)\n", "  (cond\n    ((>= a\
    \ b) (+ a b))\n    ((>= a c) (+ a c))\n    ((>= b c) (+ b c))\n    ((= a b) (-\
    \ 1))\n    ((= a c) (- 1))\n    ((= b c) (- 1))\n    (else (- 1))\n  )\n)\n",
  "  (cond\n    ((>= a b) (+ a b))\n    ((>= a c) (+ a c))\n    ((>= b c) (+ b c))\n\
    \    (else (-1))\n  )\n)\n", "  (if (> (+ a b) c)\n    (+ (+ (+ a b) c) (* 3 0.5))\n\
    \    (-1)))\n", "  (let ((s (sqrt (+ (* a b) (* a c)))))\n    (if (> (* a b) (*\
    \ a c))\n      (+ (* a b) (* a c) (* a b) (* a c) (* a b) (* a c))\n      (- 1\
    \ s)))\n)\n", "  (let ((a (float a)))\n    (let ((b (float b)))\n      (let ((c\
    \ (float c)))\n        (if (> (+ a b) c)\n            (+ (+ (+ a b) c) (* 2.0\
    \ (float (/ (- a b) c))))\n            (-1.0))))))\n", "  (let ((s1 (sqrt (+ (*\
    \ a b) (* a c))))\n        (s2 (sqrt (+ (* b c) (* a b))))\n        (s3 (sqrt\
    \ (+ (* c a) (* b c))))\n        (area (sqrt (+ (* s1 s2) (* s1 s3))))\n     \
    \   (if (<= area 0.0) -1\n          (format \"~2f\" area)))\n)\n", "  (let ((a\
    \ (abs a))\n        (b (abs b))\n        (c (abs c)))\n    (if (> (+ a b) c)\n\
    \      (+ a b c)\n      (- 1)))\n)\n", "  (if (> (+ a b) c)\n    (+ (+ (+ a b)\
    \ c) (* 2.0 (/ (+ a b) c))))\n  -1)\n", "  (let ((a (float a)))\n    (let ((b\
    \ (float b)))\n      (let ((c (float c)))\n        (if (> (+ a b) c)\n       \
    \   (+ (+ (+ a b) c) (* 2.0 (float (/ a b c))))\n          (-1))))))\n", "  (if\
    \ (> (+ a b) c)\n    (+ (+ (+ a b) c) (* 2.0 (/ (+ a b) c))))\n  -1)\n", "  (let\
    \ ((s (sqrt (+ (* a b) (* a c)))))\n    (if (> (* a b) (* a c))\n      (+ (* a\
    \ b) (* a c) (* a c) (* a b) (* a b) (* a c) (* a c))\n      (- 1 s)))\n)\n",
  "  (let ((s1 (sqrt (+ (* a b) (* a c))))\n        (s2 (sqrt (+ (* b c) (* a b))))\n\
    \        (s3 (sqrt (+ (* c a) (* b c))))\n        (area (sqrt (+ (* s1 s2) (*\
    \ s1 s3))))\n        (if (<= area 0.0)\n          (-1.0)\n          (round (/\
    \ area 10.0) 2)))\n)\n", "  (if (> (+ a b) c)\n    (+ (+ (+ a b) c) (* 2.0 (/\
    \ (+ a b) c))))\n  -1)\n", "  (let ((s (sqrt (+ (* a b) (* a c)))))\n    (if (>\
    \ (* a b) (* a c))\n      (+ (* a b) (* a c) (* a b) (* a c))\n      (- 1))))\n",
  "  (cond\n    ((>= a b) (+ a b))\n    ((>= a c) (+ a c))\n    ((>= b c) (+ b c))\n\
    \    (else -1)\n  )\n)\n", "  (let ((s1 (sqrt (+ (* a b) (* a c))))\n        (s2\
    \ (sqrt (+ (* b c) (* a b))))\n        (s3 (sqrt (+ (* c a) (* b c))))\n     \
    \   (area (sqrt (+ (* s1 s2) (* s1 s3))))\n        (if (<= area 0.0) (-1.0) area))\n\
    \  )\n)\n", "  (if (> (+ a b) c)\n    (+ (+ a b) c)\n    (-1)))\n", "  (if (>\
    \ (+ a b) c)\n    (+ (+ (+ a b) c) (* 2.0 (/ (sqrt (+ (* a 2) (* b 2) (* c 2))\
    \ 2))))\n    -1))\n", "  (if (> (+ a b) c)\n    (+ (+ (+ a b) c) (* 2.0 (/ (sqrt\
    \ (+ a b c)) 2.0))))\n)\n", "  (if (> (+ a b) c)\n    (+ (+ (+ (* a b) c) (* a\
    \ c)) (* b c))\n    -1))\n", "  (if (> (+ a b) c)\n    (+ (+ (+ a b) c) (* 2.0\
    \ (/ (sqrt (+ a b c)) 2.0)))\n    -1))\n", "  (cond\n    ((>= a b) (+ a b))\n\
    \    ((>= a c) (+ a c))\n    ((>= b c) (+ b c))\n    (else (-1))\n  )\n)\n", " \
    \ (let ((s1 (sqrt (+ (* a b) (* a c))))\n        (s2 (sqrt (+ (* b c) (* a b))))\n\
    \        (s3 (sqrt (+ (* c a) (* b c))))\n        (area (sqrt (+ s1 s2 s3))))\n\
    \  (if (and (>= s1 s2) (>= s2 s3))\n      area\n      (-1)))\n", "  (let* ([s1\
    \ (abs (+ a b))]\n         [s2 (abs (+ a c))]\n         [s3 (abs (+ b c))]\n \
    \        [s1s2 (abs (+ s1 s2))]\n         [s1s3 (abs (+ s1 s3))]\n         [s2s3\
    \ (abs (+ s2 s3)))\n         [area (sqrt (s1s2 * s1s3 * s2s3))])\n    (if (zero?\
    \ s1s2) (negative? area))\n    area))\n", "  (let ((s1 (sqrt (+ (* a b) (* a c))))\n\
    \        (s2 (sqrt (+ (* b c) (* a b))))\n        (s3 (sqrt (+ (* c a) (* b c))))\n\
    \        (area (sqrt (+ (* s1 s2) (* s2 s3))))\n        (if (and (positive? area)\
    \ (>= (* s1 s2) (* s2 s3)))\n            area\n            (-1)))\n)\n", "  (if\
    \ (> (+ a b) c)\n    (+ (+ (+ a b) c) (* 2.0 0.5))\n    -1))\n", "  (let ((a (float\
    \ a))\n        (b (float b))\n        (c (float c)))\n    (if (> (+ a b) c)\n\
    \      (+ (+ (+ a b) c) (* 2.0 (float 0.5))))\n    (-1)))\n", "  (if (> (+ a b)\
    \ c)\n    (+ (+ (+ a b) c) (* 2.0 (/ (+ a b) c))))\n  -1)\n", "  (if (> (+ a b)\
    \ c)\n    (+ (+ (+ a b) c) (* 3 0.5))\n    -1))\n", "  (if (> (+ a b) c)\n   \
    \ (+ (+ (+ a b) c) (* 2.0 (/ (sqrt (+ (* a 2) (* b 2) (* c 2)) 2))))\n    -1))\n",
  "  (let* ([s1 (sqrt (/ (+ a b) c))\n          s2 (sqrt (/ (+ a c) b))\n        \
    \  s3 (sqrt (/ (+ b c) a))]\n        [area (sqrt (/ (+ s1 s2) s3))))\n  (if (<=\
    \ 0.0 area)\n    (-1.0 area)\n    area))\n", "  (if (> (+ a b) c)\n    (+ (+ (+\
    \ a b) c) (* 2.0 (/ (+ a b) c))))\n  -1)\n", "  (if (> (+ a b) c)\n    (+ (+ (+\
    \ a b) c) (* 2.0 (/ (+ a b) c))))\n  -1)\n", "  (let ((s (sqrt (+ (* a b) (* a\
    \ c)))))\n    (if (>= (* a b) (* a c))\n      (+ (* a b) (* a c) (* a b) (* a\
    \ c) (* a b) (* a c))\n      (- 1 s)))\n)\n", "  (let ((s (sqrt (+ (* a b) (*\
    \ a c))))\n        (t (sqrt (+ (* b c) (* a b))))\n        (u (sqrt (+ (* c a)\
    \ (* b c))))\n        (v (sqrt (+ (* c b) (* a c))))\n        (area (sqrt (+ (*\
    \ s t) (* s u) (* s v))))\n        (round (area 2))))\n", "  (let ((s (sqrt (+\
    \ (* a b) (* a c))))\n        (t (sqrt (+ (* b c) (* a b))))\n        (u (sqrt\
    \ (+ (* c a) (* b c))))\n        (v (sqrt (+ (* c b) (* a c))))\n        (area\
    \ (sqrt (+ (* s t) (* s u) (* s v))))\n        (error (- area 1)\n          \"\
    The three sides of the triangle do not form a valid triangle.\"))\n  (if (and\
    \ (>= a b c) (<= a (+ b c)))\n    (+ area (* a b) (* a c) (* b c))\n    (-1)))\n",
  "  (let* ((a (abs a))\n         (b (abs b))\n         (c (abs c)))\n    (if (> (+\
    \ a b) c)\n      (+ (+ (+ a b) c) (* 2.0 (/ a b c)))\n      (-1)))\n)\n", "  (cond\n\
    \    ((>= a b) (>= b c))\n    ((>= a c) (>= b c))\n    ((>= a b) (>= c b))\n \
    \   (else -1)\n  )\n)\n", "  (let ((s1 (sqrt (+ (* a b) (* a c))))\n        (s2\
    \ (sqrt (+ (* b c) (* a b))))\n        (s3 (sqrt (+ (* c a) (* b c))))\n     \
    \   (area (sqrt (+ (* s1 s2) (* s2 s3))))\n        (if (= area 0.0) (-1.0) area))\n\
    \  )\n)\n", "  (let ((s1 (sqrt (+ (* a b) (* a c))))\n        (s2 (sqrt (+ (*\
    \ b c) (* a b))))\n        (s3 (sqrt (+ (* c a) (* b c))))\n        (area (+ s1\
    \ s2 s3)))\n  (if (and (>= (* a b) (* a c)) (>= (* b c) (* a b)) (>= (* c a) (*\
    \ b c)))\n    (format \"~f\" area)\n    (else (format \"~f\" -1))))\n", "  (if\
    \ (> (+ a b) c)\n    (+ (+ (+ a b) c) (* 2.0 (/ (sqrt (+ (* a b) (* c c)) 2.0)\
    \ 2.0)))\n    -1))\n", "  (if (> (+ a b) c)\n    (+ (+ (+ a b) c) (* 2.0 (/ (sqrt\
    \ (+ (* a b) (* c c)) 2.0) 2.0)))\n    -1))\n", "  (if (> (+ a b) c)\n    (+ (+\
    \ (+ a b) c) (* 2.0 (/ (+ a b) c))))\n  -1)\n", "  (cond\n    ((>= a b) (+ a b))\n\
    \    ((>= a c) (+ a c))\n    ((>= b c) (+ b c))\n    (else (-1))\n  )\n)\n", " \
    \ (let ((s (sqrt (+ (* a b) (* a c))))\n        (t (sqrt (+ (* b c) (* a b))))\n\
    \        (u (sqrt (+ (* c a) (* b c))))\n        (v (sqrt (+ (* c b) (* a c))))\n\
    \        (area (sqrt (+ (* s t) (* s u) (* s v))))\n        (round (area 2)))\n\
    \  (if (eq? (round (area 2)) -1)\n    (progn\n      (format t \"Invalid triangle:\
    \ \")\n      (format a \" \")\n      (format b \" \")\n      (format c \" \")\n\
    \      (format t \"sides: \")\n      (format a \" \")\n      (format b \" \")\n\
    \      (format c \" \")\n      (format t \"sides: \")\n      (format a \" \")\n\
    \      (format b \" \")\n      (format c \" \")\n      (format t \"sides: \")\n\
    \      (format a \" \")\n      (format b \" \")\n      (format c \" \")\n    \
    \  (format t \"sides: \")\n      (format a \" \")\n      (format b \" \")\n  \
    \    (format c \" \")\n      (format t \"sides: \")\n      (format a \" \")\n\
    \      (format b \" \")\n      (format c \" \")\n      (format t \"sides: \")\n\
    \      (format a \" \")\n      (format b \" \")\n      (format c \" \")\n    \
    \  (format t \"sides: \")\n      (format a \" \")\n      (format b \" \")\n  \
    \    (format c \" \")\n      (format t \"sides: \")\n      (format a \" \")\n\
    \      (format b \" \")\n      (format c \" \")\n      (format t \"sides: \")\n\
    \      (format a \" \")\n      (format b \" \")\n      (format c \" \")\n    \
    \  (format t \"sides: \")\n      (format a \" \")\n      (format b \" \")\n  \
    \    (format c \" \")\n      (format t \"sides: \")\n      ", "  (let ((a (abs\
    \ a)))\n    (let ((b (abs b)))\n      (let ((c (abs c)))\n        (if (> (+ a\
    \ b) c)\n            (+ (+ (+ a b) c) (* 2.0 (sqrt (/ (+ a b) c))))\n        \
    \    (-1))))))\n", "  (cond\n    ((>= a b) (+ a b))\n    ((>= a c) (+ a c))\n\
    \    ((>= b c) (+ b c))\n    (else (-1))\n  )\n)\n", "  (cond\n    ((>= a b) (+\
    \ a b))\n    ((>= a c) (+ a c))\n    ((>= b c) (+ b c))\n    (else (-1))\n  )\n\
    )\n", "  (if (> (+ a b) c)\n    (+ (+ (+ a b) c) (* 2.0 (/ (+ a b) c))))\n  -1)\n",
  "  (if (> (+ a b) c)\n    (+ (+ a b) c)\n    (-1)))\n", "  (let ((a (float a)))\n\
    \    (let ((b (float b)))\n      (let ((c (float c)))\n        (if (> (+ a b)\
    \ c)\n            (+ (+ (+ a b) c) (* 2.0 (float (- a b))))\n            (-1)))\n\
    \      )))\n)\n", "  (if (> (+ a b) c)\n    (+ (+ (+ a b) c) (* 2.0 (/ (+ a b)\
    \ c))))\n  -1)\n", "  (if (> (+ a b) c)\n    (+ (+ (+ a b) c) (* 2.0 (/ (sqrt\
    \ (+ a b c)) 2.0))))\n)\n", "  (if (> (+ a b) c)\n    (+ (+ (+ a b) c) (* 2.0\
    \ (/ (+ a b) c))))\n  -1)\n", "  (if (> (+ a b) c)\n    (+ (+ (+ a b) c) (* 2.0\
    \ (/ (+ a b) c))))\n  -1)\n", "  (let ((s (sqrt (+ (* a b) (* a c)))))\n    (if\
    \ (> (* a b) (* a c))\n      (+ (* a b) (* a c) (* a c) (* a b) (* a b) (* a c))\n\
    \      (- 1 s)))\n)\n", "  (if (> (+ a b) c)\n    (+ (+ (+ a b) c) (* 2.0 (/ (sqrt\
    \ (+ a b c)) 2.0))))\n)\n", "  (cond\n    ((>= a b) (+ a b))\n    ((>= a c) (+\
    \ a c))\n    ((>= b c) (+ b c))\n    (else (-1))\n  )\n)\n", "  (let ((a (float?\
    \ a))\n        (b (float? b))\n        (c (float? c)))\n    (if (and (not (eq?\
    \ a b c))\n           (> (+ a b) c)\n           (> (+ a c) b)\n           (> (+\
    \ b c) a))\n      (+ (+ (+ (+ a b) c) (+ a c) b) c)\n      (-1)))\n)\n", "  (if\
    \ (> (+ a b) c)\n    (+ (+ (+ a b) c) (* 2.0 (/ (sqrt (+ a b c)) 2.0))))\n)\n",
  "  (let ((s1 (sqrt (+ (* a b) (* a c))))\n        (s2 (sqrt (+ (* b c) (* a b))))\n\
    \        (s3 (sqrt (+ (* c a) (* b c))))\n        (area (sqrt (+ s1 s2 s3))))\n\
    \  (if (>= s1 s2 s3)\n    (format \"%.2f\" area)\n    (format \"~a\" \"Invalid\
    \ triangle\")))\n", "  (let* ([s1 (sqrt (/ (+ a b) c))\n          s2 (sqrt (/\
    \ (+ a c) b))\n          s3 (sqrt (/ (+ b c) a))]\n        [s1s2 (sqrt (/ (+ s1\
    \ s2) c))\n          s2s3 (sqrt (/ (+ s2 s3) a))\n          s3s1 (sqrt (/ (+ s3\
    \ s1) b))])\n      (+ s1s2 s2s3 s3s1)))\n", "  (let ((a (abs a)))\n    (let ((b\
    \ (abs b)))\n      (let ((c (abs c)))\n        (if (> (+ a b) c)\n          (+\
    \ (+ (+ a b) c) (* 2.0 (abs (- a c))))\n          (-1)))\n      )))\n)\n", " \
    \ (cond\n    ((>= a b) (+ a b))\n    ((>= a c) (+ a c))\n    ((>= b c) (+ b c))\n\
    \    (else (-1)))\n)\n", "  (if (> (+ a b) c)\n    (+ (+ (+ a b) c) (* 3 0.5))\n\
    \    -1))\n", "  (if (> (+ a b) c)\n    (+ (+ a b) c)\n    (-1)))\n", "  (if (>\
    \ (+ a b) c)\n    (+ (+ (+ a b) c) (* 3 0.5))\n    -1))\n", "  (let ((s1 (sqrt\
    \ (+ (* a b) (* a c))))\n        (s2 (sqrt (+ (* b c) (* a c))))\n        (s3\
    \ (sqrt (+ (* c a) (* b c))))\n        (area (sqrt (+ (* s1 s2) (* s1 s3))))\n\
    \        (if (<= area 0.0) (-1.0) area))\n)\n", "  (if (> (+ a b) c)\n    (+ (+\
    \ (+ a b) c) (* 2.0 (/ (sqrt (+ (* a 2) (* b 2) (* c 2)) 2))))\n    -1))\n", " \
    \ (let ((s1 (sqrt (+ (* a b) (* a c))))\n        (s2 (sqrt (+ (* b c) (* a b))))\n\
    \        (s3 (sqrt (+ (* c a) (* b c))))\n        (area (+ s1 s2 s3)))\n  (if\
    \ (and (>= s1 s2) (>= s2 s3))\n    (format \"%.2f\" area)\n    (format \"Invalid\
    \ triangle\")))\n", "  (let ((s (sqrt (+ (* a b) (* a c)))))\n    (if (>= (* a\
    \ b) (* a c))\n      (+ (* a b) (* a c) (* a b) (* a c) (* a b) (* a c))\n   \
    \   (- 1 s)))\n)\n", "  (if (> (+ a b) c)\n    (+ (+ (+ a b) c) (* 2.0 (/ (sqrt\
    \ (+ (* a b) (* c c)) 2.0) 2.0)))\n    -1))\n", "  (let* ([s1 (sqrt (+ (* a b)\
    \ (* a c)))]\n         [s2 (sqrt (+ (* b c) (* a c)))]\n         [s3 (sqrt (+\
    \ (* c a) (* b a))))\n    (if (> (+ s1 s2) s3)\n      (+ s1 s2 s3)\n      (-1)))\n\
    )\n", "  (if (> (+ a b) c)\n    (+ (+ (+ a b) c) (* 2.0 (/ (sqrt (+ a b c)) 2.0))))\n\
    )\n", "  (if (> (+ a b) c)\n    (+ (+ (+ a b) c) (* 2.0 (/ (sqrt (+ (* a 2) (*\
    \ b 2) (* c 2)) 2))))\n    -1))\n", "  (let ((s (sqrt (+ (* a b) (* a c))))\n\
    \        (t (sqrt (+ (* b c) (* a b))))\n        (u (sqrt (+ (* c a) (* b c))))\n\
    \        (v (sqrt (+ (* a a) (* c b))))\n        (area (sqrt (+ (* s t) (* s u)\
    \ (* s v))))\n        (error (- area 0.5) \"Invalid triangle\")))\n", "  (let*\
    \ ([s1 (sqrt (+ (* a b) (* a c)))]\n         [s2 (sqrt (+ (* b c) (* a c)))]\n\
    \         [s3 (sqrt (+ (* c a) (* b a))))\n       (+ s1 s2 s3)))\n)\n", "  (let\
    \ ((s (sqrt (+ (* a b) (* a c)))))\n    (if (>= (* a b) (* a c))\n      (+ (*\
    \ a b) (* a c) (* a c) (* a b) (* a b) (* a c) (* a c) (* a b) (* a b) (* a c))\n\
    \      (- 1 s)))\n)\n", "  (let ((s1 (sqrt (+ (* a b) (* a c))))\n        (s2\
    \ (sqrt (+ (* b c) (* a c))))\n        (s3 (sqrt (+ (* c a) (* b c))))\n     \
    \   (area (+ s1 s2 s3)))\n  (if (<= area 0) (-1) area)))\n", "  (let ((s (sqrt\
    \ (+ (* a b) (* a c)))))\n    (if (> (* a b) (* a c))\n      (+ (* a b) (* a c)\
    \ (* a b) (* a c))\n      (- 1))))\n", "  (let ((s1 (sqrt (+ (* a b) (* a c))))\n\
    \        (s2 (sqrt (+ (* b c) (* a b))))\n        (s3 (sqrt (+ (* c a) (* b c))))\n\
    \        (area (sqrt (+ s1 s2 s3))))\n  (if (and (>= a b c) (<= area 0))\n   \
    \ area\n    (-1)))\n", "  (let ((s (sqrt (+ (* a b) (* a c)))))\n    (if (>= (*\
    \ a b) (* a c))\n      (+ (* a b) (* a c) (* a b) (* a c))\n      (-1))))\n",
  "  (cond\n    ((>= a b) (+ a b))\n    ((>= a c) (+ a c))\n    ((>= b c) (+ b c))\n\
    \    (else (-1))\n  )\n)\n", "  (let ((s1 (sqrt (+ (* a b) (* a c))))\n      \
    \  (s2 (sqrt (+ (* b c) (* a c))))\n        (s3 (sqrt (+ (* c a) (* b c))))\n\
    \        (area (sqrt (+ (* s1 s2) (* s1 s3))))\n        (if (and (>= s1 s2) (>=\
    \ s1 s3)) area\n            (else -1)))\n)\n", "  (if (> (+ a b) c)\n    (+ (+\
    \ (+ a b) c) (* 2.0 (/ (sqrt (+ (* a 2) (* b 2) (* c 2)) 2))))\n    -1))\n", " \
    \ (let ((s (sqrt (+ (* a b) (* a c)))))\n    (if (> (* a b) (* a c))\n      (+\
    \ (* a b) (* a c) (* a c) (* a b) (* a b) (* a c))\n      (- 1 s)))\n)\n", " \
    \ (let ((s (sqrt (+ (* a b) (* a c)))))\n    (if (> (* a b) (* a c))\n      (+\
    \ (* a b) (* a c) (* a b) (* a c))\n      (- 1))))\n", "  (let ((a (abs a)))\n\
    \    (let ((b (abs b)))\n      (let ((c (abs c)))\n        (if (> (+ a b) c)\n\
    \            (+ (+ (+ a b) c) (* 2.0 (sqrt (/ (+ a b) c))))\n            (-1))))))\n",
  "  (let ((a (float? a)))\n    (let ((b (float? b)))\n      (let ((c (float? c)))\n\
    \        (if (and (not (eq? a b)) (not (eq? a c)) (not (eq? b c)))\n         \
    \ (+ (* a (* b c)) (* a b) (* a c))\n          (-1))))))\n", "  (let ((s (sqrt\
    \ (+ (* a b) (* a c)))))\n    (if (>= (* a b) (* a c))\n      (+ (* a b) (* a\
    \ c) (* a b) (* a c))\n      (-1)))\n)\n", "  (if (> (+ a b) c)\n    (+ (+ (+\
    \ a b) c) (* 2.0 (/ (+ a b) c)))\n    -1))\n", "  (let ((s (sqrt (+ (* a b) (*\
    \ a c)))))\n    (if (> (* a b) (* a c))\n      (+ (* a b) (* a c) (* a b) (* a\
    \ c) (* a b) (* a c) (* a b) (* a c))\n      (- 1 s)))\n  )\n", "  (if (> (+ a\
    \ b) c)\n    (+ (+ (+ a b) c) (* 3 0.5))\n    -1))\n", "  (if (> (+ a b) c)\n\
    \    (+ a b c)\n    (-1)))\n", "  (let ((s (+ a b)))\n    (if (> s c)\n      (+\
    \ a b c)\n      (-1)))\n  )\n)\n", "  (let ((s (sqrt (+ (* a b) (* a c)))))\n\
    \    (if (> (* a b) (* a c))\n      (+ (* a b) (* a c) (* a b) (* a c) (* a b)\
    \ (* a c))\n      (- 1 s)))\n)\n", "  (let ((a (float a))\n        (b (float b))\n\
    \        (c (float c)))\n    (if (> (+ a b) c)\n      (+ (+ (+ (+ a b) c) (+ a\
    \ c)) (* 2.0 (float (- a b))))\n      (-1)))\n)\n", "  (let ((s (sqrt (+ (* a\
    \ b) (* a c))))\n        (t (sqrt (+ (* b c) (* a b))))\n        (u (sqrt (+ (*\
    \ c a) (* b c))))\n        (v (sqrt (+ (* c b) (* a c))))\n        (area (sqrt\
    \ (+ (* s t) (* s u) (* s v))))\n        (area (sqrt (+ (* t u) (* t v) (* u v))))\n\
    \        (area (sqrt (+ (* u v) (* u v))))\n        (area (sqrt (+ (* v v) (*\
    \ t v))))\n        (area (sqrt (+ (* v t) (* t t))))\n        (area (sqrt (+ (*\
    \ t t) (* u t))))\n        (area (sqrt (+ (* t u) (* u u))))\n        (area (sqrt\
    \ (+ (* u u) (* v u))))\n        (area (sqrt (+ (* v u) (* v u))))\n        (area\
    \ (sqrt (+ (* v v) (* t v))))\n        (area (sqrt (+ (* v t) (* t t))))\n   \
    \     (area (sqrt (+ (* t t) (* u t))))\n        (area (sqrt (+ (* t u) (* u u))))\n\
    \        (area (sqrt (+ (* u u) (* v u))))\n        (area (sqrt (+ (* v u) (*\
    \ v u))))\n        (area (sqrt (+ (* v v) (* t v))))\n        (area (sqrt (+ (*\
    \ v t) (* t t))))\n        (area (sqrt (+ (* t t) (* u t))))\n        (area (sqrt\
    \ (+ (* t u) (* u u))))\n        (area (sqrt (+ (* u u) (* v u))))\n        (area\
    \ (sqrt (+ (* v u) (* v u))))\n        (area (sqrt (+ (* v v) (* t v))))\n   \
    \     (area (sqrt (+ (* v t) (* t t))))\n        (area (sqrt (+ (* t t) (* u t))))\n\
    \        (area (sqrt (+ (* t u) (* u u))))\n        (area (sqrt (+ (* u u) (*\
    \ v u))))\n        (area (sqrt (+ (* v u) (* v u))))\n        (area (sqrt", " \
    \ (if (> (+ a b) c)\n    (+ (+ (+ a b) c) (* 2.0 (/ (+ a b) c))))\n  -1)\n", " \
    \ (let ((s (sqrt (+ (* a b) (* a c))))\n        (t (sqrt (+ (* b c) (* a b))))\n\
    \        (u (sqrt (+ (* c a) (* b c))))\n        (v (sqrt (+ (* c b) (* a c))))\n\
    \        (area (sqrt (+ (* s t) (* s u) (* s v))))\n        (error (- area 0.01)\
    \ \"Invalid triangle\")))\n", "  (let ((s1 (sqrt (+ (* a b) (* a c))))\n     \
    \   (s2 (sqrt (+ (* b c) (* a c))))\n        (s3 (sqrt (+ (* c a) (* b c))))\n\
    \        (area (sqrt (+ (* s1 s2) (* s1 s3))))\n        (if (eq? (round area)\
    \ area)\n            area\n            (-1)))\n)\n", "  (let* ([s1 (sqrt (+ (*\
    \ a b) (* a c)))]\n         [s2 (sqrt (+ (* b c) (* a b)))]\n         [s3 (sqrt\
    \ (+ (* c a) (* b c))))\n        [area (sqrt (+ s1 s2 s3))])\n  (if (>= s1 s2\
    \ s3)\n    area\n    (-1)))\n", "  (if (> (+ a b) c)\n    (+ (+ (+ a b) c) (*\
    \ 2.0 (/ (sqrt (+ (* a 2) (* b 2) (* c 2)) 2))))\n    -1))\n", "  (let ((a (abs\
    \ a))\n        (b (abs b))\n        (c (abs c)))\n    (if (> (+ a b) c)\n    \
    \  (+ (+ (+ a b) c) (* 3 0.5))\n      (-1)))\n)\n", "  (cond\n    ((>= a b) (+\
    \ a b))\n    ((>= a c) (+ a c))\n    ((>= b c) (+ b c))\n    (else (-1))\n  )\n\
    )\n", "  (let* ([s1 (abs (+ a b))]\n         [s2 (abs (+ a c))]\n         [s3\
    \ (abs (+ b c))]\n         [s (s1 + s2 + s3)]\n         [a (if (>= s c) (if (>=\
    \ s b) (if (>= s a) (s / 2) (a / 2)) (a / 2)) (a / 2))]\n         [b (if (>= s\
    \ a) (if (>= s b) (if (>= s c) (s / 2) (b / 2)) (b / 2)) (b / 2))]\n         [c\
    \ (if (>= s b) (if (>= s a) (if (>= s c) (s / 2) (c / 2)) (c / 2)) (c / 2))]\n\
    \         [area (if (>= s c) (s / 2) (if (>= s b) (s / 2) (if (>= s a) (s / 2)\
    \ (a / 2)) (b / 2)) (c / 2))]\n         )\n  (if (>= s 0) (format \"~a\" area)\
    \ (format \"~a\" -1))\n)\n)\n", "  (let ((s1 (sqrt (+ (* a b) (* a c))))\n   \
    \     (s2 (sqrt (+ (* b c) (* a b))))\n        (s3 (sqrt (+ (* c a) (* b c))))\n\
    \        (area (sqrt (+ (* s1 s2) (* s2 s3))))\n        (if (and (>= (* a b) (*\
    \ a c)) (>= (* b c) (* a b)) (>= (* c a) (* b c)) area)\n          area\n    \
    \      (-1)))\n)\n", "  (let ((a (float a)))\n    (let ((b (float b)))\n     \
    \ (let ((c (float c)))\n        (if (> (+ a b) c)\n          (+ (+ (+ (+ (+ a\
    \ b) c) (+ a c)) b) c)\n          (-1)))\n      )))\n)\n", "  (cond\n    ((>=\
    \ a b) (>= b c))\n    ((>= a c) (>= b c))\n    ((>= a b) (>= c b))\n    ((>= a\
    \ c) (>= b c))\n    (else -1)\n  )\n)\n", "  (if (> (+ a b) c)\n    (+ (+ (+ a\
    \ b) c) (* 2.0 (/ (sqrt (+ (* a 2) (* b 2) (* c 2)) 2))))\n    -1))\n", "  (let\
    \ ((s1 (sqrt (+ (* a b) (* a c))))\n        (s2 (sqrt (+ (* b c) (* a b))))\n\
    \        (s3 (sqrt (+ (* c a) (* b c))))\n        (area (sqrt (+ s1 s2 s3))))\n\
    \  (if (and (>= (* a b) (* a c)) (>= (* b c) (* a b)) (>= (* c a) (* b c)))\n\
    \    (round/to 2.0 area)\n    (-1)))\n", "  (let ((s (sqrt (+ (* a b) (* a c))))\n\
    \        (t (sqrt (+ (* b c) (* a b) (* c a))))\n        (u (sqrt (+ (* c a) (*\
    \ b c))))\n        (v (sqrt (+ (* a a) (* c b))))\n        (w (sqrt (+ (* b b)\
    \ (* a c))))\n        (x (sqrt (+ (* c c) (* b a))))\n        (y (sqrt (+ (* a\
    \ b) (* b c))))\n        (z (sqrt (+ (* b b) (* c a))))\n        (a (sqrt (+ (*\
    \ c c) (* a b))))\n        (b (sqrt (+ (* a a) (* c b))))\n        (c (sqrt (+\
    \ (* b b) (* a c))))\n        (area (sqrt (+ (* a a) (* b b) (* c c))))\n    \
    \    (valid (and (>= (* a b) (* a c)) (>= (* b c) (* a b)) (>= (* c a) (* b c))\
    \ (>= (* a a) (* c b)) (>= (* b b) (* a c)) (>= (* c c) (* b a)) (>= (* a b) (*\
    \ b c)) (>= (* b b) (* c a)) (>= (* c c) (* a b)))))\n        (area (if (valid)\
    \ (+ (* a b) (* a c) (* b c) (* c a) (* a a) (* b b) (* c c) (* b a) (* c b) (*\
    \ a c)) (-1))))\n  (if (valid) (+ (* a b) (* a c) (* b c) (* c a) (* a a) (* b\
    \ b) (* c c) (* b a) (* c b) (* a c)) (-1))))\n", "  (let ((s (sqrt (+ (* a b)\
    \ (* a c)))))\n    (if (> (* a b) (* a c))\n      (+ (* a b) (* a c) (* a b) (*\
    \ a c) (* a b) (* a c) (* a b) (* a c) (* a b) (* a c) (* a b) (* a c) (* a b)\
    \ (* a c) (* a b) (* a c) (* a b) (* a c) (* a b) (* a c) (* a b) (* a c) (* a\
    \ b) (* a c) (* a b) (* a c) (* a b) (* a c) (* a b) (* a c) (* a b) (* a c) (*\
    \ a b) (* a c) (* a b) (* a c) (* a b) (* a c) (* a b) (* a c) (* a b) (* a c)\
    \ (* a b) (* a c) (* a b) (* a c) (* a b) (* a c) (* a b) (* a c) (* a b) (* a\
    \ c) (* a b) (* a c) (* a b) (* a c) (* a b) (* a c) (* a b) (* a c) (* a b) (*\
    \ a c) (* a b) (* a c) (* a b) (* a c) (* a b) (* a c) (* a b) (* a c) (* a b)\
    \ (* a c) (* a b) (* a c) (* a b) (* a c) (* a b) (* a c) (* a b) (* a c) (* a\
    \ b) (* a c) (* a b) (* a c) (* a b) (* a c) (* a b) (* a c) (* a b) (* a c) (*\
    \ a b) (* a c) (* a b) (* a c) (* a b) (* a c) (* a b) (* a c) (* a b) (* a c)\
    \ (* a b) (* a c) (* a b) (* a c) (* a b) (* a c) (* a b) (* a c) (* a b) (* a\
    \ c) (* a b) (* a c) (* a b) (* a c) (* a b) (* a c) (* a b) (* a c) (* a b) (*",
  "  (let ((s1 (sqrt (+ (* a b) (* a c))))\n        (s2 (sqrt (+ (* b c) (* a b))))\n\
    \        (s3 (sqrt (+ (* c a) (* b c))))\n        (area (sqrt (+ (* s1 s2) (*\
    \ s2 s3))))\n        (if (eq? (abs area) 0.0)\n          (-1)\n          area))\n\
    )\n", "  (if (> (+ a b) c)\n    (+ (+ (+ a b) c) (* 2.0 0.5))\n    -1))\n", " \
    \ (let ((s (sqrt (+ (* a b) (* a c))))\n        (t (sqrt (+ (* b c) (* a b))))\n\
    \        (u (sqrt (+ (* c a) (* b c))))\n        (v (sqrt (+ (* c b) (* a c))))\n\
    \        (area (sqrt (+ (* s t) (* s u) (* s v))))\n        (area (sqrt (+ (*\
    \ t u) (* t v) (* u v))))\n        (area (sqrt (+ (* u v) (* u s) (* v s))))\n\
    \        (area (sqrt (+ (* v s) (* v t) (* s t))))\n        (area (sqrt (+ (*\
    \ v t) (* v u) (* t u))))\n        (area (sqrt (+ (* u u) (* u s) (* s s))))\n\
    \        (area (sqrt (+ (* t t) (* t u) (* u u))))\n        (area (sqrt (+ (*\
    \ s s) (* s t) (* t t))))\n        (area (sqrt (+ (* v v) (* v s) (* s s))))\n\
    \        (area (sqrt (+ (* u u) (* u v) (* v v))))\n        (area (sqrt (+ (*\
    \ t t) (* t v) (* v v))))\n        (area (sqrt (+ (* s s) (* s v) (* v v))))\n\
    \        (area (sqrt (+ (* v v) (* v t) (* t t))))\n        (area (sqrt (+ (*\
    \ u u) (* u t) (* t t))))\n        (area (sqrt (+ (* t t) (* t u) (* u u))))\n\
    \        (area (sqrt (+ (* s s) (* s u) (* u u))))\n        (area (sqrt (+ (*\
    \ v v) (* v u) (* u u))))\n        (area (sqrt (+ (* u u) (* u v) (* v v))))\n\
    \        (area (sqrt (+ (* t t) (* t v) (* v v))))\n        (area (sqrt (+ (*\
    \ s s) (* s v) (* v v))))\n        (area (sqrt (+ (* v v) (* v t) (* t t))))\n\
    \        (area (sqrt (+ (* u u) (* u t) (* t t))))\n        (area (sqrt", "  (let*\
    \ ((a (abs a))\n         (b (abs b))\n         (c (abs c)))\n    (+ (+ a b) c)))\n",
  "  (let ((a (abs a)))\n    (let ((b (abs b)))\n      (let ((c (abs c)))\n      \
    \  (if (> (+ a b) c)\n            (+ (+ (+ a b) c) (* 2.0 (/ a b c))))\n     \
    \   (-1))))\n)\n", "  (let ((a (float? a)))\n    (let ((b (float? b)))\n     \
    \ (let ((c (float? c)))\n        (if (> (+ a b) c)\n            (+ (+ (+ a b)\
    \ c) (* 2.0 (float? a))))\n        (if (> (+ b c) a)\n            (+ (+ (+ b c)\
    \ a) (* 2.0 (float? b))))\n        (if (> (+ c a) b)\n            (+ (+ (+ c a)\
    \ b) (* 2.0 (float? c))))\n        (if (> (+ a c) b)\n            (+ (+ (+ a c)\
    \ b) (* 2.0 (float? a))))\n        (if (> (+ b a) c)\n            (+ (+ (+ b a)\
    \ c) (* 2.0 (float? b))))\n        (if (> (+ c b) a)\n            (+ (+ (+ c b)\
    \ a) (* 2.0 (float? c))))\n        (if (> (+ a b) c)\n            (+ (+ (+ a b)\
    \ c) (* 2.0 (float? a))))\n        (if (> (+ b c) a)\n            (+ (+ (+ b c)\
    \ a) (* 2.0 (float? b))))\n        (if (> (+ c a) b)\n            (+ (+ (+ c a)\
    \ b) (* 2.0 (float? c))))\n        (if (> (+ a c) b)\n            (+ (+ (+ a c)\
    \ b) (* 2.0 (float? a))))\n        (if (> (+ b a) c)\n            (+ (+ (+ b a)\
    \ c) (* 2.0 (float? b))))\n        (if (> (+ c b) a)\n            (+ (+ (+ c b)\
    \ a) (* 2.0 (float? c))))\n        (if (> (+ a c) b)\n            (+ (+ (+ a c)\
    \ b) (* 2.0 (float? a))))\n        (if (> (+ b c) a)\n            (+ (+ (+ b c)\
    \ a) (* 2.0 (float? b))))\n        (if (> (+ c a) b)\n            (+ (+ (+ c a)\
    \ b) (* 2.0 (float? c))))\n        (if (> (+ a b) c)\n            (+", "  (cond\n\
    \    ((>= a b) (+ a b))\n    ((>= a c) (+ a c))\n    ((>= b c) (+ b c))\n    (else\
    \ (-1))\n  )\n)\n", "  (let ((s (sqrt (+ (* a b) (* a c))))\n        (t (sqrt\
    \ (+ (* b c) (* a b))))\n        (u (sqrt (+ (* c a) (* b c))))\n        (v (sqrt\
    \ (+ (* c b) (* a c))))\n        (w (sqrt (+ (* a a) (* b b))))\n        (x (sqrt\
    \ (+ (* b b) (* c c))))\n        (y (sqrt (+ (* c c) (* a a))))\n        (z (sqrt\
    \ (+ (* a b) (* c c))))\n        (a (sqrt (+ (* b c) (* a c))))\n        (b (sqrt\
    \ (+ (* c a) (* b c))))\n        (c (sqrt (+ (* a b) (* c a))))\n        (area\
    \ (sqrt (+ (* a b) (* c b))))\n        (area1 (sqrt (+ (* b c) (* a b))))\n  \
    \      (area2 (sqrt (+ (* c a) (* b c))))\n        (area3 (sqrt (+ (* a c) (*\
    \ b a))))\n        (area4 (sqrt (+ (* b a) (* c a))))\n        (area5 (sqrt (+\
    \ (* c b) (* a a))))\n        (area6 (sqrt (+ (* a a) (* c b))))\n        (area7\
    \ (sqrt (+ (* b b) (* a a))))\n        (area8 (sqrt (+ (* a b) (* c b))))\n  \
    \      (area9 (sqrt (+ (* b a) (* a c))))\n        (area10 (sqrt (+ (* c a) (*\
    \ b a))))\n        (area11 (sqrt (+ (* a c) (* b b))))\n        (area12 (sqrt\
    \ (+ (* b b) (* c a))))\n        (area13 (sqrt (+ (* c b) (* a b))))\n       \
    \ (area14 (sqrt (+ (* a b) (* c b))))\n        (area15 (sqrt (+ (* b a) (* c b))))\n\
    \        (area16 (sqrt (+ (* c a) (* b b))))\n        (area17 (sqrt (+ (* a c)\
    \ (* b b))))\n        (area18 (sqrt (+ (* b b) (* c b))))\n        (area19 (sqrt\
    \ (+ (* c b)", "  (if (> (+ a b) c)\n    (+ (+ (+ a b) c) (* 2.0 (/ (+ a b) c))))\n\
    \  -1)\n", "  (let ((s (sqrt (+ (* a b) (* a c)))))\n    (if (> (* a b) (* a c))\n\
    \      (+ (* a b) (* a c) (* a b) (* a c) (* a b) (* a c) (* a b) (* a c) (* a\
    \ b) (* a c) (* a b) (* a c) (* a b) (* a c) (* a b) (* a c) (* a b) (* a c) (*\
    \ a b) (* a c) (* a b) (* a c) (* a b) (* a c) (* a b) (* a c) (* a b) (* a c)\
    \ (* a b) (* a c) (* a b) (* a c) (* a b) (* a c) (* a b) (* a c) (* a b) (* a\
    \ c) (* a b) (* a c) (* a b) (* a c) (* a b) (* a c) (* a b) (* a c) (* a b) (*\
    \ a c) (* a b) (* a c) (* a b) (* a c) (* a b) (* a c) (* a b) (* a c) (* a b)\
    \ (* a c) (* a b) (* a c) (* a b) (* a c) (* a b) (* a c) (* a b) (* a c) (* a\
    \ b) (* a c) (* a b) (* a c) (* a b) (* a c) (* a b) (* a c) (* a b) (* a c) (*\
    \ a b) (* a c) (* a b) (* a c) (* a b) (* a c) (* a b) (* a c) (* a b) (* a c)\
    \ (* a b) (* a c) (* a b) (* a c) (* a b) (* a c) (* a b) (* a c) (* a b) (* a\
    \ c) (* a b) (* a c) (* a b) (* a c) (* a b) (* a c) (* a b) (* a c) (* a b) (*\
    \ a c) (* a b) (* a c) (* a b) (* a c) (* a b) (* a c) (* a b) (* a c) (* a b)\
    \ (* a c) (* a b) (* a c) (* a b) (*", "  (if (> (+ a b) c)\n    (+ (+ (+ a b)\
    \ c) (* 3 0.5))\n    -1))\n", "  (let ((s (sqrt (+ (* a b) (* a c))))\n      \
    \  (t (sqrt (+ (* b c) (* a b) (* c a))))\n        (area (if (>= s t) (+ s t)\
    \ (- s t))))\n  area))\n", "  (if (> (+ a b) c)\n    (+ (+ (+ a b) c) (* 2.0 (/\
    \ (+ a b) c))))\n  -1)\n", "  (let ((s (sqrt (+ (* a b) (* a c)))))\n    (if (>\
    \ (* a b) (* a c))\n      (+ (* a b) (* a c) (* a b) (* a c) (* a b) (* a c))\n\
    \      (- 1 s)))\n)\n", "  (let ((s1 (sqrt (+ (* a b) (* a c)))))\n    (let ((s2\
    \ (sqrt (+ (* b c) (* a c)))))\n      (let ((s3 (sqrt (+ (* c a) (* b a))))\n\
    \            (area (sqrt (+ (* s1 s2) (* s2 s3)))))))\n    area))\n", "  (if (>\
    \ (+ a b) c)\n    (+ (+ (+ a b) c) (* 3 0.5))\n    -1))\n", "  (if (> (+ a b)\
    \ c)\n    (+ (+ (+ a b) c) (* 2.0 (/ (+ a b) c))))\n  -1)\n", "  (if (> (+ a b)\
    \ c)\n    (+ (+ a b) c)\n    (-1)))\n", "  (if (> (+ a b) c)\n    (+ (+ (+ a b)\
    \ c) (* 2.0 (/ (+ a b) c))))\n  -1)\n", "  (if (> (+ a b) c)\n    (+ (+ (+ a b)\
    \ c) (* 3 0.5))\n    -1))\n", "  (if (> (+ a b) c)\n    (+ (+ (+ a b) c) (* 2.0\
    \ 0.5))\n    -1))\n", "  (let ((a (abs a))\n        (b (abs b))\n        (c (abs\
    \ c)))\n    (if (>= a b) (>= b c) (+ a (+ b c)))))\n", "  (if (> (+ a b) c)\n\
    \    (+ (+ (+ a b) c) (* 2.0 (/ (sqrt (+ (* a 2) (* b 2) (* c 2)) 2))))\n    -1))\n",
  "  (let ((s (sqrt (+ (* a b) (* a c)))))\n    (if (> (* a b) (* a c))\n      (+\
    \ (* a b) (* a c) (* a b) (* a c) (* a b) (* a c))\n      (- 1 s)))\n)\n", " \
    \ (if (> (+ a b) c)\n    (+ (+ (+ a b) c) (* 2.0 0.5))\n    -1))\n", "  (let ((s1\
    \ (sqrt (+ (* a b) (* a c))))\n        (s2 (sqrt (+ (* b c) (* a b))))\n     \
    \   (s3 (sqrt (+ (* c a) (* b c))))\n        (area (sqrt (+ (* s1 s2) (* s1 s3))))\n\
    \        (error (- area 0.01) \"Invalid triangle\")))\n", "  (if (> (+ a b) c)\n\
    \    (+ (+ (+ a b) c) (* 2.0 (/ (+ a b) c))))\n  -1)\n", "  (if (> (+ a b) c)\n\
    \    (+ (+ (+ a b) c) (* 2.0 (/ (sqrt (+ a b c)) 2.0))))\n)\n", "  (let* ([s1\
    \ (sqrt (+ (* a b) (* a c)))]\n         [s2 (sqrt (+ (* b c) (* a b)))]\n    \
    \     [s3 (sqrt (+ (* c a) (* b c))))\n        [area (sqrt (+ (* s1 s2) (* s1\
    \ s3))))\n        [valid (and (>= s1 s2) (>= s2 s3) (>= s1 s3) (= (+ s1 s2) s3))]\n\
    \        [result (-1.0)])\n  (if valid\n    (if (not (zero? area))\n      (format\
    \ \"~f\" area)\n      (format \"~f\" area)))\n  (else\n    (format \"~f\" -1.0)))\n",
  "  (let ((s (sqrt (+ (* a b) (* a c)))))\n    (if (>= (* a b) (* a c))\n      (+\
    \ (* a b) (* a c) (* a b) (* a c) (* a b) (* a c))\n      (- 1 s)))\n)\n", " \
    \ (let ((a (abs a))\n        (b (abs b))\n        (c (abs c)))\n    (if (> (+\
    \ a b) c)\n      (+ (+ (+ a b) c) (* 2.0 (/ (sqrt (+ a b c)) 2.0))))))\n", " \
    \ (let ((a (abs a)))\n    (let ((b (abs b)))\n      (let ((c (abs c)))\n     \
    \   (if (> (+ a b) c)\n            (+ (+ (+ a b) c) (* a b) / 2)\n           \
    \ (-1)))\n      )))\n)\n", "  (let ((s (sqrt (+ (* a b) (* a c))))\n        (t\
    \ (sqrt (+ (* b c) (* a b))))\n        (u (sqrt (+ (* c a) (* b c))))\n      \
    \  (v (sqrt (+ (* c b) (* a c))))\n        (area (sqrt (+ (* s t) (* s u) (* s\
    \ v))))\n        (valid (and (>= (* a b) (* a c)) (>= (* b c) (* a b)) (>= (*\
    \ c a) (* b c)) (>= (* c b) (* a c)))))\n        (if valid\n          (format\
    \ \"~f\" area)\n          (format \"~f\" -1)))\n)\n", "  (let ((a (abs a))\n \
    \       (b (abs b))\n        (c (abs c)))\n    (if (> (+ a b) c)\n      (+ (+\
    \ a b) c)\n      (-1)))\n)\n", "  (let ((s (sqrt (+ (* a b) (* a c)))))\n    (if\
    \ (> (* a b) (* a c))\n      (+ (* a b) (* a c) (* a c) (* a b) (* a b) (* a c))\n\
    \      (- 1 s)))\n)\n", "  (if (> (+ a b) c)\n    (+ (+ (+ a b) c) (* 2.0 (/ (+\
    \ a b) c))))\n  -1)\n", "  (let ((s1 (sqrt (+ (* a b) (* a c))))\n        (s2\
    \ (sqrt (+ (* b c) (* a b))))\n        (s3 (sqrt (+ (* c a) (* b c))))\n     \
    \   (area (sqrt (+ s1 s2 s3))))\n  (if (and (>= s1 s2) (>= s2 s3))\n      area\n\
    \      (-1)))\n", "  (let ((s (sqrt (+ (* a b) (* a c)))))\n    (if (> (* a b)\
    \ (* a c))\n      (+ (* a b) (* a c) (* a c) (* a b) (* a b) (* a c))\n      (-\
    \ 1 s)))\n)\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
