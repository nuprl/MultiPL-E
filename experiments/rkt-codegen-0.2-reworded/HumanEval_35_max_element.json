{
  "name": "HumanEval_35_max_element",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Return maximum element in the list.\n;; >>> (max_element (list 1 2 3))\n;; 3\n;; >>> (max_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; 123\n(define (max_element l)\n",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_element))\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 5 3 -5 2 -3 3 9 0 124 1 -10)) 124)\n))\n\n(test-humaneval)",
  "completions": [
    "  (cond\n    [(null? l)\n      (throw \"No arguments\")]\n    [(pair? l)\n      (cond\n        [(null? (cdr l))\n          (throw \"No arguments\")]\n        [(null? (car l))\n          (throw \"No arguments\")]\n        [(car l)\n          (car (max_element (cdr l)))]]\n      [(cdr l)\n        (car (max_element (cdr l)))])\n    [(number? l)\n      (if (negative? l)\n          (- l)\n          (if (zero? l)\n              0\n              (if (positive? l)\n                  l\n                  (if (even? l)\n                      (/ l 2)\n                      (throw \"Invalid argument\")]))))])\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"Can't find maximum element in an empty list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (max max)\n            (max_element (cdr l))))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    ((null? l) 0)\n    ((null? (cdr l)) (car l))\n    (else\n      (cond\n        ((null? (cdr (cdr l))) (car (cdr l)))\n        (else\n          (car (cdr (cdr l)))\n          (max_element (cdr l))))))))\n",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [(null? (car l))\n      (error \"max_element: empty list\")]\n    [(null? (cdr l))\n      (error \"max_element: empty list\")]\n    [(null? (car (cdr l)))\n      (error \"max_element: empty list\")]\n    [(null? (cdr (cdr l)))\n      (error \"max_element: empty list\")]\n    [(car (car l))\n      (cdr l)]\n    [(car (cdr l))\n      (cdr l)]\n    [(car (car (cdr l)))\n      (cdr (cdr l))]\n    [(car (car (cdr (cdr l))))\n      (cdr (cdr (cdr l)))])\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    ((null? l) 0)\n    ((> (car l) (cdr l)) (car l))\n    (else (max_element (cdr l))))\n)\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"Can't find maximum element in empty list\")]\n    [else\n      (car l)\n      (max_element (cdr l))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"Cannot take max of an empty list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (max max)\n            (max_element (cdr l))))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    ((null? l) 0)\n    ((null? (cdr l)) (car l))\n    (else\n      (cond\n        ((null? (cdr (cdr l))) (car (cdr l)))\n        (else\n          (car (cdr (cdr l)))\n          (max_element (cdr l))))))))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"Cannot take max of an empty list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (car max)\n            (max_element (cdr l))\n          )\n      )\n    ]\n  )\n)\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No arguments to max_element\")]\n    [(null? (car l))\n      (throw \"Car of list is null\")]\n    [(null? (cdr l))\n      (throw \"Cdr of list is null\")]\n    [(null? (car (cdr l)))\n      (throw \"Car of cdr of list is null\")]\n    [(null? (cdr (cdr l)))\n      (throw \"Cdr of cdr of list is null\")]\n    [(null? (car (cdr (cdr l))))\n      (throw \"Car of cdr of cdr of list is null\")]\n    [(null? (cdr (cdr (cdr l))))\n      (throw \"Cdr of cdr of cdr of list is null\")]\n    [(null? (car (cdr (cdr (cdr l)))))]\n    [(null? (cdr (cdr (cdr (cdr l)))))]\n    [(null? (car (cdr (cdr (cdr (cdr l))))))]\n    [(null? (cdr (cdr (cdr (cdr (cdr l))))))]\n    [(null? (car (cdr (cdr (cdr (cdr (cdr l))))))))]\n    [(null? (cdr (cdr (cdr (cdr (cdr (cdr l))))))))]\n    [(null? (car (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))]\n    [(null? (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))]\n    [(null? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))]\n    [(null? (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))]\n    [(null? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))))]\n    ",
    "  (cond\n    [(null? l)\n      (throw \"No elements\")]\n    [(null? (cdr l))\n      (throw \"No elements\")]\n    [(null? (car l))\n      (throw \"No elements\")]\n    [(null? (car (cdr l)))\n      (throw \"No elements\")]\n    [(null? (car (cdr (cdr l))))\n      (throw \"No elements\")]\n    [(null? (car (cdr (cdr (cdr l)))))]\n    [(car (car l))\n      (car (car (cdr l)))\n      (car (car (cdr (cdr l))))\n      (car (car (cdr (cdr (cdr l)))))]\n    [(car (car (car l)))\n      (car (car (car (cdr l))))\n      (car (car (car (cdr l))))\n      (car (car (car (cdr l))))]\n    [(car (car (car (car l))))\n      (car (car (car (car (cdr l)))))]\n    [(car (car (car (car (car l)))))]\n    [(car (car (car (car (car (car l))))))]\n    [(car (car (car (car (car (car (car l)))))))]]\n    [(car (car (car (car (car (car (car (car l))))))))]\n    [(car (car (car (car (car (car (car (car (car l)))))))))]\n    [(car (car (car (car (car (car (car (car (car (car l))))))))))]\n    [(car (car (car (car (car (car (car (car (car (car (car l)))))))))))]\n    [(car (car (car (car (car (car (car (car (car (car (car (car l))))))))))))]\n    [(car (car (car (car (car (car (car (car (car (car (car (car (car (car l))))))))))))))]\n    [(car (car (car (car (car (car (car (car (car (car",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [else\n      (let* ([(max) (car l)])\n        (if (null? (cdr l))\n            (max)\n            (if (> (car l) max)\n                (max)\n                (max_element (cdr l)))))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    ((null? l) 0)\n    ((null? (cdr l)) l)\n    (else\n      (if (null? (cdr (cdr l)))\n          (car l)\n          (max_element (cdr l))))))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (max max)\n            (max_element (cdr l))\n          )\n      )\n    ]\n  )\n)\n",
    "  (cond\n    [(null? l)\n      (throw \"No arguments\")]\n    [(null? (cdr l))\n      (throw \"Only one argument\")]\n    [(null? (car l))\n      (throw \"Only one element in the list\")]\n    [(null? (car (cdr l)))\n      (throw \"Only one element in the list\")]\n    [(null? (car (cdr (cdr l))))\n      (throw \"Only one element in the list\")]\n    [(null? (car (cdr (cdr (cdr l)))))]\n    [(null? (car (cdr (cdr (cdr (cdr l))))))]\n    [(null? (car (cdr (cdr (cdr (cdr (cdr l))))))))]\n    [(null? (car (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))]\n    [(null? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))]\n    [(null? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))))]\n    [(null? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))))]\n    [(null? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))))))]\n    [(null? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))))))]\n    [(null? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))))))))]\n    [(null? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (car max)\n            (max_element (cdr l))))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (max max)\n            (max_element (cdr l))\n          )\n      )\n    ]\n  )\n)\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    ((null? l) 0)\n    ((null? (cdr l)) (car l))\n    (else\n      (cond\n        ((> (car l) (car (cdr l))) (car l))\n        ((< (car l) (car (cdr l))) (cdr l))\n        (else (car l) (cdr l))\n      )\n    )\n  )\n)\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"Can't find maximum element in empty list\")]\n    [else\n      (car l)\n      (max_element (cdr l))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No elements in list\")]\n    [(null? (cdr l))\n      (throw \"Only one element in list\")]\n    [(null? (car l))\n      (throw \"Only one element in list\")]\n    [(null? (car (cdr l)))\n      (throw \"Only one element in list\")]\n    [(car (cdr (cdr l)))\n      (car (cdr (cdr (cdr l))))]\n    [(car (cdr (cdr (cdr (cdr l)))))]\n    [(car (cdr (cdr (cdr (cdr (cdr l))))))]\n    [(car (cdr (cdr (cdr (cdr (cdr (cdr l))))))))]\n    [(car (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))]\n    [(car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))]\n    [(car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))))]\n    [(car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))))]\n    [(car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))))))]\n    [(car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))))))]\n    [(car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))))))))]\n    [(car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (c",
    "  (cond\n    [(null? l)\n      (error 'max_element \"The list is empty.\")]\n    [else\n      (let* ([max (first l)])\n        (for-each (lambda (x)\n                   (if (eq? x max)\n                       (set! max x)\n                       (set! max max)))\n          l))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (car l)\n            (if (null? (cdr (cdr l)))\n                (max max)\n                (max_element (cdr l)))))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No elements in list\")]\n    [(null? (cdr l))\n      (throw \"Only one element in list\")]\n    [(null? (car l))\n      (throw \"Only one element in list\")]\n    [(null? (car (cdr l)))\n      (throw \"Only one element in list\")]\n    [(null? (car (cdr (cdr l))))\n      (throw \"Only one element in list\")]\n    [(null? (car (cdr (cdr (cdr l)))))]\n    [(car l)])\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"The list is empty!\")\n      ]\n    [(null? (cdr l))\n      (error \"The list is empty!\")\n      ]\n    [(car l)\n      (car l)\n      ]\n    ))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    ((null? l) 0)\n    ((null? (cdr l)) (car l))\n    (else\n      (if (> (car l) (max_element (cdr l)))\n          (car l)\n          (max_element (cdr l))))))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [(pair? l)\n      (if (null? (cdr l))\n          (car l)\n          (max_element (cdr l)))]\n    [else\n      (car l)]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l) (error 'max_element \"Cannot find maximum element in empty list\")]\n    [(null? (cdr l)) (car l)]\n    [else (max (car l) (max_element (cdr l))))))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No elements in list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (max max)\n            (if (> (car l) max)\n                (max (car l))\n                (max max))))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"Can't find maximum element in empty list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (car l)\n            (if (null? (cdr (cdr l)))\n                (max max)\n                (max_element (cdr l)))))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"max_element: argument is empty\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (max max)\n            (max_element (cdr l))))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (car max)\n            (max_element (cdr l))))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No elements in list\")]\n    [(null? (cdr l))\n      (throw \"Only one element in list\")]\n    [(null? (car l))\n      (throw \"Only one element in list\")]\n    [(null? (car (cdr l)))\n      (throw \"Only one element in list\")]\n    [(car (car l))\n      (car (cdr l))]\n    [(car (car (cdr l)))\n      (car (cdr (cdr l)))]\n    [(car (car (cdr (cdr l))))\n      (car (cdr (cdr (cdr l))))]\n    [(car (car (cdr (cdr (cdr l))))))\n      (car (cdr (cdr (cdr (cdr l))))))]\n    [(car (car (cdr (cdr (cdr (cdr l))))))\n      (car (cdr (cdr (cdr (cdr (cdr l)))))))]\n    [(car (car (cdr (cdr (cdr (cdr (cdr l))))))))\n      (car (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))]\n    [(car (car (cdr (cdr (cdr (cdr (cdr (cdr l))))))))\n      (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))]\n    [(car (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))\n      (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))))]\n    [(car (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))))]\n    [(car (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))))))]\n    [(car (car (cdr (cdr",
    "  (cond\n    ((null? l)\n      (throw \"No elements in list\")))\n    ((null? (cdr l))\n      (throw \"Only one element in list\"))\n    (else\n      (if (null? (car l))\n        (cdr l)\n        (max_element (cdr l))))))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    ((null? l) 0)\n    ((null? (cdr l)) (car l))\n    (else\n      (cond\n        ((> (car l) (car (cdr l))) (car l))\n        ((< (car l) (car (cdr l))) (cdr l))\n        (else (car l) (cdr l))\n      )\n    )\n  )\n)\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    ((null? l) 0)\n    ((null? (cdr l)) (car l))\n    (else\n      (cond\n        ((> (car l) (car (cdr l))) (car l))\n        ((< (car l) (car (cdr l))) (cdr l))\n        (else (car l) (cdr l))\n      )\n    )\n  )\n)\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No elements in list\")]\n    [(null? (cdr l))\n      (throw \"Only one element in list\")]\n    [(null? (car l))\n      (throw \"Only one element in list\")]\n    [(null? (car (cdr l)))\n      (throw \"Only one element in list\")]\n    [(null? (car (cdr (cdr l))))\n      (throw \"Only one element in list\")]\n    [(car (car l))\n      (car (car (cdr l)))\n      (max_element (cdr l))]\n    [(car (car (cdr (cdr l))))\n      (car (car (cdr (cdr l))))\n      (max_element (cdr (cdr l)))])\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (car max)\n            (max_element (cdr l))\n          )\n      )\n    ]\n  )\n)\n",
    "  (cond\n    [(null? l)\n      (throw \"No elements in list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (max max)\n            (if (null? (cdr (cdr l)))\n                (max max)\n                (max_element (cdr l)))))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No arguments\")]\n    [(null? (cdr l))\n      (throw \"Only one argument\")]\n    [(null? (car l))\n      (throw \"Only one argument\")]\n    [(null? (car (cdr l)))\n      (throw \"Only one argument\")]\n    [(null? (car (cdr (cdr l))))\n      (throw \"Only one argument\")]\n    [(null? (car (cdr (cdr (cdr l)))))]\n    [(car (car l))\n      (cdr (car l))\n      (max_element (cdr l))]\n    [(car (car (cdr l)))\n      (cdr (car (cdr l)))\n      (max_element (cdr (cdr l)))]\n    [(car (car (cdr (cdr l))))\n      (cdr (car (cdr (cdr l))))\n      (max_element (cdr (cdr (cdr l))))]\n    [(car (car (cdr (cdr (cdr l)))))]\n    [(car (car (cdr (cdr (cdr (cdr l))))))]\n    [(car (car (cdr (cdr (cdr (cdr (cdr l)))))))]\n    [(car (car (cdr (cdr (cdr (cdr (cdr (cdr l))))))))]\n    [(car (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))]\n    [(car (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))]\n    [(car (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))))]\n    [(car (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))))]\n    [(car (car (cdr (cdr (cdr (cdr",
    "  (cond\n    [(null? l)\n      (throw \"No arguments\")]\n    [(null? (car l))\n      (throw \"Only one argument\")]\n    [(null? (cdr l))\n      (throw \"Only one argument\")]\n    [(null? (car (cdr l)))\n      (throw \"Only one argument\")]\n    [(null? (car (cdr (cdr l))))\n      (throw \"Only one argument\")]\n    [(null? (car (cdr (cdr (cdr l)))))]\n    [(car (car l))]\n    [(car (car (cdr l)))\n      (max_element (cdr (car l)))]\n    [(car (car (cdr (cdr (cdr l)))))]\n    [(car (car (cdr (cdr (cdr (cdr l))))))\n      (max_element (cdr (car (cdr (cdr (cdr (cdr l)))))))]]\n    [(car (car (cdr (cdr (cdr (cdr (cdr (cdr l))))))))\n      (max_element (cdr (car (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))]\n    [(car (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))\n      (max_element (cdr (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))))]\n    [(car (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))))\n      (max_element (cdr (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))))))]\n    [(car (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))))))",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (car l)\n            (if (null? (cdr (cdr l)))\n                (max max)\n                (max_element (cdr l)))))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"Cannot take max of an empty list\")]\n    [else\n      (car l)\n      (max_element (cdr l))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [else\n      (let* ([max (first l)])\n        (for-each (lambda (x)\n                   (if (eq? x max)\n                       (set! max x)\n                       (set! max max)))\n          l)\n        max)])\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No arguments\")]\n    [(null? (car l))\n      (throw \"Only one argument\")]\n    [(null? (cdr l))\n      (throw \"Only one argument\")]\n    [(null? (car (cdr l)))\n      (throw \"Only one argument\")]\n    [(null? (car (cdr (cdr l))))\n      (throw \"Only one argument\")]\n    [(null? (car (cdr (cdr (cdr l)))))]\n    [(car (car l))\n      (cdr l)]\n    [(car (car (cdr l)))\n      (cdr (cdr l))]\n    [(car (car (cdr (cdr l))))\n      (cdr (cdr (cdr l)))]\n    [(car (car (cdr (cdr (cdr l)))))\n      (cdr (cdr (cdr (cdr l))))]\n    [(car (car (cdr (cdr (cdr (cdr l))))))\n      (cdr (cdr (cdr (cdr (cdr l)))))]\n    [(car (car (cdr (cdr (cdr (cdr (cdr l)))))))\n      (cdr (cdr (cdr (cdr (cdr (cdr l)))))))]\n    [(car (car (cdr (cdr (cdr (cdr (cdr (cdr l))))))))\n      (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))]\n    [(car (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))\n      (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))]\n    [(car (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))))]\n    [(car (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr",
    "  (cond\n    ((null? l) 0)\n    ((null? (cdr l)) 0)\n    (else\n      (if (null? (car l))\n          (car l)\n          (max_element (cdr l))))))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (max max)\n            (max_element (cdr l))))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No arguments to max_element\")]\n    [(null? (car l))\n      (throw \"Car of list is null\")]\n    [(null? (cdr l))\n      (throw \"Cdr of list is null\")]\n    [(null? (car (cdr l)))\n      (throw \"Car of cdr of list is null\")]\n    [(null? (cdr (cdr l)))\n      (throw \"Cdr of cdr of list is null\")]\n    [(car (car l))\n      (cdr l)]\n    [(car (cdr l))\n      (cdr l)]\n    [(car (car (cdr l)))\n      (cdr (cdr l))]\n    [(car (car (cdr (cdr l))))\n      (cdr (cdr (cdr l)))])\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No elements in list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (max max)\n            (if (> (car l) max)\n                (max (car l))\n                (max max))))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [else\n      (let* ([(max) (car l)])\n        (if (null? (cdr l))\n            (max)\n            (if (null? (cdr (cdr l)))\n                (max)\n                (max_element (cdr (cdr l))))))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    ((null? l) 0)\n    ((null? (cdr l)) 0)\n    (else\n      (if (null? (car l))\n          (car l)\n          (max_element (cdr l))))))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    ((null? l) 0)\n    ((> (car l) (car (cdr l))) (car l))\n    (else (max_element (cdr l))))\n)\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No elements in list\")]\n    [(null? (cdr l))\n      (throw \"Only one element in list\")]\n    [(null? (car l))\n      (throw \"Only one element in list\")]\n    [(null? (cdr (cdr l)))\n      (throw \"Only one element in list\")]\n    [(null? (car (cdr l)))\n      (throw \"Only one element in list\")]\n    [(car l)\n      (cdr l)]\n  )\n)\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error 'not-empty-list)\n      ]\n    [(null? (cdr l))\n      (car l)\n      ]\n    [(> (car l) (car (cdr l)))\n      (car l)\n      ]\n    ))\n",
    "  (cond\n    [(null? l)\n      (throw \"No elements in list\")]\n    [(null? (cdr l))\n      (throw \"Only one element in list\")]\n    [(null? (car l))\n      (throw \"Only one element in list\")]\n    [(null? (car (cdr l)))\n      (throw \"Only one element in list\")]\n    [(null? (car (cdr (cdr l))))\n      (throw \"Only one element in list\")]\n    [(car (car l))\n      (car (car (cdr l)))\n      (max_element (cdr l))]\n    [(car (car (cdr (cdr l))))\n      (car (car (cdr (cdr l))))\n      (max_element (cdr (cdr l)))])\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"The list is empty!\")\n      ]\n    [(null? (cdr l))\n      (error \"The list is empty!\")\n      ]\n    [(null? (car l))\n      (error \"The list is empty!\")\n      ]\n    [(null? (cdr (cdr l)))\n      (error \"The list is empty!\")\n      ]\n    [(car (car l))\n      (error \"The list is empty!\")\n      ]\n    [(car (cdr (cdr l)))\n      (error \"The list is empty!\")\n      ]\n    [(car (car (cdr l)))\n      (error \"The list is empty!\")\n      ]\n    [(car (cdr (car (cdr l))))\n      (error \"The list is empty!\")\n      ]\n    [(car (car (cdr (car (cdr l))))))\n      (error \"The list is empty!\")\n      ]\n    [(car (car (cdr (car (cdr (car (cdr l))))))))\n      (error \"The list is empty!\")\n      ]\n    [(car (car (cdr (car (cdr (car (cdr (car (cdr l))))))))))\n      (error \"The list is empty!\")\n      ]\n    [(car (car (cdr (car (cdr (car (cdr (car (cdr (car (cdr l))))))))))))\n      (error \"The list is empty!\")\n      ]\n    [(car (car (cdr (car (cdr (car (cdr (car (cdr (car (cdr (car (cdr l))))))))))))))))\n      (error \"The list is empty!\")\n      ]\n    [(car (car (cdr (car (cdr (car (cdr (car (cdr (car (cdr (car (cdr (car (cdr (car (cdr l))))))))))))))))))))\n      (error \"The list is empty!\")\n      ]\n    [(car (car (cdr (car (cdr (car (cdr (car (cdr (",
    "  (cond\n    [(null? l)\n      (throw \"No arguments\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (max max)\n            (if (> (car l) max)\n                (max (car l))\n                (max max))))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (car max)\n            (max_element (cdr l))\n          )\n      )\n    ]\n  )\n)\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No elements in list\")]\n    [(null? (cdr l))\n      (throw \"Only one element in list\")]\n    [(null? (car l))\n      (throw \"Only one element in list\")]\n    [(null? (car (cdr l)))\n      (throw \"Only one element in list\")]\n    [(null? (car (cdr (cdr l))))\n      (throw \"Only one element in list\")]\n    [(null? (car (cdr (cdr (cdr l)))))]\n    [(car (car l))\n      (car (car (cdr l)))\n      (car (car (cdr (cdr l))))\n      (car (car (cdr (cdr (cdr l)))))]\n    [(car (car (car l)))\n      (car (car (car (cdr l))))\n      (car (car (car (cdr l))))\n      (car (car (car (cdr (cdr l)))))]\n    [(car (car (car (car l))))\n      (car (car (car (car (cdr l)))))]\n    [(car (car (car (car (car l)))))]\n    [(car (car (car (car (car (car l))))))]\n    [(car (car (car (car (car (car (car l)))))))])\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No elements in list\")]\n    [(pair? l)\n      (if (null? (cdr l))\n          (car l)\n          (max_element (cdr l)))\n      (if (null? (cdr l))\n          (car l)\n          (max_element (cdr l)))\n      (car l)]\n    [else\n      (car l)])\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No elements in list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (max max)\n            (max_element (cdr l))\n          )\n      )\n    ]\n  )\n)\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No elements in list\")]\n    [(pair? l)\n      (cond\n        [(null? (cdr l))\n          (throw \"No elements in list\")]\n        [(null? (car l))\n          (throw \"No elements in list\")]\n        [(car l)\n          (cond\n            [(null? (cdr (cdr l)))\n              (throw \"No elements in list\")]\n            [(null? (car (cdr l)))\n              (throw \"No elements in list\")]\n            [(car (cdr l))\n              (car l)]\n            [(car l)\n              (car (cdr l))]\n            [(car l)\n              (car (car (cdr l)))])]\n        [(car l)\n          (car (car (cdr l)))])]\n    [(throw \"No elements in list\")]\n  )\n)\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No elements in list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (max max)\n            (if (> (car l) max)\n                (max (car l))\n                (max max))))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No elements\")]\n    [(null? (cdr l))\n      (throw \"Only one element\")]\n    [(null? (car l))\n      (throw \"Only one element\")]\n    [(> (car l) (cdr l))\n      (car l)]\n    [(> (car l) (cdr l))\n      (cdr l)]\n    [(> (car l) (cdr l))\n      (car l)]\n    [(> (car l) (cdr l))\n      (car l)]\n    [(> (car l) (cdr l))\n      (car l)]\n    [(> (car l) (cdr l))\n      (car l)]\n    [(> (car l) (cdr l))\n      (car l)]\n    [(> (car l) (cdr l))\n      (car l)]\n    [(> (car l) (cdr l))\n      (car l)]\n    [(> (car l) (cdr l))\n      (car l)]\n    [(> (car l) (cdr l))\n      (car l)]\n    [(> (car l) (cdr l))\n      (car l)]\n    [(> (car l) (cdr l))\n      (car l)]\n    [(> (car l) (cdr l))\n      (car l)]\n    [(> (car l) (cdr l))\n      (car l)]\n    [(> (car l) (cdr l))\n      (car l)]\n    [(> (car l) (cdr l))\n      (car l)]\n    [(> (car l) (cdr l))\n      (car l)]\n    [(> (car l) (cdr l))\n      (car l)]\n    [(> (car l) (cdr l))\n      (car l)]\n    [(> (car l) (cdr l))\n      (car l)]\n    [(> (car l) (cdr l))\n      (car l)]\n    [(> (car l) (",
    "  (cond\n    [(null? l)\n      (error \"The list is empty!\")\n      ]\n    [(null? (cdr l))\n      (error \"The list is empty!\")\n      ]\n    [(car l)\n      (car l)\n      ]\n    ))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"Cannot take max of an empty list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (car max)\n            (max_element (cdr l))\n          )\n      )\n    ]\n  )\n)\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No elements in list\")]\n    [(null? (cdr l))\n      (throw \"Only one element in list\")]\n    [(null? (car l))\n      (throw \"Only one element in list\")]\n    [(null? (car (cdr l)))\n      (throw \"Only one element in list\")]\n    [(car (cdr (cdr l)))\n      (car (cdr (cdr (cdr l))))]\n    [(car (cdr (cdr (cdr (cdr l)))))]\n    [(car (cdr (cdr (cdr (cdr (cdr l))))))]\n    [(car (cdr (cdr (cdr (cdr (cdr (cdr l))))))))]\n    [(car (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))]\n    [(car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))]\n    [(car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))))]\n    [(car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))))]\n    [(car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))))))]\n    [(car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))))))]\n    [(car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))))))))]\n    [(car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (c",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (car l)\n            (max max (cdr l))))]))\n",
    "  (cond\n    [(null? l)\n      (throw \"No elements in list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (max max)\n            (if (null? (cdr (cdr l)))\n                (max max)\n                (max_element (cdr l)))))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"Can't find maximum element in an empty list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (max max)\n            (max_element (cdr l))\n          )\n      )\n    ]\n  )\n)\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"max_element: non-empty list required\")]\n    [(null? (car l))\n      (error \"max_element: non-empty list required\")]\n    [(null? (cdr l))\n      (error \"max_element: non-empty list required\")]\n    [(null? (car (cdr l)))\n      (error \"max_element: non-empty list required\")]\n    [(car (car l))\n      (car (cdr l))]\n    [(cdr (cdr l))]\n    [(car (car (cdr l)))\n      (car (cdr (cdr l)))\n      (car (cdr (cdr (cdr l))))]\n    [(car (car (car (cdr l))))\n      (car (car (cdr (cdr l))))\n      (car (car (cdr (cdr (cdr l)))))]\n    [(car (car (car (car (cdr l)))))]\n    [(car (car (car (car (car (cdr l))))))]\n    [(car (car (car (car (car (car (cdr l))))))))]\n    [(car (car (car (car (car (car (car (cdr l)))))))))]\n    [(car (car (car (car (car (car (car (car (cdr l))))))))))]\n    [(car (car (car (car (car (car (car (car (car (cdr l)))))))))))]\n    [(car (car (car (car (car (car (car (car (car (car (cdr l)))))))))))))]\n    [(car (car (car (car (car (car (car (car (car (car (car (cdr l)))))))))))))]\n    [(car (car (car (car (car (car (car (car (car (car (car (car (cdr l)))))))))))))))]\n    [(car (car (car (car (car (car (car (car (car (car (car (car (car (car (cdr l)))))))))))))))))]\n    [(car (car",
    "  (cond\n    [(null? l) (error \"No elements in list\")]\n    [(null? (cdr l)) (car l)]\n    [else (max (car l) (max_element (cdr l))))))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    ((null? l) 0)\n    ((null? (cdr l)) 0)\n    (else\n      (if (> (car l) (cdr l))\n          (car l)\n          (max_element (cdr l))))))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (max max)\n            (if (null? (cdr (cdr l)))\n                (max max)\n                (max_element (cdr l)))))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No arguments given to max_element.\")]\n    [(pair? l)\n      (if (null? (cdr l))\n          (car l)\n          (max_element (cdr l)))\n      (throw \"The argument to max_element is not a list.\")]\n    [else\n      (car l)])\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (max max)\n            (max_element (cdr l))\n          )\n      )\n    ]\n  )\n)\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No elements in list\")]\n    [(null? (cdr l))\n      (throw \"Only one element in list\")]\n    [(null? (car l))\n      (throw \"Only one element in list\")]\n    [(null? (car (cdr l)))\n      (throw \"Only one element in list\")]\n    [(null? (car (cdr (cdr l))))\n      (throw \"Only one element in list\")]\n    [(null? (car (cdr (cdr (cdr l)))))]\n    [(car l)])\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No elements in list\")]\n    [(null? (cdr l))\n      (throw \"Only one element in list\")]\n    [(null? (car l))\n      (throw \"Only one element in list\")]\n    [(null? (car (cdr l)))\n      (throw \"Only one element in list\")]\n    [(null? (car (cdr (cdr l))))\n      (throw \"Only one element in list\")]\n    [(null? (car (cdr (cdr (cdr l)))))]\n    [(car (car l))\n      (car (car (cdr l)))\n      (car (car (cdr (cdr l))))\n      (car (car (cdr (cdr (cdr l)))))]\n    [(car (car (car l)))\n      (car (car (car (cdr l))))\n      (car (car (car (cdr l))))\n      (car (car (car (cdr (cdr l)))))]\n    [(car (car (car (car l)))\n      (car (car (car (car (cdr l))))))]\n    [(car (car (car (car (car l))))\n      (car (car (car (car (car (cdr l))))))))]\n    [(car (car (car (car (car (car l))))\n      (car (car (car (car (car (car (cdr l))))))))))]\n    [(car (car (car (car (car (car (car l))))\n      (car (car (car (car (car (car (car (cdr l)))))))))))]\n    [(car (car (car (car (car (car (car (car (car l)))))))))]\n    [(car (car (car (car (car (car (car (car (car (car (car l))))))))))))]\n    [(car (car (car (car (car (car (car (car (car (car (car (car l)))))))))))))]\n    [(car (car (car (car (car (car (car (car (car (car (car (car (car (car (car",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [(null? (cdr l))\n      (error \"max_element: empty list\")]\n    [(null? (car l))\n      (error \"max_element: empty list\")]\n    [(null? (car (cdr l)))\n      (error \"max_element: empty list\")]\n    [(car (car l))\n      (car (car (cdr l)))\n      (car (car (cdr (cdr l))))\n      (car (car (cdr (cdr (cdr l)))))]\n    [(car (car (car l)))\n      (car (car (car (cdr l))))\n      (car (car (car (cdr l))))\n      (car (car (car (cdr (cdr l))))))]\n    [(car (car (car (car l))))\n      (car (car (car (car (cdr l))))))\n      (car (car (car (car (car (cdr l))))))\n      (car (car (car (car (car (cdr l))))))]\n    [(car (car (car (car (car (car l)))))))]\n    [(car (car (car (car (car (car (car l))))))))]\n    [(car (car (car (car (car (car (car (car l)))))))))]\n    [(car (car (car (car (car (car (car (car (car l))))))))))]\n    [(car (car (car (car (car (car (car (car (car (car l)))))))))))]\n    [(car (car (car (car (car (car (car (car (car (car (car l))))))))))))]\n    [(car (car (car (car (car (car (car (car (car (car (car (car l)))))))))))))]\n    [(car (car (car (car (car (car (car (car (car (car (car (car (car l)))))))))))))]\n    [(car (car (car (car (car (car (car (car (car (car (car (car (car",
    "  (cond\n    [(null? l)\n      (throw \"No arguments\")]\n    [(pair? l)\n      (cond\n        [(null? (car l))\n          (throw \"No arguments\")]\n        [(null? (cdr l))\n          (throw \"No arguments\")]\n        [(null? (car (cdr l)))\n          (throw \"No arguments\")]\n        [(null? (cdr (cdr l)))\n          (throw \"No arguments\")]\n        [(car (car l))\n          (car (cdr l))]\n        [(cdr (car l))\n          (cdr (cdr l))]\n        [(car (cdr (cdr l)))\n          (car (cdr (cdr (cdr l))))]\n        [(cdr (cdr (cdr (cdr l))))\n          (cdr (cdr (cdr (cdr (cdr l)))))]\n        [(car (car (cdr (cdr (cdr (cdr l))))))\n          (car (cdr (cdr (cdr (cdr (cdr (cdr l))))))))]\n        [(cdr (car (cdr (cdr (cdr (cdr (cdr l)))))))\n          (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))]\n        [(car (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))\n          (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))))]\n        [(cdr (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))))\n          (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))))]\n        [(car (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (c",
    "  (cond\n    [(null? l)\n      (error \"Can't find maximum element in empty list\")]\n    [else\n      (car l)\n      (max_element (cdr l))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No arguments to max_element\")]\n    [(null? (car l))\n      (throw \"Car of list is null\")]\n    [(null? (cdr l))\n      (throw \"Cdr of list is null\")]\n    [(null? (car (cdr l)))\n      (throw \"Car of cdr of list is null\")]\n    [(null? (cdr (cdr l)))\n      (throw \"Cdr of cdr of list is null\")]\n    [(null? (car (cdr (cdr l))))\n      (throw \"Car of cdr of cdr of list is null\")]\n    [(null? (cdr (cdr (cdr l))))\n      (throw \"Cdr of cdr of cdr of list is null\")]\n    [(null? (car (cdr (cdr (cdr l)))))]\n    [(null? (cdr (cdr (cdr (cdr l)))))]\n    [(car (cdr (cdr (cdr (cdr l)))))]\n    [(cdr (cdr (cdr (cdr (cdr l)))))]\n    [(car (cdr (cdr (cdr (cdr (cdr l))))))]\n    [(cdr (cdr (cdr (cdr (cdr (cdr l))))))]\n    [(car (cdr (cdr (cdr (cdr (cdr (cdr l)))))))]\n    [(cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))]\n    [(car (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))]\n    [(cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))]\n    [(car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))]\n    [(cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))]",
    "  (cond\n    [(null? l)\n      (throw \"No arguments\")]\n    [(pair? l)\n      (max_element (car l))]\n    [else\n      (car l)]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    ((null? l) 0)\n    ((null? (cdr l)) 0)\n    (else\n      (if (> (car l) (cdr l))\n          (car l)\n          (max_element (cdr l))))))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"Cannot take max of an empty list\")]\n    [else\n      (if (null? (cdr l))\n          (car l)\n          (max_element (cdr l)))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [else\n      (let* ([(max) (car l)])\n        (if (null? (cdr l))\n            (max)\n            (if (null? (cdr (cdr l)))\n                (max)\n                (max_element (cdr (cdr l)))))))])\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No elements in list\")]\n    [(null? (car l))\n      (throw \"Car of list is null\")]\n    [(null? (cdr l))\n      (throw \"Cdr of list is null\")]\n    [(null? (car (cdr l)))\n      (throw \"Car of cdr of list is null\")]\n    [(null? (cdr (cdr l)))\n      (throw \"Cdr of cdr of list is null\")]\n    [(null? (car (cdr (cdr l))))\n      (throw \"Car of cdr of cdr of list is null\")]\n    [(null? (cdr (cdr (cdr l))))\n      (throw \"Cdr of cdr of cdr of list is null\")]\n    [(car (car l))\n      (car (cdr l))]\n    [(car (cdr (car l)))\n      (car (cdr (cdr l)))\n      (car (cdr (cdr (car l))))\n      (car (cdr (cdr (cdr l))))]\n    [(car (cdr (cdr (cdr (car l))))))\n      (car (cdr (cdr (cdr (cdr (cdr l))))))]\n    [(car (cdr (cdr (cdr (cdr (cdr (car l))))))))\n      (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))]\n    [(car (cdr (cdr (cdr (cdr (cdr (cdr (car l))))))))))\n      (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))]\n    [(car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (car l))))))))))\n      (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))))]\n    [(car (cdr (cdr (cdr (cdr",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [(pair? l)\n      (cond\n        [(null? (cdr l))\n          (error \"max_element: empty list\")]\n        [(null? (car l))\n          (error \"max_element: empty list\")]\n        [(car l)\n          (car (max_element (cdr l)))]]\n      [(car l)\n        (car (max_element (cdr l)))]\n      )\n    ]\n    )\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    ((null? l)\n      (error \"The list is empty!\"))\n    ((null? (cdr l))\n      (car l))\n    (else\n      (if (null? (cdr (cdr l)))\n          (car (cdr l))\n          (max_element (cdr l))))))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (max max)\n            (max_element (cdr l))\n          )\n      )\n    ]\n  )\n)\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (max max)\n            (max_element (cdr l))\n          )\n      )\n    ]\n  )\n)\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"Cannot take max of an empty list\")]\n    [else\n      (if (null? (cdr l))\n          (car l)\n          (max_element (cdr l)))]])\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"Cannot take max of an empty list\")]\n    [else\n      (car l)\n      (max_element (cdr l))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"Cannot take max of an empty list\")]\n    [else\n      (if (null? (cdr l))\n          (car l)\n          (max_element (cdr l)))]])\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No elements\")]\n    [(null? (cdr l))\n      (throw \"No elements\")]\n    [(null? (car l))\n      (throw \"No elements\")]\n    [(null? (car (cdr l)))\n      (throw \"No elements\")]\n    [(car l)\n      (car (cdr l))]\n    [(car (cdr (cdr l)))\n      (car (cdr (cdr l)))]\n    [(car (cdr (cdr (cdr l))))\n      (car (cdr (cdr (cdr l))))]\n    [(car (cdr (cdr (cdr (cdr l))))))\n      (car (cdr (cdr (cdr (cdr (cdr l))))))]\n    [(car (cdr (cdr (cdr (cdr (cdr (cdr l))))))))\n      (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))]\n    [(car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))\n      (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))))]\n    [(car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))))\n      (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))))))]\n    [(car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))))))))\n      (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))))))))))]\n    [(",
    "  (cond\n    [(null? l)\n      (error \"max_element: non-empty list required\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (car max)\n            (max_element (cdr l))\n          )\n      )\n    ]\n  )\n)\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"Cannot take max of an empty list\")]\n    [else\n      (car l)\n      (max_element (cdr l))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    ((null? l) 0)\n    ((null? (cdr l)) 0)\n    (else\n      (if (null? (car l))\n          (car l)\n          (max_element (cdr l))))))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (car max)\n            (max_element (cdr l))))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [else\n      (let* ([(max) (car l)])\n        (if (null? (cdr l))\n            (max)\n            (if (null? (cdr (cdr l)))\n                (max)\n                (max_element (cdr l)))))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No arguments\")]\n    [(null? (cdr l))\n      (throw \"Only one argument\")]\n    [(null? (car l))\n      (throw \"Only lists\")]\n    [(null? (car (cdr l)))\n      (throw \"Only lists\")]\n    [(null? (car (cdr (cdr l))))\n      (throw \"Only lists\")]\n    [(null? (car (cdr (cdr (cdr l)))))]\n    [(car (car l))\n      (car (car (cdr l)))\n      (car (car (cdr (cdr l))))\n      (car (car (cdr (cdr (cdr l)))))]\n    [(car (car (car l)))\n      (car (car (car (cdr l))))\n      (car (car (car (cdr l))))\n      (car (car (car (cdr l))))]\n    [(car (car (car (car l))))\n      (car (car (car (car (cdr l)))))]\n    [(car (car (car (car (car l)))))]\n    [(car (car (car (car (car (car l))))))]\n    [(car (car (car (car (car (car (car l)))))))]\n    [(car (car (car (car (car (car (car (car l))))))))]\n    [(car (car (car (car (car (car (car (car (car l)))))))))]\n    [(car (car (car (car (car (car (car (car (car (car l))))))))))]\n    [(car (car (car (car (car (car (car (car (car (car (car l)))))))))))]\n    [(car (car (car (car (car (car (car (car (car (car (car (car l))))))))))))]\n    [(car (car (car (car (car (car (car (car (car (car (car (car (car l)))))))))))))]\n    [(car (car (car (car (car (car (car (car (car (car (car",
    "  (cond\n    ((null? l) 0)\n    ((null? (cdr l)) 0)\n    (else\n      (if (> (car l) (cdr l))\n          (car l)\n          (max_element (cdr l))))))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (max max)\n            (max_element (cdr l))\n          )\n      )\n    ]\n  )\n)\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    ((null? l)\n      (error 'max_element \"Cannot take max of an empty list\")))\n  (cond\n    ((null? (cdr l))\n      (car l))\n    ((> (car l) (car (cdr l)))\n      (car l))\n    (else\n      (max_element (cdr l))))\n)\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No arguments\")]\n    [(null? (cdr l))\n      (throw \"Only one argument\")]\n    [(null? (car l))\n      (throw \"Only one argument\")]\n    [(null? (car (cdr l)))\n      (throw \"Only one argument\")]\n    [(null? (car (cdr (cdr l))))\n      (throw \"Only one argument\")]\n    [(null? (car (cdr (cdr (cdr l)))))]\n    [(car l)])\n)\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    ((null? l) 0)\n    ((null? (cdr l)) (car l))\n    (else\n      (max (car l) (max_element (cdr l))))))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [else\n      (car l)\n      (max_element (cdr l))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"Cannot take max of an empty list\")]\n    [else\n      (car l)\n      (max_element (cdr l))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No elements\")]\n    [(null? (cdr l))\n      (throw \"No elements\")]\n    [(null? (car l))\n      (throw \"No elements\")]\n    [(null? (car (cdr l)))\n      (throw \"No elements\")]\n    [(car l)\n      (car (cdr l))]\n    [(car (cdr (cdr l)))\n      (car (cdr (cdr l)))]\n    [(car (cdr (cdr (cdr l))))\n      (car (cdr (cdr (cdr l))))]\n    [(car (cdr (cdr (cdr (cdr l))))))\n    (car (cdr (cdr (cdr (cdr (cdr l))))))))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l) (error \"Cannot take max of empty list\")]\n    [(null? (cdr l)) (car l)]\n    [else (max (car l) (max_element (cdr l))))))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [else\n      (car l)\n      (max_element (cdr l))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [(null? (car l))\n      (error \"max_element: empty list\")]\n    [(null? (cdr l))\n      (error \"max_element: empty list\")]\n    [(null? (car (cdr l)))\n      (error \"max_element: empty list\")]\n    [(null? (car (cdr (cdr l))))\n      (error \"max_element: empty list\")]\n    [(null? (car (cdr (cdr (cdr l)))))]\n    [(car (car l))\n      (car (car (cdr l)))\n      (car (car (cdr (cdr l))))\n      (car (car (cdr (cdr (cdr l)))))]\n    [(car (car (cdr (cdr (cdr (cdr l))))))]\n    [(car (car (cdr (cdr (cdr (cdr (cdr l))))))))]\n    [(car (car (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))]\n    [(car (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))]\n    [(car (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))))]\n    [(car (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))))]\n    [(car (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))))))]\n    [(car (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))))))]\n    [(car (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [else\n      (car l)\n      (max_element (cdr l))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No elements\")]\n    [(null? (cdr l))\n      (throw \"No elements\")]\n    [(null? (cdr (cdr l)))\n      (car l)]\n    [else\n      (car (cdr l))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [else\n      (let* ([max (first l)])\n        (if (null? (cdr l))\n            max\n            (max_element (cdr l))))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No elements in list\")]\n    [(null? (car l))\n      (throw \"Car of list is null\")]\n    [(null? (cdr l))\n      (throw \"Cdr of list is null\")]\n    [(null? (car (cdr l)))\n      (throw \"Car of cdr of list is null\")]\n    [(null? (cdr (cdr l)))\n      (throw \"Cdr of cdr of list is null\")]\n    [(car (car l))\n      (cdr l)]\n    [(car (cdr l))\n      (cdr l)]\n    [(car (car (cdr l)))\n      (cdr (cdr l))]\n    [(car (car (cdr (cdr l))))\n      (cdr (cdr (cdr l)))]])\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    ((null? l) 0)\n    ((null? (cdr l)) (car l))\n    (else\n      (if (> (car l) (max_element (cdr l)))\n          (car l)\n          (max_element (cdr l))))))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [(pair? l)\n      (cond\n        [(null? (cdr l))\n          (error \"max_element: empty list\")]\n        [(null? (car l))\n          (error \"max_element: empty list\")]\n        [(> (car l) (cdr l))\n          (car l)]\n        [(> (car l) (cdr l))\n          (car l)])]\n    [else\n      (error \"max_element: invalid argument\")])\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [else\n      (car l)\n      (max_element (cdr l))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No elements to compare\")]\n    [(pair? l)\n      (cond\n        [(null? (cdr l))\n          (throw \"No elements to compare\")]\n        [(> (car l) (car (cdr l)))\n          (car (cdr l))]\n        [(> (car l) (car (cdr l)))\n          (car (cdr l))])]\n    [(string? l)\n      (cond\n        [(null? (string-length l))\n          (throw \"No elements to compare\")]\n        [(> (string-ref l 0) (string-ref l 0))\n          (string-ref l 0)]\n        [(> (string-ref l 0) (string-ref l 0))\n          (string-ref l 0)])]\n    [(number? l)\n      (cond\n        [(null? (number->string l))\n          (throw \"No elements to compare\")]\n        [(> (string->number (string-ref l 0)) (string->number (string-ref l 0)))\n          (string->number (string-ref l 0))]\n        [(> (string->number (string-ref l 0)) (string->number (string-ref l 0)))\n          (string->number (string-ref l 0))])]\n    [(boolean? l)\n      (cond\n        [(null? (boolean->string l))\n          (throw \"No elements to compare\")]\n        [(> (string->boolean (string-ref l 0)) (string->boolean (string-ref l 0)))\n          (string->boolean (string-ref l 0))]\n        [(> (string->boolean (string-ref l 0)) (string->boolean (string-ref l 0)))\n          (string->boolean (string-ref l 0))])]\n    [(symbol? l)\n      (cond\n        [(null? (symbol->string l))\n          (throw \"No elements to compare\")]\n        [(> (string->symbol (string-ref l 0)) (string->symbol (string-ref l 0)))",
    "  (cond\n    ((null? l)\n      (error \"Can't find maximum element in empty list\")))\n  (cond\n    ((null? (cdr l))\n      (car l))\n    (else\n      (cond\n        ((> (car l) (car (cdr l)))\n          (car l))\n        (else\n          (max_element (cdr l)))))))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No elements in list\")]\n    [(pair? l)\n      (if (null? (cdr l))\n          (car l)\n          (max_element (cdr l)))]\n    [(number? l)\n      l]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"Empty list\")]\n    [(pair? l)\n      (cond\n        [(null? (cdr l))\n          (car l)\n          (error \"Empty list\")]\n        [(null? (cdr (cdr l)))\n          (car (cdr l))\n          (error \"Empty list\")]\n        [(car l)\n          (car (cdr l))\n          (error \"Empty list\")]\n        [(car (cdr (cdr l)))\n          (car (cdr (cdr l)))\n          (error \"Empty list\")]\n        [(error \"Invalid list\")])]\n    [(error \"Invalid list\")])\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (car max)\n            (max_element (cdr l))))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"Cannot take max of an empty list\")]\n    [else\n      (car l)\n      (max_element (cdr l))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw 'no-value)\n    ]\n    [(null? (cdr l))\n      (throw 'no-value)\n    ]\n    [(car l)\n      (if (null? (cdr l))\n          (throw 'no-value)\n        (max_element (cdr l)))\n    ]\n  )\n)\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (car l)\n            (if (null? (cdr (cdr l)))\n                (max max)\n                (max_element (cdr l)))))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [(null? (cdr l))\n      (error \"max_element: empty list\")]\n    [(null? (car l))\n      (error \"max_element: empty list\")]\n    [(null? (car (cdr l)))\n      (error \"max_element: empty list\")]\n    [(car (car l))\n      (car (car (cdr l)))\n      (car (car (cdr (cdr l))))\n      (car (car (cdr (cdr (cdr l)))))]\n    [(car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car (car",
    "  (cond\n    [(null? l)\n      (throw \"No arguments\")]\n    [(pair? l)\n      (if (null? (cdr l))\n          (car l)\n          (max_element (cdr l)))]\n    [(number? l)\n      l]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [else\n      (car l)\n      (max_element (cdr l))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (max max)\n            (if (> (car l) max)\n                (max (car l))\n                (max max)))))]\n  )\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No arguments\")]\n    [(null? (car l))\n      (throw \"No arguments\")]\n    [(null? (cdr l))\n      (throw \"No arguments\")]\n    [(null? (car (cdr l)))\n      (throw \"No arguments\")]\n    [(null? (car (cdr (cdr l))))\n      (throw \"No arguments\")]\n    [(null? (car (cdr (cdr (cdr l)))))]\n    [(car (car l))\n      (max_element (cdr l))]\n    [(car (car (cdr l)))\n      (max_element (cdr (cdr l)))\n      (max (car (cdr (cdr l))), (car (cdr (cdr (cdr l)))))]\n    [(car (car (cdr (cdr (cdr l))))))\n      (max_element (cdr (cdr (cdr (cdr l)))))]\n    [(car (car (cdr (cdr (cdr (cdr l))))))\n      (max_element (cdr (cdr (cdr (cdr (cdr l))))))\n      (max (car (cdr (cdr (cdr (cdr (cdr l))))))),\n       (car (cdr (cdr (cdr (cdr (cdr (cdr l))))))))]\n    [(car (car (cdr (cdr (cdr (cdr (cdr l))))))))\n      (max_element (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))]\n    [(car (car (cdr (cdr (cdr (cdr (cdr (cdr l))))))))\n      (max_element (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))\n      (max (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))),\n      (car (cdr (cdr (cdr (cdr (cdr (",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (car max)\n            (max_element (cdr l))))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No elements in list\")]\n    [(pair? l)\n      (cond\n        [(null? (car l))\n          (throw \"No elements in list\")]\n        [(null? (cdr l))\n          (throw \"No elements in list\")]\n        [(null? (car (cdr l)))\n          (throw \"No elements in list\")]\n        [(null? (cdr (cdr l)))\n          (throw \"No elements in list\")]\n        [(car (car l))\n          (car (cdr l))]\n        [(cdr (car l))\n          (cdr (cdr l))]\n        [(car (cdr (cdr l)))\n          (car (cdr (cdr (cdr l))))]\n        [(cdr (cdr (cdr (cdr l))))\n          (cdr (cdr (cdr (cdr (cdr l)))))]\n        [(car (car (cdr (cdr (cdr (cdr l))))))\n          (car (cdr (cdr (cdr (cdr (cdr (cdr l))))))))]\n        [(cdr (car (cdr (cdr (cdr (cdr (cdr l)))))))\n          (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))]\n        [(car (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))\n          (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))))]\n        [(cdr (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))))\n          (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))))))]\n        [(car (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (",
    "  (cond\n    [(null? l)\n      (throw \"No elements in list\")]\n    [(null? (cdr l))\n      (throw \"Only one element in list\")]\n    [(> (car l) (car (cdr l)))\n      (car l)]\n    [else\n      (max_element (cdr l))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No elements in list\")]\n    [(null? (cdr l))\n      (throw \"Only one element in list\")]\n    [(null? (car l))\n      (throw \"Only one element in list\")]\n    [(null? (car (cdr l)))\n      (throw \"Only one element in list\")]\n    [(car (cdr (cdr l)))\n      (car (cdr (cdr l)))\n      (car (cdr (cdr (cdr l))))\n      (car (cdr (cdr (cdr (cdr l)))))]\n    [(car (cdr (cdr (cdr (cdr (cdr l))))))\n      (car (cdr (cdr (cdr (cdr (cdr (cdr l))))))))\n      (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))\n      (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))]\n    [(car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))\n      (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))))\n      (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))))\n      (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))))))]\n    [(car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))))))))]\n    [(car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (car max)\n            (max_element (cdr l))))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No elements in list\")]\n    [(pair? l)\n      (if (null? (cdr l))\n          (car l)\n          (max_element (cdr l)))]\n    [else\n      (car l)]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"max_element: argument is empty\")]\n    [else\n      (car l)\n      (max_element (cdr l))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No arguments\")]\n    [(null? (car l))\n      (throw \"No arguments\")]\n    [(null? (cdr l))\n      (throw \"No arguments\")]\n    [(null? (car (cdr l)))\n      (throw \"No arguments\")]\n    [(null? (car (cdr (cdr l))))\n      (throw \"No arguments\")]\n    [(null? (car (cdr (cdr (cdr l)))))]\n    [(car (car l))\n      (max_element (cdr l))]\n    [(car (car (cdr l)))\n      (max_element (cdr (cdr l)))\n      (max (car (cdr (cdr l))), (car (cdr (cdr (cdr l)))))]\n    [(car (car (cdr (cdr (cdr l))))))\n      (max_element (cdr (cdr (cdr (cdr l)))))]\n    [(car (car (cdr (cdr (cdr (cdr l))))))\n      (max_element (cdr (cdr (cdr (cdr (cdr l))))))\n      (max (car (cdr (cdr (cdr (cdr (cdr l))))))),\n       (car (cdr (cdr (cdr (cdr (cdr (cdr l))))))))]\n    [(car (car (cdr (cdr (cdr (cdr (cdr l))))))))\n      (max_element (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))]\n    [(car (car (cdr (cdr (cdr (cdr (cdr (cdr l))))))))\n      (max_element (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))\n      (max (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))),\n      (car (cdr (cdr (cdr (cdr (cdr (",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [else\n      (let* ([(max) (car l)])\n        (if (null? (cdr l))\n            (max)\n            (if (null? (cdr (cdr l)))\n                (max)\n                (max_element (cdr (cdr l)))))))])\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No elements in list\")]\n    [(null? (cdr l))\n      (throw \"Only one element in list\")]\n    [(> (car l) (car (cdr l)))\n      (car (cdr l))]\n    [(> (car l) (car (cdr l)))\n      (max_element (cdr l))]\n    [else\n      (car l)]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No arguments\")]\n    [(pair? l)\n      (cond\n        [(null? l)\n          (throw \"No arguments\")]\n        [(null? (car l))\n          (throw \"No arguments\")]\n        [(null? (cdr l))\n          (throw \"No arguments\")]\n        [(null? (car (cdr l)))\n          (throw \"No arguments\")]\n        [(null? (cdr (cdr l)))\n          (throw \"No arguments\")]\n        [(null? (car (cdr (cdr l))))\n          (throw \"No arguments\")]\n        [(null? (cdr (cdr (cdr l))))\n          (throw \"No arguments\")]\n        [(null? (car (cdr (cdr (cdr l)))))]\n        [(null? (cdr (cdr (cdr (cdr l)))))]\n        [(null? (car (cdr (cdr (cdr (cdr l))))))]\n        [(null? (cdr (cdr (cdr (cdr (cdr l))))))]\n        [(null? (car (cdr (cdr (cdr (cdr (cdr l))))))))]\n        [(null? (cdr (cdr (cdr (cdr (cdr (cdr l))))))))]\n        [(null? (car (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))]\n        [(null? (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))]\n        [(null? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))]\n        [(null? (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))]\n        [(null? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))))]\n        [(null? (cdr (cdr (cdr (",
    "  (cond\n    [(null? l)\n      (throw \"No arguments\")]\n    [(null? (car l))\n      (throw \"No arguments\")]\n    [(null? (cdr l))\n      (throw \"No arguments\")]\n    [(null? (car (cdr l)))\n      (throw \"No arguments\")]\n    [(null? (car (cdr (cdr l))))\n      (throw \"No arguments\")]\n    [(null? (car (cdr (cdr (cdr l)))))]\n    [(car (car l))\n      (cdr l)]\n    [(car (car (cdr l)))\n      (cdr (cdr l))]\n    [(car (car (cdr (cdr l))))\n      (cdr (cdr (cdr l)))]\n    [(car (car (cdr (cdr (cdr l)))))]\n    [(car (car (cdr (cdr (cdr (cdr l))))))]\n    [(car (car (cdr (cdr (cdr (cdr (cdr l))))))))]\n    [(car (car (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))]\n    [(car (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))]\n    [(car (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))))]\n    [(car (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))))]\n    [(car (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))))))]\n    [(car (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))))))))]\n    [(car (car (cdr (cdr (c",
    "  (cond\n    [(null? l)\n      (error \"Cannot take max of an empty list\")]\n    [(pair? l)\n      (max (first l) (max_element (cdr l)))]\n    [else\n      (first l)])\n)\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    ((null? l)\n      (quote ()))\n    ((null? (cdr l))\n      (quote (car l)))\n    (else\n      (car l)\n      (max_element (cdr l))))\n)\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (car max)\n            (max_element (cdr l))\n          )\n      )\n    ]\n  )\n)\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No arguments\")]\n    [(null? (car l))\n      (throw \"Only one argument\")]\n    [(null? (cdr l))\n      (throw \"Only one argument\")]\n    [(null? (car (cdr l)))\n      (throw \"Only one argument\")]\n    [(null? (car (cdr (cdr l))))\n      (throw \"Only one argument\")]\n    [(null? (car (cdr (cdr (cdr l)))))]\n    [(car (car l))\n      (car (car (cdr l)))\n      (car (car (cdr (cdr l))))\n      (car (car (cdr (cdr (cdr l)))))]\n    [(car (car (cdr (cdr (cdr (cdr l))))))]\n    [(car (car (cdr (cdr (cdr (cdr (cdr l))))))))]\n    [(car (car (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))]\n    [(car (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))]\n    [(car (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))))]\n    [(car (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))))]\n    [(car (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))))))]\n    [(car (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))))))]\n    [(car (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))))))))]\n    [(car (car (",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [(null? (cdr l))\n      (error \"max_element: empty list\")]\n    [(null? (car l))\n      (error \"max_element: empty list\")]\n    [(null? (cdr (cdr l)))\n      (error \"max_element: empty list\")]\n    [(null? (car (cdr l)))\n      (error \"max_element: empty list\")]\n    [(car l)\n      (car l)]\n    [(car (cdr l))\n      (car (cdr l))]\n    [(car (cdr (cdr l)))\n      (car (cdr (cdr l)))]\n    [(car (cdr (cdr (cdr l))))\n      (car (cdr (cdr (cdr l))))]\n    [(car (cdr (cdr (cdr (cdr l)))))]\n    [(car (cdr (cdr (cdr (cdr (cdr l))))))]\n    [(car (cdr (cdr (cdr (cdr (cdr (cdr l))))))))]\n    [(car (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))]\n    [(car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))]\n    [(car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))))]\n    [(car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))))]\n    [(car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))))))]\n    [(car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (max max)\n            (if (null? (cdr (cdr l)))\n                (max max)\n                (max_element (cdr l)))))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (car max)\n            (max_element (cdr l))))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    ((null? l) 0)\n    ((> (car l) (car (cdr l))) (car l))\n    (else (max_element (cdr l))))\n)\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"Empty list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (max max)\n            (max_element (cdr l))\n          )\n      )\n    ]\n  )\n)\n",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (car max)\n            (max_element (cdr l))))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No elements in list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            max\n            (if (> (car max) (car l))\n                max\n                (max_element (cdr l)))))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    ((null? l) 0)\n    ((null? (cdr l)) (car l))\n    (else\n      (if (> (car l) (max_element (cdr l)))\n          (car l)\n          (max_element (cdr l))))))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"max_element: non-empty list required\")]\n    [(pair? l)\n      (cond\n        [(null? (cdr l))\n          (error \"max_element: non-empty list required\")]\n        [(null? (car l))\n          (error \"max_element: non-empty list required\")]\n        [(car (car l))\n          (car (cdr l))]\n        [(car (car l))\n          (max_element (cdr l))]\n        [(car (car l))\n          (error \"max_element: non-empty list required\")])]\n    [else\n      (error \"max_element: non-empty list required\")]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No elements in list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (max max)\n            (if (null? (cdr (cdr l)))\n                (max max)\n                (max_element (cdr l)))))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"Can't find maximum element in an empty list\")]\n    [else\n      (if (null? (cdr l))\n        (car l)\n        (max_element (cdr l)))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (car max)\n            (max_element (cdr l))))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [(pair? l)\n      (cond\n        [(null? (cdr l))\n          (error \"max_element: empty list\")]\n        [(null? (car l))\n          (error \"max_element: empty list\")]\n        [(pair? (car l))\n          (cond\n            [(null? (cdr (car l)))\n              (error \"max_element: empty list\")]\n            [(null? (car (car l)))\n              (error \"max_element: empty list\")]\n            [(pair? (car (car l)))]\n            [(car (car l))]\n          )\n        )\n      )\n    ]\n    [else\n      (error \"max_element: invalid list\")]\n  )\n)\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"max_element: argument is empty\")]\n    [else\n      (let* ([(max) (car l)])\n        (if (null? (cdr l))\n            (max)\n            (if (> (car l) max)\n                (max)\n                (max_element (cdr l)))))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [(null? (cdr l))\n      (error \"max_element: empty list\")]\n    [(null? (car l))\n      (error \"max_element: empty list\")]\n    [(null? (car (cdr l)))\n      (error \"max_element: empty list\")]\n    [(> (car l) (car (cdr l)))\n      (car l)]\n    [(> (car (cdr l)) (car (cdr (cdr l))))\n      (car (cdr l))]\n    [(> (car (cdr (cdr l))) (car (cdr (cdr (cdr l)))))\n      (car (cdr (cdr l)))]\n    [(> (car (cdr (cdr (cdr l)))) (car (cdr (cdr (cdr (cdr l))))))\n      (car (cdr (cdr (cdr (cdr l)))))]\n    [(> (car (cdr (cdr (cdr (cdr l))))))\n      (car (cdr (cdr (cdr (cdr (cdr (cdr l))))))))]\n    [(> (car (cdr (cdr (cdr (cdr (cdr (cdr l))))))))\n      (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))]\n    [(> (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))\n      (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))]\n    [(> (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))))\n      (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))))]\n    [(> (car (cdr (cdr (cdr (",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [(null? (cdr l))\n      (error \"max_element: empty list\")]\n    [(null? (car l))\n      (error \"max_element: empty list\")]\n    [(null? (cdr (cdr l)))\n      (error \"max_element: empty list\")]\n    [(null? (car (cdr l)))\n      (error \"max_element: empty list\")]\n    [(car l)\n      (car l)]\n    [(car (cdr l))\n      (max_element (cdr l))]\n    [(car (cdr (cdr l)))\n      (max_element (cdr (cdr l)))]\n    [(car (car l))\n      (max_element (cdr l))]\n    [(car (car (cdr l)))\n      (max_element (cdr (cdr l)))]\n    [(car (car (car l)))\n      (max_element (cdr (cdr l)))]\n    [(car (car (car (cdr l))))\n      (max_element (cdr (cdr (cdr l))))]\n    [(car (car (car (car (cdr l)))))]\n    [(car (car (car (car (cdr l)))))]\n    [(car (car (car (car (car (cdr l))))))]\n    [(car (car (car (car (car (car (cdr l)))))))]\n    [(car (car (car (car (car (car (car (cdr l))))))))]\n    [(car (car (car (car (car (car (car (car (cdr l)))))))))]\n    [(car (car (car (car (car (car (car (car (car (cdr l))))))))))]\n    [(car (car (car (car (car (car (car (car (car (car (cdr l))))))))))))]\n    [(car (car (car (car (car (car (car (car (car (car (car (cdr l)))))))))))))]",
    "  (cond\n    [(null? l)\n      (throw \"No elements in list\")]\n    [(pair? l)\n      (max (first l) (max_element (cdr l)))]\n    [(number? l)\n      l]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No elements\")]\n    [(null? (car l))\n      (throw \"No elements\")]\n    [(null? (cdr l))\n      (throw \"No elements\")]\n    [(null? (car (cdr l)))\n      (throw \"No elements\")]\n    [(null? (car (cdr (cdr l))))\n      (throw \"No elements\")]\n    [(null? (car (cdr (cdr (cdr l)))))]\n    [(car (cdr (cdr (cdr (cdr l)))))]\n  ))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    ((null? l) 0)\n    ((null? (cdr l)) (car l))\n    (else\n      (cond\n        ((null? (cdr (cdr l))) (car (cdr l)))\n        (else\n          (car (cdr (cdr l)))\n          (max_element (cdr l)))))))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"Can't find maximum element in an empty list\")]\n    [else\n      (car l)\n      (max_element (cdr l))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"Empty list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (car max)\n            (max_element (cdr l))\n          )\n      )\n    ]\n  )\n)\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    ((null? l) 0)\n    ((null? (cdr l)) 0)\n    (else\n      (if (null? (car l))\n          (car l)\n          (max_element (cdr l))))))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No elements in list\")]\n    [(null? (cdr l))\n      (throw \"Only one element in list\")]\n    [(null? (car l))\n      (throw \"Only one element in list\")]\n    [(null? (car (cdr l)))\n      (throw \"Only one element in list\")]\n    [(null? (car (cdr (cdr l))))\n      (throw \"Only one element in list\")]\n    [(null? (car (cdr (cdr (cdr l)))))]\n    [(car l)])\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No arguments\")]\n    [(pair? l)\n      (cond\n        [(null? (cdr l))\n          (throw \"No arguments\")]\n        [(null? (car l))\n          (throw \"No arguments\")]\n        [(car l)\n          (car l)\n          (max_element (cdr l))]\n        [(car l)\n          (max_element (cdr l))]\n        [(car l)\n          (max_element (cdr l))]\n        [(car l)\n          (max_element (cdr l))]\n        [(car l)\n          (max_element (cdr l))]\n        [(car l)\n          (max_element (cdr l))]\n        [(car l)\n          (max_element (cdr l))]\n        [(car l)\n          (max_element (cdr l))]\n        [(car l)\n          (max_element (cdr l))]\n        [(car l)\n          (max_element (cdr l))]\n        [(car l)\n          (max_element (cdr l))]\n        [(car l)\n          (max_element (cdr l))]\n        [(car l)\n          (max_element (cdr l))]\n        [(car l)\n          (max_element (cdr l))]\n        [(car l)\n          (max_element (cdr l))]\n        [(car l)\n          (max_element (cdr l))]\n        [(car l)\n          (max_element (cdr l))]\n        [(car l)\n          (max_element (cdr l))]\n        [(car l)\n          (max_element (cdr l))]\n        [(car l)\n          (max_element (cdr l))]\n        [(car l)\n          (max_element (cdr l))]\n        [(car l)\n          (max_element (cdr l))]\n        [(car l)\n          (max_element (cdr l",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (car max)\n            (max_element (cdr l))))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No elements in list\")]\n    [(null? (cdr l))\n      (throw \"Only one element in list\")]\n    [(null? (car l))\n      (throw \"Only one element in list\")]\n    [(null? (car (cdr l)))\n      (throw \"Only one element in list\")]\n    [(null? (car (cdr (cdr l))))\n      (throw \"Only one element in list\")]\n    [(null? (car (cdr (cdr (cdr l)))))]\n    [(car (car l))\n      (car (car (cdr l)))\n      (car (car (cdr (cdr l))))\n      (car (car (cdr (cdr (cdr l)))))\n      (car (car (cdr (cdr (cdr (cdr l))))))]\n    [(car (car (car l)))\n      (car (car (car (cdr l))))\n      (car (car (car (cdr l))))\n      (car (car (car (cdr l))))\n      (car (car (car (cdr l))))\n      (car (car (car (cdr l))))]\n    [(car (car (car (car l))))\n      (car (car (car (car (cdr l)))))]\n    [(car (car (car (car (car l)))))]\n    [(car (car (car (car (car (car l))))))]\n    [(car (car (car (car (car (car (car l)))))))]]\n  )\n)\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    ((null? l) 0)\n    ((null? (cdr l)) 0)\n    (else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            max\n            (if (null? (cdr max))\n                max\n                (max_element (cdr max)))))))))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error 'not-empty-list)\n      ]\n    [(null? (cdr l))\n      (car l)\n      ]\n    [(> (car l) (car (cdr l)))\n      (car l)\n      ]\n    ))\n",
    "  (cond\n    [(null? l)\n      (throw \"No arguments\")]\n    [(null? (cdr l))\n      (throw \"Only one argument\")]\n    [(null? (car l))\n      (throw \"Only one element in the list\")]\n    [(null? (car (cdr l)))\n      (throw \"Only one element in the list\")]\n    [(null? (car (cdr (cdr l))))\n      (throw \"Only one element in the list\")]\n    [(null? (car (car l)))\n      (throw \"Only one element in the list\")]\n    [(null? (car (car (cdr l))))\n      (throw \"Only one element in the list\")]\n    [(null? (car (car (cdr (cdr l)))))]\n    [(car (car l))]\n    [(car (car (cdr l)))])\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No elements\")]\n    [(null? (cdr l))\n      (throw \"No elements\")]\n    [(null? (car l))\n      (throw \"No elements\")]\n    [(car l)\n      (cdr l)]\n  )\n)\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No elements in list\")]\n    [(pair? l)\n      (max (car l) (max_element (cdr l)))]\n    [else\n      (car l)]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l) (error \"Cannot take max of an empty list\")]\n    [else\n      (if (null? (cdr l))\n          (car l)\n          (max_element (cdr l)))]])\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (car max)\n            (max_element (cdr l))\n          )\n      )\n    ]\n  )\n)\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"Can't find maximum element in empty list\")]\n    [else\n      (if (null? (cdr l))\n          (car l)\n          (max_element (cdr l))))))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (max max)\n            (max_element (cdr l))\n          )\n      )\n    ]\n  )\n)\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    ((null? l) 0)\n    ((null? (cdr l)) 0)\n    (else\n      (if (null? (car l))\n          (car (cdr l))\n          (max_element (cdr l))))))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    ((null? l)\n      (throw \"No elements in list\")))\n    ((null? (cdr l))\n      (throw \"Only one element in list\"))\n    (else\n      (if (null? (cdr (cdr l)))\n          (car l)\n          (max_element (cdr l))))))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    ((null? l) 0)\n    ((null? (cdr l)) 0)\n    (else\n      (if (null? (car l))\n          (car (cdr l))\n          (max_element (cdr l))))))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (car max)\n            (max_element (cdr l))))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error 'not-empty-list)\n      ]\n    [(null? (car l))\n      (error 'not-empty-list)\n      ]\n    [(null? (cdr l))\n      (error 'not-empty-list)\n      ]\n    [(null? (car (cdr l)))\n      (error 'not-empty-list)\n      ]\n    [(car l)\n      ]\n    )\n)\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [(null? (cdr l))\n      (error \"max_element: empty list\")]\n    [(null? (car l))\n      (error \"max_element: empty list\")]\n    [(null? (cdr (cdr l)))\n      (error \"max_element: empty list\")]\n    [(null? (car (cdr l)))\n      (error \"max_element: empty list\")]\n    [(car l)\n      (car (cdr l))]\n    [(car (cdr (cdr l)))\n      (car (cdr (cdr (cdr l))))]\n    [(car (cdr (cdr (cdr (cdr l)))))]\n    [(car (cdr (cdr (cdr (cdr (cdr l))))))]\n    [(car (cdr (cdr (cdr (cdr (cdr (cdr l))))))))]\n    [(car (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))]\n    [(car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))]\n    [(car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))))]\n    [(car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))))]\n    [(car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))))))]\n    [(car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))))))))]\n    [(car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (",
    "  (cond\n    [(null? l)\n      (error \"Cannot take max of an empty list\")]\n    [else\n      (if (null? (cdr l))\n          (car l)\n          (max_element (cdr l)))]])\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No arguments\")]\n    [(null? (car l))\n      (throw \"No arguments\")]\n    [(null? (cdr l))\n      (throw \"No arguments\")]\n    [(null? (car (cdr l)))\n      (throw \"No arguments\")]\n    [(null? (cdr (cdr l)))\n      (throw \"No arguments\")]\n    [(null? (car (cdr (cdr l))))\n      (throw \"No arguments\")]\n    [(null? (cdr (cdr (cdr l))))\n      (throw \"No arguments\")]\n    [(null? (car (cdr (cdr (cdr l)))))]\n    [(null? (cdr (cdr (cdr (cdr l)))))]\n    [(null? (car (cdr (cdr (cdr (cdr l))))))]\n    [(null? (cdr (cdr (cdr (cdr (cdr l))))))]\n    [(null? (car (cdr (cdr (cdr (cdr (cdr l))))))))]\n    [(null? (cdr (cdr (cdr (cdr (cdr (cdr l))))))))]\n    [(null? (car (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))]\n    [(null? (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))]\n    [(null? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))]\n    [(null? (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))]\n    [(null? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))))]\n    [(null? (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))))]\n    [(null? (",
    "  (cond\n    ((null? l)\n      (#f))\n    ((null? (cdr l))\n      (car l))\n    (else\n      (max (car l) (max_element (cdr l))))))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No elements in list\")]\n    [(null? (cdr l))\n      (throw \"Only one element in list\")]\n    [(null? (car l))\n      (throw \"Only one element in list\")]\n    [(null? (car (cdr l)))\n      (throw \"Only one element in list\")]\n    [(null? (car (cdr (cdr l))))\n      (throw \"Only one element in list\")]\n    [(null? (car (cdr (cdr (cdr l)))))]\n    [(car (cdr (cdr (cdr (cdr l)))))]\n  ))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l) (error \"Empty list\")]\n    [(null? (car l)) (error \"Empty list\")]\n    [(null? (cdr l)) (error \"Empty list\")]\n    [(null? (car (cdr l))) (error \"Empty list\")]\n    [(null? (cdr (cdr l))) (error \"Empty list\")]\n    [(null? (car (cdr (cdr l)))) (error \"Empty list\")]\n    [(null? (cdr (cdr (cdr l)))) (error \"Empty list\")]\n    [(null? (car (cdr (cdr (cdr l)))))]\n    [(null? (cdr (cdr (cdr (cdr l)))))]\n    [(null? (car (cdr (cdr (cdr (cdr l))))))]\n    [(null? (cdr (cdr (cdr (cdr (cdr l))))))]\n    [(null? (car (cdr (cdr (cdr (cdr (cdr l)))))))]\n    [(null? (cdr (cdr (cdr (cdr (cdr (cdr l)))))))]\n    [(null? (car (cdr (cdr (cdr (cdr (cdr (cdr l))))))))]\n    [(null? (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))]\n    [(null? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))]\n    [(null? (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))]\n    [(null? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))]\n    [(null? (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))]\n    [(null? (car (cdr (cdr (cdr (cdr (cdr",
    "  (cond\n    [(null? l)\n      (throw \"No elements in list\")]\n    [(null? (cdr l))\n      (throw \"Only one element in list\")]\n    [(null? (car l))\n      (throw \"Only one element in list\")]\n    [(null? (car (cdr l)))\n      (throw \"Only one element in list\")]\n    [(null? (car (cdr (cdr l))))\n      (throw \"Only one element in list\")]\n    [(null? (car (cdr (cdr (cdr l)))))]\n    [(car (cdr (cdr (cdr (cdr l)))))]\n  ))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No arguments to max_element\")]\n    [(pair? l)\n      (if (null? (cdr l))\n          (car l)\n          (max_element (cdr l)))]\n    [else\n      (car l)]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (car max)\n            (max_element (cdr l))\n          )\n      )\n    ]\n  )\n)\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    ((null? l) 0)\n    ((null? (cdr l)) 0)\n    (else\n      (if (null? (car l))\n          (car l)\n          (max_element (cdr l))))))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (throw \"No arguments to max_element\")]\n    [(pair? l)\n      (cond\n        [(null? (cdr l))\n          (throw \"No arguments to max_element\")]\n        [(null? (car l))\n          (throw \"No arguments to max_element\")]\n        [(car (car l))\n          (if (null? (cdr (cdr l)))\n              (car (cdr l))\n              (max_element (cdr l))))]\n      [(car (car l))\n        (if (null? (cdr (cdr l)))\n            (car (cdr l))\n            (max_element (cdr l))))]\n      [(car (car l))\n        (if (null? (cdr (cdr l)))\n            (car (cdr l))\n            (max_element (cdr l))))]\n      [(car (car l))\n        (if (null? (cdr (cdr l)))\n            (car (cdr l))\n            (max_element (cdr l))))]\n      [(car (car l))\n        (if (null? (cdr (cdr l)))\n            (car (cdr l))\n            (max_element (cdr l))))]\n      [(car (car l))\n        (if (null? (cdr (cdr l)))\n            (car (cdr l))\n            (max_element (cdr l))))]\n      [(car (car l))\n        (if (null? (cdr (cdr l)))\n            (car (cdr l))\n            (max_element (cdr l))))]\n      [(car (car l))\n        (if (null? (cdr (cdr l)))\n            (car (cdr l))\n            (max_element (cdr l))))]\n      [(car (car l))\n        (if (null? (cdr (cdr l)))\n            (car (cdr l))\n            (max_element (cdr l))))]\n      [(car (car l))\n        (if (null? (cdr (cdr l)))",
    "  (cond\n    [(null? l)\n      (error \"Empty list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (max max)\n            (if (null? (cdr (cdr l)))\n                (max max)\n                (max_element (cdr l)))))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10",
    "  (cond\n    [(null? l)\n      (error \"max_element: empty list\")]\n    [else\n      (let ((max (car l)))\n        (if (null? (cdr l))\n            (car l)\n            (if (null? (cdr (cdr l)))\n                (max max)\n                (max_element (cdr l)))))]))\n\n;; Return minimum element in the list.\n;; >>> (min_element (list 1 2 3))\n;; 1\n;; >>> (min_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; -10"
  ],
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ]
}