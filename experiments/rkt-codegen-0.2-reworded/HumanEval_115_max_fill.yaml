name: HumanEval_115_max_fill
language: rkt
prompt: "#lang racket\n\n;; You are given a rectangular grid of wells. Each row represents\
  \ a single well,\n;; and each 1 in a row represents a single unit of water.\n;;\
  \ Each well has a corresponding bucket that can be used to extract water from it,\
  \ \n;; and all buckets have the same capacity.\n;; Your task is to use the buckets\
  \ to empty the wells.\n;; Output the number of times you need to lower the buckets.\n\
  ;; Example 1:\n;; >>> (max_fill (list (list 0 0 1 0) (list 0 1 0 0) (list 1 1 1\
  \ 1)) 1)\n;; 6\n;; Example 2:\n;; >>> (max_fill (list (list 0 0 1 1) (list 0 0 0\
  \ 0) (list 1 1 1 1) (list 0 1 1 1)) 2)\n;; 5\n;; Example 3:\n;; >>> (max_fill (list\
  \ (list 0 0 0) (list 0 0 0)) 5)\n;; 0\n;; Constraints:\n;; * all wells have the\
  \ same length\n;; * 1 <= grid.length <= 10^2\n;; * 1 <= grid[:,1].length <= 10^2\n\
  ;; * grid[i][j] -> 0 | 1\n;; * 1 <= capacity <= 10\n(define (max_fill grid capacity)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_fill))\n\
  \    (check-equal? (candidate (list (list 0 0 1 0) (list 0 1 0 0) (list 1 1 1 1))\
  \ 1) 6)\n    (check-equal? (candidate (list (list 0 0 1 1) (list 0 0 0 0) (list\
  \ 1 1 1 1) (list 0 1 1 1)) 2) 5)\n    (check-equal? (candidate (list (list 0 0 0)\
  \ (list 0 0 0)) 5) 0)\n    (check-equal? (candidate (list (list 1 1 1 1) (list 1\
  \ 1 1 1)) 2) 4)\n    (check-equal? (candidate (list (list 1 1 1 1) (list 1 1 1 1))\
  \ 9) 2)\n))\n\n(test-humaneval)"
completions: ["  (let ((wells (list-map (lambda (row) (list-map (lambda (well) (list-map\
    \ (lambda (bucket) (list-map (lambda (i) (list (cons (cons well i) (cons bucket\
    \ i))))))) row)) row)) grid))\n    (let ((wells_filled (list-map (lambda (well)\
    \ (list-map (lambda (bucket) (list-map (lambda (i) (list (cons (cons well i) (cons\
    \ bucket i)))) bucket)) bucket)) well))\n      (let ((wells_filled_count (list-map\
    \ (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i) (list (cons\
    \ (cons well i) (cons bucket i)))) bucket)) bucket)) well))\n        (let ((wells_filled_count_count\
    \ (list-map (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i) (list\
    \ (cons (cons well i) (cons bucket i)))) bucket)) bucket)) well))\n          (let\
    \ ((wells_filled_count_count_count (list-map (lambda (well) (list-map (lambda\
    \ (bucket) (list-map (lambda (i) (list (cons (cons well i) (cons bucket i))))\
    \ bucket)) bucket)) well))\n            (let ((wells_filled_count_count_count_count\
    \ (list-map (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i) (list\
    \ (cons (cons well i) (cons bucket i)))) bucket)) bucket)) well))\n          \
    \    (let ((wells_filled_count_count_count_count_count (list-map (lambda (well)\
    \ (list-map (lambda (bucket) (list-map (lambda (i) (list (cons (cons well i) (cons\
    \ bucket i)))) bucket)) bucket)) well))\n                (let ((wells_filled_count_count_count_count_count_count\
    \ (list-map (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i) (list\
    \ (cons (cons well i) (cons bucket i)))) bucket)) bucket)) well))\n          \
    \        (let ((wells", "  (let ((wells (list-map (lambda (row) (list-map (lambda\
    \ (well) (list-map (lambda (bucket) (list-map (lambda (i) (list (cons (car well)\
    \ (cons (car bucket) (cons i (cons 0 (cons 0 (cons 0)))))))))) (car row))) (lambda\
    \ (well) (car well)) (lambda (bucket) (car bucket)))) row))\n    (let ((wells_filled\
    \ (list 0)))\n      (let ((wells_filled_count (list 0)))\n        (let ((wells_filled_index\
    \ (list 0)))\n          (let ((wells_filled_index_count (list 0)))\n         \
    \   (let ((wells_filled_index_count_count (list 0)))\n              (let ((wells_filled_index_count_count_count\
    \ (list 0)))\n                (let ((wells_filled_index_count_count_count_count\
    \ (list 0)))\n                  (let ((wells_filled_index_count_count_count_count_count\
    \ (list 0)))\n                    (let ((wells_filled_index_count_count_count_count_count_count\
    \ (list 0)))\n                      (let ((wells_filled_index_count_count_count_count_count_count_count\
    \ (list 0)))\n                        (let ((wells_filled_index_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                          (let ((wells_filled_index_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                            (let ((wells_filled_index_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                              (let ((wells_filled_index_count_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                                (let ((wells_filled_index_count_count_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                                  (let ((wells_filled_index_count_count_count_count_count_count_count_count_count_count_count_",
  "  (let ((wells (list-map (lambda (row) (list-map (lambda (well) (list-map (lambda\
    \ (bucket) (list-map (lambda (i) (list (cons (cons (cons 0 0) (cons 0 0)) (cons\
    \ 0 0)) (cons 0 0)))) (lambda (i) (list (cons (cons 0 0) (cons 0 0)) (cons 0 0)))))\
    \ (lambda (i) (list (cons (cons 0 0) (cons 0 0)) (cons 0 0))))) (row) (list-map\
    \ (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i) (list (cons\
    \ (cons 0 0) (cons 0 0)) (cons 0 0)) (cons 0 0)))) (well) (list-map (lambda (i)\
    \ (list (cons (cons 0 0) (cons 0 0)) (cons 0 0)) (bucket)) (range (1 (length well))))))))\
    \ grid))))\n  (let ((wells (list-map (lambda (row) (list-map (lambda (well) (list-map\
    \ (lambda (bucket) (list-map (lambda (i) (list (cons (cons 0 0) (cons 0 0)) (cons\
    \ 0 0)) (cons 0 0)))) (well) (list-map (lambda (i) (list (cons (cons 0 0) (cons\
    \ 0 0)) (cons 0 0)) (bucket)) (range (1 (length well)))))))) (row) (list-map (lambda\
    \ (well) (list-map (lambda (bucket) (list-map (lambda (i) (list (cons (cons 0\
    \ 0) (cons 0 0)) (cons 0 0)) (cons 0 0)))) (well) (list-map (lambda (i) (list\
    \ (cons (cons 0 0) (cons 0 0)) (cons 0 0)) (bucket)) (range (1 (length well))))))))\
    \ grid))))\n  (let ((wells (list-map (lambda (row) (list-map (lambda (well) (list-map\
    \ (lambda (bucket) (list-map (lambda (i) (list (cons (cons 0 0) (cons 0 0)) (cons\
    \ 0 0)) (cons 0 0)))) (well) (list-map (lambda (i", '  (let ((wells (list-map
    (lambda (row) (list-map (lambda (well) (list-map (lambda (bucket) (list-map (lambda
    (i) (list-map (lambda (j) (list-map (lambda (w) (list-map (lambda (b) (list-map
    (lambda (x) (list-map (lambda (y) (list-map (lambda (z) (list-map (lambda (n)
    (list-map (lambda (m) (list-map (lambda (q) (list-map (lambda (r) (list-map (lambda
    (s) (list-map (lambda (t) (list-map (lambda (u) (list-map (lambda (v) (list-map
    (lambda (w) (list-map (lambda (x) (list-map (lambda (y) (list-map (lambda (z)
    (list-map (lambda (n) (list-map (lambda (m) (list-map (lambda (q) (list-map (lambda
    (r) (list-map (lambda (s) (list-map (lambda (t) (list-map (lambda (u) (list-map
    (lambda (v) (list-map (lambda (w) (list-map (lambda (x) (list-map (lambda (y)
    (list-map (lambda (z) (list-map (lambda (n) (list-map (lambda (m) (list-map (lambda
    (q) (list-map (lambda (r) (list-map (lambda (s) (list-map (lambda (t) (list-map
    (lambda (u) (list-map (lambda (v) (list-map (lambda (w) (list-map (lambda (x)
    (list-map (lambda (y) (list-map (lambda (z) (list-map (lambda (n) (list-map (lambda
    (m) (list-map (lambda (q) (list-map (lambda (r) (list-map (lambda (s) (list-map
    (lambda (t) (list-map (lambda (u) (list-map (lambda (v) (list-map (lambda (w)
    (list-map (lambda (x) (', '  (let ((wells (list-map (lambda (row) (list-map (lambda
    (well) (list-map (lambda (bucket) (list-map (lambda (i) (list-map (lambda (j)
    (list-map (lambda (c) (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda
    (n) (list-map (lambda (x) (list-map (lambda (y) (list-map (lambda (z) (list-map
    (lambda (a) (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda (d)
    (list-map (lambda (e) (list-map (lambda (f) (list-map (lambda (g) (list-map (lambda
    (h) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (k) (list-map
    (lambda (l) (list-map (lambda (m) (list-map (lambda (n) (list-map (lambda (o)
    (list-map (lambda (p) (list-map (lambda (q) (list-map (lambda (r) (list-map (lambda
    (s) (list-map (lambda (t) (list-map (lambda (u) (list-map (lambda (v) (list-map
    (lambda (w) (list-map (lambda (x) (list-map (lambda (y) (list-map (lambda (z)
    (list-map (lambda (a) (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda
    (d) (list-map (lambda (e) (list-map (lambda (f) (list-map (lambda (g) (list-map
    (lambda (h) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (k)
    (list-map (lambda (l) (list-map (lambda (m) (list-map (lambda (n) (list-map (lambda
    (o) (list-map (lambda (p) (list-map (lambda (q) (list-map (lambda (r) (', "  (let\
    \ ((wells (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) grid))\n\
    \        (buckets (list-map (lambda (x) (list-map (lambda (y) (list x y)) x))\
    \ capacity)))\n    (let ((wells_filled (list-map (lambda (x) (list-map (lambda\
    \ (y) (list x y)) x)) wells)))\n      (let ((wells_filled_count (list-map (lambda\
    \ (x) (list-map (lambda (y) (list x y)) x)) wells_filled)))\n        (let ((wells_filled_count_count\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count)))\n\
    \          (let ((wells_filled_count_count_count (list-map (lambda (x) (list-map\
    \ (lambda (y) (list x y)) x)) wells_filled_count_count)))\n            (let ((wells_filled_count_count_count_count\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count_count_count)))\n\
    \              (let ((wells_filled_count_count_count_count_count (list-map (lambda\
    \ (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count_count_count_count)))\n\
    \                (let ((wells_filled_count_count_count_count_count_count (list-map\
    \ (lambda (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count_count_count_count_count)))\n\
    \                  (let ((wells_filled_count_count_count_count_count_count_count\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count_count_count_count_count_count)))\n\
    \                    (let ((wells_filled_count_count_count_count_count_count_count_count\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y", "  (let ((wells (list-map\
    \ (lambda (row) (list-map (lambda (well) (list-map (lambda (bucket) (list-map\
    \ (lambda (i) (list-map (lambda (j) (list (cons (cons well (cons bucket (cons\
    \ i j)))))))))))) (row)))) (grid)))\n    (let ((wells_filled (list-map (lambda\
    \ (well) (list-map (lambda (bucket) (list-map (lambda (i) (list-map (lambda (j)\
    \ (list (cons (cons well (cons bucket (cons i j)))))))))))) (wells)))\n      (let\
    \ ((wells_filled_count (list-map (lambda (well) (list-map (lambda (bucket) (list-map\
    \ (lambda (i) (list-map (lambda (j) (list (cons (cons well (cons bucket (cons\
    \ i j)))))))))))) (wells_filled)))\n        (let ((wells_filled_count_count (list-map\
    \ (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i) (list-map (lambda\
    \ (j) (list (cons (cons well (cons bucket (cons i j)))))))))))) (wells_filled_count)))\n\
    \          (let ((wells_filled_count_count_count (list-map (lambda (well) (list-map\
    \ (lambda (bucket) (list-map (lambda (i) (list-map (lambda (j) (list (cons (cons\
    \ well (cons bucket (cons i j)))))))))))) (wells_filled_count_count)))\n     \
    \       (let ((wells_filled_count_count_count_count (list-map (lambda (well) (list-map\
    \ (lambda (bucket) (list-map (lambda (i) (list-map (lambda (j) (list (cons (cons\
    \ well (cons bucket (cons i j)))))))))))) (wells_filled_count_count_count)))\n\
    \              (let ((wells_filled_count_count_count_count_count (list-map (lambda\
    \ (well) (list-map (lambda (bucket) (list-map (lambda (i) (list-map (lambda (j)\
    \ (list (cons (cons", "  (let ((wells (list-map (lambda (row) (list-map (lambda\
    \ (well) (list-map (lambda (bucket) (list-map (lambda (i) (list (cons (cons well\
    \ i) (cons bucket i))))))) row)) wells)) grid))\n    (let ((wells_filled (list-map\
    \ (lambda (row) (list-map (lambda (well) (list (cons well 0))) row)) wells))\n\
    \          (buckets_filled (list-map (lambda (row) (list-map (lambda (bucket)\
    \ (list (cons bucket 0))) row)) wells_filled)))\n      (let ((wells_filled_count\
    \ (list-map (lambda (row) (list (map (lambda (well) (list (cons well 0))) row))\
    \ wells_filled)))\n            (buckets_filled_count (list-map (lambda (row) (list\
    \ (map (lambda (bucket) (list (cons bucket 0))) row)) wells_filled_count))))\n\
    \        (let ((wells_filled_count_count (list-map (lambda (row) (list (map (lambda\
    \ (well) (list (cons well 0))) row)) wells_filled_count_count))))\n          (let\
    \ ((wells_filled_count_count_count (list-map (lambda (row) (list (map (lambda\
    \ (well) (list (cons well 0))) row)) wells_filled_count_count_count))))\n    \
    \        (let ((wells_filled_count_count_count_count (list-map (lambda (row) (list\
    \ (map (lambda (well) (list (cons well 0))) row)) wells_filled_count_count_count_count))))\n\
    \              (let ((wells_filled_count_count_count_count_count (list-map (lambda\
    \ (row) (list (map (lambda (well) (list (cons well 0))) row)) wells_filled_count_count_count_count_count))))\n\
    \                (let ((wells_filled_count_count_count_count_count_count (list-map\
    \ (lambda (row) (list (map (lambda (well) (list (cons well 0))) row)) wells_filled_count_count_count_count_count_count))))\n\
    \                  (let ((well", "  (let ((wells (list-map (lambda (x) (list-map\
    \ (lambda (y) (list-map (lambda (z) (list-append x y z)))) x)) grid))\n      \
    \ (buckets (list-map (lambda (x) (list-map (lambda (y) (list-append x y)) x))\
    \ wells)))\n    (let ((wells_filled (list-map (lambda (x) (list-map (lambda (y)\
    \ (list-append x y)) x)) wells)))\n      (let ((wells_filled_count (list-map (lambda\
    \ (x) (list-length x)) wells_filled)))\n        (let ((buckets_filled (list-map\
    \ (lambda (x) (list-map (lambda (y) (list-append x y)) x)) buckets)))\n      \
    \    (let ((buckets_filled_count (list-map (lambda (x) (list-length x)) buckets_filled))))\n\
    \            (let ((wells_filled_buckets (list-map (lambda (x) (list-map (lambda\
    \ (y) (list-append x y)) x)) wells_filled)))\n              (let ((wells_filled_buckets_count\
    \ (list-map (lambda (x) (list-length x)) wells_filled_buckets))))\n          \
    \      (let ((wells_filled_buckets_count_count (list-map (lambda (x) (list-length\
    \ x)) wells_filled_buckets_count))))\n                  (let ((wells_filled_buckets_count_count_count\
    \ (list-map (lambda (x) (list-length x)) wells_filled_buckets_count_count))))\n\
    \                    (let ((wells_filled_buckets_count_count_count_count (list-map\
    \ (lambda (x) (list-length x)) wells_filled_buckets_count_count_count))))\n  \
    \                    (let ((wells_filled_buckets_count_count_count_count_count\
    \ (list-map (lambda (x) (list-length x)) wells_filled_buckets_count_count_count_count))))\n\
    \                        (let ((wells_filled_buckets_count_count_count_count_count_count\
    \ (list-map (lambda (x) (", "  (let ((wells (list-map (lambda (well) (list-map\
    \ (lambda (bucket) (list-map (lambda (i) (list-ref well i)) (lambda (i) (list-ref\
    \ bucket i))))) (list-map (lambda (well) (list-map (lambda (i) (list-ref well\
    \ i)) (lambda (i) (list-ref well i)))) well))))\n    (let ((wells_filled (list-map\
    \ (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i) (list-ref well\
    \ i)) (lambda (i) (list-ref bucket i))))) (list-map (lambda (well) (list-map (lambda\
    \ (i) (list-ref well i)) (lambda (i) (list-ref well i)))) well))))\n      (let\
    \ ((wells_filled_count (list-map (lambda (well) (list-map (lambda (bucket) (list-map\
    \ (lambda (i) (list-ref well i)) (lambda (i) (list-ref bucket i))))) (list-map\
    \ (lambda (well) (list-map (lambda (i) (list-ref well i)) (lambda (i) (list-ref\
    \ well i)))) well))))\n        (let ((wells_filled_count_count (list-map (lambda\
    \ (well) (list-map (lambda (bucket) (list-map (lambda (i) (list-ref well i)) (lambda\
    \ (i) (list-ref bucket i))))) (list-map (lambda (well) (list-map (lambda (i) (list-ref\
    \ well i)) (lambda (i) (list-ref well i)))) well))))\n          (let ((wells_filled_count_count_count\
    \ (list-map (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i) (list-ref\
    \ well i)) (lambda (i) (list-ref bucket i))))) (list-map (lambda (well) (list-map\
    \ (lambda (i) (list-ref well i)) (lambda (i) (list-ref well i)))) well))))\n \
    \           (let ((wells_filled_count_count_count_count (list-map (lambda", '  (let
    ((wells (list-map (lambda (row) (list-map (lambda (well) (list-map (lambda (bucket)
    (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (w) (list-map (lambda
    (b) (list-map (lambda (x) (list-map (lambda (y) (list-map (lambda (z) (list-map
    (lambda (a) (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda (d)
    (list-map (lambda (e) (list-map (lambda (f) (list-map (lambda (g) (list-map (lambda
    (h) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (k) (list-map
    (lambda (l) (list-map (lambda (m) (list-map (lambda (n) (list-map (lambda (o)
    (list-map (lambda (p) (list-map (lambda (q) (list-map (lambda (r) (list-map (lambda
    (s) (list-map (lambda (t) (list-map (lambda (u) (list-map (lambda (v) (list-map
    (lambda (w) (list-map (lambda (x) (list-map (lambda (y) (list-map (lambda (z)
    (list-map (lambda (a) (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda
    (d) (list-map (lambda (e) (list-map (lambda (f) (list-map (lambda (g) (list-map
    (lambda (h) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (k)
    (list-map (lambda (l) (list-map (lambda (m) (list-map (lambda (n) (list-map (lambda
    (o) (list-map (lambda (p) (list-map (lambda (q) (list-map (lambda (r) (list-map
    (lambda (s) (list-map (lambda (t) (', '  (let ((wells (list-map (lambda (row)
    (list-map (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i) (list-map
    (lambda (j) (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append', '  (let ((wells (list-map (lambda (row) (list-map (lambda (well)
    (list-map (lambda (bucket) (list-map (lambda (i) (list-map (lambda (j) (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append',
  '  (let ((wells (list-map (lambda (row) (list-map (lambda (well) (list-map (lambda
    (bucket) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (w) (list-map
    (lambda (b) (list-map (lambda (n) (list-map (lambda (m) (list-map (lambda (s)
    (list-map (lambda (x) (list-map (lambda (y) (list-map (lambda (z) (list-map (lambda
    (c) (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda (f) (list-map
    (lambda (g) (list-map (lambda (h) (list-map (lambda (i) (list-map (lambda (j)
    (list-map (lambda (k) (list-map (lambda (l) (list-map (lambda (m) (list-map (lambda
    (n) (list-map (lambda (o) (list-map (lambda (p) (list-map (lambda (q) (list-map
    (lambda (r) (list-map (lambda (s) (list-map (lambda (t) (list-map (lambda (u)
    (list-map (lambda (v) (list-map (lambda (w) (list-map (lambda (x) (list-map (lambda
    (y) (list-map (lambda (z) (list-map (lambda (c) (list-map (lambda (d) (list-map
    (lambda (e) (list-map (lambda (f) (list-map (lambda (g) (list-map (lambda (h)
    (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (k) (list-map (lambda
    (l) (list-map (lambda (m) (list-map (lambda (n) (list-map (lambda (o) (list-map
    (lambda (p) (list-map (lambda (q) (list-map (lambda (r) (list-map (lambda (s)
    (list-map (lambda (t) (list-map (lambda (u) (', "  (let ((wells (list-map (lambda\
    \ (well) (list-map (lambda (bucket) (list-map (lambda (i) (list (cons (car well)\
    \ (cons (car bucket) (cons i (cons 0)))))) (cons (car well) (cons (car bucket)\
    \ (cons i (cons 1)))))) (cons (car well) (cons (car bucket) (cons i (cons 0))))))\
    \ (car well))))\n    (let ((wells_filled (list-map (lambda (well) (car well))\
    \ wells)))\n      (let ((wells_filled_count (list-map (lambda (well) (car well))\
    \ wells_filled)))\n        (let ((wells_filled_buckets (list-map (lambda (well)\
    \ (car well)) wells_filled)))\n          (let ((wells_filled_buckets_count (list-map\
    \ (lambda (well) (car well)) wells_filled_buckets)))\n            (let ((wells_filled_buckets_count_count\
    \ (list-map (lambda (well) (car well)) wells_filled_buckets_count)))\n       \
    \       (let ((wells_filled_buckets_count_count_count (list-map (lambda (well)\
    \ (car well)) wells_filled_buckets_count_count)))\n                (let ((wells_filled_buckets_count_count_count_count\
    \ (list-map (lambda (well) (car well)) wells_filled_buckets_count_count_count)))\n\
    \                  (let ((wells_filled_buckets_count_count_count_count_count (list-map\
    \ (lambda (well) (car well)) wells_filled_buckets_count_count_count_count)))\n\
    \                    (let ((wells_filled_buckets_count_count_count_count_count_count\
    \ (list-map (lambda (well) (car well)) wells_filled_buckets_count_count_count_count_count)))\n\
    \                      (let ((wells_filled_buckets_count_count_count_count_count_count_count\
    \ (list-map (lambda (well) (car well)) wells_filled_buckets_count_count_count_count_count_count)))\n\
    \                        (let ((wells_filled", '  (let ((wells (list-map (lambda
    (row) (list-map (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i)
    (list-map (lambda (j) (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda
    (x) (list-map (lambda (y) (list-map (lambda (z) (list-map (lambda (w) (list-map
    (lambda (b) (list-map (lambda (x) (list-map (lambda (y) (list-map (lambda (z)
    (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda (x) (list-map (lambda
    (y) (list-map (lambda (z) (list-map (lambda (w) (list-map (lambda (b) (list-map
    (lambda (x) (list-map (lambda (y) (list-map (lambda (z) (list-map (lambda (w)
    (list-map (lambda (b) (list-map (lambda (x) (list-map (lambda (y) (list-map (lambda
    (z) (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda (x) (list-map
    (lambda (y) (list-map (lambda (z) (list-map (lambda (w) (list-map (lambda (b)
    (list-map (lambda (x) (list-map (lambda (y) (list-map (lambda (z) (list-map (lambda
    (w) (list-map (lambda (b) (list-map (lambda (x) (list-map (lambda (y) (list-map
    (lambda (z) (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda (x)
    (list-map (lambda (y) (list-map (lambda (z) (list-map (lambda (w) (list-map (lambda
    (b) (list-map (lambda (x) (list-map (lambda (y) (list-map (lambda (z) (list-map
    (lambda (w) (', "  (let ((wells (list-map (lambda (x) (list-map (lambda (y) (list\
    \ x y)) x)) grid))\n        (buckets (list-map (lambda (x) (list-map (lambda (y)\
    \ (list x y)) x)) capacity)))\n    (let ((wells_filled (list-map (lambda (x) (list-map\
    \ (lambda (y) (list x y)) x)) wells)))\n      (let ((wells_filled_count (list-map\
    \ (lambda (x) (list-map (lambda (y) (list x y)) x)) wells_filled)))\n        (let\
    \ ((wells_filled_count_count (list-map (lambda (x) (list-map (lambda (y) (list\
    \ x y)) x)) wells_filled_count)))\n          (let ((wells_filled_count_count_count\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count_count)))\n\
    \            (let ((wells_filled_count_count_count_count (list-map (lambda (x)\
    \ (list-map (lambda (y) (list x y)) x)) wells_filled_count_count_count))))\n \
    \             (let ((wells_filled_count_count_count_count_count (list-map (lambda\
    \ (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count_count_count_count_count))))\n\
    \                (let ((wells_filled_count_count_count_count_count_count (list-map\
    \ (lambda (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count_count_count_count_count_count))))\n\
    \                  (let ((wells_filled_count_count_count_count_count_count_count\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count_count_count_count_count_count_count))))\n\
    \                    (let ((wells_filled_count_count_count_count_count_count_count_count\
    \ (list-map (lambda (x) (list-map (lambda (", '  (let ((wells (list-map (lambda
    (row) (list-map (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i)
    (list-map (lambda (j) (list-map (lambda (c) (list-map (lambda (w) (list-map (lambda
    (b) (list-map (lambda (n) (list-map (lambda (o) (list-map (lambda (x) (list-map
    (lambda (y) (list-map (lambda (z) (list-map (lambda (a) (list-map (lambda (b)
    (list-map (lambda (c) (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda
    (f) (list-map (lambda (g) (list-map (lambda (h) (list-map (lambda (i) (list-map
    (lambda (j) (list-map (lambda (k) (list-map (lambda (l) (list-map (lambda (m)
    (list-map (lambda (n) (list-map (lambda (o) (list-map (lambda (p) (list-map (lambda
    (q) (list-map (lambda (r) (list-map (lambda (s) (list-map (lambda (t) (list-map
    (lambda (u) (list-map (lambda (v) (list-map (lambda (w) (list-map (lambda (x)
    (list-map (lambda (y) (list-map (lambda (z) (list-map (lambda (a) (list-map (lambda
    (b) (list-map (lambda (c) (list-map (lambda (d) (list-map (lambda (e) (list-map
    (lambda (f) (list-map (lambda (g) (list-map (lambda (h) (list-map (lambda (i)
    (list-map (lambda (j) (list-map (lambda (k) (list-map (lambda (l) (list-map (lambda
    (m) (list-map (lambda (n) (list-map (lambda (o) (list-map (lambda (p) (list-map
    (lambda (q) (', '  (let ((wells (list-map (lambda (row) (list-map (lambda (well)
    (list-map (lambda (bucket) (list-map (lambda (i) (list-map (lambda (j) (list-map
    (lambda (w) (list-map (lambda (b) (list-map (lambda (x) (list-map (lambda (y)
    (list-map (lambda (z) (list-map (lambda (n) (list-map (lambda (o) (list-map (lambda
    (p) (list-map (lambda (q) (list-map (lambda (r) (list-map (lambda (s) (list-map
    (lambda (t) (list-map (lambda (u) (list-map (lambda (v) (list-map (lambda (w)
    (list-map (lambda (x) (list-map (lambda (y) (list-map (lambda (z) (list-map (lambda
    (n) (list-map (lambda (o) (list-map (lambda (p) (list-map (lambda (q) (list-map
    (lambda (r) (list-map (lambda (s) (list-map (lambda (t) (list-map (lambda (u)
    (list-map (lambda (v) (list-map (lambda (w) (list-map (lambda (x) (list-map (lambda
    (y) (list-map (lambda (z) (list-map (lambda (n) (list-map (lambda (o) (list-map
    (lambda (p) (list-map (lambda (q) (list-map (lambda (r) (list-map (lambda (s)
    (list-map (lambda (t) (list-map (lambda (u) (list-map (lambda (v) (list-map (lambda
    (w) (list-map (lambda (x) (list-map (lambda (y) (list-map (lambda (z) (list-map
    (lambda (n) (list-map (lambda (o) (list-map (lambda (p) (list-map (lambda (q)
    (list-map (lambda (r) (list-map (lambda (s) (list-map (lambda (t) (', "  (let\
    \ ((wells (list-map (lambda (x) (list x)) grid)))\n    (let ((wells_filled (list\
    \ 0)))\n      (let ((wells_filled_count (list 0)))\n        (let ((wells_filled_index\
    \ (list 0)))\n          (let ((wells_filled_index_count (list 0)))\n         \
    \   (let ((wells_filled_index_count_count (list 0)))\n              (let ((wells_filled_index_count_count_count\
    \ (list 0)))\n                (let ((wells_filled_index_count_count_count_count\
    \ (list 0)))\n                  (let ((wells_filled_index_count_count_count_count_count\
    \ (list 0)))\n                    (let ((wells_filled_index_count_count_count_count_count_count\
    \ (list 0)))\n                      (let ((wells_filled_index_count_count_count_count_count_count_count\
    \ (list 0)))\n                        (let ((wells_filled_index_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                          (let ((wells_filled_index_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                            (let ((wells_filled_index_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                              (let ((wells_filled_index_count_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                                (let ((wells_filled_index_count_count_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                                  (let ((wells_filled_index_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                                    (let ((wells_filled_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                                      (let ((wells_filled_index_count_count_count_count_count",
  '  (let ((wells (list-map (lambda (row) (list-map (lambda (well) (list-map (lambda
    (bucket) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (c) (list-map
    (lambda (w) (list-map (lambda (b) (list-map (lambda (n) (list-map (lambda (x)
    (list-map (lambda (y) (list-map (lambda (z) (list-map (lambda (a) (list-map (lambda
    (b) (list-map (lambda (c) (list-map (lambda (d) (list-map (lambda (e) (list-map
    (lambda (f) (list-map (lambda (g) (list-map (lambda (h) (list-map (lambda (i)
    (list-map (lambda (j) (list-map (lambda (k) (list-map (lambda (l) (list-map (lambda
    (m) (list-map (lambda (n) (list-map (lambda (o) (list-map (lambda (p) (list-map
    (lambda (q) (list-map (lambda (r) (list-map (lambda (s) (list-map (lambda (t)
    (list-map (lambda (u) (list-map (lambda (v) (list-map (lambda (w) (list-map (lambda
    (x) (list-map (lambda (y) (list-map (lambda (z) (list-map (lambda (a) (list-map
    (lambda (b) (list-map (lambda (c) (list-map (lambda (d) (list-map (lambda (e)
    (list-map (lambda (f) (list-map (lambda (g) (list-map (lambda (h) (list-map (lambda
    (i) (list-map (lambda (j) (list-map (lambda (k) (list-map (lambda (l) (list-map
    (lambda (m) (list-map (lambda (n) (list-map (lambda (o) (list-map (lambda (p)
    (list-map (lambda (q) (list-map (lambda (r) (', "  (let ((wells (list)))\n   \
    \ (let ((well_count (list)))\n      (let ((well_capacity (list)))\n        (let\
    \ ((well_filled (list)))\n          (let ((well_water (list)))\n            (let\
    \ ((well_bucket (list)))\n              (let ((well_bucket_filled (list)))\n \
    \               (let ((well_bucket_water (list)))\n                  (let ((well_bucket_capacity\
    \ (list)))\n                    (let ((well_bucket_water_filled (list)))\n   \
    \                   (let ((well_bucket_water_capacity (list)))\n             \
    \           (let ((well_bucket_water_filled_capacity (list)))\n              \
    \            (let ((well_bucket_water_filled_capacity_well_filled (list)))\n \
    \                           (let ((well_bucket_water_filled_capacity_well_water\
    \ (list)))\n                              (let ((well_bucket_water_filled_capacity_well_water_filled\
    \ (list)))\n                                (let ((well_bucket_water_filled_capacity_well_water_filled_well_filled\
    \ (list)))\n                                  (let ((well_bucket_water_filled_capacity_well_water_filled_well_water\
    \ (list)))\n                                    (let ((well_bucket_water_filled_capacity_well_water_filled_well_water_filled\
    \ (list)))\n                                      (let ((well_bucket_water_filled_capacity_well_water_filled_well_water_filled_well_filled\
    \ (list)))\n                                        (let ((well_bucket_water_filled_capacity_well_water_filled_well_water_filled_well_water_filled_well_filled\
    \ (list)))\n                                          (let ((well_bucket_water_filled_capacity_well_water_filled_well_water_filled_well_water_filled_well_water_filled_well_filled\
    \ (list)))\n                                            (let ((well_bucket_water_filled_capacity_well_water_filled_well_water_filled_well_water_filled_well_water_filled_well_filled_well_filled\
    \ (list)))\n                                              (let ((well_bucket_water_",
  "  (let* ([wells (list-map (lambda (i) (list-map (lambda (j) (list i j)) i)) grid)])\n\
    \    (let* ([wells_filled (list-map (lambda (i) (list-map (lambda (j) (list i\
    \ j)) i)) wells)])\n      (let* ([wells_filled_count (list-map (lambda (i) (list-map\
    \ (lambda (j) (list i j)) i)) wells_filled)])\n        (let* ([wells_filled_count_count\
    \ (list-map (lambda (i) (list-map (lambda (j) (list i j)) i)) wells_filled_count)])\n\
    \          (let* ([wells_filled_count_count_count (list-map (lambda (i) (list-map\
    \ (lambda (j) (list i j)) i)) wells_filled_count_count)])\n            (let* ([wells_filled_count_count_count_count\
    \ (list-map (lambda (i) (list-map (lambda (j) (list i j)) i)) wells_filled_count_count_count)])\n\
    \              (let* ([wells_filled_count_count_count_count_count (list-map (lambda\
    \ (i) (list-map (lambda (j) (list i j)) i)) wells_filled_count_count_count_count)])\n\
    \                (let* ([wells_filled_count_count_count_count_count_count (list-map\
    \ (lambda (i) (list-map (lambda (j) (list i j)) i)) wells_filled_count_count_count_count_count)])\n\
    \                  (let* ([wells_filled_count_count_count_count_count_count_count\
    \ (list-map (lambda (i) (list-map (lambda (j) (list i j)) i)) wells_filled_count_count_count_count_count_count)])\n\
    \                    (let* ([wells_filled_count_count_count_count_count_count_count_count\
    \ (list-map (lambda (i) (list-map (lambda (j) (list i j)) i)) wells_filled_count_count_count_",
  '  (let ((wells (list-map (lambda (row) (list-map (lambda (well) (list-map (lambda
    (bucket) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (w) (list-map
    (lambda (b) (list-map (lambda (n) (list-map (lambda (m) (list-map (lambda (c)
    (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda (f) (list-map (lambda
    (g) (list-map (lambda (h) (list-map (lambda (i) (list-map (lambda (j) (list-map
    (lambda (k) (list-map (lambda (l) (list-map (lambda (m) (list-map (lambda (n)
    (list-map (lambda (o) (list-map (lambda (p) (list-map (lambda (q) (list-map (lambda
    (r) (list-map (lambda (s) (list-map (lambda (t) (list-map (lambda (u) (list-map
    (lambda (v) (list-map (lambda (w) (list-map (lambda (x) (list-map (lambda (y)
    (list-map (lambda (z) (list-map (lambda (a) (list-map (lambda (b) (list-map (lambda
    (c) (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda (f) (list-map
    (lambda (g) (list-map (lambda (h) (list-map (lambda (i) (list-map (lambda (j)
    (list-map (lambda (k) (list-map (lambda (l) (list-map (lambda (m) (list-map (lambda
    (n) (list-map (lambda (o) (list-map (lambda (p) (list-map (lambda (q) (list-map
    (lambda (r) (list-map (lambda (s) (list-map (lambda (t) (list-map (lambda (u)
    (list-map (lambda (v) (list-map (lambda (w) (', "  (let ((wells (list-map (lambda\
    \ (row) (list-map (lambda (well) (list-map (lambda (bucket) (list-map (lambda\
    \ (i) (list-ref well i)) (lambda (j) (list-ref well j)) (lambda (c) (list-ref\
    \ bucket c))))) (list-ref row i)) (list-ref row j)) (list-ref row c))))))\n  (let\
    \ ((wells_filled (list-map (lambda (well) (list-map (lambda (bucket) (list-ref\
    \ well bucket)) (list-ref wells well))))))\n    (let ((wells_filled_count (list-map\
    \ (lambda (well) (list-ref wells_filled well))))))\n      (let ((wells_filled_count_count\
    \ (list-map (lambda (well) (list-ref wells_filled_count well))))))\n        (let\
    \ ((wells_filled_count_count_count (list-map (lambda (well) (list-ref wells_filled_count_count\
    \ well))))))\n          (let ((wells_filled_count_count_count_count (list-map\
    \ (lambda (well) (list-ref wells_filled_count_count_count well))))))\n       \
    \     (let ((wells_filled_count_count_count_count_count (list-map (lambda (well)\
    \ (list-ref wells_filled_count_count_count_count well))))))\n              (let\
    \ ((wells_filled_count_count_count_count_count_count (list-map (lambda (well)\
    \ (list-ref wells_filled_count_count_count_count_count well))))))\n          \
    \      (let ((wells_filled_count_count_count_count_count_count_count (list-map\
    \ (lambda (well) (list-ref wells_filled_count_count_count_count_count_count well))))))\n\
    \                  (let ((wells_filled_count_count_count_count_count_count_count_count\
    \ (list-map (lambda (well) (list-ref wells_filled_count_count_count_count_count_count_count\
    \ well))))))\n                    (let ((wells_filled_count_count_count_count_count_",
  "  (let ((wells (list-map (lambda (row) (list-map (lambda (well) (list-map (lambda\
    \ (bucket) (list-map (lambda (i) (list (cons (car well) (cons (car bucket) (cons\
    \ i (cons 0 (cons 0 (cons 0)))))))))) (list-map (lambda (i) (list (cons (car well)\
    \ (cons (car bucket) (cons i (cons 0 (cons 0 (cons 0)))))))))))) row)) (lambda\
    \ (row) (list-map (lambda (well) (list-map (lambda (bucket) (list-map (lambda\
    \ (i) (list (cons (car well) (cons (car bucket) (cons i (cons 0 (cons 0))))))))))\
    \ (list-map (lambda (i) (list (cons (car well) (cons (car bucket) (cons i (cons\
    \ 0 (cons 0)))))))) row)))) (list-map (lambda (row) (list-map (lambda (well) (list-map\
    \ (lambda (bucket) (list-map (lambda (i) (list (cons (car well) (cons (car bucket)\
    \ (cons i (cons 0 (cons 0)))))))))) (list-map (lambda (i) (list (cons (car well)\
    \ (cons (car bucket) (cons i (cons 0 (cons 0)))))))) row)))) grid)))\n  (let ((wells\
    \ (list-map (lambda (row) (list-map (lambda (well) (list-map (lambda (bucket)\
    \ (list-map (lambda (i) (list (cons (car well) (cons (car bucket) (cons i (cons\
    \ 0 (cons 0)))))))))) (list-map (lambda (i) (list (cons (car well) (cons (car\
    \ bucket) (cons i (cons 0 (cons 0)))))))) row)))) (list-map (lambda (row) (list-map\
    \ (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i) (list (cons\
    \ (car well) (cons (car bucket) (cons i (cons 0 (cons 0)))))))))) (list-map (lambda\
    \ (i) (list (cons (car well) (cons (car bucket) (cons i (cons 0 (cons 0))))))))\
    \ row", '  (let ((wells (list-map (lambda (row) (list-map (lambda (well) (list-map
    (lambda (bucket) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda
    (w) (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda (d) (list-map
    (lambda (e) (list-map (lambda (f) (list-map (lambda (g) (list-map (lambda (h)
    (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (w) (list-map (lambda
    (b) (list-map (lambda (c) (list-map (lambda (d) (list-map (lambda (e) (list-map
    (lambda (f) (list-map (lambda (g) (list-map (lambda (h) (list-map (lambda (i)
    (list-map (lambda (j) (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda
    (c) (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda (f) (list-map
    (lambda (g) (list-map (lambda (h) (list-map (lambda (i) (list-map (lambda (j)
    (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda
    (d) (list-map (lambda (e) (list-map (lambda (f) (list-map (lambda (g) (list-map
    (lambda (h) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (w)
    (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda (d) (list-map (lambda
    (e) (list-map (lambda (f) (list-map (lambda (g) (list-map (lambda (h) (list-map
    (lambda (i) (list-map (lambda (j) (list-map (lambda (w) (', "  (let ((wells (list-map\
    \ (lambda (well) (list-map (lambda (i) (list-map (lambda (j) (list-ref well i\
    \ j)))) well)) grid))\n        (buckets (list-map (lambda (well) (list-map (lambda\
    \ (i) (list-ref well i)) wells)) well))\n        (n_buckets (list-length buckets)))\n\
    \    (let ((n_wells (list-length wells)))\n      (let ((well_i (car wells)))\n\
    \        (let ((well_j (car well_i)))\n          (let ((bucket_i (car buckets))\n\
    \                (bucket_j (car bucket_i)))\n            (let ((n_bucket_i (car\
    \ n_buckets))\n                  (n_bucket_j (car n_buckets)))\n             \
    \ (let ((n_well_i (car n_wells))\n                    (n_well_j (car n_wells)))\n\
    \                (let ((well_i_i (car well_i))\n                      (well_i_j\
    \ (car well_i)))\n                  (let ((well_j_i (car well_j))\n          \
    \              (well_j_j (car well_j)))\n                    (let ((bucket_i_i\
    \ (car bucket_i))\n                          (bucket_i_j (car bucket_i)))\n  \
    \                    (let ((bucket_j_i (car bucket_j))\n                     \
    \       (bucket_j_j (car bucket_j)))\n                        (let ((n_bucket_i_i\
    \ (car n_bucket_i))\n                              (n_bucket_i_j (car n_bucket_i))\n\
    \                              (n_bucket_j_i (car n_bucket_j))\n             \
    \                 (n_bucket_j_j (car n_bucket_j)))\n                         \
    \ (let ((n_well_i_i (car n_well_i))\n                                (n_well_i_j\
    \ (car n_well_i))\n                                (n_well_j_i (car n_well_j))\n\
    \                                (n_well_j_j (car n_well_j)))\n              \
    \              (let ((well_", "  (let ((wells (list-map (lambda (row) (list-map\
    \ (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i) (list-ref well\
    \ i)) (lambda (j) (list-ref well j)) (lambda (c) (list-ref bucket c))))) (range\
    \ 0 (length row) - 1)))) row))\n    (let ((wells_filled (list 0)))\n      (let\
    \ ((wells_filled_count (list 0)))\n        (let ((wells_filled_index (list 0)))\n\
    \          (let ((wells_filled_buckets (list 0)))\n            (let ((wells_filled_buckets_count\
    \ (list 0)))\n              (let ((wells_filled_buckets_index (list 0)))\n   \
    \             (let ((wells_filled_buckets_buckets (list 0)))\n               \
    \   (let ((wells_filled_buckets_buckets_count (list 0)))\n                   \
    \ (let ((wells_filled_buckets_buckets_index (list 0)))\n                     \
    \ (let ((wells_filled_buckets_buckets_buckets (list 0)))\n                   \
    \     (let ((wells_filled_buckets_buckets_buckets_count (list 0)))\n         \
    \                 (let ((wells_filled_buckets_buckets_buckets_index (list 0)))\n\
    \                            (let ((wells_filled_buckets_buckets_buckets_buckets\
    \ (list 0)))\n                              (let ((wells_filled_buckets_buckets_buckets_buckets_count\
    \ (list 0)))\n                                (let ((wells_filled_buckets_buckets_buckets_buckets_index\
    \ (list 0)))\n                                  (let ((wells_filled_buckets_buckets_buckets_buckets_buckets\
    \ (list 0)))\n                                    (let ((wells_filled_buckets_buckets_buckets_buckets_buckets_count\
    \ (list 0)))\n                                      (let ((wells_filled_buckets_buckets_buckets_buckets_buckets_index\
    \ (list 0)))\n                                        (let ((wells_filled_buckets_buckets_buckets_buckets_buck",
  '  (let ((wells (list-map (lambda (row) (list-map (lambda (well) (list-map (lambda
    (bucket) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (w) (list-map
    (lambda (b) (list-map (lambda (x) (list-map (lambda (y) (list-map (lambda (z)
    (list-map (lambda (c) (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda
    (f) (list-map (lambda (g) (list-map (lambda (h) (list-map (lambda (i) (list-map
    (lambda (j) (list-map (lambda (k) (list-map (lambda (l) (list-map (lambda (m)
    (list-map (lambda (n) (list-map (lambda (o) (list-map (lambda (p) (list-map (lambda
    (q) (list-map (lambda (r) (list-map (lambda (s) (list-map (lambda (t) (list-map
    (lambda (u) (list-map (lambda (v) (list-map (lambda (w) (list-map (lambda (x)
    (list-map (lambda (y) (list-map (lambda (z) (list-map (lambda (a) (list-map (lambda
    (b) (list-map (lambda (c) (list-map (lambda (d) (list-map (lambda (e) (list-map
    (lambda (f) (list-map (lambda (g) (list-map (lambda (h) (list-map (lambda (i)
    (list-map (lambda (j) (list-map (lambda (k) (list-map (lambda (l) (list-map (lambda
    (m) (list-map (lambda (n) (list-map (lambda (o) (list-map (lambda (p) (list-map
    (lambda (q) (list-map (lambda (r) (list-map (lambda (s) (list-map (lambda (t)
    (list-map (lambda (u) (list-map (lambda (v) (', '  (let ((wells (list-map (lambda
    (well) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (w) (list-map
    (lambda (b) (list-map (lambda (c) (list-map (lambda (d) (list-map (lambda (e)
    (list-map (lambda (f) (list-map (lambda (g) (list-map (lambda (h) (list-map (lambda
    (i) (list-map (lambda (j) (list-map (lambda (k) (list-map (lambda (l) (list-map
    (lambda (m) (list-map (lambda (n) (list-map (lambda (o) (list-map (lambda (p)
    (list-map (lambda (q) (list-map (lambda (r) (list-map (lambda (s) (list-map (lambda
    (t) (list-map (lambda (u) (list-map (lambda (v) (list-map (lambda (w) (list-map
    (lambda (x) (list-map (lambda (y) (list-map (lambda (z) (list-map (lambda (a)
    (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda (d) (list-map (lambda
    (e) (list-map (lambda (f) (list-map (lambda (g) (list-map (lambda (h) (list-map
    (lambda (i) (list-map (lambda (j) (list-map (lambda (k) (list-map (lambda (l)
    (list-map (lambda (m) (list-map (lambda (n) (list-map (lambda (o) (list-map (lambda
    (p) (list-map (lambda (q) (list-map (lambda (r) (list-map (lambda (s) (list-map
    (lambda (t) (list-map (lambda (u) (list-map (lambda (v) (list-map (lambda (w)
    (list-map (lambda (x) (list-map (lambda (y) (list-map (lambda (z) (list-map (lambda
    (a) (list', "  (let ((wells (list-map (lambda (x) (list x)) grid)))\n    (let\
    \ ((wells_filled (list 0)))\n      (let ((wells_filled_count (list 0)))\n    \
    \    (let ((wells_filled_index (list 0)))\n          (let ((wells_filled_index_count\
    \ (list 0)))\n            (let ((wells_filled_index_count_count (list 0)))\n \
    \             (let ((wells_filled_index_count_count_count (list 0)))\n       \
    \         (let ((wells_filled_index_count_count_count_count (list 0)))\n     \
    \             (let ((wells_filled_index_count_count_count_count_count (list 0)))\n\
    \                    (let ((wells_filled_index_count_count_count_count_count_count\
    \ (list 0)))\n                      (let ((wells_filled_index_count_count_count_count_count_count_count\
    \ (list 0)))\n                        (let ((wells_filled_index_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                          (let ((wells_filled_index_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                            (let ((wells_filled_index_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                              (let ((wells_filled_index_count_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                                (let ((wells_filled_index_count_count_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                                  (let ((wells_filled_index_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                                    (let ((wells_filled_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                                      (let ((wells_filled_index_count_count_count_count_count",
  "  (let ((wells (list-map (lambda (well) (list well)) grid))\n        (buckets (list-map\
    \ (lambda (bucket) (list bucket)) wells)))\n    (let ((wells_filled (list 0))\n\
    \          (buckets_filled (list 0)))\n      (while (not (empty? wells))\n   \
    \     (let ((well (car wells)))\n          (let ((bucket (car buckets)))\n   \
    \         (if (car well)\n              (let ((well_filled (car wells_filled))\n\
    \                    (bucket_filled (car buckets_filled)))\n                (if\
    \ (car bucket)\n                  (if (car well_filled)\n                    (if\
    \ (car bucket_filled)\n                      (+ (car well_filled) (car bucket_filled))\n\
    \                      (car well_filled)\n                    )\n            \
    \        (car well_filled)\n                  )\n                  (car bucket_filled)\n\
    \                )\n              )\n            )\n          )\n        (set!\
    \ wells_filled (cdr wells_filled))\n        (set! buckets_filled (cdr buckets_filled))\n\
    \      )\n      (+ (car wells_filled) (car buckets_filled))\n    )\n  )\n)\n",
  '  (let ((wells (list-map (lambda (row) (list-map (lambda (well) (list-map (lambda
    (bucket) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (c) (list-map
    (lambda (w) (list-map (lambda (b) (list-map (lambda (x) (list-map (lambda (y)
    (list-map (lambda (z) (list-map (lambda (a) (list-map (lambda (b) (list-map (lambda
    (c) (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda (f) (list-map
    (lambda (g) (list-map (lambda (h) (list-map (lambda (i) (list-map (lambda (j)
    (list-map (lambda (k) (list-map (lambda (l) (list-map (lambda (m) (list-map (lambda
    (n) (list-map (lambda (o) (list-map (lambda (p) (list-map (lambda (q) (list-map
    (lambda (r) (list-map (lambda (s) (list-map (lambda (t) (list-map (lambda (u)
    (list-map (lambda (v) (list-map (lambda (w) (list-map (lambda (x) (list-map (lambda
    (y) (list-map (lambda (z) (list-map (lambda (a) (list-map (lambda (b) (list-map
    (lambda (c) (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda (f)
    (list-map (lambda (g) (list-map (lambda (h) (list-map (lambda (i) (list-map (lambda
    (j) (list-map (lambda (k) (list-map (lambda (l) (list-map (lambda (m) (list-map
    (lambda (n) (list-map (lambda (o) (list-map (lambda (p) (list-map (lambda (q)
    (list-map (lambda (r) (list-map (lambda (s) (', "  (let ((wells (list)))\n   \
    \ (for-each (lambda (well)\n      (let ((well_length (length well)))\n       \
    \ (for-each (lambda (bucket)\n          (let ((bucket_capacity (capacity bucket)))\n\
    \            (for-each (lambda (well_index)\n              (let ((well_index_length\
    \ (length well_index)))\n                (if (eq? (car well) (car well_index))\n\
    \                  (if (eqv? (cdr well) (cdr well_index))\n                  \
    \  (if (eqv? (car well_index) (car well_index_length))\n                     \
    \ (if (eqv? (cdr well_index) (cdr well_index_length))\n                      \
    \  (if (eqv? (car well_index_length) (car well_length))\n                    \
    \      (if (eqv? (cdr well_index_length) (cdr well_length))\n                \
    \            (if (eqv? (car well_length) (car bucket_capacity))\n            \
    \                  (if (eqv? (cdr well_length) (cdr bucket_capacity))\n      \
    \                          (if (eqv? (car bucket_capacity) (car well_length))\n\
    \                                  (if (eqv? (cdr bucket_capacity) (cdr well_length))\n\
    \                                    (if (eqv? (car well_length) (car well_length_length))\n\
    \                                      (if (eqv? (cdr well_length) (cdr well_length_length))\n\
    \                                        (if (eqv? (car well_length_length) (car\
    \ well_index_length))\n                                          (if (eqv? (cdr\
    \ well_length_length) (cdr well_index_length))\n                             \
    \               (if (eqv? (car well_index_length) (car well_index_index))\n  \
    \                                            (if (eqv? (cdr well_index_length)\
    \ (cdr well_index_index))\n                                                (if\
    \ (eqv? (car well_index_index) (car well_index_index_length))\n              \
    \                                    (if (eqv? (cdr well_index_index)", "  (let\
    \ ((wells (list)))\n    (for-each (lambda (well)\n      (let ((buckets (list)))\n\
    \        (for-each (lambda (bucket)\n          (let ((well_index (index-of well\
    \ wells)))\n            (let ((bucket_index (index-of bucket buckets)))\n    \
    \          (if (>= bucket_index 0)\n                (let ((well_capacity (capacity\
    \ wells well_index)))\n                  (if (>= well_capacity bucket_index)\n\
    \                    (let ((well_water (wells well_index)))\n                \
    \      (if (= well_water 0)\n                        (let ((bucket_water (buckets\
    \ bucket_index)))\n                          (if (= bucket_water 0)\n        \
    \                    (let ((well_water (wells well_index)))\n                \
    \              (if (>= well_water bucket_water)\n                            \
    \    (setf well_water (well_water - bucket_water))\n                         \
    \       (setf bucket_water 0)))))))))))))))))))\n    (max (map car wells) (map\
    \ car buckets)))))\n)\n", '  (let ((wells (list-map (lambda (row) (list-map (lambda
    (well) (list-map (lambda (bucket) (list-map (lambda (i) (list-map (lambda (j)
    (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda
    (d) (list-map (lambda (e) (list-map (lambda (f) (list-map (lambda (g) (list-map
    (lambda (h) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (w)
    (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda (d) (list-map (lambda
    (e) (list-map (lambda (f) (list-map (lambda (g) (list-map (lambda (h) (list-map
    (lambda (i) (list-map (lambda (j) (list-map (lambda (w) (list-map (lambda (b)
    (list-map (lambda (c) (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda
    (f) (list-map (lambda (g) (list-map (lambda (h) (list-map (lambda (i) (list-map
    (lambda (j) (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda (c)
    (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda (f) (list-map (lambda
    (g) (list-map (lambda (h) (list-map (lambda (i) (list-map (lambda (j) (list-map
    (lambda (w) (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda (d)
    (list-map (lambda (e) (list-map (lambda (f) (list-map (lambda (g) (list-map (lambda
    (h) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (w) (', "  (let\
    \ ((wells (list-map (lambda (x) (list x)) grid)))\n    (let ((wells_filled (list\
    \ 0)))\n      (let ((wells_filled_count (list 0)))\n        (let ((wells_filled_index\
    \ (list 0)))\n          (let ((wells_filled_index_count (list 0)))\n         \
    \   (let ((wells_filled_index_count_count (list 0)))\n              (let ((wells_filled_index_count_count_count\
    \ (list 0)))\n                (let ((wells_filled_index_count_count_count_count\
    \ (list 0)))\n                  (let ((wells_filled_index_count_count_count_count_count\
    \ (list 0)))\n                    (let ((wells_filled_index_count_count_count_count_count_count\
    \ (list 0)))\n                      (let ((wells_filled_index_count_count_count_count_count_count_count\
    \ (list 0)))\n                        (let ((wells_filled_index_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                          (let ((wells_filled_index_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                            (let ((wells_filled_index_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                              (let ((wells_filled_index_count_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                                (let ((wells_filled_index_count_count_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                                  (let ((wells_filled_index_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                                    (let ((wells_filled_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                                      (let ((wells_filled_index_count_count_count_count_count",
  '  (let ((wells (list-map (lambda (row) (list-map (lambda (well) (list-map (lambda
    (bucket) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (c) (list-map
    (lambda (w) (list-map (lambda (b) (list-map (lambda (x) (list-map (lambda (y)
    (list-map (lambda (z) (list-map (lambda (n) (list-map (lambda (o) (list-map (lambda
    (p) (list-map (lambda (q) (list-map (lambda (r) (list-map (lambda (s) (list-map
    (lambda (t) (list-map (lambda (u) (list-map (lambda (v) (list-map (lambda (w)
    (list-map (lambda (x) (list-map (lambda (y) (list-map (lambda (z) (list-map (lambda
    (n) (list-map (lambda (o) (list-map (lambda (p) (list-map (lambda (q) (list-map
    (lambda (r) (list-map (lambda (s) (list-map (lambda (t) (list-map (lambda (u)
    (list-map (lambda (v) (list-map (lambda (w) (list-map (lambda (x) (list-map (lambda
    (y) (list-map (lambda (z) (list-map (lambda (n) (list-map (lambda (o) (list-map
    (lambda (p) (list-map (lambda (q) (list-map (lambda (r) (list-map (lambda (s)
    (list-map (lambda (t) (list-map (lambda (u) (list-map (lambda (v) (list-map (lambda
    (w) (list-map (lambda (x) (list-map (lambda (y) (list-map (lambda (z) (list-map
    (lambda (n) (list-map (lambda (o) (list-map (lambda (p) (list-map (lambda (q)
    (list-map (lambda (r) (list-map (lambda (s) (', '  (let ((wells (list-map (lambda
    (row) (list-map (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i)
    (list-map (lambda (j) (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda
    (x) (list-map (lambda (y) (list-map (lambda (z) (list-map (lambda (a) (list-map
    (lambda (c) (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda (f)
    (list-map (lambda (g) (list-map (lambda (h) (list-map (lambda (i) (list-map (lambda
    (j) (list-map (lambda (k) (list-map (lambda (l) (list-map (lambda (m) (list-map
    (lambda (n) (list-map (lambda (o) (list-map (lambda (p) (list-map (lambda (q)
    (list-map (lambda (r) (list-map (lambda (s) (list-map (lambda (t) (list-map (lambda
    (u) (list-map (lambda (v) (list-map (lambda (w) (list-map (lambda (x) (list-map
    (lambda (y) (list-map (lambda (z) (list-map (lambda (a) (list-map (lambda (b)
    (list-map (lambda (c) (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda
    (f) (list-map (lambda (g) (list-map (lambda (h) (list-map (lambda (i) (list-map
    (lambda (j) (list-map (lambda (k) (list-map (lambda (l) (list-map (lambda (m)
    (list-map (lambda (n) (list-map (lambda (o) (list-map (lambda (p) (list-map (lambda
    (q) (list-map (lambda (r) (list-map (lambda (s) (list-map (lambda (t) (list-map
    (lambda (u) (', '  (let ((wells (list-map (lambda (row) (list-map (lambda (well)
    (list-map (lambda (bucket) (list-map (lambda (i) (list-map (lambda (j) (list-map
    (lambda (c) (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda (n)
    (list-map (lambda (x) (list-map (lambda (y) (list-map (lambda (z) (list-map (lambda
    (a) (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda (d) (list-map
    (lambda (e) (list-map (lambda (f) (list-map (lambda (g) (list-map (lambda (h)
    (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (k) (list-map (lambda
    (l) (list-map (lambda (m) (list-map (lambda (n) (list-map (lambda (o) (list-map
    (lambda (p) (list-map (lambda (q) (list-map (lambda (r) (list-map (lambda (s)
    (list-map (lambda (t) (list-map (lambda (u) (list-map (lambda (v) (list-map (lambda
    (w) (list-map (lambda (x) (list-map (lambda (y) (list-map (lambda (z) (list-map
    (lambda (a) (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda (d)
    (list-map (lambda (e) (list-map (lambda (f) (list-map (lambda (g) (list-map (lambda
    (h) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (k) (list-map
    (lambda (l) (list-map (lambda (m) (list-map (lambda (n) (list-map (lambda (o)
    (list-map (lambda (p) (list-map (lambda (q) (list-map (lambda (r) (', '  (let
    ((wells (list-map (lambda (row) (list-map (lambda (well) (list-map (lambda (bucket)
    (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (w) (list-map (lambda
    (b) (list-map (lambda (n) (list-map (lambda (x) (list-map (lambda (y) (list-map
    (lambda (z) (list-map (lambda (c) (list-map (lambda (d) (list-map (lambda (e)
    (list-map (lambda (f) (list-map (lambda (g) (list-map (lambda (h) (list-map (lambda
    (i) (list-map (lambda (j) (list-map (lambda (k) (list-map (lambda (l) (list-map
    (lambda (m) (list-map (lambda (n) (list-map (lambda (o) (list-map (lambda (p)
    (list-map (lambda (q) (list-map (lambda (r) (list-map (lambda (s) (list-map (lambda
    (t) (list-map (lambda (u) (list-map (lambda (v) (list-map (lambda (w) (list-map
    (lambda (x) (list-map (lambda (y) (list-map (lambda (z) (list-map (lambda (c)
    (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda (f) (list-map (lambda
    (g) (list-map (lambda (h) (list-map (lambda (i) (list-map (lambda (j) (list-map
    (lambda (k) (list-map (lambda (l) (list-map (lambda (m) (list-map (lambda (n)
    (list-map (lambda (o) (list-map (lambda (p) (list-map (lambda (q) (list-map (lambda
    (r) (list-map (lambda (s) (list-map (lambda (t) (list-map (lambda (u) (list-map
    (lambda (v) (list-map (lambda (w) (', "  (let ((wells (list-map (lambda (row)\
    \ (list-map (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i) (list\
    \ (cons (cons well i) (cons bucket i)))))) row)) well))))\n    (let ((wells_filled\
    \ (list-map (lambda (well) (list-map (lambda (bucket) (list (cons well bucket))))\
    \ wells))))\n      (let ((wells_filled_count (list-map (lambda (well) (list (cons\
    \ well (list-length wells_filled)))) wells_filled))))\n        (let ((wells_filled_count_count\
    \ (list-map (lambda (well) (list (cons well (list-length (list-map (lambda (bucket)\
    \ (list (cons well bucket)))))))) wells_filled_count))))\n          (let ((wells_filled_count_count_count\
    \ (list-map (lambda (well) (list (cons well (list-length (list-map (lambda (bucket)\
    \ (list (cons well bucket)))))))) wells_filled_count_count))))\n            (let\
    \ ((wells_filled_count_count_count_count (list-map (lambda (well) (list (cons\
    \ well (list-length (list-map (lambda (bucket) (list (cons well bucket))))))))\
    \ wells_filled_count_count_count))))\n              (let ((wells_filled_count_count_count_count_count\
    \ (list-map (lambda (well) (list (cons well (list-length (list-map (lambda (bucket)\
    \ (list (cons well bucket)))))))) wells_filled_count_count_count_count))))\n \
    \               (let ((wells_filled_count_count_count_count_count_count (list-map\
    \ (lambda (well) (list (cons well (list-length (list-map (lambda (bucket) (list\
    \ (cons well bucket)))))))) wells_filled_count_count_count_count_count))))\n \
    \                 (let ((wells_filled_count_count_count_count_count_count_count\
    \ (list-map (lambda (well) (list (cons well (list-length (list-map (lambda (bucket)\
    \ (list (cons well bucket)))))))) wells_", "  (let ((wells (list-map (lambda (well)\
    \ (list-map (lambda (i) (list-map (lambda (j) (list-ref well i j)))) well)) grid))\n\
    \       (buckets (list-map (lambda (well) (list-map (lambda (i) (list-ref well\
    \ i)) wells)) wells)))\n    (let ((wells_filled (list-map (lambda (well) (list-map\
    \ (lambda (i) (list-ref well i)) wells)) wells)))\n      (let ((wells_filled_count\
    \ (list-map (lambda (well) (list-map (lambda (i) (list-ref well i)) wells_filled))\
    \ wells_filled))\n           (buckets_filled (list-map (lambda (well) (list-map\
    \ (lambda (i) (list-ref well i)) buckets)) buckets)))\n        (let ((wells_filled_count_count\
    \ (list-map (lambda (well) (list-map (lambda (i) (list-ref well i)) wells_filled_count))\
    \ wells_filled_count))\n             (buckets_filled_count (list-map (lambda (well)\
    \ (list-map (lambda (i) (list-ref well i)) buckets_filled_count)) buckets_filled_count)))\n\
    \          (let ((wells_filled_count_count_count (list-map (lambda (well) (list-map\
    \ (lambda (i) (list-ref well i)) wells_filled_count_count)) wells_filled_count_count))\n\
    \               (buckets_filled_count_count (list-map (lambda (well) (list-map\
    \ (lambda (i) (list-ref well i)) buckets_filled_count_count)) buckets_filled_count_count))))\n\
    \            (let ((wells_filled_count_count_count_count (list-map (lambda (well)\
    \ (list-map (lambda (i) (list-ref well i)) wells_filled_count_count_count)) wells_filled_count_count_count))\n\
    \                 (buckets_filled_count_count_count_count (list-map (lambda (well)\
    \ (list-map (lambda (i) (list-ref well i)) buckets_filled_count_count_count",
  "  (let ((wells (list)))\n    (for-each (lambda (well)\n      (let ((well_length\
    \ (length well)))\n        (for-each (lambda (bucket)\n          (let ((bucket_capacity\
    \ (capacity bucket)))\n            (if (>= (length wells) well_length)\n     \
    \         (let ((well_capacity (bucket_capacity well)))\n                (if (>=\
    \ well_capacity bucket_capacity)\n                  (append wells well)\n    \
    \              (append wells (list))))))))))\n      grid))\n  (length wells)))\n",
  "  (let* ([wells (list-map (lambda (row) (list-map (lambda (well) (list-map (lambda\
    \ (bucket) (list-map (lambda (i) (list (cons (cons well i) (cons bucket i))))\
    \ (row)) (well)))) (row)) (well)))) (row) (wells))]\n    (let* ([wells_filled\
    \ (list 0)]\n           [wells_filled_count (0)]\n           [wells_filled_capacity\
    \ (0)]\n           [wells_filled_buckets (list 0)])\n      (while (>= (length\
    \ wells) 0)\n        (let* ([well (car wells)]\n                [well_filled (car\
    \ wells_filled)]\n                [well_filled_count (car wells_filled_count)]\n\
    \                [well_filled_capacity (car wells_filled_capacity)])\n       \
    \   (if (not= well_filled_count 0)\n            (let* ([well_filled_bucket (car\
    \ wells_filled_buckets)]\n                    [well_filled_bucket_capacity (car\
    \ well_filled_bucket)]\n                    [well_filled_bucket_count (car well_filled_bucket_count)])\n\
    \              (if (>= well_filled_capacity well_filled_bucket_capacity)\n   \
    \             (set! wells_filled_buckets (list (cdr wells_filled_buckets)))\n\
    \                (set! wells_filled_bucket_count (car wells_filled_bucket_count)\
    \ - 1)\n                (set! wells_filled_count (car wells_filled_count) + 1)\n\
    \                (set! wells_filled_capacity (car wells_filled_capacity) - well_filled_bucket_capacity))\n\
    \              (set! wells_filled_count (car wells_filled_count) + 1))\n     \
    \     (set! wells_filled (cdr wells_filled))\n          (set! wells_filled_count\
    \ (car wells_filled_count))\n          (set! wells_filled_capacity (car wells_filled_capacity))\n\
    \          (set! wells_filled_buckets (list (car wells_filled_buckets)))))\n \
    \     (set! wells_filled_count (car wells_filled_count)))))\n  ", '  (let ((wells
    (list-map (lambda (x) (list-map (lambda (y) (list-map (lambda (z) (list-map (lambda
    (w) (list-map (lambda (u) (list-map (lambda (v) (list-map (lambda (t) (list-map
    (lambda (s) (list-map (lambda (r) (list-map (lambda (q) (list-map (lambda (p)
    (list-map (lambda (o) (list-map (lambda (n) (list-map (lambda (m) (list-map (lambda
    (l) (list-map (lambda (k) (list-map (lambda (j) (list-map (lambda (i) (list-map
    (lambda (h) (list-map (lambda (g) (list-map (lambda (f) (list-map (lambda (e)
    (list-map (lambda (d) (list-map (lambda (c) (list-map (lambda (b) (list-map (lambda
    (a) (list-map (lambda (y) (list-map (lambda (x) (list-map (lambda (w) (list-map
    (lambda (u) (list-map (lambda (v) (list-map (lambda (t) (list-map (lambda (s)
    (list-map (lambda (r) (list-map (lambda (q) (list-map (lambda (p) (list-map (lambda
    (o) (list-map (lambda (n) (list-map (lambda (m) (list-map (lambda (l) (list-map
    (lambda (k) (list-map (lambda (j) (list-map (lambda (i) (list-map (lambda (h)
    (list-map (lambda (g) (list-map (lambda (f) (list-map (lambda (e) (list-map (lambda
    (d) (list-map (lambda (c) (list-map (lambda (b) (list-map (lambda (a) (list-map
    (lambda (y) (list-map (lambda (x) (list-map (lambda (w) (list-map (lambda (u)
    (list-map (lambda (v) (list', '  (let ((wells (list-map (lambda (row) (list-map
    (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i) (list-map (lambda
    (j) (list-map (lambda (c) (list-map (lambda (w) (list-map (lambda (b) (list-map
    (lambda (n) (list-map (lambda (x) (list-map (lambda (y) (list-map (lambda (z)
    (list-map (lambda (a) (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda
    (d) (list-map (lambda (e) (list-map (lambda (f) (list-map (lambda (g) (list-map
    (lambda (h) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (k)
    (list-map (lambda (l) (list-map (lambda (m) (list-map (lambda (n) (list-map (lambda
    (o) (list-map (lambda (p) (list-map (lambda (q) (list-map (lambda (r) (list-map
    (lambda (s) (list-map (lambda (t) (list-map (lambda (u) (list-map (lambda (v)
    (list-map (lambda (w) (list-map (lambda (x) (list-map (lambda (y) (list-map (lambda
    (z) (list-map (lambda (a) (list-map (lambda (b) (list-map (lambda (c) (list-map
    (lambda (d) (list-map (lambda (e) (list-map (lambda (f) (list-map (lambda (g)
    (list-map (lambda (h) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda
    (k) (list-map (lambda (l) (list-map (lambda (m) (list-map (lambda (n) (list-map
    (lambda (o) (list-map (lambda (p) (list-map (lambda (q) (list-map (lambda (r)
    (', "  (let ((wells (list)))\n    (for-each (lambda (well)\n      (for-each (lambda\
    \ (bucket)\n        (for-each (lambda (i)\n          (for-each (lambda (j)\n \
    \           (if (grid[i][j] = 1)\n              (wells 'append (list (list i j\
    \ bucket))))))))))))\n    (max (map (lambda (well)\n      (map (lambda (bucket)\n\
    \        (map (lambda (i)\n          (map (lambda (j)\n            (if (wells\
    \ 'member (list i j bucket))\n              (wells 'remove (list i j bucket)))))))))))))))\n",
  '  (let ((wells (list-map (lambda (row) (list-map (lambda (well) (list-map (lambda
    (bucket) (list-map (lambda (i) (list-map (lambda (j) (list (cons (cons well (cons
    bucket (cons i j))) (cons (cons well (cons bucket (cons i j))) (cons (cons well
    (cons bucket (cons i j))) (cons (cons well (cons bucket (cons i j))) (cons (cons
    well (cons bucket (cons i j))) (cons (cons well (cons bucket (cons i j))) (cons
    (cons well (cons bucket (cons i j))) (cons (cons well (cons bucket (cons i j)))
    (cons (cons well (cons bucket (cons i j))) (cons (cons well (cons bucket (cons
    i j))) (cons (cons well (cons bucket (cons i j))) (cons (cons well (cons bucket
    (cons i j))) (cons (cons well (cons bucket (cons i j))) (cons (cons well (cons
    bucket (cons i j))) (cons (cons well (cons bucket (cons i j))) (cons (cons well
    (cons bucket (cons i j))) (cons (cons well (cons bucket (cons i j))) (cons (cons
    well (cons bucket (cons i j))) (cons (cons well (cons bucket (cons i j))) (cons
    (cons well (cons bucket (cons i j))) (cons (cons well (cons bucket (cons i j)))
    (cons (cons well (cons bucket (cons i j))) (cons (cons well (cons bucket (cons
    i j))) (cons (cons well (cons bucket (cons i j))) (cons (cons well (cons bucket
    (cons i j))) (cons (cons well (cons bucket (cons i j))) (cons (cons well (cons
    bucket (cons i j))) (cons (cons well (cons bucket (cons i j))) (cons (cons well
    (cons bucket (cons i j))) (cons (cons well (cons bucket (cons i j))) (cons (cons
    well (cons bucket (cons i j))) (cons (cons well (cons bucket (cons i j))) (cons
    (cons well (cons bucket (cons i j))) (cons (cons well (cons bucket (cons i j)))
    (cons (cons well (cons bucket (cons i j))) (cons (', '  (let ((wells (list-map
    (lambda (row) (list-map (lambda (well) (list-map (lambda (bucket) (list-map (lambda
    (i) (list (cons (cons (cons 0 (cons (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons
    0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons
    0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons
    0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons
    0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons
    0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons
    0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons
    0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons
    0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons
    0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons
    0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons
    0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons
    0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons
    0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons
    0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons
    0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons 0 (cons', "  (let ((wells (list-map\
    \ (lambda (x) (list x)) grid)))\n    (let ((wells_filled (list-map (lambda (x)\
    \ (list-length x)) wells)))\n      (let ((wells_filled_count (list-map (lambda\
    \ (x) (list-sum x)) wells_filled)))\n        (let ((wells_filled_count_sum (list-fold\
    \ (lambda (a b) (list-sum a b)) wells_filled_count 0)))\n          (let ((wells_filled_count_sum_count\
    \ (list-fold (lambda (a b) (list-sum a b)) wells_filled_count_sum 1)))\n     \
    \       (let ((wells_filled_count_sum_count_sum (list-fold (lambda (a b) (list-sum\
    \ a b)) wells_filled_count_sum_count 2)))\n              (let ((wells_filled_count_sum_count_sum_count\
    \ (list-fold (lambda (a b) (list-sum a b)) wells_filled_count_sum_count_sum 3)))\n\
    \                (let ((wells_filled_count_sum_count_sum_count_sum (list-fold\
    \ (lambda (a b) (list-sum a b)) wells_filled_count_sum_count_sum_count 4)))\n\
    \                  (let ((wells_filled_count_sum_count_sum_count_sum_sum (list-fold\
    \ (lambda (a b) (list-sum a b)) wells_filled_count_sum_count_sum_count_sum 5)))\n\
    \                    (let ((wells_filled_count_sum_count_sum_count_sum_sum_sum\
    \ (list-fold (lambda (a b) (list-sum a b)) wells_filled_count_sum_count_sum_count_sum_sum\
    \ 6)))\n                      (let ((wells_filled_count_sum_count_sum_count_sum_sum_sum_sum\
    \ (list-fold (lambda (a b) (list-sum a b)) wells_filled_count_sum_count_sum_count_sum_sum_sum\
    \ 7)))\n                        (let ((wells_filled_count_sum_count_sum_count_sum_sum_sum_sum",
  '  (let ((wells (list-map (lambda (row) (list-map (lambda (well) (list-map (lambda
    (bucket) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (c) (list
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (', "  (let ((wells (list-map (lambda (x) (list-map (lambda\
    \ (y) (list x y)) x)) grid))\n        (buckets (list-map (lambda (x) (list-map\
    \ (lambda (y) (list x y)) x)) capacity)))\n    (let ((wells_filled (list-map (lambda\
    \ (x) (list-map (lambda (y) (list x y)) x)) wells)))\n      (let ((wells_filled_count\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) wells_filled)))\n\
    \        (let ((wells_filled_count_count (list-map (lambda (x) (list-map (lambda\
    \ (y) (list x y)) x)) wells_filled_count)))\n          (let ((wells_filled_count_count_count\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count_count)))\n\
    \            (let ((wells_filled_count_count_count_count (list-map (lambda (x)\
    \ (list-map (lambda (y) (list x y)) x)) wells_filled_count_count_count)))\n  \
    \            (let ((wells_filled_count_count_count_count_count (list-map (lambda\
    \ (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count_count_count_count)))\n\
    \                (let ((wells_filled_count_count_count_count_count_count (list-map\
    \ (lambda (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count_count_count_count_count)))\n\
    \                  (let ((wells_filled_count_count_count_count_count_count_count\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count_count_count_count_count_count)))\n\
    \                    (let ((wells_filled_count_count_count_count_count_count_count_count\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y", "  (let ((wells (list-map\
    \ (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i) (list (list\
    \ 0 0))) (well))) (bucket))) (well)))\n        (buckets (list-map (lambda (bucket)\
    \ (list-map (lambda (i) (list (list 0))) (bucket))) (bucket)))\n        (max_buckets\
    \ (list-map (lambda (bucket) (list-map (lambda (i) (list (list 0))) (bucket)))\
    \ (bucket)))\n        (max_wells (list-map (lambda (well) (list-map (lambda (i)\
    \ (list (list 0))) (well))) (well)))\n        (max_well_buckets (list-map (lambda\
    \ (well) (list-map (lambda (bucket) (list-map (lambda (i) (list (list 0))) (well)))\
    \ (bucket))) (well)))\n        (max_well_max_buckets (list-map (lambda (well)\
    \ (list-map (lambda (bucket) (list-map (lambda (i) (list (list 0))) (well))) (bucket)))\
    \ (well)))\n        (max_well_wells (list-map (lambda (well) (list-map (lambda\
    \ (i) (list (list 0))) (well))) (well)))\n        (max_well_max_wells (list-map\
    \ (lambda (well) (list-map (lambda (i) (list (list 0))) (well))) (well)))\n  \
    \      (max_well_max_well_buckets (list-map (lambda (well) (list-map (lambda (bucket)\
    \ (list-map (lambda (i) (list (list 0))) (well))) (bucket))) (well)))\n      \
    \  (max_well_max_well_max_buckets (list-map (lambda (well) (list-map (lambda (bucket)\
    \ (list-map (lambda (i) (list (list 0))) (well))) (bucket))) (well)))\n      \
    \  (max_well_max_well_max_wells (list-map (lambda (well) (list-map (lambda (bucket)\
    \ (list-map (lambda (i", '  (let ((wells (list-map (lambda (row) (list-map (lambda
    (well) (list-map (lambda (bucket) (list-map (lambda (i) (list-map (lambda (j)
    (list-map (lambda (c) (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda
    (n) (list-map (lambda (o) (list-map (lambda (x) (list-map (lambda (y) (list-map
    (lambda (z) (list-map (lambda (a) (list-map (lambda (b) (list-map (lambda (c)
    (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda (f) (list-map (lambda
    (g) (list-map (lambda (h) (list-map (lambda (i) (list-map (lambda (j) (list-map
    (lambda (k) (list-map (lambda (l) (list-map (lambda (m) (list-map (lambda (n)
    (list-map (lambda (o) (list-map (lambda (p) (list-map (lambda (q) (list-map (lambda
    (r) (list-map (lambda (s) (list-map (lambda (t) (list-map (lambda (u) (list-map
    (lambda (v) (list-map (lambda (w) (list-map (lambda (x) (list-map (lambda (y)
    (list-map (lambda (z) (list-map (lambda (a) (list-map (lambda (b) (list-map (lambda
    (c) (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda (f) (list-map
    (lambda (g) (list-map (lambda (h) (list-map (lambda (i) (list-map (lambda (j)
    (list-map (lambda (k) (list-map (lambda (l) (list-map (lambda (m) (list-map (lambda
    (n) (list-map (lambda (o) (list-map (lambda (p) (list-map (lambda (q) (', "  (let\
    \ ((wells (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) grid))\n\
    \        (buckets (list-map (lambda (x) (list-map (lambda (y) (list x y)) x))\
    \ capacity)))\n    (let ((wells_filled (list-map (lambda (x) (list-map (lambda\
    \ (y) (list x y)) x)) wells))\n          (buckets_filled (list-map (lambda (x)\
    \ (list-map (lambda (y) (list x y)) x)) buckets)))\n      (let ((wells_filled_count\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) wells_filled))\n\
    \            (buckets_filled_count (list-map (lambda (x) (list-map (lambda (y)\
    \ (list x y)) x)) buckets_filled)))\n        (let ((wells_filled_count_count (list-map\
    \ (lambda (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count))\n   \
    \           (buckets_filled_count_count (list-map (lambda (x) (list-map (lambda\
    \ (y) (list x y)) x)) buckets_filled_count)))\n          (let ((wells_filled_count_count_count\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count_count))\n\
    \                (buckets_filled_count_count_count (list-map (lambda (x) (list-map\
    \ (lambda (y) (list x y)) x)) buckets_filled_count_count)))\n            (let\
    \ ((wells_filled_count_count_count_count (list-map (lambda (x) (list-map (lambda\
    \ (y) (list x y)) x)) wells_filled_count_count_count))\n                  (buckets_filled_count_count_count_count\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) buckets_filled_count_count_count)))\n\
    \              (let ((wells_filled_count_count_count_count", '  (let ((wells (list-map
    (lambda (row) (list-map (lambda (well) (list-map (lambda (bucket) (list-map (lambda
    (i) (list-map (lambda (j) (list-map (lambda (c) (list-map (lambda (w) (list-map
    (lambda (b) (list-map (lambda (n) (list-map (lambda (x) (list-map (lambda (y)
    (list-map (lambda (z) (list-map (lambda (a) (list-map (lambda (b) (list-map (lambda
    (c) (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda (f) (list-map
    (lambda (g) (list-map (lambda (h) (list-map (lambda (i) (list-map (lambda (j)
    (list-map (lambda (k) (list-map (lambda (l) (list-map (lambda (m) (list-map (lambda
    (n) (list-map (lambda (o) (list-map (lambda (p) (list-map (lambda (q) (list-map
    (lambda (r) (list-map (lambda (s) (list-map (lambda (t) (list-map (lambda (u)
    (list-map (lambda (v) (list-map (lambda (w) (list-map (lambda (x) (list-map (lambda
    (y) (list-map (lambda (z) (list-map (lambda (a) (list-map (lambda (b) (list-map
    (lambda (c) (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda (f)
    (list-map (lambda (g) (list-map (lambda (h) (list-map (lambda (i) (list-map (lambda
    (j) (list-map (lambda (k) (list-map (lambda (l) (list-map (lambda (m) (list-map
    (lambda (n) (list-map (lambda (o) (list-map (lambda (p) (list-map (lambda (q)
    (list-map (lambda (r) (', "  (let ((wells (list-map (lambda (x) (list x 0)) grid)))\n\
    \    (let ((wells_filled (list 0)))\n      (let ((wells_filled_count (list 0)))\n\
    \        (let ((wells_filled_new (list 0)))\n          (let ((wells_filled_new_count\
    \ (list 0)))\n            (let ((wells_filled_new_count_count (list 0)))\n   \
    \           (let ((wells_filled_new_count_count_count (list 0)))\n           \
    \     (let ((wells_filled_new_count_count_count_count (list 0)))\n           \
    \       (let ((wells_filled_new_count_count_count_count_count (list 0)))\n   \
    \                 (let ((wells_filled_new_count_count_count_count_count_count\
    \ (list 0)))\n                      (let ((wells_filled_new_count_count_count_count_count_count_count\
    \ (list 0)))\n                        (let ((wells_filled_new_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                          (let ((wells_filled_new_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                            (let ((wells_filled_new_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                              (let ((wells_filled_new_count_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                                (let ((wells_filled_new_count_count_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                                  (let ((wells_filled_new_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                                    (let ((wells_filled_new_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                                      (let ((wells_filled_new_count_count_count_count_",
  "  (let ((wells (list-map (lambda (x) (list x)) grid))\n        (buckets (list-map\
    \ (lambda (x) (list x)) capacity)))\n    (let ((wells_filled (list-map (lambda\
    \ (x) (list-length (wells x))))))\n      (let ((wells_filled_count (list-map (lambda\
    \ (x) (list-sum (wells_filled x))))))\n        (let ((wells_filled_count_count\
    \ (list-map (lambda (x) (list-sum (wells_filled_count x))))))\n          (let\
    \ ((wells_filled_count_count_count (list-map (lambda (x) (list-sum (wells_filled_count_count\
    \ x))))))\n            (let ((wells_filled_count_count_count_count (list-map (lambda\
    \ (x) (list-sum (wells_filled_count_count_count x))))))\n              (let ((wells_filled_count_count_count_count_count\
    \ (list-map (lambda (x) (list-sum (wells_filled_count_count_count_count x))))))\n\
    \                (let ((wells_filled_count_count_count_count_count_count (list-map\
    \ (lambda (x) (list-sum (wells_filled_count_count_count_count_count x))))))\n\
    \                  (let ((wells_filled_count_count_count_count_count_count_count\
    \ (list-map (lambda (x) (list-sum (wells_filled_count_count_count_count_count_count\
    \ x))))))\n                    (let ((wells_filled_count_count_count_count_count_count_count_count\
    \ (list-map (lambda (x) (list-sum (wells_filled_count_count_count_count_count_count_count\
    \ x))))))\n                      (let ((wells_filled_count_count_count_count_count_count_count_count_count\
    \ (list-map (lambda (x) (list-sum (wells_filled_count_count_count_count_count_count_count_count\
    \ x))))))\n                        (let ((wells_filled_count", '  (let ((wells
    (list-map (lambda (row) (list-map (lambda (well) (list-map (lambda (bucket) (list-map
    (lambda (cap) (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda (c)
    (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda
    (w) (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda (w) (list-map
    (lambda (b) (list-map (lambda (c) (list-map (lambda (w) (list-map (lambda (b)
    (list-map (lambda (c) (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda
    (c) (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda (c) (list-map
    (lambda (w) (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda (w)
    (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda (w) (list-map (lambda
    (b) (list-map (lambda (c) (list-map (lambda (w) (list-map (lambda (b) (list-map
    (lambda (c) (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda (c)
    (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda
    (w) (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda (w) (list-map
    (lambda (b) (list-map (lambda (c) (list-map (lambda (w) (list-map (lambda (b)
    (list-map (lambda (c) (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda
    (c) (list-map (lambda (w) (', "  (let* ([wells (map (lambda (row) (map (lambda\
    \ (well) (list well 0))) row))]\n         [buckets (map (lambda (row) (map (lambda\
    \ (well) (list well 0))) row))]\n         [well_count (count wells)])\n    (if\
    \ (eq? well_count 0)\n      (display \"No wells to fill.\")\n      (let* ([well_index\
    \ (random well_count)]\n             [well (wells well_index)]\n             [bucket\
    \ (buckets well_index)]\n             [well_capacity (capacity well)]\n      \
    \       [bucket_capacity (capacity bucket)])\n        (let* ([well_filled (fill\
    \ well bucket)]\n               [bucket_filled (fill bucket well)])\n        \
    \  (if (eq? well_filled well_capacity)\n            (display \"Well \" well_index\
    \ \" is full.\")\n            (if (eq? bucket_filled well_capacity)\n        \
    \      (display \"Bucket \" bucket_index \" is full.\")\n              (display\
    \ \"Bucket \" bucket_index \" is full. Well \" well_index \" is full.\")\n   \
    \           (display \"Bucket \" bucket_index \" is full. Well \" well_index \"\
    \ is full. Bucket \" bucket_index \" is full.\")\n              (display \"Bucket\
    \ \" bucket_index \" is full. Well \" well_index \" is full. Bucket \" bucket_index\
    \ \" is full. Bucket \" bucket_index \" is full.\")\n              (display \"\
    Bucket \" bucket_index \" is full. Well \" well_index \" is full. Bucket \" bucket_index\
    \ \" is full. Bucket \" bucket_index \" is full. Bucket \" bucket_index \" is\
    \ full.\")\n              (display \"Bucket \" bucket_index \" is full. Well \"\
    \ well_index \" is full. Bucket \" bucket_index \" is full. Bucket \" bucket_index\
    \ \" is full. Bucket \" bucket_index \" is full. Bucket \" bucket_index \" is\
    \ full.\")\n              (display \"Bucket \" bucket_index \" is full. Well \"\
    \ well_index \" is full. Bucket \" bucket_index \" is full. Bucket \" bucket_index\
    \ \" is full. Bucket \" bucket_index \" is full. Bucket \" bucket_index \" is\
    \ full. Bucket \" bucket_index \" is full.\")", "  (let ((wells (list-map (lambda\
    \ (x) (list-map (lambda (y) (list-map (lambda (z) (list (list x y z)))) x)) x))\
    \ grid))\n    (let ((wells_filled (list-map (lambda (x) (list-map (lambda (y)\
    \ (list-map (lambda (z) (list (list x y z)))) x)) x)) (wells_filled_count 0)))\n\
    \      (let ((wells_filled_count (list-map (lambda (x) (list-map (lambda (y) (list-map\
    \ (lambda (z) (list (list x y z)))) x)) x)) (wells_filled_count 0)))\n       \
    \ (let ((wells_filled_count (list-map (lambda (x) (list-map (lambda (y) (list-map\
    \ (lambda (z) (list (list x y z)))) x)) x)) (wells_filled_count 0)))\n       \
    \   (let ((wells_filled_count (list-map (lambda (x) (list-map (lambda (y) (list-map\
    \ (lambda (z) (list (list x y z)))) x)) x)) (wells_filled_count 0)))\n       \
    \     (let ((wells_filled_count (list-map (lambda (x) (list-map (lambda (y) (list-map\
    \ (lambda (z) (list (list x y z)))) x)) x)) (wells_filled_count 0)))\n       \
    \       (let ((wells_filled_count (list-map (lambda (x) (list-map (lambda (y)\
    \ (list-map (lambda (z) (list (list x y z)))) x)) x)) (wells_filled_count 0)))\n\
    \                (let ((wells_filled_count (list-map (lambda (x) (list-map (lambda\
    \ (y) (list-map (lambda (z) (list (list x y z)))) x)) x)) (wells_filled_count\
    \ 0)))\n                  (let ((wells_filled_count (list-map (lambda (x) (list-map\
    \ (lambda (y) (list-map (lambda (z) (list (list x y z)))) x)) x)) (wells_", '  (let
    ((wells (list-map (lambda (well) (list-map (lambda (bucket) (list-map (lambda
    (i) (list-map (lambda (j) (list-map (lambda (w) (list-map (lambda (b) (list-map
    (lambda (x) (list-map (lambda (y) (list-map (lambda (z) (list-map (lambda (n)
    (list-map (lambda (o) (list-map (lambda (p) (list-map (lambda (q) (list-map (lambda
    (r) (list-map (lambda (s) (list-map (lambda (t) (list-map (lambda (u) (list-map
    (lambda (v) (list-map (lambda (w) (list-map (lambda (x) (list-map (lambda (y)
    (list-map (lambda (z) (list-map (lambda (n) (list-map (lambda (o) (list-map (lambda
    (p) (list-map (lambda (q) (list-map (lambda (r) (list-map (lambda (s) (list-map
    (lambda (t) (list-map (lambda (u) (list-map (lambda (v) (list-map (lambda (w)
    (list-map (lambda (x) (list-map (lambda (y) (list-map (lambda (z) (list-map (lambda
    (n) (list-map (lambda (o) (list-map (lambda (p) (list-map (lambda (q) (list-map
    (lambda (r) (list-map (lambda (s) (list-map (lambda (t) (list-map (lambda (u)
    (list-map (lambda (v) (list-map (lambda (w) (list-map (lambda (x) (list-map (lambda
    (y) (list-map (lambda (z) (list-map (lambda (n) (list-map (lambda (o) (list-map
    (lambda (p) (list-map (lambda (q) (list-map (lambda (r) (list-map (lambda (s)
    (list-map (lambda (t) (list-map (lambda (u) (', "  (let ((wells (list-map (lambda\
    \ (x) (list-map (lambda (y) (list x y)) x)) grid))\n        (buckets (list-map\
    \ (lambda (x) (list-map (lambda (y) (list x y)) x)) capacity)))\n    (let ((wells_filled\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) wells))\n      \
    \    (buckets_filled (list-map (lambda (x) (list-map (lambda (y) (list x y)) x))\
    \ buckets)))\n      (let ((wells_filled_count (list-map (lambda (x) (list-map\
    \ (lambda (y) (list x y)) x)) wells_filled))\n            (buckets_filled_count\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) buckets_filled)))\n\
    \        (let ((wells_filled_count_count (list-map (lambda (x) (list-map (lambda\
    \ (y) (list x y)) x)) wells_filled_count))\n              (buckets_filled_count_count\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) buckets_filled_count)))\n\
    \          (let ((wells_filled_count_count_count (list-map (lambda (x) (list-map\
    \ (lambda (y) (list x y)) x)) wells_filled_count_count))\n                (buckets_filled_count_count_count\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) buckets_filled_count_count)))\n\
    \            (let ((wells_filled_count_count_count_count (list-map (lambda (x)\
    \ (list-map (lambda (y) (list x y)) x)) wells_filled_count_count_count))\n   \
    \               (buckets_filled_count_count_count_count (list-map (lambda (x)\
    \ (list-map (lambda (y) (list x y)) x)) buckets_filled_count_count_count)))\n\
    \              (let ((wells_filled_count_count_count_count", "  (let ((wells (list-map\
    \ (lambda (x) (list-map (lambda (y) (list x y)) x)) grid))\n        (buckets (list-map\
    \ (lambda (x) (list-map (lambda (y) (list x y)) x)) capacity)))\n    (let ((wells_filled\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) wells)))\n     \
    \ (let ((wells_filled_count (list-map (lambda (x) (list-map (lambda (y) (list\
    \ x y)) x)) wells_filled)))\n        (let ((wells_filled_count_count (list-map\
    \ (lambda (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count)))\n  \
    \        (let ((wells_filled_count_count_count (list-map (lambda (x) (list-map\
    \ (lambda (y) (list x y)) x)) wells_filled_count_count)))\n            (let ((wells_filled_count_count_count_count\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count_count_count)))\n\
    \              (let ((wells_filled_count_count_count_count_count (list-map (lambda\
    \ (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count_count_count_count)))\n\
    \                (let ((wells_filled_count_count_count_count_count_count (list-map\
    \ (lambda (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count_count_count_count_count)))\n\
    \                  (let ((wells_filled_count_count_count_count_count_count_count\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count_count_count_count_count_count)))\n\
    \                    (let ((wells_filled_count_count_count_count_count_count_count_count\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y", "  (let ((wells (list-map\
    \ (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i) (list-map (lambda\
    \ (j) (list (cons (cons well (cons bucket (cons i (cons j)))))))))))) (list-map\
    \ (lambda (well) (list (cons well (cons 0)))) (list-map (lambda (well) (list (cons\
    \ well (cons 0)))))))) grid))\n    (let ((wells_filled (list-map (lambda (well)\
    \ (list-map (lambda (bucket) (list-map (lambda (i) (list-map (lambda (j) (list\
    \ (cons (cons well (cons bucket (cons i (cons j)))))))))))) (list-map (lambda\
    \ (well) (list (cons well (cons 0)))) (list-map (lambda (well) (list (cons well\
    \ (cons 0)))))))) wells))\n      (let ((wells_filled_count (list-map (lambda (well)\
    \ (list-map (lambda (bucket) (list-map (lambda (i) (list-map (lambda (j) (list\
    \ (cons (cons well (cons bucket (cons i (cons j)))))))))))) (list-map (lambda\
    \ (well) (list (cons well (cons 0)))) (list-map (lambda (well) (list (cons well\
    \ (cons 0)))))))) wells_filled)))\n        (let ((wells_filled_count_count (list-map\
    \ (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i) (list-map (lambda\
    \ (j) (list (cons (cons well (cons bucket (cons i (cons j)))))))))))) (list-map\
    \ (lambda (well) (list (cons well (cons 0)))) (list-map (lambda (well) (list (cons\
    \ well (cons 0)))))))) wells_filled_count)))\n          (let ((wells_filled_count_count_count\
    \ (list-map (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i) (list-map\
    \ (lambda (j) (list (cons (cons well (cons bucket (cons i (cons j))))))))))))\
    \ (list-map (lambda (well) (list (cons well (cons", '  (let ((wells (list-map
    (lambda (row) (list-map (lambda (well) (list-map (lambda (bucket) (list-map (lambda
    (i) (list-map (lambda (j) (list-map (lambda (c) (list-map (lambda (w) (list-map
    (lambda (b) (list-map (lambda (n) (list-map (lambda (x) (list-map (lambda (y)
    (list-map (lambda (z) (list-map (lambda (a) (list-map (lambda (b) (list-map (lambda
    (c) (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda (f) (list-map
    (lambda (g) (list-map (lambda (h) (list-map (lambda (i) (list-map (lambda (j)
    (list-map (lambda (k) (list-map (lambda (l) (list-map (lambda (m) (list-map (lambda
    (n) (list-map (lambda (o) (list-map (lambda (p) (list-map (lambda (q) (list-map
    (lambda (r) (list-map (lambda (s) (list-map (lambda (t) (list-map (lambda (u)
    (list-map (lambda (v) (list-map (lambda (w) (list-map (lambda (x) (list-map (lambda
    (y) (list-map (lambda (z) (list-map (lambda (a) (list-map (lambda (b) (list-map
    (lambda (c) (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda (f)
    (list-map (lambda (g) (list-map (lambda (h) (list-map (lambda (i) (list-map (lambda
    (j) (list-map (lambda (k) (list-map (lambda (l) (list-map (lambda (m) (list-map
    (lambda (n) (list-map (lambda (o) (list-map (lambda (p) (list-map (lambda (q)
    (list-map (lambda (r) (', '  (let ((wells (list-map (lambda (row) (list-map (lambda
    (well) (list-map (lambda (bucket) (list-map (lambda (i) (list-map (lambda (j)
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append', '  (let ((wells (list-map (lambda (row) (list-map (lambda (well)
    (list-map (lambda (bucket) (list-map (lambda (i) (list-map (lambda (j) (list (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons', '  (let ((wells (list-map (lambda
    (row) (list-map (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i)
    (list-map (lambda (j) (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda
    (c) (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda (f) (list-map
    (lambda (g) (list-map (lambda (h) (list-map (lambda (i) (list-map (lambda (j)
    (list-map (lambda (k) (list-map (lambda (l) (list-map (lambda (m) (list-map (lambda
    (n) (list-map (lambda (o) (list-map (lambda (p) (list-map (lambda (q) (list-map
    (lambda (r) (list-map (lambda (s) (list-map (lambda (t) (list-map (lambda (u)
    (list-map (lambda (v) (list-map (lambda (w) (list-map (lambda (x) (list-map (lambda
    (y) (list-map (lambda (z) (list-map (lambda (a) (list-map (lambda (b) (list-map
    (lambda (c) (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda (f)
    (list-map (lambda (g) (list-map (lambda (h) (list-map (lambda (i) (list-map (lambda
    (j) (list-map (lambda (k) (list-map (lambda (l) (list-map (lambda (m) (list-map
    (lambda (n) (list-map (lambda (o) (list-map (lambda (p) (list-map (lambda (q)
    (list-map (lambda (r) (list-map (lambda (s) (list-map (lambda (t) (list-map (lambda
    (u) (list-map (lambda (v) (list-map (lambda (w) (list-map (lambda (x) (list-map
    (lambda (y) (', "  (let ((wells (list)))\n    (for-each (lambda (well)\n     \
    \ (for-each (lambda (bucket)\n        (for-each (lambda (i)\n          (for-each\
    \ (lambda (j)\n            (set! wells (append wells (list (list i j well))))))\n\
    \          (set! bucket (append bucket (list (list i j 0))))))\n        (set!\
    \ i (car wells))\n        (set! j (car wells))\n        (set! well (car wells))\n\
    \        (set! bucket (car bucket))\n        (set! i (car bucket))\n        (set!\
    \ j (car bucket))\n        (set! bucket (car bucket))))\n      (set! i (car wells))\n\
    \      (set! j (car wells))\n      (set! well (car wells))\n      (set! bucket\
    \ (car bucket))))\n    (set! well (car wells))\n    (set! bucket (car bucket))))\n\
    \  (max (map (lambda (well)\n    (map (lambda (bucket)\n      (+ (length bucket)\
    \ (length well))))\n    wells))\n  capacity)))\n", "  (let ((wells (list-map (lambda\
    \ (well) (list well 0)) grid))\n        (buckets (list-map (lambda (bucket) (list\
    \ bucket 0)) wells)))\n    (let ((wells_filled (list 0))\n          (buckets_filled\
    \ (list 0)))\n      (while (not (empty? wells))\n        (let ((well (car wells)))\n\
    \          (let ((bucket (car buckets)))\n            (if (car well)\n       \
    \       (if (car bucket)\n                (set! buckets_filled (cdr buckets_filled))\n\
    \                (set! buckets_filled (cdr buckets_filled) (car well))\n     \
    \           (set! wells_filled (cdr wells_filled) (car well))\n              \
    \  (set! wells_filled (cdr wells_filled) (car bucket)))\n              (set! buckets_filled\
    \ (cdr buckets_filled) (car bucket)))\n            (set! buckets (cdr buckets)))\n\
    \          (set! wells (cdr wells))))\n      (+ (car wells_filled) (car buckets_filled)))\n\
    \  ))\n", '  (let ((wells (list-map (lambda (row) (list-map (lambda (well) (list-map
    (lambda (bucket) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda
    (c) (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda (n) (list-map
    (lambda (x) (list-map (lambda (y) (list-map (lambda (z) (list-map (lambda (a)
    (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda (d) (list-map (lambda
    (e) (list-map (lambda (f) (list-map (lambda (g) (list-map (lambda (h) (list-map
    (lambda (i) (list-map (lambda (j) (list-map (lambda (k) (list-map (lambda (l)
    (list-map (lambda (m) (list-map (lambda (n) (list-map (lambda (o) (list-map (lambda
    (p) (list-map (lambda (q) (list-map (lambda (r) (list-map (lambda (s) (list-map
    (lambda (t) (list-map (lambda (u) (list-map (lambda (v) (list-map (lambda (w)
    (list-map (lambda (x) (list-map (lambda (y) (list-map (lambda (z) (list-map (lambda
    (a) (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda (d) (list-map
    (lambda (e) (list-map (lambda (f) (list-map (lambda (g) (list-map (lambda (h)
    (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (k) (list-map (lambda
    (l) (list-map (lambda (m) (list-map (lambda (n) (list-map (lambda (o) (list-map
    (lambda (p) (list-map (lambda (q) (list-map (lambda (r) (', '  (let ((wells (list-map
    (lambda (x) (list-map (lambda (y) (list-map (lambda (z) (list-map (lambda (w)
    (list-map (lambda (v) (list-map (lambda (u) (list-map (lambda (t) (list-map (lambda
    (s) (list-map (lambda (r) (list-map (lambda (q) (list-map (lambda (p) (list-map
    (lambda (o) (list-map (lambda (n) (list-map (lambda (m) (list-map (lambda (l)
    (list-map (lambda (k) (list-map (lambda (j) (list-map (lambda (i) (list-map (lambda
    (h) (list-map (lambda (g) (list-map (lambda (f) (list-map (lambda (e) (list-map
    (lambda (d) (list-map (lambda (c) (list-map (lambda (b) (list-map (lambda (a)
    (list-map (lambda (y) (list-map (lambda (x) (list-map (lambda (w) (list-map (lambda
    (v) (list-map (lambda (u) (list-map (lambda (t) (list-map (lambda (s) (list-map
    (lambda (r) (list-map (lambda (q) (list-map (lambda (p) (list-map (lambda (o)
    (list-map (lambda (n) (list-map (lambda (m) (list-map (lambda (l) (list-map (lambda
    (k) (list-map (lambda (j) (list-map (lambda (i) (list-map (lambda (h) (list-map
    (lambda (g) (list-map (lambda (f) (list-map (lambda (e) (list-map (lambda (d)
    (list-map (lambda (c) (list-map (lambda (b) (list-map (lambda (a) (list-map (lambda
    (y) (list-map (lambda (x) (list-map (lambda (w) (list-map (lambda (v) (list-map
    (lambda (u) (list', '  (let ((wells (list-map (lambda (row) (list-map (lambda
    (well) (list-map (lambda (bucket) (list-map (lambda (i) (list-map (lambda (j)
    (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda
    (d) (list-map (lambda (e) (list-map (lambda (f) (list-map (lambda (g) (list-map
    (lambda (h) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (w)
    (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda (d) (list-map (lambda
    (e) (list-map (lambda (f) (list-map (lambda (g) (list-map (lambda (h) (list-map
    (lambda (i) (list-map (lambda (j) (list-map (lambda (w) (list-map (lambda (b)
    (list-map (lambda (c) (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda
    (f) (list-map (lambda (g) (list-map (lambda (h) (list-map (lambda (i) (list-map
    (lambda (j) (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda (c)
    (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda (f) (list-map (lambda
    (g) (list-map (lambda (h) (list-map (lambda (i) (list-map (lambda (j) (list-map
    (lambda (w) (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda (d)
    (list-map (lambda (e) (list-map (lambda (f) (list-map (lambda (g) (list-map (lambda
    (h) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (w) (', '  (let
    ((wells (list-map (lambda (row) (list-map (lambda (well) (list-map (lambda (bucket)
    (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (c) (list (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (', "  (let ((wells (list)))\n    (for-each ((well) wells)\n     \
    \ (let ((well_length (length well))\n            (well_capacity (capacity well)))\n\
    \        (for-each ((bucket) (list-copy wells))\n          (if (eq? (length bucket)\
    \ well_length)\n            (let ((well_capacity_left (well_capacity - (length\
    \ bucket))))\n              (if (eq? well_capacity_left 0)\n                (list\
    \ well_capacity_left)\n                (cons well_capacity_left))))))))))\n",
  '  (let ((wells (list-map (lambda (row) (list-map (lambda (well) (list-map (lambda
    (bucket) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (c) (list-map
    (lambda (w) (list-map (lambda (b) (list-map (lambda (n) (list-map (lambda (o)
    (list-map (lambda (x) (list-map (lambda (y) (list-map (lambda (z) (list-map (lambda
    (a) (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda (d) (list-map
    (lambda (e) (list-map (lambda (f) (list-map (lambda (g) (list-map (lambda (h)
    (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (k) (list-map (lambda
    (l) (list-map (lambda (m) (list-map (lambda (n) (list-map (lambda (o) (list-map
    (lambda (p) (list-map (lambda (q) (list-map (lambda (r) (list-map (lambda (s)
    (list-map (lambda (t) (list-map (lambda (u) (list-map (lambda (v) (list-map (lambda
    (w) (list-map (lambda (x) (list-map (lambda (y) (list-map (lambda (z) (list-map
    (lambda (a) (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda (d)
    (list-map (lambda (e) (list-map (lambda (f) (list-map (lambda (g) (list-map (lambda
    (h) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (k) (list-map
    (lambda (l) (list-map (lambda (m) (list-map (lambda (n) (list-map (lambda (o)
    (list-map (lambda (p) (list-map (lambda (q) (', '  (let ((wells (list-map (lambda
    (row) (list-map (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i)
    (list-map (lambda (j) (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda
    (c) (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda (f) (list-map
    (lambda (g) (list-map (lambda (h) (list-map (lambda (i) (list-map (lambda (j)
    (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda
    (d) (list-map (lambda (e) (list-map (lambda (f) (list-map (lambda (g) (list-map
    (lambda (h) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (w)
    (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda (d) (list-map (lambda
    (e) (list-map (lambda (f) (list-map (lambda (g) (list-map (lambda (h) (list-map
    (lambda (i) (list-map (lambda (j) (list-map (lambda (w) (list-map (lambda (b)
    (list-map (lambda (c) (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda
    (f) (list-map (lambda (g) (list-map (lambda (h) (list-map (lambda (i) (list-map
    (lambda (j) (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda (c)
    (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda (f) (list-map (lambda
    (g) (list-map (lambda (h) (list-map (lambda (i) (list-map (lambda (j) (list-map
    (lambda (w) (', "  (let ((wells (list-map (lambda (row) (list-map (lambda (well)\
    \ (list-map (lambda (bucket) (list-map (lambda (i) (list-map (lambda (j) (list\
    \ (cons (cons well (cons bucket (cons i j)))))))))))) (row))) (list-map (lambda\
    \ (row) (list (cons (cons 0 0) (cons 0 0))) (row))) grid))))\n    (let ((wells_filled\
    \ (list-map (lambda (well) (list-map (lambda (bucket) (list (cons (cons well (cons\
    \ bucket (cons 0 0))) (cons well (cons bucket (cons 0 0)))))))) wells))))\n  \
    \    (let ((wells_filled_count (list-map (lambda (well) (list (cons (cons well\
    \ (cons well (cons 0 0))) (cons well (cons well (cons 0 0)))))))) wells_filled))\n\
    \        (let ((wells_filled_count_count (list-map (lambda (well) (list (cons\
    \ (cons well (cons well (cons 0 0))) (cons well (cons well (cons 0 0)))))))) wells_filled_count))\n\
    \          (let ((wells_filled_count_count_count (list-map (lambda (well) (list\
    \ (cons (cons well (cons well (cons 0 0))) (cons well (cons well (cons 0 0))))))))\
    \ wells_filled_count_count))\n            (let ((wells_filled_count_count_count_count\
    \ (list-map (lambda (well) (list (cons (cons well (cons well (cons 0 0))) (cons\
    \ well (cons well (cons 0 0)))))))) wells_filled_count_count_count))\n       \
    \       (let ((wells_filled_count_count_count_count_count (list-map (lambda (well)\
    \ (list (cons (cons well (cons well (cons 0 0))) (cons well (cons well (cons 0\
    \ 0)))))))) wells_filled_count_count_count_count))\n                (let ((wells_filled_count_count_count_count_count_count\
    \ (list-map (lambda (well) (list (cons (cons well (cons well (cons 0 0))) (cons\
    \ well (cons well (cons 0 0)))))))) wells_filled", "  (let* ([wells (map (lambda\
    \ (row) (map (lambda (well) (map (lambda (bucket) (bucket < well))) row)) wells))])\n\
    \    (let* ([well_count (count wells)])\n      (let* ([well_index (lambda (i)\
    \ (index wells i))])\n        (let* ([well_bucket (lambda (i) (bucket wells i))])\n\
    \          (let* ([well_well (lambda (i) (well wells i))])\n            (let*\
    \ ([well_bucket_count (lambda (i) (count well_bucket well_well i))])\n       \
    \       (let* ([well_bucket_index (lambda (i) (index well_bucket well_well i))])\n\
    \                (let* ([well_bucket_well (lambda (i) (well_well i))])\n     \
    \             (let* ([well_bucket_well_count (lambda (i) (count well_bucket_well\
    \ well_well i))])\n                    (let* ([well_bucket_well_index (lambda\
    \ (i) (index well_bucket_well well_well i))])\n                      (let* ([well_bucket_well_well\
    \ (lambda (i) (well_well i))])\n                        (let* ([well_bucket_well_well_count\
    \ (lambda (i) (count well_bucket_well_well well_well i))])\n                 \
    \         (let* ([well_bucket_well_well_index (lambda (i) (index well_bucket_well_well\
    \ well_well i))])\n                            (let* ([well_bucket_well_well_well\
    \ (lambda (i) (well_well i))])\n                              (let* ([well_bucket_well_well_well_count\
    \ (lambda (i) (count well_bucket_well_well_well well_well i))])\n            \
    \                    (let* ([well_bucket_well_well_well_index (lambda (i) (index\
    \ well_bucket_well_well_well well_well i))])\n                               \
    \   (let* ([well_bucket_well_well_well_well (lambda (i) (well_well i))])\n   \
    \                                 (let", "  (let ((wells (list-map (lambda (row)\
    \ (list-map (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i) (list\
    \ (cons (cons well i) (cons bucket i)))))))) row)) grid))\n    (let ((wells_filled\
    \ (list-map (lambda (row) (list-map (lambda (well) (list-map (lambda (bucket)\
    \ (list (cons well bucket)))) row)) wells))\n          (wells_filled_count (list-map\
    \ (lambda (row) (list (cons (list-length row) (cons (list-length row) (cons (list-length\
    \ row)))) row)) wells))))\n      (let ((wells_filled_counts (list-map (lambda\
    \ (row) (list (cons (list-length row) (cons (list-length row) (cons (list-length\
    \ row)))) row)) wells_filled_count)))\n        (let ((wells_filled_counts_max\
    \ (list-max wells_filled_counts)))\n          (let ((wells_filled_counts_max_wells\
    \ (list-map (lambda (i) (list (cons i) (cons i) (cons i))) wells_filled_counts_max)))\n\
    \            (let ((wells_filled_counts_max_wells_filled (list-map (lambda (i)\
    \ (list (cons i) (cons i) (cons i))) wells_filled_counts_max_wells)))\n      \
    \        (let ((wells_filled_counts_max_wells_filled_counts (list-map (lambda\
    \ (i) (list (cons (list-length i) (cons (list-length i) (cons (list-length i))))\
    \ i)) wells_filled_counts_max_wells_filled)))\n                (let ((wells_filled_counts_max_wells_filled_counts_max\
    \ (list-max wells_filled_counts_max_wells_filled_counts)))\n                 \
    \ (let ((wells_filled_counts_max_wells_filled_counts_max_wells (list-map (lambda\
    \ (i) (list (cons i) (cons i) (cons i))) wells_filled", "  (let ((wells (list-map\
    \ (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i) (list (cons\
    \ (car well) (cons (car bucket) (cons i (cons 0 (cons 0 (cons 0)))))))))) (list-map\
    \ (lambda (i) (list (cons (car well) (cons (car bucket) (cons i (cons 0 (cons\
    \ 0 (cons 0)))))))))))) (list-map (lambda (i) (list (cons (car well) (cons (car\
    \ bucket) (cons i (cons 0 (cons 0 (cons 0))))))))))))\n    (let ((wells (list-map\
    \ (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i) (list (cons\
    \ (car well) (cons (car bucket) (cons i (cons 0 (cons 0)))))))))) (list-map (lambda\
    \ (i) (list (cons (car well) (cons (car bucket) (cons i (cons 0 (cons 0))))))))))))\n\
    \      (let ((wells (list-map (lambda (well) (list-map (lambda (bucket) (list-map\
    \ (lambda (i) (list (cons (car well) (cons (car bucket) (cons i (cons 0 (cons\
    \ 0)))))))))) (list-map (lambda (i) (list (cons (car well) (cons (car bucket)\
    \ (cons i (cons 0 (cons 0))))))))))))\n        (let ((wells (list-map (lambda\
    \ (well) (list-map (lambda (bucket) (list-map (lambda (i) (list (cons (car well)\
    \ (cons (car bucket) (cons i (cons 0 (cons 0)))))))))) (list-map (lambda (i) (list\
    \ (cons (car well) (cons (car bucket) (cons i (cons 0 (cons 0))))))))))))\n  \
    \        (let ((wells (list-map (lambda (well) (list-map (lambda (bucket) (list-map\
    \ (lambda (i) (list (cons (car well) (cons (car bucket) (cons i (cons 0 (cons\
    \ 0)))))))))) (list-map (lambda (i) (list (cons (car well) (cons (car bucket)\
    \ (", "  (let ((wells (list-map (lambda (x) (list-map (lambda (y) (list-append\
    \ x y)) x)) grid))\n        (buckets (list-map (lambda (x) (list-append x (list-map\
    \ (lambda (y) (list-append y x)) x)))))\n        (bucket-counts (list-map (lambda\
    \ (x) (list-map (lambda (y) (list-append y x)) x)) buckets)))\n    (let ((well-counts\
    \ (list-map (lambda (x) (list-map (lambda (y) (list-append y x)) x)) wells)))\n\
    \      (let ((well-counts-sum (list-sum well-counts))\n            (bucket-counts-sum\
    \ (list-sum bucket-counts)))\n        (let ((well-counts-max (list-max well-counts))\n\
    \              (bucket-counts-max (list-max bucket-counts)))\n          (let ((well-counts-max-index\
    \ (list-index (list-max well-counts) well-counts-max)))\n            (let ((well-counts-max-bucket-counts\
    \ (list-map (lambda (i) (list-append i bucket-counts-max)) well-counts-max))\n\
    \                  (well-counts-max-bucket-counts-sum (list-sum well-counts-max-bucket-counts)))\n\
    \              (let ((well-counts-max-bucket-counts-sum-index (list-index (list-max\
    \ well-counts-max-bucket-counts) well-counts-max-bucket-counts-sum)))\n      \
    \          (let ((well-counts-max-bucket-counts-sum-bucket-counts (list-map (lambda\
    \ (i) (list-append i well-counts-max-bucket-counts)) well-counts-max-bucket-counts))\n\
    \                      (well-counts-max-bucket-counts-sum-bucket-counts-sum (list-sum\
    \ well-counts-max-bucket-counts-sum-bucket-counts)))\n                  ", '  (let
    ((wells (list-map (lambda (well) (list-map (lambda (bucket) (list-map (lambda
    (i) (list-map (lambda (j) (list-map (lambda (w) (list-map (lambda (b) (list-map
    (lambda (x) (list-map (lambda (y) (list-map (lambda (z) (list-map (lambda (c)
    (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda (f) (list-map (lambda
    (g) (list-map (lambda (h) (list-map (lambda (i) (list-map (lambda (j) (list-map
    (lambda (k) (list-map (lambda (l) (list-map (lambda (m) (list-map (lambda (n)
    (list-map (lambda (o) (list-map (lambda (p) (list-map (lambda (q) (list-map (lambda
    (r) (list-map (lambda (s) (list-map (lambda (t) (list-map (lambda (u) (list-map
    (lambda (v) (list-map (lambda (w) (list-map (lambda (x) (list-map (lambda (y)
    (list-map (lambda (z) (list-map (lambda (c) (list-map (lambda (d) (list-map (lambda
    (e) (list-map (lambda (f) (list-map (lambda (g) (list-map (lambda (h) (list-map
    (lambda (i) (list-map (lambda (j) (list-map (lambda (k) (list-map (lambda (l)
    (list-map (lambda (m) (list-map (lambda (n) (list-map (lambda (o) (list-map (lambda
    (p) (list-map (lambda (q) (list-map (lambda (r) (list-map (lambda (s) (list-map
    (lambda (t) (list-map (lambda (u) (list-map (lambda (v) (list-map (lambda (w)
    (list-map (lambda (x) (list-map (lambda (y) (', "  (let ((wells (list-map (lambda\
    \ (row) (list-map (lambda (well) (list-map (lambda (bucket) (list-map (lambda\
    \ (i) (list (cons (cons (cons 0 (cons 0)) (cons 0)) (cons 1 (cons 0)))) (cons\
    \ 1 (cons 1)))) (cons 1 (cons 1)))) (cons 1 (cons 1)))) (cons 1 (cons 1)))) (cons\
    \ 1 (cons 1)))) (cons 1 (cons 1))))\n    (let ((well_count (list-length wells))\n\
    \          (well_index (lambda (i) (list-index wells i))))\n      (let ((well_bucket\
    \ (lambda (i) (list-index wells i))))\n        (let ((well_bucket_count (lambda\
    \ (i) (list-length (list-index wells i))))\n              (well_bucket_index (lambda\
    \ (i) (list-index wells i))))\n          (let ((well_bucket_bucket (lambda (i)\
    \ (list-index wells i))))\n            (let ((well_bucket_bucket_count (lambda\
    \ (i) (list-length (list-index wells i))))\n                  (well_bucket_bucket_index\
    \ (lambda (i) (list-index wells i))))\n              (let ((well_bucket_bucket_bucket\
    \ (lambda (i) (list-index wells i))))\n                (let ((well_bucket_bucket_bucket_count\
    \ (lambda (i) (list-length (list-index wells i))))\n                      (well_bucket_bucket_bucket_index\
    \ (lambda (i) (list-index wells i))))\n                  (let ((well_bucket_bucket_bucket_bucket\
    \ (lambda (i) (list-index wells i))))\n                    (let ((well_bucket_bucket_bucket_bucket_count\
    \ (lambda (i) (list-length (list-index wells i))))\n                         \
    \ (well_bucket_bucket_bucket_bucket_index (lambda (i) (list-index wells i))))\n\
    \                      (let ((well_bucket_bucket_bucket_bucket_bucket (lambda\
    \ (i) (list-index wells i))))\n                        (let ((well_buck", "  (let\
    \ ((wells (list-map (lambda (x) (list x)) grid)))\n    (let ((wells_filled (list\
    \ 0)))\n      (let ((wells_filled_count (list 0)))\n        (let ((wells_filled_index\
    \ (list 0)))\n          (let ((wells_filled_index_count (list 0)))\n         \
    \   (let ((wells_filled_index_count_count (list 0)))\n              (let ((wells_filled_index_count_count_count\
    \ (list 0)))\n                (let ((wells_filled_index_count_count_count_count\
    \ (list 0)))\n                  (let ((wells_filled_index_count_count_count_count_count\
    \ (list 0)))\n                    (let ((wells_filled_index_count_count_count_count_count_count\
    \ (list 0)))\n                      (let ((wells_filled_index_count_count_count_count_count_count_count\
    \ (list 0)))\n                        (let ((wells_filled_index_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                          (let ((wells_filled_index_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                            (let ((wells_filled_index_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                              (let ((wells_filled_index_count_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                                (let ((wells_filled_index_count_count_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                                  (let ((wells_filled_index_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                                    (let ((wells_filled_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                                      (let ((wells_filled_index_count_count_count_count_count",
  "  (let ((wells (list-map (lambda (x) (list-map (lambda (y) (list-append x y)) x))\
    \ grid))\n        (buckets (list-map (lambda (x) (list-append x 0)) wells)))\n\
    \    (let ((wells_filled (list-map (lambda (x) (list-append x 0)) wells)))\n \
    \     (let ((wells_filled_count (list-length wells_filled)))\n        (let ((wells_filled_capacity\
    \ (list-map (lambda (x) (list-length x)) wells_filled)))\n          (let ((wells_filled_buckets\
    \ (list-map (lambda (x) (list-append x 0)) wells_filled)))\n            (let ((wells_filled_buckets_count\
    \ (list-length wells_filled_buckets)))\n              (let ((wells_filled_buckets_capacity\
    \ (list-map (lambda (x) (list-length x)) wells_filled_buckets)))\n           \
    \     (let ((wells_filled_buckets_buckets (list-map (lambda (x) (list-append x\
    \ 0)) wells_filled_buckets)))\n                  (let ((wells_filled_buckets_buckets_count\
    \ (list-length wells_filled_buckets_buckets)))\n                    (let ((wells_filled_buckets_buckets_capacity\
    \ (list-map (lambda (x) (list-length x)) wells_filled_buckets_buckets))))\n  \
    \                    (let ((wells_filled_buckets_buckets_buckets_count (list-length\
    \ wells_filled_buckets_buckets_buckets)))\n                        (let ((wells_filled_buckets_buckets_buckets_capacity\
    \ (list-map (lambda (x) (list-length x)) wells_filled_buckets_buckets_buckets))))\n\
    \                          (let ((wells_filled_buckets_buckets_buckets_buckets_count\
    \ (list-length wells_filled_buckets_buckets_buckets_buckets)))\n             \
    \               (let ((wells_filled_buckets_buckets_buckets_buckets_capacity (list-map\
    \ (lambda (x) (list-length x)) wells_filled_buckets_buck", '  (let ((wells (list-map
    (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i) (list-map (lambda
    (j) (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda (x) (list-map
    (lambda (y) (list-map (lambda (z) (list-map (lambda (a) (list-map (lambda (b)
    (list-map (lambda (c) (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda
    (f) (list-map (lambda (g) (list-map (lambda (h) (list-map (lambda (i) (list-map
    (lambda (j) (list-map (lambda (k) (list-map (lambda (l) (list-map (lambda (m)
    (list-map (lambda (n) (list-map (lambda (o) (list-map (lambda (p) (list-map (lambda
    (q) (list-map (lambda (r) (list-map (lambda (s) (list-map (lambda (t) (list-map
    (lambda (u) (list-map (lambda (v) (list-map (lambda (w) (list-map (lambda (x)
    (list-map (lambda (y) (list-map (lambda (z) (list-map (lambda (a) (list-map (lambda
    (b) (list-map (lambda (c) (list-map (lambda (d) (list-map (lambda (e) (list-map
    (lambda (f) (list-map (lambda (g) (list-map (lambda (h) (list-map (lambda (i)
    (list-map (lambda (j) (list-map (lambda (k) (list-map (lambda (l) (list-map (lambda
    (m) (list-map (lambda (n) (list-map (lambda (o) (list-map (lambda (p) (list-map
    (lambda (q) (list-map (lambda (r) (list-map (lambda (s) (list-map (lambda (t)
    (list-map (lambda (u) (', "  (let ((wells (list-map (lambda (x) (list x)) grid))\n\
    \        (buckets (list-map (lambda (x) (list 0)) wells)))\n    (let ((wells_filled\
    \ (list-map (lambda (x) (list-length x)) wells)))\n      (let ((buckets_filled\
    \ (list-map (lambda (x) (list-length x)) buckets)))\n        (let ((wells_filled_buckets\
    \ (list-map (lambda (x) (list-map (lambda (y) (list-length y)) x)) wells_filled))\n\
    \              (buckets_filled_wells (list-map (lambda (x) (list-map (lambda (y)\
    \ (list-length y)) x)) buckets_filled)))\n          (let ((wells_filled_buckets_filled\
    \ (list-map (lambda (x) (list-map (lambda (y) (list-length y)) x)) wells_filled_buckets))\n\
    \                (buckets_filled_wells_filled (list-map (lambda (x) (list-map\
    \ (lambda (y) (list-length y)) x)) buckets_filled_wells)))\n            (let ((wells_filled_buckets_filled_filled\
    \ (list-map (lambda (x) (list-map (lambda (y) (list-length y)) x)) wells_filled_buckets_filled))\n\
    \                  (buckets_filled_wells_filled_filled (list-map (lambda (x) (list-map\
    \ (lambda (y) (list-length y)) x)) buckets_filled_wells_filled_filled)))\n   \
    \           (let ((wells_filled_buckets_filled_filled_filled (list-map (lambda\
    \ (x) (list-map (lambda (y) (list-length y)) x)) wells_filled_buckets_filled_filled_filled))\n\
    \                    (buckets_filled_wells_filled_filled_filled (list-map (lambda\
    \ (x) (list-map (lambda (y) (list-length y)) x)) buckets_filled_wells_filled_filled_filled))))\n\
    \                (let ((wells_filled_buckets_filled_filled_filled_filled (list-map\
    \ (lambda (x) (list", "  (let ((wells (list-map (lambda (x) (list x)) grid)))\n\
    \    (let ((wells_filled (list 0)))\n      (let ((wells_filled_count (list 0)))\n\
    \        (let ((wells_filled_index (list 0)))\n          (let ((wells_filled_index_count\
    \ (list 0)))\n            (let ((wells_filled_index_count_count (list 0)))\n \
    \             (let ((wells_filled_index_count_count_count (list 0)))\n       \
    \         (let ((wells_filled_index_count_count_count_count (list 0)))\n     \
    \             (let ((wells_filled_index_count_count_count_count_count (list 0)))\n\
    \                    (let ((wells_filled_index_count_count_count_count_count_count\
    \ (list 0)))\n                      (let ((wells_filled_index_count_count_count_count_count_count_count\
    \ (list 0)))\n                        (let ((wells_filled_index_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                          (let ((wells_filled_index_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                            (let ((wells_filled_index_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                              (let ((wells_filled_index_count_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                                (let ((wells_filled_index_count_count_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                                  (let ((wells_filled_index_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                                    (let ((wells_filled_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                                      (let ((wells_filled_index_count_count_count_count_count",
  '  (let ((wells (list-map (lambda (row) (list-map (lambda (well) (list-map (lambda
    (bucket) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (c) (list-map
    (lambda (w) (list-map (lambda (b) (list-map (lambda (x) (list-map (lambda (y)
    (list-map (lambda (z) (list-map (lambda (a) (list-map (lambda (b) (list-map (lambda
    (c) (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda (f) (list-map
    (lambda (g) (list-map (lambda (h) (list-map (lambda (i) (list-map (lambda (j)
    (list-map (lambda (k) (list-map (lambda (l) (list-map (lambda (m) (list-map (lambda
    (n) (list-map (lambda (o) (list-map (lambda (p) (list-map (lambda (q) (list-map
    (lambda (r) (list-map (lambda (s) (list-map (lambda (t) (list-map (lambda (u)
    (list-map (lambda (v) (list-map (lambda (w) (list-map (lambda (x) (list-map (lambda
    (y) (list-map (lambda (z) (list-map (lambda (a) (list-map (lambda (b) (list-map
    (lambda (c) (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda (f)
    (list-map (lambda (g) (list-map (lambda (h) (list-map (lambda (i) (list-map (lambda
    (j) (list-map (lambda (k) (list-map (lambda (l) (list-map (lambda (m) (list-map
    (lambda (n) (list-map (lambda (o) (list-map (lambda (p) (list-map (lambda (q)
    (list-map (lambda (r) (list-map (lambda (s) (', '  (let ((wells (list-map (lambda
    (row) (list-map (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i)
    (list-map (lambda (j) (list-map (lambda (c) (list-map (lambda (w) (list-map (lambda
    (b) (list-map (lambda (n) (list-map (lambda (x) (list-map (lambda (y) (list-map
    (lambda (z) (list-map (lambda (a) (list-map (lambda (b) (list-map (lambda (c)
    (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda (f) (list-map (lambda
    (g) (list-map (lambda (h) (list-map (lambda (i) (list-map (lambda (j) (list-map
    (lambda (k) (list-map (lambda (l) (list-map (lambda (m) (list-map (lambda (n)
    (list-map (lambda (o) (list-map (lambda (p) (list-map (lambda (q) (list-map (lambda
    (r) (list-map (lambda (s) (list-map (lambda (t) (list-map (lambda (u) (list-map
    (lambda (v) (list-map (lambda (w) (list-map (lambda (x) (list-map (lambda (y)
    (list-map (lambda (z) (list-map (lambda (a) (list-map (lambda (b) (list-map (lambda
    (c) (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda (f) (list-map
    (lambda (g) (list-map (lambda (h) (list-map (lambda (i) (list-map (lambda (j)
    (list-map (lambda (k) (list-map (lambda (l) (list-map (lambda (m) (list-map (lambda
    (n) (list-map (lambda (o) (list-map (lambda (p) (list-map (lambda (q) (list-map
    (lambda (r) (', "  (let ((wells (list-map (lambda (x) (list-map (lambda (y) (list-append\
    \ (list-append x y) (list-append x y)))) x)) grid))\n    (let ((wells_filled (list-map\
    \ (lambda (x) (list-map (lambda (y) (list-append (list-append x y) (list-append\
    \ x y)))) x)) (buckets (list-map (lambda (x) (list-append (list-append x x) (list-append\
    \ x x))))))\n      (let ((wells_filled_buckets (list-map (lambda (x) (list-map\
    \ (lambda (y) (list-append (list-append x y) (list-append x y)))) x)) (buckets_filled\
    \ (list-map (lambda (x) (list-append (list-append x x) (list-append x x))))))\n\
    \        (let ((wells_filled_buckets_filled (list-map (lambda (x) (list-map (lambda\
    \ (y) (list-append (list-append x y) (list-append x y)))) x)) (buckets_filled_filled\
    \ (list-map (lambda (x) (list-append (list-append x x) (list-append x x))))))\n\
    \          (let ((wells_filled_buckets_filled_filled (list-map (lambda (x) (list-map\
    \ (lambda (y) (list-append (list-append x y) (list-append x y)))) x)) (buckets_filled_filled_filled\
    \ (list-map (lambda (x) (list-append (list-append x x) (list-append x x))))))\n\
    \            (let ((wells_filled_buckets_filled_filled_filled (list-map (lambda\
    \ (x) (list-map (lambda (y) (list-append (list-append x y) (list-append x y))))\
    \ x)) (buckets_filled_filled_filled_filled (list-map (lambda (x) (list-append\
    \ (list-append x x) (list-append x x))))))\n              (let ((wells_filled_buckets_filled_filled_filled_filled\
    \ (list-map (lambda (x) (list-", '  (let ((wells (list-map (lambda (row) (list-map
    (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i) (list-map (lambda
    (j) (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda (x) (list-map
    (lambda (y) (list-map (lambda (z) (list-map (lambda (c) (list-map (lambda (d)
    (list-map (lambda (e) (list-map (lambda (f) (list-map (lambda (g) (list-map (lambda
    (h) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (k) (list-map
    (lambda (l) (list-map (lambda (m) (list-map (lambda (n) (list-map (lambda (o)
    (list-map (lambda (p) (list-map (lambda (q) (list-map (lambda (r) (list-map (lambda
    (s) (list-map (lambda (t) (list-map (lambda (u) (list-map (lambda (v) (list-map
    (lambda (w) (list-map (lambda (x) (list-map (lambda (y) (list-map (lambda (z)
    (list-map (lambda (a) (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda
    (d) (list-map (lambda (e) (list-map (lambda (f) (list-map (lambda (g) (list-map
    (lambda (h) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (k)
    (list-map (lambda (l) (list-map (lambda (m) (list-map (lambda (n) (list-map (lambda
    (o) (list-map (lambda (p) (list-map (lambda (q) (list-map (lambda (r) (list-map
    (lambda (s) (list-map (lambda (t) (list-map (lambda (u) (list-map (lambda (v)
    (', '  (let ((wells (list-map (lambda (row) (list-map (lambda (well) (list-map
    (lambda (bucket) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda
    (c) (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda (n) (list-map
    (lambda (t) (list-map (lambda (s) (list-map (lambda (i) (list-map (lambda (j)
    (list-map (lambda (c) (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda
    (n) (list-map (lambda (t) (list-map (lambda (s) (list-map (lambda (i) (list-map
    (lambda (j) (list-map (lambda (c) (list-map (lambda (w) (list-map (lambda (b)
    (list-map (lambda (n) (list-map (lambda (t) (list-map (lambda (s) (list-map (lambda
    (i) (list-map (lambda (j) (list-map (lambda (c) (list-map (lambda (w) (list-map
    (lambda (b) (list-map (lambda (n) (list-map (lambda (t) (list-map (lambda (s)
    (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (c) (list-map (lambda
    (w) (list-map (lambda (b) (list-map (lambda (n) (list-map (lambda (t) (list-map
    (lambda (s) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (c)
    (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda (n) (list-map (lambda
    (t) (list-map (lambda (s) (list-map (lambda (i) (list-map (lambda (j) (list-map
    (lambda (c) (list-map (lambda (w) (list-map (lambda (b) (', "  (let ((wells (list-map\
    \ (lambda (row) (list-map (lambda (well) (list-map (lambda (bucket) (list-map\
    \ (lambda (i) (list-ref well i)) (lambda (j) (list-ref well j))))) (list-ref row\
    \ i)) (lambda (i) (list-ref row i)))))\n       (buckets (list-map (lambda (row)\
    \ (list-map (lambda (bucket) (list-ref row bucket)) (lambda (i) (list-ref row\
    \ i)))))\n         (list-map (lambda (row) (list-map (lambda (bucket) (list-ref\
    \ row bucket)) (lambda (i) (list-ref row i)))))\n         (list-map (lambda (row)\
    \ (list-map (lambda (bucket) (list-ref row bucket)) (lambda (i) (list-ref row\
    \ i)))))\n         (list-map (lambda (row) (list-map (lambda (bucket) (list-ref\
    \ row bucket)) (lambda (i) (list-ref row i)))))\n         (list-map (lambda (row)\
    \ (list-map (lambda (bucket) (list-ref row bucket)) (lambda (i) (list-ref row\
    \ i)))))\n         (list-map (lambda (row) (list-map (lambda (bucket) (list-ref\
    \ row bucket)) (lambda (i) (list-ref row i)))))\n         (list-map (lambda (row)\
    \ (list-map (lambda (bucket) (list-ref row bucket)) (lambda (i) (list-ref row\
    \ i)))))\n         (list-map (lambda (row) (list-map (lambda (bucket) (list-ref\
    \ row bucket)) (lambda (i) (list-ref row i)))))\n         (list-map (lambda (row)\
    \ (list-map (lambda (bucket) (list-ref row bucket)) (lambda (i) (list-ref row\
    \ i)))))\n         (list-map (lambda (row) (list-map (lambda (bucket) (list-ref\
    \ row bucket)) (lambda (i) (list-ref row i)))))\n         (list-map (lambda (row)\
    \ (list-map (", "  (let ((wells (list-map (lambda (well) (list-map (lambda (i)\
    \ (list-map (lambda (j) (list-ref well i j)) (list-ref well i j)) (list-ref well\
    \ i j))) (list-ref well i j))) (list-map (lambda (well) (list-map (lambda (i)\
    \ (list-map (lambda (j) (list-ref well i j)) (list-ref well i j)) (list-ref well\
    \ i j))) (list-ref well i j))) grid))\n    (let ((wells_filled (list-map (lambda\
    \ (well) (list-map (lambda (i) (list-map (lambda (j) (list-ref well i j)) (list-ref\
    \ well i j)) (list-ref well i j))) (list-map (lambda (well) (list-map (lambda\
    \ (i) (list-map (lambda (j) (list-ref well i j)) (list-ref well i j)) (list-ref\
    \ well i j))) (list-ref well i j))) wells))\n      (wells_filled_count (list-map\
    \ (lambda (well) (list-map (lambda (i) (list-map (lambda (j) (list-ref well i\
    \ j)) (list-ref well i j)) (list-ref well i j))) (list-map (lambda (well) (list-map\
    \ (lambda (i) (list-map (lambda (j) (list-ref well i j)) (list-ref well i j))\
    \ (list-ref well i j))) (list-ref well i j))) wells))))\n      (wells_filled_count\
    \ (list-map (lambda (well) (list-map (lambda (i) (list-map (lambda (j) (list-ref\
    \ well i j)) (list-ref well i j)) (list-ref well i j))) (list-map (lambda (well)\
    \ (list-map (lambda (i) (list-map (lambda (j) (list-ref well i j)) (list-ref well\
    \ i j)) (list-ref well i j))) (list-ref well i j))) wells))))))\n    (let ((wells_filled_count\
    \ (list-map (lambda (well) (list", '  (let ((wells (list-map (lambda (row) (list-map
    (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i) (list (cons (cons
    (cons (cons 0 0) (cons 0 0)) (cons 0 0)) (cons 0 0)) (cons 0 0)) (cons 0 0)) (cons
    0 0)) (cons 0 0)) (cons 0 0)) (cons 0 0)) (cons 0 0)) (cons 0 0)) (cons 0 0))
    (cons 0 0)) (cons 0 0)) (cons 0 0)) (cons 0 0)) (cons 0 0)) (cons 0 0)) (cons
    0 0)) (cons 0 0)) (cons 0 0)) (cons 0 0)) (cons 0 0)) (cons 0 0)) (cons 0 0))
    (cons 0 0)) (cons 0 0)) (cons 0 0)) (cons 0 0)) (cons 0 0)) (cons 0 0)) (cons
    0 0)) (cons 0 0)) (cons 0 0)) (cons 0 0)) (cons 0 0)) (cons 0 0)) (cons 0 0))
    (cons 0 0)) (cons 0 0)) (cons 0 0)) (cons 0 0)) (cons 0 0)) (cons 0 0)) (cons
    0 0)) (cons 0 0)) (cons 0 0)) (cons 0 0)) (cons 0 0)) (cons 0 0)) (cons 0 0))
    (cons 0 0)) (cons 0 0)) (cons 0 0)) (cons 0 0)) (cons 0 0)) (cons 0 0)) (cons
    0 0)) (cons 0 0)) (cons 0 0)) (cons 0 0)) (cons 0 0)) (cons 0 0)) (cons 0 0))
    (cons 0 0)) (cons 0 0)) (cons 0 0)) (cons 0 0)) (cons 0 0)) (cons 0 0)) (cons
    0 0)) (cons 0 0)) (cons 0 0)) (cons 0 0)) (cons 0 0)) (cons 0 0)) (cons 0 0))
    (cons 0 0)) (cons 0 0)) (cons 0 0)) (cons 0 0)) (cons 0 0)) (cons 0 0)) (cons
    0 0)) (cons 0 0)) (cons 0 0)) (cons 0 0)) (cons 0 0)) (cons 0 0)) (cons 0 0))
    (cons 0 0)) (', "  (let ((wells (list-map (lambda (x) (list x)) grid)))\n    (let\
    \ ((wells_filled (list-map (lambda (x) (list-length (wells x))) wells)))\n   \
    \   (let ((wells_filled_count (list-map (lambda (x) (list-sum (wells x))))))\n\
    \        (let ((wells_filled_count_max (max (wells_filled_count))))\n        \
    \  (let ((wells_filled_count_max_wells (list-map (lambda (x) (list-head (wells\
    \ x))))))\n            (let ((wells_filled_count_max_wells_count (list-map (lambda\
    \ (x) (list-sum (wells x))))))\n              (let ((wells_filled_count_max_wells_count_max\
    \ (max (wells_filled_count_max_wells_count))))\n                (let ((wells_filled_count_max_wells_count_max_wells\
    \ (list-map (lambda (x) (list-head (wells_filled_count_max_wells_count x))))))\n\
    \                  (let ((wells_filled_count_max_wells_count_max_wells_count_max\
    \ (max (list-map (lambda (x) (list-sum (wells_filled_count_max_wells_count x))))))\n\
    \                    (let ((wells_filled_count_max_wells_count_max_wells_count_max_wells\
    \ (list-map (lambda (x) (list-head (wells_filled_count_max_wells_count_max_wells))))))\n\
    \                      (let ((wells_filled_count_max_wells_count_max_wells_count_max_wells_count_max\
    \ (max (list-map (lambda (x) (list-sum (wells_filled_count_max_wells_count_max_wells))))))\n\
    \                        (let ((wells_filled_count_max_wells_count_max_wells_count_max_wells_count_max_wells\
    \ (list-map (lambda (x) (list-head (wells_", "  (let ((wells (list-map (lambda\
    \ (well) (list well 0)) grid))\n        (buckets (list-map (lambda (bucket) (list\
    \ bucket 0)) wells)))\n    (let ((wells_filled (list 0))\n          (buckets_filled\
    \ (list 0)))\n      (while (not (empty? wells))\n        (let ((well (car wells)))\n\
    \          (let ((bucket (car buckets_filled)))\n            (if (empty? bucket)\n\
    \              (set! buckets_filled (cdr buckets_filled))\n              (set!\
    \ bucket (car wells_filled))\n              (set! wells_filled (cdr wells_filled))\n\
    \              (set! buckets_filled (cons bucket (cons bucket (cons well (cons\
    \ well (cons bucket (cons bucket (cons well (cons well (cons bucket (cons bucket\
    \ (cons well)))))))))))))))))))\n    (+ (car buckets_filled) (car wells_filled))))\n",
  "  (let ((wells (list)))\n    (for-each (lambda (well)\n                (let ((well_wells\
    \ (list)))\n                  (for-each (lambda (well_well)\n                \
    \             (let ((well_well_wells (list)))\n                              \
    \  (for-each (lambda (well_well_well)\n                                      \
    \      (let ((well_well_well_wells (list)))\n                                \
    \              (for-each (lambda (well_well_well_well)\n                     \
    \                                    (let ((well_well_well_well_wells (list)))\n\
    \                                                           (if (eq? (car well_well_well_well)\
    \ (car well_well_well_well_wells))\n                                         \
    \                     (car well_well_well_well_wells)\n                      \
    \                                        (car well_well_well_well_wells)\n   \
    \                                                           (car well_well_well_well_wells)\n\
    \                                                              (car well_well_well_well_wells)\n\
    \                                                              (car well_well_well_well_wells)\n\
    \                                                              (car well_well_well_well_wells)\n\
    \                                                              (car well_well_well_well_wells)\n\
    \                                                              (car well_well_well_well_wells)\n\
    \                                                              (car well_well_well_well_wells)\n\
    \                                                              (car well_well_well_well_wells)\n\
    \                                                              (car well_well_well_well_wells)\n\
    \                                                              (car well_well_well_well_wells)\n\
    \                                                              (car well_well_well_well_wells)\n\
    \                                                              (car well_well_well_well_wells)\n\
    \                                                              (car well_well_well_well_wells)\n\
    \                                                              (car well_well_well_well_wells)\n\
    \                                                              (car well_well_well_well_wells)\n\
    \                                                              (car well_well_well_well_wells)\n\
    \                                                              (car well_well_well_well_wells)\n\
    \                                                              (car well_well_well_well_wells)\n\
    \                                                              (car well_well_well_well_",
  '  (let ((wells (list-map (lambda (row) (list-map (lambda (well) (list-map (lambda
    (bucket) (list-map (lambda (cap) (list-map (lambda (w) (list-map (lambda (b) (list-map
    (lambda (c) (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda (c)
    (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda
    (w) (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda (w) (list-map
    (lambda (b) (list-map (lambda (c) (list-map (lambda (w) (list-map (lambda (b)
    (list-map (lambda (c) (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda
    (c) (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda (c) (list-map
    (lambda (w) (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda (w)
    (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda (w) (list-map (lambda
    (b) (list-map (lambda (c) (list-map (lambda (w) (list-map (lambda (b) (list-map
    (lambda (c) (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda (c)
    (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda
    (w) (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda (w) (list-map
    (lambda (b) (list-map (lambda (c) (list-map (lambda (w) (list-map (lambda (b)
    (list-map (lambda (c) (list-map (lambda (w) (', "  (let ((wells (list-map (lambda\
    \ (x) (list-map (lambda (y) (list x y)) x)) grid))\n        (buckets (list-map\
    \ (lambda (x) (list-map (lambda (y) (list x y)) x)) capacity)))\n    (let ((wells_filled\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) wells))\n      \
    \    (buckets_filled (list-map (lambda (x) (list-map (lambda (y) (list x y)) x))\
    \ buckets)))\n      (let ((wells_filled_count (list-map (lambda (x) (list-map\
    \ (lambda (y) (list x y)) x)) wells_filled)))\n        (let ((buckets_filled_count\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) buckets_filled))))\n\
    \          (let ((wells_filled_count_count (list-map (lambda (x) (list-map (lambda\
    \ (y) (list x y)) x)) wells_filled_count)))\n            (let ((buckets_filled_count_count\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) buckets_filled_count))))\n\
    \              (let ((wells_filled_count_count_count (list-map (lambda (x) (list-map\
    \ (lambda (y) (list x y)) x)) wells_filled_count_count))))\n                (let\
    \ ((wells_filled_count_count_count_count (list-map (lambda (x) (list-map (lambda\
    \ (y) (list x y)) x)) wells_filled_count_count_count))))\n                  (let\
    \ ((wells_filled_count_count_count_count_count (list-map (lambda (x) (list-map\
    \ (lambda (y) (list x y)) x)) wells_filled_count_count_count_count))))\n     \
    \               (let ((wells_filled_count_count_count_count_count_count (list-map\
    \ (lambda (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count_count",
  '  (let ((wells (list-map (lambda (row) (list-map (lambda (well) (list-map (lambda
    (bucket) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (w) (list-map
    (lambda (b) (list-map (lambda (x) (list-map (lambda (y) (list-map (lambda (z)
    (list-map (lambda (c) (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda
    (f) (list-map (lambda (g) (list-map (lambda (h) (list-map (lambda (i) (list-map
    (lambda (j) (list-map (lambda (k) (list-map (lambda (l) (list-map (lambda (m)
    (list-map (lambda (n) (list-map (lambda (o) (list-map (lambda (p) (list-map (lambda
    (q) (list-map (lambda (r) (list-map (lambda (s) (list-map (lambda (t) (list-map
    (lambda (u) (list-map (lambda (v) (list-map (lambda (w) (list-map (lambda (x)
    (list-map (lambda (y) (list-map (lambda (z) (list-map (lambda (a) (list-map (lambda
    (b) (list-map (lambda (c) (list-map (lambda (d) (list-map (lambda (e) (list-map
    (lambda (f) (list-map (lambda (g) (list-map (lambda (h) (list-map (lambda (i)
    (list-map (lambda (j) (list-map (lambda (k) (list-map (lambda (l) (list-map (lambda
    (m) (list-map (lambda (n) (list-map (lambda (o) (list-map (lambda (p) (list-map
    (lambda (q) (list-map (lambda (r) (list-map (lambda (s) (list-map (lambda (t)
    (list-map (lambda (u) (list-map (lambda (v) (', '  (let ((wells (list-map (lambda
    (row) (list-map (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i)
    (list-map (lambda (j) (list-map (lambda (c) (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-', '  (let ((wells (list-map (lambda (row) (list-map (lambda
    (well) (list-map (lambda (bucket) (list-map (lambda (i) (list-map (lambda (j)
    (list-map (lambda (c) (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda
    (n) (list-map (lambda (x) (list-map (lambda (y) (list-map (lambda (z) (list-map
    (lambda (a) (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda (d)
    (list-map (lambda (e) (list-map (lambda (f) (list-map (lambda (g) (list-map (lambda
    (h) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (k) (list-map
    (lambda (l) (list-map (lambda (m) (list-map (lambda (n) (list-map (lambda (o)
    (list-map (lambda (p) (list-map (lambda (q) (list-map (lambda (r) (list-map (lambda
    (s) (list-map (lambda (t) (list-map (lambda (u) (list-map (lambda (v) (list-map
    (lambda (w) (list-map (lambda (x) (list-map (lambda (y) (list-map (lambda (z)
    (list-map (lambda (a) (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda
    (d) (list-map (lambda (e) (list-map (lambda (f) (list-map (lambda (g) (list-map
    (lambda (h) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (k)
    (list-map (lambda (l) (list-map (lambda (m) (list-map (lambda (n) (list-map (lambda
    (o) (list-map (lambda (p) (list-map (lambda (q) (list-map (lambda (r) (', "  (let\
    \ ((wells (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) grid))\n\
    \        (buckets (list-map (lambda (x) (list-map (lambda (y) (list x y)) x))\
    \ capacity)))\n    (let ((wells_filled (list-map (lambda (x) (list-map (lambda\
    \ (y) (list x y)) x)) wells)))\n      (let ((wells_filled_count (list-map (lambda\
    \ (x) (list-map (lambda (y) (list x y)) x)) wells_filled)))\n        (let ((wells_filled_count_count\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count)))\n\
    \          (let ((wells_filled_count_count_count (list-map (lambda (x) (list-map\
    \ (lambda (y) (list x y)) x)) wells_filled_count_count)))\n            (let ((wells_filled_count_count_count_count\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count_count_count))))\n\
    \              (let ((wells_filled_count_count_count_count_count (list-map (lambda\
    \ (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count_count_count_count))))\n\
    \                (let ((wells_filled_count_count_count_count_count_count (list-map\
    \ (lambda (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count_count_count_count_count))))\n\
    \                  (let ((wells_filled_count_count_count_count_count_count_count\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count_count_count_count_count_count))))\n\
    \                    (let ((wells_filled_count_count_count_count_count_count_count_count\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y", "  (let ((wells (list)))\n\
    \    (for-each (lambda (well)\n      (let ((well_length (length well))\n     \
    \   (well_capacity (capacity well)))\n        (for-each (lambda (bucket)\n   \
    \       (let ((bucket_capacity (bucket)))\n            (for-each (lambda (well)\n\
    \              (let ((well_capacity (well_capacity well)))\n                (if\
    \ (and (well_length (well))\n                      (= (well_capacity (well)) (bucket_capacity\
    \ (bucket))))\n                  (wells (append wells (list (list well (bucket)))))))))))))))\n\
    \      (wells)))\n    (max (map (lambda (wells)\n               (map (lambda (well)\n\
    \                     (map (lambda (bucket)\n                            (+ (well_capacity\
    \ (well)) (bucket_capacity (bucket))))))))\n           wells))))\n", "  (let ((wells\
    \ (list-map (lambda (well) (list well)) grid))\n        (buckets (list-map (lambda\
    \ (bucket) (list bucket)) wells)))\n    (let ((wells_filled (list 0))\n      \
    \    (buckets_filled (list 0)))\n      (while (not (equal? wells_filled wells))\n\
    \        (let ((well (car wells)))\n          (let ((bucket (car buckets)))\n\
    \            (let ((well_filled (car wells_filled)))\n              (let ((bucket_filled\
    \ (car buckets_filled)))\n                (if (equal? well_filled well)\n    \
    \              (set! well_filled (+ well_filled 1))\n                  (set! bucket_filled\
    \ (+ bucket_filled 1)))\n                (set! buckets_filled (cdr buckets_filled))\n\
    \                (set! wells_filled (cdr wells_filled)))))))))\n  (+ (car buckets_filled)\
    \ (car wells_filled)))\n)\n", "  (let ((wells (list-map (lambda (row) (list-map\
    \ (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i) (list (cons\
    \ (cons well i) (cons bucket i)))) (row))) (well))) (bucket))) (row))) (row)))\n\
    \    (let ((wells_filled (list-map (lambda (row) (list-map (lambda (well) (list-map\
    \ (lambda (bucket) (list-map (lambda (i) (list (cons well i) (cons bucket i))))\
    \ (row))) (well))) (well))) (row)))\n      (let ((wells_filled_count (list-map\
    \ (lambda (row) (list-map (lambda (well) (list-map (lambda (bucket) (list-map\
    \ (lambda (i) (list (cons well i) (cons bucket i)))) (row))) (well))) (well)))\
    \ (row)))\n        (let ((wells_filled_count_count (list-map (lambda (row) (list-map\
    \ (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i) (list (cons\
    \ well i) (cons bucket i)))) (row))) (well))) (well))) (row)))\n          (let\
    \ ((wells_filled_count_count_count (list-map (lambda (row) (list-map (lambda (well)\
    \ (list-map (lambda (bucket) (list-map (lambda (i) (list (cons well i) (cons bucket\
    \ i)))) (row))) (well))) (well))) (row)))\n            (let ((wells_filled_count_count_count_count\
    \ (list-map (lambda (row) (list-map (lambda (well) (list-map (lambda (bucket)\
    \ (list-map (lambda (i) (list (cons well i) (cons bucket i)))) (row))) (well)))\
    \ (well))) (row)))\n              (let ((wells_filled_count_count_count_count_count\
    \ (list-map (lambda (row) (list-map (lambda (well) (list-map (lambda (bucket)\
    \ (list-map (lambda (i) (list (cons well i) (cons bucket i)))) (", "  (let ((wells\
    \ (list-map (lambda (well) (list well 0)) grid))\n        (buckets (list-map (lambda\
    \ (bucket) (list bucket 0)) capacity)))\n    (let ((wells_filled (list 0))\n \
    \         (buckets_filled (list 0)))\n      (while (not (equal? wells_filled wells))\n\
    \        (let ((well (car wells)))\n          (let ((bucket (car buckets)))\n\
    \            (let ((well_filled (car wells_filled)))\n              (let ((bucket_filled\
    \ (car buckets_filled)))\n                (if (equal? well_filled well)\n    \
    \              (set! well_filled (cdr well_filled))\n                  (set! bucket_filled\
    \ (cdr bucket_filled))\n                  (set! wells_filled (cdr wells_filled))\n\
    \                  (set! buckets_filled (cdr buckets_filled)))))))))\n    (+ (car\
    \ buckets_filled) (car wells_filled))))\n", "  (let ((wells (list)))\n    (for-each\
    \ (lambda (well)\n      (for-each (lambda (bucket)\n        (let ((well_index\
    \ (index? well)))\n          (let ((bucket_index (index? bucket)))\n         \
    \   (if (>= well_index 0)\n              (if (>= bucket_index 0)\n           \
    \     (let ((well_capacity (capacity? well)))\n                  (let ((bucket_capacity\
    \ (capacity? bucket)))\n                    (if (>= well_capacity 0)\n       \
    \               (let ((well_wells (wells (cdr well))))\n                     \
    \   (let ((well_buckets (wells (car well))))\n                          (if (>=\
    \ bucket_capacity 0)\n                            (let ((well_wells (well_wells\
    \ (cdr well_wells))))\n                              (let ((well_buckets (well_buckets\
    \ (car well_wells))))\n                                (if (>= well_capacity 0)\n\
    \                                  (let ((well_wells (well_wells (cdr well_wells))))\n\
    \                                    (let ((well_buckets (well_buckets (car well_wells))))\n\
    \                                      (if (>= bucket_capacity 0)\n          \
    \                              (let ((well_wells (well_wells (cdr well_wells))))\n\
    \                                          (let ((well_buckets (well_buckets (car\
    \ well_wells))))\n                                            (if (>= well_capacity\
    \ 0)\n                                              (let ((well_wells (well_wells\
    \ (cdr well_wells))))\n                                                (let ((well_buckets\
    \ (well_buckets (car well_wells))))\n                                        \
    \          (if (>= bucket_capacity 0)\n                                      \
    \              (let ((well_wells (well_wells (cdr well_wells))))\n           \
    \                                           (let ((well_buckets (well_buckets\
    \ (car well_wells))))\n                                                      \
    \  (if (>= well_capacity 0)\n                                                \
    \          (let ((well_wells (well_wells (cdr well_wells))))\n               \
    \                      ", "  (let ((wells (list)))\n    (for-each (lambda (well)\n\
    \      (for-each (lambda (bucket)\n        (let ((well_index (index-of well well)))\n\
    \          (let ((bucket_index (index-of bucket bucket)))\n            (let ((well_capacity\
    \ (capacity well)))\n              (let ((bucket_capacity (capacity bucket)))\n\
    \                (if (>= well_capacity 0)\n                  (if (>= bucket_capacity\
    \ 0)\n                    (set-car! wells (car wells) (car well))\n          \
    \          (set-car! wells (car wells) (car well))\n                    (set-car!\
    \ wells (car wells) (car well))\n                    (set-car! wells (car wells)\
    \ (car well))\n                    (set-car! wells (car wells) (car well))\n \
    \                   (set-car! wells (car wells) (car well))\n                \
    \    (set-car! wells (car wells) (car well))\n                    (set-car! wells\
    \ (car wells) (car well))\n                    (set-car! wells (car wells) (car\
    \ well))\n                    (set-car! wells (car wells) (car well))\n      \
    \              (set-car! wells (car wells) (car well))\n                    (set-car!\
    \ wells (car wells) (car well))\n                    (set-car! wells (car wells)\
    \ (car well))\n                    (set-car! wells (car wells) (car well))\n \
    \                   (set-car! wells (car wells) (car well))\n                \
    \    (set-car! wells (car wells) (car well))\n                    (set-car! wells\
    \ (car wells) (car well))\n                    (set-car! wells (car wells) (car\
    \ well))\n                    (set-car! wells (car wells) (car well))\n      \
    \              (set-car! wells (car wells) (car well))\n                    (set-car!\
    \ wells (car wells) (car well))\n                    (set-car! wells (car wells)\
    \ (car well))\n                    (set-car! wells (car wells) (car well))\n \
    \                   (set-car! wells (car wells) (car well))\n                \
    \    (set-car! wells (car wells) (car well))\n                    ", "  (let ((wells\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) grid))\n       \
    \ (buckets (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) capacity)))\n\
    \    (let ((wells_filled (list-map (lambda (x) (list-map (lambda (y) (list x y))\
    \ x)) wells))\n          (buckets_filled (list-map (lambda (x) (list-map (lambda\
    \ (y) (list x y)) x)) buckets)))\n      (let ((wells_filled_count (list-map (lambda\
    \ (x) (list-map (lambda (y) (list x y)) x)) wells_filled)))\n        (let ((wells_filled_count_count\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count)))\n\
    \          (let ((wells_filled_count_count_count (list-map (lambda (x) (list-map\
    \ (lambda (y) (list x y)) x)) wells_filled_count_count)))\n            (let ((wells_filled_count_count_count_count\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count_count_count))))\n\
    \              (let ((wells_filled_count_count_count_count_count (list-map (lambda\
    \ (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count_count_count_count))))\n\
    \                (let ((wells_filled_count_count_count_count_count_count (list-map\
    \ (lambda (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count_count_count_count_count))))\n\
    \                  (let ((wells_filled_count_count_count_count_count_count_count\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count_count_count_count_count_count))))\n\
    \                    (let ((wells_filled_count_count", "  (let ((wells (list-map\
    \ (lambda (x) (list-map (lambda (y) (list-append x y)) x)) grid))\n        (buckets\
    \ (list-map (lambda (x) (list-map (lambda (y) (list-append x y)) x)) capacity)))\n\
    \    (let ((wells_filled (list-map (lambda (x) (list-append (list-map (lambda\
    \ (y) (list-append x y)) x)) x))\n           (buckets_filled (list-map (lambda\
    \ (x) (list-append (list-map (lambda (y) (list-append x y)) x)) x)))))\n     \
    \ (let ((wells_filled_count (list-map (lambda (x) (list-length (list-map (lambda\
    \ (y) (list-append x y)) x))))\n             (buckets_filled_count (list-map (lambda\
    \ (x) (list-length (list-map (lambda (y) (list-append x y)) x)))))))\n       \
    \ (let ((wells_filled_count_count (list-map (lambda (x) (list-length (list-map\
    \ (lambda (y) (list-append x y)) x))))\n               (buckets_filled_count_count\
    \ (list-map (lambda (x) (list-length (list-map (lambda (y) (list-append x y))\
    \ x))))))))\n          (let ((wells_filled_count_count_count (list-map (lambda\
    \ (x) (list-length (list-map (lambda (y) (list-append x y)) x))))\n          \
    \       (buckets_filled_count_count_count (list-map (lambda (x) (list-length (list-map\
    \ (lambda (y) (list-append x y)) x))))))))\n            (let ((wells_filled_count_count_count_count\
    \ (list-map (lambda (x) (list-length (list-map (lambda (y) (list-append x y))\
    \ x))))\n                   (buckets_filled_count_count_count_count (list-map\
    \ (lambda (x) (list-length (list-map (lambda (y) (list-append x y)) x))))))))\n\
    \              (let", '  (let ((wells (list-map (lambda (row) (list-map (lambda
    (well) (list-map (lambda (bucket) (list-map (lambda (i) (list-map (lambda (j)
    (list-map (lambda (c) (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda
    (n) (list-map (lambda (x) (list-map (lambda (y) (list-map (lambda (z) (list-map
    (lambda (a) (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda (d)
    (list-map (lambda (e) (list-map (lambda (f) (list-map (lambda (g) (list-map (lambda
    (h) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (k) (list-map
    (lambda (l) (list-map (lambda (m) (list-map (lambda (n) (list-map (lambda (o)
    (list-map (lambda (p) (list-map (lambda (q) (list-map (lambda (r) (list-map (lambda
    (s) (list-map (lambda (t) (list-map (lambda (u) (list-map (lambda (v) (list-map
    (lambda (w) (list-map (lambda (x) (list-map (lambda (y) (list-map (lambda (z)
    (list-map (lambda (a) (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda
    (d) (list-map (lambda (e) (list-map (lambda (f) (list-map (lambda (g) (list-map
    (lambda (h) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (k)
    (list-map (lambda (l) (list-map (lambda (m) (list-map (lambda (n) (list-map (lambda
    (o) (list-map (lambda (p) (list-map (lambda (q) (list-map (lambda (r) (', "  (let\
    \ ((wells (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) grid))\n\
    \        (buckets (list-map (lambda (x) (list-map (lambda (y) (list x y)) x))\
    \ capacity)))\n    (let ((wells_filled (list-map (lambda (x) (list-map (lambda\
    \ (y) (list x y)) x)) wells))\n          (buckets_filled (list-map (lambda (x)\
    \ (list-map (lambda (y) (list x y)) x)) buckets)))\n      (let ((wells_filled_count\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) wells_filled)))\n\
    \        (let ((wells_filled_count_count (list-map (lambda (x) (list-map (lambda\
    \ (y) (list x y)) x)) wells_filled_count)))\n          (let ((wells_filled_count_count_count\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count_count)))\n\
    \            (let ((wells_filled_count_count_count_count (list-map (lambda (x)\
    \ (list-map (lambda (y) (list x y)) x)) wells_filled_count_count_count))))\n \
    \             (let ((wells_filled_count_count_count_count_count (list-map (lambda\
    \ (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count_count_count_count))))\n\
    \                (let ((wells_filled_count_count_count_count_count_count (list-map\
    \ (lambda (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count_count_count_count_count))))\n\
    \                  (let ((wells_filled_count_count_count_count_count_count_count\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count_count_count_count_count_count))))\n\
    \                    (let ((wells_filled_count_count", '  (let ((wells (list-map
    (lambda (row) (list-map (lambda (well) (list-map (lambda (bucket) (list-map (lambda
    (i) (list-map (lambda (j) (list-map (lambda (w) (list-map (lambda (b) (list-map
    (lambda (x) (list-map (lambda (y) (list-map (lambda (z) (list-map (lambda (c)
    (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda (f) (list-map (lambda
    (g) (list-map (lambda (h) (list-map (lambda (i) (list-map (lambda (j) (list-map
    (lambda (k) (list-map (lambda (l) (list-map (lambda (m) (list-map (lambda (n)
    (list-map (lambda (o) (list-map (lambda (p) (list-map (lambda (q) (list-map (lambda
    (r) (list-map (lambda (s) (list-map (lambda (t) (list-map (lambda (u) (list-map
    (lambda (v) (list-map (lambda (w) (list-map (lambda (x) (list-map (lambda (y)
    (list-map (lambda (z) (list-map (lambda (c) (list-map (lambda (d) (list-map (lambda
    (e) (list-map (lambda (f) (list-map (lambda (g) (list-map (lambda (h) (list-map
    (lambda (i) (list-map (lambda (j) (list-map (lambda (k) (list-map (lambda (l)
    (list-map (lambda (m) (list-map (lambda (n) (list-map (lambda (o) (list-map (lambda
    (p) (list-map (lambda (q) (list-map (lambda (r) (list-map (lambda (s) (list-map
    (lambda (t) (list-map (lambda (u) (list-map (lambda (v) (list-map (lambda (w)
    (list-map (lambda (x) (', "  (let ((wells (list-map (lambda (well) (list well\
    \ 0)) grid))\n        (buckets (list-map (lambda (bucket) (list bucket 0)) wells)))\n\
    \    (let ((wells_filled (list 0))\n          (buckets_filled (list 0)))\n   \
    \   (while (>= (length wells) 0)\n        (let ((well (car wells)))\n        \
    \  (let ((bucket (car buckets)))\n            (let ((well_filled (car wells_filled)))\n\
    \              (let ((bucket_filled (car buckets_filled)))\n                (if\
    \ (and (= well_filled 0) (= bucket_filled 0))\n                  (set! wells_filled\
    \ (cdr wells_filled))\n                  (set! buckets_filled (cdr buckets_filled)))))))))\n\
    \    (+ (length wells_filled) (length buckets_filled)))\n)\n", '  (let ((wells
    (list-map (lambda (row) (list-map (lambda (well) (list-map (lambda (bucket) (list-map
    (lambda (i) (list-map (lambda (j) (list-map (lambda (c) (list-map (lambda (w)
    (list-map (lambda (b) (list-map (lambda (n) (list-map (lambda (x) (list-map (lambda
    (y) (list-map (lambda (z) (list-map (lambda (a) (list-map (lambda (b) (list-map
    (lambda (c) (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda (f)
    (list-map (lambda (g) (list-map (lambda (h) (list-map (lambda (i) (list-map (lambda
    (j) (list-map (lambda (k) (list-map (lambda (l) (list-map (lambda (m) (list-map
    (lambda (n) (list-map (lambda (o) (list-map (lambda (p) (list-map (lambda (q)
    (list-map (lambda (r) (list-map (lambda (s) (list-map (lambda (t) (list-map (lambda
    (u) (list-map (lambda (v) (list-map (lambda (w) (list-map (lambda (x) (list-map
    (lambda (y) (list-map (lambda (z) (list-map (lambda (a) (list-map (lambda (b)
    (list-map (lambda (c) (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda
    (f) (list-map (lambda (g) (list-map (lambda (h) (list-map (lambda (i) (list-map
    (lambda (j) (list-map (lambda (k) (list-map (lambda (l) (list-map (lambda (m)
    (list-map (lambda (n) (list-map (lambda (o) (list-map (lambda (p) (list-map (lambda
    (q) (list-map (lambda (r) (', '  (let ((wells (list-map (lambda (row) (list-map
    (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i) (list (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (', "  (let ((wells\
    \ (list-map (lambda (x) (list x)) grid))\n        (buckets (list-map (lambda (x)\
    \ (list x)) capacity)))\n    (let ((wells_filled (list-map (lambda (x) (list-length\
    \ x)) wells)))\n      (let ((wells_filled_count (list-fold (lambda (x y) (+ x\
    \ y)) 0 wells_filled)))\n        (let ((buckets_filled (list-fold (lambda (x y)\
    \ (+ x y)) 0 buckets)))\n          (let ((wells_filled_buckets (list-fold (lambda\
    \ (x y) (if (= x y) 1 (0))) wells_filled)))\n            (let ((wells_filled_buckets_count\
    \ (list-fold (lambda (x y) (+ x y)) 0 wells_filled_buckets)))\n              (let\
    \ ((wells_filled_buckets_count_count (list-fold (lambda (x y) (+ x y)) 0 wells_filled_buckets_count)))\n\
    \                (let ((wells_filled_buckets_count_count_count (list-fold (lambda\
    \ (x y) (+ x y)) 0 wells_filled_buckets_count_count)))\n                  (let\
    \ ((wells_filled_buckets_count_count_count_count (list-fold (lambda (x y) (+ x\
    \ y)) 0 wells_filled_buckets_count_count_count)))\n                    (let ((wells_filled_buckets_count_count_count_count_count\
    \ (list-fold (lambda (x y) (+ x y)) 0 wells_filled_buckets_count_count_count_count))))\n\
    \                    (let ((wells_filled_buckets_count_count_count_count_count_count\
    \ (list-fold (lambda (x y) (+ x y)) 0 wells_filled_buckets_count_count_count_count_count))))\n\
    \                    (let ((wells_filled_buckets_count_count_count_count_count_count_count\
    \ (list-fold (lambda (x y) (+ x y)) 0 wells_filled_buckets_count_count_count_count_count_count))))\n\
    \                    (let ((wells_filled_buckets_count_count_", '  (let ((wells
    (list-map (lambda (row) (list-map (lambda (well) (list-map (lambda (bucket) (list-map
    (lambda (i) (list-map (lambda (j) (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append', "  (let ((wells (list-map (lambda (row)\
    \ (list-map (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i) (list\
    \ (cons (cons well i) (cons bucket i)))))))) row)) grid))\n    (let ((wells_filled\
    \ (list-map (lambda (row) (list-map (lambda (well) (list-map (lambda (bucket)\
    \ (list (cons well bucket)))) row)) wells)))\n      (let ((wells_filled_count\
    \ (list-map (lambda (row) (list-map (lambda (well) (list (cons well 0))) row))\
    \ wells_filled)))\n        (let ((wells_filled_count_count (list-map (lambda (row)\
    \ (list-map (lambda (well) (list (cons well 0))) row)) wells_filled_count)))\n\
    \          (let ((wells_filled_count_count_count (list-map (lambda (row) (list-map\
    \ (lambda (well) (list (cons well 0))) row)) wells_filled_count_count)))\n   \
    \         (let ((wells_filled_count_count_count_count (list-map (lambda (row)\
    \ (list-map (lambda (well) (list (cons well 0))) row)) wells_filled_count_count_count)))\n\
    \              (let ((wells_filled_count_count_count_count_count (list-map (lambda\
    \ (row) (list-map (lambda (well) (list (cons well 0))) row)) wells_filled_count_count_count_count)))\n\
    \                (let ((wells_filled_count_count_count_count_count_count (list-map\
    \ (lambda (row) (list-map (lambda (well) (list (cons well 0))) row)) wells_filled_count_count_count_count_count)))\n\
    \                  (let ((wells_filled_count_count_count_count_count_count_count\
    \ (list-map (lambda (row) (list-map (lambda (well) (list (cons well 0))) row))\
    \ wells_filled_count_count_count_count_count_count)))\n                    (let\
    \ ((wells_filled_count_count_count_count_count_count_count_", '  (let ((wells
    (list-map (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i) (list
    (cons (car well) (cons (car bucket) (cons i (cons (car well) (cons i (cons i (cons
    i (cons i (cons i (cons i (cons i (cons i (cons i (cons i (cons i (cons i (cons
    i (cons i (cons i (cons i (cons i (cons i (cons i (cons i (cons i (cons i (cons
    i (cons i (cons i (cons i (cons i (cons i (cons i (cons i (cons i (cons i (cons
    i (cons i (cons i (cons i (cons i (cons i (cons i (cons i (cons i (cons i (cons
    i (cons i (cons i (cons i (cons i (cons i (cons i (cons i (cons i (cons i (cons
    i (cons i (cons i (cons i (cons i (cons i (cons i (cons i (cons i (cons i (cons
    i (cons i (cons i (cons i (cons i (cons i (cons i (cons i (cons i (cons i (cons
    i (cons i (cons i (cons i (cons i (cons i (cons i (cons i (cons i (cons i (cons
    i (cons i (cons i (cons i (cons i (cons i (cons i (cons i (cons i (cons i (cons
    i (cons i (cons i (cons i (cons i (cons i (cons i (cons i (cons i (cons i (cons
    i (cons i (cons i (cons i (cons i (cons i (cons i (cons i (cons i (cons i (cons
    i (cons i (cons i (cons i (cons i (cons i (cons i (cons i (cons i (cons i (cons
    i (cons i (cons i (cons i (cons i (cons i (cons i (cons i (cons i (cons i (cons
    i (cons i (cons i (cons i (cons i (cons i (cons i (cons i (cons i (cons i (cons
    i (cons i (cons i (cons i (cons i (cons i (cons i (cons i (cons i (cons', '  (let
    ((wells (list-map (lambda (row) (list-map (lambda (well) (list-map (lambda (bucket)
    (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (c) (list-map (lambda
    (w) (list-map (lambda (b) (list-map (lambda (n) (list-map (lambda (o) (list-map
    (lambda (x) (list-map (lambda (y) (list-map (lambda (z) (list-map (lambda (a)
    (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda (d) (list-map (lambda
    (e) (list-map (lambda (f) (list-map (lambda (g) (list-map (lambda (h) (list-map
    (lambda (i) (list-map (lambda (j) (list-map (lambda (k) (list-map (lambda (l)
    (list-map (lambda (m) (list-map (lambda (n) (list-map (lambda (o) (list-map (lambda
    (p) (list-map (lambda (q) (list-map (lambda (r) (list-map (lambda (s) (list-map
    (lambda (t) (list-map (lambda (u) (list-map (lambda (v) (list-map (lambda (w)
    (list-map (lambda (x) (list-map (lambda (y) (list-map (lambda (z) (list-map (lambda
    (a) (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda (d) (list-map
    (lambda (e) (list-map (lambda (f) (list-map (lambda (g) (list-map (lambda (h)
    (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (k) (list-map (lambda
    (l) (list-map (lambda (m) (list-map (lambda (n) (list-map (lambda (o) (list-map
    (lambda (p) (list-map (lambda (q) (', "  (let ((wells (list-map (lambda (row)\
    \ (list-map (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i) (list\
    \ (cons (cons well i) (cons bucket i)))))))) row)) grid))\n    (let ((wells_filled\
    \ (list-map (lambda (row) (list-map (lambda (well) (list-map (lambda (bucket)\
    \ (list-map (lambda (i) (list (cons (cons well i) (cons bucket i)))))))) row))\
    \ wells))\n      (let ((wells_filled_filled (list-map (lambda (row) (list-map\
    \ (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i) (list (cons\
    \ (cons well i) (cons bucket i)))))))) row)) wells_filled))\n        (let ((wells_filled_filled_filled\
    \ (list-map (lambda (row) (list-map (lambda (well) (list-map (lambda (bucket)\
    \ (list-map (lambda (i) (list (cons (cons well i) (cons bucket i)))))))) row))\
    \ wells_filled_filled))\n          (let ((wells_filled_filled_filled_filled (list-map\
    \ (lambda (row) (list-map (lambda (well) (list-map (lambda (bucket) (list-map\
    \ (lambda (i) (list (cons (cons well i) (cons bucket i)))))))) row)) wells_filled_filled_filled))\n\
    \            (let ((wells_filled_filled_filled_filled_filled (list-map (lambda\
    \ (row) (list-map (lambda (well) (list-map (lambda (bucket) (list-map (lambda\
    \ (i) (list (cons (cons well i) (cons bucket i)))))))) row)) wells_filled_filled_filled_filled))\n\
    \              (let ((wells_filled_filled_filled_filled_filled_filled (list-map\
    \ (lambda (row) (list-map (lambda (well) (list-map (lambda (bucket) (list-map\
    \ (lambda (i) (list (cons (cons well i) (cons bucket i)))))))) row)) wells_filled_filled_filled_filled_filled))",
  "  (let ((wells (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) grid))\n\
    \        (buckets (list-map (lambda (x) (list-map (lambda (y) (list x y)) x))\
    \ capacity)))\n    (let ((wells_filled (list-map (lambda (x) (list-map (lambda\
    \ (y) (list x y)) x)) wells)))\n      (let ((wells_filled_count (list-map (lambda\
    \ (x) (list-map (lambda (y) (list x y)) x)) wells_filled)))\n        (let ((wells_filled_count_count\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count)))\n\
    \          (let ((wells_filled_count_count_count (list-map (lambda (x) (list-map\
    \ (lambda (y) (list x y)) x)) wells_filled_count_count)))\n            (let ((wells_filled_count_count_count_count\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count_count_count))))\n\
    \              (let ((wells_filled_count_count_count_count_count (list-map (lambda\
    \ (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count_count_count_count_count))))\n\
    \                (let ((wells_filled_count_count_count_count_count_count_count\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count_count_count_count_count_count_count))))\n\
    \                  (let ((wells_filled_count_count_count_count_count_count_count_count_count\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count_count_count_count_count_count_count_count))))\n\
    \                    (let ((wells_filled_count_count_count_count_count_count_count_count_count_count\
    \ (list", "  (let ((wells (list-map (lambda (x) (list x)) grid)))\n    (let ((wells_filled\
    \ (list-map (lambda (x) (list-length x)) wells)))\n      (let ((wells_filled_new\
    \ (list-map (lambda (x) (list-append x (list 0))) wells_filled)))\n        (let\
    \ ((wells_filled_new_new (list-map (lambda (x) (list-append x (list 0))) wells_filled_new)))\n\
    \          (let ((wells_filled_new_new_new (list-map (lambda (x) (list-append\
    \ x (list 0))) wells_filled_new_new)))\n            (let ((wells_filled_new_new_new_new\
    \ (list-map (lambda (x) (list-append x (list 0))) wells_filled_new_new_new))))\n\
    \            (let ((wells_filled_new_new_new_new_new (list-map (lambda (x) (list-append\
    \ x (list 0))) wells_filled_new_new_new_new_new))))\n            (let ((wells_filled_new_new_new_new_new_new_new\
    \ (list-map (lambda (x) (list-append x (list 0))) wells_filled_new_new_new_new_new_new_new_new))))\n\
    \              (let ((wells_filled_new_new_new_new_new_new_new_new_new (list-map\
    \ (lambda (x) (list-append x (list 0))) wells_filled_new_new_new_new_new_new_new_new_new_new))))\n\
    \                (let ((wells_filled_new_new_new_new_new_new_new_new_new_new_new\
    \ (list-map (lambda (x) (list-append x (list 0))) wells_filled_new_new_new_new_new_new_new_new_new_new_new))))\n\
    \                  (let ((wells_filled_new_new_new_new_new_new_new_new_new_new_new_new_new\
    \ (list-map (lambda (x) (list-append x (list 0)))", '  (let ((wells (list-map
    (lambda (x) (list-map (lambda (y) (list-map (lambda (z) (list-map (lambda (w)
    (list-map (lambda (u) (list-map (lambda (v) (list-map (lambda (t) (list-map (lambda
    (s) (list-map (lambda (r) (list-map (lambda (q) (list-map (lambda (p) (list-map
    (lambda (o) (list-map (lambda (n) (list-map (lambda (m) (list-map (lambda (l)
    (list-map (lambda (k) (list-map (lambda (j) (list-map (lambda (i) (list-map (lambda
    (h) (list-map (lambda (g) (list-map (lambda (f) (list-map (lambda (e) (list-map
    (lambda (d) (list-map (lambda (c) (list-map (lambda (b) (list-map (lambda (a)
    (list-map (lambda (y) (list-map (lambda (x) (list-map (lambda (w) (list-map (lambda
    (u) (list-map (lambda (v) (list-map (lambda (t) (list-map (lambda (s) (list-map
    (lambda (r) (list-map (lambda (q) (list-map (lambda (p) (list-map (lambda (o)
    (list-map (lambda (n) (list-map (lambda (m) (list-map (lambda (l) (list-map (lambda
    (k) (list-map (lambda (j) (list-map (lambda (i) (list-map (lambda (h) (list-map
    (lambda (g) (list-map (lambda (f) (list-map (lambda (e) (list-map (lambda (d)
    (list-map (lambda (c) (list-map (lambda (b) (list-map (lambda (a) (list-map (lambda
    (y) (list-map (lambda (x) (list-map (lambda (w) (list-map (lambda (u) (list-map
    (lambda (v) (list', "  (let ((wells (list-map (lambda (row) (list-map (lambda\
    \ (well) (list-map (lambda (bucket) (list-map (lambda (i) (list (cons (cons well\
    \ i) (cons bucket i)))))) row)) well))))\n    (let ((wells_filled (list-map (lambda\
    \ (well) (list-map (lambda (bucket) (list-map (lambda (i) (list (cons (cons well\
    \ i) (cons bucket i)))))) well))))\n      (let ((wells_filled_count (list-map\
    \ (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i) (list (cons\
    \ (cons well i) (cons bucket i)))))) well))))\n        (let ((wells_filled_count_count\
    \ (list-map (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i) (list\
    \ (cons (cons well i) (cons bucket i)))))) well))))\n          (let ((wells_filled_count_count_count\
    \ (list-map (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i) (list\
    \ (cons (cons well i) (cons bucket i)))))) well))))\n            (let ((wells_filled_count_count_count_count\
    \ (list-map (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i) (list\
    \ (cons (cons well i) (cons bucket i)))))) well))))\n              (let ((wells_filled_count_count_count_count_count\
    \ (list-map (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i) (list\
    \ (cons (cons well i) (cons bucket i)))))) well))))\n                (let ((wells_filled_count_count_count_count_count_count\
    \ (list-map (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i) (list\
    \ (cons (cons well i) (cons bucket i)))))) well))))\n                  (let ((wells_filled_count_count_count_count_count_count_count\
    \ (list-map (lambda (", "  (let ((wells (list-map (lambda (row) (list-map (lambda\
    \ (well) (list-map (lambda (bucket) (list-map (lambda (i) (list (cons (cons well\
    \ i) (cons bucket i)))))))) row)) grid))\n    (let ((wells_filled (list-map (lambda\
    \ (well) (list (cons well 0))))))\n      (let ((wells_filled_count (list-length\
    \ wells_filled))\n        (wells_filled_filled (list-map (lambda (well) (list\
    \ (cons well 0))))))\n        (let ((wells_filled_filled_count (list-length wells_filled_filled))\n\
    \          (wells_filled_filled_filled (list-map (lambda (well) (list (cons well\
    \ 0))))))\n          (let ((wells_filled_filled_filled_count (list-length wells_filled_filled_filled))\n\
    \            (wells_filled_filled_filled_filled (list-map (lambda (well) (list\
    \ (cons well 0))))))\n              (let ((wells_filled_filled_filled_filled_count\
    \ (list-length wells_filled_filled_filled_filled))\n                (wells_filled_filled_filled_filled_filled\
    \ (list-map (lambda (well) (list (cons well 0))))))\n                  (let ((wells_filled_filled_filled_filled_filled_count\
    \ (list-length wells_filled_filled_filled_filled_filled))\n                  \
    \  (wells_filled_filled_filled_filled_filled_filled (list-map (lambda (well) (list\
    \ (cons well 0))))))\n                      (let ((wells_filled_filled_filled_filled_filled_filled_count\
    \ (list-length wells_filled_filled_filled_filled_filled_filled))\n           \
    \             (wells_filled_filled_filled_filled_filled_filled_filled (list-map\
    \ (lambda (well) (list (cons well 0))))))\n                          (let ((wells_filled_filled_filled_filled_filled_filled_filled_count\
    \ (list-length wells_filled_filled_filled_filled_filled_filled_filled))\n    \
    \                        (wells_filled_filled_filled_filled_filled_filled_filled_filled",
  '  (let ((wells (list-map (lambda (row) (list-map (lambda (well) (list-map (lambda
    (bucket) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (c) (list-map
    (lambda (w) (list-map (lambda (b) (list-map (lambda (n) (list-map (lambda (x)
    (list-map (lambda (y) (list-map (lambda (z) (list-map (lambda (a) (list-map (lambda
    (b) (list-map (lambda (c) (list-map (lambda (d) (list-map (lambda (e) (list-map
    (lambda (f) (list-map (lambda (g) (list-map (lambda (h) (list-map (lambda (i)
    (list-map (lambda (j) (list-map (lambda (k) (list-map (lambda (l) (list-map (lambda
    (m) (list-map (lambda (n) (list-map (lambda (o) (list-map (lambda (p) (list-map
    (lambda (q) (list-map (lambda (r) (list-map (lambda (s) (list-map (lambda (t)
    (list-map (lambda (u) (list-map (lambda (v) (list-map (lambda (w) (list-map (lambda
    (x) (list-map (lambda (y) (list-map (lambda (z) (list-map (lambda (a) (list-map
    (lambda (b) (list-map (lambda (c) (list-map (lambda (d) (list-map (lambda (e)
    (list-map (lambda (f) (list-map (lambda (g) (list-map (lambda (h) (list-map (lambda
    (i) (list-map (lambda (j) (list-map (lambda (k) (list-map (lambda (l) (list-map
    (lambda (m) (list-map (lambda (n) (list-map (lambda (o) (list-map (lambda (p)
    (list-map (lambda (q) (list-map (lambda (r) (', "  (let ((wells (list-map (lambda\
    \ (well) (list well 0)) grid))\n        (buckets (list-map (lambda (bucket) (list\
    \ bucket 0)) wells)))\n    (let ((wells_filled (list-map (lambda (well) (list\
    \ well 0)) wells)))\n      (let ((buckets_filled (list-map (lambda (bucket) (list\
    \ bucket 0)) buckets)))\n        (let ((wells_filled_count (list-map (lambda (well)\
    \ (list well 0)) wells_filled)))\n          (let ((buckets_filled_count (list-map\
    \ (lambda (bucket) (list bucket 0)) buckets_filled)))\n            (let ((wells_filled_count_count\
    \ (list-map (lambda (well) (list well 0)) wells_filled_count)))\n            \
    \  (let ((buckets_filled_count_count (list-map (lambda (bucket) (list bucket 0))\
    \ buckets_filled_count)))\n                (let ((wells_filled_count_count_count\
    \ (list-map (lambda (well) (list well 0)) wells_filled_count_count)))\n      \
    \            (let ((buckets_filled_count_count_count (list-map (lambda (bucket)\
    \ (list bucket 0)) buckets_filled_count_count)))\n                    (let ((wells_filled_count_count_count_count\
    \ (list-map (lambda (well) (list well 0)) wells_filled_count_count_count)))\n\
    \                      (let ((buckets_filled_count_count_count_count (list-map\
    \ (lambda (bucket) (list bucket 0)) buckets_filled_count_count_count)))\n    \
    \                    (let ((wells_filled_count_count_count_count_count (list-map\
    \ (lambda (well) (list well 0)) wells_filled_count_count_count_count)))\n    \
    \                      (let ((buckets_filled_count_count_count_count_count (list-map\
    \ (lambda (bucket) (list bucket 0)) buckets_filled_count_count_count_count)))\n\
    \                            (let ((wells_filled_count_count_count_count_count_count\
    \ (list-map (lambda (well) (list well 0)) wells_filled_count_count", "  (let ((wells\
    \ (list-map (lambda (x) (list x)) grid))\n        (buckets (list-map (lambda (x)\
    \ (list x)) capacity)))\n    (let ((wells_filled (list-map (lambda (x) (list-length\
    \ (wells x))))))\n      (let ((wells_filled_count (list-fold (lambda (x y) (+\
    \ x y)) 0 wells_filled)))\n        (let ((wells_filled_buckets (list-map (lambda\
    \ (x) (list-fold (lambda (y z) (+ y z)) 0 buckets y)) wells_filled)))\n      \
    \    (let ((wells_filled_buckets_count (list-fold (lambda (x y) (+ x y)) 0 wells_filled_buckets)))\n\
    \            (let ((wells_filled_buckets_count_count (list-fold (lambda (x y)\
    \ (+ x y)) 0 wells_filled_buckets_count)))\n              (let ((wells_filled_buckets_count_count_count\
    \ (list-fold (lambda (x y) (+ x y)) 0 wells_filled_buckets_count_count)))\n  \
    \              (let ((wells_filled_buckets_count_count_count_count (list-fold\
    \ (lambda (x y) (+ x y)) 0 wells_filled_buckets_count_count_count)))\n       \
    \           (let ((wells_filled_buckets_count_count_count_count_count (list-fold\
    \ (lambda (x y) (+ x y)) 0 wells_filled_buckets_count_count_count_count)))\n \
    \                   (let ((wells_filled_buckets_count_count_count_count_count_count\
    \ (list-fold (lambda (x y) (+ x y)) 0 wells_filled_buckets_count_count_count_count_count))))\n\
    \                      (let ((wells_filled_buckets_count_count_count_count_count_count_count\
    \ (list-fold (lambda (x y) (+ x y)) 0 wells_filled_buckets_count_count_count_count_count_count))))\n\
    \                        (let ((wells_filled_buckets_count_count_count_count_count_count_count_count\
    \ (list-fold (lambda", "  (let ((wells (list-map (lambda (x) (list-map (lambda\
    \ (y) (list x y)) x)) grid))\n        (buckets (list-map (lambda (x) (list-map\
    \ (lambda (y) (list x y)) x)) capacity)))\n    (let ((wells_filled (list-map (lambda\
    \ (x) (list-map (lambda (y) (list-length (list-get x y))) x)) wells))\n      \
    \    (buckets_filled (list-map (lambda (x) (list-map (lambda (y) (list-length\
    \ (list-get x y))) x)) buckets))))\n    (let ((wells_filled_count (list-map (lambda\
    \ (x) (list-map (lambda (y) (list-sum (list-get x y))) x)) wells_filled)))\n \
    \     (let ((wells_filled_count_count (list-map (lambda (x) (list-map (lambda\
    \ (y) (list-sum (list-get x y))) x)) wells_filled_count)))\n        (let ((wells_filled_count_count_count\
    \ (list-map (lambda (x) (list-map (lambda (y) (list-sum (list-get x y))) x)) wells_filled_count_count)))\n\
    \          (let ((wells_filled_count_count_count_count (list-map (lambda (x) (list-map\
    \ (lambda (y) (list-sum (list-get x y))) x)) wells_filled_count_count_count)))\n\
    \            (let ((wells_filled_count_count_count_count_count (list-map (lambda\
    \ (x) (list-map (lambda (y) (list-sum (list-get x y))) x)) wells_filled_count_count_count_count)))\n\
    \              (let ((wells_filled_count_count_count_count_count_count (list-map\
    \ (lambda (x) (list-map (lambda (y) (list-sum (list-get x y))) x)) wells_filled_count_count_count_count_count)))\n\
    \                (let ((wells_filled_count_count_count_count_count_count_count\
    \ (list-map (lambda", "  (let ((wells (list-map (lambda (row) (list-map (lambda\
    \ (well) (list-map (lambda (bucket) (list-map (lambda (i) (list (cons (cons well\
    \ i) (cons bucket i)))))))) row)) grid))\n    (let ((wells_filled (list-map (lambda\
    \ (row) (list-map (lambda (well) (list-map (lambda (bucket) (list (cons (cons\
    \ well bucket) (cons bucket well)))))))) row))\n      (let ((wells_filled_count\
    \ (list-map (lambda (row) (list-map (lambda (well) (list (cons (cons well well)\
    \ (cons well well))))))))\n        (let ((wells_filled_count_count (list-map (lambda\
    \ (row) (list-map (lambda (well) (list (cons (cons well well) (cons well well))))))))\n\
    \          (let ((wells_filled_count_count_count (list-map (lambda (row) (list-map\
    \ (lambda (well) (list (cons (cons well well) (cons well well))))))))\n      \
    \      (let ((wells_filled_count_count_count_count (list-map (lambda (row) (list-map\
    \ (lambda (well) (list (cons (cons well well) (cons well well))))))))\n      \
    \        (let ((wells_filled_count_count_count_count_count (list-map (lambda (row)\
    \ (list-map (lambda (well) (list (cons (cons well well) (cons well well))))))))\n\
    \                (let ((wells_filled_count_count_count_count_count_count (list-map\
    \ (lambda (row) (list-map (lambda (well) (list (cons (cons well well) (cons well\
    \ well))))))))\n                  (let ((wells_filled_count_count_count_count_count_count_count\
    \ (list-map (lambda (row) (list-map (lambda (well) (list (cons (cons well well)\
    \ (cons well well))))))))\n                    (let ((wells_filled_count_count_count_count_count_count_count_count\
    \ (list-map (lambda (row) (list-map (lambda (well) (list (", "  (let ((wells (list-map\
    \ (lambda (row) (list-map (lambda (well) (list-map (lambda (bucket) (list-map\
    \ (lambda (i) (list-map (lambda (j) (list (cons (cons well i j) (cons bucket i\
    \ j)))))))) (row))) (row))) (row))) (row)))\n    (let ((wells_filled (list (list\
    \ 0 0 0) (list 0 0 0) (list 0 0 0) (list 0 0 0)))\n          (wells_filled_count\
    \ (list 0 0 0)))\n      (let ((wells_filled_count (list 0 0 0)))\n        (let\
    \ ((wells_filled (list (list 0 0 0) (list 0 0 0) (list 0 0 0) (list 0 0 0)))\n\
    \              (wells_filled_count (list 0 0 0)))\n          (let ((wells_filled_count\
    \ (list 0 0 0)))\n            (let ((wells_filled (list (list 0 0 0) (list 0 0\
    \ 0) (list 0 0 0) (list 0 0 0)))\n                  (wells_filled_count (list\
    \ 0 0 0)))\n              (let ((wells_filled_count (list 0 0 0)))\n         \
    \       (let ((wells_filled (list (list 0 0 0) (list 0 0 0) (list 0 0 0) (list\
    \ 0 0 0)))\n                      (wells_filled_count (list 0 0 0)))\n       \
    \           (let ((wells_filled_count (list 0 0 0)))\n                    (let\
    \ ((wells_filled (list (list 0 0 0) (list 0 0 0) (list 0 0 0) (list 0 0 0)))\n\
    \                          (wells_filled_count (list 0 0 0)))\n              \
    \        (let ((wells_filled_count (list 0 0 0)))\n                        (let\
    \ ((wells_filled (list (list 0 0 0) (list 0 0 0) (list 0 0 0) (list 0 0 0)))\n\
    \                              (wells_filled_count (list 0 0 0)))\n          \
    \                (let ((wells_filled_count (list 0 0 0)))\n                  \
    \          (let ((wells_filled (list (list 0 0 0) (list 0 0 0) (list 0 0 0)",
  "  (let ((wells (list-map (lambda (x) (list x)) grid))\n        (buckets (list-map\
    \ (lambda (x) (list x)) capacity)))\n    (let ((wells_filled (list-map (lambda\
    \ (x) (list-length x)) wells)))\n      (let ((wells_filled_buckets (list-map (lambda\
    \ (x) (list-length x)) wells_filled))\n            (buckets_filled (list-map (lambda\
    \ (x) (list-length x)) buckets)))\n        (let ((wells_filled_buckets_filled\
    \ (list-map (lambda (x) (list-length x)) wells_filled_buckets))\n            \
    \  (buckets_filled_filled (list-map (lambda (x) (list-length x)) buckets_filled)))\n\
    \          (let ((wells_filled_buckets_filled_filled (list-map (lambda (x) (list-length\
    \ x)) wells_filled_buckets_filled))\n                (buckets_filled_filled_filled\
    \ (list-map (lambda (x) (list-length x)) buckets_filled_filled))))\n         \
    \   (let ((wells_filled_buckets_filled_filled_filled (list-map (lambda (x) (list-length\
    \ x)) wells_filled_buckets_filled_filled))\n                  (buckets_filled_filled_filled_filled\
    \ (list-map (lambda (x) (list-length x)) buckets_filled_filled_filled))))\n  \
    \            (let ((wells_filled_buckets_filled_filled_filled_filled (list-map\
    \ (lambda (x) (list-length x)) wells_filled_buckets_filled_filled_filled))\n \
    \                   (buckets_filled_filled_filled_filled_filled (list-map (lambda\
    \ (x) (list-length x)) buckets_filled_filled_filled_filled))))\n             \
    \   (let ((wells_filled_buckets_filled_filled_filled_filled_filled (list-map (lambda\
    \ (x) (list-length x)) wells_filled_buckets_filled_filled_filled_filled))\n  \
    \                    (buckets_filled_filled_filled_filled_filled_filled (list-map\
    \ (lambda (x) (list-length x)) buckets_", '  (let ((wells (list-map (lambda (row)
    (list-map (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i) (list-map
    (lambda (j) (list-map (lambda (c) (list-map (lambda (w) (list-map (lambda (b)
    (list-map (lambda (n) (list-map (lambda (x) (list-map (lambda (y) (list-map (lambda
    (z) (list-map (lambda (a) (list-map (lambda (b) (list-map (lambda (c) (list-map
    (lambda (d) (list-map (lambda (e) (list-map (lambda (f) (list-map (lambda (g)
    (list-map (lambda (h) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda
    (k) (list-map (lambda (l) (list-map (lambda (m) (list-map (lambda (n) (list-map
    (lambda (o) (list-map (lambda (p) (list-map (lambda (q) (list-map (lambda (r)
    (list-map (lambda (s) (list-map (lambda (t) (list-map (lambda (u) (list-map (lambda
    (v) (list-map (lambda (w) (list-map (lambda (x) (list-map (lambda (y) (list-map
    (lambda (z) (list-map (lambda (a) (list-map (lambda (b) (list-map (lambda (c)
    (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda (f) (list-map (lambda
    (g) (list-map (lambda (h) (list-map (lambda (i) (list-map (lambda (j) (list-map
    (lambda (k) (list-map (lambda (l) (list-map (lambda (m) (list-map (lambda (n)
    (list-map (lambda (o) (list-map (lambda (p) (list-map (lambda (q) (list-map (lambda
    (r) (', "  (let ((wells (list-map (lambda (x) (list x 0)) grid))\n        (buckets\
    \ (list-map (lambda (x) (list x 0)) grid)))\n    (let ((wells_filled (list-map\
    \ (lambda (x) (list x 0)) wells)))\n      (let ((wells_filled_count (list-map\
    \ (lambda (x) (list x 0)) wells_filled)))\n        (let ((wells_filled_buckets\
    \ (list-map (lambda (x) (list x 0)) wells_filled_count)))\n          (let ((wells_filled_buckets_count\
    \ (list-map (lambda (x) (list x 0)) wells_filled_buckets)))\n            (let\
    \ ((wells_filled_buckets_count_count (list-map (lambda (x) (list x 0)) wells_filled_buckets_count)))\n\
    \              (let ((wells_filled_buckets_count_count_count (list-map (lambda\
    \ (x) (list x 0)) wells_filled_buckets_count_count)))\n                (let ((wells_filled_buckets_count_count_count_count\
    \ (list-map (lambda (x) (list x 0)) wells_filled_buckets_count_count_count))))\n\
    \                (let ((wells_filled_buckets_count_count_count_count_count (list-map\
    \ (lambda (x) (list x 0)) wells_filled_buckets_count_count_count_count_count))))\n\
    \                (let ((wells_filled_buckets_count_count_count_count_count_count_count\
    \ (list-map (lambda (x) (list x 0)) wells_filled_buckets_count_count_count_count_count_count_count))))\n\
    \                  (let ((wells_filled_buckets_count_count_count_count_count_count_count_count_count\
    \ (list-map (lambda (x) (list x 0)) wells_filled_buckets_count_count_count_count_count_count_count_count_count))))\n\
    \                    (let ((wells_filled_buckets_count_count_count_count_count_count_count_count_count_count_count\
    \ (list", "  (let ((wells (list-map (lambda (x) (list-map (lambda (y) (list-ref\
    \ x y)) x)) grid))\n        (buckets (list-map (lambda (x) (list-ref x 0)) wells)))\n\
    \    (let ((well_count (list-length wells))\n          (bucket_count (list-length\
    \ buckets)))\n      (if (eq? well_count bucket_count)\n          (list 0)\n  \
    \        (let ((well_index (list-index-set wells 0)))\n            (let ((bucket_index\
    \ (list-index-set buckets 0)))\n              (let ((well_filled (list-ref wells\
    \ well_index)))\n                (let ((bucket_filled (list-ref buckets bucket_index)))\n\
    \                  (if (eq? well_filled bucket_filled)\n                     \
    \ (list (list-ref wells well_index) (list-ref buckets bucket_index))\n       \
    \               (let ((well_filled_count (list-ref wells well_index)))\n     \
    \                   (let ((bucket_filled_count (list-ref buckets bucket_index)))\n\
    \                          (if (eq? well_filled_count bucket_filled_count)\n \
    \                             (list (list-ref wells well_index) (list-ref buckets\
    \ bucket_index))\n                              (let ((well_filled_count (list-ref\
    \ wells well_index)))\n                                (let ((bucket_filled_count\
    \ (list-ref buckets bucket_index)))\n                                  (if (eq?\
    \ well_filled_count bucket_filled_count)\n                                   \
    \   (list (list-ref wells well_index) (list-ref buckets bucket_index))\n     \
    \                                 (let ((well_filled_count (list-ref wells well_index)))\n\
    \                                        (let ((bucket_filled_count (list-ref\
    \ buckets bucket_index)))\n                                          (if (eq?\
    \ well_filled_count bucket_filled_count)\n                                   \
    \           (list (list-ref wells well_index) (list-ref buckets bucket_index))\n\
    \                                              (let ((well_filled_count (list-ref\
    \ wells well_index)))\n                                                (let ((bucket_filled_count\
    \ (list-ref buckets bucket_index)))\n                               ", '  (let
    ((wells (list-map (lambda (row) (list-map (lambda (well) (list-map (lambda (bucket)
    (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (c) (list-map (lambda
    (w) (list-map (lambda (b) (list-map (lambda (n) (list-map (lambda (t) (list-map
    (lambda (a) (list-map (lambda (x) (list-map (lambda (y) (list-map (lambda (z)
    (list-map (lambda (f) (list-map (lambda (g) (list-map (lambda (h) (list-map (lambda
    (i) (list-map (lambda (j) (list-map (lambda (k) (list-map (lambda (l) (list-map
    (lambda (m) (list-map (lambda (n) (list-map (lambda (o) (list-map (lambda (p)
    (list-map (lambda (q) (list-map (lambda (r) (list-map (lambda (s) (list-map (lambda
    (t) (list-map (lambda (u) (list-map (lambda (v) (list-map (lambda (w) (list-map
    (lambda (x) (list-map (lambda (y) (list-map (lambda (z) (list-map (lambda (f)
    (list-map (lambda (g) (list-map (lambda (h) (list-map (lambda (i) (list-map (lambda
    (j) (list-map (lambda (k) (list-map (lambda (l) (list-map (lambda (m) (list-map
    (lambda (n) (list-map (lambda (o) (list-map (lambda (p) (list-map (lambda (q)
    (list-map (lambda (r) (list-map (lambda (s) (list-map (lambda (t) (list-map (lambda
    (u) (list-map (lambda (v) (list-map (lambda (w) (list-map (lambda (x) (list-map
    (lambda (y) (list-map (lambda (z) (', "  (let ((wells (list-map (lambda (well)\
    \ (list well 0)) grid)))\n    (let ((wells_filled (list 0)))\n      (let ((wells_filled_count\
    \ (list 0)))\n        (let ((wells_filled_index (list 0)))\n          (let ((wells_filled_index_count\
    \ (list 0)))\n            (let ((wells_filled_index_count_count (list 0)))\n \
    \             (let ((wells_filled_index_count_count_count (list 0)))\n       \
    \         (let ((wells_filled_index_count_count_count_count (list 0)))\n     \
    \             (let ((wells_filled_index_count_count_count_count_count (list 0)))\n\
    \                    (let ((wells_filled_index_count_count_count_count_count_count\
    \ (list 0)))\n                      (let ((wells_filled_index_count_count_count_count_count_count_count\
    \ (list 0)))\n                        (let ((wells_filled_index_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                          (let ((wells_filled_index_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                            (let ((wells_filled_index_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                              (let ((wells_filled_index_count_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                                (let ((wells_filled_index_count_count_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                                  (let ((wells_filled_index_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                                    (let ((wells_filled_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                                      (let ((wells_filled_index_count_count_count_count_",
  '  (let ((wells (list-map (lambda (row) (list-map (lambda (well) (list-map (lambda
    (bucket) (list-map (lambda (i) (list-map (lambda (j) (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append', "  (let ((wells\
    \ (list-map (lambda (x) (list x)) grid)))\n    (let ((wells_filled (list 0)))\n\
    \      (let ((wells_filled_count (list 0)))\n        (let ((wells_filled_max (list\
    \ 0)))\n          (let ((wells_filled_max_count (list 0)))\n            (let ((wells_filled_max_count_count\
    \ (list 0)))\n              (let ((wells_filled_max_count_count_count (list 0)))\n\
    \                (let ((wells_filled_max_count_count_count_count (list 0)))\n\
    \                  (let ((wells_filled_max_count_count_count_count_count (list\
    \ 0)))\n                    (let ((wells_filled_max_count_count_count_count_count_count\
    \ (list 0)))\n                      (let ((wells_filled_max_count_count_count_count_count_count_count\
    \ (list 0)))\n                        (let ((wells_filled_max_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                          (let ((wells_filled_max_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                            (let ((wells_filled_max_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                              (let ((wells_filled_max_count_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                                (let ((wells_filled_max_count_count_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                                  (let ((wells_filled_max_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                                    (let ((wells_filled_max_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                                      (let ((wells_filled_max_count_count_count_count_count",
  "  (let ((wells (list-map (lambda (x) (list-map (lambda (y) (list-map (lambda (z)\
    \ (list-ref x y z)))) x)) grid))\n        (buckets (list-map (lambda (x) (list-map\
    \ (lambda (y) (list-ref x y)) x)) wells)))\n    (let ((well_count (list-length\
    \ wells))\n          (bucket_count (list-length buckets)))\n      (let ((well_capacity\
    \ (list-map (lambda (x) (list-ref x 0)) wells)))\n        (let ((bucket_capacity\
    \ (list-map (lambda (x) (list-ref x 1)) buckets)))\n          (let ((well_filled\
    \ (list-map (lambda (x) (list-ref x 2)) wells)))\n            (let ((bucket_filled\
    \ (list-map (lambda (x) (list-ref x 2)) buckets)))\n              (let ((well_filled_count\
    \ (list-length well_filled)))\n                (let ((bucket_filled_count (list-length\
    \ bucket_filled)))\n                  (let ((well_filled_capacity (list-map (lambda\
    \ (x) (list-ref x 3)) well_filled)))\n                    (let ((bucket_filled_capacity\
    \ (list-map (lambda (x) (list-ref x 3)) bucket_filled)))\n                   \
    \   (let ((well_filled_capacity_count (list-length well_filled_capacity)))\n \
    \                       (let ((bucket_filled_capacity_count (list-length bucket_filled_capacity)))\n\
    \                          (let ((well_filled_capacity_capacity (list-map (lambda\
    \ (x) (list-ref x 4)) well_filled_capacity)))\n                            (let\
    \ ((bucket_filled_capacity_capacity (list-map (lambda (x) (list-ref x 4)) bucket_filled_capacity)))\n\
    \                              (let ((well_filled_capacity_capacity_count (list-length\
    \ well_filled_capacity_capacity)))\n                                (let ((bucket_filled_capacity_capacity_count\
    \ (list-length bucket_filled_capacity_capacity)))\n                          \
    \        (let ((well_filled_capacity_capacity_capacity (list-map (lambda (x) (list-ref\
    \ x 5)) well_filled", '  (let ((wells (list-map (lambda (row) (list-map (lambda
    (well) (list-map (lambda (bucket) (list-map (lambda (i) (list-map (lambda (j)
    (list-map (lambda (c) (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda
    (n) (list-map (lambda (o) (list-map (lambda (x) (list-map (lambda (y) (list-map
    (lambda (z) (list-map (lambda (a) (list-map (lambda (b) (list-map (lambda (c)
    (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda (f) (list-map (lambda
    (g) (list-map (lambda (h) (list-map (lambda (i) (list-map (lambda (j) (list-map
    (lambda (k) (list-map (lambda (l) (list-map (lambda (m) (list-map (lambda (n)
    (list-map (lambda (o) (list-map (lambda (p) (list-map (lambda (q) (list-map (lambda
    (r) (list-map (lambda (s) (list-map (lambda (t) (list-map (lambda (u) (list-map
    (lambda (v) (list-map (lambda (w) (list-map (lambda (x) (list-map (lambda (y)
    (list-map (lambda (z) (list-map (lambda (a) (list-map (lambda (b) (list-map (lambda
    (c) (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda (f) (list-map
    (lambda (g) (list-map (lambda (h) (list-map (lambda (i) (list-map (lambda (j)
    (list-map (lambda (k) (list-map (lambda (l) (list-map (lambda (m) (list-map (lambda
    (n) (list-map (lambda (o) (list-map (lambda (p) (list-map (lambda (q) (', '  (let
    ((wells (list-map (lambda (row) (list-map (lambda (well) (list-map (lambda (bucket)
    (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (w) (list-map (lambda
    (b) (list-map (lambda (n) (list-map (lambda (x) (list-map (lambda (y) (list-map
    (lambda (z) (list-map (lambda (a) (list-map (lambda (b) (list-map (lambda (c)
    (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda (f) (list-map (lambda
    (g) (list-map (lambda (h) (list-map (lambda (i) (list-map (lambda (j) (list-map
    (lambda (k) (list-map (lambda (l) (list-map (lambda (m) (list-map (lambda (n)
    (list-map (lambda (o) (list-map (lambda (p) (list-map (lambda (q) (list-map (lambda
    (r) (list-map (lambda (s) (list-map (lambda (t) (list-map (lambda (u) (list-map
    (lambda (v) (list-map (lambda (w) (list-map (lambda (x) (list-map (lambda (y)
    (list-map (lambda (z) (list-map (lambda (a) (list-map (lambda (b) (list-map (lambda
    (c) (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda (f) (list-map
    (lambda (g) (list-map (lambda (h) (list-map (lambda (i) (list-map (lambda (j)
    (list-map (lambda (k) (list-map (lambda (l) (list-map (lambda (m) (list-map (lambda
    (n) (list-map (lambda (o) (list-map (lambda (p) (list-map (lambda (q) (list-map
    (lambda (r) (list-map (lambda (s) (', "  (let ((wells (list)))\n    (for-each\
    \ (lambda (well)\n      (let ((well_length (length well))\n        (well_capacity\
    \ (capacity well)))\n        (for-each (lambda (bucket)\n          (let ((bucket_capacity\
    \ (bucket)))\n            (for-each (lambda (well)\n              (let ((well_capacity\
    \ (well_capacity well)))\n                (if (and (eq? well_length well_capacity)\n\
    \                      (>= bucket_capacity well_capacity))\n                 \
    \ (append wells (list well)))))\n            (if (empty? wells)\n            \
    \  (return 0)\n              (let ((wells (remove (first wells))))\n         \
    \       (+ (max_fill (rest wells) (min (length wells) bucket_capacity)) 1))))))))\n\
    \      (append wells (list))))\n    (max (map (lambda (wells) (length wells))\
    \ wells))))\n", "  (let ((wells (list-map (lambda (x) (list x)) grid)))\n    (let\
    \ ((wells_filled (list 0)))\n      (let ((wells_filled_index (list 0)))\n    \
    \    (let ((wells_filled_count (list 0)))\n          (let ((wells_filled_index_count\
    \ (list 0)))\n            (let ((wells_filled_count_index (list 0)))\n       \
    \       (let ((wells_filled_count_index_count (list 0)))\n                (let\
    \ ((wells_filled_count_index_count_index (list 0)))\n                  (let ((wells_filled_count_index_count_index_count\
    \ (list 0)))\n                    (let ((wells_filled_count_index_count_index_count_index\
    \ (list 0)))\n                      (let ((wells_filled_count_index_count_index_count_index_count\
    \ (list 0)))\n                        (let ((wells_filled_count_index_count_index_count_index_count_index\
    \ (list 0)))\n                          (let ((wells_filled_count_index_count_index_count_index_count_index_count\
    \ (list 0)))\n                            (let ((wells_filled_count_index_count_index_count_index_count_index_count_index\
    \ (list 0)))\n                              (let ((wells_filled_count_index_count_index_count_index_count_index_count_index_count\
    \ (list 0)))\n                                (let ((wells_filled_count_index_count_index_count_index_count_index_count_index_count_index\
    \ (list 0)))\n                                  (let ((wells_filled_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ (list 0)))\n                                    (let ((wells_filled_count_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ (list 0)))\n                                      (let ((wells_filled_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ (list 0)))\n                                        ", '  (let ((wells (list-map
    (lambda (row) (list-map (lambda (well) (list-map (lambda (bucket) (list-map (lambda
    (i) (list-map (lambda (j) (list-map (lambda (c) (list-map (lambda (w) (list-map
    (lambda (b) (list-map (lambda (n) (list-map (lambda (o) (list-map (lambda (x)
    (list-map (lambda (y) (list-map (lambda (z) (list-map (lambda (a) (list-map (lambda
    (b) (list-map (lambda (c) (list-map (lambda (d) (list-map (lambda (e) (list-map
    (lambda (f) (list-map (lambda (g) (list-map (lambda (h) (list-map (lambda (i)
    (list-map (lambda (j) (list-map (lambda (k) (list-map (lambda (l) (list-map (lambda
    (m) (list-map (lambda (n) (list-map (lambda (o) (list-map (lambda (p) (list-map
    (lambda (q) (list-map (lambda (r) (list-map (lambda (s) (list-map (lambda (t)
    (list-map (lambda (u) (list-map (lambda (v) (list-map (lambda (w) (list-map (lambda
    (x) (list-map (lambda (y) (list-map (lambda (z) (list-map (lambda (a) (list-map
    (lambda (b) (list-map (lambda (c) (list-map (lambda (d) (list-map (lambda (e)
    (list-map (lambda (f) (list-map (lambda (g) (list-map (lambda (h) (list-map (lambda
    (i) (list-map (lambda (j) (list-map (lambda (k) (list-map (lambda (l) (list-map
    (lambda (m) (list-map (lambda (n) (list-map (lambda (o) (list-map (lambda (p)
    (list-map (lambda (q) (', "  (let ((wells (list-map (lambda (x) (list-map (lambda\
    \ (y) (list x y)) x)) grid))\n        (buckets (list-map (lambda (x) (list-map\
    \ (lambda (y) (list x y)) x)) capacity)))\n    (let ((wells_filled (list-map (lambda\
    \ (x) (list-map (lambda (y) (list x y)) x)) wells))\n          (buckets_filled\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) buckets)))\n   \
    \   (let ((wells_filled_count (list-map (lambda (x) (list-map (lambda (y) (list\
    \ x y)) x)) wells_filled)))\n        (let ((wells_filled_count_count (list-map\
    \ (lambda (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count)))\n  \
    \        (let ((wells_filled_count_count_count (list-map (lambda (x) (list-map\
    \ (lambda (y) (list x y)) x)) wells_filled_count_count)))\n            (let ((wells_filled_count_count_count_count\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count_count_count))))\n\
    \              (let ((wells_filled_count_count_count_count_count (list-map (lambda\
    \ (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count_count_count_count))))\n\
    \                (let ((wells_filled_count_count_count_count_count_count (list-map\
    \ (lambda (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count_count_count_count_count))))\n\
    \                  (let ((wells_filled_count_count_count_count_count_count_count\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count_count_count_count_count_count))))\n\
    \                    (let ((wells_filled_count_count", "  (let ((wells (list-map\
    \ (lambda (x) (list x)) grid))\n        (buckets (list-map (lambda (x) (list x))\
    \ capacity)))\n    (let ((wells_filled (list-map (lambda (x) (list-length x))\
    \ wells)))\n      (let ((wells_filled_buckets (list-map (lambda (x) (list-length\
    \ x)) wells_filled))\n            (wells_filled_buckets_filled (list-map (lambda\
    \ (x) (list-length x)) wells_filled_buckets))))\n        (let ((wells_filled_buckets_filled_filled\
    \ (list-map (lambda (x) (list-length x)) wells_filled_buckets_filled))\n     \
    \         (wells_filled_buckets_filled_filled_filled (list-map (lambda (x) (list-length\
    \ x)) wells_filled_buckets_filled_filled))))\n          (let ((wells_filled_buckets_filled_filled_filled_filled\
    \ (list-map (lambda (x) (list-length x)) wells_filled_buckets_filled_filled_filled_filled))))\n\
    \            (let ((wells_filled_buckets_filled_filled_filled_filled_filled_filled\
    \ (list-map (lambda (x) (list-length x)) wells_filled_buckets_filled_filled_filled_filled_filled_filled))))\n\
    \              (let ((wells_filled_buckets_filled_filled_filled_filled_filled_filled_filled_filled\
    \ (list-map (lambda (x) (list-length x)) wells_filled_buckets_filled_filled_filled_filled_filled_filled_filled_filled))))\n\
    \                (let ((wells_filled_buckets_filled_filled_filled_filled_filled_filled_filled_filled_filled_filled\
    \ (list-map (lambda (x) (list-length x)) wells_filled_buckets_filled_filled_filled_filled_filled_filled_filled_filled_filled))))\n\
    \                  (let ((wells_filled_buckets_filled_filled_filled_filled_filled_filled_filled_filled_filled_filled_filled\
    \ (list-map (lambda (x) (list-length x)) wells_filled", "  (let ((wells (list-map\
    \ (lambda (x) (list x)) grid)))\n    (let ((wells_filled (list-map (lambda (x)\
    \ (list-length x)) wells)))\n      (let ((wells_filled_new (list-map (lambda (x)\
    \ (list-append (list-length x) (list-length (list-ref x 1)))) wells_filled)))\n\
    \        (let ((wells_filled_new_new (list-map (lambda (x) (list-append (list-length\
    \ x) (list-length (list-ref x 2)))) wells_filled_new))))\n          (let ((wells_filled_new_new_new\
    \ (list-map (lambda (x) (list-append (list-length x) (list-length (list-ref x\
    \ 3)))) wells_filled_new_new))))\n            (let ((wells_filled_new_new_new_new\
    \ (list-map (lambda (x) (list-append (list-length x) (list-length (list-ref x\
    \ 4)))) wells_filled_new_new_new))))\n              (let ((wells_filled_new_new_new_new_new\
    \ (list-map (lambda (x) (list-append (list-length x) (list-length (list-ref x\
    \ 5)))) wells_filled_new_new_new_new))))\n                (let ((wells_filled_new_new_new_new_new_new\
    \ (list-map (lambda (x) (list-append (list-length x) (list-length (list-ref x\
    \ 6)))) wells_filled_new_new_new_new_new))))\n                  (let ((wells_filled_new_new_new_new_new_new_new\
    \ (list-map (lambda (x) (list-append (list-length x) (list-length (list-ref x\
    \ 7)))) wells_filled_new_new_new_new_new_new))))\n                    (let ((wells_filled_new_new_new_new_new_new_new_new\
    \ (list-map (lambda (x) (list-append (list-length x) (list-length (list-ref x\
    \ 8)))) wells_filled_new_new_new_new", '  (let ((wells (list-map (lambda (row)
    (list-map (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i) (list-map
    (lambda (j) (list-map (lambda (c) (list-map (lambda (w) (list-map (lambda (b)
    (list-map (lambda (n) (list-map (lambda (t) (list-map (lambda (s) (list-map (lambda
    (x) (list-map (lambda (y) (list-map (lambda (z) (list-map (lambda (a) (list-map
    (lambda (b) (list-map (lambda (c) (list-map (lambda (d) (list-map (lambda (e)
    (list-map (lambda (f) (list-map (lambda (g) (list-map (lambda (h) (list-map (lambda
    (i) (list-map (lambda (j) (list-map (lambda (k) (list-map (lambda (l) (list-map
    (lambda (m) (list-map (lambda (n) (list-map (lambda (o) (list-map (lambda (p)
    (list-map (lambda (q) (list-map (lambda (r) (list-map (lambda (s) (list-map (lambda
    (t) (list-map (lambda (u) (list-map (lambda (v) (list-map (lambda (w) (list-map
    (lambda (x) (list-map (lambda (y) (list-map (lambda (z) (list-map (lambda (a)
    (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda (d) (list-map (lambda
    (e) (list-map (lambda (f) (list-map (lambda (g) (list-map (lambda (h) (list-map
    (lambda (i) (list-map (lambda (j) (list-map (lambda (k) (list-map (lambda (l)
    (list-map (lambda (m) (list-map (lambda (n) (list-map (lambda (o) (list-map (lambda
    (p) (', '  (let ((wells (list-map (lambda (row) (list-map (lambda (well) (list-map
    (lambda (bucket) (list-map (lambda (i) (list-map (lambda (j) (list (list (car
    (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr
    (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr
    (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr
    (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr
    (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr
    (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr
    (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr
    (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr
    (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr
    (cdr (cdr (cdr (cdr (cdr (cdr (cdr (', "  (let ((wells (list)))\n    (for-each\
    \ ((well) wells)\n      (let ((well_capacity (car well)))\n        (for-each ((bucket)\
    \ (cdr well))\n          (let ((bucket_capacity (car bucket)))\n            (if\
    \ (eq? (car well) (car bucket))\n              (if (eq? (car well) (car bucket))\n\
    \                (let ((well_filled (car well)))\n                  (let ((bucket_filled\
    \ (car bucket)))\n                    (if (eq? (car well) (car bucket))\n    \
    \                  (if (eq? (car well) (car bucket))\n                       \
    \ (let ((well_filled (car well)))\n                          (let ((bucket_filled\
    \ (car bucket)))\n                            (if (eq? (car well) (car bucket))\n\
    \                              (if (eq? (car well) (car bucket))\n           \
    \                     (if (eq? (car well) (car bucket))\n                    \
    \              (if (eq? (car well) (car bucket))\n                           \
    \         (if (eq? (car well) (car bucket))\n                                \
    \      (if (eq? (car well) (car bucket))\n                                   \
    \     (if (eq? (car well) (car bucket))\n                                    \
    \      (if (eq? (car well) (car bucket))\n                                   \
    \         (if (eq? (car well) (car bucket))\n                                \
    \              (if (eq? (car well) (car bucket))\n                           \
    \                     (if (eq? (car well) (car bucket))\n                    \
    \                              (if (eq? (car well) (car bucket))\n           \
    \                                         (if (eq? (car well) (car bucket))\n\
    \                                                      (if (eq? (car well) (car\
    \ bucket))\n                                                        (if (eq? (car\
    \ well) (car bucket))\n                                                      \
    \    (if (eq? (car well) (car bucket))\n                                     \
    \                       (if (eq? (car well) (car bucket))\n                  \
    \                                            (if (eq? (car well) (car bucket))\n\
    \                                                                (if (eq? (car\
    \ well", '  (let ((wells (list-map (lambda (x) (list-map (lambda (y) (list-map
    (lambda (z) (list-map (lambda (w) (list-map (lambda (u) (list-map (lambda (v)
    (list-map (lambda (t) (list-map (lambda (s) (list-map (lambda (r) (list-map (lambda
    (q) (list-map (lambda (p) (list-map (lambda (o) (list-map (lambda (n) (list-map
    (lambda (m) (list-map (lambda (l) (list-map (lambda (k) (list-map (lambda (j)
    (list-map (lambda (i) (list-map (lambda (h) (list-map (lambda (g) (list-map (lambda
    (f) (list-map (lambda (e) (list-map (lambda (d) (list-map (lambda (c) (list-map
    (lambda (b) (list-map (lambda (a) (list-map (lambda (y) (list-map (lambda (x)
    (list-map (lambda (w) (list-map (lambda (u) (list-map (lambda (v) (list-map (lambda
    (t) (list-map (lambda (s) (list-map (lambda (r) (list-map (lambda (q) (list-map
    (lambda (p) (list-map (lambda (o) (list-map (lambda (n) (list-map (lambda (m)
    (list-map (lambda (l) (list-map (lambda (k) (list-map (lambda (j) (list-map (lambda
    (i) (list-map (lambda (h) (list-map (lambda (g) (list-map (lambda (f) (list-map
    (lambda (e) (list-map (lambda (d) (list-map (lambda (c) (list-map (lambda (b)
    (list-map (lambda (a) (list-map (lambda (y) (list-map (lambda (x) (list-map (lambda
    (w) (list-map (lambda (u) (list-map (lambda (v) (list', "  (let ((wells (list-map\
    \ (lambda (well) (list well)) grid)))\n    (let ((wells_filled (list-map (lambda\
    \ (well) (list well)) wells_filled))\n          (wells_filled_count (list-map\
    \ (lambda (well) (list well)) wells_filled_count)))\n      (let ((wells_filled_count_list\
    \ (list-map (lambda (well) (list well)) wells_filled_count_list))\n          \
    \  (wells_filled_count_list_count (list-map (lambda (well) (list well)) wells_filled_count_list_count)))\n\
    \        (let ((wells_filled_count_list_count_list (list-map (lambda (well) (list\
    \ well)) wells_filled_count_list_count_list))\n              (wells_filled_count_list_count_list_count\
    \ (list-map (lambda (well) (list well)) wells_filled_count_list_count_list_count))))\n\
    \          (let ((wells_filled_count_list_count_list_count_list (list-map (lambda\
    \ (well) (list well)) wells_filled_count_list_count_list_count_list))\n      \
    \          (wells_filled_count_list_count_list_count_list_count (list-map (lambda\
    \ (well) (list well)) wells_filled_count_list_count_list_count_list_count))))\n\
    \            (let ((wells_filled_count_list_count_list_count_list_count_list (list-map\
    \ (lambda (well) (list well)) wells_filled_count_list_count_list_count_list_count_list))\n\
    \                  (wells_filled_count_list_count_list_count_list_count_list_count\
    \ (list-map (lambda (well) (list well)) wells_filled_count_list_count_list_count_list_count_list_count))))\n\
    \              (let ((wells_filled_count_list_count_list_count_list_count_list_count_list\
    \ (list-map (lambda (well) (list well)) wells_filled_count_list_count_list_count_list_count_list",
  '  (let ((wells (list-map (lambda (row) (list-map (lambda (well) (list-map (lambda
    (bucket) (list-map (lambda (i) (list-map (lambda (j) (list (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons', "  (let ((wells (list-map (lambda (x) (list x 0)) grid)))\n\
    \    (let ((wells_filled (list 0)))\n      (let ((wells_filled_count (list 0)))\n\
    \        (let ((wells_filled_new (list 0)))\n          (let ((wells_filled_new_count\
    \ (list 0)))\n            (let ((wells_filled_new_count_count (list 0)))\n   \
    \           (let ((wells_filled_new_count_count_count (list 0)))\n           \
    \     (while (not (empty? wells_filled_new_count_count_count))\n             \
    \     (let ((well (car wells_filled_new_count_count_count)))\n               \
    \     (if (car wells_filled_new_count_count_count)\n                      (let\
    \ ((well_filled_new_count_count_count_count (cdr wells_filled_new_count_count_count)))\n\
    \                        (let ((well_filled_new_count_count_count_count_count\
    \ (cdr wells_filled_new_count_count_count_count)))\n                         \
    \ (let ((well_filled_new_count_count_count_count_count_count (cdr wells_filled_new_count_count_count_count_count)))\n\
    \                            (let ((well_filled_new_count_count_count_count_count_count_count\
    \ (cdr wells_filled_new_count_count_count_count_count_count)))\n             \
    \                 (let ((well_filled_new_count_count_count_count_count_count_count_count\
    \ (cdr wells_filled_new_count_count_count_count_count_count_count)))\n       \
    \                         (let ((well_filled_new_count_count_count_count_count_count_count_count_count\
    \ (cdr wells_filled_new_count_count_count_count_count_count_count_count)))\n \
    \                                 (let ((well_filled_new_count_count_count_count_count_count_count_count_count_count\
    \ (cdr wells_filled_new_count_count_count_count_count_count_count_count_count)))\n\
    \                                    (let ((well_filled_new_count", '  (let ((wells
    (list-map (lambda (row) (list-map (lambda (well) (list-map (lambda (bucket) (list-map
    (lambda (i) (list-map (lambda (j) (list-map (lambda (c) (list (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons (cons
    (', "  (let ((wells (list-map (lambda (row) (list-map (lambda (well) (list-map\
    \ (lambda (bucket) (list-map (lambda (i) (list (cons (cons well i) (cons bucket\
    \ i))))))) row)) wells)) grid))\n    (let ((wells_filled (list-map (lambda (row)\
    \ (list-map (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i) (list\
    \ (cons (cons well i) (cons bucket i))))))) row)) wells_filled)) wells_filled))\n\
    \      (let ((wells_filled_filled (list-map (lambda (row) (list-map (lambda (well)\
    \ (list-map (lambda (bucket) (list-map (lambda (i) (list (cons (cons well i) (cons\
    \ bucket i))))))) row)) wells_filled_filled)) wells_filled_filled))\n        (let\
    \ ((wells_filled_filled_filled (list-map (lambda (row) (list-map (lambda (well)\
    \ (list-map (lambda (bucket) (list-map (lambda (i) (list (cons (cons well i) (cons\
    \ bucket i))))))) row)) wells_filled_filled_filled)) wells_filled_filled_filled))\n\
    \          (let ((wells_filled_filled_filled_filled (list-map (lambda (row) (list-map\
    \ (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i) (list (cons\
    \ (cons well i) (cons bucket i))))))) row)) wells_filled_filled_filled_filled))\
    \ wells_filled_filled_filled_filled))\n            (let ((wells_filled_filled_filled_filled_filled\
    \ (list-map (lambda (row) (list-map (lambda (well) (list-map (lambda (bucket)\
    \ (list-map (lambda (i) (list (cons (cons well i) (cons bucket i))))))) row))\
    \ wells_filled_filled_filled_filled_filled)) wells_filled_filled_filled_filled_filled))\n\
    \              (let ((wells_filled_filled_filled_filled_filled_filled (list-map\
    \ (lambda (row) (list-map (", "  (let ((wells (list-map (lambda (x) (list x))\
    \ grid)))\n    (let ((wells_filled (list 0)))\n      (let ((wells_filled_count\
    \ (list 0)))\n        (let ((wells_filled_index (list 0)))\n          (let ((wells_filled_index_count\
    \ (list 0)))\n            (let ((wells_filled_index_count_count (list 0)))\n \
    \             (let ((wells_filled_index_count_count_count (list 0)))\n       \
    \         (let ((wells_filled_index_count_count_count_count (list 0)))\n     \
    \             (let ((wells_filled_index_count_count_count_count_count (list 0)))\n\
    \                    (let ((wells_filled_index_count_count_count_count_count_count\
    \ (list 0)))\n                      (let ((wells_filled_index_count_count_count_count_count_count_count\
    \ (list 0)))\n                        (let ((wells_filled_index_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                          (let ((wells_filled_index_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                            (let ((wells_filled_index_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                              (let ((wells_filled_index_count_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                                (let ((wells_filled_index_count_count_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                                  (let ((wells_filled_index_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                                    (let ((wells_filled_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                                      (let ((wells_filled_index_count_count_count_count_count",
  "  (let ((wells (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) grid))\n\
    \        (buckets (list-map (lambda (x) (list-map (lambda (y) (list x y)) x))\
    \ capacity)))\n    (let ((wells_filled (list-map (lambda (x) (list-map (lambda\
    \ (y) (list x y)) x)) wells)))\n      (let ((wells_filled_count (list-map (lambda\
    \ (x) (list-map (lambda (y) (list x y)) x)) wells_filled)))\n        (let ((wells_filled_count_count\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count)))\n\
    \          (let ((wells_filled_count_count_count (list-map (lambda (x) (list-map\
    \ (lambda (y) (list x y)) x)) wells_filled_count_count)))\n            (let ((wells_filled_count_count_count_count\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count_count_count)))\n\
    \              (let ((wells_filled_count_count_count_count_count (list-map (lambda\
    \ (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count_count_count_count)))\n\
    \                (let ((wells_filled_count_count_count_count_count_count (list-map\
    \ (lambda (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count_count_count_count_count)))\n\
    \                  (let ((wells_filled_count_count_count_count_count_count_count\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count_count_count_count_count_count)))\n\
    \                    (let ((wells_filled_count_count_count_count_count_count_count_count\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y", '  (let ((wells (list-map
    (lambda (row) (list-map (lambda (well) (list-map (lambda (bucket) (list-map (lambda
    (i) (list-map (lambda (j) (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append', "  (let ((wells (list-map (lambda (row)\
    \ (list-map (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i) (list-map\
    \ (lambda (j) (list (cons (cons well (cons bucket (cons i j)))))))))))) (row)))\
    \ (row))) (row)))\n    (let ((wells (list-map (lambda (row) (list-map (lambda\
    \ (well) (list-map (lambda (bucket) (list-map (lambda (i) (list-map (lambda (j)\
    \ (list (cons (cons well (cons bucket (cons i j)))))))))))) (row))) (row)))\n\
    \      (let ((wells (list-map (lambda (row) (list-map (lambda (well) (list-map\
    \ (lambda (bucket) (list-map (lambda (i) (list-map (lambda (j) (list (cons (cons\
    \ well (cons bucket (cons i j)))))))))))) (row))) (row)))\n        (let ((wells\
    \ (list-map (lambda (row) (list-map (lambda (well) (list-map (lambda (bucket)\
    \ (list-map (lambda (i) (list-map (lambda (j) (list (cons (cons well (cons bucket\
    \ (cons i j)))))))))))) (row))) (row)))\n          (let ((wells (list-map (lambda\
    \ (row) (list-map (lambda (well) (list-map (lambda (bucket) (list-map (lambda\
    \ (i) (list-map (lambda (j) (list (cons (cons well (cons bucket (cons i j))))))))))))\
    \ (row))) (row)))\n            (let ((wells (list-map (lambda (row) (list-map\
    \ (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i) (list-map (lambda\
    \ (j) (list (cons (cons well (cons bucket (cons i j)))))))))))) (row))) (row)))\n\
    \              (let ((wells (list-map (lambda (row) (list-map (lambda (well) (list-map\
    \ (lambda (bucket) (list-map (lambda (i) (list-map (lambda (j) (", '  (let ((wells
    (list-map (lambda (row) (list-map (lambda (well) (list-map (lambda (bucket) (list-map
    (lambda (i) (list-map (lambda (j) (list-map (lambda (w) (list-map (lambda (b)
    (list-map (lambda (x) (list-map (lambda (y) (list-map (lambda (z) (list-map (lambda
    (a) (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda (d) (list-map
    (lambda (e) (list-map (lambda (f) (list-map (lambda (g) (list-map (lambda (h)
    (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (k) (list-map (lambda
    (l) (list-map (lambda (m) (list-map (lambda (n) (list-map (lambda (o) (list-map
    (lambda (p) (list-map (lambda (q) (list-map (lambda (r) (list-map (lambda (s)
    (list-map (lambda (t) (list-map (lambda (u) (list-map (lambda (v) (list-map (lambda
    (w) (list-map (lambda (x) (list-map (lambda (y) (list-map (lambda (z) (list-map
    (lambda (a) (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda (d)
    (list-map (lambda (e) (list-map (lambda (f) (list-map (lambda (g) (list-map (lambda
    (h) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (k) (list-map
    (lambda (l) (list-map (lambda (m) (list-map (lambda (n) (list-map (lambda (o)
    (list-map (lambda (p) (list-map (lambda (q) (list-map (lambda (r) (list-map (lambda
    (s) (list-map (lambda (t) (', '  (let ((wells (list-map (lambda (row) (list-map
    (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i) (list-map (lambda
    (j) (list-map (lambda (c) (list-map (lambda (w) (list-map (lambda (b) (list-map
    (lambda (n) (list-map (lambda (x) (list-map (lambda (y) (list-map (lambda (z)
    (list-map (lambda (a) (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda
    (d) (list-map (lambda (e) (list-map (lambda (f) (list-map (lambda (g) (list-map
    (lambda (h) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (k)
    (list-map (lambda (l) (list-map (lambda (m) (list-map (lambda (n) (list-map (lambda
    (o) (list-map (lambda (p) (list-map (lambda (q) (list-map (lambda (r) (list-map
    (lambda (s) (list-map (lambda (t) (list-map (lambda (u) (list-map (lambda (v)
    (list-map (lambda (w) (list-map (lambda (x) (list-map (lambda (y) (list-map (lambda
    (z) (list-map (lambda (a) (list-map (lambda (b) (list-map (lambda (c) (list-map
    (lambda (d) (list-map (lambda (e) (list-map (lambda (f) (list-map (lambda (g)
    (list-map (lambda (h) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda
    (k) (list-map (lambda (l) (list-map (lambda (m) (list-map (lambda (n) (list-map
    (lambda (o) (list-map (lambda (p) (list-map (lambda (q) (list-map (lambda (r)
    (', "  (let ((wells (list-map (lambda (well) (list-map (lambda (i) (list-map (lambda\
    \ (j) (list (list (car well) (car i) (car j)) (car well) (car i) (car j))) (list\
    \ (car well) (car i) (car j))) (car well) (car i) (car j))) (car well))) (car\
    \ well)))\n    (let ((wells_filled (list 0)))\n      (let ((wells_filled_count\
    \ (list 0)))\n        (let ((wells_filled_new (list 0)))\n          (let ((wells_filled_new_count\
    \ (list 0)))\n            (let ((wells_filled_new_new (list 0)))\n           \
    \   (let ((wells_filled_new_new_count (list 0)))\n                (let ((wells_filled_new_new_new\
    \ (list 0)))\n                  (let ((wells_filled_new_new_new_count (list 0)))\n\
    \                    (let ((wells_filled_new_new_new_new (list 0)))\n        \
    \              (let ((wells_filled_new_new_new_new_count (list 0)))\n        \
    \                (let ((wells_filled_new_new_new_new_new (list 0)))\n        \
    \                  (let ((wells_filled_new_new_new_new_new_count (list 0)))\n\
    \                            (let ((wells_filled_new_new_new_new_new_new (list\
    \ 0)))\n                              (let ((wells_filled_new_new_new_new_new_new_count\
    \ (list 0)))\n                                (let ((wells_filled_new_new_new_new_new_new_new\
    \ (list 0)))\n                                  (let ((wells_filled_new_new_new_new_new_new_new_count\
    \ (list 0)))\n                                    (let ((wells_filled_new_new_new_new_new_new_new_new\
    \ (list 0)))\n                                      (let ((wells_filled_new_new_new_new_new_new_new_new_count\
    \ (list 0)))\n                                        (let ((wells_filled_new_",
  "  (let ((wells (list-map (lambda (well) (list well 0)) grid)))\n    (let ((wells_filled\
    \ (list 0)))\n      (let ((well_filled (lambda (well) (car wells_filled))))\n\
    \        (let ((well_filled_count (lambda (well) (car wells_filled))))\n     \
    \     (let ((well_filled_count_count (lambda (well) (car well_filled_count))))\n\
    \            (let ((well_filled_count_count_count (lambda (well) (car well_filled_count_count))))\n\
    \              (let ((well_filled_count_count_count_count (lambda (well) (car\
    \ well_filled_count_count_count))))\n                (let ((well_filled_count_count_count_count_count\
    \ (lambda (well) (car well_filled_count_count_count_count))))\n              \
    \    (let ((well_filled_count_count_count_count_count_count (lambda (well) (car\
    \ well_filled_count_count_count_count_count))))\n                    (let ((well_filled_count_count_count_count_count_count_count\
    \ (lambda (well) (car well_filled_count_count_count_count_count_count))))\n  \
    \                    (let ((well_filled_count_count_count_count_count_count_count_count\
    \ (lambda (well) (car well_filled_count_count_count_count_count_count_count))))\n\
    \                        (let ((well_filled_count_count_count_count_count_count_count_count_count\
    \ (lambda (well) (car well_filled_count_count_count_count_count_count_count_count))))\n\
    \                          (let ((well_filled_count_count_count_count_count_count_count_count_count_count\
    \ (lambda (well) (car well_filled_count_count_count_count_count_count_count_count_count))))\n\
    \                            (let ((well_filled_count_count_count_count_count_count_count_count_count_count_count\
    \ (lambda (well) (car well_filled_count_count_count_count_count_count_count_count_count_count))))\n\
    \                              (let ((well_", '  (let ((wells (list-map (lambda
    (row) (list-map (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i)
    (list-map (lambda (j) (list-map (lambda (c) (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-', '  (let ((wells (list-map (lambda (row) (list-map (lambda
    (well) (list-map (lambda (bucket) (list-map (lambda (i) (list-map (lambda (j)
    (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda
    (d) (list-map (lambda (e) (list-map (lambda (f) (list-map (lambda (g) (list-map
    (lambda (h) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (w)
    (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda (d) (list-map (lambda
    (e) (list-map (lambda (f) (list-map (lambda (g) (list-map (lambda (h) (list-map
    (lambda (i) (list-map (lambda (j) (list-map (lambda (w) (list-map (lambda (b)
    (list-map (lambda (c) (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda
    (f) (list-map (lambda (g) (list-map (lambda (h) (list-map (lambda (i) (list-map
    (lambda (j) (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda (c)
    (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda (f) (list-map (lambda
    (g) (list-map (lambda (h) (list-map (lambda (i) (list-map (lambda (j) (list-map
    (lambda (w) (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda (d)
    (list-map (lambda (e) (list-map (lambda (f) (list-map (lambda (g) (list-map (lambda
    (h) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (w) (', '  (let
    ((wells (list-map (lambda (row) (list-map (lambda (well) (list-map (lambda (bucket)
    (list-map (lambda (i) (list-map (lambda (j) (list (cons (cons well (cons bucket
    (cons i j)))))))))))) (row))) (list-map (lambda (row) (list (map (lambda (well)
    (map (lambda (bucket) (map (lambda (i) (map (lambda (j) (cons (cons well (cons
    bucket (cons i j)))))))) (row)))) (wells)))) (list-map (lambda (row) (list (map
    (lambda (well) (map (lambda (bucket) (map (lambda (i) (map (lambda (j) (cons (cons
    well (cons bucket (cons i j)))))))) (row)))) (wells))))))) (list-map (lambda (row)
    (list (map (lambda (well) (map (lambda (bucket) (map (lambda (i) (map (lambda
    (j) (cons (cons well (cons bucket (cons i j)))))))) (row)))) (wells))))))) (list-map
    (lambda (row) (list (map (lambda (well) (map (lambda (bucket) (map (lambda (i)
    (map (lambda (j) (cons (cons well (cons bucket (cons i j)))))))) (row)))) (wells)))))))
    (list-map (lambda (row) (list (map (lambda (well) (map (lambda (bucket) (map (lambda
    (i) (map (lambda (j) (cons (cons well (cons bucket (cons i j)))))))) (row))))
    (wells))))))) (list-map (lambda (row) (list (map (lambda (well) (map (lambda (bucket)
    (map (lambda (i) (map (lambda (j) (cons (cons well (cons bucket (cons i j))))))))
    (row)))) (wells))))))) (list-map (lambda (row) (list (map (lambda (well) (map
    (lambda (bucket) (map (lambda (i) (map (lambda (j) (cons (cons well (cons bucket
    (cons i j)))))))) (row)))) (wells))))))) (list-map (lambda (', "  (let ((wells\
    \ (list-map (lambda (x) (list x)) grid)))\n    (let ((wells_filled (list 0)))\n\
    \      (let ((wells_filled_count (list 0)))\n        (let ((wells_filled_new (list\
    \ 0)))\n          (let ((wells_filled_new_count (list 0)))\n            (let ((wells_filled_new_count_new\
    \ (list 0)))\n              (let ((wells_filled_new_count_new_new (list 0)))\n\
    \                (let ((wells_filled_new_count_new_new_new (list 0)))\n      \
    \            (let ((wells_filled_new_count_new_new_new_new (list 0)))\n      \
    \              (for-each ((i) (range 1 (length wells)))\n                    \
    \  (let ((well (wells i)))\n                        (for-each ((j) (range 1 (length\
    \ well)))\n                          (let ((well_filled (well j)))\n         \
    \                   (if (not (eq? well_filled wells_filled_new_count_new_new_new_new))\n\
    \                              (let ((well_filled_new (well j)))\n           \
    \                     (let ((well_filled_new_count (well j)))\n              \
    \                    (let ((well_filled_new_count_new (well j)))\n           \
    \                         (let ((well_filled_new_count_new_new (well j)))\n  \
    \                                    (let ((well_filled_new_count_new_new_new\
    \ (well j)))\n                                        (let ((well_filled_new_count_new_new_new_new\
    \ (well j)))\n                                          (for-each ((k) (range\
    \ 1 (length well)))\n                                            (let ((well_filled_new_count_new_new_new_new_new\
    \ (well j k)))\n                                              (if (not (eq? well_filled_new_count_new_new_new_new_new\
    \ wells_filled_new_count_new_new_new_new))\n                                 \
    \               (let ((well_filled_new_count_new_new_new_new_new_new (well j k)))\n\
    \                                                  (let ((well_filled", '  (let
    ((wells (list-map (lambda (row) (list-map (lambda (well) (list-map (lambda (bucket)
    (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (c) (list-map (lambda
    (w) (list-map (lambda (b) (list-map (lambda (n) (list-map (lambda (x) (list-map
    (lambda (y) (list-map (lambda (z) (list-map (lambda (a) (list-map (lambda (b)
    (list-map (lambda (c) (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda
    (f) (list-map (lambda (g) (list-map (lambda (h) (list-map (lambda (i) (list-map
    (lambda (j) (list-map (lambda (k) (list-map (lambda (l) (list-map (lambda (m)
    (list-map (lambda (n) (list-map (lambda (o) (list-map (lambda (p) (list-map (lambda
    (q) (list-map (lambda (r) (list-map (lambda (s) (list-map (lambda (t) (list-map
    (lambda (u) (list-map (lambda (v) (list-map (lambda (w) (list-map (lambda (x)
    (list-map (lambda (y) (list-map (lambda (z) (list-map (lambda (a) (list-map (lambda
    (b) (list-map (lambda (c) (list-map (lambda (d) (list-map (lambda (e) (list-map
    (lambda (f) (list-map (lambda (g) (list-map (lambda (h) (list-map (lambda (i)
    (list-map (lambda (j) (list-map (lambda (k) (list-map (lambda (l) (list-map (lambda
    (m) (list-map (lambda (n) (list-map (lambda (o) (list-map (lambda (p) (list-map
    (lambda (q) (list-map (lambda (r) (', '  (let ((wells (list-map (lambda (x) (list-map
    (lambda (y) (list-map (lambda (z) (list-map (lambda (w) (list-map (lambda (u)
    (list-map (lambda (v) (list-map (lambda (t) (list-map (lambda (s) (list-map (lambda
    (r) (list-map (lambda (q) (list-map (lambda (p) (list-map (lambda (o) (list-map
    (lambda (n) (list-map (lambda (m) (list-map (lambda (l) (list-map (lambda (k)
    (list-map (lambda (j) (list-map (lambda (i) (list-map (lambda (h) (list-map (lambda
    (g) (list-map (lambda (f) (list-map (lambda (e) (list-map (lambda (d) (list-map
    (lambda (c) (list-map (lambda (b) (list-map (lambda (a) (list-map (lambda (y)
    (list-map (lambda (x) (list-map (lambda (w) (list-map (lambda (u) (list-map (lambda
    (v) (list-map (lambda (t) (list-map (lambda (s) (list-map (lambda (r) (list-map
    (lambda (q) (list-map (lambda (p) (list-map (lambda (o) (list-map (lambda (n)
    (list-map (lambda (m) (list-map (lambda (l) (list-map (lambda (k) (list-map (lambda
    (j) (list-map (lambda (i) (list-map (lambda (h) (list-map (lambda (g) (list-map
    (lambda (f) (list-map (lambda (e) (list-map (lambda (d) (list-map (lambda (c)
    (list-map (lambda (b) (list-map (lambda (a) (list-map (lambda (y) (list-map (lambda
    (x) (list-map (lambda (w) (list-map (lambda (u) (list-map (lambda (v) (list',
  "  (let ((wells (list-map (lambda (x) (list x)) grid))\n        (buckets (list-map\
    \ (lambda (x) (list x)) capacity)))\n    (let ((wells_filled (list 0)))\n    \
    \  (let ((wells_filled_count (list 0)))\n        (let ((wells_filled_buckets (list\
    \ 0)))\n          (let ((wells_filled_buckets_count (list 0)))\n            (let\
    \ ((wells_filled_buckets_count_count (list 0)))\n              (let ((wells_filled_buckets_count_count_count\
    \ (list 0)))\n                (for-each ((well) (list wells))\n              \
    \    (let ((well_filled (list 0)))\n                    (let ((well_filled_count\
    \ (list 0)))\n                      (let ((well_filled_buckets (list 0)))\n  \
    \                      (let ((well_filled_buckets_count (list 0)))\n         \
    \                 (let ((well_filled_buckets_count_count (list 0)))\n        \
    \                    (for-each ((bucket) (list buckets))\n                   \
    \           (let ((bucket_filled (list 0)))\n                                (let\
    \ ((bucket_filled_count (list 0)))\n                                  (let ((bucket_filled_buckets\
    \ (list 0)))\n                                    (let ((bucket_filled_buckets_count\
    \ (list 0)))\n                                      (let ((bucket_filled_buckets_count_count\
    \ (list 0)))\n                                        (for-each ((well) (list\
    \ wells))\n                                          (let ((well_filled_buckets_count_count_count\
    \ (list 0)))\n                                            (for-each ((well_filled_buckets)\
    \ (list wells_filled))\n                                              (let ((well_filled_buckets_count_count_count_count\
    \ (list 0)))\n                                                (for-each ((well_filled_buckets_count)\
    \ (list wells_filled))\n                                                  (let\
    \ ((well_filled_buckets_count_count_count_count_count (list 0)))\n           \
    \                                         (for-each ((well_filled_buckets_count_count)\
    \ (list wells_filled))\n                                  ", '  (let ((wells (list-map
    (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i) (list-map (lambda
    (j) (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda (c) (list-map
    (lambda (d) (list-map (lambda (e) (list-map (lambda (f) (list-map (lambda (g)
    (list-map (lambda (h) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda
    (k) (list-map (lambda (l) (list-map (lambda (m) (list-map (lambda (n) (list-map
    (lambda (o) (list-map (lambda (p) (list-map (lambda (q) (list-map (lambda (r)
    (list-map (lambda (s) (list-map (lambda (t) (list-map (lambda (u) (list-map (lambda
    (v) (list-map (lambda (w) (list-map (lambda (x) (list-map (lambda (y) (list-map
    (lambda (z) (list-map (lambda (a) (list-map (lambda (b) (list-map (lambda (c)
    (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda (f) (list-map (lambda
    (g) (list-map (lambda (h) (list-map (lambda (i) (list-map (lambda (j) (list-map
    (lambda (k) (list-map (lambda (l) (list-map (lambda (m) (list-map (lambda (n)
    (list-map (lambda (o) (list-map (lambda (p) (list-map (lambda (q) (list-map (lambda
    (r) (list-map (lambda (s) (list-map (lambda (t) (list-map (lambda (u) (list-map
    (lambda (v) (list-map (lambda (w) (list-map (lambda (x) (list-map (lambda (y)
    (list-map (lambda (z) (', "  (let ((wells (list-map (lambda (well) (list well))\
    \ grid))\n        (buckets (list-map (lambda (bucket) (list bucket)) wells)))\n\
    \    (let ((wells_filled (list 0))\n          (buckets_filled (list 0)))\n   \
    \   (while (not (empty? wells))\n        (let ((well (car wells)))\n         \
    \ (let ((well_filled (car wells_filled)))\n            (if (car well)\n      \
    \        (let ((bucket (car buckets)))\n                (if (car bucket)\n   \
    \               (let ((bucket_filled (car buckets_filled)))\n                \
    \    (if (car bucket_filled)\n                      (set! wells_filled (cdr wells_filled))\n\
    \                      (set! buckets_filled (cdr buckets_filled))\n          \
    \            (set! buckets_filled (cons bucket_filled (cons well_filled (cons\
    \ well))))))))))))))))\n    (+ (car buckets_filled) (car wells_filled)))))\n",
  "  (let ((wells (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) grid))\n\
    \        (buckets (list-map (lambda (x) (list-map (lambda (y) (list x y)) x))\
    \ capacity)))\n    (let ((wells_filled (list-map (lambda (x) (list-map (lambda\
    \ (y) (list x y)) x)) wells))\n          (buckets_filled (list-map (lambda (x)\
    \ (list-map (lambda (y) (list x y)) x)) buckets)))\n      (let ((wells_filled_count\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) wells_filled)))\n\
    \        (let ((wells_filled_count_count (list-map (lambda (x) (list-map (lambda\
    \ (y) (list x y)) x)) wells_filled_count)))\n          (let ((wells_filled_count_count_count\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count_count)))\n\
    \            (let ((wells_filled_count_count_count_count (list-map (lambda (x)\
    \ (list-map (lambda (y) (list x y)) x)) wells_filled_count_count_count)))\n  \
    \            (let ((wells_filled_count_count_count_count_count (list-map (lambda\
    \ (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count_count_count_count)))\n\
    \                (let ((wells_filled_count_count_count_count_count_count (list-map\
    \ (lambda (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count_count_count_count_count)))\n\
    \                  (let ((wells_filled_count_count_count_count_count_count_count\
    \ (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) wells_filled_count_count_count_count_count_count)))\n\
    \                    (let ((wells_filled_count_count", "  (let ((wells (list-map\
    \ (lambda (well) (list well 0)) grid))\n        (buckets (list-map (lambda (bucket)\
    \ (list bucket 0)) wells)))\n    (let ((wells_filled (list 0))\n          (buckets_filled\
    \ (list 0)))\n      (while (not (equal? wells_filled wells))\n        (let ((well\
    \ (car wells)))\n          (let ((bucket (car buckets)))\n            (if (equal?\
    \ (car well) (car bucket))\n              (set! buckets_filled (cons (car buckets_filled)\
    \ (car bucket)))\n              (set! buckets_filled (cons (car buckets_filled)\
    \ (car well)))))\n            (set! wells_filled (cons (car wells_filled) (car\
    \ well))))))\n    (+ (car buckets_filled) (car wells_filled)))\n))\n", "  (let\
    \ ((wells (list-map (lambda (x) (list x)) grid)))\n    (let ((wells_filled (list\
    \ 0)))\n      (let ((wells_filled_count (list 0)))\n        (let ((wells_filled_index\
    \ (list 0)))\n          (let ((wells_filled_index_count (list 0)))\n         \
    \   (let ((wells_filled_index_count_count (list 0)))\n              (let ((wells_filled_index_count_count_count\
    \ (list 0)))\n                (let ((wells_filled_index_count_count_count_count\
    \ (list 0)))\n                  (let ((wells_filled_index_count_count_count_count_count\
    \ (list 0)))\n                    (let ((wells_filled_index_count_count_count_count_count_count\
    \ (list 0)))\n                      (let ((wells_filled_index_count_count_count_count_count_count_count\
    \ (list 0)))\n                        (let ((wells_filled_index_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                          (let ((wells_filled_index_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                            (let ((wells_filled_index_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                              (let ((wells_filled_index_count_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                                (let ((wells_filled_index_count_count_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                                  (let ((wells_filled_index_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                                    (let ((wells_filled_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ (list 0)))\n                                      (let ((wells_filled_index_count_count_count_count_count",
  "  (let ((wells (list-map (lambda (x) (list-map (lambda (y) (list x y)) x)) grid))\n\
    \        (buckets (list-map (lambda (x) (list-map (lambda (y) (list x y)) x))\
    \ capacity)))\n    (let ((well_count (count-wells wells)))\n      (let ((well_filled\
    \ (well-filled wells)))\n        (let ((bucket_count (count-buckets buckets)))\n\
    \          (let ((well_filled_count (count-well-filled well_filled)))\n      \
    \      (let ((well_filled_count_max (max well_filled_count)))\n              (let\
    \ ((well_filled_count_min (min well_filled_count)))\n                (let ((well_filled_count_diff\
    \ (well_filled_count_max - well_filled_count_min)))\n                  (let ((well_filled_count_diff_max\
    \ (max well_filled_count_diff)))\n                    (let ((well_filled_count_diff_min\
    \ (min well_filled_count_diff)))\n                      (let ((well_filled_count_diff_diff\
    \ (well_filled_count_diff_max - well_filled_count_diff_min)))\n              \
    \          (let ((well_filled_count_diff_diff_max (max well_filled_count_diff_diff)))\n\
    \                          (let ((well_filled_count_diff_diff_min (min well_filled_count_diff_diff)))\n\
    \                            (let ((well_filled_count_diff_diff_diff (well_filled_count_diff_diff_max\
    \ - well_filled_count_diff_diff_min)))\n                              (let ((well_filled_count_diff_diff_diff_diff\
    \ (well_filled_count_diff_diff_diff)))\n                                (let ((well_filled_count_diff_diff_diff_diff_diff\
    \ (well_filled_count_diff_diff_diff_diff)))\n                                \
    \  (let ((well_filled_count_diff_diff_diff_diff_diff_diff (well_filled_count_diff_diff_diff_diff_diff)))\n\
    \                                    (let ((well_filled_count_diff_diff_diff_diff_diff_diff_diff",
  '  (let ((wells (list-map (lambda (row) (list-map (lambda (well) (list-map (lambda
    (bucket) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (c) (list-map
    (lambda (w) (list-map (lambda (b) (list-map (lambda (n) (list-map (lambda (x)
    (list-map (lambda (y) (list-map (lambda (z) (list-map (lambda (a) (list-map (lambda
    (b) (list-map (lambda (c) (list-map (lambda (d) (list-map (lambda (e) (list-map
    (lambda (f) (list-map (lambda (g) (list-map (lambda (h) (list-map (lambda (i)
    (list-map (lambda (j) (list-map (lambda (k) (list-map (lambda (l) (list-map (lambda
    (m) (list-map (lambda (n) (list-map (lambda (o) (list-map (lambda (p) (list-map
    (lambda (q) (list-map (lambda (r) (list-map (lambda (s) (list-map (lambda (t)
    (list-map (lambda (u) (list-map (lambda (v) (list-map (lambda (w) (list-map (lambda
    (x) (list-map (lambda (y) (list-map (lambda (z) (list-map (lambda (a) (list-map
    (lambda (b) (list-map (lambda (c) (list-map (lambda (d) (list-map (lambda (e)
    (list-map (lambda (f) (list-map (lambda (g) (list-map (lambda (h) (list-map (lambda
    (i) (list-map (lambda (j) (list-map (lambda (k) (list-map (lambda (l) (list-map
    (lambda (m) (list-map (lambda (n) (list-map (lambda (o) (list-map (lambda (p)
    (list-map (lambda (q) (list-map (lambda (r) (', '  (let ((wells (list-map (lambda
    (row) (list-map (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i)
    (list-map (lambda (j) (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda
    (c) (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda (f) (list-map
    (lambda (g) (list-map (lambda (h) (list-map (lambda (i) (list-map (lambda (j)
    (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda
    (d) (list-map (lambda (e) (list-map (lambda (f) (list-map (lambda (g) (list-map
    (lambda (h) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (w)
    (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda (d) (list-map (lambda
    (e) (list-map (lambda (f) (list-map (lambda (g) (list-map (lambda (h) (list-map
    (lambda (i) (list-map (lambda (j) (list-map (lambda (w) (list-map (lambda (b)
    (list-map (lambda (c) (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda
    (f) (list-map (lambda (g) (list-map (lambda (h) (list-map (lambda (i) (list-map
    (lambda (j) (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda (c)
    (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda (f) (list-map (lambda
    (g) (list-map (lambda (h) (list-map (lambda (i) (list-map (lambda (j) (list-map
    (lambda (w) (', '  (let ((wells (list-map (lambda (row) (list-map (lambda (well)
    (list-map (lambda (bucket) (list-map (lambda (i) (list-map (lambda (j) (list-map
    (lambda (w) (list-map (lambda (b) (list-map (lambda (n) (list-map (lambda (m)
    (list-map (lambda (c) (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda
    (f) (list-map (lambda (g) (list-map (lambda (h) (list-map (lambda (i) (list-map
    (lambda (j) (list-map (lambda (k) (list-map (lambda (l) (list-map (lambda (m)
    (list-map (lambda (n) (list-map (lambda (o) (list-map (lambda (p) (list-map (lambda
    (q) (list-map (lambda (r) (list-map (lambda (s) (list-map (lambda (t) (list-map
    (lambda (u) (list-map (lambda (v) (list-map (lambda (w) (list-map (lambda (x)
    (list-map (lambda (y) (list-map (lambda (z) (list-map (lambda (a) (list-map (lambda
    (b) (list-map (lambda (c) (list-map (lambda (d) (list-map (lambda (e) (list-map
    (lambda (f) (list-map (lambda (g) (list-map (lambda (h) (list-map (lambda (i)
    (list-map (lambda (j) (list-map (lambda (k) (list-map (lambda (l) (list-map (lambda
    (m) (list-map (lambda (n) (list-map (lambda (o) (list-map (lambda (p) (list-map
    (lambda (q) (list-map (lambda (r) (list-map (lambda (s) (list-map (lambda (t)
    (list-map (lambda (u) (list-map (lambda (v) (list-map (lambda (w) (', "  (let\
    \ ((wells (list-map (lambda (row) (list-map (lambda (well) (list-map (lambda (bucket)\
    \ (list-map (lambda (i) (list (cons (cons well i) (cons bucket i)))) well))))\
    \ row))) grid))\n    (let ((wells_filled (list-map (lambda (row) (list-map (lambda\
    \ (well) (list-map (lambda (bucket) (list-map (lambda (i) (list (cons (cons well\
    \ i) (cons bucket i)))) well)))) row))) (lambda (wells_filled) (list-map (lambda\
    \ (well) (list-map (lambda (bucket) (list-map (lambda (i) (list (cons (cons well\
    \ i) (cons bucket i)))) well)))) wells_filled)))\n      (let ((wells_filled_count\
    \ (list-map (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i) (list\
    \ (cons (cons well i) (cons bucket i)))) well)))) wells_filled)))\n        (let\
    \ ((wells_filled_count_count (list-map (lambda (well) (list-map (lambda (bucket)\
    \ (list-map (lambda (i) (list (cons (cons well i) (cons bucket i)))) well))))\
    \ wells_filled_count)))\n          (let ((wells_filled_count_count_count (list-map\
    \ (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i) (list (cons\
    \ (cons well i) (cons bucket i)))) well)))) wells_filled_count_count)))\n    \
    \        (let ((wells_filled_count_count_count_count (list-map (lambda (well)\
    \ (list-map (lambda (bucket) (list-map (lambda (i) (list (cons (cons well i) (cons\
    \ bucket i)))) well)))) wells_filled_count_count_count)))\n              (let\
    \ ((wells_filled_count_count_count_count_count (list-map (lambda (well) (list-map\
    \ (lambda (bucket) (list-map (lambda (i) (list (cons (cons well i) (cons bucket\
    \ i)))) well)))) wells_filled_count_", '  (let ((wells (list-map (lambda (row)
    (list-map (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i) (list-map
    (lambda (j) (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append', '  (let ((wells (list-map (lambda (row) (list-map (lambda (well)
    (list-map (lambda (bucket) (list-map (lambda (i) (list (cons (cons (cons (cons
    0 (cons 0) (cons 0)) (cons 0 (cons 0)) (cons 0 (cons 0)) (cons 0 (cons 0)) (cons
    0 (cons 0)) (cons 0 (cons 0)) (cons 0 (cons 0)) (cons 0 (cons 0)) (cons 0 (cons
    0)) (cons 0 (cons 0)) (cons 0 (cons 0)) (cons 0 (cons 0)) (cons 0 (cons 0)) (cons
    0 (cons 0)) (cons 0 (cons 0)) (cons 0 (cons 0)) (cons 0 (cons 0)) (cons 0 (cons
    0)) (cons 0 (cons 0)) (cons 0 (cons 0)) (cons 0 (cons 0)) (cons 0 (cons 0)) (cons
    0 (cons 0)) (cons 0 (cons 0)) (cons 0 (cons 0)) (cons 0 (cons 0)) (cons 0 (cons
    0)) (cons 0 (cons 0)) (cons 0 (cons 0)) (cons 0 (cons 0)) (cons 0 (cons 0)) (cons
    0 (cons 0)) (cons 0 (cons 0)) (cons 0 (cons 0)) (cons 0 (cons 0)) (cons 0 (cons
    0)) (cons 0 (cons 0)) (cons 0 (cons 0)) (cons 0 (cons 0)) (cons 0 (cons 0)) (cons
    0 (cons 0)) (cons 0 (cons 0)) (cons 0 (cons 0)) (cons 0 (cons 0)) (cons 0 (cons
    0)) (cons 0 (cons 0)) (cons 0 (cons 0)) (cons 0 (cons 0)) (cons 0 (cons 0)) (cons
    0 (cons 0)) (cons 0 (cons 0)) (cons 0 (cons 0)) (cons 0 (cons 0)) (cons 0 (cons
    0)) (cons 0 (cons 0)) (cons 0 (cons 0)) (cons 0 (cons 0)) (cons 0 (cons 0)) (cons
    0 (cons 0)) (cons 0 (cons 0)) (cons 0 (cons 0)) (cons 0 (cons 0)) (cons 0 (cons
    0)) (cons 0 (cons 0)) (cons 0 (cons 0)) (cons', '  (let ((wells (list-map (lambda
    (row) (list-map (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i)
    (list-map (lambda (j) (list-map (lambda (c) (list-map (lambda (w) (list-map (lambda
    (b) (list-map (lambda (x) (list-map (lambda (y) (list-map (lambda (z) (list-map
    (lambda (a) (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda (d)
    (list-map (lambda (e) (list-map (lambda (f) (list-map (lambda (g) (list-map (lambda
    (h) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (k) (list-map
    (lambda (l) (list-map (lambda (m) (list-map (lambda (n) (list-map (lambda (o)
    (list-map (lambda (p) (list-map (lambda (q) (list-map (lambda (r) (list-map (lambda
    (s) (list-map (lambda (t) (list-map (lambda (u) (list-map (lambda (v) (list-map
    (lambda (w) (list-map (lambda (x) (list-map (lambda (y) (list-map (lambda (z)
    (list-map (lambda (a) (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda
    (d) (list-map (lambda (e) (list-map (lambda (f) (list-map (lambda (g) (list-map
    (lambda (h) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (k)
    (list-map (lambda (l) (list-map (lambda (m) (list-map (lambda (n) (list-map (lambda
    (o) (list-map (lambda (p) (list-map (lambda (q) (list-map (lambda (r) (list-map
    (lambda (s) (', '  (let ((wells (list-map (lambda (row) (list-map (lambda (well)
    (list-map (lambda (bucket) (list-map (lambda (i) (list-map (lambda (j) (list-map
    (lambda (c) (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda (n)
    (list-map (lambda (s) (list-map (lambda (x) (list-map (lambda (y) (list-map (lambda
    (z) (list-map (lambda (a) (list-map (lambda (b) (list-map (lambda (c) (list-map
    (lambda (d) (list-map (lambda (e) (list-map (lambda (f) (list-map (lambda (g)
    (list-map (lambda (h) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda
    (k) (list-map (lambda (l) (list-map (lambda (m) (list-map (lambda (n) (list-map
    (lambda (o) (list-map (lambda (p) (list-map (lambda (q) (list-map (lambda (r)
    (list-map (lambda (s) (list-map (lambda (t) (list-map (lambda (u) (list-map (lambda
    (v) (list-map (lambda (w) (list-map (lambda (x) (list-map (lambda (y) (list-map
    (lambda (z) (list-map (lambda (a) (list-map (lambda (b) (list-map (lambda (c)
    (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda (f) (list-map (lambda
    (g) (list-map (lambda (h) (list-map (lambda (i) (list-map (lambda (j) (list-map
    (lambda (k) (list-map (lambda (l) (list-map (lambda (m) (list-map (lambda (n)
    (list-map (lambda (o) (list-map (lambda (p) (list-map (lambda (q) (', '  (let
    ((wells (list-map (lambda (row) (list-map (lambda (well) (list-map (lambda (bucket)
    (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (w) (list-map (lambda
    (b) (list-map (lambda (c) (list-map (lambda (d) (list-map (lambda (e) (list-map
    (lambda (f) (list-map (lambda (g) (list-map (lambda (h) (list-map (lambda (i)
    (list-map (lambda (j) (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda
    (c) (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda (f) (list-map
    (lambda (g) (list-map (lambda (h) (list-map (lambda (i) (list-map (lambda (j)
    (list-map (lambda (w) (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda
    (d) (list-map (lambda (e) (list-map (lambda (f) (list-map (lambda (g) (list-map
    (lambda (h) (list-map (lambda (i) (list-map (lambda (j) (list-map (lambda (w)
    (list-map (lambda (b) (list-map (lambda (c) (list-map (lambda (d) (list-map (lambda
    (e) (list-map (lambda (f) (list-map (lambda (g) (list-map (lambda (h) (list-map
    (lambda (i) (list-map (lambda (j) (list-map (lambda (w) (list-map (lambda (b)
    (list-map (lambda (c) (list-map (lambda (d) (list-map (lambda (e) (list-map (lambda
    (f) (list-map (lambda (g) (list-map (lambda (h) (list-map (lambda (i) (list-map
    (lambda (j) (list-map (lambda (w) (', '  (let ((wells (list-map (lambda (row)
    (list-map (lambda (well) (list-map (lambda (bucket) (list-map (lambda (i) (list-map
    (lambda (j) (list-map (lambda (c) (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-append (list-append (list-append (list-append (list-append (list-append
    (list-', '  (let ((wells (list-map (lambda (x) (list-map (lambda (y) (list-map
    (lambda (z) (list-map (lambda (w) (list-map (lambda (u) (list-map (lambda (v)
    (list-map (lambda (t) (list-map (lambda (s) (list-map (lambda (r) (list-map (lambda
    (q) (list-map (lambda (p) (list-map (lambda (o) (list-map (lambda (n) (list-map
    (lambda (m) (list-map (lambda (l) (list-map (lambda (k) (list-map (lambda (j)
    (list-map (lambda (i) (list-map (lambda (h) (list-map (lambda (g) (list-map (lambda
    (f) (list-map (lambda (e) (list-map (lambda (d) (list-map (lambda (c) (list-map
    (lambda (b) (list-map (lambda (a) (list-map (lambda (y) (list-map (lambda (x)
    (list-map (lambda (w) (list-map (lambda (u) (list-map (lambda (v) (list-map (lambda
    (t) (list-map (lambda (s) (list-map (lambda (r) (list-map (lambda (q) (list-map
    (lambda (p) (list-map (lambda (o) (list-map (lambda (n) (list-map (lambda (m)
    (list-map (lambda (l) (list-map (lambda (k) (list-map (lambda (j) (list-map (lambda
    (i) (list-map (lambda (h) (list-map (lambda (g) (list-map (lambda (f) (list-map
    (lambda (e) (list-map (lambda (d) (list-map (lambda (c) (list-map (lambda (b)
    (list-map (lambda (a) (list-map (lambda (y) (list-map (lambda (x) (list-map (lambda
    (w) (list-map (lambda (u) (list-map (lambda (v) (list', "  (let ((wells (list-map\
    \ (lambda (well) (list well)) grid))\n        (buckets (list-map (lambda (bucket)\
    \ (list bucket)) wells)))\n    (let ((wells_filled (list 0))\n          (buckets_filled\
    \ (list 0)))\n      (while (not (empty? wells))\n        (let ((well (car wells)))\n\
    \          (let ((well_filled (car wells_filled)))\n            (if (not (empty?\
    \ buckets))\n              (let ((bucket (car buckets)))\n                (if\
    \ (not (empty? well))\n                  (let ((well_filled (car wells_filled)))\n\
    \                    (if (not (empty? bucket))\n                      (let ((bucket_filled\
    \ (car buckets_filled)))\n                        (if (not (empty? well_filled))\n\
    \                          (let ((well_filled_filled (car wells_filled_filled)))\n\
    \                            (if (not (empty? bucket_filled))\n              \
    \                (let ((bucket_filled_filled (car buckets_filled_filled)))\n \
    \                               (if (not (empty? well_filled_filled))\n      \
    \                            (let ((well_filled_filled_filled (car wells_filled_filled_filled)))\n\
    \                                    (if (not (empty? bucket_filled_filled))\n\
    \                                      (let ((bucket_filled_filled_filled (car\
    \ buckets_filled_filled_filled)))\n                                        (if\
    \ (not (empty? well_filled_filled_filled))\n                                 \
    \         (let ((well_filled_filled_filled_filled (car wells_filled_filled_filled_filled)))\n\
    \                                            (if (not (empty? bucket_filled_filled_filled_filled))\n\
    \                                              (let ((bucket_filled_filled_filled_filled_filled\
    \ (car buckets_filled_filled_filled_filled_filled)))\n                       \
    \                         (if (not (empty? well_filled_filled_filled_filled_filled_filled))\n\
    \                                                  (let ((well_filled_filled_filled_filled_filled_filled_filled\
    \ (car wells_filled_filled_filled_filled_filled_filled_filled)))\n           \
    \                                         (if (not (empty? bucket_filled_filled_filled_filled",
  "  (let ((wells (list-map (lambda (well) (list well)) grid))\n        (buckets (list-map\
    \ (lambda (bucket) (list bucket)) wells)))\n    (let ((wells_filled (list 0)))\n\
    \      (let ((wells_filled_count (list 0)))\n        (let ((wells_filled_buckets\
    \ (list 0)))\n          (let ((wells_filled_buckets_count (list 0)))\n       \
    \     (let ((wells_filled_buckets_filled (list 0)))\n              (let ((wells_filled_buckets_filled_count\
    \ (list 0)))\n                (let ((wells_filled_buckets_filled_wells (list 0)))\n\
    \                  (let ((wells_filled_buckets_filled_wells_count (list 0)))\n\
    \                    (let ((wells_filled_buckets_filled_wells_filled (list 0)))\n\
    \                      (let ((wells_filled_buckets_filled_wells_filled_count (list\
    \ 0)))\n                        (let ((wells_filled_buckets_filled_wells_filled_wells\
    \ (list 0)))\n                          (let ((wells_filled_buckets_filled_wells_filled_wells_count\
    \ (list 0)))\n                            (let ((wells_filled_buckets_filled_wells_filled_wells_filled\
    \ (list 0)))\n                              (let ((wells_filled_buckets_filled_wells_filled_wells_filled_count\
    \ (list 0)))\n                                (let ((wells_filled_buckets_filled_wells_filled_wells_filled_wells\
    \ (list 0)))\n                                  (let ((wells_filled_buckets_filled_wells_filled_wells_filled_wells_count\
    \ (list 0)))\n                                    (let ((wells_filled_buckets_filled_wells_filled_wells_filled_wells_filled\
    \ (list 0)))\n                                      (let ((wells_filled_buckets_filled_wells_filled_wells_filled_wells_filled_count\
    \ (list 0)))\n                                        (let ((wells_filled_buckets_filled_wells_filled_wells_filled_"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
