name: HumanEval_120_maximum
language: rkt
prompt: "#lang racket\n\n;; Given a list arr of integers and a positive integer k,\
  \ return a sorted list \n;; of length k with the maximum k numbers in arr.\n;; Example\
  \ 1:\n;; >>> (maximum (list -3 -4 5) 3)\n;; (list -4 -3 5)\n;; Example 2:\n;; >>>\
  \ (maximum (list 4 -4 4) 2)\n;; (list 4 4)\n;; Example 3:\n;; >>> (maximum (list\
  \ -3 2 1 2 -1 -2 1) 1)\n;; (list 2)\n;; Note:\n;; 1. The length of the list will\
  \ be in the range of [1, 1000].\n;; 2. The elements in the list will be in the range\
  \ of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n(define (maximum arr k)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximum))\n\
  \    (check-equal? (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal?\
  \ (candidate (list 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3\
  \ 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0\
  \ 1 2 -3) 3) (list 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2\
  \ -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0)\
  \ 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10)\
  \ 2) (list 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n  \
  \  (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate\
  \ (list -10 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23\
  \ 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
completions: ["  (let ((result (make-vector k 0)))\n    (for-each (lambda (x) (vector-set!\
    \ result x)) arr)\n    (sort result)\n    (reverse result)\n    (first result)))\n",
  "  (let ((result (make-vector k 0)))\n    (for-each (lambda (x) (vector-set! result\
    \ x)) arr)\n    (sort result)\n    (reverse result)\n    (first result)))\n",
  "  (let ((n (length arr)))\n    (if (<= k n)\n      (list (car arr) (maximum (cdr\
    \ arr) k))\n      (maximum (cdr arr) k))))\n", "  (let ((max-index (car (cdr arr))))\n\
    \    (if (eq? max-index k)\n      (car (cdr (cdr arr)))\n      (maximum (cdr arr)\
    \ (cdr max-index)))))\n", "  (let ((result (make-array k)))\n    (let ((i 0))\n\
    \      (while (< i k)\n        (set! result (vector-set! result i (vector-ref\
    \ arr i)))\n        (set! i (+ i 1)))\n      result)\n    result)\n)\n", "  (let\
    \ ((n (length arr)))\n    (if (<= k n)\n      (list (car arr) (maximum (cdr arr)\
    \ k))\n      (maximum (cdr arr) k)))\n)\n", "  (let ((n (length arr)))\n    (if\
    \ (<= k n)\n      (list (car arr) (maximum (cdr arr) k))\n      (maximum (cdr\
    \ arr) k)))\n)\n", "  (let ((max-k (lambda (a b) (if (> a b) a b))))\n    (let\
    \ ((max-arr (lambda (a b) (max-k (max a b)))))\n      (let ((max-arr-k (lambda\
    \ (a b) (max-k (max-arr a b))))\n            (max-arr-k arr k)))))))\n", "  (let\
    \ ((result (make-vector k 0)))\n    (for-each (lambda (x) (vector-set! result\
    \ x)) arr)\n    (sort result)\n    (reverse result)\n    (first result)))\n",
  "  (let ((n (length arr)))\n    (if (<= k n)\n      (list (car arr) (maximum (cdr\
    \ arr) k))\n      (let ((max (car arr)))\n        (if (<= k 1)\n          (list\
    \ max)\n          (let ((max (car arr)))\n            (if (<= k 2)\n         \
    \     (list max max)\n              (let ((max (car arr)))\n                (if\
    \ (<= k 3)\n                  (list max max max)\n                  (let ((max\
    \ (car arr)))\n                    (if (<= k 4)\n                      (list max\
    \ max max max)\n                      (let ((max (car arr)))\n               \
    \         (if (<= k 5)\n                          (list max max max max max)\n\
    \                          (let ((max (car arr)))\n                          \
    \  (if (<= k 6)\n                              (list max max max max max max)\n\
    \                              (let ((max (car arr)))\n                      \
    \          (if (<= k 7)\n                                  (list max max max max\
    \ max max max)\n                                  (let ((max (car arr)))\n   \
    \                                 (if (<= k 8)\n                             \
    \         (list max max max max max max max max)\n                           \
    \           (let ((max (car arr)))\n                                        (if\
    \ (<= k 9)\n                                          (list max max max max max\
    \ max max max max)\n                                          (let ((max (car\
    \ arr)))\n                                            (if (<= k 10)\n        \
    \                                      (list max max max max max max max max max\
    \ max)\n                                              (let ((max (car arr)))\n\
    \                                                (if (<= k 11)\n             \
    \                                     (list max max max max max max max max max\
    \ max max)\n                                                  (let ((max (car\
    \ arr)))\n                                                    (if (<= k 12)\n\
    \                                                      (list max max max max max\
    \ max max max max max max max)\n                                             \
    \         (let ((max (car arr)))\n                                           \
    \             (if (<= k 13)\n                                                \
    \          (list max max max max max max max max max max max max)\n          \
    \                        ", "  (let ((n (length arr)))\n    (if (<= k n)\n   \
    \   (list (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr)\
    \ (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr)\
    \ (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr)\
    \ (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr)\
    \ (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr)\
    \ (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr)\
    \ (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr)\
    \ (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr)\
    \ (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr)\
    \ (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr)\
    \ (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr)\
    \ (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr)\
    \ (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr)\
    \ (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr)\
    \ (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr)\
    \ (car arr) (car arr) (car arr) (car", "  (let ((result (make-vector k 0)))\n\
    \    (for-each (lambda (i) (vector-set! result i (vector-ref arr i)))\n      (range\
    \ 1 k)))\n  result)\n", "  (let ((n (length arr)))\n    (if (<= k n)\n      (list\
    \ (car arr) (maximum (cdr arr) k))\n      (maximum (cdr arr) k)\n    )\n  )\n\
    )\n", "  (let ((result (make-vector k 0)))\n    (for-each (lambda (x) (vector-set!\
    \ result x)) arr)\n    (sort result)\n    (reverse result)\n    (first result)))\n",
  "  (let ((n (length arr)))\n    (if (<= k n)\n      (list (car arr) (maximum (cdr\
    \ arr) k))\n      (maximum (cdr arr) k)\n    )\n  )\n)\n", "  (let ((n (length\
    \ arr)))\n    (if (<= k n)\n      (list (car arr) (maximum (cdr arr) k))\n   \
    \   (maximum (cdr arr) k)\n    )\n  )\n)\n", "  (let ((max-list (make-list k 0)))\n\
    \    (for-each (lambda (elem)\n                (if (zero? k)\n               \
    \     (append max-list elem)\n                    (else\n                    \
    \  (append max-list (append elem max-list))))\n                (list elem))\n\
    \             arr)))\n", "  (let ((result (make-vector k 0)))\n    (for-each (lambda\
    \ (x) (vector-set! result x)) arr)\n    (sort result)\n    (reverse result)\n\
    \    (first result)))\n", "  (let ((result (make-vector k 0)))\n    (for-each\
    \ (lambda (x) (vector-set! result x)) arr)\n    (sort result)\n    (reverse result)\n\
    \    (first result)))\n", "  (let ((result (make-vector k 0)))\n    (for-each\
    \ (lambda (i) (vector-set! result i (vector-ref arr i)))\n      (range 1 k)))\n\
    \  result)\n", "  (let ((max-arr (list)))\n    (for-each (lambda (x)\n       \
    \         (if (> x arr)\n                    (append max-arr x)\n            \
    \        (append max-arr (- x arr))))\n      k)))\n", "  (let ((max-list (list)))\n\
    \    (for-each (lambda (x)\n                (if (> x arr[0])\n               \
    \   (set! max-list (append max-list (list x)))\n                  (set! max-list\
    \ (append max-list (list (- x arr[0]))))))\n                k)\n      max-list))\n",
  "  (let ((max-index (- k 1)))\n    (if (>= max-index 0)\n      (list (- arr max-index))\n\
    \      (list (- arr max-index) (- arr max-index)))))\n", "  (let ((result (make-vector\
    \ k 0)))\n    (for-each (lambda (x) (vector-set! result x)) arr)\n    (sort result)\n\
    \    (reverse result)\n    (first result)))\n", "  (let ((result (make-vector\
    \ k 0)))\n    (for-each (lambda (x) (vector-set! result x)) arr)\n    (sort result)\n\
    \    (reverse result)\n    (first result)))\n", "  (let ((max-arr (list)))\n \
    \   (for-each (lambda (x)\n                (if (>= x arr)\n                  \
    \  (append max-arr (list x))\n                    (append max-arr (list))))\n\
    \      (list (- k arr))))\n)\n", "  (let ((result (make-vector k 0)))\n    (for-each\
    \ (lambda (i) (vector-set! result i (vector-ref arr i)))\n      (range 1 (vector-length\
    \ arr))))\n  result)\n", "  (let ((result (make-vector k 0)))\n    (for-each (lambda\
    \ (i)\n                (let ((max (vector-ref result i)))\n                  (vector-set!\
    \ result i\n                   (if (vector-ref arr i)\n                      \
    \ (if (eq max 0)\n                           (vector-set! result i (vector-ref\
    \ arr i))\n                           (vector-set! result i (vector-ref arr i)\
    \ + 1))\n                       (vector-set! result i max))))\n              \
    \  (range k))\n              (range k))))\n", "  (let ((max-arr (list)))\n   \
    \ (for-each (lambda (x)\n                (if (> x arr[0])\n                  (append\
    \ max-arr (list x))\n                  (append max-arr (list (- x arr[0]))))\n\
    \                (list (- x arr[0])))\n              (range 1 k)))\n  (car max-arr))\n",
  "  (cond\n    [(< k 0) (error \"length of arr must be positive\")]\n    [(<= k len\
    \ arr) (error \"length of arr must be less than k\")]\n    [(<= k k) (error \"\
    length of arr must be positive\")]\n    [(<= k len arr) (error \"length of arr\
    \ must be less than k\")]\n    [(<= k len arr) (error \"length of arr must be\
    \ less than k\")]\n    [(<= k len arr) (error \"length of arr must be less than\
    \ k\")]\n    [(<= k len arr) (error \"length of arr must be less than k\")]\n\
    \    [(<= k len arr) (error \"length of arr must be less than k\")]\n    [(<=\
    \ k len arr) (error \"length of arr must be less than k\")]\n    [(<= k len arr)\
    \ (error \"length of arr must be less than k\")]\n    [(<= k len arr) (error \"\
    length of arr must be less than k\")]\n    [(<= k len arr) (error \"length of\
    \ arr must be less than k\")]\n    [(<= k len arr) (error \"length of arr must\
    \ be less than k\")]\n    [(<= k len arr) (error \"length of arr must be less\
    \ than k\")]\n    [(<= k len arr) (error \"length of arr must be less than k\"\
    )]\n    [(<= k len arr) (error \"length of arr must be less than k\")]\n    [(<=\
    \ k len arr) (error \"length of arr must be less than k\")]\n    [(<= k len arr)\
    \ (error \"length of arr must be less than k\")]\n    [(<= k len arr) (error \"\
    length of arr must be less than k\")]\n    [(<= k len arr) (error \"length of\
    \ arr must be less than k\")]\n    [(<= k len arr) (error \"length of arr must\
    \ be less than k\")]\n    [(<= k len arr) (error \"length of arr must be less\
    \ than k\")]\n    [(<= k len arr)", "  (let ((n (length arr)))\n    (if (<= k\
    \ n)\n      (list (car arr) (maximum (cdr arr) k))\n      (let ((max (car arr)))\n\
    \        (if (<= k 1)\n          (list max)\n          (let ((m (cdr arr)))\n\
    \            (maximum (cons max m) (maximum (cdr m) k))))))))\n", "  (let ((n\
    \ (length arr)))\n    (if (<= k n)\n      (list (car arr) (maximum (cdr arr) k))\n\
    \      (maximum (cdr arr) k)\n    )\n  )\n)\n", "  (let ((result (make-vector\
    \ k 0)))\n    (for-each (lambda (i) (vector-set! result i (vector-ref arr i)))\n\
    \      (range 1 k)))\n  result)\n", "  (let ((n (length arr)))\n    (if (<= k\
    \ n)\n      (list (car arr) (maximum (cdr arr) k))\n      (let ((max (car arr)))\n\
    \        (if (<= k 1)\n          (list max)\n          (let ((m (maximum (cdr\
    \ arr) k)))\n            (list max m))))))\n)\n", "  (let ((result (make-vector\
    \ k 0)))\n    (for-each (lambda (x) (vector-set! result x)) arr)\n    (sort result)\n\
    \    (reverse result)\n    (first result)))\n", "  (let ((max-index (make-vector\
    \ k 0)))\n    (for-each (lambda (i) (vector-set! max-index i (vector-ref arr i)))\n\
    \      (range 1 k)))\n  (vector-ref max-index 0))\n", "  (let ((result (make-vector\
    \ k 0)))\n    (for-each (lambda (i) (vector-set! result i (vector-ref arr i)))\n\
    \      (if (>= k 0)\n          (vector-set! result (vector-ref arr (vector-ref\
    \ result (- k 1))))\n          (vector-set! result (- k 1))))\n    result))\n",
  "  (cond ((> k 0)\n         (maximum (append arr (list (- k 1))) k))\n        ((=\
    \ k 0) (list))\n        (else (maximum (append arr (list (- k 1))) k))))\n", " \
    \ (cond ((>= k 0) (list))\n        ((< k 0) (error \"Invalid k\"))\n        ((=\
    \ k 1) (car arr))\n        ((>= k 2) (maximum (cdr arr) (cdr arr) k))\n      \
    \  (else (maximum (cdr arr) (cdr arr) k))))\n", "  (let ((result (make-vector\
    \ k 0)))\n    (for-each (lambda (i) (vector-set! result i (vector-ref arr i)))\n\
    \      (range 1 k)))\n  result)\n", "  (let ((max-index (car (cdr arr))))\n  \
    \  (if (eq? max-index k)\n        (car (cdr arr))\n        (maximum (cdr arr)\
    \ (cdr max-index)))))\n", "  (let ((max-index (car (cdr arr))))\n    (if (eq?\
    \ max-index k)\n      (car (cdr (cdr arr)))\n      (maximum (cdr arr) (cdr max-index)))))\n",
  "  (let ((max-k (lambda (arr k)\n    (let ((max-arr (lambda (arr k)\n      (let\
    \ ((max-arr-k (lambda (arr k)\n        (let ((max-arr-k-k (lambda (arr k)\n  \
    \        (let ((max-arr-k-k-k (lambda (arr k)\n            (let ((max-arr-k-k-k-k\
    \ (lambda (arr k)\n              (let ((max-arr-k-k-k-k-k (lambda (arr k)\n  \
    \              (let ((max-arr-k-k-k-k-k-k (lambda (arr k)\n                  (let\
    \ ((max-arr-k-k-k-k-k-k-k (lambda (arr k)\n                    (let ((max-arr-k-k-k-k-k-k-k-k\
    \ (lambda (arr k)\n                      (let ((max-arr-k-k-k-k-k-k-k-k-k (lambda\
    \ (arr k)\n                        (let ((max-arr-k-k-k-k-k-k-k-k-k-k (lambda\
    \ (arr k)\n                          (let ((max-arr-k-k-k-k-k-k-k-k-k-k-k (lambda\
    \ (arr k)\n                            (let ((max-arr-k-k-k-k-k-k-k-k-k-k-k-k\
    \ (lambda (arr k)\n                              (let ((max-arr-k-k-k-k-k-k-k-k-k-k-k-k-k\
    \ (lambda (arr k)\n                                (let ((max-arr-k-k-k-k-k-k-k-k-k-k-k-k-k-k\
    \ (lambda (arr k)\n                                  (let ((max-arr-k-k-k-k-k-k-k-k-k-k-k-k-k-k\
    \ (lambda (arr k)\n                                    (let ((max-arr-k-k-k-k-k-k-k-k-k-k-k-k-",
  "  (let ((result (make-vector k 0)))\n    (for-each (lambda (x) (vector-set! result\
    \ x)) arr)\n    (sort result)\n    (reverse result)\n    (first result)))\n",
  "  (let ((n (length arr)))\n    (if (<= k n)\n      (list (car arr) (maximum (cdr\
    \ arr) k))\n      (maximum (cdr arr) k)))\n)\n", "  (let ((max-val (car arr)))\n\
    \    (if (null? (cdr arr))\n      (list max-val)\n      (let ((max-val (car arr)))\n\
    \        (if (null? (cdr arr))\n          (list max-val)\n          (let ((max-val\
    \ (car arr)))\n            (if (null? (cdr arr))\n              (list max-val)\n\
    \              (let ((max-val (car arr)))\n                (if (null? (cdr arr))\n\
    \                  (list max-val)\n                  (let ((max-val (car arr)))\n\
    \                    (if (null? (cdr arr))\n                      (list max-val)\n\
    \                      (let ((max-val (car arr)))\n                        (if\
    \ (null? (cdr arr))\n                          (list max-val)\n              \
    \            (list max-val))))))))))))))))))))\n", "  (let ((result (make-vector\
    \ k 0)))\n    (for-each (lambda (x) (vector-set! result x)) arr)\n    (sort result)\n\
    \    (reverse result)\n    (first result)))\n", "  (let ((result (make-vector\
    \ k 0)))\n    (for-each (lambda (x) (vector-set! result x)) arr)\n    (sort result)\n\
    \    (reverse result)\n    (first result)))\n", "  (cond\n    [(< k 0) (error\
    \ \"Index out of bounds\")]\n    [(<= (car arr) (car k)) (error \"Index out of\
    \ bounds\")]\n    [(<= (car arr) (car (cdr k))) (cdr (cdr k))]\n    [(<= (car\
    \ (cdr arr)) (car (cdr (cdr k)))) (cdr (cdr (cdr k)))]\n    [(<= (car (cdr (cdr\
    \ arr))) (car (cdr (cdr (cdr k)))))]\n    [(<= (car (cdr (cdr (cdr arr)))) (car\
    \ (cdr (cdr (cdr (cdr k))))))]\n    [(<= (car (cdr (cdr (cdr (cdr arr)))))) (car\
    \ (cdr (cdr (cdr (cdr (cdr k))))))]\n    [(<= (car (cdr (cdr (cdr (cdr (cdr arr))))))\
    \ (car (cdr (cdr (cdr (cdr (cdr (cdr k))))))))]\n    [(<= (car (cdr (cdr (cdr\
    \ (cdr (cdr (cdr arr)))))))) (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr k))))))))]\n\
    \    [(<= (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr arr)))))))) (car (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr k))))))))))]\n    [(<= (car (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr arr)))))))))) (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ k))))))))))]\n    [(<= (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ arr)))))))))))]\n    [(<= (car (cdr (cdr (", "  (let ((n (length arr)))\n  \
    \  (if (<= k n)\n      (list (car arr) (maximum (cdr arr) k))\n      (maximum\
    \ (cdr arr) k)))\n)\n", "  (let ((max-arr (list)))\n    (for-each (lambda (x)\n\
    \                (if (> x arr[0])\n                  (set! max-arr (append max-arr\
    \ x))\n                  (set! max-arr (append max-arr (- x arr[0]))))\n     \
    \           (if (> x arr[1])\n                  (set! max-arr (append max-arr\
    \ x))\n                  (set! max-arr (append max-arr (- x arr[1]))))\n     \
    \           (if (> x arr[2])\n                  (set! max-arr (append max-arr\
    \ x))\n                  (set! max-arr (append max-arr (- x arr[2]))))\n     \
    \           (if (> x arr[3])\n                  (set! max-arr (append max-arr\
    \ x))\n                  (set! max-arr (append max-arr (- x arr[3]))))\n     \
    \           (if (> x arr[4])\n                  (set! max-arr (append max-arr\
    \ x))\n                  (set! max-arr (append max-arr (- x arr[4]))))\n     \
    \           (if (> x arr[5])\n                  (set! max-arr (append max-arr\
    \ x))\n                  (set! max-arr (append max-arr (- x arr[5]))))\n     \
    \           (if (> x arr[6])\n                  (set! max-arr (append max-arr\
    \ x))\n                  (set! max-arr (append max-arr (- x arr[6]))))\n     \
    \           (if (> x arr[7])\n                  (set! max-arr (append max-arr\
    \ x))\n                  (set! max-arr (append max-arr (- x arr[7]))))\n     \
    \           (if (> x arr[8])\n                  (set! max-arr (append max-arr\
    \ x))\n                  (set! max-arr (append max-arr (- x arr[8]))))\n     \
    \           (if (> x arr[9])\n                  (set! max-arr (append max-arr\
    \ x))\n                  (set! max-arr (append max-arr (- x arr[9]))))\n     \
    \           (if (> x arr[10])\n                  (set! max-arr (append max-arr\
    \ x))\n                  (set! max-arr (append max-arr (- x arr", "  (let ((n\
    \ (len arr)))\n    (if (<= k n)\n      (list (car arr) (maximum (cdr arr) k))\n\
    \      (maximum (cdr arr) k)))\n)\n", "  (cond\n    [(<= k 0) (list)]\n    [(<=\
    \ (car arr) (car k)) (cons (car arr) (maximum (cdr arr) (cdr k)))]\n    [else\
    \ (maximum (cdr arr) (cdr k))]))\n", "  (let ((result (make-vector k 0)))\n  \
    \  (for-each (lambda (i) (vector-set! result i (vector-ref arr i)))\n      (range\
    \ 1 (vector-length arr)))))\n", "  (let ((max-index (- k 1)))\n    (if (>= max-index\
    \ 0)\n      (list (- arr max-index))\n      (list (- arr max-index) (- arr max-index)))))\n",
  "  (let ((result (make-vector k 0)))\n    (for-each (lambda (i) (vector-set! result\
    \ i (vector-ref arr i)))\n      (range 1 (vector-length arr)))))\n", "  (let ((max-index\
    \ (- k 1)))\n    (if (<= max-index k)\n      (list (- arr max-index))\n      (maximum\
    \ (- arr max-index) k)\n    )\n  )\n)\n", "  (let ((max-arr (list)))\n    (while\
    \ (< k 0)\n      (let ((i (car arr)))\n        (if (car max-arr)\n          (setq\
    \ max-arr (cdr max-arr))\n          (setq max-arr (list (car max-arr) i)))\n \
    \       (setq k (- 1 k)))\n      (setq max-arr (list i (car max-arr))))\n    max-arr))\n",
  "  (let ((result (make-vector k 0)))\n    (for-each (lambda (x) (vector-set! result\
    \ x)) arr)\n    (sort result)\n    (reverse result)\n    (first result)))\n",
  "  (let ((max-list (list)))\n    (for-each (lambda (x)\n                (if (> x\
    \ arr[0])\n                  (set! max-list (append max-list x))\n           \
    \       (set! max-list (append max-list (- x arr[0]))))\n                (if (>\
    \ x arr[1])\n                  (set! max-list (append max-list x))))\n       \
    \       k\n              (list)))\n  (reverse max-list)))\n", "  (let ((n (len\
    \ arr)))\n    (if (<= k n)\n      (list (car arr) (maximum (cdr arr) k))\n   \
    \   (maximum (cdr arr) k)\n    )\n  )\n)\n", "  (let ((result (make-vector k 0)))\n\
    \    (for-each (lambda (x) (vector-set! result x)) arr)\n    (sort result)\n \
    \   (reverse result)\n    (first result)))\n", "  (let ((max-index (car (cdr arr))))\n\
    \    (if (eq? max-index k)\n      (car arr)\n      (maximum (cdr arr) (cdr max-index)))))\n",
  "  (cond\n    [(<= k 0) (error \"Invalid k\")]\n    [(<= (car arr) -1000) (error\
    \ \"Invalid arr\")]\n    [(<= (car arr) 1000) (error \"Invalid arr\")]\n    [(<=\
    \ (car arr) (car k)) (error \"Invalid arr\")]\n    [(<= (car arr) (car k)) (error\
    \ \"Invalid arr\")]\n    [(<= (car arr) (car k)) (error \"Invalid arr\")]\n  \
    \  [(<= (car arr) (car k)) (error \"Invalid arr\")]\n    [(<= (car arr) (car k))\
    \ (error \"Invalid arr\")]\n    [(<= (car arr) (car k)) (error \"Invalid arr\"\
    )]\n    [(<= (car arr) (car k)) (error \"Invalid arr\")]\n    [(<= (car arr) (car\
    \ k)) (error \"Invalid arr\")]\n    [(<= (car arr) (car k)) (error \"Invalid arr\"\
    )]\n    [(<= (car arr) (car k)) (error \"Invalid arr\")]\n    [(<= (car arr) (car\
    \ k)) (error \"Invalid arr\")]\n    [(<= (car arr) (car k)) (error \"Invalid arr\"\
    )]\n    [(<= (car arr) (car k)) (error \"Invalid arr\")]\n    [(<= (car arr) (car\
    \ k)) (error \"Invalid arr\")]\n    [(<= (car arr) (car k)) (error \"Invalid arr\"\
    )]\n    [(<= (car arr) (car k)) (error \"Invalid arr\")]\n    [(<= (car arr) (car\
    \ k)) (error \"Invalid arr\")]\n    [(<= (car arr) (car k)) (error \"Invalid arr\"\
    )]\n    [(<= (car arr) (car k)) (error \"Invalid arr\")]\n    [(<= (car arr) (car\
    \ k)) (error \"Invalid arr\")]\n    [(<= (car arr) (car k)) (error \"Invalid arr\"\
    )]\n    [(<= (car arr) (car k", "  (let ((result (make-vector k 0)))\n    (for-each\
    \ (lambda (x) (vector-set! result x)) arr)\n    (sort result)\n    (reverse result)\n\
    \    (first result)))\n", "  (let ((n (length arr)))\n    (if (<= k n)\n     \
    \ (list (car arr) (maximum (cdr arr) k))\n      (let ((max (car arr)))\n     \
    \   (if (<= k 1)\n          (list max)\n          (let ((m (cdr arr)))\n     \
    \       (if (<= k 2)\n              (list max m)\n              (let ((m (car\
    \ m)))\n                (if (<= k 3)\n                  (list max m m)\n     \
    \             (let ((m (cdr m)))\n                    (list max m m m)))))))))))))\n",
  "  (let ((result (make-vector k 0)))\n    (for-each (lambda (x) (vector-set! result\
    \ x)) arr)\n    (sort result)\n    (reverse result)\n    (first result)))\n",
  "  (cond\n    [(<= k 0) (list)]\n    [(< k 0) (error \"Index out of bounds\")]\n\
    \    [(<= (car arr) (car k)) (cons (car arr) (maximum (cdr arr) (cdr k)))]\n \
    \   [(>= (car arr) (car k)) (cons (car k) (maximum (cdr arr) (cdr k)))]\n  )\n\
    )\n", "  (let ((max-arr (list)))\n    (for-each (lambda (x)\n                (if\
    \ (>= x arr[0])\n                  (append max-arr (list x))\n               \
    \   (append max-arr (list (- x arr[0]))))\n                (list (- x arr[0])))\n\
    \              (range (+ k 1) (- k 1))))\n  (car (cdr max-arr))))\n", "  (let*\
    \ ([max-arr (reduce (lambda (a b) (+ a b)) arr)])\n    (if (eq? k 0)\n      (list\
    \ max-arr)\n      (let* ([max-k (max max-arr k)])\n        (if (eq? k 1)\n   \
    \       (list max-k)\n          (let* ([max-k-1 (max max-k 1)])\n            (if\
    \ (eq? k 2)\n              (list max-k-1)\n              (let* ([max-k-2 (max\
    \ max-k-1 2)])\n                (if (eq? k 3)\n                  (list max-k-2)\n\
    \                  (let* ([max-k-3 (max max-k-2 3)])\n                    (if\
    \ (eq? k 4)\n                      (list max-k-3)\n                      (let*\
    \ ([max-k-4 (max max-k-3 4)])\n                        (if (eq? k 5)\n       \
    \                   (list max-k-4)\n                          (let* ([max-k-5\
    \ (max max-k-4 5)])\n                            (if (eq? k 6)\n             \
    \                 (list max-k-5)\n                              (let* ([max-k-6\
    \ (max max-k-5 6)])\n                                (if (eq? k 7)\n         \
    \                         (list max-k-6)\n                                  (let*\
    \ ([max-k-7 (max max-k-6 7)])\n                                    (if (eq? k\
    \ 8)\n                                      (list max-k-7)\n                 \
    \                     (let* ([max-k-8 (max max-k-7 8)])\n                    \
    \                    (if (eq? k 9)\n                                         \
    \ (list max-k-8)\n                                          (let* ([max-k-9 (max\
    \ max-k-8 9)])\n                                            (if (eq? k 10)\n \
    \                                             (list max-k-9)\n               \
    \                               (let* ([max-k-10 (max max-k-9 10)])\n        \
    \                                        (if (eq? k 11)\n                    \
    \                            ", "  (let ((max-num (car arr)))\n    (if (null?\
    \ (cdr arr))\n      (list max-num)\n      (let ((max-num (car (cdr arr))))\n \
    \       (if (null? (cdr (cdr arr)))\n          (list max-num)\n          (maximum\
    \ (cdr arr) (cdr (cdr arr)))\n          ))))\n  ))\n", "  (let ((max-index (car\
    \ (cdr arr))))\n    (if (eq? max-index k)\n      (car arr)\n      (if (eq? max-index\
    \ (cdr arr))\n        (car arr)\n        (maximum (cdr arr) (cdr arr)))))\n  (if\
    \ (eq? k 0)\n    (list)\n    (maximum (cdr arr) (cdr arr)))))\n", "  (let ((result\
    \ (make-vector k 0)))\n    (for-each (lambda (x) (vector-set! result x)) arr)\n\
    \    (sort result)\n    (reverse result)\n    (first result)))\n", "  (let ((result\
    \ (make-array k)))\n    (let ((i 0))\n      (while (< i k)\n        (set! result\
    \ (vector-set! result arr[i] i)\n          (set! i (+ i 1)))\n        )\n    \
    \  )\n    result\n    )\n  )\n", "  (let ((n (length arr)))\n    (if (<= k n)\n\
    \      (list (car arr) (maximum (cdr arr) k))\n      (maximum (cdr arr) k)\n \
    \   )\n  )\n)\n", "  (let ((result (make-array k)))\n    (let ((i 0))\n      (while\
    \ (< i k)\n        (set! result (vector-set! result arr[i] i))\n        (set!\
    \ i (+ i 1)))\n      result)\n    result)\n)\n", "  (let ((n (len arr)))\n   \
    \ (if (<= k n)\n      (list (car arr) (maximum (cdr arr) k))\n      (let ((max\
    \ (car arr)))\n        (if (<= k 1)\n          (list max)\n          (let ((m\
    \ (cdr arr)))\n            (if (<= k 2)\n              (list max m)\n        \
    \      (let ((m (car m)))\n                (if (<= k 3)\n                  (list\
    \ max m m)\n                  (list max m m m))))))))))\n", "  (let ((result (make-vector\
    \ k 0)))\n    (for-each (lambda (x) (vector-set! result x)) arr)\n    (sort result)\n\
    \    (reverse result)\n    (first result)))\n", "  (let ((max-arr (list)))\n \
    \   (for-each (lambda (x)\n                (if (> x arr)\n                   \
    \ (append max-arr (list x))\n                    (append max-arr (list (- x arr))))\n\
    \                (if (> x arr)\n                    (append max-arr (list x)))))\n\
    \    (if (> k len(max-arr))\n      (list)\n      (maximum max-arr (sub1 k))))\n",
  "  (let ((n (length arr)))\n    (if (<= k n)\n      (list (car arr) (car arr) (car\
    \ arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car\
    \ arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car\
    \ arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car\
    \ arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car\
    \ arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car\
    \ arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car\
    \ arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car\
    \ arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car\
    \ arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car\
    \ arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car\
    \ arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car\
    \ arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car\
    \ arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car\
    \ arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car\
    \ arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car",
  "  (let ((result (make-vector k 0)))\n    (for-each (lambda (x) (vector-set! result\
    \ x)) arr)\n    (sort result)\n    (reverse result)\n    (first result)))\n",
  "  (let ((result (make-vector k 0)))\n    (for-each (lambda (x) (vector-set! result\
    \ x)) arr)\n    (sort result)\n    (reverse result)\n    (first result)))\n",
  "  (let ((result (make-vector k 0)))\n    (for-each (lambda (x) (vector-set! result\
    \ x)) arr)\n    (sort result)\n    (reverse result)\n    (first result)))\n",
  "  (let ((max-val (car arr)))\n    (if (null? (cdr arr))\n      (list max-val)\n\
    \      (let ((max-val (car (cdr arr))))\n        (if (null? (cdr (cdr arr)))\n\
    \          (list max-val)\n          (let ((max-val (car (cdr (cdr arr)))))\n\
    \            (if (null? (cdr (cdr (cdr arr))))\n              (list max-val)\n\
    \              (let ((max-val (car (cdr (cdr (cdr arr))))))\n                (if\
    \ (null? (cdr (cdr (cdr (cdr arr))))))\n                  (list max-val)\n   \
    \               (list max-val))))))))))\n", "  (let ((n (len arr)))\n    (if (<=\
    \ k n)\n      (list (car arr) (maximum (cdr arr) k))\n      (maximum (cdr arr)\
    \ k)\n    )\n  )\n)\n", "  (let ((max-index (car (cdr arr))))\n    (if (eq? max-index\
    \ k)\n      (car (cdr (cdr arr)))\n      (maximum (cdr arr) (cdr max-index)))))\n",
  "  (let ((max-val (car arr)))\n    (if (eq? max-val k)\n      (cdr arr)\n      (cons\
    \ max-val (maximum (cdr arr) k))))\n  (maximum (cdr arr) k))\n", "  (let ((result\
    \ (make-vector k 0)))\n    (for-each (lambda (i)\n                (if (zero? i)\n\
    \                    (set-vector-cell! result i arr[i])\n                    (set-vector-cell!\
    \ result i (- arr[i] 1))\n                    (set-vector-cell! result i (- arr[i]\
    \ 2))))\n      (range 1 k)))\n  result)\n", "  (let ((result (make-vector k 0)))\n\
    \    (for-each (lambda (x) (vector-set! result x)) arr)\n    (sort result)\n \
    \   (reverse result)\n    (first result)))\n", "  (let ((result (make-vector k\
    \ 0)))\n    (for-each (lambda (i) (vector-set! result i (vector-ref arr i)))\n\
    \      (range 1 (vector-length arr)))))\n", "  (let ((result (make-vector k 0)))\n\
    \    (for-each (lambda (x) (vector-set! result x)) arr)\n    (sort result)\n \
    \   (reverse result)\n    (first result)))\n", "  (let ((result (make-vector k\
    \ 0)))\n    (for-each (lambda (x) (vector-set! result x)) arr)\n    (sort result)\n\
    \    (reverse result)\n    (first result)))\n", "  (let ((n (length arr)))\n \
    \   (if (<= k n)\n      (list (car arr) (maximum (cdr arr) k))\n      (maximum\
    \ (cdr arr) k)))\n)\n", "  (cond\n    [(<= k 0) (list)]\n    [(< k 0) (error \"\
    Index out of bounds\")]\n    [(<= (car arr) (car k)) (cons (car arr) (maximum\
    \ (cdr arr) (cdr k)))]\n    [(>= (car arr) (car k)) (cons (car k) (maximum (cdr\
    \ arr) (cdr k)))]\n    [else (error \"Index out of bounds\")]\n  )\n)\n", "  (let\
    \ ((max-index (car (cdr arr))))\n    (if (eq? max-index k)\n      (car (cdr (cdr\
    \ arr)))\n      (maximum (cdr arr) (cdr max-index)))))\n", "  (let ((result (make-vector\
    \ k 0)))\n    (for-each (lambda (x) (vector-set! result x)) arr)\n    (sort result)\n\
    \    (reverse result)\n    (first result)))\n", "  (let ((result (make-vector\
    \ k 0)))\n    (for-each (lambda (i) (vector-set! result i (vector-ref arr i)))\n\
    \      (range 1 (vector-length arr)))))\n", "  (let ((max-arr (list)))\n    (for-each\
    \ (lambda (x)\n                (if (>= x arr)\n                    (append max-arr\
    \ (list x))\n                    (append max-arr (list))))\n      k)\n    (reverse\
    \ max-arr)))\n", "  (let ((max-list (make-list k)))\n    (let ((i 0))\n      (while\
    \ (< i k)\n        (set! i (+ i 1))\n        (if (> arr i)\n            (set!\
    \ max-list (append max-list (list arr i)))\n            (set! max-list (append\
    \ max-list (list -1000))))))\n    max-list))\n", "  (let ((result (make-vector\
    \ k 0)))\n    (for-each (lambda (x) (vector-set! result x)) arr)\n    (sort result)\n\
    \    (reverse result)\n    (first result)))\n", "  (let* ([max-arr (reduce (lambda\
    \ (a b) (+ a b) 0) arr)])\n    (if (zero? k)\n      max-arr\n    (if (zero? k)\n\
    \      (list)\n    (let* ([max-k (reduce (lambda (a b) (if (> a b) a b)) arr k)])\n\
    \      (if (zero? k)\n        max-k\n      (list (car max-k) (cdr max-k))))))))\n",
  "  (let ((max-index (- k 1)))\n    (if (<= max-index k)\n      (list (- arr max-index))\n\
    \      (maximum (- arr max-index) k))))\n", "  (let ((n (length arr)))\n    (if\
    \ (<= k n)\n      (list (car arr) (maximum (cdr arr) k))\n      (maximum (cdr\
    \ arr) k)))\n)\n", "  (let ((max-index (- k 1)))\n    (if (> max-index 0)\n  \
    \    (list (- arr max-index) max-index)\n      (list max-index (- arr max-index)))))\n",
  "  (let ((n (length arr)))\n    (if (<= k n)\n      (list (car arr) (maximum (cdr\
    \ arr) k))\n      (let ((max (car arr)))\n        (if (<= k 1)\n          (list\
    \ max)\n          (let ((max (car arr)))\n            (if (<= k 2)\n         \
    \     (list max max)\n              (let ((max (car arr)))\n                (if\
    \ (<= k 3)\n                  (list max max max)\n                  (let ((max\
    \ (car arr)))\n                    (if (<= k 4)\n                      (list max\
    \ max max max)\n                      (let ((max (car arr)))\n               \
    \         (if (<= k 5)\n                          (list max max max max max)\n\
    \                          (let ((max (car arr)))\n                          \
    \  (if (<= k 6)\n                              (list max max max max max max)\n\
    \                              (let ((max (car arr)))\n                      \
    \          (if (<= k 7)\n                                  (list max max max max\
    \ max max max)\n                                  (let ((max (car arr)))\n   \
    \                                 (if (<= k 8)\n                             \
    \         (list max max max max max max max max)\n                           \
    \           (let ((max (car arr)))\n                                        (if\
    \ (<= k 9)\n                                          (list max max max max max\
    \ max max max max)\n                                          (let ((max (car\
    \ arr)))\n                                            (if (<= k 10)\n        \
    \                                      (list max max max max max max max max max\
    \ max)\n                                              (let ((max (car arr)))\n\
    \                                                (if (<= k 11)\n             \
    \                                     (list max max max max max max max max max\
    \ max max)\n                                                  (let ((max (car\
    \ arr)))\n                                                    (if (<= k 12)\n\
    \                                                      (list max max max max max\
    \ max max max max max max max)\n                                             \
    \         (let ((max (car arr)))\n                                           \
    \             (if (<= k 13)\n                                                \
    \          (list max max max max max max max max max max max max)\n          \
    \                        ", "  (let ((result (make-vector k 0)))\n    (for-each\
    \ (lambda (x) (vector-set! result x)) arr)\n    (sort result)\n    (reverse result)\n\
    \    (first result)))\n", "  (let ((max-index (car (cdr arr))))\n    (if (eq?\
    \ max-index k)\n      (car (cdr (cdr arr)))\n      (maximum (cdr arr) (cdr (cdr\
    \ arr)))))))\n", "  (let ((result (make-vector k 0)))\n    (for-each (lambda (x)\
    \ (vector-set! result x)) arr)\n    (sort result)\n    (reverse result)\n    (first\
    \ result)))\n", "  (let ((result (make-vector k 0)))\n    (for-each (lambda (x)\
    \ (vector-set! result x)) arr)\n    (sort result)\n    (reverse result)\n    (first\
    \ result)))\n", "  (cond\n    [(<= k 0) (error \"Invalid k\")]\n    [(<= (car\
    \ arr) -1000) (error \"Invalid arr\")]\n    [(<= (car arr) 1000) (error \"Invalid\
    \ arr\")]\n    [(<= (car arr) (car k)) (error \"Invalid arr\")]\n    [(<= (car\
    \ arr) (car k)) (error \"Invalid arr\")]\n    [(<= (car arr) (car k)) (error \"\
    Invalid arr\")]\n    [(<= (car arr) (car k)) (error \"Invalid arr\")]\n    [(<=\
    \ (car arr) (car k)) (error \"Invalid arr\")]\n    [(<= (car arr) (car k)) (error\
    \ \"Invalid arr\")]\n    [(<= (car arr) (car k)) (error \"Invalid arr\")]\n  \
    \  [(<= (car arr) (car k)) (error \"Invalid arr\")]\n    [(<= (car arr) (car k))\
    \ (error \"Invalid arr\")]\n    [(<= (car arr) (car k)) (error \"Invalid arr\"\
    )]\n    [(<= (car arr) (car k)) (error \"Invalid arr\")]\n    [(<= (car arr) (car\
    \ k)) (error \"Invalid arr\")]\n    [(<= (car arr) (car k)) (error \"Invalid arr\"\
    )]\n    [(<= (car arr) (car k)) (error \"Invalid arr\")]\n    [(<= (car arr) (car\
    \ k)) (error \"Invalid arr\")]\n    [(<= (car arr) (car k)) (error \"Invalid arr\"\
    )]\n    [(<= (car arr) (car k)) (error \"Invalid arr\")]\n    [(<= (car arr) (car\
    \ k)) (error \"Invalid arr\")]\n    [(<= (car arr) (car k)) (error \"Invalid arr\"\
    )]\n    [(<= (car arr) (car k)) (error \"Invalid arr\")]\n    [(<= (car arr) (car\
    \ k)) (error \"Invalid arr\")]\n    [(<= (car arr) (car k", "  (let ((max-k (lambda\
    \ (a b) (if (> a b) a b))))\n    (map max-k arr k)))\n\n;; Given a list arr of\
    \ integers and a positive integer k, return a sorted list \n;; of length k with\
    \ the maximum k numbers in arr.\n;; Example 1:\n;; >>> (maximum (list -3 -4 5)\
    \ 3)\n;; (list -4 -3 5)\n;; Example 2:\n;; >>> (maximum (list 4 -4 4) 2)\n;; (list\
    \ 4 4)\n;; Example 3:\n;; >>> (maximum (list -3 2 1 2 -1 -2 1) 1)\n;; (list 2)\n\
    ;; Note:\n;; 1. The length of the list will be in the range of [1, 1000].\n;;\
    \ 2. The elements in the list will be in the range of [-1000, 1000].\n;; 3. 0\
    \ <= k <= len(arr)", "  (let ((result (make-vector k 0)))\n    (for-each (lambda\
    \ (x) (vector-set! result x)) arr)\n    (sort result)\n    (reverse result)\n\
    \    (first result)))\n", "  (let ((n (length arr)))\n    (if (<= k n)\n     \
    \ (list (car arr) (maximum (cdr arr) k))\n      (maximum (cdr arr) k)\n    )\n\
    \  )\n)\n", "  (let ((result (make-vector k 0)))\n    (for-each (lambda (x) (vector-set!\
    \ result x)) arr)\n    (sort result)\n    (reverse result)\n    (first result)))\n",
  "  (let ((result (make-vector k 0)))\n    (for-each (lambda (x) (vector-set! result\
    \ x)) arr)\n    (sort result)\n    (reverse result)\n    (first result)))\n",
  "  (let ((result (make-vector k 0)))\n    (for-each (lambda (i) (vector-set! result\
    \ i (vector-ref arr i)))\n      (range 1 (vector-length arr)))))\n", "  (let*\
    \ ([\n    max-num (car (max (map (lambda (x) (car x)) arr)))]\n    [\n      max-num-index\
    \ (car (max (map (lambda (x) (car x)) (map (lambda (i) (car arr[i]))))))\n   \
    \ ]\n    [\n      max-num-index-index (car (max (map (lambda (x) (car x)) (map\
    \ (lambda (i) (car arr[i]))))))\n    ]\n    [\n      max-num-index-index-index\
    \ (car (max (map (lambda (x) (car x)) (map (lambda (i) (car arr[i]))))))\n   \
    \ ]\n    [\n      max-num-index-index-index-index (car (max (map (lambda (x) (car\
    \ x)) (map (lambda (i) (car arr[i]))))))\n    ]\n    [\n      max-num-index-index-index-index-index\
    \ (car (max (map (lambda (x) (car x)) (map (lambda (i) (car arr[i]))))))\n   \
    \ ]\n    [\n      max-num-index-index-index-index-index-index (car (max (map (lambda\
    \ (x) (car x)) (map (lambda (i) (car arr[i]))))))\n    ]\n    [\n      max-num-index-index-index-index-index-index-index\
    \ (car (max (map (lambda (x) (car x)) (map (lambda (i) (car arr[i]))))))\n   \
    \ ]\n    [\n      max-num-index-index-index-index-index-index-index-index (car\
    \ (max (map (lambda (x) (car x)) (map (lambda (i) (car arr[i]))))))\n    ]\n \
    \   [\n      max-num-index-index-index-index-index-index-index-index-index (car\
    \ (max (map (lambda (x) (car x)) (map (lambda (i) (car arr[i]))))))\n    ]\n \
    \   [\n      max-num-index-index-index-index-index-index-index-index-", "  (let\
    \ ((n (length arr)))\n    (if (<= k n)\n      (list (car arr) (maximum (cdr arr)\
    \ k))\n      (maximum (cdr arr) k)\n    )\n  )\n)\n", "  (let ((max-val (car arr)))\n\
    \    (if (eq? max-val k)\n      (cdr arr)\n      (cons max-val (maximum (cdr arr)\
    \ k))))\n  (maximum (cdr arr) k))\n", "  (let ((result (make-vector k 0)))\n \
    \   (for-each (lambda (x) (vector-set! result x)) arr)\n    (sort result)\n  \
    \  (reverse result)\n    (first result)))\n", "  (let ((max-arr (list)))\n   \
    \ (for-each (lambda (x)\n                (if (> x arr[0])\n                  (append\
    \ max-arr (list x))\n                  (append max-arr (list (- x arr[0]))))\n\
    \                (list (- x arr[0])))\n              (range (+ k 1) (- k 1))))\n\
    \  (car max-arr)))\n", "  (cond\n    [(< k 0) (error \"Index out of bounds\")]\n\
    \    [(<= (car arr) (car k)) (error \"Index out of bounds\")]\n    [(<= (car arr)\
    \ (car (cdr k))) (cdr (cdr k))]\n    [(<= (car (cdr arr)) (car (cdr (cdr k))))\
    \ (cdr (cdr (cdr k)))]\n    [(<= (car (cdr (cdr arr))) (car (cdr (cdr (cdr k)))))\
    \ (cdr (cdr (cdr (cdr k))))]\n    [(<= (car (cdr (cdr (cdr arr)))) (car (cdr (cdr\
    \ (cdr (cdr k)))))) (cdr (cdr (cdr (cdr (cdr k)))))]\n    [(<= (car (cdr (cdr\
    \ (cdr (cdr arr)))))) (car (cdr (cdr (cdr (cdr (cdr k))))))]\n    [(<= (car (cdr\
    \ (cdr (cdr (cdr (cdr arr)))))) (car (cdr (cdr (cdr (cdr (cdr (cdr k))))))))]\n\
    \    [(<= (car (cdr (cdr (cdr (cdr (cdr (cdr arr)))))))) (car (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr k))))))))]\n    [(<= (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ arr)))))))) (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr k))))))))))]\n    [(<=\
    \ (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr arr)))))))))) (car (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr k))))))))))]\n    [(<= (car (cdr (cdr (cdr (cdr\
    \ (cdr (cdr", "  (cond ((> k 0)\n         (maximum (map (lambda (x) (if (< x arr)\
    \ arr x)) arr) k))\n    (else ()))\n)\n", "  (let ((n (length arr)))\n    (if\
    \ (<= k n)\n      (list (car arr) (maximum (cdr arr) k))\n      (let ((max (car\
    \ arr)))\n        (if (<= k 1)\n          (list max)\n          (let ((m (cdr\
    \ arr)))\n            (if (<= k 2)\n              (list max m)\n             \
    \ (let ((m (car m)))\n                (if (<= k 3)\n                  (list max\
    \ m m)\n                  (list max m m m))))))))))\n", "  (let ((max-index (make-vector\
    \ k 0)))\n    (for-each (lambda (i) (vector-set! max-index i (vector-ref arr i)))\n\
    \      (range 1 k))))\n", "  (let ((n (len arr)))\n    (if (<= k n)\n      (list\
    \ (car arr) (maximum (cdr arr) k))\n      (maximum (cdr arr) k)\n    )\n  )\n\
    )\n", "  (let ((n (length arr)))\n    (if (<= k n)\n      (list (car arr) (maximum\
    \ (cdr arr) k))\n      (let ((max (car arr)))\n        (if (<= k 1)\n        \
    \  (list max)\n          (let ((m (cdr arr)))\n            (if (<= k 2)\n    \
    \          (list max m)\n              (let ((m1 (car m)) (m2 (cdr m)))\n    \
    \            (if (<= k 3)\n                  (list max m1 m2)\n              \
    \    (let ((m1 (car m1)) (m2 (car m2)) (m3 (cdr m2)))\n                    (if\
    \ (<= k 4)\n                      (list max m1 m2 m3)\n                      (let\
    \ ((m1 (car m1)) (m2 (car m2)) (m3 (car m3)) (m4 (cdr m3)))\n                \
    \        (if (<= k 5)\n                          (list max m1 m2 m3 m4)\n    \
    \                      (let ((m1 (car m1)) (m2 (car m2)) (m3 (car m3)) (m4 (car\
    \ m4)) (m5 (cdr m4))\n                            (if (<= k 6)\n             \
    \                 (list max m1 m2 m3 m4 m5)\n                              (let\
    \ ((m1 (car m1)) (m2 (car m2)) (m3 (car m3)) (m4 (car m4)) (m5 (car m5)) (m6 (cdr\
    \ m5))\n                                (if (<= k 7)\n                       \
    \           (list max m1 m2 m3 m4 m5 m6)\n                                  (let\
    \ ((m1 (car m1)) (m2 (car m2)) (m3 (car m3)) (m4 (car m4)) (m5 (car m5)) (m6 (car\
    \ m6)) (m7 (cdr m6))\n                                    (if (<= k 8)\n     \
    \                                 (list max m1 m2 m3 m4 m5 m6 m7)\n          \
    \                            (let ((m1 (car m1)) (m2 (car m2)) (m3 (car", "  (let\
    \ ((n (length arr)))\n    (if (<= k n)\n      (list (car arr) (maximum (cdr arr)\
    \ k))\n      (maximum (cdr arr) k)))\n)\n", "  (let ((max-index (- k 1)))\n  \
    \  (if (>= max-index 0)\n      (list (- arr max-index) max-index)\n      (maximum\
    \ (- arr max-index) k))))\n", "  (let ((result (make-vector k 0)))\n    (for-each\
    \ (lambda (x) (vector-set! result x)) arr)\n    (sort result)\n    (reverse result)\n\
    \    (first result)))\n", "  (let ((result (make-vector k 0)))\n    (for-each\
    \ (lambda (i) (vector-set! result i (vector-ref arr i)))\n      (range 1 (vector-length\
    \ arr)))))\n", "  (let ((max-index (car (cdr arr))))\n    (if (eq? max-index k)\n\
    \      (car arr)\n      (maximum (cdr arr) (cdr max-index)))))\n", "  (let ((result\
    \ (make-vector k 0)))\n    (for-each (lambda (x) (vector-set! result x)) arr)\n\
    \    (sort result)\n    (reverse result)\n    (first result)))\n", "  (let ((max-arr\
    \ (list)))\n    (while (< k 0)\n      (let ((i (car arr)))\n        (if (not (in\
    \ max-arr i))\n            (max-arr (append max-arr i))\n            (set! max-arr\
    \ (append max-arr (list))))\n        (set! arr (cdr arr))))\n    max-arr))\n",
  "  (let ((max-arr (list)))\n    (for-each (lambda (x)\n                (if (> x\
    \ arr[0])\n                  (append max-arr (list x))\n                  (append\
    \ max-arr (list -x))))\n      (list (- k arr[0]) arr[0])))\n  max-arr)\n", " \
    \ (cond\n    [(< k 0) (error \"Index out of bounds\")]\n    [(<= (car arr) (car\
    \ k)) (error \"Index out of bounds\")]\n    [(<= (car arr) (car (cdr k))) (cdr\
    \ (maximum (cdr arr) (cdr k)))]\n    [(<= (car arr) (car (cdr (cdr k)))) (error\
    \ \"Index out of bounds\")]\n    [else (maximum (cdr arr) (cdr k))]))\n", "  (let\
    \ ((result (make-array k)))\n    (let ((i 0))\n      (while (< i k)\n        (set!\
    \ result (vector-set! result arr[i] i)\n          (set! i (+ i 1)))\n        )\n\
    \      )\n    result)\n  )\n)\n", "  (cond ((= k 0) (list))\n    ((< k 0) (maximum\
    \ (- arr k) (- k)))\n    (>= k 0) (maximum (arr (- k)) k)))\n", "  (let ((max-arr\
    \ (list)))\n    (while (< k 0)\n      (let ((i (car arr)))\n        (if (car max-arr)\n\
    \            (setq max-arr (cdr max-arr))\n            (setq max-arr (list (car\
    \ max-arr) i)))\n        (setq arr (cdr arr))\n        (setq k (1+ k))))\n   \
    \ max-arr))\n", "  (let ((max-index (car (cdr arr))))\n    (if (eq max-index k)\n\
    \      (car arr)\n      (maximum (cdr arr) (cdr max-index)))))\n", "  (let ((result\
    \ (make-vector k 0)))\n    (for-each (lambda (x) (vector-set! result x)) arr)\n\
    \    (sort result)\n    (reverse result)\n    (first result)))\n", "  (let ((n\
    \ (length arr)))\n    (if (<= k n)\n      (list (car arr) (maximum (cdr arr) k))\n\
    \      (let ((max (car arr)))\n        (if (<= k 1)\n          (list max)\n  \
    \        (let ((m (cdr arr)))\n            (if (<= k 2)\n              (list max\
    \ (car m) (maximum (cdr m) k))\n              (let ((m1 (car m)),\n          \
    \          (m2 (cdr m)))\n                (if (<= k 3)\n                  (list\
    \ max (car m1) (maximum (cdr m1) k) (car m2) (maximum (cdr m2) k))\n         \
    \         (list max (car m1) (maximum (cdr m1) k) (car m2) (maximum (cdr m2) k)\
    \ (car m3) (maximum (cdr m3) k))\n                  (list max (car m1) (maximum\
    \ (cdr m1) k) (car m2) (maximum (cdr m2) k) (car m3) (maximum (cdr m3) k) (car\
    \ m4) (maximum (cdr m4) k))\n                  (list max (car m1) (maximum (cdr\
    \ m1) k) (car m2) (maximum (cdr m2) k) (car m3) (maximum (cdr m3) k) (car m4)\
    \ (maximum (cdr m4) k) (car m5) (maximum (cdr m5) k))\n                  (list\
    \ max (car m1) (maximum (cdr m1) k) (car m2) (maximum (cdr m2) k) (car m3) (maximum\
    \ (cdr m3) k) (car m4) (maximum (cdr m4) k) (car m5) (maximum (cdr m5) k) (car\
    \ m6) (maximum (cdr m6) k))\n                  (list max (car m1) (maximum (cdr\
    \ m1) k) (car m2) (maximum (cdr m2) k) (car m3) (maximum (cdr m3) k) (car m4)\
    \ (maximum (c", "  (let ((result (make-vector k 0)))\n    (for-each (lambda (i)\
    \ (vector-set! result i (vector-ref arr i)))\n      (range 1 k)))\n  result)\n",
  "  (let ((max-index (make-vector k 0)))\n    (for-each (lambda (i)\n           \
    \     (set! max-index (vector-set! max-index i (vector-ref arr i))))\n      (range\
    \ 1 k)))\n  (vector-copy max-index (vector-sort (vector-map (lambda (i) (vector-ref\
    \ arr i)) max-index))))\n", "  (cond\n    [(<= k 0) (list)]\n    [(<= (car arr)\
    \ (car k)) (cons (car arr) (maximum (cdr arr) (cdr k)))]\n    [(> (car arr) (car\
    \ k)) (maximum (cdr arr) (cdr k))]\n  )\n)\n", "  (let ((result (make-vector k\
    \ 0)))\n    (for-each (lambda (x) (vector-set! result x)) arr)\n    (sort result)\n\
    \    (reverse result)\n    (first result)))\n", "  (let ((result (make-array k)))\n\
    \    (let ((i 0))\n      (while (< i k)\n        (set! result (vector-set! result\
    \ arr (vector-ref arr i)))\n        (set! i (+ i 1)))\n      result)\n    result)\n\
    )\n", "  (let ((result (make-vector k 0)))\n    (for-each (lambda (x) (vector-set!\
    \ result x)) arr)\n    (sort result)\n    (reverse result)\n    (first result)))\n",
  "  (cond\n    [(< k 0) (error \"k must be positive\")]\n    [(<= k 0) (error \"\
    k must be positive\")]\n    [(< k len(arr)) (error \"k must be less than len(arr)\"\
    )]\n    [(<= k len(arr)) (error \"k must be less than len(arr)\")]\n    [(<= arr\
    \ 0) (error \"arr must be non-negative\")]\n    [(<= arr len(arr)) (error \"arr\
    \ must be in the range [0, len(arr) - 1]\")]\n    [(<= arr k) (error \"arr must\
    \ be in the range [0, k - 1]\")]\n    [(<= arr k) (error \"arr must be in the\
    \ range [0, k - 1]\")]\n    [(<= arr k) (error \"arr must be in the range [0,\
    \ k - 1]\")]\n    [(<= arr k) (error \"arr must be in the range [0, k - 1]\")]\n\
    \    [(<= arr k) (error \"arr must be in the range [0, k - 1]\")]\n    [(<= arr\
    \ k) (error \"arr must be in the range [0, k - 1]\")]\n    [(<= arr k) (error\
    \ \"arr must be in the range [0, k - 1]\")]\n    [(<= arr k) (error \"arr must\
    \ be in the range [0, k - 1]\")]\n    [(<= arr k) (error \"arr must be in the\
    \ range [0, k - 1]\")]\n    [(<= arr k) (error \"arr must be in the range [0,\
    \ k - 1]\")]\n    [(<= arr k) (error \"arr must be in the range [0, k - 1]\")]\n\
    \    [(<= arr k) (error \"arr must be in the range [0, k - 1]\")]\n    [(<= arr\
    \ k) (error \"arr must be in the range [0, k - 1]\")]\n    [(<= arr k) (error\
    \ \"arr must be in the range [0, k", "  (let ((result (make-vector k 0)))\n  \
    \  (for-each (lambda (i) (vector-set! result i (vector-ref arr i)))\n      (range\
    \ 1 (vector-length arr)))))\n", "  (let ((max-arr (list)))\n    (for-each (lambda\
    \ (x)\n                (if (>= x arr)\n                    (append max-arr x)\n\
    \                    (append max-arr (- x arr))))\n      k)))\n", "  (cond ((>\
    \ k 0)\n          (maximum (list arr) (sub1 k))\n          (> k 0)\n         \
    \ (maximum (list arr) (sub1 k))\n          (< k 0)\n          (maximum (list arr)\
    \ (sub1 k))\n          (< k 0)\n          (maximum (list arr) (sub1 k))))\n)\n",
  "  (let ((result (make-vector k 0)))\n    (for-each (lambda (x) (vector-set! result\
    \ x)) arr)\n    (sort result)\n    (reverse result)\n    (first result)))\n",
  "  (let* ([\n    max-index (car (cdr arr))\n    max-value (car (cdr max-index))\n\
    \    max-index-index (car (cdr max-index-index))\n    max-index-value (car (cdr\
    \ max-index-value))\n    max-index-index-index (car (cdr max-index-index-index))\n\
    \    max-index-index-value (car (cdr max-index-index-value))\n    max-index-index-index-value\
    \ (car (cdr max-index-index-index-value))\n    max-index-index-index-value-index\
    \ (car (cdr max-index-index-index-value-index))\n    max-index-index-index-value-value\
    \ (car (cdr max-index-index-index-value-value))\n    max-index-index-index-value-value-index\
    \ (car (cdr max-index-index-index-value-value-index))\n    max-index-index-index-value-value-value\
    \ (car (cdr max-index-index-index-value-value-value))\n    max-index-index-index-value-value-value-index\
    \ (car (cdr max-index-index-index-value-value-value-index))\n    max-index-index-index-value-value-value-value\
    \ (car (cdr max-index-index-index-value-value-value-value))\n    max-index-index-index-value-value-value-value-index\
    \ (car (cdr max-index-index-index-value-value-value-value-index))\n    max-index-index-index-value-value-value-value-value\
    \ (car (cdr max-index-index-index-value-value-value-value-value))\n    max-index-index-index-value-value-value-value-value-index\
    \ (car (cdr max-index-index-index-value-value-value-value-value-index))\n    max-index-index-index-value-value-value-value-value-value\
    \ (car (cdr max-index-index-index-value-value-value-value", "  (let ((n (length\
    \ arr)))\n    (if (<= k n)\n      (list (car arr) (maximum (cdr arr) k))\n   \
    \   (maximum (cdr arr) k)))\n)\n", "  (cond\n    [(< k 0) (error \"Index out of\
    \ bounds\")]\n    [(<= (car arr) (car k)) (error \"Index out of bounds\")]\n \
    \   [(<= (car arr) (car (cdr k))) (error \"Index out of bounds\")]\n    [(<= (car\
    \ (cdr arr)) (car (cdr k))) (error \"Index out of bounds\")]\n    [(<= (car (cdr\
    \ (cdr arr))) (car (cdr (cdr k)))) (error \"Index out of bounds\")]\n    [(<=\
    \ (car (cdr (cdr (cdr arr)))) (car (cdr (cdr (cdr k))))) (error \"Index out of\
    \ bounds\")]\n    [(<= (car (cdr (cdr (cdr (cdr arr)))))) (car (cdr (cdr (cdr\
    \ (cdr k))))) (error \"Index out of bounds\")]\n    [(<= (car (cdr (cdr (cdr (cdr\
    \ (cdr arr)))))))]\n    [(car (cdr (cdr (cdr (cdr (cdr (cdr arr)))))))]\n  )\n\
    )\n", "  (let ((result (make-vector k 0)))\n    (for-each (lambda (x) (vector-set!\
    \ result x)) arr)\n    (sort result)\n    (reverse result)\n    (first result)))\n",
  "  (let ((result (make-vector k 0)))\n    (for-each (lambda (i) (vector-set! result\
    \ i (vector-ref arr i)))\n      (range 1 (vector-length arr)))))\n", "  (let ((max-index\
    \ (make-vector k 0)))\n    (for-each (lambda (i) (vector-set! max-index i (vector-ref\
    \ arr i)))\n      (range 1 k)))\n  (vector-ref max-index))\n", "  (let* ([max-arr\
    \ (reduce (lambda (a b) (+ a b) 0) arr)])\n    (if (<= k max-arr)\n      (list\
    \ max-arr)\n      (maximum (cdr arr) (sub1 k)))))\n", "  (let* ([max-arr (reduce\
    \ (lambda (a b) (+ a b)) arr)])\n    (if (<= k max-arr)\n      (list max-arr)\n\
    \      (maximum (cdr arr) (sub1 k)))))\n", "  (let ((result (make-vector k 0)))\n\
    \    (for-each (lambda (x) (vector-set! result x)) arr)\n    (sort result)\n \
    \   (reverse result)\n    (first result)))\n", "  (let ((result (make-array k)))\n\
    \    (let ((i 0))\n      (while (< i k)\n        (set! result (vector-set! result\
    \ arr[i] i))\n        (set! i (+ i 1)))\n      result)\n    result)\n)\n", " \
    \ (let ((max-index (- k 1)))\n    (if (> max-index 0)\n      (list (- arr max-index)\
    \ max-index)\n      (list max-index)\n    )\n  )\n)\n", "  (let ((max-arr (list)))\n\
    \    (for-each (lambda (x)\n                (if (> x arr)\n                  \
    \  (append max-arr x)\n                    (append max-arr (- x arr))))\n    \
    \  arr)\n    (reverse max-arr)\n    (if (> k (length max-arr))\n      (list)\n\
    \      (maximum max-arr (sub1 k))))\n)\n", "  (let ((max-val (car arr)))\n   \
    \ (if (null? (cdr arr))\n      (list max-val)\n      (let ((max-val (car (cdr\
    \ arr))))\n        (if (null? (cdr (cdr arr)))\n            (list max-val)\n \
    \           (let ((max-val (car (cdr (cdr arr))))\n                  (result (cons\
    \ max-val (cons max-val))))\n              (maximum (cdr (cdr arr)) k))\n    \
    \        (maximum (cdr (cdr arr)) k)))))\n  (maximum (cdr arr) k))\n", "  (let\
    \ ((max-index (car (cdr arr))))\n    (if (eq? max-index k)\n      (car (cdr (cdr\
    \ arr)))\n      (maximum (cdr arr) (cdr max-index)))))\n", "  (let ((n (length\
    \ arr)))\n    (if (<= k n)\n      (list (car arr) (car arr) (car arr) (car arr)\
    \ (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr)\
    \ (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr)\
    \ (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr)\
    \ (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr)\
    \ (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr)\
    \ (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr)\
    \ (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr)\
    \ (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr)\
    \ (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr)\
    \ (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr)\
    \ (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr)\
    \ (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr)\
    \ (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr)\
    \ (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car arr)\
    \ (car arr) (car arr) (car arr) (car arr) (car arr) (car arr) (car", "  (cond\n\
    \    [(< k 0) (error \"k must be positive\")]\n    [(<= k len arr) (error \"k\
    \ must be less than len(arr)\")]\n    [(<= k len arr) (error \"k must be less\
    \ than len(arr)\")]\n    [(<= k len arr) (error \"k must be less than len(arr)\"\
    )]\n    [(<= k len arr) (error \"k must be less than len(arr)\")]\n    [(<= k\
    \ len arr) (error \"k must be less than len(arr)\")]\n    [(<= k len arr) (error\
    \ \"k must be less than len(arr)\")]\n    [(<= k len arr) (error \"k must be less\
    \ than len(arr)\")]\n    [(<= k len arr) (error \"k must be less than len(arr)\"\
    )]\n    [(<= k len arr) (error \"k must be less than len(arr)\")]\n    [(<= k\
    \ len arr) (error \"k must be less than len(arr)\")]\n    [(<= k len arr) (error\
    \ \"k must be less than len(arr)\")]\n    [(<= k len arr) (error \"k must be less\
    \ than len(arr)\")]\n    [(<= k len arr) (error \"k must be less than len(arr)\"\
    )]\n    [(<= k len arr) (error \"k must be less than len(arr)\")]\n    [(<= k\
    \ len arr) (error \"k must be less than len(arr)\")]\n    [(<= k len arr) (error\
    \ \"k must be less than len(arr)\")]\n    [(<= k len arr) (error \"k must be less\
    \ than len(arr)\")]\n    [(<= k len arr) (error \"k must be less than len(arr)\"\
    )]\n    [(<= k len arr) (error \"k must be less than len(arr)\")]\n    [(<= k\
    \ len arr) (error \"k must be less than len(arr)\")]\n    [(<= k len arr) (error",
  "  (cond\n    [(< k 0) (error \"Index out of bounds\")]\n    [(<= k len arr) (error\
    \ \"Index out of bounds\")]\n    [(<= k k) (error \"Index out of bounds\")]\n\
    \    [(= k 0) (error \"Index out of bounds\")]\n    [(<= k (len arr)) (error \"\
    Index out of bounds\")]\n    [(<= (len arr) k) (error \"Index out of bounds\"\
    )]\n    [(<= (len arr) (k - 1)) (error \"Index out of bounds\")]\n    [(<= (len\
    \ arr) (k - 2)) (error \"Index out of bounds\")]\n    [(<= (len arr) (k - 3))\
    \ (error \"Index out of bounds\")]\n    [(<= (len arr) (k - 4)) (error \"Index\
    \ out of bounds\")]\n    [(<= (len arr) (k - 5)) (error \"Index out of bounds\"\
    )]\n    [(<= (len arr) (k - 6)) (error \"Index out of bounds\")]\n    [(<= (len\
    \ arr) (k - 7)) (error \"Index out of bounds\")]\n    [(<= (len arr) (k - 8))\
    \ (error \"Index out of bounds\")]\n    [(<= (len arr) (k - 9)) (error \"Index\
    \ out of bounds\")]\n    [(<= (len arr) (k - 10)) (error \"Index out of bounds\"\
    )]\n    [(<= (len arr) (k - 11)) (error \"Index out of bounds\")]\n    [(<= (len\
    \ arr) (k - 12)) (error \"Index out of bounds\")]\n    [(<= (len arr) (k - 13))\
    \ (error \"Index out of bounds\")]\n    [(<= (len arr) (k - 14)) (error \"Index\
    \ out of bounds\")]\n    [(<= (len arr) (k - 15)) (error \"Index out of bounds\"\
    )]\n    [(<= (len arr) (k - 16)) (error \"Index out of bounds\")]\n    [(<= (len\
    \ arr) (k -", "  (let ((result (make-vector k 0)))\n    (for-each (lambda (x)\
    \ (vector-set! result x)) arr)\n    (sort result)\n    (reverse result)\n    (first\
    \ result)))\n", "  (let ((max-arr (list)))\n    (for-each (lambda (x)\n      \
    \          (if (> x arr[0])\n                  (set! max-arr (append max-arr x))\n\
    \                )\n              )\n            arr)\n    (if (> k 0)\n     \
    \ (reverse max-arr)\n      max-arr\n    )\n  )\n)\n", "  (cond\n    [(<= k 0)\
    \ (list)]\n    [(< k 0) (error \"Index out of bounds\")]\n    [(<= (car arr) (car\
    \ k)) (cons (car arr) (maximum (cdr arr) (cdr k)))]\n    [(>= (car arr) (car k))\
    \ (error \"Index out of bounds\")]\n    [else (error \"Index out of bounds\")]\n\
    \  )\n)\n", "  (let ((result (make-vector k 0)))\n    (for-each (lambda (x) (vector-set!\
    \ result x)) arr)\n    (sort result)\n    (reverse result)\n    (first result)))\n",
  "  (let ((result (make-array k)))\n    (let ((i 0))\n      (while (< i k)\n    \
    \    (set! result (vector-set! result i arr[i]))\n        (set! i (+ i 1)))\n\
    \      result)\n    result)\n)\n", "  (let ((n (length arr)))\n    (if (<= k n)\n\
    \      (list (car arr) (maximum (cdr arr) k))\n      (let ((max (car arr)))\n\
    \        (if (<= k 1)\n          (list max)\n          (let ((max (car arr)))\n\
    \            (if (<= k 2)\n              (list max max)\n              (let ((max\
    \ (car arr)))\n                (if (<= k 3)\n                  (list max max max)\n\
    \                  (let ((max (car arr)))\n                    (if (<= k 4)\n\
    \                      (list max max max max)\n                      (let ((max\
    \ (car arr)))\n                        (if (<= k 5)\n                        \
    \  (list max max max max max)\n                          (let ((max (car arr)))\n\
    \                            (if (<= k 6)\n                              (list\
    \ max max max max max max)\n                              (let ((max (car arr)))\n\
    \                                (if (<= k 7)\n                              \
    \    (list max max max max max max max)\n                                  (let\
    \ ((max (car arr)))\n                                    (if (<= k 8)\n      \
    \                                (list max max max max max max max max)\n    \
    \                                  (let ((max (car arr)))\n                  \
    \                      (if (<= k 9)\n                                        \
    \  (list max max max max max max max max max)\n                              \
    \            (let ((max (car arr)))\n                                        \
    \    (if (<= k 10)\n                                              (list max max\
    \ max max max max max max max max)\n                                         \
    \     (let ((max (car arr)))\n                                               \
    \ (if (<= k 11)\n                                                  (list max max\
    \ max max max max max max max max max)\n                                     \
    \             (let ((max (car arr)))\n                                       \
    \             (if (<= k 12)\n                                                \
    \      (list max max max max max max max max max max max max)\n              \
    \                                        (let ((max (car arr)))\n            \
    \                                            (if (<= k 13)\n                 \
    \                                         (list max max max max max max max max\
    \ max max max max)\n                                  ", "  (cond\n    [(<= k\
    \ 0) (list)]\n    [(< k 0) (error \"Index out of bounds\")]\n    [(<= (car arr)\
    \ (car k)) (cons (car arr) (maximum (cdr arr) (cdr k)))]\n    [(> (car arr) (car\
    \ k)) (cons (car k) (maximum (cdr arr) (cdr k)))]\n    [else (error \"Index out\
    \ of bounds\")]\n  )\n)\n", "  (let ((max-index (car (cdr arr))))\n    (if (eq?\
    \ max-index k)\n        (car (cdr (cdr arr)))\n        (maximum (cdr arr) (cdr\
    \ max-index)))))\n", "  (let ((result (make-vector k 0)))\n    (for-each (lambda\
    \ (x) (vector-set! result x)) arr)\n    (sort result)\n    (reverse result)\n\
    \    (first result)))\n", "  (let ((result (make-vector k 0)))\n    (for-each\
    \ (lambda (x) (vector-set! result x)) arr)\n    (sort result)\n    (reverse result)\n\
    \    (first result)))\n", "  (let ((result (make-vector k 0)))\n    (for-each\
    \ (lambda (x) (vector-set! result x)) arr)\n    (sort result)\n    (reverse result)\n\
    \    (first result)))\n", "  (let ((result (make-vector k 0)))\n    (for-each\
    \ (lambda (x) (vector-set! result x)) arr)\n    (sort result)\n    (reverse result)\n\
    \    (first result)))\n", "  (let* ([\n    max-index (car (cdr arr))\n    max-value\
    \ (car (cdr max-index))\n    max-index-index (car (cdr max-index-index))\n   \
    \ max-index-value (car (cdr max-index-value))\n    max-index-index-index (car\
    \ (cdr max-index-index-index))\n    max-index-index-value (car (cdr max-index-index-value))\n\
    \    max-index-index-index-index (car (cdr max-index-index-index-index))\n   \
    \ max-index-index-index-value (car (cdr max-index-index-index-value))\n    max-index-index-index-index-index\
    \ (car (cdr max-index-index-index-index-index))\n    max-index-index-index-index-value\
    \ (car (cdr max-index-index-index-index-value))\n    max-index-index-index-index-index-index\
    \ (car (cdr max-index-index-index-index-index-index))\n    max-index-index-index-index-index-value\
    \ (car (cdr max-index-index-index-index-index-value))\n    max-index-index-index-index-index-index-index\
    \ (car (cdr max-index-index-index-index-index-index-index))\n    max-index-index-index-index-index-index-value\
    \ (car (cdr max-index-index-index-index-index-index-value))\n    max-index-index-index-index-index-index-index-index\
    \ (car (cdr max-index-index-index-index-index-index-index-index))\n    max-index-index-index-index-index-index-index-value\
    \ (car (cdr max-index-index-index-index-index-index-index-value))\n    max-index-index-index-index-index-index-index-index-index\
    \ (car (cdr max-index-index-index-index-index-index-index-index-index))\n    max-index-index-index-index-index-index",
  "  (let ((n (len arr)))\n    (if (<= k n)\n      (list (car arr) (maximum (cdr arr)\
    \ k))\n      (maximum (cdr arr) k)))\n)\n", "  (let ((result (make-array k)))\n\
    \    (let ((i 0))\n      (while (< i k)\n        (set! result (list (car arr)\
    \ (car result) (car arr) (car result)))\n        (set! i (+ 1 i)))\n      result)\n\
    \    result))\n", "  (let ((n (length arr)))\n    (if (<= k n)\n      (list (car\
    \ arr) (maximum (cdr arr) k))\n      (maximum (cdr arr) k)\n    )\n  )\n)\n",
  "  (let ((max-arr (list)))\n    (for-each (lambda (x)\n                (if (> x\
    \ arr[0])\n                  (append max-arr (list x))\n                  (append\
    \ max-arr (list (- x arr[0]))))\n                (list (- x arr[0]))))\n     \
    \ (reverse max-arr)))\n", "  (let ((n (length arr)))\n    (if (<= k n)\n     \
    \ (list (car arr) (maximum (cdr arr) k))\n      (maximum (cdr arr) k)))\n)\n",
  "  (let ((result (make-vector k 0)))\n    (for-each (lambda (x) (vector-set! result\
    \ x)) arr)\n    (sort result)\n    (reverse result)\n    (first result)))\n",
  "  (let ((n (length arr)))\n    (if (<= k n)\n      (list (car arr) (maximum (cdr\
    \ arr) k))\n      (maximum (cdr arr) k)))\n)\n", "  (let ((result (make-vector\
    \ k 0)))\n    (for-each (lambda (x) (vector-set! result x)) arr)\n    (sort result)\n\
    \    (reverse result)\n    (first result)))\n", "  (cond ((> k 0)\n         (maximum\
    \ (map (lambda (x) (if (< x arr) arr x)) arr) k))\n    ((= k 0) (list))\n    (else\
    \ (maximum (map (lambda (x) (if (< x arr) arr x)) arr) (sub1 k)))))\n", "  (let\
    \ ((result (make-vector k 0)))\n    (for-each (lambda (i) (vector-set! result\
    \ i (vector-ref arr i)))\n      (if (>= k 0)\n          (vector-set! result (vector-ref\
    \ arr (vector-ref result (- k 1))))\n          (vector-set! result (- k 1))))\n\
    \    result))\n", "  (let ((result (make-vector k 0)))\n    (for-each (lambda\
    \ (x) (vector-set! result x)) arr)\n    (sort result)\n    (reverse result)\n\
    \    (first result)))\n", "  (let ((max-arr (list)))\n    (for-each (lambda (x)\n\
    \                (if (> x arr)\n                    (append max-arr x)\n     \
    \               (append max-arr (list))))\n      (list (- k arr) (- k arr))))\n\
    \  max-arr)\n", "  (let ((result (make-vector k 0)))\n    (for-each (lambda (x)\
    \ (vector-set! result x)) arr)\n    (sort result)\n    (reverse result)\n    (first\
    \ result)))\n", "  (let ((max-index (car (cdr arr))))\n    (if (eq? max-index\
    \ k)\n      (car (cdr (cdr arr)))\n      (maximum (cdr arr) (cdr max-index)))))\n",
  "  (let ((max-index (- k 1)))\n    (if (>= max-index 0)\n      (list (- arr max-index)\
    \ max-index)\n      (list max-index)\n    )\n  )\n)\n", "  (let ((result (make-vector\
    \ k 0)))\n    (for-each (lambda (x) (vector-set! result x)) arr)\n    (sort result)\n\
    \    (reverse result)\n    (first result)))\n", "  (let ((max-index (- k 1)))\n\
    \    (if (<= max-index 0)\n      (list)\n      (let ((max-value (car arr)))\n\
    \        (if (null? max-value)\n          (list)\n          (let ((max-index (cdr\
    \ arr)))\n            (if (<= max-index 0)\n              (list)\n           \
    \   (let ((max-value (car arr)))\n                (if (null? max-value)\n    \
    \              (list)\n                  (let ((max-index (cdr arr)))\n      \
    \              (if (<= max-index 0)\n                      (list)\n          \
    \            (let ((max-value (car arr)))\n                        (if (null?\
    \ max-value)\n                          (list)\n                          (let\
    \ ((max-index (cdr arr)))\n                            (if (<= max-index 0)\n\
    \                              (list)\n                              (let ((max-value\
    \ (car arr)))\n                                (if (null? max-value)\n       \
    \                           (list)\n                                  (let ((max-index\
    \ (cdr arr)))\n                                    (if (<= max-index 0)\n    \
    \                                  (list)\n                                  \
    \    (let ((max-value (car arr)))\n                                        (if\
    \ (null? max-value)\n                                          (list)\n      \
    \                                    (let ((max-index (cdr arr)))\n          \
    \                                  (if (<= max-index 0)\n                    \
    \                          (list)\n                                          \
    \    (let ((max-value (car arr)))\n                                          \
    \      (if (null? max-value)\n                                               \
    \   (list)\n                                                  (let ((max-index\
    \ (cdr arr)))\n                                                    (if (<= max-index\
    \ 0)\n                                                      (list)\n         \
    \                                             (let ((max-value (car arr)))\n \
    \                                                       (if (null? max-value)\n\
    \                                                          (list)\n          \
    \                                                (let ((max-index (cdr arr)))\n\
    \                                                            (if (<= max-index\
    \ 0)\n                                                              "]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
