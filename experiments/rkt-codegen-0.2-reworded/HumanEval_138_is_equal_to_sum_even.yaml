name: HumanEval_138_is_equal_to_sum_even
language: rkt
prompt: "#lang racket\n\n;; Evaluate whether the given number n can be written as\
  \ the sum of exactly 4 positive even numbers\n;; Example\n;; >>> (is_equal_to_sum_even\
  \ 4)\n;; #f\n;; >>> (is_equal_to_sum_even 6)\n;; #f\n;; >>> (is_equal_to_sum_even\
  \ 8)\n;; #t\n(define (is_equal_to_sum_even n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_equal_to_sum_even))\n\
  \    (check-equal? (candidate 4) #f)\n    (check-equal? (candidate 6) #f)\n    (check-equal?\
  \ (candidate 8) #t)\n    (check-equal? (candidate 10) #t)\n    (check-equal? (candidate\
  \ 11) #f)\n    (check-equal? (candidate 12) #t)\n    (check-equal? (candidate 13)\
  \ #f)\n    (check-equal? (candidate 16) #t)\n))\n\n(test-humaneval)"
completions: ["  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2) 0)\n\
    \        (set! sum (+ sum (modulo n 2))))\n      (set! n (- n 1))\n    )\n   \
    \ (= sum 4)\n  )\n)\n\n;; Evaluate whether the given number n can be written as\
    \ the sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2)\
    \ 0)\n        (set! sum (+ sum (modulo n 2))))\n      (set! n (- n 1))))\n  (equal?\
    \ sum 4))\n\n;; Evaluate whether the given number n can be written as the sum\
    \ of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n\
    ;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n\
    ;; #t", "  (let ((result (equal? (modulo n 4) 0))))\n  (if result\n    (begin\n\
    \      (display \"The number \")\n      (display n)\n      (display \" can be\
    \ written as the sum of exactly 4 positive even numbers.\")\n      (exit)\n  \
    \  )\n  )\n)\n\n;; Evaluate whether the given number n can be written as the sum\
    \ of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n\
    ;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n\
    ;; #t", "  (let ((sum (sum 0 (+ n 1))))\n    (and (>= sum 4) (>= sum 0) (even?\
    \ sum) (= sum n))))\n\n;; Evaluate whether the given number n can be written as\
    \ the sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2)\
    \ 0)\n        (set! sum (+ sum 1))\n        (set! n (- n 1))\n      )\n    )\n\
    \    (= sum 4)\n  )\n)\n\n;; Evaluate whether the given number n can be written\
    \ as the sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2)\
    \ 0)\n        (set! sum (+ sum (modulo n 2))))\n      (set! n (- n 1))\n    )\n\
    \    (= sum 4)\n  )\n)\n\n;; Evaluate whether the given number n can be written\
    \ as the sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((sum (make-vector 4 0)))\n    (for-each (lambda (i) (set!\
    \ sum (vector-set! sum i)))\n      (if (zero? n)\n        (return #t)\n      (if\
    \ (even? i)\n        (set! sum (vector-set! sum i))\n      (if (positive? i)\n\
    \        (set! sum (vector-set! sum (- i)))\n      (if (positive? i)\n       \
    \ (set! sum (vector-set! sum (- i)))\n      (if (positive? i)\n        (set! sum\
    \ (vector-set! sum (- i)))\n      (if (positive? i)\n        (set! sum (vector-set!\
    \ sum (- i))))))))))\n;; (is_equal_to_sum_even 8)\n;; #t\n;; (is_equal_to_sum_even\
    \ 6)\n;; #f\n;; (is_equal_to_sum_even 4)\n;; #f\n;; (is_equal_to_sum_even 2)\n\
    ;; #f\n;; (is_equal_to_sum_even 0)\n;; #f\n;; (is_equal_to_sum_even -2)\n;; #f\n\
    ;; (is_equal_to_sum_even -4)\n;; #f\n;; (is_equal_to_sum_even -6)\n;; #f\n;; (is_equal_to_sum_even\
    \ -8)\n;; #f\n;; (is_equal_to_sum_even -10)\n;; #f\n;; (is_equal_to_sum_even -12)\n\
    ;; #f\n;; (is_equal_to_sum_even -14)\n;; #f\n;; (is_equal_to_sum_even -16)\n;;\
    \ #f\n;; (is_equal_to_sum_even -18)\n;; #f\n;; (is_equal_to_sum_even -20)\n;;\
    \ #f\n;; (is_equal_to_sum_even -22)\n;; #f\n;; (is_equal_to_sum_even -24)\n;;\
    \ #f\n;; (is_equal_to_sum_even -26)\n;; #f\n;; (", "  (let ((sum (make-list 0\
    \ 4)))\n    (let ((i 0))\n      (while (< i n)\n        (if (< (car sum) 0)\n\
    \          (setq sum (cdr sum))\n          (setq i (1+ i))))\n      (if (equal?\
    \ sum 4)\n        (progn (display sum) (display \" can be written as the sum of\
    \ exactly 4 positive even numbers\"))\n        (else (display \"can't be written\
    \ as the sum of exactly 4 positive even numbers\"))))\n  nil)\n\n;; Evaluate whether\
    \ the given number n can be written as the sum of exactly 4 positive odd numbers\n\
    ;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum (sum 0 (+ n\
    \ 1))))\n    (and\n      (>= sum 4)\n      (= (mod sum 4) 0))))\n\n;; Evaluate\
    \ whether the given number n can be written as the sum of exactly 4 positive odd\
    \ numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum 0))\n    (while\
    \ (< n 0)\n      (if (< (modulo n 2) 0)\n        (set! sum (+ sum 1))\n      \
    \  (set! n (- n 1)))\n      ()))\n  (= sum 4))\n\n;; Evaluate whether the given\
    \ number n can be written as the sum of exactly 4 positive odd numbers\n;; Example\n\
    ;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n\
    ;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n\
    \      (if (< (modulo n 2) 0)\n        (set! sum (+ sum (modulo n 2))))\n    \
    \  (set! n (- n 1))\n    )\n    (= sum 4)\n  )\n)\n\n;; Evaluate whether the given\
    \ number n can be written as the sum of exactly 3 positive odd numbers\n;; Example\n\
    ;; >>> (is_equal_to_sum_odd 3)\n;; #f\n;; >>> (is_equal_to_sum_odd 5)\n;; #f\n\
    ;; >>> (is_equal_to_sum_odd 7)\n;; #t", "  (let ((sum (make-vector 4 0)))\n  \
    \  (let ((i 0))\n      (while (< i 4)\n        (set! sum (vector-set! sum i (vector-ref\
    \ n i)))\n        (set! i (+ i 2)))\n      (= sum n)))\n)\n\n;; Evaluate whether\
    \ the given number n can be written as the sum of exactly 4 positive odd numbers\n\
    ;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum 0))\n    (while\
    \ (< n 0)\n      (if (< (modulo n 2) 0)\n        (set! sum (+ sum 1))\n      \
    \  (set! n (- n 1)))\n      ()))\n  (= sum 4))\n\n;; Evaluate whether the given\
    \ number n can be written as the sum of exactly 4 positive odd numbers\n;; Example\n\
    ;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n\
    ;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum (make-vector 4 0)))\n  \
    \  (for-each\n      (lambda (i)\n        (set-vector-cell! sum i)\n        (if\
    \ (even? i)\n          (set-vector-cell! sum (+ i 1)))))\n    (= n sum)))\n\n\
    ;; Evaluate whether the given number n can be written as the sum of exactly 4\
    \ positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;;\
    \ >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t",
  "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2) 0)\n        (set!\
    \ sum (+ sum (modulo n 2))))\n      (set! n (- n 1))\n    )\n    (= sum 4)\n \
    \ )\n)\n\n;; Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n\
    ;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n\
    ;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2) 0)\n\
    \        (set! sum (+ sum (modulo n 2))))\n      (set! n (- n 1))\n    )\n   \
    \ (= sum 4)\n  )\n)\n\n;; Evaluate whether the given number n can be written as\
    \ the sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2)\
    \ 0)\n        (set! sum (+ sum (modulo n 2))))\n      (set! n (- n 1))\n    )\n\
    \    (= sum 4)\n  )\n)\n\n;; Evaluate whether the given number n can be written\
    \ as the sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2)\
    \ 0)\n        (set! sum (+ sum 1))\n        (set! n (- n 1))))\n    (= sum 4)))\n\
    \n;; Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n\
    ;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t",
  "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2) 0)\n        (set!\
    \ sum (+ sum (modulo n 2))))\n      (set! n (- n 1))\n    )\n    (= sum 4)\n \
    \ )\n)\n\n;; Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n\
    ;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n\
    ;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2) 0)\n\
    \        (set! sum (+ sum (modulo n 2))))\n      (set! n (- n 1))\n    )\n   \
    \ (= sum 4)\n  )\n)\n\n;; Evaluate whether the given number n can be written as\
    \ the sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2)\
    \ 0)\n        (set! sum (+ sum (modulo n 2))))\n      (set! n (- n 1))\n    )\n\
    \    (= sum 4)\n  )\n)\n\n;; Evaluate whether the given number n can be written\
    \ as the sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2)\
    \ 0)\n        (set! sum (+ sum 1))\n        (set! n (- n 1))))\n    (= sum 4)))\n\
    \n;; Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n\
    ;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t",
  "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2) 0)\n        (set!\
    \ sum (+ sum (modulo n 2))))\n      (set! n (- n 1))\n    )\n    (= sum 4)\n \
    \ )\n)\n\n;; Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n\
    ;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n\
    ;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2) 0)\n\
    \        (set! sum (+ sum (modulo n 2))))\n      (set! n (- n 1))\n    )\n   \
    \ (= sum 4)\n  )\n)\n\n;; Evaluate whether the given number n can be written as\
    \ the sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2)\
    \ 0)\n        (set! sum (+ sum 1))\n        (set! n (- n 1)))\n      )\n    (=\
    \ sum 4)\n    )\n  )\n\n;; Evaluate whether the given number n can be written\
    \ as the sum of exactly 3 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 3)\n;; #f\n;; >>> (is_equal_to_sum_odd 5)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 7)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2)\
    \ 0)\n        (set! sum (+ sum (modulo n 2))))\n      (set! n (- n 1))\n    )\n\
    \    (= sum 4)\n  )\n)\n\n;; Evaluate whether the given number n can be written\
    \ as the sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2)\
    \ 0)\n        (set! sum (+ sum (modulo n 2))))\n      (set! n (- n 1))\n    )\n\
    \    (= sum 4)\n  )\n)\n\n;; Evaluate whether the given number n can be written\
    \ as the sum of exactly 3 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 3)\n;; #f\n;; >>> (is_equal_to_sum_odd 5)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 7)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2)\
    \ 0)\n        (set! sum (+ sum (modulo n 2))))\n      (set! n (- n 1))))\n  (equal?\
    \ sum 4))\n\n;; Evaluate whether the given number n can be written as the sum\
    \ of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n\
    ;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n\
    ;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2) 0)\n\
    \        (set! sum (+ sum 1))\n        (set! n (- n 1)))\n      ()))\n  (= sum\
    \ 4))\n\n;; Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n\
    ;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t",
  "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2) 0)\n        (set!\
    \ sum (+ sum 1))\n        (set! n (- n 1)))\n      ()))\n  (= sum 4))\n\n;; Evaluate\
    \ whether the given number n can be written as the sum of exactly 4 positive odd\
    \ numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum (make-vector\
    \ 4 0)))\n    (let ((i 0))\n      (while (< i 4)\n        (set! i (+ i 2))\n \
    \       (if (< n (vector-ref sum i))\n          (return #f)\n          (vector-set!\
    \ sum i (vector-ref sum i) + n)\n        )\n      )\n      (return #t)\n    )\n\
    \  )\n)\n\n;; Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n\
    ;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n\
    ;; #t", "  (let ((sum (make-vector 4 0)))\n    (for-each\n      (lambda (i)\n\
    \        (set! sum (vector-set! sum i n))\n      )\n      (range 1 4)\n    )\n\
    \    (equal? sum 4)\n  )\n)\n\n;; Evaluate whether the given number n can be written\
    \ as the sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((sum (make-vector 4 0)))\n    (for-each\n      (lambda\
    \ (i)\n        (set! sum (vector-set! sum i n))\n      )\n      (range 1 4)\n\
    \    )\n    (equal? sum 4)\n  )\n)\n\n;; Evaluate whether the given number n can\
    \ be written as the sum of exactly 4 positive odd numbers\n;; Example\n;; >>>\
    \ (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>>\
    \ (is_equal_to_sum_odd 8)\n;; #t", "  (let ((n (abs n)))\n    (if (< n 4)\n  \
    \    #f\n      (let ((sum 0))\n        (while (< n 0)\n          (if (< n 2)\n\
    \            (set! sum (+ sum 2))\n            (set! n (- n 1)))\n          (set!\
    \ sum (+ sum 4)))\n        (if (= n sum)\n          #t\n          #f))))))\n\n\
    ;; Evaluate whether the given number n can be written as the sum of exactly 4\
    \ positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;;\
    \ >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t",
  "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2) 0)\n        (set!\
    \ sum (+ sum (modulo n 2))))\n      (set! n (- n 1))\n    )\n    (= sum 4)\n \
    \ )\n)\n\n;; Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n\
    ;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n\
    ;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2) 0)\n\
    \        (set! sum (+ sum 1))\n        (set! n (- n 1)))\n      ()))\n  (= sum\
    \ 4))\n\n;; Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n\
    ;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t",
  "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2) 0)\n        (set!\
    \ sum (+ sum 1))\n        (set! n (- n 1)))\n      ()))\n  (= sum 4))\n\n;; Evaluate\
    \ whether the given number n can be written as the sum of exactly 4 positive odd\
    \ numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum 0))\n    (while\
    \ (< n 0)\n      (if (< (modulo n 2) 0)\n        (set! sum (+ sum (modulo n 2))))\n\
    \      (set! n (- n 1))\n    )\n    (= sum 4)\n  )\n)\n\n;; Evaluate whether the\
    \ given number n can be written as the sum of exactly 4 positive odd numbers\n\
    ;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum 0))\n    (while\
    \ (< n 0)\n      (if (< (modulo n 2) 0)\n        (set! sum (+ sum (modulo n 2))))\n\
    \      (set! n (- n 1))\n    )\n    (= sum 4)\n  )\n)\n\n;; Evaluate whether the\
    \ given number n can be written as the sum of exactly 4 positive odd numbers\n\
    ;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum 0))\n    (while\
    \ (< n 0)\n      (if (< (modulo n 2) 0)\n        (set! sum (+ sum 1))\n      \
    \  (set! n (- n 1)))\n      ()))\n  (= sum 4))\n\n;; Evaluate whether the given\
    \ number n can be written as the sum of exactly 4 positive odd numbers\n;; Example\n\
    ;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n\
    ;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum (make-vector 4 0)))\n  \
    \  (let ((i 0))\n      (while (< i 4)\n        (set! sum (vector-set! sum i (vector-ref\
    \ n i)))\n        (set! i (+ i 2)))\n      (= sum n)))\n)\n\n;; Evaluate whether\
    \ the given number n can be written as the sum of exactly 4 positive odd numbers\n\
    ;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum 0))\n    (while\
    \ (< n 0)\n      (if (< (modulo n 2) 0)\n        (set! sum (+ sum 1))\n      \
    \  (set! n (- n 1)))\n      ()))\n  (= sum 4))\n\n;; Evaluate whether the given\
    \ number n can be written as the sum of exactly 4 positive odd numbers\n;; Example\n\
    ;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n\
    ;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n\
    \      (if (< (modulo n 2) 0)\n        (set! sum (+ sum (modulo n 2))))\n    \
    \  (set! n (- n 1))\n    )\n    (= sum 4)\n  )\n)\n\n;; Evaluate whether the given\
    \ number n can be written as the sum of exactly 4 positive odd numbers\n;; Example\n\
    ;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n\
    ;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum (make-vector 4 0)))\n  \
    \  (let ((i 0))\n      (while (< i 4)\n        (set! sum (vector-set! sum i (vector-ref\
    \ n i)))\n        (set! i (+ i 2)))\n      (= sum n)))\n)\n\n;; Evaluate whether\
    \ the given number n can be written as the sum of exactly 4 positive odd numbers\n\
    ;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((n (abs n)))\n \
    \   (if (< n 4)\n      #f\n      (if (even? n)\n        (let ((sum 0))\n     \
    \     (while (< n 0)\n            (setq sum (+ sum (quotient n 2)))\n        \
    \    (setq n (- n 1)))\n          (if (not (even? sum))\n            #f\n    \
    \        (if (not (odd? n))\n              #f\n              (if (not (even? (quotient\
    \ sum 2)))\n                #f\n                (if (not (even? (quotient sum\
    \ 4)))\n                  #f\n                  (if (not (even? (quotient sum\
    \ 6)))\n                    #f\n                    (if (not (even? (quotient\
    \ sum 8)))\n                      #t\n                      #f
  "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2) 0)\n        (set!\
    \ sum (+ sum (modulo n 2))))\n      (set! n (- n 1))\n    )\n    (= sum 4)\n \
    \ )\n)\n\n;; Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n\
    ;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n\
    ;; #t", "  (let ((n (abs n)))\n    (if (< n 4)\n      #f\n      (let ((sum (0))\
    \ (i (1)))\n        (while (<= i n)\n          (if (even? i)\n            (set!\
    \ sum (+ sum i))\n            (set! i (+ i 2)))\n          (set! i (+ i 1)))\n\
    \        (if (not (even? sum))\n          #f\n          (if (not (odd? n))\n \
    \           #t\n            (if (not (even? n))\n              #f\n          \
    \    (if (odd? sum)\n                #f\n                (if (odd? n)\n      \
    \            #f\n                  (if (odd? i)\n                    #f\n    \
    \                (if (odd? sum)\n                      #f\n                  \
    \    (if (odd? i)\n                        #f\n                        (if (odd?\
    \ n)\n                          #f\n                          (if (odd? i)\n \
    \                           #f\n                            (if (odd? sum)\n \
    \                             #f\n                              (if (odd? n)\n\
    \                                #f\n                                #f
  "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2) 0)\n        (set!\
    \ sum (+ sum 1))\n        (set! n (- n 1))\n      )\n    )\n    (= sum 4)\n  )\n\
    )\n\n;; Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n\
    ;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t",
  "  (let ((n (abs n)))\n    (if (< n 0)\n      #f\n      (let ((sum (0)))\n     \
    \   (while (< n 0)\n          (if (< (modulo n 2) 0)\n            (set! sum (+\
    \ sum (modulo n 2))))\n          (set! n (- n 1)))))\n    (= n sum)))\n\n;; Evaluate\
    \ whether the given number n can be written as the sum of exactly 4 positive odd\
    \ numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum 0))\n    (while\
    \ (< n 0)\n      (if (< (modulo n 2) 0)\n        (set! sum (+ sum (modulo n 2))))\n\
    \      (set! n (- n 1))\n    )\n    (= sum 4)\n  )\n)\n\n;; Evaluate whether the\
    \ given number n can be written as the sum of exactly 4 positive odd numbers\n\
    ;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum (make-vector\
    \ 4 0)))\n    (let ((i 0))\n      (while (< i 4)\n        (set! sum (vector-set!\
    \ sum i (vector-ref n i)))\n        (set! i (vector-set! i (+ i 2)))\n      )\n\
    \      (equal? sum 4)\n    )\n  )\n)\n\n;; Evaluate whether the given number n\
    \ can be written as the sum of exactly 3 positive odd numbers\n;; Example\n;;\
    \ >>> (is_equal_to_sum_odd 3)\n;; #f\n;; >>> (is_equal_to_sum_odd 5)\n;; #f\n\
    ;; >>> (is_equal_to_sum_odd 7)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n\
    \      (if (< (modulo n 2) 0)\n        (set! sum (+ sum 1))\n        (set! n (-\
    \ n 1)))\n      ()))\n  (= sum 4))\n\n;; Evaluate whether the given number n can\
    \ be written as the sum of exactly 4 positive odd numbers\n;; Example\n;; >>>\
    \ (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>>\
    \ (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n   \
    \   (if (< (modulo n 2) 0)\n        (set! sum (+ sum (modulo n 2))))\n      (set!\
    \ n (- n 1))\n    )\n    (= sum 4)\n  )\n)\n\n;; Evaluate whether the given number\
    \ n can be written as the sum of exactly 4 positive odd numbers\n;; Example\n\
    ;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n\
    ;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n\
    \      (if (< (modulo n 2) 0)\n        (set! sum (+ sum (modulo n 2))))\n    \
    \  (set! n (- n 1))\n    )\n    (= sum 4)\n  )\n)\n\n;; Evaluate whether the given\
    \ number n can be written as the sum of exactly 4 positive odd numbers\n;; Example\n\
    ;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n\
    ;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n\
    \      (if (< (modulo n 2) 0)\n        (set! sum (+ sum 1))\n        (set! n (-\
    \ n 1))\n      )\n    )\n    (= sum 4)\n  )\n)\n\n;; Evaluate whether the given\
    \ number n can be written as the sum of exactly 4 positive odd numbers\n;; Example\n\
    ;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n\
    ;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n\
    \      (if (< (modulo n 2) 0)\n        (set! sum (+ sum (modulo n 2))))\n    \
    \  (set! n (- n 1))\n    )\n    (= sum 4)\n  )\n)\n\n;; Evaluate whether the given\
    \ number n can be written as the sum of exactly 4 positive odd numbers\n;; Example\n\
    ;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n\
    ;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((n (number->string n)))\n   \
    \ (if (string->number (string->number n))\n      (let ((n (string->number n)))\n\
    \        (if (even? n)\n          (if (zero? n)\n            #t\n            (let\
    \ ((n (string->number n)))\n              (if (zero? n)\n                #f\n\
    \                (let ((n (string->number n)))\n                  (if (even? n)\n\
    \                    #t\n                    (let ((n (string->number n)))\n \
    \                     (if (zero? n)\n                        #f\n            \
    \            (let ((n (string->number n)))\n                          (if (even?\
    \ n)\n                            #t\n                            (let ((n (string->number\
    \ n)))\n                              (if (zero? n)\n                        \
    \        #f\n                                #t
  "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2) 0)\n        (set!\
    \ sum (+ sum 1))\n        (set! n (- n 1))))\n    (= sum 4)))\n\n;; Evaluate whether\
    \ the given number n can be written as the sum of exactly 4 positive odd numbers\n\
    ;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum (make-vector\
    \ 4 0)))\n    (let ((i 0))\n      (while (< i 4)\n        (set! sum (vector-set!\
    \ sum i (vector-ref n i)))\n        (set! i (+ i 2)))\n      (= sum n)))\n)\n\n\
    ;; Evaluate whether the given number n can be written as the sum of exactly 4\
    \ positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;;\
    \ >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t",
  "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2) 0)\n        (set!\
    \ sum (+ sum (modulo n 2))))\n      (set! n (- n 1))))\n  (= sum 4))\n\n;; Evaluate\
    \ whether the given number n can be written as the sum of exactly 4 positive odd\
    \ numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum (make-vector\
    \ 4 0)))\n    (let ((i 0))\n      (while (< i 4)\n        (set! sum (vector-set!\
    \ sum i (vector-ref n i)))\n        (set! i (+ i 2)))\n      (= sum n)))\n)\n\n\
    ;; Evaluate whether the given number n can be written as the sum of exactly 4\
    \ positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;;\
    \ >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t",
  "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2) 0)\n        (set!\
    \ sum (+ sum (modulo n 2))))\n      (set! n (- n 1))\n    )\n    (= sum 4)\n \
    \ )\n)\n\n;; Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n\
    ;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n\
    ;; #t", "  (let ((n (number->string n)))\n    (let ((sum (string->number (string-append\
    \ \"0\" (string-append \"2\" (string-append \"4\" (string-append \"6\" (string-append\
    \ \"8\" (string-append \"10\" (string-append \"12\" (string-append \"14\" (string-append\
    \ \"16\"))))))))))))\n    (equal? (string->number sum) n)))\n\n;; Evaluate whether\
    \ the given number n can be written as the sum of exactly 4 positive odd numbers\n\
    ;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((n (number->string\
    \ n)))\n    (if (string? n)\n      (let ((n (string->number n)))\n        (if\
    \ (not (even? n))\n          #f\n          (let ((sum (sum (string->number (substring\
    \ n 0 2)))))\n            (if (not (even? sum))\n              #f\n          \
    \    (let ((sum (string->number (substring n 4))))\n                (if (not (even?\
    \ sum))\n                  #f\n                  (let ((sum (string->number (substring\
    \ n 6))))\n                    (if (not (even? sum))\n                      #f\n\
    \                      (let ((sum (string->number (substring n 8))))\n       \
    \                 (if (not (even? sum))\n                          #f\n      \
    \                    (let ((sum (string->number (substring n 10))))\n        \
    \                    (if (not (even? sum))\n                              #f\n\
    \                              (let ((sum (string->number (substring n 12))))\n\
    \                                (if (not (even? sum))\n                     \
    \             #f\n                                  (let ((sum (string->number\
    \ (substring n 14))))\n                                    (if (not (even? sum))\n\
    \                                      #f\n                                  \
    \    (let ((sum (string->number (substring n 16))))\n                        \
    \                (if (not (even? sum))\n                                     \
    \     #f\n                                          (let ((sum (string->number\
    \ (substring n 18))))\n                                            (if (not (even?\
    \ sum))\n                                              #f\n                  \
    \                            (let ((sum (string->number (substring n 20))))\n\
    \                                                (if (not (even? sum))\n     \
    \                                             #f\n                           \
    \                       (let ((sum (string->number (substring n 22))))\n     \
    \                                               (if (not (even? sum))\n      \
    \                                                #f\n                        \
    \                              (let ((sum (string->number (substring n 24))))\n\
    \                                                        (if (not (even? sum))\n\
    \                                                          #f\n              \
    \                                            (let ((sum (string->number (", " \
    \ (let ((sum (make-vector 4 0)))\n    (let ((i 0))\n      (while (< i 4)\n   \
    \     (set! sum (vector-set! sum i (vector-ref n i)))\n        (set! i (+ i 2)))\n\
    \      (= sum n)))\n)\n\n;; Evaluate whether the given number n can be written\
    \ as the sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2)\
    \ 0)\n        (set! sum (+ sum (modulo n 2))))\n      (set! n (- n 1))\n    )\n\
    \    (= sum 4)\n  )\n)\n\n;; Evaluate whether the given number n can be written\
    \ as the sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((n (abs n)))\n    (if (< n 4)\n      #f\n      (let ((sum\
    \ 0))\n        (while (< n 0)\n          (if (< n 2)\n            (set! sum (+\
    \ sum 1))\n            (set! n (- n 1)))\n          (set! sum (+ sum 2))\n   \
    \       (set! n (- n 1)))\n        (if (= n 0)\n          (if (= sum 4)\n    \
    \        #t\n            #f)\n          (if (>= sum 4)\n            #t\n     \
    \       #f)))))))\n\n;; Evaluate whether the given number n can be written as\
    \ the sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((sum (sum 0 (+ n 1))))\n    (= (car sum) 4)\n    (= (cdr\
    \ sum) nil)\n    (= (car (cdr sum)) 2)\n    (= (car (cdr (cdr sum))) 2)\n    (=\
    \ (car (cdr (cdr (cdr sum)))) 2)\n    (= (car (cdr (cdr (cdr (cdr sum)))))) 2)))\n\
    \n;; Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n\
    ;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t",
  "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2) 0)\n        (set!\
    \ sum (+ sum (modulo n 2))))\n      (set! n (- n 1))\n    )\n    (= sum 4)\n \
    \ )\n)\n\n;; Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n\
    ;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n\
    ;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2) 0)\n\
    \        (set! sum (+ sum (modulo n 2))))\n      (set! n (- n 1))\n    )\n   \
    \ (= sum 4)\n  )\n)\n\n;; Evaluate whether the given number n can be written as\
    \ the sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2)\
    \ 0)\n        (set! sum (+ sum (modulo n 2))))\n      (set! n (- n 1))\n    )\n\
    \    (= sum 4)\n  )\n)\n\n;; Evaluate whether the given number n can be written\
    \ as the sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((sum (make-list 0 4)))\n    (for-each\n      (lambda (i)\n\
    \        (if (even? i)\n            (append sum (make-list i)))\n      )\n   \
    \   n\n    )\n    (equal? sum 4)\n  )\n)\n\n;; Evaluate whether the given number\
    \ n can be written as the sum of exactly 4 positive odd numbers\n;; Example\n\
    ;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n\
    ;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n\
    \      (if (< (modulo n 2) 0)\n        (set! sum (+ sum 1))\n        (set! n (-\
    \ n 1)))\n      )\n    (= sum 4)\n    )\n  )\n\n;;; (is_equal_to_sum_even 4)\n\
    ;;; #f\n;;; (is_equal_to_sum_even 6)\n;;; #f\n;;; (is_equal_to_sum_even 8)\n;;;\
    \ #t\n;;; (is_equal_to_sum_even 9)\n;;; #f\n;;; (is_equal_to_sum_even 10)\n;;;\
    \ #f\n;;; (is_equal_to_sum_even 11)\n;;; #t\n;;; (is_equal_to_sum_even 12)\n;;;\
    \ #f\n;;; (is_equal_to_sum_even 13)\n;;; #f\n;;; (is_equal_to_sum_even 14)\n;;;\
    \ #t\n;;; (is_equal_to_sum_even 15)\n;;; #f\n;;; (is_equal_to_sum_even 16)\n;;;\
    \ #f\n;;; (is_equal_to_sum_even 17)\n;;; #t\n;;; (is_equal_to_sum_even 18)\n;;;\
    \ #f\n;;; (is_equal_to_sum_even 19)\n;;; #f\n;;; (is_equal_to_sum_even 20)\n;;;\
    \ #t\n;;; (is_equal_to_sum_even 21)\n;;; #f\n;;; (is_equal_to_sum_even 22)\n;;;\
    \ #f\n;;; (is_equal_to_sum_even 23)\n;;; #t\n;;; (is_equal_to_sum_even 24)\n;;;\
    \ #f\n;;; (is_equal_to_sum_even 25)\n;;; #f\n;;; (is_equal_to_sum_even 26)\n;;;\
    \ #t\n;;; (is_equal_to_sum_even 27)\n;;; #f\n;;; (is_equal", "  (let ((sum 0))\n\
    \    (while (< n 0)\n      (if (< (modulo n 2) 0)\n        (set! sum (+ sum (modulo\
    \ n 2))))\n      (set! n (- n 1))\n    )\n    (= sum 4)\n  )\n)\n\n;; Evaluate\
    \ whether the given number n can be written as the sum of exactly 4 positive odd\
    \ numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum (make-vector\
    \ 4 0)))\n    (let ((i 0))\n      (while (< i 4)\n        (set! sum (vector-set!\
    \ sum i (vector-ref n i)))\n        (set! i (+ i 2)))\n      (= sum n)))\n)\n\n\
    ;; Evaluate whether the given number n can be written as the sum of exactly 4\
    \ positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;;\
    \ >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t",
  "  (let ((n (number->string n)))\n    (let ((result (string->number (string-append\
    \ \"0\" (string-append \"2\" (string-append \"4\" (string-append \"6\" (string-append\
    \ \"8\" (string-append \"10\" (string-append \"12\" (string-append \"14\" (string-append\
    \ \"16\"))))))))))))\n    (equal? result n)))\n\n;; Evaluate whether the given\
    \ number n can be written as the sum of exactly 4 positive odd numbers\n;; Example\n\
    ;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n\
    ;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum (make-list 0 4)))\n    (for-each\n\
    \      (lambda (i)\n        (if (even? i)\n            (append sum (make-list\
    \ i))\n            (else\n              (return #f))))\n      n))\n)\n\n;; Evaluate\
    \ whether the given number n can be written as the sum of exactly 4 positive odd\
    \ numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum 0))\n    (while\
    \ (< n 0)\n      (if (< (modulo n 2) 0)\n        (set! sum (+ sum (modulo n 2))))\n\
    \      (set! n (- n 1))\n    )\n    (= sum 4)\n  )\n)\n\n;; Evaluate whether the\
    \ given number n can be written as the sum of exactly 4 positive odd numbers\n\
    ;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum 0))\n    (while\
    \ (< n 0)\n      (if (< (modulo n 2) 0)\n        (set! sum (+ sum (modulo n 2))))\n\
    \      (set! n (- n 1))\n    )\n    (= sum 4)\n  )\n)\n\n;; Evaluate whether the\
    \ given number n can be written as the sum of exactly 4 positive odd numbers\n\
    ;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum 0))\n    (while\
    \ (< n 0)\n      (if (< (modulo n 2) 0)\n        (set! sum (+ sum (modulo n 2))))\n\
    \      (set! n (- n 1))\n    )\n    (= sum 4)\n  )\n)\n\n;; Evaluate whether the\
    \ given number n can be written as the sum of exactly 4 positive odd numbers\n\
    ;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((n (number->string\
    \ n)))\n    (if (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (", "  (let ((sum (make-vector 4 0)))\n    (let ((i 0))\n      (while (< i 4)\n\
    \        (set! sum (vector-set! sum i (vector-ref n i)))\n        (set! i (+ i\
    \ 2)))\n      (= sum n)))\n)\n\n;; Evaluate whether the given number n can be\
    \ written as the sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((sum (sum (sum (sum (sum (sum (sum n))))))))\n    (equal?\
    \ sum n)))\n)\n\n;; Evaluate whether the given number n can be written as the\
    \ sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2)\
    \ 0)\n        (set! sum (+ sum (modulo n 2))))\n      (set! n (- n 1))\n    )\n\
    \    (= sum 4)\n  )\n)\n\n;; Evaluate whether the given number n can be written\
    \ as the sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2)\
    \ 0)\n        (set! sum (+ sum (modulo n 2))))\n      (set! n (- n 1))\n    )\n\
    \    (= sum 4)\n  )\n)\n\n;; Evaluate whether the given number n can be written\
    \ as the sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2)\
    \ 0)\n        (set! sum (+ sum 1))\n        (set! n (- n 1))\n      )\n    )\n\
    \    (= sum 4)\n  )\n)\n\n;; Evaluate whether the given number n can be written\
    \ as the sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((sum (make-list 0 4)))\n    (for-each\n      (lambda (i)\n\
    \        (if (even? i)\n            (append sum (make-list i))\n            (else\n\
    \              (return #f))))\n      n))\n)\n\n;; Evaluate whether the given number\
    \ n can be written as the sum of exactly 4 positive odd numbers\n;; Example\n\
    ;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n\
    ;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n\
    \      (if (< (modulo n 2) 0)\n        (set! sum (+ sum 1))\n        (set! n (-\
    \ n 1)))\n      ()))\n  (= sum 4))\n\n;; Evaluate whether the given number n can\
    \ be written as the sum of exactly 4 positive odd numbers\n;; Example\n;; >>>\
    \ (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>>\
    \ (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n   \
    \   (if (< (modulo n 2) 0)\n        (set! sum (+ sum 1))\n        (set! n (- n\
    \ 1)))\n      ()))\n  (equal? sum 4))\n\n;; Evaluate whether the given number\
    \ n can be written as the sum of exactly 3 positive odd numbers\n;; Example\n\
    ;; >>> (is_equal_to_sum_odd 3)\n;; #f\n;; >>> (is_equal_to_sum_odd 5)\n;; #f\n\
    ;; >>> (is_equal_to_sum_odd 7)\n;; #t", "  (let ((sum (make-vector 4 0)))\n  \
    \  (for-each\n      (lambda (i)\n        (set-vector-cell! sum i)\n        (if\
    \ (even? i)\n          (set-vector-cell! sum (+ i 1)))\n        (if (zero? i)\n\
    \          (set-vector-cell! sum (+ i 2)))\n        (if (zero? i)\n          (set-vector-cell!\
    \ sum (+ i 3)))\n        (if (zero? i)\n          (set-vector-cell! sum (+ i 4))))\n\
    \      n)\n    (equal? sum n)))\n\n;; Evaluate whether the given number n can\
    \ be written as the sum of exactly 4 positive odd numbers\n;; Example\n;; >>>\
    \ (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>>\
    \ (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum (make-vector 4 0)))\n    (let\
    \ ((i 0))\n      (while (< i 4)\n        (set! sum (vector-set! sum i (vector-ref\
    \ n i)))\n        (set! i (+ i 2)))\n      (= sum n)))\n)\n\n;; Evaluate whether\
    \ the given number n can be written as the sum of exactly 3 positive odd numbers\n\
    ;; Example\n;; >>> (is_equal_to_sum_odd 3)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 5)\n;; #t\n;; >>> (is_equal_to_sum_odd 7)\n;; #f", "  (let ((sum 0))\n    (while\
    \ (< n 0)\n      (if (< (modulo n 2) 0)\n        (set! sum (+ sum 1))\n      \
    \  (set! n (- n 1))\n      )\n    )\n    (= sum 4)\n  )\n)\n\n;; Evaluate whether\
    \ the given number n can be written as the sum of exactly 3 positive odd numbers\n\
    ;; Example\n;; >>> (is_equal_to_sum_odd 3)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 5)\n;; #f\n;; >>> (is_equal_to_sum_odd 7)\n;; #t", "  (let ((n (number->string\
    \ n)))\n    (if (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (", "  (let ((sum (make-list 0 4)))\n    (let ((i 0))\n      (while (< i n)\n\
    \        (set! i (+ i 2))\n        (if (> (car sum) i)\n          (return #f)\n\
    \          (set! (cdr sum) (make-list i)))))\n    (car sum)))\n\n;; Evaluate whether\
    \ the given number n can be written as the sum of exactly 4 positive odd numbers\n\
    ;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum 0))\n    (while\
    \ (< n 0)\n      (if (< (modulo n 2) 0)\n        (set! sum (+ sum (modulo n 2))))\n\
    \      (set! n (- n 1))\n    )\n    (= sum 4)\n  )\n)\n\n;; Evaluate whether the\
    \ given number n can be written as the sum of exactly 4 positive odd numbers\n\
    ;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum 0))\n    (while\
    \ (< n 0)\n      (if (< (modulo n 2) 0)\n        (set! sum (+ sum (modulo n 2))))\n\
    \      (set! n (- n 1))\n    )\n    (= sum 4)\n  )\n)\n\n;; Evaluate whether the\
    \ given number n can be written as the sum of exactly 4 positive odd numbers\n\
    ;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum (make-vector\
    \ 4 0)))\n    (for-each\n      (lambda (i)\n        (set-vector-cell! sum i)\n\
    \        (if (even? i)\n          (set-vector-cell! sum (+ i 1)))\n        (if\
    \ (zero? i)\n          (set-vector-cell! sum (+ i 2)))\n        (if (zero? i)\n\
    \          (set-vector-cell! sum (+ i 3)))\n        (if (zero? i)\n          (set-vector-cell!\
    \ sum (+ i 4))))\n      n)\n    (equal? sum n)))\n\n;; Evaluate whether the given\
    \ number n can be written as the sum of exactly 3 positive odd numbers\n;; Example\n\
    ;; >>> (is_equal_to_sum_odd 3)\n;; #f\n;; >>> (is_equal_to_sum_odd 5)\n;; #f\n\
    ;; >>> (is_equal_to_sum_odd 7)\n;; #t", "  (let ((sum (sum_even n)))\n    (and\n\
    \      (>= sum 4)\n      (= (mod sum 4) 0))))\n\n;; Evaluate whether the given\
    \ number n can be written as the sum of exactly 4 positive odd numbers\n;; Example\n\
    ;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n\
    ;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n\
    \      (if (< (modulo n 2) 0)\n        (set! sum (+ sum 1))\n        (set! n (-\
    \ n 1)))\n      )\n    (= sum 4)\n    )\n  )\n\n;; Evaluate whether the given\
    \ number n can be written as the sum of exactly 4 positive odd numbers\n;; Example\n\
    ;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n\
    ;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n\
    \      (if (< (modulo n 2) 0)\n        (set! sum (+ sum 1))\n        (set! n (-\
    \ n 1))\n      )\n    )\n    (= sum 4)\n  )\n)\n\n;; Evaluate whether the given\
    \ number n can be written as the sum of exactly 4 positive odd numbers\n;; Example\n\
    ;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n\
    ;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n\
    \      (if (< (modulo n 2) 0)\n        (set! sum (+ sum (modulo n 2))))\n    \
    \  (set! n (- n 1))\n    )\n    (= sum 4)\n  )\n)\n\n;; Evaluate whether the given\
    \ number n can be written as the sum of exactly 3 positive odd numbers\n;; Example\n\
    ;; >>> (is_equal_to_sum_odd 3)\n;; #f\n;; >>> (is_equal_to_sum_odd 5)\n;; #f\n\
    ;; >>> (is_equal_to_sum_odd 7)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n\
    \      (if (< (modulo n 2) 0)\n        (set! sum (+ sum (modulo n 2))))\n    \
    \  (set! n (- n 1))\n    )\n    (= sum 4)\n  )\n)\n\n;; Evaluate whether the given\
    \ number n can be written as the sum of exactly 4 positive odd numbers\n;; Example\n\
    ;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n\
    ;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n\
    \      (if (< (modulo n 2) 0)\n        (set! sum (+ sum (modulo n 2))))\n    \
    \  (set! n (- n 1))\n    )\n    (= sum 4)\n  )\n)\n\n;; Evaluate whether the given\
    \ number n can be written as the sum of exactly 4 positive odd numbers\n;; Example\n\
    ;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n\
    ;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((result (equal? (modulo n 4)\
    \ 0))))\n  (if result\n    (begin\n      (display \"The number \")\n      (display\
    \ n)\n      (display \" can be written as the sum of exactly 4 positive even numbers.\"\
    )\n      (exit)\n    )\n  )\n)\n\n;; Evaluate whether the given number n can be\
    \ written as the sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2)\
    \ 0)\n        (set! sum (+ sum 1))\n        (set! n (- n 1))\n      )\n    )\n\
    \    (= sum 4)\n  )\n)\n\n;; Evaluate whether the given number n can be written\
    \ as the sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((sum (make-list 0 4)))\n    (for-each (lambda (x) (set-car!\
    \ sum x)) (make-list n))\n    (equal? (car sum) n)))\n\n;; Evaluate whether the\
    \ given number n can be written as the sum of exactly 4 positive odd numbers\n\
    ;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum (make-list\
    \ 0 4)))\n    (let ((even (make-list 0 2)))\n      (let ((even_sum 0))\n     \
    \   (while (< n sum)\n          (if (<= even_sum 4)\n            (setq even_sum\
    \ (even_sum + 2))\n            (setq even (even_sum 0))\n            (setq sum\
    \ (sum - 2)))\n          (setq even_sum (even_sum + 2)))\n        (and (= even_sum\
    \ 4)\n             (= n sum))))))\n\n;; Evaluate whether the given number n can\
    \ be written as the sum of exactly 4 positive odd numbers\n;; Example\n;; >>>\
    \ (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>>\
    \ (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum (make-list 0 4)))\n    (let ((i\
    \ 0))\n      (while (< i n)\n        (set! i (+ i 2))\n        (if (even? i)\n\
    \          (append sum (make-list i)))\n        )\n      )\n    (equal? sum 4)\n\
    \    )\n  )\n\n;; Evaluate whether the given number n can be written as the sum\
    \ of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n\
    ;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n\
    ;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2) 0)\n\
    \        (set! sum (+ sum 1))\n        (set! n (- n 1)))\n      ()))\n  (= sum\
    \ 4))\n\n;; Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n\
    ;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t",
  "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2) 0)\n        (set!\
    \ sum (+ sum (modulo n 2))))\n      (set! n (- n 1))\n    )\n    (= sum 4)\n \
    \ )\n)\n\n;; Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n\
    ;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n\
    ;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2) 0)\n\
    \        (set! sum (+ sum (modulo n 2))))\n      (set! n (- n 1))\n    )\n   \
    \ (= sum 4)\n  )\n)\n\n;; Evaluate whether the given number n can be written as\
    \ the sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2)\
    \ 0)\n        (set! sum (+ sum 1))\n        (set! n (- n 1)))\n      )\n    (=\
    \ sum 4)))\n\n;; Evaluate whether the given number n can be written as the sum\
    \ of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n\
    ;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n\
    ;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2) 0)\n\
    \        (set! sum (+ sum (modulo n 2))))\n      (set! n (- n 1))\n    )\n   \
    \ (= sum 4)\n  )\n)\n\n;; Evaluate whether the given number n can be written as\
    \ the sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2)\
    \ 0)\n        (set! sum (+ sum 1))\n        (set! n (- n 1)))\n      ()))\n  (=\
    \ sum 4))\n\n;; Evaluate whether the given number n can be written as the sum\
    \ of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n\
    ;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n\
    ;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2) 0)\n\
    \        (set! sum (+ sum 1))\n        (set! n (- n 1)))\n      ()))\n  (= sum\
    \ 4))\n\n;; Evaluate whether the given number n can be written as the sum of exactly\
    \ 3 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 3)\n;; #f\n\
    ;; >>> (is_equal_to_sum_odd 5)\n;; #f\n;; >>> (is_equal_to_sum_odd 7)\n;; #t",
  "  (let ((sum (sum 0 (modulo n 2))))\n    (and\n      (>= sum 4)\n      (= (modulo\
    \ sum 2) 0))))\n\n;; Evaluate whether the given number n can be written as the\
    \ sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2)\
    \ 0)\n        (set! sum (+ sum (modulo n 2))))\n      (set! n (- n 1))\n    )\n\
    \    (= sum 4)\n  )\n)\n\n;; Evaluate whether the given number n can be written\
    \ as the sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2)\
    \ 0)\n        (set! sum (+ sum 1))\n        (set! n (- n 1))))\n    (= sum 4)))\n\
    \n;; Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n\
    ;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t",
  "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2) 0)\n        (set!\
    \ sum (+ sum (modulo n 2))))\n      (set! n (- n 1))\n    )\n    (= sum 4)\n \
    \ )\n)\n\n;; Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n\
    ;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n\
    ;; #t", "  (let ((sum (make-list n 0)))\n    (for-each\n      (lambda (i)\n  \
    \      (if (even? i)\n            (+ sum i)\n            (+ sum (- i))))\n   \
    \   sum))\n  (equal? sum 4))\n\n;; Evaluate whether the given number n can be\
    \ written as the sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2)\
    \ 0)\n        (set! sum (+ sum (modulo n 2))))\n      (set! n (- n 1))))\n  (equal?\
    \ sum 4))\n\n;; Evaluate whether the given number n can be written as the sum\
    \ of exactly 3 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 3)\n\
    ;; #f\n;; >>> (is_equal_to_sum_odd 5)\n;; #f\n;; >>> (is_equal_to_sum_odd 7)\n\
    ;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2) 0)\n\
    \        (set! sum (+ sum 1))\n        (set! n (- n 1)))\n      ()))\n  (= sum\
    \ 4))\n\n;; Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n\
    ;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t",
  "  (let ((n (abs n)))\n    (if (zero? n)\n      #t\n      (let ((sum (make_list\
    \ 0 4)))\n        (while (< n 0)\n          (let ((i (quotient n 2)))\n      \
    \      (setq sum (append sum (make_list i)))\n            (setq n (- n 2)))\n\
    \          (if (even? sum)\n            #t\n            (setq sum (make_list 0))))))))\n",
  "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2) 0)\n        (set!\
    \ sum (+ sum 1))\n        (set! n (- n 1))\n      )\n    )\n    (= sum 4)\n  )\n\
    )\n\n;; Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n\
    ;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t",
  "  (let ((n (number->string n)))\n    (let ((n (string->number n)))\n      (let\
    \ ((even_numbers (make-vector 4 0)))\n        (let ((i 0))\n          (while (<\
    \ i 4)\n            (setq even_numbers (vector-set! even_numbers i (number->string\
    \ (+ n (string->number (vector-ref even_numbers i)))))))\n          (and (>= (string->number\
    \ (vector-ref even_numbers 0)) 0)\n               (>= (string->number (vector-ref\
    \ even_numbers 1)) 0)\n               (>= (string->number (vector-ref even_numbers\
    \ 2)) 0)\n               (>= (string->number (vector-ref even_numbers 3)) 0)\n\
    \               (= (string->number (vector-ref even_numbers 4)) 0)))\n       \
    \ (and (odd? n)\n             (= (string->number (vector-ref even_numbers 0))\
    \ 0)\n             (= (string->number (vector-ref even_numbers 1)) 0)\n      \
    \       (= (string->number (vector-ref even_numbers 2)) 0)\n             (= (string->number\
    \ (vector-ref even_numbers 3)) 0)\n             (= (string->number (vector-ref\
    \ even_numbers 4)) 0)))\n      (equal? n (string->number (vector-ref even_numbers\
    \ 0)))))))\n\n;; Evaluate whether the given number n can be written as the sum\
    \ of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n\
    ;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n\
    ;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2) 0)\n\
    \        (set! sum (+ sum 1))\n        (set! n (- n 1)))\n      ()))\n  (= sum\
    \ 4))\n\n;; Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n\
    ;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t",
  "  (let ((sum (make-vector 4 0)))\n    (let ((i 0))\n      (while (< i 4)\n    \
    \    (set! sum (vector-set! sum i (vector-ref n i)))\n        (set! i (+ i 2)))\n\
    \      (= sum n)))\n)\n\n;; Evaluate whether the given number n can be written\
    \ as the sum of exactly 3 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 3)\n;; #f\n;; >>> (is_equal_to_sum_odd 5)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 7)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2)\
    \ 0)\n        (set! sum (+ sum (modulo n 2))))\n      (set! n (- n 1))\n    )\n\
    \    (= sum 4)\n  )\n)\n\n;; Evaluate whether the given number n can be written\
    \ as the sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2)\
    \ 0)\n        (set! sum (+ sum (modulo n 2))))\n      (set! n (- n 1))\n    )\n\
    \    (= sum 4)\n  )\n)\n\n;; Evaluate whether the given number n can be written\
    \ as the sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2)\
    \ 0)\n        (set! sum (+ sum (modulo n 2))))\n      (set! n (- n 1))\n    )\n\
    \    (= sum 4)\n  )\n)\n\n;; Evaluate whether the given number n can be written\
    \ as the sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2)\
    \ 0)\n        (set! sum (+ sum (modulo n 2))))\n      (set! n (- n 1))\n    )\n\
    \    (= sum 4)\n  )\n)\n\n;; Evaluate whether the given number n can be written\
    \ as the sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((sum (make-vector 4 0)))\n    (for-each\n      (lambda\
    \ (i)\n        (set-vector-cell! sum i)\n        (if (even? i)\n          (set-vector-cell!\
    \ sum (+ i 1)))\n        (if (zero? i)\n          (set-vector-cell! sum (+ i 2)))\n\
    \        (if (zero? i)\n          (set-vector-cell! sum (+ i 3)))\n        (if\
    \ (zero? i)\n          (set-vector-cell! sum (+ i 4))))\n      n)\n    (eqv? sum\
    \ n)))\n\n;; Evaluate whether the given number n can be written as the sum of\
    \ exactly 3 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 3)\n\
    ;; #f\n;; >>> (is_equal_to_sum_odd 5)\n;; #f\n;; >>> (is_equal_to_sum_odd 7)\n\
    ;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2) 0)\n\
    \        (set! sum (+ sum 1))\n        (set! n (- n 1)))\n      ()))\n  (= sum\
    \ 4))\n\n;; Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n\
    ;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t",
  "  (let ((sum (make-vector 4 0)))\n    (for-each\n      (lambda (i)\n        (set-vector-cell!\
    \ sum i)\n        (if (even? i)\n          (set-vector-cell! sum (+ i 1)))))\n\
    \    (equal? sum n)))\n\n;; Evaluate whether the given number n can be written\
    \ as the sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2)\
    \ 0)\n        (set! sum (+ sum (modulo n 2))))\n      (set! n (- n 1))\n    )\n\
    \    (= sum 4)\n  )\n)\n\n;; Evaluate whether the given number n can be written\
    \ as the sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((sum (make-vector 4 0)))\n    (let ((i 0))\n      (while\
    \ (< i 4)\n        (set! sum (vector-set! sum i (vector-ref n i)))\n        (set!\
    \ i (vector-set! i (+ i 2)))\n      )\n      (vector-ref sum 4)\n    )\n  )\n\
    )\n\n;; Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n\
    ;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t",
  "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2) 0)\n        (set!\
    \ sum (+ sum 1))\n        (set! n (- n 1)))\n      )\n    (= sum 4)\n    )\n \
    \ )\n\n;; Evaluate whether the given number n can be written as the sum of exactly\
    \ 3 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 3)\n;; #f\n\
    ;; >>> (is_equal_to_sum_odd 5)\n;; #f\n;; >>> (is_equal_to_sum_odd 7)\n;; #t",
  "  (let ((n (abs n)))\n    (if (zero? n)\n      #t\n      (else\n        (if (even?\
    \ n)\n          (let ((n (quotient n 2)))\n            (if (zero? n)\n       \
    \       #f\n              (else\n                (let ((n (quotient n 2)))\n \
    \                 (if (zero? n)\n                    #f\n                    (else\n\
    \                      (let ((n (quotient n 2)))\n                        (if\
    \ (zero? n)\n                          #f\n                          (else\n \
    \                           (let ((n (quotient n 2)))\n                      \
    \        (if (zero? n)\n                                #f\n                 \
    \               (else\n                                  (let ((n (quotient n\
    \ 2)))\n                                    (if (zero? n)\n                  \
    \                    #f\n                                      (else\n       \
    \                                 (let ((n (quotient n 2)))\n                \
    \                          (if (zero? n)\n                                   \
    \         #f\n                                            (else\n            \
    \                                  (let ((n (quotient n 2)))\n               \
    \                                 (if (zero? n)\n                            \
    \                      #f\n                                                  (else\n\
    \                                                    (let ((n (quotient n 2)))\n\
    \                                                      (if (zero? n)\n       \
    \                                                 #f\n                       \
    \                                 (else\n                                    \
    \                      #t
  "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2) 0)\n        (set!\
    \ sum (+ sum (modulo n 2))))\n      (set! n (- n 1))\n    )\n    (= sum 4)\n \
    \ )\n)\n\n;; Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n\
    ;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n\
    ;; #t", "  (let ((sum (make-vector 4 0)))\n    (for-each\n      (lambda (i)\n\
    \        (set-vector-cell! sum i)\n        (if (even? i)\n          (set-vector-cell!\
    \ sum (- i 1)))\n      )\n      n\n    )\n    (equal? sum 0)))\n\n;; Evaluate\
    \ whether the given number n can be written as the sum of exactly 4 positive odd\
    \ numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum 0))\n    (while\
    \ (< n 0)\n      (if (< (modulo n 2) 0)\n        (set! sum (+ sum (modulo n 2))))\n\
    \      (set! n (- n 1))\n    )\n    (= sum 4)\n  )\n)\n\n;; Evaluate whether the\
    \ given number n can be written as the sum of exactly 4 positive odd numbers\n\
    ;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((n (number->string\
    \ n)))\n    (if (string->number (string->number n))\n      (let ((n (string->number\
    \ n)))\n        (if (even? n)\n          (if (is_equal_to_sum_even (string->number\
    \ (+ n 1)))\n              (if (is_equal_to_sum_even (string->number (+ n 2)))\n\
    \                  (if (is_equal_to_sum_even (string->number (+ n 3)))\n     \
    \                 (if (is_equal_to_sum_even (string->number (+ n 4)))\n      \
    \                    (return #t)\n                          (return #f)))))))))))\n\
    \n;; Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n\
    ;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t",
  "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2) 0)\n        (set!\
    \ sum (+ sum 1))\n        (set! n (- n 1))))\n    (= sum 4)))\n\n;; Evaluate whether\
    \ the given number n can be written as the sum of exactly 4 positive odd numbers\n\
    ;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum (sum 0 (+ n\
    \ 1))))\n    (and (>= sum 4)\n          (even? sum))))\n\n;; Evaluate whether\
    \ the given number n can be written as the sum of exactly 3 positive odd numbers\n\
    ;; Example\n;; >>> (is_equal_to_sum_odd 3)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 5)\n;; #f\n;; >>> (is_equal_to_sum_odd 7)\n;; #t", "  (let ((n (number->string\
    \ n)))\n    (let ((result (string->number (string-replace n \"0\" \"\"))))\n \
    \     (and\n        (string-match n \"^[0-9]*$\")\n        (string-match n \"\
    ^[2-9][0-9]*$\")\n        (string-match n \"^[4-9][0-9]*$\")\n        (string-match\
    \ n \"^[6-9][0-9]*$\")\n        (string-match n \"^[8-9][0-9]*$\")\n        (equal?\
    \ result n))))\n\n;; Evaluate whether the given number n can be written as the\
    \ sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2)\
    \ 0)\n        (set! sum (+ sum (modulo n 2))))\n      (set! n (- n 1))\n    )\n\
    \    (= sum 4)\n  )\n)\n\n;; Evaluate whether the given number n can be written\
    \ as the sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2)\
    \ 0)\n        (set! sum (+ sum (modulo n 2))))\n      (set! n (- n 1))\n    )\n\
    \    (= sum 4)\n  )\n)\n\n;; Evaluate whether the given number n can be written\
    \ as the sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2)\
    \ 0)\n        (set! sum (+ sum (modulo n 2))))\n      (set! n (- n 1))\n    )\n\
    \    (= sum 4)\n  )\n)\n\n;; Evaluate whether the given number n can be written\
    \ as the sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2)\
    \ 0)\n        (set! sum (+ sum (modulo n 2))))\n      (set! n (- n 1))\n    )\n\
    \    (= sum 4)\n  )\n)\n\n;; Evaluate whether the given number n can be written\
    \ as the sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((n (number->string n)))\n    (let ((n_digits (string-length\
    \ n)))\n      (let ((n_digits_remaining (n_digits - n_digits % 4)))\n        (if\
    \ (n_digits_remaining >= 0)\n          (let ((n_digits_remaining_remaining (n_digits_remaining\
    \ - 4)))\n            (if (n_digits_remaining_remaining >= 0)\n              (let\
    \ ((n_digits_remaining_remaining_remaining (n_digits_remaining_remaining - 4)))\n\
    \                (if (n_digits_remaining_remaining_remaining >= 0)\n         \
    \         (let ((n_digits_remaining_remaining_remaining_remaining (n_digits_remaining_remaining_remaining\
    \ - 4)))\n                    (if (n_digits_remaining_remaining_remaining_remaining\
    \ >= 0)\n                      (let ((n_digits_remaining_remaining_remaining_remaining_remaining\
    \ (n_digits_remaining_remaining_remaining_remaining - 4)))\n                 \
    \       (if (n_digits_remaining_remaining_remaining_remaining_remaining >= 0)\n\
    \                          (let ((n_digits_remaining_remaining_remaining_remaining_remaining_remaining\
    \ (n_digits_remaining_remaining_remaining_remaining_remaining - 4)))\n       \
    \                     (if (n_digits_remaining_remaining_remaining_remaining_remaining_remaining\
    \ >= 0)\n                              (let ((n_digits_remaining_remaining_remaining_remaining_remaining_remaining_remaining\
    \ (n_digits_remaining_remaining_remaining_remaining_remaining_remaining - 4)))\n\
    \                                (if (n_digits_remaining_remaining_remaining_remaining_remaining_remaining_remaining\
    \ >= 0)\n                                  (let ((n_digits_remaining_remaining_remaining_remaining_remaining_remaining_remaining_remaining\
    \ (n_digits_remaining_remaining_", "  (let ((sum (make-vector 4 0)))\n    (for-each\n\
    \      (lambda (i)\n        (set! sum (vector-set! sum i n))\n        (if (zero?\
    \ sum)\n          (return #t)\n          (else\n            (set! sum (vector-set!\
    \ sum (- n 1)))))\n      (range 1 4))\n    (return #f)))\n\n;; Evaluate whether\
    \ the given number n can be written as the sum of exactly 4 positive odd numbers\n\
    ;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((n (number->string\
    \ n)))\n    (if (string->number (string->number n))\n      (let ((n (string->number\
    \ n)))\n        (if (string->number (string->number (string->number n)))\n   \
    \       (if (string->number (string->number (string->number (string->number n))))\n\
    \            (if (string->number (string->number (string->number (string->number\
    \ (string->number n))))))\n            (if (string->number (string->number (string->number\
    \ (string->number (string->number (string->number n))))))\n              (if (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number n))))))))\n              (if (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number n))))))))))\n            (if (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number n))))))))))\n          (if (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ n))))))))))\n        (if (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number n))))))))))\n\
    \      (if (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number n))))))))))\n    (if (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number n))))))))))\n    (if (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number n))))))))))\n    (if (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ n))))))))))\n    (if (string->number (string->number (string->number (string->number\
    \ (string", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2) 0)\n\
    \        (set! sum (+ sum (modulo n 2))))\n      (set! n (- n 1))\n    )\n   \
    \ (= sum 4)\n  )\n)\n\n;; Evaluate whether the given number n can be written as\
    \ the sum of exactly 3 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 3)\n;; #f\n;; >>> (is_equal_to_sum_odd 5)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 7)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2)\
    \ 0)\n        (set! sum (+ sum 1))\n        (set! n (- n 1))\n      )\n    )\n\
    \    (= sum 4)\n  )\n)\n\n;; Evaluate whether the given number n can be written\
    \ as the sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((n (number->string n)))\n    (let ((result (string->number\
    \ (string-append \"0\" n))))\n      (and\n        (= result 0)\n        (= (string->number\
    \ (string-append \"2\" n)) 0)\n        (= (string->number (string-append \"4\"\
    \ n)) 0)\n        (= (string->number (string-append \"6\" n)) 0)\n        (= (string->number\
    \ (string-append \"8\" n)) 0)\n        (= (string->number (string-append \"10\"\
    \ n)) 0)\n        (= (string->number (string-append \"12\" n)) 0)\n        (=\
    \ (string->number (string-append \"14\" n)) 0)\n        (= (string->number (string-append\
    \ \"16\" n)) 0)\n        (= (string->number (string-append \"18\" n)) 0)\n   \
    \     (= (string->number (string-append \"20\" n)) 0)\n        (= (string->number\
    \ (string-append \"22\" n)) 0)\n        (= (string->number (string-append \"24\"\
    \ n)) 0)\n        (= (string->number (string-append \"26\" n)) 0)\n        (=\
    \ (string->number (string-append \"28\" n)) 0)\n        (= (string->number (string-append\
    \ \"30\" n)) 0)\n        (= (string->number (string-append \"32\" n)) 0)\n   \
    \     (= (string->number (string-append \"34\" n)) 0)\n        (= (string->number\
    \ (string-append \"36\" n)) 0)\n        (= (string->number (string-append \"38\"\
    \ n)) 0)\n        (= (string->number (string-append \"40\" n)) 0)\n        (=\
    \ (string->number (string-append \"42\" n)) 0)\n        (= (string->number (string-append\
    \ \"44\" n)) 0)\n        (= (string->number (string-append \"46\" n)) 0)\n   \
    \     (= (string->number (string-append \"48\" n)) 0)\n        (= (string->number\
    \ (string-append \"50\"", "  (let ((sum (sum 0 (+ n 1))))\n    (and (= n sum)\n\
    \          (= sum (+ n 2))\n          (= sum (+ n 4))\n          (= sum (+ n 6))\n\
    \          (= sum (+ n 8))))\n)\n\n;; Evaluate whether the given number n can\
    \ be written as the sum of exactly 4 positive odd numbers\n;; Example\n;; >>>\
    \ (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>>\
    \ (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum (make-vector 4 0)))\n    (let\
    \ ((i 0))\n      (while (< i 4)\n        (set! i (+ i 2))\n        (if (< n (+\
    \ (* i 2) sum))\n          (return #f)\n          (set! sum (+ sum (* i 2)))))))\n\
    \  (is_equal_to_sum_even n))\n\n;; Evaluate whether the given number n can be\
    \ written as the sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((sum (sum 0 (modulo n 2))))\n    (and\n      (>= sum 4)\n\
    \      (= (modulo sum 2) 0))))\n\n;; Evaluate whether the given number n can be\
    \ written as the sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((n (abs n)))\n    (if (< n 4)\n      #f\n      (let ((sum\
    \ 0))\n        (while (< n 0)\n          (if (< n 2)\n            (set! sum (+\
    \ sum 2))\n            (set! n (- n 2)))\n          (set! sum (+ sum 4)))\n  \
    \      (if (= n sum)\n          #t\n          #f))))))\n\n;; Evaluate whether\
    \ the given number n can be written as the sum of exactly 3 positive odd numbers\n\
    ;; Example\n;; >>> (is_equal_to_sum_odd 3)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 5)\n;; #f\n;; >>> (is_equal_to_sum_odd 7)\n;; #t", "  (let ((sum (make-vector\
    \ 4 0)))\n    (let ((i 0))\n      (while (< i 4)\n        (set! i (+ i 2))\n \
    \       (if (< n (+ (* i 2) sum))\n          (return #f)\n          (set! sum\
    \ (+ sum (* i 2))))))\n    (return #t)))\n\n;; Evaluate whether the given number\
    \ n can be written as the sum of exactly 4 positive odd numbers\n;; Example\n\
    ;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n\
    ;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n\
    \      (if (< (modulo n 2) 0)\n        (set! sum (+ sum (modulo n 2))))\n    \
    \  (set! n (- n 1))\n    )\n    (= sum 4)\n  )\n)\n\n;; Evaluate whether the given\
    \ number n can be written as the sum of exactly 4 positive odd numbers\n;; Example\n\
    ;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n\
    ;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((n (abs n)))\n    (if (< n 4)\n\
    \      #f\n      (let ((i 0))\n        (while (< i n)\n          (if (< (modulo\
    \ i 4) 0)\n            (return #f)\n            (set! i (+ i 2)))\n          )\n\
    \        )\n        (return #t)\n      )\n    )\n  )\n)\n\n;; Evaluate whether\
    \ the given number n can be written as the sum of exactly 4 positive odd numbers\n\
    ;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((n (number->string\
    \ n)))\n    (let ((nums (string->list n))\n          (result (number->string 0)))\n\
    \      (for-each (lambda (n)\n                  (if (even? n)\n              \
    \        (if (not (is_equal_to_sum_even (number->string (+ n 1)))))\n        \
    \                (return #f)\n                      (setq result (+ result 1)))))\n\
    \      (number->string result)))\n\n;; Evaluate whether the given number n can\
    \ be written as the sum of exactly 4 positive odd numbers\n;; Example\n;; >>>\
    \ (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>>\
    \ (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum (make-vector 4 0)))\n    (for-each\n\
    \      (lambda (i)\n        (set-vector-cell! sum i)\n        (if (zero? i)\n\
    \          (return #t)\n          (if (even? i)\n            (set-vector-cell!\
    \ sum (- i 1))\n            (return #f))))\n      (make-vector 4)))\n  sum)\n\n\
    ;; Evaluate whether the given number n can be written as the sum of exactly 4\
    \ positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;;\
    \ >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t",
  "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2) 0)\n        (set!\
    \ sum (+ sum (modulo n 2))))\n      (set! n (- n 1))\n    )\n    (= sum 4)\n \
    \ )\n)\n\n;; Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n\
    ;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n\
    ;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2) 0)\n\
    \        (set! sum (+ sum (modulo n 2))))\n      (set! n (- n 1))\n    )\n   \
    \ (= sum 4)\n  )\n)\n\n;; Evaluate whether the given number n can be written as\
    \ the sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2)\
    \ 0)\n        (set! sum (+ sum (modulo n 2))))\n      (set! n (- n 1))\n    )\n\
    \    (= sum 4)\n  )\n)\n\n;; Evaluate whether the given number n can be written\
    \ as the sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2)\
    \ 0)\n        (set! sum (+ sum (modulo n 2))))\n      (set! n (- n 1))\n    )\n\
    \    (= sum 4)\n  )\n)\n\n;; Evaluate whether the given number n can be written\
    \ as the sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((sum (make-list 0 4)))\n    (for-each (lambda (x) (list-set!\
    \ sum x)) n)\n    (equal? sum 4)))\n\n;; Evaluate whether the given number n can\
    \ be written as the sum of exactly 3 positive odd numbers\n;; Example\n;; >>>\
    \ (is_equal_to_sum_odd 3)\n;; #f\n;; >>> (is_equal_to_sum_odd 5)\n;; #t\n;; >>>\
    \ (is_equal_to_sum_odd 7)\n;; #f", "  (let ((n (number->string n)))\n    (let\
    \ ((result (string->number (string->list n \" \"))))\n      (if (even? result)\n\
    \        (if (zero? result)\n          #t\n        (else\n          (let ((sum\
    \ (string->number (string->list result \" + \"))))\n            (if (zero? sum)\n\
    \              #f\n            (else\n              (let ((diff (string->number\
    \ (string->list result \" - \"))))\n                (if (zero? diff)\n       \
    \           #f\n                (else\n                  (let ((diff2 (string->number\
    \ (string->list diff \" * 2\"))))\n                    (if (zero? diff2)\n   \
    \                   #f\n                    (else\n                      (let\
    \ ((diff3 (string->number (string->list diff \" / 3\"))))\n                  \
    \      (if (zero? diff3)\n                          #f\n                     \
    \   (else\n                          #t))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
  "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2) 0)\n        (set!\
    \ sum (+ sum (modulo n 2))))\n      (set! n (- n 1))))\n  (equal? sum 4))\n\n\
    ;; Evaluate whether the given number n can be written as the sum of exactly 4\
    \ positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;;\
    \ >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t",
  "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2) 0)\n        (set!\
    \ sum (+ sum (modulo n 2))))\n      (set! n (- n 1))\n    )\n    (= sum 4)\n \
    \ )\n)\n\n;; Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n\
    ;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n\
    ;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2) 0)\n\
    \        (set! sum (+ sum (modulo n 2))))\n      (set! n (- n 1))\n    )\n   \
    \ (= sum 4)\n  )\n)\n\n;; Evaluate whether the given number n can be written as\
    \ the sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((n (number->string n)))\n    (let ((result (string->number\
    \ (string-append \"0\" (string-append \"2\" (string-append \"4\" (string-append\
    \ \"6\" (string-append \"8\" (string-append \"10\" (string-append \"12\" (string-append\
    \ \"14\" (string-append \"16\"))))))))))))\n    (equal? result n)))\n\n;; Evaluate\
    \ whether the given number n can be written as the sum of exactly 4 positive odd\
    \ numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum (make-vector\
    \ 4 0)))\n    (let ((i 0))\n      (while (< i 4)\n        (set! sum (vector-set!\
    \ sum i (vector-ref n i)))\n        (set! i (+ i 2)))\n      (= sum n)))\n)\n\n\
    ;; Evaluate whether the given number n can be written as the sum of exactly 4\
    \ positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;;\
    \ >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t",
  "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2) 0)\n        (set!\
    \ sum (+ sum 1))\n        (set! n (- n 1))\n      )\n    )\n    (= sum 4)\n  )\n\
    )\n\n;; Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n\
    ;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t",
  "  (let ((sum (sum 0 n)))\n    (and\n      (= (modulo sum 4) 0)\n      (= (modulo\
    \ sum 2) 0)\n      (= (modulo sum 1) 0)\n      (= (modulo sum 0) 0)\n      (=\
    \ (modulo sum -1) 0)\n      (= (modulo sum -2) 0)\n      (= (modulo sum -3) 0)\n\
    \      (= (modulo sum -4) 0)\n      (= (modulo sum -5) 0)\n      (= (modulo sum\
    \ -6) 0)\n      (= (modulo sum -7) 0)\n      (= (modulo sum -8) 0)\n      (= (modulo\
    \ sum -9) 0)\n      (= (modulo sum -10) 0)\n      (= (modulo sum -11) 0)\n   \
    \   (= (modulo sum -12) 0)\n      (= (modulo sum -13) 0)\n      (= (modulo sum\
    \ -14) 0)\n      (= (modulo sum -15) 0)\n      (= (modulo sum -16) 0)\n      (=\
    \ (modulo sum -17) 0)\n      (= (modulo sum -18) 0)\n      (= (modulo sum -19)\
    \ 0)\n      (= (modulo sum -20) 0)\n      (= (modulo sum -21) 0)\n      (= (modulo\
    \ sum -22) 0)\n      (= (modulo sum -23) 0)\n      (= (modulo sum -24) 0)\n  \
    \    (= (modulo sum -25) 0)\n      (= (modulo sum -26) 0)\n      (= (modulo sum\
    \ -27) 0)\n      (= (modulo sum -28) 0)\n      (= (modulo sum -29) 0)\n      (=\
    \ (modulo sum -30) 0)\n      (= (modulo sum -31) 0)\n      (= (modulo sum -32)\
    \ 0)\n      (= (modulo sum -33) 0)\n      (= (modulo sum -34) 0)\n      (= (modulo\
    \ sum", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2) 0)\n\
    \        (set! sum (+ sum 1))\n        (set! n (- n 1)))\n      ()))\n  (= sum\
    \ 4))\n\n;; Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n\
    ;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t",
  "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2) 0)\n        (set!\
    \ sum (+ sum (modulo n 2))))\n      (set! n (- n 1))\n    )\n    (= sum 4)\n \
    \ )\n)\n\n;; Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n\
    ;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n\
    ;; #t", "  (let ((sum (make-list 0 4)))\n    (for-each\n      (lambda (i)\n  \
    \      (if (even? i)\n          (append sum (make-list i)))\n      )\n      n\n\
    \    )\n    (equal? sum 4)\n  )\n)\n\n;; Evaluate whether the given number n can\
    \ be written as the sum of exactly 4 positive odd numbers\n;; Example\n;; >>>\
    \ (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>>\
    \ (is_equal_to_sum_odd 8)\n;; #t", "  (let ((result (equal? (sum n) 4)))\n   \
    \ (if result\n      (display \"n is equal to sum of 4 even numbers\" result)\n\
    \      (else\n        (display \"n is not equal to sum of 4 even numbers\" result)\n\
    \        (exit 1))))\n\n;; Evaluate whether the given number n can be written\
    \ as the sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((n (number->string n)))\n    (let ((result (string->number\
    \ (string->list (string-split \" \" n) 1))))\n      (if (and (even? result) (string->number\
    \ (string->list (string-split \" \" n) 2)))\n          (string->number (string->list\
    \ (string-split \" \" n) 3)))\n        (string->number (string->list (string-split\
    \ \" \" n) 4))))\n    result))\n\n;; Evaluate whether the given number n can be\
    \ written as the sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((sum (make-vector 4 0)))\n    (let ((i 0))\n      (while\
    \ (< i 4)\n        (set! sum (vector-set! sum i (vector-ref n i)))\n        (set!\
    \ i (+ i 2)))\n      (= sum n)))\n)\n\n;; Evaluate whether the given number n\
    \ can be written as the sum of exactly 4 positive odd numbers\n;; Example\n;;\
    \ >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n\
    ;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n\
    \      (if (< (modulo n 2) 0)\n        (set! sum (+ sum (modulo n 2))))\n    \
    \  (set! n (- n 1))\n    )\n    (= sum 4)\n  )\n)\n\n;; Evaluate whether the given\
    \ number n can be written as the sum of exactly 4 positive odd numbers\n;; Example\n\
    ;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n\
    ;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((result (equal? (sum-even n)\
    \ n)))\n    (if result\n      (display \"true\")\n      (display \"false\")))\n\
    \  )\n)\n\n;; Evaluate whether the given number n can be written as the sum of\
    \ exactly 3 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 3)\n\
    ;; #f\n;; >>> (is_equal_to_sum_odd 5)\n;; #f\n;; >>> (is_equal_to_sum_odd 7)\n\
    ;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2) 0)\n\
    \        (set! sum (+ sum (modulo n 2))))\n      (set! n (- n 1))\n    )\n   \
    \ (= sum 4)\n  )\n)\n\n;; Evaluate whether the given number n can be written as\
    \ the sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((n (abs n)))\n    (if (zero? n)\n      #t\n      (else\n\
    \        (let ((sum (make-vector 4 0)))\n          (let ((i 0))\n            (while\
    \ (< i n)\n              (set! sum (vector-set! sum i (vector-ref sum i)))\n \
    \             (set! i (+ i 2)))\n            (if (equal? sum n)\n            \
    \  #t\n              (else\n                #f))))))))\n", "  (let ((sum (make-vector\
    \ 4 0)))\n    (for-each\n      (lambda (i)\n        (set-vector-cell! sum i)\n\
    \        (if (zero? i)\n          (return #f)\n          (if (even? i)\n     \
    \       (return #t)\n            (set-vector-cell! sum (- i 1)))))\n      n))\n\
    \n;; Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n\
    ;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t",
  "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2) 0)\n        (set!\
    \ sum (+ sum (modulo n 2))))\n      (set! n (- n 1))\n    )\n    (= sum 4)\n \
    \ )\n)\n\n;; Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n\
    ;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n\
    ;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2) 0)\n\
    \        (set! sum (+ sum 1))\n        (set! n (- n 1)))\n      ()))\n  (equal?\
    \ sum 4))\n\n;; Evaluate whether the given number n can be written as the sum\
    \ of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n\
    ;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n\
    ;; #t", "  (let ((sum 0))\n    (while (< n 0)\n      (if (< (modulo n 2) 0)\n\
    \        (set! sum (+ sum (modulo n 2))))\n      (set! n (- n 1))\n    )\n   \
    \ (= sum 4)\n  )\n)\n\n;; Evaluate whether the given number n can be written as\
    \ the sum of exactly 4 positive odd numbers\n;; Example\n;; >>> (is_equal_to_sum_odd\
    \ 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 8)\n;; #t", "  (let ((sum (make-vector 4 0)))\n    (let ((i 0))\n      (while\
    \ (< i 4)\n        (set! sum (vector-set! sum i (vector-ref n i)))\n        (set!\
    \ i (+ i 2)))\n      (= sum n)))\n)\n\n;; Evaluate whether the given number n\
    \ can be written as the sum of exactly 4 positive odd numbers\n;; Example\n;;\
    \ >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n\
    ;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n\
    \      (if (< (modulo n 2) 0)\n        (set! sum (+ sum 1))\n        (set! n (-\
    \ n 1)))\n      ()))\n  (= sum 4))\n\n;; Evaluate whether the given number n can\
    \ be written as the sum of exactly 3 positive odd numbers\n;; Example\n;; >>>\
    \ (is_equal_to_sum_odd 3)\n;; #f\n;; >>> (is_equal_to_sum_odd 5)\n;; #f\n;; >>>\
    \ (is_equal_to_sum_odd 7)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n   \
    \   (if (< (modulo n 2) 0)\n        (set! sum (+ sum 1))\n        (set! n (- n\
    \ 1)))\n      )\n    (= sum 4)))\n\n;; Evaluate whether the given number n can\
    \ be written as the sum of exactly 4 positive odd numbers\n;; Example\n;; >>>\
    \ (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n;; >>>\
    \ (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum 0))\n    (while (< n 0)\n   \
    \   (if (< (modulo n 2) 0)\n        (set! sum (+ sum (modulo n 2))))\n      (set!\
    \ n (- n 1))\n    )\n    (= sum 4)\n  )\n)\n\n;; Evaluate whether the given number\
    \ n can be written as the sum of exactly 4 positive odd numbers\n;; Example\n\
    ;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd 6)\n;; #f\n\
    ;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((n (number->string n)))\n   \
    \ (let ((n_str (string->number n)))\n      (let ((sum (0)))\n        (let ((i\
    \ 0))\n          (while (< i 4)\n            (if (even? (string->number (substring\
    \ n i 2)))\n                (set! sum (+ sum (string->number (substring n i 2))))\n\
    \                (set! i (i + 1)))\n              (set! i 0)))\n          (if\
    \ (equal? sum n_str)\n              #t\n              #f))))))\n\n;; Evaluate\
    \ whether the given number n can be written as the sum of exactly 4 positive odd\
    \ numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum (make-vector\
    \ 4 0)))\n    (for-each\n      (lambda (i)\n        (set-vector-cell! sum i)\n\
    \        (if (even? i)\n          (set-vector-cell! sum (+ i 1)))\n        (if\
    \ (zero? i)\n          (return #f)\n          ()))\n      n))\n)\n\n;; Evaluate\
    \ whether the given number n can be written as the sum of exactly 4 positive odd\
    \ numbers\n;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((sum 0))\n    (while\
    \ (< n 0)\n      (if (< (modulo n 2) 0)\n        (set! sum (+ sum (modulo n 2))))\n\
    \      (set! n (- n 1))\n    )\n    (= sum 4)\n  )\n)\n\n;; Evaluate whether the\
    \ given number n can be written as the sum of exactly 4 positive odd numbers\n\
    ;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t", "  (let ((n (number->string\
    \ n)))\n    (and\n      (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->number\
    \ (string->number (string->number (string->number (string->number (string->",
  "  (let ((sum (make-list 0 4)))\n    (let ((i 0))\n      (while (< i n)\n      \
    \  (if (even? (car sum))\n          (set-car! sum (cdr sum))\n          (set-cdr!\
    \ sum (cons (car sum) (cdr sum))))\n        (set-car! sum (cons (car sum) (cdr\
    \ sum))))\n      (if (car sum)\n        (progn\n          (set-car! sum (cdr sum))\n\
    \          (set-cdr! sum (cons (car sum) (cdr sum))))\n        (progn\n      \
    \    (set-car! sum (cons (car sum) (cdr sum)))\n          (set-cdr! sum (cons\
    \ (car sum) (cdr sum)))))))\n  (is_equal_to_sum_even n))\n\n;; Evaluate whether\
    \ the given number n can be written as the sum of exactly 4 positive odd numbers\n\
    ;; Example\n;; >>> (is_equal_to_sum_odd 4)\n;; #f\n;; >>> (is_equal_to_sum_odd\
    \ 6)\n;; #f\n;; >>> (is_equal_to_sum_odd 8)\n;; #t"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
