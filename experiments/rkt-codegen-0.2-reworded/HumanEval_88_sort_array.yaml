name: HumanEval_88_sort_array
language: rkt
prompt: "#lang racket\n\n;; Given a list of non-negative integers, return a corkt\
  \ of the given list after sorting,\n;; you will sort the given list in ascending\
  \ order if the sum( first index value, last index value) is odd,\n;; or sort it\
  \ in descending order if the sum( first index value, last index value) is even.\n\
  ;; Note:\n;; * don't change the given list.\n;; Examples:\n;; >>> (sort_array (list\
  \ ))\n;; (list )\n;; >>> (sort_array (list 5))\n;; (list 5)\n;; >>> (sort_array\
  \ (list 2 4 3 0 1 5))\n;; (list 0 1 2 3 4 5)\n;; >>> (sort_array (list 2 4 3 0 1\
  \ 5 6))\n;; (list 6 5 4 3 2 1 0)\n(define (sort_array array)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_array))\n\
  \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate (list\
  \ 5)) (list 5))\n    (check-equal? (candidate (list 2 4 3 0 1 5)) (list 0 1 2 3\
  \ 4 5))\n    (check-equal? (candidate (list 2 4 3 0 1 5 6)) (list 6 5 4 3 2 1 0))\n\
  \    (check-equal? (candidate (list 2 1)) (list 1 2))\n    (check-equal? (candidate\
  \ (list 15 42 87 32 11 0)) (list 0 11 15 32 42 87))\n    (check-equal? (candidate\
  \ (list 21 14 23 11)) (list 23 21 14 11))\n))\n\n(test-humaneval)"
completions: ["  (let ((sum (reduce (lambda (a b) (+ a b)) array)))\n    (if (modulo\
    \ sum 2)\n      (reverse array)\n      (reverse (cdr array))))\n  array)\n", " \
    \ (cond\n    ((odd? (sum array))\n      (reverse array))\n    ((even? (sum array))\n\
    \      (reverse array))\n    (else\n      array)))\n", "  (let* ([sorted (sort\
    \ array)])\n    (cond\n      [(even? (car (cdr array))) (reverse sorted)]\n  \
    \    [else (reverse sorted)]\n      [else sorted])))\n", "  (cond\n    ((odd?\
    \ (sum array))\n      (reverse array))\n    ((even? (sum array))\n      (reverse\
    \ array))\n    (else\n      array)))\n", "  (let ((sum (reduce (lambda (a b) (+\
    \ a b)) array)))\n    (if (modulo sum 2)\n      (reverse array)\n      (reverse\
    \ (cdr array))))\n  array)\n", "  (if (odd? (sum array))\n    (reverse array)\n\
    \    (reverse (cdr array))))\n\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list\
    \ 0 1 2 3 4 5 6)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2\
    \ 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;;\
    \ >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array\
    \ (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4\
    \ 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n\
    ;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6\
    \ 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1\
    \ 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>>\
    \ (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array\
    \ (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4\
    \ 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n\
    ;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6\
    \ 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1\
    \ 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6", "  (cond\n    ((even?\
    \ (sum array))\n      (reverse array))\n    ((odd? (sum array))\n      (reverse\
    \ array))\n    (else\n      array)))\n", "  (let ((sum (reduce (lambda (a b) (+\
    \ a b)) array)))\n    (if (modulo sum 2)\n      (reverse array)\n      (reverse\
    \ (cdr array))))\n  array)\n", "  (let ((sum (reduce (lambda (a b) (+ a b)) array)))\n\
    \    (if (modulo sum 2)\n      (reverse array)\n      (reverse (cdr array))))\n\
    \  array)\n", "  (let* ([sorted (sort array)])\n    (cond ((odd? (sum array))\
    \ sorted)\n        ((= (sum array) 0))\n        (else sorted))))\n", "  (let ((sum\
    \ (reduce (lambda (a b) (+ a b)) array)))\n    (if (modulo sum 2)\n      (reverse\
    \ array)\n      (reverse (map (lambda (a b) (- a b)) array))))))\n", "  (let ((sum\
    \ (reduce (lambda (a b) (+ a b)) 0 array))))\n  (if (modulo sum 2)\n    (reverse\
    \ array)\n    array))\n", "  (let ((sum (reduce (lambda (a b) (+ a b)) array)))\n\
    \    (if (modulo sum 2)\n      (reverse array)\n      (reverse (cdr array))))\n\
    \  array)\n\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n\
    ;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array\
    \ (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4\
    \ 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n\
    ;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6\
    \ 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1\
    \ 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>>\
    \ (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array\
    \ (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4\
    \ 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n\
    ;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6\
    \ 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1\
    \ 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>>\
    \ (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1", "  (if (odd? (sum\
    \ array))\n    (reverse array)\n    (reverse (cdr array))))\n", "  (cond\n   \
    \ ((odd? (sum array))\n      (reverse array))\n    ((even? (sum array))\n    \
    \  (reverse array))\n    (else\n      array)))\n", "  (cond\n    ((odd? (sum array))\n\
    \      (reverse array))\n    ((even? (sum array))\n      (reverse array))\n  \
    \  (else\n      array))))\n", "  (let ((sum (reduce (lambda (a b) (+ a b)) array)))\n\
    \    (if (modulo sum 2)\n      (reverse array)\n      (reverse (cdr array))))))\n",
  "  (cond\n    ((odd? (sum array))\n      (reverse array))\n    ((even? (sum array))\n\
    \      (reverse array))\n    (else\n      array)))\n", "  (let ((n (length array)))\n\
    \    (if (odd? (sum array))\n      (reverse array)\n      (reverse (cdr array)))))\n",
  "  (let ((sum (reduce (lambda (a b) (+ a b)) array)))\n    (if (modulo sum 2)\n\
    \      (reverse array)\n      (reverse (cdr array))))\n  array)\n", "  (let ((sum\
    \ (reduce (lambda (a b) (+ a b)) array)))\n    (if (modulo sum 2)\n      (reverse\
    \ array)\n      (reverse (cdr array))))\n  array)\n", "  (let* ([sorted (sort\
    \ array)])\n    (if (odd? (sum array))\n      sorted\n      (reverse sorted))))\n",
  "  (let ((sum (reduce (lambda (a b) (+ a b)) array)))\n    (if (modulo sum 2)\n\
    \      (reverse array)\n      (reverse (cdr array))))\n  array)\n", "  (let ((sum\
    \ (reduce (lambda (a b) (+ a b)) 0 array))))\n  (if (modulo sum 2)\n    (reverse\
    \ array)\n    array))\n", "  (cond ((odd? (sum array))\n         (reverse array))\n\
    \        ((even? (sum array))\n         (reverse array))))\n", "  (cond\n    ((odd?\
    \ (sum array))\n      (reverse array))\n    ((even? (sum array))\n      (reverse\
    \ array))\n    (else\n      array)))\n", "  (let ((sum (reduce (lambda (a b) (+\
    \ a b)) array)))\n    (if (modulo sum 2)\n      (reverse array)\n      (reverse\
    \ (reverse array))))))\n", "  (let* ([sorted (sort array)])\n    (if (odd? (sum\
    \ array))\n      sorted\n      (reverse sorted))))\n", "  (cond\n    ((odd? (sum\
    \ array))\n      (reverse array))\n    ((even? (sum array))\n      (reverse array))\n\
    \    (else\n      array))\n)\n", "  (let ((n (length array)))\n    (if (odd? (sum\
    \ array))\n      (reverse array)\n      (reverse (cdr array))))))\n", "  (let\
    \ ((sum (reduce (lambda (a b) (+ a b)) array)))\n    (if (modulo sum 2)\n    \
    \  (reverse array)\n      (reverse (cdr array))))\n  array)\n", "  (cond\n   \
    \ ((>= (length array) 1)\n      (if (odd? (+ (car array) (cdr array)))\n     \
    \   (cdr (sort_array (cdr array)))\n        (car (sort_array (car array))))\n\
    \      (else\n        (cdr (sort_array (cdr array)))))))\n", "  (let* ([sorted\
    \ (sort array)])\n    (if (odd? (sum array))\n      sorted\n      (reverse sorted))))\n",
  "  (let ((sum (reduce (lambda (a b) (+ a b)) array)))\n    (if (modulo sum 2)\n\
    \      (reverse array)\n      (reverse (reverse array))))))\n", "  (let ((sum\
    \ (reduce (lambda (a b) (+ a b)) array)))\n    (if (modulo sum 2)\n      (reverse\
    \ array)\n      (reverse (cdr array))))\n  array)\n", "  (cond\n    ((even? (sum\
    \ array))\n      (reverse array))\n    ((odd? (sum array))\n      (reverse array))\n\
    \    (else\n      array)))\n", "  (let ((sum (reduce (lambda (a b) (+ a b)) array)))\n\
    \    (if (modulo sum 2)\n      (reverse array)\n      (reverse (cdr array))))\n\
    \  array)\n", "  (let ((sum (reduce (lambda (a b) (+ a b)) array)))\n    (if (modulo\
    \ sum 2)\n      (reverse array)\n      (reverse (cdr array))))\n  array)\n", " \
    \ (let ((sum (reduce (lambda (a b) (+ a b)) array)))\n    (if (modulo sum 2)\n\
    \      (reverse array)\n      (reverse (cdr array))))\n)\n", "  (cond\n    ((odd?\
    \ (sum array))\n      (reverse array))\n    ((even? (sum array))\n      (reverse\
    \ array))\n    (else\n      array)))\n", "  (cond\n    ((even? (car array)) (reverse\
    \ (cdr array)))\n    ((odd? (car array)) (car (cdr array)))\n    (else (car (cdr\
    \ array))))\n  (car (cdr array)))\n", "  (cond ((odd? (sum array))\n         (reverse\
    \ array))\n        ((even? (sum array))\n         (reverse array))))\n\n;; >>>\
    \ (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array\
    \ (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4\
    \ 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n\
    ;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6\
    \ 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1\
    \ 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>>\
    \ (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array\
    \ (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4\
    \ 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n\
    ;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6\
    \ 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1\
    \ 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>>\
    \ (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array\
    \ (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4\
    \ 3 0 1 5 6", "  (let ((sum (sum array))))\n  (if (modulo sum 2)\n    (reverse\
    \ array)\n    (reverse (cdr array))))\n", "  (let ((n (length array)))\n    (if\
    \ (odd? (sum array))\n      (reverse array)\n      (reverse (cdr array))))))\n",
  "  (cond\n    ((odd? (sum array))\n      (reverse array))\n    ((even? (sum array))\n\
    \      (reverse array))\n    (else\n      array))))\n", "  (let* ([sorted (sort\
    \ array)])\n    (if (odd? (sum array))\n      sorted\n      (reverse sorted))))\n",
  "  (let ((sum (sum array))))\n  (if (odd? sum)\n    (reverse array)\n    (reverse\
    \ (cdr array))))\n", "  (let* ([sorted (sort array)])\n    (cond\n      [(even?\
    \ (car (cdr array))) (reverse sorted)]\n      [else (reverse sorted)]\n      [else\
    \ sorted])))\n", "  (let ((sum (reduce (lambda (x y) (+ x y)) 0 array))))\n  (if\
    \ (modulo sum 2)\n    (reverse array)\n    array))\n", "  (let ((sum (reduce (lambda\
    \ (a b) (+ a b)) array)))\n    (if (modulo sum 2)\n      (reverse array)\n   \
    \   (reverse (cdr array))))\n)\n", "  (let ((sum (reduce (lambda (a b) (+ a b))\
    \ 0 array))))\n  (if (modulo sum 2)\n    (reverse array)\n    array))\n", "  (cond\n\
    \    ((even? (sum array))\n      (reverse array))\n    ((odd? (sum array))\n \
    \     (reverse array))\n    (else\n      array)))\n", "  (let ((sum (reduce (lambda\
    \ (x y) (+ x y)) 0 array)))\n    (if (modulo sum 2)\n      (reverse array)\n \
    \     (reverse (cdr array))))\n  array)\n", "  (let ((sum (reduce (lambda (a b)\
    \ (+ a b)) array)))\n    (if (modulo sum 2)\n      (reverse array)\n      (reverse\
    \ (cdr array))))\n)\n", "  (let ((sum (reduce (lambda (a b) (+ a b)) array)))\n\
    \    (if (modulo sum 2)\n      (reverse array)\n      (reverse (cdr array))))\n\
    \  array)\n", "  (let ((n (length array)))\n    (if (odd? (sum (first n) (last\
    \ n)))\n      (reverse array)\n      (array))))\n", "  (let ((n (length array)))\n\
    \    (if (odd? (sum array))\n      (reverse array)\n      (reverse (cdr array)))))\n",
  "  (let ((sum (reduce (lambda (x y) (+ x y)) 0 array))))\n  (if (modulo sum 2)\n\
    \    (reverse array)\n    array))\n\n;; >>> (sort_array (list 1 2 3 4 5 6 7 8\
    \ 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34\
    \ 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60\
    \ 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86\
    \ 87 88 89 90 91 92 93 94 95 96 97 98 99 100))\n;; (list 1 2 3 4 5 6 7 8 9 10\
    \ 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36\
    \ 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62\
    \ 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88\
    \ 89 90 91 92 93 94 95 96 97 98 99 100)\n;; >>> (sort_array (list 1 2 3 4 5 6\
    \ 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\
    \ 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59\
    \ 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85\
    \ 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100))\n;; (list 1 2 3 4 5 6 7 8 9\
    \ 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35\
    \ 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61\
    \ 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87\
    \ 88 89 90 91 92 93 94 95 96 97 98 99 100)\n;; >>> (sort_array (list 1 2 3 4 5\
    \ 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31",
  "  (let ((sum (reduce (lambda (a b) (+ a b)) 0 array))))\n  (if (modulo sum 2)\n\
    \    (reverse array)\n    array))\n\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n\
    ;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 0\
    \ 1 2 3 4 5 6)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1\
    \ 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 0 1 2 3 4 5 6)\n;; >>>\
    \ (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array\
    \ (list 2 4 3 0 1 5 6))\n;; (list 0 1 2 3 4 5 6)\n;; >>> (sort_array (list 2 4\
    \ 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n\
    ;; (list 0 1 2 3 4 5 6)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6\
    \ 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 0 1 2 3 4 5\
    \ 6)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>>\
    \ (sort_array (list 2 4 3 0 1 5 6))\n;; (list 0 1 2 3 4 5 6)\n;; >>> (sort_array\
    \ (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4\
    \ 3 0 1 5 6))\n;; (list 0 1 2 3 4 5 6)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n\
    ;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 0\
    \ 1 2 3 4 5 6)\n;; >>> (sort_", "  (let ((sum (reduce (lambda (a b) (+ a b)) array)))\n\
    \    (if (modulo sum 2)\n      (reverse array)\n      (reverse (cdr array))))\n\
    \  array)\n", "  (cond ((odd? (sum array))\n         (reverse array))\n      \
    \  ((even? (sum array))\n         (reverse array))\n        (else (reverse array))))\n",
  "  (cond ((odd? (sum array))\n         (reverse array))\n         ((even? (sum array))\n\
    \          (reverse array))))\n", "  (let* ([sorted (sort array)])\n    (if (odd?\
    \ (sum array))\n      sorted\n      (reverse sorted))))\n", "  (cond\n    ((odd?\
    \ (sum array))\n      (reverse array))\n    ((even? (sum array))\n      (reverse\
    \ array))\n    (else\n      array)))\n", "  (let ((sum (reduce (lambda (a b) (+\
    \ a b)) array)))\n    (if (modulo sum 2)\n      (reverse array)\n      (reverse\
    \ (cdr array))))\n  array)\n", "  (let* ([sorted (sort array)])\n    (if (odd?\
    \ (sum array))\n      sorted\n      (reverse sorted))))\n", "  (let ((sum (reduce\
    \ (lambda (a b) (+ a b)) array)))\n    (if (modulo sum 2)\n      (reverse array)\n\
    \      (reverse (cdr array))))\n  array)\n", "  (let ((sum (reduce (lambda (a\
    \ b) (+ a b)) 0 array))))\n  (if (modulo sum 2)\n    (reverse array)\n    array))\n",
  "  (let* ([sorted (sort array)])\n    (if (odd? (sum array))\n      sorted\n   \
    \   (reverse sorted))))\n", "  (let* ([sorted (sort array)])\n    (if (odd? (sum\
    \ array))\n      sorted\n      (reverse sorted))))\n", "  (cond\n    ((odd? (sum\
    \ array))\n      (reverse array))\n    ((even? (sum array))\n      (reverse array))\n\
    \    (else\n      array)))\n\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list\
    \ 0 1 2 3 4 5 6)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2\
    \ 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;;\
    \ >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array\
    \ (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4\
    \ 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n\
    ;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6\
    \ 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1\
    \ 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>>\
    \ (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array\
    \ (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4\
    \ 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n\
    ;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6\
    \ 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1\
    \ 0)\n;; >>> (sort_", "  (let ((sum (reduce (lambda (a b) (+ a b)) array)))\n\
    \    (if (modulo sum 2)\n      (reverse array)\n      (reverse (cdr array))))\n\
    \  array)\n", "  (let* ([sorted (sort array)])\n    (cond ((odd? (sum array))\
    \ sorted)\n        ((even? (sum array)) (reverse sorted))\n        (else sorted))))\n",
  "  (cond\n    ((odd? (sum array))\n      (reverse array))\n    ((even? (sum array))\n\
    \      (reverse array))\n    (else\n      array))\n)\n", "  (let ((sum (reduce\
    \ (lambda (a b) (+ a b)) array)))\n    (if (modulo sum 2)\n      (reverse array)\n\
    \      (reverse (cdr array))))\n  array)\n", "  (let ((sum (reduce (lambda (a\
    \ b) (+ a b)) array)))\n    (if (modulo sum 2)\n      (reverse array)\n      (sort\
    \ array))))\n", "  (let ((sum (reduce (lambda (a b) (+ a b)) array)))\n    (if\
    \ (modulo sum 2)\n      (reverse array)\n      (reverse (cdr array))))\n  array)\n",
  "  (let ((sum (reduce (lambda (a b) (+ a b)) array)))\n    (if (modulo sum 2)\n\
    \      (reverse array)\n      (reverse (cdr array))))\n  array)\n", "  (let ((sum\
    \ (reduce (lambda (a b) (+ a b)) 0 array))))\n  (if (modulo sum 2)\n    (reverse\
    \ array)\n    array))\n", "  (let ((sum (reduce (lambda (a b) (+ a b)) array)))\n\
    \    (if (modulo sum 2)\n      (reverse array)\n      (reverse (cdr array))))\n\
    \  array)\n", "  (let ((sum (reduce (lambda (x y) (+ x y)) 0 array))))\n  (if\
    \ (modulo sum 2)\n    (reverse array)\n    array))\n", "  (let ((sum (reduce (lambda\
    \ (a b) (+ a b)) 0 array))))\n  (if (modulo sum 2)\n    (reverse array)\n    array))\n",
  "  (let ((sum (reduce (lambda (a b) (+ a b)) 0 array))))\n  (if (modulo sum 2)\n\
    \    (reverse array)\n    array))\n", "  (let* ([sorted (sort array)])\n    (if\
    \ (odd? (sum array))\n      sorted\n      (reverse sorted))))\n", "  (let ((n\
    \ (length array)))\n    (if (odd? (sum array))\n      (reverse array)\n      (reverse\
    \ (cdr array)))))\n", "  (if (odd? (sum array))\n    (reverse array)\n    (reverse\
    \ (cdr array))))\n\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 0 1 2 3\
    \ 4 5 6)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n\
    ;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array\
    \ (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4\
    \ 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n\
    ;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6\
    \ 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1\
    \ 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>>\
    \ (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array\
    \ (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4\
    \ 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n\
    ;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6\
    \ 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1\
    \ 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>>\
    \ (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6", "  (let* ([sorted (sort array)])\n\
    \    (if (odd? (sum array))\n      sorted\n      (reverse sorted))))\n", "  (let\
    \ ((sum (reduce (lambda (a b) (+ a b)) 0 array))))\n  (if (modulo sum 2)\n   \
    \ (reverse array)\n    (reverse (cdr array))))\n", "  (let ((n (length array)))\n\
    \    (if (odd? (sum array))\n      (reverse array)\n      (reverse (cdr array))))))\n",
  "  (let* ([sorted (sort array)])\n    (if (odd? (sum array))\n      sorted\n   \
    \   (reverse sorted))))\n", "  (let ((n (length array)))\n    (if (odd? (sum array))\n\
    \      (reverse array)\n      (reverse (cdr array))))))\n", "  (if (odd? (sum\
    \ array))\n    (reverse array)\n    (reverse (cdr array))))\n", "  (cond ((odd?\
    \ (sum array))\n         (reverse array))\n        ((even? (sum array))\n    \
    \     (reverse array))\n        (else\n         (reverse array))))\n\n;; (sort_array\
    \ (list 1 2 3 4 5 6))\n;; (sort_array (list 2 4 3 0 1 5 6))\n;; (sort_array (list\
    \ 2 4 3 0 1 5 6))\n;; (sort_array (list 2 4 3 0 1 5 6))\n;; (sort_array (list\
    \ 2 4 3 0 1 5 6))\n;; (sort_array (list 2 4 3 0 1 5 6))\n;; (sort_array (list\
    \ 2 4 3 0 1 5 6))\n;; (sort_array (list 2 4 3 0 1 5 6))\n;; (sort_array (list\
    \ 2 4 3 0 1 5 6))\n;; (sort_array (list 2 4 3 0 1 5 6))\n;; (sort_array (list\
    \ 2 4 3 0 1 5 6))\n;; (sort_array (list 2 4 3 0 1 5 6))\n;; (sort_array (list\
    \ 2 4 3 0 1 5 6))\n;; (sort_array (list 2 4 3 0 1 5 6))\n;; (sort_array (list\
    \ 2 4 3 0 1 5 6))\n;; (sort_array (list 2 4 3 0 1 5 6))\n;; (sort_array (list\
    \ 2 4 3 0 1 5 6))\n;; (sort_array (list 2 4 3 0 1 5 6))\n;; (sort_array (list\
    \ 2 4 3 0 1 5 6))\n;; (sort_array (list 2 4 3 0 1 5 6))\n;; (sort_array (list\
    \ 2 4 3 0 1 5 6))\n;; (sort_array (list 2 4 3 0 1 5 6))\n;; (sort_array (list\
    \ 2 4 3 0 1 5 6))\n;; (sort_array (list 2 4 3 0 1 5 6))\n;; (sort_array (list\
    \ 2 4 3 0 1 5 6))\n;; (sort_array (list 2 4 3 0 1 5 6))\n;; (sort_array (list\
    \ 2 4 3 0 1 5 6))\n;; (sort_array (list 2 4 3 0 1 5 6))\n;; (sort_array (list\
    \ 2 4 3 0 1 5 6))\n;; (sort_array (", "  (let ((sum (reduce (lambda (a b) (+ a\
    \ b)) array)))\n    (if (modulo sum 2)\n      (reverse array)\n      (reverse\
    \ (cdr array))))\n  array)\n", "  (if (odd? (sum array))\n    (reverse array)\n\
    \    (reverse (map (lambda (x) (- x array)) array))))\n", "  (let* ([sorted (sort\
    \ array)])\n    (if (odd? (sum array))\n      sorted\n      (reverse sorted))))\n",
  "  (let ((sum (reduce (lambda (x y) (+ x y)) 0 array))))\n  (if (modulo sum 2)\n\
    \    (reverse array)\n    array))\n", "  (let ((n (length array)))\n    (if (odd?\
    \ (sum array))\n      (reverse array)\n      (if (even? (sum array))\n       \
    \ (reverse array)\n        (reverse array))))))\n", "  (let* ([sorted (sort array)])\n\
    \    (cond ((odd? (sum array)) sorted)\n      ((even? (sum array)) (reverse sorted))\n\
    \      (else sorted))))\n", "  (let ((sum (reduce (lambda (a b) (+ a b)) array)))\n\
    \    (if (modulo sum 2)\n      (reverse array)\n      (reverse (cdr array))))\n\
    \  array)\n", "  (let ((sum (reduce (lambda (a b) (+ a b)) array)))\n    (if (modulo\
    \ sum 2)\n      (reverse array)\n      (reverse (cdr array))))\n  array)\n", " \
    \ (cond\n    ((odd? (sum array))\n      (reverse array))\n    ((even? (sum array))\n\
    \      (reverse array))\n    (else\n      array)))\n", "  (cond\n    ((odd? (sum\
    \ array))\n      (reverse array))\n    ((even? (sum array))\n      (reverse array))\n\
    \    (else\n      array))))\n", "  (let ((sum (sum array))))\n  (if (odd? sum)\n\
    \    (reverse array)\n    (if (even? sum)\n      (reverse array)\n      (reverse\
    \ array))))\n", "  (cond\n    ((even? (car array))\n      (reverse (cdr array)))\n\
    \    ((odd? (car array))\n      (reverse (cdr array)))\n    (else (reverse array))))\n",
  "  (let ((sum (reduce (lambda (a b) (+ a b)) array)))\n    (if (modulo sum 2)\n\
    \      (reverse array)\n      (reverse (reverse array))))))\n", "  (let* ([sorted\
    \ (sort array)])\n    (cond ((odd? (sum array)) sorted)\n        ((even? (sum\
    \ array)) (reverse sorted))\n        (else sorted))))\n", "  (let ((sum (reduce\
    \ (lambda (a b) (+ a b)) array)))\n    (if (modulo sum 2)\n      (reverse array)\n\
    \      (reverse (cdr array))))\n  array)\n", "  (let ((sum (reduce (lambda (a\
    \ b) (+ a b)) array)))\n    (if (modulo sum 2)\n      (reverse array)\n      (reverse\
    \ (cdr array))))\n  array)\n", "  (let ((sum (reduce (lambda (a b) (+ a b)) array)))\n\
    \    (if (modulo sum 2)\n      (reverse array)\n      (reverse (cdr array))))\n\
    \  array)\n", "  (let ((sum (reduce (lambda (a b) (+ a b)) array)))\n    (if (modulo\
    \ sum 2)\n      (reverse array)\n      (reverse (cdr array))))\n  array)\n", " \
    \ (let ((n (length array)))\n    (if (odd? (sum array))\n      (reverse array)\n\
    \      (if (even? (sum array))\n        (reverse array)\n        (reverse array))))))\n",
  "  (let ((sum (reduce (lambda (a b) (+ a b)) array)))\n    (if (modulo sum 2)\n\
    \      (reverse array)\n      (reverse (cdr array))))\n  array)\n", "  (let ((sum\
    \ (reduce (lambda (a b) (+ a b)) array)))\n    (if (modulo sum 2)\n      (reverse\
    \ array)\n      (reverse (cdr array))))\n)\n", "  (let ((sum (sum array))))\n\
    \  (if (odd? sum)\n    (reverse array)\n    (if (even? sum)\n      (reverse array)\n\
    \      (reverse array))))\n", "  (let ((sum (reduce (lambda (a b) (+ a b)) array)))\n\
    \    (if (odd? sum)\n      (reverse array)\n      (if (even? sum)\n        (reverse\
    \ array)\n        (reverse array))))\n)\n", "  (let ((sum (sum array))))\n  (if\
    \ (odd? sum)\n    (reverse array)\n    (if (even? sum)\n      (reverse array)\n\
    \      (reverse array))))\n", "  (let ((sum (reduce (lambda (a b) (+ a b)) array)))\n\
    \    (if (modulo sum 2)\n      (reverse array)\n      (reverse (cdr array))))\n\
    \  array)\n", "  (let ((sum (reduce (lambda (x y) (+ x y)) 0 array)))\n    (if\
    \ (modulo sum 2)\n      (reverse array)\n      (reverse (cdr array))))\n)\n",
  "  (let ((sum (reduce (lambda (a b) (+ a b)) 0 array))))\n  (if (modulo sum 2)\n\
    \    (reverse array)\n    array))\n", "  (let ((sum (sum array))))\n  (if (odd?\
    \ sum)\n    (reverse array)\n    (reverse (cdr array))))\n", "  (let ((sum (reduce\
    \ (lambda (a b) (+ a b)) array)))\n    (if (modulo sum 2)\n      (reverse array)\n\
    \      (reverse (cdr array))))\n  array)\n", "  (let* ([sorted (sort array)])\n\
    \    (if (odd? (sum array))\n      sorted\n      (reverse sorted))))\n", "  (let\
    \ ((sum (reduce (lambda (a b) (+ a b)) 0 array))))\n  (if (modulo sum 2)\n   \
    \ (reverse array)\n    array))\n", "  (cond ((odd? (sum array))\n         (reverse\
    \ array))\n        ((even? (sum array))\n         (reverse array))\n        (else\
    \ array)))\n\n;; >>> (sort_array (list 1 2 3 4 5 6))\n;; (list 0 1 2 3 4 5 6)\n\
    ;; >>> (sort_array (list 1 2 3 4 5 6 7))\n;; (list 7 6 5 4 3 2 1 0)\n;; >>> (sort_array\
    \ (list 1 2 3 4 5 6 7 8))\n;; (list 8 7 6 5 4 3 2 1 0)\n;; >>> (sort_array (list\
    \ 1 2 3 4 5 6 7 8 9))\n;; (list 9 8 7 6 5 4 3 2 1 0)\n;; >>> (sort_array (list\
    \ 1 2 3 4 5 6 7 8 9 10))\n;; (list 10 9 8 7 6 5 4 3 2 1 0)\n;; >>> (sort_array\
    \ (list 1 2 3 4 5 6 7 8 9 10 11))\n;; (list 11 10 9 8 7 6 5 4 3 2 1 0)\n;; >>>\
    \ (sort_array (list 1 2 3 4 5 6 7 8 9 10 11 12))\n;; (list 12 11 10 9 8 7 6 5\
    \ 4 3 2 1 0)\n;; >>> (sort_array (list 1 2 3 4 5 6 7 8 9 10 11 12 13))\n;; (list\
    \ 13 12 11 10 9 8 7 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 1 2 3 4 5 6 7 8 9\
    \ 10 11 12 13 14))\n;; (list 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0)\n;; >>> (sort_array\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15))\n;; (list 15 14 13 12 11 10 9 8\
    \ 7 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14\
    \ 15 16))\n;; (list 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0)\n;; >>> (sort_array\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17))\n;; (list 17 16 15 14 13 12\
    \ 11 10 9 8 7 6 5 4 3 2 1 0)\n;; >>> (sort_", "  (let ((sum (sum array))))\n \
    \ (if (odd? sum)\n    (reverse array)\n    (if (even? sum)\n      (reverse array)\n\
    \      (reverse array))))\n", "  (let* ([sorted (sort array)])\n    (if (odd?\
    \ (sum array))\n      sorted\n      (reverse sorted))))\n", "  (let ((sum (sum\
    \ array)))\n    (if (modulo sum 2)\n      (reverse array)\n      (reverse (cdr\
    \ array))))\n  array)\n", "  (cond\n    ((odd? (sum array))\n      (reverse array))\n\
    \    ((even? (sum array))\n      (reverse array))\n    (else\n      array)))\n\
    \n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array\
    \ (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4\
    \ 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n\
    ;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6\
    \ 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1\
    \ 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>>\
    \ (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array\
    \ (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4\
    \ 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n\
    ;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6\
    \ 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1\
    \ 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>>\
    \ (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array\
    \ (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_", "  (let ((sum\
    \ (reduce (lambda (a b) (+ a b)) array)))\n    (if (modulo sum 2)\n      (reverse\
    \ array)\n      (reverse (cdr array))))\n  array)\n", "  (let ((sum (reduce (lambda\
    \ (a b) (+ a b)) array)))\n    (if (modulo sum 2)\n      (reverse array)\n   \
    \   (reverse (reverse array))))\n  array)\n", "  (cond\n    ((odd? (sum array))\n\
    \      (reverse array))\n    ((even? (sum array))\n      (reverse array))\n  \
    \  (else\n      array))\n)\n", "  (let ((sum (reduce (lambda (a b) (+ a b)) 0\
    \ array))))\n  (if (modulo sum 2)\n    (reverse array)\n    (sort array)))\n\n\
    ;; >>> (sort_array (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\
    \ 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47\
    \ 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73\
    \ 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\
    \ 100))\n;; (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\
    \ 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49\
    \ 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75\
    \ 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100)\n\
    ;; >>> (sort_array (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\
    \ 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47\
    \ 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73\
    \ 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\
    \ 100))\n;; (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\
    \ 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49\
    \ 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75\
    \ 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100)\n\
    ;; >>> (sort_array (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\
    \ 22 23 24 25 26 27 28 29", "  (let ((sum (reduce (lambda (a b) (+ a b)) 0 array))))\n\
    \  (if (odd? sum)\n    (reverse array)\n    (if (even? sum)\n      (reverse array)\n\
    \      (reverse array))))\n", "  (cond\n    ((odd? (sum array))\n      (reverse\
    \ array))\n    ((even? (sum array))\n      (reverse array))\n    (else\n     \
    \ array)))\n\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n\
    ;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array\
    \ (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4\
    \ 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n\
    ;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6\
    \ 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1\
    \ 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>>\
    \ (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array\
    \ (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4\
    \ 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n\
    ;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6\
    \ 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1\
    \ 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>>\
    \ (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_",
  "  (cond\n    ((= (length array) 0)\n      (list))\n    ((< (length array) 1)\n\
    \      (list array))\n    (else\n      (let ((sum (sum (first array))))\n    \
    \    (if (odd? sum)\n          (reverse (cdr array))\n          (cdr array))))))\n",
  "  (let* ([sorted (sort array)])\n    (if (odd? (sum array))\n      sorted\n   \
    \   (reverse sorted))))\n", "  (if (odd? (sum array))\n    (reverse array)\n \
    \   (reverse (cdr array))))\n\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list\
    \ 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2\
    \ 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;;\
    \ >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array\
    \ (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4\
    \ 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n\
    ;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6\
    \ 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1\
    \ 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>>\
    \ (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array\
    \ (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4\
    \ 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n\
    ;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6\
    \ 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1\
    \ 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6", "  (let ((sum (reduce\
    \ (lambda (x y) (+ x y)) 0 array))))\n  (if (modulo sum 2)\n    (reverse array)\n\
    \    array))\n", "  (let ((sum (reduce (lambda (a b) (+ a b)) array)))\n    (if\
    \ (modulo sum 2)\n      (reverse array)\n      (reverse (cdr array))))\n  array)\n",
  "  (let ((sum (reduce (lambda (a b) (+ a b)) array)))\n    (if (modulo sum 2)\n\
    \      (reverse array)\n      (reverse (cdr array))))))\n", "  (let ((sum (reduce\
    \ (lambda (a b) (+ a b)) 0 array)))\n    (if (modulo sum 2)\n      (reverse array)\n\
    \      (reverse (reverse array))))))\n", "  (cond\n    ((odd? (sum array))\n \
    \     (reverse array))\n    ((even? (sum array))\n      (reverse array))\n   \
    \ (else\n      array)))\n", "  (cond\n    ((odd? (sum array))\n      (reverse\
    \ array))\n    ((even? (sum array))\n      (reverse array))\n    (else\n     \
    \ array)))\n", "  (let ((sum (sum array))))\n  (if (modulo sum 2)\n    (reverse\
    \ array)\n    (reverse (cdr array))))\n\n;; >>> (sort_array (list 2 4 3 0 1 5\
    \ 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list\
    \ 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2\
    \ 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;;\
    \ >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array\
    \ (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4\
    \ 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n\
    ;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6\
    \ 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1\
    \ 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>>\
    \ (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array\
    \ (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4\
    \ 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n\
    ;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6\
    \ 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0", "  (cond\n    ((odd? (sum array))\n\
    \      (reverse array))\n    ((even? (sum array))\n      (reverse array))\n  \
    \  (else\n      array))\n)\n", "  (let ((sum (reduce (lambda (a b) (+ a b)) 0\
    \ array))))\n  (if (modulo sum 2)\n    (reverse array)\n    array))\n", "  (let*\
    \ ([sorted (sort array)])\n    (if (odd? (sum array))\n      sorted\n      (reverse\
    \ sorted))))\n", "  (let ((sum (reduce (lambda (a b) (+ a b)) 0 array))))\n  (if\
    \ (modulo sum 2)\n    (reverse array)\n    array))\n", "  (let ((sum (sum array))))\n\
    \  (if (odd? sum)\n    (reverse array)\n    (if (even? sum)\n      (reverse array)\n\
    \      (reverse array))))\n", "  (let ((n (length array)))\n    (if (odd? (sum\
    \ array))\n      (reverse array)\n      (reverse (cdr array))))))\n", "  (cond\n\
    \    ((even? (sum array))\n      (reverse array))\n    ((odd? (sum array))\n \
    \     (reverse array))\n    (else\n      array)))\n\n;; >>> (sort_array (list\
    \ 1 2 3 4 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 1 2 3 4 5 6\
    \ 7))\n;; (list 7 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 1 2 3 4 5 6 7 8))\n\
    ;; (list 8 7 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 1 2 3 4 5 6 7 8 9))\n;;\
    \ (list 9 8 7 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 1 2 3 4 5 6 7 8 9 10))\n\
    ;; (list 10 9 8 7 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 1 2 3 4 5 6 7 8 9 10\
    \ 11))\n;; (list 11 10 9 8 7 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 1 2 3 4\
    \ 5 6 7 8 9 10 11 12))\n;; (list 12 11 10 9 8 7 6 5 4 3 2 1 0)\n;; >>> (sort_array\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13))\n;; (list 13 12 11 10 9 8 7 6 5 4 3 2\
    \ 1 0)\n;; >>> (sort_array (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14))\n;; (list\
    \ 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 1 2 3 4 5 6 7\
    \ 8 9 10 11 12 13 14 15))\n;; (list 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0)\n;;\
    \ >>> (sort_array (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16))\n;; (list 16\
    \ 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 1 2 3 4 5 6\
    \ 7 8 9 10 11 12 13 14 15 16 17))\n;; (list 17 16 15 14 13 12 11 10 9 8 7 6 5\
    \ 4 3 2 1 0)\n;;", "  (let ((sum (reduce (lambda (a b) (+ a b)) array)))\n   \
    \ (if (modulo sum 2)\n      (reverse array)\n      (sort array))))\n", "  (cond\n\
    \    ((odd? (sum array))\n      (reverse array))\n    ((even? (sum array))\n \
    \     (reverse array))\n    (else\n      array))\n)\n", "  (cond\n    ((>= array\
    \ 0)\n      (define (sort_array_helper array)\n        (define (sort_array_helper_helper\
    \ array)\n          (if (odd? (sum array))\n            (reverse array)\n    \
    \        (reverse (sort_array_helper_helper (cdr array)))))))\n    (else\n   \
    \   (define (sort_array_helper array)\n        (define (sort_array_helper_helper\
    \ array)\n          (if (odd? (sum array))\n            (reverse array)\n    \
    \        (reverse (sort_array_helper_helper (cdr array)))))))\n  (sort_array_helper\
    \ array)))\n", "  (let ((sum (reduce (lambda (a b) (+ a b)) array)))\n    (if\
    \ (modulo sum 2)\n      (reverse array)\n      (reverse (cdr array))))\n)\n",
  "  (let ((sum (reduce (lambda (a b) (+ a b)) array)))\n    (if (modulo sum 2)\n\
    \      (reverse array)\n      (reverse (cdr array))))))\n", "  (let ((sum (reduce\
    \ (lambda (a b) (+ a b)) 0 array))))\n  (if (modulo sum 2)\n    (reverse array)\n\
    \    array))\n", "  (let ((sum (reduce (lambda (a b) (+ a b)) array)))\n    (if\
    \ (modulo sum 2)\n      (reverse array)\n      (reverse (cdr array))))\n  array)\n",
  "  (cond\n    ((odd? (sum array))\n      (reverse array))\n    ((even? (sum array))\n\
    \      (reverse array))\n    (else\n      array)))\n", "  (let ((sum (sum array))))\n\
    \  (if (odd? sum)\n    (reverse array)\n    (reverse (cdr array))))\n\n;; >>>\
    \ (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array\
    \ (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4\
    \ 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n\
    ;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6\
    \ 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1\
    \ 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>>\
    \ (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array\
    \ (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4\
    \ 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n\
    ;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6\
    \ 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1\
    \ 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>>\
    \ (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array\
    \ (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4\
    \ 3 0 1", "  (cond\n    ((odd? (sum array))\n      (reverse array))\n    ((even?\
    \ (sum array))\n      (reverse array))\n    (else\n      array)))\n", "  (let\
    \ ((n (length array)))\n    (if (odd? (sum array))\n      (reverse array)\n  \
    \    (reverse (cdr array))))\n  array)\n\n;; >>> (sort_array (list 2 4 3 0 1 5\
    \ 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list\
    \ 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2\
    \ 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;;\
    \ >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array\
    \ (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4\
    \ 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n\
    ;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6\
    \ 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1\
    \ 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>>\
    \ (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array\
    \ (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4\
    \ 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n\
    ;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6\
    \ 5 4 3 2 1 0)\n;; >>> (sort_array (", "  (let* ([sorted (sort array)])\n    (if\
    \ (odd? (sum array))\n      sorted\n      (reverse sorted))))\n", "  (let ((sum\
    \ (reduce (lambda (a b) (+ a b)) array)))\n    (if (modulo sum 2)\n      (reverse\
    \ array)\n      (reverse (cdr array))))\n  array)\n", "  (cond ((odd? (sum array))\n\
    \         (reverse array))\n        ((even? (sum array))\n         (reverse array))))\n\
    \n;; >>> (sort_array (list 1 2 3 4 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array\
    \ (list 1 2 3 4 5 6 7))\n;; (list 7 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 1\
    \ 2 3 4 5 6 7 8))\n;; (list 8 7 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 1 2 3\
    \ 4 5 6 7 8 9))\n;; (list 9 8 7 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 1 2 3\
    \ 4 5 6 7 8 9 10))\n;; (list 10 9 8 7 6 5 4 3 2 1 0)\n;; >>> (sort_array (list\
    \ 1 2 3 4 5 6 7 8 9 10 11))\n;; (list 11 10 9 8 7 6 5 4 3 2 1 0)\n;; >>> (sort_array\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12))\n;; (list 12 11 10 9 8 7 6 5 4 3 2 1 0)\n\
    ;; >>> (sort_array (list 1 2 3 4 5 6 7 8 9 10 11 12 13))\n;; (list 13 12 11 10\
    \ 9 8 7 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 1 2 3 4 5 6 7 8 9 10 11 12 13\
    \ 14))\n;; (list 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0)\n;; >>> (sort_array (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15))\n;; (list 15 14 13 12 11 10 9 8 7 6 5\
    \ 4 3 2 1 0)\n;; >>> (sort_array (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16))\n\
    ;; (list 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 1\
    \ 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17))\n;; (list 17 16 15 14 13 12 11 10\
    \ 9 8 7 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 1 2 3", "  (cond\n    ((odd?\
    \ (sum array))\n      (reverse array))\n    ((even? (sum array))\n      (reverse\
    \ array))\n    (else\n      array)))\n", "  (let ((sum (reduce (lambda (a b) (+\
    \ a b)) array)))\n    (if (modulo sum 2)\n      (reverse array)\n      (reverse\
    \ (cdr array))))\n  array)\n", "  (if (odd? (sum array))\n    (reverse array)\n\
    \    (reverse (cdr array))))\n", "  (let ((sum (reduce (lambda (a b) (+ a b))\
    \ array)))\n    (if (modulo sum 2)\n      (reverse array)\n      (reverse (cdr\
    \ array))))\n  array)\n", "  (let ((sum (reduce (lambda (a b) (+ a b)) array)))\n\
    \    (if (modulo sum 2)\n      (reverse array)\n      (reverse (cdr array))))\n\
    \  array)\n", "  (let ((sum (reduce (lambda (a b) (+ a b)) 0 array))))\n  (if\
    \ (modulo sum 2)\n    (reverse array)\n    (sort array)))\n", "  (let* ([sorted\
    \ (sort array)])\n    (cond ((odd? (sum array)) sorted)\n        ((even? (sum\
    \ array)) (reverse sorted))\n        (else sorted))))\n", "  (let ((sum (reduce\
    \ (lambda (a b) (+ a b)) array)))\n    (if (modulo sum 2)\n      (reverse array)\n\
    \      (reverse (cdr array))))\n  array)\n", "  (let ((sum (reduce (lambda (x\
    \ y) (+ x y)) 0 array))))\n  (if (modulo sum 2)\n    (reverse array)\n    array))\n\
    \n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array\
    \ (list 2 4 3 0 1 5 6))\n;; (list 0 1 2 3 4 5 6)\n;; >>> (sort_array (list 2 4\
    \ 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n\
    ;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6\
    \ 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1\
    \ 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>>\
    \ (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array\
    \ (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4\
    \ 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n\
    ;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6\
    \ 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1\
    \ 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>>\
    \ (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array\
    \ (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_", "  (cond\n \
    \   ((odd? (sum array))\n      (reverse array))\n    ((even? (sum array))\n  \
    \    (reverse array))\n    (else\n      array))\n)\n", "  (let ((sum (reduce (lambda\
    \ (a b) (+ a b)) 0 array))))\n  (if (modulo sum 2)\n    (reverse array)\n    array))\n\
    \n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array\
    \ (list 2 4 3 0 1 5 6) 6)\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2\
    \ 4 3 0 1 5 6) 6)\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1\
    \ 5 6) 6)\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6) 6)\n\
    ;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6) 6)\n;; (list\
    \ 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6) 6)\n;; (list 6 5 4 3\
    \ 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6) 6)\n;; (list 6 5 4 3 2 1 0)\n\
    ;; >>> (sort_array (list 2 4 3 0 1 5 6) 6)\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array\
    \ (list 2 4 3 0 1 5 6) 6)\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2\
    \ 4 3 0 1 5 6) 6)\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1\
    \ 5 6) 6)\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6) 6)\n\
    ;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6) 6)\n;; (list\
    \ 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6) 6)\n;; (list 6 5 4 3\
    \ 2 1 0)\n;; >>> (sort_array", "  (let ((n (length array)))\n    (if (odd? (sum\
    \ array))\n      (reverse array)\n      (reverse (cdr array))))\n  array)\n",
  "  (cond\n    ((>= (length array) 1)\n      (if (odd? (+ (car array) (cdr array)))\n\
    \        (cons (car array) (sort_array (cdr array)))\n        (cons (car array)\
    \ (sort_array (cdr array))))\n      (else\n        (if (even? (+ (car array) (cdr\
    \ array)))\n          (cons (car array) (sort_array (cdr array)))\n          (cons\
    \ (car array) (sort_array (cdr array)))))))\n", "  (let ((sum (reduce (lambda\
    \ (a b) (+ a b)) array)))\n    (if (modulo sum 2)\n      (reverse array)\n   \
    \   (reverse (cdr array))))\n)\n", "  (let ((sum (reduce (lambda (a b) (+ a b))\
    \ 0 array))))\n  (if (modulo sum 2)\n    (reverse array)\n    array))\n", "  (let\
    \ ((sum (reduce (lambda (a b) (+ a b)) array)))\n    (if (modulo sum 2)\n    \
    \  (reverse array)\n      (reverse (cdr array))))\n  array)\n", "  (let ((sum\
    \ (reduce (lambda (a b) (+ a b)) array)))\n    (if (modulo sum 2)\n      (reverse\
    \ array)\n      (reverse (cdr array))))\n  array)\n\n;; >>> (sort_array (list\
    \ 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1\
    \ 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;;\
    \ (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5\
    \ 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n\
    ;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array\
    \ (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4\
    \ 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n\
    ;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6\
    \ 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1\
    \ 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>>\
    \ (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array\
    \ (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4\
    \ 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n\
    ;; (list 6 5 4 3 2 1", "  (let ((sum (reduce (lambda (a b) (+ a b)) array)))\n\
    \    (if (odd? sum)\n      (reverse array)\n      (if (even? sum)\n        (reverse\
    \ array)\n        (reverse array))))\n)\n", "  (cond\n    ((odd? (sum array))\n\
    \      (reverse array))\n    ((even? (sum array))\n      (reverse array))\n  \
    \  (else\n      array)))\n\n;; >>> (sort_array (list 1 2 3 4 5 6 7 8 9 10 11 12\
    \ 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38\
    \ 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64\
    \ 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90\
    \ 91 92 93 94 95 96 97 98 99 100))\n;; (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14\
    \ 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40\
    \ 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66\
    \ 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92\
    \ 93 94 95 96 97 98 99 100)\n;; >>> (sort_array (list 1 2 3 4 5 6 7 8 9 10 11\
    \ 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37\
    \ 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63\
    \ 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89\
    \ 90 91 92 93 94 95 96 97 98 99 100))\n;; (list 1 2 3 4 5 6 7 8 9 10 11 12 13\
    \ 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39\
    \ 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65\
    \ 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91\
    \ 92 93 94 95 96 97 98 99 100)\n;; >>> (sort_array (list 1 2 3 4 5 6 7 8 9 10\
    \ 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31", "  (let ((sum\
    \ (sum array))))\n  (if (odd? sum)\n    (reverse array)\n    (if (even? sum)\n\
    \      (reverse array)\n      (reverse array))))\n", "  (let ((sum (reduce (lambda\
    \ (a b) (+ a b)) array)))\n    (if (modulo sum 2)\n      (reverse array)\n   \
    \   (reverse (cdr array))))\n  array)\n", "  (cond ((odd? (sum array))\n     \
    \    (reverse array))\n        ((even? (sum array))\n         (reverse array))\n\
    \        (else\n         (reverse array))))\n", "  (let ((sum (reduce (lambda\
    \ (a b) (+ a b)) array)))\n    (if (modulo sum 2)\n      (reverse array)\n   \
    \   (reverse (cdr array))))\n)\n", "  (let ((n (length array)))\n    (if (odd?\
    \ (sum array))\n      (reverse array)\n      (reverse (cdr array))))))\n", " \
    \ (let ((sum (reduce (lambda (a b) (+ a b)) 0 array))))\n  (if (modulo sum 2)\n\
    \    (reverse array)\n    (reverse (cdr array))))\n", "  (let ((sum (reduce (lambda\
    \ (a b) (+ a b)) 0 array))))\n  (if (modulo sum 2)\n    (reverse array)\n    array))\n",
  "  (let ((sum (reduce (lambda (a b) (+ a b)) array)))\n    (if (modulo sum 2)\n\
    \      (reverse array)\n      (reverse (cdr array))))\n  array)\n", "  (cond\n\
    \    ((>= array 0)\n      (let ((sum (sum array))))\n      (if (odd? sum)\n  \
    \      (reverse array)\n        (if (even? sum)\n          (reverse array)\n \
    \         (reverse array))))\n    (else\n      (reverse array))))\n", "  (let\
    \ ((n (length array)))\n    (if (odd? (sum array))\n      (reverse array)\n  \
    \    (reverse (cdr array))))))\n", "  (let ((sum (reduce (lambda (a b) (+ a b))\
    \ array)))\n    (if (modulo sum 2)\n      (reverse array)\n      (reverse (reverse\
    \ array))))))\n", "  (let* ([sorted (sort array)])\n    (if (odd? (sum array))\n\
    \      sorted\n      (reverse sorted))))\n", "  (let ((sum (reduce (lambda (a\
    \ b) (+ a b)) 0 array))))\n  (if (modulo sum 2)\n    (reverse array)\n    array))\n",
  "  (let ((sum (reduce (lambda (a b) (+ a b)) array)))\n    (if (modulo sum 2)\n\
    \      (reverse array)\n      (reverse (cdr array))))\n  array)\n\n;; >>> (sort_array\
    \ (list 5))\n;; (list 5)\n;; >>> (sort_array (list 2 4 3 0 1 5))\n;; (list 0 1\
    \ 2 3 4 5)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n\
    ;; >>> (sort_array (list 2 4 3 0 1 5 6 7))\n;; (list 7 6 5 4 3 2 1 0)\n;; >>>\
    \ (sort_array (list 2 4 3 0 1 5 6 7 8))\n;; (list 8 7 6 5 4 3 2 1 0)\n;; >>> (sort_array\
    \ (list 2 4 3 0 1 5 6 7 8 9))\n;; (list 9 8 7 6 5 4 3 2 1 0)\n;; >>> (sort_array\
    \ (list 2 4 3 0 1 5 6 7 8 9 10))\n;; (list 10 9 8 7 6 5 4 3 2 1 0)\n;; >>> (sort_array\
    \ (list 2 4 3 0 1 5 6 7 8 9 10 11))\n;; (list 11 10 9 8 7 6 5 4 3 2 1 0)\n;; >>>\
    \ (sort_array (list 2 4 3 0 1 5 6 7 8 9 10 11 12))\n;; (list 12 11 10 9 8 7 6\
    \ 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6 7 8 9 10 11 12 13))\n;;\
    \ (list 13 12 11 10 9 8 7 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5\
    \ 6 7 8 9 10 11 12 13 14))\n;; (list 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0)\n;; >>>\
    \ (sort_array (list 2 4 3 0 1 5 6 7 8 9 10 11 12 13 14 15))\n;; (list 15 14 13\
    \ 12 11 10 9 8 7 6 5 4 3 2 1 0)\n;; >>> (sort_array (list 2 4 3 0 1 5 6 7 8 9\
    \ 10 11 12 13 14 15 16))\n;; (list 16 15 14 13 12 11 10", "  (let ((sum (reduce\
    \ (lambda (a b) (+ a b)) 0 array))))\n  (if (modulo sum 2)\n    (reverse array)\n\
    \    array))\n\n;; (sort_array (list 5))\n;; (sort_array (list 2 4 3 0 1 5))\n\
    ;; (sort_array (list 2 4 3 0 1 5 6))\n;; (sort_array (list 2 4 3 0 1 5 6))\n;;\
    \ (sort_array (list 2 4 3 0 1 5 6))\n;; (sort_array (list 2 4 3 0 1 5 6))\n;;\
    \ (sort_array (list 2 4 3 0 1 5 6))\n;; (sort_array (list 2 4 3 0 1 5 6))\n;;\
    \ (sort_array (list 2 4 3 0 1 5 6))\n;; (sort_array (list 2 4 3 0 1 5 6))\n;;\
    \ (sort_array (list 2 4 3 0 1 5 6))\n;; (sort_array (list 2 4 3 0 1 5 6))\n;;\
    \ (sort_array (list 2 4 3 0 1 5 6))\n;; (sort_array (list 2 4 3 0 1 5 6))\n;;\
    \ (sort_array (list 2 4 3 0 1 5 6))\n;; (sort_array (list 2 4 3 0 1 5 6))\n;;\
    \ (sort_array (list 2 4 3 0 1 5 6))\n;; (sort_array (list 2 4 3 0 1 5 6))\n;;\
    \ (sort_array (list 2 4 3 0 1 5 6))\n;; (sort_array (list 2 4 3 0 1 5 6))\n;;\
    \ (sort_array (list 2 4 3 0 1 5 6))\n;; (sort_array (list 2 4 3 0 1 5 6))\n;;\
    \ (sort_array (list 2 4 3 0 1 5 6))\n;; (sort_array (list 2 4 3 0 1 5 6))\n;;\
    \ (sort_array (list 2 4 3 0 1 5 6))\n;; (sort_array (list 2 4 3 0 1 5 6))\n;;\
    \ (sort_array (list 2 4 3 0 1 5 6))\n;; (sort_array (list 2 4 3 0 1 5 6))\n;;\
    \ (sort_array (list 2 4 3 0 1 5 6))\n;; (sort_array (list 2 4 3 0 1"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
