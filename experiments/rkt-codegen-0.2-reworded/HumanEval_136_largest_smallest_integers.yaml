name: HumanEval_136_largest_smallest_integers
language: rkt
prompt: "#lang racket\n\n;; Create a function that returns a list (a, b), where 'a'\
  \ is\n;; the largest of negative integers, and 'b' is the smallest\n;; of positive\
  \ integers in a list.\n;; If there is no negative or positive integers, return them\
  \ as #f.\n;; Examples:\n;; >>> (largest_smallest_integers (list 2 4 1 3 5 7))\n\
  ;; (list #f 1)\n;; >>> (largest_smallest_integers (list ))\n;; (list #f #f)\n;;\
  \ >>> (largest_smallest_integers (list 0))\n;; (list #f #f)\n(define (largest_smallest_integers\
  \ lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_smallest_integers))\n\
  \    (check-equal? (candidate (list 2 4 1 3 5 7)) (list #f 1))\n    (check-equal?\
  \ (candidate (list 2 4 1 3 5 7 0)) (list #f 1))\n    (check-equal? (candidate (list\
  \ 1 3 2 4 5 6 -2)) (list -2 1))\n    (check-equal? (candidate (list 4 5 3 6 2 7\
  \ -7)) (list -7 2))\n    (check-equal? (candidate (list 7 3 8 4 9 2 5 -9)) (list\
  \ -9 2))\n    (check-equal? (candidate (list )) (list #f #f))\n    (check-equal?\
  \ (candidate (list 0)) (list #f #f))\n    (check-equal? (candidate (list -1 -3 -5\
  \ -6)) (list -1 #f))\n    (check-equal? (candidate (list -1 -3 -5 -6 0)) (list -1\
  \ #f))\n    (check-equal? (candidate (list -6 -4 -4 -3 1)) (list -3 1))\n    (check-equal?\
  \ (candidate (list -6 -4 -4 -3 -100 1)) (list -3 1))\n))\n\n(test-humaneval)"
completions: ["  (cond\n    ((null? lst) #f)\n    ((< 0 (car lst)) (car lst))\n  \
    \  ((> 0 (car lst)) (cdr lst))\n    (else (cons (car lst) (largest_smallest_integers\
    \ (cdr lst))))\n  )\n)\n\n;; Create a function that returns the sum of all the\
    \ elements in a list.\n;; Examples:\n;; >>> (sum_list (list 1 2 3 4 5))\n;; 10\n\
    ;; >>> (sum_list (list ))\n;; 0\n;; >>> (sum_list (list 1))\n;; 1", "  (cond\n\
    \    [(null? lst) (return (list #f #f))]\n    [(negative? (first lst)) (return\
    \ (list (first lst) (first lst)))]\n    [(positive? (first lst)) (return (list\
    \ (first lst) (first lst)))]\n    [else (return (list (first lst) (first lst)))]\n\
    \  )\n)\n\n;; Create a function that returns the sum of the squares of\n;; the\
    \ integers in a list.\n;; Examples:\n;; >>> (sum_of_squares (list 1 2 3 4 5 6\
    \ 7 8 9 10))\n;; (list 1 25 1 25 1 25 1 25 1 25 1 25)\n;; >>> (sum_of_squares\
    \ (list ))\n;; (list 0 0 0 0 0 0 0 0 0 0)\n;; >>> (sum_of_squares (list 0))\n\
    ;; (list 0 0 0 0 0 0 0 0 0 0)", "  (let ((numbers (mapcar (lambda (x) (if (< x\
    \ 0) -1 (if (> x 0) 1 0)))) lst))\n    (if (empty? numbers)\n      (list #f #f)\n\
    \      (let ((max (car numbers))\n            (min (cdr numbers)))\n        (list\
    \ max min))))\n)\n\n;; Create a function that returns the sum of all the integers\
    \ in a list.\n;; Examples:\n;; >>> (sum_integers (list 1 2 3 4 5 6 7 8 9))\n;;\
    \ (list 28)\n;; >>> (sum_integers (list ))\n;; (list 0)\n;; >>> (sum_integers\
    \ (list 0))\n;; (list 0)", "  (let ((numbers (mapcar (lambda (x) (if (< x 0) -1\
    \ (if (> x 0) 1 0)))) lst))\n    (if (null? numbers)\n      (list #f #f)\n   \
    \   (let ((a (car numbers))\n            (b (cdr numbers)))\n        (if (null?\
    \ a)\n          (list b a)\n          (if (null? b)\n            (list a b)\n\
    \            (list b a)))))))\n\n;;; Test the function", "  (cond\n    ((null?\
    \ lst) (list #f #f))\n    ((negative? (car lst)) (car lst))\n    ((positive? (car\
    \ lst)) (cdr lst))\n    (else (car lst))\n  )\n)\n\n;; Create a function that\
    \ returns the sum of the elements in a list.\n;; Examples:\n;; >>> (sum_list (list\
    \ 1 2 3 4 5))\n;; 6\n;; >>> (sum_list (list ))\n;; 0\n;; >>> (sum_list (list 1))\n\
    ;; 1", "  (cond\n    [(null? lst) (list #f #f)]\n    [(negative? (first lst))\n\
    \      (list (first lst) (first lst))]\n    [(positive? (first lst))\n      (list\
    \ (first lst) (first lst))]\n    [else\n      (list (first lst) (first lst))]))\n\
    \n;; Create a function that returns a list (a, b), where 'a' is\n;; the largest\
    \ of positive integers, and 'b' is the smallest\n;; of negative integers in a\
    \ list.\n;; If there is no positive or negative integers, return them as #f.\n\
    ;; Examples:\n;; >>> (largest_smallest_integers (list 2 4 1 3 5 7))\n;; (list\
    \ #f 1)\n;; >>> (largest_smallest_integers (list ))\n;; (list #f #f)\n;; >>> (largest_smallest_integers\
    \ (list 0))\n;; (list #f #f)", "  (cond\n    ((null? lst) #f)\n    ((< 0 (car\
    \ lst)) (car lst))\n    ((> 0 (car lst)) (cdr lst))\n    (else (cons (car lst)\
    \ (largest_smallest_integers (cdr lst))))\n  )\n)\n\n;; Create a function that\
    \ returns a list (a, b), where 'a' is\n;; the largest of positive integers, and\
    \ 'b' is the smallest\n;; of negative integers in a list.\n;; If there is no negative\
    \ or positive integers, return them as #f.\n;; Examples:\n;; >>> (largest_smallest_integers\
    \ (list 2 4 1 3 5 7))\n;; (list #f 2)\n;; >>> (largest_smallest_integers (list\
    \ ))\n;; (list #f #f)\n;; >>> (largest_smallest_integers (list 0))\n;; (list #f\
    \ #f)", "  (cond\n    [(null? lst) (return (list #f #f))]\n    [(negative? (first\
    \ lst)) (return (list (first lst) (first lst)))]\n    [(positive? (first lst))\
    \ (return (list (first lst) (first lst)))]\n    [else (return (list (first lst)\
    \ (first lst)))]\n  )\n)\n\n;; Create a function that returns the sum of the squares\
    \ of\n;; the integers in a list.\n;; Examples:\n;; >>> (sum_of_squares (list 2\
    \ 4 1 3 5 7))\n;; 17\n;; >>> (sum_of_squares (list ))\n;; 0\n;; >>> (sum_of_squares\
    \ (list 0))\n;; 0", "  (cond\n    [(null? lst) (list #f #f)]\n    [(negative?\
    \ (car lst)) (list (car lst) (largest_smallest_integers (cdr lst)))]\n    [(positive?\
    \ (car lst)) (list (largest_smallest_integers (cdr lst)) (car lst))]\n    [else\
    \ (list #f #f)]\n  )\n)\n\n;; Create a function that returns a list (a, b), where\
    \ 'a' is\n;; the largest of positive integers, and 'b' is the smallest\n;; of\
    \ negative integers in a list.\n;; If there is no positive or negative integers,\
    \ return them as #f.\n;; Examples:\n;; >>> (largest_smallest_integers (list 2\
    \ 4 1 3 5 7))\n;; (list 1 #f)\n;; >>> (largest_smallest_integers (list ))\n;;\
    \ (list #f #f)\n;; >>> (largest_smallest_integers (list 0))\n;; (list #f #f)",
  "  (let ((min (car lst))\n         (max (car lst)))\n    (if (null? lst)\n     \
    \ (list #f #f)\n      (if (null? min)\n        (list max min)\n        (if (null?\
    \ max)\n          (list min max)\n          (list max min))))))\n", "  (let ((numbers\
    \ (mapcar (lambda (x) (if (< x 0) -1 (if (> x 0) 1 0)))) lst))\n    (if (empty?\
    \ numbers)\n        (list #f #f)\n        (let ((max (car numbers))\n        \
    \      (min (cdr numbers)))\n          (list max min))))\n)\n\n;; Create a function\
    \ that returns a list (a, b), where 'a' is\n;; the largest of positive integers,\
    \ and 'b' is the smallest\n;; of negative integers in a list.\n;; If there is\
    \ no positive or negative integers, return them as #f.\n;; Examples:\n;; >>> (largest_smallest_integers\
    \ (list 2 4 1 3 5 7))\n;; (list 1 #f)\n;; >>> (largest_smallest_integers (list\
    \ ))\n;; (list #f #f)\n;; >>> (largest_smallest_integers (list 0))\n;; (list #f\
    \ #f)", "  (cond\n    [(null? lst) (return (list #f #f))]\n    [(negative? (car\
    \ lst)) (return (list (car lst) (car lst)))]\n    [(positive? (car lst)) (return\
    \ (list (car lst) (car lst)))]\n    [else (return (list #f #f))]\n  )\n)\n\n;;\
    \ Create a function that returns the sum of the squares of\n;; the integers in\
    \ a list.\n;; Examples:\n;; >>> (sum_of_squares (list 1 2 3 4 5 6 7))\n;; (list\
    \ 1 4 9 16 25 36 49 64)\n;; >>> (sum_of_squares (list ))\n;; (list 0 0 0 0 0 0\
    \ 0)\n;; >>> (sum_of_squares (list 0))\n;; (list 0 0 0 0 0 0 0)", "  (cond\n \
    \   [(null? lst) (list #f #f)]\n    [(negative? (car lst)) (list (car lst) (largest_smallest_integers\
    \ (cdr lst)))]\n    [(positive? (car lst)) (list (largest_smallest_integers (cdr\
    \ lst)) (car lst))]\n    [else (list #f #f)]\n  )\n)\n\n;; Create a function that\
    \ returns the sum of all the\n;; integers in a list.\n;; Examples:\n;; >>> (sum_integers\
    \ (list 2 4 1 3 5 7))\n;; 15\n;; >>> (sum_integers (list ))\n;; 0\n;; >>> (sum_integers\
    \ (list 0))\n;; 0", "  (cond\n    ((null? lst) (list #f #f))\n    ((negative?\
    \ (car lst)) (list (car lst) (largest_smallest_integers (cdr lst))))\n    ((positive?\
    \ (car lst)) (list (largest_smallest_integers (cdr lst)) (car lst)))\n    (else\
    \ (list #f #f))\n  )\n)\n\n;; Create a function that returns the sum of the squares\
    \ of\n;; the integers in a list.\n;; Examples:\n;; >>> (sum_of_squares (list 1\
    \ 2 3 4 5 6 7 8 9))\n;; (list 1 4 9 16 25 36 49 64 81 100 121 144 169 196 225\
    \ 256 289 324 361 425 466 527 559 604 641 676 721 756 801 841 876 901 936 961\
    \ 986 1021 1056 1089 1134 1169 1214 1249 1284 1319 1354 1389 1424 1459 1494 1529\
    \ 1564 1609 1644 1679 1714 1749 1784 1819 1854 1889 1907 2124 2159 2194 2219 2244\
    \ 2359 2484 2519 2554 2589 2624 2659 2714 2749 2784 2819 2854 2889 2924 2959 2994\
    \ 3029 3064 3109 3144 3169 3194 3229 3254 3289 3304 3329 3354 3389 3404 3429 3464\
    \ 3489 3504 3549 3584 3619 3655 3689 3714 3749 3784 3819 3854 3889 3924 3959 3994\
    \ 4009 4044 4079 4114 4149 4184 4209 4244 4269 4294 4319 4354 4389 4404 4449 4484\
    \ 4509 4544 4559 4594 4619 4654 4689 4714 4749 4784 4819 4854 4889 4924 4959 4994\
    \ 5009 5044 5079 5114 5149 5184 5209 5244 5269 5294 5319 5354 5389 5404 5449 5484\
    \ 5509 5544 5559 5594 5619 5655 5689 5714 5749 5784 5819 5854 5889 5924 5959 5994\
    \ 6009 6044 6059 6094 6114 6149 6184 6209 6244 6269 6294 6319 6344 6359", "  (cond\n\
    \    ((null? lst) #f)\n    ((negative? (car lst)) (cdr lst))\n    ((positive?\
    \ (car lst)) (car lst))\n    (else (cons (car lst) (largest_smallest_integers\
    \ (cdr lst))))\n  )\n)\n\n;; Create a function that returns the largest of two\
    \ numbers.\n;; If the numbers are equal, return them as #f.\n;; Examples:\n;;\
    \ >>> (largest_of_two_numbers (list 1 2))\n;; (list 2)\n;; >>> (largest_of_two_numbers\
    \ (list 1 1))\n;; (list #f)\n;; >>> (largest_of_two_numbers (list 1 1.0))\n;;\
    \ (list 1.0)", "  (cond\n    [(null? lst) (return (list #f #f))]\n    [(negative?\
    \ (first lst)) (return (list (first lst) (first lst)))]\n    [(positive? (first\
    \ lst)) (return (list (first lst) (first lst)))]\n    [else (return (list (first\
    \ lst) (first lst)))]\n  )\n)\n", "  (cond\n    [(null? lst) (list #f #f)]\n \
    \   [(negative? (first lst)) (list (first lst) (first lst))]\n    [(positive?\
    \ (first lst)) (list (first lst) (first lst))]\n    [else (list #f #f)]\n  )\n\
    )\n", "  (cond\n    [(null? lst) (return (list #f #f))]\n    [(negative? (car\
    \ lst)) (return (list (car lst) (car lst)))]\n    [(positive? (car lst)) (return\
    \ (list (car lst) (car lst)))]\n    [else (return (list #f #f))]\n  )\n)\n\n;;\
    \ Create a function that returns the sum of the squares of\n;; the integers in\
    \ a list.\n;; Examples:\n;; >>> (sum_of_squares (list 1 2 3 4 5))\n;; 25\n;; >>>\
    \ (sum_of_squares (list ))\n;; 0\n;; >>> (sum_of_squares (list 1 2 3 4 5 6 7))\n\
    ;; 100\n;; >>> (sum_of_squares (list 1 2 3 4 5 6 7 8 9))\n;; 100\n;; >>> (sum_of_squares\
    \ (list 1 2 3 4 5 6 7 8 9 10))\n;; 100\n;; >>> (sum_of_squares (list 1 2 3 4 5\
    \ 6 7 8 9 10 11))\n;; 100\n;; >>> (sum_of_squares (list 1 2 3 4 5 6 7 8 9 10 11\
    \ 12))\n;; 100\n;; >>> (sum_of_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13))\n\
    ;; 100\n;; >>> (sum_of_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14))\n;; 100\n\
    ;; >>> (sum_of_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15))\n;; 100\n;;\
    \ >>> (sum_of_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16))\n;; 100\n\
    ;; >>> (sum_of_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17))\n;; 100\n\
    ;; >>> (sum_of_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18))\n\
    ;; 100\n;; >>> (sum_of_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\
    \ 18 19))\n;; 100\n;; >>>", "  (cond\n    ((null? lst) (list #f #f))\n    ((negative?\
    \ (car lst)) (list (car lst) (largest_smallest_integers (cdr lst))))\n    ((positive?\
    \ (car lst)) (list (largest_smallest_integers (cdr lst)) (car lst)))\n    (else\
    \ (list #f #f))\n  )\n)\n\n;; Create a function that returns the sum of all the\
    \ numbers in a list.\n;; If there are no numbers, return 0.\n;; Examples:\n;;\
    \ >>> (sum_list (list 1 2 3 4 5))\n;; 10\n;; >>> (sum_list (list ))\n;; 0", " \
    \ (let ((numbers (mapcar (lambda (x) (if (< x 0) -1 (if (> x 0) 1 0)))) lst))\n\
    \    (if (null? numbers)\n      (list #f #f)\n      (let ((a (car numbers)) (b\
    \ (cdr numbers)))\n        (if (null? a)\n          (list #f b)\n          (if\
    \ (null? b)\n            (list a b)\n            (list (car a) (car b))))))))\n\
    \n;; Create a function that returns a list (a, b), where 'a' is\n;; the largest\
    \ of positive integers, and 'b' is the smallest\n;; of negative integers in a\
    \ list.\n;; If there is no positive or negative integers, return them as #f.\n\
    ;; Examples:\n;; >>> (largest_smallest_integers (list 2 4 1 3 5 7))\n;; (list\
    \ #f 1)\n;; >>> (largest_smallest_integers (list ))\n;; (list #f #f)\n;; >>> (largest_smallest_integers\
    \ (list 0))\n;; (list #f #f)", "  (let ((numbers (mapcar (lambda (x) (if (< x\
    \ 0) -1 (if (> x 0) 1 0)))) lst))\n    (if (null? numbers)\n      (list #f #f)\n\
    \      (let ((a (car numbers))\n            (b (cdr numbers)))\n        (if (null?\
    \ a)\n          (list b a)\n          (if (null? b)\n            (list a b)\n\
    \            (list a (car b))))))))\n\n;; Create a function that returns a list\
    \ (a, b, c), where 'a' is\n;; the largest of negative integers, and 'b' and 'c'\
    \ are the\n;; smallest of positive integers in a list.\n;; If there is no negative\
    \ or positive integers, return them as #f.\n;; Examples:\n;; >>> (largest_smallest_integers\
    \ (list 2 4 1 3 5 7))\n;; (list #f 1)\n;; >>> (largest_smallest_integers (list\
    \ ))\n;; (list #f #f)\n;; >>> (largest_smallest_integers (list 0))\n;; (list #f\
    \ #f)", "  (let ((numbers (mapcar (lambda (x) (if (< x 0) -1 (if (> x 0) 1 0))))\
    \ lst))\n    (cond\n      ((empty? numbers) #f)\n      ((empty? (car numbers))\
    \ (car numbers))\n      (else\n        (let ((a (car numbers)) (b (car numbers)))\n\
    \          (if (not (null? (cdr numbers)))\n            (let ((c (car (cdr numbers)))\
    \ (d (car (cdr (cdr numbers))))\n                  (if (< a (- a b)) (car numbers)\n\
    \                    (if (> a (- a b)) (car numbers)\n                       (if\
    \ (< c (- c d)) (car numbers)\n                          (if (> c (- c d)) (car\
    \ numbers)\n                             (if (< a b) (car numbers)\n         \
    \                       (if (> a b) (car numbers))))))))))))))))))\n", "  (cond\n\
    \    ((null? lst) (list #f #f))\n    ((negative? (car lst)) (list (car lst) (largest_smallest_integers\
    \ (cdr lst))))\n    ((positive? (car lst)) (list (largest_smallest_integers (cdr\
    \ lst)) (car lst)))\n    (else (list #f #f))\n  )\n)\n\n;; Create a function that\
    \ returns the sum of the squares of\n;; the integers in a list.\n;; Examples:\n\
    ;; >>> (sum_of_squares (list 1 2 3 4 5 6 7))\n;; (list 1 4 9 16 25 36 49 64)\n\
    ;; >>> (sum_of_squares (list ))\n;; (list 0 0 0 0 0 0 0)\n;; >>> (sum_of_squares\
    \ (list 0))\n;; (list 0 0 0 0 0 0 0)", "  (let ((numbers (mapcar (lambda (x) (if\
    \ (< x 0) -1 (if (> x 0) 1 0)))) lst))\n    (if (null? numbers)\n      (list #f\
    \ #f)\n      (let ((a (car numbers))\n            (b (cdr numbers)))\n       \
    \ (if (null? a)\n          (list b a)\n          (if (null? b)\n            (list\
    \ a b)\n            (list a (car b))))))))\n", "  (cond\n    [(null? lst) (list\
    \ #f #f)]\n    [(negative? (car lst)) (list (car lst) (largest_smallest_integers\
    \ (cdr lst)))]\n    [(positive? (car lst)) (list (largest_smallest_integers (cdr\
    \ lst)) (car lst))]\n    [else (list #f #f)]\n  )\n)\n\n;; Create a function that\
    \ returns the sum of all the elements in a list.\n;; Examples:\n;; >>> (sum_list\
    \ (list 1 2 3 4 5))\n;; 10\n;; >>> (sum_list (list ))\n;; 0", "  (cond\n    ((null?\
    \ lst) (list #f #f))\n    ((negative? (car lst)) (car lst))\n    ((positive? (car\
    \ lst)) (cdr lst))\n    (else (list #f #f)))\n)\n\n;; Create a function that returns\
    \ the sum of all the integers in a\n;; list.\n;; Examples:\n;; >>> (sum_integers\
    \ (list 2 4 1 3 5 7))\n;; 13\n;; >>> (sum_integers (list ))\n;; 0\n;; >>> (sum_integers\
    \ (list 0))\n;; 0", "  (cond\n    ((null? lst) #f)\n    ((< 0 (car lst)) (car\
    \ lst))\n    ((> 0 (car lst)) (cdr lst))\n    (else (cons (car lst) (largest_smallest_integers\
    \ (cdr lst))))\n  )\n)\n\n;; Create a function that returns the sum of the squares\
    \ of\n;; the integers in a list.\n;; Examples:\n;; >>> (sum-of-squares (list 1\
    \ 2 3 4 5 6 7))\n;; (list 1 4 9 16 25 36 49 64)\n;; >>> (sum-of-squares (list\
    \ ))\n;; (list 0 0 0 0 0 0 0)\n;; >>> (sum-of-squares (list 0))\n;; (list 0 0\
    \ 0 0 0 0 0)", "  (let ((numbers (mapcar (lambda (x) (if (< x 0) -1 (if (> x 0)\
    \ 1 0)))) lst))\n    (if (empty? numbers)\n      (list #f #f)\n      (let ((a\
    \ (car numbers))\n            (b (cdr numbers)))\n        (if (null? a)\n    \
    \      (list b)\n          (if (null? b)\n            (list a)\n            (list\
    \ (car a) (cdr a))))))))\n", "  (let ((numbers (mapcar (lambda (x) (if (< x 0)\
    \ -1 (if (> x 0) 1 0)))) lst))\n    (if (null? numbers)\n      (list #f #f)\n\
    \      (let ((a (car numbers))\n            (b (cdr numbers)))\n        (if (null?\
    \ a)\n          (list b a)\n          (if (null? b)\n            (list a b)\n\
    \            (list a (car b))))))))\n", "  (cond\n    ((null? lst) (list #f #f))\n\
    \    ((negative? (car lst)) (list (car lst) (largest_smallest_integers (cdr lst))))\n\
    \    ((positive? (car lst)) (list (largest_smallest_integers (cdr lst)) (car lst)))\n\
    \    (else (list #f #f)))\n)\n\n;; Create a function that returns the sum of the\
    \ squares of\n;; the integers in a list.\n;; Examples:\n;; >>> (sum_of_squares\
    \ (list 1 2 3 4 5 6 7))\n;; 21\n;; >>> (sum_of_squares (list ))\n;; 0\n;; >>>\
    \ (sum_of_squares (list 0))\n;; 0", "  (cond\n    [(null? lst) (return (list #f\
    \ #f))]\n    [(negative? (first lst)) (return (list (first lst) (first lst)))]\n\
    \    [(positive? (first lst)) (return (list (first lst) (first lst)))]\n    [else\
    \ (return (list (first lst) (first lst)))]\n  )\n)\n", "  (cond\n    [(null? lst)\
    \ (list #f #f)]\n    [(negative? (car lst)) (list (car lst) (largest_smallest_integers\
    \ (cdr lst)))]\n    [(positive? (car lst)) (list (largest_smallest_integers (cdr\
    \ lst)) (car lst))]\n    [else (list #f #f)]\n  )\n)\n\n;; Create a function that\
    \ returns a list (a, b), where 'a' is\n;; the largest of positive integers, and\
    \ 'b' is the smallest\n;; of negative integers in a list.\n;; If there is no positive\
    \ or negative integers, return them as #f.\n;; Examples:\n;; >>> (largest_smallest_integers\
    \ (list 2 4 1 3 5 7))\n;; (list 1 #f)\n;; >>> (largest_smallest_integers (list\
    \ ))\n;; (list #f #f)\n;; >>> (largest_smallest_integers (list 0))\n;; (list #f\
    \ #f)", "  (cond\n    ((null? lst) (list #f #f))\n    ((negative? (car lst)) (list\
    \ (car lst) (largest_smallest_integers (cdr lst))))\n    ((positive? (car lst))\
    \ (list (largest_smallest_integers (cdr lst)) (car lst)))\n    (else (list #f\
    \ #f))))\n\n;; Create a function that returns the sum of all elements in a list.\n\
    ;; Examples:\n;; >>> (sum_list (list 1 2 3 4 5))\n;; 10\n;; >>> (sum_list (list\
    \ ))\n;; 0\n;; >>> (sum_list (list 1))\n;; 1", "  (let ((neg (find-first-negative\
    \ lst))))\n  (let ((pos (find-first-positive lst))))\n  (cond\n    ((neg? neg)\
    \ (neg neg))\n    ((pos? pos) (pos pos))\n    (else (list #f #f))\n  )\n)\n\n\
    ;; Create a function that returns the sum of all the integers in a list.\n;; Examples:\n\
    ;; >>> (sum-of-integers (list 1 2 3 4 5))\n;; 10\n;; >>> (sum-of-integers (list\
    \ ))\n;; 0", "  (let ((numbers (mapcar (lambda (x) (if (< x 0) -1 (if (> x 0)\
    \ 1 0)))) lst))\n    (if (empty? numbers)\n      (list #f #f)\n      (let ((a\
    \ (car numbers))\n            (b (cdr numbers)))\n        (if (null? a)\n    \
    \      (list #f b)\n          (if (null? b)\n            (list a b)\n        \
    \    (let ((a (car a))\n                  (b (cdr a)))\n              (if (null?\
    \ b)\n                (list a b)\n                (list (car b) (cdr b)))))))))))\n\
    \n;;; (largest_smallest_integers (list 2 4 1 3 5 7))\n;;; (largest_smallest_integers\
    \ (list ))\n;;; (largest_smallest_integers (list 0))\n;;; (largest_smallest_integers\
    \ (list -1))\n;;; (largest_smallest_integers (list 1))\n;;; (largest_smallest_integers\
    \ (list -1 1))\n;;; (largest_smallest_integers (list 1 -1))\n;;; (largest_smallest_integers\
    \ (list -1 -1))\n;;; (largest_smallest_integers (list 0 0))\n;;; (largest_smallest_integers\
    \ (list 0 0 0))\n;;; (largest_smallest_integers (list 0 0 0 0))\n;;; (largest_smallest_integers\
    \ (list 0 0 0 0 0))\n;;; (largest_smallest_integers (list 0 0 0 0 0 0))\n;;; (largest_smallest_integers\
    \ (list 0 0 0 0 0 0 0))\n;;; (largest_smallest_integers (list 0 0 0 0 0 0 0 0))\n\
    ;;; (largest_smallest_integers (list 0 0 0 0 0 0 0 0 0))\n;;; (largest_smallest_integers\
    \ (list 0 0 0 0 0 0 0 0 0 0))\n;;; (largest_smallest_integers (list 0 0 0 0 0\
    \ 0 0 0 0 0 0))\n;;; (largest_smallest_integers (list 0 0 0 0 0 0", "  (cond\n\
    \    [(null? lst) (list #f #f)]\n    [(negative? (first lst)) (list (first lst)\
    \ (first lst))]\n    [(positive? (first lst)) (list (first lst) (first lst))]\n\
    \    [else (list (first lst) (first lst))]))\n\n;; Create a function that returns\
    \ the sum of the elements in a list.\n;; Examples:\n;; >>> (sum_list (list 1 2\
    \ 3 4 5))\n;; 10\n;; >>> (sum_list (list ))\n;; 0\n;; >>> (sum_list (list 1 2\
    \ 3 4 5 6 7 8 9))\n;; 45\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9 10))\n;; 60\n\
    ;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9 10 11))\n;; 71\n;; >>> (sum_list (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12))\n;; 83\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8\
    \ 9 10 11 12 13))\n;; 96\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9 10 11 12 13\
    \ 14))\n;; 110\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15))\n\
    ;; 135\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16))\n;; 160\n\
    ;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17))\n;; 176\n;;\
    \ >>> (sum_list (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18))\n;; 192\n\
    ;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19))\n;; 219\n\
    ;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20))\n\
    ;; 255\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\
    \ 20 21))\n;; 280\n;; >>> (sum_list (list 1 2", "  (cond\n    [(null? lst) (return\
    \ (list #f #f))]\n    [(negative? (car lst)) (return (list (car lst) (largest_smallest_integers\
    \ (cdr lst))))]\n    [(positive? (car lst)) (return (list (largest_smallest_integers\
    \ (cdr lst)) (car lst)))]\n    [else (return (list #f #f))]\n  )\n)\n\n;; Create\
    \ a function that returns a list (a, b), where 'a' is\n;; the largest of positive\
    \ integers, and 'b' is the smallest\n;; of negative integers in a list.\n;; If\
    \ there is no positive or negative integers, return them as #f.\n;; Examples:\n\
    ;; >>> (largest_smallest_integers (list 2 4 1 3 5 7))\n;; (list #f 4)\n;; >>>\
    \ (largest_smallest_integers (list ))\n;; (list #f #f)\n;; >>> (largest_smallest_integers\
    \ (list 0))\n;; (list #f #f)", "  (cond\n    ((null? lst) (list #f #f))\n    ((negative?\
    \ (car lst)) (car lst))\n    ((positive? (car lst)) (cdr lst))\n    (else (list\
    \ #f #f))\n  )\n)\n\n;; Create a function that returns the largest of positive\n\
    ;; integers in a list.\n;; Examples:\n;; >>> (largest_positive_integers (list\
    \ 2 4 1 3 5 7))\n;; (list 4)\n;; >>> (largest_positive_integers (list ))\n;; (list\
    \ #f)", "  (cond\n    [(null? lst) (list #f #f)]\n    [(null? (car lst)) (list\
    \ #f (car lst))]\n    [(null? (cdr lst)) (list (car lst) (car lst))]\n    [(null?\
    \ (car (cdr lst))) (list (car lst) (car lst))]\n    [(null? (cdr (cdr lst))) (list\
    \ (car (cdr lst)) (car (cdr lst)))]\n    [(null? (car (car (cdr lst)))) (list\
    \ (car (car (cdr lst))) (car (car (cdr lst))))]\n    [(null? (cdr (car (car (cdr\
    \ lst)))))]\n    [(null? (car (cdr (car (cdr lst)))))]\n    [(null? (cdr (cdr\
    \ (car (car (cdr lst))))))]\n    [(null? (car (cdr (cdr (car (car (cdr lst))))))))]\n\
    \    [(null? (cdr (cdr (cdr (car (car (cdr lst))))))))]\n    [(null? (car (cdr\
    \ (cdr (cdr (car (car (cdr lst)))))))))]\n    [(null? (cdr (cdr (cdr (cdr (car\
    \ (car (cdr lst)))))))))]\n    [(null? (car (cdr (cdr (cdr (cdr (car (car (cdr\
    \ lst)))))))))]\n    [(null? (cdr (cdr (cdr (cdr (cdr (car (car (cdr lst)))))))))]\n\
    \    [(null? (car (cdr (cdr (cdr (cdr (cdr (car (car (cdr lst))))))))))))]\n \
    \   [(null? (cdr (cdr (cdr (cdr (cdr (cdr (car (car (cdr lst))))))))))))]\n  \
    \  [(null? (car (cdr (cdr (cdr (cdr (cdr (cdr (car (car (cdr", "  (cond\n    ((null?\
    \ lst) #f)\n    ((negative? (car lst)) (car lst))\n    ((positive? (car lst))\
    \ (cdr lst))\n    (else (car lst) (cdr lst))\n  )\n)\n\n;; Create a function that\
    \ returns the sum of the squares of\n;; the integers in a list.\n;; Examples:\n\
    ;; >>> (sum_of_squares (list 1 2 3 4 5))\n;; 25\n;; >>> (sum_of_squares (list\
    \ ))\n;; 0\n;; >>> (sum_of_squares (list 1 2 3 4 5 6))\n;; 30", "  (cond\n   \
    \ ((null? lst) (list #f #f))\n    ((negative? (car lst)) (list (car lst) (largest_smallest_integers\
    \ (cdr lst))))\n    ((positive? (car lst)) (list (largest_smallest_integers (cdr\
    \ lst)) (car lst)))\n  ))\n\n;; Test it out.", "  (cond\n    [(null? lst) (list\
    \ #f #f)]\n    [(negative? (car lst)) (list (car lst) (largest_smallest_integers\
    \ (cdr lst)))]\n    [(positive? (car lst)) (list (largest_smallest_integers (cdr\
    \ lst)) (car lst))]\n    [else (list #f #f)]\n  )\n)\n\n;; Create a function that\
    \ returns the sum of the squares of\n;; the integers in a list.\n;; Examples:\n\
    ;; >>> (sum_of_squares (list 1 2 3 4 5 6 7 8 9))\n;; (list 1 16 25 36 49 64 81\
    \ 100 121 144 169 196 225 256 289 324 361)\n;; >>> (sum_of_squares (list ))\n\
    ;; (list 0 0 0 0 0 0 0 0 0 0)\n;; >>> (sum_of_squares (list 0))\n;; (list 0 0\
    \ 0 0 0 0 0 0 0 0)", "  (let ((numbers (mapcar (lambda (x) (if (< x 0) -1 0))))\n\
    \         (min (mapcar (lambda (x) (if (> x 0) 1 0))))\n         (max (mapcar\
    \ (lambda (x) (if (< x 0) -1 0))))\n         (min (mapcar (lambda (x) (if (> x\
    \ 0) 1 0))))\n         (min (mapcar (lambda (x) (if (< x 0) -1 0))))\n       \
    \  (max (mapcar (lambda (x) (if (> x 0) 1 0))))\n         (min (mapcar (lambda\
    \ (x) (if (< x 0) -1 0))))\n         (max (mapcar (lambda (x) (if (> x 0) 1 0))))\n\
    \         (min (mapcar (lambda (x) (if (< x 0) -1 0))))\n         (max (mapcar\
    \ (lambda (x) (if (> x 0) 1 0))))\n         (min (mapcar (lambda (x) (if (< x\
    \ 0) -1 0))))\n         (max (mapcar (lambda (x) (if (> x 0) 1 0))))\n       \
    \  (min (mapcar (lambda (x) (if (< x 0) -1 0))))\n         (max (mapcar (lambda\
    \ (x) (if (> x 0) 1 0))))\n         (min (mapcar (lambda (x) (if (< x 0) -1 0))))\n\
    \         (max (mapcar (lambda (x) (if (> x 0) 1 0))))\n         (min (mapcar\
    \ (lambda (x) (if (< x 0) -1 0))))\n         (max (mapcar (lambda (x) (if (> x\
    \ 0) 1 0))))\n         (min (mapcar (lambda (x) (if (< x 0) -1 0))))\n       \
    \  (max (mapcar (lambda (x) (if (> x 0) 1 0))))\n         (min (mapcar (lambda\
    \ (x) (if (< x 0) -1 0))))\n         (max (mapcar (lambda (x) (if (> x 0) 1 0))))\n\
    \         (min (mapcar (lambda (x) (if (< x 0) -1 0))))\n         (max (mapcar\
    \ (lambda (x) (if (>", "  (let ((numbers (mapcar (lambda (x) (if (< x 0) -1 (if\
    \ (> x 0) 1 0)))) lst))\n    (if (empty? numbers)\n      (list #f #f)\n      (let\
    \ ((max (car numbers))\n            (min (cdr numbers)))\n        (list max min))))\n\
    )\n\n;; Create a function that returns the sum of the squares of\n;; the integers\
    \ in a list.\n;; Examples:\n;; >>> (sum_of_squares (list 1 2 3 4 5))\n;; 30\n\
    ;; >>> (sum_of_squares (list ))\n;; 0\n;; >>> (sum_of_squares (list 1 2 3 4 5\
    \ 6 7))\n;; 100", "  (cond\n    ((null? lst) (list #f #f))\n    ((negative? (car\
    \ lst)) (list (car lst) (largest_smallest_integers (cdr lst))))\n    ((positive?\
    \ (car lst)) (list (largest_smallest_integers (cdr lst)) (car lst)))\n    (else\
    \ (list #f #f))\n  )\n)\n\n;; Create a function that returns the sum of the squares\
    \ of the\n;; integers in a list.\n;; Examples:\n;; >>> (sum-of-squares (list 1\
    \ 2 3 4 5 6 7))\n;; (list 1 4 9 16 25 36 49 64)\n;; >>> (sum-of-squares (list\
    \ ))\n;; (list 0 0 0 0 0 0 0)\n;; >>> (sum-of-squares (list 0))\n;; (list 0 0\
    \ 0 0 0 0 0)", "  (cond\n    ((null? lst) (list #f #f))\n    ((negative? (car\
    \ lst)) (list (car lst) #f))\n    ((positive? (car lst)) (list #f (car lst)))\n\
    \    (else (list #f #f)))\n)\n\n;; Create a function that returns the sum of all\
    \ elements in a list.\n;; Examples:\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9))\n\
    ;; 9\n;; >>> (sum_list (list ))\n;; 0\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8\
    \ 9 10))\n;; 45", "  (cond\n    ((null? lst) #f)\n    ((negative? (car lst)) (car\
    \ lst))\n    ((positive? (car lst)) (cdr lst))\n    (else (car lst) (cdr lst))))\n\
    \n;; Create a function that returns the sum of the squares of\n;; the integers\
    \ in a list.\n;; Examples:\n;; >>> (sum_of_squares (list 1 2 3 4 5))\n;; (list\
    \ 1 5 14 25 36 25)\n;; >>> (sum_of_squares (list ))\n;; (list 0 0 0 0 0)\n;; >>>\
    \ (sum_of_squares (list 0))\n;; (list 0 0 0 0)", "  (cond\n    ((null? lst) #f)\n\
    \    ((< 0 (car lst)) (car lst))\n    ((> 0 (car lst)) (cdr lst))\n    ((< 0 (car\
    \ (cdr lst))) (car (cdr lst)))\n    ((> 0 (car (cdr (cdr lst)))) (cdr (cdr lst)))\n\
    \    (else (car (cdr (cdr (cdr lst)))))))\n\n;; Create a function that returns\
    \ a list (a, b), where 'a' is\n;; the largest of positive integers, and 'b' is\
    \ the smallest\n;; of negative integers in a list.\n;; If there is no positive\
    \ or negative integers, return them as #f.\n;; Examples:\n;; >>> (largest_smallest_integers\
    \ (list 2 4 1 3 5 7))\n;; (list 1 #f)\n;; >>> (largest_smallest_integers (list\
    \ ))\n;; (list #f #f)\n;; >>> (largest_smallest_integers (list 0))\n;; (list #f\
    \ #f)", "  (cond\n    [(null? lst) (return (list #f #f))]\n    [(negative? (car\
    \ lst)) (return (list (car lst) (car lst)))]\n    [(positive? (car lst)) (return\
    \ (list (car lst) (car lst)))]\n    [else (return (list #f #f))]\n  )\n)\n\n;;\
    \ Create a function that returns the sum of all integers in a list.\n;; Examples:\n\
    ;; >>> (sum_integers (list 2 4 1 3 5 7))\n;; 13\n;; >>> (sum_integers (list ))\n\
    ;; 0", "  (let ((numbers (mapcar (lambda (x) (if (< x 0) -1 (if (> x 0) 1 0))))\
    \ lst)))\n  (if (empty? numbers)\n    (list #f #f)\n    (let ((max (car numbers))\n\
    \          (min (cdr numbers)))\n      (list max min))))\n", "  (let ((numbers\
    \ (mapcar (lambda (x) (if (< x 0) -1 (if (> x 0) 1 0)))) lst))\n    (cond ((empty?\
    \ numbers) #f)\n          ((> (car numbers) (car (cdr numbers))) (car numbers))\n\
    \          ((< (car numbers) (car (cdr numbers))) (cdr numbers))\n          (else\
    \ (car numbers) (cdr numbers))))))\n", "  (cond\n    [(null? lst) (return (list\
    \ #f #f))]\n    [(negative? (first lst)) (return (list (first lst) (first lst)))]\n\
    \    [(positive? (first lst)) (return (list (first lst) (first lst)))]\n    [else\
    \ (return (list (first lst) (first lst)))]\n  )\n)\n\n;; Create a function that\
    \ returns the largest of positive integers\n;; in a list.\n;; Examples:\n;; >>>\
    \ (largest_positive_integers (list 2 4 1 3 5 7))\n;; (list 4)\n;; >>> (largest_positive_integers\
    \ (list ))\n;; (list #f)", "  (cond\n    [(null? lst) (return #f)]\n    [(negative?\
    \ (first lst)) (return (list (first lst) (first lst)))]\n    [(positive? (first\
    \ lst)) (return (list (first lst) (first lst)))]\n    [else (return (list (first\
    \ lst) (first lst)))]\n  )\n)\n\n;; Create a function that returns the sum of\
    \ the squares of\n;; the integers in a list.\n;; Examples:\n;; >>> (sum_of_squares\
    \ (list 1 2 3 4 5 6 7 8 9))\n;; (list 1 16 25 36 49 64 81 100 121 144 169)\n;;\
    \ >>> (sum_of_squares (list ))\n;; (list 0 0 0 0 0 0 0 0 0)\n;; >>> (sum_of_squares\
    \ (list 0))\n;; (list 0 0 0 0 0 0 0 0 0)", "  (cond\n    ((null? lst) (list #f\
    \ #f))\n    ((negative? (car lst)) (list (car lst) (largest_smallest_integers\
    \ (cdr lst))))\n    ((positive? (car lst)) (list (largest_smallest_integers (cdr\
    \ lst)) (car lst)))\n    (else (list #f #f))\n  )\n)\n\n;; Create a function that\
    \ returns the sum of the squares of\n;; the integers in a list.\n;; Examples:\n\
    ;; >>> (sum_of_squares (list 1 2 3 4 5))\n;; 25\n;; >>> (sum_of_squares (list\
    \ ))\n;; 0\n;; >>> (sum_of_squares (list 0))\n;; 0", "  (cond\n    [(null? lst)\
    \ (return (list #f #f))]\n    [(negative? (first lst)) (return (list (first lst)\
    \ (first lst)))]\n    [(positive? (first lst)) (return (list (first lst) (first\
    \ lst)))]\n    [else (return (list (first lst) (first lst)))]\n  )\n)\n\n;; Create\
    \ a function that returns the sum of all the numbers in a list.\n;; Examples:\n\
    ;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9))\n;; 9\n;; >>> (sum_list (list ))\n\
    ;; 0\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9))\n;; 9\n;; >>> (sum_list (list\
    \ 1 2 3 4 5 6 7 8 9))\n;; 9\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9))\n;; 9\n\
    ;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9))\n;; 9\n;; >>> (sum_list (list 1 2 3\
    \ 4 5 6 7 8 9))\n;; 9\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9))\n;; 9\n;; >>>\
    \ (sum_list (list 1 2 3 4 5 6 7 8 9))\n;; 9\n;; >>> (sum_list (list 1 2 3 4 5\
    \ 6 7 8 9))\n;; 9\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9))\n;; 9\n;; >>> (sum_list\
    \ (list 1 2 3 4 5 6 7 8 9))\n;; 9\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9))\n\
    ;; 9\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9))\n;; 9\n;; >>> (sum_list (list\
    \ 1 2 3 4 5 6 7 8 9))\n;; 9\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9))\n;; 9\n\
    ;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9))\n;; 9\n;; >>> (sum_list (list 1 2 3\
    \ 4 5 6 7 8 9))\n;; 9\n;; >>> (sum", "  (let ((numbers (mapcar (lambda (x) (if\
    \ (< x 0) -1 (if (> x 0) 1 0)))) lst))\n    (if (null? numbers)\n        (list\
    \ #f #f)\n        (let ((a (car numbers))\n              (b (cdr numbers)))\n\
    \          (list (max a b) (min b a))))))\n\n;; Create a function that returns\
    \ the sum of the squares of the\n;; integers in a list.\n;; Examples:\n;; >>>\
    \ (sum_of_squares (list 2 4 1 3 5 7))\n;; 17\n;; >>> (sum_of_squares (list ))\n\
    ;; 0\n;; >>> (sum_of_squares (list 0))\n;; 0", "  (cond\n    ((null? lst) #f)\n\
    \    ((< 0 (car lst)) (car lst))\n    ((> 0 (car lst)) (cdr lst))\n    (else (cons\
    \ (car lst) (largest_smallest_integers (cdr lst))))\n  )\n)\n\n;; Create a function\
    \ that returns the sum of all the integers in a list.\n;; Examples:\n;; >>> (sum_integers\
    \ (list 1 2 3 4 5))\n;; 10\n;; >>> (sum_integers (list ))\n;; 0\n;; >>> (sum_integers\
    \ (list 0))\n;; 0", "  (let ((neg (find-first-negative lst))\n         (pos (find-first-positive\
    \ lst)))\n    (cond\n      ((neg) (cons (car neg) (largest_smallest_integers (cdr\
    \ neg))))\n      ((pos) (cons (car pos) (largest_smallest_integers (cdr pos))))\n\
    \      ((else) (cons #f #f))))))\n", "  (cond\n    ((null? lst) (list #f #f))\n\
    \    ((negative? (car lst)) (list (car lst) (largest_smallest_integers (cdr lst))))\n\
    \    ((positive? (car lst)) (list (largest_smallest_integers (cdr lst)) (car lst)))\n\
    \    (else (list #f #f)))\n)\n\n;; Create a function that returns a list (a, b),\
    \ where 'a' is\n;; the largest of positive integers, and 'b' is the smallest\n\
    ;; of negative integers in a list.\n;; If there is no positive or negative integers,\
    \ return them as #f.\n;; Examples:\n;; >>> (largest_smallest_integers (list 2\
    \ 4 1 3 5 7))\n;; (list #f 1)\n;; >>> (largest_smallest_integers (list ))\n;;\
    \ (list #f #f)\n;; >>> (largest_smallest_integers (list 0))\n;; (list #f #f)",
  "  (cond\n    ((null? lst) (list #f #f))\n    ((negative? (car lst)) (car lst))\n\
    \    ((positive? (car lst)) (cdr lst))\n    (else (list #f #f)))\n)\n\n;; Create\
    \ a function that returns a list (a, b), where 'a' is\n;; the largest of positive\
    \ integers, and 'b' is the smallest\n;; of negative integers in a list.\n;; If\
    \ there is no positive or negative integers, return them as #f.\n;; Examples:\n\
    ;; >>> (largest_smallest_integers (list 2 4 1 3 5 7))\n;; (list #f 1)\n;; >>>\
    \ (largest_smallest_integers (list ))\n;; (list #f #f)\n;; >>> (largest_smallest_integers\
    \ (list 0))\n;; (list #f #f)", "  (cond\n    ((null? lst) (list #f #f))\n    ((negative?\
    \ (car lst)) (car lst))\n    ((positive? (car lst)) (cdr lst))\n    (else (list\
    \ #f #f))))\n\n;; Create a function that returns a list (a, b), where 'a' is\n\
    ;; the largest of positive integers, and 'b' is the smallest\n;; of negative integers\
    \ in a list.\n;; If there is no positive or negative integers, return them as\
    \ #f.\n;; Examples:\n;; >>> (largest_smallest_integers (list 2 4 1 3 5 7))\n;;\
    \ (list 2 4)\n;; >>> (largest_smallest_integers (list ))\n;; (list #f #f)\n;;\
    \ >>> (largest_smallest_integers (list 0))\n;; (list #f #f)", "  (cond\n    ((null?\
    \ lst) (list #f #f))\n    ((negative? (car lst)) (car lst))\n    ((positive? (car\
    \ lst)) (cdr lst))\n    ((positive? (car lst)) (car lst))\n    ((negative? (car\
    \ lst)) (cdr lst))\n  ))\n\n;; Create a function that returns the sum of the squares\
    \ of\n;; the integers in a list.\n;; Examples:\n;; >>> (sum_of_squares (list 1\
    \ 2 3 4 5 6 7))\n;; (list 1 4 9 16 25 36 49 64)\n;; >>> (sum_of_squares (list\
    \ ))\n;; (list 0 0 0 0 0 0 0)\n;; >>> (sum_of_squares (list 0))\n;; (list 0 0\
    \ 0 0 0 0 0)", "  (cond\n    [(null? lst) (return (list #f #f))]\n    [(negative?\
    \ (first lst)) (return (list (first lst) (first lst)))]\n    [(positive? (first\
    \ lst)) (return (list (first lst) (first lst)))]\n    [else (return (list (first\
    \ lst) (first lst)))]\n  )\n)\n", "  (let ((numbers (mapcar (lambda (x) (if (<\
    \ x 0) -1 (if (> x 0) 1 0)))) lst))\n    (if (null? numbers)\n      (list #f #f)\n\
    \      (let ((a (car numbers))\n            (b (cdr numbers)))\n        (if (null?\
    \ a)\n          (list b a)\n          (if (null? b)\n            (list a b)\n\
    \            (list a (car b))))))))\n\n;; Create a function that returns the sum\
    \ of the squares of\n;; the integers in a list.\n;; Examples:\n;; >>> (sum_of_squares\
    \ (list 1 2 3 4 5))\n;; 25\n;; >>> (sum_of_squares (list ))\n;; 0\n;; >>> (sum_of_squares\
    \ (list 1))\n;; 1", "  (cond\n    [(null? lst) (return (list #f #f))]\n    [(negative?\
    \ (car lst)) (return (list (car lst) (car lst)))]\n    [(positive? (car lst))\
    \ (return (list (car lst) (car lst)))]\n    [else (return (list #f #f))]\n  )\n\
    )\n", "  (cond\n    [(null? lst) (return (list #f #f))]\n    [(negative? (first\
    \ lst)) (return (list (first lst) (first lst)))]\n    [(positive? (first lst))\
    \ (return (list (first lst) (first lst)))]\n    [else (return (list (first lst)\
    \ (first lst)))]\n  )\n)\n\n;; Create a function that returns the sum of the squares\
    \ of\n;; the integers in a list.\n;; Examples:\n;; >>> (sum_of_squares (list 1\
    \ 2 3 4 5 6 7))\n;; (list 1 4 9 16 25 36 49 64)\n;; >>> (sum_of_squares (list\
    \ ))\n;; (list 0 0 0 0 0 0 0)\n;; >>> (sum_of_squares (list 0))\n;; (list 0 0\
    \ 0 0 0 0 0)", "  (let ((lst (if (null? lst)\n                   (list #f #f)\n\
    \                   (list (car lst) (car lst))))\n       (lst (if (null? lst)\n\
    \                   (list #f #f)\n                   (list (car lst) (car lst))))))\n\
    )\n\n;; Create a function that returns the sum of all elements in a list.\n;;\
    \ Examples:\n;; >>> (sum_list (list 1 2 3 4 5))\n;; 10\n;; >>> (sum_list (list\
    \ ))\n;; 0\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9 10))\n;; 55\n;; >>> (sum_list\
    \ (list 1 2 3 4 5 6 7 8 9 10 11))\n;; 55\n;; >>> (sum_list (list 1 2 3 4 5 6 7\
    \ 8 9 10 11 12))\n;; 55\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9 10 11 12 13))\n\
    ;; 55\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14))\n;; 55\n;; >>>\
    \ (sum_list (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15))\n;; 55\n;; >>> (sum_list\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16))\n;; 55\n;; >>> (sum_list (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17))\n;; 55\n;; >>> (sum_list (list 1\
    \ 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18))\n;; 55\n;; >>> (sum_list (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19))\n;; 55\n;; >>> (sum_list (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20))\n;; 55\n;; >>> (sum_list\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21))\n;; 55\n;; >>>\
    \ (sum_list (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22))\n\
    ;; 55\n;; >>> (sum_list", "  (cond\n    [(null? lst) (list #f #f)]\n    [(negative?\
    \ (car lst)) (list (car lst) (largest_smallest_integers (cdr lst)))]\n    [(positive?\
    \ (car lst)) (list (largest_smallest_integers (cdr lst)) (car lst))]\n    [else\
    \ (list #f #f)]\n  )\n)\n\n;; Create a function that returns the sum of the squares\
    \ of\n;; the integers in a list.\n;; Examples:\n;; >>> (sum_of_squares (list 1\
    \ 2 3 4 5 6 7))\n;; 21\n;; >>> (sum_of_squares (list ))\n;; 0\n;; >>> (sum_of_squares\
    \ (list 1 2 3 4 5 6 7 8 9))\n;; 100\n;; >>> (sum_of_squares (list 1 2 3 4 5 6\
    \ 7 8 9 10))\n;; 100\n;; >>> (sum_of_squares (list 1 2 3 4 5 6 7 8 9 10 11))\n\
    ;; 121\n;; >>> (sum_of_squares (list 1 2 3 4 5 6 7 8 9 10 11 12))\n;; 144\n;;\
    \ >>> (sum_of_squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13))\n;; 156\n;; >>> (sum_of_squares\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14))\n;; 196\n;; >>> (sum_of_squares (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15))\n;; 256\n;; >>> (sum_of_squares (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16))\n;; 300\n;; >>> (sum_of_squares (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17))\n;; 361\n;; >>> (sum_of_squares\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18))\n;; 494\n;; >>> (sum_of_squares\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19))\n;; 631\n;; >>> (sum_of_squares\
    \ (list 1 2", "  (let ((numbers (mapcar (lambda (x) (if (< x 0) -1 (if (> x 0)\
    \ 1 0)))) lst))\n    (if (empty? numbers)\n      (list #f #f)\n      (let ((a\
    \ (car numbers))\n            (b (cdr numbers)))\n        (if (null? a)\n    \
    \      (list b a)\n          (if (null? b)\n            (list a b)\n         \
    \   (list a (car b) (cdr b))))))))\n", "  (cond\n    ((null? lst) #f)\n    ((<\
    \ 0 (car lst)) (car lst))\n    ((> 0 (car lst)) (cdr lst))\n    ((< 0 (car (cdr\
    \ lst))) (car (cdr lst)))\n    ((> 0 (car (cdr (cdr lst)))) (cdr (cdr lst)))\n\
    \    (else (car (cdr (cdr (cdr lst)))))))\n\n;; Create a function that returns\
    \ the largest of two numbers.\n;; Examples:\n;; >>> (largest_of_two_numbers (list\
    \ 1 2))\n;; 2\n;; >>> (largest_of_two_numbers (list 2 2))\n;; 2\n;; >>> (largest_of_two_numbers\
    \ (list 2 2.0))\n;; 2.0\n;; >>> (largest_of_two_numbers (list 2.0 2))\n;; 2.0\n\
    ;; >>> (largest_of_two_numbers (list 2.0 2.0))\n;; 2.0\n;; >>> (largest_of_two_numbers\
    \ (list 2.0 2.0))\n;; 2.0\n;; >>> (largest_of_two_numbers (list 2 2.0))\n;; 2.0\n\
    ;; >>> (largest_of_two_numbers (list 2.0 2.0))\n;; 2.0\n;; >>> (largest_of_two_numbers\
    \ (list 2.0 2.0))\n;; 2.0\n;; >>> (largest_of_two_numbers (list 2 2.0))\n;; 2.0\n\
    ;; >>> (largest_of_two_numbers (list 2.0 2.0))\n;; 2.0\n;; >>> (largest_of_two_numbers\
    \ (list 2.0 2.0))\n;; 2.0\n;; >>> (largest_of_two_numbers (list 2 2.0))\n;; 2.0\n\
    ;; >>> (largest_of_two_numbers (list 2.0 2.0))\n;; 2.0\n;; >>> (largest_of_two_numbers\
    \ (list 2.0 2.0))\n;; 2.0\n;; >>> (largest_of_two_numbers (list 2 2", "  (cond\n\
    \    [(null? lst) (return #f #f)]\n    [(negative? (first lst)) (return (first\
    \ lst) (first lst))]\n    [(positive? (first lst)) (return (first lst) (first\
    \ lst))]\n    [(null? (first lst)) (return #f (first lst))]\n    [else (return\
    \ (first lst) (first lst))]\n  )\n)\n\n;; Create a function that returns the sum\
    \ of the squares of\n;; the numbers in a list.\n;; Examples:\n;; >>> (sum_of_squares\
    \ (list 1 2 3 4 5 6 7 8 9 10))\n;; (list 1 25 36 49 64 81 100 121 144 169 196\
    \ 225)\n;; >>> (sum_of_squares (list ))\n;; (list 0 0 0 0 0 0 0 0 0 0 0)\n;; >>>\
    \ (sum_of_squares (list 1))\n;; (list 1 0 0 0 0 0 0 0 0 0)\n;; >>> (sum_of_squares\
    \ (list 0))\n;; (list 0 0 0 0 0 0 0 0 0 0)", "  (cond\n    [(null? lst) (return\
    \ (list #f #f))]\n    [(negative? (car lst)) (return (list (car lst) (car lst)))]\n\
    \    [(positive? (car lst)) (return (list (car lst) (car lst)))]\n    [else (return\
    \ (list #f #f))]\n  )\n)\n\n;; Create a function that returns the sum of the squares\
    \ of\n;; the integers in a list.\n;; Examples:\n;; >>> (sum_of_squares (list 1\
    \ 2 3 4 5 6))\n;; (list 1 2 5 14 25 36 49 64)\n;; >>> (sum_of_squares (list ))\n\
    ;; (list 0 0 0 0 0 0)\n;; >>> (sum_of_squares (list 0))\n;; (list 0 0 0 0 0)",
  "  (cond\n    [(null? lst) (return (list #f #f))]\n    [(negative? (car lst)) (return\
    \ (list (car lst) (car lst)))]\n    [(positive? (car lst)) (return (list (car\
    \ lst) (car lst)))]\n    [else (return (list #f #f))]\n  )\n)\n\n;; Create a function\
    \ that returns the sum of all the numbers in a list.\n;; Examples:\n;; >>> (sum_list\
    \ (list 1 2 3 4 5 6 7 8 9))\n;; 9\n;; >>> (sum_list (list ))\n;; 0\n;; >>> (sum_list\
    \ (list 1 2 3 4 5 6 7 8 9))\n;; 9\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9))\n\
    ;; 9\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9))\n;; 9\n;; >>> (sum_list (list\
    \ 1 2 3 4 5 6 7 8 9))\n;; 9\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9))\n;; 9\n\
    ;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9))\n;; 9\n;; >>> (sum_list (list 1 2 3\
    \ 4 5 6 7 8 9))\n;; 9\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9))\n;; 9\n;; >>>\
    \ (sum_list (list 1 2 3 4 5 6 7 8 9))\n;; 9\n;; >>> (sum_list (list 1 2 3 4 5\
    \ 6 7 8 9))\n;; 9\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9))\n;; 9\n;; >>> (sum_list\
    \ (list 1 2 3 4 5 6 7 8 9))\n;; 9\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9))\n\
    ;; 9\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9))\n;; 9\n;; >>> (sum_list (list\
    \ 1 2 3 4 5 6 7 8 9))\n;; 9\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9))\n;; 9\n\
    ;; >>> (sum_list (list 1", "  (let ((numbers (mapcar (lambda (x) (if (< x 0) -1\
    \ (if (> x 0) 1 0)))) lst))\n    (cond\n      ((empty? numbers) #f)\n      ((empty?\
    \ lst) #f)\n      ((= (car numbers) (car lst))\n       (cdr numbers)\n       (cdr\
    \ lst))\n      (else\n        (car numbers)\n        (cdr numbers)\n        (car\
    \ lst)\n        (cdr lst))))\n\n;; Create a function that returns a list (a, b),\
    \ where 'a' is\n;; the largest of positive integers, and 'b' is the smallest\n\
    ;; of negative integers in a list.\n;; If there is no negative or positive integers,\
    \ return them as #f.\n;; Examples:\n;; >>> (largest_smallest_integers (list 2\
    \ 4 1 3 5 7))\n;; (list 2 4)\n;; >>> (largest_smallest_integers (list ))\n;; (list\
    \ #f #f)\n;; >>> (largest_smallest_integers (list 0))\n;; (list #f #f)", "  (cond\n\
    \    ((null? lst) (list #f #f))\n    ((negative? (car lst)) (list (car lst) (largest_smallest_integers\
    \ (cdr lst))))\n    ((positive? (car lst)) (list (largest_smallest_integers (cdr\
    \ lst)) (car lst)))\n    (else (list #f #f))\n  )\n)\n", "  (cond\n    [(null?\
    \ lst) (return (list #f #f))]\n    [(negative? (car lst)) (return (list (car lst)\
    \ (largest_smallest_integers (cdr lst))))]\n    [(positive? (car lst)) (return\
    \ (list (largest_smallest_integers (cdr lst)) (car lst)))]\n    [else (return\
    \ (list #f #f))]\n  )\n)\n\n;; Create a function that returns the sum of all the\
    \ elements in a list.\n;; Examples:\n;; >>> (sum_list (list 1 2 3 4 5))\n;; 10\n\
    ;; >>> (sum_list (list ))\n;; 0\n;; >>> (sum_list (list 1))\n;; 1", "  (let ((numbers\
    \ (mapcar (lambda (x) (if (< x 0) -1 (if (> x 0) 1 0)))) lst))\n    (if (empty?\
    \ numbers)\n      (list #f #f)\n      (let ((a (car numbers))\n            (b\
    \ (cdr numbers)))\n        (if (null? a)\n          (list #f b)\n          (if\
    \ (null? b)\n            (list a b)\n            (if (> a b)\n              (list\
    \ a b)\n              (list b a))))))))\n", "  (cond\n    [(null? lst) (list #f\
    \ #f)]\n    [(negative? (car lst)) (list (car lst) (largest_smallest_integers\
    \ (cdr lst)))]\n    [(positive? (car lst)) (list (largest_smallest_integers (cdr\
    \ lst)) (car lst))]\n    [else (list #f #f)]\n  )\n)\n\n;; Create a function that\
    \ returns the sum of all elements in a list.\n;; Examples:\n;; >>> (sum_list (list\
    \ 1 2 3 4 5))\n;; 10\n;; >>> (sum_list (list ))\n;; 0\n;; >>> (sum_list (list\
    \ 1 2 3 4 5 6 7 8 9 10))\n;; 55\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9 10 11))\n\
    ;; 111\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9 10 11 12))\n;; 222\n;; >>> (sum_list\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13))\n;; 333\n;; >>> (sum_list (list 1 2 3\
    \ 4 5 6 7 8 9 10 11 12 13 14))\n;; 444\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8\
    \ 9 10 11 12 13 14 15))\n;; 555\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9 10 11\
    \ 12 13 14 15 16))\n;; 666\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9 10 11 12\
    \ 13 14 15 16 17))\n;; 777\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9 10 11 12\
    \ 13 14 15 16 17 18))\n;; 888\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9 10 11\
    \ 12 13 14 15 16 17 18 19))\n;; 999\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9\
    \ 10 11 12 13 14 15 16 17 18 19 20))\n;; 1100\n;; >>> (sum_list (list 1 2 3 4\
    \ 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21))\n;; 1211\n;; >>> (sum_list (list\
    \ 1 2 3 4 5 6", "  (let ((numbers (mapcar (lambda (x) (if (< x 0) -1 0)) lst))))\n\
    \  (if (null? numbers)\n    (list #f #f)\n    (let ((a (car numbers))\n      \
    \    (b (cdr numbers)))\n      (if (null? a)\n        (list #f b)\n        (if\
    \ (null? b)\n          (list a b)\n          (if (< a b)\n            (list a\
    \ b)\n            (list b a))))))))\n", "  (cond\n    ((null? lst) #f)\n    ((negative?\
    \ (car lst)) (car lst))\n    ((positive? (car lst)) (cdr lst))\n    (else (cons\
    \ (car lst) (largest_smallest_integers (cdr lst))))\n  )\n)\n\n;; Create a function\
    \ that returns a list (a, b), where 'a' is\n;; the largest of positive integers,\
    \ and 'b' is the smallest\n;; of negative integers in a list.\n;; If there is\
    \ no positive or negative integers, return them as #f.\n;; Examples:\n;; >>> (largest_smallest_integers\
    \ (list 2 4 1 3 5 7))\n;; (list 1 #f)\n;; >>> (largest_smallest_integers (list\
    \ ))\n;; (list #f #f)\n;; >>> (largest_smallest_integers (list 0))\n;; (list #f\
    \ #f)", "  (cond\n    ((null? lst) (list #f #f))\n    ((negative? (car lst)) (car\
    \ lst))\n    ((positive? (car lst)) (cdr lst))\n    (else (car lst))\n  )\n)\n\
    \n;; Create a function that returns a list (a, b), where 'a' is\n;; the largest\
    \ of positive integers, and 'b' is the smallest\n;; of negative integers in a\
    \ list.\n;; If there is no positive or negative integers, return them as #f.\n\
    ;; Examples:\n;; >>> (largest_smallest_integers (list 2 4 1 3 5 7))\n;; (list\
    \ 1 #f)\n;; >>> (largest_smallest_integers (list ))\n;; (list #f #f)\n;; >>> (largest_smallest_integers\
    \ (list 0))\n;; (list #f #f)", "  (let ((neg (find-first-negative lst))))\n  (let\
    \ ((pos (find-first-positive lst))))\n  (cond\n    ((null? neg) (neg #f))\n  \
    \  ((null? pos) (pos #f))\n    ((<= neg) (cons neg pos))\n    ((<= pos) (cons\
    \ pos neg))\n    ((= neg) (cons neg pos))\n    ((= pos) (cons pos neg))\n    (else\
    \ (error \"No positive or negative integers\"))))\n\n;; Create a function that\
    \ returns a list (a, b), where 'a' is\n;; the largest of positive integers, and\
    \ 'b' is the smallest\n;; of negative integers in a list.\n;; If there is no positive\
    \ or negative integers, return them as #f.\n;; Examples:\n;; >>> (largest_smallest_integers\
    \ (list 2 4 1 3 5 7))\n;; (list #f 2)\n;; >>> (largest_smallest_integers (list\
    \ ))\n;; (list #f #f)\n;; >>> (largest_smallest_integers (list 0))\n;; (list #f\
    \ #f)", "  (cond\n    ((null? lst) #f)\n    ((negative? (car lst)) (car lst))\n\
    \    ((positive? (car lst)) (cdr lst))\n    (else (car lst) (cdr lst))\n  )\n\
    )\n\n;; Create a function that returns the sum of the squares of\n;; the integers\
    \ in a list.\n;; Examples:\n;; >>> (sum_of_squares (list 2 4 1 3 5 7))\n;; 25\n\
    ;; >>> (sum_of_squares (list ))\n;; 0\n;; >>> (sum_of_squares (list 0))\n;; 0",
  "  (cond\n    ((null? lst) (list #f #f))\n    ((negative? (car lst)) (list (car\
    \ lst) (largest_smallest_integers (cdr lst))))\n    ((positive? (car lst)) (list\
    \ (largest_smallest_integers (cdr lst)) (car lst)))\n    (else (list #f #f))\n\
    \  )\n)\n\n;; Create a function that returns a list (a, b), where 'a' is\n;; the\
    \ largest of positive integers, and 'b' is the smallest\n;; of negative integers\
    \ in a list.\n;; If there is no positive or negative integers, return them as\
    \ #f.\n;; Examples:\n;; >>> (largest_smallest_integers (list 2 4 1 3 5 7))\n;;\
    \ (list 1 #f)\n;; >>> (largest_smallest_integers (list ))\n;; (list #f #f)\n;;\
    \ >>> (largest_smallest_integers (list 0))\n;; (list #f #f)", "  (cond\n    [(null?\
    \ lst) (return #f)]\n    [(negative? (car lst)) (return (cdr lst))]\n    [(positive?\
    \ (car lst)) (return (cdr lst))]\n    [else (return lst)]\n  )\n)\n\n;; Create\
    \ a function that returns a list (a, b), where 'a' is\n;; the largest of positive\
    \ integers, and 'b' is the smallest\n;; of negative integers in a list.\n;; If\
    \ there is no positive or negative integers, return them as #f.\n;; Examples:\n\
    ;; >>> (largest_smallest_integers (list 2 4 1 3 5 7))\n;; (list #f 1)\n;; >>>\
    \ (largest_smallest_integers (list ))\n;; (list #f #f)\n;; >>> (largest_smallest_integers\
    \ (list 0))\n;; (list #f #f)", "  (let ((numbers (mapcar (lambda (x) (if (< x\
    \ 0) -1 (if (> x 0) 1 0)))) lst))\n    (if (empty? numbers)\n      (list #f #f)\n\
    \      (let ((a (car numbers))\n            (b (cdr numbers)))\n        (list\
    \ (max a b) (min b a))))))\n\n;; Create a function that returns the sum of the\
    \ elements in a list.\n;; Examples:\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9))\n\
    ;; 9\n;; >>> (sum_list (list ))\n;; 0\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8\
    \ 9))\n;; 9", "  (cond\n    [(null? lst) (return (list #f #f))]\n    [(negative?\
    \ (first lst)) (return (list (first lst) (first lst)))]\n    [(positive? (first\
    \ lst)) (return (list (first lst) (first lst)))]\n    [else (return (list (first\
    \ lst) (first lst)))]\n  )\n)\n\n;; Create a function that returns a list (a,\
    \ b), where 'a' is\n;; the largest of positive integers, and 'b' is the smallest\n\
    ;; of negative integers in a list.\n;; If there is no positive or negative integers,\
    \ return them as #f.\n;; Examples:\n;; >>> (largest_smallest_integers (list 2\
    \ 4 1 3 5 7))\n;; (list #f 2)\n;; >>> (largest_smallest_integers (list ))\n;;\
    \ (list #f #f)\n;; >>> (largest_smallest_integers (list 0))\n;; (list #f #f)",
  "  (cond\n    ((null? lst) #f)\n    ((negative? (car lst)) (cdr lst))\n    ((positive?\
    \ (car lst)) (car lst))\n    (else (cons (car lst) (largest_smallest_integers\
    \ (cdr lst))))\n  )\n)\n\n;; Create a function that returns the sum of the elements\
    \ in a list.\n;; Examples:\n;; >>> (sum_list (list 1 2 3 4 5))\n;; 10\n;; >>>\
    \ (sum_list (list ))\n;; 0\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9))\n;; 45\n\
    ;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9 10))\n;; 60", "  (cond\n    ((null? lst)\
    \ (list #f #f))\n    ((negative? (car lst)) (list (car lst) (largest_smallest_integers\
    \ (cdr lst))))\n    ((positive? (car lst)) (list (largest_smallest_integers (cdr\
    \ lst)) (car lst)))\n    (else (list (car lst) (largest_smallest_integers (cdr\
    \ lst))))\n  )\n)\n", "  (cond\n    [(null? lst) (return (list #f #f))]\n    [(negative?\
    \ (car lst)) (return (list (car lst) (car lst)))]\n    [(positive? (car lst))\
    \ (return (list (car lst) (car lst)))]\n    [else (return (list #f #f))]\n  )\n\
    )\n\n;; Create a function that returns the sum of the squares of\n;; the integers\
    \ in a list.\n;; Examples:\n;; >>> (sum_of_squares (list 1 2 3 4 5))\n;; (list\
    \ 1 5 14 25 36 25)\n;; >>> (sum_of_squares (list ))\n;; (list 0 0 0 0 0)\n;; >>>\
    \ (sum_of_squares (list 0))\n;; (list 0 0 0 0 0)", "  (cond\n    [(null? lst)\
    \ (return (list #f #f))]\n    [(negative? (first lst)) (return (list (first lst)\
    \ (first lst)))]\n    [(positive? (first lst)) (return (list (first lst) (first\
    \ lst)))]\n    [else (return (list (first lst) (first lst)))]\n  )\n)\n\n;; Create\
    \ a function that returns the sum of all the numbers in a\n;; list.\n;; Examples:\n\
    ;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9))\n;; 9\n;; >>> (sum_list (list ))\n\
    ;; 0\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9))\n;; 9\n;; >>> (sum_list (list\
    \ 1 2 3 4 5 6 7 8 9) (list 1 2 3 4 5 6 7 8 9))\n;; 9", "  (let ((lst (if (null?\
    \ lst) (list #f #f) lst)))\n    (if (null? lst)\n      (list #f #f)\n      (let\
    \ ((a (car lst)))\n        (let ((b (car (cdr lst))))\n          (if (negative?\
    \ a)\n            (list (- a) b)\n            (if (positive? a)\n            \
    \  (list a b)\n              (list a b))))))))\n", "  (cond\n    [(null? lst)\
    \ (return (list #f #f))]\n    [(negative? (first lst)) (return (list (first lst)\
    \ (first lst)))]\n    [(positive? (first lst)) (return (list (first lst) (first\
    \ lst)))]\n    [else (return (list (first lst) (first lst)))]\n  )\n)\n\n;; Create\
    \ a function that returns a list (a, b), where 'a' is\n;; the largest of positive\
    \ integers, and 'b' is the smallest\n;; of negative integers in a list.\n;; If\
    \ there is no negative or positive integers, return them as #f.\n;; Examples:\n\
    ;; >>> (largest_smallest_integers (list 2 4 1 3 5 7))\n;; (list #f 1)\n;; >>>\
    \ (largest_smallest_integers (list ))\n;; (list #f #f)\n;; >>> (largest_smallest_integers\
    \ (list 0))\n;; (list #f #f)", "  (cond\n    ((null? lst) (list #f #f))\n    ((negative?\
    \ (car lst)) (car lst))\n    ((positive? (car lst)) (cdr lst))\n    (else (car\
    \ lst))\n  )\n)\n\n;; Create a function that returns a list (a, b), where 'a'\
    \ is\n;; the largest of positive integers, and 'b' is the smallest\n;; of negative\
    \ integers in a list.\n;; If there is no positive or negative integers, return\
    \ them as #f.\n;; Examples:\n;; >>> (largest_smallest_integers (list 2 4 1 3 5\
    \ 7))\n;; (list 1 #f)\n;; >>> (largest_smallest_integers (list ))\n;; (list #f\
    \ #f)\n;; >>> (largest_smallest_integers (list 0))\n;; (list #f #f)", "  (let\
    \ ((numbers (mapcar (lambda (x) (if (< x 0) -x (x)))) lst)))\n  (if (empty? numbers)\n\
    \    (list #f #f)\n    (let ((max (car numbers))\n          (min (cdr numbers)))\n\
    \      (list max min))))\n", "  (cond\n    ((null? lst) #f)\n    ((< 0 (car lst))\
    \ (car lst))\n    ((> 0 (car lst)) (cdr lst))\n    (else (cons (car lst) (largest_smallest_integers\
    \ (cdr lst))))\n  )\n)\n\n;; Create a function that returns the sum of the squares\
    \ of\n;; the integers in a list.\n;; Examples:\n;; >>> (sum_of_squares (list 1\
    \ 2 3 4 5))\n;; 25\n;; >>> (sum_of_squares (list ))\n;; 0\n;; >>> (sum_of_squares\
    \ (list 1 2 3 4 5 6 7))\n;; 100\n;; >>> (sum_of_squares (list 1 2 3 4 5 6 7 8\
    \ 9))\n;; 100\n;; >>> (sum_of_squares (list 1 2 3 4 5 6 7 8 9 10))\n;; 100\n;;\
    \ >>> (sum_of_squares (list 1 2 3 4 5 6 7 8 9 10 11))\n;; 100\n;; >>> (sum_of_squares\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12))\n;; 100\n;; >>> (sum_of_squares (list 1 2\
    \ 3 4 5 6 7 8 9 10 11 12 13))\n;; 100\n;; >>> (sum_of_squares (list 1 2 3 4 5\
    \ 6 7 8 9 10 11 12 13 14))\n;; 100\n;; >>> (sum_of_squares (list 1 2 3 4 5 6 7\
    \ 8 9 10 11 12 13 14 15))\n;; 100\n;; >>> (sum_of_squares (list 1 2 3 4 5 6 7\
    \ 8 9 10 11 12 13 14 15 16))\n;; 100\n;; >>> (sum_of_squares (list 1 2 3 4 5 6\
    \ 7 8 9 10 11 12 13 14 15 16 17))\n;; 100\n;; >>> (sum_of_squares (list 1 2 3\
    \ 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18))\n;; 100\n;; >>> (sum_of_squares (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19))\n;; 100\n;; >>> (sum_of_squares\
    \ (list 1 2 3 4 5 6 7 8 9", "  (cond\n    [(null? lst) (return #f #f)]\n    [(negative?\
    \ (car lst)) (return (cdr lst) (car lst))]\n    [(positive? (car lst)) (return\
    \ (cdr lst) (car lst))]\n    [else (return lst)]\n  )\n)\n\n;; Create a function\
    \ that returns the sum of all the elements in a list.\n;; Examples:\n;; >>> (sum_list\
    \ (list 1 2 3 4 5 6 7 8 9))\n;; 9\n;; >>> (sum_list (list ))\n;; 0\n;; >>> (sum_list\
    \ (list 1))\n;; 1\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9 10))\n;; 30\n;; >>>\
    \ (sum_list (list 1 2 3 4 5 6 7 8 9 10 11))\n;; 31\n;; >>> (sum_list (list 1 2\
    \ 3 4 5 6 7 8 9 10 11 12))\n;; 32\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9 10\
    \ 11 12 13))\n;; 33\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14))\n\
    ;; 34\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15))\n;; 35\n;;\
    \ >>> (sum_list (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16))\n;; 36\n;; >>>\
    \ (sum_list (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17))\n;; 37\n;; >>> (sum_list\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18))\n;; 38\n;; >>> (sum_list\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19))\n;; 39\n;; >>> (sum_list\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20))\n;; 40\n;; >>> (sum_list\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21))\n;; 41\n;; >>>\
    \ (sum_list (list 1 2 3 4 5 6 7", "  (cond\n    [(null? lst) (list #f #f)]\n \
    \   [(negative? (first lst)) (list (first lst) (first lst))]\n    [(positive?\
    \ (first lst)) (list (first lst) (first lst))]\n    [else (list (first lst) (first\
    \ lst))]))\n\n;; Create a function that returns the sum of the elements in a list.\n\
    ;; Examples:\n;; >>> (sum_list (list 1 2 3 4 5))\n;; 10\n;; >>> (sum_list (list\
    \ ))\n;; 0\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9))\n;; 45\n;; >>> (sum_list\
    \ (list 1 2 3 4 5 6 7 8 9 10))\n;; 60\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8\
    \ 9 10 11))\n;; 71\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9 10 11 12))\n;; 83\n\
    ;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9 10 11 12 13))\n;; 96\n;; >>> (sum_list\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14))\n;; 109\n;; >>> (sum_list (list 1 2\
    \ 3 4 5 6 7 8 9 10 11 12 13 14 15))\n;; 125\n;; >>> (sum_list (list 1 2 3 4 5\
    \ 6 7 8 9 10 11 12 13 14 15 16))\n;; 140\n;; >>> (sum_list (list 1 2 3 4 5 6 7\
    \ 8 9 10 11 12 13 14 15 16 17))\n;; 156\n;; >>> (sum_list (list 1 2 3 4 5 6 7\
    \ 8 9 10 11 12 13 14 15 16 17 18))\n;; 173\n;; >>> (sum_list (list 1 2 3 4 5 6\
    \ 7 8 9 10 11 12 13 14 15 16 17 18 19))\n;; 191\n;; >>> (sum_list (list 1 2 3\
    \ 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20))\n;; 210\n;; >>> (sum_list (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21))\n;; 230\n;; >>> (sum_list\
    \ (list 1 2", "  (cond\n    [(null? lst) (return #f)]\n    [(negative? (first\
    \ lst)) (return (cons 'a (largest_smallest_integers (cdr lst))))]\n    [(positive?\
    \ (first lst)) (return (cons (first lst) (largest_smallest_integers (cdr lst))))]\n\
    \    [else (return (cons (first lst) (largest_smallest_integers (cdr lst))))]\n\
    \  )\n)\n", "  (cond\n    ((null? lst) #f)\n    ((negative? (car lst)) (car lst))\n\
    \    ((positive? (car lst)) (cdr lst))\n    (else (cons (car lst) (largest_smallest_integers\
    \ (cdr lst))))\n  )\n)\n\n;; Create a function that returns a list (a, b), where\
    \ 'a' is\n;; the largest of positive integers, and 'b' is the smallest\n;; of\
    \ negative integers in a list.\n;; If there is no negative or positive integers,\
    \ return them as #f.\n;; Examples:\n;; >>> (largest_smallest_integers (list 2\
    \ 4 1 3 5 7))\n;; (list #f 1)\n;; >>> (largest_smallest_integers (list ))\n;;\
    \ (list #f #f)\n;; >>> (largest_smallest_integers (list 0))\n;; (list #f #f)",
  "  (let ((numbers (mapcar (lambda (x) (if (< x 0) -1 0))))\n         (min_max (mapcar\
    \ (lambda (x) (if (> x 0) 1 0))))))\n  (if (null? numbers)\n    (list #f #f)\n\
    \    (list (car numbers) (cdr numbers))))\n", "  (cond\n    ((null? lst) (list\
    \ #f #f))\n    ((negative? (car lst)) (list (car lst) (largest_smallest_integers\
    \ (cdr lst))))\n    ((positive? (car lst)) (list (largest_smallest_integers (cdr\
    \ lst)) (car lst)))\n    (else (list #f #f))\n  )\n)\n", "  (cond\n    [(null?\
    \ lst) (return #f)]\n    [(negative? (car lst)) (return (cdr lst))]\n    [(positive?\
    \ (car lst)) (return (cdr lst))]\n    [else (return (list (car lst) (car (cdr\
    \ lst))))]\n  )\n)\n\n;; Create a function that returns the sum of the squares\
    \ of the\n;; integers in a list.\n;; Examples:\n;; >>> (sum_of_squares (list 1\
    \ 2 3 4 5))\n;; 25\n;; >>> (sum_of_squares (list ))\n;; 0\n;; >>> (sum_of_squares\
    \ (list 1 2 3 4 5 6 7))\n;; 100\n;; >>> (sum_of_squares (list 1 2 3 4 5 6 7 8\
    \ 9))\n;; 100\n;; >>> (sum_of_squares (list 1 2 3 4 5 6 7 8 9 10))\n;; 100\n;;\
    \ >>> (sum_of_squares (list 1 2 3 4 5 6 7 8 9 10 11))\n;; 100\n;; >>> (sum_of_squares\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12))\n;; 100\n;; >>> (sum_of_squares (list 1 2\
    \ 3 4 5 6 7 8 9 10 11 12 13))\n;; 100\n;; >>> (sum_of_squares (list 1 2 3 4 5\
    \ 6 7 8 9 10 11 12 13 14))\n;; 100\n;; >>> (sum_of_squares (list 1 2 3 4 5 6 7\
    \ 8 9 10 11 12 13 14 15))\n;; 100\n;; >>> (sum_of_squares (list 1 2 3 4 5 6 7\
    \ 8 9 10 11 12 13 14 15 16))\n;; 100\n;; >>> (sum_of_squares (list 1 2 3 4 5 6\
    \ 7 8 9 10 11 12 13 14 15 16 17))\n;; 100\n;; >>> (sum_of_squares (list 1 2 3\
    \ 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18))\n;; 100\n;; >>> (sum_of_squares (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19))\n;; 100\n;; >>> (sum_of_squares\
    \ (list", "  (cond\n    ((null? lst) (list #f #f))\n    ((negative? (car lst))\
    \ (car lst))\n    ((positive? (car lst)) (cdr lst))\n    (else (car lst))\n  )\n\
    )\n\n;; Create a function that returns the sum of the squares of\n;; the integers\
    \ in a list.\n;; Examples:\n;; >>> (sum_of_squares (list 1 2 3 4 5 6 7 8 9))\n\
    ;; (list 1 16 25 36 49 64 81 100 121 144 169)\n;; >>> (sum_of_squares (list ))\n\
    ;; (list 0 0 0 0 0 0 0 0 0)\n;; >>> (sum_of_squares (list 0))\n;; (list 0 0 0\
    \ 0 0 0 0 0 0)", "  (let ((numbers (mapcar (lambda (x) (if (< x 0) -1 (if (> x\
    \ 0) 1 0)))) lst))\n    (if (empty? numbers)\n        (list #f #f)\n        (let\
    \ ((a (car numbers))\n              (b (cdr numbers)))\n          (list (max a\
    \ b) (min a b))))))\n\n;; Create a function that returns a list (a, b), where\
    \ 'a' is\n;; the largest of positive integers, and 'b' is the smallest\n;; of\
    \ negative integers in a list.\n;; If there is no positive or negative integers,\
    \ return them as #f.\n;; Examples:\n;; >>> (largest_smallest_integers (list 2\
    \ 4 1 3 5 7))\n;; (list 1 2)\n;; >>> (largest_smallest_integers (list ))\n;; (list\
    \ #f #f)\n;; >>> (largest_smallest_integers (list 0))\n;; (list #f #f)", "  (cond\n\
    \    [(null? lst) (return (list #f #f))]\n    [(negative? (first lst)) (return\
    \ (list (first lst) (first lst)))]\n    [(positive? (first lst)) (return (list\
    \ (first lst) (first lst)))]\n    [else (return (list (first lst) (first lst)))]\n\
    \  )\n)\n\n;; Create a function that returns the sum of the squares of\n;; the\
    \ integers in a list.\n;; Examples:\n;; >>> (sum-of-squares (list 1 2 3 4 5 6\
    \ 7))\n;; 21\n;; >>> (sum-of-squares (list ))\n;; 0\n;; >>> (sum-of-squares (list\
    \ 1 2 3 4 5 6 7 8 9 10))\n;; 100\n;; >>> (sum-of-squares (list 1 2 3 4 5 6 7 8\
    \ 9 10 11))\n;; 121\n;; >>> (sum-of-squares (list 1 2 3 4 5 6 7 8 9 10 11 12))\n\
    ;; 144\n;; >>> (sum-of-squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13))\n;; 156\n\
    ;; >>> (sum-of-squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14))\n;; 179\n;; >>>\
    \ (sum-of-squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15))\n;; 201\n;; >>>\
    \ (sum-of-squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16))\n;; 225\n;; >>>\
    \ (sum-of-squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17))\n;; 256\n\
    ;; >>> (sum-of-squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18))\n\
    ;; 289\n;; >>> (sum-of-squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\
    \ 18 19))\n;; 321\n;; >>> (sum-of-squares (list 1 2 3 4 5 6 7 8 9 10 11 12 13\
    \ 14 15 16 17 18 19 20))\n;; 354\n;; >>> (sum-of-", "  (let ((neg (filter (lambda\
    \ (x) (not (negative? x))) lst)))\n    (let ((pos (filter (lambda (x) (positive?\
    \ x)) lst)))\n      (cond\n       [(empty? neg) (return (list #f #f))]\n     \
    \  [(empty? pos) (return (list #f #f))]\n       [(positive? (car pos)) (return\
    \ (list (car pos) (car neg)))]\n       [(negative? (car neg)) (return (list (car\
    \ neg) (car pos)))]\n       [else (return (list #f #f))]\n      )\n    )\n  )\n\
    )\n", "  (cond\n    ((null? lst) #f)\n    ((negative? (car lst)) (car lst))\n\
    \    ((positive? (car lst)) (cdr lst))\n    (else (cons (car lst) (largest_smallest_integers\
    \ (cdr lst))))\n  )\n)\n\n;; Create a function that returns the sum of the elements\
    \ in a list.\n;; Examples:\n;; >>> (sum_list (list 1 2 3 4 5))\n;; 10\n;; >>>\
    \ (sum_list (list ))\n;; 0\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9 10))\n;;\
    \ 55\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9 10 11))\n;; 111\n;; >>> (sum_list\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12))\n;; 123\n;; >>> (sum_list (list 1 2 3 4 5\
    \ 6 7 8 9 10 11 12 13))\n;; 136\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9 10 11\
    \ 12 13 14))\n;; 149\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14\
    \ 15))\n;; 165\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16))\n\
    ;; 180\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17))\n;;\
    \ 195\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18))\n\
    ;; 211\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19))\n\
    ;; 226\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\
    \ 20))\n;; 242\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\
    \ 17 18 19 20 21))\n;; 257\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9 10 11 12\
    \ 13 14 15 16 17 18 19 20 21 22))\n;; 273\n;; >>> (sum_list (", "  (cond\n   \
    \ ((null? lst) #f)\n    ((negative? (car lst)) (car lst))\n    ((positive? (car\
    \ lst)) (cdr lst))\n    (else (cons (car lst) (largest_smallest_integers (cdr\
    \ lst))))\n  )\n)\n\n;; Create a function that returns the sum of the elements\
    \ in a list.\n;; Examples:\n;; >>> (sum_list (list 1 2 3 4 5))\n;; 10\n;; >>>\
    \ (sum_list (list ))\n;; 0\n;; >>> (sum_list (list 1))\n;; 1", "  (cond\n    ((null?\
    \ lst) #f)\n    ((negative? (car lst)) (car lst))\n    ((positive? (car lst))\
    \ (cdr lst))\n    (else (cons (car lst) (largest_smallest_integers (cdr lst))))\n\
    \  )\n)\n\n;; Create a function that returns the sum of all the numbers in a list.\n\
    ;; Examples:\n;; >>> (sum_of_numbers (list 1 2 3 4 5 6 7 8 9 10))\n;; (list 15)\n\
    ;; >>> (sum_of_numbers (list ))\n;; (list 0)\n;; >>> (sum_of_numbers (list 0))\n\
    ;; (list 0)", "  (let ((numbers (mapcar (lambda (x) (if (< x 0) -1 (if (> x 0)\
    \ 1 0)))) lst))\n    (if (empty? numbers)\n        (list #f #f)\n        (let\
    \ ((a (car numbers))\n              (b (cdr numbers)))\n          (if (null? a)\n\
    \              (list #f b)\n              (if (null? b)\n                  (list\
    \ a b)\n                  (let ((c (car b))\n                        (d (cdr b)))\n\
    \                    (if (null? c)\n                        (list a d)\n     \
    \                   (if (null? d)\n                            (list a c)\n  \
    \                          (list a c d)))))))))))\n\n;;; Test it out", "  (cond\n\
    \    ((null? lst) #f)\n    ((< 0 (car lst)) (car lst))\n    ((> 0 (car lst)) (cdr\
    \ lst))\n    (else (cons (car lst) (largest_smallest_integers (cdr lst))))\n \
    \ )\n)\n\n;; Create a function that returns a list (a, b), where 'a' is\n;; the\
    \ largest of positive integers, and 'b' is the smallest\n;; of negative integers\
    \ in a list.\n;; If there is no positive or negative integers, return them as\
    \ #f.\n;; Examples:\n;; >>> (largest_smallest_integers (list 2 4 1 3 5 7))\n;;\
    \ (list #f 7)\n;; >>> (largest_smallest_integers (list ))\n;; (list #f #f)\n;;\
    \ >>> (largest_smallest_integers (list 0))\n;; (list #f #f)", "  (cond\n    ((null?\
    \ lst) (list #f #f))\n    ((negative? (car lst)) (car lst))\n    ((positive? (car\
    \ lst)) (cdr lst))\n    (else (list #f #f))))\n\n;; Create a function that returns\
    \ the sum of the squares of\n;; the integers in a list.\n;; Examples:\n;; >>>\
    \ (sum_of_squares (list 1 2 3 4 5 6 7 8 9))\n;; (list 1 4 9 16 25 36 49 64 81\
    \ 100 121 144 169 196 225 256 289 324 361 441 494 541 641 741 841 941))\n;; >>>\
    \ (sum_of_squares (list ))\n;; (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "  (let ((numbers (mapcar\
    \ (lambda (x) (if (< x 0) -1 (if (> x 0) 1 0)))) lst))\n    (if (empty? numbers)\n\
    \      (list #f #f)\n      (let ((a (car numbers))\n            (b (cdr numbers)))\n\
    \        (if (null? a)\n          (list #f b)\n          (if (null? b)\n     \
    \       (list a b)\n            (if (> a b)\n              (list a b)\n      \
    \        (list b a))))))))\n", "  (cond\n    [(null? lst) (return #f #f)]\n  \
    \  [(negative? (first lst)) (return (first lst) (first lst))]\n    [(positive?\
    \ (first lst)) (return (first lst) (first lst))]\n    [(negative? (first (cdr\
    \ lst))) (return (first lst) (first lst))]\n    [(positive? (first (cdr lst)))\
    \ (return (first lst) (first lst))]\n    [else (return (first lst) (first lst))]\n\
    \  )\n)\n", "  (cond\n    ((null? lst) (list #f #f))\n    ((negative? (car lst))\
    \ (list (car lst) (largest_smallest_integers (cdr lst))))\n    ((positive? (car\
    \ lst)) (list (largest_smallest_integers (cdr lst)) (car lst)))\n    (else (list\
    \ #f #f))\n  )\n)\n\n;; Create a function that returns the sum of the squares\
    \ of\n;; the integers in a list.\n;; Examples:\n;; >>> (sum_of_squares (list 1\
    \ 2 3 4 5 6 7 8 9))\n;; (list 1 16 25 36 49 64 81 100 121 144 169)\n;; >>> (sum_of_squares\
    \ (list ))\n;; (list 0 0 0 0 0 0 0 0 0)\n;; >>> (sum_of_squares (list 0))\n;;\
    \ (list 0 0 0 0 0 0 0 0 0)", "  (cond\n    ((null? lst) #f)\n    ((< 0 (car lst))\
    \ (car lst))\n    ((> 0 (car lst)) (cdr lst))\n    ((< 0 (car (cdr lst))) (car\
    \ (cdr lst)))\n    ((> 0 (car (cdr (cdr lst)))) (cdr (cdr lst)))\n    (else (car\
    \ (cdr (cdr (cdr lst))))))))\n", "  (cond\n    ((null? lst) #f)\n    ((negative?\
    \ (car lst)) (car lst))\n    ((positive? (car lst)) (cdr lst))\n    (else (cons\
    \ (car lst) (largest_smallest_integers (cdr lst))))\n  )\n)\n\n;; Create a function\
    \ that returns a list (a, b), where 'a' is\n;; the largest of positive integers,\
    \ and 'b' is the smallest\n;; of negative integers in a list.\n;; If there is\
    \ no negative or positive integers, return them as #f.\n;; Examples:\n;; >>> (largest_smallest_integers\
    \ (list 2 4 1 3 5 7))\n;; (list #f 4)\n;; >>> (largest_smallest_integers (list\
    \ ))\n;; (list #f #f)\n;; >>> (largest_smallest_integers (list 0))\n;; (list #f\
    \ #f)", "  (let ((numbers (mapcar (lambda (x) (if (< x 0) -1 (if (> x 0) 1 0))))\
    \ lst))\n    (if (null? numbers)\n      (list #f #f)\n      (let ((max (car numbers))\
    \ (min (car (cdr numbers))))\n        (list max min))))\n)\n\n;; Create a function\
    \ that returns a list (a, b), where 'a' is\n;; the largest of positive integers,\
    \ and 'b' is the smallest\n;; of negative integers in a list.\n;; If there is\
    \ no positive or negative integers, return them as #f.\n;; Examples:\n;; >>> (largest_smallest_integers\
    \ (list 2 4 1 3 5 7))\n;; (list #f 1)\n;; >>> (largest_smallest_integers (list\
    \ ))\n;; (list #f #f)\n;; >>> (largest_smallest_integers (list 0))\n;; (list #f\
    \ #f)", "  (cond\n    [(null? lst) (list #f #f)]\n    [(negative? (first lst))\
    \ (list (first lst) (first lst))]\n    [(positive? (first lst)) (list (first lst)\
    \ (first lst))]\n    [else (list #f #f)]\n  )\n)\n\n;; Create a function that\
    \ returns a list (a, b), where 'a' is\n;; the largest of positive integers, and\
    \ 'b' is the smallest\n;; of negative integers in a list.\n;; If there is no positive\
    \ or negative integers, return them as #f.\n;; Examples:\n;; >>> (largest_smallest_integers\
    \ (list 2 4 1 3 5 7))\n;; (list 1 2)\n;; >>> (largest_smallest_integers (list\
    \ ))\n;; (list #f #f)\n;; >>> (largest_smallest_integers (list 0))\n;; (list #f\
    \ #f)", "  (cond\n    ((null? lst) #f)\n    ((< 0 (car lst)) (car lst))\n    ((>\
    \ 0 (car lst)) (cdr lst))\n    (else (cons (car lst) (largest_smallest_integers\
    \ (cdr lst))))\n  )\n)\n\n;; Create a function that returns the sum of the squares\
    \ of\n;; the integers in a list.\n;; Examples:\n;; >>> (sum_of_squares (list 2\
    \ 4 1 3 5 7))\n;; 21\n;; >>> (sum_of_squares (list ))\n;; 0\n;; >>> (sum_of_squares\
    \ (list 0))\n;; 0", "  (cond\n    [(null? lst) (return (list #f #f))]\n    [(negative?\
    \ (first lst)) (return (list (first lst) (first lst)))]\n    [(positive? (first\
    \ lst)) (return (list (first lst) (first lst)))]\n    [else (return (list (first\
    \ lst) (first lst)))]\n  )\n)\n\n;; Create a function that returns the sum of\
    \ all elements in a list.\n;; Examples:\n;; >>> (sum_list (list 1 2 3 4 5 6 7\
    \ 8 9))\n;; 9\n;; >>> (sum_list (list ))\n;; 0\n;; >>> (sum_list (list 1))\n;;\
    \ 1", "  (cond\n    ((null? lst) #f)\n    ((< 0 (car lst)) (car lst))\n    ((>\
    \ 0 (car lst)) (cdr lst))\n    ((< 0 (car (cdr lst))) (car (cdr lst)))\n    ((>\
    \ 0 (car (cdr (cdr lst)))) (cdr (cdr lst)))\n    (else (car lst))))\n\n;; Create\
    \ a function that returns the sum of all elements in a list.\n;; Examples:\n;;\
    \ >>> (sum_list (list 1 2 3 4 5 6 7 8 9))\n;; 9\n;; >>> (sum_list (list ))\n;;\
    \ 0\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9))\n;; 9\n;; >>> (sum_list (list\
    \ 1 2 3 4 5 6 7 8 9) (list 1 2 3 4 5 6 7 8 9))\n;; 9", "  (cond\n    [(null? lst)\
    \ (return (list #f #f))]\n    [(negative? (car lst)) (return (list (car lst) (car\
    \ lst)))]\n    [(positive? (car lst)) (return (list (car lst) (car lst)))]\n \
    \   [else (return (list #f #f))]\n  )\n)\n\n;; Create a function that returns\
    \ the sum of the squares of\n;; the integers in a list.\n;; Examples:\n;; >>>\
    \ (sum_of_squares (list 1 2 3 4 5 6 7))\n;; (list 1 4 9 16 25 36 49 64)\n;; >>>\
    \ (sum_of_squares (list ))\n;; (list 0 0 0 0 0 0 0)\n;; >>> (sum_of_squares (list\
    \ 0))\n;; (list 0 0 0 0 0 0 0)", "  (cond\n    [(null? lst) (return (list #f #f))]\n\
    \    [(negative? (first lst)) (return (list (first lst) (first lst)))]\n    [(positive?\
    \ (first lst)) (return (list (first lst) (first lst)))]\n    [else (return (list\
    \ (first lst) (first lst)))]\n  )\n)\n\n;; Create a function that returns the\
    \ sum of the squares of\n;; the integers in a list.\n;; Examples:\n;; >>> (sum_of_squares\
    \ (list 1 2 3 4 5 6 7 8 9 10))\n;; (list 1 16 25 36 49 64 81 100 121 144 169 196\
    \ 225)\n;; >>> (sum_of_squares (list ))\n;; (list 0 0 0 0 0 0 0 0 0 0 0)\n;; >>>\
    \ (sum_of_squares (list 0))\n;; (list 0 0 0 0 0 0 0 0 0 0)", "  (cond\n    ((null?\
    \ lst) #f)\n    ((negative? (car lst)) (car lst))\n    ((positive? (car lst))\
    \ (cdr lst))\n    (else (cons (car lst) (largest_smallest_integers (cdr lst))))))\n\
    \n;; Create a function that returns the largest of positive\n;; integers in a\
    \ list. If there is no positive integers,\n;; return them as #f.\n;; Examples:\n\
    ;; >>> (largest_positive_integers (list 2 4 1 3 5 7))\n;; (list 4)\n;; >>> (largest_positive_integers\
    \ (list ))\n;; (list #f)\n;; >>> (largest_positive_integers (list 0))\n;; (list\
    \ #f)", "  (cond\n    [(null? lst) (return (list #f #f))]\n    [(negative? (car\
    \ lst)) (return (list (car lst) (car lst)))]\n    [(positive? (car lst)) (return\
    \ (list (car lst) (car lst)))]\n    [else (return (list #f #f))]\n  )\n)\n\n;;\
    \ Create a function that returns the sum of all the elements in a list.\n;; Examples:\n\
    ;; >>> (sum_list (list 1 2 3 4 5 6 7))\n;; 13\n;; >>> (sum_list (list ))\n;; 0\n\
    ;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9))\n;; 45\n;; >>> (sum_list (list 1 2\
    \ 3 4 5 6 7 8 9 10))\n;; 60", "  (cond\n    [(null? lst) (return (list #f #f))]\n\
    \    [(negative? (car lst)) (return (list (car lst) (car lst)))]\n    [(positive?\
    \ (car lst)) (return (list (car lst) (car lst)))]\n    [else (return (list #f\
    \ #f))]\n  )\n)\n\n;; Create a function that returns the sum of all elements in\
    \ a list.\n;; Examples:\n;; >>> (sum_list (list 1 2 3 4 5 6 7))\n;; (list 6)\n\
    ;; >>> (sum_list (list ))\n;; (list 0)\n;; >>> (sum_list (list 0))\n;; (list 0)",
  "  (cond\n    [(null? lst) (list #f #f)]\n    [(null? (car lst)) (list #f (car lst))]\n\
    \    [(null? (cdr lst)) (list (car lst) #f)]\n    [(null? (car (cdr lst))) (list\
    \ (car lst) (car (cdr lst)))]\n    [(null? (car (cdr (cdr lst)))) (list (car (cdr\
    \ lst)) (car (cdr (cdr lst))))]\n    [(null? (car (cdr (cdr (cdr lst)))))]\n \
    \   [(null? (car (cdr (cdr (cdr (cdr lst))))))]\n    [(null? (car (cdr (cdr (cdr\
    \ (cdr (cdr lst))))))))]\n    [(null? (car (cdr (cdr (cdr (cdr (cdr (cdr lst))))))))]\n\
    \    [(null? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst)))))))))]\n    [(null?\
    \ (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst)))))))))))]\n    [(null? (car\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst)))))))))))]\n    [(null? (car\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst)))))))))))))]\n \
    \   [(null? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr lst)))))))))))))))))]\n    [(null? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr", "  (cond\n    [(null? lst)\
    \ (return (list #f #f))]\n    [(negative? (first lst)) (return (list (first lst)\
    \ (first lst)))]\n    [(positive? (first lst)) (return (list (first lst) (first\
    \ lst)))]\n    [else (return (list (first lst) (first lst)))]\n  )\n)\n\n;; Create\
    \ a function that returns the sum of the squares of\n;; the integers in a list.\n\
    ;; Examples:\n;; >>> (sum_of_squares (list 1 2 3 4 5 6 7 8 9 10))\n;; (list 1\
    \ 25 36 49 64 81 100 121 144 169 196 225)\n;; >>> (sum_of_squares (list ))\n;;\
    \ (list 0 0 0 0 0 0 0 0 0 0)\n;; >>> (sum_of_squares (list 0))\n;; (list 0 0 0\
    \ 0 0 0 0 0 0 0)", "  (cond\n    ((null? lst) #f)\n    ((negative? (car lst))\
    \ (car lst))\n    ((positive? (car lst)) (cdr lst))\n    (else (cons (car lst)\
    \ (largest_smallest_integers (cdr lst))))))\n\n;; Create a function that returns\
    \ the sum of the elements in a list.\n;; Examples:\n;; >>> (sum_list (list 1 2\
    \ 3 4 5))\n;; 6\n;; >>> (sum_list (list ))\n;; 0\n;; >>> (sum_list (list 1))\n\
    ;; 1", "  (cond\n    ((null? lst) #f)\n    ((< 0 (car lst)) (car lst))\n    ((>\
    \ 0 (car lst)) (cdr lst))\n    (else (cons (car lst) (largest_smallest_integers\
    \ (cdr lst))))\n  )\n)\n", "  (cond\n    [(null? lst) (return (list #f #f))]\n\
    \    [(negative? (car lst)) (return (list (car lst) (car lst)))]\n    [(positive?\
    \ (car lst)) (return (list (car lst) (car lst)))]\n    [else (return (list #f\
    \ #f))]\n  )\n)\n\n;; Create a function that returns the sum of the squares of\n\
    ;; the integers in a list.\n;; Examples:\n;; >>> (sum_of_squares (list 1 2 3 4\
    \ 5 6 7))\n;; (list 1 4 9 16 25 36 49 64)\n;; >>> (sum_of_squares (list ))\n;;\
    \ (list 0 0 0 0 0 0 0)\n;; >>> (sum_of_squares (list 0))\n;; (list 0 0 0 0 0 0\
    \ 0)", "  (let ((numbers (mapcar (lambda (x) (if (< x 0) -1 (if (> x 0) 1 0))))\
    \ lst))\n    (if (null? numbers)\n      (list #f #f)\n      (let ((a (car numbers))\n\
    \            (b (cdr numbers)))\n        (if (null? a)\n          (list #f b)\n\
    \          (if (null? b)\n            (list a b)\n            (if (< a b)\n  \
    \            (list a b)\n              (list b a))))))))\n\n;; Create a function\
    \ that returns a list (a, b), where 'a' is\n;; the largest of positive integers,\
    \ and 'b' is the smallest\n;; of negative integers in a list.\n;; If there is\
    \ no positive or negative integers, return them as #f.\n;; Examples:\n;; >>> (largest_smallest_integers\
    \ (list 2 4 1 3 5 7))\n;; (list #f 1)\n;; >>> (largest_smallest_integers (list\
    \ ))\n;; (list #f #f)\n;; >>> (largest_smallest_integers (list 0))\n;; (list #f\
    \ #f)", "  (cond\n    ((null? lst) (list #f #f))\n    ((negative? (car lst)) (list\
    \ (car lst) (largest_smallest_integers (cdr lst))))\n    ((positive? (car lst))\
    \ (list (largest_smallest_integers (cdr lst)) (car lst)))\n    (else (list #f\
    \ #f))\n  )\n)\n\n;; Create a function that returns the sum of the squares of\n\
    ;; the integers in a list.\n;; Examples:\n;; >>> (sum_of_squares (list 1 2 3 4\
    \ 5))\n;; (list 1 5 14 25 36 25)\n;; >>> (sum_of_squares (list ))\n;; (list 0\
    \ 0 0 0 0)\n;; >>> (sum_of_squares (list 0))\n;; (list 0 0 0 0 0)", "  (cond\n\
    \    [(null? lst) (return (list #f #f))]\n    [(negative? (first lst)) (return\
    \ (list (first lst) (first lst)))]\n    [(positive? (first lst)) (return (list\
    \ (first lst) (first lst)))]\n    [else (return (list (first lst) (first lst)))]\n\
    \  )\n)\n", "  (cond\n    [(null? lst) (return (list #f #f))]\n    [(negative?\
    \ (car lst)) (return (list (car lst) (car lst)))]\n    [(positive? (car lst))\
    \ (return (list (car lst) (car lst)))]\n    [else (return (list (car lst) (car\
    \ lst)))]\n  )\n)\n\n;; Create a function that returns the sum of all integers\
    \ in a list.\n;; Examples:\n;; >>> (sum_integers (list 1 2 3 4 5))\n;; 10\n;;\
    \ >>> (sum_integers (list ))\n;; 0\n;; >>> (sum_integers (list 1 2 3 4 5 6 7))\n\
    ;; 23\n;; >>> (sum_integers (list 1 2 3 4 5 6 7 8 9))\n;; 45\n;; >>> (sum_integers\
    \ (list 1 2 3 4 5 6 7 8 9 10))\n;; 60\n;; >>> (sum_integers (list 1 2 3 4 5 6\
    \ 7 8 9 10 11))\n;; 77\n;; >>> (sum_integers (list 1 2 3 4 5 6 7 8 9 10 11 12))\n\
    ;; 95\n;; >>> (sum_integers (list 1 2 3 4 5 6 7 8 9 10 11 12 13))\n;; 112\n;;\
    \ >>> (sum_integers (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14))\n;; 139\n;; >>> (sum_integers\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15))\n;; 157\n;; >>> (sum_integers (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16))\n;; 175\n;; >>> (sum_integers (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17))\n;; 192\n;; >>> (sum_integers (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18))\n;; 209\n;; >>> (sum_integers\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19))\n;; 227\n;; >>> (sum_integers\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20))", "  (cond\n    [(null?\
    \ lst) (return (list #f #f))]\n    [(negative? (car lst)) (return (list (car lst)\
    \ (car lst)))]\n    [(positive? (car lst)) (return (list (car lst) (car lst)))]\n\
    \    [else (return (list #f #f))]\n  )\n)\n", "  (cond\n    ((null? lst) #f)\n\
    \    ((< 0 (car lst)) (cdr lst))\n    ((> 0 (car lst)) (cdr lst))\n    (else (car\
    \ lst) (cdr lst))))\n\n;; Create a function that returns the sum of the squares\
    \ of\n;; the integers in a list.\n;; Examples:\n;; >>> (sum_of_squares (list 1\
    \ 2 3 4 5 6 7 8 9 10))\n;; (list 1 25 1 25 1 25 1 25 1 25 1 25)\n;; >>> (sum_of_squares\
    \ (list ))\n;; (list 0 0 0 0 0 0 0 0 0 0)\n;; >>> (sum_of_squares (list 0))\n\
    ;; (list 0 0 0 0 0 0 0 0 0 0)", "  (cond\n    [(null? lst) (list #f #f)]\n   \
    \ [(negative? (first lst)) (list (first lst) (first lst))]\n    [(positive? (first\
    \ lst)) (list (first lst) (first lst))]\n    [else (list (first lst) (first lst))]))\n\
    \n;; Create a function that returns a list (a, b), where 'a' is\n;; the largest\
    \ of positive integers, and 'b' is the smallest\n;; of negative integers in a\
    \ list.\n;; If there is no negative or positive integers, return them as #f.\n\
    ;; Examples:\n;; >>> (largest_smallest_integers (list 2 4 1 3 5 7))\n;; (list\
    \ #f 1)\n;; >>> (largest_smallest_integers (list ))\n;; (list #f #f)\n;; >>> (largest_smallest_integers\
    \ (list 0))\n;; (list #f #f)", "  (cond\n    [(null? lst) (return (list #f #f))]\n\
    \    [(negative? (first lst))\n      (return (list (first lst) (first lst)))]\n\
    \    [(positive? (first lst))\n      (return (list (first lst) (first lst)))]\n\
    \    [(null? (first lst))\n      (return (list (first lst) (first lst)))]\n  \
    \  [else (return (list (first lst) (first lst)))]\n  )\n)\n", "  (cond\n    ((null?\
    \ lst) (list #f #f))\n    ((negative? (car lst)) (list (car lst) (largest_smallest_integers\
    \ (cdr lst))))\n    ((positive? (car lst)) (list (largest_smallest_integers (cdr\
    \ lst)) (car lst)))\n    (else (list #f #f)))\n)\n\n;; Create a function that\
    \ returns the sum of the squares of\n;; the integers in a list.\n;; Examples:\n\
    ;; >>> (sum_of_squares (list 1 2 3 4 5))\n;; (list 1 2 5 14 25)\n;; >>> (sum_of_squares\
    \ (list ))\n;; (list 0 0 0 0)\n;; >>> (sum_of_squares (list 0))\n;; (list 0 0\
    \ 0 0)", "  (cond\n    [(null? lst) (return (list #f #f))]\n    [(negative? (first\
    \ lst)) (return (list (first lst) (first lst)))]\n    [(positive? (first lst))\
    \ (return (list (first lst) (first lst)))]\n    [else (return (list (first lst)\
    \ (first lst)))]\n  )\n)\n\n;; Create a function that returns the sum of the squares\
    \ of\n;; the integers in a list.\n;; Examples:\n;; >>> (sum_of_squares (list 1\
    \ 2 3 4 5 6 7 8 9 10))\n;; (list 0 1 2 5 14 25 49 81 100 100 100 100 100 100 100\
    \ 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\
    \ 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\
    \ 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\
    \ 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\
    \ 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\
    \ 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\
    \ 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\
    \ 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\
    \ 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\
    \ 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\
    \ 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\
    \ 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\
    \ 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\
    \ 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\
    \ 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\
    \ 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\
    \ 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\
    \ 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\
    \ 100 100 100 100", "  (cond\n    ((null? lst) #f)\n    ((negative? (car lst))\
    \ (car lst))\n    ((positive? (car lst)) (cdr lst))\n    (else (cons (car lst)\
    \ (largest_smallest_integers (cdr lst))))\n  )\n)\n\n;; Create a function that\
    \ returns the sum of the squares of\n;; the integers in a list.\n;; Examples:\n\
    ;; >>> (sum_of_squares (list 1 2 3 4 5 6 7))\n;; (list 1 4 9 16 25 36 49 64)\n\
    ;; >>> (sum_of_squares (list ))\n;; (list 0 0 0 0 0 0 0)\n;; >>> (sum_of_squares\
    \ (list 0))\n;; (list 0 0 0 0 0 0 0)", "  (cond\n    ((null? lst) #f)\n    ((<\
    \ 0 (car lst)) (car lst))\n    ((> 0 (car lst)) (cdr lst))\n    (else (cons (car\
    \ lst) (largest_smallest_integers (cdr lst))))\n  )\n)\n", "  (cond\n    ((null?\
    \ lst) (list #f #f))\n    ((negative? (car lst)) (list (car lst) (largest_smallest_integers\
    \ (cdr lst))))\n    ((positive? (car lst)) (list (largest_smallest_integers (cdr\
    \ lst)) (car lst)))\n    (else (list #f #f))\n  )\n)\n\n;; Create a function that\
    \ returns a list (a, b), where 'a' is\n;; the largest of positive integers, and\
    \ 'b' is the smallest\n;; of negative integers in a list.\n;; If there is no positive\
    \ or negative integers, return them as #f.\n;; Examples:\n;; >>> (largest_smallest_integers\
    \ (list 2 4 1 3 5 7))\n;; (list 1 #f)\n;; >>> (largest_smallest_integers (list\
    \ ))\n;; (list #f #f)\n;; >>> (largest_smallest_integers (list 0))\n;; (list #f\
    \ #f)", "  (cond\n    ((null? lst) #f)\n    ((negative? (car lst)) (car lst))\n\
    \    ((positive? (car lst)) (cdr lst))\n    (else (car lst) (cdr lst))\n  )\n\
    )\n\n;; Create a function that returns the sum of the squares of\n;; the integers\
    \ in a list.\n;; Examples:\n;; >>> (sum_of_squares (list 1 2 3 4 5))\n;; 25\n\
    ;; >>> (sum_of_squares (list ))\n;; 0\n;; >>> (sum_of_squares (list 1 2 3 4 5\
    \ 6 7 8 9))\n;; 100\n;; >>> (sum_of_squares (list 1 2 3 4 5 6 7 8 9 10))\n;; 100\n\
    ;; >>> (sum_of_squares (list 1 2 3 4 5 6 7 8 9 10 11))\n;; 100\n;; >>> (sum_of_squares\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12))\n;; 100\n;; >>> (sum_of_squares (list 1 2\
    \ 3 4 5 6 7 8 9 10 11 12 13))\n;; 100\n;; >>> (sum_of_squares (list 1 2 3 4 5\
    \ 6 7 8 9 10 11 12 13 14))\n;; 100\n;; >>> (sum_of_squares (list 1 2 3 4 5 6 7\
    \ 8 9 10 11 12 13 14 15))\n;; 100\n;; >>> (sum_of_squares (list 1 2 3 4 5 6 7\
    \ 8 9 10 11 12 13 14 15 16))\n;; 100\n;; >>> (sum_of_squares (list 1 2 3 4 5 6\
    \ 7 8 9 10 11 12 13 14 15 16 17))\n;; 100\n;; >>> (sum_of_squares (list 1 2 3\
    \ 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18))\n;; 100\n;; >>> (sum_of_squares (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19))\n;; 100\n;; >>> (sum_of_squares\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20))\n;; 100\n;; >>> (sum_of_squares\
    \ (list 1 2 3 4 5 6", "  (cond\n    ((null? lst) (list #f #f))\n    ((negative?\
    \ (car lst)) (list (car lst) (largest_smallest_integers (cdr lst))))\n    ((positive?\
    \ (car lst)) (list (largest_smallest_integers (cdr lst)) (car lst)))\n    (else\
    \ (list #f #f))\n  )\n)\n", "  (let ((numbers (mapcar (lambda (x) (if (< x 0)\
    \ -1 (if (> x 0) 1 0)))) lst))\n    (if (empty? numbers)\n      (list #f #f)\n\
    \      (let ((a (car numbers))\n            (b (cdr numbers)))\n        (if (null?\
    \ a)\n          (list #f b)\n          (if (null? b)\n            (list a b)\n\
    \            (let ((c (car b))\n                  (d (cdr b)))\n             \
    \ (if (null? c)\n                (list a d)\n                (if (null? d)\n \
    \                 (list a c)\n                  (list a c d))))))))))\n", "  (let\
    \ ((lst (if (null? lst)\n                  (list #f #f)\n                  (list\
    \ (car lst) (car lst)))))\n    (if (null? lst)\n      (list #f #f)\n      (let\
    \ ((a (car lst)))\n        (let ((b (car lst)))\n          (if (< a 0)\n     \
    \       (list a b)\n            (list b a)\n          )\n        )\n      )\n\
    \    )\n  )\n)\n", "  (cond\n    ((null? lst) (list #f #f))\n    ((negative? (car\
    \ lst)) (list (car lst) (largest_smallest_integers (cdr lst))))\n    ((positive?\
    \ (car lst)) (list (largest_smallest_integers (cdr lst)) (car lst)))\n    (else\
    \ (list #f #f))\n  )\n)\n\n;; Create a function that returns a list (a, b), where\
    \ 'a' is\n;; the largest of positive integers, and 'b' is the smallest\n;; of\
    \ negative integers in a list.\n;; If there is no positive or negative integers,\
    \ return them as #f.\n;; Examples:\n;; >>> (largest_smallest_integers (list 2\
    \ 4 1 3 5 7))\n;; (list 2 4)\n;; >>> (largest_smallest_integers (list ))\n;; (list\
    \ #f #f)\n;; >>> (largest_smallest_integers (list 0))\n;; (list #f #f)", "  (cond\n\
    \    [(null? lst) (list #f #f)]\n    [(negative? (first lst)) (list (first lst)\
    \ (first lst))]\n    [(positive? (first lst)) (list (first lst) (first lst))]\n\
    \    [else (list (first lst) (first lst))]))\n\n;; Create a function that returns\
    \ the sum of the squares of\n;; the integers in a list.\n;; Examples:\n;; >>>\
    \ (sum_of_squares (list 1 2 3 4 5 6 7))\n;; (list 1 4 9 16 25 36 49 64)\n;; >>>\
    \ (sum_of_squares (list ))\n;; (list 0 0 0 0 0 0 0)\n;; >>> (sum_of_squares (list\
    \ 0))\n;; (list 0 0 0 0 0 0 0)", "  (let ((lst (if (null? lst) (list #f #f) lst)))\n\
    \    (let ((n (car lst)))\n      (if (< n 0)\n        (list (car lst) (cdr lst))\n\
    \        (if (> n 0)\n          (list (car lst) (cdr lst))\n          (list #f\
    \ #f))))))\n\n;;; Test the function", "  (cond\n    [(null? lst) (list #f #f)]\n\
    \    [(negative? (first lst))\n      (list (first lst) (first lst))]\n    [(positive?\
    \ (first lst))\n      (list (first lst) (first lst))]\n    [else\n      (list\
    \ (first lst) (first lst))]))\n\n;; Create a function that returns the sum of\
    \ all the numbers in a list.\n;; Examples:\n;; >>> (sum_list (list 1 2 3 4 5 6\
    \ 7 8 9))\n;; 9\n;; >>> (sum_list (list ))\n;; 0\n;; >>> (sum_list (list 1 2 3\
    \ 4 5 6 7 8 9 10))\n;; 45\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9 10 11))\n\
    ;; 56", "  (cond\n    ((null? lst) (list #f #f))\n    ((negative? (car lst)) (list\
    \ (car lst) (largest_smallest_integers (cdr lst))))\n    ((positive? (car lst))\
    \ (list (largest_smallest_integers (cdr lst)) (car lst)))\n    (else (list #f\
    \ #f))\n  )\n)\n\n;; Create a function that returns a list (a, b), where 'a' is\n\
    ;; the largest of positive integers, and 'b' is the smallest\n;; of negative integers\
    \ in a list.\n;; If there is no positive or negative integers, return them as\
    \ #f.\n;; Examples:\n;; >>> (largest_smallest_integers (list 2 4 1 3 5 7))\n;;\
    \ (list 1 #f)\n;; >>> (largest_smallest_integers (list ))\n;; (list #f #f)\n;;\
    \ >>> (largest_smallest_integers (list 0))\n;; (list #f #f)", "  (let ((neg (find-first-negative\
    \ lst))))\n  (let ((pos (find-first-positive lst))))\n  (cond\n    ((neg? neg)\
    \ (neg neg))\n    ((pos? pos) (pos pos))\n    (else (list #f #f))\n  )\n)\n",
  "  (cond\n    ((null? lst) (list #f #f))\n    ((negative? (car lst)) (car lst))\n\
    \    ((positive? (car lst)) (cdr lst))\n    (else (car lst) (cdr lst))\n  )\n\
    )\n\n;; Create a function that returns a list (a, b), where 'a' is\n;; the smallest\
    \ of positive integers, and 'b' is the largest\n;; of negative integers in a list.\n\
    ;; If there is no negative or positive integers, return them as #f.\n;; Examples:\n\
    ;; >>> (smallest_largest_integers (list 2 4 1 3 5 7))\n;; (list 1 #f)\n;; >>>\
    \ (smallest_largest_integers (list ))\n;; (list #f #f)\n;; >>> (smallest_largest_integers\
    \ (list 0))\n;; (list #f #f)", "  (cond\n    ((null? lst) #f)\n    ((negative?\
    \ (car lst)) (car lst))\n    ((positive? (car lst)) (cdr lst))\n    (else (cons\
    \ (car lst) (largest_smallest_integers (cdr lst))))\n  )\n)\n", "  (cond\n   \
    \ ((null? lst) (list #f #f))\n    ((negative? (car lst)) (list (car lst) (largest_smallest_integers\
    \ (cdr lst))))\n    ((positive? (car lst)) (list (largest_smallest_integers (cdr\
    \ lst)) (car lst)))\n    (else (list #f #f))\n  )\n)\n\n;; Create a function that\
    \ returns the largest of two numbers.\n;; If the numbers are equal, return them\
    \ as #f.\n;; Examples:\n;; >>> (largest_of_two_numbers (list 2 4 1 3 5 7))\n;;\
    \ (list 4)\n;; >>> (largest_of_two_numbers (list 2 2))\n;; (list 2)\n;; >>> (largest_of_two_numbers\
    \ (list ))\n;; (list #f)", "  (cond\n    ((null? lst) #f)\n    ((negative? (car\
    \ lst)) (car lst))\n    ((positive? (car lst)) (cdr lst))\n    (else (cons (car\
    \ lst) (largest_smallest_integers (cdr lst))))\n  )\n)\n\n;; Create a function\
    \ that returns the sum of the elements in a list.\n;; Examples:\n;; >>> (sum_list\
    \ (list 1 2 3 4 5 6 7 8 9))\n;; 9\n;; >>> (sum_list (list ))\n;; 0\n;; >>> (sum_list\
    \ (list 1 2 3 4 5 6 7 8 9))\n;; 9", "  (let ((neg (find-first-negative lst))))\n\
    \  (let ((pos (find-first-positive lst))))\n  (cond\n    ((null? neg) (neg))\n\
    \    ((null? pos) (pos))\n    ((<= neg) (cons neg pos))\n    ((<= pos) (cons pos\
    \ neg))\n    (else (cons #f #f))))\n\n;; Create a function that returns the sum\
    \ of the squares of\n;; the integers in a list.\n;; Examples:\n;; >>> (sum-of-squares\
    \ (list 1 2 3 4 5 6 7 8 9))\n;; (list 1 4 9 16 25 36 49 64 81 100 121 144 169\
    \ 196 225 256 289 324 361 400 425 441 464 489 521 561 641 681 721 761 801 881\
    \ 941 961 1041 1081 1201 1241 1281 1361 1441 1481 1561 1641 1681 1741 1841 1881\
    \ 1941 1969 2041 2081 2121 2161 2201 2309 2401 2501 2601 2701 2801 2901 3001 3121\
    \ 3161 3201 3301 3401 3501 3601 3701 3801 3901 4001 4101 4201 4341 4461 4681 4901\
    \ 5001 5101 5201 5341 5461 5681 5901 6001 6201 6301 6441 6561 6781 6901 7001 7201\
    \ 7301 7441 7561 7781 7901 8001 8201 8301 8441 8561 8781 8901 9001 9201 9301 9441\
    \ 9561 9781 9901 10001)\n;; >>> (sum-of-squares (list ))\n;; (list 0)\n;; >>>\
    \ (sum-of-squares (list 1))\n;; (list 1)\n;; >>> (sum-of-squares (list 1 2 3 4\
    \ 5 6 7 8 9))\n;; (list 1 16 100 121 144 169 196 225 256 289 324 361 400 425 441\
    \ 464 489 521 561 641 681 721 761 801 881 941 961 1041 1081 1201 1241 1281 1361\
    \ 1441 1481 1561 1641 1681 1741 1841 1881 1941 1969 2041 2081 2121 2161 2201 2309\
    \ 2401 2501 2601 2701 2801 2901 3001 3", "  (cond\n    ((null? lst) #f)\n    ((negative?\
    \ (car lst)) (car lst))\n    ((positive? (car lst)) (cdr lst))\n    (else (cons\
    \ (car lst) (largest_smallest_integers (cdr lst))))\n  )\n)\n\n;; Create a function\
    \ that returns a list (a, b), where 'a' is\n;; the largest of positive integers,\
    \ and 'b' is the smallest\n;; of negative integers in a list.\n;; If there is\
    \ no negative or positive integers, return them as #f.\n;; Examples:\n;; >>> (largest_smallest_integers\
    \ (list 2 4 1 3 5 7))\n;; (list 2 1)\n;; >>> (largest_smallest_integers (list\
    \ ))\n;; (list #f #f)\n;; >>> (largest_smallest_integers (list 0))\n;; (list #f\
    \ #f)", "  (cond\n    [(null? lst) (return (list #f #f))]\n    [(negative? (car\
    \ lst)) (return (list (car lst) (largest_smallest_integers (cdr lst))))]\n   \
    \ [(positive? (car lst)) (return (list (largest_smallest_integers (cdr lst)) (car\
    \ lst)))]\n    [else (return (list #f #f))]\n  )\n)\n\n;; Create a function that\
    \ returns the sum of all the numbers in a list.\n;; Examples:\n;; >>> (sum_list\
    \ (list 1 2 3 4 5 6 7 8 9))\n;; 9\n;; >>> (sum_list (list ))\n;; 0\n;; >>> (sum_list\
    \ (list 1 2 3 4 5 6 7 8 9 10))\n;; 45", "  (cond\n    ((null? lst) #f)\n    ((<\
    \ 0 (car lst)) (cdr lst))\n    (else\n      (let ((a (car lst)))\n        (if\
    \ (< (car lst) 0)\n          (cdr lst)\n          (cons (car lst) (largest_smallest_integers\
    \ (cdr lst)))))))))\n\n;; Create a function that returns the sum of the elements\
    \ in a list.\n;; Examples:\n;; >>> (sum_list (list 1 2 3 4 5 6 7))\n;; (list 1\
    \ 2 3 4 5 6 7)\n;; >>> (sum_list (list ))\n;; (list 0)\n;; >>> (sum_list (list\
    \ 1))\n;; (list 1)", "  (cond\n    ((null? lst) (list #f #f))\n    ((negative?\
    \ (car lst)) (car lst))\n    ((positive? (car lst)) (cdr lst))\n    (else (cons\
    \ (car lst) (largest_smallest_integers (cdr lst))))\n  )\n)\n\n;; Create a function\
    \ that returns a list (a, b), where 'a' is\n;; the largest of positive integers,\
    \ and 'b' is the smallest\n;; of negative integers in a list.\n;; If there is\
    \ no positive or negative integers, return them as #f.\n;; Examples:\n;; >>> (largest_smallest_integers\
    \ (list 2 4 1 3 5 7))\n;; (list 2 4)\n;; >>> (largest_smallest_integers (list\
    \ ))\n;; (list #f #f)\n;; >>> (largest_smallest_integers (list 0))\n;; (list #f\
    \ #f)", "  (cond\n    [(null? lst) (return (list #f #f))]\n    [(negative? (first\
    \ lst)) (return (list (first lst) (first lst)))]\n    [(positive? (first lst))\
    \ (return (list (first lst) (first lst)))]\n    [else (return (list (first lst)\
    \ (first lst)))]\n  )\n)\n\n;; Create a function that returns a list (a, b), where\
    \ 'a' is\n;; the largest of positive integers, and 'b' is the smallest\n;; of\
    \ negative integers in a list.\n;; If there is no positive or negative integers,\
    \ return them as #f.\n;; Examples:\n;; >>> (largest_smallest_integers (list 2\
    \ 4 1 3 5 7))\n;; (list #f 2)\n;; >>> (largest_smallest_integers (list ))\n;;\
    \ (list #f #f)\n;; >>> (largest_smallest_integers (list 0))\n;; (list #f #f)",
  "  (cond\n    [(null? lst) (return #f)]\n    [(negative? (first lst)) (return (cons\
    \ 'a (largest_smallest_integers (cdr lst))))]\n    [(positive? (first lst)) (return\
    \ (cons (first lst) (largest_smallest_integers (cdr lst))))]\n    [else (return\
    \ lst)]\n  )\n)\n\n;; Create a function that returns the sum of all elements in\
    \ a list.\n;; Examples:\n;; >>> (sum_list (list 1 2 3 4 5))\n;; 10\n;; >>> (sum_list\
    \ (list ))\n;; 0\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9 10))\n;; 55", "  (cond\n\
    \    ((null? lst) (list #f #f))\n    ((negative? (car lst)) (list (car lst) #f))\n\
    \    ((positive? (car lst)) (list #f (car lst)))\n    (else (list #f #f)))\n)\n\
    \n;; Create a function that returns a list (a, b), where 'a' is\n;; the largest\
    \ of positive integers, and 'b' is the smallest\n;; of negative integers in a\
    \ list.\n;; If there is no positive or negative integers, return them as #f.\n\
    ;; Examples:\n;; >>> (largest_smallest_integers (list 2 4 1 3 5 7))\n;; (list\
    \ #f 1)\n;; >>> (largest_smallest_integers (list ))\n;; (list #f #f)\n;; >>> (largest_smallest_integers\
    \ (list 0))\n;; (list #f #f)", "  (cond\n    [(null? lst) (return (list #f #f))]\n\
    \    [(negative? (car lst)) (return (list (car lst) (car lst)))]\n    [(positive?\
    \ (car lst)) (return (list (car lst) (car lst)))]\n    [else (return (list #f\
    \ #f))]\n  )\n)\n\n;; Create a function that returns a list (a, b), where 'a'\
    \ is\n;; the largest of positive integers, and 'b' is the smallest\n;; of negative\
    \ integers in a list.\n;; If there is no positive or negative integers, return\
    \ them as #f.\n;; Examples:\n;; >>> (largest_smallest_integers (list 2 4 1 3 5\
    \ 7))\n;; (list 1 #f)\n;; >>> (largest_smallest_integers (list ))\n;; (list #f\
    \ #f)\n;; >>> (largest_smallest_integers (list 0))\n;; (list #f #f)", "  (let\
    \ ((numbers (mapcar (lambda (x) (if (< x 0) -1 0)) lst)))\n    (if (empty? numbers)\n\
    \      (list #f #f)\n      (let ((a (car numbers))\n            (b (cdr numbers)))\n\
    \        (if (null? a)\n          (list a b)\n          (if (null? b)\n      \
    \      (list a b)\n            (list (car a) (car b))))))))\n", "  (cond\n   \
    \ [(null? lst) (list #f #f)]\n    [(negative? (first lst)) (list (first lst) (first\
    \ lst))]\n    [(positive? (first lst)) (list (first lst) (first lst))]\n    [else\
    \ (list (first lst) (first lst))]))\n\n;; Create a function that returns the sum\
    \ of the squares of\n;; the integers in a list.\n;; Examples:\n;; >>> (sum_of_squares\
    \ (list 1 2 3 4 5))\n;; 25\n;; >>> (sum_of_squares (list ))\n;; 0\n;; >>> (sum_of_squares\
    \ (list 1 2 3 4 5 6 7))\n;; 100\n;; >>> (sum_of_squares (list 1 2 3 4 5 6 7 8\
    \ 9))\n;; 100\n;; >>> (sum_of_squares (list 1 2 3 4 5 6 7 8 9 10))\n;; 100\n;;\
    \ >>> (sum_of_squares (list 1 2 3 4 5 6 7 8 9 10 11))\n;; 100\n;; >>> (sum_of_squares\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12))\n;; 100\n;; >>> (sum_of_squares (list 1 2\
    \ 3 4 5 6 7 8 9 10 11 12 13))\n;; 100\n;; >>> (sum_of_squares (list 1 2 3 4 5\
    \ 6 7 8 9 10 11 12 13 14))\n;; 100\n;; >>> (sum_of_squares (list 1 2 3 4 5 6 7\
    \ 8 9 10 11 12 13 14 15))\n;; 100\n;; >>> (sum_of_squares (list 1 2 3 4 5 6 7\
    \ 8 9 10 11 12 13 14 15 16))\n;; 100\n;; >>> (sum_of_squares (list 1 2 3 4 5 6\
    \ 7 8 9 10 11 12 13 14 15 16 17))\n;; 100\n;; >>> (sum_of_squares (list 1 2 3\
    \ 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18))\n;; 100\n;; >>> (sum_of_squares (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19))\n;; 100\n;; >>> (sum_of_squares\
    \ (", "  (let ((numbers (mapcar (lambda (x) (if (< x 0) -1 (if (> x 0) 1 0))))\
    \ lst))\n    (cond\n      ((empty? numbers) #f)\n      ((empty? (car numbers))\
    \ (car numbers))\n      ((> (car numbers) (car (cdr numbers))) (car numbers))\n\
    \      ((< (car numbers) (car (cdr numbers))) (cdr numbers))\n      (else (cons\
    \ (car numbers) (largest_smallest_integers (cdr numbers)))))))\n", "  (cond\n\
    \    [(null? lst) (list #f #f)]\n    [(negative? (first lst)) (list (first lst)\
    \ (first lst))]\n    [(positive? (first lst)) (list (first lst) (first lst))]\n\
    \    [else (list #f #f)]\n  )\n)\n\n;; Create a function that returns the largest\
    \ of positive integers\n;; in a list. If there is no positive integers, return\
    \ them as #f.\n;; Examples:\n;; >>> (largest_positive_integers (list 2 4 1 3 5\
    \ 7))\n;; (list 4)\n;; >>> (largest_positive_integers (list ))\n;; (list #f)\n\
    ;; >>> (largest_positive_integers (list 0))\n;; (list #f)", "  (cond\n    [(null?\
    \ lst) (return #f)]\n    [(negative? (car lst)) (return (list (car lst) (largest_smallest_integers\
    \ (cdr lst))))]\n    [(positive? (car lst)) (return (list (largest_smallest_integers\
    \ (cdr lst)) (car lst)))]\n    [else (return (list (car lst) (largest_smallest_integers\
    \ (cdr lst))))]\n  )\n)\n\n;; Create a function that returns a list (a, b), where\
    \ 'a' is\n;; the largest of positive integers, and 'b' is the smallest\n;; of\
    \ negative integers in a list.\n;; If there is no negative or positive integers,\
    \ return them as #f.\n;; Examples:\n;; >>> (largest_smallest_integers (list 2\
    \ 4 1 3 5 7))\n;; (list #f 1)\n;; >>> (largest_smallest_integers (list ))\n;;\
    \ (list #f #f)\n;; >>> (largest_smallest_integers (list 0))\n;; (list #f #f)",
  "  (cond\n    ((null? lst) #f)\n    ((negative? (car lst)) (car lst))\n    ((positive?\
    \ (car lst)) (cdr lst))\n    (else (car lst) (cdr lst))\n  )\n)\n\n;; Create a\
    \ function that returns the sum of the elements of a list.\n;; Examples:\n;; >>>\
    \ (sum_list (list 1 2 3 4 5 6 7 8 9))\n;; 9\n;; >>> (sum_list (list ))\n;; 0\n\
    ;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9))\n;; 9\n;; >>> (sum_list (list 1 2 3\
    \ 4 5 6 7 8 9) (list 1 2 3 4 5 6 7 8 9))\n;; 9", "  (cond\n    [(null? lst) (list\
    \ #f #f)]\n    [(negative? (car lst)) (list (car lst) (largest_smallest_integers\
    \ (cdr lst)))]\n    [(positive? (car lst)) (list (largest_smallest_integers (cdr\
    \ lst)) (car lst))]\n    [else (list #f #f)]\n  )\n)\n\n;; Create a function that\
    \ returns the sum of all elements in a list.\n;; Examples:\n;; >>> (sum_list (list\
    \ 1 2 3 4 5))\n;; 10\n;; >>> (sum_list (list ))\n;; 0\n;; >>> (sum_list (list\
    \ 1 2 3 4 5 6 7 8 9 10))\n;; 55\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9 10 11))\n\
    ;; 66\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9 10 11 12))\n;; 77\n;; >>> (sum_list\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13))\n;; 88\n;; >>> (sum_list (list 1 2 3 4\
    \ 5 6 7 8 9 10 11 12 13 14))\n;; 99\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9\
    \ 10 11 12 13 14 15))\n;; 115\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9 10 11\
    \ 12 13 14 15 16))\n;; 136\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9 10 11 12\
    \ 13 14 15 16 17))\n;; 147\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9 10 11 12\
    \ 13 14 15 16 17 18))\n;; 158\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9 10 11\
    \ 12 13 14 15 16 17 18 19))\n;; 169\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9\
    \ 10 11 12 13 14 15 16 17 18 19 20))\n;; 180\n;; >>> (sum_list (list 1 2 3 4 5\
    \ 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21))\n;; 191\n;; >>> (sum_list (list\
    \ 1 2 3 4 5 6 7 8", "  (let ((numbers (mapcar (lambda (x) (if (< x 0) -1 (if (>\
    \ x 0) 1 0)))) lst))\n    (if (empty? numbers)\n      (list #f #f)\n      (let\
    \ ((a (car numbers))\n            (b (cdr numbers)))\n        (if (null? a)\n\
    \          (list a b)\n          (if (null? b)\n            (list a b)\n     \
    \       (if (> a b)\n              (list a b)\n              (if (< a b)\n   \
    \             (list a b)\n                (list b a))))))))))\n", "  (let ((numbers\
    \ (mapcar (lambda (x) (if (< x 0) -1 (if (> x 0) 1 0)))) lst)))\n  (if (empty?\
    \ numbers)\n    (list #f #f)\n    (let ((a (car numbers))\n          (b (cdr numbers)))\n\
    \      (if (null? a)\n        (list #f b)\n        (if (null? b)\n          (list\
    \ a b)\n          (if (> a b)\n            (list a b)\n            (list b a))))))))\n",
  "  (cond\n    [(null? lst) (list #f #f)]\n    [(negative? (car lst)) (list (car\
    \ lst) (largest_smallest_integers (cdr lst)))]\n    [(positive? (car lst)) (list\
    \ (largest_smallest_integers (cdr lst)) (car lst))]\n    [else (list #f #f)]\n\
    \  )\n)\n\n;; Create a function that returns the sum of all the\n;; positive integers\
    \ in a list.\n;; Examples:\n;; >>> (sum_positive_integers (list 2 4 1 3 5 7))\n\
    ;; 6\n;; >>> (sum_positive_integers (list ))\n;; 0\n;; >>> (sum_positive_integers\
    \ (list 0))\n;; 0", "  (cond\n    ((null? lst) (list #f #f))\n    ((negative?\
    \ (car lst)) (list (car lst) (largest_smallest_integers (cdr lst))))\n    ((positive?\
    \ (car lst)) (list (largest_smallest_integers (cdr lst)) (car lst)))\n    (else\
    \ (list #f #f))\n  )\n)\n\n;; Create a function that returns the sum of the squares\
    \ of\n;; the integers in a list.\n;; Examples:\n;; >>> (sum_of_squares (list 1\
    \ 2 3 4 5 6 7 8 9 10))\n;; (list 1 25 36 49 64 81 100 121 144 169 196 225)\n;;\
    \ >>> (sum_of_squares (list ))\n;; (list 0 0 0 0 0 0 0 0 0 0)\n;; >>> (sum_of_squares\
    \ (list 0))\n;; (list 0 0 0 0 0 0 0 0 0 0)", "  (cond\n    [(null? lst) (list\
    \ #f #f)]\n    [(negative? (car lst)) (list (car lst) (largest_smallest_integers\
    \ (cdr lst)))]\n    [(positive? (car lst)) (list (largest_smallest_integers (cdr\
    \ lst)) (car lst))]\n    [else (list #f #f)]\n  )\n)\n\n;; Create a function that\
    \ returns a list (a, b), where 'a' is\n;; the largest of positive integers, and\
    \ 'b' is the smallest\n;; of negative integers in a list.\n;; If there is no negative\
    \ or positive integers, return them as #f.\n;; Examples:\n;; >>> (largest_smallest_integers\
    \ (list 2 4 1 3 5 7))\n;; (list 1 #f)\n;; >>> (largest_smallest_integers (list\
    \ ))\n;; (list #f #f)\n;; >>> (largest_smallest_integers (list 0))\n;; (list #f\
    \ #f)", "  (cond\n    [(null? lst) (return (list #f #f))]\n    [(negative? (car\
    \ lst))\n      (return (list (car lst) (largest_smallest_integers (cdr lst))))]\n\
    \    [(positive? (car lst))\n      (return (list (largest_smallest_integers (cdr\
    \ lst)) (car lst)))]\n    [else (return (list #f #f))]\n  )\n)\n\n;; Create a\
    \ function that returns the sum of all the elements in a list.\n;; Examples:\n\
    ;; >>> (sum_list (list 1 2 3 4 5))\n;; 10\n;; >>> (sum_list (list ))\n;; 0\n;;\
    \ >>> (sum_list (list 1 2 3 4 5 6 7))\n;; 23", "  (cond\n    [(null? lst) (return\
    \ (list #f #f))]\n    [(negative? (first lst)) (return (list (first lst) (first\
    \ lst)))]\n    [(positive? (first lst)) (return (list (first lst) (first lst)))]\n\
    \    [else (return (list (first lst) (first lst)))]\n  )\n)\n", "  (cond\n   \
    \ [(null? lst) (return #f #f)]\n    [(negative? (car lst)) (return (cdr lst) (car\
    \ lst))]\n    [(positive? (car lst)) (return (cdr lst) (car lst))]\n    [else\
    \ (return lst)]\n  )\n)\n\n;; Create a function that returns a list (a, b), where\
    \ 'a' is\n;; the largest of positive integers, and 'b' is the smallest\n;; of\
    \ negative integers in a list.\n;; If there is no positive or negative integers,\
    \ return them as #f.\n;; Examples:\n;; >>> (largest_smallest_integers (list 2\
    \ 4 1 3 5 7))\n;; (list #f 1)\n;; >>> (largest_smallest_integers (list ))\n;;\
    \ (list #f #f)\n;; >>> (largest_smallest_integers (list 0))\n;; (list #f #f)",
  "  (cond\n    ((null? lst) #f)\n    ((< 0 (car lst)) (car lst))\n    ((> 0 (car\
    \ lst)) (cdr lst))\n    ((< 0 (car (cdr lst))) (car (cdr lst)))\n    ((> 0 (car\
    \ (cdr (cdr lst)))) (cdr (cdr lst)))\n    (else (car (cdr (cdr (cdr lst)))))))\n\
    \n;; Test it out:", "  (cond\n    ((null? lst) #f)\n    ((< 0 (car lst)) (car\
    \ lst))\n    ((> 0 (car lst)) (cdr lst))\n    ((< 0 (car (cdr lst))) (car (cdr\
    \ lst)))\n    ((> 0 (car (cdr (cdr lst)))) (cdr (cdr lst)))\n    (else (car (cdr\
    \ (cdr (cdr lst)))))))\n\n;; Create a function that returns a list (a, b), where\
    \ 'a' is\n;; the largest of positive integers, and 'b' is the smallest\n;; of\
    \ negative integers in a list.\n;; If there is no positive or negative integers,\
    \ return them as #f.\n;; Examples:\n;; >>> (largest_smallest_integers (list 2\
    \ 4 1 3 5 7))\n;; (list 1 #f)\n;; >>> (largest_smallest_integers (list ))\n;;\
    \ (list #f #f)\n;; >>> (largest_smallest_integers (list 0))\n;; (list #f #f)",
  "  (let ((lst1 (if (null? lst) (list #f #f) lst)))\n    (let ((lst2 (if (null? lst1)\
    \ (list #f #f) lst1)))\n      (let ((lst3 (if (null? lst2) (list #f #f) lst2)))\n\
    \        (let ((lst4 (if (null? lst3) (list #f #f) lst3)))\n          (let ((lst5\
    \ (if (null? lst4) (list #f #f) lst4)))\n            (let ((lst6 (if (null? lst5)\
    \ (list #f #f) lst5)))\n              (let ((lst7 (if (null? lst6) (list #f #f)\
    \ lst6)))\n                (let ((lst8 (if (null? lst7) (list #f #f) lst7)))\n\
    \                  (let ((lst9 (if (null? lst8) (list #f #f) lst8)))\n       \
    \             (let ((lst10 (if (null? lst9) (list #f #f) lst9)))\n           \
    \           (let ((lst11 (if (null? lst10) (list #f #f) lst10)))\n           \
    \             (let ((lst12 (if (null? lst11) (list #f #f) lst11)))\n         \
    \                 (let ((lst13 (if (null? lst12) (list #f #f) lst12)))\n     \
    \                       (let ((lst14 (if (null? lst13) (list #f #f) lst13)))\n\
    \                              (let ((lst15 (if (null? lst14) (list #f #f) lst14)))\n\
    \                                (let ((lst16 (if (null? lst15) (list #f #f) lst15)))\n\
    \                                  (let ((lst17 (if (null? lst16) (list #f #f)\
    \ lst16)))\n                                    (let ((lst18 (if (null? lst17)\
    \ (list #f #f) lst17)))\n                                      (let", "  (cond\n\
    \    [(null? lst) (return (list #f #f))]\n    [(negative? (first lst)) (return\
    \ (list (first lst) (first lst)))]\n    [(positive? (first lst)) (return (list\
    \ (first lst) (first lst)))]\n    [else (return (list (first lst) (first lst)))]\n\
    \  )\n)\n\n;; Create a function that returns the sum of all the\n;; numbers in\
    \ a list.\n;; Examples:\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9))\n;; 9\n;;\
    \ >>> (sum_list (list ))\n;; 0\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9))\n;;\
    \ 9\n;; >>> (sum_list (list 1 2 3 4 5 6 7 8 9))\n;; 9", "  (cond\n    [(null?\
    \ lst) (return (list #f #f))]\n    [(negative? (first lst)) (return (list (first\
    \ lst) (first lst)))]\n    [(positive? (first lst)) (return (list (first lst)\
    \ (first lst)))]\n    [else (return (list (first lst) (first lst)))]\n  )\n)\n\
    \n;; Create a function that returns a list (a, b), where 'a' is\n;; the largest\
    \ of positive integers, and 'b' is the smallest\n;; of negative integers in a\
    \ list.\n;; If there is no positive or negative integers, return them as #f.\n\
    ;; Examples:\n;; >>> (largest_smallest_integers (list 2 4 1 3 5 7))\n;; (list\
    \ #f 5)\n;; >>> (largest_smallest_integers (list ))\n;; (list #f #f)\n;; >>> (largest_smallest_integers\
    \ (list 0))\n;; (list #f #f)", "  (cond\n    [(null? lst) (return (list #f #f))]\n\
    \    [(negative? (car lst)) (return (list (car lst) (car lst)))]\n    [(positive?\
    \ (car lst)) (return (list (car lst) (car lst)))]\n    [else (return (list #f\
    \ #f))]\n  )\n)\n\n;; Create a function that returns a list (a, b), where 'a'\
    \ is\n;; the largest of positive integers, and 'b' is the smallest\n;; of negative\
    \ integers in a list.\n;; If there is no positive or negative integers, return\
    \ them as #f.\n;; Examples:\n;; >>> (largest_smallest_integers (list 2 4 1 3 5\
    \ 7))\n;; (list #f 2)\n;; >>> (largest_smallest_integers (list ))\n;; (list #f\
    \ #f)\n;; >>> (largest_smallest_integers (list 0))\n;; (list #f #f)", "  (cond\n\
    \    [(null? lst) (list #f #f)]\n    [(negative? (first lst)) (list (first lst)\
    \ (first lst))]\n    [(positive? (first lst)) (list (first lst) (first lst))]\n\
    \    [else (list (first lst) (first lst))]))\n\n;; Create a function that returns\
    \ the sum of the elements in a list.\n;; If the list is empty, return 0.\n;; Examples:\n\
    ;; >>> (sum_list (list 1 2 3 4 5))\n;; 10\n;; >>> (sum_list (list ))\n;; 0", " \
    \ (cond\n    ((null? lst) #f)\n    ((< 0 (car lst)) (car lst))\n    ((> 0 (car\
    \ lst)) (cdr lst))\n    ((< 0 (car (cdr lst))) (car (cdr lst)))\n    ((> 0 (car\
    \ (cdr (cdr lst)))) (cdr (cdr lst)))\n    (else (car (cdr (cdr (cdr lst)))))))\n\
    \n;; Create a function that returns a list (a, b), where 'a' is\n;; the largest\
    \ of positive integers, and 'b' is the smallest\n;; of negative integers in a\
    \ list.\n;; If there is no positive or negative integers, return them as #f.\n\
    ;; Examples:\n;; >>> (largest_smallest_integers (list 2 4 1 3 5 7))\n;; (list\
    \ 1 #f)\n;; >>> (largest_smallest_integers (list ))\n;; (list #f #f)\n;; >>> (largest_smallest_integers\
    \ (list 0))\n;; (list #f #f)", "  (cond\n    [(null? lst) (return #f #f)]\n  \
    \  [(negative? (first lst)) (return (first lst) (first lst))]\n    [(positive?\
    \ (first lst)) (return (first lst) (first lst))]\n    [(negative? (first (cdr\
    \ lst))) (return (first lst) (first lst))]\n    [(positive? (first (cdr lst)))\
    \ (return (first lst) (first lst))]\n    [else (return (first lst) (first lst))]\n\
    \  )\n)\n", "  (cond\n    ((null? lst) (list #f #f))\n    ((negative? (car lst))\
    \ (car lst))\n    ((positive? (car lst)) (cdr lst))\n    (else (list #f #f))\n\
    \  )\n)\n\n;; Create a function that returns a list (a, b), where 'a' is\n;; the\
    \ largest of positive integers, and 'b' is the smallest\n;; of negative integers\
    \ in a list.\n;; If there is no positive or negative integers, return them as\
    \ #f.\n;; Examples:\n;; >>> (largest_smallest_integers (list 2 4 1 3 5 7))\n;;\
    \ (list 2 4)\n;; >>> (largest_smallest_integers (list ))\n;; (list #f #f)\n;;\
    \ >>> (largest_smallest_integers (list 0))\n;; (list #f #f)", "  (cond\n    ((null?\
    \ lst) (list #f #f))\n    ((negative? (car lst)) (car lst))\n    ((positive? (car\
    \ lst)) (cdr lst))\n    (else (cons (car lst) (largest_smallest_integers (cdr\
    \ lst))))\n  )\n)\n\n;; Create a function that returns the sum of the elements\
    \ in a list.\n;; If there are no elements, return #f.\n;; Examples:\n;; >>> (sum_list\
    \ (list 1 2 3 4 5))\n;; (list 6)\n;; >>> (sum_list (list ))\n;; (list #f)", " \
    \ (cond\n    ((null? lst) (list #f #f))\n    ((< 0 (car lst)) (list (car lst)\
    \ #f))\n    ((> 0 (car lst)) (list #f (car lst)))\n    (else (largest_smallest_integers\
    \ (cdr lst))))\n)\n", "  (cond\n    ((null? lst) #f)\n    ((< 0 (car lst)) (car\
    \ lst))\n    ((> 0 (car lst)) (cdr lst))\n    ((< 0 (car (cdr lst))) (car (cdr\
    \ lst)))\n    ((> 0 (car (cdr (cdr lst)))) (cdr (cdr lst)))\n    (else (car (cdr\
    \ (cdr (cdr lst)))))))\n\n;; Create a function that returns a list (a, b), where\
    \ 'a' is\n;; the largest of positive integers, and 'b' is the smallest\n;; of\
    \ negative integers in a list.\n;; If there is no positive or negative integers,\
    \ return them as #f.\n;; Examples:\n;; >>> (largest_smallest_integers (list 2\
    \ 4 1 3 5 7))\n;; (list 2 1)\n;; >>> (largest_smallest_integers (list ))\n;; (list\
    \ #f #f)\n;; >>> (largest_smallest_integers (list 0))\n;; (list #f #f)", "  (cond\n\
    \    [(null? lst) (return (list #f #f))]\n    [(negative? (first lst)) (return\
    \ (list (first lst) (first lst)))]\n    [(positive? (first lst)) (return (list\
    \ (first lst) (first lst)))]\n    [else (return (list (first lst) (first lst)))]\n\
    \  )\n)\n\n;; Create a function that returns the sum of the squares of\n;; the\
    \ integers in a list.\n;; Examples:\n;; >>> (sum_of_squares (list 1 2 3 4 5 6\
    \ 7 8 9 10))\n;; (list 1 25 36 49 64 81 100 121 144 169 196 225)\n;; >>> (sum_of_squares\
    \ (list ))\n;; (list 0 0 0 0 0 0 0 0 0 0 0)\n;; >>> (sum_of_squares (list 0))\n\
    ;; (list 0 0 0 0 0 0 0 0 0 0)", "  (cond\n    [(null? lst) (return (list #f #f))]\n\
    \    [(negative? (first lst)) (return (list (first lst) (first lst)))]\n    [(positive?\
    \ (first lst)) (return (list (first lst) (first lst)))]\n    [else (return (list\
    \ (first lst) (first lst)))]\n  )\n)\n\n;; Create a function that returns the\
    \ sum of the squares of\n;; the integers in a list.\n;; Examples:\n;; >>> (sum_of_squares\
    \ (list 1 2 3 4 5))\n;; 25\n;; >>> (sum_of_squares (list ))\n;; 0\n;; >>> (sum_of_squares\
    \ (list 1 2 3 4 5 6 7))\n;; 55\n;; >>> (sum_of_squares (list 1 2 3 4 5 6 7 8 9))\n\
    ;; 100\n;; >>> (sum_of_squares (list 1 2 3 4 5 6 7 8 9 10))\n;; 100\n;; >>> (sum_of_squares\
    \ (list 1 2 3 4 5 6 7 8 9 10 11))\n;; 110\n;; >>> (sum_of_squares (list 1 2 3\
    \ 4 5 6 7 8 9 10 11 12))\n;; 110\n;; >>> (sum_of_squares (list 1 2 3 4 5 6 7 8\
    \ 9 10 11 12 13))\n;; 120\n;; >>> (sum_of_squares (list 1 2 3 4 5 6 7 8 9 10 11\
    \ 12 13 14))\n;; 140\n;; >>> (sum_of_squares (list 1 2 3 4 5 6 7 8 9 10 11 12\
    \ 13 14 15))\n;; 140\n;; >>> (sum_of_squares (list 1 2 3 4 5 6 7 8 9 10 11 12\
    \ 13 14 15 16))\n;; 160\n;; >>> (sum_of_squares (list 1 2 3 4 5 6 7 8 9 10 11\
    \ 12 13 14 15 16 17))\n;; 160\n;; >>> (sum_of_squares (list 1 2 3 4 5 6 7 8 9\
    \ 10 11 12 13 14 15 16 17 18))\n;; 180\n;; >>> (sum_of_squares (list 1 2 3 4 5\
    \ 6 7 8 9 10 11 12 13 14 15 16 17 18 19))\n", "  (let ((lst (if (null? lst)\n\
    \                   (list #f #f)\n                   (list (car lst) (car lst)))))\n\
    \    (if (null? lst)\n        (list #f #f)\n        (let ((a (car lst)))\n   \
    \       (let ((b (car lst)))\n            (if (< a 0)\n                (car lst)\n\
    \                (if (< b 0)\n                    (car lst)\n                \
    \    (if (< a b)\n                        (car lst)\n                        (car\
    \ lst))))))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
