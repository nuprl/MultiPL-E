name: HumanEval_62_derivative
language: rkt
prompt: "#lang racket\n\n;; xs represent coefficients of a polynomial.\n;; xs[0] +\
  \ xs[1] * x + xs[2] * x^2 + ....\n;; Return derivative of this polynomial in the\
  \ same form.\n;; >>> (derivative (list 3 1 2 4 5))\n;; (list 1 4 12 20)\n;; >>>\
  \ (derivative (list 1 2 3))\n;; (list 2 6)\n(define (derivative xs)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate derivative))\n\
  \    (check-equal? (candidate (list 3 1 2 4 5)) (list 1 4 12 20))\n    (check-equal?\
  \ (candidate (list 1 2 3)) (list 2 6))\n    (check-equal? (candidate (list 3 2 1))\
  \ (list 2 2))\n    (check-equal? (candidate (list 3 2 1 0 4)) (list 2 2 0 16))\n\
  \    (check-equal? (candidate (list 1)) (list ))\n))\n\n(test-humaneval)"
completions: ["  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (list\
    \ (derivative (cdr xs))\n           (derivative (cdr (cdr xs)))))))\n", "  (if\
    \ (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n\t\
    \  (list (car xs) (* (cdr xs) (car xs)))\n\t  (list (car xs) (* (cdr xs) (cdr\
    \ xs)))))))\n", "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n\
    \      (if (> n 1)\n        (list (* (car xs) (cdr xs)))\n        (list (* (car\
    \ xs) (car (cdr xs))))))))\n", "  (if (null? xs)\n    (list 0)\n    (let ((n (length\
    \ xs)))\n      (if (= n 1)\n        (list)\n        (let ((derivative-n (derivative\
    \ (car xs))))\n          (let ((derivative-n-1 (derivative-n (cdr xs))))\n   \
    \         (cons (car xs) (derivative-n-1 (cdr xs))))))))\n", "  (if (null? xs)\n\
    \    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n        (list (*\
    \ (car xs) (cdr xs)))\n        (list (* (car xs) (car (cdr xs))))))))\n", "  (if\
    \ (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (>= n 1)\n\t\
    \  (list 1)\n\t  (let ((derivative-n (derivative (cdr xs))))\n\t    (let ((derivative-n-1\
    \ (derivative-n (car xs))))\n\t      (let ((derivative-n-2 (derivative-n-1 (cdr\
    \ xs))))\n\t\t(let ((derivative-n-3 (derivative-n-2 (car xs))))\n\t\t  (let ((derivative-n-4\
    \ (derivative-n-3 (cdr xs))))\n\t\t    (let ((derivative-n-5 (derivative-n-4 (car\
    \ xs))))\n\t\t      (let ((derivative-n-6 (derivative-n-5 (cdr xs))))\n\t\t\t\
    (let ((derivative-n-7 (derivative-n-6 (car xs))))\n\t\t\t  (let ((derivative-n-8\
    \ (derivative-n-7 (cdr xs))))\n\t\t\t    (let ((derivative-n-9 (derivative-n-8\
    \ (car xs))))\n\t\t\t      (let ((derivative-n-10 (derivative-n-9 (cdr xs))))\n\
    \t\t\t\t(let ((derivative-n-11 (derivative-n-10 (car xs))))\n\t\t\t\t  (let ((derivative-n-12\
    \ (derivative-n-11 (cdr xs))))\n\t\t\t\t    (let ((derivative-n-13 (derivative-n-12\
    \ (car xs))))\n\t\t\t\t      (let ((derivative-n-14 (derivative-n-13 (cdr xs))))\n\
    \t\t\t\t\t(let ((derivative-n-15 (derivative-n-14 (car xs))))\n\t\t\t\t\t  (let\
    \ ((derivative-n-16 (derivative-n-15 (cdr xs))))\n\t\t\t\t\t    (let ((derivative-n-17\
    \ (derivative-n-16 (car xs))))\n\t\t\t\t\t      (let", "  (if (null? xs)\n   \
    \ (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n        (list (* (car\
    \ xs) (cdr xs)))\n        (let ((p (car xs)))\n          (let ((q (cdr xs)))\n\
    \            (list (car p) (* (car q) (cdr q))))))))))\n", "  (if (null? xs)\n\
    \    (list 0)\n    (let ((n (length xs)))\n      (if (null? (cdr xs))\n      \
    \  (list (car xs))\n        (let ((derivative-of-xs (car xs)))\n          (if\
    \ (null? derivate-of-xs)\n            (list 0)\n            (let ((derivative-of-derivative-of-xs\
    \ (car derivate-of-xs)))\n              (if (null? derivative-of-derivative-of-xs)\n\
    \                (list 0)\n                (let ((derivative-of-derivative-of-derivative-of-xs\
    \ (car derivative-of-derivative-of-xs)))\n                  (if (null? derivative-of-derivative-of-derivative-of-xs)\n\
    \                    (list 0)\n                    (let ((derivative-of-derivative-of-derivative-of-derivative-of-xs\
    \ (car derivative-of-derivative-of-derivative-of-xs)))\n                     \
    \ (if (null? derivative-of-derivative-of-derivative-of-derivative-of-xs)\n   \
    \                     (list 0)\n                        (let ((derivative-of-derivative-of-derivative-of-derivative-of-derivative-of-xs\
    \ (car derivative-of-derivative-of-derivative-of-derivative-of-xs)))\n       \
    \                   (if (null? derivative-of-derivative-of-derivative-of-derivative-of-derivative-of-xs)\n\
    \                            (list 0)\n                            (let ((derivative-of-derivative-of-derivative-of-derivative-of-derivative-of-derivative-of-xs\
    \ (car derivative-of-derivative-of-derivative-of-derivative-of-xs)))\n       \
    \                       (if (null? derivative-of-derivative-of-derivative-of-derivative-of-derivative-of-derivative-of-xs)\n\
    \                                (", "  (if (null? xs)\n    (list 0)\n    (let\
    \ ((n (length xs)))\n      (if (> n 1)\n\t  (list)\n\t  (let ((derivative-n (derivative\
    \ (cdr xs))))\n\t    (if (null? derivate-n)\n\t      (list)\n\t      (let ((derivative-n-1\
    \ (derivative-n (car xs))))\n\t\t(if (null? derivative-n-1)\n\t\t  (list)\n\t\t\
    \  (cons (car xs) (derivative-n-1)))))\n\t    (cons (car xs) (derivative-n)))))\n\
    \  ))\n", "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if\
    \ (> n 1)\n        (list)\n        (let ((derivative-n (derivative (cdr xs))))\n\
    \          (let ((derivative-n-1 (derivative-n (car xs))))\n            (let ((derivative-n-2\
    \ (derivative-n-1 (cdr xs))))\n              (let ((derivative-n-3 (derivative-n-2\
    \ (car xs))))\n                (let ((derivative-n-4 (derivative-n-3 (cdr xs))))\n\
    \                  (let ((derivative-n-5 (derivative-n-4 (car xs))))\n       \
    \             (let ((derivative-n-6 (derivative-n-5 (cdr xs))))\n            \
    \          (let ((derivative-n-7 (derivative-n-6 (car xs))))\n               \
    \         (let ((derivative-n-8 (derivative-n-7 (cdr xs))))\n                \
    \          (let ((derivative-n-9 (derivative-n-8 (car xs))))\n               \
    \             (let ((derivative-n-10 (derivative-n-9 (cdr xs))))\n           \
    \                   (let ((derivative-n-11 (derivative-n-10 (car xs))))\n    \
    \                            (let ((derivative-n-12 (derivative-n-11 (cdr xs))))\n\
    \                                  (let ((derivative-n-13 (derivative-n-12 (car\
    \ xs))))\n                                    (let ((derivative-n-14 (derivative-n-13\
    \ (cdr xs))))\n                                      (let ((derivative-n-15 (derivative-n-14\
    \ (car xs))))\n                                        (let ((derivative-n-16\
    \ (derivative-n-15 (cdr xs))))\n                                          (let\
    \ ((derivative-n-17 (derivative-n-16 (car xs))))\n                           \
    \                 (let ((deriv", "  (if (null? xs)\n    (list 0)\n    (list (car\
    \ xs) + (cdr xs) * (car (cdr xs))))\n)\n\n;; xs represent coefficients of a polynomial.\n\
    ;; xs[0] + xs[1] * x + xs[2] * x^2 + ....\n;; Return derivative of this polynomial\
    \ in the same form.\n;; >>> (derivative (list 3 1 2 4 5))\n;; (list 1 4 12 20)\n\
    ;; >>> (derivative (list 1 2 3))\n;; (list 2 6)", "  (if (null? xs)\n    (list\
    \ 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n        (list (* (car xs)\
    \ (cdr xs)))\n        (let ((derivative-of-xs (cdr xs)))\n          (if (null?\
    \ derivative-of-xs)\n            (list 0)\n            (let ((n (length derivative-of-xs)))\n\
    \              (if (> n 1)\n                (list (* (car derivative-of-xs) (cdr\
    \ derivative-of-xs)))\n                (let ((derivative-of-derivative-of-xs (cdr\
    \ derivative-of-xs)))\n                  (if (null? derivative-of-derivative-of-xs)\n\
    \                    (list 0)\n                    (let ((n (length derivative-of-derivative-of-xs)))\n\
    \                      (if (> n 1)\n                        (list (* (car derivative-of-derivative-of-xs)\n\
    \                                (cdr derivative-of-derivative-of-xs)))\n    \
    \                    (let ((derivative-of-derivative-of-derivative-of-xs\n   \
    \                            (cdr derivative-of-derivative-of-xs)))\n        \
    \                  (if (null? derivative-of-derivative-of-derivative-of-xs)\n\
    \                            (list 0)\n                            (let ((n (length\
    \ derivative-of-derivative-of-derivative-of-xs)))\n                          \
    \    (if (> n 1)\n                                (list (* (car derivative-of-derivative-of-derivative-of-xs)\n\
    \                                        (cdr derivative-of-derivative-of-derivative-of-xs)))\n\
    \                                (let ((derivative-of-derivative-of-derivative-of-derivative-of-xs\n\
    \                                       (cdr derivative-of-derivative-of-derivative-of-xs)))\n\
    \                                  (if (null? derivative-of-derivative-of-derivative-of-derivative-of-xs)\n\
    \                                    (list 0)\n                              \
    \      (let ((n (length derivative-", "  (if (null? xs)\n    (list 0)\n    (let\
    \ ((n (length xs)))\n      (if (= n 1)\n        (list 1)\n        (let ((derivative-n\
    \ (derivative (cdr xs))))\n          (let ((derivative-n-1 (derivative-n (car\
    \ xs))))\n            (let ((derivative-n-2 (derivative-n-1 (cdr xs))))\n    \
    \          (let ((derivative-n-3 (derivative-n-2 (car xs))))\n               \
    \ (let ((derivative-n-4 (derivative-n-3 (cdr xs))))\n                  (let ((derivative-n-5\
    \ (derivative-n-4 (car xs))))\n                    (let ((derivative-n-6 (derivative-n-5\
    \ (cdr xs))))\n                      (let ((derivative-n-7 (derivative-n-6 (car\
    \ xs))))\n                        (let ((derivative-n-8 (derivative-n-7 (cdr xs))))\n\
    \                          (let ((derivative-n-9 (derivative-n-8 (car xs))))\n\
    \                            (let ((derivative-n-10 (derivative-n-9 (cdr xs))))\n\
    \                              (let ((derivative-n-11 (derivative-n-10 (car xs))))\n\
    \                                (let ((derivative-n-12 (derivative-n-11 (cdr\
    \ xs))))\n                                  (let ((derivative-n-13 (derivative-n-12\
    \ (car xs))))\n                                    (let ((derivative-n-14 (derivative-n-13\
    \ (cdr xs))))\n                                      (let ((derivative-n-15 (derivative-n-14\
    \ (car xs))))\n                                        (let ((derivative-n-16\
    \ (derivative-n-15 (cdr xs))))\n                                          (let\
    \ ((derivative-n-17 (derivative-n-16 (car xs))))\n                           \
    \                 (let ((der", "  (if (null? xs)\n    (list 0)\n    (let ((n (length\
    \ xs)))\n      (list (derivative (cdr xs))\n\t      (derivative (cdr (cdr xs)))))))\n",
  "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n\
    \        (list (car xs) (* (cdr xs) (car xs)))\n        (list (car xs) (* (cdr\
    \ xs) (cdr xs)))))\n  )\n)\n", "  (if (null? xs)\n    (list 0)\n    (let ((n (length\
    \ xs)))\n      (if (= n 1)\n        (list)\n        (let ((derivative-n (derivative\
    \ (car xs))))\n          (let ((rest (cdr xs)))\n            (cons (car xs) (derivative-n\
    \ (append (cdr xs) (cons 0 derivative-n)))))\n          (cons (car xs) (derivative-n\
    \ (append (cdr xs) (cons 1 derivative-n))))))))\n", "  (if (null? xs)\n    (list\
    \ 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n        (list (* (car xs)\
    \ (cdr xs)))\n        (let ((derivative-of-xs (cdr xs)))\n          (if (null?\
    \ derivative-of-xs)\n            (list 0)\n            (let ((derivative-of-n\
    \ (car derivative-of-xs)))\n              (if (> n 2)\n                (list (*\
    \ derivative-of-n (car derivative-of-xs)))\n                (list (* derivative-of-n\
    \ (car derivative-of-xs))\n                                  (* derivative-of-n\
    \ (cdr derivative-of-xs))))))))))\n", "  (if (null? xs)\n    (list 0)\n    (let\
    \ ((n (length xs)))\n      (if (> n 1)\n        (list (* (car xs) (cdr xs)))\n\
    \        (let ((derivative-n (derivative (cdr xs))))\n          (let ((derivative-n-1\
    \ (derivative-n (car xs))))\n            (if (null? derivative-n-1)\n        \
    \      (list 0)\n              (let ((n (length derivative-n-1)))\n          \
    \      (if (> n 1)\n                  (list (* derivative-n-1 (car derivative-n-1)))\n\
    \                  (let ((derivative-n-2 (derivative-n-1 (car derivative-n-1))))\n\
    \                    (if (null? derivative-n-2)\n                      (list 0)\n\
    \                      (let ((n (length derivative-n-2)))\n                  \
    \      (if (> n 1)\n                          (list (* derivative-n-2 (car derivative-n-2)))\n\
    \                          (let ((derivative-n-3 (derivative-n-2 (car derivative-n-2))))\n\
    \                            (if (null? derivative-n-3)\n                    \
    \          (list 0)\n                              (let ((n (length derivative-n-3)))\n\
    \                                (if (> n 1)\n                               \
    \   (list (* derivative-n-3 (car derivative-n-3)))\n                         \
    \         (let ((derivative-n-4 (derivative-n-3 (car derivative-n-3))))\n    \
    \                                (if (null? derivative-n-4)\n                \
    \                      (list 0)\n                                      (let ((n\
    \ (length derivative-n-4)))\n                                        (if (> n\
    \ 1)\n                                          (list (* derivative-n-4 (car derivative-n-4)))\n\
    \                                          (let ((derivative-n-5 (derivative-n-4\
    \ (car derivative-n-4))))\n                                            (if (null?\
    \ derivative-n-5)\n                                              (list 0)\n  \
    \                                            (let ((n (length derivative-n-5)))\n\
    \                                                (if (>", "  (if (null? xs)\n\
    \    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n        (list (*\
    \ (car xs) (cdr xs)))\n        (list (* (car xs) (car (cdr xs))))))))\n", "  (if\
    \ (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n  \
    \      (list (* (car xs) (cdr xs)))\n        (list (* (car xs) (car (cdr xs))))))))\n",
  "  (if (null? xs)\n    (list 0)\n    (list (car xs) + (cdr xs) * (car (cdr xs))))\n\
    )\n\n;; xs represent coefficients of a polynomial.\n;; xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n;; Return derivative of this polynomial in the same form.\n;;\
    \ >>> (derivative (list 3 1 2 4 5))\n;; (list 1 4 12 20)\n;; >>> (derivative (list\
    \ 1 2 3))\n;; (list 2 6)", "  (if (null? xs)\n    (list 0)\n    (let ((n (length\
    \ xs)))\n      (if (> n 1)\n\t  (list (* (car xs) (cdr xs)))\n\t  (let ((derivative-of-xs\
    \ (cdr xs)))\n\t    (if (null? derivative-of-xs)\n\t      (list 0)\n\t      (let\
    \ ((n (length derivative-of-xs)))\n\t\t(if (> n 1)\n\t\t  (list (* (car derivative-of-xs)\
    \ (cdr derivative-of-xs)))\n\t\t  (let ((derivative-of-derivative-of-xs (cdr derivative-of-xs)))\n\
    \t\t    (if (null? derivative-of-derivative-of-xs)\n\t\t      (list 0)\n\t\t \
    \     (let ((n (length derivative-of-derivative-of-xs)))\n\t\t\t(if (> n 1)\n\t\
    \t\t  (list (* (car derivative-of-derivative-of-xs)\n\t\t\t\t  (cdr derivative-of-derivative-of-xs))))))))))))))))))\n",
  "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (= n 1)\n\
    \        (list)\n        (let ((derivative-n (derivative (cdr xs))))\n       \
    \   (let ((derivative-n-1 (derivative-n (car xs))))\n            (let ((derivative-n-2\
    \ (derivative-n-1 (cdr xs))))\n              (let ((derivative-n-3 (derivative-n-2\
    \ (car xs))))\n                (let ((derivative-n-4 (derivative-n-3 (cdr xs))))\n\
    \                  (let ((derivative-n-5 (derivative-n-4 (car xs))))\n       \
    \             (let ((derivative-n-6 (derivative-n-5 (cdr xs))))\n            \
    \          (let ((derivative-n-7 (derivative-n-6 (car xs))))\n               \
    \         (let ((derivative-n-8 (derivative-n-7 (cdr xs))))\n                \
    \          (let ((derivative-n-9 (derivative-n-8 (car xs))))\n               \
    \             (let ((derivative-n-10 (derivative-n-9 (cdr xs))))\n           \
    \                   (let ((derivative-n-11 (derivative-n-10 (car xs))))\n    \
    \                            (let ((derivative-n-12 (derivative-n-11 (cdr xs))))\n\
    \                                  (let ((derivative-n-13 (derivative-n-12 (car\
    \ xs))))\n                                    (let ((derivative-n-14 (derivative-n-13\
    \ (cdr xs))))\n                                      (let ((derivative-n-15 (derivative-n-14\
    \ (car xs))))\n                                        (let ((derivative-n-16\
    \ (derivative-n-15 (cdr xs))))\n                                          (let\
    \ ((derivative-n-17 (derivative-n-16 (car xs))))\n                           \
    \                 (let ((deriv", "  (if (null? xs)\n    (list 0)\n    (let ((n\
    \ (length xs)))\n      (if (> n 1)\n\t  (list)\n\t  (let ((derivative (make-vector\
    \ n -1)))\n\t    (let ((i 0))\n\t      (while (< i n)\n\t\t(set! derivative (vector-set!\
    \ derivativative i (- (vector-ref xs i) (vector-ref xs (1+i)))))\n\t\t(set! i\
    \ (1+i))))\n\t    (vector-set! derivativative n (- (vector-ref xs n) (vector-ref\
    \ xs (1+n))))))))\n", "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n\
    \      (if (= n 1)\n        (list)\n        (let ((derivative (make-vector n -1)))\n\
    \          (let ((i 0))\n            (do ((i (+ i 1)))\n              ((< i n))\n\
    \              (setf (vector-ref derivative i)\n                (vector-ref xs\
    \ i)))\n            derivative)))))\n)\n", "  (if (null? xs)\n    (list 0)\n \
    \   (let ((n (length xs)))\n      (if (> n 1)\n        (list)\n        (let ((derivative\
    \ (make-vector n -1)))\n          (let ((i 0))\n            (do ((i (+ i 1)))\n\
    \              ((< i n))\n              (setf (vector-ref derivative i)\n    \
    \            (vector-ref xs i))\n              (setf (vector-ref derivative i)\n\
    \                (vector-ref derivative i))\n              (setf (vector-ref derivative\
    \ i)\n                (vector-ref derivative i))\n              (setf (vector-ref\
    \ derivative i)\n                (vector-ref derivative i))\n              (setf\
    \ (vector-ref derivative i)\n                (vector-ref derivative i))\n    \
    \          (setf (vector-ref derivative i)\n                (vector-ref derivative\
    \ i))\n              (setf (vector-ref derivative i)\n                (vector-ref\
    \ derivative i))\n              (setf (vector-ref derivative i)\n            \
    \    (vector-ref derivative i))\n              (setf (vector-ref derivative i)\n\
    \                (vector-ref derivative i))\n              (setf (vector-ref derivative\
    \ i)\n                (vector-ref derivative i))\n              (setf (vector-ref\
    \ derivative i)\n                (vector-ref derivative i))\n              (setf\
    \ (vector-ref derivative i)\n                (vector-ref derivative i))\n    \
    \          (setf (vector-ref derivative i)\n                (vector-ref derivative\
    \ i))\n              (setf (vector-ref derivative i)\n                (vector-ref\
    \ derivative i))\n              (setf (vector-ref derivative i)\n            \
    \    (vector-ref derivative i))\n              (setf (vector-ref derivative i)\n\
    \                (vector-ref derivative i))\n              (setf (vector-ref derivative\
    \ i)\n                (vector-ref derivative i))\n              (setf (vector-ref\
    \ derivative i)\n                (vector-ref derivative i))\n              (setf\
    \ (vector-ref derivative i)\n                (vector-ref derivative i))\n    \
    \          (setf (vector-ref derivative i)\n                (vector-ref derivative\
    \ i))\n              (setf (vector-ref derivative i", "  (if (null? xs)\n    (list\
    \ 0)\n    (list (car xs) + (cdr xs) * (car (cdr xs))))\n)\n\n;; xs represent coefficients\
    \ of a polynomial.\n;; xs[0] + xs[1] * x + xs[2] * x^2 + ....\n;; Return derivative\
    \ of this polynomial in the same form.\n;; >>> (derivative (list 3 1 2 4 5))\n\
    ;; (list 1 4 12 20)\n;; >>> (derivative (list 1 2 3))\n;; (list 2 6)", "  (if\
    \ (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n\t\
    \  (list)\n\t  (let ((derivative-n (derivative (cdr xs))))\n\t    (let ((derivative-n-1\
    \ (derivative-n (car xs))))\n\t      (let ((derivative-n-2 (derivative-n-1 (cdr\
    \ xs))))\n\t\t(let ((derivative-n-3 (derivative-n-2 (car xs))))\n\t\t  (let ((derivative-n-4\
    \ (derivative-n-3 (cdr xs))))\n\t\t    (let ((derivative-n-5 (derivative-n-4 (car\
    \ xs))))\n\t\t      (let ((derivative-n-6 (derivative-n-5 (cdr xs))))\n\t\t\t\
    (let ((derivative-n-7 (derivative-n-6 (car xs))))\n\t\t\t  (let ((derivative-n-8\
    \ (derivative-n-7 (cdr xs))))\n\t\t\t    (let ((derivative-n-9 (derivative-n-8\
    \ (car xs))))\n\t\t\t      (let ((derivative-n-10 (derivative-n-9 (cdr xs))))\n\
    \t\t\t\t(let ((derivative-n-11 (derivative-n-10 (car xs))))\n\t\t\t\t  (let ((derivative-n-12\
    \ (derivative-n-11 (cdr xs))))\n\t\t\t\t    (let ((derivative-n-13 (derivative-n-12\
    \ (car xs))))\n\t\t\t\t      (let ((derivative-n-14 (derivative-n-13 (cdr xs))))\n\
    \t\t\t\t\t(let ((derivative-n-15 (derivative-n-14 (car xs))))\n\t\t\t\t\t  (let\
    \ ((derivative-n-16 (derivative-n-15 (cdr xs))))\n\t\t\t\t\t    (let ((derivative-n-17\
    \ (derivative-n-16 (car xs))))\n\t\t\t\t\t      (let ((der", "  (if (null? xs)\n\
    \    (list 0)\n    (let ((n (length xs)))\n      (list (if (= n 1)\n         \
    \     (+ (car xs) (cdr xs))\n              (+ (car xs) (* (cdr xs) (car (cdr xs)))))))))\n",
  "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n\
    \        (list)\n        (let ((i n))\n          (list (derivative (cdr xs)))))\n\
    \      (let ((i n))\n        (list (derivative (car xs)))))\n    ))\n", "  (if\
    \ (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (>= n 1)\n \
    \       (list 1)\n        (let ((derivative-n (derivative (cdr xs))))\n      \
    \    (let ((derivative-n-1 (derivative-n (car xs))))\n            (let ((derivative-n-2\
    \ (derivative-n-1 (cdr xs))))\n              (let ((derivative-n-3 (derivative-n-2\
    \ (car xs))))\n                (let ((derivative-n-4 (derivative-n-3 (cdr xs))))\n\
    \                  (let ((derivative-n-5 (derivative-n-4 (car xs))))\n       \
    \             (let ((derivative-n-6 (derivative-n-5 (cdr xs))))\n            \
    \          (let ((derivative-n-7 (derivative-n-6 (car xs))))\n               \
    \         (let ((derivative-n-8 (derivative-n-7 (cdr xs))))\n                \
    \          (let ((derivative-n-9 (derivative-n-8 (car xs))))\n               \
    \             (let ((derivative-n-10 (derivative-n-9 (cdr xs))))\n           \
    \                   (let ((derivative-n-11 (derivative-n-10 (car xs))))\n    \
    \                            (let ((derivative-n-12 (derivative-n-11 (cdr xs))))\n\
    \                                  (let ((derivative-n-13 (derivative-n-12 (car\
    \ xs))))\n                                    (let ((derivative-n-14 (derivative-n-13\
    \ (cdr xs))))\n                                      (let ((derivative-n-15 (derivative-n-14\
    \ (car xs))))\n                                        (let ((derivative-n-16\
    \ (derivative-n-15 (cdr xs))))\n                                          (let\
    \ ((derivative-n-17 (derivative-n-16 (car xs))))\n                           \
    \                 (let ((", "  (if (null? xs)\n    (list 0)\n    (list (car xs)\
    \ + (cdr xs) * (car (cdr xs))))\n)\n\n;; xs represent coefficients of a polynomial.\n\
    ;; xs[0] + xs[1] * x + xs[2] * x^2 + ....\n;; Return derivative of this polynomial\
    \ in the same form.\n;; >>> (derivative (list 3 1 2 4 5))\n;; (list 1 4 12 20)\n\
    ;; >>> (derivative (list 1 2 3))\n;; (list 2 6)", "  (if (null? xs)\n    (list\
    \ 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n\t  (let ((derivative-n (derivative\
    \ (cdr xs))))\n\t    (let ((derivative-n-1 (derivative-n (car xs))))\n\t     \
    \ (list (car xs) (derivative-n-1) (derivative-n-1) (derivative-n) (derivative-n))))\n\
    \t  (let ((derivative-n-2 (derivative-n-1 (cdr xs))))\n\t    (list (car xs) (derivative-n-2)\
    \ (derivative-n-1) (derivative-n) (derivative-n-1) (derivative-n-2)))))))\n)\n",
  "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n\
    \        (list)\n        (let ((der (derivative (cdr xs))))\n          (let ((der_n\
    \ (car xs)))\n            (if (null? der)\n              (list der_n)\n      \
    \        (let ((der_n_n (car der_n)))\n                (if (null? der_n_n)\n \
    \                 (list der_n_n)\n                  (let ((der_n_n_n (car der_n_n)))\n\
    \                    (if (null? der_n_n_n)\n                      (list der_n_n_n)\n\
    \                      (let ((der_n_n_n_n (car der_n_n_n)))\n                \
    \        (if (null? der_n_n_n_n)\n                          (list der_n_n_n_n)\n\
    \                          (let ((der_n_n_n_n_n (car der_n_n_n_n)))\n        \
    \                    (if (null? der_n_n_n_n_n)\n                             \
    \ (list der_n_n_n_n_n)\n                              (let ((der_n_n_n_n_n_n (car\
    \ der_n_n_n_n_n)))\n                                (if (null? der_n_n_n_n_n_n)\n\
    \                                  (list der_n_n_n_n_n_n)\n                  \
    \                (let ((der_n_n_n_n_n_n_n (car der_n_n_n_n_n_n)))\n          \
    \                          (if (null? der_n_n_n_n_n_n_n)\n                   \
    \                   (list der_n_n_n_n_n_n_n)\n                               \
    \       (list der_n_n_n_n_n_n_n))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
  "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n\
    \t  (list (* (car xs) (cdr xs)))\n\t  (list (* (car xs) (car (cdr xs))))))))\n",
  "  (if (null? xs)\n    (list 0)\n    (list (car xs) + (cdr xs) * (car (cdr xs))))\n\
    )\n\n;; xs represent coefficients of a polynomial.\n;; xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n;; Return derivative of this polynomial in the same form.\n;;\
    \ >>> (derivative (list 3 1 2 4 5))\n;; (list 1 4 12 20)\n;; >>> (derivative (list\
    \ 1 2 3))\n;; (list 2 6)", "  (if (null? xs)\n    (list 0)\n    (let ((n (length\
    \ xs)))\n      (if (> n 1)\n        (list (* n (car xs)))\n        (let ((derivative-n\
    \ (derivative (cdr xs))))\n          (if (> n 2)\n            (list (car xs) (*\
    \ n (car derivate-n)))\n            (list (car xs) (* n (car (cdr derivate-n))))))))))\n",
  "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n\
    \        (list)\n        (let ((derivative-n (derivative (cdr xs))))\n       \
    \   (let ((derivative-n-1 (derivative-n (car xs))))\n            (list (car xs)\
    \ (derivative-n-1) (derivative-n-1) (derivative-n)\n                         (derivative-n)\
    \ (derivative-n-1) (derivative-n-1)\n                         (derivative-n-1)\
    \ (derivative-n-1) (derivative-n-1))))))))))\n", "  (if (null? xs)\n    (list\
    \ 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n        (list (* (car xs)\
    \ (cdr xs)))\n        (let ((derivative-of-xs (cdr xs)))\n          (if (null?\
    \ derivative-of-xs)\n            (list 0)\n            (let ((n (length derivative-of-xs)))\n\
    \              (if (> n 1)\n                (list (* (car derivative-of-xs) (cdr\
    \ derivative-of-xs)))\n                (let ((derivative-of-derivative-of-xs (cdr\
    \ derivative-of-xs)))\n                  (if (null? derivative-of-derivative-of-xs)\n\
    \                    (list 0)\n                    (let ((n (length derivative-of-derivative-of-xs)))\n\
    \                      (if (> n 1)\n                        (list (* (car derivative-of-derivative-of-xs)\n\
    \                                (cdr derivative-of-derivative-of-xs))))))))))))))))))\n",
  "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (= n 1)\n\
    \        (list)\n        (let ((derivative (make-vector n -1)))\n          (let\
    \ ((i 0))\n            (do ((i (+ i 1)))\n              ((< i n))\n          \
    \    (setf (vector-ref derivative i)\n                (vector-ref xs i))\n   \
    \           (setf (vector-ref derivative i)\n                (vector-ref derivative\
    \ i))\n              (setf (vector-ref derivative i)\n                (vector-ref\
    \ derivative i))\n              (setf (vector-ref derivative i)\n            \
    \    (vector-ref derivative i))\n              (setf (vector-ref derivative i)\n\
    \                (vector-ref derivative i))\n              (setf (vector-ref derivative\
    \ i)\n                (vector-ref derivative i))\n              (setf (vector-ref\
    \ derivative i)\n                (vector-ref derivative i))\n              (setf\
    \ (vector-ref derivative i)\n                (vector-ref derivative i))\n    \
    \          (setf (vector-ref derivative i)\n                (vector-ref derivative\
    \ i))\n              (setf (vector-ref derivative i)\n                (vector-ref\
    \ derivative i))\n              (setf (vector-ref derivative i)\n            \
    \    (vector-ref derivative i))\n              (setf (vector-ref derivative i)\n\
    \                (vector-ref derivative i))\n              (setf (vector-ref derivative\
    \ i)\n                (vector-ref derivative i))\n              (setf (vector-ref\
    \ derivative i)\n                (vector-ref derivative i))\n              (setf\
    \ (vector-ref derivative i)\n                (vector-ref derivative i))\n    \
    \          (setf (vector-ref derivative i)\n                (vector-ref derivative\
    \ i))\n              (setf (vector-ref derivative i)\n                (vector-ref\
    \ derivative i))\n              (setf (vector-ref derivative i)\n            \
    \    (vector-ref derivative i))\n              (setf (vector-ref derivative i)\n\
    \                (vector-ref derivative i))\n              (setf (vector-ref derivative\
    \ i)\n                (vector-ref derivative i))\n              (setf (vector-ref\
    \ derivative i", "  (if (null? xs)\n    (list 0)\n    (list (car xs) + (cdr xs)\
    \ * (car (cdr xs))))\n)\n\n;; xs represent coefficients of a polynomial.\n;; xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n;; Return derivative of this polynomial in\
    \ the same form.\n;; >>> (derivative (list 3 1 2 4 5))\n;; (list 1 4 12 20)\n\
    ;; >>> (derivative (list 1 2 3))\n;; (list 2 6)", "  (if (null? xs)\n    (list\
    \ 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n        (list (* (car xs)\
    \ (cdr xs)))\n        (list (* (car xs) (car (cdr xs))))))))\n", "  (if (null?\
    \ xs)\n    (list)\n    (let ((n (length xs)))\n      (if (> n 1)\n        (list)\n\
    \        (let ((i (1)))\n          (if (> i n)\n            (list)\n         \
    \   (let ((j (1)))\n              (if (> j n)\n                (list)\n      \
    \          (let ((k (1)))\n                  (if (> k n)\n                   \
    \ (list)\n                    (let ((l (1)))\n                      (if (> l n)\n\
    \                        (list)\n                        (let ((m (1)))\n    \
    \                      (if (> m n)\n                            (list)\n     \
    \                       (let ((n (1)))\n                              (if (> n\
    \ n)\n                                (list)\n                               \
    \ (let ((o (1)))\n                                  (if (> o n)\n            \
    \                        (list)\n                                    (let ((p\
    \ (1)))\n                                      (if (> p n)\n                 \
    \                       (list)\n                                        (let ((q\
    \ (1)))\n                                          (if (> q n)\n             \
    \                               (list)\n                                     \
    \       (let ((r (1)))\n                                              (if (> r\
    \ n)\n                                                (list)\n               \
    \                                 (let ((s (1)))\n                           \
    \                       (if (> s n)\n                                        \
    \            (list)\n                                                    (let\
    \ ((t (1)))\n                                                      (if (> t n)\n\
    \                                                        (list)\n            \
    \                                            (let ((u (1)))\n                \
    \                                         (if (> u n)\n                      \
    \                                     (list)\n                               \
    \                            (let ((v (1)))\n                                \
    \                            (if (> v n)\n                                   \
    \                           (list)\n                                         \
    \                     (let ((w (1)))\n                                       \
    \                         (if (> w n)\n                                      \
    \                            (list)\n                                        \
    \                          (let ((x (1)))\n                                  \
    \                                  (if (> x n)\n                             \
    \                                         (list)\n                           \
    \                                           (let ((", "  (if (null? xs)\n    (list\
    \ 0)\n    (let ((n (length xs)))\n      (if (= n 1)\n        (list)\n        (let\
    \ ((derivative (make-vector n -1)))\n          (let ((i 0))\n            (do ((i\
    \ (+ i 1)))\n              ((< i n))\n              (setf (vector-ref derivative\
    \ i)\n                 (vector-ref xs i))\n              (setf (vector-ref derivative\
    \ i)\n                 (vector-ref derivative i))\n              (setf (vector-ref\
    \ derivative i)\n                 (vector-ref derivative i))\n              (setf\
    \ (vector-ref derivative i)\n                 (vector-ref derivative i))\n   \
    \           (setf (vector-ref derivative i)\n                 (vector-ref derivative\
    \ i))\n              (setf (vector-ref derivative i)\n                 (vector-ref\
    \ derivative i))\n              (setf (vector-ref derivative i)\n            \
    \     (vector-ref derivative i))\n              (setf (vector-ref derivative i)\n\
    \                 (vector-ref derivative i))\n              (setf (vector-ref\
    \ derivative i)\n                 (vector-ref derivative i))\n              (setf\
    \ (vector-ref derivative i)\n                 (vector-ref derivative i))\n   \
    \           (setf (vector-ref derivative i)\n                 (vector-ref derivative\
    \ i))\n              (setf (vector-ref derivative i)\n                 (vector-ref\
    \ derivative i))\n              (setf (vector-ref derivative i)\n            \
    \     (vector-ref derivative i))\n              (setf (vector-ref derivative i)\n\
    \                 (vector-ref derivative i))\n              (setf (vector-ref\
    \ derivative i)\n                 (vector-ref derivative i))\n              (setf\
    \ (vector-ref derivative i)\n                 (vector-ref derivative i))\n   \
    \           (setf (vector-ref derivative i)\n                 (vector-ref derivative\
    \ i))\n              (setf (vector-ref derivative i)\n                 (vector-ref\
    \ derivative i))\n              (setf (vector-ref derivative i)\n            \
    \     (vector-ref derivative i))\n              (setf (vector-ref derivative i)\n\
    \                 (vector-ref derivative i))\n              (setf (vector-ref\
    \ derivative i", "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n\
    \      (if (> n 1)\n        (list (* (car xs) (cdr xs)))\n        (list (* (car\
    \ xs) (car (cdr xs))))))))\n", "  (if (null? xs)\n    (list 0)\n    (let ((n (length\
    \ xs)))\n      (if (> n 1)\n        (list)\n        (let ((derivative-n (derivative\
    \ (cdr xs))))\n          (let ((derivative-n-1 (derivative-n (car xs))))\n   \
    \         (cons (car xs) (derivative-n-1 (cdr xs))))))))\n", "  (if (null? xs)\n\
    \    (list 0)\n    (list (car xs) + (cdr xs) * (car (cdr xs))))\n)\n\n;; xs represent\
    \ coefficients of a polynomial.\n;; xs[0] + xs[1] * x + xs[2] * x^2 + ....\n;;\
    \ Return derivative of this polynomial in the same form.\n;; >>> (derivative (list\
    \ 3 1 2 4 5))\n;; (list 1 4 12 20)\n;; >>> (derivative (list 1 2 3))\n;; (list\
    \ 2 6)", "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if\
    \ (> n 1)\n        (list (* n (car xs)))\n        (let ((derivative-of-xs (cdr\
    \ xs)))\n          (if (null? derivative-of-xs)\n            (list 0)\n      \
    \      (let ((n (length derivative-of-xs)))\n              (if (> n 1)\n     \
    \           (list (* n (car derivative-of-xs)))\n                (let ((derivative-of-derivative-of-xs\
    \ (cdr derivative-of-xs)))\n                  (if (null? derivative-of-derivative-of-xs)\n\
    \                    (list 0)\n                    (let ((n (length derivative-of-derivative-of-xs)))\n\
    \                      (if (> n 1)\n                        (list (* n (car derivative-of-derivative-of-xs)))\n\
    \                        (let ((derivative-of-derivative-of-derivative-of-xs (cdr\
    \ derivative-of-derivative-of-xs)))\n                          (if (null? derivative-of-derivative-of-derivative-of-xs)\n\
    \                            (list 0)\n                            (let ((n (length\
    \ derivative-of-derivative-of-derivative-of-xs)))\n                          \
    \    (if (> n 1)\n                                (list (* n (car derivative-of-derivative-of-derivative-of-xs)))\n\
    \                                (let ((derivative-of-derivative-of-derivative-of-derivative-of-xs\
    \ (cdr derivative-of-derivative-of-derivative-of-xs)))\n                     \
    \             (if (null? derivative-of-derivative-of-derivative-of-derivative-of-xs)\n\
    \                                    (list 0)\n                              \
    \      (let ((n (length derivative-of-derivative-of-derivative-of-derivative-of-xs)))\n\
    \                                      (if (> n 1)\n                         \
    \               (list (* n (car derivative-of-derivative-of-derivative-of-der",
  "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (>= n 1)\n\
    \        (list)\n        (let ((derivative-n (derivative (cdr xs))))\n       \
    \   (let ((derivative-n-1 (derivative-n (car xs))))\n            (list (car xs)\
    \ (derivative-n-1) (derivative-n-1) (derivative-n) (derivative-n))))))))\n", " \
    \ (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n\
    \        (list (* (car xs) (cdr xs)))\n        (list (* (car xs) (car (cdr xs))))))))\n",
  "  (if (null? xs)\n    (list 0)\n    (list (car xs) + (cdr xs) * (car (cdr xs))))\n\
    )\n\n;; xs represent coefficients of a polynomial.\n;; xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n;; Return derivative of this polynomial in the same form.\n;;\
    \ >>> (derivative (list 3 1 2 4 5))\n;; (list 1 4 12 20)\n;; >>> (derivative (list\
    \ 1 2 3))\n;; (list 2 6)", "  (if (null? xs)\n    (list 0)\n    (list (car xs)\
    \ + (cdr xs) * (car (cdr xs))))\n)\n", "  (if (null? xs)\n    (list 0)\n    (let\
    \ ((n (length xs)))\n      (if (> n 1)\n\t  (list)\n\t  (let ((derivative-n (derivative\
    \ (cdr xs))))\n\t    (let ((derivative-n-1 (derivative-n (car xs))))\n\t     \
    \ (let ((derivative-n-2 (derivative-n-1 (cdr xs))))\n\t\t(let ((derivative-n-3\
    \ (derivative-n-2 (car xs))))\n\t\t  (let ((derivative-n-4 (derivative-n-3 (cdr\
    \ xs))))\n\t\t    (let ((derivative-n-5 (derivative-n-4 (car xs))))\n\t\t    \
    \  (let ((derivative-n-6 (derivative-n-5 (cdr xs))))\n\t\t\t(let ((derivative-n-7\
    \ (derivative-n-6 (car xs))))\n\t\t\t  (let ((derivative-n-8 (derivative-n-7 (cdr\
    \ xs))))\n\t\t\t    (let ((derivative-n-9 (derivative-n-8 (car xs))))\n\t\t\t\
    \      (let ((derivative-n-10 (derivative-n-9 (cdr xs))))\n\t\t\t\t(let ((derivative-n-11\
    \ (derivative-n-10 (car xs))))\n\t\t\t\t  (let ((derivative-n-12 (derivative-n-11\
    \ (cdr xs))))\n\t\t\t\t    (let ((derivative-n-13 (derivative-n-12 (car xs))))\n\
    \t\t\t\t      (let ((derivative-n-14 (derivative-n-13 (cdr xs))))\n\t\t\t\t\t\
    (let ((derivative-n-15 (derivative-n-14 (car xs))))\n\t\t\t\t\t  (let ((derivative-n-16\
    \ (derivative-n-15 (cdr xs))))\n\t\t\t\t\t    (let ((derivative-n-17 (derivative-n-16\
    \ (car xs))))\n\t\t\t\t\t      (let ((der", "  (if (null? xs)\n    (list)\n  \
    \  (let ((n (length xs)))\n      (if (zero? n)\n        (list)\n        (let ((i\
    \ 0))\n          (if (zero? i)\n            (list)\n            (let ((j 0))\n\
    \              (if (zero? j)\n                (list)\n                (let ((k\
    \ 0))\n                  (if (zero? k)\n                    (list)\n         \
    \           (let ((l 0))\n                      (if (zero? l)\n              \
    \          (list)\n                        (let ((m 0))\n                    \
    \      (if (zero? m)\n                            (list)\n                   \
    \         (let ((n 0))\n                              (if (zero? n)\n        \
    \                        (list)\n                                (let ((o 0))\n\
    \                                  (if (zero? o)\n                           \
    \         (list)\n                                    (let ((p 0))\n         \
    \                             (if (zero? p)\n                                \
    \        (list)\n                                        (let ((q 0))\n      \
    \                                    (if (zero? q)\n                         \
    \                   (list)\n                                            (let ((r\
    \ 0))\n                                              (if (zero? r)\n         \
    \                                       (list)\n                             \
    \                   (let ((s 0))\n                                           \
    \       (if (zero? s)\n                                                    (list)\n\
    \                                                    (let ((t 0))\n          \
    \                                            (if (zero? t)\n                 \
    \                                       (list)\n                             \
    \                           (let ((u 0))\n                                   \
    \                      (if (zero? u)\n                                       \
    \                    (list)\n                                                \
    \           (let ((v 0))\n                                                   \
    \         (if (zero? v)\n                                                    \
    \          (list)\n                                                          \
    \    (let ((w 0))\n                                                          \
    \      (if (zero? w)\n                                                       \
    \           (list)\n                                                         \
    \         (let ((x 0))\n                                                     \
    \               (if (zero? x)\n                                              \
    \                        (list)\n                                            \
    \                          (let", "  (if (null? xs)\n    (list 0)\n    (list (car\
    \ xs) + (cdr xs) * (car (cdr xs))))\n)\n", "  (if (null? xs)\n    (list 0)\n \
    \   (let ((n (length xs)))\n      (if (= n 1)\n        (list)\n        (let ((derivative\
    \ (make-vector n -1)))\n          (let ((i 0))\n            (do ((i (+ i 1)))\n\
    \              ((< i n))\n              (setf (vector-ref derivative i)\n    \
    \             (vector-ref xs i))\n              (setf (vector-ref derivative i)\n\
    \                 (vector-ref derivative i))\n              (setf (vector-ref\
    \ derivative i)\n                 (vector-ref derivative i))\n              (setf\
    \ (vector-ref derivative i)\n                 (vector-ref derivative i))\n   \
    \           (setf (vector-ref derivative i)\n                 (vector-ref derivative\
    \ i))\n              (setf (vector-ref derivative i)\n                 (vector-ref\
    \ derivative i))\n              (setf (vector-ref derivative i)\n            \
    \     (vector-ref derivative i))\n              (setf (vector-ref derivative i)\n\
    \                 (vector-ref derivative i))\n              (setf (vector-ref\
    \ derivative i)\n                 (vector-ref derivative i))\n              (setf\
    \ (vector-ref derivative i)\n                 (vector-ref derivative i))\n   \
    \           (setf (vector-ref derivative i)\n                 (vector-ref derivative\
    \ i))\n              (setf (vector-ref derivative i)\n                 (vector-ref\
    \ derivative i))\n              (setf (vector-ref derivative i)\n            \
    \     (vector-ref derivative i))\n              (setf (vector-ref derivative i)\n\
    \                 (vector-ref derivative i))\n              (setf (vector-ref\
    \ derivative i)\n                 (vector-ref derivative i))\n              (setf\
    \ (vector-ref derivative i)\n                 (vector-ref derivative i))\n   \
    \           (setf (vector-ref derivative i)\n                 (vector-ref derivative\
    \ i))\n              (setf (vector-ref derivative i)\n                 (vector-ref\
    \ derivative i))\n              (setf (vector-ref derivative i)\n            \
    \     (vector-ref derivative i))\n              (setf (vector-ref derivative i)\n\
    \                 (vector-ref derivative i))\n              (setf (vector-ref\
    \ derivative i", "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n\
    \      (if (zero? n)\n        (list 0)\n        (let ((derivative (make-vector\
    \ n -1 0)))\n          (let ((i 0))\n            (while (< i n)\n            \
    \  (set! derivative (vector-set! derivative i (- (vector-ref xs i) (vector-ref\
    \ xs (1+i)))))\n              (set! i (1+i)))\n            derivative))))))\n",
  "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n\
    \        (list (* (car xs) (cdr xs)))\n        (let ((i (1)))\n          (if (>\
    \ i n)\n            (list 0)\n            (let ((der (derivative (cdr xs))))\n\
    \              (let ((d (car xs)))\n                (list (car der)\n        \
    \             (* (car d) (car (cdr xs)))\n                     (* (car (cdr d))\
    \ (car (cdr xs))))))))))))))\n", "  (if (null? xs)\n    (list 0)\n    (let ((n\
    \ (length xs)))\n      (if (> n 1)\n        (list (* (car xs) (cdr xs)))\n   \
    \     (let ((i 0))\n          (if (> i n - 1)\n            (list (car xs) (* (car\
    \ xs) (cdr xs)))\n            (let ((j 0))\n              (if (> j n - 2)\n  \
    \              (list (car xs) (* (car xs) (cdr xs)))\n                (let ((k\
    \ 0))\n                  (if (> k n - 3)\n                    (list (car xs) (*\
    \ (car xs) (cdr xs)))\n                    (let ((l 0))\n                    \
    \  (if (> l n - 4)\n                        (list (car xs) (* (car xs) (cdr xs)))\n\
    \                        (let ((m 0))\n                          (if (> m n -\
    \ 5)\n                            (list (car xs) (* (car xs) (cdr xs)))\n    \
    \                        (let ((n (- n 1))))\n                            (list\
    \ (car xs) (* (car xs) (cdr xs)))\n                          )\n             \
    \           )\n                      )\n                    )\n              \
    \    )\n                )\n              )\n            )\n          )\n     \
    \   )\n      )\n    )\n  )\n)\n", "  (if (null? xs)\n    (list)\n    (list (car\
    \ xs) (cdr xs))))\n\n;; xs represent coefficients of a polynomial.\n;; xs[0] +\
    \ xs[1] * x + xs[2] * x^2 + ....\n;; Return derivative of this polynomial in the\
    \ same form.\n;; >>> (derivative (list 3 1 2 4 5))\n;; (list 1 4 12 20)\n;; >>>\
    \ (derivative (list 1 2 3))\n;; (list 2 6)", "  (if (null? xs)\n    (list 0)\n\
    \    (let ((n (length xs)))\n      (if (> n 1)\n        (list)\n        (let ((derivative-n\
    \ (derivative (cdr xs))))\n          (let ((derivative-n-1 (derivative-n (car\
    \ xs))))\n            (cons (car xs) (derivative-n-1 (cdr xs))))))))\n", "  (if\
    \ (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n  \
    \      (list (* (car xs) (cdr xs)))\n        (list (* (car xs) (car (cdr xs))))))))\n",
  "  (if (null? xs)\n    (list)\n    (cons (car xs) (derivative (cdr xs))))\n)\n",
  "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (= n 1)\n\
    \        (list 1)\n        (let ((derivative-n (derivative (cdr xs))))\n     \
    \     (let ((derivative-n-1 (derivative-n (car xs))))\n            (list (car\
    \ xs) (car derivate-n-1) (car derivate-n) (car derivative-n-1)))))\n      (let\
    \ ((derivative-n-1 (derivative (car xs))))\n        (let ((derivative-n (derivative-n-1\
    \ (cdr xs))))\n          (let ((derivative-n-2 (derivative-n (car xs))))\n   \
    \         (list (car xs) (car derivative-n-1) (car derivative-n) (car derivative-n-2)\
    \ (car derivative-n-1)))))\n      (let ((derivative-n-2 (derivative (car xs))))\n\
    \        (let ((derivative-n-1 (derivative-n-2 (cdr xs))))\n          (let ((derivative-n\
    \ (derivative-n-1 (car xs))))\n            (list (car xs) (car derivative-n-1)\
    \ (car derivative-n) (car derivative-n-2) (car derivative-n-1)))))\n      (let\
    \ ((derivative-n (derivative-n-2 (cdr xs))))\n        (let ((derivative-n-1 (derivative-n\
    \ (car xs))))\n          (let ((derivative-n-2 (derivative-n-1 (cdr xs))))\n \
    \           (list (car xs) (car derivative-n-1) (car derivative-n) (car derivative-n-2)\
    \ (car derivative-n-1)))))\n      (let ((derivative-n-2 (derivative-n-1 (cdr xs))))\n\
    \        (let ((derivative-n-1 (derivative-n-2 (car xs))))\n          (list (car\
    \ xs) (car derivative-", "  (if (null? xs)\n    (list 0)\n    (let ((n (length\
    \ xs)))\n      (if (> n 1)\n        (list)\n        (let ((i n))\n          (list\
    \ (derivative (cdr xs)))))\n      (let ((i n))\n        (if (null? (cdr xs))\n\
    \          (list)\n          (let ((j (car xs)))\n            (if (null? j)\n\
    \              (list)\n              (let ((k (car j)))\n                (if (null?\
    \ k)\n                  (list)\n                  (let ((l (car k)))\n       \
    \             (if (null? l)\n                      (list)\n                  \
    \    (let ((m (car l)))\n                        (if (null? m)\n             \
    \             (list)\n                          (let ((n (car m)))\n         \
    \                   (if (null? n)\n                              (list)\n    \
    \                          (let ((o (car n)))\n                              \
    \  (if (null? o)\n                                  (list)\n                 \
    \                 (let ((p (car o)))\n                                    (if\
    \ (null? p)\n                                      (list)\n                  \
    \                    (let ((q (car p)))\n                                    \
    \    (if (null? q)\n                                          (list)\n       \
    \                                   (let ((r (car q)))\n                     \
    \                       (if (null? r)\n                                      \
    \        (list)\n                                              (let ((s (car r)))\n\
    \                                                (if (null? s)\n             \
    \                                     (list)\n                               \
    \                   (let ((t (car s)))\n                                     \
    \               (if (null? t)\n                                              \
    \        (list)\n                                                      (let ((u\
    \ (car t)))\n                                                        (if (null?\
    \ u)\n                                                          (list)\n     \
    \                                                     (let ((v (car u)))\n   \
    \                                                         (if (null? v)\n    \
    \                                                          (list)\n          \
    \                                                    (let ((w (car v)))\n    \
    \                                                            (if (null? w)", " \
    \ (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n\
    \        (list)\n        (let ((derivative (make-vector n -1)))\n          (let\
    \ ((i 0))\n            (do ((i (+ i 1)))\n              ((< i n))\n          \
    \    (setf (vector-ref derivative i)\n                (vector-ref xs i)))\n  \
    \          derivative)\n          (let ((i 0))\n            (do ((i (+ i 1)))\n\
    \              ((< i n))\n              (setf (vector-ref xs i)\n            \
    \    (vector-ref derivative i)))))\n        (derivative))))\n", "  (if (null?\
    \ xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n        (list)\n\
    \        (let ((derivative-n (derivative (cdr xs))))\n          (let ((derivative-n-1\
    \ (derivative-n (car xs))))\n            (let ((derivative-n-2 (derivative-n-1\
    \ (cdr xs))))\n              (let ((derivative-n-3 (derivative-n-2 (car xs))))\n\
    \                (let ((derivative-n-4 (derivative-n-3 (cdr xs))))\n         \
    \         (let ((derivative-n-5 (derivative-n-4 (car xs))))\n                \
    \    (let ((derivative-n-6 (derivative-n-5 (cdr xs))))\n                     \
    \ (let ((derivative-n-7 (derivative-n-6 (car xs))))\n                        (let\
    \ ((derivative-n-8 (derivative-n-7 (cdr xs))))\n                          (let\
    \ ((derivative-n-9 (derivative-n-8 (car xs))))\n                            (let\
    \ ((derivative-n-10 (derivative-n-9 (cdr xs))))\n                            \
    \  (let ((derivative-n-11 (derivative-n-10 (car xs))))\n                     \
    \           (let ((derivative-n-12 (derivative-n-11 (cdr xs))))\n            \
    \                      (let ((derivative-n-13 (derivative-n-12 (car xs))))\n \
    \                                   (let ((derivative-n-14 (derivative-n-13 (cdr\
    \ xs))))\n                                      (let ((derivative-n-15 (derivative-n-14\
    \ (car xs))))\n                                        (let ((derivative-n-16\
    \ (derivative-n-15 (cdr xs))))\n                                          (let\
    \ ((derivative-n-17 (derivative-n-16 (car xs))))\n                           \
    \                 (let ((deriv", "  (if (null? xs)\n    (list 0)\n    (list (car\
    \ xs) + (cdr xs) * (car (cdr xs))))\n)\n", "  (if (null? xs)\n    (list 0)\n \
    \   (let ((n (length xs)))\n      (if (> n 1)\n\t  (list)\n\t  (let ((derivative-n\
    \ (derivative (cdr xs))))\n\t    (let ((derivative-n-1 (derivative-n (car xs))))\n\
    \t      (list (car xs) (derivative-n-1) (derivative-n-1) (derivative-n)\n\t\t\
    (derivative-n))))))))\n", "  (if (null? xs)\n    (list 0)\n    (let ((n (length\
    \ xs)))\n      (if (>= n 1)\n        (list)\n        (let ((derivative (make-vector\
    \ n -1)))\n          (let ((i 0))\n            (do ((i (+ i 1)))\n           \
    \   ((< i n))\n              (setf (vector-ref derivative i)\n               \
    \ (vector-ref xs i))\n              (setf (vector-ref derivative i)\n        \
    \        (vector-ref derivative i))\n              (setf (vector-ref derivative\
    \ i)\n                (vector-ref derivative i))\n              (setf (vector-ref\
    \ derivative i)\n                (vector-ref derivative i))\n              (setf\
    \ (vector-ref derivative i)\n                (vector-ref derivative i))\n    \
    \          (setf (vector-ref derivative i)\n                (vector-ref derivative\
    \ i))\n              (setf (vector-ref derivative i)\n                (vector-ref\
    \ derivative i))\n              (setf (vector-ref derivative i)\n            \
    \    (vector-ref derivative i))\n              (setf (vector-ref derivative i)\n\
    \                (vector-ref derivative i))\n              (setf (vector-ref derivative\
    \ i)\n                (vector-ref derivative i))\n              (setf (vector-ref\
    \ derivative i)\n                (vector-ref derivative i))\n              (setf\
    \ (vector-ref derivative i)\n                (vector-ref derivative i))\n    \
    \          (setf (vector-ref derivative i)\n                (vector-ref derivative\
    \ i))\n              (setf (vector-ref derivative i)\n                (vector-ref\
    \ derivative i))\n              (setf (vector-ref derivative i)\n            \
    \    (vector-ref derivative i))\n              (setf (vector-ref derivative i)\n\
    \                (vector-ref derivative i))\n              (setf (vector-ref derivative\
    \ i)\n                (vector-ref derivative i))\n              (setf (vector-ref\
    \ derivative i)\n                (vector-ref derivative i))\n              (setf\
    \ (vector-ref derivative i)\n                (vector-ref derivative i))\n    \
    \          (setf (vector-ref derivative i)\n                (vector-ref derivative\
    \ i))\n              (setf (vector-ref derivative", "  (if (null? xs)\n    (list\
    \ 0)\n    (let ((n (length xs)))\n      (if (>= n 1)\n        (list 1)\n     \
    \   (let ((derivative-n (derivative (cdr xs))))\n          (let ((derivative-n-1\
    \ (derivative-n (car xs))))\n            (let ((derivative-n-2 (derivative-n-1\
    \ (cdr xs))))\n              (let ((derivative-n-3 (derivative-n-2 (car xs))))\n\
    \                (let ((derivative-n-4 (derivative-n-3 (cdr xs))))\n         \
    \         (let ((derivative-n-5 (derivative-n-4 (car xs))))\n                \
    \    (let ((derivative-n-6 (derivative-n-5 (cdr xs))))\n                     \
    \ (let ((derivative-n-7 (derivative-n-6 (car xs))))\n                        (let\
    \ ((derivative-n-8 (derivative-n-7 (cdr xs))))\n                          (let\
    \ ((derivative-n-9 (derivative-n-8 (car xs))))\n                            (let\
    \ ((derivative-n-10 (derivative-n-9 (cdr xs))))\n                            \
    \  (let ((derivative-n-11 (derivative-n-10 (car xs))))\n                     \
    \           (let ((derivative-n-12 (derivative-n-11 (cdr xs))))\n            \
    \                      (let ((derivative-n-13 (derivative-n-12 (car xs))))\n \
    \                                   (let ((derivative-n-14 (derivative-n-13 (cdr\
    \ xs))))\n                                      (let ((derivative-n-15 (derivative-n-14\
    \ (car xs))))\n                                        (let ((derivative-n-16\
    \ (derivative-n-15 (cdr xs))))\n                                          (let\
    \ ((derivative-n-17 (derivative-n-16 (car xs))))\n                           \
    \                 (let ((", "  (if (null? xs)\n    (list 0)\n    (list (car xs)\
    \ + (cdr xs) * (car (cdr xs))))\n)\n\n;; xs represent coefficients of a polynomial.\n\
    ;; xs[0] + xs[1] * x + xs[2] * x^2 + ....\n;; Return derivative of this polynomial\
    \ in the same form.\n;; >>> (derivative (list 3 1 2 4 5))\n;; (list 1 4 12 20)\n\
    ;; >>> (derivative (list 1 2 3))\n;; (list 2 6)", "  (if (null? xs)\n    (list\
    \ 0)\n    (let ((n (length xs)))\n      (list (if (zero? n) 0\n              \
    \  (if (zero? (modulo n 2))\n                  (- n)\n                  (if (zero?\
    \ (modulo n 3))\n                    (- n)\n                    (if (zero? (modulo\
    \ n 4))\n                      (- n)\n                      (if (zero? (modulo\
    \ n 5))\n                        (- n)\n                        (if (zero? (modulo\
    \ n 6))\n                          (- n)\n                          (if (zero?\
    \ (modulo n 7))\n                            (- n)\n                         \
    \   (if (zero? (modulo n 8))\n                              (- n)\n          \
    \                    (if (zero? (modulo n 9))\n                              \
    \  (- n)\n                                (if (zero? (modulo n 10))\n        \
    \                          (- n)\n                                  (if (zero?\
    \ (modulo n 11))\n                                    (- n)\n                \
    \                    (if (zero? (modulo n 12))\n                             \
    \         (- n)\n                                      (if (zero? (modulo n 13))\n\
    \                                        (- n)\n                             \
    \           (if (zero? (modulo n 14))\n                                      \
    \    (- n)\n                                          (if (zero? (modulo n 15))\n\
    \                                            (- n)\n                         \
    \                   (if (zero? (modulo n 16))\n                              \
    \                (- n)\n                                              (if (zero?\
    \ (modulo n 17))\n                                                (- n)\n    \
    \                                            (if (zero? (modulo n 18))\n     \
    \                                             (- n)\n                        \
    \                          (if (zero? (modulo n 19))\n                       \
    \                             (- n)\n                                        \
    \            (if (zero? (modulo n 20))\n                                     \
    \                 (- n))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
  "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n\
    \        (list (* (car xs) (cdr xs)))\n        (let ((derivative-of-term (lambda\
    \ (x) (* (car x) (cdr x))))\n              (derivative-of-term-list (lambda (x)\
    \ (car x))))\n          (let ((derivative-of-term-list-of-terms (lambda (x) (car\
    \ x))))\n            (map (derivative-of-term-list-of-terms xs)\n            \
    \     (derivative-of-term-list derivative-of-term)))))\n  ))\n", "  (if (null?\
    \ xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n\t  (list\
    \ (car xs) (* (cdr xs) (car xs)))\n\t  (list (car xs) (* (cdr xs) (car (cdr xs)))))))\n\
    )\n\n;; xs represent coefficients of a polynomial.\n;; xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n;; Return derivative of this polynomial in the same form.\n;;\
    \ >>> (derivative (list 3 1 2 4 5))\n;; (list 1 4 12 20)\n;; >>> (derivative (list\
    \ 1 2 3))\n;; (list 2 6)", "  (if (null? xs)\n    (list 0)\n    (let ((n (length\
    \ xs)))\n      (list (derivative (cdr xs))\n           (derivative (cdr (cdr xs)))))))\n",
  "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (list (derivative\
    \ (cdr xs))\n\t      (+ (car xs) (* (car xs) (car (cdr xs))))\n\t      (* (car\
    \ xs) (car (cdr xs))))))))\n\n;; xs represent coefficients of a polynomial.\n\
    ;; xs[0] + xs[1] * x + xs[2] * x^2 + ....\n;; Return derivative of this polynomial\
    \ in the same form.\n;; >>> (derivative (list 3 1 2 4 5))\n;; (list 1 4 12 20)\n\
    ;; >>> (derivative (list 1 2 3))\n;; (list 2 6)", "  (if (null? xs)\n    (list\
    \ 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n\t  (list)\n\t  (let ((derivative\
    \ (make-vector n -1)))\n\t    (let ((i 0))\n\t      (while (< i n)\n\t\t(set!\
    \ derivative (vector-set! derivative i (- (vector-ref xs i) (vector-ref xs (1+i)))))\n\
    \t\t(set! i (1+i))))\n\t    (derivative))))))\n", "  (if (null? xs)\n    (list\
    \ 0)\n    (let ((n (length xs)))\n      (if (zero? n)\n        (list 0)\n    \
    \    (let ((derivative-n (derivative (car xs))))\n          (let ((derivative-n-1\
    \ (derivative-n (cdr xs))))\n            (let ((derivative-n-2 (derivative-n-1\
    \ (cdr xs))))\n              (let ((derivative-n-3 (derivative-n-2 (cdr xs))))\n\
    \                (let ((derivative-n-4 (derivative-n-3 (cdr xs))))\n         \
    \         (let ((derivative-n-5 (derivative-n-4 (cdr xs))))\n                \
    \    (let ((derivative-n-6 (derivative-n-5 (cdr xs))))\n                     \
    \ (let ((derivative-n-7 (derivative-n-6 (cdr xs))))\n                        (let\
    \ ((derivative-n-8 (derivative-n-7 (cdr xs))))\n                          (let\
    \ ((derivative-n-9 (derivative-n-8 (cdr xs))))\n                            (let\
    \ ((derivative-n-10 (derivative-n-9 (cdr xs))))\n                            \
    \  (let ((derivative-n-11 (derivative-n-10 (cdr xs))))\n                     \
    \           (let ((derivative-n-12 (derivative-n-11 (cdr xs))))\n            \
    \                      (let ((derivative-n-13 (derivative-n-12 (cdr xs))))\n \
    \                                   (let ((derivative-n-14 (derivative-n-13 (cdr\
    \ xs))))\n                                      (let ((derivative-n-15 (derivative-n-14\
    \ (cdr xs))))\n                                        (let ((derivative-n-16\
    \ (derivative-n-15 (cdr xs))))\n                                          (let\
    \ ((derivative-n-17 (derivative-n-16 (cdr xs))))", "  (if (null? xs)\n    (list\
    \ 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n        (list (* (car xs)\
    \ (cdr xs)))\n        (list (* (car xs) (car (cdr xs))))))))\n", "  (if (null?\
    \ xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n        (list)\n\
    \        (let ((derivative-n (derivative (cdr xs))))\n          (let ((derivative-n-1\
    \ (derivative-n (car xs))))\n            (list (car xs) (derivative-n-1) (derivative-n-1)\
    \ (derivative-n) (derivative-n)))))))))\n", "  (if (null? xs)\n    (list 0)\n\
    \    (let ((n (length xs)))\n      (if (> n 1)\n\t  (list)\n\t  (let ((derivative\
    \ (make-vector n -1)))\n\t    (let ((i 0))\n\t      (do ((i (+ i 1)))\n\t\t  ((=\
    \ i n))\n\t\t  (setf (aref derivative i)\n\t\t   (+ (aref xs i)\n\t\t     (* (aref\
    \ xs (- i 1))\n\t\t\t(aref xs i)))))))))))\n", "  (if (null? xs)\n    (list 0)\n\
    \    (let ((n (length xs)))\n      (list (derivative (cdr xs))\n\t(if (> n 1)\n\
    \t  (list 0)\n\t  (+ (car xs) (derivative (cdr xs))))))))\n", "  (if (null? xs)\n\
    \    (list 0)\n    (let ((n (length xs)))\n      (list (derivative (cdr xs))\n\
    \           (derivative (cdr (cdr xs)))))))\n", "  (if (null? xs)\n    (list 0)\n\
    \    (let ((n (length xs)))\n      (list (derivative (cdr xs))\n\t      (derivative\
    \ (cdr (cdr xs)))))))\n", "  (if (null? xs)\n    (list 0)\n    (let ((n (length\
    \ xs)))\n      (list (if (zero? n)\n                (list 0)\n               \
    \ (list (car xs) (cdr xs) (car (cdr xs)) (car (cdr (cdr xs))))))))\n", "  (if\
    \ (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (= n 1)\n  \
    \      (list 1)\n        (let ((derivative-n (derivative (cdr xs))))\n       \
    \   (let ((derivative-n-1 (derivative-n (car xs))))\n            (let ((derivative-n-2\
    \ (derivative-n-1 (cdr xs))))\n              (let ((derivative-n-3 (derivative-n-2\
    \ (car xs))))\n                (let ((derivative-n-4 (derivative-n-3 (cdr xs))))\n\
    \                  (let ((derivative-n-5 (derivative-n-4 (car xs))))\n       \
    \             (let ((derivative-n-6 (derivative-n-5 (cdr xs))))\n            \
    \          (let ((derivative-n-7 (derivative-n-6 (car xs))))\n               \
    \         (let ((derivative-n-8 (derivative-n-7 (cdr xs))))\n                \
    \          (let ((derivative-n-9 (derivative-n-8 (car xs))))\n               \
    \             (let ((derivative-n-10 (derivative-n-9 (cdr xs))))\n           \
    \                   (let ((derivative-n-11 (derivative-n-10 (car xs))))\n    \
    \                            (let ((derivative-n-12 (derivative-n-11 (cdr xs))))\n\
    \                                  (let ((derivative-n-13 (derivative-n-12 (car\
    \ xs))))\n                                    (let ((derivative-n-14 (derivative-n-13\
    \ (cdr xs))))\n                                      (let ((derivative-n-15 (derivative-n-14\
    \ (car xs))))\n                                        (let ((derivative-n-16\
    \ (derivative-n-15 (cdr xs))))\n                                          (let\
    \ ((derivative-n-17 (derivative-n-16 (car xs))))\n                           \
    \                 (let ((der", "  (if (null? xs)\n    (list 0)\n    (let ((n (length\
    \ xs)))\n      (if (> n 1)\n        (list (car xs) (* (cdr xs) (car xs)))\n  \
    \      (let ((derivative-n (derivative (cdr xs))))\n          (let ((derivative-n-1\
    \ (derivative-n (car xs))))\n            (list (car xs) (* (car xs) (car xs) (derivative-n-1)))))\n\
    \        (derivative-n (car xs))))))\n", "  (if (null? xs)\n    (list 0)\n   \
    \ (let ((n (length xs)))\n      (if (> n 1)\n        (list (* (car xs) (cdr xs)))\n\
    \        (let ((p (car xs)))\n          (let ((q (cdr xs)))\n            (list\
    \ (car p) (* (car q) (cdr q))))))))))\n", "  (if (null? xs)\n    (list 0)\n  \
    \  (let ((n (length xs)))\n      (if (>= n 1)\n        (list)\n        (let ((derivative-n\
    \ (derivative (cdr xs))))\n          (let ((derivative-n-1 (derivative-n (car\
    \ xs))))\n            (list (car xs) (car derivate-n-1) (car derivate-n) (cdr\
    \ derivate-n-1) (cdr derivate-n) (cdr derivate-n-1))))))))\n", "  (if (null? xs)\n\
    \    (list 0)\n    (list (car xs) + (cdr xs) * (car (cdr xs))))\n)\n\n;; xs represent\
    \ coefficients of a polynomial.\n;; xs[0] + xs[1] * x + xs[2] * x^2 + ....\n;;\
    \ Return derivative of this polynomial in the same form.\n;; >>> (derivative (list\
    \ 3 1 2 4 5))\n;; (list 1 4 12 20)\n;; >>> (derivative (list 1 2 3))\n;; (list\
    \ 2 6)", "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if\
    \ (= n 1)\n        (list)\n        (let ((derivative-n (derivative xs)))\n   \
    \       (let ((derivative-n-1 (derivative-n))\n                (derivative-n-2\
    \ (derivative-n-1)))\n            (let ((derivative-n-3 (derivative-n-2))\n  \
    \                (derivative-n-4 (derivative-n-3)))\n              (let ((derivative-n-5\
    \ (derivative-n-4))\n                    (derivative-n-6 (derivative-n-5)))\n\
    \                (let ((derivative-n-7 (derivative-n-6))\n                   \
    \   (derivative-n-8 (derivative-n-7)))\n                  (let ((derivative-n-9\
    \ (derivative-n-8))\n                        (derivative-n-10 (derivative-n-9)))\n\
    \                    (let ((derivative-n-11 (derivative-n-10))\n             \
    \             (derivative-n-12 (derivative-n-11)))\n                      (let\
    \ ((derivative-n-13 (derivative-n-12))\n                            (derivative-n-14\
    \ (derivative-n-13)))\n                        (let ((derivative-n-15 (derivative-n-14))\n\
    \                              (derivative-n-16 (derivative-n-15)))\n        \
    \                  (let ((derivative-n-17 (derivative-n-16))\n               \
    \                 (derivative-n-18 (derivative-n-17)))\n                     \
    \       (let ((derivative-n-19 (derivative-n-18))\n                          \
    \        (derivative-n-20 (derivative-n-19)))\n                              (derivative-n-21\
    \ (derivative-n-20)))))\n                    (derivative-n-22 (derivative-n-21)))))\n\
    \              (derivative-n-23 (derivative-n", "  (if (null? xs)\n    (list 0)\n\
    \    (let ((n (length xs)))\n      (if (> n 1)\n\t  (list)\n\t  (let ((derivative\
    \ (make-vector n -1)))\n\t    (let ((i 0))\n\t      (while (< i n)\n\t\t(set!\
    \ derivative (vector-set! derivative i (- (vector-ref xs i) (vector-ref xs (1+i)))))\n\
    \t\t(set! i (1+i)))\n\t      (derivative))))))\n", "  (if (null? xs)\n    (list\
    \ 0)\n    (list (car xs) + (cdr xs) * (car (cdr xs))))\n)\n\n;; xs represent coefficients\
    \ of a polynomial.\n;; xs[0] + xs[1] * x + xs[2] * x^2 + ....\n;; Return derivative\
    \ of this polynomial in the same form.\n;; >>> (derivative (list 3 1 2 4 5))\n\
    ;; (list 1 4 12 20)\n;; >>> (derivative (list 1 2 3))\n;; (list 2 6)", "  (if\
    \ (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (null? (cdr\
    \ xs))\n        (list n)\n        (let ((derivative-of-xs (car xs)))\n       \
    \   (if (null? derivative-of-xs)\n            (list 0)\n            (let ((derivative-of-n\
    \ (car derivative-of-xs)))\n              (if (null? derivative-of-n)\n      \
    \          (list n)\n                (let ((derivative-of-derivative-of-n (car\
    \ derivative-of-n)))\n                  (if (null? derivative-of-derivative-of-n)\n\
    \                    (list 0)\n                    (let ((derivative-of-derivative-of-derivative-of-n\
    \ (car derivative-of-derivative-of-n)))\n                      (if (null? derivative-of-derivative-of-derivative-of-n)\n\
    \                        (list n)\n                        (let ((derivative-of-derivative-of-derivative-of-derivative-of-n\
    \ (car derivative-of-derivative-of-derivative-of-n)))\n                      \
    \    (if (null? derivative-of-derivative-of-derivative-of-derivative-of-n)\n \
    \                           (list 0)\n                            (let ((derivative-of-derivative-of-derivative-of-derivative-of-derivative-of-n\
    \ (car derivative-of-derivative-of-derivative-of-derivative-of-n)))\n        \
    \                      (if (null? derivative-of-derivative-of-derivative-of-derivative-of-derivative-of-n)\n\
    \                                (list n)\n                                (let\
    \ ((derivative-of-derivative-of-derivative-of-derivative-of-derivative-of-derivative-of-n\
    \ (car derivative-of-derivative-of-derivative-of-derivative-of-derivative-of-n)))\n\
    \                                  (if", "  (if (null? xs)\n    (list 0)\n   \
    \ (let ((n (length xs)))\n      (if (> n 1)\n\t  (list)\n\t  (let ((derivative-n\
    \ (derivative (cdr xs))))\n\t    (let ((derivative-n-1 (derivative-n (car xs))))\n\
    \t      (list (car xs) (car derivate-n-1) (car derivate-n) (car derivative-n-1))))))))\n",
  "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n\
    \        (list (* (car xs) (cdr xs)))\n        (list (* (car xs) (car (cdr xs))))))))\n",
  "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n\
    \        (list (* (car xs) (cdr xs)))\n        (let ((derivative-of-xs (cdr xs)))\n\
    \          (if (null? derivative-of-xs)\n            (list 0)\n            (let\
    \ ((n (length derivative-of-xs)))\n              (if (> n 1)\n               \
    \ (list (* (car derivative-of-xs) (car xs))\n                     (* (car derivative-of-xs)\
    \ (cdr xs))\n                     (* (car derivative-of-xs) (car xs)\n       \
    \                  (* (cdr derivative-of-xs) (cdr xs))))\n                (let\
    \ ((derivative-of-xs (cdr derivative-of-xs)))\n                  (if (null? derivative-of-xs)\n\
    \                    (list 0)\n                    (let ((n (length derivative-of-xs)))\n\
    \                      (if (> n 1)\n                        (list (* (car derivative-of-xs)\
    \ (car xs))\n                             (* (car derivative-of-xs) (cdr xs))\n\
    \                             (* (car derivative-of-xs) (car xs)\n           \
    \                      (* (cdr derivative-of-xs) (cdr xs))))\n               \
    \         (let ((derivative-of-xs (cdr derivative-of-xs)))\n                 \
    \         (if (null? derivative-of-xs)\n                            (list 0)\n\
    \                            (let ((n (length derivative-of-xs)))\n          \
    \                    (if (> n 1)\n                                (list (* (car\
    \ derivative-of-xs) (car xs))\n                                      (* (car derivative-of-xs)\
    \ (cdr xs))\n                                      (* (car derivative-of-xs) (car\
    \ xs)\n                                          (* (cdr derivative-of-xs) (cdr\
    \ xs))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
  "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n\
    \        (list (* (car xs) (cdr xs)))\n        (list (* (car xs) (car (cdr xs))))))))\n",
  "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (= n 1)\n\
    \        (list 1)\n        (let ((derivative (make-vector n -1)))\n          (let\
    \ ((i 0))\n            (do ((i (+ i 1)))\n              ((< i n))\n          \
    \    (setf (vector-ref derivative i)\n                (vector-ref xs i)))\n  \
    \          derivative)))))\n)\n", "  (if (null? xs)\n    (list 0)\n    (let ((n\
    \ (length xs)))\n      (if (> n 1)\n        (list (* (car xs) (cdr xs)))\n   \
    \     (let ((d (car xs)))\n          (if (null? d)\n            (list 0)\n   \
    \         (let ((n (length d)))\n              (if (> n 1)\n                (list\
    \ (* (car d) (cdr d)))\n                (let ((d (car d)))\n                 \
    \ (if (null? d)\n                    (list 0)\n                    (let ((n (length\
    \ d)))\n                      (if (> n 1)\n                        (list (* (car\
    \ d) (cdr d)))\n                        (let ((d (car d)))\n                 \
    \         (if (null? d)\n                            (list 0)\n              \
    \              (let ((n (length d)))\n                              (if (> n 1)\n\
    \                                (list (* (car d) (cdr d)))\n                \
    \                (let ((d (car d)))\n                                  (if (null?\
    \ d)\n                                    (list 0)\n                         \
    \           (let ((n (length d)))\n                                      (if (>\
    \ n 1)\n                                        (list (* (car d) (cdr d)))\n \
    \                                       (let ((d (car d)))\n                 \
    \                         (if (null? d)\n                                    \
    \        (list 0)\n                                            (let ((n (length\
    \ d)))\n                                              (if (> n 1)\n          \
    \                                      (list (* (car d) (cdr d)))\n          \
    \                                      (let ((d (car d)))\n                  \
    \                                (if (null? d)\n                             \
    \                       (list 0)\n                                           \
    \         (let ((n (length d)))\n                                            \
    \          (if (> n 1)\n                                                     \
    \   (list (* (car d) (cdr d)))\n                                             \
    \           (let ((d (car d)))\n                                             \
    \            (if (null? d)\n                                                 \
    \          (list 0)\n                                                        \
    \   (let ((n (", "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n\
    \      (list (if (= n 1)\n              (car xs)\n              (derivative (cdr\
    \ xs)))))))\n", "  (if (null? xs)\n    (list 0)\n    (list (car xs) + (cdr xs)\
    \ * (car xs))))\n\n;; xs represent coefficients of a polynomial.\n;; xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n;; Return derivative of this polynomial in the same\
    \ form.\n;; >>> (derivative (list 3 1 2 4 5))\n;; (list 1 4 12 20)\n;; >>> (derivative\
    \ (list 1 2 3))\n;; (list 2 6)", "  (if (null? xs)\n    (list 0)\n    (let ((n\
    \ (length xs)))\n      (if (> n 1)\n        (list)\n        (let ((derivative-n\
    \ (derivative (cdr xs))))\n          (let ((derivative-n-1 (derivative-n (car\
    \ xs))))\n            (let ((derivative-n-2 (derivative-n-1 (cdr xs))))\n    \
    \          (let ((derivative-n-3 (derivative-n-2 (car xs))))\n               \
    \ (let ((derivative-n-4 (derivative-n-3 (cdr xs))))\n                  (let ((derivative-n-5\
    \ (derivative-n-4 (car xs))))\n                    (let ((derivative-n-6 (derivative-n-5\
    \ (cdr xs))))\n                      (let ((derivative-n-7 (derivative-n-6 (car\
    \ xs))))\n                        (let ((derivative-n-8 (derivative-n-7 (cdr xs))))\n\
    \                          (let ((derivative-n-9 (derivative-n-8 (car xs))))\n\
    \                            (let ((derivative-n-10 (derivative-n-9 (cdr xs))))\n\
    \                              (let ((derivative-n-11 (derivative-n-10 (car xs))))\n\
    \                                (let ((derivative-n-12 (derivative-n-11 (cdr\
    \ xs))))\n                                  (let ((derivative-n-13 (derivative-n-12\
    \ (car xs))))\n                                    (let ((derivative-n-14 (derivative-n-13\
    \ (cdr xs))))\n                                      (let ((derivative-n-15 (derivative-n-14\
    \ (car xs))))\n                                        (let ((derivative-n-16\
    \ (derivative-n-15 (cdr xs))))\n                                          (let\
    \ ((derivative-n-17 (derivative-n-16 (car xs))))\n                           \
    \                 (let ((deriv", "  (if (null? xs)\n    (list 0)\n    (list (car\
    \ xs) + (cdr xs) * (car (cdr xs))))\n)\n\n;; xs represent coefficients of a polynomial.\n\
    ;; xs[0] + xs[1] * x + xs[2] * x^2 + ....\n;; Return derivative of this polynomial\
    \ in the same form.\n;; >>> (derivative (list 3 1 2 4 5))\n;; (list 1 4 12 20)\n\
    ;; >>> (derivative (list 1 2 3))\n;; (list 2 6)", "  (if (null? xs)\n    (list\
    \ 0)\n    (let ((n (length xs)))\n      (if (>= n 1)\n        (list 1)\n     \
    \   (let ((derivative-n (derivative (cdr xs))))\n          (let ((derivative-n-1\
    \ (derivative-n (car xs))))\n            (let ((derivative-n-2 (derivative-n-1\
    \ (cdr xs))))\n              (let ((derivative-n-3 (derivative-n-2 (car xs))))\n\
    \                (let ((derivative-n-4 (derivative-n-3 (cdr xs))))\n         \
    \         (let ((derivative-n-5 (derivative-n-4 (car xs))))\n                \
    \    (let ((derivative-n-6 (derivative-n-5 (cdr xs))))\n                     \
    \ (let ((derivative-n-7 (derivative-n-6 (car xs))))\n                        (let\
    \ ((derivative-n-8 (derivative-n-7 (cdr xs))))\n                          (let\
    \ ((derivative-n-9 (derivative-n-8 (car xs))))\n                            (let\
    \ ((derivative-n-10 (derivative-n-9 (cdr xs))))\n                            \
    \  (let ((derivative-n-11 (derivative-n-10 (car xs))))\n                     \
    \           (let ((derivative-n-12 (derivative-n-11 (cdr xs))))\n            \
    \                      (let ((derivative-n-13 (derivative-n-12 (car xs))))\n \
    \                                   (let ((derivative-n-14 (derivative-n-13 (cdr\
    \ xs))))\n                                      (let ((derivative-n-15 (derivative-n-14\
    \ (car xs))))\n                                        (let ((derivative-n-16\
    \ (derivative-n-15 (cdr xs))))\n                                          (let\
    \ ((derivative-n-17 (derivative-n-16 (car xs))))\n                           \
    \                 (let ((", "  (if (null? xs)\n    (list 0)\n    (let ((n (length\
    \ xs)))\n      (if (> n 1)\n        (list)\n        (let ((derivative-n (derivative\
    \ (cdr xs))))\n          (let ((derivative-n-1 (derivative-n (car xs))))\n   \
    \         (list (car xs) (car derivate-n-1) (car derivate-n) (car derivative-n-1))))))))\n",
  "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n\
    \        (list (car xs) (* (cdr xs) (car xs)))\n        (list (car xs) (* (cdr\
    \ xs) (cdr xs)))\n      )\n    )\n  )\n)\n", "  (if (null? xs)\n    (list 0)\n\
    \    (let ((n (length xs)))\n      (if (> n 1)\n\t  (list (* (car xs) (cdr xs)))\n\
    \t  (let ((derivative-of-xs (cdr xs)))\n\t    (if (null? derivative-of-xs)\n\t\
    \      (list 0)\n\t      (let ((n (length derivative-of-xs)))\n\t\t(if (> n 1)\n\
    \t\t  (list (* (car derivative-of-xs) (car xs)))\n\t\t  (let ((derivative-of-xs\
    \ (cdr derivative-of-xs)))\n\t\t    (if (null? derivative-of-xs)\n\t\t      (list\
    \ 0)\n\t\t      (let ((n (length derivative-of-xs)))\n\t\t\t(if (> n 1)\n\t\t\t\
    \  (list (* (car derivative-of-xs) (car xs)))\n\t\t\t  (list 0))))))))))))))\n",
  "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n\
    \        (list (* (car xs) (cdr xs)))\n        (list (* (car xs) (car (cdr xs))))))))\n",
  "  (if (null? xs)\n    (list 0)\n    (list (car xs) + (cdr xs) * (car (cdr xs))))\n\
    )\n\n;; xs represent coefficients of a polynomial.\n;; xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n;; Return derivative of this polynomial in the same form.\n;;\
    \ >>> (derivative (list 3 1 2 4 5))\n;; (list 1 4 12 20)\n;; >>> (derivative (list\
    \ 1 2 3))\n;; (list 2 6)", "  (if (null? xs)\n    (list)\n    (list (car xs) (+\
    \ (cdr xs) (car xs))))\n)\n", "  (if (null? xs)\n    (list 0)\n    (let ((n (length\
    \ xs)))\n      (if (> n 1)\n\t(list)\n\t(let ((derivative (make-vector n -1)))\n\
    \t  (let ((i 0))\n\t    (while (< i n)\n\t      (set! derivative (vector-set!\
    \ derivative i (- (vector-ref xs i) (vector-ref xs (1+i)))))\n\t      (set! i\
    \ (1+i)))\n\t    derivative)))\n      )))\n", "  (if (null? xs)\n    (list 0)\n\
    \    (let ((n (length xs)))\n      (if (>= n 1)\n        (list 1)\n        (let\
    \ ((derivative-n (derivative (car xs))))\n          (let ((derivative-n-1 (derivative-n\
    \ (cdr xs))))\n            (let ((derivative-n-2 (derivative-n-1 (cdr xs))))\n\
    \              (let ((derivative-n-3 (derivative-n-2 (cdr xs))))\n           \
    \     (let ((derivative-n-4 (derivative-n-3 (cdr xs))))\n                  (let\
    \ ((derivative-n-5 (derivative-n-4 (cdr xs))))\n                    (let ((derivative-n-6\
    \ (derivative-n-5 (cdr xs))))\n                      (let ((derivative-n-7 (derivative-n-6\
    \ (cdr xs))))\n                        (let ((derivative-n-8 (derivative-n-7 (cdr\
    \ xs))))\n                          (let ((derivative-n-9 (derivative-n-8 (cdr\
    \ xs))))\n                            (let ((derivative-n-10 (derivative-n-9 (cdr\
    \ xs))))\n                              (let ((derivative-n-11 (derivative-n-10\
    \ (cdr xs))))\n                                (let ((derivative-n-12 (derivative-n-11\
    \ (cdr xs))))\n                                  (let ((derivative-n-13 (derivative-n-12\
    \ (cdr xs))))\n                                    (let ((derivative-n-14 (derivative-n-13\
    \ (cdr xs))))\n                                      (let ((derivative-n-15 (derivative-n-14\
    \ (cdr xs))))\n                                        (let ((derivative-n-16\
    \ (derivative-n-15 (cdr xs))))\n                                          (let\
    \ ((derivative-n-17 (derivative-n-16 (cdr xs))))", "  (if (null? xs)\n    (list\
    \ 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n        (list (* (car xs)\
    \ (cdr xs)))\n        (let ((derivative-of-xs (cdr xs)))\n          (if (null?\
    \ derivative-of-xs)\n            (list 0)\n            (let ((n (length derivative-of-xs)))\n\
    \              (if (> n 1)\n                (list (* (car derivative-of-xs) (car\
    \ xs))\n                     (* (car derivative-of-xs) (cdr xs))\n           \
    \          (* (car derivative-of-xs) (car (cdr xs))))\n                (let ((derivative-of-xs\
    \ (cdr derivative-of-xs)))\n                  (if (null? derivative-of-xs)\n \
    \                   (list 0)\n                    (let ((n (length derivative-of-xs)))\n\
    \                      (if (> n 1)\n                        (list (* (car derivative-of-xs)\
    \ (car xs))\n                             (* (car derivative-of-xs) (cdr xs))\n\
    \                             (* (car derivative-of-xs) (car (cdr xs))))))))))))))))))\n",
  "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n\
    \        (list (* (car xs) (cdr xs)))\n        (list (* (car xs) (car (cdr xs))))))))\n",
  "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n\
    \        (list)\n        (let ((i n))\n          (list (derivative (cdr xs)))))\n\
    \      (if (null? (cdr xs))\n        (list)\n        (let ((i n))\n          (list\
    \ (derivative (car xs)))))\n      (if (null? (car xs))\n        (list)\n     \
    \   (let ((i n))\n          (list (derivative (cdr (cdr xs))) (derivative (car\
    \ xs))))))))\n", "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n\
    \      (if (= n 1)\n        (list 1)\n        (let ((derivative-n (derivative\
    \ (car xs))))\n          (let ((rest (cdr xs)))\n            (cons (car xs) (derivative-n\
    \ (cdr xs))))))))\n)\n", "  (if (null? xs)\n    (list 0)\n    (let ((n (length\
    \ xs)))\n      (if (= n 1)\n        (list)\n        (let ((derivative (make-vector\
    \ n -1)))\n          (let ((i 0))\n            (do ((i (+ i 1)))\n           \
    \   ((< i n))\n              (setf (aref derivative i)\n                (+ (aref\
    \ xs i)\n                   (* (aref xs (- i 1))\n                        (aref\
    \ xs i))))))\n          (return (vector-ref derivative 0)\n             (vector-set!\
    \ derivative 0\n               (vector-ref derivative (- n 1))))))))))\n", " \
    \ (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n\
    \t  (list (car xs) (* n (cdr xs)))\n\t  (list (car xs) (* n (car xs)))\n\t)))\n\
    )\n", "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (>=\
    \ n 1)\n        (list)\n        (let ((derivative-n (derivative (cdr xs))))\n\
    \          (let ((derivative-n-1 (derivative-n (car xs))))\n            (list\
    \ (car xs) (car derivate-n-1) (car derivate-n) (car derivative-n-1)))))\n    \
    \  (let ((derivative-n-1 (derivative-n (car xs))))\n        (let ((derivative-n\
    \ (car xs)))\n          (list (car xs) (car derivative-n-1) (car derivative-n)\
    \ (car derivative-n-1))))))))\n", "  (if (null? xs)\n    (list 0)\n    (let ((n\
    \ (length xs)))\n      (if (> n 1)\n\t  (list (* (car xs) (cdr xs)))\n\t  (let\
    \ ((derivative-n (derivative (cdr xs))))\n\t    (if (null? derivative-n)\n\t \
    \     (list 0)\n\t      (let ((derivative-n-1 (derivative-n (car xs))))\n\t\t\
    (let ((derivative-n-2 (derivative-n-1 (car xs))))\n\t\t  (list (car derivative-n-2)\n\
    \t\t       (car derivative-n-1)\n\t\t       (car derivative-n)\n\t\t       (cdr\
    \ derivative-n-2)\n\t\t       (cdr derivative-n-1)\n\t\t       (cdr derivative-n)))))))))))\n",
  "  (if (null? xs)\n    (list)\n    (cons (car xs) (derivative (cdr xs))))\n)\n\n\
    ;; xs represent coefficients of a polynomial.\n;; xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n;; Return derivative of this polynomial in the same form.\n;; >>>\
    \ (derivative (list 3 1 2 4 5))\n;; (list 1 4 12 20)\n;; >>> (derivative (list\
    \ 1 2 3))\n;; (list 2 6)", "  (if (null? xs)\n    (list 0)\n    (let ((n (length\
    \ xs)))\n      (if (> n 1)\n        (list (* (car xs) (cdr xs)))\n        (let\
    \ ((p (car xs)))\n          (let ((q (cdr xs)))\n            (list (car p) (*\
    \ (car q) (cdr q))))))))))\n", "  (if (null? xs)\n    (list 0)\n    (let ((n (length\
    \ xs)))\n      (if (> n 1)\n\t  (let ((derivative (make-vector n -1)))\n\t   \
    \ (let ((i 0))\n\t      (while (< i n)\n\t\t(setf (aref derivative i)\n\t\t  (+\
    \ (aref xs i)\n\t\t     (* (aref xs (1+ i))\n\t\t\t(aref xs i))))\n\t\t(setf (aref\
    \ derivative i)\n\t\t  (+ (aref derivative i)\n\t\t     (* (aref xs (1+ i))\n\t\
    \t\t(aref xs i))))\n\t\t(setf (aref xs i)\n\t\t  (+ (aref xs (1+ i))\n\t\t   \
    \  (* (aref xs (1+ i))\n\t\t\t(aref derivative i))))\n\t\t(setf (aref derivative\
    \ i)\n\t\t  (+ (aref derivative i)\n\t\t     (* (aref xs (1+ i))\n\t\t\t(aref\
    \ xs (1+ i)))))))\n\t  (let ((i 0))\n\t    (while (< i n)\n\t      (setf (aref\
    \ xs i)\n\t\t(+ (aref xs (1+ i))\n\t\t   (* (aref derivative i)\n\t\t      (aref\
    \ xs i))))\n\t      (setf (aref derivative i)\n\t\t(+ (aref derivative i)\n\t\t\
    \   (* (aref xs (1+ i))\n\t\t      (aref xs i))))\n\t      (setf (aref xs i)\n\
    \t\t(+ (aref xs (1+ i))\n\t\t   (* (aref xs (1+ i))\n\t\t      (aref derivative\
    \ i))))\n\t      (setf (aref derivative i)\n\t\t(+ (aref derivative i)\n\t\t \
    \  (* (aref xs (1+ i))\n\t\t      (aref xs (1+ i)))))))\n\t  (let ((i 0))\n\t\
    \    (while (< i n)\n\t      (setf (aref xs i)\n\t\t(+ (aref xs (1+", "  (if (null?\
    \ xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n        (list\
    \ (* (car xs) (cdr xs)))\n        (let ((d (car xs)))\n          (let ((i (cdr\
    \ xs)))\n            (if (null? i)\n              (list d)\n              (let\
    \ ((n (length i)))\n                (if (> n 1)\n                  (list (* d\
    \ (car i)) (* d (cdr i)))\n                  (let ((d (car i)))\n            \
    \        (let ((i (cdr i)))\n                      (if (null? i)\n           \
    \             (list d)\n                        (let ((n (length i)))\n      \
    \                    (if (> n 1)\n                            (list (* d (car\
    \ i)) (* d (cdr i)))\n                            (let ((d (car i)))\n       \
    \                       (let ((i (cdr i)))\n                                (if\
    \ (null? i)\n                                  (list d)\n                    \
    \              (let ((n (length i)))\n                                    (if\
    \ (> n 1)\n                                      (list (* d (car i)) (* d (cdr\
    \ i)))\n                                      (let ((d (car i)))\n           \
    \                             (let ((i (cdr i)))\n                           \
    \               (if (null? i)\n                                            (list\
    \ d)\n                                            (let ((n (length i)))\n    \
    \                                          (if (> n 1)\n                     \
    \                           (list (* d (car i)) (* d (cdr i)))\n             \
    \                                   (let ((d (car i)))\n                     \
    \                             (let ((i (cdr i)))\n                           \
    \                         (if (null? i)\n                                    \
    \                  (list d)\n                                                \
    \      (let ((n (length i)))\n                                               \
    \         (if (> n 1)\n                                                      \
    \    (list (* d (car i)) (* d (cdr i)))\n                                    \
    \                      (let ((d (car i)))\n                                  \
    \                          (let ((i (cdr i)))\n", "  (if (null? xs)\n    (list\
    \ 0)\n    (let ((n (length xs)))\n      (if (= n 1)\n        (list 1)\n      \
    \  (let ((derivative-n (derivative (car xs))))\n          (let ((derivative-n-1\
    \ (derivative-n (cdr xs))))\n            (list (car xs) (derivative-n-1) (derivative-n-1)\
    \ (derivative-n (car xs))))))))))\n", "  (if (null? xs)\n    (list)\n    (let\
    \ ((n (length xs)))\n      (if (>= n 1)\n        (list)\n        (let ((derivative\
    \ (make-vector n -1)))\n          (let ((i 0))\n            (do ((i (+ i 1)))\n\
    \              ((< i n))\n              (setf (vector-ref derivative i)\n    \
    \            (vector-ref xs i))\n              (setf (vector-ref derivative i)\n\
    \                (vector-ref derivative i))\n              (setf (vector-ref derivative\
    \ i)\n                (vector-ref derivative i))\n              (setf (vector-ref\
    \ derivative i)\n                (vector-ref derivative i))\n              (setf\
    \ (vector-ref derivative i)\n                (vector-ref derivative i))\n    \
    \          (setf (vector-ref derivative i)\n                (vector-ref derivative\
    \ i))\n              (setf (vector-ref derivative i)\n                (vector-ref\
    \ derivative i))\n              (setf (vector-ref derivative i)\n            \
    \    (vector-ref derivative i))\n              (setf (vector-ref derivative i)\n\
    \                (vector-ref derivative i))\n              (setf (vector-ref derivative\
    \ i)\n                (vector-ref derivative i))\n              (setf (vector-ref\
    \ derivative i)\n                (vector-ref derivative i))\n              (setf\
    \ (vector-ref derivative i)\n                (vector-ref derivative i))\n    \
    \          (setf (vector-ref derivative i)\n                (vector-ref derivative\
    \ i))\n              (setf (vector-ref derivative i)\n                (vector-ref\
    \ derivative i))\n              (setf (vector-ref derivative i)\n            \
    \    (vector-ref derivative i))\n              (setf (vector-ref derivative i)\n\
    \                (vector-ref derivative i))\n              (setf (vector-ref derivative\
    \ i)\n                (vector-ref derivative i))\n              (setf (vector-ref\
    \ derivative i)\n                (vector-ref derivative i))\n              (setf\
    \ (vector-ref derivative i)\n                (vector-ref derivative i))\n    \
    \          (setf (vector-ref derivative i)\n                (vector-ref derivative\
    \ i))\n              (setf (vector-ref derivative i", "  (if (null? xs)\n    (list\
    \ 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n\t  (list)\n\t  (let ((derivative-n\
    \ (derivative (cdr xs))))\n\t    (let ((derivative-n-1 (derivative-n (car xs))))\n\
    \t      (if (null? derivative-n-1)\n\t\t  (list)\n\t\t  (let ((derivative-n-2\
    \ (derivative-n-1 (cdr xs))))\n\t\t    (if (null? derivative-n-2)\n\t\t      (list)\n\
    \t\t      (let ((derivative-n-3 (derivative-n-2 (car xs))))\n\t\t\t(if (null?\
    \ derivative-n-3)\n\t\t\t  (list)\n\t\t\t  (let ((derivative-n-4 (derivative-n-3\
    \ (cdr xs))))\n\t\t\t    (if (null? derivative-n-4)\n\t\t\t      (list)\n\t\t\t\
    \      (let ((derivative-n-5 (derivative-n-4 (car xs))))\n\t\t\t\t(if (null? derivative-n-5)\n\
    \t\t\t\t  (list)\n\t\t\t\t  (let ((derivative-n-6 (derivative-n-5 (cdr xs))))\n\
    \t\t\t\t    (if (null? derivative-n-6)\n\t\t\t\t      (list)\n\t\t\t\t      (let\
    \ ((derivative-n-7 (derivative-n-6 (car xs))))\n\t\t\t\t\t(if (null? derivative-n-7)\n\
    \t\t\t\t\t  (list)\n\t\t\t\t\t  (let ((derivative-n-8 (derivative-n-7 (cdr xs))))\n\
    \t\t\t\t\t    (if (null? derivative-n-8)\n\t\t\t\t\t      (list)\n\t\t\t\t\t \
    \     (let ((derivative-n-9 (derivative-n-8 (car xs))))\n\t\t\t\t\t\t(if (null?\
    \ derivative-n-9)\n\t\t\t\t\t\t  (list)\n\t\t\t\t\t\t  (let ((derivative-n-10\
    \ (derivative-n-9 (cdr xs))))\n\t\t\t\t\t\t    (if (null? derivative-n-", "  (if\
    \ (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n\t\
    \  (list)\n\t  (let ((derivative (make-vector n -1)))\n\t    (let ((i 0))\n\t\
    \      (do ((i (+ i 1)))\n\t\t  ((= i n))\n\t\t  (setf (aref derivative i)\n\t\
    \t   (+ (aref xs i)\n\t\t      (* (aref xs (- i 1))\n\t\t\t (* (aref xs i)))))))))\n\
    \t(list (car xs)\n\t  (derivative (cdr xs))))))\n", "  (if (null? xs)\n    (list\
    \ 0)\n    (list (car xs) + (cdr xs) * (car (cdr xs))))\n)\n", "  (if (null? xs)\n\
    \    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n        (list)\n\
    \        (let ((derivative (make-vector n -1)))\n          (let ((i 0))\n    \
    \        (do ((i (+ i 1)))\n              ((< i n))\n              (setf (vector-ref\
    \ derivative i)\n                (vector-ref xs i))\n              (setf (vector-ref\
    \ derivative i)\n                (vector-ref derivative i))\n              (setf\
    \ (vector-ref derivative i)\n                (vector-ref derivative i))\n    \
    \          (setf (vector-ref derivative i)\n                (vector-ref derivative\
    \ i))\n              (setf (vector-ref derivative i)\n                (vector-ref\
    \ derivative i))\n              (setf (vector-ref derivative i)\n            \
    \    (vector-ref derivative i))\n              (setf (vector-ref derivative i)\n\
    \                (vector-ref derivative i))\n              (setf (vector-ref derivative\
    \ i)\n                (vector-ref derivative i))\n              (setf (vector-ref\
    \ derivative i)\n                (vector-ref derivative i))\n              (setf\
    \ (vector-ref derivative i)\n                (vector-ref derivative i))\n    \
    \          (setf (vector-ref derivative i)\n                (vector-ref derivative\
    \ i))\n              (setf (vector-ref derivative i)\n                (vector-ref\
    \ derivative i))\n              (setf (vector-ref derivative i)\n            \
    \    (vector-ref derivative i))\n              (setf (vector-ref derivative i)\n\
    \                (vector-ref derivative i))\n              (setf (vector-ref derivative\
    \ i)\n                (vector-ref derivative i))\n              (setf (vector-ref\
    \ derivative i)\n                (vector-ref derivative i))\n              (setf\
    \ (vector-ref derivative i)\n                (vector-ref derivative i))\n    \
    \          (setf (vector-ref derivative i)\n                (vector-ref derivative\
    \ i))\n              (setf (vector-ref derivative i)\n                (vector-ref\
    \ derivative i))\n              (setf (vector-ref derivative i)\n            \
    \    (vector-ref derivative i))\n              (setf (vector-ref derivative i",
  "  (if (null? xs)\n    (list 0)\n    (list (car xs) + (cdr xs) * (car (cdr xs))))\n\
    )\n\n;; xs represent coefficients of a polynomial.\n;; xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n;; Return derivative of this polynomial in the same form.\n;;\
    \ >>> (derivative (list 3 1 2 4 5))\n;; (list 1 4 12 20)\n;; >>> (derivative (list\
    \ 1 2 3))\n;; (list 2 6)", "  (if (null? xs)\n    (list 0)\n    (list (car xs)\
    \ + (cdr xs) * (car (cdr xs))))\n)\n\n;; xs represent coefficients of a polynomial.\n\
    ;; xs[0] + xs[1] * x + xs[2] * x^2 + ....\n;; Return derivative of this polynomial\
    \ in the same form.\n;; >>> (derivative (list 3 1 2 4 5))\n;; (list 1 4 12 20)\n\
    ;; >>> (derivative (list 1 2 3))\n;; (list 2 6)", "  (if (null? xs)\n    (list\
    \ 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n        (list)\n        (let\
    \ ((derivative-n (derivative (cdr xs))))\n          (let ((derivative-n-1 (derivative-n\
    \ (car xs))))\n            (cons (car xs) (derivative-n-1 (cdr xs))))))))\n",
  "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n\
    \t  (list (* (car xs) (cdr xs)))\n\t  (let ((derivative-of-xs (cdr xs)))\n\t \
    \   (if (null? derivative-of-xs)\n\t      (list 0)\n\t      (let ((n (length derivative-of-xs)))\n\
    \t\t(if (> n 1)\n\t\t  (list (* (car derivative-of-xs) (cdr derivative-of-xs)))\n\
    \t\t  (let ((derivative-of-derivative-of-xs (cdr derivative-of-xs)))\n\t\t   \
    \ (if (null? derivative-of-derivative-of-xs)\n\t\t      (list 0)\n\t\t      (let\
    \ ((n (length derivative-of-derivative-of-xs)))\n\t\t\t(if (> n 1)\n\t\t\t  (list\
    \ (* (car derivative-of-derivative-of-xs)\n\t\t\t\t  (cdr derivative-of-derivative-of-xs))))))))))))))))))\n",
  "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (= n 1)\n\
    \        (list)\n        (let ((derivative (make-vector n -1)))\n          (let\
    \ ((i 0))\n            (while (< i n)\n              (setf (aref derivative i)\n\
    \                (+ (aref xs i)\n                   (* (aref xs (1+ i))\n    \
    \                    (aref xs i))))\n              (setf (aref derivative i)\n\
    \                (+ (aref derivative i)\n                   (* (aref xs (1+ i))\n\
    \                        (aref xs i))))\n              (setf i (1+ i)))\n    \
    \        (list (aref derivative 0)\n                 (aref derivative n)))))))\n",
  "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n\
    \t  (list (car xs) (* (cdr xs) (car (cdr xs))))\n\t  (list (car xs) (* (cdr xs)\
    \ (car (cdr (cdr xs))))))))\n", "  (if (null? xs)\n    (list 0)\n    (let ((n\
    \ (length xs)))\n      (if (> n 1)\n        (list (* (car xs) (cdr xs)))\n   \
    \     (list (* (car xs) (car (cdr xs))))))))\n", "  (if (null? xs)\n    (list\
    \ 0)\n    (let ((n (length xs)))\n      (if (zero? n)\n        (list 0)\n    \
    \    (let ((derivative (make-vector n -1 0)))\n          (let ((i 0))\n      \
    \      (while (< i n)\n              (set! derivative (vector-set! derivative\
    \ i (- (vector-ref xs i) (vector-ref xs (add1 i)))))\n              (set! i (add1\
    \ i))))\n          (vector-set! derivative n (- (vector-ref xs n) (vector-ref\
    \ xs (add1 n))))))))\n", "  (if (null? xs)\n    (list 0)\n    (let ((n (length\
    \ xs)))\n      (list (derivative (cdr xs))\n\t      (derivative (cdr (cdr xs)))))))\n",
  "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n\
    \        (list (* (car xs) (cdr xs)))\n        (list (* (car xs) (car (cdr xs))))))))\n",
  "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n\
    \        (list)\n        (let ((derivative-n (derivative (cdr xs))))\n       \
    \   (let ((derivative-n-1 (derivative-n (car xs))))\n            (cons (car xs)\
    \ (derivative-n-1 (cdr xs))))))))\n", "  (if (null? xs)\n    (list 0)\n    (let\
    \ ((n (length xs)))\n      (if (> n 1)\n        (list)\n        (let ((i (1)))\n\
    \          (while (< i n)\n            (let ((j (1)))\n              (while (<\
    \ j i)\n                (set! i (i + 1))\n                (set! j (j + 1))\n \
    \               (set! (cons (derivative (car xs)) (cdr xs)) (cons (car xs) (cons\
    \ (car (cdr xs)) (cons (car (cdr (cdr xs))) (cons (car (cdr (cdr (cdr xs)))) (cons\
    \ (car (cdr (cdr (cdr (cdr xs))))))))) (cons (car (cdr (cdr (cdr (cdr (cdr xs)))))))))\n\
    \              ))))\n        (list))))\n)", "  (if (null? xs)\n    (list 0)\n\
    \    (let ((n (length xs)))\n      (if (> n 1)\n        (list)\n        (let ((derivative-n\
    \ (derivative (cdr xs))))\n          (let ((derivative-n-1 (derivative-n (car\
    \ xs))))\n            (list (car xs) (derivative-n-1) (derivative-n-1) (derivative-n-1)\
    \ (derivative-n-1) (derivative-n-1) (derivative-n-1) (derivative-n-1) (derivative-n-1)\
    \ (derivative-n-1) (derivative-n-1) (derivative-n-1) (derivative-n-1) (derivative-n-1)\
    \ (derivative-n-1) (derivative-n-1) (derivative-n-1) (derivative-n-1) (derivative-n-1)\
    \ (derivative-n-1) (derivative-n-1) (derivative-n-1) (derivative-n-1) (derivative-n-1)\
    \ (derivative-n-1) (derivative-n-1) (derivative-n-1) (derivative-n-1) (derivative-n-1)\
    \ (derivative-n-1) (derivative-n-1) (derivative-n-1) (derivative-n-1) (derivative-n-1)\
    \ (derivative-n-1) (derivative-n-1) (derivative-n-1) (derivative-n-1) (derivative-n-1)\
    \ (derivative-n-1) (derivative-n-1) (derivative-n-1) (derivative-n-1) (derivative-n-1)\
    \ (derivative-n-1) (derivative-n-1) (derivative-n-1) (derivative-n-", "  (if (null?\
    \ xs)\n    (list)\n    (let ((n (length xs)))\n      (if (> n 1)\n\t  (let ((derivative-n\
    \ (derivative xs)))\n\t    (let ((derivative-n-1 (derivative-n)))\n\t      (list\
    \ (car xs) (cdr xs) (car derivative-n-1) (cdr derivative-n-1) (car derivative-n)\
    \ (cdr derivative-n))))\n\t  (list (car xs) (cdr xs) (car derivative-n) (cdr derivative-n))))))\n",
  "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n\
    \        (list (* (car xs) (cdr xs)))\n        (let ((derivative-of-coefficient\
    \ (car xs)))\n          (let ((derivative-of-xs (cdr xs)))\n            (if (null?\
    \ derivative-of-xs)\n              (list derivative-of-coefficient)\n        \
    \      (let ((n (length derivative-of-xs)))\n                (if (> n 1)\n   \
    \               (list (* derivative-of-coefficient (car derivative-of-xs))\n \
    \                    (* derivative-of-coefficient (cdr derivative-of-xs)))\n \
    \                 (let ((derivative-of-coefficient (car derivative-of-xs)))\n\
    \                    (let ((derivative-of-xs (cdr derivative-of-xs)))\n      \
    \                (if (null? derivative-of-xs)\n                        (list derivative-of-coefficient)\n\
    \                        (let ((n (length derivative-of-xs)))\n              \
    \            (if (> n 1)\n                            (list (* derivative-of-coefficient\
    \ (car derivative-of-xs))\n                               (* derivative-of-coefficient\
    \ (cdr derivative-of-xs)))\n                            (let ((derivative-of-coefficient\
    \ (car derivative-of-xs)))\n                              (let ((derivative-of-xs\
    \ (cdr derivative-of-xs)))\n                                (if (null? derivative-of-xs)\n\
    \                                  (list derivative-of-coefficient)\n        \
    \                          (let ((n (length derivative-of-xs)))\n            \
    \                        (if (> n 1)\n                                      (list\
    \ (* derivative-of-coefficient (car derivative-of-xs))\n                     \
    \                     (* derivative-of-coefficient (cdr derivative-of-xs)))\n\
    \                                      (let ((derivative-of-coefficient (car derivative-of-xs)))\n\
    \                                        (let ((derivative-of-xs (cdr derivative-of-xs)))\n\
    \                                          (if (null? derivative-of-xs)\n    \
    \                                        (list derivative-of-coefficient)\n  \
    \                               ", "  (if (null? xs)\n    (list 0)\n    (let ((n\
    \ (length xs)))\n      (if (= n 1)\n        (list)\n        (let ((derivative-n\
    \ (derivative (cdr xs))))\n          (let ((derivative-n-1 (derivative-n (car\
    \ xs))))\n            (list (car xs) (derivative-n-1) (derivative-n-1) (derivative-n)\n\
    \                                                  (derivative-n))))))))\n", " \
    \ (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n\
    \t  (list (* (car xs) (cdr xs)))\n\t  (let ((d (car xs)))\n\t    (cdr xs)\n\t\
    \    (if (null? d)\n\t      (list 0)\n\t      (let ((n (length d)))\n\t\t(if (>\
    \ n 1)\n\t\t  (list (* (car d) (cdr d)))\n\t\t  (let ((d (car d)))\n\t\t    (cdr\
    \ d)\n\t\t    (if (null? d)\n\t\t      (list 0)\n\t\t      (let ((n (length d)))\n\
    \t\t\t(if (> n 1)\n\t\t\t  (list (* (car d) (cdr d)))\n\t\t\t  (let ((d (car d)))\n\
    \t\t\t    (cdr d)\n\t\t\t    (if (null? d)\n\t\t\t      (list 0)\n\t\t\t     \
    \ (let ((n (length d)))\n\t\t\t\t(if (> n 1)\n\t\t\t\t  (list (* (car d) (cdr\
    \ d)))\n\t\t\t\t  (let ((d (car d)))\n\t\t\t\t    (cdr d)\n\t\t\t\t    (if (null?\
    \ d)\n\t\t\t\t      (list 0)\n\t\t\t\t      (let ((n (length d)))\n\t\t\t\t\t\
    (if (> n 1)\n\t\t\t\t\t  (list (* (car d) (cdr d)))\n\t\t\t\t\t  (let ((d (car\
    \ d)))\n\t\t\t\t\t    (cdr d)\n\t\t\t\t\t    (if (null? d)\n\t\t\t\t\t      (list\
    \ 0)\n\t\t\t\t\t      (let ((n (length d)))\n\t\t\t\t\t\t(if (> n 1)\n\t\t\t\t\
    \t\t  (list (* (car d) (cdr d)))\n\t\t\t\t\t\t  (let ((d (car d)))\n\t\t\t\t\t\
    \t    (cdr d)\n\t\t\t\t\t\t    (if (null? d)\n\t\t\t\t\t\t      (list 0)\n\t\t\
    \t\t\t\t      (let ((n (length d)))\n\t\t\t\t\t\t\t(if (> n 1)\n\t\t\t\t\t\t\t\
    \  (list (* (car d) (cdr d)))\n\t\t\t\t\t\t\t  (let ((d (car d)))\n\t\t\t\t\t\t\
    \t    (cdr d)\n\t\t\t\t\t\t\t    (if (null? d)\n\t\t\t\t\t\t\t      (list 0)\n\
    \t\t\t\t\t\t\t      ", "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n\
    \      (if (> n 1)\n        (list (* (car xs) (cdr xs)))\n        (let ((derivative-of-xs\
    \ (cdr xs)))\n          (if (null? derivative-of-xs)\n            (list 0)\n \
    \           (let ((n (length derivative-of-xs)))\n              (if (> n 1)\n\
    \                (list (* (car derivative-of-xs) (car xs))\n                 \
    \    (* (car derivative-of-xs) (cdr xs))\n                     (* (car derivative-of-xs)\
    \ (car xs)\n                         (* (cdr derivative-of-xs) (cdr xs))))\n \
    \               (let ((derivative-of-xs (cdr derivative-of-xs)))\n           \
    \       (if (null? derivative-of-xs)\n                    (list 0)\n         \
    \           (let ((n (length derivative-of-xs)))\n                      (if (>\
    \ n 1)\n                        (list (* (car derivative-of-xs) (car xs))\n  \
    \                           (* (car derivative-of-xs) (cdr xs))\n            \
    \                 (* (car derivative-of-xs) (car xs)\n                       \
    \          (* (cdr derivative-of-xs) (cdr xs))))\n                        (list\
    \ 0))))))))))))))))\n", "  (if (null? xs)\n    (list 0)\n    (let ((n (length\
    \ xs)))\n      (if (zero? n)\n        (list 0)\n        (let ((derivative-n (derivative\
    \ (cdr xs))))\n          (let ((derivative-n-1 (derivative-n (car xs))))\n   \
    \         (if (null? derivative-n-1)\n              (list 0)\n              (let\
    \ ((derivative-n-2 (derivative-n-1 (cdr xs))))\n                (let ((derivative-n-2-1\
    \ (derivative-n-2 (car xs))))\n                  (if (null? derivative-n-2-1)\n\
    \                    (list 0)\n                    (let ((derivative-n-3 (derivative-n-2-1\
    \ (cdr xs))))\n                      (let ((derivative-n-3-1 (derivative-n-3 (car\
    \ xs))))\n                        (if (null? derivative-n-3-1)\n             \
    \             (list 0)\n                          (let ((derivative-n-4 (derivative-n-3-1\
    \ (cdr xs))))\n                            (let ((derivative-n-4-1 (derivative-n-4\
    \ (car xs))))\n                              (if (null? derivative-n-4-1)\n  \
    \                              (list 0)\n                                (let\
    \ ((derivative-n-5 (derivative-n-4-1 (cdr xs))))\n                           \
    \       (let ((derivative-n-5-1 (derivative-n-5 (car xs))))\n                \
    \                    (if (null? derivative-n-5-1)\n                          \
    \            (list 0)\n                                      (let ((derivative-n-6\
    \ (derivative-n-5-1 (cdr xs))))\n                                        (let\
    \ ((derivative-n-6-1 (derivative-n-6 (car xs))))\n                           \
    \               (if (null? derivative-n-6-1)\n                               \
    \             (list 0)\n                                            (let ((derivative-n",
  "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n\
    \        (list (* (car xs) (cdr xs)))\n        (list (* (car xs) (car (cdr xs))))))))\n",
  "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n\
    \        (list (car xs) (* (cdr xs) (car (cdr xs))))\n      (let ((p (car xs)))\n\
    \        (if (null? (cdr xs))\n          (list p)\n          (let ((q (car (cdr\
    \ xs))))\n            (list (car p) (* (cdr p) (car q)))))\n      (derivative\
    \ (cdr xs))))))\n", "  (if (null? xs)\n    (list)\n    (list (car xs) (cdr xs))))\n\
    \n;; xs represent coefficients of a polynomial.\n;; xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n;; Return derivative of this polynomial in the same form.\n;;\
    \ >>> (derivative (list 3 1 2 4 5))\n;; (list 1 4 12 20)\n;; >>> (derivative (list\
    \ 1 2 3))\n;; (list 2 6)", "  (if (null? xs)\n    (list 0)\n    (let ((n (length\
    \ xs)))\n      (if (> n 1)\n\t  (list)\n\t  (let ((derivative-n (derivative (cdr\
    \ xs))))\n\t    (let ((derivative-n-1 (derivative-n (car xs))))\n\t      (let\
    \ ((derivative-n-2 (derivative-n-1 (cdr xs))))\n\t\t(let ((derivative-n-3 (derivative-n-2\
    \ (car xs))))\n\t\t  (let ((derivative-n-4 (derivative-n-3 (cdr xs))))\n\t\t \
    \   (let ((derivative-n-5 (derivative-n-4 (car xs))))\n\t\t      (let ((derivative-n-6\
    \ (derivative-n-5 (cdr xs))))\n\t\t\t(let ((derivative-n-7 (derivative-n-6 (car\
    \ xs))))\n\t\t\t  (let ((derivative-n-8 (derivative-n-7 (cdr xs))))\n\t\t\t  \
    \  (let ((derivative-n-9 (derivative-n-8 (car xs))))\n\t\t\t      (let ((derivative-n-10\
    \ (derivative-n-9 (cdr xs))))\n\t\t\t\t(let ((derivative-n-11 (derivative-n-10\
    \ (car xs))))\n\t\t\t\t  (let ((derivative-n-12 (derivative-n-11 (cdr xs))))\n\
    \t\t\t\t    (let ((derivative-n-13 (derivative-n-12 (car xs))))\n\t\t\t\t    \
    \  (let ((derivative-n-14 (derivative-n-13 (cdr xs))))\n\t\t\t\t\t(let ((derivative-n-15\
    \ (derivative-n-14 (car xs))))\n\t\t\t\t\t  (let ((derivative-n-16 (derivative-n-15\
    \ (cdr xs))))\n\t\t\t\t\t    (let ((derivative-n-17 (derivative-n-16 (car xs))))\n\
    \t\t\t\t\t      (let ((der", "  (if (null? xs)\n    (list 0)\n    (let ((n (length\
    \ xs)))\n      (if (> n 1)\n        (list (* (car xs) (cdr xs)))\n        (list\
    \ (* (car xs) (car (cdr xs))))))))\n", "  (if (null? xs)\n    (list 0)\n    (let\
    \ ((n (length xs)))\n      (list (derivative (cdr xs))\n           (derivative\
    \ (cdr (cdr xs)))))))\n", "  (if (null? xs)\n    (list 0)\n    (let ((n (length\
    \ xs)))\n      (if (= n 1)\n        (list)\n        (let ((derivative (make-vector\
    \ n -1)))\n          (let ((i 0))\n            (while (< i n)\n              (setf\
    \ (aref derivative i)\n                (+ (aref xs i)\n                     (*\
    \ (aref xs (1+ i))\n                          (aref xs (2+ i)))))\n          \
    \    (setf (aref derivative i)\n                (+ (aref derivative i)\n     \
    \                (* (aref xs (1+ i))\n                          (aref xs (2+ i))))))\n\
    \            (setf (aref derivative i)\n              (+ (aref derivative i)\n\
    \                     (* (aref xs (1+ i))\n                          (aref xs\
    \ (2+ i))))))\n          (return (cons (car derivative)\n                   (derivative\
    \ (cdr derivative))))))))))\n", "  (if (null? xs)\n    (list 0)\n    (list (car\
    \ xs) + (cdr xs) * (car (cdr xs))))\n)\n\n;; xs represent coefficients of a polynomial.\n\
    ;; xs[0] + xs[1] * x + xs[2] * x^2 + ....\n;; Return derivative of this polynomial\
    \ in the same form.\n;; >>> (derivative (list 3 1 2 4 5))\n;; (list 1 4 12 20)\n\
    ;; >>> (derivative (list 1 2 3))\n;; (list 2 6)", "  (if (null? xs)\n    (list\
    \ 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n        (list (* (car xs)\
    \ (cdr xs)))\n        (let ((derivative-of-xs (cdr xs)))\n          (if (null?\
    \ derivative-of-xs)\n            (list 0)\n            (let ((n (length derivative-of-xs)))\n\
    \              (if (> n 1)\n                (list (* (car derivative-of-xs) (car\
    \ xs))\n                     (* (car derivative-of-xs) (cdr xs))\n           \
    \          (* (car derivative-of-xs) (car (cdr xs)))\n                     (*\
    \ (car derivative-of-xs) (cdr (cdr xs))))\n                (let ((derivative-of-xs\
    \ (cdr derivative-of-xs)))\n                  (if (null? derivative-of-xs)\n \
    \                   (list 0)\n                    (let ((n (length derivative-of-xs)))\n\
    \                      (if (> n 1)\n                        (list (* (car derivative-of-xs)\
    \ (car xs))\n                             (* (car derivative-of-xs) (cdr xs))\n\
    \                             (* (car derivative-of-xs) (car (cdr xs)))\n    \
    \                         (* (car derivative-of-xs) (cdr (cdr xs))))\n       \
    \                 (let ((derivative-of-xs (cdr derivative-of-xs)))\n         \
    \                 (if (null? derivative-of-xs)\n                            (list\
    \ 0)\n                            (let ((n (length derivative-of-xs)))\n     \
    \                         (if (> n 1)\n                                (list (*\
    \ (car derivative-of-xs) (car xs))\n                                     (* (car\
    \ derivative-of-xs) (cdr xs))\n                                     (* (car derivative-of-xs)\
    \ (car (cdr xs))\n                                       (* (car derivative-of-xs)\
    \ (cdr (cdr xs))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
  "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n\
    \        (list)\n        (let ((derivative-n (derivative (cdr xs))))\n       \
    \   (let ((derivative-n-1 (derivative-n (car xs))))\n            (list (car xs)\
    \ (derivative-n-1) (derivative-n-1) (derivative-n)\n                         \
    \             (derivative-n) (derivative-n-1))))))))\n", "  (if (null? xs)\n \
    \   (list 0)\n    (let ((n (length xs)))\n      (if (= n 1)\n        (list)\n\
    \        (let ((derivative-n (derivative (cdr xs))))\n          (let ((derivative-n-1\
    \ (derivative-n (car xs))))\n            (cons (car xs) (derivative-n-1 (cdr xs))))))))\n",
  "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n\
    \        (list (* (car xs) (cdr xs)))\n        (let ((derivative-of-coefficient\
    \ (lambda (x) (* (car x) (cdr x))))\n              (derivative-of-coefficient-list\
    \ (lambda (xs) (derivative-of-coefficient (car xs)))))\n          (let ((derivative-of-coefficient-list-of-one\
    \ (lambda (x) (derivative-of-coefficient-list (cons x (cdr x)))))\n          \
    \      (derivative-of-coefficient-list-of-two (lambda (x y) (derivative-of-coefficient-list\
    \ (cons x (cons y (cdr x)))))))\n            (let ((derivative-of-coefficient-list-of-three\
    \ (lambda (x y z) (derivative-of-coefficient-list (cons x (cons y (cons z (cdr\
    \ x))))))))\n              (let ((derivative-of-coefficient-list-of-four (lambda\
    \ (x y z a) (derivative-of-coefficient-list (cons x (cons y (cons z (cons a (cdr\
    \ x))))))))\n                    (derivative-of-coefficient-list-of-five (lambda\
    \ (x y z a b) (derivative-of-coefficient-list (cons x (cons y (cons z (cons a\
    \ (cons b (cdr x))))))))))))\n            (let ((derivative-of-coefficient-list-of-six\
    \ (lambda (x y z a b c) (derivative-of-coefficient-list (cons x (cons y (cons\
    \ z (cons a (cons b (cons c (cdr x))))))))))))\n              (let ((derivative-of-coefficient-list-of-seven\
    \ (lambda (x y z a b c d) (derivative-of-coefficient-list (cons x (cons y (cons\
    \ z (cons a (cons b (cons c (cons d (cdr x))))))))))))\n                  (let\
    \ ((derivative-of", "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n\
    \      (if (= n 1)\n        (list)\n        (let ((derivative (make-vector n -1)))\n\
    \          (let ((i 0))\n            (do ((i (+ i 1)))\n              ((< i n))\n\
    \              (setf (vector-ref derivative i)\n                (vector-ref xs\
    \ i))\n              (setf (vector-ref derivative i)\n                (vector-ref\
    \ derivative i))\n              (setf (vector-ref derivative i)\n            \
    \    (vector-ref derivative i))\n              (setf (vector-ref derivative i)\n\
    \                (vector-ref derivative i))\n              (setf (vector-ref derivative\
    \ i)\n                (vector-ref derivative i))\n              (setf (vector-ref\
    \ derivative i)\n                (vector-ref derivative i))\n              (setf\
    \ (vector-ref derivative i)\n                (vector-ref derivative i))\n    \
    \          (setf (vector-ref derivative i)\n                (vector-ref derivative\
    \ i))\n              (setf (vector-ref derivative i)\n                (vector-ref\
    \ derivative i))\n              (setf (vector-ref derivative i)\n            \
    \    (vector-ref derivative i))\n              (setf (vector-ref derivative i)\n\
    \                (vector-ref derivative i))\n              (setf (vector-ref derivative\
    \ i)\n                (vector-ref derivative i))\n              (setf (vector-ref\
    \ derivative i)\n                (vector-ref derivative i))\n              (setf\
    \ (vector-ref derivative i)\n                (vector-ref derivative i))\n    \
    \          (setf (vector-ref derivative i)\n                (vector-ref derivative\
    \ i))\n              (setf (vector-ref derivative i)\n                (vector-ref\
    \ derivative i))\n              (setf (vector-ref derivative i)\n            \
    \    (vector-ref derivative i))\n              (setf (vector-ref derivative i)\n\
    \                (vector-ref derivative i))\n              (setf (vector-ref derivative\
    \ i)\n                (vector-ref derivative i))\n              (setf (vector-ref\
    \ derivative i)\n                (vector-ref derivative i))\n              (setf\
    \ (vector-ref derivative i", "  (if (null? xs)\n    (list 0)\n    (let ((n (length\
    \ xs)))\n      (if (> n 1)\n        (list (* (car xs) (cdr xs)))\n        (let\
    \ ((derivative-of-xs (cdr xs)))\n          (if (null? derivative-of-xs)\n    \
    \        (list 0)\n            (let ((n (length derivative-of-xs)))\n        \
    \      (if (> n 1)\n                (list (* (car derivative-of-xs) (cdr derivative-of-xs)))\n\
    \                (let ((derivative-of-derivative-of-xs (cdr derivative-of-xs)))\n\
    \                  (if (null? derivative-of-derivative-of-xs)\n              \
    \      (list 0)\n                    (let ((n (length derivative-of-derivative-of-xs)))\n\
    \                      (if (> n 1)\n                        (list (* (car derivative-of-derivative-of-xs)\n\
    \                                (cdr derivative-of-derivative-of-xs)))\n    \
    \                    (let ((derivative-of-derivative-of-derivative-of-xs\n   \
    \                            (cdr derivative-of-derivative-of-xs)))\n        \
    \                  (if (null? derivative-of-derivative-of-derivative-of-xs)\n\
    \                            (list 0)\n                            (let ((n (length\
    \ derivative-of-derivative-of-derivative-of-xs)))\n                          \
    \    (if (> n 1)\n                                (list (* (car derivative-of-derivative-of-derivative-of-xs)\n\
    \                                        (cdr derivative-of-derivative-of-derivative-of-xs))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
  "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n\
    \        (list (* (car xs) (cdr xs)))\n        (let ((i (1)))\n          (if (>\
    \ i n)\n            (list 0)\n            (let ((d (car xs)))\n              (let\
    \ ((k (1)))\n                (if (> k n)\n                  (list 0)\n       \
    \           (let ((r (car (cdr xs))))\n                    (list (* (- d r) (*\
    \ (car (cdr (cdr xs))) (cdr (cdr (cdr xs))))))))))))))))))\n", "  (if (null? xs)\n\
    \    (list)\n    (cons (car xs) (derivative (cdr xs))))\n)\n", "  (if (null? xs)\n\
    \    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n        (list (car\
    \ xs) (* (cdr xs) (car xs)))\n        (list (car xs) (* (cdr xs) (cdr xs)))))\n\
    \  )\n)\n", "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n    \
    \  (if (> n 1)\n        (list)\n        (let ((derivative (make-vector n -1)))\n\
    \          (let ((i 0))\n            (do ((i (+ i 1)))\n              ((< i n))\n\
    \              (setf (aref derivative i)\n                (+ (aref xs i)\n   \
    \                (* (aref xs (- i 1))\n                        (aref xs i))))))\n\
    \          (return (cdr derivative)))))))\n", "  (if (null? xs)\n    (list 0)\n\
    \    (let ((n (length xs)))\n      (if (> n 1)\n        (list (* (car xs) (cdr\
    \ xs)))\n        (list (* (car xs) (car (cdr xs))))))))\n", "  (if (null? xs)\n\
    \    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n\t  (list (car xs)\
    \ (* (cdr xs) (car xs)))\n\t  (list (car xs) (* (cdr xs) (cdr xs)))))))\n", " \
    \ (if (null? xs)\n    (list 0)\n    (list (car xs) + (cdr xs) * (car (cdr xs))))\n\
    )\n\n;; xs represent coefficients of a polynomial.\n;; xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n;; Return derivative of this polynomial in the same form.\n;;\
    \ >>> (derivative (list 3 1 2 4 5))\n;; (list 1 4 12 20)\n;; >>> (derivative (list\
    \ 1 2 3))\n;; (list 2 6)", "  (if (null? xs)\n    (list 0)\n    (let ((n (length\
    \ xs)))\n      (list (derivative (cdr xs))\n           (derivative (cdr (cdr xs)))))))\n",
  "  (if (null? xs)\n    (list)\n    (list (car xs) (+ (cdr xs) (car xs))))\n)\n",
  "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n\
    \t  (list (* (- n) 1) (* (- n) 2) (* (- n) 3) (* (- n) 4) (* (- n) 5))\n\t  (let\
    \ ((i 0))\n\t    (while (< i n)\n\t      (let ((j (modulo i n)))\n\t\t(set! i\
    \ (modulo i (+ j 1))))\n\t      (set! i j))\n\t    (list (* i 1) (* i 2) (* i\
    \ 3) (* i 4) (* i 5)))))))\n", "  (if (null? xs)\n    (list 0)\n    (let ((n (length\
    \ xs)))\n      (if (> n 1)\n        (list (car xs) (* (cdr xs) (car (cdr xs))))\n\
    \      (let ((derivative-of-xs (cdr xs)))\n        (if (> n 2)\n          (list\
    \ (car (derivative-of-xs)) (* (car (derivative-of-xs)) (car (cdr (derivative-of-xs))))\n\
    \             (car (derivative-of-xs)) (* (car (derivative-of-xs)) (car (cdr (derivative-of-xs))))\n\
    \             (car (derivative-of-xs)) (* (car (derivative-of-xs)) (car (cdr (derivative-of-xs))))\n\
    \             (car (derivative-of-xs)) (* (car (derivative-of-xs)) (car (cdr (derivative-of-xs))))\n\
    \             (car (derivative-of-xs)) (* (car (derivative-of-xs)) (car (cdr (derivative-of-xs))))\n\
    \             (car (derivative-of-xs)) (* (car (derivative-of-xs)) (car (cdr (derivative-of-xs))))\n\
    \             (car (derivative-of-xs)) (* (car (derivative-of-xs)) (car (cdr (derivative-of-xs))))\n\
    \             (car (derivative-of-xs)) (* (car (derivative-of-xs)) (car (cdr (derivative-of-xs))))\n\
    \             (car (derivative-of-xs)) (* (car (derivative-of-xs)) (car (cdr (derivative-of-xs))))\n\
    \             (car (derivative-of-xs)) (* (car (derivative-of-xs)) (car (cdr (derivative-of-xs))))\n\
    \             (car (derivative-of-xs)) (* (car (derivative-of-xs)) (car (cdr (derivative-of",
  "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n\
    \t  (let ((derivative (make-vector n -1)))\n\t    (let ((i 0))\n\t      (do ((i\
    \ (+ i 1)))\n\t\t  ((= i n))\n\t\t  (setf (vector-ref derivative i)\n\t\t   (vector-ref\
    \ xs i)))\n\t      (setf (vector-ref derivative i)\n\t       (vector-ref derivative\
    \ i))))\n      (let ((i 0))\n\t(do ((i (+ i 1)))\n\t  ((= i n))\n\t  (setf (vector-ref\
    \ derivative i)\n\t   (vector-ref derivative i) * (vector-ref xs i)))))))\n",
  "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (list (derivative-nth\
    \ xs n)\n           (derivative-nth xs (sub1 n))))))\n", "  (if (null? xs)\n \
    \   (list)\n    (let ((n (length xs)))\n      (if (>= n 1)\n        (list)\n \
    \       (let ((derivative-n (derivative (cdr xs))))\n          (let ((derivative-n-1\
    \ (derivative-n (car xs))))\n            (list (car xs) (derivative-n-1) (derivative-n-1)\
    \ (derivative-n)\n                         (derivative-n))))))))\n", "  (if (null?\
    \ xs)\n    (list 0)\n    (list (car xs) + (cdr xs) * (car (cdr xs))))\n)\n", " \
    \ (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (null? (cdr\
    \ xs))\n        (list (car xs))\n        (let ((derivative-of-xs (car xs)))\n\
    \          (if (null? derivate-of-xs)\n            (list 0)\n            (let\
    \ ((n (length derivate-of-xs)))\n              (if (null? (cdr derivate-of-xs))\n\
    \                (list (car derivate-of-xs))\n                (let ((derivative-of-derivative-of-xs\
    \ (car derivate-of-xs)))\n                  (if (null? derivative-of-derivative-of-xs)\n\
    \                    (list 0)\n                    (let ((n (length derivative-of-derivative-of-xs)))\n\
    \                      (if (null? (cdr derivative-of-derivative-of-xs))\n    \
    \                    (list (car derivative-of-derivative-of-xs))\n           \
    \             (let ((derivative-of-derivative-of-derivative-of-xs (car derivative-of-derivative-of-xs)))\n\
    \                          (if (null? derivative-of-derivative-of-derivative-of-xs)\n\
    \                            (list 0)\n                            (let ((n (length\
    \ derivative-of-derivative-of-derivative-of-xs)))\n                          \
    \    (if (null? (cdr derivative-of-derivative-of-derivative-of-xs))\n        \
    \                        (list (car derivative-of-derivative-of-derivative-of-xs))\n\
    \                                (let ((derivative-of-derivative-of-derivative-of-derivative-of-xs\
    \ (car derivative-of-derivative-of-derivative-of-xs)))\n                     \
    \             (if (null? derivative-of-derivative-of-derivative-of-derivative-of-xs)\n\
    \                                    (list 0)\n                              \
    \      (let ((n (length derivative-of-derivative-of-derivative-of-derivative-of-",
  "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (list (derivative\
    \ (cdr xs))\n\t(if (> n 1)\n\t  (list 0)\n\t  (+ (car xs) (derivative (cdr xs))))))))\n",
  "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (= n 1)\n\
    \        (list)\n        (let ((derivative-n (derivative (car xs))))\n       \
    \   (let ((derivative-n-1 (derivative-n (cdr xs))))\n            (cons (car xs)\
    \ (derivative-n-1 (cdr xs))))))))\n", "  (if (null? xs)\n    (list 0)\n    (list\
    \ (car xs) + (cdr xs) * (car (cdr xs))))\n)\n\n;; xs represent coefficients of\
    \ a polynomial.\n;; xs[0] + xs[1] * x + xs[2] * x^2 + ....\n;; Return derivative\
    \ of this polynomial in the same form.\n;; >>> (derivative (list 3 1 2 4 5))\n\
    ;; (list 1 4 12 20)\n;; >>> (derivative (list 1 2 3))\n;; (list 2 6)", "  (if\
    \ (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n  \
    \      (list (* (car xs) (cdr xs)))\n        (list (* (car xs) (car (cdr xs))))))))\n",
  "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n\
    \        (list (* (car xs) (cdr xs)))\n        (let ((derivative-of-xs (cdr xs)))\n\
    \          (if (null? derivative-of-xs)\n            (list 0)\n            (let\
    \ ((n (length derivative-of-xs)))\n              (if (> n 1)\n               \
    \ (list (* (car derivative-of-xs) (car xs))\n                     (* (car derivative-of-xs)\
    \ (cdr xs))\n                     (* (car derivative-of-xs) (car xs)\n       \
    \                  (* (cdr derivative-of-xs) (cdr xs))))\n                (let\
    \ ((derivative-of-xs (cdr derivative-of-xs)))\n                  (if (null? derivative-of-xs)\n\
    \                    (list 0)\n                    (let ((n (length derivative-of-xs)))\n\
    \                      (if (> n 1)\n                        (list (* (car derivative-of-xs)\
    \ (car xs))\n                             (* (car derivative-of-xs) (cdr xs))\n\
    \                             (* (car derivative-of-xs) (car xs)\n           \
    \                      (* (cdr derivative-of-xs) (cdr xs))))\n               \
    \         (let ((derivative-of-xs (cdr derivative-of-xs)))\n                 \
    \         (if (null? derivative-of-xs)\n                            (list 0)\n\
    \                            (let ((n (length derivative-of-xs)))\n          \
    \                    (if (> n 1)\n                                (list (* (car\
    \ derivative-of-xs) (car xs))\n                                      (* (car derivative-of-xs)\
    \ (cdr xs))\n                                      (* (car derivative-of-xs) (car\
    \ xs)\n                                          (* (cdr derivative-of-xs) (cdr\
    \ xs))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
  "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n\
    \        (list (* (car xs) (cdr xs)))\n        (list (* (car xs) (car (cdr xs))))))))\n",
  "  (if (null? xs)\n    (list 0)\n    (list (car xs) + (cdr xs) * (car xs))))\n",
  "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n\
    \t(list)\n\t(let ((derivative (make-vector n -1)))\n\t  (let ((i 0))\n\t    (while\
    \ (< i n)\n\t      (set! derivative (vector-set! derivative i (- (vector-ref xs\
    \ i) (vector-ref xs (1+i)))))\n\t      (set! i (1+i)))\n\t    derivative)))\n\
    \      (vector-set! xs 0 (vector-ref xs (1+n))))))\n", "  (if (null? xs)\n   \
    \ (list 0)\n    (let ((n (length xs)))\n      (if (>= n 1)\n        (list 1)\n\
    \        (let ((derivative-n (derivative (cdr xs))))\n          (let ((derivative-n-1\
    \ (derivative-n (car xs))))\n            (let ((derivative-n-2 (derivative-n-1\
    \ (cdr xs))))\n              (let ((derivative-n-3 (derivative-n-2 (car xs))))\n\
    \                (let ((derivative-n-4 (derivative-n-3 (cdr xs))))\n         \
    \         (let ((derivative-n-5 (derivative-n-4 (car xs))))\n                \
    \    (let ((derivative-n-6 (derivative-n-5 (cdr xs))))\n                     \
    \ (let ((derivative-n-7 (derivative-n-6 (car xs))))\n                        (let\
    \ ((derivative-n-8 (derivative-n-7 (cdr xs))))\n                          (let\
    \ ((derivative-n-9 (derivative-n-8 (car xs))))\n                            (let\
    \ ((derivative-n-10 (derivative-n-9 (cdr xs))))\n                            \
    \  (let ((derivative-n-11 (derivative-n-10 (car xs))))\n                     \
    \           (let ((derivative-n-12 (derivative-n-11 (cdr xs))))\n            \
    \                      (let ((derivative-n-13 (derivative-n-12 (car xs))))\n \
    \                                   (let ((derivative-n-14 (derivative-n-13 (cdr\
    \ xs))))\n                                      (let ((derivative-n-15 (derivative-n-14\
    \ (car xs))))\n                                        (let ((derivative-n-16\
    \ (derivative-n-15 (cdr xs))))\n                                          (let\
    \ ((derivative-n-17 (derivative-n-16 (car xs))))\n                           \
    \                 (let ((", "  (if (null? xs)\n    (list)\n    (list (car xs)\
    \ (cdr xs))))\n\n;; xs represent coefficients of a polynomial.\n;; xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n;; Return derivative of this polynomial in the same\
    \ form.\n;; >>> (derivative (list 3 1 2 4 5))\n;; (list 1 4 12 20)\n;; >>> (derivative\
    \ (list 1 2 3))\n;; (list 2 6)", "  (if (null? xs)\n    (list 0)\n    (let ((n\
    \ (length xs)))\n      (if (> n 1)\n\t(list)\n\t(let ((i n))\n\t  (list (list\
    \ (derivative (cdr xs)) (car xs) (car (cdr xs)) (car (cdr (cdr xs)))))))))\n",
  "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n\
    \t  (list (* (car xs) (cdr xs)))\n\t  (list (* (car xs) (car (cdr xs))))))))\n",
  "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n      (list (derivative\
    \ (cdr xs))\n\t      (derivative (cdr (cdr xs)))))))\n", "  (if (null? xs)\n \
    \   (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n        (list)\n\
    \        (let ((derivative (make-vector n -1)))\n          (let ((i 0))\n    \
    \        (do ((i (+ i 1)))\n              ((< i n))\n              (setf (aref\
    \ derivative i)\n                (+ (aref xs i)\n                   (* (aref xs\
    \ (- i 1))\n                        (aref xs i))))))\n          (return (vector-ref\
    \ derivative 0)\n             (vector-set! derivative 0\n               (vector-ref\
    \ derivative (- n 1))))))))))\n", "  (if (null? xs)\n    (list 0)\n    (let ((n\
    \ (length xs)))\n      (list (derivative (cdr xs))\n\t      (derivative (cdr (cdr\
    \ xs)))))))\n", "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n\
    \      (if (> n 1)\n        (list (* (car xs) (cdr xs)))\n        (let ((derivative-n\
    \ (derivative (cdr xs))))\n          (if (>= n 2)\n            (list (car xs)\
    \ (* (car xs) (car derivative-n)))\n            (list (car xs) (* (car derivative-n)\
    \ (cdr xs))))))))\n", "  (if (null? xs)\n    (list 0)\n    (let ((n (length xs)))\n\
    \      (if (zero? n)\n        (list 0)\n        (let ((derivative-n (derivative\
    \ (cdr xs))))\n          (let ((derivative-n-1 (derivative-n (car xs))))\n   \
    \         (let ((derivative-n-2 (derivative-n-1 (cdr xs))))\n              (let\
    \ ((derivative-n-3 (derivative-n-2 (car xs))))\n                (let ((derivative-n-4\
    \ (derivative-n-3 (cdr xs))))\n                  (let ((derivative-n-5 (derivative-n-4\
    \ (car xs))))\n                    (let ((derivative-n-6 (derivative-n-5 (cdr\
    \ xs))))\n                      (let ((derivative-n-7 (derivative-n-6 (car xs))))\n\
    \                        (let ((derivative-n-8 (derivative-n-7 (cdr xs))))\n \
    \                         (let ((derivative-n-9 (derivative-n-8 (car xs))))\n\
    \                            (let ((derivative-n-10 (derivative-n-9 (cdr xs))))\n\
    \                              (let ((derivative-n-11 (derivative-n-10 (car xs))))\n\
    \                                (let ((derivative-n-12 (derivative-n-11 (cdr\
    \ xs))))\n                                  (let ((derivative-n-13 (derivative-n-12\
    \ (car xs))))\n                                    (let ((derivative-n-14 (derivative-n-13\
    \ (cdr xs))))\n                                      (let ((derivative-n-15 (derivative-n-14\
    \ (car xs))))\n                                        (let ((derivative-n-16\
    \ (derivative-n-15 (cdr xs))))\n                                          (let\
    \ ((derivative-n-17 (derivative-n-16 (car xs))))\n                           \
    \                 (let ((", "  (if (null? xs)\n    (list 0)\n    (let ((n (length\
    \ xs)))\n      (if (zero? n)\n        (list 0)\n        (let ((derivative (make-vector\
    \ n -1 0)))\n          (let ((i 0))\n            (do ((i (+ i 1)))\n         \
    \     ((< i n))\n              (setf (vector-ref derivative i)\n             \
    \   (vector-ref xs i)))\n            derivative)))))\n)", "  (if (null? xs)\n\
    \    (list 0)\n    (let ((n (length xs)))\n      (if (> n 1)\n        (list (*\
    \ (car xs) (cdr xs)))\n        (let ((derivative-of-xs (cdr xs)))\n          (if\
    \ (null? derivative-of-xs)\n            (list 0)\n            (let ((n (length\
    \ derivative-of-xs)))\n              (if (> n 1)\n                (list (* (car\
    \ derivative-of-xs) (cdr derivative-of-xs)))\n                (let ((derivative-of-derivative-of-xs\
    \ (cdr derivative-of-xs)))\n                  (if (null? derivative-of-derivative-of-xs)\n\
    \                    (list 0)\n                    (let ((n (length derivative-of-derivative-of-xs)))\n\
    \                      (if (> n 1)\n                        (list (* (car derivative-of-derivative-of-xs)\n\
    \                                (cdr derivative-of-derivative-of-xs)))\n    \
    \                    (let ((derivative-of-derivative-of-derivative-of-xs\n   \
    \                            (cdr derivative-of-derivative-of-xs)))\n        \
    \                  (if (null? derivative-of-derivative-of-derivative-of-xs)\n\
    \                            (list 0)\n                            (let ((n (length\
    \ derivative-of-derivative-of-derivative-of-xs)))\n                          \
    \    (if (> n 1)\n                                (list (* (car derivative-of-derivative-of-derivative-of-xs)\n\
    \                                        (cdr derivative-of-derivative-of-derivative-of-xs))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
