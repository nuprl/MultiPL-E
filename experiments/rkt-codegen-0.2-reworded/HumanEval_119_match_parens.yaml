name: HumanEval_119_match_parens
language: rkt
prompt: "#lang racket\n\n;; You are given a list of two strings, both strings consist\
  \ of open\n;; parentheses '(' or close parentheses ')' only.\n;; Your job is to\
  \ check if it is possible to concatenate the two strings in\n;; some order, that\
  \ the resulting string will be good.\n;; A string S is considered to be good if\
  \ and only if all parentheses in S\n;; are balanced. For example: the string '(())()'\
  \ is good, while the string\n;; '())' is not.\n;; Return 'Yes' if there's a way\
  \ to make a good string, and return 'No' otherwise.\n;; Examples:\n;; >>> (match_parens\
  \ (list \"()(\" \")\"))\n;; \"Yes\"\n;; >>> (match_parens (list \")\" \")\"))\n\
  ;; \"No\"\n(define (match_parens lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate match_parens))\n\
  \    (check-equal? (candidate (list \"()(\" \")\")) \"Yes\")\n    (check-equal?\
  \ (candidate (list \")\" \")\")) \"No\")\n    (check-equal? (candidate (list \"\
  (()(())\" \"())())\")) \"No\")\n    (check-equal? (candidate (list \")())\" \"(()()(\"\
  )) \"Yes\")\n    (check-equal? (candidate (list \"(())))\" \"(()())((\")) \"Yes\"\
  )\n    (check-equal? (candidate (list \"()\" \"())\")) \"No\")\n    (check-equal?\
  \ (candidate (list \"(()(\" \"()))()\")) \"Yes\")\n    (check-equal? (candidate\
  \ (list \"((((\" \"((())\")) \"No\")\n    (check-equal? (candidate (list \")(()\"\
  \ \"(()(\")) \"No\")\n    (check-equal? (candidate (list \")(\" \")(\")) \"No\"\
  )\n    (check-equal? (candidate (list \"(\" \")\")) \"Yes\")\n    (check-equal?\
  \ (candidate (list \")\" \"(\")) \"Yes\")\n))\n\n(test-humaneval)"
completions: ["  (cond\n    ((null? lst) #t)\n    (else\n      (let ((p1 (car lst)))\n\
    \        (if (null? (cdr lst))\n            (eq? p1 \")\")\n            (else\n\
    \              (let ((p2 (car (cdr ldr))))\n                (if (eq? p1 \"(\"\
    \ )\n                    (eq? p2 \")\")\n                    (else\n         \
    \             (eq? p1 p2))))))))))\n", "  (cond\n    ((null? lst) \"Yes\")\n \
    \   ((null? (cdr lst)) \"No\")\n    (else\n      (let ((p1 (car lst)))\n     \
    \   (if (null? (cdr p1))\n          (match_parens (cdr lst))\n          (else\n\
    \            (let ((p2 (car p1)))\n              (if (null? (cdr p2))\n      \
    \          (match_parens (cdr lst))\n                (else\n                 \
    \ (match_parens (cdr p1) (cdr lst))))))))))\n", "  (cond\n    ((null? lst) \"\
    Yes\")\n    (else\n      (let ((p (car lst)))\n        (match_parens (cdr lst))\n\
    \        (cond\n          ((null? p) \"Yes\")\n          (else\n            (let\
    \ ((q (car p)))\n              (match_parens (cdr p))\n              (cond\n \
    \               ((null? q) \"Yes\")\n                (else\n                 \
    \ (let ((r (car q)))\n                    (match_parens (cdr q))\n           \
    \         (cond\n                      ((null? r) \"Yes\")\n                 \
    \     (else\n                        (let ((s (car r)))\n                    \
    \      (match_parens (cdr r))\n                          (cond\n             \
    \               ((null? s) \"Yes\")\n                            (else\n     \
    \                         (let ((t (car s)))\n                               \
    \ (match_parens (cdr s))\n                                (cond\n            \
    \                      ((null? t) \"Yes\")\n                                 \
    \ (else\n                                    (let ((u (car t)))\n            \
    \                          (match_parens (cdr t))\n                          \
    \            (cond\n                                        ((null? u) \"Yes\"\
    )\n                                        (else\n                           \
    \               (let ((v (car u)))\n                                         \
    \   (match_parens (cdr u))\n                                            (cond\n\
    \                                              ((null? v) \"Yes\")\n         \
    \                                     (else\n                                \
    \                (let ((w (car v)))\n                                        \
    \          (match_parens (cdr v))\n                                          \
    \        (cond\n                                                    ((null? w)\
    \ \"Yes\")\n                                                    (else\n      \
    \                                                (let ((x (car w)))\n        \
    \                                                (match_parens (cdr w))\n    \
    \                                                    (cond\n                 \
    \                                         ((null? x) \"Yes\")\n              \
    \                                            (else\n                         \
    \                                  (let ((y (car x)))\n                      \
    \                                        (match_parens (cdr x))\n            \
    \                                                  (cond\n                   \
    \                                             ((null? y) \"", "  (cond\n    ((null?\
    \ lst) \"Yes\")\n    (else\n      (let ((l (car lst)))\n        (if (null? (cdr\
    \ lst))\n          \"No\"\n          (match_parens (cdr lst))))))\n", "  (cond\n\
    \    ((null? lst) \"Yes\")\n    (else\n      (let ((p1 (car lst)))\n        (if\
    \ (null? (cdr lst))\n          \"No\"\n          (match_parens (cdr lst)))))))\n",
  "  (cond\n    ((null? lst) #t)\n    (else\n      (let ((p (car lst)))\n        (match_parens\
    \ (cdr lst))\n        (cond\n          ((null? p) #f)\n          (else\n     \
    \       (let ((q (car p)))\n              (match_parens (cdr p))\n           \
    \   (cond\n                ((null? q) #f)\n                (else\n           \
    \       (cond\n                    ((eq? q '(')\n                      (eq? (car\
    \ (cdr q)) '('))\n                    (else\n                      (eq? q ')')\n\
    \                      (eq? (car (cdr (cdr q))) '(')))\n                    (else\n\
    \                      #f))))))))))))))\n", "  (cond\n    ((null? lst) #t)\n \
    \   (else\n      (let ((p (car lst)))\n        (match_parens (cdr lst))\n    \
    \    (cond\n          ((null? p) #f)\n          (else\n            (let ((q (car\
    \ p)))\n              (match_parens (cdr p))\n              (cond\n          \
    \      ((null? q) #f)\n                (else\n                  (let ((r (car\
    \ q)))\n                    (cond\n                      ((null? r) #f)\n    \
    \                  (else\n                        (let ((s (car r)))\n       \
    \                   (cond\n                            ((null? s) #f)\n      \
    \                      (else\n                              (let ((t (car s)))\n\
    \                                (cond\n                                  ((null?\
    \ t) #f)\n                                  (else\n                          \
    \          (let ((u (car t)))\n                                      (cond\n \
    \                                       ((null? u) #f)\n                     \
    \                   (else\n                                          (let ((v\
    \ (car u)))\n                                            (cond\n             \
    \                                 ((null? v) #f)\n                           \
    \                   (else\n                                                (let\
    \ ((w (car v)))\n                                                  (cond\n   \
    \                                                 ((null? w) #f)\n           \
    \                                         (else\n                            \
    \                          (let ((x (car w)))\n                              \
    \                          (cond\n                                           \
    \               ((null? x) #f)\n                                             \
    \             (else\n                                                        \
    \    (let ((y (car x)))\n                                                    \
    \          (cond\n                                                           \
    \     ((null? y) #f)\n                                                       \
    \         (else\n                                                            \
    \      (let ((z (car y)))\n                                                  \
    \                  (cond\n                                                   \
    \                   ((null? z) #f)\n                                         \
    \                             (else\n                                        \
    \                                (let ((a (car z)))\n                        \
    \                                                  (cond\n                   \
    \                                                         ((null? a) #f)\n   \
    \                                                                         (else\n\
    \                                                                            \
    \  (let ((b (car a)))\n                                                      \
    \                          ", "  (cond\n    ((null? lst) \"Yes\")\n    (else\n\
    \      (let ((p1 (car lst)))\n        (if (null? (cdr p1))\n          \"Yes\"\n\
    \          (else\n            (match_parens (cdr p1)))))))))\n", "  (cond\n  \
    \  ((null? lst) \"Yes\")\n    (else\n      (let ((p (car lst)))\n        (match_parens\
    \ (cdr lst))\n        (cond\n          ((null? p) \"Yes\")\n          (else\n\
    \            (let ((q (car p)))\n              (match_parens (cdr p))\n      \
    \        (cond\n                ((null? q) \"Yes\")\n                (else\n \
    \                 (let ((r (car q)))\n                    (match_parens (cdr q))\n\
    \                    (cond\n                      ((null? r) \"Yes\")\n      \
    \                (else\n                        (let ((s (car r)))\n         \
    \                 (match_parens (cdr r))\n                          (cond\n  \
    \                          ((null? s) \"Yes\")\n                            (else\n\
    \                              (let ((t (car s)))\n                          \
    \      (match_parens (cdr s))\n                                (cond\n       \
    \                           ((null? t) \"Yes\")\n                            \
    \      (else\n                                    (let ((u (car t)))\n       \
    \                               (match_parens (cdr t))\n                     \
    \                 (cond\n                                        ((null? u) \"\
    Yes\")\n                                        (else\n                      \
    \                    (let ((v (car u)))\n                                    \
    \        (match_parens (cdr u))\n                                            (cond\n\
    \                                              ((null? v) \"Yes\")\n         \
    \                                     (else\n                                \
    \                (let ((w (car v)))\n                                        \
    \          (match_parens (cdr v))\n                                          \
    \        (cond\n                                                    ((null? w)\
    \ \"Yes\")\n                                                    (else\n      \
    \                                                (let ((x (car w)))\n        \
    \                                                (match_parens (cdr w))\n    \
    \                                                    (cond\n                 \
    \                                         ((null? x) \"Yes\")\n              \
    \                                            (else\n                         \
    \                                  (let ((y (car x)))\n                      \
    \                                        (match_parens (cdr x))\n            \
    \                                                  (cond\n                   \
    \                                             ((null? y) \"", "  (cond\n    ((null?\
    \ lst) #t)\n    (else\n      (let ((p (car lst)))\n        (match_parens (cdr\
    \ lst))\n        (cond\n          ((null? p) #t)\n          (else\n          \
    \  (let ((q (car p)))\n              (cond\n                ((null? q) #t)\n \
    \               (else\n                  (let ((r (car q)))\n                \
    \    (cond\n                      ((null? r) #t)\n                      (else\n\
    \                        (match_parens (cdr q))\n                        (if (eq?\
    \ r p) #t (else #f))))))))))))))))\n", "  (cond\n    ((null? lst) \"Yes\")\n \
    \   (else\n      (let ((p (car lst)))\n        (match_parens (cdr lst))\n    \
    \    (cond\n          ((null? p) \"Yes\")\n          (else\n            (let ((q\
    \ (car p)))\n              (match_parens (cdr p))\n              (cond\n     \
    \           ((null? q) \"Yes\")\n                (else\n                  (let\
    \ ((r (car q)))\n                    (match_parens (cdr q))\n                \
    \    (cond\n                      ((null? r) \"Yes\")\n                      (else\n\
    \                        (let ((s (car r)))\n                          (match_parens\
    \ (cdr r))))))))))))))))))\n", "  (cond\n    ((null? lst) #t)\n    (else\n   \
    \   (let ((p1 (car lst)))\n        (if (null? (cdr lst))\n          (if (eq? p1\
    \ '(')\n            #f\n            (else\n              (match_parens (cdr lst))))\n\
    \          (match_parens (cdr lst)))))))\n", "  (cond\n    ((null? lst) #t)\n\
    \    (else\n      (let ((s (car lst)))\n        (match_parens (cdr lst))\n   \
    \     (cond\n          ((null? s) #t)\n          (else\n            (let ((p (car\
    \ s)))\n              (cond\n                ((null? p) #t)\n                (else\n\
    \                  (let ((q (car p)))\n                    (cond\n           \
    \           ((null? q) #t)\n                      (else\n                    \
    \    (match_parens (cdr p) (if (eq? q '(') #t (else #f)))))))))))))))))))\n",
  "  (cond\n    ((null? lst) #t)\n    (else\n      (let ((p (car lst)))\n        (match_parens\
    \ (cdr lst))\n        (cond\n          ((null? p) #t)\n          (else\n     \
    \       (let ((q (car p)))\n              (cond\n                ((null? q) #t)\n\
    \                (else\n                  (let ((r (car q)))\n               \
    \     (cond\n                      ((null? r) #t)\n                      (else\n\
    \                        (let ((s (car r)))\n                          (cond\n\
    \                            ((null? s) #t)\n                            (else\n\
    \                              (let ((t (car s)))\n                          \
    \      (cond\n                                  ((null? t) #t)\n             \
    \                     (else\n                                    (let ((u (car\
    \ t)))\n                                      (cond\n                        \
    \                ((null? u) #t)\n                                        (else\n\
    \                                          (let ((v (car u)))\n              \
    \                              (cond\n                                       \
    \       ((null? v) #t)\n                                              (else\n\
    \                                                (let ((w (car v)))\n        \
    \                                          (cond\n                           \
    \                         ((null? w) #t)\n                                   \
    \                 (else\n                                                    \
    \  (let ((x (car w)))\n                                                      \
    \  (cond\n                                                          ((null? x)\
    \ #t)\n                                                          (else\n     \
    \                                                      (let ((y (car x)))\n  \
    \                                                          (cond\n           \
    \                                                   ((null? y) #t)\n         \
    \                                                     (else\n                \
    \                                                (let ((z (car y)))\n        \
    \                                                          (cond\n           \
    \                                                         ((null? z) #t)\n   \
    \                                                                 (else\n    \
    \                                                                  (let ((a (car\
    \ z)))\n                                                                     \
    \   (cond\n                                                                  \
    \        ((null? a) #t)\n                                                    \
    \                      (else\n                                               \
    \                             (let ((b (car a)))\n                           \
    \                                                   (cond\n                  \
    \                                                      ", "  (cond\n    ((null?\
    \ lst) #t)\n    (else\n      (let ((l (car lst)))\n        (match_parens (cdr\
    \ lst))\n        (cond\n          ((null? l) #t)\n          (else\n          \
    \  (let ((r (car l)))\n              (match_parens (cdr lst))\n              (cond\n\
    \                ((null? r) #t)\n                (else\n                  (let\
    \ ((l (car l)))\n                    (let ((r (car l)))\n                    \
    \  (cond\n                        ((null? l) #t)\n                        (else\n\
    \                          (let ((r (car l)))\n                            (cond\n\
    \                              ((null? r) #t)\n                              (else\n\
    \                                (equal? l r)\n                              \
    \  #t))))))))))))))))))))))\n", "  (cond\n    ((null? lst) #t)\n    (else\n  \
    \    (let ((p (car lst)))\n        (match_parens (cdr lst))\n        (cond\n \
    \         ((null? p) #t)\n          (else\n            (let ((q (car p)))\n  \
    \            (match_parens (cdr p))\n              (cond\n                ((null?\
    \ q) #t)\n                (else\n                  (let ((r (car q)))\n      \
    \              (cond\n                      ((null? r) #t)\n                 \
    \     (else\n                        (match_parens (cdr q)))))))))))))))\n", " \
    \ (cond\n    ((null? lst) \"Yes\")\n    ((null? (cdr lst)) \"No\")\n    (else\n\
    \      (match_parens (cdr lst))\n      (match_parens (car lst))\n      (match_parens\
    \ (cdr (cdr lst))))))\n", "  (cond\n    ((null? lst) \"Yes\")\n    (else\n   \
    \   (let ((p1 (car lst)))\n        (if (null? (cdr lst))\n          \"No\"\n \
    \         (match_parens (cdr lst))))))\n", "  (cond\n    ((null? lst) #t)\n  \
    \  (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n        \
    \    (if (eq? p '(') #t)\n              (if (eq? p ')') #t)\n              (else\
    \ #f))\n          (else\n            (if (eq? p '(') #f)\n              (if (eq?\
    \ p ')') #t)\n              (else #f)))))\n  )\n)\n", "  (cond\n    ((null? lst)\
    \ #t)\n    (else\n      (let ((p1 (car lst)))\n        (match_parens (cdr lst))\n\
    \        (if (null? (cdr p1))\n          (if (null? (cdr (cdr p1)))\n        \
    \    (car p1)\n            (cdr p1))\n          (cdr p1)))))\n)\n", "  (cond\n\
    \    ((null? lst) \"Yes\")\n    (else\n      (let ((p1 (car lst)))\n        (if\
    \ (null? (cdr lst))\n          \"No\"\n          (match_parens (cdr lst)\n   \
    \         (if (null? (cdr (cdr lst)))\n              \"Yes\"\n              (else\n\
    \                \"No\")))))))))\n", "  (cond\n    ((null? lst) \"Yes\")\n   \
    \ (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n         \
    \ \"No\"\n          (match_parens (cdr lst))))))\n", "  (cond\n    ((null? lst)\
    \ #t)\n    (else\n      (let ((lst (cdr lst)))\n        (match_parens (cons (car\
    \ lst) (match_parens (cdr lst))))))\n  )\n)\n", "  (cond\n    ((null? lst) #t)\n\
    \    (else\n      (let ((p1 (car lst)))\n        (if (null? (cdr p1))\n      \
    \    (let ((p2 (car (cdr p1))))\n            (if (null? (cdr p2))\n          \
    \    (let ((p3 (car (cdr (cdr p2))))\n                    (if (null? (cdr p3))\n\
    \                      (let ((p4 (car (cdr (cdr p3))))\n                     \
    \       (if (null? (cdr p4))\n                              (let ((p5 (car (cdr\
    \ (cdr p4))))\n                                    (if (null? (cdr p5))\n    \
    \                                  (let ((p6 (car (cdr (cdr p5))))\n         \
    \                                  (if (null? (cdr p6))\n                    \
    \                         (let ((p7 (car (cdr (cdr p6))))\n                  \
    \                                (if (null? (cdr p7))\n                      \
    \                              (let ((p8 (car (cdr (cdr p7))))\n             \
    \                                            (if (null? (cdr p8))\n          \
    \                                                 (let ((p9 (car (cdr (cdr p8))))\n\
    \                                                               (if (null? (cdr\
    \ p9))\n                                                                 (let\
    \ ((p10 (car (cdr (cdr p9))))\n                                              \
    \                       (if (null? (cdr p10))\n                              \
    \                                         (let ((p11 (car (cdr (cdr p10))))\n\
    \                                                                          (if\
    \ (null? (cdr p11))\n                                                        \
    \                    (let ((p12 (car (cdr (cdr p11))))\n                     \
    \                                                          (if (null? (cdr p12))\n\
    \                                                                            \
    \    (let ((p13 (car (cdr (cdr p12))))\n                                     \
    \                                               (if (null? (cdr p13))\n      \
    \                                                                            \
    \    (let ((p14 (car (cdr (cdr p13))))\n                                     \
    \                                                    (if (null? (cdr", "  (define\
    \ (match_parens_helper lst)\n    (cond\n      [(equal? (car lst) '(')\n      \
    \  (match_parens_helper (cdr lst))]\n      [(equal? (car lst) ')')\n        (match_parens_helper\
    \ (cdr lst))]\n      [(else (error \"Invalid input\"))]))\n  (match_parens_helper\
    \ lst))\n", "  (cond\n    ((null? lst) #t)\n    (else\n      (let ((p (car lst)))\n\
    \        (match_parens (cdr lst))\n        (cond\n          ((null? p) #t)\n \
    \         (else\n            (let ((q (car p)))\n              (cond\n       \
    \         ((null? q) #t)\n                (else\n                  (let ((r (car\
    \ q)))\n                    (cond\n                      ((null? r) #t)\n    \
    \                  (else\n                        (let ((s (car r)))\n       \
    \                   (cond\n                            ((null? s) #t)\n      \
    \                      (else\n                              (let ((t (car s)))\n\
    \                                (cond\n                                  ((null?\
    \ t) #t)\n                                  (else\n                          \
    \          (let ((u (car t)))\n                                      (cond\n \
    \                                       ((null? u) #t)\n                     \
    \                   (else\n                                          (let ((v\
    \ (car u)))\n                                            (cond\n             \
    \                                 ((null? v) #t)\n                           \
    \                   (else\n                                                (let\
    \ ((w (car v)))\n                                                  (cond\n   \
    \                                                 ((null? w) #t)\n           \
    \                                         (else\n                            \
    \                          (let ((x (car w)))\n                              \
    \                          (cond\n                                           \
    \               ((null? x) #t)\n                                             \
    \             (else\n                                                        \
    \   (let ((y (car x)))\n                                                     \
    \       (cond\n                                                              ((null?\
    \ y) #t)\n                                                              (else\n\
    \                                                                (let ((z (car\
    \ y)))\n                                                                  (cond\n\
    \                                                                    ((null? z)\
    \ #t)\n                                                                    (else\n\
    \                                                                      (let ((a\
    \ (car z)))\n                                                                \
    \        (cond\n                                                             \
    \             ((null? a) #t)\n                                               \
    \                           (else\n                                          \
    \                                  (let ((b (car a)))\n                      \
    \                                                        (cond\n             \
    \                                                           ", "  (define (match_parens_helper\
    \ lst)\n    (cond\n      ((null? lst) #t)\n      ((null? (cdr lst)) #f)\n    \
    \  (else\n        (match_parens_helper (cdr lst))\n        (match_parens_helper\
    \ (car lst))\n        (match_parens_helper (cdr (cdr lst)))))))\n", "  (cond\n\
    \    ((null? lst) \"Yes\")\n    (else\n      (let ((l (car lst)))\n        (match_parens\
    \ (cdr lst))\n        (cond\n          ((null? l) \"Yes\")\n          (else\n\
    \            (let ((r (car l)))\n              (match_parens (cdr lst))\n    \
    \          (cond\n                ((null? r) \"Yes\")\n                (else\n\
    \                  (let ((l (car l)))\n                    (let ((r (car l)))\n\
    \                      (cond\n                        ((null? l) \"Yes\")\n  \
    \                      (else\n                          (let ((r (car l)))\n \
    \                           (cond\n                              ((null? r) \"\
    Yes\")\n                              (else\n                                (let\
    \ ((l (car l)))\n                                  (let ((r (car l)))\n      \
    \                              (cond\n                                      ((null?\
    \ l) \"Yes\")\n                                      (else\n                 \
    \                       (let ((r (car l)))\n                                 \
    \         (cond\n                                            ((null? r) \"Yes\"\
    )\n                                            (else\n                       \
    \                       (let ((l (car l)))\n                                 \
    \               (let ((r (car l)))\n                                         \
    \         (cond\n                                                    ((null? l)\
    \ \"Yes\")\n                                                    (else\n      \
    \                                                (let ((r (car l)))\n        \
    \                                                (cond\n                     \
    \                                     ((null? r) \"Yes\")\n                  \
    \                                        (else\n                             \
    \                              (let ((l (car l)))\n                          \
    \                                    (let ((r (car l)))\n                    \
    \                                            (cond\n                         \
    \                                         ((null? l) \"Yes\")\n              \
    \                                                    (else\n                 \
    \                                                   (let ((r (car l)))\n     \
    \                                                                 (cond\n    \
    \                                                                    ((null? r)\
    \ \"Yes\")\n                                                                 \
    \       (else\n                                                              \
    \            (let ((l (car l)))\n                                            \
    \                                (let ((r (car l)))\n                        \
    \                                                      (cond\n               \
    \                                                                 ((null? l) \"\
    Yes", "  (cond\n    ((null? lst) \"Yes\")\n    (else\n      (let ((p (car lst)))\n\
    \        (match_parens (cdr lst))\n        (cond\n          ((null? p) \"Yes\"\
    )\n          (else\n            (let ((q (car p)))\n              (match_parens\
    \ (cdr p))\n              (cond\n                ((null? q) \"Yes\")\n       \
    \         (else\n                  (let ((r (car q)))\n                    (cond\n\
    \                      ((null? r) \"Yes\")\n                      (else\n    \
    \                    (let ((s (car r)))\n                          (cond\n   \
    \                         ((null? s) \"Yes\")\n                            (else\n\
    \                              (let ((t (car s)))\n                          \
    \      (cond\n                                  ((null? t) \"Yes\")\n        \
    \                          (else\n                                    (let ((u\
    \ (car t)))\n                                      (cond\n                   \
    \                     ((null? u) \"Yes\")\n                                  \
    \      (else\n                                          (let ((v (car u)))\n \
    \                                           (cond\n                          \
    \                    ((null? v) \"Yes\")\n                                   \
    \           (else\n                                                (let ((w (car\
    \ v)))\n                                                  (cond\n            \
    \                                        ((null? w) \"Yes\")\n               \
    \                                     (else\n                                \
    \                      (let ((x (car w)))\n                                  \
    \                      (cond\n                                               \
    \           ((null? x) \"Yes\")\n                                            \
    \              (else\n                                                       \
    \    (let ((y (car x)))\n                                                    \
    \        (cond\n                                                             \
    \ ((null? y) \"Yes\")\n                                                      \
    \        (else\n                                                             \
    \   (let ((z (car y)))\n                                                     \
    \             (cond\n                                                        \
    \            ((null? z) \"Yes\")\n                                           \
    \                         (else\n                                            \
    \                          (let ((a (car z)))\n                              \
    \                                          (cond\n                           \
    \                                               ((null? a) \"Yes\")\n        \
    \                                                                  (else\n   \
    \                                                                         (let\
    \ ((b (car a)))\n", "  (cond\n    ((null? lst) #t)\n    (else\n      (let ((s1\
    \ (car lst)))\n        (if (null? (cdr s1))\n          (match_parens (cdr s1))\n\
    \          (else\n            (let ((s2 (car (cdr s1))))\n              (match_parens\
    \ (cdr s2)))))))\n  ))\n", "  (cond\n    ((null? lst) \"Yes\")\n    (else\n  \
    \    (let ((p1 (car lst)))\n        (if (null? (cdr lst))\n          \"No\"\n\
    \          (match_parens (cdr lst))))))\n", "  (cond\n    ((null? lst) #t)\n \
    \   (else\n      (let ((p1 (car lst)))\n        (match_parens (cdr lst))\n   \
    \     (if (null? p1) #t\n          (else\n            (let ((p2 (car p1)))\n \
    \             (if (null? p2) #t\n                (else\n                  (let\
    \ ((p3 (car p2)))\n                    (if (null? p3) #t\n                   \
    \   (else\n                        (let ((p4 (car p3)))\n                    \
    \      (if (null? p4) #t\n                            (else\n                \
    \              (let ((p5 (car p4)))\n                                (if (null?\
    \ p5) #t\n                                  (else\n                          \
    \          (let ((p6 (car p5)))\n                                      (if (null?\
    \ p6) #t\n                                        (else\n                    \
    \                      (let ((p7 (car p6)))\n                                \
    \            (if (null? p7) #t\n                                             \
    \ (else\n                                                (let ((p8 (car p7)))\n\
    \                                                  (if (null? p8) #t\n       \
    \                                             (else\n                        \
    \                              (let ((p9 (car p8)))\n                        \
    \                                (if (null? p9) #t\n                         \
    \                                 (else\n                                    \
    \                        (let ((p10 (car p9)))\n                             \
    \                                 (if (null? p10) #t\n                       \
    \                                         (else\n                            \
    \                                      (let ((p11 (car p10)))\n              \
    \                                                      (if (null? p11) #t\n  \
    \                                                                    (else\n \
    \                                                                       (let ((p12\
    \ (car p11)))\n                                                              \
    \            (if (null? p12) #t\n                                            \
    \                                (else\n                                     \
    \                                         (let ((p13 (car p12)))\n           \
    \                                                                     (if (null?\
    \ p13) #t\n                                                                  \
    \                  (else\n                                                   \
    \                                   (let ((p14 (car p13)))\n                 \
    \                                                                       (", " \
    \ (cond\n    ((null? lst) #t)\n    (else\n      (let ((p1 (car lst)))\n      \
    \  (if (null? (cdr lst))\n          (if (eq? p1 \")\")\n            #t\n     \
    \       (else\n              (match_parens (cdr lst))))\n          (else\n   \
    \         (match_parens (cdr lst)))))))\n", "  (cond\n    [(= (length lst) 0)]\n\
    \    [(< (length lst) 1)]\n    [(= (car lst) '(']\n    [(= (car lst) ')')]\n \
    \   [(= (cdr lst) '(']\n    [(= (cdr lst) ')')]\n    [(= (car (cdr lst)) '(']\n\
    \    [(= (car (cdr lst)) ')')]\n    [(= (cdr (cdr lst)) '(']\n    [(= (cdr (cdr\
    \ lst)) ')')]\n    [(= (car (cdr (cdr lst))) '(']\n    [(= (car (cdr (cdr lst)))\
    \ ')')]\n    [(= (cdr (cdr (cdr lst))) '(']\n    [(= (cdr (cdr (cdr lst))) ')')]\n\
    \    [(= (car (cdr (cdr (cdr lst)))) '(']\n    [(= (car (cdr (cdr (cdr lst))))\
    \ ')')]\n    [(= (cdr (cdr (cdr (cdr lst)))) '(']\n    [(= (cdr (cdr (cdr (cdr\
    \ lst)))) ')')]\n    [(= (car (cdr (cdr (cdr (cdr lst))))))]\n    [(= (cdr (cdr\
    \ (cdr (cdr (cdr lst))))))]\n    [(= (car (cdr (cdr (cdr (cdr (cdr lst)))))))]\n\
    \    [(= (cdr (cdr (cdr (cdr (cdr (cdr lst)))))))]\n    [(= (car (cdr (cdr (cdr\
    \ (cdr (cdr (cdr lst))))))))]\n    [(= (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst))))))))]\n\
    \    [(= (car (cdr (cdr (cdr (cdr (cdr (c", "  (cond\n    ((null? lst) #t)\n \
    \   (else\n      (let ((p (car lst)))\n        (match_parens (cdr lst))\n    \
    \    (cond\n          ((null? p) #t)\n          (else\n            (let ((q (car\
    \ p)))\n              (match_parens (cdr p))\n              (cond\n          \
    \      ((null? q) #t)\n                (else\n                  (let ((r (car\
    \ q)))\n                    (cond\n                      ((null? r) #t)\n    \
    \                  (else\n                        (let ((s (car r)))\n       \
    \                   (cond\n                            ((null? s) #t)\n      \
    \                      (else\n                              (let ((t (car s)))\n\
    \                                (cond\n                                  ((null?\
    \ t) #t)\n                                  (else\n                          \
    \          (let ((u (car t)))\n                                      (cond\n \
    \                                       ((null? u) #t)\n                     \
    \                   (else\n                                          (let ((v\
    \ (car u)))\n                                            (cond\n             \
    \                                 ((null? v) #t)\n                           \
    \                   (else\n                                                (let\
    \ ((w (car v)))\n                                                  (cond\n   \
    \                                                 ((null? w) #t)\n           \
    \                                         (else\n                            \
    \                          (let ((x (car w)))\n                              \
    \                          (cond\n                                           \
    \               ((null? x) #t)\n                                             \
    \             (else\n                                                        \
    \    (let ((y (car x)))\n                                                    \
    \          (cond\n                                                           \
    \     ((null? y) #t)\n                                                       \
    \         (else\n                                                            \
    \      (let ((z (car y)))\n                                                  \
    \                  (cond\n                                                   \
    \                   ((null? z) #t)\n                                         \
    \                             (else\n                                        \
    \                                (let ((a (car z)))\n                        \
    \                                                  (cond\n                   \
    \                                                         ((null? a) #t)\n   \
    \                                                                         (else\n\
    \                                                                            \
    \  (let ((b (car a)))\n                                                      \
    \                          ", "  (cond\n    ((null? lst) \"Yes\")\n    ((null?\
    \ (cdr lst)) \"No\")\n    (else\n      (if (car lst)\n          (match_parens\
    \ (cdr lst))\n          (match_parens (cdr (cdr lst)))))))\n", "  (cond\n    ((null?\
    \ lst) #t)\n    (else\n      (let ((p (car lst)))\n        (if (eq? p '(')\n \
    \         (match_parens (cdr lst))\n          (else\n            (if (eq? p ')')\n\
    \              (match_parens (cdr lst))\n            (else\n              (let\
    \ ((p (car lst)))\n                (if (eq? p '(')\n                  (match_parens\
    \ (cdr lst))\n                  (else\n                    (if (eq? p ')')\n \
    \                     (match_parens (cdr lst))\n                    (else\n  \
    \                    (match_parens (cdr lst)))))))))))))))\n", "  (cond\n    ((null?\
    \ lst) \"Yes\")\n    ((null? (cdr lst)) \"No\")\n    (else\n      (let ((p (car\
    \ lst)))\n        (if (null? (cdr p))\n            (if (null? (cdr (cdr p)))\n\
    \                \"Yes\")\n            \"No\")\n          (else\n            (match_parens\
    \ (cdr p))))))))\n", "  (cond\n    ((null? lst) #t)\n    (else\n      (let ((p\
    \ (car lst)))\n        (match_parens (cdr lst))\n        (cond\n          ((null?\
    \ p) #t)\n          (else\n            (let ((q (car p)))\n              (cond\n\
    \                ((null? q) #t)\n                (else\n                  (let\
    \ ((r (car q)))\n                    (cond\n                      ((null? r) #t)\n\
    \                      (else\n                        (let ((s (car r)))\n   \
    \                       (cond\n                            ((null? s) #t)\n  \
    \                          (else\n                              (let ((t (car\
    \ s)))\n                                (cond\n                              \
    \    ((null? t) #t)\n                                  (else\n               \
    \                     (let ((u (car t)))\n                                   \
    \   (cond\n                                        ((null? u) #t)\n          \
    \                              (else\n                                       \
    \   (let ((v (car u)))\n                                            (cond\n  \
    \                                            ((null? v) #t)\n                \
    \                              (else\n                                       \
    \         (let ((w (car v)))\n                                               \
    \   (cond\n                                                    ((null? w) #t)\n\
    \                                                    (else\n                 \
    \                                     (let ((x (car w)))\n                   \
    \                                     (cond\n                                \
    \                          ((null? x) #t)\n                                  \
    \                        (else\n                                             \
    \               (let ((y (car x)))\n                                         \
    \                     (cond\n                                                \
    \                ((null? y) #t)\n                                            \
    \                    (else\n                                                 \
    \                 (let ((z (car y)))\n                                       \
    \                             (cond\n                                        \
    \                              ((null? z) #t)\n                              \
    \                                        (else\n                             \
    \                                           (let ((a (car z)))\n             \
    \                                                             (cond\n        \
    \                                                                    ((null? a)\
    \ #t)\n                                                                      \
    \      (else\n                                                               \
    \               (let ((b (car a)))\n                                         \
    \                                       (cond\n                              \
    \                                                      ((null? b)", "  (cond\n\
    \    ((null? lst) #t)\n    (else\n      (let ((p (car lst)))\n        (match_parens\
    \ (cdr lst))\n        (cond\n          ((null? p) #t)\n          (else\n     \
    \       (let ((q (car p)))\n              (cond\n                ((null? q) #t)\n\
    \                (else\n                  (let ((r (car q)))\n               \
    \     (cond\n                      ((null? r) #t)\n                      (else\n\
    \                        (let ((s (car r)))\n                          (cond\n\
    \                            ((null? s) #t)\n                            (else\n\
    \                              (let ((t (car s)))\n                          \
    \      (cond\n                                  ((null? t) #t)\n             \
    \                     (else\n                                    (let ((u (car\
    \ t)))\n                                      (cond\n                        \
    \                ((null? u) #t)\n                                        (else\n\
    \                                          (let ((v (car u)))\n              \
    \                              (cond\n                                       \
    \       ((null? v) #t)\n                                              (else\n\
    \                                                (let ((w (car v)))\n        \
    \                                          (cond\n                           \
    \                         ((null? w) #t)\n                                   \
    \                 (else\n                                                    \
    \  (let ((x (car w)))\n                                                      \
    \  (cond\n                                                          ((null? x)\
    \ #t)\n                                                          (else\n     \
    \                                                       (let ((y (car x)))\n \
    \                                                             (cond\n        \
    \                                                        ((null? y) #t)\n    \
    \                                                            (else\n         \
    \                                                         (let ((z (car y)))\n\
    \                                                                    (cond\n \
    \                                                                     ((null?\
    \ z) #t)\n                                                                   \
    \   (else\n                                                                  \
    \      (let ((a (car z)))\n                                                  \
    \                        (cond\n                                             \
    \                               ((null? a) #t)\n                             \
    \                                               (else\n                      \
    \                                                        (let ((b (car a)))\n\
    \                                                                            \
    \    (cond\n                                                                 \
    \                   ((null? b)", "  (cond\n    ((null? lst) #t)\n    (else\n \
    \     (let ((p1 (car lst)))\n        (if (null? (cdr lst))\n            (not (eqp\
    \ p1 '('))\n            (match_parens (cdr lst)))))))))\n", "  (cond\n    ((null?\
    \ lst) #t)\n    (else\n      (let ((l (car lst)))\n        (match_parens (cdr\
    \ lst))\n        (if (null? (cdr lst))\n          (if (null? l) #t\n         \
    \   (else (error \"Unbalanced parens\")))))))))\n", "  (cond\n    ((null? lst)\
    \ \"Yes\")\n    (else\n      (let ((p1 (car lst)))\n        (let ((p2 (car (cdr\
    \ lst))))\n          (cond\n            ((null? p2) \"Yes\")\n            (else\n\
    \              (let ((p3 (car (cdr (cdr lst))))\n                    (p4 (car\
    \ (cdr (cdr (cdr lst))))))\n                (cond\n                  ((null? p3)\
    \ \"Yes\")\n                  (else\n                    (let ((p5 (car (cdr (cdr\
    \ (cdr (cdr lst)))))))\n                      (cond\n                        ((null?\
    \ p5) \"Yes\")\n                        (else\n                          (let\
    \ ((p6 (car (cdr (cdr (cdr (cdr (cdr lst))))))))\n                           \
    \ (cond\n                              ((null? p6) \"Yes\")\n                \
    \              (else\n                                (let ((p7 (car (cdr (cdr\
    \ (cdr (cdr (cdr (cdr lst))))))))\n                                     (p8 (car\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst))))))))))\n                         \
    \         (cond\n                                    ((null? p7) \"Yes\")\n  \
    \                                  (else\n                                   \
    \   (let ((p9 (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst))))))))))))\n \
    \                                     (cond\n                                \
    \        ((null? p9) \"Yes\")\n                                        (else\n\
    \                                          (let ((p10 (car (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr lst))))))))))))\n                                 \
    \           (cond\n                                              ((null? p10)\
    \ \"Yes\")\n                                              (else\n            \
    \                                    (let ((p11 (car (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr lst))))))))))))))\n                          \
    \                        (cond\n                                             \
    \       ((null? p11", "  (cond\n    ((null? lst) #t)\n    (else\n      (let ((p\
    \ (car lst)))\n        (match_parens (cdr lst))\n        (cond\n          ((null?\
    \ p) #t)\n          (else\n            (let ((q (car p)))\n              (match_parens\
    \ (cdr p))\n              (cond\n                ((null? q) #t)\n            \
    \    (else\n                  (let ((r (car q)))\n                    (cond\n\
    \                      ((null? r) #t)\n                      (else\n         \
    \               (let ((s (car r)))\n                          (cond\n        \
    \                    ((null? s) #t)\n                            (else\n     \
    \                         (let ((t (car s)))\n                               \
    \ (cond\n                                  ((null? t) #t)\n                  \
    \                (else\n                                    (let ((u (car t)))\n\
    \                                      (cond\n                               \
    \         ((null? u) #t)\n                                        (else\n    \
    \                                      (let ((v (car u)))\n                  \
    \                          (cond\n                                           \
    \   ((null? v) #t)\n                                              (else\n    \
    \                                            (let ((w (car v)))\n            \
    \                                      (cond\n                               \
    \                     ((null? w) #t)\n                                       \
    \             (else\n                                                      (let\
    \ ((x (car w)))\n                                                        (cond\n\
    \                                                          ((null? x) #t)\n  \
    \                                                        (else\n             \
    \                                              (let ((y (car x)))\n          \
    \                                                    (cond\n                 \
    \                                               ((null? y) #t)\n             \
    \                                                   (else\n                  \
    \                                                (let ((z (car y)))\n        \
    \                                                            (cond\n         \
    \                                                             ((null? z) #t)\n\
    \                                                                      (else\n\
    \                                                                        (let\
    \ ((a (car z)))\n                                                            \
    \              (cond\n                                                       \
    \                     ((null? a) #t)\n                                       \
    \                                     (else\n                                \
    \                                              (let ((b (car a)))\n          \
    \                                                                      (", " \
    \ (cond\n    ((null? lst) #t)\n    (else\n      (let ((p (car lst)))\n       \
    \ (if (null? (cdr lst))\n            (if (eq? p '(') #t)\n              (else\
    \ #f))\n          (else\n            (if (eq? p ')')\n              (if (null?\
    \ (cdr (cdr lst))) #t)\n                (else #f))\n            (else\n      \
    \        (match_parens (cdr lst)))))))\n", "  (cond\n    ((null? lst) \"Yes\"\
    )\n    (else\n      (let ((p (car lst)))\n        (match_parens (cdr lst))\n \
    \       (cond\n          ((null? p) \"Yes\")\n          (else\n            (let\
    \ ((q (car p)))\n              (match_parens (cdr p))\n              (cond\n \
    \               ((null? q) \"Yes\")\n                (else\n                 \
    \ (let ((r (car q)))\n                    (cond\n                      ((null?\
    \ r) \"Yes\")\n                      (else\n                        (let ((s (car\
    \ r)))\n                          (cond\n                            ((null? s)\
    \ \"Yes\")\n                            (else\n                              (let\
    \ ((t (car s)))\n                                (cond\n                     \
    \             ((null? t) \"Yes\")\n                                  (else\n \
    \                                   (let ((u (car t)))\n                     \
    \                 (cond\n                                        ((null? u) \"\
    Yes\")\n                                        (else\n                      \
    \                    (let ((v (car u)))\n                                    \
    \        (cond\n                                              ((null? v) \"Yes\"\
    )\n                                              (else\n                     \
    \                           (let ((w (car v)))\n                             \
    \                     (cond\n                                                \
    \    ((null? w) \"Yes\")\n                                                   \
    \ (else\n                                                      (let ((x (car w)))\n\
    \                                                        (cond\n             \
    \                                             ((null? x) \"Yes\")\n          \
    \                                                (else\n                     \
    \                                      (let ((y (car x)))\n                  \
    \                                          (cond\n                           \
    \                                   ((null? y) \"Yes\")\n                    \
    \                                          (else\n                           \
    \                                     (let ((z (car y)))\n                   \
    \                                               (cond\n                      \
    \                                              ((null? z) \"Yes\")\n         \
    \                                                           (else\n          \
    \                                                            (let ((a (car z)))\n\
    \                                                                        (cond\n\
    \                                                                          ((null?\
    \ a) \"Yes\")\n                                                              \
    \            (else\n                                                         \
    \                   (let ((b (car a)))\n", "  (define (match_parens_helper lst)\n\
    \    (cond\n      ((null? lst) #f)\n      (else\n        (if (null? (cdr lst))\n\
    \            (car lst)\n            (match_parens_helper (cdr lst))))))\n  (match_parens_helper\
    \ lst))\n", "  (cond\n    ((null? lst) #t)\n    (else\n      (let ((p (car lst)))\n\
    \        (match_parens (cdr lst))\n        (cond\n          ((null? p) #t)\n \
    \         (else\n            (let ((q (car p)))\n              (match_parens (cdr\
    \ p))\n              (cond\n                ((null? q) #t)\n                (else\n\
    \                  (let ((r (car q)))\n                    (cond\n           \
    \           ((null? r) #t)\n                      (else\n                    \
    \    (let ((s (car r)))\n                          (cond\n                   \
    \         ((null? s) #t)\n                            (else\n                \
    \              (let ((t (car s)))\n                                (cond\n   \
    \                               ((null? t) #t)\n                             \
    \     (else\n                                    (let ((u (car t)))\n        \
    \                              (cond\n                                       \
    \ ((null? u) #t)\n                                        (else\n            \
    \                              (let ((v (car u)))\n                          \
    \                  (cond\n                                              ((null?\
    \ v) #t)\n                                              (else\n              \
    \                                  (let ((w (car v)))\n                      \
    \                            (cond\n                                         \
    \           ((null? w) #t)\n                                                 \
    \   (else\n                                                      (let ((x (car\
    \ w)))\n                                                        (cond\n      \
    \                                                    ((null? x) #t)\n        \
    \                                                  (else\n                   \
    \                                         (let ((y (car x)))\n               \
    \                                               (cond\n                      \
    \                                          ((null? y) #t)\n                  \
    \                                              (else\n                       \
    \                                           (let ((z (car y)))\n             \
    \                                                       (cond\n              \
    \                                                        ((null? z) #t)\n    \
    \                                                                  (else\n   \
    \                                                                     (let ((a\
    \ (car z)))\n                                                                \
    \          (cond\n                                                           \
    \                 ((null? a) #t)\n                                           \
    \                                 (else\n                                    \
    \                                          (let ((b (car a)))\n              \
    \                                                                  ", "  (define\
    \ (match_parens_helper lst)\n    (cond\n      ((null? lst) #t)\n      ((null?\
    \ (cdr lst)) #f)\n      (else\n        (match_parens_helper (cdr lst))\n     \
    \   (match_parens_helper (car lst))\n        (match_parens_helper (cdr (cdr lst)))))))\n",
  "  (cond\n    ((null? lst) \"Yes\")\n    ((null? (cdr lst)) \"No\")\n    (else\n\
    \      (match_parens (cdr lst))\n      (match_parens (cdr (cdr lst))))))\n", " \
    \ (cond\n    ((null? lst) \"Yes\")\n    (else\n      (let ((p1 (car lst)))\n \
    \       (if (null? (cdr lst))\n          \"No\"\n          (let ((p2 (car (cdr\
    \ ldr))))\n            (if (null? (cdr (cdr lst)))\n              (if (eq? p1\
    \ p2)\n                \"Yes\"\n                \"No\")\n              \"No\"\
    )\n            \"No\")\n          \"No\")\n        \"No\")\n    )\n  )\n)\n",
  "  (cond\n    ((null? lst) \"Yes\")\n    ((null? (cdr lst)) \"No\")\n    (else\n\
    \      (let ((p (car lst)))\n        (if (null? (cdr p))\n            (if (null?\
    \ (cdr (cdr p)))\n                \"Yes\")\n            \"No\")\n          \"\
    No\")\n      )\n    )\n  )\n)\n", "  (define (match_parens_helper lst)\n    (cond\n\
    \      ((null? lst) #t)\n      ((null? (car lst)) #f)\n      (else\n        (match_parens_helper\
    \ (cdr lst))\n        (match_parens_helper (car lst))\n        (else\n       \
    \   (match_parens_helper (car lst))\n          (match_parens_helper (cdr lst))))))\n\
    \  (match_parens_helper lst))\n", "  (cond\n    ((null? lst) \"Yes\")\n    (else\n\
    \      (let ((p (car lst)))\n        (match_parens (cdr lst))\n        (cond\n\
    \          ((null? p) \"Yes\")\n          (else\n            (let ((q (car p)))\n\
    \              (match_parens (cdr p))\n              (cond\n                ((null?\
    \ q) \"Yes\")\n                (else\n                  (let ((r (car q)))\n \
    \                   (match_parens (cdr q))\n                    (cond\n      \
    \                ((null? r) \"Yes\")\n                      (else\n          \
    \              (let ((s (car r)))\n                          (match_parens (cdr\
    \ r))\n                          (cond\n                            ((null? s)\
    \ \"Yes\")\n                            (else\n                              (let\
    \ ((t (car s)))\n                                (match_parens (cdr s))\n    \
    \                            (cond\n                                  ((null?\
    \ t) \"Yes\")\n                                  (else\n                     \
    \               (let ((u (car t)))\n                                      (match_parens\
    \ (cdr t))\n                                      (cond\n                    \
    \                    ((null? u) \"Yes\")\n                                   \
    \     (else\n                                          (let ((v (car u)))\n  \
    \                                          (match_parens (cdr u))\n          \
    \                                  (cond\n                                   \
    \           ((null? v) \"Yes\")\n                                            \
    \  (else\n                                                (let ((w (car v)))\n\
    \                                                  (match_parens (cdr v))\n  \
    \                                                (cond\n                     \
    \                               ((null? w) \"Yes\")\n                        \
    \                            (else\n                                         \
    \             (let ((x (car w)))\n                                           \
    \             (match_parens (cdr w))\n                                       \
    \                 (cond\n                                                    \
    \      ((null? x) \"Yes\")\n                                                 \
    \         (else\n                                                           (let\
    \ ((y (car x)))\n                                                            \
    \  (match_parens (cdr x))\n                                                  \
    \            (cond\n                                                         \
    \       ((null? y) \"", "  (cond\n    ((null? lst) #t)\n    (else\n      (let\
    \ ((p1 (car lst)))\n        (match_parens (cdr lst))\n        (let ((p2 (car lst)))\n\
    \          (cond\n            ((eq? p1 p2) #t)\n            (else\n          \
    \    (let ((p3 (car lst)))\n                (cond\n                  ((eq? p1\
    \ p3) #t)\n                  (else\n                    (let ((p4 (car lst)))\n\
    \                      (cond\n                        ((eq? p2 p4) #t)\n     \
    \                   (else\n                          (let ((p5 (car lst)))\n \
    \                           (cond\n                              ((eq? p3 p5)\
    \ #t)\n                              (else\n                                (let\
    \ ((p6 (car lst)))\n                                  (cond\n                \
    \                    ((eq? p4 p6) #t)\n                                    (else\n\
    \                                      (let ((p7 (car lst)))\n               \
    \                         (cond\n                                          ((eq?\
    \ p5 p7) #t)\n                                          (else\n              \
    \                              (let ((p8 (car lst)))\n                       \
    \                       (cond\n                                              \
    \  ((eq? p6 p8) #t)\n                                                (else\n \
    \                                                 (let ((p9 (car lst)))\n    \
    \                                                (cond\n                     \
    \                                 ((eq? p7 p9) #t)\n                         \
    \                             (else\n                                        \
    \                (let ((p10 (car lst)))\n                                    \
    \                      (cond\n                                               \
    \            ((eq? p8 p10) #t)\n                                             \
    \              (else\n                                                       \
    \     (let ((p11 (car lst)))\n                                               \
    \               (cond\n                                                      \
    \          ((eq? p9 p11) #t)\n                                               \
    \                 (else\n                                                    \
    \              (let ((p12 (car lst)))\n                                      \
    \                              (cond\n                                       \
    \                               ((eq? p10 p12) #t)\n                         \
    \                                             ", "  (cond\n    ((null? lst) #t)\n\
    \    (else\n      (let ((p (car lst)))\n        (match_parens (cdr lst))\n   \
    \     (cond\n          ((null? p) #t)\n          (else\n            (let ((q (car\
    \ p)))\n              (cond\n                ((null? q) #t)\n                (else\n\
    \                  (let ((r (car q)))\n                    (cond\n           \
    \           ((null? r) #t)\n                      (else\n                    \
    \    (let ((s (car r)))\n                          (cond\n                   \
    \         ((null? s) #t)\n                            (else\n                \
    \              (let ((t (car s)))\n                                (cond\n   \
    \                               ((null? t) #t)\n                             \
    \     (else\n                                    (let ((u (car t)))\n        \
    \                              (cond\n                                       \
    \ ((null? u) #t)\n                                        (else\n            \
    \                              (let ((v (car u)))\n                          \
    \                  (cond\n                                              ((null?\
    \ v) #t)\n                                              (else\n              \
    \                                  (let ((w (car v)))\n                      \
    \                            (cond\n                                         \
    \           ((null? w) #t)\n                                                 \
    \   (else\n                                                      (let ((x (car\
    \ w)))\n                                                        (cond\n      \
    \                                                    ((null? x) #t)\n        \
    \                                                  (else\n                   \
    \                                         (let ((y (car x)))\n               \
    \                                               (cond\n                      \
    \                                          ((null? y) #t)\n                  \
    \                                              (else\n                       \
    \                                           (let ((z (car y)))\n             \
    \                                                       (cond\n              \
    \                                                        ((null? z) #t)\n    \
    \                                                                  (else\n   \
    \                                                                     (let ((a\
    \ (car z)))\n                                                                \
    \          (cond\n                                                           \
    \                 ((null? a) #t)\n                                           \
    \                                 (else\n                                    \
    \                                          (let ((b (car a)))\n              \
    \                                                                  (cond\n   \
    \                                                                            \
    \     ((null? b)", "  (cond\n    ((null? lst) \"Yes\")\n    (else\n      (let\
    \ ((p1 (car lst)))\n        (if (null? (cdr lst))\n          \"No\"\n        \
    \  (let ((p2 (car (cdr ldr))))\n            (if (null? (cdr (cdr lst)))\n    \
    \          (match_parens (cdr lst))\n              (match_parens (cdr (cdr lst)))))))))))\n",
  "  (define (match_parens_helper lst)\n    (cond\n      [(string=? lst) \"Yes\"]\n\
    \      [(string? lst) \"No\"]\n      [(null? lst) \"No\"]\n      [(null? (cdr\
    \ lst)) \"Yes\"]\n      [(null? (cdr (cdr lst))) \"No\"]\n      [(null? (cdr (cdr\
    \ (cdr lst)))) \"Yes\"]\n      [(null? (cdr (cdr (cdr (cdr lst)))))]\n      [(null?\
    \ (cdr (cdr (cdr (cdr (cdr lst)))))) \"Yes\"]\n      [else \"No\"]\n    )\n  )\n\
    \  (match_parens_helper lst)\n)\n", "  (cond\n    ((null? lst) #t)\n    (else\n\
    \      (let ((p (car lst)))\n        (match_parens (cdr lst))\n        (cond\n\
    \          ((null? p) #t)\n          (else\n            (let ((q (car p)))\n \
    \             (cond\n                ((null? q) #t)\n                (else\n \
    \                 (let ((r (car q)))\n                    (cond\n            \
    \          ((null? r) #t)\n                      (else\n                     \
    \   (let ((s (car r)))\n                          (cond\n                    \
    \        ((null? s) #t)\n                            (else\n                 \
    \             (let ((t (car s)))\n                                (cond\n    \
    \                              ((null? t) #t)\n                              \
    \    (else\n                                    (let ((u (car t)))\n         \
    \                             (cond\n                                        ((null?\
    \ u) #t)\n                                        (else\n                    \
    \                      (let ((v (car u)))\n                                  \
    \          (cond\n                                              ((null? v) #t)\n\
    \                                              (else\n                       \
    \                         (let ((w (car v)))\n                               \
    \                   (cond\n                                                  \
    \  ((null? w) #t)\n                                                    (else\n\
    \                                                      (let ((x (car w)))\n  \
    \                                                      (cond\n               \
    \                                           ((null? x) #t)\n                 \
    \                                         (else\n                            \
    \                                (let ((y (car x)))\n                        \
    \                                      (cond\n                               \
    \                                 ((null? y) #t)\n                           \
    \                                     (else\n                                \
    \                                  (let ((z (car y)))\n                      \
    \                                              (cond\n                       \
    \                                               ((null? z) #t)\n             \
    \                                                         (else\n            \
    \                                                            (let ((a (car z)))\n\
    \                                                                          (cond\n\
    \                                                                            ((null?\
    \ a) #t)\n                                                                   \
    \         (else\n                                                            \
    \                  (let ((b (car a)))\n                                      \
    \                                          (cond\n                           \
    \                                                         ((null? b)", "  (cond\n\
    \    ((null? lst) \"Yes\")\n    (else\n      (let ((p1 (car lst)))\n        (if\
    \ (null? (cdr lst))\n          \"No\"\n          (match_parens (cdr lst))))))\n",
  "  (cond\n    ((null? lst) #t)\n    (else\n      (let ((p (car lst)))\n        (match_parens\
    \ (cdr lst))\n        (cond\n          ((null? p) #t)\n          (else\n     \
    \       (let ((q (car p)))\n              (cond\n                ((null? q) #t)\n\
    \                (else\n                  (let ((r (car q)))\n               \
    \     (cond\n                      ((null? r) #t)\n                      (else\n\
    \                        (match_parens (cdr q)))))))))))))))\n", "  (cond\n  \
    \  ((null? lst) \"Yes\")\n    ((null? (cdr lst)) \"No\")\n    (else\n      (let\
    \ ((p (car lst)))\n        (if (null? (cdr p))\n          (if (null? (cdr (cdr\
    \ p)))\n            \"Yes\")\n          \"No\")\n        (else\n          (match_parens\
    \ (cdr p))))))))\n", "  (cond\n    ((null? lst) #t)\n    (else\n      (let ((p\
    \ (car lst)))\n        (match_parens (cdr lst))\n        (cond\n          ((null?\
    \ p) #f)\n          (else\n            (let ((q (car p)))\n              (match_parens\
    \ (cdr p))\n              (cond\n                ((null? q) #f)\n            \
    \    (else\n                  (let ((r (car q)))\n                    (cond\n\
    \                      ((null? r) #f)\n                      (else\n         \
    \               (let ((s (car r)))\n                          (cond\n        \
    \                    ((null? s) #f)\n                            (else\n     \
    \                         (let ((t (car s)))\n                               \
    \ (cond\n                                  ((null? t) #f)\n                  \
    \                (else\n                                    (let ((u (car t)))\n\
    \                                      (cond\n                               \
    \         ((null? u) #f)\n                                        (else\n    \
    \                                      (let ((v (car u)))\n                  \
    \                          (cond\n                                           \
    \   ((null? v) #f)\n                                              (else\n    \
    \                                            (let ((w (car v)))\n            \
    \                                      (cond\n                               \
    \                     ((null? w) #f)\n                                       \
    \             (else\n                                                      (let\
    \ ((x (car w)))\n                                                        (cond\n\
    \                                                          ((null? x) #f)\n  \
    \                                                        (else\n             \
    \                                              (let ((y (car x)))\n          \
    \                                                  (cond\n                   \
    \                                           ((null? y) #f)\n                 \
    \                                             (else\n                        \
    \                                        (let ((z (car y)))\n                \
    \                                                  (cond\n                   \
    \                                                 ((null? z) #f)\n           \
    \                                                         (else\n            \
    \                                                          (let ((a (car z)))\n\
    \                                                                        (cond\n\
    \                                                                          ((null?\
    \ a) #f)\n                                                                   \
    \       (else\n                                                              \
    \              (let ((b (car a)))\n", "  (cond\n    ((null? lst) \"Yes\")\n  \
    \  (else\n      (let ((l (car lst)))\n        (match_parens (cdr lst))\n     \
    \   (if (null? (cdr lst))\n          (if (null? l) \"Yes\" \"No\")\n         \
    \   (let ((r (car lst)))\n              (if (null? r)\n                (if (null?\
    \ l) \"Yes\" \"No\")\n                  \"Yes\")\n                (else\n    \
    \              (match_parens (cdr lst))))))))))\n", "  (cond\n    ((null? lst)\
    \ #t)\n    (else\n      (let ((p (car lst)))\n        (match_parens (cdr lst))\n\
    \        (cond\n          ((null? p) #t)\n          (else\n            (let ((q\
    \ (car p)))\n              (match_parens (cdr p))\n              (cond\n     \
    \           ((null? q) #t)\n                (else\n                  (let ((r\
    \ (car q)))\n                    (cond\n                      ((null? r) #t)\n\
    \                      (else\n                        (match_parens (cdr q))\n\
    \                        (#t))))))))))))))\n", "  (cond\n    ((null? lst) \"Yes\"\
    )\n    ((null? (cdr lst)) \"No\")\n    (else\n      (let ((p (car lst)))\n   \
    \     (if (eq? p '(')\n          (match_parens (cdr lst))\n        (else if (eq?\
    \ p ')')\n          (match_parens (cdr lst))\n        (else\n          (match_parens\
    \ (cdr lst)))))\n      )))\n)\n", "  (cond\n    ((null? lst) #t)\n    (else\n\
    \      (let ((p (car lst)))\n        (if (null? (cdr lst))\n            (if (null?\
    \ p) #t\n                #f\n                (match_parens (cdr lst))))\n    \
    \      (match_parens (cdr lst))))))\n", "  (cond\n    ((null? lst) \"Yes\")\n\
    \    ((null? (cdr lst)) \"No\")\n    (else\n      (if (string=? (car lst) \"(\"\
    \ (car (cdr lst)))\n          (match_parens (cdr lst))\n          (match_parens\
    \ (cdr (cdr lst)))) \"Yes\")\n    )\n  )\n)\n", "  (cond\n    ((null? lst) #t)\n\
    \    (else\n      (let ((p1 (car lst)))\n        (if (null? (cdr lst))\n     \
    \     (let ((p2 (car p1)))\n            (if (null? (cdr p1))\n              (let\
    \ ((p3 (car p2)))\n                (if (null? (cdr p2))\n                  (let\
    \ ((p4 (car p3)))\n                    (if (null? (cdr p3))\n                \
    \      (let ((p5 (car p4)))\n                        (if (null? (cdr p4))\n  \
    \                        (let ((p6 (car p5)))\n                            (if\
    \ (null? (cdr p5))\n                              (let ((p7 (car p6)))\n     \
    \                           (if (null? (cdr p6))\n                           \
    \       (let ((p8 (car p7)))\n                                    (if (null? (cdr\
    \ p7))\n                                      (let ((p9 (car p8)))\n         \
    \                               (if (null? (cdr p8))\n                       \
    \                   (let ((p10 (car p9)))\n                                  \
    \          (if (null? (cdr p9))\n                                            \
    \  (let ((p11 (car p10)))\n                                                (if\
    \ (null? (cdr p10))\n                                                  (let ((p12\
    \ (car p11)))\n                                                    (if (null?\
    \ (cdr p11))\n                                                      (let ((p13\
    \ (car p12)))\n                                                        (if (null?\
    \ (cdr p12))\n                                                          (let ((p14\
    \ (car p13)))\n                                                            (if\
    \ (null? (cdr p13))\n                                                        \
    \      (let ((p15 (car p14)))\n                                              \
    \                  (if (null? (cdr p14))\n                                   \
    \                               (let ((p16 (car p15)))\n                     \
    \                                               (if (null? (cdr p15))\n      \
    \                                                                (let ((p17 (car\
    \ p16)))\n                                                                   \
    \     (if (null?", "  (cond\n    ((null? lst) #t)\n    (else\n      (let ((p (car\
    \ lst)))\n        (if (null? (cdr lst))\n            (eq? p '(')\n           \
    \ (eq? p ')')\n            (match_parens (cdr lst)))\n        (else\n        \
    \  (eq? p '(')\n          (match_parens (cdr lst)))))))\n", "  (cond\n    ((null?\
    \ lst) #t)\n    (else\n      (let ((l (car lst)))\n        (match_parens (cdr\
    \ lst))\n        (cond\n          ((null? l) #t)\n          (else\n          \
    \  (let ((r (car l)))\n              (match_parens (cdr lst))\n              (cond\n\
    \                ((null? r) #t)\n                (else\n                  (let\
    \ ((l (car l)))\n                    (let ((r (car l)))\n                    \
    \  (cond\n                        ((null? l) #t)\n                        (else\n\
    \                          (let ((r (car l)))\n                            (cond\n\
    \                              ((null? r) #t)\n                              (else\n\
    \                                (equal? (car l) (car r))\n                  \
    \              (match_parens (cdr lst))))))))))))))))))))))\n", "  (cond\n   \
    \ ((null? lst) #t)\n    (else\n      (let ((l (car lst)))\n        (match_parens\
    \ (cdr lst))\n        (cond\n          ((null? l) #t)\n          (else\n     \
    \       (let ((r (car l)))\n              (match_parens (cdr lst))\n         \
    \     (cond\n                ((null? r) #t)\n                (else\n         \
    \         (let ((r (car r)))\n                    (match_parens (cdr lst))\n \
    \                   (cond\n                      ((null? r) #t)\n            \
    \          (else\n                        (let ((r (car r)))\n               \
    \           (match_parens (cdr lst))\n                          (cond\n      \
    \                      ((null? r) #t)\n                            (else\n   \
    \                           (let ((r (car r)))\n                             \
    \   (match_parens (cdr lst))\n                                (cond\n        \
    \                          ((null? r) #t)\n                                  (else\n\
    \                                    (let ((r (car r)))\n                    \
    \                  (match_parens (cdr lst))\n                                \
    \      (cond\n                                        ((null? r) #t)\n       \
    \                                 (else\n                                    \
    \      (let ((r (car r)))\n                                            (match_parens\
    \ (cdr lst))\n                                            (cond\n            \
    \                                  ((null? r) #t)\n                          \
    \                    (else\n                                                (let\
    \ ((r (car r)))\n                                                  (match_parens\
    \ (cdr lst))\n                                                  (cond\n      \
    \                                              ((null? r) #t)\n              \
    \                                      (else\n                               \
    \                       (let ((r (car r)))\n                                 \
    \                       (match_parens (cdr lst))\n                           \
    \                             (cond\n                                        \
    \                  ((null? r) #t)\n                                          \
    \                (else\n                                                     \
    \      (let ((r (car r)))\n                                                  \
    \            (match_parens (cdr lst))\n                                      \
    \                        (cond\n", "  (cond\n    ((null? lst) #t)\n    (else\n\
    \      (let ((p (car lst)))\n        (match_parens (cdr lst))\n        (cond\n\
    \          ((null? p) #t)\n          (else\n            (let ((q (car p)))\n \
    \             (match_parens (cdr p))\n              (cond\n                ((null?\
    \ q) #t)\n                (else\n                  (let ((r (car q)))\n      \
    \              (cond\n                      ((null? r) #t)\n                 \
    \     (else\n                        (match_parens (cdr q)))))))))))))))\n", " \
    \ (cond\n    ((null? lst) #t)\n    (else\n      (let ((p (car lst)))\n       \
    \ (if (null? (cdr lst))\n            (eq? p '(')\n            (eq? p ')')\n  \
    \          (match_parens (cdr lst))))))\n)\n", "  (cond\n    ((null? lst) #t)\n\
    \    (else\n      (let ((l (car lst)))\n        (if (null? (cdr lst))\n      \
    \      (not (match_parens (cdr lst)))\n            (not (match_parens (cdr (cdr\
    \ lst)))))))))\n", "  (cond\n    ((null? lst) \"Yes\")\n    ((null? (cdr lst))\
    \ \"No\")\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr p))\n\
    \            (if (null? (cdr (cdr p)))\n                \"Yes\")\n           \
    \ (else \"No\"))\n          (match_parens (cdr lst))))))\n", "  (cond\n    ((null?\
    \ lst) #t)\n    (else\n      (let ((p1 (car lst)))\n        (if (null? (cdr lst))\n\
    \          (if (null? p1) #t\n            (else\n              (match_parens (cdr\
    \ lst))))\n          (else\n            (match_parens (cdr lst)))))))))\n", " \
    \ (cond\n    ((null? lst) \"Yes\")\n    (else\n      (let ((p (car lst)))\n  \
    \      (match_parens (cdr lst))\n        (cond\n          ((null? p) \"Yes\")\n\
    \          (else\n            (let ((q (car p)))\n              (match_parens\
    \ (cdr p))\n              (cond\n                ((null? q) \"Yes\")\n       \
    \         (else\n                  (let ((r (car q)))\n                    (match_parens\
    \ (cdr q))\n                    (cond\n                      ((null? r) \"Yes\"\
    )\n                      (else\n                        (let ((s (car r)))\n \
    \                         (match_parens (cdr r))\n                          (cond\n\
    \                            ((null? s) \"Yes\")\n                           \
    \ (else\n                              (let ((t (car s)))\n                  \
    \              (match_parens (cdr s))\n                                (cond\n\
    \                                  ((null? t) \"Yes\")\n                     \
    \             (else\n                                    (let ((u (car t)))\n\
    \                                      (match_parens (cdr t))\n              \
    \                        (cond\n                                        ((null?\
    \ u) \"Yes\")\n                                        (else\n               \
    \                           (let ((v (car u)))\n                             \
    \               (match_parens (cdr u))\n                                     \
    \       (cond\n                                              ((null? v) \"Yes\"\
    )\n                                              (else\n                     \
    \                           (let ((w (car v)))\n                             \
    \                     (match_parens (cdr v))\n                               \
    \                   (cond\n                                                  \
    \  ((null? w) \"Yes\")\n                                                    (else\n\
    \                                                      (let ((x (car w)))\n  \
    \                                                      (match_parens (cdr w))\n\
    \                                                        (cond\n             \
    \                                             ((null? x) \"Yes\")\n          \
    \                                                (else\n                     \
    \                                      (let ((y (car x)))\n                  \
    \                                            (match_parens (cdr x))\n        \
    \                                                      (cond\n               \
    \                                                 ((null? y) \"", "  (cond\n \
    \   ((null? lst) \"Yes\")\n    ((null? (cdr lst)) \"No\")\n    (else\n      (let\
    \ ((p1 (car lst)) (p2 (car (cdr lst))))\n        (cond\n          ((eq? p1 p2)\
    \ \"Yes\")\n          (else\n            (match_parens (cdr lst)))))\n    )\n\
    \  )\n)\n", "  (cond\n    ((null? lst) #t)\n    (else\n      (let ((lst (cdr lst)))\n\
    \        (match_parens (car lst))))))\n", "  (cond\n    ((null? lst) \"Yes\")\n\
    \    ((null? (cdr lst)) \"No\")\n    (else\n      (let ((p1 (car lst)))\n    \
    \    (if (null? (cdr p1))\n          (match_parens (cdr lst))\n          (else\n\
    \            (let ((p2 (car p1)))\n              (match_parens (cdr p1) (cdr p2)))))\n\
    \      \"Yes\"))))\n", "  (cond\n    ((null? lst) #t)\n    (else\n      (let ((p\
    \ (car lst)))\n        (if (null? (cdr lst))\n          (if (eq? p '(') #t)\n\
    \            (else #f))\n          (else\n            (if (eq? p ')')\n      \
    \        (match_parens (cdr lst))\n            (else\n              (match_parens\
    \ (cdr lst)))))))\n  ))\n", "  (cond\n    ((null? lst) #t)\n    (else\n      (let\
    \ ((p (car lst)))\n        (if (null? (cdr lst))\n          (if (null? (cdr (cdr\
    \ p)))\n            (cons (car p) (match_parens (cdr lst)))\n            (cons\
    \ (car p) (match_parens (cdr (cdr p))))\n            (match_parens (cdr lst)))\n\
    \          (match_parens (cdr (cdr p))))\n        (match_parens (cdr lst))))))\n",
  "  (cond\n    ((null? lst) #t)\n    (else\n      (let ((p (car lst)))\n        (match_parens\
    \ (cdr lst))\n        (if (null? (cdr p))\n          (if (null? (cdr (cdr p)))\n\
    \            (eq (car p) '(')\n            (eq (car (cdr p)) '(')\n          \
    \  (eq (car (cdr (cdr p))) '(')\n            (eq (car (cdr (cdr (cdr p)))) '(')\n\
    \            (eq (car (cdr (cdr (cdr (cdr p))))))\n            (eq (car (cdr (cdr\
    \ (cdr (cdr (cdr p)))))) '(')\n            (eq (car (cdr (cdr (cdr (cdr (cdr (cdr\
    \ p))))))))\n            (eq (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr p))))))))\
    \ '(')\n            (eq (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr p))))))))))\n\
    \            (eq (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr p))))))))))\
    \ '(')\n            (eq (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr p))))))))))))\n            (eq (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr p)))))))))))))) '(')\n            (eq (car (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr p)))))))))))))))))) '(')\n            (eq (car (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (", "  (cond\n    [(and (null? lst) #t) \"Yes\"]\n    [(null?\
    \ lst) \"No\"]\n    [(null? (car lst)) \"No\"]\n    [(null? (cdr lst)) \"No\"\
    ]\n    [(car (car lst))\n      (match_parens (cdr (car lst)))\n      (match_parens\
    \ (cdr (cdr (car lst))))]\n    [#t \"Yes\"]\n  )\n)\n", "  (cond\n    ((null?\
    \ lst) \"Yes\")\n    (else\n      (let ((p1 (car lst)))\n        (if (null? (cdr\
    \ lst))\n          \"No\"\n          (match_parens (cdr lst)\n            (if\
    \ (null? (cdr (cdr lst)))\n              \"Yes\"\n              (else\n      \
    \          \"No\"))))))))\n", "  (cond\n    ((null? lst) #t)\n    (else\n    \
    \  (let ((p (car lst)))\n        (if (null? (cdr lst))\n            (if (eq? p\
    \ '(') #t)\n              (else #f))\n          (else\n            (if (eq? p\
    \ ')')\n              (if (null? (cdr (cdr lst))) #t)\n                (else #f))\n\
    \            (else\n              (let ((pp (car (cdr lst))))\n              \
    \  (if (eq? pp '(') #t)\n                  (else\n                    (if (eq?\
    \ pp ')')\n                      (if (null? (cdr (cdr (cdr lst)))) #t)\n     \
    \                   (else #f))\n                    (else\n                  \
    \    (let ((ppp (car (cdr (cdr (cdr lst)))))\n                            (if\
    \ (eq? ppp '(') #t)\n                              (else\n                   \
    \             (if (eq? ppp ')')\n                                  (if (null?\
    \ (cdr (cdr (cdr (cdr lst))))) #t)\n                                  (else #f))\n\
    \                                (else #f))))))))))))))))))\n", "  (cond\n   \
    \ ((null? lst) #t)\n    (else\n      (let ((p (car lst)))\n        (if (null?\
    \ (cdr lst))\n          (not (equal? p '('))\n          (not (equal? p ')'))\n\
    \          (match_parens (cdr lst)))))))\n", "  (cond\n    ((null? lst) #t)\n\
    \    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n      \
    \      (if (eq? p '(') #t)\n              (else #f))\n          (else\n      \
    \      (if (eq? p ')')\n              (if (null? (cdr (cdr lst))) #t)\n      \
    \          (else #f))\n            (else\n              (let ((pp (car (cdr lst))))\n\
    \                (if (eq? pp '(') #t)\n                  (else\n             \
    \       (if (eq? pp ')')\n                      (if (null? (cdr (cdr (cdr lst))))\
    \ #t)\n                        (else #f))\n                    (else\n       \
    \               (let ((ppp (car (cdr (cdr (cdr lst)))))\n                    \
    \        (if (eq? ppp '(') #t)\n                              (else\n        \
    \                        (if (eq? ppp ')')\n                                 \
    \ (if (null? (cdr (cdr (cdr (cdr lst))))) #t)\n                              \
    \    (else #f))\n                                (else #f))))))))))))))))))\n",
  "  (cond\n    ((null? lst) #t)\n    (else\n      (let ((p (car lst)))\n        (if\
    \ (eq? p '(')\n          (match_parens (cdr lst))\n          (else\n         \
    \   (if (eq? p ')')\n              (match_parens (cdr lst))\n            (else\n\
    \              (match_parens (cdr lst))))))))))\n", "  (define (match paren)\n\
    \    (cond\n      [(eq? paren '(')\n        (match paren)]\n      [(eq? paren\
    \ ')')\n        (match paren)\n        (else\n          (error \"Unbalanced parenthesis\"\
    )\n          (match paren))]\n      [(error \"Invalid parenthesis\")\n       \
    \ (match paren)]))\n  (match lst)\n)\n", "  (cond\n    ((null? lst) #t)\n    (else\n\
    \      (let ((p (car lst)))\n        (match_parens (cdr lst))\n        (cond\n\
    \          ((null? p) #f)\n          (else\n            (let ((q (car p)))\n \
    \             (match_parens (cdr p))\n              (cond\n                ((null?\
    \ q) #f)\n                (else\n                  (let ((r (car q)))\n      \
    \              (cond\n                      ((null? r) #f)\n                 \
    \     (else\n                        (let ((s (car r)))\n                    \
    \      (cond\n                            ((null? s) #f)\n                   \
    \         (else\n                              (let ((t (car s)))\n          \
    \                      (cond\n                                  ((null? t) #f)\n\
    \                                  (else\n                                   \
    \ (let ((u (car t)))\n                                      (cond\n          \
    \                              ((null? u) #f)\n                              \
    \          (else\n                                          (let ((v (car u)))\n\
    \                                            (cond\n                         \
    \                     ((null? v) #f)\n                                       \
    \       (else\n                                                (let ((w (car v)))\n\
    \                                                  (cond\n                   \
    \                                 ((null? w) #f)\n                           \
    \                         (else\n                                            \
    \          (let ((x (car w)))\n                                              \
    \          (cond\n                                                          ((null?\
    \ x) #f)\n                                                          (else\n  \
    \                                                         (let ((y (car x)))\n\
    \                                                            (cond\n         \
    \                                                     ((null? y) #f)\n       \
    \                                                       (else\n              \
    \                                                  (let ((z (car y)))\n      \
    \                                                            (cond\n         \
    \                                                           ((null? z) #f)\n \
    \                                                                   (else\n  \
    \                                                                    (let ((a\
    \ (car z)))\n                                                                \
    \        (cond\n                                                             \
    \             ((null? a) #f)\n                                               \
    \                           (else\n                                          \
    \                                  (let ((b (car a)))\n", "  (define (match paren)\n\
    \    (cond\n      [(eq? paren '(')\n        (match_parens (cdr lst))]\n      [(eq?\
    \ paren ')')\n        (match_parens (cdr lst))]\n      [(eq? paren '(')\n    \
    \    (match_parens (cdr lst))]\n      [(eq? paren ')')\n        (match_parens\
    \ (cdr lst))]\n      [(eq? paren '(')\n        (match_parens (cdr lst))]\n   \
    \   [(eq? paren ')')\n        (match_parens (cdr lst))]\n      [(eq? paren '(')\n\
    \        (match_parens (cdr lst))]\n      [(eq? paren ')')\n        (match_parens\
    \ (cdr lst))]\n      [(eq? paren '(')\n        (match_parens (cdr lst))]\n   \
    \   [(eq? paren ')')\n        (match_parens (cdr lst))]\n      [(eq? paren '(')\n\
    \        (match_parens (cdr lst))]\n      [(eq? paren ')')\n        (match_parens\
    \ (cdr lst))]\n      [(eq? paren '(')\n        (match_parens (cdr lst))]\n   \
    \   [(eq? paren ')')\n        (match_parens (cdr lst))]\n      [(eq? paren '(')\n\
    \        (match_parens (cdr lst))]\n      [(eq? paren ')')\n        (match_parens\
    \ (cdr lst))]\n      [(eq? paren '(')\n        (match_parens (cdr lst))]\n   \
    \   [(eq? paren ')')\n        (match_parens (cdr lst))]\n      [(eq? paren '(')\n\
    \        (match_parens (cdr lst))]\n      [(eq? paren ')')\n        (match_parens\
    \ (cdr lst))]", "  (cond\n    ((null? lst) \"Yes\")\n    (else\n      (let ((p\
    \ (car lst)))\n        (match_parens (cdr lst))\n        (cond\n          ((null?\
    \ p) \"Yes\")\n          (else\n            (cond\n              ((null? (cdr\
    \ p)) \"Yes\")\n              (else\n                (let ((q (car (cdr p))))\n\
    \                  (match_parens (cdr (cdr p)))\n                  (cond\n   \
    \                 ((null? q) \"Yes\")\n                    (else\n           \
    \           (cond\n                        ((null? (cdr q)) \"Yes\")\n       \
    \                 (else\n                          (let ((r (car (cdr q))))\n\
    \                            (match_parens (cdr (cdr q))))\n                 \
    \         (cond\n                            ((null? r) \"Yes\")\n           \
    \                 (else\n                              (cond\n               \
    \                 (null? (cdr r)) \"Yes\")\n                                (else\n\
    \                                  \"No\"))))))))))))))))))))))\n", "  (cond\n\
    \    ((null? lst) \"Yes\")\n    (else\n      (let ((l (car lst)))\n        (match_parens\
    \ (cdr lst))\n        (if (null? (cdr lst))\n          (if (null? l) \"Yes\" \"\
    No\")\n            (if (null? (car l)) \"Yes\" \"No\")\n              (if (null?\
    \ (car (cdr l))) \"Yes\" \"No\")\n                \"Yes\"\n              )\n \
    \           )\n        )\n      )\n    )\n)\n", "  (cond\n    ((null? lst) #t)\n\
    \    (else\n      (let ((p1 (car lst)))\n        (if (null? (cdr lst))\n     \
    \     (let ((p2 (car p1)))\n            (if (null? (cdr p1))\n              (let\
    \ ((p3 (car p2)))\n                (if (null? (cdr p2))\n                  (let\
    \ ((p4 (car p3)))\n                    (if (null? (cdr p3))\n                \
    \      (let ((p5 (car p4)))\n                        (if (null? (cdr p4))\n  \
    \                        (let ((p6 (car p5)))\n                            (if\
    \ (null? (cdr p5))\n                              (let ((p7 (car p6)))\n     \
    \                           (if (null? (cdr p6))\n                           \
    \       (let ((p8 (car p7)))\n                                    (if (null? (cdr\
    \ p7))\n                                      (let ((p9 (car p8)))\n         \
    \                               (if (null? (cdr p8))\n                       \
    \                   (let ((p10 (car p9)))\n                                  \
    \          (if (null? (cdr p9))\n                                            \
    \  (let ((p11 (car p10)))\n                                                (if\
    \ (null? (cdr p10))\n                                                  (let ((p12\
    \ (car p11)))\n                                                    (if (null?\
    \ (cdr p11))\n                                                      (let ((p13\
    \ (car p12)))\n                                                        (if (null?\
    \ (cdr p12))\n                                                          (let ((p14\
    \ (car p13)))\n                                                            (if\
    \ (null? (cdr p13))\n                                                        \
    \      (let ((p15 (car p14)))\n                                              \
    \                  (if (null? (cdr p14))\n                                   \
    \                               (let ((p16 (car p15)))\n                     \
    \                                               (if (null? (cdr p15))\n      \
    \                                                                (let ((p17 (car\
    \ p16)))\n                                                                   \
    \     (if (null?", "  (cond\n    ((null? lst) \"Yes\")\n    (else\n      (let\
    \ ((p1 (car lst)))\n        (if (null? (cdr lst))\n          \"No\"\n        \
    \  (match_parens (cdr lst))))))\n", "  (cond\n    ((null? lst) #t)\n    (else\n\
    \      (let ((p (car lst)))\n        (if (null? (cdr lst))\n            (if (null?\
    \ p) #t #f)\n              (else\n                (match_parens (cdr lst))))\n\
    \          (match_parens (cdr lst))))))\n", "  (cond\n    ((null? lst) #t)\n \
    \   (else\n      (let ((p (car lst)))\n        (match_parens (cdr lst))\n    \
    \    (cond\n          ((null? p) #t)\n          (else\n            (let ((q (car\
    \ p)))\n              (match_parens (cdr p))\n              (cond\n          \
    \      ((null? q) #t)\n                (else\n                  (let ((r (car\
    \ q)))\n                    (cond\n                      ((null? r) #t)\n    \
    \                  (else\n                        (let ((s (car r)))\n       \
    \                   (cond\n                            ((null? s) #t)\n      \
    \                      (else\n                              (let ((t (car s)))\n\
    \                                (cond\n                                  ((null?\
    \ t) #t)\n                                  (else\n                          \
    \          (let ((u (car t)))\n                                      (cond\n \
    \                                       ((null? u) #t)\n                     \
    \                   (else\n                                          (let ((v\
    \ (car u)))\n                                            (cond\n             \
    \                                 ((null? v) #t)\n                           \
    \                   (else\n                                                (let\
    \ ((w (car v)))\n                                                  (cond\n   \
    \                                                 ((null? w) #t)\n           \
    \                                         (else\n                            \
    \                          (let ((x (car w)))\n                              \
    \                          (cond\n                                           \
    \               ((null? x) #t)\n                                             \
    \             (else\n                                                        \
    \    (let ((y (car x)))\n                                                    \
    \          (cond\n                                                           \
    \     ((null? y) #t)\n                                                       \
    \         (else\n                                                            \
    \      (let ((z (car y)))\n                                                  \
    \                  (cond\n                                                   \
    \                   ((null? z) #t)\n                                         \
    \                             (else\n                                        \
    \                                (let ((a (car z)))\n                        \
    \                                                  (cond\n                   \
    \                                                         ((null? a) #t)\n   \
    \                                                                         (else\n\
    \                                                                            \
    \  (let ((b (car a)))\n                                                      \
    \                          ", "  (define (match_parens_helper lst)\n    (cond\n\
    \      [(string=? lst \"\") \"Yes\"]\n      [(string=? lst \"()\") \"No\"]\n \
    \     [(string=? lst \"()()\") \"Yes\"]\n      [(string=? lst \"()()()\") \"Yes\"\
    ]\n      [(string=? lst \"()()()()\") \"Yes\"]\n      [(string=? lst \"()()()()()\"\
    ) \"Yes\"]\n      [(string=? lst \"()()()()()()\") \"Yes\"]\n      [(string=?\
    \ lst \"()()()()()()()\") \"Yes\"]\n      [(string=? lst \"()()()()()()()()\"\
    ) \"Yes\"]\n      [(string=? lst \"()()()()()()()()()\") \"Yes\"]\n      [(string=?\
    \ lst \"()()()()()()()()()()\") \"Yes\"]\n      [(string=? lst \"()()()()()()()()()()()\"\
    ) \"Yes\"]\n      [(string=? lst \"()()()()()()()()()()()()\") \"Yes\"]\n    \
    \  [(string=? lst \"()()()()()()()()()()()()()\") \"Yes\"]\n      [(string=? lst\
    \ \"()()()()()()()()()()()()()()\") \"Yes\"]\n      [(string=? lst \"()()()()()()()()()()()()()()()\"\
    ) \"Yes\"]\n      [(string=? lst \"()()()()()()()()()()()()()()()()\") \"Yes\"\
    ]\n      [(string=? lst \"()()()()()()()()()()()()()()()()()\") \"Yes\"]\n   \
    \   [(string=? lst \"()()()()()()()()()()()()()()()()()()\") \"Yes\"]\n      [(string=?\
    \ lst \"()()()()()()()()()()()()()()()()()()()\") \"Yes\"]\n      [(string=? lst\
    \ \"()()()()()()()()()()()()()()", "  (cond\n    ((null? lst) #t)\n    (else\n\
    \      (let ((p1 (car lst)))\n        (if (null? (cdr lst))\n            (not\
    \ (equal? p1 \"(\"))\n            (match_parens (cdr lst)))))))\n", "  (cond\n\
    \    ((null? lst) \"Yes\")\n    (else\n      (let ((p (car lst)))\n        (match_parens\
    \ (cdr lst))\n        (cond\n          ((null? p) \"Yes\")\n          (else\n\
    \            (let ((q (car p)))\n              (match_parens (cdr p))\n      \
    \        (cond\n                ((null? q) \"Yes\")\n                (else\n \
    \                 (let ((r (car q)))\n                    (cond\n            \
    \          ((null? r) \"Yes\")\n                      (else\n                \
    \        (let ((s (car r)))\n                          (cond\n               \
    \             ((null? s) \"Yes\")\n                            (else\n       \
    \                       (let ((t (car s)))\n                                (cond\n\
    \                                  ((null? t) \"Yes\")\n                     \
    \             (else\n                                    (let ((u (car t)))\n\
    \                                      (cond\n                               \
    \         ((null? u) \"Yes\")\n                                        (else\n\
    \                                          (let ((v (car u)))\n              \
    \                              (cond\n                                       \
    \       ((null? v) \"Yes\")\n                                              (else\n\
    \                                                (let ((w (car v)))\n        \
    \                                          (cond\n                           \
    \                         ((null? w) \"Yes\")\n                              \
    \                      (else\n                                               \
    \       (let ((x (car w)))\n                                                 \
    \       (cond\n                                                          ((null?\
    \ x) \"Yes\")\n                                                          (else\n\
    \                                                           (let ((y (car x)))\n\
    \                                                              (cond\n       \
    \                                                         ((null? y) \"Yes\")\n\
    \                                                                (else\n     \
    \                                                             (let ((z (car y)))\n\
    \                                                                    (cond\n \
    \                                                                     ((null?\
    \ z) \"Yes\")\n                                                              \
    \        (else\n                                                             \
    \           (let ((a (car z)))\n                                             \
    \                             (cond\n                                        \
    \                                    ((null? a) \"Yes\")\n                   \
    \                                                         (else\n            \
    \                                                                  (let ((b (car\
    \ a)))\n                                                                     \
    \           (", "  (cond\n    ((null? lst) #t)\n    (else\n      (let ((p1 (car\
    \ lst)))\n        (if (null? (cdr lst))\n            (eq? p1 \")\")\n        \
    \    (match_parens (cdr lst)))))))\n", "  (cond\n    ((null? lst) #t)\n    (else\n\
    \      (let ((l (car lst)))\n        (match_parens (cdr lst))\n        (if (null?\
    \ (cdr lst))\n          (if (null? l) #t\n            (else (if (null? (car l))\
    \ #t) #f)))))))))\n", "  (cond\n    ((null? lst) \"Yes\")\n    (else\n      (let\
    \ ((l (car lst)))\n        (match_parens (cdr lst))\n        (cond\n         \
    \ ((null? l) \"Yes\")\n          (else\n            (let ((r (car l)))\n     \
    \         (match_parens (cdr lst))\n              (cond\n                ((null?\
    \ r) \"Yes\")\n                (else\n                  (let ((l (car l)))\n \
    \                   (let ((r (car l)))\n                      (cond\n        \
    \                ((null? l) \"Yes\")\n                        (else\n        \
    \                  (let ((r (car l)))\n                            (cond\n   \
    \                           ((null? r) \"Yes\")\n                            \
    \  (else\n                                \"No\"))))))))))))))))))\n", "  (cond\n\
    \    ((null? lst) #t)\n    (else\n      (let ((s (car lst)))\n        (match_parens\
    \ (cdr lst))\n        (cond\n          ((null? s) #t)\n          (else\n     \
    \       (let ((p (car s)))\n              (cond\n                ((null? p) #t)\n\
    \                (else\n                  (let ((q (car p)))\n               \
    \     (cond\n                      ((null? q) #t)\n                      (else\n\
    \                        (let ((r (car q)))\n                          (cond\n\
    \                            ((null? r) #t)\n                            (else\n\
    \                              (let ((s (car r)))\n                          \
    \      (cond\n                                  ((null? s) #t)\n             \
    \                     (else\n                                    (let ((p (car\
    \ s)))\n                                      (cond\n                        \
    \                ((null? p) #t)\n                                        (else\n\
    \                                          (let ((q (car p)))\n              \
    \                              (cond\n                                       \
    \       ((null? q) #t)\n                                              (else\n\
    \                                                (let ((r (car q)))\n        \
    \                                          (cond\n                           \
    \                         ((null? r) #t)\n                                   \
    \                 (else\n                                                    \
    \  (let ((s (car r)))\n                                                      \
    \  (cond\n                                                          ((null? s)\
    \ #t)\n                                                          (else\n     \
    \                                                      (let ((p (car s)))\n  \
    \                                                            (cond\n         \
    \                                                       ((null? p) #t)\n     \
    \                                                           (else\n          \
    \                                                        (let ((q (car p)))\n\
    \                                                                    (cond\n \
    \                                                                     ((null?\
    \ q) #t)\n                                                                   \
    \   (else\n                                                                  \
    \      (let ((r (car q)))\n                                                  \
    \                        (cond\n                                             \
    \                               ((null? r) #t)\n                             \
    \                                               (else\n                      \
    \                                                        (let ((s (car r)))\n\
    \                                                                            \
    \    (cond\n                                                                 \
    \                   ((null? s) #", "  (cond\n    ((null? lst) #t)\n    (else\n\
    \      (let ((p (car lst)))\n        (match_parens (cdr lst))\n        (cond\n\
    \          ((null? p) #t)\n          (else\n            (let ((q (car p)))\n \
    \             (match_parens (cdr p))\n              (cond\n                ((null?\
    \ q) #t)\n                (else\n                  (let ((r (car q)))\n      \
    \              (cond\n                      ((null? r) #t)\n                 \
    \     (else\n                        (let ((s (car r)))\n                    \
    \      (cond\n                            ((null? s) #t)\n                   \
    \         (else\n                              (let ((t (car s)))\n          \
    \                      (cond\n                                  ((null? t) #t)\n\
    \                                  (else\n                                   \
    \ (let ((u (car t)))\n                                      (cond\n          \
    \                              ((null? u) #t)\n                              \
    \          (else\n                                          (let ((v (car u)))\n\
    \                                            (cond\n                         \
    \                     ((null? v) #t)\n                                       \
    \       (else\n                                                (let ((w (car v)))\n\
    \                                                  (cond\n                   \
    \                                 ((null? w) #t)\n                           \
    \                         (else\n                                            \
    \          (let ((x (car w)))\n                                              \
    \          (cond\n                                                          ((null?\
    \ x) #t)\n                                                          (else\n  \
    \                                                          (let ((y (car x)))\n\
    \                                                              (cond\n       \
    \                                                         ((null? y) #t)\n   \
    \                                                             (else\n        \
    \                                                          (let ((z (car y)))\n\
    \                                                                    (cond\n \
    \                                                                     ((null?\
    \ z) #t)\n                                                                   \
    \   (else\n                                                                  \
    \      (let ((a (car z)))\n                                                  \
    \                        (cond\n                                             \
    \                               ((null? a) #t)\n                             \
    \                                               (else\n                      \
    \                                                        (let ((b (car a)))\n\
    \                                                                            \
    \    ", "  (cond\n    ((null? lst) \"Yes\")\n    (else\n      (let ((p1 (car lst)))\n\
    \        (if (null? (cdr lst))\n          \"No\"\n          (match_parens (cdr\
    \ lst))))))\n", "  (cond\n    ((null? lst) #t)\n    (else\n      (let ((p (car\
    \ lst)))\n        (match_parens (cdr lst))\n        (cond\n          ((null? p)\
    \ #t)\n          (else\n            (let ((q (car p)))\n              (cond\n\
    \                ((null? q) #t)\n                (else\n                  (let\
    \ ((r (car q)))\n                    (cond\n                      ((null? r) #t)\n\
    \                      (else\n                        (let ((s (car r)))\n   \
    \                       (cond\n                            ((null? s) #t)\n  \
    \                          (else\n                              (let ((t (car\
    \ s)))\n                                (cond\n                              \
    \    ((null? t) #t)\n                                  (else\n               \
    \                     (let ((u (car t)))\n                                   \
    \   (cond\n                                        ((null? u) #t)\n          \
    \                              (else\n                                       \
    \   (let ((v (car u)))\n                                            (cond\n  \
    \                                            ((null? v) #t)\n                \
    \                              (else\n                                       \
    \         (let ((w (car v)))\n                                               \
    \   (cond\n                                                    ((null? w) #t)\n\
    \                                                    (else\n                 \
    \                                     (let ((x (car w)))\n                   \
    \                                     (cond\n                                \
    \                          ((null? x) #t)\n                                  \
    \                        (else\n                                             \
    \              (let ((y (car x)))\n                                          \
    \                  (cond\n                                                   \
    \           ((null? y) #t)\n                                                 \
    \             (else\n                                                        \
    \        (let ((z (car y)))\n                                                \
    \                  (cond\n                                                   \
    \                 ((null? z) #t)\n                                           \
    \                         (else\n                                            \
    \                          (let ((a (car z)))\n                              \
    \                                          (cond\n                           \
    \                                               ((null? a) #t)\n             \
    \                                                             (else\n        \
    \                                                                    (let ((b\
    \ (car a)))\n                                                                \
    \              (cond\n                                                       \
    \                 ", "  (cond\n    ((null? lst) #t)\n    (else\n      (let ((p\
    \ (car lst)))\n        (match_parens (cdr lst))\n        (cond\n          ((null?\
    \ p) #t)\n          (else\n            (let ((q (car p)))\n              (match_parens\
    \ (cdr p))\n              (cond\n                ((null? q) #t)\n            \
    \    (else\n                  (let ((r (car q)))\n                    (cond\n\
    \                      ((null? r) #t)\n                      (else\n         \
    \               (let ((s (car r)))\n                          (cond\n        \
    \                    ((null? s) #t)\n                            (else\n     \
    \                         (let ((t (car s)))\n                               \
    \ (cond\n                                  ((null? t) #t)\n                  \
    \                (else\n                                    (let ((u (car t)))\n\
    \                                      (cond\n                               \
    \         ((null? u) #t)\n                                        (else\n    \
    \                                      (let ((v (car u)))\n                  \
    \                          (cond\n                                           \
    \   ((null? v) #t)\n                                              (else\n    \
    \                                            (let ((w (car v)))\n            \
    \                                      (cond\n                               \
    \                     ((null? w) #t)\n                                       \
    \             (else\n                                                      (let\
    \ ((x (car w)))\n                                                        (cond\n\
    \                                                          ((null? x) #t)\n  \
    \                                                        (else\n             \
    \                                              (let ((y (car x)))\n          \
    \                                                    (cond\n                 \
    \                                               ((null? y) #t)\n             \
    \                                                   (else\n                  \
    \                                                (let ((z (car y)))\n        \
    \                                                            (cond\n         \
    \                                                             ((null? z) #t)\n\
    \                                                                      (else\n\
    \                                                                        (let\
    \ ((a (car z)))\n                                                            \
    \              (cond\n                                                       \
    \                     ((null? a) #t)\n                                       \
    \                                     (else\n                                \
    \                                              (let ((b (car a)))\n          \
    \                                                                      (", " \
    \ (cond\n    ((null? lst) \"Yes\")\n    ((null? (cdr lst)) \"No\")\n    (else\n\
    \      (if (match_parens (car lst))\n        (match_parens (cdr lst))\n      \
    \  (else \"No\"))))\n)\n", "  (cond\n    ((null? lst) #t)\n    (else\n      (let\
    \ ((p1 (car lst)))\n        (if (null? (cdr p1))\n            (car p1)\n     \
    \       (match_parens (cdr p1))))))\n", "  (define (match_parens_helper lst)\n\
    \    (cond\n      ((null? lst) #t)\n      (else\n        (match_parens_helper\
    \ (cdr lst)))))\n  (match_parens_helper lst))\n", "  (cond\n    ((null? lst) \"\
    Yes\")\n    (else\n      (let ((l (car lst)))\n        (if (null? (cdr lst))\n\
    \          (if (match_parens (cdr lst))\n            \"Yes\")\n          \"No\"\
    )\n        (else\n          (if (match_parens (cdr lst))\n            \"Yes\"\
    )\n          \"No\"))))\n", "  (cond\n    ((null? lst) \"Yes\")\n    (else\n \
    \     (let ((p1 (car lst)))\n        (if (null? (cdr lst))\n          \"No\"\n\
    \          (let ((p2 (car (cdr ldr))))\n            (if (null? (cdr (cdr lst)))\n\
    \              (if (eq? p1 p2)\n                \"Yes\"\n                \"No\"\
    )\n              \"No\")\n            \"No\")\n          \"No\")\n        \"No\"\
    )\n      \"No\")\n  )\n)\n", "  (cond\n    ((null? lst) \"Yes\")\n    (else\n\
    \      (let ((l (car lst)))\n        (match_parens (cdr lst))\n        (cond\n\
    \          ((null? l) \"Yes\")\n          (else\n            (let ((r (car l)))\n\
    \              (match_parens (cdr lst))\n              (cond\n               \
    \ ((null? r) \"Yes\")\n                (else\n                  (let ((l (car\
    \ l)))\n                    (let ((r (car l)))\n                      (cond\n\
    \                        ((null? l) \"Yes\")\n                        (else\n\
    \                          (let ((r (car l)))\n                            (cond\n\
    \                              ((null? r) \"Yes\")\n                         \
    \     (else\n                                (match_parens (cdr lst))))))))))))))))))))))\n",
  "  (cond\n    ((null? lst) #t)\n    (else\n      (let ((p (car lst)))\n        (match_parens\
    \ (cdr lst))\n        (cond\n          ((null? p) #t)\n          (else\n     \
    \       (let ((q (car p)))\n              (match_parens (cdr p))\n           \
    \   (cond\n                ((null? q) #t)\n                (else\n           \
    \       (let ((r (car q)))\n                    (cond\n                      ((null?\
    \ r) #t)\n                      (else\n                        (match_parens (cdr\
    \ q))\n                        (#t))))))))))))))))\n", "  (cond\n    ((null? lst)\
    \ #t)\n    (else\n      (let ((p (car lst)))\n        (if (eq? p '(')\n      \
    \    (match_parens (cdr lst))\n        (else if (eq? p ')')\n          (match_parens\
    \ (cdr lst))\n        (else\n          (match_parens (cdr lst)))))))))\n", " \
    \ (cond\n    ((null? lst) \"Yes\")\n    (else\n      (let ((l (car lst)))\n  \
    \      (match_parens (cdr lst))\n        (if (null? l) \"Yes\" \"No\"))))\n",
  "  (cond\n    ((null? lst) #t)\n    (else\n      (let ((p (car lst)))\n        (if\
    \ (null? (cdr lst))\n          (eq? p '(')\n          (eq? p ')')\n          (match_parens\
    \ (cdr lst))))))\n)\n", "  (define (match_parens_helper lst)\n    (cond\n    \
    \  [(string=? lst) \"Yes\"]\n      [(string? lst) \"No\"]\n      [(null? lst)\
    \ \"Yes\"]\n      [(null? (cdr lst)) \"No\"]\n      [(null? (car lst)) \"No\"\
    ]\n      [(null? (car (cdr lst))) \"No\"]\n      [(null? (car (cdr (cdr lst))))\
    \ \"No\"]\n      [(null? (car (cdr (cdr (cdr lst)))))) \"No\"]\n      [(null?\
    \ (car (cdr (cdr (cdr (cdr lst)))))) \"No\"]\n      [(null? (car (cdr (cdr (cdr\
    \ (cdr (cdr lst)))))))) \"No\"]\n      [(null? (car (cdr (cdr (cdr (cdr (cdr (cdr\
    \ lst)))))))) \"No\"]\n      [(null? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst))))))))))\
    \ \"No\"]\n      [(null? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst))))))))))\
    \ \"No\"]\n      [(null? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst))))))))))))\
    \ \"No\"]\n      [(null? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ lst)))))))))))) \"No\"]\n      [(null? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr lst)))))))))))))) \"No\"]\n      [(null? (car (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst))))))))))))))))\
    \ \"No", "  (cond\n    ((null? lst) #t)\n    (else\n      (let ((p (car lst)))\n\
    \        (match_parens (cdr lst))\n        (cond\n          ((null? p) #t)\n \
    \         (else\n            (let ((q (car p)))\n              (match_parens (cdr\
    \ p))\n              (cond\n                ((null? q) #t)\n                (else\n\
    \                  (let ((r (car q)))\n                    (cond\n           \
    \           ((null? r) #t)\n                      (else\n                    \
    \    (let ((s (car r)))\n                          (cond\n                   \
    \         ((null? s) #t)\n                            (else\n                \
    \              (let ((t (car s)))\n                                (cond\n   \
    \                               ((null? t) #t)\n                             \
    \     (else\n                                    (let ((u (car t)))\n        \
    \                              (cond\n                                       \
    \ ((null? u) #t)\n                                        (else\n            \
    \                              (let ((v (car u)))\n                          \
    \                  (cond\n                                              ((null?\
    \ v) #t)\n                                              (else\n              \
    \                                  (let ((w (car v)))\n                      \
    \                            (cond\n                                         \
    \           ((null? w) #t)\n                                                 \
    \   (else\n                                                      (let ((x (car\
    \ w)))\n                                                        (cond\n      \
    \                                                    ((null? x) #t)\n        \
    \                                                  (else\n                   \
    \                                         (let ((y (car x)))\n               \
    \                                               (cond\n                      \
    \                                          ((null? y) #t)\n                  \
    \                                              (else\n                       \
    \                                           (let ((z (car y)))\n             \
    \                                                       (cond\n              \
    \                                                        ((null? z) #t)\n    \
    \                                                                  (else\n   \
    \                                                                     (let ((a\
    \ (car z)))\n                                                                \
    \          (cond\n                                                           \
    \                 ((null? a) #t)\n                                           \
    \                                 (else\n                                    \
    \                                          (let ((b (car a)))\n              \
    \                                                                  ", "  (cond\n\
    \    ((null? lst) \"Yes\")\n    (else\n      (let ((l (car lst)))\n        (match_parens\
    \ (cdr lst))\n        (cond\n          ((null? l) \"Yes\")\n          (else\n\
    \            (let ((r (car l)))\n              (match_parens (cdr lst))\n    \
    \          (cond\n                ((null? r) \"Yes\")\n                (else\n\
    \                  (let ((l (car l)))\n                    (let ((r (car l)))\n\
    \                      (cond\n                        ((null? l) \"Yes\")\n  \
    \                      (else\n                          (let ((r (car l)))\n \
    \                           (cond\n                              ((null? r) \"\
    Yes\")\n                              (else\n                                (if\
    \ (eq? l r) \"Yes\" \"No\"))))))))))))))))))))))\n", "  (cond\n    ((null? lst)\
    \ \"Yes\")\n    (else\n      (let ((p (car lst)))\n        (match_parens (cdr\
    \ lst))\n        (cond\n          ((null? p) \"Yes\")\n          (else\n     \
    \       (let ((q (car p)))\n              (match_parens (cdr p))\n           \
    \   (cond\n                ((null? q) \"Yes\")\n                (else\n      \
    \            (let ((r (car q)))\n                    (match_parens (cdr q))\n\
    \                    (cond\n                      ((null? r) \"Yes\")\n      \
    \                (else\n                        (let ((s (car r)))\n         \
    \                 (match_parens (cdr r))\n                          (cond\n  \
    \                          ((null? s) \"Yes\")\n                            (else\n\
    \                              (let ((t (car s)))\n                          \
    \      (match_parens (cdr s))\n                                (cond\n       \
    \                           ((null? t) \"Yes\")\n                            \
    \      (else\n                                    (let ((u (car t)))\n       \
    \                               (match_parens (cdr t))\n                     \
    \                 (cond\n                                        ((null? u) \"\
    Yes\")\n                                        (else\n                      \
    \                    (let ((v (car u)))\n                                    \
    \        (match_parens (cdr u))\n                                            (cond\n\
    \                                              ((null? v) \"Yes\")\n         \
    \                                     (else\n                                \
    \                (let ((w (car v)))\n                                        \
    \          (match_parens (cdr v))\n                                          \
    \        (cond\n                                                    ((null? w)\
    \ \"Yes\")\n                                                    (else\n      \
    \                                                (let ((x (car w)))\n        \
    \                                                (match_parens (cdr w))\n    \
    \                                                    (cond\n                 \
    \                                         ((null? x) \"Yes\")\n              \
    \                                            (else\n                         \
    \                                  (let ((y (car x)))\n                      \
    \                                        (match_parens (cdr x))\n            \
    \                                                  (cond\n                   \
    \                                             ((null? y) \"", "  (cond\n    ((null?\
    \ lst) #t)\n    (else\n      (let ((p (car lst)))\n        (if (eq? p '(')\n \
    \         (match_parens (cdr lst))\n        (else if (eq? p ')')\n          (match_parens\
    \ (cdr lst))\n        (else\n          (match_parens (cdr lst)))))))))\n", " \
    \ (cond\n    ((null? lst) \"Yes\")\n    ((null? (cdr lst)) \"No\")\n    (else\n\
    \      (let ((p1 (car lst)))\n        (if (null? (cdr p1))\n          \"Yes\"\n\
    \          (match_parens (cdr p1) \"No\")))\n    )\n  )\n)\n", "  (cond\n    ((null?\
    \ lst) \"Yes\")\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr\
    \ lst))\n            (if (eq? p \")\") \"Yes\")\n            (else\n         \
    \     (match_parens (cdr lst))))))\n  )\n", "  (cond\n    ((null? lst) \"Yes\"\
    )\n    (else\n      (let ((l (car lst)))\n        (match_parens (cdr lst))\n \
    \       (if (null? (cdr lst))\n          (if (null? l) \"Yes\" \"No\")\n     \
    \       (let ((r (car lst)))\n              (if (null? r)\n                (if\
    \ (null? l) \"Yes\" \"No\")\n                  \"Yes\")\n                (else\n\
    \                  (match_parens (cdr lst))))))))))\n", "  (cond\n    ((null?\
    \ lst) \"Yes\")\n    (else\n      (let ((p (car lst)))\n        (if (eq? p '(')\n\
    \          (match_parens (cdr lst))\n        (else\n          (if (eq? p ')')\n\
    \            (match_parens (cdr lst))\n          (else\n            \"No\"))))))\n\
    )\n", "  (cond\n    ((null? lst) \"Yes\")\n    (else\n      (let ((p (car lst)))\n\
    \        (if (null? (cdr lst))\n            (if (null? p) \"Yes\" \"No\")\n  \
    \            (match_parens (cdr lst))))))))\n", "  (cond\n    ((null? lst) \"\
    Yes\")\n    ((null? (cdr lst)) \"No\")\n    (else\n      (let ((p (car lst)))\n\
    \        (if (null? (cdr p))\n          (let ((q (car (cdr p))))\n           \
    \ (match_parens (cdr q))))\n          (match_parens (cdr lst)))))))\n", "  (cond\n\
    \    ((null? lst) #t)\n    (else\n      (let ((p1 (car lst)))\n        (if (null?\
    \ (cdr lst))\n          (not (eqp p1 '('))\n          (match_parens (cdr lst)))))))\n",
  "  (cond\n    ((null? lst) #t)\n    (else\n      (let ((p (car lst)))\n        (match_parens\
    \ (cdr lst))\n        (cond\n          ((null? p) #t)\n          (else\n     \
    \       (let ((q (car p)))\n              (match_parens (cdr p))\n           \
    \   (cond\n                ((null? q) #t)\n                (else\n           \
    \       (let ((r (car q)))\n                    (cond\n                      ((null?\
    \ r) #t)\n                      (else\n                        (match_parens (cdr\
    \ q)))))))))))))))\n", "  (cond\n    ((null? lst) #t)\n    (else\n      (let ((p\
    \ (car lst)))\n        (match_parens (cdr lst))\n        (cond\n          ((null?\
    \ p) #t)\n          (else\n            (let ((q (car p)))\n              (cond\n\
    \                ((null? q) #t)\n                (else\n                  (let\
    \ ((r (car q)))\n                    (cond\n                      ((null? r) #t)\n\
    \                      (else\n                        (match_parens (cdr q))\n\
    \                        (#t)))))))))))))))\n", "  (cond\n    ((null? lst) \"\
    Yes\")\n    (else\n      (let ((p1 (car lst)))\n        (if (null? (cdr lst))\n\
    \          \"No\"\n          (match_parens (cdr lst))))))\n", "  (define (match\
    \ paren lst)\n    (cond\n      [(eq? paren '(')\n        (match paren (cdr lst))]\n\
    \      [(eq? paren ')')\n        (match paren (car lst))]\n      [else\n     \
    \   (error \"Invalid paren: \" paren)])\n    (match paren lst))\n  (match paren\
    \ lst))\n", "  (cond\n    ((null? lst) \"Yes\")\n    ((null? (cdr lst)) \"No\"\
    )\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr p))\n      \
    \    (let ((q (car (cdr p))))\n            (if (null? q)\n              (let ((r\
    \ (car (cdr q))))\n                (if (null? r)\n                  \"Yes\"\n\
    \                  (else\n                    \"No\"))))))\n        (else\n  \
    \        \"No\"))))\n", "  (cond\n    ((null? lst) \"Yes\")\n    (else\n     \
    \ (let ((p (car lst)))\n        (match_parens (cdr lst))\n        (cond\n    \
    \      ((null? p) \"Yes\")\n          (else\n            (let ((q (car p)))\n\
    \              (match_parens (cdr p))\n              (cond\n                ((null?\
    \ q) \"Yes\")\n                (else\n                  (let ((r (car q)))\n \
    \                   (match_parens (cdr q))\n                    (cond\n      \
    \                ((null? r) \"Yes\")\n                      (else\n          \
    \              (let ((s (car r)))\n                          (match_parens (cdr\
    \ r))\n                          (cond\n                            ((null? s)\
    \ \"Yes\")\n                            (else\n                              (let\
    \ ((t (car s)))\n                                (match_parens (cdr s))\n    \
    \                            (cond\n                                  ((null?\
    \ t) \"Yes\")\n                                  (else\n                     \
    \               (let ((u (car t)))\n                                      (match_parens\
    \ (cdr t))\n                                      (cond\n                    \
    \                    ((null? u) \"Yes\")\n                                   \
    \     (else\n                                          (let ((v (car u)))\n  \
    \                                          (match_parens (cdr u))\n          \
    \                                  (cond\n                                   \
    \           ((null? v) \"Yes\")\n                                            \
    \  (else\n                                                (let ((w (car v)))\n\
    \                                                  (match_parens (cdr v))\n  \
    \                                                (cond\n                     \
    \                               ((null? w) \"Yes\")\n                        \
    \                            (else\n                                         \
    \             (let ((x (car w)))\n                                           \
    \             (match_parens (cdr w))\n                                       \
    \                 (cond\n                                                    \
    \      ((null? x) \"Yes\")\n                                                 \
    \         (else\n                                                           (let\
    \ ((y (car x)))\n                                                            \
    \  (match_parens (cdr x))\n                                                  \
    \            (cond\n                                                         \
    \       ((null? y) \"", "  (cond\n    ((null? lst) \"Yes\")\n    (else\n     \
    \ (let ((p (car lst)))\n        (if (eq? p '(')\n          (match_parens (cdr\
    \ lst))\n        (else if (eq? p ')')\n          (match_parens (cdr lst))\n  \
    \      (else\n          (match_parens (cdr lst)))))))))\n", "  (cond\n    ((null?\
    \ lst) \"Yes\")\n    (else\n      (let ((l (car lst)))\n        (match_parens\
    \ (cdr lst))\n        (cond\n          ((null? l) \"Yes\")\n          (else\n\
    \            (let ((r (car l)))\n              (match_parens (cdr lst))\n    \
    \          (cond\n                ((null? r) \"Yes\")\n                (else\n\
    \                  (let ((l (car l)))\n                    (let ((r (car l)))\n\
    \                      (cond\n                        ((null? l) \"Yes\")\n  \
    \                      (else\n                          (let ((r (car l)))\n \
    \                           (match_parens (cdr lst))))))))))))))))))\n", "  (cond\n\
    \    ((null? lst) \"Yes\")\n    (else\n      (let ((p1 (car lst)))\n        (if\
    \ (null? (cdr lst))\n          \"No\"\n          (match_parens (cdr lst))))))\n",
  "  (cond\n    ((null? lst) #t)\n    (else\n      (let ((p (car lst)))\n        (match_parens\
    \ (cdr lst))\n        (cond\n          ((null? p) #t)\n          (else\n     \
    \       (let ((q (car p)))\n              (cond\n                ((null? q) #t)\n\
    \                (else\n                  (let ((r (car q)))\n               \
    \     (cond\n                      ((null? r) #t)\n                      (else\n\
    \                        (let ((s (car r)))\n                          (cond\n\
    \                            ((null? s) #t)\n                            (else\n\
    \                              (let ((t (car s)))\n                          \
    \      (cond\n                                  ((null? t) #t)\n             \
    \                     (else\n                                    (let ((u (car\
    \ t)))\n                                      (cond\n                        \
    \                ((null? u) #t)\n                                        (else\n\
    \                                          (let ((v (car u)))\n              \
    \                              (cond\n                                       \
    \       ((null? v) #t)\n                                              (else\n\
    \                                                (let ((w (car v)))\n        \
    \                                          (cond\n                           \
    \                         ((null? w) #t)\n                                   \
    \                 (else\n                                                    \
    \  (let ((x (car w)))\n                                                      \
    \  (cond\n                                                          ((null? x)\
    \ #t)\n                                                          (else\n     \
    \                                                      (let ((y (car x)))\n  \
    \                                                            (cond\n         \
    \                                                       ((null? y) #t)\n     \
    \                                                           (else\n          \
    \                                                        (let ((z (car y)))\n\
    \                                                                    (cond\n \
    \                                                                     ((null?\
    \ z) #t)\n                                                                   \
    \   (else\n                                                                  \
    \      (let ((a (car z)))\n                                                  \
    \                        (cond\n                                             \
    \                               ((null? a) #t)\n                             \
    \                                               (else\n                      \
    \                                                        (let ((b (car a)))\n\
    \                                                                            \
    \    (cond\n                                                                 \
    \                   ((null? b) #", "  (cond\n    ((null? lst) \"Yes\")\n    (else\n\
    \      (let ((p (car lst)))\n        (match_parens (cdr lst))\n        (cond\n\
    \          ((null? p) \"Yes\")\n          (else\n            (let ((q (car p)))\n\
    \              (match_parens (cdr p))\n              (cond\n                ((null?\
    \ q) \"Yes\")\n                (else\n                  (cond\n              \
    \      ((null? (cdr q)) \"Yes\")\n                    (else\n                \
    \      (let ((r (car q)))\n                        (cond\n                   \
    \       ((null? r) \"Yes\")\n                          (else\n               \
    \             (let ((s (car r)))\n                              (cond\n      \
    \                          ((null? s) \"Yes\")\n                             \
    \   (else\n                                  (let ((t (car s)))\n            \
    \                        (cond\n                                      ((null?\
    \ t) \"Yes\")\n                                      (else\n                 \
    \                       (let ((u (car t)))\n                                 \
    \         (cond\n                                            ((null? u) \"Yes\"\
    )\n                                            (else\n                       \
    \                       (let ((v (car u)))\n                                 \
    \               (cond\n                                                  ((null?\
    \ v) \"Yes\")\n                                                  (else\n     \
    \                                               (let ((w (car v)))\n         \
    \                                             (cond\n                        \
    \                                ((null? w) \"Yes\")\n                       \
    \                                 (else\n                                    \
    \                      (let ((x (car w)))\n                                  \
    \                          (cond\n                                           \
    \                   ((null? x) \"Yes\")\n                                    \
    \                          (else\n                                           \
    \                     (let ((y (car x)))\n                                   \
    \                               (cond\n                                      \
    \                              ((null? y) \"Yes\")\n                         \
    \                                           (else\n                          \
    \                                            (let ((z (car y)))\n            \
    \                                                            (cond\n         \
    \                                                                 ((null? z) \"\
    Yes\")\n                                                                     \
    \     (else\n                                                                \
    \            (let ((a (car z)))\n                                            \
    \                                  (cond\n                                   \
    \                                             ((null? a) \"Yes", "  (cond\n  \
    \  ((null? lst) #t)\n    (else\n      (let ((l (car lst)))\n        (match_parens\
    \ (cdr lst))\n        (if (null? (cdr lst))\n          (if (null? (cdr (cdr lst)))\n\
    \            (eq? (car lst) (car (cdr lst)))\n            (eq? (car lst) (car\
    \ (cdr (cdr lst))))\n            (eq? (car (cdr lst)) (car (cdr (cdr lst))))\n\
    \            (eq? (car (cdr (cdr lst))) (car (cdr (cdr (cdr lst))))))\n      \
    \    #t)\n          (else #f)))\n      #f))\n)\n", "  (define (match paren lst)\n\
    \    (cond\n      ((eq? paren '(')\n        (match paren (cdr lst)))\n      ((eq?\
    \ paren ')')\n        (match paren (car lst)))\n      (else\n        (error \"\
    Unbalanced parenthesis\" paren))))\n  (match paren lst))\n", "  (cond\n    ((null?\
    \ lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((s1 (car lst))\
    \ (s2 (car (cdr lst))))\n        (cond\n          ((null? s1) #f)\n          ((null?\
    \ s2) #f)\n          (else\n            (cond\n              ((eq? s1 \"(\"))\n\
    \              ((eq? s2 \")\") (return #t))\n              ((eq? s1 \")\") (return\
    \ #f))\n              ((eq? s2 \"(\"))\n              (return #f))\n         \
    \   )\n          )\n        )\n      )\n    )\n  )\n)\n", "  (cond\n    ((null?\
    \ lst) #t)\n    (else\n      (let ((p1 (car lst)))\n        (if (null? (cdr p1))\n\
    \            (let ((p2 (car (cdr p1))))\n              (cond\n               \
    \ ((null? p2) #t)\n                (else\n                  (let ((p3 (car (cdr\
    \ p2))))\n                    (cond\n                      ((null? p3) #t)\n \
    \                     (else\n                        (let ((p4 (car (cdr p3))))\n\
    \                          (cond\n                            ((null? p4) #t)\n\
    \                            (else\n                              (let ((p5 (car\
    \ (cdr p4))))\n                                (cond\n                       \
    \           ((null? p5) #t)\n                                  (else\n       \
    \                             (let ((p6 (car (cdr p5))))\n                   \
    \                   (cond\n                                        ((null? p6)\
    \ #t)\n                                        (else\n                       \
    \                   (let ((p7 (car (cdr p6))))\n                             \
    \               (cond\n                                              ((null? p7)\
    \ #t)\n                                              (else\n                 \
    \                               (let ((p8 (car (cdr p7))))\n                 \
    \                                 (cond\n                                    \
    \                ((null? p8) #t)\n                                           \
    \         (else\n                                                      (let ((p9\
    \ (car (cdr p8))))\n                                                        (cond\n\
    \                                                          ((null? p9) #t)\n \
    \                                                         (else\n            \
    \                                                (let ((p10 (car (cdr p9))))\n\
    \                                                              (cond\n       \
    \                                                         ((null? p10) #t)\n \
    \                                                               (else\n      \
    \                                                            (let ((p11 (car (cdr\
    \ p10))))\n                                                                  \
    \  (cond\n                                                                   \
    \   ((null? p11) #t)\n                                                       \
    \               (else\n                                                      \
    \                  (let ((p12 (car (cdr p11))))\n                            \
    \                                              (cond\n                       \
    \                                                     ", "  (cond\n    ((null?\
    \ lst) #t)\n    (else\n      (let ((l (car lst)))\n        (match_parens (cdr\
    \ lst))\n        (cond\n          ((null? l) #t)\n          (else\n          \
    \  (let ((r (car l)))\n              (match_parens (cdr lst))\n              (cond\n\
    \                ((null? r) #t)\n                (else\n                  (let\
    \ ((l (car l)))\n                    (let ((r (car r)))\n                    \
    \  (cond\n                        ((null? l) #t)\n                        (else\n\
    \                          (let ((r (car r)))\n                            (cond\n\
    \                              ((null? r) #t)\n                              (else\n\
    \                                (equal? (car l) (car r)))))\n               \
    \           (else\n                            (equal? (car l) (car r)))))\n \
    \                     (else\n                        (equal? (car l) (car r)))))\n\
    \                  (else\n                    (equal? (car l) (car r)))))\n  \
    \          (else\n              (equal? (car l) (car r)))))\n      (else\n   \
    \     (equal? (car l) (car r)))))\n  #f))\n", "  (cond\n    ((null? lst) \"Yes\"\
    )\n    (else\n      (let ((p1 (car lst)))\n        (if (null? (cdr lst))\n   \
    \       \"No\"\n          (match_parens (cdr lst)))))))\n", "  (cond\n    ((null?\
    \ lst) \"Yes\")\n    (else\n      (let ((p1 (car lst)))\n        (if (null? (cdr\
    \ lst))\n          \"No\"\n          (match_parens (cdr lst))))))\n", "  (cond\n\
    \    ((null? lst) #t)\n    (else\n      (let ((p (car lst)))\n        (match_parens\
    \ (cdr lst))\n        (cond\n          ((null? p) #t)\n          (else\n     \
    \       (let ((q (car p)))\n              (match_parens (cdr p))\n           \
    \   (cond\n                ((null? q) #t)\n                (else\n           \
    \       (let ((r (car q)))\n                    (cond\n                      ((null?\
    \ r) #t)\n                      (else\n                        (let ((s (car r)))\n\
    \                          (cond\n                            ((null? s) #t)\n\
    \                            (else\n                              (let ((t (car\
    \ s)))\n                                (cond\n                              \
    \    ((null? t) #t)\n                                  (else\n               \
    \                     (let ((u (car t)))\n                                   \
    \   (cond\n                                        ((null? u) #t)\n          \
    \                              (else\n                                       \
    \   (let ((v (car u)))\n                                            (cond\n  \
    \                                            ((null? v) #t)\n                \
    \                              (else\n                                       \
    \         (let ((w (car v)))\n                                               \
    \   (cond\n                                                    ((null? w) #t)\n\
    \                                                    (else\n                 \
    \                                     (let ((x (car w)))\n                   \
    \                                     (cond\n                                \
    \                          ((null? x) #t)\n                                  \
    \                        (else\n                                             \
    \              (let ((y (car x)))\n                                          \
    \                  (cond\n                                                   \
    \           ((null? y) #t)\n                                                 \
    \             (else\n                                                        \
    \        (let ((z (car y)))\n                                                \
    \                  (cond\n                                                   \
    \                 ((null? z) #t)\n                                           \
    \                         (else\n                                            \
    \                          (let ((a (car z)))\n                              \
    \                                          (cond\n                           \
    \                                               ((null? a) #t)\n             \
    \                                                             (else\n        \
    \                                                                    (let ((b\
    \ (car a)))\n", "  (cond\n    ((null? lst) \"Yes\")\n    (else\n      (let ((l\
    \ (car lst)))\n        (match_parens (cdr lst))\n        (cond\n          ((null?\
    \ l) \"Yes\")\n          (else\n            (let ((r (car l)))\n             \
    \ (match_parens (cdr lst))\n              (cond\n                ((null? r) \"\
    Yes\")\n                (else\n                  (let ((l (car l)))\n        \
    \            (let ((r (car l)))\n                      (cond\n               \
    \         ((null? l) \"Yes\")\n                        (else\n               \
    \           (let ((r (car l)))\n                            (cond\n          \
    \                    ((null? r) \"Yes\")\n                              (else\n\
    \                                (let ((l (car l)))\n                        \
    \          (let ((r (car l)))\n                                    (cond\n   \
    \                                   ((null? l) \"Yes\")\n                    \
    \                  (else\n                                        (let ((r (car\
    \ l)))\n                                          (cond\n                    \
    \                        ((null? r) \"Yes\")\n                               \
    \             (else\n                                              (let ((l (car\
    \ l)))\n                                                (let ((r (car l)))\n \
    \                                                 (cond\n                    \
    \                                ((null? l) \"Yes\")\n                       \
    \                             (else\n                                        \
    \              (let ((r (car l)))\n                                          \
    \              (cond\n                                                       \
    \   ((null? r) \"Yes\")\n                                                    \
    \      (else\n                                                           (let\
    \ ((l (car l)))\n                                                            \
    \  (let ((r (car l)))\n                                                      \
    \          (cond\n                                                           \
    \       ((null? l) \"Yes\")\n                                                \
    \                  (else\n                                                   \
    \                 (let ((r (car l)))\n                                       \
    \                               (cond\n                                      \
    \                                  ((null? r) \"Yes\")\n                     \
    \                                                   (else\n                  \
    \                                                        (let ((l (car l)))\n\
    \                                                                            (let\
    \ ((r (car l)))\n                                                            \
    \                  (cond\n                                                   \
    \                             ((null? l) \"Yes", "  (cond\n    ((null? lst) \"\
    Yes\")\n    (else\n      (let ((p1 (car lst)))\n        (if (null? (cdr lst))\n\
    \          \"No\"\n          (match_parens (cdr lst)\n            (if (null? (cdr\
    \ (cdr lst)))\n              \"Yes\"\n              (else\n                \"\
    No\")))))))))\n", "  (cond\n    ((null? lst) \"Yes\")\n    ((null? (cdr lst))\
    \ \"No\")\n    (else\n      (match_parens (cdr lst))\n      (if (match_parens\
    \ (car lst)) \"Yes\" \"No\")\n      )\n    )\n  )\n", "  (cond\n    ((null? lst)\
    \ \"Yes\")\n    (else\n      (let ((p (car lst)))\n        (match_parens (cdr\
    \ lst))\n        (cond\n          ((null? p) \"Yes\")\n          (else\n     \
    \       (let ((q (car p)))\n              (match_parens (cdr p))\n           \
    \   (cond\n                ((null? q) \"Yes\")\n                (else\n      \
    \            (cond\n                    ((eq? q \")\") \"Yes\")\n            \
    \        (else\n                      \"No\"))))))))))\n", "  (define (match_parens_helper\
    \ lst)\n    (cond\n      ((null? lst) #t)\n      ((null? (cdr lst)) #f)\n    \
    \  (else\n        (cond\n          ((null? (car lst)) #f)\n          ((null? (car\
    \ (cdr lst))) #f)\n          (else\n            (match_parens_helper (cdr lst))\n\
    \            (match_parens_helper (car (cdr lst))))))))\n  (match_parens_helper\
    \ lst))\n", "  (cond\n    ((null? lst) \"Yes\")\n    ((null? (cdr lst)) \"No\"\
    )\n    (else\n      (if (string=? (car lst) \"(\" (car (cdr lst)))\n         \
    \ (match_parens (cdr lst))\n          (else\n            (match_parens (cdr lst))))))\n\
    )\n", "  (cond\n    ((null? lst) #t)\n    (else\n      (let ((l (car lst)))\n\
    \        (if (null? (cdr lst))\n            (not (match_parens (cdr lst)))\n \
    \           (match_parens (cdr lst)))))))\n", "  (cond\n    ((null? lst) \"Yes\"\
    )\n    (else\n      (let ((p1 (car lst)))\n        (if (null? (cdr lst))\n   \
    \       \"No\"\n          (match_parens (cdr lst))))))\n", "  (cond\n    ((null?\
    \ lst) #t)\n    (else\n      (let ((s1 (car lst)))\n        (let ((s2 (cdr lst)))\n\
    \          (cond\n            ((null? s2) #t)\n            (else\n           \
    \   (let ((s3 (car s2)))\n                (cond\n                  ((null? s3)\
    \ #t)\n                  (else\n                    (let ((s4 (cdr s3)))\n   \
    \                   (cond\n                        ((null? s4) #t)\n         \
    \               (else\n                          (let ((s5 (car s4)))\n      \
    \                      (cond\n                              ((null? s5) #t)\n\
    \                              (else\n                                (let ((s6\
    \ (cdr s5)))\n                                  (cond\n                      \
    \              ((null? s6) #t)\n                                    (else\n  \
    \                                    (let ((s7 (car s6)))\n                  \
    \                      (cond\n                                          ((null?\
    \ s7) #t)\n                                          (else\n                 \
    \                           (let ((s8 (cdr s7)))\n                           \
    \                   (cond\n                                                ((null?\
    \ s8) #t)\n                                                (else\n           \
    \                                       (let ((s9 (car s8)))\n               \
    \                                     (cond\n                                \
    \                      ((null? s9) #t)\n                                     \
    \                 (else\n                                                    \
    \    (let ((s10 (cdr s9)))\n                                                 \
    \         (cond\n                                                            ((null?\
    \ s10) #t)\n                                                            (else\n\
    \                                                              (let ((s11 (car\
    \ s10)))\n                                                                (cond\n\
    \                                                                  ((null? s11)\
    \ #t)\n                                                                  (else\n\
    \                                                                    (let ((s12\
    \ (cdr s11)))\n                                                              \
    \        (cond\n                                                             \
    \           ((null? s12) #t)\n                                               \
    \                         (else\n                                            \
    \                              (let ((s13 (car s12)))\n                      \
    \                                                      (cond\n               \
    \                                                               ((", "  (cond\n\
    \    ((null? lst) \"Yes\")\n    ((null? (cdr lst)) \"No\")\n    (else\n      (let\
    \ ((p (car lst)))\n        (if (null? (cdr p))\n            (car p)\n        \
    \    (match_parens (cdr lst)))))))\n", "  (cond\n    ((null? lst) \"Yes\")\n \
    \   ((null? (cdr lst)) \"No\")\n    (else\n      (let ((p1 (car lst)))\n     \
    \   (if (null? (cdr p1))\n            (match_parens (cdr lst))\n            (else\n\
    \              (let ((p2 (car p1)))\n                (if (null? (cdr p2))\n  \
    \                  (match_parens (cdr lst))\n                    (else\n     \
    \                 (match_parens (cdr p1) (cdr p2)))))))))))\n", "  (cond\n   \
    \ ((null? lst) \"Yes\")\n    (else\n      (let ((l (car lst)))\n        (match_parens\
    \ (cdr lst))\n        (cond\n          ((null? l) \"Yes\")\n          (else\n\
    \            (let ((r (car l)))\n              (match_parens (cdr lst))\n    \
    \          (cond\n                ((null? r) \"Yes\")\n                (else\n\
    \                  (let ((l (car l)))\n                    (let ((r (car l)))\n\
    \                      (cond\n                        ((null? l) \"Yes\")\n  \
    \                      (else\n                          (let ((r (car l)))\n \
    \                           (cond\n                              ((null? r) \"\
    Yes\")\n                              (else\n                                (let\
    \ ((l (car l)))\n                                  (let ((r (car l)))\n      \
    \                              (cond\n                                      ((null?\
    \ l) \"Yes\")\n                                      (else\n                 \
    \                       (let ((r (car l)))\n                                 \
    \         (cond\n                                            ((null? r) \"Yes\"\
    )\n                                            (else\n                       \
    \                       (let ((l (car l)))\n                                 \
    \               (let ((r (car l)))\n                                         \
    \         (cond\n                                                    ((null? l)\
    \ \"Yes\")\n                                                    (else\n      \
    \                                                (let ((r (car l)))\n        \
    \                                                (cond\n                     \
    \                                     ((null? r) \"Yes\")\n                  \
    \                                        (else\n                             \
    \                              (let ((l (car l)))\n                          \
    \                                  (let ((r (car l)))\n                      \
    \                                        (cond\n                             \
    \                                   ((null? l) \"Yes\")\n                    \
    \                                            (else\n                         \
    \                                         (let ((r (car l)))\n               \
    \                                                     (cond\n                \
    \                                                      ((null? r) \"Yes\")\n \
    \                                                                     (else\n\
    \                                                                        (let\
    \ ((l (car l)))\n                                                            \
    \              (let ((r (car l)))\n                                          \
    \                                  (cond\n                                   \
    \                                           ((null", "  (cond\n    ((null? lst)\
    \ #t)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n\
    \          (not (eqp p '('))\n          (match_parens (cdr lst)))))))\n", "  (define\
    \ (match_parens_helper lst)\n    (cond\n      ((null? lst) #t)\n      ((null?\
    \ (cdr lst)) #f)\n      (else\n        (cond\n          ((null? (car lst)) #f)\n\
    \          (else\n            (match_parens_helper (cdr lst))))))))\n", "  (cond\n\
    \    ((null? lst) #t)\n    (else\n      (let ((p1 (car lst)))\n        (if (null?\
    \ (cdr lst))\n          (let ((p2 (car p1)))\n            (if (null? (cdr p1))\n\
    \              (let ((p3 (car p2)))\n                (if (null? (cdr p2))\n  \
    \                (let ((p4 (car p3)))\n                    (if (null? (cdr p3))\n\
    \                      (let ((p5 (car p4)))\n                        (if (null?\
    \ (cdr p4))\n                          (let ((p6 (car p5)))\n                \
    \            (if (null? (cdr p5))\n                              (let ((p7 (car\
    \ p6)))\n                                (if (null? (cdr p6))\n              \
    \                    (let ((p8 (car p7)))\n                                  \
    \  (if (null? (cdr p7))\n                                      (let ((p9 (car\
    \ p8)))\n                                        (if (null? (cdr p8))\n      \
    \                                    (let ((p10 (car p9)))\n                 \
    \                           (if (null? (cdr p9))\n                           \
    \                   (let ((p11 (car p10)))\n                                 \
    \               (if (null? (cdr p10))\n                                      \
    \            (let ((p12 (car p11)))\n                                        \
    \            (if (null? (cdr p11))\n                                         \
    \             (let ((p13 (car p12)))\n                                       \
    \                 (if (null? (cdr p12))\n                                    \
    \                      (let ((p14 (car p13)))\n                              \
    \                              (if (null? (cdr p13))\n                       \
    \                                       (let ((p15 (car p14)))\n             \
    \                                                   (if (null? (cdr p14))\n  \
    \                                                                (let ((p16 (car\
    \ p15)))\n                                                                   \
    \ (if (null? (cdr p15))\n                                                    \
    \                  (let ((p17 (car p16)))\n                                  \
    \                                      (if (null?", "  (define (match paren lst)\n\
    \    (cond\n      ((null? lst) #t)\n      ((null? paren) #f)\n      (else\n  \
    \      (cond\n          ((eq? paren '(')\n            (match paren (cdr lst)))\n\
    \          ((eq? paren ')')\n            (match paren (car lst)))\n          (else\n\
    \            (error \"Invalid paren: \" paren))))))\n  (match paren lst))\n",
  "  (define (match_parens_helper lst)\n    (cond\n      [(string=? lst) \"Yes\"]\n\
    \      [(string? lst) \"No\"]\n      [(null? lst) \"No\"]\n      [(null? (cdr\
    \ lst)) \"Yes\"]\n      [(null? (car lst)) \"No\"]\n      [(null? (car (cdr lst)))\
    \ \"Yes\"]\n      [(null? (car (cdr (cdr lst)))) \"No\"]\n      [(null? (car (cdr\
    \ (cdr (cdr lst)))))) \"Yes\"]\n      [(null? (car (cdr (cdr (cdr (cdr lst))))))\
    \ \"No\"]\n      [(null? (car (cdr (cdr (cdr (cdr (cdr lst)))))))) \"Yes\"]\n\
    \      [(null? (car (cdr (cdr (cdr (cdr (cdr (cdr lst)))))))) \"No\"]\n      [(null?\
    \ (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst)))))))))) \"Yes\"]\n      [(null?\
    \ (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst)))))))))) \"No\"]\n      [(null?\
    \ (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst)))))))))))) \"Yes\"]\n\
    \      [(null? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr lst))))))))))))))\
    \ \"No\"]\n      [(null? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr lst)))))))))))))))))) \"Yes\"]\n      [(null? (car\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr", "  (cond\n   \
    \ ((null? lst) \"Yes\")\n    (else\n      (let ((p (car lst)))\n        (match_parens\
    \ (cdr lst))\n        (cond\n          ((null? p) \"Yes\")\n          (else\n\
    \            (let ((q (car p)))\n              (match_parens (cdr p))\n      \
    \        (cond\n                ((null? q) \"Yes\")\n                (else\n \
    \                 (let ((r (car q)))\n                    (match_parens (cdr q))\n\
    \                    (cond\n                      ((null? r) \"Yes\")\n      \
    \                (else\n                        (let ((s (car r)))\n         \
    \                 (match_parens (cdr r))\n                          (cond\n  \
    \                          ((null? s) \"Yes\")\n                            (else\n\
    \                              (let ((t (car s)))\n                          \
    \      (match_parens (cdr s))\n                                (cond\n       \
    \                           ((null? t) \"Yes\")\n                            \
    \      (else\n                                    (let ((u (car t)))\n       \
    \                               (match_parens (cdr t))\n                     \
    \                 (cond\n                                        ((null? u) \"\
    Yes\")\n                                        (else\n                      \
    \                    (let ((v (car u)))\n                                    \
    \        (match_parens (cdr u))\n                                            (cond\n\
    \                                              ((null? v) \"Yes\")\n         \
    \                                     (else\n                                \
    \                (let ((w (car v)))\n                                        \
    \          (match_parens (cdr v))\n                                          \
    \        (cond\n                                                    ((null? w)\
    \ \"Yes\")\n                                                    (else\n      \
    \                                                (let ((x (car w)))\n        \
    \                                                (match_parens (cdr w))\n    \
    \                                                    (cond\n                 \
    \                                         ((null? x) \"Yes\")\n              \
    \                                            (else\n                         \
    \                                  (let ((y (car x)))\n                      \
    \                                        (match_parens (cdr x))\n            \
    \                                                  (cond\n                   \
    \                                             ((null? y) \"", "  (cond\n    ((null?\
    \ lst) #t)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n\
    \            (not (equal? p '('))\n            (not (equal? p ')')))\n       \
    \   (match_parens (cdr lst))))))\n", "  (cond\n    ((null? lst) \"Yes\")\n   \
    \ (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n         \
    \ (if (eq? p '(')\n            \"Yes\")\n            (else\n              \"No\"\
    ))\n          (else\n            (match_parens (cdr lst)))))))))\n", "  (cond\n\
    \    ((null? lst) #t)\n    (else\n      (let ((p1 (car lst)))\n        (if (null?\
    \ (cdr lst))\n          (error \"unbalanced parens\")\n          (match_parens\
    \ (cdr lst)))))))\n", "  (define (match_parens_helper lst)\n    (cond\n      ((null?\
    \ lst) #t)\n      ((eq? (car lst) '(')\n        (match_parens_helper (cdr lst))\n\
    \        (match_parens_helper (cdr (cdr lst))))\n      (else\n        (eq? (car\
    \ lst) ')')\n        (match_parens_helper (cdr lst))\n        (match_parens_helper\
    \ (cdr (cdr lst)))))))\n", "  (cond\n    ((null? lst) #t)\n    (else\n      (let\
    \ ((p (car lst)))\n        (match_parens (cdr lst))\n        (cond\n         \
    \ ((null? p) #t)\n          (else\n            (let ((q (car p)))\n          \
    \    (cond\n                ((null? q) #t)\n                (else\n          \
    \        (let ((r (car q)))\n                    (cond\n                     \
    \ ((null? r) #t)\n                      (else\n                        (let ((s\
    \ (car r)))\n                          (cond\n                            ((null?\
    \ s) #t)\n                            (else\n                              (let\
    \ ((t (car s)))\n                                (cond\n                     \
    \             ((null? t) #t)\n                                  (else\n      \
    \                              (let ((u (car t)))\n                          \
    \            (cond\n                                        ((null? u) #t)\n \
    \                                       (else\n                              \
    \            (let ((v (car u)))\n                                            (cond\n\
    \                                              ((null? v) #t)\n              \
    \                                (else\n                                     \
    \           (let ((w (car v)))\n                                             \
    \     (cond\n                                                    ((null? w) #t)\n\
    \                                                    (else\n                 \
    \                                     (let ((x (car w)))\n                   \
    \                                     (cond\n                                \
    \                          ((null? x) #t)\n                                  \
    \                        (else\n                                             \
    \               (let ((y (car x)))\n                                         \
    \                     (cond\n                                                \
    \                ((null? y) #t)\n                                            \
    \                    (else\n                                                 \
    \                 (let ((z (car y)))\n                                       \
    \                             (cond\n                                        \
    \                              ((null? z) #t)\n                              \
    \                                        (else\n                             \
    \                                           (let ((a (car z)))\n             \
    \                                                             (cond\n        \
    \                                                                    ((null? a)\
    \ #t)\n                                                                      \
    \      (else\n                                                               \
    \               (let ((b (car a)))\n                                         \
    \                                       (cond\n                              \
    \                                                      ((null? b)", "  (cond\n\
    \    ((null? lst) #t)\n    (else\n      (let ((l (car lst)))\n        (match_parens\
    \ (cdr lst))\n        (cond\n          ((null? l) #t)\n          (else\n     \
    \       (let ((r (car l)))\n              (match_parens (cdr lst))\n         \
    \     (cond\n                ((null? r) #t)\n                (else\n         \
    \         (let ((l (car l)))\n                    (let ((r (car l)))\n       \
    \               (cond\n                        ((null? l) #t)\n              \
    \          (else\n                          (let ((r (car l)))\n             \
    \               (cond\n                              ((null? r) #t)\n        \
    \                      (else\n                                (equal? (car l)\
    \ (car r))\n                                (match_parens (cdr lst))))))))))))))))))))))\n",
  "  (cond\n    ((null? lst) \"Yes\")\n    ((null? (cdr lst)) \"No\")\n    (else\n\
    \      (let ((p1 (car lst)))\n        (if (null? (cdr p1))\n          (match_parens\
    \ (cdr lst))\n          (match_parens (cdr (cdr p1)))))))))\n", "  (cond\n   \
    \ ((null? lst) \"Yes\")\n    (else\n      (let ((p (car lst)))\n        (if (null?\
    \ (cdr lst))\n          (if (eq? p '(')\n            \"Yes\")\n            (else\n\
    \              (match_parens (cdr lst))))\n          (else\n            (match_parens\
    \ (cdr lst)))))))\n", "  (cond\n    ((null? lst) #t)\n    (else\n      (let ((p1\
    \ (car lst)))\n        (if (null? (cdr lst))\n          (if (null? p1) #t\n  \
    \          (else\n              (match_parens (cdr lst))))\n          (else\n\
    \            (match_parens (cdr lst)))))))))\n", "  (cond\n    ((null? lst) #t)\n\
    \    ((null? (cdr lst)) #t)\n    (else\n      (match_parens (cdr lst))\n     \
    \ (match_parens (cdr (cdr lst))))))\n", "  (cond\n    ((null? lst) #t)\n    (else\n\
    \      (let ((s (car lst)))\n        (match_parens (cdr lst))\n        (cond\n\
    \          ((null? s) #t)\n          (else\n            (let ((p (car s)))\n \
    \             (cond\n                ((null? p) #t)\n                (else\n \
    \                 (let ((q (car p)))\n                    (cond\n            \
    \          ((null? q) #t)\n                      (else\n                     \
    \   (let ((r (car q)))\n                          (cond\n                    \
    \        ((null? r) #t)\n                            (else\n                 \
    \             (let ((s (cdr r)))\n                                (cond\n    \
    \                              ((null? s) #t)\n                              \
    \    (else\n                                    (let ((p (car s)))\n         \
    \                             (cond\n                                        ((null?\
    \ p) #t)\n                                        (else\n                    \
    \                      (let ((q (car p)))\n                                  \
    \          (cond\n                                              ((null? q) #t)\n\
    \                                              (else\n                       \
    \                         (let ((r (car q)))\n                               \
    \                   (cond\n                                                  \
    \  ((null? r) #t)\n                                                    (else\n\
    \                                                      (let ((s (cdr r)))\n  \
    \                                                      (cond\n               \
    \                                           ((null? s) #t)\n                 \
    \                                         (else\n                            \
    \                               (let ((p (car s)))\n                         \
    \                                     (cond\n                                \
    \                                ((null? p) #t)\n                            \
    \                                    (else\n                                 \
    \                                 (let ((q (car p)))\n                       \
    \                                             (cond\n                        \
    \                                              ((null? q) #t)\n              \
    \                                                        (else\n             \
    \                                                           (let ((r (car q)))\n\
    \                                                                          (cond\n\
    \                                                                            ((null?\
    \ r) #t)\n                                                                   \
    \         (else\n                                                            \
    \                  (let ((s (cdr r)))\n                                      \
    \                                          (cond\n                           \
    \                                                         ((null?", "  (cond\n\
    \    ((null? lst) \"Yes\")\n    ((null? (cdr lst)) \"No\")\n    (else\n      (match_parens\
    \ (cdr lst))\n      (if (match_parens (car lst)) \"Yes\" \"No\")\n      )\n  \
    \  )\n  )\n", "  (cond\n    ((null? lst) \"Yes\")\n    (else\n      (let ((p (car\
    \ lst)))\n        (match_parens (cdr lst))\n        (cond\n          ((null? p)\
    \ \"Yes\")\n          (else\n            (let ((q (car p)))\n              (match_parens\
    \ (cdr p))\n              (cond\n                ((null? q) \"Yes\")\n       \
    \         (else\n                  (let ((r (car q)))\n                    (match_parens\
    \ (cdr q))\n                    (cond\n                      ((null? r) \"Yes\"\
    )\n                      (else\n                        (let ((s (car r)))\n \
    \                         (match_parens (cdr r))\n                          (cond\n\
    \                            ((null? s) \"Yes\")\n                           \
    \ (else\n                              (let ((t (car s)))\n                  \
    \              (match_parens (cdr s))\n                                (cond\n\
    \                                  ((null? t) \"Yes\")\n                     \
    \             (else\n                                    (let ((u (car t)))\n\
    \                                      (match_parens (cdr t))\n              \
    \                        (cond\n                                        ((null?\
    \ u) \"Yes\")\n                                        (else\n               \
    \                           (let ((v (car u)))\n                             \
    \               (match_parens (cdr u))\n                                     \
    \       (cond\n                                              ((null? v) \"Yes\"\
    )\n                                              (else\n                     \
    \                           (let ((w (car v)))\n                             \
    \                     (match_parens (cdr v))\n                               \
    \                   (cond\n                                                  \
    \  ((null? w) \"Yes\")\n                                                    (else\n\
    \                                                      (let ((x (car w)))\n  \
    \                                                      (match_parens (cdr w))\n\
    \                                                        (cond\n             \
    \                                             ((null? x) \"Yes\")\n          \
    \                                                (else\n                     \
    \                                      (let ((y (car x)))\n                  \
    \                                            (match_parens (cdr x))\n        \
    \                                                      (cond\n               \
    \                                                 ((null? y) \"", "  (cond\n \
    \   ((null? lst) \"Yes\")\n    (else\n      (let ((p (car lst)))\n        (if\
    \ (eq? p '(')\n          (match_parens (cdr lst))\n        (else if (eq? p ')')\n\
    \          (match_parens (cdr lst))\n        (else\n          (match_parens (cdr\
    \ lst)))))))))\n", "  (cond\n    ((null? lst) #t)\n    (else\n      (let ((p1\
    \ (car lst)))\n        (if (null? (cdr lst))\n            (not (eqv? p1 \"(\"\
    ))\n            (match_parens (cdr lst)))))))\n", "  (cond\n    ((null? lst) #t)\n\
    \    (else\n      (let ((p (car lst)))\n        (match_parens (cdr lst))\n   \
    \     (cond\n          ((null? p) #t)\n          (else\n            (let ((q (car\
    \ p)))\n              (cond\n                ((null? q) #t)\n                (else\n\
    \                  (let ((r (car q)))\n                    (cond\n           \
    \           ((null? r) #t)\n                      (else\n                    \
    \    (let ((s (car r)))\n                          (cond\n                   \
    \         ((null? s) #t)\n                            (else\n                \
    \              (let ((t (car s)))\n                                (cond\n   \
    \                               ((null? t) #t)\n                             \
    \     (else\n                                    (let ((u (car t)))\n        \
    \                              (cond\n                                       \
    \ ((null? u) #t)\n                                        (else\n            \
    \                              (let ((v (car u)))\n                          \
    \                  (cond\n                                              ((null?\
    \ v) #t)\n                                              (else\n              \
    \                                  (let ((w (car v)))\n                      \
    \                            (cond\n                                         \
    \           ((null? w) #t)\n                                                 \
    \   (else\n                                                      (let ((x (car\
    \ w)))\n                                                        (cond\n      \
    \                                                    ((null? x) #t)\n        \
    \                                                  (else\n                   \
    \                                        (let ((y (car x)))\n                \
    \                                              (cond\n                       \
    \                                         ((null? y) #t)\n                   \
    \                                             (else\n                        \
    \                                          (let ((z (car y)))\n              \
    \                                                      (cond\n               \
    \                                                       ((null? z) #t)\n     \
    \                                                                 (else\n    \
    \                                                                    (let ((a\
    \ (car z)))\n                                                                \
    \          (cond\n                                                           \
    \                 ((null? a) #t)\n                                           \
    \                                 (else\n                                    \
    \                                          (let ((b (car a)))\n              \
    \                                                                  (cond\n   \
    \                                                                            \
    \     ((null? b) #", "  (cond\n    ((null? lst) \"Yes\")\n    ((null? (cdr lst))\
    \ \"No\")\n    (else\n      (if (car lst)\n          (match_parens (cdr lst))\n\
    \          (match_parens (cdr (cdr lst)))))))\n", "  (cond\n    ((null? lst) #t)\n\
    \    (else\n      (let ((p (car lst)))\n        (match_parens (cdr lst))\n   \
    \     (cond\n          ((null? p) #t)\n          (else\n            (let ((q (car\
    \ p)))\n              (cond\n                ((null? q) #f)\n                (else\n\
    \                  (match_parens (cdr p))))))))))\n", "  (cond\n    ((null? lst)\
    \ \"Yes\")\n    (else\n      (let ((l (car lst)))\n        (match_parens (cdr\
    \ lst))\n        (cond\n          ((null? l) \"Yes\")\n          (else\n     \
    \       (let ((r (car l)))\n              (match_parens (cdr lst))\n         \
    \     (cond\n                ((null? r) \"Yes\")\n                (else\n    \
    \              (let ((l (car l)))\n                    (let ((r (car l)))\n  \
    \                    (cond\n                        ((null? l) \"Yes\")\n    \
    \                    (else\n                          (let ((r (car l)))\n   \
    \                         (cond\n                              ((null? r) \"Yes\"\
    )\n                              (else\n                                (if (eq?\
    \ l r) \"Yes\" \"No\"))))))))))))))))))))))\n", "  (cond\n    ((null? lst) #t)\n\
    \    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n      \
    \      (not (string=? p \"\"))\n            (match_parens (cdr lst)))))))\n",
  "  (define (match parens)\n    (cond\n      [(eq? parens '(')\n        (match parens)\n\
    \      ]\n      [(eq? parens ')')\n        (match parens)\n      ]\n      [(eq?\
    \ parens '(')\n        (match parens)\n      ]\n      [(eq? parens ')')\n    \
    \    (match parens)\n      ]\n      [(eq? parens '(')\n        (match parens)\n\
    \      ]\n      [(eq? parens ')')\n        (match parens)\n      ]\n      [(eq?\
    \ parens '(')\n        (match parens)\n      ]\n      [(eq? parens ')')\n    \
    \    (match parens)\n      ]\n      [(eq? parens '(')\n        (match parens)\n\
    \      ]\n      [(eq? parens ')')\n        (match parens)\n      ]\n      [(eq?\
    \ parens '(')\n        (match parens)\n      ]\n      [(eq? parens ')')\n    \
    \    (match parens)\n      ]\n      [(eq? parens '(')\n        (match parens)\n\
    \      ]\n      [(eq? parens ')')\n        (match parens)\n      ]\n      [(eq?\
    \ parens '(')\n        (match parens)\n      ]\n      [(eq? parens ')')\n    \
    \    (match parens)\n      ]\n      [(eq? parens '(')\n        (match parens)\n\
    \      ]\n      [(eq? parens ')')\n        (match parens)\n      ]\n      [(eq?\
    \ parens '(')\n        (match parens)\n      ]\n      [(eq? parens ')')\n    \
    \    (match parens)\n      ]\n      [(eq? parens '(')\n        (match parens)\n\
    \      ]\n      [(eq? parens ')')\n        (match", "  (cond\n    ((null? lst)\
    \ #t)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n\
    \            (if (eq? p '(') #t)\n              (else #f))\n          (else\n\
    \            (if (eq? p ')')\n              (match_parens (cdr lst))\n       \
    \     (else\n              (match_parens (cdr lst)))))))\n))\n", "  (cond\n  \
    \  ((null? lst) #t)\n    ((null? (cdr lst)) #f)\n    (else\n      (let ((p (car\
    \ lst)))\n        (if (null? (cdr p))\n            (if (null? (cdr (cdr p)))\n\
    \                #t\n                (else #f))\n            (else\n         \
    \     (match_parens (cdr p)))))))))\n", "  (cond\n    ((null? lst) \"Yes\")\n\
    \    (else\n      (let ((p (car lst)))\n        (match_parens (cdr lst))\n   \
    \     (cond\n          ((null? p) \"Yes\")\n          (else\n            (let\
    \ ((q (car p)))\n              (match_parens (cdr p))\n              (cond\n \
    \               ((null? q) \"Yes\")\n                (else\n                 \
    \ (let ((r (car q)))\n                    (match_parens (cdr q))\n           \
    \         (cond\n                      ((null? r) \"Yes\")\n                 \
    \     (else\n                        (let ((s (car r)))\n                    \
    \      (match_parens (cdr r))\n                          (cond\n             \
    \               ((null? s) \"Yes\")\n                            (else\n     \
    \                         (let ((t (car s)))\n                               \
    \ (match_parens (cdr s))\n                                (cond\n            \
    \                      ((null? t) \"Yes\")\n                                 \
    \ (else\n                                    (let ((u (car t)))\n            \
    \                          (match_parens (cdr t))\n                          \
    \            (cond\n                                        ((null? u) \"Yes\"\
    )\n                                        (else\n                           \
    \               (let ((v (car u)))\n                                         \
    \   (match_parens (cdr u))\n                                            (cond\n\
    \                                              ((null? v) \"Yes\")\n         \
    \                                     (else\n                                \
    \                (let ((w (car v)))\n                                        \
    \          (match_parens (cdr v))\n                                          \
    \        (cond\n                                                    ((null? w)\
    \ \"Yes\")\n                                                    (else\n      \
    \                                                (let ((x (car w)))\n        \
    \                                                (match_parens (cdr w))\n    \
    \                                                    (cond\n                 \
    \                                         ((null? x) \"Yes\")\n              \
    \                                            (else\n                         \
    \                                  (let ((y (car x)))\n                      \
    \                                        (match_parens (cdr x))\n            \
    \                                                  (cond\n                   \
    \                                             ((null? y) \"", "  (cond\n    ((null?\
    \ lst) #t)\n    (else\n      (let ((p (car lst)))\n        (if (null? (cdr lst))\n\
    \            (if (eq? p '(') #t)\n              (else #f))\n          (else\n\
    \            (if (eq? p ')')\n              (if (null? (cdr (cdr lst))) #t)\n\
    \                (else #f))\n            (else\n              (let ((q (car (cdr\
    \ lst))))\n                (if (eq? q '(')\n                    (if (null? (cdr\
    \ (cdr (cdr lst)))) #t)\n                      (else #f))\n                  (else\n\
    \                    (if (eq? q ')')\n                      (if (null? (cdr (cdr\
    \ (cdr (cdr lst)))))) #t)\n                      (else #f))))))))))))\n", "  (cond\n\
    \    ((null? lst) \"Yes\")\n    (else\n      (let ((p1 (car lst)))\n        (if\
    \ (null? (cdr lst))\n          \"No\"\n          (match_parens (cdr lst))))))\n",
  "  (cond\n    [(null? lst) \"Yes\"]\n    [(pair? lst)\n      (match_parens (cdr\
    \ lst))]\n    [(string? lst)\n      (match_parens (map string (list \"(\" (list\
    \ lst) \")\"))))]\n    [else \"No\"]))\n", "  (define (match_parens_helper lst)\n\
    \    (cond\n      ((null? lst) #f)\n      ((eq? (car lst) '(')\n        (match_parens_helper\
    \ (cdr lst))\n        (match_parens_helper (cdr lst)))\n      (eq? (car lst) ')')\n\
    \      (match_parens_helper (cdr lst)))))\n  (match_parens_helper lst))\n", " \
    \ (cond\n    ((null? lst) \"Yes\")\n    (else\n      (let ((l (car lst)))\n  \
    \      (match_parens (cdr lst))\n        (cond\n          ((null? l) \"Yes\")\n\
    \          (else\n            (let ((r (car l)))\n              (match_parens\
    \ (cdr lst))\n              (cond\n                ((null? r) \"Yes\")\n     \
    \           (else\n                  (let ((r (car r)))\n                    (match_parens\
    \ (cdr r))\n                    (cond\n                      ((null? r) \"Yes\"\
    )\n                      (else\n                        (let ((r (car r)))\n \
    \                         (match_parens (cdr r))))))))))))))))))\n", "  (cond\n\
    \    ((null? lst) #t)\n    (else\n      (let ((l (car lst)))\n        (match_parens\
    \ (cdr lst))\n        (cond\n          ((null? l) #t)\n          (else\n     \
    \       (let ((r (car l)))\n              (match_parens (cdr lst))\n         \
    \     (cond\n                ((null? r) #t)\n                (else\n         \
    \         (let ((l (car l)))\n                    (let ((r (car l)))\n       \
    \               (cond\n                        ((null? l) #t)\n              \
    \          (else\n                          (let ((r (car l)))\n             \
    \               (cond\n                              ((null? r) #t)\n        \
    \                      (else\n                                (equal? (car l)\
    \ (car r))\n                                #f))))))))))))))))))))))\n", "  (define\
    \ (match_parens_helper lst)\n    (cond\n      [(eq? (car lst) '(')\n        (match_parens_helper\
    \ (cdr lst))]\n      [(eq? (car lst) ')')\n        (match_parens_helper (cdr lst))]\n\
    \      [(eq? (car lst) '(')\n        (match_parens_helper (cdr lst))]\n      [(eq?\
    \ (car lst) ')')\n        (match_parens_helper (cdr lst))]\n      [(eq? (car lst)\
    \ '(')\n        (match_parens_helper (cdr lst))]\n      [(eq? (car lst) ')')\n\
    \        (match_parens_helper (cdr lst))]\n      [(eq? (car lst) '(')\n      \
    \  (match_parens_helper (cdr lst))]\n      [(eq? (car lst) ')')\n        (match_parens_helper\
    \ (cdr lst))]\n      [(eq? (car lst) '(')\n        (match_parens_helper (cdr lst))]\n\
    \      [(eq? (car lst) ')')\n        (match_parens_helper (cdr lst))]\n      [(eq?\
    \ (car lst) '(')\n        (match_parens_helper (cdr lst))]\n      [(eq? (car lst)\
    \ ')')\n        (match_parens_helper (cdr lst))]\n      [(eq? (car lst) '(')\n\
    \        (match_parens_helper (cdr lst))]\n      [(eq? (car lst) ')')\n      \
    \  (match_parens_helper (cdr lst))]\n      [(eq? (car lst) '(')\n        (match_parens_helper\
    \ (cdr lst))]\n      [(eq? (car lst) ')')\n        (match_parens_helper (cdr lst"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
