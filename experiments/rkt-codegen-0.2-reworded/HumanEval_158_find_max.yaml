name: HumanEval_158_find_max
language: rkt
prompt: "#lang racket\n\n;; Write a function that accepts a list of strings.\n;; The\
  \ list contains different words. Return the word with maximum number\n;; of unique\
  \ characters. If multiple strings have maximum number of unique\n;; characters,\
  \ return the one which comes first in lexicographical order.\n;; >>> (find_max (list\
  \ \"name\" \"of\" \"string\"))\n;; \"string\"\n;; >>> (find_max (list \"name\" \"\
  enam\" \"game\"))\n;; \"enam\"\n;; >>> (find_max (list \"aaaaaaa\" \"bb\" \"cc\"\
  ))\n;; \"aaaaaaa\"\n(define (find_max words)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n\
  \    (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n \
  \   (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal?\
  \ (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate\
  \ (list \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\"\
  \ \"this\" \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate\
  \ (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
  \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
  \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
  \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"\
  play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
completions: ["  (let ((max-count (make-hashtable)))\n    (for-each (lambda (word)\n\
    \               (hashtable-put! max-count (string-to-number (string-length word))\
    \ word))\n      words))\n  (hashtable-keys max-count)\n)\n", "  (let ((max-count\
    \ (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-set! max-count\n\
    \        (string-count word (hashtable-ref max-count word)) 1))\n      words))\n\
    \  (hashtable-ref max-count (car words)))\n\n;; Write a function that accepts\
    \ a list of strings.\n;; The list contains different words. Return the word with\
    \ maximum number\n;; of unique characters. If multiple strings have maximum number\
    \ of unique\n;; characters, return the one which comes first in lexicographical\
    \ order.\n;; >>> (find_max (list \"name\" \"of\" \"string\"))\n;; \"string\"\n\
    ;; >>> (find_max (list \"name\" \"enam\" \"game\"))\n;; \"enam\"\n;; >>> (find_max\
    \ (list \"aaaaaaa\" \"bb\" \"cc\"))\n;; \"aaaaaaa\"", "  (let ((max-count 0)\n\
    \         (max-word \"\"))\n    (for-each (lambda (word)\n                (if\
    \ (string=? word \"\")\n                    (set! max-count (+ max-count (count\
    \ word)))\n                    (set! max-word word)))\n      words))\n  max-word)\n",
  "  (let ((max-count (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-put!\
    \ max-count (string-length word) word))\n      words))\n  (let ((max-word (hashtable-keys\
    \ max-count)))\n    (let ((max-count-word (hashtable-ref max-count max-word)))\n\
    \      (if (eq? max-count-word (hashtable-size max-count))\n        max-word\n\
    \        (hashtable-ref max-count max-word))))\n\n;; Write a function that accepts\
    \ a list of strings.\n;; The list contains different words. Return the word with\
    \ maximum number\n;; of unique characters. If multiple strings have maximum number\
    \ of unique\n;; characters, return the one which comes first in lexicographical\
    \ order.\n;; >>> (find_max (list \"name\" \"of\" \"string\"))\n;; \"string\"\n\
    ;; >>> (find_max (list \"name\" \"enam\" \"game\"))\n;; \"enam\"\n;; >>> (find_max\
    \ (list \"aaaaaaa\" \"bb\" \"cc\"))\n;; \"aaaaaaa\"", "  (let ((max-count (make-hashtable)))\n\
    \    (for-each (lambda (word)\n                (hashtable-set! max-count\n   \
    \               (hashtable-ref max-count word)\n                  (hashtable-ref\
    \ max-count (string-upcase word))))\n      words))\n)\n", "  (let ((max-chars\
    \ (make-hashtable)))\n    (for-each (lambda (word)\n                (hashtable-set!\
    \ max-chars (string-length word)\n                                      (string-length\
    \ (get hash table max-chars))))\n      words))\n)\n", "  (let ((max-count (make-hashtable)))\n\
    \    (for-each (lambda (word)\n      (hashtable-put! max-count (string-length\
    \ word) word))\n      words))\n  (hashtable-keys max-count)\n)\n", "  (let ((max-count\
    \ (make-hashtable)))\n    (for-each (lambda (word)\n                (hashtable-set!\
    \ max-count (string-hash word) 1))\n      words))\n  (hashtable-ref max-count\
    \ \"\")\n)\n", "  (let ((max-count (make-hashtable)))\n    (for-each (lambda (word)\n\
    \               (hashtable-set! max-count\n                 (hashtable-ref max-count\
    \ word)\n                 (hashtable-ref max-count (string-upcase word))))\n \
    \            words))\n  (let ((max-count (hashtable-ref max-count (string-upcase\
    \ (car words))))\n         (max-word (car (cdr words))))\n    (if (hashtable-ref\
    \ max-count max-word)\n        (hashtable-ref max-count max-word)\n        (hashtable-ref\
    \ max-count (string-upcase max-word))))\n\n;; #lang scheme\n\n;; Write a function\
    \ that accepts a list of strings.\n;; The list contains different words. Return\
    \ the word with maximum number\n;; of unique characters. If multiple strings have\
    \ maximum number of unique\n;; characters, return the one which comes first in\
    \ lexicographical order.\n;; >>> (find-max (list \"name\" \"of\" \"string\"))\n\
    ;; \"string\"\n;; >>> (find-max (list \"name\" \"enam\" \"game\"))\n;; \"enam\"\
    \n;; >>> (find-max (list \"aaaaaaa\" \"bb\" \"cc\"))\n;; \"aaaaaaa\"", "  (let\
    \ ((counts (map (lambda (w) (count w))) words)))\n  (let ((max-count (max (map\
    \ (lambda (w) (count w)) counts))))\n    (if (null? (cdr counts))\n      (car\
    \ counts)\n      (if (null? (cdr (cdr counts)))\n        (car (cdr counts))\n\
    \        (if (null? (cdr (cdr (cdr counts))))\n          (car (cdr (cdr (cdr counts))))\n\
    \          (car (cdr (cdr (cdr (cdr counts)))))))))))\n", "  (let ((max-count\
    \ (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-put! max-count\
    \ (string-length word) word))\n      words))\n  (hashtable-keys max-count)\n)\n",
  "  (let ((max-count (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-put!\
    \ max-count (string-length word) word))\n      words))\n  (hashtable-keys max-count)\n\
    )\n", "  (let ((max-count (make-hashtable)))\n    (for-each (lambda (word)\n \
    \     (hashtable-set! max-count (string-hash word) 1))\n      words))\n  (let\
    \ ((max-word (hashtable-ref max-count 1)))\n    (for-each (lambda (word)\n   \
    \   (if (hashtable-ref max-count word)\n          (hashtable-ref max-count max-word)\n\
    \          max-word))\n      words))\n)\n", "  (let ((max-count (make-hashtable)))\n\
    \    (for-each (lambda (word)\n                (hashtable-set! max-count\n   \
    \               (hashtable-ref max-count word)\n                  (hashtable-ref\
    \ max-count (string-ci-less? word))))\n                words))\n  (hashtable-ref\
    \ max-count (string-ci-less? (hashtable-keys max-count))))\n", "  (let ((max-count\
    \ (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-put! max-count\
    \ (string-length word) word))\n      words))\n  (let ((max-word (hashtable-keys\
    \ max-count)))\n    (for-each (lambda (word)\n      (if (hashtable-has? max-count\
    \ word)\n        (hashtable-ref max-count word)\n        (hashtable-ref max-count\
    \ (string-append word \"zzzzzzzz\"))))\n      words))\n)\n", "  (let ((max-count\
    \ (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-put! max-count\
    \ (string-length word) word))\n      words))\n  (hashtable-keys max-count)\n)\n",
  "  (let ((max-chars (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-put!\
    \ max-chars (string-length word) word))\n      words))\n  (hashtable-ref max-chars)))\n",
  "  (let ((max-count (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-put!\
    \ max-count (string-length word) word))\n      words))\n  (hashtable-keys max-count)\n\
    )\n", "  (let ((max-chars (0)))\n    (for-each (lambda (word)\n      (set! max-chars\
    \ (max-chars + (string-length word)))\n      (if (string-length word)\n      \
    \  (if (string-lessp word (first words))\n          (first words)\n          (let\
    \ ((i (1)))\n            (while (< i (length words))\n              (if (string-lessp\
    \ (substring words i) word)\n                (set! i (+ i 1))\n              \
    \  (else\n                  (set! i (- i 1))))))))\n      (first words)))\n  \
    \  (max-chars)))\n\n;; #lang scheme", "  (let ((max-count (make-hashtable)))\n\
    \    (for-each (lambda (word)\n      (hashtable-put! max-count (string-length\
    \ word) word))\n      words))\n  (hashtable-keys max-count)\n)\n", "  (let ((max-count\
    \ (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-put! max-count\
    \ (string-length word) word))\n      words))\n  (hashtable-keys max-count)\n)\n",
  "  (let ((max-chars (make-hashtable)))\n    (for-each (lambda (word)\n         \
    \       (hashtable-set! max-chars (string-hash word)\n                       \
    \               (string-length word)))\n      words))\n  (hashtable-ref max-chars\
    \ \"\")\n)\n", "  (let ((max-count (make-hashtable)))\n    (for-each (lambda (word)\n\
    \      (hashtable-put! max-count (string-length word) word))\n      words))\n\
    \  (hashtable-keys max-count)\n)\n", "  (let ((max-count 0)\n         (max-word\
    \ \"\"))\n    (for-each (lambda (word)\n                (if (string=? word \"\"\
    )\n                    (set! max-count (max max-count word-count word))\n    \
    \                (set! max-word word)))\n      words))\n)\n", "  (let ((max-count\
    \ (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-put! max-count\
    \ (string-length word) word))\n      words))\n  (let ((max-word (hashtable-keys\
    \ max-count)))\n    (let ((max-count-word (hashtable-ref max-count max-word)))\n\
    \      (if (eq? max-count-word max-word)\n        (hashtable-ref max-count max-word)\n\
    \        max-word))))\n", "  (let ((max-chars (make-hashtable)))\n    (for-each\
    \ (lambda (word)\n      (hashtable-set! max-chars (string-hash word)\n       \
    \ (string-length word)))\n      words))\n  (hashtable-ref max-chars \"\")\n)\n",
  "  (let ((max-count (make-hashtable)))\n    (for-each (lambda (word)\n         \
    \       (hashtable-set! max-count (string->hashtable word) 1))\n      words))\n\
    \  (hashtable-ref max-count \"\")\n)\n", "  (let ((max-count (make-hashtable)))\n\
    \    (for-each (lambda (word)\n                (hashtable-set! max-count\n   \
    \               (hashtable-ref max-count word)\n                  (hashtable-ref\
    \ max-count (string-ci-less? word \"a\"))))\n      words))\n\n;; >>> (find_max\
    \ (list \"name\" \"enam\" \"game\"))\n;; \"enam\"\n;; >>> (find_max (list \"name\"\
    \ \"enam\" \"game\" \"a\"))\n;; \"enam\"\n;; >>> (find_max (list \"name\" \"enam\"\
    \ \"game\" \"a\" \"b\"))\n;; \"enam\"\n;; >>> (find_max (list \"name\" \"enam\"\
    \ \"game\" \"a\" \"b\" \"c\"))\n;; \"enam\"\n;; >>> (find_max (list \"name\" \"\
    enam\" \"game\" \"a\" \"b\" \"c\" \"d\"))\n;; \"enam\"\n;; >>> (find_max (list\
    \ \"name\" \"enam\" \"game\" \"a\" \"b\" \"c\" \"d\" \"e\"))\n;; \"enam\"\n;;\
    \ >>> (find_max (list \"name\" \"enam\" \"game\" \"a\" \"b\" \"c\" \"d\" \"e\"\
    \ \"f\"))\n;; \"enam\"\n;; >>> (find_max (list \"name\" \"enam\" \"game\" \"a\"\
    \ \"b\" \"c\" \"d\" \"e\" \"f\" \"g\"))\n;; \"enam\"\n;; >>> (find_max (list \"\
    name\" \"enam\" \"game\" \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\"))\n;;\
    \ \"enam\"\n;; >>> (find_max (list \"name\" \"enam\" \"game\" \"a\" \"b\" \"c\"\
    \ \"d\" \"e\" \"f\" \"g\" \"h\" \"i\"))\n;; \"enam\"\n;; >>> (find_max (list \"\
    name\" \"enam\" \"game\" \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\"\
    \ \"j\"))\n;; \"en", "  (let ((max-count (make-hashtable)))\n    (for-each (lambda\
    \ (word)\n               (hashtable-set! max-count (string-hash word) 1))\n  \
    \    words))\n  (let ((max-word (make-hashtable)))\n    (for-each (lambda (word)\n\
    \               (hashtable-set! max-word (string-hash word) word))\n      (hashtable-ref\
    \ max-count max-word)))\n)\n", "  (let ((max-count (make-hashtable)))\n    (for-each\
    \ (lambda (word)\n      (hashtable-put! max-count (string-length word) word))\n\
    \      words))\n  (hashtable-keys max-count)\n)\n", "  (let ((max-chars (make-hashtable)))\n\
    \    (for-each (lambda (word)\n                (hashtable-set! max-chars (string-hash\
    \ word)\n                                      (string-length word)))\n      words))\n\
    \  (hashtable-ref max-chars \"\")\n)\n", "  (let ((max-count (make-hashtable)))\n\
    \    (for-each (lambda (word)\n               (hashtable-put! max-count (string-hash\
    \ word)))\n      words))\n  (hashtable-keys max-count)\n)\n", "  (let ((max-count\
    \ 0)\n         (max-word \"\"))\n    (for-each (lambda (word)\n              \
    \  (if (string=? word \"\")\n                    (set! max-count (+ max-count\
    \ (count word)))\n                    (set! max-word word)))\n            words))\n\
    \  (if (eq? max-count 0)\n    (error \"No words found\")\n    max-word))\n", " \
    \ (let ((max-chars (0)))\n    (for-each (lambda (word)\n                (set!\
    \ max-chars (max-chars + (string-length word)))\n                (if (string=?\
    \ word \"\")\n                  (return word)))\n      words))\n)\n", "  (let\
    \ ((max-chars (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-set!\
    \ max-chars (string-length word) (hashtable-ref max-chars word)))\n      words))\n\
    \  (hashtable-ref max-chars (car words)))\n", "  (let ((max-count (make-hashtable)))\n\
    \    (for-each (lambda (word)\n               (hashtable-set! max-count\n    \
    \             (string-ci-less-than? word (hashtable-ref max-count word))\n   \
    \              word))\n      words))\n  (hashtable-ref max-count (find_max words)))\n",
  "  (let ((max-chars (make-hashtable)))\n    (for-each (lambda (word)\n         \
    \       (hashtable-set! max-chars (string-hash word)\n                       \
    \               (string-length word)))\n      words))\n  (hashtable-ref max-chars\
    \ \"\")\n)\n", "  (let ((max-count (make-hashtable)))\n    (for-each (lambda (word)\n\
    \      (hashtable-put! max-count (string-length word) word))\n      words))\n\
    \  (hashtable-keys max-count)\n)\n", "  (let ((max-chars (make-hashtable)))\n\
    \    (for-each (lambda (word)\n      (hashtable-set! max-chars (string-hash word)\
    \ (string-length word)))\n      words))\n  (let ((max-word (hashtable-ref max-chars)))\n\
    \    (for-each (lambda (word)\n      (if (hashtable-ref max-chars (string-hash\
    \ word))\n          (hashtable-remove! max-chars word)\n          (hashtable-put!\
    \ max-chars (string-hash word) (string-length word))))\n      words))\n  (hashtable-ref\
    \ max-chars)))\n", "  (let ((counts (map (lambda (word)\n                    \
    \  (string-length word)\n                      (string-count word))))\n      \
    \   (max-counts (reduce (lambda (a b)\n                              (if (string=?\
    \ a b)\n                                  (string-compare a b)\n             \
    \                     (string-compare b a)))\n                        counts)))\n\
    \    (if (null? counts)\n      (error \"No words found\")\n      (reduce (lambda\
    \ (a b)\n               (if (string=? a b)\n                   (string-compare\
    \ a b)\n                   (string-compare b a)))\n             (first words)\n\
    \             (second words))))\n", "  (let ((max-count 0)\n         (max-word\
    \ \"\"))\n    (for-each (lambda (word)\n                (if (string=? word \"\"\
    )\n                    (set! max-count (max max-count word))\n               \
    \     (set! max-word word)))\n      words))\n)\n", "  (let ((max-chars (make-hashtable)))\n\
    \    (for-each (lambda (word)\n                (hashtable-set! max-chars (string-hash\
    \ word)\n                                      (string-length word)))\n      words))\n\
    \  (hashtable-ref max-chars \"\")\n)\n", "  (let ((max-chars (make-hashtable)))\n\
    \    (for-each (lambda (word)\n      (hashtable-put! max-chars (string-length\
    \ word) word))\n      words))\n  (hashtable-keys max-chars)\n)\n", "  (let ((max-chars\
    \ (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-set! max-chars\
    \ (string-hash (string-upcase word)))\n      (string-upcase word)))\n    (hashtable-ref\
    \ max-chars \"\"))))\n", "  (let ((max-count (make-hashtable)))\n    (for-each\
    \ (lambda (word)\n      (hashtable-put! max-count (string-length word) word))\n\
    \      words))\n  (hashtable-keys max-count)\n)\n", "  (let ((max-count (make-hashtable)))\n\
    \    (for-each (lambda (word)\n               (hashtable-set! max-count\n    \
    \             (hashtable-ref max-count word)\n                 (hashtable-ref\
    \ max-count (string-upcase word))))\n             words))\n  (let ((max-word (hashtable-ref\
    \ max-count (string-upcase (car words)))))\n    (for-each (lambda (word)\n   \
    \            (if (hashtable-ref max-count (string-upcase word))\n            \
    \        (hashtable-ref max-count word)\n                    (hashtable-ref max-count\
    \ (string-upcase word))))\n             (cdr words)))\n)\n\n;; #lang scheme\n\n\
    ;; Write a function that accepts a list of strings.\n;; The list contains different\
    \ words. Return the word with maximum number\n;; of unique characters. If multiple\
    \ strings have maximum number of unique\n;; characters, return the one which comes\
    \ first in lexicographical order.\n;; >>> (find-max (list \"name\" \"of\" \"string\"\
    ))\n;; \"string\"\n;; >>> (find-max (list \"name\" \"enam\" \"game\"))\n;; \"\
    enam\"\n;; >>> (find-max (list \"aaaaaaa\" \"bb\" \"cc\"))\n;; \"aaaaaaa\"", " \
    \ (let ((max-count (make-hashtable)))\n    (for-each (lambda (word)\n        \
    \        (hashtable-set! max-count (string->hashtable word) 1))\n      words))\n\
    \  (hashtable-ref max-count \"\")\n)\n", "  (let ((max-count (make-hashtable)))\n\
    \    (for-each (lambda (word)\n      (hashtable-set! max-count (string-hash word)\
    \ 1))\n      words))\n  (let ((max-word (make-hashtable)))\n    (for-each (lambda\
    \ (word)\n      (hashtable-set! max-word (string-hash word) word))\n      (hashtable-ref\
    \ max-count max-word)))\n)\n", "  (let ((max-count (make-hashtable)))\n    (for-each\
    \ (lambda (word)\n      (hashtable-put! max-count (string-length word) word))\n\
    \      words))\n  (hashtable-keys max-count)\n)\n", "  (let ((max-chars (make-hashtable)))\n\
    \    (for-each (lambda (word)\n      (hashtable-set! max-chars (string-length\
    \ word) (string-length word)))\n      words))\n  (let ((max-word (hashtable-ref\
    \ max-chars)))\n    (for-each (lambda (word)\n      (if (hashtable-ref max-chars\
    \ (string-length word))\n        (hashtable-remove! max-chars (string-length word))\n\
    \        (hashtable-put! max-chars (string-length word) word)))\n      words))\n\
    \  (hashtable-ref max-chars)))\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; >>>\
    \ (find_max (list \"name\" \"of\" \"string\"))\n;; \"string\"\n;; >>> (find_max\
    \ (list \"name\" \"enam\" \"game\"))\n;; \"enam\"\n;; >>> (find_max (list \"aaaaaaa\"\
    \ \"bb\" \"cc\"))\n;; \"aaaaaaa\"", "  (let ((max-count (make-hashtable)))\n \
    \   (for-each (lambda (word)\n                (hashtable-set! max-count (string-hash\
    \ word) 1))\n      words))\n  (let ((max-word (make-hashtable)))\n    (for-each\
    \ (lambda (word)\n                (hashtable-set! max-word (string-hash word)\
    \ word))\n      (hashtable-ref max-count max-word)))\n)\n", "  (let ((max-count\
    \ (make-hashtable)))\n    (for-each (lambda (word)\n               (hashtable-set!\
    \ max-count (string-hash word) 1))\n      words))\n  (let ((max-word (make-hashtable)))\n\
    \    (for-each (lambda (word)\n               (hashtable-set! max-word (string-hash\
    \ word) word))\n      (hashtable-ref max-count max-word)))\n)\n", "  (let ((max-count\
    \ (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-put! max-count\
    \ (string-length word) word))\n      words))\n  (hashtable-keys max-count)\n)\n",
  "  (let ((max-chars (make-hashtable)))\n    (for-each (lambda (word)\n         \
    \       (hashtable-set! max-chars (string-hash word)\n                       \
    \               (string-length word)))\n      words))\n  (hashtable-ref max-chars\
    \ \"\")\n)\n", "  (let ((max-count (make-hashtable)))\n    (for-each (lambda (word)\n\
    \      (hashtable-put! max-count (string-length word) word))\n      words))\n\
    \  (hashtable-keys max-count)\n)\n", "  (let ((max-count (make-hashtable)))\n\
    \    (for-each (lambda (word)\n      (hashtable-put! max-count (string-length\
    \ word) word))\n      words))\n  (hashtable-keys max-count)\n)\n", "  (let ((max-count\
    \ (make-hashtable)))\n    (for-each (lambda (word)\n               (hashtable-set!\
    \ max-count\n                 (hashtable-ref max-count word)\n               \
    \  (hashtable-ref max-count (string-ci-less? word))))\n             words))\n\
    \  (hashtable-ref max-count (string-ci-less? (hashtable-keys max-count))))\n",
  "  (let ((max-count 0)\n         (max-word \"\"))\n    (for-each (lambda (word)\n\
    \                (if (string=? word \"\")\n                    (set! max-count\
    \ (+ max-count (count word)))\n                    (set! max-word word)))\n  \
    \    words))\n  (if (eq? max-count 0)\n    (car words)\n    (find_max (cdr words))))\n",
  "  (let ((max-count (make-hashtable)))\n    (for-each (lambda (word)\n         \
    \      (hashtable-set! max-count (string-hash word) 1))\n      words))\n  (let\
    \ ((max-word (make-hashtable)))\n    (for-each (lambda (word)\n              \
    \ (hashtable-set! max-word (string-hash word) word))\n      (hashtable-ref max-count\
    \ max-word)))\n)\n", "  (let ((max-count (make-hashtable)))\n    (for-each (lambda\
    \ (word)\n                (hashtable-set! max-count\n                  (hashtable-ref\
    \ max-count word)\n                  (hashtable-ref max-count (string-upcase word))))\n\
    \      words))\n)\n", "  (let ((max-count 0)\n         (max-word \"\"))\n    (for-each\
    \ (lambda (word)\n                (if (string=? word \"\")\n                 \
    \ (set! max-count (+ max-count (count word)))\n                  (set! max-word\
    \ word)))\n      words))\n  (if (eq? max-count 0)\n    (error \"No words found\"\
    )\n    (else\n      (format \"The word with maximum number of unique characters\
    \ is %s\"\n             (string->symbol max-word))))\n)\n", "  (let ((max-count\
    \ (make-hashtable)))\n    (for-each (lambda (word)\n                (hashtable-set!\
    \ max-count\n                  (hashtable-ref max-count word)\n              \
    \    (hashtable-ref max-count (string-ci-less? word))))\n               words))\n\
    \  (hashtable-ref max-count (string-ci-less? (hashtable-keys max-count))))\n",
  "  (let ((counts (map (lambda (w) (count w))) words)))\n  (let ((max-count (max\
    \ (map (lambda (w) (count w)) counts))))\n    (if (null? max-count)\n      (let\
    \ ((first-max-count (car counts)))\n        (if (null? first-max-count)\n    \
    \      (car words)\n          (cdr words)))\n      (car words)))\n)\n", "  (let\
    \ ((max-count (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-put!\
    \ max-count (string-length word) word))\n      words))\n  (let ((max-word (hashtable-keys\
    \ max-count)))\n    (let ((max-count (hashtable-values max-count)))\n      (if\
    \ (hashtable-size max-count)\n        (hashtable-ref max-count max-word)\n   \
    \     (hashtable-ref max-count (string-ci-less? (hashtable-ref max-count max-word))))))\n\
    )\n", "  (let ((counts (map (lambda (word)\n                      (let ((count\
    \ (count-words word))))\n                      (if (null? counts)\n          \
    \              (cons word (make-vector 1 0))\n                        (cons (car\
    \ counts) (cdr counts)))))))\n    (if (null? counts)\n      (car (first words))\n\
    \      (let ((max-count (car (first (cdr (first words))))))\n          (let ((max-word\
    \ (car (first (cdr (first (cdr (first words))))))))\n                (if (null?\
    \ (cdr (first (cdr (first (cdr (first words)))))))\n                     (max-count\
    \ max-word)\n                     (max-count max-word)\n                     (max-count\
    \ max-word))))))))\n", "  (let ((max-chars (0)))\n    (for-each (lambda (word)\n\
    \      (set! max-chars (max-chars + (string-length word)))\n      (if (string-length\
    \ word)\n        (if (string-lessp word first)\n          word first)\n      \
    \  ()))\n      words))\n", "  (let ((max-count (make-hashtable)))\n    (for-each\
    \ (lambda (word)\n                (hashtable-set! max-count\n                \
    \  (hashtable-ref max-count word)\n                  (hashtable-ref max-count\
    \ (string-upcase word))))\n      words))\n)\n", "  (let ((max-count (make-hashtable)))\n\
    \    (for-each (lambda (word)\n                (hashtable-set! max-count\n   \
    \               (hashtable-ref max-count word)\n                  (hashtable-ref\
    \ max-count (string-upcase word))))\n      words))\n\n;; >>> (find_max (list \"\
    name\" \"enam\" \"game\"))\n;; \"enam\"\n;; >>> (find_max (list \"aaaaaaa\" \"\
    bb\" \"cc\"))\n;; \"aaaaaaa\"\n;; >>> (find_max (list \"name\" \"of\" \"string\"\
    ))\n;; \"string\"\n;; >>> (find_max (list \"name\" \"enam\" \"game\"))\n;; \"\
    enam\"\n;; >>> (find_max (list \"name\" \"enam\" \"game\"))\n;; \"enam\"\n;; >>>\
    \ (find_max (list \"name\" \"enam\" \"game\"))\n;; \"enam\"\n;; >>> (find_max\
    \ (list \"name\" \"enam\" \"game\"))\n;; \"enam\"\n;; >>> (find_max (list \"name\"\
    \ \"enam\" \"game\"))\n;; \"enam\"\n;; >>> (find_max (list \"name\" \"enam\" \"\
    game\"))\n;; \"enam\"\n;; >>> (find_max (list \"name\" \"enam\" \"game\"))\n;;\
    \ \"enam\"\n;; >>> (find_max (list \"name\" \"enam\" \"game\"))\n;; \"enam\"\n\
    ;; >>> (find_max (list \"name\" \"enam\" \"game\"))\n;; \"enam\"\n;; >>> (find_max\
    \ (list \"name\" \"enam\" \"game\"))\n;; \"enam\"\n;; >>> (find_max (list \"name\"\
    \ \"enam\" \"game\"))\n;; \"enam\"\n;; >>> (find_max (list \"name\" \"enam\" \"\
    game\"))\n;; \"enam\"\n;; >>> (find_max (list \"name\" \"enam\" \"game\"))\n;;\
    \ \"enam\"\n;; >>> (find_max (list \"name\" \"enam\" \"game\"))\n;; \"enam\"\n\
    ;; >>> (find_max (list \"name\" \"enam\" \"game\"))\n", "  (let ((max-count (make-hashtable)))\n\
    \    (for-each (lambda (word)\n      (hashtable-put! max-count (string-length\
    \ word) word))\n      words))\n  (hashtable-keys max-count)\n)\n", "  (let ((max-count\
    \ (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-put! max-count\
    \ (string-length word) word))\n      words))\n  (hashtable-keys max-count)\n)\n",
  "  (let ((max-count (make-hashtable)))\n    (for-each (lambda (word)\n         \
    \       (hashtable-set! max-count (hashtable-ref max-count word))\n          \
    \      (hashtable-put! max-count word)))\n      words))\n", "  (let ((max-count\
    \ (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-put! max-count\
    \ (string-length word) word))\n      words))\n  (hashtable-keys max-count)\n)\n",
  "  (let ((max-count (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-put!\
    \ max-count (string-length word) word))\n      words))\n  (hashtable-keys max-count)\n\
    )\n", "  (let ((max-count (make-hashtable)))\n    (for-each (lambda (word)\n \
    \              (hashtable-set! max-count\n                 (hashtable-ref max-count\
    \ word)\n                 (hashtable-ref max-count (string-upcase word))))\n \
    \            words))\n  (hashtable-ref (hashtable-ref max-count (string-upcase\
    \ (car words)))\n               (hashtable-ref max-count (string-upcase (car (cdr\
    \ words))))))\n", "  (let ((max-count (make-hashtable)))\n    (for-each (lambda\
    \ (word)\n               (hashtable-set! max-count (string->hashtable word) 1))\n\
    \      words))\n  (hashtable-ref max-count \"\")\n)\n", "  (let ((max-chars (make-hashtable)))\n\
    \    (for-each (lambda (word)\n      (hashtable-set! max-chars (string-length\
    \ word) (string-length word)))\n      words))\n  (let ((max-word (hashtable-ref\
    \ max-chars max-chars)))\n    (if (hashtable-ref max-chars max-chars)\n      (hashtable-ref\
    \ max-chars max-word)\n      (hashtable-ref max-chars max-word)))\n)\n", "  (let\
    \ ((max-count (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-set!\
    \ max-count (hashtable-ref max-count word)\n        (hashtable-ref max-count (string-length\
    \ word))))\n      words))\n  (hashtable-ref max-count (string-length (hashtable-keys\
    \ max-count))))\n", "  (let ((max-count (make-hashtable)))\n    (for-each (lambda\
    \ (word)\n      (hashtable-put! max-count (string-length word) word))\n      words))\n\
    \  (hashtable-keys max-count)\n)\n", "  (let ((max-chars (make-hashtable)))\n\
    \    (for-each (lambda (word)\n      (hashtable-set! max-chars (string-length\
    \ word) (string-length word)))\n      words))\n  (let ((max-word (make-hashtable)))\n\
    \    (for-each (lambda (word)\n      (hashtable-set! max-word (string-length word)\
    \ word))\n      words))\n  (let ((max-word-chars (make-hashtable)))\n    (for-each\
    \ (lambda (word)\n      (hashtable-set! max-word-chars (string-length word)\n\
    \        (string-length (hashtable-ref max-word word))))\n      words))\n  (let\
    \ ((max-word-chars-set (make-hashtable)))\n    (for-each (lambda (word)\n    \
    \  (hashtable-set! max-word-chars-set (string-length word)\n        (string-length\
    \ (hashtable-ref max-word-chars word))))\n      words))\n  (let ((max-word-chars-set-set\
    \ (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-set! max-word-chars-set-set\
    \ (string-length word)\n        (string-length (hashtable-ref max-word-chars-set\
    \ word))))\n      words))\n  (let ((max-word-set (make-hashtable)))\n    (for-each\
    \ (lambda (word)\n      (hashtable-set! max-word-set (string-length word) word))\n\
    \      words))\n  (let ((max-word-set-set (make-hashtable)))\n    (for-each (lambda\
    \ (word)\n      (hashtable-set! max-word-set-set (string-length word)\n      \
    \  word))\n      words))\n  (let ((max-set (make-hashtable)))\n    (for-each (lambda\
    \ (word)\n      (hashtable-set! max-set (string-length word) word))\n      words))\n\
    \  (let ((max-set-set (make-hashtable)))\n    (for-each (lambda (word)\n      ",
  "  (let ((max-chars (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-set!\
    \ max-chars (string-length word)\n                                (hashtable-ref\
    \ max-chars word)))\n      words))\n  (hashtable-ref max-chars (car words)))\n",
  "  (let ((max-count (make-hashtable)))\n    (for-each (lambda (word)\n         \
    \       (hashtable-set! max-count\n                  (hashtable-ref max-count\
    \ word)\n                  (hashtable-ref max-count (string-ci-less? word \"\"\
    ))))\n      words))\n", "  (let ((max-count (make-hashtable)))\n    (for-each\
    \ (lambda (word)\n      (hashtable-put! max-count (string-length word) word))\n\
    \      words))\n  (hashtable-keys max-count)\n)\n", "  (let ((max-count (make-hashtable)))\n\
    \    (for-each (lambda (word)\n                (hashtable-put! max-count (string-length\
    \ word) word))\n      words))\n  (hashtable-keys max-count)\n)\n", "  (let ((max-count\
    \ 0)\n         (max-word \"\"))\n    (for-each (lambda (word)\n              \
    \  (if (string=? word \"\")\n                    (set! max-count (+ max-count\
    \ (count word)))\n                    (set! max-word word)))\n      words))\n\
    \  (if (eq? max-count 0)\n    (car words)\n    (find_max (cdr words))))\n", " \
    \ (let ((max-count (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-put!\
    \ max-count (string-length word) word))\n      words))\n  (hashtable-keys max-count)\n\
    )\n", "  (let ((max-chars (make-hashtable)))\n    (for-each (lambda (word)\n \
    \               (hashtable-set! max-chars (string-hash word)\n               \
    \                       (string-length word)))\n      words))\n  (hashtable-ref\
    \ max-chars \"\")\n)\n", "  (let ((max-count (make-hashtable)))\n    (for-each\
    \ (lambda (word)\n      (hashtable-set! max-count\n        (string-count word\
    \ (hashtable-ref max-count word)) 1))\n      words))\n  (hashtable-ref max-count\
    \ (car words)))\n\n;; Write a function that accepts a list of strings.\n;; The\
    \ list contains different words. Return the word with maximum number\n;; of unique\
    \ characters. If multiple strings have maximum number of unique\n;; characters,\
    \ return the one which comes first in lexicographical order.\n;; >>> (find_max\
    \ (list \"name\" \"of\" \"string\"))\n;; \"string\"\n;; >>> (find_max (list \"\
    name\" \"enam\" \"game\"))\n;; \"enam\"\n;; >>> (find_max (list \"aaaaaaa\" \"\
    bb\" \"cc\"))\n;; \"aaaaaaa\"", "  (let ((max-count (make-hashtable)))\n    (for-each\
    \ (lambda (word)\n                (hashtable-set! max-count\n                \
    \  (hashtable-ref max-count word)\n                  (hashtable-ref max-count\
    \ (string-ci-less? word))))\n              words))\n  (hashtable-ref (hashtable-ref\
    \ max-count (string-ci-less? (car words))))))\n", "  (let ((max-count (make-hashtable)))\n\
    \    (for-each (lambda (word)\n                (hashtable-set! max-count\n   \
    \               (hashtable-ref max-count word)\n                  (hashtable-ref\
    \ max-count (string-upcase word))))\n              words))\n  (hashtable-ref (hashtable-ref\
    \ max-count (string-upcase (car words)))\n              (string-upcase (car (cdr\
    \ words))))))\n", "  (let ((max-count (make-hashtable)))\n    (for-each (lambda\
    \ (word)\n                (hashtable-set! max-count\n                  (hashtable-ref\
    \ max-count word)\n                  (hashtable-ref max-count (string-ci-less?\
    \ word \"a\"))))\n      words))\n", "  (let ((max-chars (make-hashtable)))\n \
    \   (for-each (lambda (word)\n      (hashtable-put! max-chars (string-length word)\
    \ word))\n      words))\n  (hashtable-keys max-chars)\n)\n", "  (let ((max-count\
    \ (make-hashtable)))\n    (for-each (lambda (word)\n               (hashtable-set!\
    \ max-count (string-hash word) 1))\n      words))\n  (let ((max-word (make-vector\
    \ 1)))\n    (for-each (lambda (word)\n               (vector-set! max-word (string-hash\
    \ word) word))\n      (hashtable-keys max-count)))\n  (if (empty? max-word)\n\
    \    (vector-ref max-word 0)\n    (sort (vector-map (lambda (word)\n         \
    \              (string-ci-compare word (vector-ref max-word 0)))\n           \
    \ max-word)))\n)\n", "  (let ((max-count (make-hashtable)))\n    (for-each (lambda\
    \ (word)\n      (hashtable-put! max-count (string-length word) word))\n      words))\n\
    \  (let ((max-word (hashtable-keys max-count)))\n    (let ((max-count-word (hashtable-ref\
    \ max-count max-word)))\n      (if (eq? max-count-word max-word)\n        max-word\n\
    \        (hashtable-remove! max-count max-word))))\n)\n", "  (let ((max-count\
    \ (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-set! max-count\
    \ (string-hash (string-upcase word)) 1))\n      words))\n  (hashtable-ref max-count\
    \ \"\")\n)\n", "  (let ((max-chars (0)))\n    (for-each (lambda (word)\n     \
    \           (set! max-chars (max-chars + (string-length word)))\n            \
    \    (if (string-length word)\n                    (if (string-lessp word \"zzzzzzzz\"\
    )\n                        (return word))))\n                words))\n  (if (eq?\
    \ max-chars 0)\n      (error \"No words found\")\n      (return (cadr (sort words))))\n\
    )\n", "  (let ((max-count (make-hashtable)))\n    (for-each (lambda (word)\n \
    \     (hashtable-set! max-count (string-hash (string-upcase word)) 1))\n     \
    \ words))\n  (hashtable-ref max-count \"\")\n)\n", "  (let ((max-count (make-hashtable)))\n\
    \    (for-each (lambda (word)\n      (hashtable-put! max-count (string-length\
    \ word) word))\n      words))\n  (hashtable-keys max-count)\n)\n", "  (let ((max-count\
    \ (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-put! max-count\
    \ (string-length word) word))\n      words))\n  (hashtable-keys max-count)\n)\n",
  "  (let ((max-count 0)\n         (max-word \"\"))\n    (for-each (lambda (word)\n\
    \                (if (string=? word \"\")\n                    (set! max-count\
    \ (+ max-count (count word)))\n                    (set! max-word word)))\n  \
    \    words))\n  max-word)\n", "  (let ((max-count (make-hashtable)))\n    (for-each\
    \ (lambda (word)\n      (hashtable-set! max-count (string-hash word) 1))\n   \
    \   words))\n  (let ((max-word (make-vector 1)))\n    (for-each (lambda (word)\n\
    \      (if (hashtable-ref max-count word)\n        (vector-set! max-word 0 word)\n\
    \        (vector-set! max-word 1 \"\")\n        (vector-set! max-word 2 \"\")))\n\
    \      words))\n  (vector-ref max-word 0)))\n", "  (let ((max-count 0)\n     \
    \    (max-word \"\"))\n    (for-each (lambda (word)\n                (if (string=?\
    \ word \"\")\n                    (set! max-count (max max-count word-count word))\n\
    \                    (set! max-word word)))\n      words))\n)\n", "  (let ((max-count\
    \ (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-put! max-count\
    \ (string-length word) word))\n      words))\n  (hashtable-keys max-count)\n)\n",
  "  (let ((max-chars (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-set!\
    \ max-chars (string-length word)\n        (hashtable-ref max-chars word)))\n \
    \     words))\n  (hashtable-ref max-chars (car words)))\n", "  (let ((max-chars\
    \ (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-set! max-chars\
    \ (string-length word) (string-length word)))\n      words))\n  (hashtable-ref\
    \ max-chars)))\n", "  (let ((max-count (make-hashtable)))\n    (for-each (lambda\
    \ (word)\n                (hashtable-set! max-count (string-hash word) 1))\n \
    \     words))\n  (let ((max-word (make-hashtable)))\n    (for-each (lambda (word)\n\
    \                (hashtable-set! max-word (string-hash word) word))\n      (hashtable-ref\
    \ max-count max-word)))\n)\n", "  (let ((max-count (make-hashtable)))\n    (for-each\
    \ (lambda (word)\n      (hashtable-put! max-count (string-length word) word))\n\
    \      words))\n  (hashtable-keys max-count)\n)\n", "  (let ((max-count (make-hashtable)))\n\
    \    (for-each (lambda (word)\n      (hashtable-put! max-count (string-length\
    \ word) word))\n      words))\n  (hashtable-keys max-count)\n)\n", "  (let ((max-chars\
    \ (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-set! max-chars\
    \ (string-hash word) (string-length word)))\n      words))\n  (hashtable-ref max-chars\
    \ \"\")\n)\n", "  (let ((max-chars (make-hashtable)))\n    (for-each (lambda (word)\n\
    \      (hashtable-set! max-chars (string-length word) (string-length word)))\n\
    \      words))\n  (let ((max-word (make-hashtable)))\n    (for-each (lambda (word)\n\
    \      (hashtable-set! max-word (string-length word) word))\n      words))\n \
    \ (let ((max-word (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-set!\
    \ max-word (string-length word) word))\n      words))\n  (let ((max-word (make-hashtable)))\n\
    \    (for-each (lambda (word)\n      (hashtable-set! max-word (string-length word)\
    \ word))\n      words))\n  (let ((max-word (make-hashtable)))\n    (for-each (lambda\
    \ (word)\n      (hashtable-set! max-word (string-length word) word))\n      words))\n\
    \  (let ((max-word (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-set!\
    \ max-word (string-length word) word))\n      words))\n  (let ((max-word (make-hashtable)))\n\
    \    (for-each (lambda (word)\n      (hashtable-set! max-word (string-length word)\
    \ word))\n      words))\n  (let ((max-word (make-hashtable)))\n    (for-each (lambda\
    \ (word)\n      (hashtable-set! max-word (string-length word) word))\n      words))\n\
    \  (let ((max-word (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-set!\
    \ max-word (string-length word) word))\n      words))\n  (let ((max-word (make-hashtable)))\n\
    \    (for-each (lambda (word)\n      (hashtable-set! max-word (string-length word)\
    \ word))\n      words))\n  (let ((max-word (make-hashtable)))\n    (for-each (lambda\
    \ (word)\n      ", "  (let ((max-count (make-hashtable)))\n    (for-each (lambda\
    \ (word)\n      (hashtable-put! max-count (string-length word) word))\n      words))\n\
    \  (let ((max-word (hashtable-keys max-count)))\n    (let ((max-count-word (hashtable-ref\
    \ max-count max-word)))\n      (if (eq? max-count-word max-word)\n        max-word\n\
    \        (hashtable-remove! max-count max-word)\n        (hashtable-put! max-count\
    \ max-word max-word))))\n", "  (let ((max-count (make-hashtable)))\n    (for-each\
    \ (lambda (word)\n      (hashtable-put! max-count (string-length word) word))\n\
    \      words))\n  (let ((max-word (hashtable-keys max-count)))\n    (if (hashtable-size\
    \ max-count)\n      (hashtable-ref max-count max-word)\n      (hashtable-ref max-count\
    \ (car words))))\n)\n", "  (let ((max-count (make-hashtable)))\n    (for-each\
    \ (lambda (word)\n      (hashtable-put! max-count (string-length word) word))\n\
    \      words))\n  (let ((max-word (hashtable-keys max-count)))\n    (for-each\
    \ (lambda (word)\n      (hashtable-remove! max-count word))\n      (hashtable-keys\
    \ max-count))))\n", "  (let ((max-count (make-hashtable)))\n    (for-each (lambda\
    \ (word)\n                (hashtable-set! max-count\n                  (hashtable-ref\
    \ max-count word)\n                  (hashtable-ref max-count (string->number\
    \ (length word))))\n                words)\n              '()))\n", "  (let ((max-count\
    \ (make-hashtable)))\n    (for-each (lambda (word)\n                (hashtable-set!\
    \ max-count\n                  (hashtable-ref max-count word)\n              \
    \    (hashtable-ref max-count (string-upcase word))))\n              words))\n\
    \  (let ((max-count (hashtable-ref max-count (string-upcase (car words))))\n \
    \        (max-word (car (cdr words))))\n    (if (hashtable-ref max-count max-word)\n\
    \        max-word\n        (hashtable-ref max-count (string-upcase max-word))))\n\
    )\n\n;; #lang scheme", "  (let ((max-count (make-hashtable)))\n    (for-each (lambda\
    \ (word)\n                (hashtable-set! max-count (string-hash word) 1))\n \
    \     words))\n  (let ((max-word (make-vector 1)))\n    (for-each (lambda (word)\n\
    \                (vector-set! max-word (string-hash word) word))\n      (hashtable-keys\
    \ max-count)))\n  (if (empty? max-word)\n    (vector-ref max-word 0)\n    (sort\
    \ (vector-map (lambda (w) (string-ref w 0)) max-word)\n       (lambda (a b) (string-cmp\
    \ a b))))\n)\n", "  (let ((max-count (make-hashtable)))\n    (for-each (lambda\
    \ (word)\n      (hashtable-put! max-count (string-length word) word))\n      words))\n\
    \  (hashtable-keys max-count)\n)\n", "  (let ((max-count (make-hashtable)))\n\
    \    (for-each (lambda (word)\n               (hashtable-put! max-count (string-hash\
    \ word) word))\n      words))\n  (let ((max-word (hashtable-keys max-count)))\n\
    \    (let ((max-count-word (hashtable-ref max-count max-word)))\n      (if (eqv?\
    \ max-count-word words)\n          (first words)\n          (max-word))))\n)\n",
  "  (let ((max-count (make-hashtable)))\n    (for-each (lambda (word)\n         \
    \      (hashtable-set! max-count\n                 (hashtable-ref max-count word)\n\
    \                 (hashtable-ref max-count (string-ci-less? word \"a\"))))\n \
    \     words))\n\n;; >>> (find_max (list \"name\" \"of\" \"string\"))\n;; \"string\"\
    \n;; >>> (find_max (list \"name\" \"enam\" \"game\"))\n;; \"enam\"\n;; >>> (find_max\
    \ (list \"aaaaaaa\" \"bb\" \"cc\"))\n;; \"aaaaaaa\"\n\n;; Write a function that\
    \ accepts a list of strings.\n;; The list contains different words. Return the\
    \ word with maximum number\n;; of unique characters. If multiple strings have\
    \ maximum number of unique\n;; characters, return the one which comes first in\
    \ lexicographical order.\n;; >>> (find_max (list \"name\" \"of\" \"string\"))\n\
    ;; \"string\"\n;; >>> (find_max (list \"name\" \"enam\" \"game\"))\n;; \"enam\"\
    \n;; >>> (find_max (list \"aaaaaaa\" \"bb\" \"cc\"))\n;; \"aaaaaaa\"", "  (let\
    \ ((max-count (make-hashtable)))\n    (for-each (lambda (word)\n             \
    \  (hashtable-set! max-count\n                 (string-ci-lessp (string-upcase\
    \ word)\n                      (string-ci-lessp (string-upcase (hashtable-ref\
    \ max-count word)))))\n                 word))\n      words))\n", "  (let ((max-count\
    \ (make-hashtable)))\n    (for-each (lambda (word)\n               (hashtable-set!\
    \ max-count\n                 (hashtable-ref max-count word)\n               \
    \  (hashtable-ref max-count (string-upcase word))))\n             words))\n  (if\
    \ (hashtable-size max-count)\n      (hashtable-keys max-count)\n      (string-upcase\
    \ (string-join \" \" (hashtable-keys max-count))))\n)\n", "  (let ((max-count\
    \ (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-put! max-count\
    \ (string-length word) word))\n      words))\n  (hashtable-keys max-count)\n)\n",
  "  (let ((max-count (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-put!\
    \ max-count (string-length word) word))\n      words))\n  (hashtable-keys max-count)\n\
    )\n", "  (let ((max-chars (make-hashtable)))\n    (for-each (lambda (word)\n \
    \               (hashtable-set! max-chars (string-hash word)\n               \
    \                       (string-length word)))\n      words))\n  (hashtable-ref\
    \ max-chars \"\")\n)\n", "  (let ((max-count (make-hashtable)))\n    (for-each\
    \ (lambda (word)\n      (hashtable-put! max-count (string-length word) word))\n\
    \      words))\n  (let ((max-word (hashtable-keys max-count)))\n    (for-each\
    \ (lambda (word)\n      (if (hashtable-ref max-count word)\n          (hashtable-ref\
    \ max-count word)\n          (hashtable-ref max-count word)\n          (hashtable-ref\
    \ max-count word)\n          (hashtable-ref max-count word)\n          (hashtable-ref\
    \ max-count word)\n          (hashtable-ref max-count word)\n          (hashtable-ref\
    \ max-count word)\n          (hashtable-ref max-count word)\n          (hashtable-ref\
    \ max-count word)\n          (hashtable-ref max-count word)\n          (hashtable-ref\
    \ max-count word)\n          (hashtable-ref max-count word)\n          (hashtable-ref\
    \ max-count word)\n          (hashtable-ref max-count word)\n          (hashtable-ref\
    \ max-count word)\n          (hashtable-ref max-count word)\n          (hashtable-ref\
    \ max-count word)\n          (hashtable-ref max-count word)\n          (hashtable-ref\
    \ max-count word)\n          (hashtable-ref max-count word)\n          (hashtable-ref\
    \ max-count word)\n          (hashtable-ref max-count word)\n          (hashtable-ref\
    \ max-count word)\n          (hashtable-ref max-count word)\n          (hashtable-ref\
    \ max-count word)\n          (hashtable-ref max-count word)\n          (hashtable-ref\
    \ max-count word)\n          (hashtable-ref max-count word)\n          (hashtable-ref\
    \ max-count word)\n          (hashtable-ref max-count word)\n          (hashtable-ref\
    \ max-count word)\n          (hashtable-ref max-count word)\n          (hashtable-ref\
    \ max-count word)\n          (hashtable-ref max-count word)\n          (hashtable-ref\
    \ max-count word)\n          (", "  (let ((counts (map (lambda (word) (count word))\
    \ words)))\n    (let ((max-count (reduce (lambda (a b) (if (> b 0) a b)) 0 counts)))\n\
    \      (let ((max-word (reduce (lambda (a b) (if (eq a b) a b)) \"\" counts)))\n\
    \        (if (eq max-count max-word)\n            (car words)\n            (cdr\
    \ words))))))\n", "  (let ((max-count (make-hashtable)))\n    (for-each (lambda\
    \ (word)\n               (hashtable-put! max-count word)\n               (string-split\
    \ word \"\")\n               (string-split word \" \"))\n      words))\n  (hashtable-keys\
    \ max-count)\n)\n", "  (let ((max-count (make-hashtable)))\n    (for-each (lambda\
    \ (word)\n      (hashtable-set! max-count (string-hash (string-upcase word)) 1))\n\
    \      words))\n  (hashtable-ref max-count \"\")\n)\n", "  (let ((max-count (make-hashtable)))\n\
    \    (for-each (lambda (word)\n      (hashtable-put! max-count (string-length\
    \ word) word))\n      words))\n  (hashtable-keys max-count)\n)\n", "  (let ((max-count\
    \ (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-put! max-count\
    \ (string-length word) word))\n      words))\n  (hashtable-keys max-count)\n)\n",
  "  (let ((max-count (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-put!\
    \ max-count (string-length word) word))\n      words))\n  (hashtable-keys max-count)\n\
    )\n", "  (let ((max-count (make-hashtable)))\n    (for-each (lambda (word)\n \
    \               (hashtable-set! max-count (string-ci-less? word)))\n      words))\n\
    \  (hashtable-ref max-count)))\n", "  (let ((max-count (make-hashtable)))\n  \
    \  (for-each (lambda (word)\n      (hashtable-set! max-count (string-hash (string-upcase\
    \ word)) 1))\n      words))\n  (hashtable-ref max-count \"\")\n)\n", "  (let ((max-count\
    \ (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-put! max-count\
    \ (string-length word) word))\n      words))\n  (hashtable-keys max-count)\n)\n",
  "  (let ((max-chars (0)))\n    (for-each (lambda (word)\n      (set! max-chars (max-chars\
    \ + (string-length word)))\n      (if (string=? word \"\")\n        (print \"\
    Empty string\")\n        (else\n          (print word)))\n      )\n      words))\n\
    )\n", "  (let ((max-count (make-hashtable)))\n    (for-each (lambda (word)\n \
    \     (hashtable-set! max-count\n        (string-count word (hashtable-ref max-count\
    \ word)) 1))\n      words))\n  (hashtable-ref max-count (car words)))\n\n;; Write\
    \ a function that accepts a list of strings.\n;; The list contains different words.\
    \ Return the word with maximum number\n;; of unique characters. If multiple strings\
    \ have maximum number of unique\n;; characters, return the one which comes first\
    \ in lexicographical order.\n;; >>> (find_max (list \"name\" \"of\" \"string\"\
    ))\n;; \"string\"\n;; >>> (find_max (list \"name\" \"enam\" \"game\"))\n;; \"\
    enam\"\n;; >>> (find_max (list \"aaaaaaa\" \"bb\" \"cc\"))\n;; \"aaaaaaa\"", " \
    \ (let ((counts (map (lambda (word) (count word)) words)))\n    (reduce (lambda\
    \ (a b) (if (eq? (length a) (length b)) a b))\n      (first counts)\n      (second\
    \ counts)))\n)\n", "  (let ((max-chars (make-hashtable)))\n    (for-each (lambda\
    \ (word)\n      (hashtable-put! max-chars (string-length word)\n             \
    \                   (hashtable-ref max-chars word)))\n      words))\n  (hashtable-ref\
    \ max-chars (car words)))\n", "  (let ((max-count (make-hashtable)))\n    (for-each\
    \ (lambda (word)\n                (hashtable-set! max-count\n                \
    \  (hashtable-ref max-count word)\n                  (hashtable-ref max-count\
    \ (string->symbol word))))\n                words))\n  (hashtable-ref max-count\
    \ (string->symbol (car words))))\n", "  (let ((max-chars (make-hashtable)))\n\
    \    (for-each (lambda (word)\n      (hashtable-set! max-chars (string-length\
    \ word) (hashtable-ref max-chars word)))\n      words))\n  (hashtable-ref max-chars\
    \ (car words)))\n", "  (let ((max-count (make-hashtable)))\n    (for-each (lambda\
    \ (word)\n      (hashtable-set! max-count (string-hash (string-upcase word)))\n\
    \      (string-upcase word)))\n    (hashtable-ref max-count)))\n", "  (let ((max-count\
    \ (make-hashtable)))\n    (for-each (lambda (word)\n                (hashtable-set!\
    \ max-count\n                  (hashtable-ref max-count word)\n              \
    \    (hashtable-ref max-count (string-upcase word))))\n              words))\n\
    \  (hashtable-ref (hashtable-ref max-count (string-upcase (car words)))\n    \
    \                                  (string-upcase (car words)))\n)\n", "  (let\
    \ ((max-chars (0)))\n    (for-each (lambda (word)\n                (set! max-chars\
    \ (max-chars + (string-length word)))\n                (if (string=? word \"\"\
    )\n                  (return word)))\n              words))\n)\n", "  (let ((max-count\
    \ (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-put! max-count\
    \ (string-length word) word))\n      words))\n  (hashtable-keys max-count)\n)\n",
  "  (let ((counts (map (lambda (word)\n                      (string-count word))))\n\
    \         (max-counts (reduce (lambda (a b)\n                              (if\
    \ (> (counts a) (counts b))\n                                 a b))))\n      \
    \   (max-words (reduce (lambda (a b)\n                             (if (string=\
    \ (first a) (first b))\n                                 a b))))\n         (max-words\
    \ (reduce (lambda (a b)\n                             (if (string= (first b) (first\
    \ a))\n                                 a b))))\n         (max-words (reduce (lambda\
    \ (a b)\n                             (if (string= (second a) (second b))\n  \
    \                               a b))))\n         (max-words (reduce (lambda (a\
    \ b)\n                             (if (string= (second b) (second a))\n     \
    \                            a b))))\n         (max-words (reduce (lambda (a b)\n\
    \                             (if (string= (third a) (third b))\n            \
    \                     a b))))\n         (max-words (reduce (lambda (a b)\n   \
    \                          (if (string= (third b) (third a))\n               \
    \                  a b))))\n         (max-words (reduce (lambda (a b)\n      \
    \                       (if (string= (fourth a) (fourth b))\n                \
    \                 a b))))\n         (max-words (reduce (lambda (a b)\n       \
    \                      (if (string= (fourth b) (fourth a))\n                 \
    \                a b))))))))", "  (let ((max-chars (make-hashtable)))\n    (for-each\
    \ (lambda (word)\n               (hashtable-set! max-chars (string-hash word)\n\
    \                                      (string-length word)))\n      words))\n\
    \  (hashtable-ref max-chars \"\")\n)\n", "  (let ((max-chars (make-hashtable)))\n\
    \    (for-each (lambda (word)\n                (hashtable-set! max-chars (string-hash\
    \ word)\n                                      (string-length word)))\n      words))\n\
    \  (hashtable-ref max-chars \"\")\n)\n", "  (let ((max-chars (make-hashtable)))\n\
    \    (for-each (lambda (word)\n      (hashtable-set! max-chars (string-length\
    \ word) (string-length word)))\n      words))\n  (let ((max-word (make-hashtable)))\n\
    \    (for-each (lambda (word)\n      (hashtable-set! max-word (string-length word)\
    \ word))\n      words))\n  (let ((max-word-index (make-hashtable)))\n    (for-each\
    \ (lambda (word)\n      (hashtable-set! max-word-index (string-length word) (string-index\
    \ word 0)))\n      words))\n  (let ((max-word-index-value (make-hashtable)))\n\
    \    (for-each (lambda (word)\n      (hashtable-set! max-word-index-value (string-length\
    \ word)\n        (string-index word 0)))\n      words))\n  (let ((max-word-value\
    \ (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-set! max-word-value\
    \ (string-length word) word))\n      words))\n  (let ((max-word-value-value (make-hashtable)))\n\
    \    (for-each (lambda (word)\n      (hashtable-set! max-word-value-value (string-length\
    \ word)\n        (string-index word 0)))\n      words))\n  (let ((max-word-value-value-value\
    \ (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-set! max-word-value-value-value\
    \ (string-length word)\n        (string-index word 0)))\n      words))\n  (let\
    \ ((max-word-value-value-value-value (make-hashtable)))\n    (for-each (lambda\
    \ (word)\n      (hashtable-set! max-word-value-value-value-value (string-length\
    \ word)\n        (string-index word 0)))\n      words))\n  (let ((max-word-value-value-value-value-value\
    \ (make-hashtable)))\n    (for-each (lambda (word)\n      (", "  (let ((max-count\
    \ (make-hashtable)))\n    (for-each (lambda (word)\n                (hashtable-set!\
    \ max-count\n                  (hashtable-ref max-count word)\n              \
    \    (hashtable-ref max-count (string-ci-less? word))))\n                words))\n\
    \  (hashtable-ref max-count (string-ci-less? (hashtable-keys max-count))))\n",
  "  (let ((max-count (make-hashtable)))\n    (for-each (lambda (word)\n         \
    \      (hashtable-set! max-count (string-ci=? word)))\n      words))\n  (let ((max-word\
    \ (hashtable-ref max-count)))\n    (if (hashtable-ref max-count)\n      (hashtable-ref\
    \ max-count)\n      (hashtable-ref max-count)\n      )))\n", "  (let ((max-chars\
    \ (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-set! max-chars\
    \ (string-length word) (hashtable-ref max-chars word)))\n      words))\n  (hashtable-ref\
    \ max-chars (car words)))\n", "  (let ((max-count (make-hashtable)))\n    (for-each\
    \ (lambda (word)\n      (hashtable-put! max-count (string-hashword word) 1))\n\
    \      words))\n  (let ((max-word (hashtable-keys max-count)))\n    (let ((max-count-word\
    \ (hashtable-ref max-count max-word)))\n      (if (eqv? max-count-word (hashtable-size\
    \ max-count))\n        (hashtable-ref max-count max-word)\n        max-word))))\n",
  "  (let ((max-count (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-set!\
    \ max-count (hashtable-ref max-count word)))\n      words))\n  (let ((max-word\
    \ (hashtable-ref max-count (hashtable-keys max-count))))\n    (hashtable-remove!\
    \ max-count (hashtable-keys max-count))))\n", "  (let ((counts (map (lambda (word)\n\
    \                      (let ((count (count-words word))))\n                  \
    \    (counts (cons (count word) counts))))))\n    (cond ((empty? counts) \"\"\
    )\n          ((> (car counts) (car (cdr counts))) (car counts))\n          (else\
    \ (cdr counts))))))\n", "  (let ((max-count (make-hashtable)))\n    (for-each\
    \ (lambda (word)\n                (hashtable-set! max-count (string-hash word)\
    \ 1))\n      words))\n  (let ((max-word (hashtable-ref max-count 1)))\n    (if\
    \ (hashtable-ref max-count 2)\n      (hashtable-ref max-count 1)\n      max-word)))\n",
  "  (let ((max-count (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-put!\
    \ max-count (string-length word) word))\n      words))\n  (hashtable-keys max-count)\n\
    )\n", "  (let ((max-count (make-hashtable)))\n    (for-each (lambda (word)\n \
    \               (hashtable-set! max-count\n                  (hashtable-ref max-count\
    \ word)\n                  (hashtable-ref max-count (string-ci-less? word))))\n\
    \               words))\n  (hashtable-ref (hashtable-ref max-count (string-ci-less?\
    \ (hashtable-keys max-count))))))\n", "  (let ((max-count (make-hashtable)))\n\
    \    (for-each (lambda (word)\n      (hashtable-put! max-count (string-length\
    \ word) word))\n      words))\n  (hashtable-keys max-count)\n)\n", "  (let ((max-count\
    \ (make-hashtable)))\n    (for-each (lambda (word)\n                (hashtable-set!\
    \ max-count (string-hash word) 1))\n      words))\n  (let ((max-word (make-hashtable)))\n\
    \    (for-each (lambda (word)\n                (hashtable-set! max-word (string-hash\
    \ word) word))\n      (hashtable-ref max-count max-word)))\n)\n", "  (let ((counts\
    \ (map (lambda (word)\n                      (string-count word))))\n        \
    \ (max-counts (reduce (lambda (a b)\n                              (if (string=?\
    \ a b)\n                                  (string-compare a b)\n             \
    \                     (if (string=? b a)\n                                   \
    \   (string-compare b a)\n                                      0))))\n      \
    \     counts)))\n  (if (empty? words)\n      \"\")\n  (else\n    (let ((max-counts\
    \ (reduce (lambda (a b)\n                               (if (string=? a b)\n \
    \                                 (string-compare a b)\n                     \
    \             (if (string=? b a)\n                                      (string-compare\
    \ b a)\n                                      0))))\n          counts)))\n   \
    \   (if (string=? (max-counts (first words)) (max-counts (last words)))\n    \
    \      (first words)\n          (max-counts (first words))))))\n", "  (let ((max-chars\
    \ (make-hashtable)))\n    (for-each (lambda (word)\n                (hashtable-set!\
    \ max-chars (string-hash word))\n                (string-split word \"\")\n  \
    \            words)\n      \"\")\n    (hashtable-ref max-chars \"\")\n  ))\n",
  "  (let ((max-count (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-put!\
    \ max-count (string-length word) word))\n      words))\n  (hashtable-keys max-count)\n\
    )\n", "  (let ((max-count (make-hashtable)))\n    (for-each (lambda (word)\n \
    \               (hashtable-set! max-count\n                  (hashtable-ref max-count\
    \ word)\n                  (hashtable-ref max-count (string-ci-less? word \"a\"\
    ))))\n      words))\n", "  (let ((max-count 0)\n         (max-word \"\"))\n  \
    \  (for-each (lambda (word)\n                (if (string=? word \"\")\n      \
    \              (set! max-count (+ max-count (count word)))\n                 \
    \   (set! max-word word)))\n      words))\n  (if (eq? max-count 0)\n    (error\
    \ \"No words found\")\n    (else\n      (format \"The word with maximum number\
    \ of unique characters is: ~a\"\n           (find_max (sort (list max-word)))))))\n",
  "  (let ((max-count (make-hashtable)))\n    (for-each (lambda (word)\n         \
    \       (hashtable-set! max-count\n                  (hashtable-ref max-count\
    \ word)\n                  (hashtable-ref max-count (string-ci-less? word))))\n\
    \                words))\n  (hashtable-ref max-count (string-ci-less? (hashtable-keys\
    \ max-count))))\n", "  (let ((max-chars (make-hashtable)))\n    (for-each (lambda\
    \ (word)\n      (hashtable-set! max-chars (string-length word) (hashtable-ref\
    \ max-chars word)))\n      words))\n  (hashtable-ref max-chars (car words)))\n\
    \n;; Write a function that accepts a list of strings.\n;; The list contains different\
    \ words. Return the word with maximum number\n;; of unique characters. If multiple\
    \ strings have maximum number of unique\n;; characters, return the one which comes\
    \ first in lexicographical order.\n;; >>> (find_max (list \"name\" \"of\" \"string\"\
    ))\n;; \"string\"\n;; >>> (find_max (list \"name\" \"enam\" \"game\"))\n;; \"\
    enam\"\n;; >>> (find_max (list \"aaaaaaa\" \"bb\" \"cc\"))\n;; \"aaaaaaa\"", " \
    \ (let ((max-chars (make-hashtable)))\n    (for-each (lambda (word)\n        \
    \       (hashtable-set! max-chars (string-hashword word) 1))\n      words))\n\
    \  (let ((max-chars-list (hashtable-keys max-chars)))\n    (if (null? max-chars-list)\n\
    \      (hashtable-ref max-chars (string-length (first words)))\n      (let ((max-chars-list-2\
    \ (hashtable-keys max-chars)))\n        (if (null? max-chars-list-2)\n       \
    \   (hashtable-ref max-chars (string-length (first (cdr max-chars-list))))\n \
    \         (let ((max-chars-list-3 (hashtable-keys max-chars-list-2)))\n      \
    \      (if (null? max-chars-list-3)\n              (hashtable-ref max-chars-list-2\
    \ (string-length (first (cdr max-chars-list-2))))\n              (let ((max-chars-list-4\
    \ (hashtable-keys max-chars-list-3)))\n                (if (null? max-chars-list-4)\n\
    \                  (hashtable-ref max-chars-list-3 (string-length (first (cdr\
    \ max-chars-list-3))))\n                  (let ((max-chars-list-5 (hashtable-keys\
    \ max-chars-list-4)))\n                    (if (null? max-chars-list-5)\n    \
    \                  (hashtable-ref max-chars-list-4 (string-length (first (cdr\
    \ max-chars-list-4))))\n                      (let ((max-chars-list-6 (hashtable-keys\
    \ max-chars-list-5)))\n                        (if (null? max-chars-list-6)\n\
    \                          (hashtable-ref max-chars-list-5 (string-length (first\
    \ (cdr max-chars-list-5))))\n                          (let ((max-chars-list-7\
    \ (hashtable-keys max-chars-list-6)))\n                            (if (null?\
    \ max-chars", "  (let ((max-chars (make-hashtable)))\n    (for-each (lambda (word)\n\
    \                (hashtable-set! max-chars (string-hash word)\n              \
    \                        (string-length word)))\n      words)))\n", "  (let ((max-count\
    \ (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-put! max-count\
    \ (string-length word) word))\n      words))\n  (hashtable-keys max-count)\n)\n",
  "  (let ((max-count (make-hashtable)))\n    (for-each (lambda (word)\n         \
    \      (hashtable-put! max-count (string-length word) word))\n      words))\n\
    \  (hashtable-keys max-count)\n)\n", "  (let ((max-count (make-hashtable)))\n\
    \    (for-each (lambda (word)\n                (hashtable-set! max-count (hashtable-ref\
    \ max-count word)))\n      words))\n  (hashtable-ref max-count (car words)))\n\
    \n;; Write a function that accepts a list of strings.\n;; The list contains different\
    \ words. Return the word with maximum number\n;; of unique characters. If multiple\
    \ strings have maximum number of unique\n;; characters, return the one which comes\
    \ first in lexicographical order.\n;; >>> (find_max_of_words (list \"name\" \"\
    of\" \"string\"))\n;; \"string\"\n;; >>> (find_max_of_words (list \"name\" \"\
    enam\" \"game\"))\n;; \"enam\"\n;; >>> (find_max_of_words (list \"aaaaaaa\" \"\
    bb\" \"cc\"))\n;; \"aaaaaaa\"", "  (let ((max-count (make-hashtable)))\n    (for-each\
    \ (lambda (word)\n               (hashtable-put! max-count (string-length word)\
    \ word))\n      words))\n  (hashtable-ref max-count (string-length (hashtable-keys\
    \ max-count))))\n", "  (let ((max-count (make-hashtable)))\n    (for-each (lambda\
    \ (word)\n      (hashtable-put! max-count (string-length word) word))\n      words))\n\
    \  (let ((max-word (hashtable-keys max-count)))\n    (let ((max-count-word (hashtable-ref\
    \ max-count max-word)))\n      (if (eqv? max-count-word words)\n        max-word\n\
    \        (hashtable-ref max-count max-word))))\n\n;; #lang scheme", "  (let ((max-count\
    \ 0)\n         (max-word \"\"))\n    (for-each (lambda (word)\n              \
    \  (if (string=? word \"\")\n                    (set! max-count (max max-count\
    \ (count word)))\n                    (set! max-word word)))\n      words))\n\
    \  max-word)\n", "  (let ((max-count (make-hashtable)))\n    (for-each (lambda\
    \ (word)\n      (hashtable-set! max-count (string-hash word) 1))\n      words))\n\
    \  (let ((max-word (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-set!\
    \ max-word (string-hash word) word))\n      (hashtable-ref max-count max-word)))\n\
    )\n", "  (let ((max-count (make-hashtable)))\n    (for-each (lambda (word)\n \
    \     (hashtable-put! max-count (string-length word) word))\n      words))\n \
    \ (hashtable-keys max-count)\n)\n", "  (let ((max-count 0)\n         (max-word\
    \ \"\"))\n    (for-each (lambda (word)\n                (if (string=? word \"\"\
    )\n                  (set! max-count (+ max-count (count-chars word)))\n     \
    \             (set! max-word word)))\n          words))\n  (if (eq? max-count\
    \ 0)\n    (error \"No words found\")\n    (max-word)))\n", "  (let ((max-count\
    \ (make-hashtable)))\n    (for-each (lambda (word)\n                (hashtable-set!\
    \ max-count\n                  (hashtable-ref max-count word)\n              \
    \    (hashtable-ref max-count (string-upcase word))))\n                words))\n\
    \  (hashtable-ref max-count (string-upcase (car words))))\n", "  (let ((max-count\
    \ (make-hashtable)))\n    (for-each (lambda (word)\n                (hashtable-set!\
    \ max-count (string-hash word) 1))\n      words))\n  (hashtable-ref max-count\
    \ \"\")\n)\n", "  (let ((max-count (make-hashtable)))\n    (for-each (lambda (word)\n\
    \                (hashtable-set! max-count (hashtable-ref max-count word)))\n\
    \      words))\n  (hashtable-ref max-count (car words)))\n\n;; Write a function\
    \ that accepts a list of strings.\n;; The list contains different words. Return\
    \ the word with maximum number\n;; of unique characters. If multiple strings have\
    \ maximum number of unique\n;; characters, return the one which comes first in\
    \ lexicographical order.\n;; >>> (find_max (list \"name\" \"of\" \"string\"))\n\
    ;; \"string\"\n;; >>> (find_max (list \"name\" \"enam\" \"game\"))\n;; \"enam\"\
    \n;; >>> (find_max (list \"aaaaaaa\" \"bb\" \"cc\"))\n;; \"aaaaaaa\"", "  (let\
    \ ((max-count (make-hashtable)))\n    (for-each (lambda (word)\n             \
    \   (hashtable-put! max-count (string-length word) word))\n      words))\n  (hashtable-keys\
    \ max-count)\n)\n", "  (let ((max-chars (make-hashtable)))\n    (for-each (lambda\
    \ (word)\n                (hashtable-set! max-chars (string-hash word)\n     \
    \                                 (string-length word)))\n      words))\n  (hashtable-ref\
    \ max-chars \"\")\n)\n", "  (let ((max-count 0)\n         (max-word \"\"))\n \
    \   (for-each (lambda (word)\n                (if (string=? word \"\")\n     \
    \               (set! max-count (max max-count word-count word))\n           \
    \         (set! max-word word)))\n      words))\n)\n", "  (let ((max-count (make-hashtable)))\n\
    \    (for-each (lambda (word)\n                (hashtable-put! max-count (string-hash\
    \ word)))\n      words))\n  (let ((max-word (hashtable-keys max-count)))\n   \
    \ (if (hashtable-size max-count)\n      (hashtable-ref max-count max-word)\n \
    \     (hashtable-ref max-count (string-ci-less? (string-upcase max-word)\n   \
    \                                            (string-ci-less? \"zzzzzz\"))))))\n",
  "  (let ((max-count (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-set!\
    \ max-count (hashtable-ref max-count word))\n      words))\n    (hashtable-ref\
    \ max-count (car words))))\n", "  (let ((counts (map (lambda (word) (string-count\
    \ word))))\n         (max-count (reduce (lambda (a b) (if (> b 0) a b)) 0 counts)))\n\
    \    (if (null? words)\n      (if (null? max-count)\n        (error \"No words\
    \ found\")\n        max-count)\n      (if (null? max-count)\n        (first words)\n\
    \        (if (null? (string-ci (first words)))\n          (first words)\n    \
    \      (find_max (cdr words)))))))\n", "  (let ((max-count (make-hashtable)))\n\
    \    (for-each (lambda (word)\n                (hashtable-set! max-count\n   \
    \               (hashtable-ref max-count word)\n                  (hashtable-ref\
    \ max-count (string-ci-less? word))))\n               words))\n  (hashtable-ref\
    \ max-count (string-ci-less? (hashtable-keys max-count))))\n", "  (let ((max-count\
    \ (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-put! max-count\
    \ (string-length word) word))\n      words))\n  (hashtable-keys max-count)\n)\n",
  "  (let ((max-chars (make-hashtable)))\n    (for-each (lambda (word)\n         \
    \       (hashtable-set! max-chars (string-hash word)\n                       \
    \               (string-length word)))\n      words))\n  (hashtable-ref max-chars\
    \ \"\")\n)\n", "  (let ((max-count (make-hashtable)))\n    (for-each (lambda (word)\n\
    \               (hashtable-put! max-count (string-length word) word))\n      words))\n\
    \  (hashtable-ref max-count (string-length (hashtable-keys max-count))))\n", " \
    \ (let ((max-count (make-hashtable)))\n    (for-each (lambda (word)\n        \
    \       (hashtable-set! max-count (string-hash word) 1))\n      words))\n  (let\
    \ ((max-word (make-hashtable)))\n    (for-each (lambda (word)\n              \
    \ (hashtable-set! max-word (string-hash word) word))\n      (hashtable-ref max-count\
    \ max-word)))\n)\n", "  (let ((max-count (make-hashtable)))\n    (for-each (lambda\
    \ (word)\n      (hashtable-put! max-count (string-length word) word))\n      words))\n\
    \  (hashtable-keys max-count)\n)\n", "  (let ((max-chars (make-hashtable)))\n\
    \    (for-each (lambda (word)\n                (hashtable-set! max-chars (string-hash\
    \ word)\n                                      (string-length word)))\n      words))\n\
    \  (hashtable-ref max-chars \"\")\n)\n", "  (let ((max-chars (make-hashtable)))\n\
    \    (for-each (lambda (word)\n      (hashtable-set! max-chars (string-length\
    \ word) (string-length word)))\n      words))\n  (let ((max-word (make-hashtable)))\n\
    \    (for-each (lambda (word)\n      (hashtable-set! max-word (string-length word)\
    \ word))\n      words))\n  (let ((max-word-count (make-hashtable)))\n    (for-each\
    \ (lambda (word)\n      (hashtable-set! max-word-count (string-length word) 1))\n\
    \      words))\n  (let ((max-word-count-index (make-hashtable)))\n    (for-each\
    \ (lambda (word)\n      (hashtable-set! max-word-count-index (string-length word)\
    \ 1))\n      words))\n  (let ((max-word-count-value (make-hashtable)))\n    (for-each\
    \ (lambda (word)\n      (hashtable-set! max-word-count-value (string-length word)\
    \ 1))\n      words))\n  (let ((max-word-count-value-index (make-hashtable)))\n\
    \    (for-each (lambda (word)\n      (hashtable-set! max-word-count-value-index\
    \ (string-length word) 1))\n      words))\n  (let ((max-word-count-value-value\
    \ (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-set! max-word-count-value-value\
    \ (string-length word) 1))\n      words))\n  (let ((max-word-count-value-value-index\
    \ (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-set! max-word-count-value-value-index\
    \ (string-length word) 1))\n      words))\n  (let ((max-word-count-value-value-value\
    \ (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-set! max-word-count-value-value-value\
    \ (string-length word) 1))\n      words", "  (let ((max-count (make-hashtable)))\n\
    \    (for-each (lambda (word)\n                (hashtable-set! max-count (string-hash\
    \ word) 1))\n      words))\n  (let ((max-word (make-hashtable)))\n    (for-each\
    \ (lambda (word)\n                (hashtable-set! max-word (string-hash word)\
    \ word))\n      (hashtable-ref max-count max-word)))\n)\n", "  (let ((max-count\
    \ (make-hashtable)))\n    (for-each (lambda (word)\n               (hashtable-set!\
    \ max-count\n                 (hashtable-ref max-count word)\n               \
    \  (hashtable-ref max-count (string-upcase word))))\n             words))\n  (hashtable-ref\
    \ max-count (string-upcase (car words))))\n\n;; #lang scheme", "  (let ((max-count\
    \ (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-put! max-count\
    \ (string-length word) word))\n      words))\n  (hashtable-keys max-count)\n)\n",
  "  (let ((max-count (make-hashtable)))\n    (for-each (lambda (word)\n         \
    \       (hashtable-set! max-count (hashtable-ref max-count word))\n          \
    \      (hashtable-ref max-count word))\n      words))\n)\n", "  (let ((max-count\
    \ (make-hashtable)))\n    (for-each (lambda (word)\n      (hashtable-set! max-count\
    \ (hashtable-ref max-count word)))\n      words))\n  (hashtable-ref max-count\
    \ (car words)))\n\n;; Write a function that accepts a list of strings.\n;; The\
    \ list contains different words. Return the word with maximum number\n;; of unique\
    \ characters. If multiple strings have maximum number of unique\n;; characters,\
    \ return the one which comes first in lexicographical order.\n;; >>> (find_max\
    \ (list \"name\" \"of\" \"string\"))\n;; \"string\"\n;; >>> (find_max (list \"\
    name\" \"enam\" \"game\"))\n;; \"enam\"\n;; >>> (find_max (list \"aaaaaaa\" \"\
    bb\" \"cc\"))\n;; \"aaaaaaa\"", "  (let ((max-count (make-hashtable)))\n    (for-each\
    \ (lambda (word)\n                (hashtable-put! max-count (string-hash word)))\n\
    \      words))\n  (hashtable-keys max-count)\n)\n", "  (let ((max-count 0)\n \
    \        (max-word \"\"))\n    (for-each (lambda (word)\n                (if (string=?\
    \ word \"\")\n                  (set! max-count (+ max-count (count word)))\n\
    \                  (set! max-word word)))\n      words))\n  max-word)\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
