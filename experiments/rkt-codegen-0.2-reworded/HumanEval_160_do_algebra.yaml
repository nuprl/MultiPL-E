name: HumanEval_160_do_algebra
language: rkt
prompt: "#lang racket\n\n;; Given two lists operator, and operand. The first list\
  \ has basic algebra operations, and \n;; the second list is a list of integers.\
  \ Use the two given lists to build the algebric \n;; expression and return the evaluation\
  \ of this expression.\n;; The basic algebra operations:\n;; Addition ( + ) \n;;\
  \ Subtraction ( - ) \n;; Multiplication ( * ) \n;; Floor division ( // ) \n;; Exponentiation\
  \ ( ** ) \n;; Example:\n;; operator['+', '*', '-']\n;; list = [2, 3, 4, 5]\n;; result\
  \ = 2 + 3 * 4 - 5\n;; => result = 9\n;; Note:\n;; The length of operator list is\
  \ equal to the length of operand list minus one.\n;; Operand is a list of of non-negative\
  \ integers.\n;; Operator list has at least one operator, and operand list has at\
  \ least two operands.\n(define (do_algebra operator operand)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate do_algebra))\n\
  \    (check-equal? (candidate (list \"**\" \"*\" \"+\") (list 2 3 4 5)) 37)\n  \
  \  (check-equal? (candidate (list \"+\" \"*\" \"-\") (list 2 3 4 5)) 9)\n    (check-equal?\
  \ (candidate (list \"//\" \"*\") (list 7 3 4)) 8)\n))\n\n(test-humaneval)"
completions: ["  (let ((result 0))\n    (for-each (lambda (op)\n                (if\
    \ (eq op '+)\n                  (+ result operand)\n                  (if (eq\
    \ op '-)\n                    (+ result (- operand result))\n                \
    \    (if (eq op '*)\n                      (+ result (- operand result))\n   \
    \                   (if (eq op '//)\n                        (+ result (/ operand\
    \ result))\n                        (if (eq op '**)\n                        \
    \  (+ result (pow operand result))))))))\n      operator))\n", "  (if (null? operator)\n\
    \    (print \"Error: Operator list is empty!\")\n    (if (null? operand)\n   \
    \   (print \"Error: Operand list is empty!\")\n      (print \"Error: Operator\
    \ list and operand list are both empty!\"))\n    (print \"Error: Operator list\
    \ and operand list are both empty!\"))\n  (if (null? operand)\n    (print \"Error:\
    \ Operand list is empty!\")\n    (print \"Error: Operator list and operand list\
    \ are both empty!\"))\n  (if (null? operator)\n    (print \"Error: Operator list\
    \ is empty!\")\n    (print \"Error: Operator list and operand list are both empty!\"\
    ))\n  (if (null? operand)\n    (print \"Error: Operand list is empty!\")\n   \
    \ (print \"Error: Operator list and operand list are both empty!\"))\n  (if (null?\
    \ operand)\n    (print \"Error: Operand list is empty!\")\n    (print \"Error:\
    \ Operator list and operand list are both empty!\"))\n  (if (null? operator)\n\
    \    (print \"Error: Operator list is empty!\")\n    (print \"Error: Operator\
    \ list and operand list are both empty!\"))\n  (if (null? operand)\n    (print\
    \ \"Error: Operand list is empty!\")\n    (print \"Error: Operator list and operand\
    \ list are both empty!\"))\n  (if (null? operand)\n    (print \"Error: Operand\
    \ list is empty!\")\n    (print \"Error: Operator list and operand list are both\
    \ empty!\"))\n  (if (null? operand)\n    (print \"Error: Operand list is empty!\"\
    )\n    (print \"Error: Operator list and operand list are both empty!\"))\n  (if\
    \ (null? operand)\n    (print \"Error: Operand list is empty!\")\n    (print \"\
    Error: Operator list and operand list are both empty!\"))\n  (if (null? operand)\n\
    \    (print \"Error: Operand list is empty!\")\n    (print \"Error: Operator list\
    \ and operand list are both empty!\"))\n  (if (null? operand)\n    (print \"",
  "  (if (null? operand)\n    (+ operator)\n    (if (null? operator)\n      operand\n\
    \      (do_algebra (cdr operator) (car operator) (car operand)))))\n", "  (let\
    \ ((result 0))\n    (for-each (lambda (op)\n      (if (eq op '+)\n        (+ result\
    \ operand)\n        (if (eq op '-)\n          (+ result (- operand result))\n\
    \          (if (eq op '*)\n            (+ result (- result operand))\n       \
    \     (if (eq op '//)\n              (+ result (/ operand result))\n         \
    \     (if (eq op '**)\n                (+ result (** operand result))))))))\n\
    \    (+ result result)))\n\n;; Test cases:\n;; (do_algebra ['+', '*', '-'] [2,\
    \ 3, 4, 5])\n;; (do_algebra ['+', '*', '-'] [2, 3, 4, 5, 6])\n;; (do_algebra ['+',\
    \ '*', '-'] [2, 3, 4, 5, 6, 7])\n;; (do_algebra ['+', '*', '-'] [2, 3, 4, 5, 6,\
    \ 7, 8])\n;; (do_algebra ['+', '*', '-'] [2, 3, 4, 5, 6, 7, 8, 9])\n;; (do_algebra\
    \ ['+', '*', '-'] [2, 3, 4, 5, 6, 7, 8, 9, 10])\n;; (do_algebra ['+', '*', '-']\
    \ [2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n;; (do_algebra ['+', '*', '-'] [2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12])\n;; (do_algebra ['+', '*', '-'] [2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13])\n;; (do_algebra ['+', '*', '-'] [2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14])\n;; (do_algebra ['+', '*', '-'] [2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13,", "  (define (do_operation oprnd1 oprnd2)\n    (if (eq?\
    \ oprnd1 oprnd2)\n      (+ oprnd1 oprnd2)\n      (if (eq? oprnd1 '+)\n       \
    \ (do_operation oprnd1 oprnd2)\n        (if (eq? oprnd1 '-)\n          (do_operation\
    \ oprnd1 oprnd2)\n          (if (eq? oprnd1 '*)\n            (do_operation oprnd1\
    \ oprnd2)\n            (if (eq? oprnd1 '//)\n              (do_operation oprnd1\
    \ oprnd2)\n              (if (eq? oprnd1 '**)\n                (do_operation oprnd1\
    \ oprnd2)\n                (error \"Invalid operator\"))))))))))\n  (if (empty?\
    \ operator)\n    (error \"Invalid operator list\")\n  (if (empty? operand)\n \
    \   (error \"Invalid operand list\")\n  (do_operation operator operand))\n)\n",
  "  (if (null? operator)\n    (print \"Error: Operator list is empty.\")\n    (if\
    \ (null? operand)\n      (print \"Error: Operand list is empty.\")\n      (print\
    \ \"Error: Operator list and operand list are both empty.\")\n      (exit)))\n\
    \  (if (null? operand)\n    (print \"Error: Operand list is empty.\")\n    (print\
    \ \"Error: Operator list and operand list are both empty.\")\n    (exit))\n  (if\
    \ (null? operator)\n    (print \"Error: Operator list is empty.\")\n    (exit))\n\
    \  (if (null? operand)\n    (print \"Error: Operand list is empty.\")\n    (exit))\n\
    \  (if (null? operand)\n    (print \"Error: Operator list and operand list are\
    \ both empty.\")\n    (exit))\n  (if (null? operand)\n    (print \"Error: Operand\
    \ list is empty.\")\n    (exit))\n  (if (null? operand)\n    (print \"Error: Operator\
    \ list and operand list are both empty.\")\n    (exit))\n  (if (null? operand)\n\
    \    (print \"Error: Operator list and operand list are both empty.\")\n    (exit))\n\
    \  (if (null? operand)\n    (print \"Error: Operator list and operand list are\
    \ both empty.\")\n    (exit))\n  (if (null? operand)\n    (print \"Error: Operator\
    \ list and operand list are both empty.\")\n    (exit))\n  (if (null? operand)\n\
    \    (print \"Error: Operator list and operand list are both empty.\")\n    (exit))\n\
    \  (if (null? operand)\n    (print \"Error: Operator list and operand list are\
    \ both empty.\")\n    (exit))\n  (if (null? operand)\n    (print \"Error: Operator\
    \ list and operand list are both empty.\")\n    (exit))\n  (if (null? operand)\n\
    \    (print \"Error: Operator list and operand list are both empty.\")\n    (exit))\n\
    \  (if (null? operand)\n    (print \"Error: Operator list and operand list are\
    \ both empty.\")\n    (exit))", "  (let ((result 0))\n    (for-each (lambda (x)\n\
    \                (let ((op (car operator)))\n                  (let ((operand\
    \ (cdr operator)))\n                    (if (eq op '+)\n                     \
    \   (+ result (car operand)))\n                    (if (eq op '-)\n          \
    \              (+ result (- (car operand) result)))\n                    (if (eq\
    \ op '*)\n                        (+ result (* result (car operand)))\n      \
    \              (if (eq op '//)\n                        (+ result (/ (car operand)\
    \ result)))\n                    (if (eq op '**)\n                        (+ result\
    \ (* result (car operand)))\n                    (if (eq op '<')\n           \
    \             (< result (car operand)))\n                    (if (eq op '>')\n\
    \                        (> result (car operand)))\n                    (if (eq\
    \ op '<=')\n                        (<= result (car operand)))\n             \
    \       (if (eq op '>=')\n                        (>= result (car operand)))\n\
    \                    (if (eq op '=')\n                        (= result (car operand)))\n\
    \                    (if (eq op '<>')\n                        (<> result (car\
    \ operand)))\n                    (if (eq op 'and')\n                        (and\
    \ result (car operand)))\n                    (if (eq op 'or')\n             \
    \           (or result (car operand)))\n                    (if (eq op 'not')\n\
    \                        (not result (car operand))))))))\n                (car\
    \ operator))\n              (cdr operator))\n    (+ result)))\n", "  (let ((result\
    \ 0))\n    (for-each (lambda (x)\n                (let ((op (car operator)))\n\
    \                  (let ((operand (cdr operator)))\n                    (if (null\
    \ operand)\n                      (result result)\n                      (if (null\
    \ op)\n                        (result operand)\n                        (result\
    \ (eval op operand)))))))\n      operand))\n)\n", "  (if (null? operator)\n  \
    \  (+ operand)\n    (let ((op (car operator)))\n      (if (null? (cdr operator))\n\
    \        (+ (do_algebra (cdr operator) (car operand)))\n        (let ((op2 (car\
    \ (cdr operator))))\n          (if (null? (cdr (cdr operator)))\n            (+\
    \ (do_algebra (cdr (cdr operator)) (car operand)))\n            (let ((op3 (car\
    \ (cdr (cdr (cdr operator)))))\n              (+ (do_algebra (cdr (cdr (cdr (cdr\
    \ operator)))) (car operand))))\n              (if (null? (cdr (cdr (cdr (cdr\
    \ (cdr operator))))))\n                (+ (do_algebra (cdr (cdr (cdr (cdr (cdr\
    \ (cdr operator)))))) (car operand)))\n                (+ (do_algebra (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr operator)))))) (car operand)))))))\n          (+ (do_algebra\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr operator)))))) (car operand)))))))\n  ))\n\
    )\n", "  (if (null? operand)\n    (+ operator)\n    (let ((result (car operand)))\n\
    \      (if (null? (cdr operand))\n        (+ result operator)\n        (do_algebra\
    \ (cdr operator) (cdr operand))\n      )\n    )\n  )\n)\n", "  (let ((result 0))\n\
    \    (for-each (lambda (op)\n      (if (eq op '+)\n        (+ result (do_algebra\
    \ operator (cdr operand))))\n      (if (eq op '-)\n        (+ result (- (do_algebra\
    \ operator (cdr operand))))\n      (if (eq op '*)\n        (+ result (* result\
    \ (do_algebra operator (cdr operand))))\n      (if (eq op '//)\n        (+ result\
    \ (/ result (do_algebra operator (cdr operand))))\n      (if (eq op '**)\n   \
    \     (+ result (** result (do_algebra operator (cdr operand))))\n      (if (eq\
    \ op '<')\n        (< result (do_algebra operator (cdr operand))))\n      (if\
    \ (eq op '>')\n        (> result (do_algebra operator (cdr operand))))\n     \
    \ (if (eq op '<=')\n        (<= result (do_algebra operator (cdr operand))))\n\
    \      (if (eq op '>=')\n        (>= result (do_algebra operator (cdr operand))))\n\
    \      (if (eq op '=')\n        (= result (do_algebra operator (cdr operand))))\n\
    \      (if (eq op '!=')\n        (not (= result (do_algebra operator (cdr operand))))))))))\n\
    \  result))\n", "  (let ((result 0))\n    (for-each (lambda (op)\n      (if (eq\
    \ op '+)\n        (+ result operand)\n        (if (eq op '-)\n          (+ result\
    \ (- operand result))\n          (if (eq op '*)\n            (+ result (- result\
    \ operand))\n            (if (eq op '//)\n              (+ result (/ operand result))\n\
    \              (if (eq op '**)\n                (+ result (** operand result))))))))\n\
    \    (+ result result)))\n", "  (define (do_operation op1 op2)\n    (if (eq? op1\
    \ op2)\n      1\n      (if (eq? op1 '+)\n        (do_operation op2 op1)\n    \
    \    (do_operation op1 op2))\n      (if (eq? op1 '-)\n        (do_operation op2\
    \ op1)\n        (do_operation op1 op2))\n      (if (eq? op1 '*)\n        (do_operation\
    \ op2 op1)\n        (do_operation op1 op2))\n      (if (eq? op1 '//')\n      \
    \  (do_operation op2 op1)\n        (do_operation op1 op2))\n      (if (eq? op1\
    \ '**')\n        (do_operation op2 op1)\n        (do_operation op1 op2))\n   \
    \   (error \"Invalid operator\"))))\n  (if (empty? operator)\n    (error \"Operator\
    \ list is empty\")\n  (if (empty? operand)\n    (error \"Operand list is empty\"\
    )\n  (if (null? (car operator))\n    (error \"Operator list is empty\")\n  (if\
    \ (null? (car operand))\n    (error \"Operand list is empty\")\n  (if (null? (car\
    \ (cdr operator)))\n    (error \"Operator list is empty\")\n  (if (null? (car\
    \ (cdr operand)))\n    (error \"Operand list is empty\")\n  (do_operation (car\
    \ operator) (car operand))\n  (do_operation (car (cdr operator)) (car (cdr operand)))\n\
    \  (do_operation (car (cdr (cdr operator))) (car (cdr (cdr operand))))\n  (do_operation\
    \ (car (cdr (cdr (cdr operator)))) (car (cdr (cdr (cdr operand))))))))\n", " \
    \ (if (null? operator)\n    (+ operand)\n    (let ((op (car operator)))\n    \
    \  (if (null? (cdr operator))\n        (+ (do_algebra (cdr operator) (car operand)))\n\
    \        (let ((op2 (car (cdr operator))))\n          (if (null? (cdr (cdr operator)))\n\
    \            (+ (do_algebra (cdr (cdr operator)) (car operand)))\n           \
    \ (let ((op3 (car (cdr (cdr (cdr operator)))))\n              (+ (do_algebra (cdr\
    \ (cdr (cdr (cdr operator)))) (car operand))\n                 (do_algebra (cdr\
    \ (cdr (cdr (cdr (cdr operator)))) (car operand)))))\n              (+ (do_algebra\
    \ (cdr (cdr (cdr (cdr (cdr (cdr operator)))))) (car operand))\n              \
    \   (do_algebra (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (c", "  (let ((result 0))\n    (for-each (lambda (op)\n      (if (eq op\
    \ '+)\n        (+ result operand)\n        (if (eq op '-)\n          (+ result\
    \ (- operand result))\n          (if (eq op '*)\n            (+ result (- result\
    \ operand))\n            (if (eq op '//)\n              (+ result (/ operand result))\n\
    \              (if (eq op '**)\n                (+ result (** operand result))))))))\n\
    \    result))\n)\n", "  (if (null? operator)\n    (+ operand)\n    (let ((op (car\
    \ operator)))\n      (if (eq? op '+)\n        (+ (do_algebra (cdr operator)) (car\
    \ operand))\n        (if (eq? op '-)\n          (+ (do_algebra (cdr operator))\
    \ (car operand))\n          (if (eq? op '*)\n            (+ (do_algebra (cdr operator))\
    \ (car operand))\n            (if (eq? op '//)\n              (do_algebra (cdr\
    \ operator))\n              (if (eq? op '**)\n                (do_algebra (cdr\
    \ operator))\n                (do_algebra (cdr operand))))))))))\n)\n", "  (define\
    \ (algebra_op op1 op2)\n    (if (eq op1 op2)\n      1\n      (if (eq op1 '+)\n\
    \        (+ op1 op2)\n        (if (eq op1 '-)\n          (-(op1 op2))\n      \
    \    (if (eq op1 '*)\n            (* op1 op2)\n            (if (eq op1 '//)\n\
    \              (/ op1 op2)\n              (if (eq op1 '**)\n                (**\
    \ op1 op2)\n                (error \"Invalid operator\"))))))))\n  (if (null?\
    \ operator)\n    (error \"Invalid operand\")\n    (if (null? operand)\n      (error\
    \ \"Invalid operand\")\n      (if (null? (cdr operand))\n        (error \"Invalid\
    \ operand\")\n        (if (null? (cdr (cdr operand)))\n          (error \"Invalid\
    \ operand\")\n          (if (null? (cdr (cdr (cdr operand))))\n            (error\
    \ \"Invalid operand\")\n            (if (null? (cdr (cdr (cdr (cdr operand))))))\n\
    \              (error \"Invalid operand\")\n              (algebra_op (car operator)\
    \ (car (cdr operand)))\n              (algebra_op (car (cdr operator)) (car (cdr\
    \ operand)))\n              (algebra_op (car (cdr (cdr operator))) (car (cdr operand)))\n\
    \              (algebra_op (car (cdr (cdr (cdr operator)))) (car (cdr operand))))))))\n\
    \  (if (null? (cdr operator))\n    (error \"Invalid operator\")\n    (if (null?\
    \ (cdr operand))\n      (error \"Invalid operand\")\n      (if (null? (cdr (cdr\
    \ operand)))\n        (error \"Invalid operand\")\n        (if (null? (cdr (cdr\
    \ (cdr operand))))\n          (error \"Invalid operand\")\n          (if (null?\
    \ (cdr (cdr (cdr (cdr operand))))))\n            (error \"Invalid operand\")\n\
    \            (if (null? (c", "  (if (null? operand)\n    (+ operator)\n    (do_algebra\
    \ (cdr operator) (car operand))\n  )\n)\n", "  (define (algebra_op operand)\n\
    \    (if (null? operand)\n      (+ operand)\n      (if (null? operand)\n     \
    \   (+ operand)\n        (if (null? operand)\n          (+ operand)\n        \
    \  (if (null? operand)\n            (+ operand)\n            (if (null? operand)\n\
    \              (+ operand)\n              (if (null? operand)\n              \
    \  (+ operand)\n                (if (null? operand)\n                  (+ operand)\n\
    \                  (if (null? operand)\n                    (+ operand)\n    \
    \                (if (null? operand)\n                      (+ operand)\n    \
    \                  (if (null? operand)\n                        (+ operand)\n\
    \                        (if (null? operand)\n                          (+ operand)\n\
    \                          (if (null? operand)\n                            (+\
    \ operand)\n                            (if (null? operand)\n                \
    \              (+ operand)\n                              (if (null? operand)\n\
    \                                (+ operand)\n                               \
    \ (if (null? operand)\n                                  (+ operand)\n       \
    \                           (if (null? operand)\n                            \
    \        (+ operand)\n                                    (if (null? operand)\n\
    \                                      (+ operand)\n                         \
    \             (if (null? operand)\n                                        (+\
    \ operand)\n                                        (if (null? operand)\n    \
    \                                      (+ operand)\n                         \
    \                 (if (null? operand)\n                                      \
    \      (+ operand)\n                                            (if (null? operand)\n\
    \                                              (+ operand)\n                 \
    \                             (if (null? operand)\n                          \
    \                      (+ operand)\n                                         \
    \       (if (null? operand)\n                                                \
    \  (+ operand)\n                                                  (if (null? operand)\n\
    \                                                    (+ operand)\n           \
    \                                         (if (null? operand)\n              \
    \                                        (+ operand)\n                       \
    \                               (if (null? operand", "  (let ((result 0))\n  \
    \  (for-each (lambda (x)\n                (let ((op (car operator)))\n       \
    \           (let ((operand (cdr operator)))\n                    (if (eq op '+)\n\
    \                        (+ result (car operand)))\n                      (if\
    \ (eq op '-)\n                        (+ result (- (car operand) result)))\n \
    \                     (if (eq op '*)\n                        (+ result (* (car\
    \ operand) result)))\n                      (if (eq op '//)\n                \
    \        (+ result (/ (car operand) result)))\n                      (if (eq op\
    \ '**)\n                        (+ result (* result (car operand)))))))\n    \
    \          operand))\n    result))\n", "  (define (calc_op op1 op2)\n    (if (eq\
    \ op1 op2)\n      1\n      (if (eq op1 '+)\n        (+ op1 op2)\n        (if (eq\
    \ op1 '-)\n          (-(op1 op2))\n          (if (eq op1 '*)\n            (* op1\
    \ op2)\n            (if (eq op1 '//)\n              (/ op1 op2)\n            \
    \  (if (eq op1 '**)\n                (** op1 op2)\n                (error \"Invalid\
    \ operator\"))))))))))\n  (define (calc_list)\n    (if (null? operand)\n     \
    \ (error \"Operand list is empty\")\n    (if (null? operator)\n      (error \"\
    Operator list is empty\")\n    (if (null? (cdr operand))\n      (error \"Operand\
    \ list has only one element\")\n    (if (null? (cdr operator))\n      (error \"\
    Operator list has only one element\")\n    (if (null? (cdr (cdr operand)))\n \
    \     (error \"Operand list has only two elements\")\n    (if (null? (cdr (cdr\
    \ operator)))\n      (error \"Operator list has only two elements\")\n    (if\
    \ (null? (cdr (cdr (cdr operand))))\n      (error \"Operand list has only three\
    \ elements\")\n    (if (null? (cdr (cdr (cdr operator))))\n      (error \"Operator\
    \ list has only three elements\")\n    (if (null? (cdr (cdr (cdr (cdr operand))))))\n\
    \      (error \"Operand list has only four elements\")\n    (if (null? (cdr (cdr\
    \ (cdr (cdr (cdr operator))))))\n      (error \"Operator list has only four elements\"\
    )\n    (let ((op1 (car operator)))\n      (let ((op2 (car (cdr operator))))\n\
    \        (calc_op op1 op2)))\n    (let ((op1 (car (cdr operand))))\n      (let\
    \ ((op2 (car (cdr (cdr operand))))\n        (calc_op op", "  (if (null? operator)\n\
    \    (print \"Error: No operator!\")\n    (if (null? operand)\n      (print \"\
    Error: No operand!\")\n      (print \"Error: Operator list is empty!\")\n    \
    \  (print \"Error: Operand list is empty!\")\n      (print \"Error: Operator list\
    \ is empty!\")\n      (print \"Error: Operand list is empty!\")\n      (print\
    \ \"Error: Operator list is empty!\")\n      (print \"Error: Operand list is empty!\"\
    )\n      (print \"Error: Operator list is empty!\")\n      (print \"Error: Operand\
    \ list is empty!\")\n      (print \"Error: Operator list is empty!\")\n      (print\
    \ \"Error: Operand list is empty!\")\n      (print \"Error: Operator list is empty!\"\
    )\n      (print \"Error: Operand list is empty!\")\n      (print \"Error: Operator\
    \ list is empty!\")\n      (print \"Error: Operand list is empty!\")\n      (print\
    \ \"Error: Operator list is empty!\")\n      (print \"Error: Operand list is empty!\"\
    )\n      (print \"Error: Operator list is empty!\")\n      (print \"Error: Operand\
    \ list is empty!\")\n      (print \"Error: Operator list is empty!\")\n      (print\
    \ \"Error: Operand list is empty!\")\n      (print \"Error: Operator list is empty!\"\
    )\n      (print \"Error: Operand list is empty!\")\n      (print \"Error: Operator\
    \ list is empty!\")\n      (print \"Error: Operand list is empty!\")\n      (print\
    \ \"Error: Operator list is empty!\")\n      (print \"Error: Operand list is empty!\"\
    )\n      (print \"Error: Operator list is empty!\")\n      (print \"Error: Operand\
    \ list is empty!\")\n      (print \"Error: Operator list is empty!\")\n      (print\
    \ \"Error: Operand list is empty!\")\n      (print \"Error: Operator list is empty!\"\
    )\n      (print \"Error: Operand list is empty!\")\n      (print \"Error: Operator\
    \ list is empty!\")\n      (print \"Error: Operand list is empty!\")\n      (print\
    \ \"Error: Operator list is empty!\"", "  (let ((result 0))\n    (for-each (lambda\
    \ (op)\n      (if (eq op '+)\n        (+ result (do_algebra operator (cdr operand))))\n\
    \      (if (eq op '-)\n        (+ result (- (do_algebra operator (cdr operand))))\n\
    \      (if (eq op '*)\n        (+ result (* result (do_algebra operator (cdr operand))))\n\
    \      (if (eq op '//)\n        (+ result (/ result (do_algebra operator (cdr\
    \ operand))))\n      (if (eq op '**)\n        (+ result (* result (do_algebra\
    \ operator (cdr operand))))\n      )))\n    (return result)\n    ))\n)\n", " \
    \ (if (null? operator)\n    (+ operand)\n    (let ((op (car operator)))\n    \
    \  (if (null? (cdr operator))\n        (+ (do_algebra (cdr operator) (car operand)))\n\
    \        (let ((op2 (car (cdr operator))))\n          (if (null? (cdr (cdr operator)))\n\
    \            (+ (do_algebra (cdr (cdr operator)) (car operand)))\n           \
    \ (let ((op3 (car (cdr (cdr (cdr operator)))))\n              (+ (do_algebra (cdr\
    \ (cdr (cdr (cdr operator)))) (car operand))\n                 (do_algebra (cdr\
    \ (cdr (cdr (cdr (cdr operator)))) (car operand)))))\n            (+ (do_algebra\
    \ (cdr (cdr (cdr (cdr (cdr (cdr operator)))))) (car operand)))))\n      (+ (do_algebra\
    \ (cdr (cdr operator)) (car operand)))))\n  (+ (car operand)))))\n", "  (if (null?\
    \ operator)\n    (print \"Operator list is empty!\")\n    (print \"Operator list:\
    \ \")\n    (print operator)\n    (print \"Operand list: \")\n    (print operand)\n\
    \    (print \"Result: \")\n    (print (apply operator operand)))\n  (if (null?\
    \ operand)\n    (print \"Operand list is empty!\")\n    (print \"Operator list:\
    \ \")\n    (print operator)\n    (print \"Operand list: \")\n    (print operand)\n\
    \    (print \"Result: \")\n    (print (apply operator operand)))\n  (if (null?\
    \ operator)\n    (print \"Operator list is empty!\")\n    (print \"Operator list:\
    \ \")\n    (print operator)\n    (print \"Operand list: \")\n    (print operand)\n\
    \    (print \"Result: \")\n    (print (apply operator operand)))\n  (if (null?\
    \ operand)\n    (print \"Operator list is empty!\")\n    (print \"Operator list:\
    \ \")\n    (print operator)\n    (print \"Operand list: \")\n    (print operand)\n\
    \    (print \"Result: \")\n    (print (apply operator operand)))\n  (if (null?\
    \ operator)\n    (print \"Operator list is empty!\")\n    (print \"Operator list:\
    \ \")\n    (print operator)\n    (print \"Operand list: \")\n    (print operand)\n\
    \    (print \"Result: \")\n    (print (apply operator operand)))\n  (if (null?\
    \ operand)\n    (print \"Operator list is empty!\")\n    (print \"Operator list:\
    \ \")\n    (print operator)\n    (print \"Operand list: \")\n    (print operand)\n\
    \    (print \"Result: \")\n    (print (apply operator operand)))\n  (if (null?\
    \ operator)\n    (print \"Operator list is empty!\")\n    (print \"Operator list:\
    \ \")\n    (print operator)\n    (print \"Operand list: \")\n    (print operand)\n\
    \    (print", "  (if (null? operator)\n    (print \"Error: Operator list is empty.\"\
    )\n    (if (null? operand)\n      (print \"Error: Operand list is empty.\")\n\
    \      (print \"Error: Operator list and operand list are both empty.\")\n   \
    \   (print \"Error: Operator list and operand list are both empty.\")))\n  (if\
    \ (null? operand)\n    (print \"Error: Operand list is empty.\")\n    (print \"\
    Error: Operator list and operand list are both empty.\")))\n", "  (let ((result\
    \ 0))\n    (for-each (lambda (x)\n                (let ((op (car operator)))\n\
    \                  (let ((operand (cdr operator)))\n                    (if (eq\
    \ op '+)\n                        (+ result (car operand)))\n                \
    \    (if (eq op '-)\n                        (+ result (- (car operand) result)))\n\
    \                    (if (eq op '*)\n                        (+ result (* result\
    \ (car operand)))\n                    (if (eq op '//)\n                     \
    \   (+ result (/ (car operand) result)))\n                    (if (eq op '**)\n\
    \                        (+ result (* result (car operand)))\n               \
    \     (if (eq op '**)\n                        (+ result (* result (car operand)))\n\
    \                    (if (eq op '**)\n                        (+ result (* result\
    \ (car operand)))\n                    (if (eq op '**)\n                     \
    \   (+ result (* result (car operand)))\n                    (if (eq op '**)\n\
    \                        (+ result (* result (car operand)))\n               \
    \     (if (eq op '**)\n                        (+ result (* result (car operand)))\n\
    \                    (if (eq op '**)\n                        (+ result (* result\
    \ (car operand)))\n                    (if (eq op '**)\n                     \
    \   (+ result (* result (car operand)))\n                    (if (eq op '**)\n\
    \                        (+ result (* result (car operand)))\n               \
    \     (if (eq op '**)\n                        (+ result (* result (car operand)))\n\
    \                    (if (eq op '**)\n                        (+ result (* result\
    \ (car operand)))\n                    (if (eq op '**)\n                     \
    \   (+ result (* result (car operand)))\n                    (if (eq op '**)\n\
    \                        (+ result (* result (car operand)))\n               \
    \     (if (eq op '**)\n                        (+ result (* result (car operand)))\n\
    \                    (if (eq op '**)\n                        (+ result (* result\
    \ (car operand)))\n                    (if (eq op '**)\n                     \
    \   (+ result (* result (car operand)))\n                    (if (eq op '**)\n\
    \                        (+ result (* result (car operand)))\n               \
    \     (if (eq op '**)", "  (let ((result 0))\n    (for-each (lambda (op)\n   \
    \   (if (eq op '+)\n        (+ result operand)\n        (if (eq op '-)\n     \
    \     (+ result (- operand result))\n          (if (eq op '*)\n            (+\
    \ result (- result operand))\n            (if (eq op '//)\n              (+ result\
    \ (/ operand result))\n              (if (eq op '**)\n                (+ result\
    \ (** operand result))))))))\n    (+ result result)))\n)\n", "  (if (null? operator)\n\
    \    (+ operand)\n    (let ((op (car operator)))\n      (if (null? (cdr operator))\n\
    \        (+ (do_algebra (cdr operator) (car operand)))\n        (let ((op2 (car\
    \ (cdr operator))))\n          (if (null? (cdr (cdr operator)))\n            (+\
    \ (do_algebra (cdr (cdr operator)) (car operand)))\n            (let ((op3 (car\
    \ (cdr (cdr (cdr operator)))))\n              (+ (do_algebra (cdr (cdr (cdr (cdr\
    \ operator)))) (car operand))))\n              (+ (do_algebra (cdr (cdr (cdr (cdr\
    \ (cdr operator)))) (car operand))))\n              (+ (do_algebra (cdr (cdr (cdr\
    \ (cdr (cdr (cdr operator)))))) (car operand))))\n            (+ (do_algebra (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr operator)))))) (car operand))))\n            (+\
    \ (do_algebra (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr operator)))))))) (car\
    \ operand))))\n            (+ (do_algebra (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (", "  (let ((result 0))\n\
    \    (for-each (lambda (op)\n      (if (eq op '+)\n        (+ result (car operand)))\n\
    \      (if (eq op '-)\n        (+ result (- (car operand) (cdr operand))))\n \
    \     (if (eq op '*)\n        (+ result (* (car operand) (cdr operand))))\n  \
    \    (if (eq op '//)\n        (+ result (/ (car operand) (cdr operand))))\n  \
    \    (if (eq op '**)\n        (+ result (** (car operand) (cdr operand))))\n \
    \     (if (eq op '**')\n        (+ result (** (car operand) (cdr operand))))\n\
    \      (if (eq op '**')\n        (+ result (** (car operand) (cdr operand))))\n\
    \      (if (eq op '**')\n        (+ result (** (car operand) (cdr operand))))\n\
    \      (if (eq op '**')\n        (+ result (** (car operand) (cdr operand))))\n\
    \      (if (eq op '**')\n        (+ result (** (car operand) (cdr operand))))\n\
    \      (if (eq op '**')\n        (+ result (** (car operand) (cdr operand))))\n\
    \      (if (eq op '**')\n        (+ result (** (car operand) (cdr operand))))\n\
    \      (if (eq op '**')\n        (+ result (** (car operand) (cdr operand))))\n\
    \      (if (eq op '**')\n        (+ result (** (car operand) (cdr operand))))\n\
    \      (if (eq op '**')\n        (+ result (** (car operand) (cdr operand))))\n\
    \      (if (eq op '**')\n        (+ result (** (car operand) (cdr operand))))\n\
    \      (if (eq op '**')\n        (+ result (** (car operand) (cdr operand))))\n\
    \      (if (eq op '**')\n        (+ result (** (car operand) (cdr operand))))\n",
  "  (let ((result 0))\n    (for-each (lambda (op)\n                (if (eq op '+)\n\
    \                  (+ result (do_algebra operator (cdr operand))))\n         \
    \       (if (eq op '-)\n                  (+ result (- (do_algebra operator (cdr\
    \ operand))))\n                (if (eq op '*)\n                  (+ result (*\
    \ (do_algebra operator (cdr operand))))\n                (if (eq op '//)\n   \
    \               (+ result (/ (do_algebra operator (cdr operand))))\n         \
    \       (if (eq op '**)\n                  (+ result (* (do_algebra operator (cdr\
    \ operand))))\n                (if (eq op '+')\n                  (+ result (do_algebra\
    \ operator (cdr operand))))\n                (if (eq op '-')\n               \
    \   (+ result (- (do_algebra operator (cdr operand))))\n                (if (eq\
    \ op '*')\n                  (+ result (* (do_algebra operator (cdr operand))))\n\
    \                (if (eq op '//')\n                  (+ result (/ (do_algebra\
    \ operator (cdr operand))))\n                (if (eq op '**')\n              \
    \    (+ result (* (do_algebra operator (cdr operand))))))))))\n  result))\n",
  "  (let ((result 0))\n    (for-each (lambda (x)\n                (let ((op (car\
    \ operator)))\n                  (let ((operand (cdr operator)))\n           \
    \         (if (null operand)\n                      (result x)\n             \
    \         (result (+ (* x x) (do_algebra (cdr operand)))))))\n               \
    \ operand)\n              result))\n  result)\n", "  (if (null? operator)\n  \
    \  (print \"Error: operand list is empty.\")\n    (if (null? operand)\n      (print\
    \ \"Error: operator list is empty.\")\n      (print \"Error: operand list and\
    \ operator list should not be empty.\")\n      (exit)))\n  (if (null? operand)\n\
    \    (print \"Error: operand list is empty.\")\n    (if (null? operator)\n   \
    \   (print \"Error: operator list is empty.\")\n      (print \"Error: operand\
    \ list and operator list should not be empty.\")\n      (exit)))\n  (if (null?\
    \ operand)\n    (print \"Error: operand list is empty.\")\n    (if (null? operator)\n\
    \      (print \"Error: operator list is empty.\")\n      (print \"Error: operand\
    \ list and operator list should not be empty.\")\n      (exit)))\n  (if (null?\
    \ operator)\n    (print \"Error: operator list is empty.\")\n    (if (null? operand)\n\
    \      (print \"Error: operand list is empty.\")\n      (print \"Error: operand\
    \ list and operator list should not be empty.\")\n      (exit)))\n  (if (null?\
    \ operand)\n    (print \"Error: operand list is empty.\")\n    (if (null? operator)\n\
    \      (print \"Error: operator list is empty.\")\n      (print \"Error: operand\
    \ list and operator list should not be empty.\")\n      (exit)))\n  (if (null?\
    \ operator)\n    (print \"Error: operator list is empty.\")\n    (if (null? operand)\n\
    \      (print \"Error: operand list is empty.\")\n      (print \"Error: operand\
    \ list and operator list should not be empty.\")\n      (exit)))\n  (if (null?\
    \ operand)\n    (print \"Error: operand list is empty.\")\n    (if (null? operator)\n\
    \      (print \"Error: operator list is empty.\")\n      (print \"Error: operand\
    \ list and operator list should not be empty.\")\n      (exit)))\n  (if (null?\
    \ operator)\n    (print \"Error: operator list is empty.\")\n    (if (null? operand)\n\
    \      (print \"Error: operand list is empty.\")", "  (let ((result 0))\n    (for-each\
    \ (lambda (x)\n                (if (null? (cdr x))\n                  (+ result\
    \ (car x)))\n                (if (null? (cdr x))\n                  (+ result\
    \ (car x))\n                  (+ result (* (car x) (cdr x))))))\n    (+ result\
    \ (car operand))\n    ))\n", "  (define (algebra_op op1 op2)\n    (if (eq? op1\
    \ op2)\n      1\n      (if (eq? op1 '+)\n        (+ op1 op2)\n        (if (eq?\
    \ op1 '-)\n          (-(op1 op2))\n          (if (eq? op1 '*)\n            (*\
    \ op1 op2)\n            (if (eq? op1 '//)\n              (// op1 op2)\n      \
    \        (if (eq? op1 '**)\n                (** op1 op2)\n                (else\n\
    \                  (error \"Invalid operator\"))))))))))\n  (if (null? operator)\n\
    \    (error \"Invalid operand\")\n    (if (null? operand)\n      (error \"Invalid\
    \ operand\")\n      (if (null? (car operand))\n        (error \"Invalid operand\"\
    )\n        (if (null? (car (cdr operand)))\n          (error \"Invalid operand\"\
    )\n          (if (null? (car (cdr (cdr operand))))\n            (error \"Invalid\
    \ operand\")\n            (do_algebra (cdr (car operand)) (cdr (car (cdr operand))))))))\n\
    \    (do_algebra (car operator) (car operand)))))\n", "  (let ((result 0))\n \
    \   (for-each (lambda (op)\n                (if (eq op '+)\n                 \
    \ (+ result (do_algebra operator (cdr operand))))\n                (if (eq op\
    \ '-)\n                  (+ result (- (do_algebra operator (cdr operand))))\n\
    \                (if (eq op '*)\n                  (+ result (* (do_algebra operator\
    \ (cdr operand))))\n                (if (eq op '//)\n                  (+ result\
    \ (/ (do_algebra operator (cdr operand))))\n                (if (eq op '**)\n\
    \                  (+ result (* (do_algebra operator (cdr operand))))\n      \
    \          (if (eq op '<')\n                  (+ result (- (do_algebra operator\
    \ (cdr operand))))\n                (if (eq op '>')\n                  (+ result\
    \ (* (do_algebra operator (cdr operand))))\n                (if (eq op '<=')\n\
    \                  (+ result (- (do_algebra operator (cdr operand))))\n      \
    \          (if (eq op '>=')\n                  (+ result (* (do_algebra operator\
    \ (cdr operand))))\n                (if (eq op '=')\n                  (+ result\
    \ (/ (do_algebra operator (cdr operand))))\n                (if (eq op '<>')\n\
    \                  (+ result (* (do_algebra operator (cdr operand))))\n      \
    \          (if (eq op 'and')\n                  (+ result (* (do_algebra operator\
    \ (cdr operand))))\n                (if (eq op 'or')\n                  (+ result\
    \ (/ (do_algebra operator (cdr operand))))\n                (if (eq op 'not')\n\
    \                  (+ result (- (do_algebra operator (cdr operand))))\n      \
    \          (if (eq op 'car')\n                  (+ result (do_algebra (cdr operand))))\n\
    \                (if (eq op 'cdr')\n                  (+ result (do_algebra (cdr\
    \ operand))))\n                (if (eq op 'cons')\n                  (+ result\
    \ (do_algebra (cdr operand))))\n                (if (eq op 'list')\n         \
    \         (+ result (do_algebra (", "  (if (null? operator)\n    (print \"Invalid\
    \ operator list.\")\n    (print \"Invalid operand list.\")\n    (exit))\n  (if\
    \ (null? operand)\n    (print \"Invalid operand list.\")\n    (print \"Invalid\
    \ operator list.\")\n    (exit))\n  (if (null? (cdr operand))\n    (print \"Invalid\
    \ operand list.\")\n    (print \"Invalid operator list.\")\n    (exit))\n  (if\
    \ (null? (cdr (cdr operand)))\n    (print \"Invalid operand list.\")\n    (print\
    \ \"Invalid operator list.\")\n    (exit))\n  (if (null? (car operator))\n   \
    \ (print \"Invalid operator list.\")\n    (print \"Invalid operand list.\")\n\
    \    (exit))\n  (if (null? (car (car operand)))\n    (print \"Invalid operand\
    \ list.\")\n    (print \"Invalid operator list.\")\n    (exit))\n  (if (car (car\
    \ (car operand)))\n    (print \"Invalid operand list.\")\n    (print \"Invalid\
    \ operator list.\")\n    (exit))\n  (if (car (car (car (car operand))))\n    (print\
    \ \"Invalid operand list.\")\n    (print \"Invalid operator list.\")\n    (exit))\n\
    \  (if (car (car (car (car (car operand))))))\n    (print \"Invalid operand list.\"\
    )\n    (print \"Invalid operator list.\")\n    (exit))\n  (if (car (car (car (car\
    \ (car (car operand))))))\n    (print \"Invalid operand list.\")\n    (print \"\
    Invalid operator list.\")\n    (exit))\n  (if (car (car (car (car (car (car (car\
    \ operand))))))))\n    (print \"Invalid operand list.\")\n    (print \"Invalid\
    \ operator list.\")\n    (exit))\n  (if (car (car (car (car (car (car (car (car\
    \ operand))))))))\n    (print \"Invalid operand list.\")\n    (print \"Invalid\
    \ operator list.\")\n    (exit))\n  (if (car (car (car (car (car (car (car (car\
    \ (car operand))))))))))\n    (print \"Invalid operand list.\")\n    ", "  (if\
    \ (null? operator)\n    (+ operand)\n    (let ((op (car operator)))\n      (if\
    \ (null? (cdr operator))\n        (+ (car operand) (do_algebra (cdr operator)\
    \ (car operand)))\n        (let ((op (car operator)))\n          (if (null? (cdr\
    \ operator))\n            (+ (car operand) (do_algebra (cdr operator) (car operand)))\n\
    \            (let ((op (car operator)))\n              (if (null? (cdr operator))\n\
    \                (+ (car operand) (do_algebra (cdr operator) (car operand)))\n\
    \                (let ((op (car operator)))\n                  (if (null? (cdr\
    \ operator))\n                    (+ (car operand) (do_algebra (cdr operator)\
    \ (car operand)))\n                    (let ((op (car operator)))\n          \
    \            (if (null? (cdr operator))\n                        (+ (car operand)\
    \ (do_algebra (cdr operator) (car operand)))\n                        (let ((op\
    \ (car operator)))\n                          (if (null? (cdr operator))\n   \
    \                         (+ (car operand) (do_algebra (cdr operator) (car operand)))\n\
    \                            (let ((op (car operator)))\n                    \
    \          (if (null? (cdr operator))\n                                (+ (car\
    \ operand) (do_algebra (cdr operator) (car operand)))\n                      \
    \          (let ((op (car operator)))\n                                  (if (null?\
    \ (cdr operator))\n                                    (+ (car operand) (do_algebra\
    \ (cdr operator) (car operand)))\n                                    (let ((op\
    \ (car operator)))\n                                      (if (null? (cdr operator))\n\
    \                                        (+ (car operand) (do_algebra (cdr operator)\
    \ (car operand)))\n                                        (let ((op (car operator)))\n\
    \                                          (if (null? (cdr operator))\n      \
    \                                      (+ (car operand) (do_algebra (cdr operator)\
    \ (car operand)))\n                                            (let ((op (car\
    \ operator)))\n                                            ", "  (define (algebra_op\
    \ op1 op2)\n    (if (eq? op1 op2)\n      1\n      (if (eq? op1 '+)\n        (+\
    \ op1 op2)\n        (if (eq? op1 '-)\n          (-(op1 op2))\n          (if (eq?\
    \ op1 '*)\n            (* op1 op2)\n            (if (eq? op1 '//')\n         \
    \     (/ op1 op2)\n              (if (eq? op1 '**')\n                (** op1 op2)\n\
    \                (error \"Invalid operator\"))))))))))\n  (define (algebra_op_list\
    \ list)\n    (if (null? list)\n      1\n      (if (null? (cdr list))\n       \
    \ (car list)\n        (algebra_op_list (cdr list))))\n  (if (null? operand)\n\
    \    (error \"Invalid operand\")\n    (if (null? operator)\n      (error \"Invalid\
    \ operator\")\n      (if (null? (cdr operator))\n        (car operator)\n    \
    \    (algebra_op_list (cdr operator))))\n    (if (null? (cdr operand))\n     \
    \ (error \"Invalid operand\")\n      (if (null? (cdr (cdr operand)))\n       \
    \ (car (cdr operand))\n        (algebra_op_list (cdr (cdr operand))))\n      (do_algebra\
    \ (car operator) (car (cdr operand)))\n      )))\n", "  (if (null? operator)\n\
    \    (print \"Error: Operator list is empty.\")\n    (if (null? operand)\n   \
    \   (print \"Error: Operand list is empty.\")\n      (print \"Error: Operator\
    \ list and operand list are both empty.\")\n      (exit)))\n  (if (null? operand)\n\
    \    (print \"Error: Operand list is empty.\")\n    (print \"Error: Operator list\
    \ and operand list are both empty.\")\n    (exit))\n  (if (null? operator)\n \
    \   (print \"Error: Operator list is empty.\")\n    (print \"Error: Operator list\
    \ and operand list are both empty.\")\n    (exit))\n  (if (null? operand)\n  \
    \  (print \"Error: Operand list is empty.\")\n    (print \"Error: Operator list\
    \ and operand list are both empty.\")\n    (exit))\n  (if (null? operator)\n \
    \   (print \"Error: Operator list is empty.\")\n    (print \"Error: Operator list\
    \ and operand list are both empty.\")\n    (exit))\n  (if (null? operand)\n  \
    \  (print \"Error: Operand list is empty.\")\n    (print \"Error: Operator list\
    \ and operand list are both empty.\")\n    (exit))\n  (if (null? operator)\n \
    \   (print \"Error: Operator list is empty.\")\n    (print \"Error: Operator list\
    \ and operand list are both empty.\")\n    (exit))\n  (if (null? operand)\n  \
    \  (print \"Error: Operand list is empty.\")\n    (print \"Error: Operator list\
    \ and operand list are both empty.\")\n    (exit))\n  (if (null? operator)\n \
    \   (print \"Error: Operator list is empty.\")\n    (print \"Error: Operator list\
    \ and operand list are both empty.\")\n    (exit))\n  (if (null? operand)\n  \
    \  (print \"Error: Operand list is empty.\")\n    (print \"Error: Operator list\
    \ and operand list are both empty.\")\n    (exit))\n  (if (null? operator)\n \
    \   (print \"Error: Operator list is empty.\")\n    (print \"Error: Operator list\
    \ and operand list are both empty.\")\n    (exit))\n  (if (null?", "  (let ((result\
    \ 0))\n    (for-each (lambda (op)\n      (if (eq op '+)\n        (+ result (do_algebra\
    \ operator (cdr operand))))\n      (if (eq op '-)\n        (+ result (- (do_algebra\
    \ operator (cdr operand))))\n      (if (eq op '*)\n        (+ result (* result\
    \ (do_algebra operator (cdr operand))))\n      (if (eq op '//)\n        (+ result\
    \ (/ result (do_algebra operator (cdr operand))))\n      (if (eq op '**)\n   \
    \     (+ result (** result (do_algebra operator (cdr operand))))\n      (if (eq\
    \ op '<')\n        (< result (do_algebra operator (cdr operand))))\n      (if\
    \ (eq op '<=')\n        (<= result (do_algebra operator (cdr operand))))\n   \
    \   (if (eq op '>')\n        (> result (do_algebra operator (cdr operand))))\n\
    \      (if (eq op '>=')\n        (>= result (do_algebra operator (cdr operand))))\n\
    \      (if (eq op '=')\n        (= result (do_algebra operator (cdr operand))))\n\
    \      (if (eq op '!=')\n        (!= result (do_algebra operator (cdr operand))))\n\
    \      (if (eq op 'and')\n        (and result (do_algebra operator (cdr operand))))\n\
    \      (if (eq op 'or')\n        (or result (do_algebra operator (cdr operand))))\n\
    \      (if (eq op 'not')\n        (not result (do_algebra operator (cdr operand))))\n\
    \      (if (eq op 'list')\n        (do_algebra operator (car operand))))\n   \
    \ (result)))\n  result))\n", "  (define (do_operation op operand)\n    (if (null?\
    \ (cdr operand))\n      (car operand)\n      (do_operation (car operator) (cdr\
    \ operand)))))\n", "  (if (null? operator)\n    (if (null? operand)\n      0\n\
    \      (+ (car operand) (cdr operand)))\n    (if (null? operand)\n      (car operator)\n\
    \      (do_algebra (cdr operator) (car operand) (cdr operand)))\n    (if (null?\
    \ operand)\n      (car operator)\n      (do_algebra (cdr operator) (car operand)\
    \ (cdr operand)))\n    (if (null? operand)\n      (car operator)\n      (do_algebra\
    \ (cdr operator) (car operand) (cdr operand)))\n    (if (null? operand)\n    \
    \  (car operator)\n      (do_algebra (cdr operator) (car operand) (cdr operand)))\n\
    \    (if (null? operand)\n      (car operator)\n      (do_algebra (cdr operator)\
    \ (car operand) (cdr operand)))\n    (if (null? operand)\n      (car operator)\n\
    \      (do_algebra (cdr operator) (car operand) (cdr operand)))\n    (if (null?\
    \ operand)\n      (car operator)\n      (do_algebra (cdr operator) (car operand)\
    \ (cdr operand)))\n    (if (null? operand)\n      (car operator)\n      (do_algebra\
    \ (cdr operator) (car operand) (cdr operand)))\n    (if (null? operand)\n    \
    \  (car operator)\n      (do_algebra (cdr operator) (car operand) (cdr operand)))\n\
    \    (if (null? operand)\n      (car operator)\n      (do_algebra (cdr operator)\
    \ (car operand) (cdr operand)))\n    (if (null? operand)\n      (car operator)\n\
    \      (do_algebra (cdr operator) (car operand) (cdr operand)))\n    (if (null?\
    \ operand)\n      (car operator)\n      (do_algebra (cdr operator) (car operand)\
    \ (cdr operand)))\n    (if (null? oper", "  (let ((result 0))\n    (for-each (lambda\
    \ (op)\n                (if (eq op '+)\n                  (+ result operand)\n\
    \                  (if (eq op '-)\n                    (+ result (- operand result))\n\
    \                    (if (eq op '*)\n                      (+ result (- operand\
    \ result))\n                      (if (eq op '//)\n                        (+\
    \ result (/ operand result))\n                        (if (eq op '**)\n      \
    \                    (+ result (pow operand result))))))))\n      operator))\n",
  "  (if (null? operator)\n    (+ operand)\n    (let ((result 0))\n      (for-each\
    \ (lambda (x)\n                  (let ((op (car operator)))\n                \
    \    (if (eq op '+)\n                      (+ result (car x))\n              \
    \        (if (eq op '-)\n                        (+ result (car x))\n        \
    \                (if (eq op '*)\n                          (+ result (car x))\n\
    \                          (if (eq op '//)\n                            (+ result\
    \ (car x))\n                            (if (eq op '**)\n                    \
    \          (+ result (car x))\n                              (error \"Invalid\
    \ operator\"))))))))\n        (cdr x)))\n      (+ result)))\n)\n\n;; Given a list\
    \ of integers, return a list of the even integers in the list.", "  (let ((result\
    \ 0))\n    (for-each (lambda (x)\n                (let ((y (+ (car operator) (car\
    \ x))\n                       (z (- (car operator) (car x))))\n              \
    \       (result (+ (cdr x) y z)))\n                  (set! result z)))\n     \
    \         operand)\n    (+ result)))\n", "  (let ((result 0))\n    (for-each (lambda\
    \ (op)\n                (if (eq op '+)\n                  (+ result operand)\n\
    \                  (if (eq op '-)\n                    (+ result (- operand result))\n\
    \                    (if (eq op '*)\n                      (+ result (- result\
    \ operand))\n                      (if (eq op '//)\n                        (+\
    \ result (/ operand result))\n                        (if (eq op '**)\n      \
    \                    (+ result (expt result operand))))))))\n      operator))\n",
  "  (define (do_operation op operand)\n    (if (eq? op '+)\n      (+ (do_operation\
    \ op (car operand)) (do_operation op (cdr operand)))\n      (if (eq? op '-)\n\
    \        (-(do_operation op (car operand)) (do_operation op (cdr operand)))\n\
    \        (if (eq? op '*)\n          (* (do_operation op (car operand)) (do_operation\
    \ op (cdr operand)))\n          (if (eq? op '//)\n            (// (do_operation\
    \ op (car operand)) (do_operation op (cdr operand)))\n            (if (eq? op\
    \ '**)\n              (** (do_operation op (car operand)) (do_operation op (cdr\
    \ operand)))\n              (do_operation op operand))))))))))\n  (if (null? operator)\n\
    \    (error \"Operator list is empty.\")\n  (if (null? operand)\n    (error \"\
    Operand list is empty.\")\n  (do_operation (car operator) (car operand)))))\n",
  "  (define (do_operation oprnd1 oprnd2)\n    (if (eq? oprnd1 oprnd2)\n      1\n\
    \      (if (eq? oprnd1 '+)\n        (do_operation oprnd1 oprnd2)\n        (if\
    \ (eq? oprnd1 '-)\n          (do_operation oprnd1 oprnd2)\n          (if (eq?\
    \ oprnd1 '*)\n            (do_operation oprnd1 oprnd2)\n            (if (eq? oprnd1\
    \ '/)\n              (do_operation oprnd1 oprnd2)\n              (if (eq? oprnd1\
    \ '**)\n                (do_operation oprnd1 oprnd2)\n                (error \"\
    Invalid operator\"))))))))))\n  (if (null? operator)\n    (error \"Invalid operand\"\
    )\n    (if (null? operand)\n      (error \"Invalid operand\")\n      (do_operation\
    \ (car operator) (car operand)))))\n", "  (if (null? operator)\n    (+ operand)\n\
    \    (let ((op (car operator)))\n      (if (null? (cdr operator))\n        (+\
    \ (do_algebra (cdr operator) (car operand)))\n        (let ((op2 (car (cdr operator))))\n\
    \          (if (null? (cdr (cdr operator)))\n            (+ (do_algebra (cdr (cdr\
    \ operator)) (car operand)))\n            (let ((op3 (car (cdr (cdr (cdr operator)))))\n\
    \              (+ (do_algebra (cdr (cdr (cdr (cdr operator)))) (car operand))))\n\
    \              (if (null? (cdr (cdr (cdr (cdr (cdr operator))))))\n          \
    \      (+ (do_algebra (cdr (cdr (cdr (cdr (cdr (cdr operator)))))) (car operand)))\n\
    \                (+ (do_algebra (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (c", "  (define (algebra_op operand)\n    (if (null?\
    \ operand)\n      0\n    (+ (algebra_op (car operand))\n      (algebra_op (cdr\
    \ operand))))\n  (if (null? operator)\n    (if (null? operand)\n      0\n    (algebra_op\
    \ operand))\n  (if (null? operand)\n    (if (null? operator)\n      0\n    (algebra_op\
    \ operand))\n  (if (null? operand)\n    (if (null? operator)\n      0\n    (algebra_op\
    \ operand))\n  (if (null? operator)\n    (if (null? operand)\n      0\n    (algebra_op\
    \ operand))\n  (if (null? operand)\n    (if (null? operator)\n      0\n    (algebra_op\
    \ operand))\n  (if (null? operand)\n    (if (null? operator)\n      0\n    (algebra_op\
    \ operand))\n  (if (null? operand)\n    (if (null? operator)\n      0\n    (algebra_op\
    \ operand))\n  (if (null? operand)\n    (if (null? operator)\n      0\n    (algebra_op\
    \ operand))\n  (if (null? operand)\n    (if (null? operator)\n      0\n    (algebra_op\
    \ operand))\n  (if (null? operand)\n    (if (null? operator)\n      0\n    (algebra_op\
    \ operand))\n  (if (null? operand)\n    (if (null? operator)\n      0\n    (algebra_op\
    \ operand))\n  (if (null? operand)\n    (if (null? operator)\n      0\n    (algebra_op\
    \ operand))\n  (if (null? operand)\n    (if (null? operator)\n      0\n    (algebra_op\
    \ operand))\n  (if (null? operand)\n    (if (null? operator)\n      0\n    (algebra_op\
    \ operand))\n  (if (null? operand)\n    (", "  (let ((result 0))\n    (for-each\
    \ (lambda (op)\n                (if (eq op '+)\n                  (+ result (car\
    \ operand)))\n                (if (eq op '-)\n                  (+ result (- (car\
    \ operand) (cdr operand))))\n                (if (eq op '*)\n                \
    \  (+ result (* (car operand) (cdr operand))))\n                (if (eq op '//)\n\
    \                  (+ result (/ (car operand) (cdr operand))))\n             \
    \   (if (eq op '**)\n                  (+ result (* (car operand) (cdr operand)))))\n\
    \              operator))\n    result))\n", "  (define (do_operation op1 op2)\n\
    \    (if (eq? op1 op2)\n      1\n      (if (eq? op1 '+)\n        (do_operation\
    \ op2 op1)\n        (do_operation op1 op2))\n      (if (eq? op1 '-)\n        (do_operation\
    \ op2 op1)\n        (do_operation op1 op2))\n      (if (eq? op1 '*)\n        (do_operation\
    \ op2 op1)\n        (do_operation op1 op2))\n      (if (eq? op1 '//')\n      \
    \  (do_operation op2 op1)\n        (do_operation op1 op2))\n      (if (eq? op1\
    \ '**')\n        (do_operation op2 op1)\n        (do_operation op1 op2))\n   \
    \   (error \"Invalid operator\"))))\n  (do_operation operator operand)\n  (do_operation\
    \ operator operand)))\n", "  (let ((result 0))\n    (for-each (lambda (x)\n  \
    \              (let ((op (car operator)))\n                  (let ((operand (cdr\
    \ operator)))\n                    (if (null operand)\n                      (result\
    \ x)\n                      (let ((operand (car operand)))\n                 \
    \       (if (null operand)\n                          (result x)\n           \
    \               (let ((operand (cdr operand)))\n                            (if\
    \ (null operand)\n                              (result x)\n                 \
    \             (let ((operand (car operand)))\n                               \
    \ (if (null operand)\n                                  (result x)\n         \
    \                         (let ((operand (cdr operand)))\n                   \
    \                 (if (null operand)\n                                      (result\
    \ x)\n                                      (let ((operand (car operand)))\n \
    \                                       (if (null operand)\n                 \
    \                         (result x)\n                                       \
    \   (let ((operand (cdr operand)))\n                                         \
    \   (if (null operand)\n                                              (result\
    \ x)\n                                              (let ((operand (car operand)))\n\
    \                                                (if (null operand)\n        \
    \                                          (result x)\n                      \
    \                            (let ((operand (cdr operand)))\n                \
    \                                    (if (null operand)\n                    \
    \                                  (result x)\n                              \
    \                        (let ((operand (car operand)))\n                    \
    \                                    (if (null operand)\n                    \
    \                                      (result x)\n                          \
    \                                (let ((operand (cdr operand)))\n            \
    \                                                (if (null operand)\n        \
    \                                                      (result x)\n          \
    \                                                    (let ((operand (car operand)))\n\
    \                                                                (if (null operand)\n\
    \                                                                  (result x)\n\
    \                                                                  (let ((operand\
    \ (cdr operand)))\n                                                          \
    \          (if (null operand)\n                                              \
    \                        (result x)\n                                        \
    \                              (let ((operand (car operand)))\n              \
    \                                                          (if", "  (if (null?\
    \ operator)\n    (print \"Error: Operator list is empty.\")\n    (if (null? operand)\n\
    \      (print \"Error: Operand list is empty.\")\n      (print \"Error: Operator\
    \ list and operand list are both empty.\")\n      (exit)))\n  (if (null? operand)\n\
    \    (print \"Error: Operand list is empty.\")\n    (print \"Error: Operator list\
    \ and operand list are both empty.\")\n    (exit))\n  (if (null? operator)\n \
    \   (print \"Error: Operator list is empty.\")\n    (print \"Error: Operator list\
    \ and operand list are both empty.\")\n    (exit))\n  (if (null? operand)\n  \
    \  (print \"Error: Operand list is empty.\")\n    (print \"Error: Operator list\
    \ and operand list are both empty.\")\n    (exit))\n  (if (null? operator)\n \
    \   (print \"Error: Operator list is empty.\")\n    (print \"Error: Operator list\
    \ and operand list are both empty.\")\n    (exit))\n  (if (null? operand)\n  \
    \  (print \"Error: Operand list is empty.\")\n    (print \"Error: Operator list\
    \ and operand list are both empty.\")\n    (exit))\n  (if (null? operator)\n \
    \   (print \"Error: Operator list is empty.\")\n    (print \"Error: Operator list\
    \ and operand list are both empty.\")\n    (exit))\n  (if (null? operand)\n  \
    \  (print \"Error: Operand list is empty.\")\n    (print \"Error: Operator list\
    \ and operand list are both empty.\")\n    (exit))\n  (if (null? operator)\n \
    \   (print \"Error: Operator list is empty.\")\n    (print \"Error: Operator list\
    \ and operand list are both empty.\")\n    (exit))\n  (if (null? operand)\n  \
    \  (print \"Error: Operand list is empty.\")\n    (print \"Error: Operator list\
    \ and operand list are both empty.\")\n    (exit))\n  (if (null? operator)\n \
    \   (print \"Error: Operator list is empty.\")\n    (print \"Error: Operator list\
    \ and operand list are both empty.\")\n    (exit))\n  (if (null?", "  (let ((result\
    \ 0))\n    (for-each (lambda (x)\n                (let ((y (+ (car operator) (car\
    \ x))\n                       (z (- (car operator) (car x))))\n              \
    \       (result (+ y z)))\n                  (set! result z)))\n             \
    \ operand)\n      result))\n", "  (let ((result 0))\n    (for-each (lambda (x)\n\
    \                (let ((op (car operator)))\n                  (let ((operand\
    \ (cdr operator)))\n                    (if (null operand)\n                 \
    \     (result x)\n                      (let ((result (eval op operand)))\n  \
    \                      (set! result (eval result)))))))\n      operand))\n  result)\n",
  "  (if (null? operator)\n    (print \"Error: No operator!\")\n    (if (null? operand)\n\
    \      (print \"Error: No operand!\")\n      (print \"Error: Operator list is\
    \ empty!\")\n      (print \"Error: Operand list is empty!\")\n      (print \"\
    Error: Operator list is empty!\")\n      (print \"Error: Operand list is empty!\"\
    )\n      (print \"Error: Operator list is empty!\")\n      (print \"Error: Operand\
    \ list is empty!\")\n      (print \"Error: Operator list is empty!\")\n      (print\
    \ \"Error: Operand list is empty!\")\n      (print \"Error: Operator list is empty!\"\
    )\n      (print \"Error: Operand list is empty!\")\n      (print \"Error: Operator\
    \ list is empty!\")\n      (print \"Error: Operand list is empty!\")\n      (print\
    \ \"Error: Operator list is empty!\")\n      (print \"Error: Operand list is empty!\"\
    )\n      (print \"Error: Operator list is empty!\")\n      (print \"Error: Operand\
    \ list is empty!\")\n      (print \"Error: Operator list is empty!\")\n      (print\
    \ \"Error: Operand list is empty!\")\n      (print \"Error: Operator list is empty!\"\
    )\n      (print \"Error: Operand list is empty!\")\n      (print \"Error: Operator\
    \ list is empty!\")\n      (print \"Error: Operand list is empty!\")\n      (print\
    \ \"Error: Operator list is empty!\")\n      (print \"Error: Operand list is empty!\"\
    )\n      (print \"Error: Operator list is empty!\")\n      (print \"Error: Operand\
    \ list is empty!\")\n      (print \"Error: Operator list is empty!\")\n      (print\
    \ \"Error: Operand list is empty!\")\n      (print \"Error: Operator list is empty!\"\
    )\n      (print \"Error: Operand list is empty!\")\n      (print \"Error: Operator\
    \ list is empty!\")\n      (print \"Error: Operand list is empty!\")\n      (print\
    \ \"Error: Operator list is empty!\")\n      (print \"Error: Operand list is empty!\"\
    )\n      (print \"Error: Operator list is empty!\"", "  (define (algebra_op op1\
    \ op2)\n    (if (eq op1 '+) (+ op1 op2)\n      (if (eq op1 '-) (- op1 op2)\n \
    \       (if (eq op1 '*) (* op1 op2)\n          (if (eq op1 '//) (/ op1 op2)\n\
    \            (if (eq op1 '**) (** op1 op2)\n              (error \"Invalid operator\"\
    ))))))))\n  (if (null? operand)\n    (error \"Invalid operand\")))\n", "  (if\
    \ (null? operator)\n    (print \"Error: No operator given.\")\n    (if (null?\
    \ operand)\n      (print \"Error: No operand given.\")\n      (if (null? (cdr\
    \ operand))\n        (print \"Error: No operand given.\")\n        (if (null?\
    \ (cdr (cdr operand)))\n          (print \"Error: No operand given.\")\n     \
    \     (let ((result (car (car operand))))\n            (while (not (null? (cdr\
    \ operand)))\n              (let ((op (car (car operand))))\n                (let\
    \ ((operand (cdr (car operand))))\n                  (if (null? operand)\n   \
    \                 (print \"Error: No operand given.\")\n                    (if\
    \ (null? (cdr operand))\n                      (print \"Error: No operand given.\"\
    )\n                      (if (null? (cdr (cdr operand)))\n                   \
    \     (print \"Error: No operand given.\")\n                        (let ((result\
    \ (eval (car op) result)))\n                          (operand (cdr operand))))\n\
    \                      (let ((result (eval (car op) result)))\n              \
    \          (operand (cdr operand))))\n                    (let ((result (eval\
    \ (car op) result)))\n                      (operand (cdr operand))))\n      \
    \            (let ((result (eval (car op) result)))\n                    (operand\
    \ (cdr operand))))\n                (let ((result (eval (car op) result)))\n \
    \                 (operand (cdr operand))))\n              (let ((result (eval\
    \ (car op) result)))\n                (operand (cdr operand))))\n            (let\
    \ ((result (eval (car op) result)))\n              (operand (cdr operand))))))))\n\
    \  (let ((result (eval (car operator) result)))\n    (let ((operand (cdr operand)))\n\
    \      (if (null? operand)\n        (print \"Error: No operand given.\")\n   \
    \     (if (null? (cdr operand))\n          (print \"Error: No operand given.\"\
    )\n          (if (null? (cdr (cdr operand)))\n            (print \"Error: No operand\
    \ given.\")\n            (let ((result (car (", "  (define (calculate_expression\
    \ operand)\n    (if (null? operand)\n      0\n      (let ((result 0))\n      \
    \  (for-each (lambda (x)\n                    (let ((op (car operator)))\n   \
    \                   (let ((operand (cdr operand)))\n                        (if\
    \ (null? operand)\n                          0\n                          (let\
    \ ((operand (car operand)))\n                            (if (null? operand)\n\
    \                              0\n                              (let ((operand\
    \ (cdr operand)))\n                                (if (null? operand)\n     \
    \                             0\n                                  (let ((operand\
    \ (car operand)))\n                                    (if (null? operand)\n \
    \                                     0\n                                    \
    \  (let ((operand (cdr operand)))\n                                        (if\
    \ (null? operand)\n                                          0\n             \
    \                             (let ((operand (car operand)))\n               \
    \                             (if (null? operand)\n                          \
    \                    0\n                                              (let ((operand\
    \ (cdr operand)))\n                                                (if (null?\
    \ operand)\n                                                  0\n            \
    \                                      (let ((operand (car operand)))\n      \
    \                                              (if (null? operand)\n         \
    \                                             0\n                            \
    \                          (let ((operand (cdr operand)))\n                  \
    \                                      (if (null? operand)\n                 \
    \                                         0\n                                \
    \                          (let ((operand (car operand)))\n                  \
    \                                          (if (null? operand)\n             \
    \                                                 0\n                        \
    \                                      (let ((operand (cdr operand)))\n      \
    \                                                          (if (null? operand)\n\
    \                                                                  0\n       \
    \                                                           (let ((operand (car\
    \ operand)))\n                                                               \
    \     (if (null? operand)\n                                                  \
    \                    0\n                                                     \
    \                 (let ((operand (cdr operand)))\n                           \
    \                                             (if (null? operand)\n          \
    \                                                                0\n         \
    \                                                                 (let ((operand",
  "  (if (null? operand)\n    (+ operator)\n    (let ((result (do_algebra (+ operator\
    \ (car operand))))\n          (operand (cdr operand)))\n      (do_algebra result\
    \ operand))))\n", "  (define (algebra_op op1 op2)\n    (if (eq op1 op2)\n    \
    \  1\n      (if (eq op1 '+)\n        (+ op1 op2)\n        (if (eq op1 '-)\n  \
    \        (-(op1 op2))\n          (if (eq op1 '*)\n            (* op1 op2)\n  \
    \          (if (eq op1 '//)\n              (/ op1 op2)\n              (if (eq\
    \ op1 '**)\n                (** op1 op2)\n                (error \"Invalid operator\"\
    ))))))))\n  (if (null? operator)\n    (error \"Operator list is empty\")\n  (if\
    \ (null? operand)\n    (error \"Operand list is empty\")\n  (if (null? (cdr operand))\n\
    \    (error \"Operand list has only one element\")\n  (if (null? (cdr (cdr operand)))\n\
    \    (error \"Operand list has only two elements\")\n  (if (null? (cdr (cdr (cdr\
    \ operand))))\n    (error \"Operand list has only three elements\")\n  (if (null?\
    \ (cdr (cdr (cdr (cdr operand))))))\n    (error \"Operand list has only four elements\"\
    )\n  (if (null? (cdr (cdr (cdr (cdr (cdr operand))))))\n    (error \"Operand list\
    \ has only five elements\")\n  (if (null? (cdr (cdr (cdr (cdr (cdr (cdr operand))))))))\n\
    \    (error \"Operand list has only six elements\")\n  (if (null? (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr operand))))))))\n    (error \"Operand list has only seven\
    \ elements\")\n  (if (null? (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr operand))))))))))\n\
    \    (error \"Operand list has only eight elements\")\n  (if (null? (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr operand", "  (define (do_operation op operand)\n\
    \    (if (eq? op '+)\n      (+ (do_operation op (car operand)) (do_operation op\
    \ (cdr operand))))\n    (if (eq? op '-)\n      (+ (do_operation op (car operand))\
    \ (- (do_operation op (cdr operand))))\n    (if (eq? op '*)\n      (+ (do_operation\
    \ op (car operand)) (* (do_operation op (cdr operand))))\n    (if (eq? op '//)\n\
    \      (/ (do_operation op (car operand)) (do_operation op (cdr operand))))\n\
    \    (if (eq? op '**)\n      (do_operation op (car operand))\n    (error \"Unknown\
    \ operator\" op))\n    (car operand))\n  (car operator)\n  (do_operation (car\
    \ operator) operand))\n  (do_operation (car (cdr operator)) operand))\n  (car\
    \ (cdr (cdr operator)))\n  (do_operation (car (cdr (cdr operator))) operand))\n\
    \  (car (cdr (cdr (cdr operator))))\n  (do_operation (car (cdr (cdr (cdr operator))))\
    \ operand))\n  (car (cdr (cdr (cdr (cdr operator))))))\n  (do_operation (car (cdr\
    \ (cdr (cdr (cdr operator)))))) operand))\n  (car (cdr (cdr (cdr (cdr (cdr operator)))))))))\n",
  "  (define (calc_op op1 op2)\n    (if (eq op1 op2)\n      1\n    (if (eq op1 '+)\n\
    \      (+ op1 op2)\n    (if (eq op1 '-)\n      (+ (- op1 op2) 1)\n    (if (eq\
    \ op1 '*)\n      (* op1 op2)\n    (if (eq op1 '//)\n      (/ op1 op2)\n    (if\
    \ (eq op1 '**)\n      (** op1 op2)\n    (error \"Unknown operator\" op1))))))\n\
    \  (if (null? operator)\n    (error \"Operator list is empty\")\n  (if (null?\
    \ operand)\n    (error \"Operand list is empty\")\n  (if (null? (cdr operand))\n\
    \    (error \"Operand list has only one operand\")\n  (if (null? (cdr (cdr operand)))\n\
    \    (error \"Operand list has only two operands\")\n  (let ((op1 (car operand))\n\
    \        (op2 (car (cdr operand))))\n    (calc_op op1 op2)))\n  (calc_op (car\
    \ operator) (car (cdr operator)) (car (cdr operand))))\n", "  (if (null? operator)\n\
    \    (print \"Error: Operator list is empty.\")\n    (if (null? operand)\n   \
    \   (print \"Error: Operand list is empty.\")\n      (print \"Error: Operator\
    \ list and operand list are both empty.\")\n      (exit)))\n  (if (null? operand)\n\
    \    (print \"Error: Operand list is empty.\")\n    (print \"Error: Operator list\
    \ and operand list are both empty.\")\n    (exit)))", "  (if (null? operator)\n\
    \    (print \"Error: No operator.\")\n    (if (null? operand)\n      (print \"\
    Error: No operand.\")\n      (print \"Error: No operator and no operand.\")\n\
    \      (exit)))\n  (if (null? operand)\n    (print \"Error: No operand.\")\n \
    \   (print \"Error: No operator and no operand.\")\n    (exit)))\n", "  (let ((result\
    \ 0))\n    (for-each (lambda (op)\n      (if (eq op '+)\n        (+ result (do_algebra\
    \ operator (cdr operand))))\n      (if (eq op '-)\n        (+ result (- (do_algebra\
    \ operator (cdr operand))))\n      (if (eq op '*)\n        (+ result (* result\
    \ (do_algebra operator (cdr operand))))\n      (if (eq op '//)\n        (+ result\
    \ (/ (do_algebra operator (cdr operand)) (do_algebra operator (car operand))))\n\
    \      (if (eq op '**)\n        (+ result (** result (do_algebra operator (cdr\
    \ operand))))\n      (if (eq op '+')\n        (+ result (do_algebra operator (car\
    \ operand))))\n      (if (eq op '-')\n        (+ result (- (do_algebra operator\
    \ (car operand))))\n      (if (eq op '*')\n        (+ result (* (do_algebra operator\
    \ (car operand))))\n      (if (eq op '//')\n        (+ result (/ (do_algebra operator\
    \ (car operand)) (do_algebra operator (car operand))))\n      (if (eq op '**')\n\
    \        (+ result (** (do_algebra operator (car operand))))\n      (if (eq op\
    \ '+')\n        (+ result (do_algebra operator (car operand))))\n      (if (eq\
    \ op '-')\n        (+ result (- (do_algebra operator (car operand))))\n      (if\
    \ (eq op '*')\n        (+ result (* (do_algebra operator (car operand))))\n  \
    \    (if (eq op '//')\n        (+ result (/ (do_algebra operator (car operand))\
    \ (do_algebra operator (car operand))))\n      (if (eq op '**')\n        (+ result\
    \ (** (do_algebra operator (car operand))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
  "  (define (do_operation op1 op2)\n    (if (eq? op1 op2)\n      1\n      (if (eq?\
    \ op1 '+)\n        (do_operation op2 op1)\n        (do_operation op1 op2))\n \
    \     (if (eq? op1 '-)\n        (do_operation op2 op1)\n        (do_operation\
    \ op1 op2))\n      (if (eq? op1 '*)\n        (do_operation op2 op1)\n        (do_operation\
    \ op1 op2))\n      (if (eq? op1 '//')\n        (do_operation op2 op1)\n      \
    \  (do_operation op1 op2))\n      (if (eq? op1 '**')\n        (do_operation op2\
    \ op1)\n        (do_operation op1 op2))\n      (error \"Invalid operator\"))))\n\
    \  (do_operation operator operand)\n  (do_operation operator (cdr operand)))\n",
  "  (let ((result 0))\n    (for-each (lambda (x)\n                (let ((op (car\
    \ operator)))\n                  (let ((operand (cdr operator)))\n           \
    \         (if (eq op '+)\n                        (+ result (car operand)))\n\
    \                      (if (eq op '-)\n                        (+ result (- (car\
    \ operand) result)))\n                      (if (eq op '*)\n                 \
    \       (+ result (* (car operand) result)))\n                      (if (eq op\
    \ '//)\n                        (+ result (/ (car operand) result)))\n       \
    \               (if (eq op '**)\n                        (+ result (* result (car\
    \ operand)))))))\n              operand))\n    result))\n", "  (let ((result 0))\n\
    \    (for-each (lambda (op)\n      (if (eq op '+)\n        (+ result (do_algebra\
    \ operator (cdr operand))))\n      (if (eq op '-)\n        (+ result (- (do_algebra\
    \ operator (cdr operand))))\n      (if (eq op '*)\n        (+ result (* result\
    \ (do_algebra operator (cdr operand))))\n      (if (eq op '//)\n        (+ result\
    \ (/ result (do_algebra operator (cdr operand))))\n      (if (eq op '**)\n   \
    \     (+ result (** result (do_algebra operator (cdr operand))))\n      (if (eq\
    \ op '<')\n        (< result (do_algebra operator (cdr operand))))\n      (if\
    \ (eq op '>')\n        (> result (do_algebra operator (cdr operand))))\n     \
    \ (if (eq op '<=')\n        (<= result (do_algebra operator (cdr operand))))\n\
    \      (if (eq op '>=')\n        (>= result (do_algebra operator (cdr operand))))\n\
    \      (if (eq op '=')\n        (= result (do_algebra operator (cdr operand))))\n\
    \      (if (eq op '!=')\n        (not= result (do_algebra operator (cdr operand))))\n\
    \      (if (eq op 'and')\n        (and result (do_algebra operator (cdr operand))))\n\
    \      (if (eq op 'or')\n        (or result (do_algebra operator (cdr operand))))\n\
    \      (if (eq op 'not')\n        (not result (do_algebra operator (cdr operand))))\n\
    \      (if (eq op 'list')\n        (do_algebra operator (car operand))))\n   \
    \ result))))\n  result))\n", "  (if (null? operator)\n    (+ operand)\n    (let\
    \ ((op (car operator)))\n      (if (null? (cdr operator))\n        (+ (do_algebra\
    \ (cdr operator) (car operand)))\n        (let ((op2 (car (cdr operator))))\n\
    \          (if (null? (cdr (cdr operator)))\n            (+ (do_algebra (cdr (cdr\
    \ operator)) (car operand)))\n            (let ((op3 (car (cdr (cdr (cdr operator)))))\n\
    \              (+ (do_algebra (cdr (cdr (cdr (cdr operator)))) (car operand))))\n\
    \              (if (null? (cdr (cdr (cdr (cdr (cdr operator))))))\n          \
    \      (+ (do_algebra (cdr (cdr (cdr (cdr (cdr (cdr operator)))))) (car operand)))\n\
    \                (+ (do_algebra (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (c", "  (if (null? operator)\n    (+ operand)\n   \
    \ (let ((result (eval operand)))\n      (if (null? operator)\n        (+ result)\n\
    \        (let ((op (car operator)))\n          (let ((operand (cdr operator)))\n\
    \            (if (null? operand)\n              (+ result result)\n          \
    \    (let ((operand (car operand)))\n                (if (null? operand)\n   \
    \               (+ result result)\n                  (let ((op (car operator)))\n\
    \                    (let ((operand (cdr operator)))\n                      (if\
    \ (null? operand)\n                        (+ result result)\n               \
    \         (let ((op (car operator)))\n                          (let ((operand\
    \ (cdr operator)))\n                            (if (null? operand)\n        \
    \                      (+ result result)\n                              (let ((op\
    \ (car operator)))\n                                (let ((operand (cdr operator)))\n\
    \                                  (if (null? operand)\n                     \
    \               (+ result result)\n                                    (let ((op\
    \ (car operator)))\n                                      (let ((operand (cdr\
    \ operator)))\n                                        (if (null? operand)\n \
    \                                         (+ result result)\n                \
    \                          (let ((op (car operator)))\n                      \
    \                      (let ((operand (cdr operator)))\n                     \
    \                         (if (null? operand)\n                              \
    \                  (+ result result)\n                                       \
    \         (let ((op (car operator)))\n                                       \
    \           (let ((operand (cdr operator)))\n                                \
    \                    (if (null? operand)\n                                   \
    \                   (+ result result)\n                                      \
    \                (let ((op (car operator)))\n                                \
    \                        (let ((operand (cdr operator)))\n                   \
    \                                       (if (null? operand)\n                \
    \                                            (+ result result)\n             \
    \                                               (let ((op (car operator)))\n \
    \                                                             (let ((operand (cdr\
    \ operator)))\n                                                              \
    \  (if (null? operand)\n                                                     \
    \             (+ result result)\n                                            \
    \                  ", "  (let ((result 0))\n    (for-each (lambda (x)\n      \
    \          (let ((op (car operator)))\n                  (let ((operand (cdr operator)))\n\
    \                    (if (eq op '+)\n                        (+ result (car operand)))\n\
    \                      (if (eq op '-)\n                        (+ result (- (car\
    \ operand) result)))\n                      (if (eq op '*)\n                 \
    \       (+ result (* (car operand) result)))\n                      (if (eq op\
    \ '//)\n                        (+ result (/ (car operand) result)))\n       \
    \               (if (eq op '**)\n                        (+ result (* result (car\
    \ operand))))))\n                operand))\n      operand\n    result))\n", " \
    \ (let ((result 0))\n    (for-each (lambda (x)\n                (let ((op (car\
    \ operator)))\n                  (let ((operand (cdr operator)))\n           \
    \         (if (eq op '+)\n                        (+ result (car operand)))\n\
    \                      (if (eq op '-)\n                        (+ result (- (car\
    \ operand) result)))\n                      (if (eq op '*)\n                 \
    \       (+ result (* result (car operand)))\n                      (if (eq op\
    \ '//)\n                        (+ result (/ result (car operand)))\n        \
    \              (if (eq op '**)\n                        (+ result (* result (car\
    \ operand)))\n                      (else\n                        (+ result (car\
    \ operand))))))))\n              operand))\n    result))\n", "  (let ((result\
    \ 0))\n    (for-each (lambda (op)\n      (if (eq op '+)\n        (+ result (operand\
    \ op)))\n      (if (eq op '-)\n        (+ result (- operand op)))\n      (if (eq\
    \ op '*)\n        (+ result (* operand op)))\n      (if (eq op '//)\n        (+\
    \ result (/ operand op)))\n      (if (eq op '**)\n        (+ result (** operand\
    \ op)))\n      (if (eq op '**)\n        (+ result (** operand op))))\n    result))\n\
    \  result)\n", "  (define (algebra_op op1 op2)\n    (if (eq op1 op2)\n      1\n\
    \      (if (eq op1 '+)\n        (algebra_op op2 (op1 op2))\n        (if (eq op1\
    \ '-)\n          (algebra_op op2 (op1 op2))\n          (if (eq op1 '*)\n     \
    \       (algebra_op op2 (op1 op2))\n            (if (eq op1 '//)\n           \
    \   (algebra_op op2 (op1 op2))\n              (if (eq op1 '**)\n             \
    \   (algebra_op op2 (op1 op2))\n                (error \"Invalid operator\"))))))))))\n\
    \  (if (empty? operator)\n    (error \"Invalid operator list\")\n  (if (empty?\
    \ operand)\n    (error \"Invalid operand list\")\n  (if (null? (car operator))\n\
    \    (error \"Invalid operator\")\n  (if (null? (car operand))\n    (error \"\
    Invalid operand\")\n  (if (null? (cdr operator))\n    (error \"Invalid operator\"\
    )\n  (if (null? (cdr operand))\n    (error \"Invalid operand\")\n  (if (null?\
    \ (car (car operator)))\n    (error \"Invalid operator\")\n  (if (null? (car (car\
    \ operand)))\n    (error \"Invalid operand\")\n  (if (null? (cdr (car operator)))\n\
    \    (error \"Invalid operator\")\n  (if (null? (cdr (car operand)))\n    (error\
    \ \"Invalid operand\")\n  (if (null? (car (cdr operator)))\n    (error \"Invalid\
    \ operator\")\n  (if (null? (car (cdr operand)))\n    (error \"Invalid operand\"\
    )\n  (if (null? (cdr (cdr operator)))\n    (error \"Invalid operator\")\n  (if\
    \ (null? (cdr (cdr operand)))\n    (error \"Invalid operand\")\n  (if (null? (car\
    \ (cdr (car operator))))\n    (error \"Invalid operator\")\n  (if (null? (car\
    \ (cdr (car operand", "  (let ((result 0))\n    (for-each (lambda (x)\n      \
    \          (let ((op (car operator)))\n                  (let ((operand (cdr operator)))\n\
    \                    (if (eq op '+)\n                        (+ result (car operand)))\n\
    \                    (if (eq op '-)\n                        (+ result (- (car\
    \ operand) result)))\n                    (if (eq op '*)\n                   \
    \     (+ result (* result (car operand)))\n                    (if (eq op '//)\n\
    \                        (+ result (/ (car operand) result)))\n              \
    \      (if (eq op '**)\n                        (+ result (* result (car operand)))\n\
    \                    (else\n                        (print \"Invalid operator\"\
    ))))))\n              operand))\n    result))\n", "  (let ((result 0))\n    (for-each\
    \ (lambda (x)\n                (let ((op (car operator)))\n                  (let\
    \ ((operand (cdr operator)))\n                    (if (eq op '+)\n           \
    \             (+ result (car operand)))\n                      (if (eq op '-)\n\
    \                        (+ result (- (car operand) result)))))\n            \
    \    operand)\n              operand))\n  result)\n", "  (if (null? operator)\n\
    \    (+ operand)\n    (let ((op (car operator)))\n      (if (null? (cdr operator))\n\
    \        (+ (do_algebra (cdr operator) (car operand)))\n        (let ((op2 (car\
    \ (cdr operator))))\n          (if (null? (cdr (cdr operator)))\n            (+\
    \ (do_algebra (cdr (cdr operator)) (car operand)))\n            (let ((op3 (car\
    \ (cdr (cdr (cdr operator))))))\n              (if (null? (cdr (cdr (cdr (cdr\
    \ operator))))))\n                (+ (do_algebra (cdr (cdr (cdr (cdr (cdr operator))))\
    \ (car operand)))\n                  (+ (do_algebra (cdr (cdr (cdr (cdr (cdr (cdr\
    \ operator)))))) (car operand)))\n                  (+ (do_algebra (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (c", "  (if (null?\
    \ operand)\n    (+ operator)\n    (let ((result (car operand)))\n      (if (null?\
    \ (cdr operand))\n        (+ result operator)\n        (do_algebra (cdr operand)\
    \ (car operand)))))\n)\n", "  (define (do_operation op operand)\n    (if (null?\
    \ (cdr operand))\n      (car operand)\n      (do_operation (car operator) (cdr\
    \ operand))))\n  (do_operation (car operator) (cdr operand)))\n", "  (if (null?\
    \ operator)\n    (print \"Error: Operator list is empty.\")\n    (if (null? operand)\n\
    \      (print \"Error: Operand list is empty.\")\n      (print \"Error: Operator\
    \ list and operand list are both empty.\")\n      (exit)))\n  (if (null? operand)\n\
    \    (print \"Error: Operand list is empty.\")\n    (print \"Error: Operator list\
    \ and operand list are both empty.\")\n    (exit))\n  (if (length? operator)\n\
    \    (if (length? operand)\n      (print \"Error: Operator list and operand list\
    \ are both empty.\")\n      (exit))\n    (print \"Error: Operator list and operand\
    \ list are both empty.\")\n    (exit))\n  (if (null? operand)\n    (print \"Error:\
    \ Operand list is empty.\")\n    (exit))\n  (if (length? operand)\n    (if (length?\
    \ operator)\n      (print \"Error: Operator list and operand list are both empty.\"\
    )\n      (exit))\n    (print \"Error: Operator list and operand list are both\
    \ empty.\")\n    (exit))\n  (if (null? operator)\n    (print \"Error: Operator\
    \ list is empty.\")\n    (exit))\n  (if (length? operator)\n    (if (length? operand)\n\
    \      (print \"Error: Operator list and operand list are both empty.\")\n   \
    \   (exit))\n    (print \"Error: Operator list and operand list are both empty.\"\
    )\n    (exit))\n  (if (null? operand)\n    (print \"Error: Operand list is empty.\"\
    )\n    (exit))\n  (if (length? operand)\n    (if (length? operator)\n      (print\
    \ \"Error: Operator list and operand list are both empty.\")\n      (exit))\n\
    \    (print \"Error: Operator list and operand list are both empty.\")\n    (exit))\n\
    \  (if (null? operator)\n    (print \"Error: Operator list is empty.\")\n    (exit))\n\
    \  (if (length? operator)\n    (if (length? operand)\n      (print \"Error: Operator\
    \ list and operand list are both empty.\")\n      (exit))\n", "  (if (null? operator)\n\
    \    (+ operand)\n    (let ((op (car operator)))\n      (if (null? (cdr operator))\n\
    \        (+ (do_algebra (cdr operator) (car operand)))\n        (let ((op2 (car\
    \ (cdr operator))))\n          (if (null? (cdr (cdr operator)))\n            (+\
    \ (do_algebra (cdr (cdr operator)) (car operand)))\n            (let ((op3 (car\
    \ (cdr (cdr (cdr operator))))))\n              (if (null? (cdr (cdr (cdr (cdr\
    \ operator))))))\n                (+ (do_algebra (cdr (cdr (cdr (cdr (cdr operator))))\
    \ (car operand)))\n                  (do_algebra (cdr (cdr (cdr (cdr (cdr (cdr\
    \ operator)))))) (car operand)))\n                (do_algebra (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr operator)))))) (car operand)))\n              )\n           \
    \ )\n          )\n        )\n      )\n    )\n  )\n)\n", "  (if (null? operator)\n\
    \    (+ operand)\n    (let ((op (car operator)))\n      (if (null? (cdr operator))\n\
    \        (+ (do_algebra (cdr operator) (car operand)))\n        (let ((op2 (car\
    \ (cdr operator))))\n          (if (null? (cdr (cdr operator)))\n            (+\
    \ (do_algebra (cdr (cdr operator)) (car operand)))\n            (let ((op3 (car\
    \ (cdr (cdr (cdr operator)))))\n              (+ (do_algebra (cdr (cdr (cdr (cdr\
    \ operator)))) (car operand))))\n              (+ (do_algebra (cdr (cdr (cdr (cdr\
    \ (cdr operator)))) (car operand))))\n              (+ (do_algebra (cdr (cdr (cdr\
    \ (cdr (cdr (cdr operator)))))) (car operand))))\n            (+ (do_algebra (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr operator)))))) (car operand))))\n            (+\
    \ (do_algebra (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr", "  (let ((result 0))\n    (for-each (lambda (op)\n   \
    \   (if (eq op '+)\n        (+ result (car operand)))\n      (if (eq op '-)\n\
    \        (+ result (- (car operand) (cdr operand))))\n      (if (eq op '*)\n \
    \       (+ result (* (car operand) (cdr operand))))\n      (if (eq op '//)\n \
    \       (+ result (/ (car operand) (cdr operand))))\n      (if (eq op '**)\n \
    \       (+ result (pow (car operand) (cdr operand))))\n      (error \"Unknown\
    \ operator\"))))\n    result))\n", "  (if (null? operator)\n    (print \"Error:\
    \ Operator list is empty!\")\n    (print \"Error: Operand list is empty!\")\n\
    \    (print \"Error: Operator list and operand list are both empty!\"))\n  (if\
    \ (null? operand)\n    (print \"Error: Operand list is empty!\")\n    (print \"\
    Error: Operator list and operand list are both empty!\"))\n  (if (null? (cdr operand))\n\
    \    (print \"Error: Operand list is empty!\")\n    (print \"Error: Operator list\
    \ and operand list are both empty!\"))\n  (if (null? (cdr operator))\n    (print\
    \ \"Error: Operator list is empty!\")\n    (print \"Error: Operand list and operator\
    \ list are both empty!\"))\n  (if (null? (car operator))\n    (print \"Error:\
    \ Operator list is empty!\")\n    (print \"Error: Operand list and operator list\
    \ are both empty!\"))\n  (if (null? (car operand))\n    (print \"Error: Operand\
    \ list is empty!\")\n    (print \"Error: Operator list and operand list are both\
    \ empty!\"))\n  (if (car operator)\n    (if (car operand)\n      (print \"Error:\
    \ Operator list and operand list are both empty!\")\n      (print \"Error: Operator\
    \ list and operand list are both empty!\"))\n    (if (car (cdr operand))\n   \
    \   (print \"Error: Operator list and operand list are both empty!\")\n      (print\
    \ \"Error: Operator list and operand list are both empty!\"))\n    (if (car (cdr\
    \ operator))\n      (print \"Error: Operator list and operand list are both empty!\"\
    )\n      (print \"Error: Operator list and operand list are both empty!\"))\n\
    \    (if (car (car operand))\n      (print \"Error: Operator list and operand\
    \ list are both empty!\")\n      (print \"Error: Operator list and operand list\
    \ are both empty!\"))\n    (if (car (car operator))\n      (print \"Error: Operator\
    \ list and operand list are both empty!\")\n      (print \"Error: Operator list\
    \ and operand list are both empty!\"))\n    ", "  (define (do_operation op1 op2)\n\
    \    (if (eq? op1 op2)\n      1\n      (if (eq? op1 '+)\n        (do_operation\
    \ op2 op1)\n        (do_operation op1 op2))\n      (if (eq? op1 '-)\n        (do_operation\
    \ op2 op1)\n        (do_operation op1 op2))\n      (if (eq? op1 '*)\n        (do_operation\
    \ op2 op1)\n        (do_operation op1 op2))\n      (if (eq? op1 '//')\n      \
    \  (do_operation op2 op1)\n        (do_operation op1 op2))\n      (if (eq? op1\
    \ '**')\n        (do_operation op2 op1)\n        (do_operation op1 op2))\n   \
    \   (error \"Invalid operator\"))))\n  (do_operation operator operand))\n", " \
    \ (let ((result 0))\n    (for-each (lambda (op)\n                (if (eq op '+)\n\
    \                  (+ result (do_algebra operator (cdr operand))))\n         \
    \       (if (eq op '-)\n                  (+ result (do_algebra operator (cdr\
    \ operand))))\n                (if (eq op '*)\n                  (+ result (do_algebra\
    \ operator (cdr operand))))\n                (if (eq op '//)\n               \
    \   (+ result (do_algebra operator (cdr operand))))\n                (if (eq op\
    \ '**)\n                  (+ result (do_algebra operator (cdr operand))))\n  \
    \              (if (eq op '+')\n                  (+ result (do_algebra operator\
    \ (cdr operand))))\n                (if (eq op '-')\n                  (+ result\
    \ (do_algebra operator (cdr operand))))\n                (if (eq op '*')\n   \
    \               (+ result (do_algebra operator (cdr operand))))\n            \
    \    (if (eq op '//')\n                  (+ result (do_algebra operator (cdr operand))))\n\
    \                (if (eq op '**')\n                  (+ result (do_algebra operator\
    \ (cdr operand))))\n                (if (eq op '+')\n                  (+ result\
    \ (do_algebra operator (cdr operand))))\n                (if (eq op '-')\n   \
    \               (+ result (do_algebra operator (cdr operand))))\n            \
    \    (if (eq op '*')\n                  (+ result (do_algebra operator (cdr operand))))\n\
    \                (if (eq op '//')\n                  (+ result (do_algebra operator\
    \ (cdr operand))))\n                (if (eq op '**')\n                  (+ result\
    \ (do_algebra operator (cdr operand))))\n                (if (eq op '+')\n   \
    \               (+ result (do_algebra operator (cdr operand))))\n            \
    \    (if (eq op '-')\n                  (+ result (do_algebra operator (cdr operand))))\n\
    \                (if (eq op '*')\n                  (+ result (do_algebra operator\
    \ (cdr operand))))\n                (if (eq op '", "  (if (null? operator)\n \
    \   (+ operand)\n    (let ((op (car operator)))\n      (if (null? (cdr operator))\n\
    \        (+ (do_algebra (cdr operator) (car operand)))\n        (let ((op2 (car\
    \ (cdr operator))))\n          (if (null? (cdr (cdr operator)))\n            (+\
    \ (do_algebra (cdr (cdr operator)) (car operand)))\n            (let ((op3 (car\
    \ (cdr (cdr (cdr operator))))))\n              (if (null? (cdr (cdr (cdr (cdr\
    \ operator))))))\n                (+ (do_algebra (cdr (cdr (cdr (cdr (cdr operator))))\
    \ (car operand)))\n                  (do_algebra (cdr (cdr (cdr (cdr (cdr (cdr\
    \ operator)))))) (car operand))))\n              (do_algebra (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr operator)))))) (car operand)))))\n          (do_algebra (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr operator)))))) (car operand)))))\n      (do_algebra\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr operator)))))) (car operand)))))\n  ))\n",
  "  (define (algebra_op op1 op2)\n    (if (eq op1 '+)\n      (+ op1 op2)\n      (if\
    \ (eq op1 '-)\n        (-(op1 op2))\n        (if (eq op1 '*)\n          (* op1\
    \ op2)\n          (if (eq op1 '//)\n            (/ op1 op2)\n            (if (eq\
    \ op1 '**)\n              (** op1 op2)\n              (error \"Invalid operator\"\
    ))))))))\n  (define (algebra_op_list list)\n    (if (null? list)\n      (error\
    \ \"Empty list\")\n      (algebra_op list)))\n  (define (algebra_op_list_list\
    \ list1 list2)\n    (if (null? list1)\n      (error \"Empty list\")\n      (if\
    \ (null? list2)\n        (error \"Empty list\")\n        (algebra_op_list list1))))\n\
    \  (define (algebra_op_list_list_list list1 list2 list3)\n    (if (null? list1)\n\
    \      (error \"Empty list\")\n      (if (null? list2)\n        (error \"Empty\
    \ list\")\n        (if (null? list3)\n          (error \"Empty list\")\n     \
    \     (algebra_op_list_list list1 list2))))))\n  (define (algebra_op_list_list_list_list\
    \ list1 list2 list3 list4)\n    (if (null? list1)\n      (error \"Empty list\"\
    )\n      (if (null? list2)\n        (error \"Empty list\")\n        (if (null?\
    \ list3)\n          (error \"Empty list\")\n          (if (null? list4)\n    \
    \        (error \"Empty list\")\n            (algebra_op_list_list_list list1\
    \ list2 list3))))))\n  (define (algebra_op_list_list_list_list_list list1 list2\
    \ list3 list4 list5)\n    (if (null? list1)\n      (error \"Empty list\")\n  \
    \    (if (null? list2)\n        (error \"Empty list\")\n        (if (null", " \
    \ (if (null? operator)\n    (+ operand)\n    (let ((result 0))\n      (for-each\
    \ (lambda (x)\n                  (let ((op (car operator)))\n                \
    \    (if (null? op)\n                      (+ result x)\n                    \
    \  (let ((n (car operand)))\n                        (if (null? n)\n         \
    \                 (+ result x)\n                          (let ((m (car (cdr operand))))\n\
    \                            (if (null? m)\n                              (+ result\
    \ x)\n                              (+ result (apply op n m))))))))))\n      (+\
    \ result (cdr (cdr operand))))))\n", "  (define (do_operation op1 op2)\n    (if\
    \ (eq? op1 op2)\n      1\n      (if (eq? op1 '+)\n        (do_operation op2 op1)\n\
    \        (do_operation op1 op2))\n      (if (eq? op1 '-)\n        (do_operation\
    \ op2 op1)\n        (do_operation op1 op2))\n      (if (eq? op1 '*)\n        (do_operation\
    \ op2 op1)\n        (do_operation op1 op2))\n      (if (eq? op1 '//')\n      \
    \  (do_operation op2 op1)\n        (do_operation op1 op2))\n      (if (eq? op1\
    \ '**')\n        (do_operation op2 op1)\n        (do_operation op1 op2))\n   \
    \   (error \"Invalid operator\"))))\n  (do_operation operator operand))\n", " \
    \ (define (algebra_op op1 op2)\n    (if (eq op1 op2)\n      1\n      (if (eq op1\
    \ '+)\n        (+ op1 op2)\n        (if (eq op1 '-)\n          (-(op1 op2))\n\
    \          (if (eq op1 '*)\n            (* op1 op2)\n            (if (eq op1 '//)\n\
    \              (/ op1 op2)\n              (if (eq op1 '**)\n                (**\
    \ op1 op2)\n                (error \"Invalid operator\"))))))))))\n", "  (let\
    \ ((result 0))\n    (for-each (lambda (x)\n                (let ((op (car operator)))\n\
    \                  (let ((operand (cdr operator)))\n                    (if (eq\
    \ op '+)\n                        (+ result (car operand)))\n                \
    \    (if (eq op '-)\n                        (+ result (- (car operand) result)))\n\
    \                    (if (eq op '*)\n                        (+ result (* result\
    \ (car operand)))\n                    (if (eq op '//)\n                     \
    \   (+ result (/ (car operand) result)))\n                    (if (eq op '**)\n\
    \                        (+ result (* result (car operand)))\n               \
    \     (else\n                        (print \"Invalid operator\"))))))\n     \
    \         operand))\n    result))\n", "  (let ((result 0))\n    (for-each (lambda\
    \ (op)\n      (if (eq op '+)\n        (+ result operand)\n        (if (eq op '-)\n\
    \          (+ result (- operand result))\n          (if (eq op '*)\n         \
    \   (+ result (- result operand))\n            (if (eq op '//)\n             \
    \ (+ result (/ operand result))\n              (if (eq op '**)\n             \
    \   (+ result (** operand result))))))))\n    (+ result result)))\n)\n", "  (if\
    \ (null? operator)\n    (print \"Error: No operator!\")\n    (if (null? operand)\n\
    \      (print \"Error: No operand!\")\n      (print \"Error: Operator list is\
    \ empty!\")\n      (print \"Error: Operand list is empty!\")\n      (print \"\
    Error: Operator list is empty!\")\n      (print \"Error: Operand list is empty!\"\
    )\n      (print \"Error: Operator list is empty!\")\n      (print \"Error: Operand\
    \ list is empty!\")\n      (print \"Error: Operator list is empty!\")\n      (print\
    \ \"Error: Operand list is empty!\")\n      (print \"Error: Operator list is empty!\"\
    )\n      (print \"Error: Operand list is empty!\")\n      (print \"Error: Operator\
    \ list is empty!\")\n      (print \"Error: Operand list is empty!\")\n      (print\
    \ \"Error: Operator list is empty!\")\n      (print \"Error: Operand list is empty!\"\
    )\n      (print \"Error: Operator list is empty!\")\n      (print \"Error: Operand\
    \ list is empty!\")\n      (print \"Error: Operator list is empty!\")\n      (print\
    \ \"Error: Operand list is empty!\")\n      (print \"Error: Operator list is empty!\"\
    )\n      (print \"Error: Operand list is empty!\")\n      (print \"Error: Operator\
    \ list is empty!\")\n      (print \"Error: Operand list is empty!\")\n      (print\
    \ \"Error: Operator list is empty!\")\n      (print \"Error: Operand list is empty!\"\
    )\n      (print \"Error: Operator list is empty!\")\n      (print \"Error: Operand\
    \ list is empty!\")\n      (print \"Error: Operator list is empty!\")\n      (print\
    \ \"Error: Operand list is empty!\")\n      (print \"Error: Operator list is empty!\"\
    )\n      (print \"Error: Operand list is empty!\")\n      (print \"Error: Operator\
    \ list is empty!\")\n      (print \"Error: Operand list is empty!\")\n      (print\
    \ \"Error: Operator list is empty!\")\n      (print \"Error: Operand list is empty!\"\
    )\n      (print \"Error: Operator list is empty!\"", "  (define (do_operation\
    \ oprnd1 oprnd2)\n    (if (eq? oprnd1 oprnd2)\n      1\n      (if (eq? oprnd1\
    \ '+)\n        (do_operation oprnd1 oprnd2)\n        (if (eq? oprnd1 '-)\n   \
    \       (do_operation oprnd1 oprnd2)\n          (if (eq? oprnd1 '*)\n        \
    \    (do_operation oprnd1 oprnd2)\n            (if (eq? oprnd1 '//)\n        \
    \      (do_operation oprnd1 oprnd2)\n              (if (eq? oprnd1 '**)\n    \
    \            (do_operation oprnd1 oprnd2)\n                (error \"Invalid operator\"\
    ))))))))))\n  (if (null? operator)\n    (error \"Invalid operator\")))\n  (if\
    \ (null? operand)\n    (error \"Invalid operand\")))\n  (do_operation (car operator)\
    \ (car operand))\n  (do_operation (cdr operator) (cdr operand))\n  (do_operation\
    \ (car (cdr operator)) (car (cdr operand))))\n", "  (if (null? operator)\n   \
    \ (+ operand)\n    (let ((result (make-list 0)))\n      (for-each (lambda (x)\n\
    \                  (let ((result (make-list 0)))\n                    (if (null?\
    \ operand)\n                      (+ result x)\n                      (let ((result\
    \ (make-list 0)))\n                        (if (null? operand)\n             \
    \             (+ result x)\n                          (let ((result (make-list\
    \ 0)))\n                            (if (null? operand)\n                    \
    \          (+ result x)\n                              (+ result x))))))))\n \
    \       (+ result operand))))))\n", "  (if (null? operator)\n    (+ operand)\n\
    \    (let ((result (eval operand)))\n      (if (null? operator)\n        (+ result)\n\
    \        (let ((result (eval operand)))\n          (if (null? operator)\n    \
    \        (+ result)\n            (let ((result (eval operand)))\n            \
    \  (if (null? operator)\n                (+ result)\n                (let ((result\
    \ (eval operand)))\n                  (if (null? operator)\n                 \
    \   (+ result)\n                    (let ((result (eval operand)))\n         \
    \             (if (null? operator)\n                        (+ result)\n     \
    \                   (let ((result (eval operand)))\n                         \
    \ (if (null? operator)\n                            (+ result)\n             \
    \               (let ((result (eval operand)))\n                             \
    \ (if (null? operator)\n                                (+ result)\n         \
    \                       (let ((result (eval operand)))\n                     \
    \             (if (null? operator)\n                                    (+ result)\n\
    \                                    (let ((result (eval operand)))\n        \
    \                              (if (null? operator)\n                        \
    \                (+ result)\n                                        (let ((result\
    \ (eval operand)))\n                                          (if (null? operator)\n\
    \                                            (+ result)\n                    \
    \                        (let ((result (eval operand)))\n                    \
    \                          (if (null? operator)\n                            \
    \                    (+ result)\n                                            \
    \    (let ((result (eval operand)))\n                                        \
    \          (if (null? operator)\n                                            \
    \        (+ result)\n                                                    (let\
    \ ((result (eval operand)))\n                                                \
    \      (if (null? operator)\n                                                \
    \        (+ result)\n                                                        (let\
    \ ((result (eval operand)))\n                                                \
    \          (if (null? operator)\n                                            \
    \                (+ result)\n                                                \
    \            (let ((result (eval operand)))\n                                \
    \                              (if (null? operator)\n                        \
    \                                        (+ result)\n                        \
    \                                        (let ((result (eval operand)))\n    \
    \                           ", "  (if (null? operand)\n    (+ operator)\n    (let\
    \ ((result 0))\n      (for-each (lambda (x)\n                  (let ((y (first\
    \ operand)))\n                    (if (null? y)\n                      (+ result\
    \ x)\n                      (let ((z (second operand)))\n                    \
    \    (if (null? z)\n                          (+ result x)\n                 \
    \         (+ result (+ result (* x y) (* x z)))\n                        )\n \
    \                     )\n                    )\n                  )\n        \
    \        x)\n              result)\n    )\n)\n", "  (define (do_operation op1\
    \ op2)\n    (if (eq? op1 op2)\n      1\n      (if (eq? op1 '+)\n        (do_operation\
    \ op2 op1)\n        (do_operation op1 op2))\n      (if (eq? op1 '-)\n        (do_operation\
    \ op2 op1)\n        (do_operation op1 op2))\n      (if (eq? op1 '*)\n        (do_operation\
    \ op2 op1)\n        (do_operation op1 op2))\n      (if (eq? op1 '//')\n      \
    \  (do_operation op2 op1)\n        (do_operation op1 op2))\n      (if (eq? op1\
    \ '**')\n        (do_operation op2 op1)\n        (do_operation op1 op2))\n   \
    \   (error \"Invalid operator\"))))\n  (do_operation operator operand)\n  (do_operation\
    \ operator (cdr operand)))\n", "  (let ((result 0))\n    (for-each (lambda (op)\n\
    \      (if (eq op '+)\n        (+ result (do_algebra operator (cdr operand))))\n\
    \      (if (eq op '-)\n        (+ result (- (do_algebra operator (cdr operand))))\n\
    \      (if (eq op '*)\n        (+ result (* result (do_algebra operator (cdr operand))))\n\
    \      (if (eq op '//)\n        (+ result (/ result (do_algebra operator (cdr\
    \ operand))))\n      (if (eq op '**)\n        (+ result (** result (do_algebra\
    \ operator (cdr operand))))\n      )))\n    result))\n  result)\n", "  (let ((result\
    \ 0))\n    (for-each (lambda (op)\n      (if (eq op '+)\n        (+ result operand)\n\
    \        (if (eq op '-)\n          (+ result (- operand result))\n          (if\
    \ (eq op '*)\n            (+ result (- operand result))\n            (if (eq op\
    \ '//)\n              (+ result (/ operand result))\n              (if (eq op\
    \ '**)\n                (+ result (** operand result))))))))\n    result))\n)\n",
  "  (let ((result 0))\n    (for-each (lambda (op)\n      (if (eq op '+)\n       \
    \ (+ result operand)\n        (if (eq op '-)\n          (+ result (- operand result))\n\
    \          (if (eq op '*)\n            (+ result (- result operand))\n       \
    \     (if (eq op '//)\n              (+ result (/ operand result))\n         \
    \     (if (eq op '**)\n                (+ result (** operand result))))))))\n\
    \    result))\n)\n", "  (if (null? operator)\n    (print \"Error: operand list\
    \ is empty.\")\n    (if (null? operand)\n      (print \"Error: operator list is\
    \ empty.\")\n      (print \"Error: operand list and operator list have different\
    \ length.\")\n      (print \"Error: operand list and operator list have different\
    \ length.\")))\n  (if (null? operand)\n    (print \"Error: operand list is empty.\"\
    )\n    (if (null? operator)\n      (print \"Error: operator list is empty.\")\n\
    \      (print \"Error: operand list and operator list have different length.\"\
    )))\n  (if (null? operand)\n    (print \"Error: operand list is empty.\")\n  \
    \  (if (null? operator)\n      (print \"Error: operator list is empty.\")))\n\
    \  (if (null? operand)\n    (print \"Error: operand list is empty.\")))\n  (if\
    \ (null? operator)\n    (print \"Error: operator list is empty.\")))\n  (if (null?\
    \ operand)\n    (print \"Error: operand list is empty.\")))\n  (if (null? operand)\n\
    \    (print \"Error: operand list is empty.\")))\n  (if (null? operator)\n   \
    \ (print \"Error: operator list is empty.\")))\n  (if (null? operand)\n    (print\
    \ \"Error: operand list is empty.\")))\n  (if (null? operand)\n    (print \"Error:\
    \ operand list is empty.\")))\n  (if (null? operator)\n    (print \"Error: operator\
    \ list is empty.\")))\n  (if (null? operand)\n    (print \"Error: operand list\
    \ is empty.\")))\n  (if (null? operand)\n    (print \"Error: operand list is empty.\"\
    )))\n  (if (null? operator)\n    (print \"Error: operator list is empty.\")))\n\
    \  (if (null? operand)\n    (print \"Error: operand list is empty.\")))\n  (if\
    \ (null? operand)\n    (print \"Error: operand list is empty.\")))\n  (if (null?\
    \ operator)\n    (print \"Error: operator list is empty.\")))\n", "  (if (null?\
    \ operator)\n    (print \"Error: no operator.\")\n    (if (null? operand)\n  \
    \    (print \"Error: no operand.\")\n      (print \"Error: operator list is empty.\"\
    )\n      (print \"Error: operand list is empty.\"))\n    (let ((result 0))\n \
    \     (for-each (lambda (x)\n                  (if (null? operand)\n         \
    \           (print \"Error: operand list is empty.\")\n                    (if\
    \ (null? operator)\n                      (print \"Error: operator list is empty.\"\
    )\n                      (print \"Error: operand list is empty.\"))))\n      \
    \  (lambda (x)\n          (if (null? operand)\n            (print \"Error: operand\
    \ list is empty.\")\n            (if (null? operator)\n              (print \"\
    Error: operator list is empty.\")\n              (print \"Error: operand list\
    \ is empty.\"))))\n        (lambda (x)\n          (if (null? operand)\n      \
    \      (print \"Error: operand list is empty.\")\n            (if (null? operator)\n\
    \              (print \"Error: operator list is empty.\")\n              (print\
    \ \"Error: operand list is empty.\"))))\n        (lambda (x)\n          (if (null?\
    \ operand)\n            (print \"Error: operand list is empty.\")\n          \
    \  (if (null? operator)\n              (print \"Error: operator list is empty.\"\
    )\n              (print \"Error: operand list is empty.\"))))\n        (lambda\
    \ (x)\n          (if (null? operand)\n            (print \"Error: operand list\
    \ is empty.\")\n            (if (null? operator)\n              (print \"Error:\
    \ operator list is empty.\")\n              (print \"Error: operand list is empty.\"\
    ))))\n        (lambda (x)\n          (if (null? operand)\n            (print \"\
    Error: operand list is empty.\")\n            (if (null? operator)\n         \
    \     (print \"Error: operator list is empty.\")\n              (print \"Error:\
    \ operand list is empty.\"))))\n        (lambda (x)\n          (if (null? operand)\n\
    \            (print \"Error: operand list is empty.\")\n            (if (null?\
    \ operator)\n              (print \"Error", "  (define (do_operation oprnd1 oprnd2)\n\
    \    (if (eq? oprnd1 oprnd2)\n      (+ oprnd1 oprnd2)\n      (if (eq? oprnd1 oprnd2)\n\
    \        (+ oprnd1 oprnd2)\n        (if (eq? oprnd1 oprnd2)\n          (+ oprnd1\
    \ oprnd2)\n          (if (eq? oprnd1 oprnd2)\n            (+ oprnd1 oprnd2)\n\
    \            (if (eq? oprnd1 oprnd2)\n              (+ oprnd1 oprnd2)\n      \
    \        (if (eq? oprnd1 oprnd2)\n                (+ oprnd1 oprnd2)\n        \
    \        (if (eq? oprnd1 oprnd2)\n                  (+ oprnd1 oprnd2)\n      \
    \            (if (eq? oprnd1 oprnd2)\n                    (+ oprnd1 oprnd2)\n\
    \                    (if (eq? oprnd1 oprnd2)\n                      (+ oprnd1\
    \ oprnd2)\n                      (if (eq? oprnd1 oprnd2)\n                   \
    \     (+ oprnd1 oprnd2)\n                        (if (eq? oprnd1 oprnd2)\n   \
    \                       (+ oprnd1 oprnd2)\n                          (if (eq?\
    \ oprnd1 oprnd2)\n                            (+ oprnd1 oprnd2)\n            \
    \                (if (eq? oprnd1 oprnd2)\n                              (+ oprnd1\
    \ oprnd2)\n                              (if (eq? oprnd1 oprnd2)\n           \
    \                     (+ oprnd1 oprnd2)\n                                (if (eq?\
    \ oprnd1 oprnd2)\n                                  (+ oprnd1 oprnd2)\n      \
    \                            (if (eq? oprnd1 oprnd2)\n                       \
    \             (+ oprnd1 oprnd2)\n                                    (if (eq?\
    \ oprnd1 oprnd2)\n                                      (+ op", "  (define (calc_op\
    \ op operand)\n    (if (eq? op '+)\n      (+ (calc_op op (car operand)) (calc_op\
    \ op (cdr operand))))\n    (if (eq? op '-)\n      (+ (calc_op op (car operand))\
    \ (calc_op op (cdr operand))))\n    (if (eq? op '*)\n      (+ (calc_op op (car\
    \ operand)) (calc_op op (cdr operand))))\n    (if (eq? op '//)\n      (/ (calc_op\
    \ op (car operand)) (calc_op op (cdr operand))))\n    (if (eq? op '**)\n     \
    \ (let ((x (calc_op op (car operand))))\n        (let ((y (calc_op op (cdr operand))))\n\
    \          (let ((z (calc_op op y)))\n            (let ((w (calc_op op z)))\n\
    \              (+ (calc_op op x) (calc_op op w)))))))\n    (if (eq? op '**')\n\
    \      (let ((x (calc_op op (car operand))))\n        (let ((y (calc_op op (cdr\
    \ operand))))\n          (let ((z (calc_op op y)))\n            (let ((w (calc_op\
    \ op z)))\n              (let ((u (calc_op op w)))\n                (let ((v (calc_op\
    \ op u)))\n                  (+ (calc_op op x) (calc_op op v)))))))))))\n  (if\
    \ (null? operator)\n    (if (null? operand)\n      0\n      (let ((x (car operand)))\n\
    \        (let ((y (cdr operand)))\n          (let ((z (car y)))\n            (let\
    \ ((w (car z)))\n              (let ((u (car w)))\n                (let ((v (car\
    \ u)))\n                  (let ((t (car v)))\n                    (if (eq? t 'integer)\n\
    \                      (+ (calc_op op x) (calc_op op y))\n                   \
    \   (", "  (define (do_operation op operand)\n    (if (eq? op '+)\n      (+ (do_operation\
    \ op (car operand)) (do_operation op (cdr operand))))\n    (if (eq? op '-)\n \
    \     (+ (do_operation op (car operand)) (- (do_operation op (cdr operand))))\n\
    \    (if (eq? op '*)\n      (+ (do_operation op (car operand)) (* (do_operation\
    \ op (cdr operand))))\n    (if (eq? op '//)\n      (/ (do_operation op (car operand))\
    \ (do_operation op (cdr operand))))\n    (if (eq? op '**)\n      (** (do_operation\
    \ op (car operand)) (do_operation op (cdr operand))))\n    (if (eq? op '**)\n\
    \      (** (do_operation op (car operand)) (do_operation op (cdr operand))))\n\
    \    (if (eq? op '**)\n      (** (do_operation op (car operand)) (do_operation\
    \ op (cdr operand))))\n    (if (eq? op '**)\n      (** (do_operation op (car operand))\
    \ (do_operation op (cdr operand))))\n    (if (eq? op '**)\n      (** (do_operation\
    \ op (car operand)) (do_operation op (cdr operand))))\n    (if (eq? op '**)\n\
    \      (** (do_operation op (car operand)) (do_operation op (cdr operand))))\n\
    \    (if (eq? op '**)\n      (** (do_operation op (car operand)) (do_operation\
    \ op (cdr operand))))\n    (if (eq? op '**)\n      (** (do_operation op (car operand))\
    \ (do_operation op (cdr operand))))\n    (if (eq? op '**)\n      (** (do_operation\
    \ op (car operand)) (do_operation op (cdr operand))))\n    (if (eq? op '**)\n\
    \      (** (do_operation op (car operand)) (do_operation op (", "  (let ((result\
    \ 0))\n    (for-each (lambda (x)\n                (let ((y (car x)))\n       \
    \           (if (eq y '+)\n                    (+ result (cdr x)))\n         \
    \         (if (eq y '-)\n                    (+ result (- (cdr x) result)))))\n\
    \      operand))\n  result)\n", "  (if (null? operator)\n    (print \"Error: operand\
    \ list is empty.\")\n    (if (null? operand)\n      (print \"Error: operator list\
    \ is empty.\")\n      (print \"Error: operand list and operator list are both\
    \ empty.\")\n      (print \"Error: operand list and operator list are both empty.\"\
    )))\n  (if (null? operand)\n    (print \"Error: operand list is empty.\")\n  \
    \  (if (null? operator)\n      (print \"Error: operator list is empty.\")\n  \
    \    (print \"Error: operand list and operator list are both empty.\")))\n  (if\
    \ (null? operator)\n    (print \"Error: operator list is empty.\")\n    (if (null?\
    \ operand)\n      (print \"Error: operand list is empty.\")\n      (print \"Error:\
    \ operand list and operator list are both empty.\")))\n  (if (null? operand)\n\
    \    (print \"Error: operand list is empty.\")\n    (if (null? operator)\n   \
    \   (print \"Error: operator list is empty.\")\n      (print \"Error: operand\
    \ list and operator list are both empty.\")))\n  (if (null? operator)\n    (print\
    \ \"Error: operator list is empty.\")\n    (if (null? operand)\n      (print \"\
    Error: operand list is empty.\")\n      (print \"Error: operand list and operator\
    \ list are both empty.\")))\n  (if (null? operand)\n    (print \"Error: operand\
    \ list is empty.\")\n    (if (null? operator)\n      (print \"Error: operator\
    \ list is empty.\")\n      (print \"Error: operand list and operator list are\
    \ both empty.\")))\n  (if (null? operator)\n    (print \"Error: operator list\
    \ is empty.\")\n    (if (null? operand)\n      (print \"Error: operand list is\
    \ empty.\")\n      (print \"Error: operand list and operator list are both empty.\"\
    )))\n  (if (null? operand)\n    (print \"Error: operand list is empty.\")\n  \
    \  (if (null? operator)\n      (print \"Error: operator list is empty.\")\n  \
    \    (print \"Error: operand list and operator list are both empty.\")))", " \
    \ (define (algebra_op op1 op2)\n    (if (eq? op1 op2)\n      (+ op1 op2)\n   \
    \   (if (eq? op1 '+)\n        (algebra_op op2 op1)\n        (if (eq? op2 '-)\n\
    \          (algebra_op op1 op2)\n          (if (eq? op2 '*)\n            (algebra_op\
    \ op1 op2)\n            (if (eq? op2 '//)\n              (algebra_op op1 op2)\n\
    \              (if (eq? op2 '**)\n                (algebra_op op1 op2)\n     \
    \           (error \"Invalid operator\"))))))))\n  (if (empty? operator)\n   \
    \ (error \"Invalid operator list\")\n  (if (empty? operand)\n    (error \"Invalid\
    \ operand list\")\n  (if (null? (car operator))\n    (error \"Invalid operator\"\
    )\n  (if (null? (car operand))\n    (error \"Invalid operand\")\n  (if (null?\
    \ (cdr operator))\n    (error \"Invalid operator\")\n  (if (null? (cdr operand))\n\
    \    (error \"Invalid operand\")\n  (if (null? (car (cdr operator)))\n    (error\
    \ \"Invalid operator\")\n  (if (null? (car (cdr operand)))\n    (error \"Invalid\
    \ operand\")\n  (if (null? (cdr (cdr operator)))\n    (error \"Invalid operator\"\
    )\n  (if (null? (cdr (cdr operand)))\n    (error \"Invalid operand\")\n  (if (null?\
    \ (car (cdr (cdr operator))))\n    (error \"Invalid operator\")\n  (if (null?\
    \ (car (cdr (cdr operand))))\n    (error \"Invalid operand\")\n  (if (null? (cdr\
    \ (cdr (cdr operator))))\n    (error \"Invalid operator\")\n  (if (null? (cdr\
    \ (cdr (cdr operand))))\n    (error \"Invalid operand\")\n  (if (null? (car (cdr\
    \ (cdr (cdr operator))))))\n    (error \"Invalid operator", "  (let ((result 0))\n\
    \    (for-each (lambda (op)\n      (if (eq op '+)\n        (+ result operand)\n\
    \        (if (eq op '-)\n          (+ result (- operand result))\n          (if\
    \ (eq op '*)\n            (+ result (- result operand))\n            (if (eq op\
    \ '//)\n              (+ result (/ operand result))\n              (if (eq op\
    \ '**)\n                (+ result (** operand result))))))))\n      operator))\n\
    \  result))\n", "  (define (algebra_op op1 op2)\n    (if (eq? op1 op2)\n     \
    \ (+ op1 op2)\n      (if (eq? op1 '+)\n        (algebra_op op2 op1)\n        (if\
    \ (eq? op2 '-)\n          (algebra_op op1 op2)\n          (if (eq? op2 '*)\n \
    \           (algebra_op op2 op1)\n            (if (eq? op2 '//)\n            \
    \  (algebra_op op1 op2)\n              (if (eq? op2 '**)\n                (algebra_op\
    \ op2 op1)\n                (error \"Invalid operator\"))))))))\n  (if (empty?\
    \ operator)\n    (error \"Operator list is empty\")\n  (if (empty? operand)\n\
    \    (error \"Operand list is empty\")\n  (if (null? (car operator))\n    (error\
    \ \"Operator list is empty\")\n  (if (null? (car operand))\n    (error \"Operand\
    \ list is empty\")\n  (if (null? (cdr operator))\n    (error \"Operator list is\
    \ empty\")\n  (if (null? (cdr operand))\n    (error \"Operand list is empty\"\
    )\n  (if (null? (car (car operator)))\n    (error \"Operator list is empty\")\n\
    \  (if (null? (car (car operand)))\n    (error \"Operand list is empty\")\n  (if\
    \ (null? (car (cdr operator)))\n    (error \"Operator list is empty\")\n  (if\
    \ (null? (car (cdr operand)))\n    (error \"Operand list is empty\")\n  (if (null?\
    \ (car (cdr (car operator))))\n    (error \"Operator list is empty\")\n  (if (null?\
    \ (car (cdr (car operand))))\n    (error \"Operand list is empty\")\n  (if (null?\
    \ (car (cdr (cdr operator))))\n    (error \"Operator list is empty\")\n  (if (null?\
    \ (car (cdr (cdr operand))))\n    (error \"Operand list is empty\")\n  (", " \
    \ (if (null? operator)\n    (print \"Error: No operator!\")\n    (if (null? operand)\n\
    \      (print \"Error: No operand!\")\n      (print \"Error: Operator list is\
    \ empty!\")\n      (print \"Error: Operand list is empty!\")\n      (print \"\
    Error: Operator list is too short!\")\n      (print \"Error: Operand list is too\
    \ short!\")\n      (print \"Error: Operator list is too long!\")\n      (print\
    \ \"Error: Operand list is too long!\")\n      (print \"Error: Operator list is\
    \ too long!\")\n      (print \"Error: Operand list is too long!\")\n      (print\
    \ \"Error: Operator list is too long!\")\n      (print \"Error: Operand list is\
    \ too long!\")\n      (print \"Error: Operator list is too long!\")\n      (print\
    \ \"Error: Operand list is too long!\")\n      (print \"Error: Operator list is\
    \ too long!\")\n      (print \"Error: Operand list is too long!\")\n      (print\
    \ \"Error: Operator list is too long!\")\n      (print \"Error: Operand list is\
    \ too long!\")\n      (print \"Error: Operator list is too long!\")\n      (print\
    \ \"Error: Operand list is too long!\")\n      (print \"Error: Operator list is\
    \ too long!\")\n      (print \"Error: Operand list is too long!\")\n      (print\
    \ \"Error: Operator list is too long!\")\n      (print \"Error: Operand list is\
    \ too long!\")\n      (print \"Error: Operator list is too long!\")\n      (print\
    \ \"Error: Operand list is too long!\")\n      (print \"Error: Operator list is\
    \ too long!\")\n      (print \"Error: Operand list is too long!\")\n      (print\
    \ \"Error: Operator list is too long!\")\n      (print \"Error: Operand list is\
    \ too long!\")\n      (print \"Error: Operator list is too long!\")\n      (print\
    \ \"Error: Operand list is too long!\")\n      (print \"Error: Operator list is\
    \ too long!\")\n      (print \"Error: Operand list is too long!\")\n      (print\
    \ \"Error: Operator list", "  (if (null? operand)\n    (error \"Operand list is\
    \ empty\")\n    (if (null? operator)\n      (error \"Operand list has only one\
    \ operand\")\n      (if (null? (cdr operand))\n        (error \"Operator list\
    \ has only one operator\")\n        (if (null? (cdr (cdr operand)))\n        \
    \  (error \"Operator list has only one operand\")\n          (let ((result (eval\
    \ (car operand))))\n            (if (null? result)\n              (error \"Result\
    \ is null\")\n              (let ((result (eval (car (cdr operand))))\n      \
    \              (if (null? result)\n                      (error \"Result is null\"\
    )\n                      (let ((result (eval (car (cdr (cdr operand))))\n    \
    \                          (if (null? result)\n                              \
    \  (error \"Result is null\")\n                                (let ((result (eval\
    \ (car (cdr (cdr (cdr operand
  "  (let ((result 0))\n    (for-each (lambda (op)\n                (if (eq op '+)\n\
    \                  (+ result operand)\n                  (if (eq op '-)\n    \
    \                (+ (- result) operand)\n                    (if (eq op '*)\n\
    \                      (+ (* result operand) result)\n                      (if\
    \ (eq op '//)\n                        (+ (* result operand) result)\n       \
    \                 (if (eq op '**)\n                          (+ (* result operand)\
    \ result)\n                          (error \"Invalid operator\"))))))\n     \
    \           operator))\n    result))\n", "  (if (null? operator)\n    (+ operand)\n\
    \    (let ((result (eval operand)))\n      (if (null? operand)\n        result\n\
    \        (do_algebra (operator (cdr operand)) result)))\n  )\n)\n", "  (if (null?\
    \ operator)\n    (+ operand)\n    (let ((result 0))\n      (for-each (lambda (x)\n\
    \                  (if (null? x)\n                    (+ result x)\n         \
    \           (let ((result (+ result x)))\n                      (+ result (* x\
    \ result))))))\n      (+ result operand)))\n)\n", "  (let ((result 0))\n    (for-each\
    \ (lambda (op)\n      (if (eq op '+)\n        (+ result (car operand)))\n    \
    \  (if (eq op '-)\n        (+ result (- (car operand) (cdr operand))))\n     \
    \ (if (eq op '*)\n        (+ result (* (car operand) (cdr operand))))\n      (if\
    \ (eq op '//)\n        (+ result (/ (car operand) (cdr operand))))\n      (if\
    \ (eq op '**)\n        (+ result (** (car operand) (cdr operand))))\n      (if\
    \ (eq op '<')\n        (+ result (< (car operand) (cdr operand))))\n      (if\
    \ (eq op '>')\n        (+ result (> (car operand) (cdr operand))))\n      (if\
    \ (eq op '<=')\n        (+ result (<= (car operand) (cdr operand))))\n      (if\
    \ (eq op '>=')\n        (+ result (>= (car operand) (cdr operand))))\n      (if\
    \ (eq op '=')\n        (+ result (= (car operand) (cdr operand))))\n      (if\
    \ (eq op '!=')\n        (+ result (!= (car operand) (cdr operand))))\n      (if\
    \ (eq op 'and')\n        (+ result (and (car operand) (cdr operand))))\n     \
    \ (if (eq op 'or')\n        (+ result (or (car operand) (cdr operand))))\n   \
    \   (if (eq op 'not')\n        (+ result (not (car operand))))\n      (if (eq\
    \ op 'list')\n        (+ result (do_algebra (car operand) (cdr operand))))\n \
    \     (if (eq op '+')\n        (+ result (do_algebra (car operand) (cdr operand))))\n\
    \      (if (eq op '-')\n        (+ result (do_algebra (car operand) (cdr operand))))\n\
    \      (if (eq op '*')\n        (+ result (do_algebra (car operand) (", "  (if\
    \ (null? operator)\n    (print \"Error: No operator!\")\n    (if (null? operand)\n\
    \      (print \"Error: No operand!\")\n      (print \"Error: No operator!\")\n\
    \      (print \"Error: No operand!\")\n      (print \"Error: No operator!\")\n\
    \      (print \"Error: No operand!\")\n      (print \"Error: No operator!\")\n\
    \      (print \"Error: No operand!\")\n      (print \"Error: No operator!\")\n\
    \      (print \"Error: No operand!\")\n      (print \"Error: No operator!\")\n\
    \      (print \"Error: No operand!\")\n      (print \"Error: No operator!\")\n\
    \      (print \"Error: No operand!\")\n      (print \"Error: No operator!\")\n\
    \      (print \"Error: No operand!\")\n      (print \"Error: No operator!\")\n\
    \      (print \"Error: No operand!\")\n      (print \"Error: No operator!\")\n\
    \      (print \"Error: No operand!\")\n      (print \"Error: No operator!\")\n\
    \      (print \"Error: No operand!\")\n      (print \"Error: No operator!\")\n\
    \      (print \"Error: No operand!\")\n      (print \"Error: No operator!\")\n\
    \      (print \"Error: No operand!\")\n      (print \"Error: No operator!\")\n\
    \      (print \"Error: No operand!\")\n      (print \"Error: No operator!\")\n\
    \      (print \"Error: No operand!\")\n      (print \"Error: No operator!\")\n\
    \      (print \"Error: No operand!\")\n      (print \"Error: No operator!\")\n\
    \      (print \"Error: No operand!\")\n      (print \"Error: No operator!\")\n\
    \      (print \"Error: No operand!\")\n      (print \"Error: No operator!\")\n\
    \      (print \"Error: No operand!\")\n      (print \"Error: No operator!\")\n\
    \      (print \"Error: No operand!\")\n      (print \"Error: No operator!\")\n\
    \      (print \"Error: No operand!\")\n      (print \"Error: No operator!\")",
  "  (let ((result 0))\n    (for-each (lambda (x)\n                (let ((op (car\
    \ operator)))\n                  (let ((operand (cdr operator)))\n           \
    \         (if (null operand)\n                      (result x)\n             \
    \         (let ((op2 (car operand)))\n                        (let ((operand2\
    \ (cdr operand)))\n                          (if (null operand2)\n           \
    \                 (result (eval op x) (eval op2 x))\n                        \
    \    (result (eval op x) (eval op2 x) (eval op x) (eval op2 x))\n            \
    \              )\n                        )\n                      )\n       \
    \             )\n                  )\n                x)\n              operand)\n\
    \    (result result)\n  )\n)\n", "  (let ((result 0))\n    (for-each (lambda (op)\n\
    \                (if (eq op '+)\n                  (+ result operand)\n      \
    \            (if (eq op '-)\n                    (+ result (- operand result))\n\
    \                    (if (eq op '*)\n                      (+ result (- operand\
    \ result))\n                      (if (eq op '//)\n                        (+\
    \ result (/ operand result))\n                        (if (eq op '**)\n      \
    \                    (+ result (expt operand result))))))))\n      operator))\n",
  "  (if (null? operator)\n    (print \"Error: no operator!\")\n    (if (null? operand)\n\
    \      (print \"Error: no operand!\")\n      (print \"Error: no operator!\")))\n\
    \  (if (null? operand)\n    (print \"Error: no operand!\")\n    (print \"Error:\
    \ no operator!\")))\n", "  (if (null? operator)\n    (print \"Error: operand list\
    \ is empty.\")\n    (if (null? operand)\n      (print \"Error: operator list is\
    \ empty.\")\n      (print \"Error: operand list and operator list should have\
    \ at least one element each.\")\n      (print \"Error: operand list and operator\
    \ list should have at least two elements each.\")\n      (print \"Error: operand\
    \ list and operator list should have the same length.\")\n      (print \"Error:\
    \ operand list and operator list should have the same length.\")\n      (print\
    \ \"Error: operand list and operator list should have the same length.\")\n  \
    \    (print \"Error: operand list and operator list should have the same length.\"\
    )\n      (print \"Error: operand list and operator list should have the same length.\"\
    )\n      (print \"Error: operand list and operator list should have the same length.\"\
    )\n      (print \"Error: operand list and operator list should have the same length.\"\
    )\n      (print \"Error: operand list and operator list should have the same length.\"\
    )\n      (print \"Error: operand list and operator list should have the same length.\"\
    )\n      (print \"Error: operand list and operator list should have the same length.\"\
    )\n      (print \"Error: operand list and operator list should have the same length.\"\
    )\n      (print \"Error: operand list and operator list should have the same length.\"\
    )\n      (print \"Error: operand list and operator list should have the same length.\"\
    )\n      (print \"Error: operand list and operator list should have the same length.\"\
    )\n      (print \"Error: operand list and operator list should have the same length.\"\
    )\n      (print \"Error: operand list and operator list should have the same length.\"\
    )\n      (print \"Error: operand list and operator list should have the same length.\"\
    )\n      (print \"Error: operand list and operator list should have the same length.\"\
    )\n      (print \"Error: operand list and operator list should have the same length.\"\
    )\n      (print \"Error: operand list and operator list should have the same length.\"\
    )\n      (print \"Error: operand list and operator list should have the same length.\"\
    )\n      (print \"Error: operand list and operator list should have the same length.\"\
    )\n      (print \"Error: operand", "  (define (do_operation oprnd1 oprnd2)\n \
    \   (if (eq? oprnd1 oprnd2)\n      (+ oprnd1 oprnd2)\n      (if (eq? oprnd1 oprnd2)\n\
    \        (+ oprnd1 oprnd2)\n        (if (eq? oprnd1 oprnd2)\n          (+ oprnd1\
    \ oprnd2)\n          (if (eq? oprnd1 oprnd2)\n            (+ oprnd1 oprnd2)\n\
    \            (if (eq? oprnd1 oprnd2)\n              (+ oprnd1 oprnd2)\n      \
    \        (if (eq? oprnd1 oprnd2)\n                (+ oprnd1 oprnd2)\n        \
    \        (if (eq? oprnd1 oprnd2)\n                  (+ oprnd1 oprnd2)\n      \
    \            (if (eq? oprnd1 oprnd2)\n                    (+ oprnd1 oprnd2)\n\
    \                    (if (eq? oprnd1 oprnd2)\n                      (+ oprnd1\
    \ oprnd2)\n                      (if (eq? oprnd1 oprnd2)\n                   \
    \     (+ oprnd1 oprnd2)\n                        (if (eq? oprnd1 oprnd2)\n   \
    \                       (+ oprnd1 oprnd2)\n                          (if (eq?\
    \ oprnd1 oprnd2)\n                            (+ oprnd1 oprnd2)\n            \
    \                (if (eq? oprnd1 oprnd2)\n                              (+ oprnd1\
    \ oprnd2)\n                              (if (eq? oprnd1 oprnd2)\n           \
    \                     (+ oprnd1 oprnd2)\n                                (if (eq?\
    \ oprnd1 oprnd2)\n                                  (+ oprnd1 oprnd2)\n      \
    \                            (if (eq? oprnd1 oprnd2)\n                       \
    \             (+ oprnd1 oprnd2)\n                                    (if (eq?\
    \ oprnd1 oprnd2)\n                                      (+ op", "  (let ((result\
    \ 0))\n    (for-each (lambda (x)\n                (let ((op (car operator)))\n\
    \                  (let ((operand (cdr operator)))\n                    (if (null\
    \ operand)\n                      (result x)\n                      (let ((y (car\
    \ operand)))\n                        (result (+ result (* x y) (if op '+ '-))))))))\n\
    \              operand))\n  result)\n", "  (define (do_operation op1 op2)\n  \
    \  (if (eq? op1 op2)\n      1\n      (if (eq? op1 '+)\n        (do_operation op2\
    \ op1)\n        (do_operation op1 op2))\n      (if (eq? op1 '-)\n        (do_operation\
    \ op2 op1)\n        (do_operation op1 op2))\n      (if (eq? op1 '*)\n        (do_operation\
    \ op2 op1)\n        (do_operation op1 op2))\n      (if (eq? op1 '//')\n      \
    \  (do_operation op2 op1)\n        (do_operation op1 op2))\n      (if (eq? op1\
    \ '**')\n        (do_operation op2 op1)\n        (do_operation op1 op2))\n   \
    \   (error \"Invalid operator\"))))\n  (do_operation operator operand))\n", " \
    \ (let ((result 0))\n    (for-each (lambda (x)\n                (let ((y (+ (car\
    \ operator) (car x))\n                       (z (- (car operator) (car x))))\n\
    \                     (result (+ y z))))\n                (cdr x)))\n      operand)\n\
    \  result)\n", "  (if (null? operator)\n    (+ operand)\n    (let ((op (car operator)))\n\
    \      (if (null? (cdr operator))\n        (+ (do_algebra (cdr operator) (car\
    \ operand)))\n        (let ((op2 (car (cdr operator))))\n          (if (null?\
    \ (cdr (cdr operator)))\n            (+ (do_algebra (cdr (cdr operator)) (car\
    \ operand))\n              (+ (do_algebra (cdr (cdr (cdr operator))) (car (cdr\
    \ operand))))\n            (+ (do_algebra (cdr (cdr (cdr (cdr operator)))) (car\
    \ (cdr (cdr operand))))\n              (+ (do_algebra (cdr (cdr (cdr (cdr (cdr\
    \ operator)))) (car (cdr (cdr (cdr operand)))))))))))\n      ))\n  )\n)\n", " \
    \ (let ((result 0))\n    (for-each (lambda (op)\n      (if (eq op '+)\n      \
    \  (+ result (car operand)))\n      (if (eq op '-)\n        (+ result (- (car\
    \ operand) (cdr operand))))\n      (if (eq op '*)\n        (+ result (* (car operand)\
    \ (cdr operand))))\n      (if (eq op '//)\n        (+ result (/ (car operand)\
    \ (cdr operand))))\n      (if (eq op '**)\n        (+ result (* (car operand)\
    \ (cdr operand)))))\n    (set! result result)))\n  result)\n", "  (if (null? operator)\n\
    \    (+ operand)\n    (if (null? operand)\n      (+ operator)\n      (do_algebra\
    \ (cdr operator) (car operand)))))\n", "  (if (null? operator)\n    (print \"\
    Error: Operator list is empty.\")\n    (if (null? operand)\n      (print \"Error:\
    \ Operand list is empty.\")\n      (print \"Error: Operator list and operand list\
    \ are both empty.\")\n      (print \"Error: Operator list and operand list are\
    \ both empty.\"))\n    (print \"Error: Operator list and operand list are both\
    \ empty.\"))\n  (if (null? operator)\n    (print \"Error: Operator list is empty.\"\
    )\n    (if (null? operand)\n      (print \"Error: Operand list is empty.\")\n\
    \      (print \"Error: Operator list and operand list are both empty.\")\n   \
    \   (print \"Error: Operator list and operand list are both empty.\"))\n    (print\
    \ \"Error: Operator list and operand list are both empty.\"))\n  (if (null? operator)\n\
    \    (print \"Error: Operator list is empty.\")\n    (if (null? operand)\n   \
    \   (print \"Error: Operand list is empty.\")\n      (print \"Error: Operator\
    \ list and operand list are both empty.\")\n      (print \"Error: Operator list\
    \ and operand list are both empty.\"))\n    (print \"Error: Operator list and\
    \ operand list are both empty.\"))\n  (if (null? operator)\n    (print \"Error:\
    \ Operator list is empty.\")\n    (if (null? operand)\n      (print \"Error: Operand\
    \ list is empty.\")\n      (print \"Error: Operator list and operand list are\
    \ both empty.\")\n      (print \"Error: Operator list and operand list are both\
    \ empty.\"))\n    (print \"Error: Operator list and operand list are both empty.\"\
    ))\n  (if (null? operator)\n    (print \"Error: Operator list is empty.\")\n \
    \   (if (null? operand)\n      (print \"Error: Operand list is empty.\")\n   \
    \   (print \"Error: Operator list and operand list are both empty.\")\n      (print\
    \ \"Error: Operator list and operand list are both empty.\"))\n    (print \"Error:\
    \ Operator list and operand list are both empty.\"))\n  (if (null? operator)\n\
    \    (print \"Error: Operator list is empty.\")\n    (if (null?", "  (if (null?\
    \ operand)\n    (+ operator)\n    (let ((result 0))\n      (for-each (lambda (x)\n\
    \                  (if (null? x)\n                    (+ result x)\n         \
    \           (let ((y (car x)))\n                      (if (null? y)\n        \
    \                (+ result y)\n                        (let ((z (cdr x)))\n  \
    \                        (if (null? z)\n                            (+ result\
    \ z)\n                            (+ result (* y z))))))))\n        operand)))))\n",
  "  (let ((result 0))\n    (for-each (lambda (op)\n      (if (eq op '+)\n       \
    \ (+ result (do_algebra operator (cdr operand))))\n      (if (eq op '-)\n    \
    \    (+ result (- (do_algebra operator (cdr operand))))\n      (if (eq op '*)\n\
    \        (+ result (* result (do_algebra operator (cdr operand))))\n      (if\
    \ (eq op '//)\n        (+ result (/ result (do_algebra operator (cdr operand))))\n\
    \      (if (eq op '**)\n        (+ result (** result (do_algebra operator (cdr\
    \ operand))))\n      (if (eq op '+')\n        (+ result (do_algebra operator (cdr\
    \ operand))))\n      (if (eq op '-')\n        (+ result (- (do_algebra operator\
    \ (cdr operand))))\n      (if (eq op '*')\n        (+ result (* (do_algebra operator\
    \ (cdr operand))))\n      (if (eq op '//')\n        (+ result (/ (do_algebra operator\
    \ (cdr operand))))\n      (if (eq op '**')\n        (+ result (** (do_algebra\
    \ operator (cdr operand))))\n      (if (eq op '+')\n        (+ result (do_algebra\
    \ operator (cdr operand))))\n      (if (eq op '-')\n        (+ result (- (do_algebra\
    \ operator (cdr operand))))\n      (if (eq op '*')\n        (+ result (* (do_algebra\
    \ operator (cdr operand))))\n      (if (eq op '//')\n        (+ result (/ (do_algebra\
    \ operator (cdr operand))))\n      (if (eq op '**')\n        (+ result (** (do_algebra\
    \ operator (cdr operand))))))))\n    (+ result (car operand))))))\n", "  (if (null?\
    \ operator)\n    (+ operand)\n    (let ((op (car operator)))\n      (if (null?\
    \ (cdr operator))\n        (+ (do_algebra (cdr operator) (car operand)))\n   \
    \     (let ((op2 (car (cdr operator))))\n          (if (null? (cdr (cdr operator)))\n\
    \            (+ (do_algebra (cdr (cdr operator)) (car operand)))\n           \
    \ (let ((op3 (car (cdr (cdr (cdr operator)))))\n              (+ (do_algebra (cdr\
    \ (cdr (cdr (cdr operator)))) (car operand))))\n              (if (null? (cdr\
    \ (cdr (cdr (cdr (cdr operator))))))\n                (+ (do_algebra (cdr (cdr\
    \ (cdr (cdr (cdr (cdr operator)))))) (car operand)))\n                (+ (do_algebra\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (c",
  "  (define (calc_op op operand)\n    (if (eq? op '+)\n      (+ (calc_op op (car\
    \ operand)) (calc_op op (cdr operand))))\n    (if (eq? op '-)\n      (+ (calc_op\
    \ op (car operand)) (calc_op op (cdr operand))))\n    (if (eq? op '*)\n      (+\
    \ (calc_op op (car operand)) (calc_op op (cdr operand))))\n    (if (eq? op '//)\n\
    \      (/ (calc_op op (car operand)) (calc_op op (cdr operand))))\n    (if (eq?\
    \ op '**)\n      (let ((n (calc_op op (car operand))))\n        (let ((m (calc_op\
    \ op (cdr operand))))\n          (* n m))))\n    (if (eq? op '**)\n      (let\
    \ ((n (calc_op op (car operand))))\n        (let ((m (calc_op op (cdr operand))))\n\
    \          (* n m))))\n    (if (eq? op '**)\n      (let ((n (calc_op op (car operand))))\n\
    \        (let ((m (calc_op op (cdr operand))))\n          (* n m))))\n    (if\
    \ (eq? op '**)\n      (let ((n (calc_op op (car operand))))\n        (let ((m\
    \ (calc_op op (cdr operand))))\n          (* n m))))\n    (if (eq? op '**)\n \
    \     (let ((n (calc_op op (car operand))))\n        (let ((m (calc_op op (cdr\
    \ operand))))\n          (* n m))))\n    (if (eq? op '**)\n      (let ((n (calc_op\
    \ op (car operand))))\n        (let ((m (calc_op op (cdr operand))))\n       \
    \   (* n m))))\n    (if (eq? op '**)\n      (let ((n (calc_op op (car operand))))\n\
    \        (let ((m (cal", "  (define (algebra_add operand)\n    (+ operand (operator[0]\
    \ operand)))\n  (define (algebra_sub operand)\n    (+ (operator[0] operand) (operator[1]\
    \ operand)))\n  (define (algebra_mul operand)\n    (+ (operator[0] operand) (operator[1]\
    \ operand)))\n  (define (algebra_div operand)\n    (+ (operator[0] operand) (operator[1]\
    \ operand)))\n  (define (algebra_exp operand)\n    (+ (operator[0] operand) (operator[1]\
    \ operand)))\n  (define (algebra_pow operand)\n    (+ (operator[0] operand) (operator[1]\
    \ operand)))\n  (define (algebra_floor_div operand)\n    (+ (operator[0] operand)\
    \ (operator[1] operand)))\n  (define (algebra_mod operand)\n    (+ (operator[0]\
    \ operand) (operator[1] operand)))\n  (define (algebra_neg operand)\n    (+ (operator[0]\
    \ operand) (operator[1] operand)))\n  (define (algebra_abs operand)\n    (+ (operator[0]\
    \ operand) (operator[1] operand)))\n  (define (algebra_sqrt operand)\n    (+ (operator[0]\
    \ operand) (operator[1] operand)))\n  (define (algebra_log operand)\n    (+ (operator[0]\
    \ operand) (operator[1] operand)))\n  (define (algebra_log10 operand)\n    (+\
    \ (operator[0] operand) (operator[1] operand)))\n  (define (algebra_sin operand)\n\
    \    (+ (operator[0] operand) (operator[1] operand)))\n  (define (algebra_cos\
    \ operand)\n    (+ (operator[0] operand) (operator[1] operand)))\n  (define (algebra_tan\
    \ operand)\n    (+ (operator[0] operand) (operator[1] operand)))\n", "  (let ((result\
    \ 0))\n    (for-each (lambda (x)\n                (let ((op (car operator)))\n\
    \                  (let ((operand (cdr operator)))\n                    (if (eq\
    \ op '+)\n                        (+ result (car operand)))\n                \
    \    (if (eq op '-)\n                        (+ result (- (car operand) result)))\n\
    \                    (if (eq op '*)\n                        (+ result (* result\
    \ (car operand)))\n                    (if (eq op '//)\n                     \
    \   (+ result (/ (car operand) result)))\n                    (if (eq op '**)\n\
    \                        (+ result (* result (car operand)))))))\n           \
    \     (operand)))\n    (+ result)))\n", "  (let ((result 0))\n    (for-each (lambda\
    \ (x)\n                (let ((op (car operator)))\n                  (let ((operand\
    \ (cdr operator)))\n                    (if (eq op '+)\n                     \
    \   (+ result (car operand)))\n                      (if (eq op '-)\n        \
    \                (+ result (- (car operand) result)))\n                      (if\
    \ (eq op '*)\n                        (+ result (* (car operand) result)))\n \
    \                     (if (eq op '//)\n                        (+ result (/ (car\
    \ operand) result)))\n                      (if (eq op '**)\n                \
    \        (+ result (* result (car operand)))))))\n              operand)\n   \
    \       operand)\n    result))\n", "  (let ((result 0))\n    (for-each (lambda\
    \ (op)\n      (if (eq op '+)\n        (+ result operand)\n        (if (eq op '-)\n\
    \          (+ result (- operand result))\n          (if (eq op '*)\n         \
    \   (+ result (- result operand))\n            (if (eq op '//)\n             \
    \ (+ result (/ operand result))\n              (if (eq op '**)\n             \
    \   (+ result (** operand result))))))))\n    (+ result result)))\n)\n", "  (define\
    \ (algebra_op op operand)\n    (if (null? (cdr operand))\n      (car operand)\n\
    \      (if (null? (cdr op))\n        (car op)\n        (if (null? (cdr (cdr op)))\n\
    \          (car (cdr op))\n          (car (cdr (cdr op))))))\n    (if (null? (cdr\
    \ operand))\n      (car operand)\n      (if (null? (cdr op))\n        (car op)\n\
    \        (if (null? (cdr (cdr op)))\n          (car (cdr op))\n          (car\
    \ (cdr (cdr op))))))\n    (if (null? (cdr operand))\n      (car operand)\n   \
    \   (if (null? (cdr op))\n        (car op)\n        (if (null? (cdr (cdr op)))\n\
    \          (car (cdr op))\n          (car (cdr (cdr op))))))\n    (if (null? (cdr\
    \ operand))\n      (car operand)\n      (if (null? (cdr op))\n        (car op)\n\
    \        (if (null? (cdr (cdr op)))\n          (car (cdr op))\n          (car\
    \ (cdr (cdr op))))))\n    (if (null? (cdr operand))\n      (car operand)\n   \
    \   (if (null? (cdr op))\n        (car op)\n        (if (null? (cdr (cdr op)))\n\
    \          (car (cdr op))\n          (car (cdr (cdr op))))))\n    (if (null? (cdr\
    \ operand))\n      (car operand)\n      (if (null? (cdr op))\n        (car op)\n\
    \        (if (null? (cdr (cdr op)))\n          (car (cdr op))\n          (car\
    \ (cdr (cdr op))))))\n    (if (null? (cdr operand))\n      (car operand)\n   \
    \   (if (null? (cdr op))\n        (car op)\n        (if (null? (cdr (c", "  (if\
    \ (null? operand)\n    (error \"Operand list is empty!\")\n    (if (null? operator)\n\
    \      (error \"Operand list has only one operand!\")\n      (if (null? (cdr operand))\n\
    \        (error \"Operator list has only one operator!\")\n        (if (null?\
    \ (cdr (cdr operand)))\n          (error \"Operator list has only one operand!\"\
    )\n          (let ((result (car (car (cdr operand)))))\n            (if (null?\
    \ (cdr (cdr (cdr operand))))\n              (error \"Operator list has only one\
    \ operand!\")\n              (let ((op (car (cdr (cdr (cdr operand))))))\n   \
    \             (if (null? (cdr (cdr (cdr (cdr operand))))))\n                 \
    \ (error \"Operator list has only one operand!\")\n                  (let ((op2\
    \ (car (cdr (cdr (cdr (cdr operand)))))))\n                    (if (null? (cdr\
    \ (cdr (cdr (cdr (cdr operand))))))\n                      (error \"Operator list\
    \ has only one operand!\")\n                      (let ((op3 (car (cdr (cdr (cdr\
    \ (cdr (cdr operand))))))))\n                        (if (null? (cdr (cdr (cdr\
    \ (cdr (cdr (cdr operand))))))))\n                          (error \"Operator\
    \ list has only one operand!\")\n                          (let ((op4 (car (cdr\
    \ (cdr (cdr (cdr (cdr (cdr operand))))))))\n                                (if\
    \ (null? (cdr (cdr (cdr (cdr (cdr (cdr (cdr operand))))))))\n                \
    \                  (error \"Operator list has only one operand!\")\n         \
    \                         (let ((op5 (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ operand))))))))))))\n                                (if (null? (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr operand))))))))", "  (if (null? operator)\n\
    \    (print \"Error: Operator list is empty.\")\n    (if (null? operand)\n   \
    \   (print \"Error: Operand list is empty.\")\n      (print \"Error: Operator\
    \ list and operand list are both empty.\")\n      (exit)))\n  (if (null? operand)\n\
    \    (print \"Error: Operand list is empty.\")\n    (print \"Error: Operator list\
    \ and operand list are both empty.\")\n    (exit))\n  (if (null? operator)\n \
    \   (print \"Error: Operator list is empty.\")\n    (print \"Error: Operator list\
    \ and operand list are both empty.\")\n    (exit))\n  (if (null? operand)\n  \
    \  (print \"Error: Operand list is empty.\")\n    (print \"Error: Operator list\
    \ and operand list are both empty.\")\n    (exit))\n  (if (null? operand)\n  \
    \  (print \"Error: Operand list is empty.\")\n    (print \"Error: Operator list\
    \ and operand list are both empty.\")\n    (exit))\n  (if (null? operand)\n  \
    \  (print \"Error: Operand list is empty.\")\n    (print \"Error: Operator list\
    \ and operand list are both empty.\")\n    (exit))\n  (if (null? operand)\n  \
    \  (print \"Error: Operand list is empty.\")\n    (print \"Error: Operator list\
    \ and operand list are both empty.\")\n    (exit))\n  (if (null? operand)\n  \
    \  (print \"Error: Operand list is empty.\")\n    (print \"Error: Operator list\
    \ and operand list are both empty.\")\n    (exit))\n  (if (null? operand)\n  \
    \  (print \"Error: Operand list is empty.\")\n    (print \"Error: Operator list\
    \ and operand list are both empty.\")\n    (exit))\n  (if (null? operand)\n  \
    \  (print \"Error: Operand list is empty.\")\n    (print \"Error: Operator list\
    \ and operand list are both empty.\")\n    (exit))\n  (if (null? operand)\n  \
    \  (print \"Error: Operand list is empty.\")\n    (print \"Error: Operator list\
    \ and operand list are both empty.\")\n    (exit", "  (if (null? operator)\n \
    \   (+ operand)\n    (let ((op (car operator)))\n      (if (null? (cdr operator))\n\
    \        (+ (do_algebra (cdr operator) (car operand)))\n        (let ((op2 (car\
    \ (cdr operator))))\n          (if (null? (cdr (cdr operator)))\n            (+\
    \ (do_algebra (cdr (cdr operator)) (car operand)))\n            (let ((op3 (car\
    \ (cdr (cdr (cdr operator))))))\n              (if (null? (cdr (cdr (cdr (cdr\
    \ operator))))))\n                (+ (do_algebra (cdr (cdr (cdr (cdr (cdr operator))))\
    \ (car operand)))\n                  (+ (do_algebra (cdr (cdr (cdr (cdr (cdr (cdr\
    \ operator)))))) (car operand)))\n                  (+ (do_algebra (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (c", "  (let ((result\
    \ 0))\n    (for-each (lambda (op)\n      (if (eq op '+)\n        (+ result (operand\
    \ op)))\n      (if (eq op '-)\n        (+ result (- operand op)))\n      (if (eq\
    \ op '*)\n        (+ result (* operand op)))\n      (if (eq op '//)\n        (+\
    \ result (/ operand op)))\n      (if (eq op '**)\n        (+ result (** operand\
    \ op))))\n    result))\n)\n", "  (if (null? operator)\n    (+ operand)\n    (let\
    \ ((op (car operator)))\n      (if (null? (cdr operator))\n        (+ (do_algebra\
    \ (cdr operator) (car operand)))\n        (let ((op2 (car (cdr operator))))\n\
    \          (if (null? (cdr (cdr operator)))\n            (+ (do_algebra (cdr (cdr\
    \ operator)) (car operand)))\n            (let ((op3 (car (cdr (cdr operator)))))\n\
    \              (if (null? (cdr (cdr (cdr operator))))\n                (+ (do_algebra\
    \ (cdr (cdr (cdr operator))) (car operand)))\n                (let ((op4 (car\
    \ (cdr (cdr (cdr operator)))))\n                      (if (null? (cdr (cdr (cdr\
    \ (cdr operator))))))\n                    (+ (do_algebra (cdr (cdr (cdr (cdr\
    \ operator)))) (car operand)))\n                    (let ((op5 (car (cdr (cdr\
    \ (cdr (cdr operator)))))))\n                      (if (null? (cdr (cdr (cdr (cdr\
    \ (cdr operator))))))\n                        (+ (do_algebra (cdr (cdr (cdr (cdr\
    \ (cdr operator)))) (car operand)))\n                        (+ (do_algebra (cdr\
    \ (cdr (cdr (cdr (cdr operator)))) (car operand)))\n                        (+\
    \ (do_algebra (cdr (cdr (cdr (cdr (cdr operator)))) (car operand)))\n        \
    \                (+ (do_algebra (cdr (cdr (cdr (cdr (cdr operator)))) (car operand)))\n\
    \                        (+ (do_algebra (cdr (cdr (cdr (cdr (cdr operator))))\
    \ (car operand)))\n                        (+ (do_algebra (cdr (cdr (cdr (cdr\
    \ (cdr operator)))) (car operand)))\n                        (+ (do_algebra (cdr\
    \ (cdr (cdr (cdr (cdr operator)))) (car operand)))\n                        (+\
    \ (do_", "  (let ((result 0))\n    (for-each (lambda (op)\n                (if\
    \ (eq op '+)\n                    (+ result operand)\n                    (if\
    \ (eq op '-)\n                        (+ (- result) operand)\n               \
    \         (if (eq op '*)\n                            (+ (* result operand) result)\n\
    \                            (if (eq op '//)\n                               \
    \ (+ (* result (/ operand result)) result)\n                                (if\
    \ (eq op '**)\n                                    (+ (* result (* operand result))\
    \ result)\n                                    (error \"Unknown operator\"))))))))\n\
    \    (+ result)))\n", "  (let ((result 0))\n    (for-each (lambda (x)\n      \
    \          (let ((op (car operator)))\n                  (let ((operand (cdr operator)))\n\
    \                    (if (eq op '+)\n                        (+ result (car operand)))\n\
    \                      (if (eq op '-)\n                        (+ result (- (car\
    \ operand) result)))))\n                operand))\n      result))\n", "  (let\
    \ ((result 0))\n    (for-each (lambda (op)\n                (if (eq op '+)\n \
    \                   (+ result (do_algebra operator (cdr operand))))\n        \
    \        (if (eq op '-)\n                    (+ result (- (do_algebra operator\
    \ (cdr operand))))\n                (if (eq op '*)\n                    (+ result\
    \ (* result (do_algebra operator (cdr operand))))\n                (if (eq op\
    \ '//)\n                    (+ result (/ result (do_algebra operator (cdr operand))))\n\
    \                (if (eq op '**)\n                    (+ result (** result (do_algebra\
    \ operator (cdr operand))))\n                (else\n                    (print\
    \ \"Invalid operator\"))))))\n    (return result)))\n", "  (let ((result 0))\n\
    \    (for-each (lambda (x)\n                (let ((op (car operator)))\n     \
    \             (let ((operand (cdr operator)))\n                    (if (eq op\
    \ '+)\n                        (+ result (car operand)))\n                   \
    \   (if (eq op '-)\n                        (+ result (- (car operand) result)))\n\
    \                      (if (eq op '*)\n                        (+ result (* result\
    \ (car operand)))\n                      (if (eq op '//)\n                   \
    \     (+ result (/ result (car operand)))\n                      (if (eq op '**)\n\
    \                        (+ result (* result (car operand)))\n               \
    \       (else\n                        (error \"Invalid operator\"))))))))\n \
    \     operand))\n  result)\n", "  (let ((result 0))\n    (for-each (lambda (op)\n\
    \      (if (eq op '+)\n        (+ result (do_algebra operator (cdr operand))))\n\
    \      (if (eq op '-)\n        (+ result (do_algebra operator (cdr operand))))\n\
    \      (if (eq op '*)\n        (+ result (do_algebra operator (cdr operand))))\n\
    \      (if (eq op '//)\n        (+ result (do_algebra operator (cdr operand))))\n\
    \      (if (eq op '**)\n        (+ result (do_algebra operator (cdr operand))))\n\
    \      (if (eq op '+')\n        (+ result (do_algebra operator (cdr operand))))\n\
    \      (if (eq op '-')\n        (+ result (do_algebra operator (cdr operand))))\n\
    \      (if (eq op '*')\n        (+ result (do_algebra operator (cdr operand))))\n\
    \      (if (eq op '//')\n        (+ result (do_algebra operator (cdr operand))))\n\
    \      (if (eq op '**')\n        (+ result (do_algebra operator (cdr operand))))\n\
    \      (if (eq op '+')\n        (+ result (do_algebra operator (cdr operand))))\n\
    \      (if (eq op '-')\n        (+ result (do_algebra operator (cdr operand))))\n\
    \      (if (eq op '*')\n        (+ result (do_algebra operator (cdr operand))))\n\
    \      (if (eq op '//')\n        (+ result (do_algebra operator (cdr operand))))\n\
    \      (if (eq op '**')\n        (+ result (do_algebra operator (cdr operand))))\n\
    \      (if (eq op '+')\n        (+ result (do_algebra operator (cdr operand))))\n\
    \      (if (eq op '-')\n        (+ result (do_algebra operator (cdr operand))))\n\
    \      (if (eq op '*')\n        (+ result (do_algebra operator (cdr operand))))\n\
    \      (if (eq op '", "  (if (null? operator)\n    (print \"Error: Operator list\
    \ is empty.\")\n    (if (null? operand)\n      (print \"Error: Operand list is\
    \ empty.\")\n      (print \"Error: Operator list and operand list are both empty.\"\
    )\n      (exit)))\n  (if (null? operand)\n    (print \"Error: Operand list is\
    \ empty.\")\n    (print \"Error: Operator list and operand list are both empty.\"\
    )\n    (exit)))\n  (if (null? operand)\n    (print \"Error: Operand list is empty.\"\
    )\n    (print \"Error: Operator list and operand list are both empty.\")\n   \
    \ (exit)))\n  (if (null? operand)\n    (print \"Error: Operand list is empty.\"\
    )\n    (print \"Error: Operator list and operand list are both empty.\")\n   \
    \ (exit)))\n  (if (null? operand)\n    (print \"Error: Operand list is empty.\"\
    )\n    (print \"Error: Operator list and operand list are both empty.\")\n   \
    \ (exit)))\n  (if (null? operand)\n    (print \"Error: Operand list is empty.\"\
    )\n    (print \"Error: Operator list and operand list are both empty.\")\n   \
    \ (exit)))\n  (if (null? operand)\n    (print \"Error: Operand list is empty.\"\
    )\n    (print \"Error: Operator list and operand list are both empty.\")\n   \
    \ (exit)))\n  (if (null? operand)\n    (print \"Error: Operand list is empty.\"\
    )\n    (print \"Error: Operator list and operand list are both empty.\")\n   \
    \ (exit)))\n  (if (null? operand)\n    (print \"Error: Operand list is empty.\"\
    )\n    (print \"Error: Operator list and operand list are both empty.\")\n   \
    \ (exit)))\n  (if (null? operand)\n    (print \"Error: Operand list is empty.\"\
    )\n    (print \"Error: Operator list and operand list are both empty.\")\n   \
    \ (exit)))\n  (if (null? operand)\n    (print \"Error: Operand list is empty.\"\
    )\n    (print \"Error: Operator list and operand list are both empty.\")\n    ",
  "  (if (null? operand)\n    (+ operator)\n    (let ((result (do_algebra (+ operator\
    \ (first operand)) (second operand))))\n      (do_algebra result (rest operand))))\n\
    )\n", "  (define (calc_op op operand)\n    (if (eq? op '+)\n      (+ (calc_op\
    \ op (car operand)) (calc_op op (cdr operand))))\n    (if (eq? op '-)\n      (+\
    \ (calc_op op (car operand)) (- (calc_op op (cdr operand))))\n    (if (eq? op\
    \ '*)\n      (+ (calc_op op (car operand)) (* (calc_op op (cdr operand))))\n \
    \   (if (eq? op '//)\n      (/ (calc_op op (car operand)) (calc_op op (cdr operand))))\n\
    \    (if (eq? op '**)\n      (** (calc_op op (car operand)) (calc_op op (cdr operand))))\n\
    \    (if (eq? op '**)\n      (** (calc_op op (car operand)) (calc_op op (cdr operand))))\n\
    \    (if (eq? op '**)\n      (** (calc_op op (car operand)) (calc_op op (cdr operand))))\n\
    \    (if (eq? op '**)\n      (** (calc_op op (car operand)) (calc_op op (cdr operand))))\n\
    \    (if (eq? op '**)\n      (** (calc_op op (car operand)) (calc_op op (cdr operand))))\n\
    \    (if (eq? op '**)\n      (** (calc_op op (car operand)) (calc_op op (cdr operand))))\n\
    \    (if (eq? op '**)\n      (** (calc_op op (car operand)) (calc_op op (cdr operand))))\n\
    \    (if (eq? op '**)\n      (** (calc_op op (car operand)) (calc_op op (cdr operand))))\n\
    \    (if (eq? op '**)\n      (** (calc_op op (car operand)) (calc_op op (cdr operand))))\n\
    \    (if", "  (define (algebra-expr op1 op2)\n    (if (eq op1 '+)\n      (+ op1\
    \ op2)\n      (if (eq op1 '-)\n        (-(op1 op2))\n        (if (eq op1 '*)\n\
    \          (* op1 op2)\n          (if (eq op1 '//)\n            (// op1 op2)\n\
    \            (if (eq op1 '**)\n              (** op1 op2)\n              (error\
    \ \"Invalid operator\"))))))))\n  (if (null? operator)\n    (error \"Invalid operand\"\
    )\n    (if (null? operand)\n      (error \"Invalid operand\")\n      (if (null?\
    \ (cdr operand))\n        (error \"Invalid operand\")\n        (if (null? (cdr\
    \ (cdr operand)))\n          (error \"Invalid operand\")\n          (do_algebra\
    \ (car operator) (car operand)))))\n    (do_algebra (car operator) (car operand)))))\n",
  "  (define (calc_op op operand)\n    (if (eq? op '+)\n      (+ (calc_op op (car\
    \ operand)) (calc_op op (cdr operand))))\n    (if (eq? op '-)\n      (+ (calc_op\
    \ op (car operand)) (calc_op op (cdr operand))))\n    (if (eq? op '*)\n      (+\
    \ (calc_op op (car operand)) (calc_op op (cdr operand))))\n    (if (eq? op '//)\n\
    \      (/ (calc_op op (car operand)) (calc_op op (cdr operand))))\n    (if (eq?\
    \ op '**)\n      (let ((n (calc_op op (car operand))))\n        (let ((m (calc_op\
    \ op (cdr operand))))\n          (let ((result (calc_op op (car operand))))\n\
    \            (if (eq? op '**)\n              (let ((result (calc_op op (car operand))))\n\
    \                (if (eq? op '**)\n                  (+ result (pow result m))\n\
    \                  (pow result m)))\n              (if (eq? op '//)\n        \
    \        (let ((result (calc_op op (car operand))))\n                  (if (eq?\
    \ op '//)\n                    (let ((result (calc_op op (car operand))))\n  \
    \                    (if (eq? op '//)\n                        (+ result (pow\
    \ result m))\n                        (pow result m)))\n                    (if\
    \ (eq? op '//)\n                      (let ((result (calc_op op (car operand))))\n\
    \                        (if (eq? op '//)\n                          (+ result\
    \ (pow result m))\n                          (pow result m)))\n              \
    \        (if (eq? op '//)\n                        (let ((result (calc_op op (car\
    \ operand))))\n                          (if (eq? op '//)\n                  \
    \          (+ result (pow result m))\n                            (pow result\
    \ m)))\n                        (if (eq? op '//)\n                          (let\
    \ ((result (calc_op op (car", "  (define (do_operation op1 op2)\n    (if (eq?\
    \ op1 op2)\n      1\n      (if (eq? op1 '+)\n        (do_operation op2 op1)\n\
    \        (do_operation op1 op2))\n      (if (eq? op1 '-)\n        (do_operation\
    \ op2 op1)\n        (do_operation op1 op2))\n      (if (eq? op1 '*)\n        (do_operation\
    \ op2 op1)\n        (do_operation op1 op2))\n      (if (eq? op1 '//')\n      \
    \  (do_operation op2 op1)\n        (do_operation op1 op2))\n      (if (eq? op1\
    \ '**')\n        (do_operation op2 op1)\n        (do_operation op1 op2))\n   \
    \   (error \"Invalid operator\"))))\n  (do_operation operator operand)\n)\n",
  "  (if (null? operator)\n    (+ operand)\n    (let ((op (car operator)))\n     \
    \ (if (null? (cdr operator))\n        (+ (do_algebra (cdr operator) (car operand)))\n\
    \        (let ((op2 (car (cdr operator))))\n          (if (null? (cdr (cdr operator)))\n\
    \            (+ (do_algebra (cdr (cdr operator)) (car operand)))\n           \
    \ (let ((op3 (car (cdr (cdr (cdr operator)))))\n                  (if (null? (cdr\
    \ (cdr (cdr (cdr operator))))))\n                (+ (do_algebra (cdr (cdr (cdr\
    \ (cdr (cdr operator)))) (car operand)))\n                  (+ (do_algebra (cdr\
    \ (cdr (cdr (cdr (cdr (cdr operator)))))) (car operand))))\n                (+\
    \ (do_algebra (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (c", "  (if (null? operator)\n    (+ operand)\n    (if (null? operand)\n\
    \      (+ operator)\n      (do_algebra (cdr operator) (car operand)))))\n", " \
    \ (let ((result 0))\n    (for-each (lambda (op)\n                (if (eq op '+)\n\
    \                  (+ result (do_algebra operator (cdr operand))))\n         \
    \       (if (eq op '-)\n                  (+ result (- (do_algebra operator (cdr\
    \ operand))))\n                (if (eq op '*)\n                  (+ result (*\
    \ (do_algebra operator (cdr operand))))\n                (if (eq op '//)\n   \
    \               (+ result (/ (do_algebra operator (cdr operand))))\n         \
    \       (if (eq op '**)\n                  (+ result (* (do_algebra operator (cdr\
    \ operand))))\n                (if (eq op '<')\n                  (+ result (-\
    \ (do_algebra operator (cdr operand))))\n                (if (eq op '>')\n   \
    \               (+ result (* (do_algebra operator (cdr operand))))\n         \
    \       (if (eq op '<=')\n                  (+ result (- (do_algebra operator\
    \ (cdr operand))))\n                (if (eq op '>=')\n                  (+ result\
    \ (* (do_algebra operator (cdr operand))))\n                (if (eq op '=')\n\
    \                  (+ result (/ (do_algebra operator (cdr operand))))\n      \
    \          (if (eq op '!=')\n                  (+ result (* (do_algebra operator\
    \ (cdr operand))))\n                (if (eq op 'and')\n                  (+ result\
    \ (* (do_algebra operator (cdr operand))))\n                (if (eq op 'or')\n\
    \                  (+ result (/ (do_algebra operator (cdr operand))))\n      \
    \          (if (eq op 'not')\n                  (+ result (* (do_algebra operator\
    \ (cdr operand))))\n                (if (eq op 'list')\n                  (+ result\
    \ (/ (do_algebra operator (cdr operand))))\n                (if (eq op 'list?')\n\
    \                  (+ result (* (do_algebra operator (cdr operand))))\n      \
    \          (if (eq op 'car')\n                  (+ result (/ (do_algebra operator\
    \ (cdr operand))))\n                (if (eq op 'cdr')\n                  (+",
  "  (let ((result 0))\n    (for-each (lambda (op)\n      (if (eq op '+)\n       \
    \ (+ result (do_algebra operator (cdr operand))))\n      (if (eq op '-)\n    \
    \    (+ result (do_algebra operator (cdr operand))))\n      (if (eq op '*)\n \
    \       (+ result (do_algebra operator (cdr operand))))\n      (if (eq op '//)\n\
    \        (+ result (do_algebra operator (cdr operand))))\n      (if (eq op '**)\n\
    \        (+ result (do_algebra operator (cdr operand))))\n      (if (eq op '+')\n\
    \        (+ result (do_algebra operator (cdr operand))))\n      (if (eq op '-')\n\
    \        (+ result (do_algebra operator (cdr operand))))\n      (if (eq op '*')\n\
    \        (+ result (do_algebra operator (cdr operand))))\n      (if (eq op '//')\n\
    \        (+ result (do_algebra operator (cdr operand))))\n      (if (eq op '**')\n\
    \        (+ result (do_algebra operator (cdr operand))))\n      (if (eq op '+')\n\
    \        (+ result (do_algebra operator (cdr operand))))\n      (if (eq op '-')\n\
    \        (+ result (do_algebra operator (cdr operand))))\n      (if (eq op '*')\n\
    \        (+ result (do_algebra operator (cdr operand))))\n      (if (eq op '//')\n\
    \        (+ result (do_algebra operator (cdr operand))))\n      (if (eq op '**')\n\
    \        (+ result (do_algebra operator (cdr operand))))\n      (if (eq op '+')\n\
    \        (+ result (do_algebra operator (cdr operand))))\n      (if (eq op '-')\n\
    \        (+ result (do_algebra operator (cdr operand))))\n      (if (eq op '*')\n\
    \        (+ result (do_algebra operator (cdr operand))))\n      (if (eq op '",
  "  (define (calc_op op1 op2)\n    (if (eq op1 op2)\n      1\n      (if (eq op1 '+)\n\
    \        (+ op1 op2)\n        (if (eq op1 '-)\n          (-(op1 op2))\n      \
    \    (if (eq op1 '*)\n            (* op1 op2)\n            (if (eq op1 '//)\n\
    \              (/ op1 op2)\n              (if (eq op1 '**)\n                (**\
    \ op1 op2)\n                (error \"Invalid operator\"))))))))))\n  (define (calc_list\
    \ list)\n    (if (null? list)\n      0\n      (calc_op list[0] list[1])))\n  (define\
    \ (calc_list_list list1 list2)\n    (if (null? list1)\n      (calc_list list2)\n\
    \      (if (null? list2)\n        (calc_list list1)\n        (calc_list_list list1\
    \ list2))))\n  (calc_list_list operator operand))\n", "  (define (algebra_op operand\
    \ op)\n    (if (null? op)\n      (+ operand op)\n      (if (null? op)\n      \
    \  (+ operand op)\n        (if (null? op)\n          (+ operand op)\n        \
    \  (if (null? op)\n            (+ operand op)\n            (if (null? op)\n  \
    \            (+ operand op)\n              (if (null? op)\n                (+\
    \ operand op)\n                (if (null? op)\n                  (+ operand op)\n\
    \                  (if (null? op)\n                    (+ operand op)\n      \
    \              (if (null? op)\n                      (+ operand op)\n        \
    \              (if (null? op)\n                        (+ operand op)\n      \
    \                  (if (null? op)\n                          (+ operand op)\n\
    \                          (if (null? op)\n                            (+ operand\
    \ op)\n                            (if (null? op)\n                          \
    \    (+ operand op)\n                              (if (null? op)\n          \
    \                      (+ operand op)\n                                (if (null?\
    \ op)\n                                  (+ operand op)\n                    \
    \              (if (null? op)\n                                    (+ operand\
    \ op)\n                                    (if (null? op)\n                  \
    \                    (+ operand op)\n                                      (if\
    \ (null? op)\n                                        (+ operand op)\n       \
    \                                 (if (null? op)\n                           \
    \               (+ operand op)\n                                          (if\
    \ (null? op)\n                                            (+ operand op)\n   \
    \                                         (if (null? op)\n                   \
    \                           (+ operand op)\n                                 \
    \             (if (null? op)\n                                               \
    \ (+ operand op)\n                                                (if (null? op)\n\
    \                                                  (+ operand op)\n          \
    \                                        (if (null? op)\n                    \
    \                                (+ operand op)\n                            \
    \                        (if (null? op)\n                                    \
    \                  (+ operand op)\n                                          \
    \            (if (null?", "  (if (null? operator)\n    (print \"Error: Operator\
    \ list is empty.\")\n    (if (null? operand)\n      (print \"Error: Operand list\
    \ is empty.\")\n      (print \"Error: Operator list and operand list are both\
    \ empty.\")\n      (print \"Error: Operator list and operand list are both empty.\"\
    )))\n  (if (null? operand)\n    (print \"Error: Operand list is empty.\")\n  \
    \  (print \"Error: Operator list and operand list are both empty.\")))\n", " \
    \ (let ((result 0))\n    (for-each (lambda (x)\n                (if (eq? x '+)\n\
    \                    (+ result operand[(indexof operand x) - 1])\n           \
    \         (if (eq? x '-')\n                        (+ result (- operand[(indexof\
    \ operand x) - 1]) operand[(indexof operand x) - 1])\n                       \
    \ (if (eq? x '*')\n                            (+ result (* operand[(indexof operand\
    \ x) - 1]) operand[(indexof operand x) - 1])\n                            (if\
    \ (eq? x '//')\n                                (+ result (/ operand[(indexof\
    \ operand x) - 1]) operand[(indexof operand x) - 1])\n                       \
    \         (if (eq? x '**')\n                                    (+ result (**\
    \ operand[(indexof operand x) - 1]) operand[(indexof operand x) - 1])\n      \
    \                              (error \"Invalid operator\"))))))))\n    (+ result)))\n",
  "  (let ((result 0))\n    (for-each (lambda (x)\n                (let ((op (car\
    \ operator)))\n                  (let ((operand (cdr operator)))\n           \
    \         (if (eq op '+)\n                        (+ result (car operand)))\n\
    \                      (if (eq op '-)\n                        (+ result (- (car\
    \ operand) result)))\n                      (if (eq op '*)\n                 \
    \       (+ result (* (car operand) result)))\n                      (if (eq op\
    \ '//)\n                        (+ result (/ (car operand) result)))\n       \
    \               (if (eq op '**)\n                        (+ result (* result (car\
    \ operand)))))))\n                operand)\n              operand))\n  result)\n",
  "  (if (null? operator)\n    (print \"Error: Operand list is empty.\")\n    (if\
    \ (null? operand)\n      (print \"Error: Operator list is empty.\")\n      (print\
    \ \"Error: Both operand and operator list are empty.\")\n      (print \"Error:\
    \ Operator list is empty.\"))\n    (if (null? operand)\n      (print \"Error:\
    \ Operator list is empty.\")\n      (print \"Error: Operand list is empty.\"))\n\
    \    (if (null? operand)\n      (print \"Error: Operator list is empty.\")\n \
    \     (print \"Error: Operand list is empty.\"))\n    (print \"Error: Operator\
    \ list is empty.\"))\n  (if (null? operator)\n    (print \"Error: Operand list\
    \ is empty.\")\n    (if (null? operand)\n      (print \"Error: Operator list is\
    \ empty.\")\n      (print \"Error: Operand list is empty.\"))\n    (if (null?\
    \ operand)\n      (print \"Error: Operator list is empty.\")\n      (print \"\
    Error: Operand list is empty.\"))\n    (print \"Error: Operator list is empty.\"\
    ))\n  (if (null? operand)\n    (print \"Error: Operator list is empty.\")\n  \
    \  (if (null? operand)\n      (print \"Error: Operator list is empty.\")\n   \
    \   (print \"Error: Operand list is empty.\"))\n    (print \"Error: Operator list\
    \ is empty.\"))\n  (if (null? operand)\n    (print \"Error: Operator list is empty.\"\
    )\n    (print \"Error: Operand list is empty.\"))\n  (print \"Error: Operator\
    \ list is empty.\"))\n  (if (null? operand)\n    (print \"Error: Operator list\
    \ is empty.\")\n    (print \"Error: Operand list is empty.\"))\n  (if (null? operand)\n\
    \    (print \"Error: Operator list is empty.\")\n    (print \"Error: Operand list\
    \ is empty.\"))\n  (print \"Error: Operator list is empty.\"))\n  (if (null? operand)\n\
    \    (print \"Error: Operator list is empty.\")\n    (print \"Error: Operand list\
    \ is empty.\"))\n  (if (null?", "  (if (null? operator)\n    (print \"Invalid\
    \ operator list.\")\n    (print \"Invalid operand list.\")\n    (exit)))\n", " \
    \ (define (algebra_op op1 op2)\n    (if (eq? op1 op2)\n      1\n      (if (eq?\
    \ op1 '+)\n        (+ op1 op2)\n        (if (eq? op1 '-)\n          (-(op1 op2))\n\
    \          (if (eq? op1 '*)\n            (* op1 op2)\n            (if (eq? op1\
    \ '/)\n              (// op1 op2)\n              (if (eq? op1 '**)\n         \
    \       (** op1 op2)\n                (error \"Invalid operator\"))))))))))\n\
    \  (if (null? operator)\n    (error \"Invalid operand\")\n    (if (null? operand)\n\
    \      (error \"Invalid operand\")\n      (if (null? (car operand))\n        (error\
    \ \"Invalid operand\")\n        (if (null? (car (cdr operand)))\n          (error\
    \ \"Invalid operand\")\n          (if (null? (car (cdr (cdr operand))))\n    \
    \        (error \"Invalid operand\")\n            (do_algebra (cdr operator) (car\
    \ (cdr operand))))))))\n  (do_algebra (cdr operator) (car operand))\n)\n", " \
    \ (define (algebra-expr)\n    (if (null? (cdr operand))\n      (car operand)\n\
    \      (if (null? (cdr (cdr operand)))\n        (car (cdr operand))\n        (+\
    \ (algebra-expr (car operand))\n          (algebra-expr (car (cdr operand)))))))\n\
    \  (algebra-expr (car operator))\n)\n", "  (if (null? operand)\n    (+ operator)\n\
    \    (let ((result 0))\n      (for-each (lambda (x)\n                  (let ((y\
    \ (+ result (* x operand))))\n                    (result y)))\n        operator)))))\n",
  "  (define (do_operation op1 op2)\n    (if (eq? op1 op2)\n      1\n      (if (eq?\
    \ op1 '+)\n        (do_operation op2 op1)\n        (do_operation op1 op2))\n \
    \     (if (eq? op1 '-)\n        (do_operation op2 op1)\n        (do_operation\
    \ op1 op2))\n      (if (eq? op1 '*)\n        (do_operation op2 op1)\n        (do_operation\
    \ op1 op2))\n      (if (eq? op1 '//')\n        (do_operation op2 op1)\n      \
    \  (do_operation op1 op2))\n      (if (eq? op1 '**')\n        (do_operation op2\
    \ op1)\n        (do_operation op1 op2))\n      (error \"Invalid operator\"))))\n\
    \  (do_operation operator operand)\n  (do_operation operator operand))\n", " \
    \ (if (null? operator)\n    (+ operand)\n    (let ((op (car operator)))\n    \
    \  (if (null? (cdr operator))\n        (+ (do_algebra (cdr operator) (car operand)))\n\
    \        (let ((op2 (car (cdr operator))))\n          (if (null? (cdr (cdr operator)))\n\
    \            (+ (do_algebra (cdr (cdr operator)) (car operand)))\n           \
    \ (let ((op3 (car (cdr (cdr (cdr operator)))))\n              (+ (do_algebra (cdr\
    \ (cdr (cdr (cdr operator)))) (car operand))\n                 (do_algebra (cdr\
    \ (cdr (cdr (cdr (cdr operator)))) (car operand)))))\n            (+ (do_algebra\
    \ (cdr (cdr (cdr (cdr (cdr (cdr operator)))))) (car operand)))))\n      (+ (do_algebra\
    \ (cdr (cdr operator)) (car operand)))))\n  (+ (car operand)))))\n", "  (let ((result\
    \ 0))\n    (for-each (lambda (op)\n                (if (eq op '+)\n          \
    \          (+ result operand)\n                    (if (eq op '-)\n          \
    \              (+ (- result) operand)\n                        (if (eq op '*)\n\
    \                            (+ (* result) operand)\n                        \
    \    (if (eq op '//)\n                                (+ (* result) (/ operand))\n\
    \                                (if (eq op '**)\n                           \
    \         (+ (* result) (* operand))\n                                    (error\
    \ \"Invalid operator\"))))))))\n    (+ result)))\n", "  (let ((result 0))\n  \
    \  (for-each (lambda (op)\n      (if (eq op '+)\n        (+ result operand)\n\
    \        (if (eq op '-)\n          (+ result (- operand result))\n          (if\
    \ (eq op '*)\n            (+ result (- result operand))\n            (if (eq op\
    \ '//)\n              (+ result (/ operand result))\n              (if (eq op\
    \ '**)\n                (+ result (** operand result))))))))\n    result))\n)\n",
  "  (let ((result 0))\n    (for-each (lambda (op)\n      (if (eq op '+)\n       \
    \ (+ result operand)\n        (if (eq op '-)\n          (+ result (- operand result))\n\
    \          (if (eq op '*)\n            (+ result (- result operand))\n       \
    \     (if (eq op '//)\n              (+ result (/ operand result))\n         \
    \     (if (eq op '**)\n                (+ result (** operand result))))))))\n\
    \    (+ result result)))\n)\n", "  (if (null? operator)\n    (print \"Error: Operator\
    \ list is empty.\")\n    (if (null? operand)\n      (print \"Error: Operand list\
    \ is empty.\")\n      (print \"Error: Operator list and operand list are both\
    \ empty.\")\n      (exit)))\n  (if (null? operand)\n    (print \"Error: Operand\
    \ list is empty.\")\n    (print \"Error: Operator list and operand list are both\
    \ empty.\")\n    (exit)))\n  (if (null? operand)\n    (print \"Error: Operand\
    \ list is empty.\")\n    (print \"Error: Operator list and operand list are both\
    \ empty.\")\n    (exit)))\n  (if (null? operand)\n    (print \"Error: Operand\
    \ list is empty.\")\n    (print \"Error: Operator list and operand list are both\
    \ empty.\")\n    (exit)))\n  (if (null? operand)\n    (print \"Error: Operand\
    \ list is empty.\")\n    (print \"Error: Operator list and operand list are both\
    \ empty.\")\n    (exit)))\n  (if (null? operand)\n    (print \"Error: Operand\
    \ list is empty.\")\n    (print \"Error: Operator list and operand list are both\
    \ empty.\")\n    (exit)))\n  (if (null? operand)\n    (print \"Error: Operand\
    \ list is empty.\")\n    (print \"Error: Operator list and operand list are both\
    \ empty.\")\n    (exit)))\n  (if (null? operand)\n    (print \"Error: Operand\
    \ list is empty.\")\n    (print \"Error: Operator list and operand list are both\
    \ empty.\")\n    (exit)))\n  (if (null? operand)\n    (print \"Error: Operand\
    \ list is empty.\")\n    (print \"Error: Operator list and operand list are both\
    \ empty.\")\n    (exit)))\n  (if (null? operand)\n    (print \"Error: Operand\
    \ list is empty.\")\n    (print \"Error: Operator list and operand list are both\
    \ empty.\")\n    (exit)))\n  (if (null? operand)\n    (print \"Error: Operand\
    \ list is empty.\")\n    (print \"Error: Operator list and operand list are both\
    \ empty.\")\n    ", "  (define (algebra_op operand)\n    (if (null? operand)\n\
    \      (+ 0)\n      (+ (algebra_op (car operand))\n\t(algebra_op (cdr operand))))))\n",
  "  (define (do_operation op operand)\n    (if (eq? op '+)\n      (+ (do_operation\
    \ op (car operand)) (do_operation op (cdr operand))))\n    (if (eq? op '-)\n \
    \     (+ (do_operation op (car operand)) (- (do_operation op (cdr operand))))\n\
    \    (if (eq? op '*)\n      (+ (do_operation op (car operand)) (* (do_operation\
    \ op (cdr operand))))\n    (if (eq? op '//)\n      (/ (do_operation op (car operand))\
    \ (do_operation op (cdr operand))))\n    (if (eq? op '**)\n      (do_operation\
    \ op (car operand) (do_operation op (cdr operand))))\n    (if (eq? op '<')\n \
    \     (if (car operand)\n        (do_operation op (car operand))\n      (if (cdr\
    \ operand)\n        (do_operation op (car (cdr operand)))\n      (do_operation\
    \ op (car (cdr (cdr operand)))))))\n  (car (do_operation op operand)))\n  )\n\
    \  (do_operation (car operator) (car operand))\n)\n", "  (if (null? operator)\n\
    \    (print \"Error: Operator list is empty.\")\n    (if (null? operand)\n   \
    \   (print \"Error: Operand list is empty.\")\n      (print \"Error: Operator\
    \ list and operand list are both empty.\")\n      (print \"Error: Operator list\
    \ and operand list are both empty.\")))\n  (if (null? operand)\n    (print \"\
    Error: Operand list is empty.\")\n    (print \"Error: Operator list and operand\
    \ list are both empty.\")))\n", "  (let ((result 0))\n    (for-each (lambda (op)\n\
    \      (if (eq op '+)\n        (+ result operand)\n        (if (eq op '-)\n  \
    \        (+ result (- operand result))\n          (if (eq op '*)\n           \
    \ (+ result (- result operand))\n            (if (eq op '//)\n              (+\
    \ result (/ operand result))\n              (if (eq op '**)\n                (+\
    \ result (** operand result))))))))\n    (+ result result)))\n)\n", "  (if (null?\
    \ operator)\n    (print \"Error: Operator list is empty\")\n    (if (null? operand)\n\
    \      (print \"Error: Operand list is empty\")\n      (print \"Error: Operator\
    \ list and operand list are both empty\")\n      (print \"Error: Operator list\
    \ and operand list are both empty\")\n      (print \"Error: Operator list and\
    \ operand list are both empty\")\n      (print \"Error: Operator list and operand\
    \ list are both empty\")\n      (print \"Error: Operator list and operand list\
    \ are both empty\")\n      (print \"Error: Operator list and operand list are\
    \ both empty\")\n      (print \"Error: Operator list and operand list are both\
    \ empty\")\n      (print \"Error: Operator list and operand list are both empty\"\
    )\n      (print \"Error: Operator list and operand list are both empty\")\n  \
    \    (print \"Error: Operator list and operand list are both empty\")\n      (print\
    \ \"Error: Operator list and operand list are both empty\")\n      (print \"Error:\
    \ Operator list and operand list are both empty\")\n      (print \"Error: Operator\
    \ list and operand list are both empty\")\n      (print \"Error: Operator list\
    \ and operand list are both empty\")\n      (print \"Error: Operator list and\
    \ operand list are both empty\")\n      (print \"Error: Operator list and operand\
    \ list are both empty\")\n      (print \"Error: Operator list and operand list\
    \ are both empty\")\n      (print \"Error: Operator list and operand list are\
    \ both empty\")\n      (print \"Error: Operator list and operand list are both\
    \ empty\")\n      (print \"Error: Operator list and operand list are both empty\"\
    )\n      (print \"Error: Operator list and operand list are both empty\")\n  \
    \    (print \"Error: Operator list and operand list are both empty\")\n      (print\
    \ \"Error: Operator list and operand list are both empty\")\n      (print \"Error:\
    \ Operator list and operand list are both empty\")\n      (print \"Error: Operator\
    \ list and operand list are both empty\")\n      (print \"Error: Operator list\
    \ and operand list are both empty\")\n      (print \"Error: Operator list and\
    \ operand list are both empty\")\n      (print \"Error: Operator list and", " \
    \ (if (null? operator)\n    (print \"Error: No operator!\")\n    (if (null? operand)\n\
    \      (print \"Error: No operand!\")\n      (print \"Error: Operator list is\
    \ empty!\")\n      (print \"Error: Operand list is empty!\")\n      (print \"\
    Error: Operator list is empty!\")\n      (print \"Error: Operand list is empty!\"\
    )\n      (print \"Error: Operator list is empty!\")\n      (print \"Error: Operand\
    \ list is empty!\")\n      (print \"Error: Operator list is empty!\")\n      (print\
    \ \"Error: Operand list is empty!\")\n      (print \"Error: Operator list is empty!\"\
    )\n      (print \"Error: Operand list is empty!\")\n      (print \"Error: Operator\
    \ list is empty!\")\n      (print \"Error: Operand list is empty!\")\n      (print\
    \ \"Error: Operator list is empty!\")\n      (print \"Error: Operand list is empty!\"\
    )\n      (print \"Error: Operator list is empty!\")\n      (print \"Error: Operand\
    \ list is empty!\")\n      (print \"Error: Operator list is empty!\")\n      (print\
    \ \"Error: Operand list is empty!\")\n      (print \"Error: Operator list is empty!\"\
    )\n      (print \"Error: Operand list is empty!\")\n      (print \"Error: Operator\
    \ list is empty!\")\n      (print \"Error: Operand list is empty!\")\n      (print\
    \ \"Error: Operator list is empty!\")\n      (print \"Error: Operand list is empty!\"\
    )\n      (print \"Error: Operator list is empty!\")\n      (print \"Error: Operand\
    \ list is empty!\")\n      (print \"Error: Operator list is empty!\")\n      (print\
    \ \"Error: Operand list is empty!\")\n      (print \"Error: Operator list is empty!\"\
    )\n      (print \"Error: Operand list is empty!\")\n      (print \"Error: Operator\
    \ list is empty!\")\n      (print \"Error: Operand list is empty!\")\n      (print\
    \ \"Error: Operator list is empty!\")\n      (print \"Error: Operand list is empty!\"\
    )\n      (print \"Error: Operator list is empty!\"", "  (let ((result 0))\n  \
    \  (for-each (lambda (x)\n                (let ((op (car operator)))\n       \
    \           (let ((operand (cdr operator)))\n                    (if (null operand)\n\
    \                      (result result)\n                      (if (null op)\n\
    \                        (result operand)\n                        (result (eval\
    \ op operand)))))))\n      operand))\n  result)\n", "  (define (algebra_op op1\
    \ op2)\n    (if (eq op1 '+)\n      (+ op1 op2)\n      (if (eq op1 '-)\n      \
    \  (- op1 op2)\n        (if (eq op1 '*)\n          (* op1 op2)\n          (if\
    \ (eq op1 '//)\n            (// op1 op2)\n            (if (eq op1 '**)\n     \
    \         (** op1 op2)\n              (error \"Unknown operator\"))))))))\n  (define\
    \ (algebra_op_list op1 op2)\n    (if (eq op1 '+)\n      (+ op1 op2)\n      (if\
    \ (eq op1 '-)\n        (- op1 op2)\n        (if (eq op1 '*)\n          (* op1\
    \ op2)\n          (if (eq op1 '//)\n            (// op1 op2)\n            (if\
    \ (eq op1 '**)\n              (** op1 op2)\n              (error \"Unknown operator\"\
    ))))))))\n  (define (algebra_op_list_list op1 op2)\n    (if (eq op1 '+)\n    \
    \  (+ op1 op2)\n      (if (eq op1 '-)\n        (- op1 op2)\n        (if (eq op1\
    \ '*)\n          (* op1 op2)\n          (if (eq op1 '//)\n            (// op1\
    \ op2)\n            (if (eq op1 '**)\n              (** op1 op2)\n           \
    \   (error \"Unknown operator\"))))))))\n  (define (algebra_op_list_list_list\
    \ op1 op2 op3)\n    (if (eq op1 '+)\n      (+ op1 op2 op3)\n      (if (eq op1\
    \ '-)\n        (- op1 op2 op3)\n        (if (eq op1 '*)\n          (* op1 op2\
    \ op3)\n          (if (eq op1 '//)\n            (// op1 op2 op3)\n           \
    \ (if (eq op1 '**)\n              (** op1 op2 op3)\n              (", "  (let\
    \ ((result 0))\n    (for-each (lambda (op)\n      (if (eq op '+)\n        (+ result\
    \ (car operand)))\n      (if (eq op '-)\n        (+ result (- (car operand) (cdr\
    \ operand))))\n      (if (eq op '*)\n        (+ result (* (car operand) (cdr operand))))\n\
    \      (if (eq op '//)\n        (+ result (/ (car operand) (cdr operand))))\n\
    \      (if (eq op '**)\n        (+ result (** (car operand) (cdr operand))))\n\
    \      (error \"Invalid operator\"))))\n  result))\n", "  (let ((result 0))\n\
    \    (for-each (lambda (x)\n                (if (null? (cdr x))\n            \
    \      (+ result (car x))\n                  (+ result (* (car x) (cdr x))))\n\
    \                operand)\n      (setq result (car x))))\n  result)\n", "  (define\
    \ (algebra_op op1 op2)\n    (if (eq? op1 op2)\n      (+ op1 op2)\n      (if (eq?\
    \ op1 '+)\n        (algebra_op op2 op1)\n        (if (eq? op2 '-)\n          (algebra_op\
    \ op1 op2)\n          (if (eq? op2 '*)\n            (algebra_op op2 op1)\n   \
    \         (if (eq? op2 '/)\n              (algebra_op op2 op1)\n             \
    \ (if (eq? op2 '**)\n                (algebra_op op2 op1)\n                (error\
    \ \"Invalid operator\"))))))))))\n", "  (let ((result 0))\n    (for-each (lambda\
    \ (x)\n                (let ((op (car operator)))\n                  (let ((operand\
    \ (cdr operator)))\n                    (if (null operand)\n                 \
    \     (result x)\n                      (result (+ (eval op) (eval operand)))\n\
    \                    )\n                  )\n                )\n             \
    \  operand)\n      (result)\n    )\n  )\n)\n", "  (if (null? operator)\n    (+\
    \ operand)\n    (let ((op (car operator)))\n      (if (null? (cdr operator))\n\
    \        (+ (do_algebra (cdr operator) (car operand)))\n        (let ((op2 (car\
    \ (cdr operator))))\n          (if (null? (cdr (cdr operator)))\n            (+\
    \ (do_algebra (cdr (cdr operator)) (car operand)))\n            (let ((op3 (car\
    \ (cdr (cdr (cdr operator))))))\n              (if (null? (cdr (cdr (cdr (cdr\
    \ operator))))))\n                (+ (do_algebra (cdr (cdr (cdr (cdr operator))))\
    \ (car operand)))\n                (let ((op4 (car (cdr (cdr (cdr (cdr (cdr operator))))))))\n\
    \                  (if (null? (cdr (cdr (cdr (cdr (cdr (cdr operator)))))))\n\
    \                    (+ (do_algebra (cdr (cdr (cdr (cdr (cdr (cdr operator))))))\
    \ (car operand)))\n                    (let ((op5 (car (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr operator))))))))))\n                      (if (null? (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr operator))))))))))\n                        (+\
    \ (do_algebra (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (", "  (let ((result 0))\n    (for-each\
    \ (lambda (op)\n                (if (eq op '+)\n                  (+ result (do_algebra\
    \ operator (cdr operand))))\n                (if (eq op '-)\n                \
    \  (+ result (- (do_algebra operator (cdr operand))))\n                (if (eq\
    \ op '*)\n                  (+ result (* (do_algebra operator (cdr operand))))\n\
    \                (if (eq op '//)\n                  (+ result (/ (do_algebra operator\
    \ (cdr operand))))\n                (if (eq op '**)\n                  (+ result\
    \ (* (do_algebra operator (cdr operand))))\n                (if (eq op '<')\n\
    \                  (+ result (- (do_algebra operator (cdr operand))))\n      \
    \          (if (eq op '>')\n                  (+ result (* (do_algebra operator\
    \ (cdr operand))))\n                (if (eq op '<=')\n                  (+ result\
    \ (- (do_algebra operator (cdr operand))))\n                (if (eq op '>=')\n\
    \                  (+ result (* (do_algebra operator (cdr operand))))\n      \
    \          (if (eq op '=')\n                  (+ result (/ (do_algebra operator\
    \ (cdr operand))))\n                (if (eq op '!=')\n                  (+ result\
    \ (* (do_algebra operator (cdr operand))))\n                (if (eq op 'and')\n\
    \                  (+ result (* (do_algebra operator (cdr operand))))\n      \
    \          (if (eq op 'or')\n                  (+ result (/ (do_algebra operator\
    \ (cdr operand))))\n                (if (eq op 'not')\n                  (+ result\
    \ (* (do_algebra operator (cdr operand))))\n                (if (eq op 'list')\n\
    \                  (+ result (/ (do_algebra operator (cdr operand))))\n      \
    \          (if (eq op 'car')\n                  (+ result (/ (do_algebra operator\
    \ (cdr operand))))\n                (if (eq op 'cdr')\n                  (+ result\
    \ (* (do_algebra operator (cdr operand))))\n                (if (eq op 'cons')\n\
    \                  (+ result", "  (define (algebra_op op1 op2)\n    (if (eq op1\
    \ '+) (+ op1 op2)\n      (if (eq op1 '-) (- op1 op2)\n        (if (eq op1 '*)\
    \ (* op1 op2)\n          (if (eq op1 '//) (/ op1 op2)\n            (if (eq op1\
    \ '**) (** op1 op2)\n              (error \"Invalid operator\"))))))))\n  (if\
    \ (null? operator)\n    (error \"Invalid operand\")\n    (if (null? operand)\n\
    \      (error \"Invalid operand\")\n      (if (null? (cdr operand))\n        (error\
    \ \"Invalid operand\")\n        (if (null? (cdr (cdr operand)))\n          (error\
    \ \"Invalid operand\")\n          (if (null? (cdr (cdr (cdr operand))))\n    \
    \        (error \"Invalid operand\")\n            (if (null? (cdr (cdr (cdr (cdr\
    \ operand))))))\n              (error \"Invalid operand\")\n              (do_algebra\
    \ (cdr operator) (cdr operand))))))))\n  (if (null? operator)\n    (error \"Invalid\
    \ operand\")\n    (if (null? operand)\n      (error \"Invalid operand\")\n   \
    \   (if (null? (cdr operand))\n        (error \"Invalid operand\")\n        (if\
    \ (null? (cdr (cdr operand)))\n          (error \"Invalid operand\")\n       \
    \   (if (null? (cdr (cdr (cdr operand))))\n            (error \"Invalid operand\"\
    )\n            (if (null? (cdr (cdr (cdr (cdr operand))))))\n              (error\
    \ \"Invalid operand\")\n              (do_algebra (cdr operator) (cdr operand))))))))\n\
    \  (if (null? operator)\n    (error \"Invalid operand\")\n    (if (null? operand)\n\
    \      (error \"Invalid operand\")\n      (if (null? (cdr operand))\n        (error\
    \ \"Invalid operand\")\n        (if (null? (cdr (cdr operand)))\n          ",
  "  (if (null? operator)\n    (print \"Error: Operator list is empty.\")\n    (if\
    \ (null? operand)\n      (print \"Error: Operand list is empty.\")\n      (print\
    \ \"Error: Operator list and operand list are both empty.\")\n      (exit)))\n\
    \  (if (null? operand)\n    (print \"Error: Operand list is empty.\")\n    (print\
    \ \"Error: Operator list and operand list are both empty.\")\n    (exit))\n  (if\
    \ (null? operator)\n    (print \"Error: Operator list is empty.\")\n    (print\
    \ \"Error: Operator list and operand list are both empty.\")\n    (exit))\n  (if\
    \ (null? operand)\n    (print \"Error: Operand list is empty.\")\n    (print \"\
    Error: Operator list and operand list are both empty.\")\n    (exit))\n  (if (null?\
    \ operand)\n    (print \"Error: Operand list is empty.\")\n    (print \"Error:\
    \ Operator list and operand list are both empty.\")\n    (exit))\n  (if (null?\
    \ operand)\n    (print \"Error: Operand list is empty.\")\n    (print \"Error:\
    \ Operator list and operand list are both empty.\")\n    (exit))\n  (if (null?\
    \ operand)\n    (print \"Error: Operand list is empty.\")\n    (print \"Error:\
    \ Operator list and operand list are both empty.\")\n    (exit))\n  (if (null?\
    \ operand)\n    (print \"Error: Operand list is empty.\")\n    (print \"Error:\
    \ Operator list and operand list are both empty.\")\n    (exit))\n  (if (null?\
    \ operand)\n    (print \"Error: Operand list is empty.\")\n    (print \"Error:\
    \ Operator list and operand list are both empty.\")\n    (exit))\n  (if (null?\
    \ operand)\n    (print \"Error: Operand list is empty.\")\n    (print \"Error:\
    \ Operator list and operand list are both empty.\")\n    (exit))\n  (if (null?\
    \ operand)\n    (print \"Error: Operand list is empty.\")\n    (print \"Error:\
    \ Operator list and operand list are both empty.\")\n    (exit", "  (define (do_operation\
    \ oprnd1 oprnd2)\n    (if (eq? oprnd1 oprnd2)\n      (+ oprnd1 oprnd2)\n     \
    \ (if (eq? oprnd1 '+)\n        (do_operation oprnd2 oprnd1)\n        (do_operation\
    \ oprnd1 oprnd2)))))\n", "  (if (null? operator)\n    (+ operand)\n    (let ((op\
    \ (car operator)))\n      (if (null? (cdr operator))\n        (+ (do_algebra (cdr\
    \ operator) (car operand)))\n        (let ((op2 (car (cdr operator))))\n     \
    \     (if (null? (cdr (cdr operator)))\n            (+ (do_algebra (cdr (cdr operator))\
    \ (car operand)))\n            (let ((op3 (car (cdr (cdr (cdr operator)))))\n\
    \                  (if (null? (cdr (cdr (cdr (cdr operator))))))\n           \
    \     (+ (do_algebra (cdr (cdr (cdr (cdr (cdr operator)))) (car operand)))\n \
    \                 (+ (do_algebra (cdr (cdr (cdr (cdr (cdr (cdr operator))))))\
    \ (car operand)))\n                  (+ (do_algebra (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (c", "  (let ((result 0))\n   \
    \ (for-each (lambda (op)\n      (if (eq op '+)\n        (+ result operand)\n \
    \       (if (eq op '-)\n          (+ result (- operand result))\n          (if\
    \ (eq op '*)\n            (+ result (- result operand))\n            (if (eq op\
    \ '//)\n              (+ result (/ operand result))\n              (if (eq op\
    \ '**)\n                (+ result (** operand result))))))))\n    (+ result result)))\n\
    )\n", "  (if (null? operator)\n    (print \"Operator list is empty!\")\n    (print\
    \ \"Operator list is: \")\n    (print operator)\n    (print \"Operand list is:\
    \ \")\n    (print operand)\n    (print \"Result is: \")\n    (print (do_algebra_op\
    \ operator operand)))\n  (if (null? operand)\n    (print \"Operand list is empty!\"\
    )\n    (print \"Operator list is: \")\n    (print operator)\n    (print \"Operand\
    \ list is: \")\n    (print operand)\n    (print \"Result is: \")\n    (print (do_algebra_op\
    \ operator operand)))\n  (if (null? operator)\n    (print \"Operator list is empty!\"\
    )\n    (print \"Operator list is: \")\n    (print operator)\n    (print \"Operand\
    \ list is: \")\n    (print operand)\n    (print \"Result is: \")\n    (print (do_algebra_op\
    \ operator operand)))\n  (if (null? operand)\n    (print \"Operator list is empty!\"\
    )\n    (print \"Operator list is: \")\n    (print operator)\n    (print \"Operand\
    \ list is: \")\n    (print operand)\n    (print \"Result is: \")\n    (print (do_algebra_op\
    \ operator operand)))\n  (if (null? operator)\n    (print \"Operator list is empty!\"\
    )\n    (print \"Operator list is: \")\n    (print operator)\n    (print \"Operand\
    \ list is: \")\n    (print operand)\n    (print \"Result is: \")\n    (print (do_algebra_op\
    \ operator operand)))\n  (if (null? operand)\n    (print \"Operator list is empty!\"\
    )\n    (print \"Operator list is: \")\n    (print operator)\n    (print \"Operand\
    \ list is: \")\n    (print operand)\n    (print \"Result is: \")\n    (print (do_algebra_op\
    \ operator operand)))\n  (if (null? operator)\n    (", "  (define (do_operation\
    \ oprnd1 oprnd2)\n    (if (eq? oprnd1 oprnd2)\n      (+ oprnd1 oprnd2)\n     \
    \ (if (eq? oprnd1 '+)\n        (do_operation oprnd1 oprnd2)\n        (if (eq?\
    \ oprnd1 '-)\n          (do_operation oprnd1 oprnd2)\n          (if (eq? oprnd1\
    \ '*)\n            (do_operation oprnd1 oprnd2)\n            (if (eq? oprnd1 '/)\n\
    \              (do_operation oprnd1 oprnd2)\n              (if (eq? oprnd1 '**)\n\
    \                (do_operation oprnd1 oprnd2)\n                (error \"Invalid\
    \ operator\"))))))))))\n  (if (empty? operator)\n    (error \"Invalid operator\
    \ list\")))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
